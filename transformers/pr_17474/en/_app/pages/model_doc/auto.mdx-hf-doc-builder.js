import{S as lkt,i as ikt,s as dkt,e as a,k as l,w as F,t as o,M as ckt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as fkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as TXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function mkt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,LA,_f,je,We,hi,yn,xA,Ln,xn,$A,pi,$n,kA,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),LA=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),xA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),$A=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),kA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var J$=s(p);m=r(J$,"NewModelConfig"),J$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var Y$=s(fi);pf=r(Y$,"model_type"),Y$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var K$=s(mi);gi=r(K$,'"new-model"'),K$.forEach(t),LA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),xA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var Z$=s(Ln);xn=r(Z$,"PreTrainedModel"),Z$.forEach(t),$A=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),kA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var ek=s(_i);uf=r(ek,"NewModelConfig"),ek.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,LA),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,xA),e(je,Ln),e(Ln,xn),e(je,$A),e(je,pi),e(pi,$n),e(je,kA),e(je,_i),e(_i,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,LA,_f,je,We,hi,yn,xA,Ln,xn,$A,pi,$n,kA,_i,uf,Ca,Qe,Ae,J$,ui,Y$,K$,Eo,wa,Z$,bf,ek,xOe,bqe,bi,vf,_oe,SA,$Oe,uoe,kOe,vqe,kn,SOe,boe,ROe,POe,voe,BOe,IOe,Fqe,RA,Tqe,ok,NOe,Mqe,Ff,Eqe,vi,Tf,Foe,PA,qOe,Toe,jOe,Cqe,Co,BA,DOe,IA,GOe,rk,OOe,VOe,XOe,NA,zOe,Moe,WOe,QOe,HOe,Er,qA,UOe,Eoe,JOe,YOe,Fi,KOe,Coe,ZOe,eVe,woe,oVe,rVe,tVe,A,Mf,Aoe,aVe,nVe,tk,sVe,lVe,iVe,Ef,yoe,dVe,cVe,ak,fVe,mVe,gVe,Cf,Loe,hVe,pVe,nk,_Ve,uVe,bVe,wf,xoe,vVe,FVe,sk,TVe,MVe,EVe,Af,$oe,CVe,wVe,lk,AVe,yVe,LVe,yf,koe,xVe,$Ve,ik,kVe,SVe,RVe,Lf,Soe,PVe,BVe,dk,IVe,NVe,qVe,xf,Roe,jVe,DVe,ck,GVe,OVe,VVe,$f,Poe,XVe,zVe,fk,WVe,QVe,HVe,kf,Boe,UVe,JVe,mk,YVe,KVe,ZVe,Sf,Ioe,eXe,oXe,gk,rXe,tXe,aXe,Rf,Noe,nXe,sXe,hk,lXe,iXe,dXe,Pf,qoe,cXe,fXe,pk,mXe,gXe,hXe,Bf,joe,pXe,_Xe,_k,uXe,bXe,vXe,If,Doe,FXe,TXe,uk,MXe,EXe,CXe,Nf,Goe,wXe,AXe,bk,yXe,LXe,xXe,qf,Ooe,$Xe,kXe,vk,SXe,RXe,PXe,jf,Voe,BXe,IXe,Fk,NXe,qXe,jXe,Df,Xoe,DXe,GXe,Tk,OXe,VXe,XXe,Gf,zoe,zXe,WXe,Mk,QXe,HXe,UXe,Of,Woe,JXe,YXe,Ek,KXe,ZXe,eze,Vf,Qoe,oze,rze,Ck,tze,aze,nze,Xf,Hoe,sze,lze,wk,ize,dze,cze,zf,Uoe,fze,mze,Ak,gze,hze,pze,Wf,Joe,_ze,uze,yk,bze,vze,Fze,Qf,Yoe,Tze,Mze,Lk,Eze,Cze,wze,Hf,Koe,Aze,yze,xk,Lze,xze,$ze,Uf,Zoe,kze,Sze,$k,Rze,Pze,Bze,Jf,ere,Ize,Nze,kk,qze,jze,Dze,Yf,ore,Gze,Oze,Sk,Vze,Xze,zze,Kf,rre,Wze,Qze,Rk,Hze,Uze,Jze,Zf,tre,Yze,Kze,Pk,Zze,eWe,oWe,em,are,rWe,tWe,Bk,aWe,nWe,sWe,om,nre,lWe,iWe,Ik,dWe,cWe,fWe,rm,sre,mWe,gWe,Nk,hWe,pWe,_We,tm,lre,uWe,bWe,qk,vWe,FWe,TWe,am,ire,MWe,EWe,jk,CWe,wWe,AWe,nm,dre,yWe,LWe,Dk,xWe,$We,kWe,sm,cre,SWe,RWe,Gk,PWe,BWe,IWe,lm,fre,NWe,qWe,Ok,jWe,DWe,GWe,im,mre,OWe,VWe,Vk,XWe,zWe,WWe,dm,gre,QWe,HWe,Xk,UWe,JWe,YWe,cm,hre,KWe,ZWe,zk,eQe,oQe,rQe,fm,pre,tQe,aQe,Wk,nQe,sQe,lQe,mm,_re,iQe,dQe,Qk,cQe,fQe,mQe,gm,ure,gQe,hQe,Hk,pQe,_Qe,uQe,hm,bre,bQe,vQe,Uk,FQe,TQe,MQe,pm,vre,EQe,CQe,Jk,wQe,AQe,yQe,_m,Fre,LQe,xQe,Yk,$Qe,kQe,SQe,um,Tre,RQe,PQe,Kk,BQe,IQe,NQe,bm,Mre,qQe,jQe,Zk,DQe,GQe,OQe,vm,Ere,VQe,XQe,eS,zQe,WQe,QQe,Fm,Cre,HQe,UQe,oS,JQe,YQe,KQe,Tm,wre,ZQe,eHe,rS,oHe,rHe,tHe,Mm,Are,aHe,nHe,tS,sHe,lHe,iHe,Em,yre,dHe,cHe,aS,fHe,mHe,gHe,Cm,Lre,hHe,pHe,nS,_He,uHe,bHe,wm,xre,vHe,FHe,sS,THe,MHe,EHe,Am,$re,CHe,wHe,lS,AHe,yHe,LHe,ym,kre,xHe,$He,iS,kHe,SHe,RHe,Lm,Sre,PHe,BHe,dS,IHe,NHe,qHe,xm,Rre,jHe,DHe,cS,GHe,OHe,VHe,$m,Pre,XHe,zHe,fS,WHe,QHe,HHe,km,Bre,UHe,JHe,mS,YHe,KHe,ZHe,Sm,Ire,eUe,oUe,gS,rUe,tUe,aUe,Rm,Nre,nUe,sUe,hS,lUe,iUe,dUe,Pm,qre,cUe,fUe,pS,mUe,gUe,hUe,Bm,jre,pUe,_Ue,_S,uUe,bUe,vUe,Im,Dre,FUe,TUe,uS,MUe,EUe,CUe,Nm,Gre,wUe,AUe,bS,yUe,LUe,xUe,qm,Ore,$Ue,kUe,vS,SUe,RUe,PUe,jm,Vre,BUe,IUe,FS,NUe,qUe,jUe,Dm,Xre,DUe,GUe,TS,OUe,VUe,XUe,Gm,zre,zUe,WUe,MS,QUe,HUe,UUe,Om,Wre,JUe,YUe,ES,KUe,ZUe,eJe,Vm,Qre,oJe,rJe,CS,tJe,aJe,nJe,Xm,Hre,sJe,lJe,wS,iJe,dJe,cJe,zm,Ure,fJe,mJe,AS,gJe,hJe,pJe,Wm,Jre,_Je,uJe,yS,bJe,vJe,FJe,Qm,Yre,TJe,MJe,LS,EJe,CJe,wJe,Hm,Kre,AJe,yJe,xS,LJe,xJe,$Je,Um,Zre,kJe,SJe,$S,RJe,PJe,BJe,Jm,ete,IJe,NJe,kS,qJe,jJe,DJe,Ym,ote,GJe,OJe,SS,VJe,XJe,zJe,Km,rte,WJe,QJe,RS,HJe,UJe,JJe,Zm,tte,YJe,KJe,PS,ZJe,eYe,oYe,eg,ate,rYe,tYe,BS,aYe,nYe,sYe,og,nte,lYe,iYe,IS,dYe,cYe,fYe,rg,ste,mYe,gYe,NS,hYe,pYe,_Ye,tg,lte,uYe,bYe,qS,vYe,FYe,TYe,ag,ite,MYe,EYe,jS,CYe,wYe,AYe,ng,dte,yYe,LYe,DS,xYe,$Ye,kYe,sg,cte,SYe,RYe,GS,PYe,BYe,IYe,lg,fte,NYe,qYe,OS,jYe,DYe,GYe,ig,mte,OYe,VYe,VS,XYe,zYe,WYe,dg,gte,QYe,HYe,XS,UYe,JYe,YYe,cg,hte,KYe,ZYe,zS,eKe,oKe,rKe,fg,pte,tKe,aKe,WS,nKe,sKe,lKe,mg,_te,iKe,dKe,QS,cKe,fKe,mKe,gg,ute,gKe,hKe,HS,pKe,_Ke,uKe,hg,bte,bKe,vKe,US,FKe,TKe,MKe,pg,vte,EKe,CKe,JS,wKe,AKe,yKe,_g,Fte,LKe,xKe,YS,$Ke,kKe,SKe,ug,Tte,RKe,PKe,KS,BKe,IKe,NKe,bg,Mte,qKe,jKe,ZS,DKe,GKe,OKe,vg,Ete,VKe,XKe,eR,zKe,WKe,QKe,Fg,Cte,HKe,UKe,oR,JKe,YKe,KKe,Tg,wte,ZKe,eZe,rR,oZe,rZe,tZe,Mg,Ate,aZe,nZe,tR,sZe,lZe,iZe,Eg,yte,dZe,cZe,aR,fZe,mZe,gZe,Cg,hZe,wg,jA,pZe,Lte,_Ze,wqe,Ti,Ag,xte,DA,uZe,$te,bZe,Aqe,wo,GA,vZe,OA,FZe,nR,TZe,MZe,EZe,VA,CZe,kte,wZe,AZe,yZe,Cr,XA,LZe,Ste,xZe,$Ze,Aa,kZe,Rte,SZe,RZe,Pte,PZe,BZe,Bte,IZe,NZe,qZe,k,Sn,Ite,jZe,DZe,sR,GZe,OZe,lR,VZe,XZe,zZe,Rn,Nte,WZe,QZe,iR,HZe,UZe,dR,JZe,YZe,KZe,Pn,qte,ZZe,eeo,cR,oeo,reo,fR,teo,aeo,neo,yg,jte,seo,leo,mR,ieo,deo,ceo,Bn,Dte,feo,meo,gR,geo,heo,hR,peo,_eo,ueo,Lg,Gte,beo,veo,pR,Feo,Teo,Meo,xg,Ote,Eeo,Ceo,_R,weo,Aeo,yeo,$g,Vte,Leo,xeo,uR,$eo,keo,Seo,In,Xte,Reo,Peo,bR,Beo,Ieo,vR,Neo,qeo,jeo,Nn,zte,Deo,Geo,FR,Oeo,Veo,TR,Xeo,zeo,Weo,qn,Wte,Qeo,Heo,MR,Ueo,Jeo,ER,Yeo,Keo,Zeo,kg,Qte,eoo,ooo,CR,roo,too,aoo,Sg,Hte,noo,soo,wR,loo,ioo,doo,Rg,Ute,coo,foo,AR,moo,goo,hoo,jn,Jte,poo,_oo,yR,uoo,boo,LR,voo,Foo,Too,Pg,Yte,Moo,Eoo,xR,Coo,woo,Aoo,Dn,Kte,yoo,Loo,$R,xoo,$oo,kR,koo,Soo,Roo,Gn,Zte,Poo,Boo,SR,Ioo,Noo,RR,qoo,joo,Doo,On,eae,Goo,Ooo,PR,Voo,Xoo,BR,zoo,Woo,Qoo,Bg,oae,Hoo,Uoo,IR,Joo,Yoo,Koo,Vn,rae,Zoo,ero,NR,oro,rro,qR,tro,aro,nro,Xn,tae,sro,lro,jR,iro,dro,DR,cro,fro,mro,zn,aae,gro,hro,GR,pro,_ro,OR,uro,bro,vro,Wn,nae,Fro,Tro,VR,Mro,Ero,XR,Cro,wro,Aro,Qn,sae,yro,Lro,zR,xro,$ro,WR,kro,Sro,Rro,Hn,lae,Pro,Bro,QR,Iro,Nro,HR,qro,jro,Dro,Ig,iae,Gro,Oro,UR,Vro,Xro,zro,Un,dae,Wro,Qro,JR,Hro,Uro,YR,Jro,Yro,Kro,Ng,cae,Zro,eto,KR,oto,rto,tto,Jn,fae,ato,nto,ZR,sto,lto,eP,ito,dto,cto,Yn,mae,fto,mto,oP,gto,hto,rP,pto,_to,uto,Kn,gae,bto,vto,tP,Fto,Tto,aP,Mto,Eto,Cto,qg,hae,wto,Ato,nP,yto,Lto,xto,Zn,pae,$to,kto,sP,Sto,Rto,lP,Pto,Bto,Ito,es,_ae,Nto,qto,iP,jto,Dto,dP,Gto,Oto,Vto,jg,uae,Xto,zto,cP,Wto,Qto,Hto,os,bae,Uto,Jto,fP,Yto,Kto,mP,Zto,eao,oao,rs,vae,rao,tao,gP,aao,nao,hP,sao,lao,iao,ts,Fae,dao,cao,pP,fao,mao,_P,gao,hao,pao,as,Tae,_ao,uao,uP,bao,vao,bP,Fao,Tao,Mao,ns,Mae,Eao,Cao,vP,wao,Aao,FP,yao,Lao,xao,ss,Eae,$ao,kao,TP,Sao,Rao,MP,Pao,Bao,Iao,ls,Cae,Nao,qao,EP,jao,Dao,CP,Gao,Oao,Vao,Dg,wae,Xao,zao,wP,Wao,Qao,Hao,is,Aae,Uao,Jao,AP,Yao,Kao,yP,Zao,eno,ono,Gg,yae,rno,tno,LP,ano,nno,sno,Og,Lae,lno,ino,xP,dno,cno,fno,ds,xae,mno,gno,$P,hno,pno,kP,_no,uno,bno,cs,$ae,vno,Fno,SP,Tno,Mno,RP,Eno,Cno,wno,fs,kae,Ano,yno,PP,Lno,xno,BP,$no,kno,Sno,Vg,Sae,Rno,Pno,IP,Bno,Ino,Nno,ms,Rae,qno,jno,NP,Dno,Gno,qP,Ono,Vno,Xno,gs,Pae,zno,Wno,jP,Qno,Hno,DP,Uno,Jno,Yno,hs,Bae,Kno,Zno,GP,eso,oso,OP,rso,tso,aso,ps,Iae,nso,sso,VP,lso,iso,XP,dso,cso,fso,_s,Nae,mso,gso,zP,hso,pso,WP,_so,uso,bso,Xg,qae,vso,Fso,QP,Tso,Mso,Eso,us,jae,Cso,wso,HP,Aso,yso,UP,Lso,xso,$so,zg,Dae,kso,Sso,JP,Rso,Pso,Bso,Wg,Gae,Iso,Nso,YP,qso,jso,Dso,Qg,Oae,Gso,Oso,KP,Vso,Xso,zso,Hg,Vae,Wso,Qso,ZP,Hso,Uso,Jso,bs,Xae,Yso,Kso,eB,Zso,elo,oB,olo,rlo,tlo,Ug,zae,alo,nlo,rB,slo,llo,ilo,vs,Wae,dlo,clo,tB,flo,mlo,aB,glo,hlo,plo,Fs,Qae,_lo,ulo,nB,blo,vlo,sB,Flo,Tlo,Mlo,Ts,Hae,Elo,Clo,lB,wlo,Alo,iB,ylo,Llo,xlo,Ms,Uae,$lo,klo,dB,Slo,Rlo,cB,Plo,Blo,Ilo,Es,Jae,Nlo,qlo,fB,jlo,Dlo,mB,Glo,Olo,Vlo,Cs,Yae,Xlo,zlo,gB,Wlo,Qlo,hB,Hlo,Ulo,Jlo,Jg,Kae,Ylo,Klo,pB,Zlo,eio,oio,Yg,Zae,rio,tio,_B,aio,nio,sio,ws,ene,lio,iio,uB,dio,cio,bB,fio,mio,gio,As,one,hio,pio,vB,_io,uio,FB,bio,vio,Fio,ys,rne,Tio,Mio,TB,Eio,Cio,MB,wio,Aio,yio,Kg,tne,Lio,xio,EB,$io,kio,Sio,Zg,ane,Rio,Pio,CB,Bio,Iio,Nio,eh,nne,qio,jio,wB,Dio,Gio,Oio,Ls,sne,Vio,Xio,AB,zio,Wio,yB,Qio,Hio,Uio,oh,lne,Jio,Yio,LB,Kio,Zio,edo,rh,ine,odo,rdo,xB,tdo,ado,ndo,th,dne,sdo,ldo,$B,ido,ddo,cdo,xs,cne,fdo,mdo,kB,gdo,hdo,SB,pdo,_do,udo,ah,fne,bdo,vdo,RB,Fdo,Tdo,Mdo,nh,mne,Edo,Cdo,PB,wdo,Ado,ydo,$s,gne,Ldo,xdo,BB,$do,kdo,IB,Sdo,Rdo,Pdo,ks,hne,Bdo,Ido,NB,Ndo,qdo,qB,jdo,Ddo,Gdo,Ss,pne,Odo,Vdo,jB,Xdo,zdo,DB,Wdo,Qdo,Hdo,Rs,_ne,Udo,Jdo,GB,Ydo,Kdo,OB,Zdo,eco,oco,sh,rco,lh,zA,tco,une,aco,yqe,Mi,ih,bne,WA,nco,vne,sco,Lqe,Ao,QA,lco,HA,ico,VB,dco,cco,fco,UA,mco,Fne,gco,hco,pco,He,JA,_co,Tne,uco,bco,ya,vco,Mne,Fco,Tco,Ene,Mco,Eco,Cne,Cco,wco,Aco,Y,dh,wne,yco,Lco,XB,xco,$co,kco,ch,Ane,Sco,Rco,zB,Pco,Bco,Ico,fh,yne,Nco,qco,WB,jco,Dco,Gco,mh,Lne,Oco,Vco,QB,Xco,zco,Wco,gh,xne,Qco,Hco,HB,Uco,Jco,Yco,hh,$ne,Kco,Zco,UB,efo,ofo,rfo,ph,kne,tfo,afo,JB,nfo,sfo,lfo,_h,Sne,ifo,dfo,YB,cfo,ffo,mfo,uh,Rne,gfo,hfo,KB,pfo,_fo,ufo,bh,Pne,bfo,vfo,ZB,Ffo,Tfo,Mfo,vh,Bne,Efo,Cfo,eI,wfo,Afo,yfo,Fh,Ine,Lfo,xfo,oI,$fo,kfo,Sfo,Th,Nne,Rfo,Pfo,rI,Bfo,Ifo,Nfo,Mh,qne,qfo,jfo,tI,Dfo,Gfo,Ofo,Eh,jne,Vfo,Xfo,aI,zfo,Wfo,Qfo,Ch,Dne,Hfo,Ufo,nI,Jfo,Yfo,Kfo,wh,Gne,Zfo,emo,sI,omo,rmo,tmo,Ah,One,amo,nmo,lI,smo,lmo,imo,yh,Vne,dmo,cmo,iI,fmo,mmo,gmo,Lh,Xne,hmo,pmo,dI,_mo,umo,bmo,xh,zne,vmo,Fmo,cI,Tmo,Mmo,Emo,$h,Wne,Cmo,wmo,fI,Amo,ymo,Lmo,kh,Qne,xmo,$mo,mI,kmo,Smo,Rmo,Sh,Hne,Pmo,Bmo,gI,Imo,Nmo,qmo,Rh,Une,jmo,Dmo,hI,Gmo,Omo,Vmo,Ph,Jne,Xmo,zmo,pI,Wmo,Qmo,Hmo,Bh,Yne,Umo,Jmo,_I,Ymo,Kmo,Zmo,Ih,Kne,ego,ogo,uI,rgo,tgo,ago,Nh,Zne,ngo,sgo,bI,lgo,igo,dgo,qh,cgo,jh,fgo,Dh,YA,mgo,ese,ggo,xqe,Ei,Gh,ose,KA,hgo,rse,pgo,$qe,yo,ZA,_go,ey,ugo,vI,bgo,vgo,Fgo,oy,Tgo,tse,Mgo,Ego,Cgo,Ue,ry,wgo,ase,Ago,ygo,Ci,Lgo,nse,xgo,$go,sse,kgo,Sgo,Rgo,he,Oh,lse,Pgo,Bgo,FI,Igo,Ngo,qgo,Vh,ise,jgo,Dgo,dse,Ggo,Ogo,Vgo,Xh,cse,Xgo,zgo,TI,Wgo,Qgo,Hgo,zh,fse,Ugo,Jgo,MI,Ygo,Kgo,Zgo,Wh,mse,eho,oho,EI,rho,tho,aho,Qh,gse,nho,sho,CI,lho,iho,dho,Hh,hse,cho,fho,wI,mho,gho,hho,Uh,pse,pho,_ho,AI,uho,bho,vho,Jh,_se,Fho,Tho,yI,Mho,Eho,Cho,Yh,use,who,Aho,LI,yho,Lho,xho,Kh,bse,$ho,kho,xI,Sho,Rho,Pho,Zh,vse,Bho,Iho,$I,Nho,qho,jho,ep,Fse,Dho,Gho,kI,Oho,Vho,Xho,op,Tse,zho,Who,SI,Qho,Hho,Uho,rp,Mse,Jho,Yho,RI,Kho,Zho,epo,tp,Ese,opo,rpo,PI,tpo,apo,npo,ap,Cse,spo,lpo,BI,ipo,dpo,cpo,np,fpo,sp,mpo,lp,ty,gpo,wse,hpo,kqe,wi,ip,Ase,ay,ppo,yse,_po,Sqe,Lo,ny,upo,Ai,bpo,II,vpo,Fpo,NI,Tpo,Mpo,Epo,sy,Cpo,Lse,wpo,Apo,ypo,tt,ly,Lpo,xse,xpo,$po,yi,kpo,$se,Spo,Rpo,qI,Ppo,Bpo,Ipo,dp,Npo,Je,iy,qpo,kse,jpo,Dpo,La,Gpo,Sse,Opo,Vpo,Rse,Xpo,zpo,Pse,Wpo,Qpo,Hpo,x,cp,Bse,Upo,Jpo,jI,Ypo,Kpo,Zpo,fp,Ise,e_o,o_o,DI,r_o,t_o,a_o,mp,Nse,n_o,s_o,GI,l_o,i_o,d_o,gp,qse,c_o,f_o,OI,m_o,g_o,h_o,hp,jse,p_o,__o,VI,u_o,b_o,v_o,pp,Dse,F_o,T_o,XI,M_o,E_o,C_o,_p,Gse,w_o,A_o,zI,y_o,L_o,x_o,up,Ose,$_o,k_o,WI,S_o,R_o,P_o,bp,Vse,B_o,I_o,QI,N_o,q_o,j_o,vp,Xse,D_o,G_o,HI,O_o,V_o,X_o,Fp,zse,z_o,W_o,UI,Q_o,H_o,U_o,Tp,Wse,J_o,Y_o,JI,K_o,Z_o,euo,Mp,Qse,ouo,ruo,YI,tuo,auo,nuo,Ep,Hse,suo,luo,KI,iuo,duo,cuo,Cp,Use,fuo,muo,ZI,guo,huo,puo,wp,Jse,_uo,uuo,eN,buo,vuo,Fuo,Ap,Yse,Tuo,Muo,oN,Euo,Cuo,wuo,yp,Kse,Auo,yuo,rN,Luo,xuo,$uo,Lp,Zse,kuo,Suo,tN,Ruo,Puo,Buo,xp,ele,Iuo,Nuo,aN,quo,juo,Duo,$p,ole,Guo,Ouo,nN,Vuo,Xuo,zuo,kp,rle,Wuo,Quo,sN,Huo,Uuo,Juo,Sp,tle,Yuo,Kuo,lN,Zuo,e4o,o4o,Rp,ale,r4o,t4o,iN,a4o,n4o,s4o,Pp,nle,l4o,i4o,dN,d4o,c4o,f4o,Bp,sle,m4o,g4o,cN,h4o,p4o,_4o,Ip,lle,u4o,b4o,fN,v4o,F4o,T4o,Np,ile,M4o,E4o,mN,C4o,w4o,A4o,qp,dle,y4o,L4o,gN,x4o,$4o,k4o,jp,cle,S4o,R4o,hN,P4o,B4o,I4o,Dp,fle,N4o,q4o,pN,j4o,D4o,G4o,Gp,mle,O4o,V4o,_N,X4o,z4o,W4o,Op,gle,Q4o,H4o,uN,U4o,J4o,Y4o,Ps,hle,K4o,Z4o,bN,e1o,o1o,vN,r1o,t1o,a1o,Vp,ple,n1o,s1o,FN,l1o,i1o,d1o,Xp,_le,c1o,f1o,TN,m1o,g1o,h1o,zp,ule,p1o,_1o,MN,u1o,b1o,v1o,Wp,ble,F1o,T1o,EN,M1o,E1o,C1o,Qp,vle,w1o,A1o,CN,y1o,L1o,x1o,Hp,Fle,$1o,k1o,wN,S1o,R1o,P1o,Up,Tle,B1o,I1o,AN,N1o,q1o,j1o,Jp,Mle,D1o,G1o,yN,O1o,V1o,X1o,Yp,Ele,z1o,W1o,LN,Q1o,H1o,U1o,Kp,Cle,J1o,Y1o,xN,K1o,Z1o,e7o,Zp,wle,o7o,r7o,$N,t7o,a7o,n7o,e_,Ale,s7o,l7o,kN,i7o,d7o,c7o,o_,yle,f7o,m7o,SN,g7o,h7o,p7o,r_,Lle,_7o,u7o,RN,b7o,v7o,F7o,t_,xle,T7o,M7o,PN,E7o,C7o,w7o,a_,$le,A7o,y7o,BN,L7o,x7o,$7o,n_,kle,k7o,S7o,IN,R7o,P7o,B7o,s_,Sle,I7o,N7o,NN,q7o,j7o,D7o,l_,Rle,G7o,O7o,qN,V7o,X7o,z7o,i_,Ple,W7o,Q7o,jN,H7o,U7o,J7o,d_,Ble,Y7o,K7o,DN,Z7o,ebo,obo,c_,Ile,rbo,tbo,GN,abo,nbo,sbo,f_,Nle,lbo,ibo,ON,dbo,cbo,fbo,m_,qle,mbo,gbo,VN,hbo,pbo,_bo,g_,jle,ubo,bbo,XN,vbo,Fbo,Tbo,h_,Dle,Mbo,Ebo,zN,Cbo,wbo,Abo,p_,Gle,ybo,Lbo,WN,xbo,$bo,kbo,__,Ole,Sbo,Rbo,QN,Pbo,Bbo,Ibo,u_,Vle,Nbo,qbo,HN,jbo,Dbo,Gbo,b_,Xle,Obo,Vbo,UN,Xbo,zbo,Wbo,v_,zle,Qbo,Hbo,JN,Ubo,Jbo,Ybo,F_,Wle,Kbo,Zbo,YN,e2o,o2o,r2o,T_,Qle,t2o,a2o,KN,n2o,s2o,l2o,M_,Hle,i2o,d2o,ZN,c2o,f2o,m2o,E_,Ule,g2o,h2o,eq,p2o,_2o,u2o,C_,Jle,b2o,v2o,oq,F2o,T2o,M2o,w_,Yle,E2o,C2o,rq,w2o,A2o,y2o,A_,Kle,L2o,x2o,tq,$2o,k2o,S2o,y_,Zle,R2o,P2o,aq,B2o,I2o,N2o,L_,eie,q2o,j2o,nq,D2o,G2o,O2o,x_,oie,V2o,X2o,sq,z2o,W2o,Q2o,$_,rie,H2o,U2o,lq,J2o,Y2o,K2o,k_,tie,Z2o,evo,iq,ovo,rvo,tvo,S_,aie,avo,nvo,dq,svo,lvo,ivo,R_,nie,dvo,cvo,cq,fvo,mvo,gvo,P_,sie,hvo,pvo,fq,_vo,uvo,bvo,B_,lie,vvo,Fvo,mq,Tvo,Mvo,Evo,I_,iie,Cvo,wvo,gq,Avo,yvo,Lvo,N_,die,xvo,$vo,hq,kvo,Svo,Rvo,q_,cie,Pvo,Bvo,pq,Ivo,Nvo,qvo,j_,fie,jvo,Dvo,_q,Gvo,Ovo,Vvo,D_,mie,Xvo,zvo,uq,Wvo,Qvo,Hvo,G_,gie,Uvo,Jvo,bq,Yvo,Kvo,Zvo,O_,hie,eFo,oFo,vq,rFo,tFo,aFo,V_,pie,nFo,sFo,Fq,lFo,iFo,dFo,X_,_ie,cFo,fFo,Tq,mFo,gFo,hFo,z_,uie,pFo,_Fo,Mq,uFo,bFo,vFo,W_,bie,FFo,TFo,Eq,MFo,EFo,CFo,Q_,vie,wFo,AFo,Cq,yFo,LFo,xFo,H_,Fie,$Fo,kFo,wq,SFo,RFo,PFo,U_,Tie,BFo,IFo,Aq,NFo,qFo,jFo,J_,Mie,DFo,GFo,yq,OFo,VFo,XFo,Y_,Eie,zFo,WFo,Lq,QFo,HFo,UFo,K_,Cie,JFo,YFo,xq,KFo,ZFo,eTo,Z_,wie,oTo,rTo,$q,tTo,aTo,nTo,eu,Aie,sTo,lTo,kq,iTo,dTo,cTo,ou,yie,fTo,mTo,Sq,gTo,hTo,pTo,ru,Lie,_To,uTo,Rq,bTo,vTo,FTo,tu,xie,TTo,MTo,Pq,ETo,CTo,wTo,au,ATo,$ie,yTo,LTo,kie,xTo,$To,nu,Rqe,Li,su,Sie,dy,kTo,Rie,STo,Pqe,xo,cy,RTo,xi,PTo,Bq,BTo,ITo,Iq,NTo,qTo,jTo,fy,DTo,Pie,GTo,OTo,VTo,at,my,XTo,Bie,zTo,WTo,$i,QTo,Iie,HTo,UTo,Nq,JTo,YTo,KTo,lu,ZTo,Ye,gy,eMo,Nie,oMo,rMo,xa,tMo,qie,aMo,nMo,jie,sMo,lMo,Die,iMo,dMo,cMo,G,iu,Gie,fMo,mMo,qq,gMo,hMo,pMo,du,Oie,_Mo,uMo,jq,bMo,vMo,FMo,cu,Vie,TMo,MMo,Dq,EMo,CMo,wMo,fu,Xie,AMo,yMo,Gq,LMo,xMo,$Mo,mu,zie,kMo,SMo,Oq,RMo,PMo,BMo,gu,Wie,IMo,NMo,Vq,qMo,jMo,DMo,hu,Qie,GMo,OMo,Xq,VMo,XMo,zMo,pu,Hie,WMo,QMo,zq,HMo,UMo,JMo,_u,Uie,YMo,KMo,Wq,ZMo,eEo,oEo,uu,Jie,rEo,tEo,Qq,aEo,nEo,sEo,bu,Yie,lEo,iEo,Hq,dEo,cEo,fEo,vu,Kie,mEo,gEo,Uq,hEo,pEo,_Eo,Fu,Zie,uEo,bEo,Jq,vEo,FEo,TEo,Tu,ede,MEo,EEo,Yq,CEo,wEo,AEo,Mu,ode,yEo,LEo,Kq,xEo,$Eo,kEo,Eu,rde,SEo,REo,Zq,PEo,BEo,IEo,Cu,tde,NEo,qEo,ej,jEo,DEo,GEo,wu,ade,OEo,VEo,oj,XEo,zEo,WEo,Au,nde,QEo,HEo,rj,UEo,JEo,YEo,yu,sde,KEo,ZEo,tj,eCo,oCo,rCo,Lu,lde,tCo,aCo,aj,nCo,sCo,lCo,xu,ide,iCo,dCo,nj,cCo,fCo,mCo,$u,dde,gCo,hCo,sj,pCo,_Co,uCo,ku,cde,bCo,vCo,lj,FCo,TCo,MCo,Su,fde,ECo,CCo,ij,wCo,ACo,yCo,Ru,mde,LCo,xCo,dj,$Co,kCo,SCo,Pu,gde,RCo,PCo,cj,BCo,ICo,NCo,Bu,hde,qCo,jCo,fj,DCo,GCo,OCo,Iu,pde,VCo,XCo,mj,zCo,WCo,QCo,Nu,_de,HCo,UCo,gj,JCo,YCo,KCo,qu,ude,ZCo,e5o,hj,o5o,r5o,t5o,ju,bde,a5o,n5o,pj,s5o,l5o,i5o,Du,vde,d5o,c5o,_j,f5o,m5o,g5o,Gu,Fde,h5o,p5o,uj,_5o,u5o,b5o,Ou,Tde,v5o,F5o,bj,T5o,M5o,E5o,Vu,Mde,C5o,w5o,vj,A5o,y5o,L5o,Xu,Ede,x5o,$5o,Fj,k5o,S5o,R5o,zu,Cde,P5o,B5o,Tj,I5o,N5o,q5o,Wu,wde,j5o,D5o,Mj,G5o,O5o,V5o,Qu,Ade,X5o,z5o,Ej,W5o,Q5o,H5o,Hu,yde,U5o,J5o,Cj,Y5o,K5o,Z5o,Uu,Lde,e3o,o3o,wj,r3o,t3o,a3o,Ju,xde,n3o,s3o,Aj,l3o,i3o,d3o,Yu,c3o,$de,f3o,m3o,kde,g3o,h3o,Ku,Bqe,ki,Zu,Sde,hy,p3o,Rde,_3o,Iqe,$o,py,u3o,Si,b3o,yj,v3o,F3o,Lj,T3o,M3o,E3o,_y,C3o,Pde,w3o,A3o,y3o,nt,uy,L3o,Bde,x3o,$3o,Ri,k3o,Ide,S3o,R3o,xj,P3o,B3o,I3o,e4,N3o,Ke,by,q3o,Nde,j3o,D3o,$a,G3o,qde,O3o,V3o,jde,X3o,z3o,Dde,W3o,Q3o,H3o,z,o4,Gde,U3o,J3o,$j,Y3o,K3o,Z3o,r4,Ode,ewo,owo,kj,rwo,two,awo,t4,Vde,nwo,swo,Sj,lwo,iwo,dwo,a4,Xde,cwo,fwo,Rj,mwo,gwo,hwo,n4,zde,pwo,_wo,Pj,uwo,bwo,vwo,s4,Wde,Fwo,Two,Bj,Mwo,Ewo,Cwo,l4,Qde,wwo,Awo,Ij,ywo,Lwo,xwo,i4,Hde,$wo,kwo,Nj,Swo,Rwo,Pwo,d4,Ude,Bwo,Iwo,qj,Nwo,qwo,jwo,c4,Jde,Dwo,Gwo,jj,Owo,Vwo,Xwo,f4,Yde,zwo,Wwo,Dj,Qwo,Hwo,Uwo,m4,Kde,Jwo,Ywo,Gj,Kwo,Zwo,e0o,g4,Zde,o0o,r0o,Oj,t0o,a0o,n0o,h4,ece,s0o,l0o,Vj,i0o,d0o,c0o,p4,oce,f0o,m0o,Xj,g0o,h0o,p0o,_4,rce,_0o,u0o,zj,b0o,v0o,F0o,u4,tce,T0o,M0o,Wj,E0o,C0o,w0o,b4,ace,A0o,y0o,Qj,L0o,x0o,$0o,v4,nce,k0o,S0o,Hj,R0o,P0o,B0o,F4,sce,I0o,N0o,Uj,q0o,j0o,D0o,T4,lce,G0o,O0o,Jj,V0o,X0o,z0o,M4,ice,W0o,Q0o,Yj,H0o,U0o,J0o,E4,dce,Y0o,K0o,Kj,Z0o,e6o,o6o,C4,cce,r6o,t6o,Zj,a6o,n6o,s6o,w4,fce,l6o,i6o,eD,d6o,c6o,f6o,A4,mce,m6o,g6o,oD,h6o,p6o,_6o,y4,gce,u6o,b6o,rD,v6o,F6o,T6o,L4,hce,M6o,E6o,tD,C6o,w6o,A6o,x4,pce,y6o,L6o,aD,x6o,$6o,k6o,$4,_ce,S6o,R6o,nD,P6o,B6o,I6o,k4,uce,N6o,q6o,sD,j6o,D6o,G6o,S4,bce,O6o,V6o,lD,X6o,z6o,W6o,R4,vce,Q6o,H6o,iD,U6o,J6o,Y6o,P4,Fce,K6o,Z6o,dD,eAo,oAo,rAo,B4,Tce,tAo,aAo,cD,nAo,sAo,lAo,I4,Mce,iAo,dAo,fD,cAo,fAo,mAo,N4,Ece,gAo,hAo,mD,pAo,_Ao,uAo,q4,Cce,bAo,vAo,gD,FAo,TAo,MAo,j4,EAo,wce,CAo,wAo,Ace,AAo,yAo,D4,Nqe,Pi,G4,yce,vy,LAo,Lce,xAo,qqe,ko,Fy,$Ao,Bi,kAo,hD,SAo,RAo,pD,PAo,BAo,IAo,Ty,NAo,xce,qAo,jAo,DAo,st,My,GAo,$ce,OAo,VAo,Ii,XAo,kce,zAo,WAo,_D,QAo,HAo,UAo,O4,JAo,Ze,Ey,YAo,Sce,KAo,ZAo,ka,eyo,Rce,oyo,ryo,Pce,tyo,ayo,Bce,nyo,syo,lyo,Q,V4,Ice,iyo,dyo,uD,cyo,fyo,myo,X4,Nce,gyo,hyo,bD,pyo,_yo,uyo,z4,qce,byo,vyo,vD,Fyo,Tyo,Myo,W4,jce,Eyo,Cyo,FD,wyo,Ayo,yyo,Q4,Dce,Lyo,xyo,TD,$yo,kyo,Syo,H4,Gce,Ryo,Pyo,MD,Byo,Iyo,Nyo,U4,Oce,qyo,jyo,ED,Dyo,Gyo,Oyo,J4,Vce,Vyo,Xyo,CD,zyo,Wyo,Qyo,Y4,Xce,Hyo,Uyo,wD,Jyo,Yyo,Kyo,K4,zce,Zyo,eLo,AD,oLo,rLo,tLo,Z4,Wce,aLo,nLo,yD,sLo,lLo,iLo,e1,Qce,dLo,cLo,LD,fLo,mLo,gLo,o1,Hce,hLo,pLo,xD,_Lo,uLo,bLo,r1,Uce,vLo,FLo,$D,TLo,MLo,ELo,t1,Jce,CLo,wLo,kD,ALo,yLo,LLo,a1,Yce,xLo,$Lo,SD,kLo,SLo,RLo,n1,Kce,PLo,BLo,RD,ILo,NLo,qLo,s1,Zce,jLo,DLo,PD,GLo,OLo,VLo,l1,efe,XLo,zLo,BD,WLo,QLo,HLo,i1,ofe,ULo,JLo,ID,YLo,KLo,ZLo,d1,rfe,e8o,o8o,ND,r8o,t8o,a8o,c1,tfe,n8o,s8o,qD,l8o,i8o,d8o,f1,afe,c8o,f8o,jD,m8o,g8o,h8o,m1,nfe,p8o,_8o,DD,u8o,b8o,v8o,g1,sfe,F8o,T8o,GD,M8o,E8o,C8o,h1,lfe,w8o,A8o,OD,y8o,L8o,x8o,p1,ife,$8o,k8o,VD,S8o,R8o,P8o,_1,dfe,B8o,I8o,XD,N8o,q8o,j8o,u1,cfe,D8o,G8o,zD,O8o,V8o,X8o,b1,ffe,z8o,W8o,WD,Q8o,H8o,U8o,v1,mfe,J8o,Y8o,gfe,K8o,Z8o,e9o,F1,hfe,o9o,r9o,QD,t9o,a9o,n9o,T1,pfe,s9o,l9o,HD,i9o,d9o,c9o,M1,_fe,f9o,m9o,UD,g9o,h9o,p9o,E1,ufe,_9o,u9o,JD,b9o,v9o,F9o,C1,T9o,bfe,M9o,E9o,vfe,C9o,w9o,w1,jqe,Ni,A1,Ffe,Cy,A9o,Tfe,y9o,Dqe,So,wy,L9o,qi,x9o,YD,$9o,k9o,KD,S9o,R9o,P9o,Ay,B9o,Mfe,I9o,N9o,q9o,lt,yy,j9o,Efe,D9o,G9o,ji,O9o,Cfe,V9o,X9o,ZD,z9o,W9o,Q9o,y1,H9o,eo,Ly,U9o,wfe,J9o,Y9o,Sa,K9o,Afe,Z9o,exo,yfe,oxo,rxo,Lfe,txo,axo,nxo,_e,L1,xfe,sxo,lxo,eG,ixo,dxo,cxo,x1,$fe,fxo,mxo,oG,gxo,hxo,pxo,$1,kfe,_xo,uxo,rG,bxo,vxo,Fxo,k1,Sfe,Txo,Mxo,tG,Exo,Cxo,wxo,S1,Rfe,Axo,yxo,aG,Lxo,xxo,$xo,R1,Pfe,kxo,Sxo,nG,Rxo,Pxo,Bxo,P1,Bfe,Ixo,Nxo,sG,qxo,jxo,Dxo,B1,Ife,Gxo,Oxo,lG,Vxo,Xxo,zxo,I1,Nfe,Wxo,Qxo,iG,Hxo,Uxo,Jxo,N1,qfe,Yxo,Kxo,dG,Zxo,e$o,o$o,q1,jfe,r$o,t$o,cG,a$o,n$o,s$o,j1,Dfe,l$o,i$o,fG,d$o,c$o,f$o,D1,Gfe,m$o,g$o,mG,h$o,p$o,_$o,G1,Ofe,u$o,b$o,gG,v$o,F$o,T$o,O1,Vfe,M$o,E$o,hG,C$o,w$o,A$o,V1,Xfe,y$o,L$o,pG,x$o,$$o,k$o,X1,S$o,zfe,R$o,P$o,Wfe,B$o,I$o,z1,Gqe,Di,W1,Qfe,xy,N$o,Hfe,q$o,Oqe,Ro,$y,j$o,Gi,D$o,_G,G$o,O$o,uG,V$o,X$o,z$o,ky,W$o,Ufe,Q$o,H$o,U$o,it,Sy,J$o,Jfe,Y$o,K$o,Oi,Z$o,Yfe,eko,oko,bG,rko,tko,ako,Q1,nko,oo,Ry,sko,Kfe,lko,iko,Ra,dko,Zfe,cko,fko,eme,mko,gko,ome,hko,pko,_ko,N,H1,rme,uko,bko,vG,vko,Fko,Tko,U1,tme,Mko,Eko,FG,Cko,wko,Ako,J1,ame,yko,Lko,TG,xko,$ko,kko,Y1,nme,Sko,Rko,MG,Pko,Bko,Iko,K1,sme,Nko,qko,EG,jko,Dko,Gko,Z1,lme,Oko,Vko,CG,Xko,zko,Wko,e7,ime,Qko,Hko,wG,Uko,Jko,Yko,o7,dme,Kko,Zko,AG,eSo,oSo,rSo,r7,cme,tSo,aSo,yG,nSo,sSo,lSo,t7,fme,iSo,dSo,LG,cSo,fSo,mSo,a7,mme,gSo,hSo,xG,pSo,_So,uSo,n7,gme,bSo,vSo,$G,FSo,TSo,MSo,s7,hme,ESo,CSo,kG,wSo,ASo,ySo,l7,pme,LSo,xSo,SG,$So,kSo,SSo,i7,_me,RSo,PSo,RG,BSo,ISo,NSo,d7,ume,qSo,jSo,PG,DSo,GSo,OSo,c7,bme,VSo,XSo,BG,zSo,WSo,QSo,f7,vme,HSo,USo,IG,JSo,YSo,KSo,m7,Fme,ZSo,eRo,NG,oRo,rRo,tRo,g7,Tme,aRo,nRo,qG,sRo,lRo,iRo,h7,Mme,dRo,cRo,jG,fRo,mRo,gRo,p7,Eme,hRo,pRo,DG,_Ro,uRo,bRo,_7,Cme,vRo,FRo,GG,TRo,MRo,ERo,u7,wme,CRo,wRo,OG,ARo,yRo,LRo,b7,Ame,xRo,$Ro,VG,kRo,SRo,RRo,v7,yme,PRo,BRo,XG,IRo,NRo,qRo,F7,Lme,jRo,DRo,zG,GRo,ORo,VRo,T7,xme,XRo,zRo,WG,WRo,QRo,HRo,M7,$me,URo,JRo,QG,YRo,KRo,ZRo,E7,kme,ePo,oPo,HG,rPo,tPo,aPo,C7,Sme,nPo,sPo,UG,lPo,iPo,dPo,w7,Rme,cPo,fPo,JG,mPo,gPo,hPo,A7,Pme,pPo,_Po,YG,uPo,bPo,vPo,y7,Bme,FPo,TPo,KG,MPo,EPo,CPo,L7,Ime,wPo,APo,ZG,yPo,LPo,xPo,x7,Nme,$Po,kPo,eO,SPo,RPo,PPo,$7,qme,BPo,IPo,oO,NPo,qPo,jPo,k7,jme,DPo,GPo,rO,OPo,VPo,XPo,S7,Dme,zPo,WPo,tO,QPo,HPo,UPo,R7,Gme,JPo,YPo,aO,KPo,ZPo,eBo,P7,Ome,oBo,rBo,nO,tBo,aBo,nBo,B7,Vme,sBo,lBo,sO,iBo,dBo,cBo,I7,Xme,fBo,mBo,lO,gBo,hBo,pBo,N7,zme,_Bo,uBo,iO,bBo,vBo,FBo,q7,Wme,TBo,MBo,dO,EBo,CBo,wBo,j7,Qme,ABo,yBo,cO,LBo,xBo,$Bo,D7,Hme,kBo,SBo,fO,RBo,PBo,BBo,G7,IBo,Ume,NBo,qBo,Jme,jBo,DBo,O7,Vqe,Vi,V7,Yme,Py,GBo,Kme,OBo,Xqe,Po,By,VBo,Xi,XBo,mO,zBo,WBo,gO,QBo,HBo,UBo,Iy,JBo,Zme,YBo,KBo,ZBo,dt,Ny,eIo,ege,oIo,rIo,zi,tIo,oge,aIo,nIo,hO,sIo,lIo,iIo,X7,dIo,ro,qy,cIo,rge,fIo,mIo,Pa,gIo,tge,hIo,pIo,age,_Io,uIo,nge,bIo,vIo,FIo,K,z7,sge,TIo,MIo,pO,EIo,CIo,wIo,W7,lge,AIo,yIo,_O,LIo,xIo,$Io,Q7,ige,kIo,SIo,uO,RIo,PIo,BIo,H7,dge,IIo,NIo,bO,qIo,jIo,DIo,U7,cge,GIo,OIo,vO,VIo,XIo,zIo,J7,fge,WIo,QIo,FO,HIo,UIo,JIo,Y7,mge,YIo,KIo,TO,ZIo,eNo,oNo,K7,gge,rNo,tNo,MO,aNo,nNo,sNo,Z7,hge,lNo,iNo,EO,dNo,cNo,fNo,eb,pge,mNo,gNo,CO,hNo,pNo,_No,ob,_ge,uNo,bNo,wO,vNo,FNo,TNo,rb,uge,MNo,ENo,AO,CNo,wNo,ANo,tb,bge,yNo,LNo,yO,xNo,$No,kNo,ab,vge,SNo,RNo,LO,PNo,BNo,INo,nb,Fge,NNo,qNo,xO,jNo,DNo,GNo,sb,Tge,ONo,VNo,$O,XNo,zNo,WNo,lb,Mge,QNo,HNo,kO,UNo,JNo,YNo,ib,Ege,KNo,ZNo,SO,eqo,oqo,rqo,db,Cge,tqo,aqo,RO,nqo,sqo,lqo,cb,wge,iqo,dqo,PO,cqo,fqo,mqo,fb,Age,gqo,hqo,BO,pqo,_qo,uqo,mb,yge,bqo,vqo,IO,Fqo,Tqo,Mqo,gb,Lge,Eqo,Cqo,NO,wqo,Aqo,yqo,hb,xge,Lqo,xqo,qO,$qo,kqo,Sqo,pb,$ge,Rqo,Pqo,jO,Bqo,Iqo,Nqo,_b,kge,qqo,jqo,DO,Dqo,Gqo,Oqo,ub,Sge,Vqo,Xqo,GO,zqo,Wqo,Qqo,bb,Rge,Hqo,Uqo,OO,Jqo,Yqo,Kqo,vb,Pge,Zqo,ejo,VO,ojo,rjo,tjo,Fb,ajo,Bge,njo,sjo,Ige,ljo,ijo,Tb,zqe,Wi,Mb,Nge,jy,djo,qge,cjo,Wqe,Bo,Dy,fjo,Qi,mjo,XO,gjo,hjo,zO,pjo,_jo,ujo,Gy,bjo,jge,vjo,Fjo,Tjo,ct,Oy,Mjo,Dge,Ejo,Cjo,Hi,wjo,Gge,Ajo,yjo,WO,Ljo,xjo,$jo,Eb,kjo,to,Vy,Sjo,Oge,Rjo,Pjo,Ba,Bjo,Vge,Ijo,Njo,Xge,qjo,jjo,zge,Djo,Gjo,Ojo,Yr,Cb,Wge,Vjo,Xjo,QO,zjo,Wjo,Qjo,wb,Qge,Hjo,Ujo,HO,Jjo,Yjo,Kjo,Ab,Hge,Zjo,eDo,UO,oDo,rDo,tDo,yb,Uge,aDo,nDo,JO,sDo,lDo,iDo,Lb,Jge,dDo,cDo,YO,fDo,mDo,gDo,xb,hDo,Yge,pDo,_Do,Kge,uDo,bDo,$b,Qqe,Ui,kb,Zge,Xy,vDo,ehe,FDo,Hqe,Io,zy,TDo,Ji,MDo,KO,EDo,CDo,ZO,wDo,ADo,yDo,Wy,LDo,ohe,xDo,$Do,kDo,ft,Qy,SDo,rhe,RDo,PDo,Yi,BDo,the,IDo,NDo,eV,qDo,jDo,DDo,Sb,GDo,ao,Hy,ODo,ahe,VDo,XDo,Ia,zDo,nhe,WDo,QDo,she,HDo,UDo,lhe,JDo,YDo,KDo,H,Rb,ihe,ZDo,eGo,oV,oGo,rGo,tGo,Pb,dhe,aGo,nGo,rV,sGo,lGo,iGo,Bb,che,dGo,cGo,tV,fGo,mGo,gGo,Ib,fhe,hGo,pGo,aV,_Go,uGo,bGo,Nb,mhe,vGo,FGo,nV,TGo,MGo,EGo,qb,ghe,CGo,wGo,sV,AGo,yGo,LGo,jb,hhe,xGo,$Go,lV,kGo,SGo,RGo,Db,phe,PGo,BGo,iV,IGo,NGo,qGo,Gb,_he,jGo,DGo,dV,GGo,OGo,VGo,Ob,uhe,XGo,zGo,cV,WGo,QGo,HGo,Vb,bhe,UGo,JGo,fV,YGo,KGo,ZGo,Xb,vhe,eOo,oOo,mV,rOo,tOo,aOo,zb,Fhe,nOo,sOo,gV,lOo,iOo,dOo,Wb,The,cOo,fOo,hV,mOo,gOo,hOo,Qb,Mhe,pOo,_Oo,pV,uOo,bOo,vOo,Hb,Ehe,FOo,TOo,_V,MOo,EOo,COo,Ub,Che,wOo,AOo,uV,yOo,LOo,xOo,Jb,whe,$Oo,kOo,bV,SOo,ROo,POo,Yb,Ahe,BOo,IOo,vV,NOo,qOo,jOo,Kb,yhe,DOo,GOo,FV,OOo,VOo,XOo,Zb,Lhe,zOo,WOo,TV,QOo,HOo,UOo,e2,xhe,JOo,YOo,MV,KOo,ZOo,eVo,o2,$he,oVo,rVo,EV,tVo,aVo,nVo,r2,khe,sVo,lVo,CV,iVo,dVo,cVo,t2,She,fVo,mVo,wV,gVo,hVo,pVo,a2,Rhe,_Vo,uVo,AV,bVo,vVo,FVo,n2,Phe,TVo,MVo,yV,EVo,CVo,wVo,s2,Bhe,AVo,yVo,LV,LVo,xVo,$Vo,l2,Ihe,kVo,SVo,xV,RVo,PVo,BVo,i2,Nhe,IVo,NVo,$V,qVo,jVo,DVo,d2,qhe,GVo,OVo,kV,VVo,XVo,zVo,c2,jhe,WVo,QVo,SV,HVo,UVo,JVo,f2,Dhe,YVo,KVo,RV,ZVo,eXo,oXo,m2,Ghe,rXo,tXo,PV,aXo,nXo,sXo,g2,lXo,Ohe,iXo,dXo,Vhe,cXo,fXo,h2,Uqe,Ki,p2,Xhe,Uy,mXo,zhe,gXo,Jqe,No,Jy,hXo,Zi,pXo,BV,_Xo,uXo,IV,bXo,vXo,FXo,Yy,TXo,Whe,MXo,EXo,CXo,mt,Ky,wXo,Qhe,AXo,yXo,ed,LXo,Hhe,xXo,$Xo,NV,kXo,SXo,RXo,_2,PXo,no,Zy,BXo,Uhe,IXo,NXo,Na,qXo,Jhe,jXo,DXo,Yhe,GXo,OXo,Khe,VXo,XXo,zXo,V,u2,Zhe,WXo,QXo,qV,HXo,UXo,JXo,b2,epe,YXo,KXo,jV,ZXo,ezo,ozo,v2,ope,rzo,tzo,DV,azo,nzo,szo,F2,rpe,lzo,izo,GV,dzo,czo,fzo,T2,tpe,mzo,gzo,OV,hzo,pzo,_zo,M2,ape,uzo,bzo,VV,vzo,Fzo,Tzo,E2,npe,Mzo,Ezo,XV,Czo,wzo,Azo,C2,spe,yzo,Lzo,zV,xzo,$zo,kzo,w2,lpe,Szo,Rzo,WV,Pzo,Bzo,Izo,A2,ipe,Nzo,qzo,QV,jzo,Dzo,Gzo,y2,dpe,Ozo,Vzo,HV,Xzo,zzo,Wzo,L2,cpe,Qzo,Hzo,UV,Uzo,Jzo,Yzo,x2,fpe,Kzo,Zzo,JV,eWo,oWo,rWo,$2,mpe,tWo,aWo,YV,nWo,sWo,lWo,k2,gpe,iWo,dWo,KV,cWo,fWo,mWo,S2,hpe,gWo,hWo,ZV,pWo,_Wo,uWo,R2,ppe,bWo,vWo,eX,FWo,TWo,MWo,P2,_pe,EWo,CWo,oX,wWo,AWo,yWo,B2,upe,LWo,xWo,rX,$Wo,kWo,SWo,I2,bpe,RWo,PWo,tX,BWo,IWo,NWo,N2,vpe,qWo,jWo,aX,DWo,GWo,OWo,q2,Fpe,VWo,XWo,nX,zWo,WWo,QWo,j2,Tpe,HWo,UWo,sX,JWo,YWo,KWo,D2,Mpe,ZWo,eQo,lX,oQo,rQo,tQo,G2,Epe,aQo,nQo,iX,sQo,lQo,iQo,O2,Cpe,dQo,cQo,dX,fQo,mQo,gQo,V2,wpe,hQo,pQo,cX,_Qo,uQo,bQo,X2,Ape,vQo,FQo,fX,TQo,MQo,EQo,z2,ype,CQo,wQo,mX,AQo,yQo,LQo,W2,Lpe,xQo,$Qo,gX,kQo,SQo,RQo,Q2,xpe,PQo,BQo,hX,IQo,NQo,qQo,H2,$pe,jQo,DQo,pX,GQo,OQo,VQo,U2,kpe,XQo,zQo,_X,WQo,QQo,HQo,J2,Spe,UQo,JQo,uX,YQo,KQo,ZQo,Y2,Rpe,eHo,oHo,bX,rHo,tHo,aHo,K2,Ppe,nHo,sHo,vX,lHo,iHo,dHo,Z2,Bpe,cHo,fHo,FX,mHo,gHo,hHo,ev,Ipe,pHo,_Ho,TX,uHo,bHo,vHo,ov,Npe,FHo,THo,MX,MHo,EHo,CHo,rv,qpe,wHo,AHo,EX,yHo,LHo,xHo,tv,$Ho,jpe,kHo,SHo,Dpe,RHo,PHo,av,Yqe,od,nv,Gpe,eL,BHo,Ope,IHo,Kqe,qo,oL,NHo,rd,qHo,CX,jHo,DHo,wX,GHo,OHo,VHo,rL,XHo,Vpe,zHo,WHo,QHo,gt,tL,HHo,Xpe,UHo,JHo,td,YHo,zpe,KHo,ZHo,AX,eUo,oUo,rUo,sv,tUo,so,aL,aUo,Wpe,nUo,sUo,qa,lUo,Qpe,iUo,dUo,Hpe,cUo,fUo,Upe,mUo,gUo,hUo,Jpe,lv,Ype,pUo,_Uo,yX,uUo,bUo,vUo,iv,FUo,Kpe,TUo,MUo,Zpe,EUo,CUo,dv,Zqe,ad,cv,e_e,nL,wUo,o_e,AUo,eje,jo,sL,yUo,nd,LUo,LX,xUo,$Uo,xX,kUo,SUo,RUo,lL,PUo,r_e,BUo,IUo,NUo,ht,iL,qUo,t_e,jUo,DUo,sd,GUo,a_e,OUo,VUo,$X,XUo,zUo,WUo,fv,QUo,lo,dL,HUo,n_e,UUo,JUo,ja,YUo,s_e,KUo,ZUo,l_e,eJo,oJo,i_e,rJo,tJo,aJo,Fe,mv,d_e,nJo,sJo,kX,lJo,iJo,dJo,gv,c_e,cJo,fJo,SX,mJo,gJo,hJo,hv,f_e,pJo,_Jo,RX,uJo,bJo,vJo,pv,m_e,FJo,TJo,PX,MJo,EJo,CJo,Bs,g_e,wJo,AJo,BX,yJo,LJo,IX,xJo,$Jo,kJo,_v,h_e,SJo,RJo,NX,PJo,BJo,IJo,pt,p_e,NJo,qJo,qX,jJo,DJo,jX,GJo,OJo,DX,VJo,XJo,zJo,uv,__e,WJo,QJo,GX,HJo,UJo,JJo,bv,u_e,YJo,KJo,OX,ZJo,eYo,oYo,vv,b_e,rYo,tYo,VX,aYo,nYo,sYo,Fv,v_e,lYo,iYo,XX,dYo,cYo,fYo,Tv,F_e,mYo,gYo,zX,hYo,pYo,_Yo,Mv,T_e,uYo,bYo,WX,vYo,FYo,TYo,Ev,M_e,MYo,EYo,QX,CYo,wYo,AYo,Cv,yYo,E_e,LYo,xYo,C_e,$Yo,kYo,wv,oje,ld,Av,w_e,cL,SYo,A_e,RYo,rje,Do,fL,PYo,id,BYo,HX,IYo,NYo,UX,qYo,jYo,DYo,mL,GYo,y_e,OYo,VYo,XYo,_t,gL,zYo,L_e,WYo,QYo,dd,HYo,x_e,UYo,JYo,JX,YYo,KYo,ZYo,yv,eKo,io,hL,oKo,$_e,rKo,tKo,Da,aKo,k_e,nKo,sKo,S_e,lKo,iKo,R_e,dKo,cKo,fKo,P_e,Lv,B_e,mKo,gKo,YX,hKo,pKo,_Ko,xv,uKo,I_e,bKo,vKo,N_e,FKo,TKo,$v,tje,cd,kv,q_e,pL,MKo,j_e,EKo,aje,Go,_L,CKo,fd,wKo,KX,AKo,yKo,ZX,LKo,xKo,$Ko,uL,kKo,D_e,SKo,RKo,PKo,ut,bL,BKo,G_e,IKo,NKo,md,qKo,O_e,jKo,DKo,ez,GKo,OKo,VKo,Sv,XKo,co,vL,zKo,V_e,WKo,QKo,Ga,HKo,X_e,UKo,JKo,z_e,YKo,KKo,W_e,ZKo,eZo,oZo,ke,Rv,Q_e,rZo,tZo,oz,aZo,nZo,sZo,Pv,H_e,lZo,iZo,rz,dZo,cZo,fZo,Bv,U_e,mZo,gZo,tz,hZo,pZo,_Zo,Iv,J_e,uZo,bZo,az,vZo,FZo,TZo,Nv,Y_e,MZo,EZo,nz,CZo,wZo,AZo,qv,K_e,yZo,LZo,sz,xZo,$Zo,kZo,jv,Z_e,SZo,RZo,lz,PZo,BZo,IZo,Dv,eue,NZo,qZo,iz,jZo,DZo,GZo,Gv,oue,OZo,VZo,dz,XZo,zZo,WZo,Ov,QZo,rue,HZo,UZo,tue,JZo,YZo,Vv,nje,gd,Xv,aue,FL,KZo,nue,ZZo,sje,Oo,TL,eer,hd,oer,cz,rer,ter,fz,aer,ner,ser,ML,ler,sue,ier,der,cer,bt,EL,fer,lue,mer,ger,pd,her,iue,per,_er,mz,uer,ber,ver,zv,Fer,fo,CL,Ter,due,Mer,Eer,Oa,Cer,cue,wer,Aer,fue,yer,Ler,mue,xer,$er,ker,Kr,Wv,gue,Ser,Rer,gz,Per,Ber,Ier,Qv,hue,Ner,qer,hz,jer,Der,Ger,Hv,pue,Oer,Ver,pz,Xer,zer,Wer,Uv,_ue,Qer,Her,_z,Uer,Jer,Yer,Jv,uue,Ker,Zer,uz,eor,oor,ror,Yv,tor,bue,aor,nor,vue,sor,lor,Kv,lje,_d,Zv,Fue,wL,ior,Tue,dor,ije,Vo,AL,cor,ud,mor,bz,gor,hor,vz,por,_or,uor,yL,bor,Mue,vor,For,Tor,vt,LL,Mor,Eue,Eor,Cor,bd,wor,Cue,Aor,yor,Fz,Lor,xor,$or,eF,kor,mo,xL,Sor,wue,Ror,Por,Va,Bor,Aue,Ior,Nor,yue,qor,jor,Lue,Dor,Gor,Oor,Se,oF,xue,Vor,Xor,Tz,zor,Wor,Qor,rF,$ue,Hor,Uor,Mz,Jor,Yor,Kor,tF,kue,Zor,err,Ez,orr,rrr,trr,aF,Sue,arr,nrr,Cz,srr,lrr,irr,nF,Rue,drr,crr,wz,frr,mrr,grr,sF,Pue,hrr,prr,Az,_rr,urr,brr,lF,Bue,vrr,Frr,yz,Trr,Mrr,Err,iF,Iue,Crr,wrr,Lz,Arr,yrr,Lrr,dF,Nue,xrr,$rr,xz,krr,Srr,Rrr,cF,Prr,que,Brr,Irr,jue,Nrr,qrr,fF,dje,vd,mF,Due,$L,jrr,Gue,Drr,cje,Xo,kL,Grr,Fd,Orr,$z,Vrr,Xrr,kz,zrr,Wrr,Qrr,SL,Hrr,Oue,Urr,Jrr,Yrr,Ft,RL,Krr,Vue,Zrr,etr,Td,otr,Xue,rtr,ttr,Sz,atr,ntr,str,gF,ltr,go,PL,itr,zue,dtr,ctr,Xa,ftr,Wue,mtr,gtr,Que,htr,ptr,Hue,_tr,utr,btr,BL,hF,Uue,vtr,Ftr,Rz,Ttr,Mtr,Etr,pF,Jue,Ctr,wtr,Pz,Atr,ytr,Ltr,_F,xtr,Yue,$tr,ktr,Kue,Str,Rtr,uF,fje,Md,bF,Zue,IL,Ptr,e4e,Btr,mje,zo,NL,Itr,Ed,Ntr,Bz,qtr,jtr,Iz,Dtr,Gtr,Otr,qL,Vtr,o4e,Xtr,ztr,Wtr,Tt,jL,Qtr,r4e,Htr,Utr,Cd,Jtr,t4e,Ytr,Ktr,Nz,Ztr,ear,oar,vF,rar,ho,DL,tar,a4e,aar,nar,za,sar,n4e,lar,iar,s4e,dar,car,l4e,far,mar,gar,Zr,FF,i4e,har,par,qz,_ar,uar,bar,TF,d4e,Far,Tar,jz,Mar,Ear,Car,MF,c4e,war,Aar,Dz,yar,Lar,xar,EF,f4e,$ar,kar,Gz,Sar,Rar,Par,CF,m4e,Bar,Iar,Oz,Nar,qar,jar,wF,Dar,g4e,Gar,Oar,h4e,Var,Xar,AF,gje,wd,yF,p4e,GL,zar,_4e,War,hje,Wo,OL,Qar,Ad,Har,Vz,Uar,Jar,Xz,Yar,Kar,Zar,VL,enr,u4e,onr,rnr,tnr,Mt,XL,anr,b4e,nnr,snr,yd,lnr,v4e,inr,dnr,zz,cnr,fnr,mnr,LF,gnr,po,zL,hnr,F4e,pnr,_nr,Wa,unr,T4e,bnr,vnr,M4e,Fnr,Tnr,E4e,Mnr,Enr,Cnr,Ld,xF,C4e,wnr,Anr,Wz,ynr,Lnr,xnr,$F,w4e,$nr,knr,Qz,Snr,Rnr,Pnr,kF,A4e,Bnr,Inr,Hz,Nnr,qnr,jnr,SF,Dnr,y4e,Gnr,Onr,L4e,Vnr,Xnr,RF,pje,xd,PF,x4e,WL,znr,$4e,Wnr,_je,Qo,QL,Qnr,$d,Hnr,Uz,Unr,Jnr,Jz,Ynr,Knr,Znr,HL,esr,k4e,osr,rsr,tsr,Et,UL,asr,S4e,nsr,ssr,kd,lsr,R4e,isr,dsr,Yz,csr,fsr,msr,BF,gsr,_o,JL,hsr,P4e,psr,_sr,Qa,usr,B4e,bsr,vsr,I4e,Fsr,Tsr,N4e,Msr,Esr,Csr,YL,IF,q4e,wsr,Asr,Kz,ysr,Lsr,xsr,NF,j4e,$sr,ksr,Zz,Ssr,Rsr,Psr,qF,Bsr,D4e,Isr,Nsr,G4e,qsr,jsr,jF,uje,Sd,DF,O4e,KL,Dsr,V4e,Gsr,bje,Ho,ZL,Osr,Rd,Vsr,eW,Xsr,zsr,oW,Wsr,Qsr,Hsr,e8,Usr,X4e,Jsr,Ysr,Ksr,Ct,o8,Zsr,z4e,elr,olr,Pd,rlr,W4e,tlr,alr,rW,nlr,slr,llr,GF,ilr,uo,r8,dlr,Q4e,clr,flr,Ha,mlr,H4e,glr,hlr,U4e,plr,_lr,J4e,ulr,blr,vlr,Y4e,OF,K4e,Flr,Tlr,tW,Mlr,Elr,Clr,VF,wlr,Z4e,Alr,ylr,e1e,Llr,xlr,XF,vje,Bd,zF,o1e,t8,$lr,r1e,klr,Fje,Uo,a8,Slr,Id,Rlr,aW,Plr,Blr,nW,Ilr,Nlr,qlr,n8,jlr,t1e,Dlr,Glr,Olr,wt,s8,Vlr,a1e,Xlr,zlr,Nd,Wlr,n1e,Qlr,Hlr,sW,Ulr,Jlr,Ylr,WF,Klr,bo,l8,Zlr,s1e,eir,oir,Ua,rir,l1e,tir,air,i1e,nir,sir,d1e,lir,iir,dir,Ja,QF,c1e,cir,fir,lW,mir,gir,hir,HF,f1e,pir,_ir,iW,uir,bir,vir,UF,m1e,Fir,Tir,dW,Mir,Eir,Cir,JF,g1e,wir,Air,cW,yir,Lir,xir,YF,$ir,h1e,kir,Sir,p1e,Rir,Pir,KF,Tje,qd,ZF,_1e,i8,Bir,u1e,Iir,Mje,Jo,d8,Nir,jd,qir,fW,jir,Dir,mW,Gir,Oir,Vir,c8,Xir,b1e,zir,Wir,Qir,At,f8,Hir,v1e,Uir,Jir,Dd,Yir,F1e,Kir,Zir,gW,edr,odr,rdr,eT,tdr,vo,m8,adr,T1e,ndr,sdr,Ya,ldr,M1e,idr,ddr,E1e,cdr,fdr,C1e,mdr,gdr,hdr,w1e,oT,A1e,pdr,_dr,hW,udr,bdr,vdr,rT,Fdr,y1e,Tdr,Mdr,L1e,Edr,Cdr,tT,Eje,Gd,aT,x1e,g8,wdr,$1e,Adr,Cje,Yo,h8,ydr,Od,Ldr,pW,xdr,$dr,_W,kdr,Sdr,Rdr,p8,Pdr,k1e,Bdr,Idr,Ndr,yt,_8,qdr,S1e,jdr,Ddr,Vd,Gdr,R1e,Odr,Vdr,uW,Xdr,zdr,Wdr,nT,Qdr,wr,u8,Hdr,P1e,Udr,Jdr,Ka,Ydr,B1e,Kdr,Zdr,I1e,ecr,ocr,N1e,rcr,tcr,acr,q,sT,q1e,ncr,scr,bW,lcr,icr,dcr,lT,j1e,ccr,fcr,vW,mcr,gcr,hcr,iT,D1e,pcr,_cr,FW,ucr,bcr,vcr,dT,G1e,Fcr,Tcr,TW,Mcr,Ecr,Ccr,cT,O1e,wcr,Acr,MW,ycr,Lcr,xcr,fT,V1e,$cr,kcr,EW,Scr,Rcr,Pcr,mT,X1e,Bcr,Icr,CW,Ncr,qcr,jcr,gT,z1e,Dcr,Gcr,wW,Ocr,Vcr,Xcr,hT,W1e,zcr,Wcr,AW,Qcr,Hcr,Ucr,pT,Q1e,Jcr,Ycr,yW,Kcr,Zcr,efr,_T,H1e,ofr,rfr,LW,tfr,afr,nfr,uT,U1e,sfr,lfr,xW,ifr,dfr,cfr,bT,J1e,ffr,mfr,$W,gfr,hfr,pfr,vT,Y1e,_fr,ufr,kW,bfr,vfr,Ffr,FT,K1e,Tfr,Mfr,SW,Efr,Cfr,wfr,TT,Z1e,Afr,yfr,RW,Lfr,xfr,$fr,MT,e7e,kfr,Sfr,PW,Rfr,Pfr,Bfr,Is,o7e,Ifr,Nfr,BW,qfr,jfr,IW,Dfr,Gfr,Ofr,ET,r7e,Vfr,Xfr,NW,zfr,Wfr,Qfr,CT,t7e,Hfr,Ufr,qW,Jfr,Yfr,Kfr,wT,a7e,Zfr,emr,jW,omr,rmr,tmr,AT,n7e,amr,nmr,DW,smr,lmr,imr,yT,s7e,dmr,cmr,GW,fmr,mmr,gmr,LT,l7e,hmr,pmr,OW,_mr,umr,bmr,xT,i7e,vmr,Fmr,VW,Tmr,Mmr,Emr,$T,d7e,Cmr,wmr,XW,Amr,ymr,Lmr,kT,c7e,xmr,$mr,zW,kmr,Smr,Rmr,ST,f7e,Pmr,Bmr,WW,Imr,Nmr,qmr,RT,m7e,jmr,Dmr,QW,Gmr,Omr,Vmr,PT,g7e,Xmr,zmr,HW,Wmr,Qmr,Hmr,BT,h7e,Umr,Jmr,UW,Ymr,Kmr,Zmr,IT,p7e,egr,ogr,JW,rgr,tgr,agr,NT,_7e,ngr,sgr,YW,lgr,igr,dgr,qT,u7e,cgr,fgr,KW,mgr,ggr,hgr,jT,b7e,pgr,_gr,ZW,ugr,bgr,vgr,DT,v7e,Fgr,Tgr,eQ,Mgr,Egr,Cgr,GT,F7e,wgr,Agr,oQ,ygr,Lgr,xgr,OT,T7e,$gr,kgr,rQ,Sgr,Rgr,Pgr,VT,M7e,Bgr,Igr,tQ,Ngr,qgr,jgr,XT,E7e,Dgr,Ggr,aQ,Ogr,Vgr,Xgr,zT,C7e,zgr,Wgr,nQ,Qgr,Hgr,Ugr,WT,w7e,Jgr,Ygr,sQ,Kgr,Zgr,ehr,QT,A7e,ohr,rhr,lQ,thr,ahr,nhr,HT,y7e,shr,lhr,iQ,ihr,dhr,chr,UT,L7e,fhr,mhr,dQ,ghr,hhr,phr,JT,x7e,_hr,uhr,cQ,bhr,vhr,Fhr,YT,wje,Xd,KT,$7e,b8,Thr,k7e,Mhr,Aje,Ko,v8,Ehr,zd,Chr,fQ,whr,Ahr,mQ,yhr,Lhr,xhr,F8,$hr,S7e,khr,Shr,Rhr,Lt,T8,Phr,R7e,Bhr,Ihr,Wd,Nhr,P7e,qhr,jhr,gQ,Dhr,Ghr,Ohr,ZT,Vhr,Ar,M8,Xhr,B7e,zhr,Whr,Za,Qhr,I7e,Hhr,Uhr,N7e,Jhr,Yhr,q7e,Khr,Zhr,epr,se,eM,j7e,opr,rpr,hQ,tpr,apr,npr,oM,D7e,spr,lpr,pQ,ipr,dpr,cpr,rM,G7e,fpr,mpr,_Q,gpr,hpr,ppr,tM,O7e,_pr,upr,uQ,bpr,vpr,Fpr,aM,V7e,Tpr,Mpr,bQ,Epr,Cpr,wpr,nM,X7e,Apr,ypr,vQ,Lpr,xpr,$pr,sM,z7e,kpr,Spr,FQ,Rpr,Ppr,Bpr,lM,W7e,Ipr,Npr,TQ,qpr,jpr,Dpr,iM,Q7e,Gpr,Opr,MQ,Vpr,Xpr,zpr,dM,H7e,Wpr,Qpr,EQ,Hpr,Upr,Jpr,cM,U7e,Ypr,Kpr,CQ,Zpr,e_r,o_r,fM,J7e,r_r,t_r,wQ,a_r,n_r,s_r,mM,Y7e,l_r,i_r,AQ,d_r,c_r,f_r,gM,K7e,m_r,g_r,yQ,h_r,p_r,__r,hM,Z7e,u_r,b_r,LQ,v_r,F_r,T_r,pM,ebe,M_r,E_r,xQ,C_r,w_r,A_r,_M,obe,y_r,L_r,$Q,x_r,$_r,k_r,uM,rbe,S_r,R_r,kQ,P_r,B_r,I_r,bM,tbe,N_r,q_r,SQ,j_r,D_r,G_r,vM,abe,O_r,V_r,RQ,X_r,z_r,W_r,FM,nbe,Q_r,H_r,PQ,U_r,J_r,Y_r,TM,sbe,K_r,Z_r,BQ,eur,our,rur,MM,lbe,tur,aur,IQ,nur,sur,lur,EM,yje,Qd,CM,ibe,E8,iur,dbe,dur,Lje,Zo,C8,cur,Hd,fur,NQ,mur,gur,qQ,hur,pur,_ur,w8,uur,cbe,bur,vur,Fur,xt,A8,Tur,fbe,Mur,Eur,Ud,Cur,mbe,wur,Aur,jQ,yur,Lur,xur,wM,$ur,yr,y8,kur,gbe,Sur,Rur,en,Pur,hbe,Bur,Iur,pbe,Nur,qur,_be,jur,Dur,Gur,Me,AM,ube,Our,Vur,DQ,Xur,zur,Wur,yM,bbe,Qur,Hur,GQ,Uur,Jur,Yur,LM,vbe,Kur,Zur,OQ,e4r,o4r,r4r,xM,Fbe,t4r,a4r,VQ,n4r,s4r,l4r,$M,Tbe,i4r,d4r,XQ,c4r,f4r,m4r,kM,Mbe,g4r,h4r,zQ,p4r,_4r,u4r,SM,Ebe,b4r,v4r,WQ,F4r,T4r,M4r,RM,Cbe,E4r,C4r,QQ,w4r,A4r,y4r,PM,wbe,L4r,x4r,HQ,$4r,k4r,S4r,BM,Abe,R4r,P4r,UQ,B4r,I4r,N4r,IM,ybe,q4r,j4r,JQ,D4r,G4r,O4r,NM,Lbe,V4r,X4r,YQ,z4r,W4r,Q4r,qM,xje,Jd,jM,xbe,L8,H4r,$be,U4r,$je,er,x8,J4r,Yd,Y4r,KQ,K4r,Z4r,ZQ,e1r,o1r,r1r,$8,t1r,kbe,a1r,n1r,s1r,$t,k8,l1r,Sbe,i1r,d1r,Kd,c1r,Rbe,f1r,m1r,eH,g1r,h1r,p1r,DM,_1r,Lr,S8,u1r,Pbe,b1r,v1r,on,F1r,Bbe,T1r,M1r,Ibe,E1r,C1r,Nbe,w1r,A1r,y1r,rn,GM,qbe,L1r,x1r,oH,$1r,k1r,S1r,OM,jbe,R1r,P1r,rH,B1r,I1r,N1r,VM,Dbe,q1r,j1r,tH,D1r,G1r,O1r,XM,Gbe,V1r,X1r,aH,z1r,W1r,Q1r,zM,kje,Zd,WM,Obe,R8,H1r,Vbe,U1r,Sje,or,P8,J1r,ec,Y1r,nH,K1r,Z1r,sH,e7r,o7r,r7r,B8,t7r,Xbe,a7r,n7r,s7r,kt,I8,l7r,zbe,i7r,d7r,oc,c7r,Wbe,f7r,m7r,lH,g7r,h7r,p7r,QM,_7r,xr,N8,u7r,Qbe,b7r,v7r,tn,F7r,Hbe,T7r,M7r,Ube,E7r,C7r,Jbe,w7r,A7r,y7r,ie,HM,Ybe,L7r,x7r,iH,$7r,k7r,S7r,UM,Kbe,R7r,P7r,dH,B7r,I7r,N7r,JM,Zbe,q7r,j7r,cH,D7r,G7r,O7r,YM,e2e,V7r,X7r,fH,z7r,W7r,Q7r,KM,o2e,H7r,U7r,mH,J7r,Y7r,K7r,ZM,r2e,Z7r,ebr,gH,obr,rbr,tbr,eE,t2e,abr,nbr,hH,sbr,lbr,ibr,oE,a2e,dbr,cbr,pH,fbr,mbr,gbr,rE,n2e,hbr,pbr,_H,_br,ubr,bbr,tE,s2e,vbr,Fbr,uH,Tbr,Mbr,Ebr,aE,l2e,Cbr,wbr,bH,Abr,ybr,Lbr,nE,i2e,xbr,$br,vH,kbr,Sbr,Rbr,sE,d2e,Pbr,Bbr,FH,Ibr,Nbr,qbr,lE,c2e,jbr,Dbr,TH,Gbr,Obr,Vbr,iE,f2e,Xbr,zbr,MH,Wbr,Qbr,Hbr,dE,m2e,Ubr,Jbr,EH,Ybr,Kbr,Zbr,cE,g2e,e2r,o2r,CH,r2r,t2r,a2r,fE,h2e,n2r,s2r,wH,l2r,i2r,d2r,mE,p2e,c2r,f2r,AH,m2r,g2r,h2r,gE,_2e,p2r,_2r,yH,u2r,b2r,v2r,hE,Rje,rc,pE,u2e,q8,F2r,b2e,T2r,Pje,rr,j8,M2r,tc,E2r,LH,C2r,w2r,xH,A2r,y2r,L2r,D8,x2r,v2e,$2r,k2r,S2r,St,G8,R2r,F2e,P2r,B2r,ac,I2r,T2e,N2r,q2r,$H,j2r,D2r,G2r,_E,O2r,$r,O8,V2r,M2e,X2r,z2r,an,W2r,E2e,Q2r,H2r,C2e,U2r,J2r,w2e,Y2r,K2r,Z2r,ye,uE,A2e,evr,ovr,kH,rvr,tvr,avr,bE,y2e,nvr,svr,SH,lvr,ivr,dvr,vE,L2e,cvr,fvr,RH,mvr,gvr,hvr,FE,x2e,pvr,_vr,PH,uvr,bvr,vvr,TE,$2e,Fvr,Tvr,BH,Mvr,Evr,Cvr,ME,k2e,wvr,Avr,IH,yvr,Lvr,xvr,EE,S2e,$vr,kvr,NH,Svr,Rvr,Pvr,CE,R2e,Bvr,Ivr,qH,Nvr,qvr,jvr,wE,P2e,Dvr,Gvr,jH,Ovr,Vvr,Xvr,AE,B2e,zvr,Wvr,DH,Qvr,Hvr,Uvr,yE,Bje,nc,LE,I2e,V8,Jvr,N2e,Yvr,Ije,tr,X8,Kvr,sc,Zvr,GH,eFr,oFr,OH,rFr,tFr,aFr,z8,nFr,q2e,sFr,lFr,iFr,Rt,W8,dFr,j2e,cFr,fFr,lc,mFr,D2e,gFr,hFr,VH,pFr,_Fr,uFr,xE,bFr,kr,Q8,vFr,G2e,FFr,TFr,nn,MFr,O2e,EFr,CFr,V2e,wFr,AFr,X2e,yFr,LFr,xFr,oe,$E,z2e,$Fr,kFr,XH,SFr,RFr,PFr,kE,W2e,BFr,IFr,zH,NFr,qFr,jFr,SE,Q2e,DFr,GFr,WH,OFr,VFr,XFr,RE,H2e,zFr,WFr,QH,QFr,HFr,UFr,PE,U2e,JFr,YFr,HH,KFr,ZFr,eTr,BE,J2e,oTr,rTr,UH,tTr,aTr,nTr,IE,Y2e,sTr,lTr,JH,iTr,dTr,cTr,NE,K2e,fTr,mTr,YH,gTr,hTr,pTr,qE,Z2e,_Tr,uTr,KH,bTr,vTr,FTr,jE,eve,TTr,MTr,ZH,ETr,CTr,wTr,DE,ove,ATr,yTr,eU,LTr,xTr,$Tr,GE,rve,kTr,STr,oU,RTr,PTr,BTr,OE,tve,ITr,NTr,rU,qTr,jTr,DTr,VE,ave,GTr,OTr,tU,VTr,XTr,zTr,XE,nve,WTr,QTr,aU,HTr,UTr,JTr,zE,sve,YTr,KTr,nU,ZTr,eMr,oMr,WE,lve,rMr,tMr,sU,aMr,nMr,sMr,QE,ive,lMr,iMr,lU,dMr,cMr,fMr,HE,dve,mMr,gMr,iU,hMr,pMr,_Mr,UE,cve,uMr,bMr,dU,vMr,FMr,TMr,JE,fve,MMr,EMr,cU,CMr,wMr,AMr,YE,mve,yMr,LMr,fU,xMr,$Mr,kMr,KE,gve,SMr,RMr,mU,PMr,BMr,IMr,ZE,hve,NMr,qMr,gU,jMr,DMr,GMr,eC,pve,OMr,VMr,hU,XMr,zMr,WMr,oC,_ve,QMr,HMr,pU,UMr,JMr,YMr,rC,Nje,ic,tC,uve,H8,KMr,bve,ZMr,qje,ar,U8,eEr,dc,oEr,_U,rEr,tEr,uU,aEr,nEr,sEr,J8,lEr,vve,iEr,dEr,cEr,Pt,Y8,fEr,Fve,mEr,gEr,cc,hEr,Tve,pEr,_Er,bU,uEr,bEr,vEr,aC,FEr,Sr,K8,TEr,Mve,MEr,EEr,sn,CEr,Eve,wEr,AEr,Cve,yEr,LEr,wve,xEr,$Er,kEr,pe,nC,Ave,SEr,REr,vU,PEr,BEr,IEr,sC,yve,NEr,qEr,FU,jEr,DEr,GEr,lC,Lve,OEr,VEr,TU,XEr,zEr,WEr,iC,xve,QEr,HEr,MU,UEr,JEr,YEr,dC,$ve,KEr,ZEr,EU,eCr,oCr,rCr,cC,kve,tCr,aCr,CU,nCr,sCr,lCr,fC,Sve,iCr,dCr,wU,cCr,fCr,mCr,mC,Rve,gCr,hCr,AU,pCr,_Cr,uCr,gC,Pve,bCr,vCr,yU,FCr,TCr,MCr,hC,Bve,ECr,CCr,LU,wCr,ACr,yCr,pC,Ive,LCr,xCr,xU,$Cr,kCr,SCr,_C,Nve,RCr,PCr,$U,BCr,ICr,NCr,uC,qve,qCr,jCr,kU,DCr,GCr,OCr,bC,jve,VCr,XCr,SU,zCr,WCr,QCr,vC,Dve,HCr,UCr,RU,JCr,YCr,KCr,FC,Gve,ZCr,e5r,PU,o5r,r5r,t5r,TC,Ove,a5r,n5r,BU,s5r,l5r,i5r,MC,jje,fc,EC,Vve,Z8,d5r,Xve,c5r,Dje,nr,e9,f5r,mc,m5r,IU,g5r,h5r,NU,p5r,_5r,u5r,o9,b5r,zve,v5r,F5r,T5r,Bt,r9,M5r,Wve,E5r,C5r,gc,w5r,Qve,A5r,y5r,qU,L5r,x5r,$5r,CC,k5r,Rr,t9,S5r,Hve,R5r,P5r,ln,B5r,Uve,I5r,N5r,Jve,q5r,j5r,Yve,D5r,G5r,O5r,a9,wC,Kve,V5r,X5r,jU,z5r,W5r,Q5r,AC,Zve,H5r,U5r,DU,J5r,Y5r,K5r,yC,Gje,hc,LC,eFe,n9,Z5r,oFe,e3r,Oje,sr,s9,o3r,pc,r3r,GU,t3r,a3r,OU,n3r,s3r,l3r,l9,i3r,rFe,d3r,c3r,f3r,It,i9,m3r,tFe,g3r,h3r,_c,p3r,aFe,_3r,u3r,VU,b3r,v3r,F3r,xC,T3r,Pr,d9,M3r,nFe,E3r,C3r,dn,w3r,sFe,A3r,y3r,lFe,L3r,x3r,iFe,$3r,k3r,S3r,dFe,$C,cFe,R3r,P3r,XU,B3r,I3r,N3r,kC,Vje,uc,SC,fFe,c9,q3r,mFe,j3r,Xje,lr,f9,D3r,bc,G3r,zU,O3r,V3r,WU,X3r,z3r,W3r,m9,Q3r,gFe,H3r,U3r,J3r,Nt,g9,Y3r,hFe,K3r,Z3r,vc,ewr,pFe,owr,rwr,QU,twr,awr,nwr,RC,swr,Br,h9,lwr,_Fe,iwr,dwr,cn,cwr,uFe,fwr,mwr,bFe,gwr,hwr,vFe,pwr,_wr,uwr,de,PC,FFe,bwr,vwr,HU,Fwr,Twr,Mwr,BC,TFe,Ewr,Cwr,UU,wwr,Awr,ywr,IC,MFe,Lwr,xwr,JU,$wr,kwr,Swr,NC,EFe,Rwr,Pwr,YU,Bwr,Iwr,Nwr,qC,CFe,qwr,jwr,KU,Dwr,Gwr,Owr,jC,wFe,Vwr,Xwr,ZU,zwr,Wwr,Qwr,DC,AFe,Hwr,Uwr,eJ,Jwr,Ywr,Kwr,GC,yFe,Zwr,e0r,oJ,o0r,r0r,t0r,OC,LFe,a0r,n0r,rJ,s0r,l0r,i0r,VC,xFe,d0r,c0r,tJ,f0r,m0r,g0r,XC,$Fe,h0r,p0r,aJ,_0r,u0r,b0r,zC,kFe,v0r,F0r,nJ,T0r,M0r,E0r,WC,SFe,C0r,w0r,sJ,A0r,y0r,L0r,QC,RFe,x0r,$0r,lJ,k0r,S0r,R0r,HC,PFe,P0r,B0r,iJ,I0r,N0r,q0r,UC,BFe,j0r,D0r,dJ,G0r,O0r,V0r,JC,IFe,X0r,z0r,cJ,W0r,Q0r,H0r,YC,NFe,U0r,J0r,fJ,Y0r,K0r,Z0r,KC,qFe,e6r,o6r,mJ,r6r,t6r,a6r,ZC,jFe,n6r,s6r,gJ,l6r,i6r,d6r,e5,zje,Fc,o5,DFe,p9,c6r,GFe,f6r,Wje,ir,_9,m6r,Tc,g6r,hJ,h6r,p6r,pJ,_6r,u6r,b6r,u9,v6r,OFe,F6r,T6r,M6r,qt,b9,E6r,VFe,C6r,w6r,Mc,A6r,XFe,y6r,L6r,_J,x6r,$6r,k6r,r5,S6r,Ir,v9,R6r,zFe,P6r,B6r,fn,I6r,WFe,N6r,q6r,QFe,j6r,D6r,HFe,G6r,O6r,V6r,ce,t5,UFe,X6r,z6r,uJ,W6r,Q6r,H6r,a5,JFe,U6r,J6r,bJ,Y6r,K6r,Z6r,n5,YFe,eAr,oAr,vJ,rAr,tAr,aAr,s5,KFe,nAr,sAr,FJ,lAr,iAr,dAr,l5,ZFe,cAr,fAr,TJ,mAr,gAr,hAr,i5,eTe,pAr,_Ar,MJ,uAr,bAr,vAr,d5,oTe,FAr,TAr,EJ,MAr,EAr,CAr,c5,rTe,wAr,AAr,CJ,yAr,LAr,xAr,f5,tTe,$Ar,kAr,wJ,SAr,RAr,PAr,m5,aTe,BAr,IAr,AJ,NAr,qAr,jAr,g5,nTe,DAr,GAr,yJ,OAr,VAr,XAr,h5,sTe,zAr,WAr,LJ,QAr,HAr,UAr,p5,lTe,JAr,YAr,xJ,KAr,ZAr,eyr,_5,iTe,oyr,ryr,$J,tyr,ayr,nyr,u5,dTe,syr,lyr,kJ,iyr,dyr,cyr,b5,cTe,fyr,myr,SJ,gyr,hyr,pyr,v5,fTe,_yr,uyr,RJ,byr,vyr,Fyr,F5,mTe,Tyr,Myr,PJ,Eyr,Cyr,wyr,T5,gTe,Ayr,yyr,BJ,Lyr,xyr,$yr,M5,hTe,kyr,Syr,IJ,Ryr,Pyr,Byr,E5,Qje,Ec,C5,pTe,F9,Iyr,_Te,Nyr,Hje,dr,T9,qyr,Cc,jyr,NJ,Dyr,Gyr,qJ,Oyr,Vyr,Xyr,M9,zyr,uTe,Wyr,Qyr,Hyr,jt,E9,Uyr,bTe,Jyr,Yyr,wc,Kyr,vTe,Zyr,eLr,jJ,oLr,rLr,tLr,w5,aLr,Nr,C9,nLr,FTe,sLr,lLr,mn,iLr,TTe,dLr,cLr,MTe,fLr,mLr,ETe,gLr,hLr,pLr,CTe,A5,wTe,_Lr,uLr,DJ,bLr,vLr,FLr,y5,Uje,Ac,L5,ATe,w9,TLr,yTe,MLr,Jje,cr,A9,ELr,yc,CLr,GJ,wLr,ALr,OJ,yLr,LLr,xLr,y9,$Lr,LTe,kLr,SLr,RLr,Dt,L9,PLr,xTe,BLr,ILr,Lc,NLr,$Te,qLr,jLr,VJ,DLr,GLr,OLr,x5,VLr,qr,x9,XLr,kTe,zLr,WLr,gn,QLr,STe,HLr,ULr,RTe,JLr,YLr,PTe,KLr,ZLr,e8r,BTe,$5,ITe,o8r,r8r,XJ,t8r,a8r,n8r,k5,Yje,xc,S5,NTe,$9,s8r,qTe,l8r,Kje,fr,k9,i8r,$c,d8r,zJ,c8r,f8r,WJ,m8r,g8r,h8r,S9,p8r,jTe,_8r,u8r,b8r,Gt,R9,v8r,DTe,F8r,T8r,kc,M8r,GTe,E8r,C8r,QJ,w8r,A8r,y8r,R5,L8r,jr,P9,x8r,OTe,$8r,k8r,hn,S8r,VTe,R8r,P8r,XTe,B8r,I8r,zTe,N8r,q8r,j8r,te,P5,WTe,D8r,G8r,HJ,O8r,V8r,X8r,B5,QTe,z8r,W8r,UJ,Q8r,H8r,U8r,I5,HTe,J8r,Y8r,JJ,K8r,Z8r,e9r,N5,UTe,o9r,r9r,YJ,t9r,a9r,n9r,q5,JTe,s9r,l9r,KJ,i9r,d9r,c9r,j5,YTe,f9r,m9r,ZJ,g9r,h9r,p9r,D5,KTe,_9r,u9r,eY,b9r,v9r,F9r,G5,ZTe,T9r,M9r,oY,E9r,C9r,w9r,O5,eMe,A9r,y9r,rY,L9r,x9r,$9r,V5,oMe,k9r,S9r,tY,R9r,P9r,B9r,X5,rMe,I9r,N9r,aY,q9r,j9r,D9r,z5,tMe,G9r,O9r,nY,V9r,X9r,z9r,W5,aMe,W9r,Q9r,sY,H9r,U9r,J9r,Q5,nMe,Y9r,K9r,lY,Z9r,exr,oxr,H5,sMe,rxr,txr,iY,axr,nxr,sxr,U5,lMe,lxr,ixr,dY,dxr,cxr,fxr,J5,iMe,mxr,gxr,cY,hxr,pxr,_xr,Y5,dMe,uxr,bxr,fY,vxr,Fxr,Txr,K5,cMe,Mxr,Exr,mY,Cxr,wxr,Axr,Z5,fMe,yxr,Lxr,gY,xxr,$xr,kxr,e3,mMe,Sxr,Rxr,hY,Pxr,Bxr,Ixr,o3,gMe,Nxr,qxr,pY,jxr,Dxr,Gxr,r3,hMe,Oxr,Vxr,_Y,Xxr,zxr,Wxr,t3,pMe,Qxr,Hxr,uY,Uxr,Jxr,Yxr,a3,_Me,Kxr,Zxr,bY,e$r,o$r,r$r,n3,Zje,Sc,s3,uMe,B9,t$r,bMe,a$r,eDe,mr,I9,n$r,Rc,s$r,vY,l$r,i$r,FY,d$r,c$r,f$r,N9,m$r,vMe,g$r,h$r,p$r,Ot,q9,_$r,FMe,u$r,b$r,Pc,v$r,TMe,F$r,T$r,TY,M$r,E$r,C$r,l3,w$r,Dr,j9,A$r,MMe,y$r,L$r,pn,x$r,EMe,$$r,k$r,CMe,S$r,R$r,wMe,P$r,B$r,I$r,Re,i3,AMe,N$r,q$r,MY,j$r,D$r,G$r,d3,yMe,O$r,V$r,EY,X$r,z$r,W$r,c3,LMe,Q$r,H$r,CY,U$r,J$r,Y$r,f3,xMe,K$r,Z$r,wY,ekr,okr,rkr,m3,$Me,tkr,akr,AY,nkr,skr,lkr,g3,kMe,ikr,dkr,yY,ckr,fkr,mkr,h3,SMe,gkr,hkr,LY,pkr,_kr,ukr,p3,RMe,bkr,vkr,xY,Fkr,Tkr,Mkr,_3,PMe,Ekr,Ckr,$Y,wkr,Akr,ykr,u3,oDe,Bc,b3,BMe,D9,Lkr,IMe,xkr,rDe,gr,G9,$kr,Ic,kkr,kY,Skr,Rkr,SY,Pkr,Bkr,Ikr,O9,Nkr,NMe,qkr,jkr,Dkr,Vt,V9,Gkr,qMe,Okr,Vkr,Nc,Xkr,jMe,zkr,Wkr,RY,Qkr,Hkr,Ukr,v3,Jkr,Gr,X9,Ykr,DMe,Kkr,Zkr,_n,eSr,GMe,oSr,rSr,OMe,tSr,aSr,VMe,nSr,sSr,lSr,Ee,F3,XMe,iSr,dSr,PY,cSr,fSr,mSr,T3,zMe,gSr,hSr,BY,pSr,_Sr,uSr,M3,WMe,bSr,vSr,IY,FSr,TSr,MSr,E3,QMe,ESr,CSr,NY,wSr,ASr,ySr,C3,HMe,LSr,xSr,qY,$Sr,kSr,SSr,w3,UMe,RSr,PSr,jY,BSr,ISr,NSr,A3,JMe,qSr,jSr,DY,DSr,GSr,OSr,y3,YMe,VSr,XSr,GY,zSr,WSr,QSr,L3,KMe,HSr,USr,OY,JSr,YSr,KSr,x3,ZMe,ZSr,eRr,VY,oRr,rRr,tRr,$3,eEe,aRr,nRr,XY,sRr,lRr,iRr,k3,oEe,dRr,cRr,zY,fRr,mRr,gRr,S3,tDe,qc,R3,rEe,z9,hRr,tEe,pRr,aDe,hr,W9,_Rr,jc,uRr,WY,bRr,vRr,QY,FRr,TRr,MRr,Q9,ERr,aEe,CRr,wRr,ARr,Xt,H9,yRr,nEe,LRr,xRr,Dc,$Rr,sEe,kRr,SRr,HY,RRr,PRr,BRr,P3,IRr,Or,U9,NRr,lEe,qRr,jRr,un,DRr,iEe,GRr,ORr,dEe,VRr,XRr,cEe,zRr,WRr,QRr,Le,B3,fEe,HRr,URr,UY,JRr,YRr,KRr,I3,mEe,ZRr,ePr,JY,oPr,rPr,tPr,N3,gEe,aPr,nPr,YY,sPr,lPr,iPr,q3,hEe,dPr,cPr,KY,fPr,mPr,gPr,j3,pEe,hPr,pPr,ZY,_Pr,uPr,bPr,D3,_Ee,vPr,FPr,eK,TPr,MPr,EPr,G3,uEe,CPr,wPr,oK,APr,yPr,LPr,O3,bEe,xPr,$Pr,rK,kPr,SPr,RPr,V3,vEe,PPr,BPr,tK,IPr,NPr,qPr,X3,FEe,jPr,DPr,aK,GPr,OPr,VPr,z3,nDe,Gc,W3,TEe,J9,XPr,MEe,zPr,sDe,pr,Y9,WPr,Oc,QPr,nK,HPr,UPr,sK,JPr,YPr,KPr,K9,ZPr,EEe,eBr,oBr,rBr,zt,Z9,tBr,CEe,aBr,nBr,Vc,sBr,wEe,lBr,iBr,lK,dBr,cBr,fBr,Q3,mBr,Vr,ex,gBr,AEe,hBr,pBr,bn,_Br,yEe,uBr,bBr,LEe,vBr,FBr,xEe,TBr,MBr,EBr,Pe,H3,$Ee,CBr,wBr,iK,ABr,yBr,LBr,U3,kEe,xBr,$Br,dK,kBr,SBr,RBr,J3,SEe,PBr,BBr,cK,IBr,NBr,qBr,Y3,REe,jBr,DBr,fK,GBr,OBr,VBr,K3,PEe,XBr,zBr,mK,WBr,QBr,HBr,Z3,BEe,UBr,JBr,gK,YBr,KBr,ZBr,ew,IEe,eIr,oIr,hK,rIr,tIr,aIr,ow,NEe,nIr,sIr,pK,lIr,iIr,dIr,rw,qEe,cIr,fIr,_K,mIr,gIr,hIr,tw,lDe,Xc,aw,jEe,ox,pIr,DEe,_Ir,iDe,_r,rx,uIr,zc,bIr,uK,vIr,FIr,bK,TIr,MIr,EIr,tx,CIr,GEe,wIr,AIr,yIr,Wt,ax,LIr,OEe,xIr,$Ir,Wc,kIr,VEe,SIr,RIr,vK,PIr,BIr,IIr,nw,NIr,Xr,nx,qIr,XEe,jIr,DIr,vn,GIr,zEe,OIr,VIr,WEe,XIr,zIr,QEe,WIr,QIr,HIr,xe,sw,HEe,UIr,JIr,FK,YIr,KIr,ZIr,lw,UEe,eNr,oNr,TK,rNr,tNr,aNr,iw,JEe,nNr,sNr,MK,lNr,iNr,dNr,dw,YEe,cNr,fNr,EK,mNr,gNr,hNr,cw,KEe,pNr,_Nr,CK,uNr,bNr,vNr,fw,ZEe,FNr,TNr,wK,MNr,ENr,CNr,mw,eCe,wNr,ANr,AK,yNr,LNr,xNr,gw,oCe,$Nr,kNr,yK,SNr,RNr,PNr,hw,rCe,BNr,INr,LK,NNr,qNr,jNr,pw,tCe,DNr,GNr,xK,ONr,VNr,XNr,_w,dDe,Qc,uw,aCe,sx,zNr,nCe,WNr,cDe,ur,lx,QNr,Hc,HNr,$K,UNr,JNr,kK,YNr,KNr,ZNr,ix,eqr,sCe,oqr,rqr,tqr,Qt,dx,aqr,lCe,nqr,sqr,Uc,lqr,iCe,iqr,dqr,SK,cqr,fqr,mqr,bw,gqr,zr,cx,hqr,dCe,pqr,_qr,Fn,uqr,cCe,bqr,vqr,fCe,Fqr,Tqr,mCe,Mqr,Eqr,Cqr,$e,vw,gCe,wqr,Aqr,RK,yqr,Lqr,xqr,Fw,hCe,$qr,kqr,PK,Sqr,Rqr,Pqr,Tw,pCe,Bqr,Iqr,BK,Nqr,qqr,jqr,Mw,_Ce,Dqr,Gqr,IK,Oqr,Vqr,Xqr,Ew,uCe,zqr,Wqr,NK,Qqr,Hqr,Uqr,Cw,bCe,Jqr,Yqr,qK,Kqr,Zqr,ejr,ww,vCe,ojr,rjr,jK,tjr,ajr,njr,Aw,FCe,sjr,ljr,DK,ijr,djr,cjr,yw,TCe,fjr,mjr,GK,gjr,hjr,pjr,Lw,MCe,_jr,ujr,OK,bjr,vjr,Fjr,xw,fDe,Jc,$w,ECe,fx,Tjr,CCe,Mjr,mDe,br,mx,Ejr,Yc,Cjr,VK,wjr,Ajr,XK,yjr,Ljr,xjr,gx,$jr,wCe,kjr,Sjr,Rjr,Ht,hx,Pjr,ACe,Bjr,Ijr,Kc,Njr,yCe,qjr,jjr,zK,Djr,Gjr,Ojr,kw,Vjr,Wr,px,Xjr,LCe,zjr,Wjr,Tn,Qjr,xCe,Hjr,Ujr,$Ce,Jjr,Yjr,kCe,Kjr,Zjr,eDr,De,Sw,SCe,oDr,rDr,WK,tDr,aDr,nDr,Rw,RCe,sDr,lDr,QK,iDr,dDr,cDr,Pw,PCe,fDr,mDr,HK,gDr,hDr,pDr,Bw,BCe,_Dr,uDr,UK,bDr,vDr,FDr,Iw,ICe,TDr,MDr,JK,EDr,CDr,wDr,Nw,NCe,ADr,yDr,YK,LDr,xDr,$Dr,qw,qCe,kDr,SDr,KK,RDr,PDr,BDr,jw,jCe,IDr,NDr,ZK,qDr,jDr,DDr,Dw,gDe,Zc,Gw,DCe,_x,GDr,GCe,ODr,hDe,vr,ux,VDr,ef,XDr,eZ,zDr,WDr,oZ,QDr,HDr,UDr,bx,JDr,OCe,YDr,KDr,ZDr,Ut,vx,eGr,VCe,oGr,rGr,of,tGr,XCe,aGr,nGr,rZ,sGr,lGr,iGr,Ow,dGr,Qr,Fx,cGr,zCe,fGr,mGr,Mn,gGr,WCe,hGr,pGr,QCe,_Gr,uGr,HCe,bGr,vGr,FGr,Ge,Vw,UCe,TGr,MGr,tZ,EGr,CGr,wGr,Xw,JCe,AGr,yGr,aZ,LGr,xGr,$Gr,zw,YCe,kGr,SGr,nZ,RGr,PGr,BGr,Ww,KCe,IGr,NGr,sZ,qGr,jGr,DGr,Qw,ZCe,GGr,OGr,lZ,VGr,XGr,zGr,Hw,e5e,WGr,QGr,iZ,HGr,UGr,JGr,Uw,o5e,YGr,KGr,dZ,ZGr,eOr,oOr,Jw,r5e,rOr,tOr,cZ,aOr,nOr,sOr,Yw,pDe,rf,Kw,t5e,Tx,lOr,a5e,iOr,_De,Fr,Mx,dOr,tf,cOr,fZ,fOr,mOr,mZ,gOr,hOr,pOr,Ex,_Or,n5e,uOr,bOr,vOr,Jt,Cx,FOr,s5e,TOr,MOr,af,EOr,l5e,COr,wOr,gZ,AOr,yOr,LOr,Zw,xOr,Hr,wx,$Or,i5e,kOr,SOr,En,ROr,d5e,POr,BOr,c5e,IOr,NOr,f5e,qOr,jOr,DOr,m5e,e0,g5e,GOr,OOr,hZ,VOr,XOr,zOr,o0,uDe,nf,r0,h5e,Ax,WOr,p5e,QOr,bDe,Tr,yx,HOr,sf,UOr,pZ,JOr,YOr,_Z,KOr,ZOr,eVr,Lx,oVr,_5e,rVr,tVr,aVr,Yt,xx,nVr,u5e,sVr,lVr,lf,iVr,b5e,dVr,cVr,uZ,fVr,mVr,gVr,t0,hVr,Ur,$x,pVr,v5e,_Vr,uVr,Cn,bVr,F5e,vVr,FVr,T5e,TVr,MVr,M5e,EVr,CVr,wVr,kx,a0,E5e,AVr,yVr,bZ,LVr,xVr,$Vr,n0,C5e,kVr,SVr,vZ,RVr,PVr,BVr,s0,vDe,df,l0,w5e,Sx,IVr,A5e,NVr,FDe,Mr,Rx,qVr,cf,jVr,FZ,DVr,GVr,TZ,OVr,VVr,XVr,Px,zVr,y5e,WVr,QVr,HVr,Kt,Bx,UVr,L5e,JVr,YVr,ff,KVr,x5e,ZVr,eXr,MZ,oXr,rXr,tXr,i0,aXr,Jr,Ix,nXr,$5e,sXr,lXr,wn,iXr,k5e,dXr,cXr,S5e,fXr,mXr,R5e,gXr,hXr,pXr,P5e,d0,B5e,_Xr,uXr,EZ,bXr,vXr,FXr,c0,TDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),SA=new re({}),RA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new TXr({props:{warning:!0,$$slots:{default:[mkt]},$$scope:{ctx:L}}}),PA=new re({}),BA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L585"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L608"}}),Cg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L731"}}),DA=new re({}),GA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L391"}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17474/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L405"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L604"}}),WA=new re({}),QA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),qh=new TXr({props:{$$slots:{default:[pkt]},$$scope:{ctx:L}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),KA=new re({}),ZA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L88"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L102"}}),np=new TXr({props:{$$slots:{default:[ukt]},$$scope:{ctx:L}}}),sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L255"}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L739"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),dp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L746"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L761"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L768"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L775"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L784"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L818"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L825"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L811"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L793"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L800"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L834"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L873"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L880"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L903"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L887"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L894"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L912"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L919"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),WL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L866"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L841"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L848"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L857"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),p9=new re({}),_9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),_x=new re({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),Ax=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),LA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),xA=o("AutoConfig"),Ln=o(", "),xn=a("a"),$A=o("AutoModel"),pi=o(`, and
`),$n=a("a"),kA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),J$=o("will create a model that is an instance of "),ui=a("a"),Y$=o("BertModel"),K$=o("."),Eo=l(),wa=a("p"),Z$=o("There is one class of "),bf=a("code"),ek=o("AutoModel"),xOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bqe=l(),bi=a("h2"),vf=a("a"),_oe=a("span"),F(SA.$$.fragment),$Oe=l(),uoe=a("span"),kOe=o("Extending the Auto Classes"),vqe=l(),kn=a("p"),SOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=a("code"),ROe=o("NewModel"),POe=o(", make sure you have a "),voe=a("code"),BOe=o("NewModelConfig"),IOe=o(` then you can add those to the auto
classes like this:`),Fqe=l(),F(RA.$$.fragment),Tqe=l(),ok=a("p"),NOe=o("You will then be able to use the auto classes like you would usually do!"),Mqe=l(),F(Ff.$$.fragment),Eqe=l(),vi=a("h2"),Tf=a("a"),Foe=a("span"),F(PA.$$.fragment),qOe=l(),Toe=a("span"),jOe=o("AutoConfig"),Cqe=l(),Co=a("div"),F(BA.$$.fragment),DOe=l(),IA=a("p"),GOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=a("a"),OOe=o("from_pretrained()"),VOe=o(" class method."),XOe=l(),NA=a("p"),zOe=o("This class cannot be instantiated directly using "),Moe=a("code"),WOe=o("__init__()"),QOe=o(" (throws an error)."),HOe=l(),Er=a("div"),F(qA.$$.fragment),UOe=l(),Eoe=a("p"),JOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YOe=l(),Fi=a("p"),KOe=o("The configuration class to instantiate is selected based on the "),Coe=a("code"),ZOe=o("model_type"),eVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=a("code"),oVe=o("pretrained_model_name_or_path"),rVe=o(":"),tVe=l(),A=a("ul"),Mf=a("li"),Aoe=a("strong"),aVe=o("albert"),nVe=o(" \u2014 "),tk=a("a"),sVe=o("AlbertConfig"),lVe=o(" (ALBERT model)"),iVe=l(),Ef=a("li"),yoe=a("strong"),dVe=o("bart"),cVe=o(" \u2014 "),ak=a("a"),fVe=o("BartConfig"),mVe=o(" (BART model)"),gVe=l(),Cf=a("li"),Loe=a("strong"),hVe=o("beit"),pVe=o(" \u2014 "),nk=a("a"),_Ve=o("BeitConfig"),uVe=o(" (BEiT model)"),bVe=l(),wf=a("li"),xoe=a("strong"),vVe=o("bert"),FVe=o(" \u2014 "),sk=a("a"),TVe=o("BertConfig"),MVe=o(" (BERT model)"),EVe=l(),Af=a("li"),$oe=a("strong"),CVe=o("bert-generation"),wVe=o(" \u2014 "),lk=a("a"),AVe=o("BertGenerationConfig"),yVe=o(" (Bert Generation model)"),LVe=l(),yf=a("li"),koe=a("strong"),xVe=o("big_bird"),$Ve=o(" \u2014 "),ik=a("a"),kVe=o("BigBirdConfig"),SVe=o(" (BigBird model)"),RVe=l(),Lf=a("li"),Soe=a("strong"),PVe=o("bigbird_pegasus"),BVe=o(" \u2014 "),dk=a("a"),IVe=o("BigBirdPegasusConfig"),NVe=o(" (BigBirdPegasus model)"),qVe=l(),xf=a("li"),Roe=a("strong"),jVe=o("blenderbot"),DVe=o(" \u2014 "),ck=a("a"),GVe=o("BlenderbotConfig"),OVe=o(" (Blenderbot model)"),VVe=l(),$f=a("li"),Poe=a("strong"),XVe=o("blenderbot-small"),zVe=o(" \u2014 "),fk=a("a"),WVe=o("BlenderbotSmallConfig"),QVe=o(" (BlenderbotSmall model)"),HVe=l(),kf=a("li"),Boe=a("strong"),UVe=o("bloom"),JVe=o(" \u2014 "),mk=a("a"),YVe=o("BloomConfig"),KVe=o(" (BLOOM model)"),ZVe=l(),Sf=a("li"),Ioe=a("strong"),eXe=o("camembert"),oXe=o(" \u2014 "),gk=a("a"),rXe=o("CamembertConfig"),tXe=o(" (CamemBERT model)"),aXe=l(),Rf=a("li"),Noe=a("strong"),nXe=o("canine"),sXe=o(" \u2014 "),hk=a("a"),lXe=o("CanineConfig"),iXe=o(" (Canine model)"),dXe=l(),Pf=a("li"),qoe=a("strong"),cXe=o("clip"),fXe=o(" \u2014 "),pk=a("a"),mXe=o("CLIPConfig"),gXe=o(" (CLIP model)"),hXe=l(),Bf=a("li"),joe=a("strong"),pXe=o("convbert"),_Xe=o(" \u2014 "),_k=a("a"),uXe=o("ConvBertConfig"),bXe=o(" (ConvBERT model)"),vXe=l(),If=a("li"),Doe=a("strong"),FXe=o("convnext"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("ConvNextConfig"),EXe=o(" (ConvNext model)"),CXe=l(),Nf=a("li"),Goe=a("strong"),wXe=o("ctrl"),AXe=o(" \u2014 "),bk=a("a"),yXe=o("CTRLConfig"),LXe=o(" (CTRL model)"),xXe=l(),qf=a("li"),Ooe=a("strong"),$Xe=o("cvt"),kXe=o(" \u2014 "),vk=a("a"),SXe=o("CvtConfig"),RXe=o(" (CvT model)"),PXe=l(),jf=a("li"),Voe=a("strong"),BXe=o("data2vec-audio"),IXe=o(" \u2014 "),Fk=a("a"),NXe=o("Data2VecAudioConfig"),qXe=o(" (Data2VecAudio model)"),jXe=l(),Df=a("li"),Xoe=a("strong"),DXe=o("data2vec-text"),GXe=o(" \u2014 "),Tk=a("a"),OXe=o("Data2VecTextConfig"),VXe=o(" (Data2VecText model)"),XXe=l(),Gf=a("li"),zoe=a("strong"),zXe=o("data2vec-vision"),WXe=o(" \u2014 "),Mk=a("a"),QXe=o("Data2VecVisionConfig"),HXe=o(" (Data2VecVision model)"),UXe=l(),Of=a("li"),Woe=a("strong"),JXe=o("deberta"),YXe=o(" \u2014 "),Ek=a("a"),KXe=o("DebertaConfig"),ZXe=o(" (DeBERTa model)"),eze=l(),Vf=a("li"),Qoe=a("strong"),oze=o("deberta-v2"),rze=o(" \u2014 "),Ck=a("a"),tze=o("DebertaV2Config"),aze=o(" (DeBERTa-v2 model)"),nze=l(),Xf=a("li"),Hoe=a("strong"),sze=o("decision_transformer"),lze=o(" \u2014 "),wk=a("a"),ize=o("DecisionTransformerConfig"),dze=o(" (Decision Transformer model)"),cze=l(),zf=a("li"),Uoe=a("strong"),fze=o("deit"),mze=o(" \u2014 "),Ak=a("a"),gze=o("DeiTConfig"),hze=o(" (DeiT model)"),pze=l(),Wf=a("li"),Joe=a("strong"),_ze=o("detr"),uze=o(" \u2014 "),yk=a("a"),bze=o("DetrConfig"),vze=o(" (DETR model)"),Fze=l(),Qf=a("li"),Yoe=a("strong"),Tze=o("distilbert"),Mze=o(" \u2014 "),Lk=a("a"),Eze=o("DistilBertConfig"),Cze=o(" (DistilBERT model)"),wze=l(),Hf=a("li"),Koe=a("strong"),Aze=o("dpr"),yze=o(" \u2014 "),xk=a("a"),Lze=o("DPRConfig"),xze=o(" (DPR model)"),$ze=l(),Uf=a("li"),Zoe=a("strong"),kze=o("dpt"),Sze=o(" \u2014 "),$k=a("a"),Rze=o("DPTConfig"),Pze=o(" (DPT model)"),Bze=l(),Jf=a("li"),ere=a("strong"),Ize=o("electra"),Nze=o(" \u2014 "),kk=a("a"),qze=o("ElectraConfig"),jze=o(" (ELECTRA model)"),Dze=l(),Yf=a("li"),ore=a("strong"),Gze=o("encoder-decoder"),Oze=o(" \u2014 "),Sk=a("a"),Vze=o("EncoderDecoderConfig"),Xze=o(" (Encoder decoder model)"),zze=l(),Kf=a("li"),rre=a("strong"),Wze=o("flaubert"),Qze=o(" \u2014 "),Rk=a("a"),Hze=o("FlaubertConfig"),Uze=o(" (FlauBERT model)"),Jze=l(),Zf=a("li"),tre=a("strong"),Yze=o("flava"),Kze=o(" \u2014 "),Pk=a("a"),Zze=o("FlavaConfig"),eWe=o(" (Flava model)"),oWe=l(),em=a("li"),are=a("strong"),rWe=o("fnet"),tWe=o(" \u2014 "),Bk=a("a"),aWe=o("FNetConfig"),nWe=o(" (FNet model)"),sWe=l(),om=a("li"),nre=a("strong"),lWe=o("fsmt"),iWe=o(" \u2014 "),Ik=a("a"),dWe=o("FSMTConfig"),cWe=o(" (FairSeq Machine-Translation model)"),fWe=l(),rm=a("li"),sre=a("strong"),mWe=o("funnel"),gWe=o(" \u2014 "),Nk=a("a"),hWe=o("FunnelConfig"),pWe=o(" (Funnel Transformer model)"),_We=l(),tm=a("li"),lre=a("strong"),uWe=o("glpn"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("GLPNConfig"),FWe=o(" (GLPN model)"),TWe=l(),am=a("li"),ire=a("strong"),MWe=o("gpt2"),EWe=o(" \u2014 "),jk=a("a"),CWe=o("GPT2Config"),wWe=o(" (OpenAI GPT-2 model)"),AWe=l(),nm=a("li"),dre=a("strong"),yWe=o("gpt_neo"),LWe=o(" \u2014 "),Dk=a("a"),xWe=o("GPTNeoConfig"),$We=o(" (GPT Neo model)"),kWe=l(),sm=a("li"),cre=a("strong"),SWe=o("gpt_neox"),RWe=o(" \u2014 "),Gk=a("a"),PWe=o("GPTNeoXConfig"),BWe=o(" (GPT NeoX model)"),IWe=l(),lm=a("li"),fre=a("strong"),NWe=o("gptj"),qWe=o(" \u2014 "),Ok=a("a"),jWe=o("GPTJConfig"),DWe=o(" (GPT-J model)"),GWe=l(),im=a("li"),mre=a("strong"),OWe=o("hubert"),VWe=o(" \u2014 "),Vk=a("a"),XWe=o("HubertConfig"),zWe=o(" (Hubert model)"),WWe=l(),dm=a("li"),gre=a("strong"),QWe=o("ibert"),HWe=o(" \u2014 "),Xk=a("a"),UWe=o("IBertConfig"),JWe=o(" (I-BERT model)"),YWe=l(),cm=a("li"),hre=a("strong"),KWe=o("imagegpt"),ZWe=o(" \u2014 "),zk=a("a"),eQe=o("ImageGPTConfig"),oQe=o(" (ImageGPT model)"),rQe=l(),fm=a("li"),pre=a("strong"),tQe=o("layoutlm"),aQe=o(" \u2014 "),Wk=a("a"),nQe=o("LayoutLMConfig"),sQe=o(" (LayoutLM model)"),lQe=l(),mm=a("li"),_re=a("strong"),iQe=o("layoutlmv2"),dQe=o(" \u2014 "),Qk=a("a"),cQe=o("LayoutLMv2Config"),fQe=o(" (LayoutLMv2 model)"),mQe=l(),gm=a("li"),ure=a("strong"),gQe=o("layoutlmv3"),hQe=o(" \u2014 "),Hk=a("a"),pQe=o("LayoutLMv3Config"),_Qe=o(" (LayoutLMv3 model)"),uQe=l(),hm=a("li"),bre=a("strong"),bQe=o("led"),vQe=o(" \u2014 "),Uk=a("a"),FQe=o("LEDConfig"),TQe=o(" (LED model)"),MQe=l(),pm=a("li"),vre=a("strong"),EQe=o("longformer"),CQe=o(" \u2014 "),Jk=a("a"),wQe=o("LongformerConfig"),AQe=o(" (Longformer model)"),yQe=l(),_m=a("li"),Fre=a("strong"),LQe=o("luke"),xQe=o(" \u2014 "),Yk=a("a"),$Qe=o("LukeConfig"),kQe=o(" (LUKE model)"),SQe=l(),um=a("li"),Tre=a("strong"),RQe=o("lxmert"),PQe=o(" \u2014 "),Kk=a("a"),BQe=o("LxmertConfig"),IQe=o(" (LXMERT model)"),NQe=l(),bm=a("li"),Mre=a("strong"),qQe=o("m2m_100"),jQe=o(" \u2014 "),Zk=a("a"),DQe=o("M2M100Config"),GQe=o(" (M2M100 model)"),OQe=l(),vm=a("li"),Ere=a("strong"),VQe=o("marian"),XQe=o(" \u2014 "),eS=a("a"),zQe=o("MarianConfig"),WQe=o(" (Marian model)"),QQe=l(),Fm=a("li"),Cre=a("strong"),HQe=o("maskformer"),UQe=o(" \u2014 "),oS=a("a"),JQe=o("MaskFormerConfig"),YQe=o(" (MaskFormer model)"),KQe=l(),Tm=a("li"),wre=a("strong"),ZQe=o("mbart"),eHe=o(" \u2014 "),rS=a("a"),oHe=o("MBartConfig"),rHe=o(" (mBART model)"),tHe=l(),Mm=a("li"),Are=a("strong"),aHe=o("megatron-bert"),nHe=o(" \u2014 "),tS=a("a"),sHe=o("MegatronBertConfig"),lHe=o(" (MegatronBert model)"),iHe=l(),Em=a("li"),yre=a("strong"),dHe=o("mobilebert"),cHe=o(" \u2014 "),aS=a("a"),fHe=o("MobileBertConfig"),mHe=o(" (MobileBERT model)"),gHe=l(),Cm=a("li"),Lre=a("strong"),hHe=o("mpnet"),pHe=o(" \u2014 "),nS=a("a"),_He=o("MPNetConfig"),uHe=o(" (MPNet model)"),bHe=l(),wm=a("li"),xre=a("strong"),vHe=o("mt5"),FHe=o(" \u2014 "),sS=a("a"),THe=o("MT5Config"),MHe=o(" (mT5 model)"),EHe=l(),Am=a("li"),$re=a("strong"),CHe=o("nystromformer"),wHe=o(" \u2014 "),lS=a("a"),AHe=o("NystromformerConfig"),yHe=o(" (Nystromformer model)"),LHe=l(),ym=a("li"),kre=a("strong"),xHe=o("openai-gpt"),$He=o(" \u2014 "),iS=a("a"),kHe=o("OpenAIGPTConfig"),SHe=o(" (OpenAI GPT model)"),RHe=l(),Lm=a("li"),Sre=a("strong"),PHe=o("opt"),BHe=o(" \u2014 "),dS=a("a"),IHe=o("OPTConfig"),NHe=o(" (OPT model)"),qHe=l(),xm=a("li"),Rre=a("strong"),jHe=o("pegasus"),DHe=o(" \u2014 "),cS=a("a"),GHe=o("PegasusConfig"),OHe=o(" (Pegasus model)"),VHe=l(),$m=a("li"),Pre=a("strong"),XHe=o("perceiver"),zHe=o(" \u2014 "),fS=a("a"),WHe=o("PerceiverConfig"),QHe=o(" (Perceiver model)"),HHe=l(),km=a("li"),Bre=a("strong"),UHe=o("plbart"),JHe=o(" \u2014 "),mS=a("a"),YHe=o("PLBartConfig"),KHe=o(" (PLBart model)"),ZHe=l(),Sm=a("li"),Ire=a("strong"),eUe=o("poolformer"),oUe=o(" \u2014 "),gS=a("a"),rUe=o("PoolFormerConfig"),tUe=o(" (PoolFormer model)"),aUe=l(),Rm=a("li"),Nre=a("strong"),nUe=o("prophetnet"),sUe=o(" \u2014 "),hS=a("a"),lUe=o("ProphetNetConfig"),iUe=o(" (ProphetNet model)"),dUe=l(),Pm=a("li"),qre=a("strong"),cUe=o("qdqbert"),fUe=o(" \u2014 "),pS=a("a"),mUe=o("QDQBertConfig"),gUe=o(" (QDQBert model)"),hUe=l(),Bm=a("li"),jre=a("strong"),pUe=o("rag"),_Ue=o(" \u2014 "),_S=a("a"),uUe=o("RagConfig"),bUe=o(" (RAG model)"),vUe=l(),Im=a("li"),Dre=a("strong"),FUe=o("realm"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("RealmConfig"),EUe=o(" (Realm model)"),CUe=l(),Nm=a("li"),Gre=a("strong"),wUe=o("reformer"),AUe=o(" \u2014 "),bS=a("a"),yUe=o("ReformerConfig"),LUe=o(" (Reformer model)"),xUe=l(),qm=a("li"),Ore=a("strong"),$Ue=o("regnet"),kUe=o(" \u2014 "),vS=a("a"),SUe=o("RegNetConfig"),RUe=o(" (RegNet model)"),PUe=l(),jm=a("li"),Vre=a("strong"),BUe=o("rembert"),IUe=o(" \u2014 "),FS=a("a"),NUe=o("RemBertConfig"),qUe=o(" (RemBERT model)"),jUe=l(),Dm=a("li"),Xre=a("strong"),DUe=o("resnet"),GUe=o(" \u2014 "),TS=a("a"),OUe=o("ResNetConfig"),VUe=o(" (ResNet model)"),XUe=l(),Gm=a("li"),zre=a("strong"),zUe=o("retribert"),WUe=o(" \u2014 "),MS=a("a"),QUe=o("RetriBertConfig"),HUe=o(" (RetriBERT model)"),UUe=l(),Om=a("li"),Wre=a("strong"),JUe=o("roberta"),YUe=o(" \u2014 "),ES=a("a"),KUe=o("RobertaConfig"),ZUe=o(" (RoBERTa model)"),eJe=l(),Vm=a("li"),Qre=a("strong"),oJe=o("roformer"),rJe=o(" \u2014 "),CS=a("a"),tJe=o("RoFormerConfig"),aJe=o(" (RoFormer model)"),nJe=l(),Xm=a("li"),Hre=a("strong"),sJe=o("segformer"),lJe=o(" \u2014 "),wS=a("a"),iJe=o("SegformerConfig"),dJe=o(" (SegFormer model)"),cJe=l(),zm=a("li"),Ure=a("strong"),fJe=o("sew"),mJe=o(" \u2014 "),AS=a("a"),gJe=o("SEWConfig"),hJe=o(" (SEW model)"),pJe=l(),Wm=a("li"),Jre=a("strong"),_Je=o("sew-d"),uJe=o(" \u2014 "),yS=a("a"),bJe=o("SEWDConfig"),vJe=o(" (SEW-D model)"),FJe=l(),Qm=a("li"),Yre=a("strong"),TJe=o("speech-encoder-decoder"),MJe=o(" \u2014 "),LS=a("a"),EJe=o("SpeechEncoderDecoderConfig"),CJe=o(" (Speech Encoder decoder model)"),wJe=l(),Hm=a("li"),Kre=a("strong"),AJe=o("speech_to_text"),yJe=o(" \u2014 "),xS=a("a"),LJe=o("Speech2TextConfig"),xJe=o(" (Speech2Text model)"),$Je=l(),Um=a("li"),Zre=a("strong"),kJe=o("speech_to_text_2"),SJe=o(" \u2014 "),$S=a("a"),RJe=o("Speech2Text2Config"),PJe=o(" (Speech2Text2 model)"),BJe=l(),Jm=a("li"),ete=a("strong"),IJe=o("splinter"),NJe=o(" \u2014 "),kS=a("a"),qJe=o("SplinterConfig"),jJe=o(" (Splinter model)"),DJe=l(),Ym=a("li"),ote=a("strong"),GJe=o("squeezebert"),OJe=o(" \u2014 "),SS=a("a"),VJe=o("SqueezeBertConfig"),XJe=o(" (SqueezeBERT model)"),zJe=l(),Km=a("li"),rte=a("strong"),WJe=o("swin"),QJe=o(" \u2014 "),RS=a("a"),HJe=o("SwinConfig"),UJe=o(" (Swin model)"),JJe=l(),Zm=a("li"),tte=a("strong"),YJe=o("t5"),KJe=o(" \u2014 "),PS=a("a"),ZJe=o("T5Config"),eYe=o(" (T5 model)"),oYe=l(),eg=a("li"),ate=a("strong"),rYe=o("tapas"),tYe=o(" \u2014 "),BS=a("a"),aYe=o("TapasConfig"),nYe=o(" (TAPAS model)"),sYe=l(),og=a("li"),nte=a("strong"),lYe=o("trajectory_transformer"),iYe=o(" \u2014 "),IS=a("a"),dYe=o("TrajectoryTransformerConfig"),cYe=o(" (Trajectory Transformer model)"),fYe=l(),rg=a("li"),ste=a("strong"),mYe=o("transfo-xl"),gYe=o(" \u2014 "),NS=a("a"),hYe=o("TransfoXLConfig"),pYe=o(" (Transformer-XL model)"),_Ye=l(),tg=a("li"),lte=a("strong"),uYe=o("trocr"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("TrOCRConfig"),FYe=o(" (TrOCR model)"),TYe=l(),ag=a("li"),ite=a("strong"),MYe=o("unispeech"),EYe=o(" \u2014 "),jS=a("a"),CYe=o("UniSpeechConfig"),wYe=o(" (UniSpeech model)"),AYe=l(),ng=a("li"),dte=a("strong"),yYe=o("unispeech-sat"),LYe=o(" \u2014 "),DS=a("a"),xYe=o("UniSpeechSatConfig"),$Ye=o(" (UniSpeechSat model)"),kYe=l(),sg=a("li"),cte=a("strong"),SYe=o("van"),RYe=o(" \u2014 "),GS=a("a"),PYe=o("VanConfig"),BYe=o(" (VAN model)"),IYe=l(),lg=a("li"),fte=a("strong"),NYe=o("vilt"),qYe=o(" \u2014 "),OS=a("a"),jYe=o("ViltConfig"),DYe=o(" (ViLT model)"),GYe=l(),ig=a("li"),mte=a("strong"),OYe=o("vision-encoder-decoder"),VYe=o(" \u2014 "),VS=a("a"),XYe=o("VisionEncoderDecoderConfig"),zYe=o(" (Vision Encoder decoder model)"),WYe=l(),dg=a("li"),gte=a("strong"),QYe=o("vision-text-dual-encoder"),HYe=o(" \u2014 "),XS=a("a"),UYe=o("VisionTextDualEncoderConfig"),JYe=o(" (VisionTextDualEncoder model)"),YYe=l(),cg=a("li"),hte=a("strong"),KYe=o("visual_bert"),ZYe=o(" \u2014 "),zS=a("a"),eKe=o("VisualBertConfig"),oKe=o(" (VisualBert model)"),rKe=l(),fg=a("li"),pte=a("strong"),tKe=o("vit"),aKe=o(" \u2014 "),WS=a("a"),nKe=o("ViTConfig"),sKe=o(" (ViT model)"),lKe=l(),mg=a("li"),_te=a("strong"),iKe=o("vit_mae"),dKe=o(" \u2014 "),QS=a("a"),cKe=o("ViTMAEConfig"),fKe=o(" (ViTMAE model)"),mKe=l(),gg=a("li"),ute=a("strong"),gKe=o("wav2vec2"),hKe=o(" \u2014 "),HS=a("a"),pKe=o("Wav2Vec2Config"),_Ke=o(" (Wav2Vec2 model)"),uKe=l(),hg=a("li"),bte=a("strong"),bKe=o("wav2vec2-conformer"),vKe=o(" \u2014 "),US=a("a"),FKe=o("Wav2Vec2ConformerConfig"),TKe=o(" (Wav2Vec2-Conformer model)"),MKe=l(),pg=a("li"),vte=a("strong"),EKe=o("wavlm"),CKe=o(" \u2014 "),JS=a("a"),wKe=o("WavLMConfig"),AKe=o(" (WavLM model)"),yKe=l(),_g=a("li"),Fte=a("strong"),LKe=o("xglm"),xKe=o(" \u2014 "),YS=a("a"),$Ke=o("XGLMConfig"),kKe=o(" (XGLM model)"),SKe=l(),ug=a("li"),Tte=a("strong"),RKe=o("xlm"),PKe=o(" \u2014 "),KS=a("a"),BKe=o("XLMConfig"),IKe=o(" (XLM model)"),NKe=l(),bg=a("li"),Mte=a("strong"),qKe=o("xlm-prophetnet"),jKe=o(" \u2014 "),ZS=a("a"),DKe=o("XLMProphetNetConfig"),GKe=o(" (XLMProphetNet model)"),OKe=l(),vg=a("li"),Ete=a("strong"),VKe=o("xlm-roberta"),XKe=o(" \u2014 "),eR=a("a"),zKe=o("XLMRobertaConfig"),WKe=o(" (XLM-RoBERTa model)"),QKe=l(),Fg=a("li"),Cte=a("strong"),HKe=o("xlm-roberta-xl"),UKe=o(" \u2014 "),oR=a("a"),JKe=o("XLMRobertaXLConfig"),YKe=o(" (XLM-RoBERTa-XL model)"),KKe=l(),Tg=a("li"),wte=a("strong"),ZKe=o("xlnet"),eZe=o(" \u2014 "),rR=a("a"),oZe=o("XLNetConfig"),rZe=o(" (XLNet model)"),tZe=l(),Mg=a("li"),Ate=a("strong"),aZe=o("yolos"),nZe=o(" \u2014 "),tR=a("a"),sZe=o("YolosConfig"),lZe=o(" (YOLOS model)"),iZe=l(),Eg=a("li"),yte=a("strong"),dZe=o("yoso"),cZe=o(" \u2014 "),aR=a("a"),fZe=o("YosoConfig"),mZe=o(" (YOSO model)"),gZe=l(),F(Cg.$$.fragment),hZe=l(),wg=a("div"),F(jA.$$.fragment),pZe=l(),Lte=a("p"),_Ze=o("Register a new configuration for this class."),wqe=l(),Ti=a("h2"),Ag=a("a"),xte=a("span"),F(DA.$$.fragment),uZe=l(),$te=a("span"),bZe=o("AutoTokenizer"),Aqe=l(),wo=a("div"),F(GA.$$.fragment),vZe=l(),OA=a("p"),FZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nR=a("a"),TZe=o("AutoTokenizer.from_pretrained()"),MZe=o(" class method."),EZe=l(),VA=a("p"),CZe=o("This class cannot be instantiated directly using "),kte=a("code"),wZe=o("__init__()"),AZe=o(" (throws an error)."),yZe=l(),Cr=a("div"),F(XA.$$.fragment),LZe=l(),Ste=a("p"),xZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Ze=l(),Aa=a("p"),kZe=o("The tokenizer class to instantiate is selected based on the "),Rte=a("code"),SZe=o("model_type"),RZe=o(` property of the config object (either
passed as an argument or loaded from `),Pte=a("code"),PZe=o("pretrained_model_name_or_path"),BZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=a("code"),IZe=o("pretrained_model_name_or_path"),NZe=o(":"),qZe=l(),k=a("ul"),Sn=a("li"),Ite=a("strong"),jZe=o("albert"),DZe=o(" \u2014 "),sR=a("a"),GZe=o("AlbertTokenizer"),OZe=o(" or "),lR=a("a"),VZe=o("AlbertTokenizerFast"),XZe=o(" (ALBERT model)"),zZe=l(),Rn=a("li"),Nte=a("strong"),WZe=o("bart"),QZe=o(" \u2014 "),iR=a("a"),HZe=o("BartTokenizer"),UZe=o(" or "),dR=a("a"),JZe=o("BartTokenizerFast"),YZe=o(" (BART model)"),KZe=l(),Pn=a("li"),qte=a("strong"),ZZe=o("barthez"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("BarthezTokenizer"),reo=o(" or "),fR=a("a"),teo=o("BarthezTokenizerFast"),aeo=o(" (BARThez model)"),neo=l(),yg=a("li"),jte=a("strong"),seo=o("bartpho"),leo=o(" \u2014 "),mR=a("a"),ieo=o("BartphoTokenizer"),deo=o(" (BARTpho model)"),ceo=l(),Bn=a("li"),Dte=a("strong"),feo=o("bert"),meo=o(" \u2014 "),gR=a("a"),geo=o("BertTokenizer"),heo=o(" or "),hR=a("a"),peo=o("BertTokenizerFast"),_eo=o(" (BERT model)"),ueo=l(),Lg=a("li"),Gte=a("strong"),beo=o("bert-generation"),veo=o(" \u2014 "),pR=a("a"),Feo=o("BertGenerationTokenizer"),Teo=o(" (Bert Generation model)"),Meo=l(),xg=a("li"),Ote=a("strong"),Eeo=o("bert-japanese"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("BertJapaneseTokenizer"),Aeo=o(" (BertJapanese model)"),yeo=l(),$g=a("li"),Vte=a("strong"),Leo=o("bertweet"),xeo=o(" \u2014 "),uR=a("a"),$eo=o("BertweetTokenizer"),keo=o(" (Bertweet model)"),Seo=l(),In=a("li"),Xte=a("strong"),Reo=o("big_bird"),Peo=o(" \u2014 "),bR=a("a"),Beo=o("BigBirdTokenizer"),Ieo=o(" or "),vR=a("a"),Neo=o("BigBirdTokenizerFast"),qeo=o(" (BigBird model)"),jeo=l(),Nn=a("li"),zte=a("strong"),Deo=o("bigbird_pegasus"),Geo=o(" \u2014 "),FR=a("a"),Oeo=o("PegasusTokenizer"),Veo=o(" or "),TR=a("a"),Xeo=o("PegasusTokenizerFast"),zeo=o(" (BigBirdPegasus model)"),Weo=l(),qn=a("li"),Wte=a("strong"),Qeo=o("blenderbot"),Heo=o(" \u2014 "),MR=a("a"),Ueo=o("BlenderbotTokenizer"),Jeo=o(" or "),ER=a("a"),Yeo=o("BlenderbotTokenizerFast"),Keo=o(" (Blenderbot model)"),Zeo=l(),kg=a("li"),Qte=a("strong"),eoo=o("blenderbot-small"),ooo=o(" \u2014 "),CR=a("a"),roo=o("BlenderbotSmallTokenizer"),too=o(" (BlenderbotSmall model)"),aoo=l(),Sg=a("li"),Hte=a("strong"),noo=o("bloom"),soo=o(" \u2014 "),wR=a("a"),loo=o("BloomTokenizerFast"),ioo=o(" (BLOOM model)"),doo=l(),Rg=a("li"),Ute=a("strong"),coo=o("byt5"),foo=o(" \u2014 "),AR=a("a"),moo=o("ByT5Tokenizer"),goo=o(" (ByT5 model)"),hoo=l(),jn=a("li"),Jte=a("strong"),poo=o("camembert"),_oo=o(" \u2014 "),yR=a("a"),uoo=o("CamembertTokenizer"),boo=o(" or "),LR=a("a"),voo=o("CamembertTokenizerFast"),Foo=o(" (CamemBERT model)"),Too=l(),Pg=a("li"),Yte=a("strong"),Moo=o("canine"),Eoo=o(" \u2014 "),xR=a("a"),Coo=o("CanineTokenizer"),woo=o(" (Canine model)"),Aoo=l(),Dn=a("li"),Kte=a("strong"),yoo=o("clip"),Loo=o(" \u2014 "),$R=a("a"),xoo=o("CLIPTokenizer"),$oo=o(" or "),kR=a("a"),koo=o("CLIPTokenizerFast"),Soo=o(" (CLIP model)"),Roo=l(),Gn=a("li"),Zte=a("strong"),Poo=o("convbert"),Boo=o(" \u2014 "),SR=a("a"),Ioo=o("ConvBertTokenizer"),Noo=o(" or "),RR=a("a"),qoo=o("ConvBertTokenizerFast"),joo=o(" (ConvBERT model)"),Doo=l(),On=a("li"),eae=a("strong"),Goo=o("cpm"),Ooo=o(" \u2014 "),PR=a("a"),Voo=o("CpmTokenizer"),Xoo=o(" or "),BR=a("a"),zoo=o("CpmTokenizerFast"),Woo=o(" (CPM model)"),Qoo=l(),Bg=a("li"),oae=a("strong"),Hoo=o("ctrl"),Uoo=o(" \u2014 "),IR=a("a"),Joo=o("CTRLTokenizer"),Yoo=o(" (CTRL model)"),Koo=l(),Vn=a("li"),rae=a("strong"),Zoo=o("data2vec-text"),ero=o(" \u2014 "),NR=a("a"),oro=o("RobertaTokenizer"),rro=o(" or "),qR=a("a"),tro=o("RobertaTokenizerFast"),aro=o(" (Data2VecText model)"),nro=l(),Xn=a("li"),tae=a("strong"),sro=o("deberta"),lro=o(" \u2014 "),jR=a("a"),iro=o("DebertaTokenizer"),dro=o(" or "),DR=a("a"),cro=o("DebertaTokenizerFast"),fro=o(" (DeBERTa model)"),mro=l(),zn=a("li"),aae=a("strong"),gro=o("deberta-v2"),hro=o(" \u2014 "),GR=a("a"),pro=o("DebertaV2Tokenizer"),_ro=o(" or "),OR=a("a"),uro=o("DebertaV2TokenizerFast"),bro=o(" (DeBERTa-v2 model)"),vro=l(),Wn=a("li"),nae=a("strong"),Fro=o("distilbert"),Tro=o(" \u2014 "),VR=a("a"),Mro=o("DistilBertTokenizer"),Ero=o(" or "),XR=a("a"),Cro=o("DistilBertTokenizerFast"),wro=o(" (DistilBERT model)"),Aro=l(),Qn=a("li"),sae=a("strong"),yro=o("dpr"),Lro=o(" \u2014 "),zR=a("a"),xro=o("DPRQuestionEncoderTokenizer"),$ro=o(" or "),WR=a("a"),kro=o("DPRQuestionEncoderTokenizerFast"),Sro=o(" (DPR model)"),Rro=l(),Hn=a("li"),lae=a("strong"),Pro=o("electra"),Bro=o(" \u2014 "),QR=a("a"),Iro=o("ElectraTokenizer"),Nro=o(" or "),HR=a("a"),qro=o("ElectraTokenizerFast"),jro=o(" (ELECTRA model)"),Dro=l(),Ig=a("li"),iae=a("strong"),Gro=o("flaubert"),Oro=o(" \u2014 "),UR=a("a"),Vro=o("FlaubertTokenizer"),Xro=o(" (FlauBERT model)"),zro=l(),Un=a("li"),dae=a("strong"),Wro=o("fnet"),Qro=o(" \u2014 "),JR=a("a"),Hro=o("FNetTokenizer"),Uro=o(" or "),YR=a("a"),Jro=o("FNetTokenizerFast"),Yro=o(" (FNet model)"),Kro=l(),Ng=a("li"),cae=a("strong"),Zro=o("fsmt"),eto=o(" \u2014 "),KR=a("a"),oto=o("FSMTTokenizer"),rto=o(" (FairSeq Machine-Translation model)"),tto=l(),Jn=a("li"),fae=a("strong"),ato=o("funnel"),nto=o(" \u2014 "),ZR=a("a"),sto=o("FunnelTokenizer"),lto=o(" or "),eP=a("a"),ito=o("FunnelTokenizerFast"),dto=o(" (Funnel Transformer model)"),cto=l(),Yn=a("li"),mae=a("strong"),fto=o("gpt2"),mto=o(" \u2014 "),oP=a("a"),gto=o("GPT2Tokenizer"),hto=o(" or "),rP=a("a"),pto=o("GPT2TokenizerFast"),_to=o(" (OpenAI GPT-2 model)"),uto=l(),Kn=a("li"),gae=a("strong"),bto=o("gpt_neo"),vto=o(" \u2014 "),tP=a("a"),Fto=o("GPT2Tokenizer"),Tto=o(" or "),aP=a("a"),Mto=o("GPT2TokenizerFast"),Eto=o(" (GPT Neo model)"),Cto=l(),qg=a("li"),hae=a("strong"),wto=o("gpt_neox"),Ato=o(" \u2014 "),nP=a("a"),yto=o("GPTNeoXTokenizerFast"),Lto=o(" (GPT NeoX model)"),xto=l(),Zn=a("li"),pae=a("strong"),$to=o("gptj"),kto=o(" \u2014 "),sP=a("a"),Sto=o("GPT2Tokenizer"),Rto=o(" or "),lP=a("a"),Pto=o("GPT2TokenizerFast"),Bto=o(" (GPT-J model)"),Ito=l(),es=a("li"),_ae=a("strong"),Nto=o("herbert"),qto=o(" \u2014 "),iP=a("a"),jto=o("HerbertTokenizer"),Dto=o(" or "),dP=a("a"),Gto=o("HerbertTokenizerFast"),Oto=o(" (HerBERT model)"),Vto=l(),jg=a("li"),uae=a("strong"),Xto=o("hubert"),zto=o(" \u2014 "),cP=a("a"),Wto=o("Wav2Vec2CTCTokenizer"),Qto=o(" (Hubert model)"),Hto=l(),os=a("li"),bae=a("strong"),Uto=o("ibert"),Jto=o(" \u2014 "),fP=a("a"),Yto=o("RobertaTokenizer"),Kto=o(" or "),mP=a("a"),Zto=o("RobertaTokenizerFast"),eao=o(" (I-BERT model)"),oao=l(),rs=a("li"),vae=a("strong"),rao=o("layoutlm"),tao=o(" \u2014 "),gP=a("a"),aao=o("LayoutLMTokenizer"),nao=o(" or "),hP=a("a"),sao=o("LayoutLMTokenizerFast"),lao=o(" (LayoutLM model)"),iao=l(),ts=a("li"),Fae=a("strong"),dao=o("layoutlmv2"),cao=o(" \u2014 "),pP=a("a"),fao=o("LayoutLMv2Tokenizer"),mao=o(" or "),_P=a("a"),gao=o("LayoutLMv2TokenizerFast"),hao=o(" (LayoutLMv2 model)"),pao=l(),as=a("li"),Tae=a("strong"),_ao=o("layoutlmv3"),uao=o(" \u2014 "),uP=a("a"),bao=o("LayoutLMv3Tokenizer"),vao=o(" or "),bP=a("a"),Fao=o("LayoutLMv3TokenizerFast"),Tao=o(" (LayoutLMv3 model)"),Mao=l(),ns=a("li"),Mae=a("strong"),Eao=o("layoutxlm"),Cao=o(" \u2014 "),vP=a("a"),wao=o("LayoutXLMTokenizer"),Aao=o(" or "),FP=a("a"),yao=o("LayoutXLMTokenizerFast"),Lao=o(" (LayoutXLM model)"),xao=l(),ss=a("li"),Eae=a("strong"),$ao=o("led"),kao=o(" \u2014 "),TP=a("a"),Sao=o("LEDTokenizer"),Rao=o(" or "),MP=a("a"),Pao=o("LEDTokenizerFast"),Bao=o(" (LED model)"),Iao=l(),ls=a("li"),Cae=a("strong"),Nao=o("longformer"),qao=o(" \u2014 "),EP=a("a"),jao=o("LongformerTokenizer"),Dao=o(" or "),CP=a("a"),Gao=o("LongformerTokenizerFast"),Oao=o(" (Longformer model)"),Vao=l(),Dg=a("li"),wae=a("strong"),Xao=o("luke"),zao=o(" \u2014 "),wP=a("a"),Wao=o("LukeTokenizer"),Qao=o(" (LUKE model)"),Hao=l(),is=a("li"),Aae=a("strong"),Uao=o("lxmert"),Jao=o(" \u2014 "),AP=a("a"),Yao=o("LxmertTokenizer"),Kao=o(" or "),yP=a("a"),Zao=o("LxmertTokenizerFast"),eno=o(" (LXMERT model)"),ono=l(),Gg=a("li"),yae=a("strong"),rno=o("m2m_100"),tno=o(" \u2014 "),LP=a("a"),ano=o("M2M100Tokenizer"),nno=o(" (M2M100 model)"),sno=l(),Og=a("li"),Lae=a("strong"),lno=o("marian"),ino=o(" \u2014 "),xP=a("a"),dno=o("MarianTokenizer"),cno=o(" (Marian model)"),fno=l(),ds=a("li"),xae=a("strong"),mno=o("mbart"),gno=o(" \u2014 "),$P=a("a"),hno=o("MBartTokenizer"),pno=o(" or "),kP=a("a"),_no=o("MBartTokenizerFast"),uno=o(" (mBART model)"),bno=l(),cs=a("li"),$ae=a("strong"),vno=o("mbart50"),Fno=o(" \u2014 "),SP=a("a"),Tno=o("MBart50Tokenizer"),Mno=o(" or "),RP=a("a"),Eno=o("MBart50TokenizerFast"),Cno=o(" (mBART-50 model)"),wno=l(),fs=a("li"),kae=a("strong"),Ano=o("megatron-bert"),yno=o(" \u2014 "),PP=a("a"),Lno=o("BertTokenizer"),xno=o(" or "),BP=a("a"),$no=o("BertTokenizerFast"),kno=o(" (MegatronBert model)"),Sno=l(),Vg=a("li"),Sae=a("strong"),Rno=o("mluke"),Pno=o(" \u2014 "),IP=a("a"),Bno=o("MLukeTokenizer"),Ino=o(" (mLUKE model)"),Nno=l(),ms=a("li"),Rae=a("strong"),qno=o("mobilebert"),jno=o(" \u2014 "),NP=a("a"),Dno=o("MobileBertTokenizer"),Gno=o(" or "),qP=a("a"),Ono=o("MobileBertTokenizerFast"),Vno=o(" (MobileBERT model)"),Xno=l(),gs=a("li"),Pae=a("strong"),zno=o("mpnet"),Wno=o(" \u2014 "),jP=a("a"),Qno=o("MPNetTokenizer"),Hno=o(" or "),DP=a("a"),Uno=o("MPNetTokenizerFast"),Jno=o(" (MPNet model)"),Yno=l(),hs=a("li"),Bae=a("strong"),Kno=o("mt5"),Zno=o(" \u2014 "),GP=a("a"),eso=o("MT5Tokenizer"),oso=o(" or "),OP=a("a"),rso=o("MT5TokenizerFast"),tso=o(" (mT5 model)"),aso=l(),ps=a("li"),Iae=a("strong"),nso=o("nystromformer"),sso=o(" \u2014 "),VP=a("a"),lso=o("AlbertTokenizer"),iso=o(" or "),XP=a("a"),dso=o("AlbertTokenizerFast"),cso=o(" (Nystromformer model)"),fso=l(),_s=a("li"),Nae=a("strong"),mso=o("openai-gpt"),gso=o(" \u2014 "),zP=a("a"),hso=o("OpenAIGPTTokenizer"),pso=o(" or "),WP=a("a"),_so=o("OpenAIGPTTokenizerFast"),uso=o(" (OpenAI GPT model)"),bso=l(),Xg=a("li"),qae=a("strong"),vso=o("opt"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("GPT2Tokenizer"),Mso=o(" (OPT model)"),Eso=l(),us=a("li"),jae=a("strong"),Cso=o("pegasus"),wso=o(" \u2014 "),HP=a("a"),Aso=o("PegasusTokenizer"),yso=o(" or "),UP=a("a"),Lso=o("PegasusTokenizerFast"),xso=o(" (Pegasus model)"),$so=l(),zg=a("li"),Dae=a("strong"),kso=o("perceiver"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("PerceiverTokenizer"),Pso=o(" (Perceiver model)"),Bso=l(),Wg=a("li"),Gae=a("strong"),Iso=o("phobert"),Nso=o(" \u2014 "),YP=a("a"),qso=o("PhobertTokenizer"),jso=o(" (PhoBERT model)"),Dso=l(),Qg=a("li"),Oae=a("strong"),Gso=o("plbart"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("PLBartTokenizer"),Xso=o(" (PLBart model)"),zso=l(),Hg=a("li"),Vae=a("strong"),Wso=o("prophetnet"),Qso=o(" \u2014 "),ZP=a("a"),Hso=o("ProphetNetTokenizer"),Uso=o(" (ProphetNet model)"),Jso=l(),bs=a("li"),Xae=a("strong"),Yso=o("qdqbert"),Kso=o(" \u2014 "),eB=a("a"),Zso=o("BertTokenizer"),elo=o(" or "),oB=a("a"),olo=o("BertTokenizerFast"),rlo=o(" (QDQBert model)"),tlo=l(),Ug=a("li"),zae=a("strong"),alo=o("rag"),nlo=o(" \u2014 "),rB=a("a"),slo=o("RagTokenizer"),llo=o(" (RAG model)"),ilo=l(),vs=a("li"),Wae=a("strong"),dlo=o("realm"),clo=o(" \u2014 "),tB=a("a"),flo=o("RealmTokenizer"),mlo=o(" or "),aB=a("a"),glo=o("RealmTokenizerFast"),hlo=o(" (Realm model)"),plo=l(),Fs=a("li"),Qae=a("strong"),_lo=o("reformer"),ulo=o(" \u2014 "),nB=a("a"),blo=o("ReformerTokenizer"),vlo=o(" or "),sB=a("a"),Flo=o("ReformerTokenizerFast"),Tlo=o(" (Reformer model)"),Mlo=l(),Ts=a("li"),Hae=a("strong"),Elo=o("rembert"),Clo=o(" \u2014 "),lB=a("a"),wlo=o("RemBertTokenizer"),Alo=o(" or "),iB=a("a"),ylo=o("RemBertTokenizerFast"),Llo=o(" (RemBERT model)"),xlo=l(),Ms=a("li"),Uae=a("strong"),$lo=o("retribert"),klo=o(" \u2014 "),dB=a("a"),Slo=o("RetriBertTokenizer"),Rlo=o(" or "),cB=a("a"),Plo=o("RetriBertTokenizerFast"),Blo=o(" (RetriBERT model)"),Ilo=l(),Es=a("li"),Jae=a("strong"),Nlo=o("roberta"),qlo=o(" \u2014 "),fB=a("a"),jlo=o("RobertaTokenizer"),Dlo=o(" or "),mB=a("a"),Glo=o("RobertaTokenizerFast"),Olo=o(" (RoBERTa model)"),Vlo=l(),Cs=a("li"),Yae=a("strong"),Xlo=o("roformer"),zlo=o(" \u2014 "),gB=a("a"),Wlo=o("RoFormerTokenizer"),Qlo=o(" or "),hB=a("a"),Hlo=o("RoFormerTokenizerFast"),Ulo=o(" (RoFormer model)"),Jlo=l(),Jg=a("li"),Kae=a("strong"),Ylo=o("speech_to_text"),Klo=o(" \u2014 "),pB=a("a"),Zlo=o("Speech2TextTokenizer"),eio=o(" (Speech2Text model)"),oio=l(),Yg=a("li"),Zae=a("strong"),rio=o("speech_to_text_2"),tio=o(" \u2014 "),_B=a("a"),aio=o("Speech2Text2Tokenizer"),nio=o(" (Speech2Text2 model)"),sio=l(),ws=a("li"),ene=a("strong"),lio=o("splinter"),iio=o(" \u2014 "),uB=a("a"),dio=o("SplinterTokenizer"),cio=o(" or "),bB=a("a"),fio=o("SplinterTokenizerFast"),mio=o(" (Splinter model)"),gio=l(),As=a("li"),one=a("strong"),hio=o("squeezebert"),pio=o(" \u2014 "),vB=a("a"),_io=o("SqueezeBertTokenizer"),uio=o(" or "),FB=a("a"),bio=o("SqueezeBertTokenizerFast"),vio=o(" (SqueezeBERT model)"),Fio=l(),ys=a("li"),rne=a("strong"),Tio=o("t5"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("T5Tokenizer"),Cio=o(" or "),MB=a("a"),wio=o("T5TokenizerFast"),Aio=o(" (T5 model)"),yio=l(),Kg=a("li"),tne=a("strong"),Lio=o("tapas"),xio=o(" \u2014 "),EB=a("a"),$io=o("TapasTokenizer"),kio=o(" (TAPAS model)"),Sio=l(),Zg=a("li"),ane=a("strong"),Rio=o("tapex"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("TapexTokenizer"),Iio=o(" (TAPEX model)"),Nio=l(),eh=a("li"),nne=a("strong"),qio=o("transfo-xl"),jio=o(" \u2014 "),wB=a("a"),Dio=o("TransfoXLTokenizer"),Gio=o(" (Transformer-XL model)"),Oio=l(),Ls=a("li"),sne=a("strong"),Vio=o("visual_bert"),Xio=o(" \u2014 "),AB=a("a"),zio=o("BertTokenizer"),Wio=o(" or "),yB=a("a"),Qio=o("BertTokenizerFast"),Hio=o(" (VisualBert model)"),Uio=l(),oh=a("li"),lne=a("strong"),Jio=o("wav2vec2"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("Wav2Vec2CTCTokenizer"),Zio=o(" (Wav2Vec2 model)"),edo=l(),rh=a("li"),ine=a("strong"),odo=o("wav2vec2-conformer"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("Wav2Vec2CTCTokenizer"),ado=o(" (Wav2Vec2-Conformer model)"),ndo=l(),th=a("li"),dne=a("strong"),sdo=o("wav2vec2_phoneme"),ldo=o(" \u2014 "),$B=a("a"),ido=o("Wav2Vec2PhonemeCTCTokenizer"),ddo=o(" (Wav2Vec2Phoneme model)"),cdo=l(),xs=a("li"),cne=a("strong"),fdo=o("xglm"),mdo=o(" \u2014 "),kB=a("a"),gdo=o("XGLMTokenizer"),hdo=o(" or "),SB=a("a"),pdo=o("XGLMTokenizerFast"),_do=o(" (XGLM model)"),udo=l(),ah=a("li"),fne=a("strong"),bdo=o("xlm"),vdo=o(" \u2014 "),RB=a("a"),Fdo=o("XLMTokenizer"),Tdo=o(" (XLM model)"),Mdo=l(),nh=a("li"),mne=a("strong"),Edo=o("xlm-prophetnet"),Cdo=o(" \u2014 "),PB=a("a"),wdo=o("XLMProphetNetTokenizer"),Ado=o(" (XLMProphetNet model)"),ydo=l(),$s=a("li"),gne=a("strong"),Ldo=o("xlm-roberta"),xdo=o(" \u2014 "),BB=a("a"),$do=o("XLMRobertaTokenizer"),kdo=o(" or "),IB=a("a"),Sdo=o("XLMRobertaTokenizerFast"),Rdo=o(" (XLM-RoBERTa model)"),Pdo=l(),ks=a("li"),hne=a("strong"),Bdo=o("xlm-roberta-xl"),Ido=o(" \u2014 "),NB=a("a"),Ndo=o("RobertaTokenizer"),qdo=o(" or "),qB=a("a"),jdo=o("RobertaTokenizerFast"),Ddo=o(" (XLM-RoBERTa-XL model)"),Gdo=l(),Ss=a("li"),pne=a("strong"),Odo=o("xlnet"),Vdo=o(" \u2014 "),jB=a("a"),Xdo=o("XLNetTokenizer"),zdo=o(" or "),DB=a("a"),Wdo=o("XLNetTokenizerFast"),Qdo=o(" (XLNet model)"),Hdo=l(),Rs=a("li"),_ne=a("strong"),Udo=o("yoso"),Jdo=o(" \u2014 "),GB=a("a"),Ydo=o("AlbertTokenizer"),Kdo=o(" or "),OB=a("a"),Zdo=o("AlbertTokenizerFast"),eco=o(" (YOSO model)"),oco=l(),F(sh.$$.fragment),rco=l(),lh=a("div"),F(zA.$$.fragment),tco=l(),une=a("p"),aco=o("Register a new tokenizer in this mapping."),yqe=l(),Mi=a("h2"),ih=a("a"),bne=a("span"),F(WA.$$.fragment),nco=l(),vne=a("span"),sco=o("AutoFeatureExtractor"),Lqe=l(),Ao=a("div"),F(QA.$$.fragment),lco=l(),HA=a("p"),ico=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VB=a("a"),dco=o("AutoFeatureExtractor.from_pretrained()"),cco=o(" class method."),fco=l(),UA=a("p"),mco=o("This class cannot be instantiated directly using "),Fne=a("code"),gco=o("__init__()"),hco=o(" (throws an error)."),pco=l(),He=a("div"),F(JA.$$.fragment),_co=l(),Tne=a("p"),uco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bco=l(),ya=a("p"),vco=o("The feature extractor class to instantiate is selected based on the "),Mne=a("code"),Fco=o("model_type"),Tco=o(` property of the config object
(either passed as an argument or loaded from `),Ene=a("code"),Mco=o("pretrained_model_name_or_path"),Eco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Cne=a("code"),Cco=o("pretrained_model_name_or_path"),wco=o(":"),Aco=l(),Y=a("ul"),dh=a("li"),wne=a("strong"),yco=o("beit"),Lco=o(" \u2014 "),XB=a("a"),xco=o("BeitFeatureExtractor"),$co=o(" (BEiT model)"),kco=l(),ch=a("li"),Ane=a("strong"),Sco=o("clip"),Rco=o(" \u2014 "),zB=a("a"),Pco=o("CLIPFeatureExtractor"),Bco=o(" (CLIP model)"),Ico=l(),fh=a("li"),yne=a("strong"),Nco=o("convnext"),qco=o(" \u2014 "),WB=a("a"),jco=o("ConvNextFeatureExtractor"),Dco=o(" (ConvNext model)"),Gco=l(),mh=a("li"),Lne=a("strong"),Oco=o("cvt"),Vco=o(" \u2014 "),QB=a("a"),Xco=o("ConvNextFeatureExtractor"),zco=o(" (CvT model)"),Wco=l(),gh=a("li"),xne=a("strong"),Qco=o("data2vec-audio"),Hco=o(" \u2014 "),HB=a("a"),Uco=o("Wav2Vec2FeatureExtractor"),Jco=o(" (Data2VecAudio model)"),Yco=l(),hh=a("li"),$ne=a("strong"),Kco=o("data2vec-vision"),Zco=o(" \u2014 "),UB=a("a"),efo=o("BeitFeatureExtractor"),ofo=o(" (Data2VecVision model)"),rfo=l(),ph=a("li"),kne=a("strong"),tfo=o("deit"),afo=o(" \u2014 "),JB=a("a"),nfo=o("DeiTFeatureExtractor"),sfo=o(" (DeiT model)"),lfo=l(),_h=a("li"),Sne=a("strong"),ifo=o("detr"),dfo=o(" \u2014 "),YB=a("a"),cfo=o("DetrFeatureExtractor"),ffo=o(" (DETR model)"),mfo=l(),uh=a("li"),Rne=a("strong"),gfo=o("dpt"),hfo=o(" \u2014 "),KB=a("a"),pfo=o("DPTFeatureExtractor"),_fo=o(" (DPT model)"),ufo=l(),bh=a("li"),Pne=a("strong"),bfo=o("flava"),vfo=o(" \u2014 "),ZB=a("a"),Ffo=o("FlavaFeatureExtractor"),Tfo=o(" (Flava model)"),Mfo=l(),vh=a("li"),Bne=a("strong"),Efo=o("glpn"),Cfo=o(" \u2014 "),eI=a("a"),wfo=o("GLPNFeatureExtractor"),Afo=o(" (GLPN model)"),yfo=l(),Fh=a("li"),Ine=a("strong"),Lfo=o("hubert"),xfo=o(" \u2014 "),oI=a("a"),$fo=o("Wav2Vec2FeatureExtractor"),kfo=o(" (Hubert model)"),Sfo=l(),Th=a("li"),Nne=a("strong"),Rfo=o("imagegpt"),Pfo=o(" \u2014 "),rI=a("a"),Bfo=o("ImageGPTFeatureExtractor"),Ifo=o(" (ImageGPT model)"),Nfo=l(),Mh=a("li"),qne=a("strong"),qfo=o("layoutlmv2"),jfo=o(" \u2014 "),tI=a("a"),Dfo=o("LayoutLMv2FeatureExtractor"),Gfo=o(" (LayoutLMv2 model)"),Ofo=l(),Eh=a("li"),jne=a("strong"),Vfo=o("layoutlmv3"),Xfo=o(" \u2014 "),aI=a("a"),zfo=o("LayoutLMv3FeatureExtractor"),Wfo=o(" (LayoutLMv3 model)"),Qfo=l(),Ch=a("li"),Dne=a("strong"),Hfo=o("maskformer"),Ufo=o(" \u2014 "),nI=a("a"),Jfo=o("MaskFormerFeatureExtractor"),Yfo=o(" (MaskFormer model)"),Kfo=l(),wh=a("li"),Gne=a("strong"),Zfo=o("perceiver"),emo=o(" \u2014 "),sI=a("a"),omo=o("PerceiverFeatureExtractor"),rmo=o(" (Perceiver model)"),tmo=l(),Ah=a("li"),One=a("strong"),amo=o("poolformer"),nmo=o(" \u2014 "),lI=a("a"),smo=o("PoolFormerFeatureExtractor"),lmo=o(" (PoolFormer model)"),imo=l(),yh=a("li"),Vne=a("strong"),dmo=o("regnet"),cmo=o(" \u2014 "),iI=a("a"),fmo=o("ConvNextFeatureExtractor"),mmo=o(" (RegNet model)"),gmo=l(),Lh=a("li"),Xne=a("strong"),hmo=o("resnet"),pmo=o(" \u2014 "),dI=a("a"),_mo=o("ConvNextFeatureExtractor"),umo=o(" (ResNet model)"),bmo=l(),xh=a("li"),zne=a("strong"),vmo=o("segformer"),Fmo=o(" \u2014 "),cI=a("a"),Tmo=o("SegformerFeatureExtractor"),Mmo=o(" (SegFormer model)"),Emo=l(),$h=a("li"),Wne=a("strong"),Cmo=o("speech_to_text"),wmo=o(" \u2014 "),fI=a("a"),Amo=o("Speech2TextFeatureExtractor"),ymo=o(" (Speech2Text model)"),Lmo=l(),kh=a("li"),Qne=a("strong"),xmo=o("swin"),$mo=o(" \u2014 "),mI=a("a"),kmo=o("ViTFeatureExtractor"),Smo=o(" (Swin model)"),Rmo=l(),Sh=a("li"),Hne=a("strong"),Pmo=o("van"),Bmo=o(" \u2014 "),gI=a("a"),Imo=o("ConvNextFeatureExtractor"),Nmo=o(" (VAN model)"),qmo=l(),Rh=a("li"),Une=a("strong"),jmo=o("vit"),Dmo=o(" \u2014 "),hI=a("a"),Gmo=o("ViTFeatureExtractor"),Omo=o(" (ViT model)"),Vmo=l(),Ph=a("li"),Jne=a("strong"),Xmo=o("vit_mae"),zmo=o(" \u2014 "),pI=a("a"),Wmo=o("ViTFeatureExtractor"),Qmo=o(" (ViTMAE model)"),Hmo=l(),Bh=a("li"),Yne=a("strong"),Umo=o("wav2vec2"),Jmo=o(" \u2014 "),_I=a("a"),Ymo=o("Wav2Vec2FeatureExtractor"),Kmo=o(" (Wav2Vec2 model)"),Zmo=l(),Ih=a("li"),Kne=a("strong"),ego=o("wav2vec2-conformer"),ogo=o(" \u2014 "),uI=a("a"),rgo=o("Wav2Vec2FeatureExtractor"),tgo=o(" (Wav2Vec2-Conformer model)"),ago=l(),Nh=a("li"),Zne=a("strong"),ngo=o("yolos"),sgo=o(" \u2014 "),bI=a("a"),lgo=o("YolosFeatureExtractor"),igo=o(" (YOLOS model)"),dgo=l(),F(qh.$$.fragment),cgo=l(),F(jh.$$.fragment),fgo=l(),Dh=a("div"),F(YA.$$.fragment),mgo=l(),ese=a("p"),ggo=o("Register a new feature extractor for this class."),xqe=l(),Ei=a("h2"),Gh=a("a"),ose=a("span"),F(KA.$$.fragment),hgo=l(),rse=a("span"),pgo=o("AutoProcessor"),$qe=l(),yo=a("div"),F(ZA.$$.fragment),_go=l(),ey=a("p"),ugo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=a("a"),bgo=o("AutoProcessor.from_pretrained()"),vgo=o(" class method."),Fgo=l(),oy=a("p"),Tgo=o("This class cannot be instantiated directly using "),tse=a("code"),Mgo=o("__init__()"),Ego=o(" (throws an error)."),Cgo=l(),Ue=a("div"),F(ry.$$.fragment),wgo=l(),ase=a("p"),Ago=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ygo=l(),Ci=a("p"),Lgo=o("The processor class to instantiate is selected based on the "),nse=a("code"),xgo=o("model_type"),$go=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),kgo=o("pretrained_model_name_or_path"),Sgo=o(" if possible):"),Rgo=l(),he=a("ul"),Oh=a("li"),lse=a("strong"),Pgo=o("clip"),Bgo=o(" \u2014 "),FI=a("a"),Igo=o("CLIPProcessor"),Ngo=o(" (CLIP model)"),qgo=l(),Vh=a("li"),ise=a("strong"),jgo=o("flava"),Dgo=o(" \u2014 "),dse=a("code"),Ggo=o("FLAVAProcessor"),Ogo=o(" (Flava model)"),Vgo=l(),Xh=a("li"),cse=a("strong"),Xgo=o("layoutlmv2"),zgo=o(" \u2014 "),TI=a("a"),Wgo=o("LayoutLMv2Processor"),Qgo=o(" (LayoutLMv2 model)"),Hgo=l(),zh=a("li"),fse=a("strong"),Ugo=o("layoutlmv3"),Jgo=o(" \u2014 "),MI=a("a"),Ygo=o("LayoutLMv3Processor"),Kgo=o(" (LayoutLMv3 model)"),Zgo=l(),Wh=a("li"),mse=a("strong"),eho=o("layoutxlm"),oho=o(" \u2014 "),EI=a("a"),rho=o("LayoutXLMProcessor"),tho=o(" (LayoutXLM model)"),aho=l(),Qh=a("li"),gse=a("strong"),nho=o("sew"),sho=o(" \u2014 "),CI=a("a"),lho=o("Wav2Vec2Processor"),iho=o(" (SEW model)"),dho=l(),Hh=a("li"),hse=a("strong"),cho=o("sew-d"),fho=o(" \u2014 "),wI=a("a"),mho=o("Wav2Vec2Processor"),gho=o(" (SEW-D model)"),hho=l(),Uh=a("li"),pse=a("strong"),pho=o("speech_to_text"),_ho=o(" \u2014 "),AI=a("a"),uho=o("Speech2TextProcessor"),bho=o(" (Speech2Text model)"),vho=l(),Jh=a("li"),_se=a("strong"),Fho=o("speech_to_text_2"),Tho=o(" \u2014 "),yI=a("a"),Mho=o("Speech2Text2Processor"),Eho=o(" (Speech2Text2 model)"),Cho=l(),Yh=a("li"),use=a("strong"),who=o("trocr"),Aho=o(" \u2014 "),LI=a("a"),yho=o("TrOCRProcessor"),Lho=o(" (TrOCR model)"),xho=l(),Kh=a("li"),bse=a("strong"),$ho=o("unispeech"),kho=o(" \u2014 "),xI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (UniSpeech model)"),Pho=l(),Zh=a("li"),vse=a("strong"),Bho=o("unispeech-sat"),Iho=o(" \u2014 "),$I=a("a"),Nho=o("Wav2Vec2Processor"),qho=o(" (UniSpeechSat model)"),jho=l(),ep=a("li"),Fse=a("strong"),Dho=o("vilt"),Gho=o(" \u2014 "),kI=a("a"),Oho=o("ViltProcessor"),Vho=o(" (ViLT model)"),Xho=l(),op=a("li"),Tse=a("strong"),zho=o("vision-text-dual-encoder"),Who=o(" \u2014 "),SI=a("a"),Qho=o("VisionTextDualEncoderProcessor"),Hho=o(" (VisionTextDualEncoder model)"),Uho=l(),rp=a("li"),Mse=a("strong"),Jho=o("wav2vec2"),Yho=o(" \u2014 "),RI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (Wav2Vec2 model)"),epo=l(),tp=a("li"),Ese=a("strong"),opo=o("wav2vec2-conformer"),rpo=o(" \u2014 "),PI=a("a"),tpo=o("Wav2Vec2Processor"),apo=o(" (Wav2Vec2-Conformer model)"),npo=l(),ap=a("li"),Cse=a("strong"),spo=o("wavlm"),lpo=o(" \u2014 "),BI=a("a"),ipo=o("Wav2Vec2Processor"),dpo=o(" (WavLM model)"),cpo=l(),F(np.$$.fragment),fpo=l(),F(sp.$$.fragment),mpo=l(),lp=a("div"),F(ty.$$.fragment),gpo=l(),wse=a("p"),hpo=o("Register a new processor for this class."),kqe=l(),wi=a("h2"),ip=a("a"),Ase=a("span"),F(ay.$$.fragment),ppo=l(),yse=a("span"),_po=o("AutoModel"),Sqe=l(),Lo=a("div"),F(ny.$$.fragment),upo=l(),Ai=a("p"),bpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),II=a("a"),vpo=o("from_pretrained()"),Fpo=o(" class method or the "),NI=a("a"),Tpo=o("from_config()"),Mpo=o(` class
method.`),Epo=l(),sy=a("p"),Cpo=o("This class cannot be instantiated directly using "),Lse=a("code"),wpo=o("__init__()"),Apo=o(" (throws an error)."),ypo=l(),tt=a("div"),F(ly.$$.fragment),Lpo=l(),xse=a("p"),xpo=o("Instantiates one of the base model classes of the library from a configuration."),$po=l(),yi=a("p"),kpo=o(`Note:
Loading a model from its configuration file does `),$se=a("strong"),Spo=o("not"),Rpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=a("a"),Ppo=o("from_pretrained()"),Bpo=o(" to load the model weights."),Ipo=l(),F(dp.$$.fragment),Npo=l(),Je=a("div"),F(iy.$$.fragment),qpo=l(),kse=a("p"),jpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Dpo=l(),La=a("p"),Gpo=o("The model class to instantiate is selected based on the "),Sse=a("code"),Opo=o("model_type"),Vpo=o(` property of the config object (either
passed as an argument or loaded from `),Rse=a("code"),Xpo=o("pretrained_model_name_or_path"),zpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=a("code"),Wpo=o("pretrained_model_name_or_path"),Qpo=o(":"),Hpo=l(),x=a("ul"),cp=a("li"),Bse=a("strong"),Upo=o("albert"),Jpo=o(" \u2014 "),jI=a("a"),Ypo=o("AlbertModel"),Kpo=o(" (ALBERT model)"),Zpo=l(),fp=a("li"),Ise=a("strong"),e_o=o("bart"),o_o=o(" \u2014 "),DI=a("a"),r_o=o("BartModel"),t_o=o(" (BART model)"),a_o=l(),mp=a("li"),Nse=a("strong"),n_o=o("beit"),s_o=o(" \u2014 "),GI=a("a"),l_o=o("BeitModel"),i_o=o(" (BEiT model)"),d_o=l(),gp=a("li"),qse=a("strong"),c_o=o("bert"),f_o=o(" \u2014 "),OI=a("a"),m_o=o("BertModel"),g_o=o(" (BERT model)"),h_o=l(),hp=a("li"),jse=a("strong"),p_o=o("bert-generation"),__o=o(" \u2014 "),VI=a("a"),u_o=o("BertGenerationEncoder"),b_o=o(" (Bert Generation model)"),v_o=l(),pp=a("li"),Dse=a("strong"),F_o=o("big_bird"),T_o=o(" \u2014 "),XI=a("a"),M_o=o("BigBirdModel"),E_o=o(" (BigBird model)"),C_o=l(),_p=a("li"),Gse=a("strong"),w_o=o("bigbird_pegasus"),A_o=o(" \u2014 "),zI=a("a"),y_o=o("BigBirdPegasusModel"),L_o=o(" (BigBirdPegasus model)"),x_o=l(),up=a("li"),Ose=a("strong"),$_o=o("blenderbot"),k_o=o(" \u2014 "),WI=a("a"),S_o=o("BlenderbotModel"),R_o=o(" (Blenderbot model)"),P_o=l(),bp=a("li"),Vse=a("strong"),B_o=o("blenderbot-small"),I_o=o(" \u2014 "),QI=a("a"),N_o=o("BlenderbotSmallModel"),q_o=o(" (BlenderbotSmall model)"),j_o=l(),vp=a("li"),Xse=a("strong"),D_o=o("bloom"),G_o=o(" \u2014 "),HI=a("a"),O_o=o("BloomModel"),V_o=o(" (BLOOM model)"),X_o=l(),Fp=a("li"),zse=a("strong"),z_o=o("camembert"),W_o=o(" \u2014 "),UI=a("a"),Q_o=o("CamembertModel"),H_o=o(" (CamemBERT model)"),U_o=l(),Tp=a("li"),Wse=a("strong"),J_o=o("canine"),Y_o=o(" \u2014 "),JI=a("a"),K_o=o("CanineModel"),Z_o=o(" (Canine model)"),euo=l(),Mp=a("li"),Qse=a("strong"),ouo=o("clip"),ruo=o(" \u2014 "),YI=a("a"),tuo=o("CLIPModel"),auo=o(" (CLIP model)"),nuo=l(),Ep=a("li"),Hse=a("strong"),suo=o("convbert"),luo=o(" \u2014 "),KI=a("a"),iuo=o("ConvBertModel"),duo=o(" (ConvBERT model)"),cuo=l(),Cp=a("li"),Use=a("strong"),fuo=o("convnext"),muo=o(" \u2014 "),ZI=a("a"),guo=o("ConvNextModel"),huo=o(" (ConvNext model)"),puo=l(),wp=a("li"),Jse=a("strong"),_uo=o("ctrl"),uuo=o(" \u2014 "),eN=a("a"),buo=o("CTRLModel"),vuo=o(" (CTRL model)"),Fuo=l(),Ap=a("li"),Yse=a("strong"),Tuo=o("cvt"),Muo=o(" \u2014 "),oN=a("a"),Euo=o("CvtModel"),Cuo=o(" (CvT model)"),wuo=l(),yp=a("li"),Kse=a("strong"),Auo=o("data2vec-audio"),yuo=o(" \u2014 "),rN=a("a"),Luo=o("Data2VecAudioModel"),xuo=o(" (Data2VecAudio model)"),$uo=l(),Lp=a("li"),Zse=a("strong"),kuo=o("data2vec-text"),Suo=o(" \u2014 "),tN=a("a"),Ruo=o("Data2VecTextModel"),Puo=o(" (Data2VecText model)"),Buo=l(),xp=a("li"),ele=a("strong"),Iuo=o("data2vec-vision"),Nuo=o(" \u2014 "),aN=a("a"),quo=o("Data2VecVisionModel"),juo=o(" (Data2VecVision model)"),Duo=l(),$p=a("li"),ole=a("strong"),Guo=o("deberta"),Ouo=o(" \u2014 "),nN=a("a"),Vuo=o("DebertaModel"),Xuo=o(" (DeBERTa model)"),zuo=l(),kp=a("li"),rle=a("strong"),Wuo=o("deberta-v2"),Quo=o(" \u2014 "),sN=a("a"),Huo=o("DebertaV2Model"),Uuo=o(" (DeBERTa-v2 model)"),Juo=l(),Sp=a("li"),tle=a("strong"),Yuo=o("decision_transformer"),Kuo=o(" \u2014 "),lN=a("a"),Zuo=o("DecisionTransformerModel"),e4o=o(" (Decision Transformer model)"),o4o=l(),Rp=a("li"),ale=a("strong"),r4o=o("deit"),t4o=o(" \u2014 "),iN=a("a"),a4o=o("DeiTModel"),n4o=o(" (DeiT model)"),s4o=l(),Pp=a("li"),nle=a("strong"),l4o=o("detr"),i4o=o(" \u2014 "),dN=a("a"),d4o=o("DetrModel"),c4o=o(" (DETR model)"),f4o=l(),Bp=a("li"),sle=a("strong"),m4o=o("distilbert"),g4o=o(" \u2014 "),cN=a("a"),h4o=o("DistilBertModel"),p4o=o(" (DistilBERT model)"),_4o=l(),Ip=a("li"),lle=a("strong"),u4o=o("dpr"),b4o=o(" \u2014 "),fN=a("a"),v4o=o("DPRQuestionEncoder"),F4o=o(" (DPR model)"),T4o=l(),Np=a("li"),ile=a("strong"),M4o=o("dpt"),E4o=o(" \u2014 "),mN=a("a"),C4o=o("DPTModel"),w4o=o(" (DPT model)"),A4o=l(),qp=a("li"),dle=a("strong"),y4o=o("electra"),L4o=o(" \u2014 "),gN=a("a"),x4o=o("ElectraModel"),$4o=o(" (ELECTRA model)"),k4o=l(),jp=a("li"),cle=a("strong"),S4o=o("flaubert"),R4o=o(" \u2014 "),hN=a("a"),P4o=o("FlaubertModel"),B4o=o(" (FlauBERT model)"),I4o=l(),Dp=a("li"),fle=a("strong"),N4o=o("flava"),q4o=o(" \u2014 "),pN=a("a"),j4o=o("FlavaModel"),D4o=o(" (Flava model)"),G4o=l(),Gp=a("li"),mle=a("strong"),O4o=o("fnet"),V4o=o(" \u2014 "),_N=a("a"),X4o=o("FNetModel"),z4o=o(" (FNet model)"),W4o=l(),Op=a("li"),gle=a("strong"),Q4o=o("fsmt"),H4o=o(" \u2014 "),uN=a("a"),U4o=o("FSMTModel"),J4o=o(" (FairSeq Machine-Translation model)"),Y4o=l(),Ps=a("li"),hle=a("strong"),K4o=o("funnel"),Z4o=o(" \u2014 "),bN=a("a"),e1o=o("FunnelModel"),o1o=o(" or "),vN=a("a"),r1o=o("FunnelBaseModel"),t1o=o(" (Funnel Transformer model)"),a1o=l(),Vp=a("li"),ple=a("strong"),n1o=o("glpn"),s1o=o(" \u2014 "),FN=a("a"),l1o=o("GLPNModel"),i1o=o(" (GLPN model)"),d1o=l(),Xp=a("li"),_le=a("strong"),c1o=o("gpt2"),f1o=o(" \u2014 "),TN=a("a"),m1o=o("GPT2Model"),g1o=o(" (OpenAI GPT-2 model)"),h1o=l(),zp=a("li"),ule=a("strong"),p1o=o("gpt_neo"),_1o=o(" \u2014 "),MN=a("a"),u1o=o("GPTNeoModel"),b1o=o(" (GPT Neo model)"),v1o=l(),Wp=a("li"),ble=a("strong"),F1o=o("gpt_neox"),T1o=o(" \u2014 "),EN=a("a"),M1o=o("GPTNeoXModel"),E1o=o(" (GPT NeoX model)"),C1o=l(),Qp=a("li"),vle=a("strong"),w1o=o("gptj"),A1o=o(" \u2014 "),CN=a("a"),y1o=o("GPTJModel"),L1o=o(" (GPT-J model)"),x1o=l(),Hp=a("li"),Fle=a("strong"),$1o=o("hubert"),k1o=o(" \u2014 "),wN=a("a"),S1o=o("HubertModel"),R1o=o(" (Hubert model)"),P1o=l(),Up=a("li"),Tle=a("strong"),B1o=o("ibert"),I1o=o(" \u2014 "),AN=a("a"),N1o=o("IBertModel"),q1o=o(" (I-BERT model)"),j1o=l(),Jp=a("li"),Mle=a("strong"),D1o=o("imagegpt"),G1o=o(" \u2014 "),yN=a("a"),O1o=o("ImageGPTModel"),V1o=o(" (ImageGPT model)"),X1o=l(),Yp=a("li"),Ele=a("strong"),z1o=o("layoutlm"),W1o=o(" \u2014 "),LN=a("a"),Q1o=o("LayoutLMModel"),H1o=o(" (LayoutLM model)"),U1o=l(),Kp=a("li"),Cle=a("strong"),J1o=o("layoutlmv2"),Y1o=o(" \u2014 "),xN=a("a"),K1o=o("LayoutLMv2Model"),Z1o=o(" (LayoutLMv2 model)"),e7o=l(),Zp=a("li"),wle=a("strong"),o7o=o("layoutlmv3"),r7o=o(" \u2014 "),$N=a("a"),t7o=o("LayoutLMv3Model"),a7o=o(" (LayoutLMv3 model)"),n7o=l(),e_=a("li"),Ale=a("strong"),s7o=o("led"),l7o=o(" \u2014 "),kN=a("a"),i7o=o("LEDModel"),d7o=o(" (LED model)"),c7o=l(),o_=a("li"),yle=a("strong"),f7o=o("longformer"),m7o=o(" \u2014 "),SN=a("a"),g7o=o("LongformerModel"),h7o=o(" (Longformer model)"),p7o=l(),r_=a("li"),Lle=a("strong"),_7o=o("luke"),u7o=o(" \u2014 "),RN=a("a"),b7o=o("LukeModel"),v7o=o(" (LUKE model)"),F7o=l(),t_=a("li"),xle=a("strong"),T7o=o("lxmert"),M7o=o(" \u2014 "),PN=a("a"),E7o=o("LxmertModel"),C7o=o(" (LXMERT model)"),w7o=l(),a_=a("li"),$le=a("strong"),A7o=o("m2m_100"),y7o=o(" \u2014 "),BN=a("a"),L7o=o("M2M100Model"),x7o=o(" (M2M100 model)"),$7o=l(),n_=a("li"),kle=a("strong"),k7o=o("marian"),S7o=o(" \u2014 "),IN=a("a"),R7o=o("MarianModel"),P7o=o(" (Marian model)"),B7o=l(),s_=a("li"),Sle=a("strong"),I7o=o("maskformer"),N7o=o(" \u2014 "),NN=a("a"),q7o=o("MaskFormerModel"),j7o=o(" (MaskFormer model)"),D7o=l(),l_=a("li"),Rle=a("strong"),G7o=o("mbart"),O7o=o(" \u2014 "),qN=a("a"),V7o=o("MBartModel"),X7o=o(" (mBART model)"),z7o=l(),i_=a("li"),Ple=a("strong"),W7o=o("megatron-bert"),Q7o=o(" \u2014 "),jN=a("a"),H7o=o("MegatronBertModel"),U7o=o(" (MegatronBert model)"),J7o=l(),d_=a("li"),Ble=a("strong"),Y7o=o("mobilebert"),K7o=o(" \u2014 "),DN=a("a"),Z7o=o("MobileBertModel"),ebo=o(" (MobileBERT model)"),obo=l(),c_=a("li"),Ile=a("strong"),rbo=o("mpnet"),tbo=o(" \u2014 "),GN=a("a"),abo=o("MPNetModel"),nbo=o(" (MPNet model)"),sbo=l(),f_=a("li"),Nle=a("strong"),lbo=o("mt5"),ibo=o(" \u2014 "),ON=a("a"),dbo=o("MT5Model"),cbo=o(" (mT5 model)"),fbo=l(),m_=a("li"),qle=a("strong"),mbo=o("nystromformer"),gbo=o(" \u2014 "),VN=a("a"),hbo=o("NystromformerModel"),pbo=o(" (Nystromformer model)"),_bo=l(),g_=a("li"),jle=a("strong"),ubo=o("openai-gpt"),bbo=o(" \u2014 "),XN=a("a"),vbo=o("OpenAIGPTModel"),Fbo=o(" (OpenAI GPT model)"),Tbo=l(),h_=a("li"),Dle=a("strong"),Mbo=o("opt"),Ebo=o(" \u2014 "),zN=a("a"),Cbo=o("OPTModel"),wbo=o(" (OPT model)"),Abo=l(),p_=a("li"),Gle=a("strong"),ybo=o("pegasus"),Lbo=o(" \u2014 "),WN=a("a"),xbo=o("PegasusModel"),$bo=o(" (Pegasus model)"),kbo=l(),__=a("li"),Ole=a("strong"),Sbo=o("perceiver"),Rbo=o(" \u2014 "),QN=a("a"),Pbo=o("PerceiverModel"),Bbo=o(" (Perceiver model)"),Ibo=l(),u_=a("li"),Vle=a("strong"),Nbo=o("plbart"),qbo=o(" \u2014 "),HN=a("a"),jbo=o("PLBartModel"),Dbo=o(" (PLBart model)"),Gbo=l(),b_=a("li"),Xle=a("strong"),Obo=o("poolformer"),Vbo=o(" \u2014 "),UN=a("a"),Xbo=o("PoolFormerModel"),zbo=o(" (PoolFormer model)"),Wbo=l(),v_=a("li"),zle=a("strong"),Qbo=o("prophetnet"),Hbo=o(" \u2014 "),JN=a("a"),Ubo=o("ProphetNetModel"),Jbo=o(" (ProphetNet model)"),Ybo=l(),F_=a("li"),Wle=a("strong"),Kbo=o("qdqbert"),Zbo=o(" \u2014 "),YN=a("a"),e2o=o("QDQBertModel"),o2o=o(" (QDQBert model)"),r2o=l(),T_=a("li"),Qle=a("strong"),t2o=o("reformer"),a2o=o(" \u2014 "),KN=a("a"),n2o=o("ReformerModel"),s2o=o(" (Reformer model)"),l2o=l(),M_=a("li"),Hle=a("strong"),i2o=o("regnet"),d2o=o(" \u2014 "),ZN=a("a"),c2o=o("RegNetModel"),f2o=o(" (RegNet model)"),m2o=l(),E_=a("li"),Ule=a("strong"),g2o=o("rembert"),h2o=o(" \u2014 "),eq=a("a"),p2o=o("RemBertModel"),_2o=o(" (RemBERT model)"),u2o=l(),C_=a("li"),Jle=a("strong"),b2o=o("resnet"),v2o=o(" \u2014 "),oq=a("a"),F2o=o("ResNetModel"),T2o=o(" (ResNet model)"),M2o=l(),w_=a("li"),Yle=a("strong"),E2o=o("retribert"),C2o=o(" \u2014 "),rq=a("a"),w2o=o("RetriBertModel"),A2o=o(" (RetriBERT model)"),y2o=l(),A_=a("li"),Kle=a("strong"),L2o=o("roberta"),x2o=o(" \u2014 "),tq=a("a"),$2o=o("RobertaModel"),k2o=o(" (RoBERTa model)"),S2o=l(),y_=a("li"),Zle=a("strong"),R2o=o("roformer"),P2o=o(" \u2014 "),aq=a("a"),B2o=o("RoFormerModel"),I2o=o(" (RoFormer model)"),N2o=l(),L_=a("li"),eie=a("strong"),q2o=o("segformer"),j2o=o(" \u2014 "),nq=a("a"),D2o=o("SegformerModel"),G2o=o(" (SegFormer model)"),O2o=l(),x_=a("li"),oie=a("strong"),V2o=o("sew"),X2o=o(" \u2014 "),sq=a("a"),z2o=o("SEWModel"),W2o=o(" (SEW model)"),Q2o=l(),$_=a("li"),rie=a("strong"),H2o=o("sew-d"),U2o=o(" \u2014 "),lq=a("a"),J2o=o("SEWDModel"),Y2o=o(" (SEW-D model)"),K2o=l(),k_=a("li"),tie=a("strong"),Z2o=o("speech_to_text"),evo=o(" \u2014 "),iq=a("a"),ovo=o("Speech2TextModel"),rvo=o(" (Speech2Text model)"),tvo=l(),S_=a("li"),aie=a("strong"),avo=o("splinter"),nvo=o(" \u2014 "),dq=a("a"),svo=o("SplinterModel"),lvo=o(" (Splinter model)"),ivo=l(),R_=a("li"),nie=a("strong"),dvo=o("squeezebert"),cvo=o(" \u2014 "),cq=a("a"),fvo=o("SqueezeBertModel"),mvo=o(" (SqueezeBERT model)"),gvo=l(),P_=a("li"),sie=a("strong"),hvo=o("swin"),pvo=o(" \u2014 "),fq=a("a"),_vo=o("SwinModel"),uvo=o(" (Swin model)"),bvo=l(),B_=a("li"),lie=a("strong"),vvo=o("t5"),Fvo=o(" \u2014 "),mq=a("a"),Tvo=o("T5Model"),Mvo=o(" (T5 model)"),Evo=l(),I_=a("li"),iie=a("strong"),Cvo=o("tapas"),wvo=o(" \u2014 "),gq=a("a"),Avo=o("TapasModel"),yvo=o(" (TAPAS model)"),Lvo=l(),N_=a("li"),die=a("strong"),xvo=o("trajectory_transformer"),$vo=o(" \u2014 "),hq=a("a"),kvo=o("TrajectoryTransformerModel"),Svo=o(" (Trajectory Transformer model)"),Rvo=l(),q_=a("li"),cie=a("strong"),Pvo=o("transfo-xl"),Bvo=o(" \u2014 "),pq=a("a"),Ivo=o("TransfoXLModel"),Nvo=o(" (Transformer-XL model)"),qvo=l(),j_=a("li"),fie=a("strong"),jvo=o("unispeech"),Dvo=o(" \u2014 "),_q=a("a"),Gvo=o("UniSpeechModel"),Ovo=o(" (UniSpeech model)"),Vvo=l(),D_=a("li"),mie=a("strong"),Xvo=o("unispeech-sat"),zvo=o(" \u2014 "),uq=a("a"),Wvo=o("UniSpeechSatModel"),Qvo=o(" (UniSpeechSat model)"),Hvo=l(),G_=a("li"),gie=a("strong"),Uvo=o("van"),Jvo=o(" \u2014 "),bq=a("a"),Yvo=o("VanModel"),Kvo=o(" (VAN model)"),Zvo=l(),O_=a("li"),hie=a("strong"),eFo=o("vilt"),oFo=o(" \u2014 "),vq=a("a"),rFo=o("ViltModel"),tFo=o(" (ViLT model)"),aFo=l(),V_=a("li"),pie=a("strong"),nFo=o("vision-text-dual-encoder"),sFo=o(" \u2014 "),Fq=a("a"),lFo=o("VisionTextDualEncoderModel"),iFo=o(" (VisionTextDualEncoder model)"),dFo=l(),X_=a("li"),_ie=a("strong"),cFo=o("visual_bert"),fFo=o(" \u2014 "),Tq=a("a"),mFo=o("VisualBertModel"),gFo=o(" (VisualBert model)"),hFo=l(),z_=a("li"),uie=a("strong"),pFo=o("vit"),_Fo=o(" \u2014 "),Mq=a("a"),uFo=o("ViTModel"),bFo=o(" (ViT model)"),vFo=l(),W_=a("li"),bie=a("strong"),FFo=o("vit_mae"),TFo=o(" \u2014 "),Eq=a("a"),MFo=o("ViTMAEModel"),EFo=o(" (ViTMAE model)"),CFo=l(),Q_=a("li"),vie=a("strong"),wFo=o("wav2vec2"),AFo=o(" \u2014 "),Cq=a("a"),yFo=o("Wav2Vec2Model"),LFo=o(" (Wav2Vec2 model)"),xFo=l(),H_=a("li"),Fie=a("strong"),$Fo=o("wav2vec2-conformer"),kFo=o(" \u2014 "),wq=a("a"),SFo=o("Wav2Vec2ConformerModel"),RFo=o(" (Wav2Vec2-Conformer model)"),PFo=l(),U_=a("li"),Tie=a("strong"),BFo=o("wavlm"),IFo=o(" \u2014 "),Aq=a("a"),NFo=o("WavLMModel"),qFo=o(" (WavLM model)"),jFo=l(),J_=a("li"),Mie=a("strong"),DFo=o("xglm"),GFo=o(" \u2014 "),yq=a("a"),OFo=o("XGLMModel"),VFo=o(" (XGLM model)"),XFo=l(),Y_=a("li"),Eie=a("strong"),zFo=o("xlm"),WFo=o(" \u2014 "),Lq=a("a"),QFo=o("XLMModel"),HFo=o(" (XLM model)"),UFo=l(),K_=a("li"),Cie=a("strong"),JFo=o("xlm-prophetnet"),YFo=o(" \u2014 "),xq=a("a"),KFo=o("XLMProphetNetModel"),ZFo=o(" (XLMProphetNet model)"),eTo=l(),Z_=a("li"),wie=a("strong"),oTo=o("xlm-roberta"),rTo=o(" \u2014 "),$q=a("a"),tTo=o("XLMRobertaModel"),aTo=o(" (XLM-RoBERTa model)"),nTo=l(),eu=a("li"),Aie=a("strong"),sTo=o("xlm-roberta-xl"),lTo=o(" \u2014 "),kq=a("a"),iTo=o("XLMRobertaXLModel"),dTo=o(" (XLM-RoBERTa-XL model)"),cTo=l(),ou=a("li"),yie=a("strong"),fTo=o("xlnet"),mTo=o(" \u2014 "),Sq=a("a"),gTo=o("XLNetModel"),hTo=o(" (XLNet model)"),pTo=l(),ru=a("li"),Lie=a("strong"),_To=o("yolos"),uTo=o(" \u2014 "),Rq=a("a"),bTo=o("YolosModel"),vTo=o(" (YOLOS model)"),FTo=l(),tu=a("li"),xie=a("strong"),TTo=o("yoso"),MTo=o(" \u2014 "),Pq=a("a"),ETo=o("YosoModel"),CTo=o(" (YOSO model)"),wTo=l(),au=a("p"),ATo=o("The model is set in evaluation mode by default using "),$ie=a("code"),yTo=o("model.eval()"),LTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),xTo=o("model.train()"),$To=l(),F(nu.$$.fragment),Rqe=l(),Li=a("h2"),su=a("a"),Sie=a("span"),F(dy.$$.fragment),kTo=l(),Rie=a("span"),STo=o("AutoModelForPreTraining"),Pqe=l(),xo=a("div"),F(cy.$$.fragment),RTo=l(),xi=a("p"),PTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=a("a"),BTo=o("from_pretrained()"),ITo=o(" class method or the "),Iq=a("a"),NTo=o("from_config()"),qTo=o(` class
method.`),jTo=l(),fy=a("p"),DTo=o("This class cannot be instantiated directly using "),Pie=a("code"),GTo=o("__init__()"),OTo=o(" (throws an error)."),VTo=l(),at=a("div"),F(my.$$.fragment),XTo=l(),Bie=a("p"),zTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WTo=l(),$i=a("p"),QTo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),HTo=o("not"),UTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=a("a"),JTo=o("from_pretrained()"),YTo=o(" to load the model weights."),KTo=l(),F(lu.$$.fragment),ZTo=l(),Ye=a("div"),F(gy.$$.fragment),eMo=l(),Nie=a("p"),oMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rMo=l(),xa=a("p"),tMo=o("The model class to instantiate is selected based on the "),qie=a("code"),aMo=o("model_type"),nMo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),sMo=o("pretrained_model_name_or_path"),lMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),iMo=o("pretrained_model_name_or_path"),dMo=o(":"),cMo=l(),G=a("ul"),iu=a("li"),Gie=a("strong"),fMo=o("albert"),mMo=o(" \u2014 "),qq=a("a"),gMo=o("AlbertForPreTraining"),hMo=o(" (ALBERT model)"),pMo=l(),du=a("li"),Oie=a("strong"),_Mo=o("bart"),uMo=o(" \u2014 "),jq=a("a"),bMo=o("BartForConditionalGeneration"),vMo=o(" (BART model)"),FMo=l(),cu=a("li"),Vie=a("strong"),TMo=o("bert"),MMo=o(" \u2014 "),Dq=a("a"),EMo=o("BertForPreTraining"),CMo=o(" (BERT model)"),wMo=l(),fu=a("li"),Xie=a("strong"),AMo=o("big_bird"),yMo=o(" \u2014 "),Gq=a("a"),LMo=o("BigBirdForPreTraining"),xMo=o(" (BigBird model)"),$Mo=l(),mu=a("li"),zie=a("strong"),kMo=o("bloom"),SMo=o(" \u2014 "),Oq=a("a"),RMo=o("BloomForCausalLM"),PMo=o(" (BLOOM model)"),BMo=l(),gu=a("li"),Wie=a("strong"),IMo=o("camembert"),NMo=o(" \u2014 "),Vq=a("a"),qMo=o("CamembertForMaskedLM"),jMo=o(" (CamemBERT model)"),DMo=l(),hu=a("li"),Qie=a("strong"),GMo=o("ctrl"),OMo=o(" \u2014 "),Xq=a("a"),VMo=o("CTRLLMHeadModel"),XMo=o(" (CTRL model)"),zMo=l(),pu=a("li"),Hie=a("strong"),WMo=o("data2vec-text"),QMo=o(" \u2014 "),zq=a("a"),HMo=o("Data2VecTextForMaskedLM"),UMo=o(" (Data2VecText model)"),JMo=l(),_u=a("li"),Uie=a("strong"),YMo=o("deberta"),KMo=o(" \u2014 "),Wq=a("a"),ZMo=o("DebertaForMaskedLM"),eEo=o(" (DeBERTa model)"),oEo=l(),uu=a("li"),Jie=a("strong"),rEo=o("deberta-v2"),tEo=o(" \u2014 "),Qq=a("a"),aEo=o("DebertaV2ForMaskedLM"),nEo=o(" (DeBERTa-v2 model)"),sEo=l(),bu=a("li"),Yie=a("strong"),lEo=o("distilbert"),iEo=o(" \u2014 "),Hq=a("a"),dEo=o("DistilBertForMaskedLM"),cEo=o(" (DistilBERT model)"),fEo=l(),vu=a("li"),Kie=a("strong"),mEo=o("electra"),gEo=o(" \u2014 "),Uq=a("a"),hEo=o("ElectraForPreTraining"),pEo=o(" (ELECTRA model)"),_Eo=l(),Fu=a("li"),Zie=a("strong"),uEo=o("flaubert"),bEo=o(" \u2014 "),Jq=a("a"),vEo=o("FlaubertWithLMHeadModel"),FEo=o(" (FlauBERT model)"),TEo=l(),Tu=a("li"),ede=a("strong"),MEo=o("flava"),EEo=o(" \u2014 "),Yq=a("a"),CEo=o("FlavaForPreTraining"),wEo=o(" (Flava model)"),AEo=l(),Mu=a("li"),ode=a("strong"),yEo=o("fnet"),LEo=o(" \u2014 "),Kq=a("a"),xEo=o("FNetForPreTraining"),$Eo=o(" (FNet model)"),kEo=l(),Eu=a("li"),rde=a("strong"),SEo=o("fsmt"),REo=o(" \u2014 "),Zq=a("a"),PEo=o("FSMTForConditionalGeneration"),BEo=o(" (FairSeq Machine-Translation model)"),IEo=l(),Cu=a("li"),tde=a("strong"),NEo=o("funnel"),qEo=o(" \u2014 "),ej=a("a"),jEo=o("FunnelForPreTraining"),DEo=o(" (Funnel Transformer model)"),GEo=l(),wu=a("li"),ade=a("strong"),OEo=o("gpt2"),VEo=o(" \u2014 "),oj=a("a"),XEo=o("GPT2LMHeadModel"),zEo=o(" (OpenAI GPT-2 model)"),WEo=l(),Au=a("li"),nde=a("strong"),QEo=o("ibert"),HEo=o(" \u2014 "),rj=a("a"),UEo=o("IBertForMaskedLM"),JEo=o(" (I-BERT model)"),YEo=l(),yu=a("li"),sde=a("strong"),KEo=o("layoutlm"),ZEo=o(" \u2014 "),tj=a("a"),eCo=o("LayoutLMForMaskedLM"),oCo=o(" (LayoutLM model)"),rCo=l(),Lu=a("li"),lde=a("strong"),tCo=o("longformer"),aCo=o(" \u2014 "),aj=a("a"),nCo=o("LongformerForMaskedLM"),sCo=o(" (Longformer model)"),lCo=l(),xu=a("li"),ide=a("strong"),iCo=o("lxmert"),dCo=o(" \u2014 "),nj=a("a"),cCo=o("LxmertForPreTraining"),fCo=o(" (LXMERT model)"),mCo=l(),$u=a("li"),dde=a("strong"),gCo=o("megatron-bert"),hCo=o(" \u2014 "),sj=a("a"),pCo=o("MegatronBertForPreTraining"),_Co=o(" (MegatronBert model)"),uCo=l(),ku=a("li"),cde=a("strong"),bCo=o("mobilebert"),vCo=o(" \u2014 "),lj=a("a"),FCo=o("MobileBertForPreTraining"),TCo=o(" (MobileBERT model)"),MCo=l(),Su=a("li"),fde=a("strong"),ECo=o("mpnet"),CCo=o(" \u2014 "),ij=a("a"),wCo=o("MPNetForMaskedLM"),ACo=o(" (MPNet model)"),yCo=l(),Ru=a("li"),mde=a("strong"),LCo=o("openai-gpt"),xCo=o(" \u2014 "),dj=a("a"),$Co=o("OpenAIGPTLMHeadModel"),kCo=o(" (OpenAI GPT model)"),SCo=l(),Pu=a("li"),gde=a("strong"),RCo=o("retribert"),PCo=o(" \u2014 "),cj=a("a"),BCo=o("RetriBertModel"),ICo=o(" (RetriBERT model)"),NCo=l(),Bu=a("li"),hde=a("strong"),qCo=o("roberta"),jCo=o(" \u2014 "),fj=a("a"),DCo=o("RobertaForMaskedLM"),GCo=o(" (RoBERTa model)"),OCo=l(),Iu=a("li"),pde=a("strong"),VCo=o("splinter"),XCo=o(" \u2014 "),mj=a("a"),zCo=o("SplinterForPreTraining"),WCo=o(" (Splinter model)"),QCo=l(),Nu=a("li"),_de=a("strong"),HCo=o("squeezebert"),UCo=o(" \u2014 "),gj=a("a"),JCo=o("SqueezeBertForMaskedLM"),YCo=o(" (SqueezeBERT model)"),KCo=l(),qu=a("li"),ude=a("strong"),ZCo=o("t5"),e5o=o(" \u2014 "),hj=a("a"),o5o=o("T5ForConditionalGeneration"),r5o=o(" (T5 model)"),t5o=l(),ju=a("li"),bde=a("strong"),a5o=o("tapas"),n5o=o(" \u2014 "),pj=a("a"),s5o=o("TapasForMaskedLM"),l5o=o(" (TAPAS model)"),i5o=l(),Du=a("li"),vde=a("strong"),d5o=o("transfo-xl"),c5o=o(" \u2014 "),_j=a("a"),f5o=o("TransfoXLLMHeadModel"),m5o=o(" (Transformer-XL model)"),g5o=l(),Gu=a("li"),Fde=a("strong"),h5o=o("unispeech"),p5o=o(" \u2014 "),uj=a("a"),_5o=o("UniSpeechForPreTraining"),u5o=o(" (UniSpeech model)"),b5o=l(),Ou=a("li"),Tde=a("strong"),v5o=o("unispeech-sat"),F5o=o(" \u2014 "),bj=a("a"),T5o=o("UniSpeechSatForPreTraining"),M5o=o(" (UniSpeechSat model)"),E5o=l(),Vu=a("li"),Mde=a("strong"),C5o=o("visual_bert"),w5o=o(" \u2014 "),vj=a("a"),A5o=o("VisualBertForPreTraining"),y5o=o(" (VisualBert model)"),L5o=l(),Xu=a("li"),Ede=a("strong"),x5o=o("vit_mae"),$5o=o(" \u2014 "),Fj=a("a"),k5o=o("ViTMAEForPreTraining"),S5o=o(" (ViTMAE model)"),R5o=l(),zu=a("li"),Cde=a("strong"),P5o=o("wav2vec2"),B5o=o(" \u2014 "),Tj=a("a"),I5o=o("Wav2Vec2ForPreTraining"),N5o=o(" (Wav2Vec2 model)"),q5o=l(),Wu=a("li"),wde=a("strong"),j5o=o("wav2vec2-conformer"),D5o=o(" \u2014 "),Mj=a("a"),G5o=o("Wav2Vec2ConformerForPreTraining"),O5o=o(" (Wav2Vec2-Conformer model)"),V5o=l(),Qu=a("li"),Ade=a("strong"),X5o=o("xlm"),z5o=o(" \u2014 "),Ej=a("a"),W5o=o("XLMWithLMHeadModel"),Q5o=o(" (XLM model)"),H5o=l(),Hu=a("li"),yde=a("strong"),U5o=o("xlm-roberta"),J5o=o(" \u2014 "),Cj=a("a"),Y5o=o("XLMRobertaForMaskedLM"),K5o=o(" (XLM-RoBERTa model)"),Z5o=l(),Uu=a("li"),Lde=a("strong"),e3o=o("xlm-roberta-xl"),o3o=o(" \u2014 "),wj=a("a"),r3o=o("XLMRobertaXLForMaskedLM"),t3o=o(" (XLM-RoBERTa-XL model)"),a3o=l(),Ju=a("li"),xde=a("strong"),n3o=o("xlnet"),s3o=o(" \u2014 "),Aj=a("a"),l3o=o("XLNetLMHeadModel"),i3o=o(" (XLNet model)"),d3o=l(),Yu=a("p"),c3o=o("The model is set in evaluation mode by default using "),$de=a("code"),f3o=o("model.eval()"),m3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=a("code"),g3o=o("model.train()"),h3o=l(),F(Ku.$$.fragment),Bqe=l(),ki=a("h2"),Zu=a("a"),Sde=a("span"),F(hy.$$.fragment),p3o=l(),Rde=a("span"),_3o=o("AutoModelForCausalLM"),Iqe=l(),$o=a("div"),F(py.$$.fragment),u3o=l(),Si=a("p"),b3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yj=a("a"),v3o=o("from_pretrained()"),F3o=o(" class method or the "),Lj=a("a"),T3o=o("from_config()"),M3o=o(` class
method.`),E3o=l(),_y=a("p"),C3o=o("This class cannot be instantiated directly using "),Pde=a("code"),w3o=o("__init__()"),A3o=o(" (throws an error)."),y3o=l(),nt=a("div"),F(uy.$$.fragment),L3o=l(),Bde=a("p"),x3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$3o=l(),Ri=a("p"),k3o=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),S3o=o("not"),R3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),P3o=o("from_pretrained()"),B3o=o(" to load the model weights."),I3o=l(),F(e4.$$.fragment),N3o=l(),Ke=a("div"),F(by.$$.fragment),q3o=l(),Nde=a("p"),j3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D3o=l(),$a=a("p"),G3o=o("The model class to instantiate is selected based on the "),qde=a("code"),O3o=o("model_type"),V3o=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),X3o=o("pretrained_model_name_or_path"),z3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=a("code"),W3o=o("pretrained_model_name_or_path"),Q3o=o(":"),H3o=l(),z=a("ul"),o4=a("li"),Gde=a("strong"),U3o=o("bart"),J3o=o(" \u2014 "),$j=a("a"),Y3o=o("BartForCausalLM"),K3o=o(" (BART model)"),Z3o=l(),r4=a("li"),Ode=a("strong"),ewo=o("bert"),owo=o(" \u2014 "),kj=a("a"),rwo=o("BertLMHeadModel"),two=o(" (BERT model)"),awo=l(),t4=a("li"),Vde=a("strong"),nwo=o("bert-generation"),swo=o(" \u2014 "),Sj=a("a"),lwo=o("BertGenerationDecoder"),iwo=o(" (Bert Generation model)"),dwo=l(),a4=a("li"),Xde=a("strong"),cwo=o("big_bird"),fwo=o(" \u2014 "),Rj=a("a"),mwo=o("BigBirdForCausalLM"),gwo=o(" (BigBird model)"),hwo=l(),n4=a("li"),zde=a("strong"),pwo=o("bigbird_pegasus"),_wo=o(" \u2014 "),Pj=a("a"),uwo=o("BigBirdPegasusForCausalLM"),bwo=o(" (BigBirdPegasus model)"),vwo=l(),s4=a("li"),Wde=a("strong"),Fwo=o("blenderbot"),Two=o(" \u2014 "),Bj=a("a"),Mwo=o("BlenderbotForCausalLM"),Ewo=o(" (Blenderbot model)"),Cwo=l(),l4=a("li"),Qde=a("strong"),wwo=o("blenderbot-small"),Awo=o(" \u2014 "),Ij=a("a"),ywo=o("BlenderbotSmallForCausalLM"),Lwo=o(" (BlenderbotSmall model)"),xwo=l(),i4=a("li"),Hde=a("strong"),$wo=o("bloom"),kwo=o(" \u2014 "),Nj=a("a"),Swo=o("BloomForCausalLM"),Rwo=o(" (BLOOM model)"),Pwo=l(),d4=a("li"),Ude=a("strong"),Bwo=o("camembert"),Iwo=o(" \u2014 "),qj=a("a"),Nwo=o("CamembertForCausalLM"),qwo=o(" (CamemBERT model)"),jwo=l(),c4=a("li"),Jde=a("strong"),Dwo=o("ctrl"),Gwo=o(" \u2014 "),jj=a("a"),Owo=o("CTRLLMHeadModel"),Vwo=o(" (CTRL model)"),Xwo=l(),f4=a("li"),Yde=a("strong"),zwo=o("data2vec-text"),Wwo=o(" \u2014 "),Dj=a("a"),Qwo=o("Data2VecTextForCausalLM"),Hwo=o(" (Data2VecText model)"),Uwo=l(),m4=a("li"),Kde=a("strong"),Jwo=o("electra"),Ywo=o(" \u2014 "),Gj=a("a"),Kwo=o("ElectraForCausalLM"),Zwo=o(" (ELECTRA model)"),e0o=l(),g4=a("li"),Zde=a("strong"),o0o=o("gpt2"),r0o=o(" \u2014 "),Oj=a("a"),t0o=o("GPT2LMHeadModel"),a0o=o(" (OpenAI GPT-2 model)"),n0o=l(),h4=a("li"),ece=a("strong"),s0o=o("gpt_neo"),l0o=o(" \u2014 "),Vj=a("a"),i0o=o("GPTNeoForCausalLM"),d0o=o(" (GPT Neo model)"),c0o=l(),p4=a("li"),oce=a("strong"),f0o=o("gpt_neox"),m0o=o(" \u2014 "),Xj=a("a"),g0o=o("GPTNeoXForCausalLM"),h0o=o(" (GPT NeoX model)"),p0o=l(),_4=a("li"),rce=a("strong"),_0o=o("gptj"),u0o=o(" \u2014 "),zj=a("a"),b0o=o("GPTJForCausalLM"),v0o=o(" (GPT-J model)"),F0o=l(),u4=a("li"),tce=a("strong"),T0o=o("marian"),M0o=o(" \u2014 "),Wj=a("a"),E0o=o("MarianForCausalLM"),C0o=o(" (Marian model)"),w0o=l(),b4=a("li"),ace=a("strong"),A0o=o("mbart"),y0o=o(" \u2014 "),Qj=a("a"),L0o=o("MBartForCausalLM"),x0o=o(" (mBART model)"),$0o=l(),v4=a("li"),nce=a("strong"),k0o=o("megatron-bert"),S0o=o(" \u2014 "),Hj=a("a"),R0o=o("MegatronBertForCausalLM"),P0o=o(" (MegatronBert model)"),B0o=l(),F4=a("li"),sce=a("strong"),I0o=o("openai-gpt"),N0o=o(" \u2014 "),Uj=a("a"),q0o=o("OpenAIGPTLMHeadModel"),j0o=o(" (OpenAI GPT model)"),D0o=l(),T4=a("li"),lce=a("strong"),G0o=o("opt"),O0o=o(" \u2014 "),Jj=a("a"),V0o=o("OPTForCausalLM"),X0o=o(" (OPT model)"),z0o=l(),M4=a("li"),ice=a("strong"),W0o=o("pegasus"),Q0o=o(" \u2014 "),Yj=a("a"),H0o=o("PegasusForCausalLM"),U0o=o(" (Pegasus model)"),J0o=l(),E4=a("li"),dce=a("strong"),Y0o=o("plbart"),K0o=o(" \u2014 "),Kj=a("a"),Z0o=o("PLBartForCausalLM"),e6o=o(" (PLBart model)"),o6o=l(),C4=a("li"),cce=a("strong"),r6o=o("prophetnet"),t6o=o(" \u2014 "),Zj=a("a"),a6o=o("ProphetNetForCausalLM"),n6o=o(" (ProphetNet model)"),s6o=l(),w4=a("li"),fce=a("strong"),l6o=o("qdqbert"),i6o=o(" \u2014 "),eD=a("a"),d6o=o("QDQBertLMHeadModel"),c6o=o(" (QDQBert model)"),f6o=l(),A4=a("li"),mce=a("strong"),m6o=o("reformer"),g6o=o(" \u2014 "),oD=a("a"),h6o=o("ReformerModelWithLMHead"),p6o=o(" (Reformer model)"),_6o=l(),y4=a("li"),gce=a("strong"),u6o=o("rembert"),b6o=o(" \u2014 "),rD=a("a"),v6o=o("RemBertForCausalLM"),F6o=o(" (RemBERT model)"),T6o=l(),L4=a("li"),hce=a("strong"),M6o=o("roberta"),E6o=o(" \u2014 "),tD=a("a"),C6o=o("RobertaForCausalLM"),w6o=o(" (RoBERTa model)"),A6o=l(),x4=a("li"),pce=a("strong"),y6o=o("roformer"),L6o=o(" \u2014 "),aD=a("a"),x6o=o("RoFormerForCausalLM"),$6o=o(" (RoFormer model)"),k6o=l(),$4=a("li"),_ce=a("strong"),S6o=o("speech_to_text_2"),R6o=o(" \u2014 "),nD=a("a"),P6o=o("Speech2Text2ForCausalLM"),B6o=o(" (Speech2Text2 model)"),I6o=l(),k4=a("li"),uce=a("strong"),N6o=o("transfo-xl"),q6o=o(" \u2014 "),sD=a("a"),j6o=o("TransfoXLLMHeadModel"),D6o=o(" (Transformer-XL model)"),G6o=l(),S4=a("li"),bce=a("strong"),O6o=o("trocr"),V6o=o(" \u2014 "),lD=a("a"),X6o=o("TrOCRForCausalLM"),z6o=o(" (TrOCR model)"),W6o=l(),R4=a("li"),vce=a("strong"),Q6o=o("xglm"),H6o=o(" \u2014 "),iD=a("a"),U6o=o("XGLMForCausalLM"),J6o=o(" (XGLM model)"),Y6o=l(),P4=a("li"),Fce=a("strong"),K6o=o("xlm"),Z6o=o(" \u2014 "),dD=a("a"),eAo=o("XLMWithLMHeadModel"),oAo=o(" (XLM model)"),rAo=l(),B4=a("li"),Tce=a("strong"),tAo=o("xlm-prophetnet"),aAo=o(" \u2014 "),cD=a("a"),nAo=o("XLMProphetNetForCausalLM"),sAo=o(" (XLMProphetNet model)"),lAo=l(),I4=a("li"),Mce=a("strong"),iAo=o("xlm-roberta"),dAo=o(" \u2014 "),fD=a("a"),cAo=o("XLMRobertaForCausalLM"),fAo=o(" (XLM-RoBERTa model)"),mAo=l(),N4=a("li"),Ece=a("strong"),gAo=o("xlm-roberta-xl"),hAo=o(" \u2014 "),mD=a("a"),pAo=o("XLMRobertaXLForCausalLM"),_Ao=o(" (XLM-RoBERTa-XL model)"),uAo=l(),q4=a("li"),Cce=a("strong"),bAo=o("xlnet"),vAo=o(" \u2014 "),gD=a("a"),FAo=o("XLNetLMHeadModel"),TAo=o(" (XLNet model)"),MAo=l(),j4=a("p"),EAo=o("The model is set in evaluation mode by default using "),wce=a("code"),CAo=o("model.eval()"),wAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=a("code"),AAo=o("model.train()"),yAo=l(),F(D4.$$.fragment),Nqe=l(),Pi=a("h2"),G4=a("a"),yce=a("span"),F(vy.$$.fragment),LAo=l(),Lce=a("span"),xAo=o("AutoModelForMaskedLM"),qqe=l(),ko=a("div"),F(Fy.$$.fragment),$Ao=l(),Bi=a("p"),kAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hD=a("a"),SAo=o("from_pretrained()"),RAo=o(" class method or the "),pD=a("a"),PAo=o("from_config()"),BAo=o(` class
method.`),IAo=l(),Ty=a("p"),NAo=o("This class cannot be instantiated directly using "),xce=a("code"),qAo=o("__init__()"),jAo=o(" (throws an error)."),DAo=l(),st=a("div"),F(My.$$.fragment),GAo=l(),$ce=a("p"),OAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VAo=l(),Ii=a("p"),XAo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),zAo=o("not"),WAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),QAo=o("from_pretrained()"),HAo=o(" to load the model weights."),UAo=l(),F(O4.$$.fragment),JAo=l(),Ze=a("div"),F(Ey.$$.fragment),YAo=l(),Sce=a("p"),KAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZAo=l(),ka=a("p"),eyo=o("The model class to instantiate is selected based on the "),Rce=a("code"),oyo=o("model_type"),ryo=o(` property of the config object (either
passed as an argument or loaded from `),Pce=a("code"),tyo=o("pretrained_model_name_or_path"),ayo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),nyo=o("pretrained_model_name_or_path"),syo=o(":"),lyo=l(),Q=a("ul"),V4=a("li"),Ice=a("strong"),iyo=o("albert"),dyo=o(" \u2014 "),uD=a("a"),cyo=o("AlbertForMaskedLM"),fyo=o(" (ALBERT model)"),myo=l(),X4=a("li"),Nce=a("strong"),gyo=o("bart"),hyo=o(" \u2014 "),bD=a("a"),pyo=o("BartForConditionalGeneration"),_yo=o(" (BART model)"),uyo=l(),z4=a("li"),qce=a("strong"),byo=o("bert"),vyo=o(" \u2014 "),vD=a("a"),Fyo=o("BertForMaskedLM"),Tyo=o(" (BERT model)"),Myo=l(),W4=a("li"),jce=a("strong"),Eyo=o("big_bird"),Cyo=o(" \u2014 "),FD=a("a"),wyo=o("BigBirdForMaskedLM"),Ayo=o(" (BigBird model)"),yyo=l(),Q4=a("li"),Dce=a("strong"),Lyo=o("camembert"),xyo=o(" \u2014 "),TD=a("a"),$yo=o("CamembertForMaskedLM"),kyo=o(" (CamemBERT model)"),Syo=l(),H4=a("li"),Gce=a("strong"),Ryo=o("convbert"),Pyo=o(" \u2014 "),MD=a("a"),Byo=o("ConvBertForMaskedLM"),Iyo=o(" (ConvBERT model)"),Nyo=l(),U4=a("li"),Oce=a("strong"),qyo=o("data2vec-text"),jyo=o(" \u2014 "),ED=a("a"),Dyo=o("Data2VecTextForMaskedLM"),Gyo=o(" (Data2VecText model)"),Oyo=l(),J4=a("li"),Vce=a("strong"),Vyo=o("deberta"),Xyo=o(" \u2014 "),CD=a("a"),zyo=o("DebertaForMaskedLM"),Wyo=o(" (DeBERTa model)"),Qyo=l(),Y4=a("li"),Xce=a("strong"),Hyo=o("deberta-v2"),Uyo=o(" \u2014 "),wD=a("a"),Jyo=o("DebertaV2ForMaskedLM"),Yyo=o(" (DeBERTa-v2 model)"),Kyo=l(),K4=a("li"),zce=a("strong"),Zyo=o("distilbert"),eLo=o(" \u2014 "),AD=a("a"),oLo=o("DistilBertForMaskedLM"),rLo=o(" (DistilBERT model)"),tLo=l(),Z4=a("li"),Wce=a("strong"),aLo=o("electra"),nLo=o(" \u2014 "),yD=a("a"),sLo=o("ElectraForMaskedLM"),lLo=o(" (ELECTRA model)"),iLo=l(),e1=a("li"),Qce=a("strong"),dLo=o("flaubert"),cLo=o(" \u2014 "),LD=a("a"),fLo=o("FlaubertWithLMHeadModel"),mLo=o(" (FlauBERT model)"),gLo=l(),o1=a("li"),Hce=a("strong"),hLo=o("fnet"),pLo=o(" \u2014 "),xD=a("a"),_Lo=o("FNetForMaskedLM"),uLo=o(" (FNet model)"),bLo=l(),r1=a("li"),Uce=a("strong"),vLo=o("funnel"),FLo=o(" \u2014 "),$D=a("a"),TLo=o("FunnelForMaskedLM"),MLo=o(" (Funnel Transformer model)"),ELo=l(),t1=a("li"),Jce=a("strong"),CLo=o("ibert"),wLo=o(" \u2014 "),kD=a("a"),ALo=o("IBertForMaskedLM"),yLo=o(" (I-BERT model)"),LLo=l(),a1=a("li"),Yce=a("strong"),xLo=o("layoutlm"),$Lo=o(" \u2014 "),SD=a("a"),kLo=o("LayoutLMForMaskedLM"),SLo=o(" (LayoutLM model)"),RLo=l(),n1=a("li"),Kce=a("strong"),PLo=o("longformer"),BLo=o(" \u2014 "),RD=a("a"),ILo=o("LongformerForMaskedLM"),NLo=o(" (Longformer model)"),qLo=l(),s1=a("li"),Zce=a("strong"),jLo=o("mbart"),DLo=o(" \u2014 "),PD=a("a"),GLo=o("MBartForConditionalGeneration"),OLo=o(" (mBART model)"),VLo=l(),l1=a("li"),efe=a("strong"),XLo=o("megatron-bert"),zLo=o(" \u2014 "),BD=a("a"),WLo=o("MegatronBertForMaskedLM"),QLo=o(" (MegatronBert model)"),HLo=l(),i1=a("li"),ofe=a("strong"),ULo=o("mobilebert"),JLo=o(" \u2014 "),ID=a("a"),YLo=o("MobileBertForMaskedLM"),KLo=o(" (MobileBERT model)"),ZLo=l(),d1=a("li"),rfe=a("strong"),e8o=o("mpnet"),o8o=o(" \u2014 "),ND=a("a"),r8o=o("MPNetForMaskedLM"),t8o=o(" (MPNet model)"),a8o=l(),c1=a("li"),tfe=a("strong"),n8o=o("nystromformer"),s8o=o(" \u2014 "),qD=a("a"),l8o=o("NystromformerForMaskedLM"),i8o=o(" (Nystromformer model)"),d8o=l(),f1=a("li"),afe=a("strong"),c8o=o("perceiver"),f8o=o(" \u2014 "),jD=a("a"),m8o=o("PerceiverForMaskedLM"),g8o=o(" (Perceiver model)"),h8o=l(),m1=a("li"),nfe=a("strong"),p8o=o("qdqbert"),_8o=o(" \u2014 "),DD=a("a"),u8o=o("QDQBertForMaskedLM"),b8o=o(" (QDQBert model)"),v8o=l(),g1=a("li"),sfe=a("strong"),F8o=o("reformer"),T8o=o(" \u2014 "),GD=a("a"),M8o=o("ReformerForMaskedLM"),E8o=o(" (Reformer model)"),C8o=l(),h1=a("li"),lfe=a("strong"),w8o=o("rembert"),A8o=o(" \u2014 "),OD=a("a"),y8o=o("RemBertForMaskedLM"),L8o=o(" (RemBERT model)"),x8o=l(),p1=a("li"),ife=a("strong"),$8o=o("roberta"),k8o=o(" \u2014 "),VD=a("a"),S8o=o("RobertaForMaskedLM"),R8o=o(" (RoBERTa model)"),P8o=l(),_1=a("li"),dfe=a("strong"),B8o=o("roformer"),I8o=o(" \u2014 "),XD=a("a"),N8o=o("RoFormerForMaskedLM"),q8o=o(" (RoFormer model)"),j8o=l(),u1=a("li"),cfe=a("strong"),D8o=o("squeezebert"),G8o=o(" \u2014 "),zD=a("a"),O8o=o("SqueezeBertForMaskedLM"),V8o=o(" (SqueezeBERT model)"),X8o=l(),b1=a("li"),ffe=a("strong"),z8o=o("tapas"),W8o=o(" \u2014 "),WD=a("a"),Q8o=o("TapasForMaskedLM"),H8o=o(" (TAPAS model)"),U8o=l(),v1=a("li"),mfe=a("strong"),J8o=o("wav2vec2"),Y8o=o(" \u2014 "),gfe=a("code"),K8o=o("Wav2Vec2ForMaskedLM"),Z8o=o(" (Wav2Vec2 model)"),e9o=l(),F1=a("li"),hfe=a("strong"),o9o=o("xlm"),r9o=o(" \u2014 "),QD=a("a"),t9o=o("XLMWithLMHeadModel"),a9o=o(" (XLM model)"),n9o=l(),T1=a("li"),pfe=a("strong"),s9o=o("xlm-roberta"),l9o=o(" \u2014 "),HD=a("a"),i9o=o("XLMRobertaForMaskedLM"),d9o=o(" (XLM-RoBERTa model)"),c9o=l(),M1=a("li"),_fe=a("strong"),f9o=o("xlm-roberta-xl"),m9o=o(" \u2014 "),UD=a("a"),g9o=o("XLMRobertaXLForMaskedLM"),h9o=o(" (XLM-RoBERTa-XL model)"),p9o=l(),E1=a("li"),ufe=a("strong"),_9o=o("yoso"),u9o=o(" \u2014 "),JD=a("a"),b9o=o("YosoForMaskedLM"),v9o=o(" (YOSO model)"),F9o=l(),C1=a("p"),T9o=o("The model is set in evaluation mode by default using "),bfe=a("code"),M9o=o("model.eval()"),E9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),C9o=o("model.train()"),w9o=l(),F(w1.$$.fragment),jqe=l(),Ni=a("h2"),A1=a("a"),Ffe=a("span"),F(Cy.$$.fragment),A9o=l(),Tfe=a("span"),y9o=o("AutoModelForSeq2SeqLM"),Dqe=l(),So=a("div"),F(wy.$$.fragment),L9o=l(),qi=a("p"),x9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YD=a("a"),$9o=o("from_pretrained()"),k9o=o(" class method or the "),KD=a("a"),S9o=o("from_config()"),R9o=o(` class
method.`),P9o=l(),Ay=a("p"),B9o=o("This class cannot be instantiated directly using "),Mfe=a("code"),I9o=o("__init__()"),N9o=o(" (throws an error)."),q9o=l(),lt=a("div"),F(yy.$$.fragment),j9o=l(),Efe=a("p"),D9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G9o=l(),ji=a("p"),O9o=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),V9o=o("not"),X9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),z9o=o("from_pretrained()"),W9o=o(" to load the model weights."),Q9o=l(),F(y1.$$.fragment),H9o=l(),eo=a("div"),F(Ly.$$.fragment),U9o=l(),wfe=a("p"),J9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y9o=l(),Sa=a("p"),K9o=o("The model class to instantiate is selected based on the "),Afe=a("code"),Z9o=o("model_type"),exo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),txo=o("pretrained_model_name_or_path"),axo=o(":"),nxo=l(),_e=a("ul"),L1=a("li"),xfe=a("strong"),sxo=o("bart"),lxo=o(" \u2014 "),eG=a("a"),ixo=o("BartForConditionalGeneration"),dxo=o(" (BART model)"),cxo=l(),x1=a("li"),$fe=a("strong"),fxo=o("bigbird_pegasus"),mxo=o(" \u2014 "),oG=a("a"),gxo=o("BigBirdPegasusForConditionalGeneration"),hxo=o(" (BigBirdPegasus model)"),pxo=l(),$1=a("li"),kfe=a("strong"),_xo=o("blenderbot"),uxo=o(" \u2014 "),rG=a("a"),bxo=o("BlenderbotForConditionalGeneration"),vxo=o(" (Blenderbot model)"),Fxo=l(),k1=a("li"),Sfe=a("strong"),Txo=o("blenderbot-small"),Mxo=o(" \u2014 "),tG=a("a"),Exo=o("BlenderbotSmallForConditionalGeneration"),Cxo=o(" (BlenderbotSmall model)"),wxo=l(),S1=a("li"),Rfe=a("strong"),Axo=o("encoder-decoder"),yxo=o(" \u2014 "),aG=a("a"),Lxo=o("EncoderDecoderModel"),xxo=o(" (Encoder decoder model)"),$xo=l(),R1=a("li"),Pfe=a("strong"),kxo=o("fsmt"),Sxo=o(" \u2014 "),nG=a("a"),Rxo=o("FSMTForConditionalGeneration"),Pxo=o(" (FairSeq Machine-Translation model)"),Bxo=l(),P1=a("li"),Bfe=a("strong"),Ixo=o("led"),Nxo=o(" \u2014 "),sG=a("a"),qxo=o("LEDForConditionalGeneration"),jxo=o(" (LED model)"),Dxo=l(),B1=a("li"),Ife=a("strong"),Gxo=o("m2m_100"),Oxo=o(" \u2014 "),lG=a("a"),Vxo=o("M2M100ForConditionalGeneration"),Xxo=o(" (M2M100 model)"),zxo=l(),I1=a("li"),Nfe=a("strong"),Wxo=o("marian"),Qxo=o(" \u2014 "),iG=a("a"),Hxo=o("MarianMTModel"),Uxo=o(" (Marian model)"),Jxo=l(),N1=a("li"),qfe=a("strong"),Yxo=o("mbart"),Kxo=o(" \u2014 "),dG=a("a"),Zxo=o("MBartForConditionalGeneration"),e$o=o(" (mBART model)"),o$o=l(),q1=a("li"),jfe=a("strong"),r$o=o("mt5"),t$o=o(" \u2014 "),cG=a("a"),a$o=o("MT5ForConditionalGeneration"),n$o=o(" (mT5 model)"),s$o=l(),j1=a("li"),Dfe=a("strong"),l$o=o("pegasus"),i$o=o(" \u2014 "),fG=a("a"),d$o=o("PegasusForConditionalGeneration"),c$o=o(" (Pegasus model)"),f$o=l(),D1=a("li"),Gfe=a("strong"),m$o=o("plbart"),g$o=o(" \u2014 "),mG=a("a"),h$o=o("PLBartForConditionalGeneration"),p$o=o(" (PLBart model)"),_$o=l(),G1=a("li"),Ofe=a("strong"),u$o=o("prophetnet"),b$o=o(" \u2014 "),gG=a("a"),v$o=o("ProphetNetForConditionalGeneration"),F$o=o(" (ProphetNet model)"),T$o=l(),O1=a("li"),Vfe=a("strong"),M$o=o("t5"),E$o=o(" \u2014 "),hG=a("a"),C$o=o("T5ForConditionalGeneration"),w$o=o(" (T5 model)"),A$o=l(),V1=a("li"),Xfe=a("strong"),y$o=o("xlm-prophetnet"),L$o=o(" \u2014 "),pG=a("a"),x$o=o("XLMProphetNetForConditionalGeneration"),$$o=o(" (XLMProphetNet model)"),k$o=l(),X1=a("p"),S$o=o("The model is set in evaluation mode by default using "),zfe=a("code"),R$o=o("model.eval()"),P$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),B$o=o("model.train()"),I$o=l(),F(z1.$$.fragment),Gqe=l(),Di=a("h2"),W1=a("a"),Qfe=a("span"),F(xy.$$.fragment),N$o=l(),Hfe=a("span"),q$o=o("AutoModelForSequenceClassification"),Oqe=l(),Ro=a("div"),F($y.$$.fragment),j$o=l(),Gi=a("p"),D$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_G=a("a"),G$o=o("from_pretrained()"),O$o=o(" class method or the "),uG=a("a"),V$o=o("from_config()"),X$o=o(` class
method.`),z$o=l(),ky=a("p"),W$o=o("This class cannot be instantiated directly using "),Ufe=a("code"),Q$o=o("__init__()"),H$o=o(" (throws an error)."),U$o=l(),it=a("div"),F(Sy.$$.fragment),J$o=l(),Jfe=a("p"),Y$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K$o=l(),Oi=a("p"),Z$o=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),eko=o("not"),oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),rko=o("from_pretrained()"),tko=o(" to load the model weights."),ako=l(),F(Q1.$$.fragment),nko=l(),oo=a("div"),F(Ry.$$.fragment),sko=l(),Kfe=a("p"),lko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iko=l(),Ra=a("p"),dko=o("The model class to instantiate is selected based on the "),Zfe=a("code"),cko=o("model_type"),fko=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),hko=o("pretrained_model_name_or_path"),pko=o(":"),_ko=l(),N=a("ul"),H1=a("li"),rme=a("strong"),uko=o("albert"),bko=o(" \u2014 "),vG=a("a"),vko=o("AlbertForSequenceClassification"),Fko=o(" (ALBERT model)"),Tko=l(),U1=a("li"),tme=a("strong"),Mko=o("bart"),Eko=o(" \u2014 "),FG=a("a"),Cko=o("BartForSequenceClassification"),wko=o(" (BART model)"),Ako=l(),J1=a("li"),ame=a("strong"),yko=o("bert"),Lko=o(" \u2014 "),TG=a("a"),xko=o("BertForSequenceClassification"),$ko=o(" (BERT model)"),kko=l(),Y1=a("li"),nme=a("strong"),Sko=o("big_bird"),Rko=o(" \u2014 "),MG=a("a"),Pko=o("BigBirdForSequenceClassification"),Bko=o(" (BigBird model)"),Iko=l(),K1=a("li"),sme=a("strong"),Nko=o("bigbird_pegasus"),qko=o(" \u2014 "),EG=a("a"),jko=o("BigBirdPegasusForSequenceClassification"),Dko=o(" (BigBirdPegasus model)"),Gko=l(),Z1=a("li"),lme=a("strong"),Oko=o("camembert"),Vko=o(" \u2014 "),CG=a("a"),Xko=o("CamembertForSequenceClassification"),zko=o(" (CamemBERT model)"),Wko=l(),e7=a("li"),ime=a("strong"),Qko=o("canine"),Hko=o(" \u2014 "),wG=a("a"),Uko=o("CanineForSequenceClassification"),Jko=o(" (Canine model)"),Yko=l(),o7=a("li"),dme=a("strong"),Kko=o("convbert"),Zko=o(" \u2014 "),AG=a("a"),eSo=o("ConvBertForSequenceClassification"),oSo=o(" (ConvBERT model)"),rSo=l(),r7=a("li"),cme=a("strong"),tSo=o("ctrl"),aSo=o(" \u2014 "),yG=a("a"),nSo=o("CTRLForSequenceClassification"),sSo=o(" (CTRL model)"),lSo=l(),t7=a("li"),fme=a("strong"),iSo=o("data2vec-text"),dSo=o(" \u2014 "),LG=a("a"),cSo=o("Data2VecTextForSequenceClassification"),fSo=o(" (Data2VecText model)"),mSo=l(),a7=a("li"),mme=a("strong"),gSo=o("deberta"),hSo=o(" \u2014 "),xG=a("a"),pSo=o("DebertaForSequenceClassification"),_So=o(" (DeBERTa model)"),uSo=l(),n7=a("li"),gme=a("strong"),bSo=o("deberta-v2"),vSo=o(" \u2014 "),$G=a("a"),FSo=o("DebertaV2ForSequenceClassification"),TSo=o(" (DeBERTa-v2 model)"),MSo=l(),s7=a("li"),hme=a("strong"),ESo=o("distilbert"),CSo=o(" \u2014 "),kG=a("a"),wSo=o("DistilBertForSequenceClassification"),ASo=o(" (DistilBERT model)"),ySo=l(),l7=a("li"),pme=a("strong"),LSo=o("electra"),xSo=o(" \u2014 "),SG=a("a"),$So=o("ElectraForSequenceClassification"),kSo=o(" (ELECTRA model)"),SSo=l(),i7=a("li"),_me=a("strong"),RSo=o("flaubert"),PSo=o(" \u2014 "),RG=a("a"),BSo=o("FlaubertForSequenceClassification"),ISo=o(" (FlauBERT model)"),NSo=l(),d7=a("li"),ume=a("strong"),qSo=o("fnet"),jSo=o(" \u2014 "),PG=a("a"),DSo=o("FNetForSequenceClassification"),GSo=o(" (FNet model)"),OSo=l(),c7=a("li"),bme=a("strong"),VSo=o("funnel"),XSo=o(" \u2014 "),BG=a("a"),zSo=o("FunnelForSequenceClassification"),WSo=o(" (Funnel Transformer model)"),QSo=l(),f7=a("li"),vme=a("strong"),HSo=o("gpt2"),USo=o(" \u2014 "),IG=a("a"),JSo=o("GPT2ForSequenceClassification"),YSo=o(" (OpenAI GPT-2 model)"),KSo=l(),m7=a("li"),Fme=a("strong"),ZSo=o("gpt_neo"),eRo=o(" \u2014 "),NG=a("a"),oRo=o("GPTNeoForSequenceClassification"),rRo=o(" (GPT Neo model)"),tRo=l(),g7=a("li"),Tme=a("strong"),aRo=o("gptj"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("GPTJForSequenceClassification"),lRo=o(" (GPT-J model)"),iRo=l(),h7=a("li"),Mme=a("strong"),dRo=o("ibert"),cRo=o(" \u2014 "),jG=a("a"),fRo=o("IBertForSequenceClassification"),mRo=o(" (I-BERT model)"),gRo=l(),p7=a("li"),Eme=a("strong"),hRo=o("layoutlm"),pRo=o(" \u2014 "),DG=a("a"),_Ro=o("LayoutLMForSequenceClassification"),uRo=o(" (LayoutLM model)"),bRo=l(),_7=a("li"),Cme=a("strong"),vRo=o("layoutlmv2"),FRo=o(" \u2014 "),GG=a("a"),TRo=o("LayoutLMv2ForSequenceClassification"),MRo=o(" (LayoutLMv2 model)"),ERo=l(),u7=a("li"),wme=a("strong"),CRo=o("layoutlmv3"),wRo=o(" \u2014 "),OG=a("a"),ARo=o("LayoutLMv3ForSequenceClassification"),yRo=o(" (LayoutLMv3 model)"),LRo=l(),b7=a("li"),Ame=a("strong"),xRo=o("led"),$Ro=o(" \u2014 "),VG=a("a"),kRo=o("LEDForSequenceClassification"),SRo=o(" (LED model)"),RRo=l(),v7=a("li"),yme=a("strong"),PRo=o("longformer"),BRo=o(" \u2014 "),XG=a("a"),IRo=o("LongformerForSequenceClassification"),NRo=o(" (Longformer model)"),qRo=l(),F7=a("li"),Lme=a("strong"),jRo=o("mbart"),DRo=o(" \u2014 "),zG=a("a"),GRo=o("MBartForSequenceClassification"),ORo=o(" (mBART model)"),VRo=l(),T7=a("li"),xme=a("strong"),XRo=o("megatron-bert"),zRo=o(" \u2014 "),WG=a("a"),WRo=o("MegatronBertForSequenceClassification"),QRo=o(" (MegatronBert model)"),HRo=l(),M7=a("li"),$me=a("strong"),URo=o("mobilebert"),JRo=o(" \u2014 "),QG=a("a"),YRo=o("MobileBertForSequenceClassification"),KRo=o(" (MobileBERT model)"),ZRo=l(),E7=a("li"),kme=a("strong"),ePo=o("mpnet"),oPo=o(" \u2014 "),HG=a("a"),rPo=o("MPNetForSequenceClassification"),tPo=o(" (MPNet model)"),aPo=l(),C7=a("li"),Sme=a("strong"),nPo=o("nystromformer"),sPo=o(" \u2014 "),UG=a("a"),lPo=o("NystromformerForSequenceClassification"),iPo=o(" (Nystromformer model)"),dPo=l(),w7=a("li"),Rme=a("strong"),cPo=o("openai-gpt"),fPo=o(" \u2014 "),JG=a("a"),mPo=o("OpenAIGPTForSequenceClassification"),gPo=o(" (OpenAI GPT model)"),hPo=l(),A7=a("li"),Pme=a("strong"),pPo=o("perceiver"),_Po=o(" \u2014 "),YG=a("a"),uPo=o("PerceiverForSequenceClassification"),bPo=o(" (Perceiver model)"),vPo=l(),y7=a("li"),Bme=a("strong"),FPo=o("plbart"),TPo=o(" \u2014 "),KG=a("a"),MPo=o("PLBartForSequenceClassification"),EPo=o(" (PLBart model)"),CPo=l(),L7=a("li"),Ime=a("strong"),wPo=o("qdqbert"),APo=o(" \u2014 "),ZG=a("a"),yPo=o("QDQBertForSequenceClassification"),LPo=o(" (QDQBert model)"),xPo=l(),x7=a("li"),Nme=a("strong"),$Po=o("reformer"),kPo=o(" \u2014 "),eO=a("a"),SPo=o("ReformerForSequenceClassification"),RPo=o(" (Reformer model)"),PPo=l(),$7=a("li"),qme=a("strong"),BPo=o("rembert"),IPo=o(" \u2014 "),oO=a("a"),NPo=o("RemBertForSequenceClassification"),qPo=o(" (RemBERT model)"),jPo=l(),k7=a("li"),jme=a("strong"),DPo=o("roberta"),GPo=o(" \u2014 "),rO=a("a"),OPo=o("RobertaForSequenceClassification"),VPo=o(" (RoBERTa model)"),XPo=l(),S7=a("li"),Dme=a("strong"),zPo=o("roformer"),WPo=o(" \u2014 "),tO=a("a"),QPo=o("RoFormerForSequenceClassification"),HPo=o(" (RoFormer model)"),UPo=l(),R7=a("li"),Gme=a("strong"),JPo=o("squeezebert"),YPo=o(" \u2014 "),aO=a("a"),KPo=o("SqueezeBertForSequenceClassification"),ZPo=o(" (SqueezeBERT model)"),eBo=l(),P7=a("li"),Ome=a("strong"),oBo=o("tapas"),rBo=o(" \u2014 "),nO=a("a"),tBo=o("TapasForSequenceClassification"),aBo=o(" (TAPAS model)"),nBo=l(),B7=a("li"),Vme=a("strong"),sBo=o("transfo-xl"),lBo=o(" \u2014 "),sO=a("a"),iBo=o("TransfoXLForSequenceClassification"),dBo=o(" (Transformer-XL model)"),cBo=l(),I7=a("li"),Xme=a("strong"),fBo=o("xlm"),mBo=o(" \u2014 "),lO=a("a"),gBo=o("XLMForSequenceClassification"),hBo=o(" (XLM model)"),pBo=l(),N7=a("li"),zme=a("strong"),_Bo=o("xlm-roberta"),uBo=o(" \u2014 "),iO=a("a"),bBo=o("XLMRobertaForSequenceClassification"),vBo=o(" (XLM-RoBERTa model)"),FBo=l(),q7=a("li"),Wme=a("strong"),TBo=o("xlm-roberta-xl"),MBo=o(" \u2014 "),dO=a("a"),EBo=o("XLMRobertaXLForSequenceClassification"),CBo=o(" (XLM-RoBERTa-XL model)"),wBo=l(),j7=a("li"),Qme=a("strong"),ABo=o("xlnet"),yBo=o(" \u2014 "),cO=a("a"),LBo=o("XLNetForSequenceClassification"),xBo=o(" (XLNet model)"),$Bo=l(),D7=a("li"),Hme=a("strong"),kBo=o("yoso"),SBo=o(" \u2014 "),fO=a("a"),RBo=o("YosoForSequenceClassification"),PBo=o(" (YOSO model)"),BBo=l(),G7=a("p"),IBo=o("The model is set in evaluation mode by default using "),Ume=a("code"),NBo=o("model.eval()"),qBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=a("code"),jBo=o("model.train()"),DBo=l(),F(O7.$$.fragment),Vqe=l(),Vi=a("h2"),V7=a("a"),Yme=a("span"),F(Py.$$.fragment),GBo=l(),Kme=a("span"),OBo=o("AutoModelForMultipleChoice"),Xqe=l(),Po=a("div"),F(By.$$.fragment),VBo=l(),Xi=a("p"),XBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mO=a("a"),zBo=o("from_pretrained()"),WBo=o(" class method or the "),gO=a("a"),QBo=o("from_config()"),HBo=o(` class
method.`),UBo=l(),Iy=a("p"),JBo=o("This class cannot be instantiated directly using "),Zme=a("code"),YBo=o("__init__()"),KBo=o(" (throws an error)."),ZBo=l(),dt=a("div"),F(Ny.$$.fragment),eIo=l(),ege=a("p"),oIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rIo=l(),zi=a("p"),tIo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),aIo=o("not"),nIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),sIo=o("from_pretrained()"),lIo=o(" to load the model weights."),iIo=l(),F(X7.$$.fragment),dIo=l(),ro=a("div"),F(qy.$$.fragment),cIo=l(),rge=a("p"),fIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mIo=l(),Pa=a("p"),gIo=o("The model class to instantiate is selected based on the "),tge=a("code"),hIo=o("model_type"),pIo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),_Io=o("pretrained_model_name_or_path"),uIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(":"),FIo=l(),K=a("ul"),z7=a("li"),sge=a("strong"),TIo=o("albert"),MIo=o(" \u2014 "),pO=a("a"),EIo=o("AlbertForMultipleChoice"),CIo=o(" (ALBERT model)"),wIo=l(),W7=a("li"),lge=a("strong"),AIo=o("bert"),yIo=o(" \u2014 "),_O=a("a"),LIo=o("BertForMultipleChoice"),xIo=o(" (BERT model)"),$Io=l(),Q7=a("li"),ige=a("strong"),kIo=o("big_bird"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("BigBirdForMultipleChoice"),PIo=o(" (BigBird model)"),BIo=l(),H7=a("li"),dge=a("strong"),IIo=o("camembert"),NIo=o(" \u2014 "),bO=a("a"),qIo=o("CamembertForMultipleChoice"),jIo=o(" (CamemBERT model)"),DIo=l(),U7=a("li"),cge=a("strong"),GIo=o("canine"),OIo=o(" \u2014 "),vO=a("a"),VIo=o("CanineForMultipleChoice"),XIo=o(" (Canine model)"),zIo=l(),J7=a("li"),fge=a("strong"),WIo=o("convbert"),QIo=o(" \u2014 "),FO=a("a"),HIo=o("ConvBertForMultipleChoice"),UIo=o(" (ConvBERT model)"),JIo=l(),Y7=a("li"),mge=a("strong"),YIo=o("data2vec-text"),KIo=o(" \u2014 "),TO=a("a"),ZIo=o("Data2VecTextForMultipleChoice"),eNo=o(" (Data2VecText model)"),oNo=l(),K7=a("li"),gge=a("strong"),rNo=o("deberta-v2"),tNo=o(" \u2014 "),MO=a("a"),aNo=o("DebertaV2ForMultipleChoice"),nNo=o(" (DeBERTa-v2 model)"),sNo=l(),Z7=a("li"),hge=a("strong"),lNo=o("distilbert"),iNo=o(" \u2014 "),EO=a("a"),dNo=o("DistilBertForMultipleChoice"),cNo=o(" (DistilBERT model)"),fNo=l(),eb=a("li"),pge=a("strong"),mNo=o("electra"),gNo=o(" \u2014 "),CO=a("a"),hNo=o("ElectraForMultipleChoice"),pNo=o(" (ELECTRA model)"),_No=l(),ob=a("li"),_ge=a("strong"),uNo=o("flaubert"),bNo=o(" \u2014 "),wO=a("a"),vNo=o("FlaubertForMultipleChoice"),FNo=o(" (FlauBERT model)"),TNo=l(),rb=a("li"),uge=a("strong"),MNo=o("fnet"),ENo=o(" \u2014 "),AO=a("a"),CNo=o("FNetForMultipleChoice"),wNo=o(" (FNet model)"),ANo=l(),tb=a("li"),bge=a("strong"),yNo=o("funnel"),LNo=o(" \u2014 "),yO=a("a"),xNo=o("FunnelForMultipleChoice"),$No=o(" (Funnel Transformer model)"),kNo=l(),ab=a("li"),vge=a("strong"),SNo=o("ibert"),RNo=o(" \u2014 "),LO=a("a"),PNo=o("IBertForMultipleChoice"),BNo=o(" (I-BERT model)"),INo=l(),nb=a("li"),Fge=a("strong"),NNo=o("longformer"),qNo=o(" \u2014 "),xO=a("a"),jNo=o("LongformerForMultipleChoice"),DNo=o(" (Longformer model)"),GNo=l(),sb=a("li"),Tge=a("strong"),ONo=o("megatron-bert"),VNo=o(" \u2014 "),$O=a("a"),XNo=o("MegatronBertForMultipleChoice"),zNo=o(" (MegatronBert model)"),WNo=l(),lb=a("li"),Mge=a("strong"),QNo=o("mobilebert"),HNo=o(" \u2014 "),kO=a("a"),UNo=o("MobileBertForMultipleChoice"),JNo=o(" (MobileBERT model)"),YNo=l(),ib=a("li"),Ege=a("strong"),KNo=o("mpnet"),ZNo=o(" \u2014 "),SO=a("a"),eqo=o("MPNetForMultipleChoice"),oqo=o(" (MPNet model)"),rqo=l(),db=a("li"),Cge=a("strong"),tqo=o("nystromformer"),aqo=o(" \u2014 "),RO=a("a"),nqo=o("NystromformerForMultipleChoice"),sqo=o(" (Nystromformer model)"),lqo=l(),cb=a("li"),wge=a("strong"),iqo=o("qdqbert"),dqo=o(" \u2014 "),PO=a("a"),cqo=o("QDQBertForMultipleChoice"),fqo=o(" (QDQBert model)"),mqo=l(),fb=a("li"),Age=a("strong"),gqo=o("rembert"),hqo=o(" \u2014 "),BO=a("a"),pqo=o("RemBertForMultipleChoice"),_qo=o(" (RemBERT model)"),uqo=l(),mb=a("li"),yge=a("strong"),bqo=o("roberta"),vqo=o(" \u2014 "),IO=a("a"),Fqo=o("RobertaForMultipleChoice"),Tqo=o(" (RoBERTa model)"),Mqo=l(),gb=a("li"),Lge=a("strong"),Eqo=o("roformer"),Cqo=o(" \u2014 "),NO=a("a"),wqo=o("RoFormerForMultipleChoice"),Aqo=o(" (RoFormer model)"),yqo=l(),hb=a("li"),xge=a("strong"),Lqo=o("squeezebert"),xqo=o(" \u2014 "),qO=a("a"),$qo=o("SqueezeBertForMultipleChoice"),kqo=o(" (SqueezeBERT model)"),Sqo=l(),pb=a("li"),$ge=a("strong"),Rqo=o("xlm"),Pqo=o(" \u2014 "),jO=a("a"),Bqo=o("XLMForMultipleChoice"),Iqo=o(" (XLM model)"),Nqo=l(),_b=a("li"),kge=a("strong"),qqo=o("xlm-roberta"),jqo=o(" \u2014 "),DO=a("a"),Dqo=o("XLMRobertaForMultipleChoice"),Gqo=o(" (XLM-RoBERTa model)"),Oqo=l(),ub=a("li"),Sge=a("strong"),Vqo=o("xlm-roberta-xl"),Xqo=o(" \u2014 "),GO=a("a"),zqo=o("XLMRobertaXLForMultipleChoice"),Wqo=o(" (XLM-RoBERTa-XL model)"),Qqo=l(),bb=a("li"),Rge=a("strong"),Hqo=o("xlnet"),Uqo=o(" \u2014 "),OO=a("a"),Jqo=o("XLNetForMultipleChoice"),Yqo=o(" (XLNet model)"),Kqo=l(),vb=a("li"),Pge=a("strong"),Zqo=o("yoso"),ejo=o(" \u2014 "),VO=a("a"),ojo=o("YosoForMultipleChoice"),rjo=o(" (YOSO model)"),tjo=l(),Fb=a("p"),ajo=o("The model is set in evaluation mode by default using "),Bge=a("code"),njo=o("model.eval()"),sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),ljo=o("model.train()"),ijo=l(),F(Tb.$$.fragment),zqe=l(),Wi=a("h2"),Mb=a("a"),Nge=a("span"),F(jy.$$.fragment),djo=l(),qge=a("span"),cjo=o("AutoModelForNextSentencePrediction"),Wqe=l(),Bo=a("div"),F(Dy.$$.fragment),fjo=l(),Qi=a("p"),mjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XO=a("a"),gjo=o("from_pretrained()"),hjo=o(" class method or the "),zO=a("a"),pjo=o("from_config()"),_jo=o(` class
method.`),ujo=l(),Gy=a("p"),bjo=o("This class cannot be instantiated directly using "),jge=a("code"),vjo=o("__init__()"),Fjo=o(" (throws an error)."),Tjo=l(),ct=a("div"),F(Oy.$$.fragment),Mjo=l(),Dge=a("p"),Ejo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Cjo=l(),Hi=a("p"),wjo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),Ajo=o("not"),yjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),Ljo=o("from_pretrained()"),xjo=o(" to load the model weights."),$jo=l(),F(Eb.$$.fragment),kjo=l(),to=a("div"),F(Vy.$$.fragment),Sjo=l(),Oge=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pjo=l(),Ba=a("p"),Bjo=o("The model class to instantiate is selected based on the "),Vge=a("code"),Ijo=o("model_type"),Njo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),qjo=o("pretrained_model_name_or_path"),jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),Djo=o("pretrained_model_name_or_path"),Gjo=o(":"),Ojo=l(),Yr=a("ul"),Cb=a("li"),Wge=a("strong"),Vjo=o("bert"),Xjo=o(" \u2014 "),QO=a("a"),zjo=o("BertForNextSentencePrediction"),Wjo=o(" (BERT model)"),Qjo=l(),wb=a("li"),Qge=a("strong"),Hjo=o("fnet"),Ujo=o(" \u2014 "),HO=a("a"),Jjo=o("FNetForNextSentencePrediction"),Yjo=o(" (FNet model)"),Kjo=l(),Ab=a("li"),Hge=a("strong"),Zjo=o("megatron-bert"),eDo=o(" \u2014 "),UO=a("a"),oDo=o("MegatronBertForNextSentencePrediction"),rDo=o(" (MegatronBert model)"),tDo=l(),yb=a("li"),Uge=a("strong"),aDo=o("mobilebert"),nDo=o(" \u2014 "),JO=a("a"),sDo=o("MobileBertForNextSentencePrediction"),lDo=o(" (MobileBERT model)"),iDo=l(),Lb=a("li"),Jge=a("strong"),dDo=o("qdqbert"),cDo=o(" \u2014 "),YO=a("a"),fDo=o("QDQBertForNextSentencePrediction"),mDo=o(" (QDQBert model)"),gDo=l(),xb=a("p"),hDo=o("The model is set in evaluation mode by default using "),Yge=a("code"),pDo=o("model.eval()"),_Do=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),uDo=o("model.train()"),bDo=l(),F($b.$$.fragment),Qqe=l(),Ui=a("h2"),kb=a("a"),Zge=a("span"),F(Xy.$$.fragment),vDo=l(),ehe=a("span"),FDo=o("AutoModelForTokenClassification"),Hqe=l(),Io=a("div"),F(zy.$$.fragment),TDo=l(),Ji=a("p"),MDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KO=a("a"),EDo=o("from_pretrained()"),CDo=o(" class method or the "),ZO=a("a"),wDo=o("from_config()"),ADo=o(` class
method.`),yDo=l(),Wy=a("p"),LDo=o("This class cannot be instantiated directly using "),ohe=a("code"),xDo=o("__init__()"),$Do=o(" (throws an error)."),kDo=l(),ft=a("div"),F(Qy.$$.fragment),SDo=l(),rhe=a("p"),RDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PDo=l(),Yi=a("p"),BDo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),IDo=o("not"),NDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),qDo=o("from_pretrained()"),jDo=o(" to load the model weights."),DDo=l(),F(Sb.$$.fragment),GDo=l(),ao=a("div"),F(Hy.$$.fragment),ODo=l(),ahe=a("p"),VDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XDo=l(),Ia=a("p"),zDo=o("The model class to instantiate is selected based on the "),nhe=a("code"),WDo=o("model_type"),QDo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(":"),KDo=l(),H=a("ul"),Rb=a("li"),ihe=a("strong"),ZDo=o("albert"),eGo=o(" \u2014 "),oV=a("a"),oGo=o("AlbertForTokenClassification"),rGo=o(" (ALBERT model)"),tGo=l(),Pb=a("li"),dhe=a("strong"),aGo=o("bert"),nGo=o(" \u2014 "),rV=a("a"),sGo=o("BertForTokenClassification"),lGo=o(" (BERT model)"),iGo=l(),Bb=a("li"),che=a("strong"),dGo=o("big_bird"),cGo=o(" \u2014 "),tV=a("a"),fGo=o("BigBirdForTokenClassification"),mGo=o(" (BigBird model)"),gGo=l(),Ib=a("li"),fhe=a("strong"),hGo=o("camembert"),pGo=o(" \u2014 "),aV=a("a"),_Go=o("CamembertForTokenClassification"),uGo=o(" (CamemBERT model)"),bGo=l(),Nb=a("li"),mhe=a("strong"),vGo=o("canine"),FGo=o(" \u2014 "),nV=a("a"),TGo=o("CanineForTokenClassification"),MGo=o(" (Canine model)"),EGo=l(),qb=a("li"),ghe=a("strong"),CGo=o("convbert"),wGo=o(" \u2014 "),sV=a("a"),AGo=o("ConvBertForTokenClassification"),yGo=o(" (ConvBERT model)"),LGo=l(),jb=a("li"),hhe=a("strong"),xGo=o("data2vec-text"),$Go=o(" \u2014 "),lV=a("a"),kGo=o("Data2VecTextForTokenClassification"),SGo=o(" (Data2VecText model)"),RGo=l(),Db=a("li"),phe=a("strong"),PGo=o("deberta"),BGo=o(" \u2014 "),iV=a("a"),IGo=o("DebertaForTokenClassification"),NGo=o(" (DeBERTa model)"),qGo=l(),Gb=a("li"),_he=a("strong"),jGo=o("deberta-v2"),DGo=o(" \u2014 "),dV=a("a"),GGo=o("DebertaV2ForTokenClassification"),OGo=o(" (DeBERTa-v2 model)"),VGo=l(),Ob=a("li"),uhe=a("strong"),XGo=o("distilbert"),zGo=o(" \u2014 "),cV=a("a"),WGo=o("DistilBertForTokenClassification"),QGo=o(" (DistilBERT model)"),HGo=l(),Vb=a("li"),bhe=a("strong"),UGo=o("electra"),JGo=o(" \u2014 "),fV=a("a"),YGo=o("ElectraForTokenClassification"),KGo=o(" (ELECTRA model)"),ZGo=l(),Xb=a("li"),vhe=a("strong"),eOo=o("flaubert"),oOo=o(" \u2014 "),mV=a("a"),rOo=o("FlaubertForTokenClassification"),tOo=o(" (FlauBERT model)"),aOo=l(),zb=a("li"),Fhe=a("strong"),nOo=o("fnet"),sOo=o(" \u2014 "),gV=a("a"),lOo=o("FNetForTokenClassification"),iOo=o(" (FNet model)"),dOo=l(),Wb=a("li"),The=a("strong"),cOo=o("funnel"),fOo=o(" \u2014 "),hV=a("a"),mOo=o("FunnelForTokenClassification"),gOo=o(" (Funnel Transformer model)"),hOo=l(),Qb=a("li"),Mhe=a("strong"),pOo=o("gpt2"),_Oo=o(" \u2014 "),pV=a("a"),uOo=o("GPT2ForTokenClassification"),bOo=o(" (OpenAI GPT-2 model)"),vOo=l(),Hb=a("li"),Ehe=a("strong"),FOo=o("ibert"),TOo=o(" \u2014 "),_V=a("a"),MOo=o("IBertForTokenClassification"),EOo=o(" (I-BERT model)"),COo=l(),Ub=a("li"),Che=a("strong"),wOo=o("layoutlm"),AOo=o(" \u2014 "),uV=a("a"),yOo=o("LayoutLMForTokenClassification"),LOo=o(" (LayoutLM model)"),xOo=l(),Jb=a("li"),whe=a("strong"),$Oo=o("layoutlmv2"),kOo=o(" \u2014 "),bV=a("a"),SOo=o("LayoutLMv2ForTokenClassification"),ROo=o(" (LayoutLMv2 model)"),POo=l(),Yb=a("li"),Ahe=a("strong"),BOo=o("layoutlmv3"),IOo=o(" \u2014 "),vV=a("a"),NOo=o("LayoutLMv3ForTokenClassification"),qOo=o(" (LayoutLMv3 model)"),jOo=l(),Kb=a("li"),yhe=a("strong"),DOo=o("longformer"),GOo=o(" \u2014 "),FV=a("a"),OOo=o("LongformerForTokenClassification"),VOo=o(" (Longformer model)"),XOo=l(),Zb=a("li"),Lhe=a("strong"),zOo=o("megatron-bert"),WOo=o(" \u2014 "),TV=a("a"),QOo=o("MegatronBertForTokenClassification"),HOo=o(" (MegatronBert model)"),UOo=l(),e2=a("li"),xhe=a("strong"),JOo=o("mobilebert"),YOo=o(" \u2014 "),MV=a("a"),KOo=o("MobileBertForTokenClassification"),ZOo=o(" (MobileBERT model)"),eVo=l(),o2=a("li"),$he=a("strong"),oVo=o("mpnet"),rVo=o(" \u2014 "),EV=a("a"),tVo=o("MPNetForTokenClassification"),aVo=o(" (MPNet model)"),nVo=l(),r2=a("li"),khe=a("strong"),sVo=o("nystromformer"),lVo=o(" \u2014 "),CV=a("a"),iVo=o("NystromformerForTokenClassification"),dVo=o(" (Nystromformer model)"),cVo=l(),t2=a("li"),She=a("strong"),fVo=o("qdqbert"),mVo=o(" \u2014 "),wV=a("a"),gVo=o("QDQBertForTokenClassification"),hVo=o(" (QDQBert model)"),pVo=l(),a2=a("li"),Rhe=a("strong"),_Vo=o("rembert"),uVo=o(" \u2014 "),AV=a("a"),bVo=o("RemBertForTokenClassification"),vVo=o(" (RemBERT model)"),FVo=l(),n2=a("li"),Phe=a("strong"),TVo=o("roberta"),MVo=o(" \u2014 "),yV=a("a"),EVo=o("RobertaForTokenClassification"),CVo=o(" (RoBERTa model)"),wVo=l(),s2=a("li"),Bhe=a("strong"),AVo=o("roformer"),yVo=o(" \u2014 "),LV=a("a"),LVo=o("RoFormerForTokenClassification"),xVo=o(" (RoFormer model)"),$Vo=l(),l2=a("li"),Ihe=a("strong"),kVo=o("squeezebert"),SVo=o(" \u2014 "),xV=a("a"),RVo=o("SqueezeBertForTokenClassification"),PVo=o(" (SqueezeBERT model)"),BVo=l(),i2=a("li"),Nhe=a("strong"),IVo=o("xlm"),NVo=o(" \u2014 "),$V=a("a"),qVo=o("XLMForTokenClassification"),jVo=o(" (XLM model)"),DVo=l(),d2=a("li"),qhe=a("strong"),GVo=o("xlm-roberta"),OVo=o(" \u2014 "),kV=a("a"),VVo=o("XLMRobertaForTokenClassification"),XVo=o(" (XLM-RoBERTa model)"),zVo=l(),c2=a("li"),jhe=a("strong"),WVo=o("xlm-roberta-xl"),QVo=o(" \u2014 "),SV=a("a"),HVo=o("XLMRobertaXLForTokenClassification"),UVo=o(" (XLM-RoBERTa-XL model)"),JVo=l(),f2=a("li"),Dhe=a("strong"),YVo=o("xlnet"),KVo=o(" \u2014 "),RV=a("a"),ZVo=o("XLNetForTokenClassification"),eXo=o(" (XLNet model)"),oXo=l(),m2=a("li"),Ghe=a("strong"),rXo=o("yoso"),tXo=o(" \u2014 "),PV=a("a"),aXo=o("YosoForTokenClassification"),nXo=o(" (YOSO model)"),sXo=l(),g2=a("p"),lXo=o("The model is set in evaluation mode by default using "),Ohe=a("code"),iXo=o("model.eval()"),dXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=a("code"),cXo=o("model.train()"),fXo=l(),F(h2.$$.fragment),Uqe=l(),Ki=a("h2"),p2=a("a"),Xhe=a("span"),F(Uy.$$.fragment),mXo=l(),zhe=a("span"),gXo=o("AutoModelForQuestionAnswering"),Jqe=l(),No=a("div"),F(Jy.$$.fragment),hXo=l(),Zi=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BV=a("a"),_Xo=o("from_pretrained()"),uXo=o(" class method or the "),IV=a("a"),bXo=o("from_config()"),vXo=o(` class
method.`),FXo=l(),Yy=a("p"),TXo=o("This class cannot be instantiated directly using "),Whe=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),CXo=l(),mt=a("div"),F(Ky.$$.fragment),wXo=l(),Qhe=a("p"),AXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yXo=l(),ed=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),xXo=o("not"),$Xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),kXo=o("from_pretrained()"),SXo=o(" to load the model weights."),RXo=l(),F(_2.$$.fragment),PXo=l(),no=a("div"),F(Zy.$$.fragment),BXo=l(),Uhe=a("p"),IXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NXo=l(),Na=a("p"),qXo=o("The model class to instantiate is selected based on the "),Jhe=a("code"),jXo=o("model_type"),DXo=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),VXo=o("pretrained_model_name_or_path"),XXo=o(":"),zXo=l(),V=a("ul"),u2=a("li"),Zhe=a("strong"),WXo=o("albert"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("AlbertForQuestionAnswering"),UXo=o(" (ALBERT model)"),JXo=l(),b2=a("li"),epe=a("strong"),YXo=o("bart"),KXo=o(" \u2014 "),jV=a("a"),ZXo=o("BartForQuestionAnswering"),ezo=o(" (BART model)"),ozo=l(),v2=a("li"),ope=a("strong"),rzo=o("bert"),tzo=o(" \u2014 "),DV=a("a"),azo=o("BertForQuestionAnswering"),nzo=o(" (BERT model)"),szo=l(),F2=a("li"),rpe=a("strong"),lzo=o("big_bird"),izo=o(" \u2014 "),GV=a("a"),dzo=o("BigBirdForQuestionAnswering"),czo=o(" (BigBird model)"),fzo=l(),T2=a("li"),tpe=a("strong"),mzo=o("bigbird_pegasus"),gzo=o(" \u2014 "),OV=a("a"),hzo=o("BigBirdPegasusForQuestionAnswering"),pzo=o(" (BigBirdPegasus model)"),_zo=l(),M2=a("li"),ape=a("strong"),uzo=o("camembert"),bzo=o(" \u2014 "),VV=a("a"),vzo=o("CamembertForQuestionAnswering"),Fzo=o(" (CamemBERT model)"),Tzo=l(),E2=a("li"),npe=a("strong"),Mzo=o("canine"),Ezo=o(" \u2014 "),XV=a("a"),Czo=o("CanineForQuestionAnswering"),wzo=o(" (Canine model)"),Azo=l(),C2=a("li"),spe=a("strong"),yzo=o("convbert"),Lzo=o(" \u2014 "),zV=a("a"),xzo=o("ConvBertForQuestionAnswering"),$zo=o(" (ConvBERT model)"),kzo=l(),w2=a("li"),lpe=a("strong"),Szo=o("data2vec-text"),Rzo=o(" \u2014 "),WV=a("a"),Pzo=o("Data2VecTextForQuestionAnswering"),Bzo=o(" (Data2VecText model)"),Izo=l(),A2=a("li"),ipe=a("strong"),Nzo=o("deberta"),qzo=o(" \u2014 "),QV=a("a"),jzo=o("DebertaForQuestionAnswering"),Dzo=o(" (DeBERTa model)"),Gzo=l(),y2=a("li"),dpe=a("strong"),Ozo=o("deberta-v2"),Vzo=o(" \u2014 "),HV=a("a"),Xzo=o("DebertaV2ForQuestionAnswering"),zzo=o(" (DeBERTa-v2 model)"),Wzo=l(),L2=a("li"),cpe=a("strong"),Qzo=o("distilbert"),Hzo=o(" \u2014 "),UV=a("a"),Uzo=o("DistilBertForQuestionAnswering"),Jzo=o(" (DistilBERT model)"),Yzo=l(),x2=a("li"),fpe=a("strong"),Kzo=o("electra"),Zzo=o(" \u2014 "),JV=a("a"),eWo=o("ElectraForQuestionAnswering"),oWo=o(" (ELECTRA model)"),rWo=l(),$2=a("li"),mpe=a("strong"),tWo=o("flaubert"),aWo=o(" \u2014 "),YV=a("a"),nWo=o("FlaubertForQuestionAnsweringSimple"),sWo=o(" (FlauBERT model)"),lWo=l(),k2=a("li"),gpe=a("strong"),iWo=o("fnet"),dWo=o(" \u2014 "),KV=a("a"),cWo=o("FNetForQuestionAnswering"),fWo=o(" (FNet model)"),mWo=l(),S2=a("li"),hpe=a("strong"),gWo=o("funnel"),hWo=o(" \u2014 "),ZV=a("a"),pWo=o("FunnelForQuestionAnswering"),_Wo=o(" (Funnel Transformer model)"),uWo=l(),R2=a("li"),ppe=a("strong"),bWo=o("gptj"),vWo=o(" \u2014 "),eX=a("a"),FWo=o("GPTJForQuestionAnswering"),TWo=o(" (GPT-J model)"),MWo=l(),P2=a("li"),_pe=a("strong"),EWo=o("ibert"),CWo=o(" \u2014 "),oX=a("a"),wWo=o("IBertForQuestionAnswering"),AWo=o(" (I-BERT model)"),yWo=l(),B2=a("li"),upe=a("strong"),LWo=o("layoutlmv2"),xWo=o(" \u2014 "),rX=a("a"),$Wo=o("LayoutLMv2ForQuestionAnswering"),kWo=o(" (LayoutLMv2 model)"),SWo=l(),I2=a("li"),bpe=a("strong"),RWo=o("layoutlmv3"),PWo=o(" \u2014 "),tX=a("a"),BWo=o("LayoutLMv3ForQuestionAnswering"),IWo=o(" (LayoutLMv3 model)"),NWo=l(),N2=a("li"),vpe=a("strong"),qWo=o("led"),jWo=o(" \u2014 "),aX=a("a"),DWo=o("LEDForQuestionAnswering"),GWo=o(" (LED model)"),OWo=l(),q2=a("li"),Fpe=a("strong"),VWo=o("longformer"),XWo=o(" \u2014 "),nX=a("a"),zWo=o("LongformerForQuestionAnswering"),WWo=o(" (Longformer model)"),QWo=l(),j2=a("li"),Tpe=a("strong"),HWo=o("lxmert"),UWo=o(" \u2014 "),sX=a("a"),JWo=o("LxmertForQuestionAnswering"),YWo=o(" (LXMERT model)"),KWo=l(),D2=a("li"),Mpe=a("strong"),ZWo=o("mbart"),eQo=o(" \u2014 "),lX=a("a"),oQo=o("MBartForQuestionAnswering"),rQo=o(" (mBART model)"),tQo=l(),G2=a("li"),Epe=a("strong"),aQo=o("megatron-bert"),nQo=o(" \u2014 "),iX=a("a"),sQo=o("MegatronBertForQuestionAnswering"),lQo=o(" (MegatronBert model)"),iQo=l(),O2=a("li"),Cpe=a("strong"),dQo=o("mobilebert"),cQo=o(" \u2014 "),dX=a("a"),fQo=o("MobileBertForQuestionAnswering"),mQo=o(" (MobileBERT model)"),gQo=l(),V2=a("li"),wpe=a("strong"),hQo=o("mpnet"),pQo=o(" \u2014 "),cX=a("a"),_Qo=o("MPNetForQuestionAnswering"),uQo=o(" (MPNet model)"),bQo=l(),X2=a("li"),Ape=a("strong"),vQo=o("nystromformer"),FQo=o(" \u2014 "),fX=a("a"),TQo=o("NystromformerForQuestionAnswering"),MQo=o(" (Nystromformer model)"),EQo=l(),z2=a("li"),ype=a("strong"),CQo=o("qdqbert"),wQo=o(" \u2014 "),mX=a("a"),AQo=o("QDQBertForQuestionAnswering"),yQo=o(" (QDQBert model)"),LQo=l(),W2=a("li"),Lpe=a("strong"),xQo=o("reformer"),$Qo=o(" \u2014 "),gX=a("a"),kQo=o("ReformerForQuestionAnswering"),SQo=o(" (Reformer model)"),RQo=l(),Q2=a("li"),xpe=a("strong"),PQo=o("rembert"),BQo=o(" \u2014 "),hX=a("a"),IQo=o("RemBertForQuestionAnswering"),NQo=o(" (RemBERT model)"),qQo=l(),H2=a("li"),$pe=a("strong"),jQo=o("roberta"),DQo=o(" \u2014 "),pX=a("a"),GQo=o("RobertaForQuestionAnswering"),OQo=o(" (RoBERTa model)"),VQo=l(),U2=a("li"),kpe=a("strong"),XQo=o("roformer"),zQo=o(" \u2014 "),_X=a("a"),WQo=o("RoFormerForQuestionAnswering"),QQo=o(" (RoFormer model)"),HQo=l(),J2=a("li"),Spe=a("strong"),UQo=o("splinter"),JQo=o(" \u2014 "),uX=a("a"),YQo=o("SplinterForQuestionAnswering"),KQo=o(" (Splinter model)"),ZQo=l(),Y2=a("li"),Rpe=a("strong"),eHo=o("squeezebert"),oHo=o(" \u2014 "),bX=a("a"),rHo=o("SqueezeBertForQuestionAnswering"),tHo=o(" (SqueezeBERT model)"),aHo=l(),K2=a("li"),Ppe=a("strong"),nHo=o("xlm"),sHo=o(" \u2014 "),vX=a("a"),lHo=o("XLMForQuestionAnsweringSimple"),iHo=o(" (XLM model)"),dHo=l(),Z2=a("li"),Bpe=a("strong"),cHo=o("xlm-roberta"),fHo=o(" \u2014 "),FX=a("a"),mHo=o("XLMRobertaForQuestionAnswering"),gHo=o(" (XLM-RoBERTa model)"),hHo=l(),ev=a("li"),Ipe=a("strong"),pHo=o("xlm-roberta-xl"),_Ho=o(" \u2014 "),TX=a("a"),uHo=o("XLMRobertaXLForQuestionAnswering"),bHo=o(" (XLM-RoBERTa-XL model)"),vHo=l(),ov=a("li"),Npe=a("strong"),FHo=o("xlnet"),THo=o(" \u2014 "),MX=a("a"),MHo=o("XLNetForQuestionAnsweringSimple"),EHo=o(" (XLNet model)"),CHo=l(),rv=a("li"),qpe=a("strong"),wHo=o("yoso"),AHo=o(" \u2014 "),EX=a("a"),yHo=o("YosoForQuestionAnswering"),LHo=o(" (YOSO model)"),xHo=l(),tv=a("p"),$Ho=o("The model is set in evaluation mode by default using "),jpe=a("code"),kHo=o("model.eval()"),SHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),RHo=o("model.train()"),PHo=l(),F(av.$$.fragment),Yqe=l(),od=a("h2"),nv=a("a"),Gpe=a("span"),F(eL.$$.fragment),BHo=l(),Ope=a("span"),IHo=o("AutoModelForTableQuestionAnswering"),Kqe=l(),qo=a("div"),F(oL.$$.fragment),NHo=l(),rd=a("p"),qHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CX=a("a"),jHo=o("from_pretrained()"),DHo=o(" class method or the "),wX=a("a"),GHo=o("from_config()"),OHo=o(` class
method.`),VHo=l(),rL=a("p"),XHo=o("This class cannot be instantiated directly using "),Vpe=a("code"),zHo=o("__init__()"),WHo=o(" (throws an error)."),QHo=l(),gt=a("div"),F(tL.$$.fragment),HHo=l(),Xpe=a("p"),UHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JHo=l(),td=a("p"),YHo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),KHo=o("not"),ZHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),eUo=o("from_pretrained()"),oUo=o(" to load the model weights."),rUo=l(),F(sv.$$.fragment),tUo=l(),so=a("div"),F(aL.$$.fragment),aUo=l(),Wpe=a("p"),nUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sUo=l(),qa=a("p"),lUo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),iUo=o("model_type"),dUo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(":"),hUo=l(),Jpe=a("ul"),lv=a("li"),Ype=a("strong"),pUo=o("tapas"),_Uo=o(" \u2014 "),yX=a("a"),uUo=o("TapasForQuestionAnswering"),bUo=o(" (TAPAS model)"),vUo=l(),iv=a("p"),FUo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),TUo=o("model.eval()"),MUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),EUo=o("model.train()"),CUo=l(),F(dv.$$.fragment),Zqe=l(),ad=a("h2"),cv=a("a"),e_e=a("span"),F(nL.$$.fragment),wUo=l(),o_e=a("span"),AUo=o("AutoModelForImageClassification"),eje=l(),jo=a("div"),F(sL.$$.fragment),yUo=l(),nd=a("p"),LUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LX=a("a"),xUo=o("from_pretrained()"),$Uo=o(" class method or the "),xX=a("a"),kUo=o("from_config()"),SUo=o(` class
method.`),RUo=l(),lL=a("p"),PUo=o("This class cannot be instantiated directly using "),r_e=a("code"),BUo=o("__init__()"),IUo=o(" (throws an error)."),NUo=l(),ht=a("div"),F(iL.$$.fragment),qUo=l(),t_e=a("p"),jUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DUo=l(),sd=a("p"),GUo=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),OUo=o("not"),VUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),XUo=o("from_pretrained()"),zUo=o(" to load the model weights."),WUo=l(),F(fv.$$.fragment),QUo=l(),lo=a("div"),F(dL.$$.fragment),HUo=l(),n_e=a("p"),UUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JUo=l(),ja=a("p"),YUo=o("The model class to instantiate is selected based on the "),s_e=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),Fe=a("ul"),mv=a("li"),d_e=a("strong"),nJo=o("beit"),sJo=o(" \u2014 "),kX=a("a"),lJo=o("BeitForImageClassification"),iJo=o(" (BEiT model)"),dJo=l(),gv=a("li"),c_e=a("strong"),cJo=o("convnext"),fJo=o(" \u2014 "),SX=a("a"),mJo=o("ConvNextForImageClassification"),gJo=o(" (ConvNext model)"),hJo=l(),hv=a("li"),f_e=a("strong"),pJo=o("cvt"),_Jo=o(" \u2014 "),RX=a("a"),uJo=o("CvtForImageClassification"),bJo=o(" (CvT model)"),vJo=l(),pv=a("li"),m_e=a("strong"),FJo=o("data2vec-vision"),TJo=o(" \u2014 "),PX=a("a"),MJo=o("Data2VecVisionForImageClassification"),EJo=o(" (Data2VecVision model)"),CJo=l(),Bs=a("li"),g_e=a("strong"),wJo=o("deit"),AJo=o(" \u2014 "),BX=a("a"),yJo=o("DeiTForImageClassification"),LJo=o(" or "),IX=a("a"),xJo=o("DeiTForImageClassificationWithTeacher"),$Jo=o(" (DeiT model)"),kJo=l(),_v=a("li"),h_e=a("strong"),SJo=o("imagegpt"),RJo=o(" \u2014 "),NX=a("a"),PJo=o("ImageGPTForImageClassification"),BJo=o(" (ImageGPT model)"),IJo=l(),pt=a("li"),p_e=a("strong"),NJo=o("perceiver"),qJo=o(" \u2014 "),qX=a("a"),jJo=o("PerceiverForImageClassificationLearned"),DJo=o(" or "),jX=a("a"),GJo=o("PerceiverForImageClassificationFourier"),OJo=o(" or "),DX=a("a"),VJo=o("PerceiverForImageClassificationConvProcessing"),XJo=o(" (Perceiver model)"),zJo=l(),uv=a("li"),__e=a("strong"),WJo=o("poolformer"),QJo=o(" \u2014 "),GX=a("a"),HJo=o("PoolFormerForImageClassification"),UJo=o(" (PoolFormer model)"),JJo=l(),bv=a("li"),u_e=a("strong"),YJo=o("regnet"),KJo=o(" \u2014 "),OX=a("a"),ZJo=o("RegNetForImageClassification"),eYo=o(" (RegNet model)"),oYo=l(),vv=a("li"),b_e=a("strong"),rYo=o("resnet"),tYo=o(" \u2014 "),VX=a("a"),aYo=o("ResNetForImageClassification"),nYo=o(" (ResNet model)"),sYo=l(),Fv=a("li"),v_e=a("strong"),lYo=o("segformer"),iYo=o(" \u2014 "),XX=a("a"),dYo=o("SegformerForImageClassification"),cYo=o(" (SegFormer model)"),fYo=l(),Tv=a("li"),F_e=a("strong"),mYo=o("swin"),gYo=o(" \u2014 "),zX=a("a"),hYo=o("SwinForImageClassification"),pYo=o(" (Swin model)"),_Yo=l(),Mv=a("li"),T_e=a("strong"),uYo=o("van"),bYo=o(" \u2014 "),WX=a("a"),vYo=o("VanForImageClassification"),FYo=o(" (VAN model)"),TYo=l(),Ev=a("li"),M_e=a("strong"),MYo=o("vit"),EYo=o(" \u2014 "),QX=a("a"),CYo=o("ViTForImageClassification"),wYo=o(" (ViT model)"),AYo=l(),Cv=a("p"),yYo=o("The model is set in evaluation mode by default using "),E_e=a("code"),LYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),$Yo=o("model.train()"),kYo=l(),F(wv.$$.fragment),oje=l(),ld=a("h2"),Av=a("a"),w_e=a("span"),F(cL.$$.fragment),SYo=l(),A_e=a("span"),RYo=o("AutoModelForVision2Seq"),rje=l(),Do=a("div"),F(fL.$$.fragment),PYo=l(),id=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HX=a("a"),IYo=o("from_pretrained()"),NYo=o(" class method or the "),UX=a("a"),qYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),mL=a("p"),GYo=o("This class cannot be instantiated directly using "),y_e=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),_t=a("div"),F(gL.$$.fragment),zYo=l(),L_e=a("p"),WYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QYo=l(),dd=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(yv.$$.fragment),eKo=l(),io=a("div"),F(hL.$$.fragment),oKo=l(),$_e=a("p"),rKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tKo=l(),Da=a("p"),aKo=o("The model class to instantiate is selected based on the "),k_e=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),P_e=a("ul"),Lv=a("li"),B_e=a("strong"),mKo=o("vision-encoder-decoder"),gKo=o(" \u2014 "),YX=a("a"),hKo=o("VisionEncoderDecoderModel"),pKo=o(" (Vision Encoder decoder model)"),_Ko=l(),xv=a("p"),uKo=o("The model is set in evaluation mode by default using "),I_e=a("code"),bKo=o("model.eval()"),vKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),FKo=o("model.train()"),TKo=l(),F($v.$$.fragment),tje=l(),cd=a("h2"),kv=a("a"),q_e=a("span"),F(pL.$$.fragment),MKo=l(),j_e=a("span"),EKo=o("AutoModelForAudioClassification"),aje=l(),Go=a("div"),F(_L.$$.fragment),CKo=l(),fd=a("p"),wKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KX=a("a"),AKo=o("from_pretrained()"),yKo=o(" class method or the "),ZX=a("a"),LKo=o("from_config()"),xKo=o(` class
method.`),$Ko=l(),uL=a("p"),kKo=o("This class cannot be instantiated directly using "),D_e=a("code"),SKo=o("__init__()"),RKo=o(" (throws an error)."),PKo=l(),ut=a("div"),F(bL.$$.fragment),BKo=l(),G_e=a("p"),IKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),NKo=l(),md=a("p"),qKo=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),jKo=o("not"),DKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),GKo=o("from_pretrained()"),OKo=o(" to load the model weights."),VKo=l(),F(Sv.$$.fragment),XKo=l(),co=a("div"),F(vL.$$.fragment),zKo=l(),V_e=a("p"),WKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),QKo=l(),Ga=a("p"),HKo=o("The model class to instantiate is selected based on the "),X_e=a("code"),UKo=o("model_type"),JKo=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),ZKo=o("pretrained_model_name_or_path"),eZo=o(":"),oZo=l(),ke=a("ul"),Rv=a("li"),Q_e=a("strong"),rZo=o("data2vec-audio"),tZo=o(" \u2014 "),oz=a("a"),aZo=o("Data2VecAudioForSequenceClassification"),nZo=o(" (Data2VecAudio model)"),sZo=l(),Pv=a("li"),H_e=a("strong"),lZo=o("hubert"),iZo=o(" \u2014 "),rz=a("a"),dZo=o("HubertForSequenceClassification"),cZo=o(" (Hubert model)"),fZo=l(),Bv=a("li"),U_e=a("strong"),mZo=o("sew"),gZo=o(" \u2014 "),tz=a("a"),hZo=o("SEWForSequenceClassification"),pZo=o(" (SEW model)"),_Zo=l(),Iv=a("li"),J_e=a("strong"),uZo=o("sew-d"),bZo=o(" \u2014 "),az=a("a"),vZo=o("SEWDForSequenceClassification"),FZo=o(" (SEW-D model)"),TZo=l(),Nv=a("li"),Y_e=a("strong"),MZo=o("unispeech"),EZo=o(" \u2014 "),nz=a("a"),CZo=o("UniSpeechForSequenceClassification"),wZo=o(" (UniSpeech model)"),AZo=l(),qv=a("li"),K_e=a("strong"),yZo=o("unispeech-sat"),LZo=o(" \u2014 "),sz=a("a"),xZo=o("UniSpeechSatForSequenceClassification"),$Zo=o(" (UniSpeechSat model)"),kZo=l(),jv=a("li"),Z_e=a("strong"),SZo=o("wav2vec2"),RZo=o(" \u2014 "),lz=a("a"),PZo=o("Wav2Vec2ForSequenceClassification"),BZo=o(" (Wav2Vec2 model)"),IZo=l(),Dv=a("li"),eue=a("strong"),NZo=o("wav2vec2-conformer"),qZo=o(" \u2014 "),iz=a("a"),jZo=o("Wav2Vec2ConformerForSequenceClassification"),DZo=o(" (Wav2Vec2-Conformer model)"),GZo=l(),Gv=a("li"),oue=a("strong"),OZo=o("wavlm"),VZo=o(" \u2014 "),dz=a("a"),XZo=o("WavLMForSequenceClassification"),zZo=o(" (WavLM model)"),WZo=l(),Ov=a("p"),QZo=o("The model is set in evaluation mode by default using "),rue=a("code"),HZo=o("model.eval()"),UZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),JZo=o("model.train()"),YZo=l(),F(Vv.$$.fragment),nje=l(),gd=a("h2"),Xv=a("a"),aue=a("span"),F(FL.$$.fragment),KZo=l(),nue=a("span"),ZZo=o("AutoModelForAudioFrameClassification"),sje=l(),Oo=a("div"),F(TL.$$.fragment),eer=l(),hd=a("p"),oer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cz=a("a"),rer=o("from_pretrained()"),ter=o(" class method or the "),fz=a("a"),aer=o("from_config()"),ner=o(` class
method.`),ser=l(),ML=a("p"),ler=o("This class cannot be instantiated directly using "),sue=a("code"),ier=o("__init__()"),der=o(" (throws an error)."),cer=l(),bt=a("div"),F(EL.$$.fragment),fer=l(),lue=a("p"),mer=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ger=l(),pd=a("p"),her=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),per=o("not"),_er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),uer=o("from_pretrained()"),ber=o(" to load the model weights."),ver=l(),F(zv.$$.fragment),Fer=l(),fo=a("div"),F(CL.$$.fragment),Ter=l(),due=a("p"),Mer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Eer=l(),Oa=a("p"),Cer=o("The model class to instantiate is selected based on the "),cue=a("code"),wer=o("model_type"),Aer=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),yer=o("pretrained_model_name_or_path"),Ler=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),xer=o("pretrained_model_name_or_path"),$er=o(":"),ker=l(),Kr=a("ul"),Wv=a("li"),gue=a("strong"),Ser=o("data2vec-audio"),Rer=o(" \u2014 "),gz=a("a"),Per=o("Data2VecAudioForAudioFrameClassification"),Ber=o(" (Data2VecAudio model)"),Ier=l(),Qv=a("li"),hue=a("strong"),Ner=o("unispeech-sat"),qer=o(" \u2014 "),hz=a("a"),jer=o("UniSpeechSatForAudioFrameClassification"),Der=o(" (UniSpeechSat model)"),Ger=l(),Hv=a("li"),pue=a("strong"),Oer=o("wav2vec2"),Ver=o(" \u2014 "),pz=a("a"),Xer=o("Wav2Vec2ForAudioFrameClassification"),zer=o(" (Wav2Vec2 model)"),Wer=l(),Uv=a("li"),_ue=a("strong"),Qer=o("wav2vec2-conformer"),Her=o(" \u2014 "),_z=a("a"),Uer=o("Wav2Vec2ConformerForAudioFrameClassification"),Jer=o(" (Wav2Vec2-Conformer model)"),Yer=l(),Jv=a("li"),uue=a("strong"),Ker=o("wavlm"),Zer=o(" \u2014 "),uz=a("a"),eor=o("WavLMForAudioFrameClassification"),oor=o(" (WavLM model)"),ror=l(),Yv=a("p"),tor=o("The model is set in evaluation mode by default using "),bue=a("code"),aor=o("model.eval()"),nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),sor=o("model.train()"),lor=l(),F(Kv.$$.fragment),lje=l(),_d=a("h2"),Zv=a("a"),Fue=a("span"),F(wL.$$.fragment),ior=l(),Tue=a("span"),dor=o("AutoModelForCTC"),ije=l(),Vo=a("div"),F(AL.$$.fragment),cor=l(),ud=a("p"),mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bz=a("a"),gor=o("from_pretrained()"),hor=o(" class method or the "),vz=a("a"),por=o("from_config()"),_or=o(` class
method.`),uor=l(),yL=a("p"),bor=o("This class cannot be instantiated directly using "),Mue=a("code"),vor=o("__init__()"),For=o(" (throws an error)."),Tor=l(),vt=a("div"),F(LL.$$.fragment),Mor=l(),Eue=a("p"),Eor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cor=l(),bd=a("p"),wor=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),Aor=o("not"),yor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),Lor=o("from_pretrained()"),xor=o(" to load the model weights."),$or=l(),F(eF.$$.fragment),kor=l(),mo=a("div"),F(xL.$$.fragment),Sor=l(),wue=a("p"),Ror=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Por=l(),Va=a("p"),Bor=o("The model class to instantiate is selected based on the "),Aue=a("code"),Ior=o("model_type"),Nor=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),qor=o("pretrained_model_name_or_path"),jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(":"),Oor=l(),Se=a("ul"),oF=a("li"),xue=a("strong"),Vor=o("data2vec-audio"),Xor=o(" \u2014 "),Tz=a("a"),zor=o("Data2VecAudioForCTC"),Wor=o(" (Data2VecAudio model)"),Qor=l(),rF=a("li"),$ue=a("strong"),Hor=o("hubert"),Uor=o(" \u2014 "),Mz=a("a"),Jor=o("HubertForCTC"),Yor=o(" (Hubert model)"),Kor=l(),tF=a("li"),kue=a("strong"),Zor=o("sew"),err=o(" \u2014 "),Ez=a("a"),orr=o("SEWForCTC"),rrr=o(" (SEW model)"),trr=l(),aF=a("li"),Sue=a("strong"),arr=o("sew-d"),nrr=o(" \u2014 "),Cz=a("a"),srr=o("SEWDForCTC"),lrr=o(" (SEW-D model)"),irr=l(),nF=a("li"),Rue=a("strong"),drr=o("unispeech"),crr=o(" \u2014 "),wz=a("a"),frr=o("UniSpeechForCTC"),mrr=o(" (UniSpeech model)"),grr=l(),sF=a("li"),Pue=a("strong"),hrr=o("unispeech-sat"),prr=o(" \u2014 "),Az=a("a"),_rr=o("UniSpeechSatForCTC"),urr=o(" (UniSpeechSat model)"),brr=l(),lF=a("li"),Bue=a("strong"),vrr=o("wav2vec2"),Frr=o(" \u2014 "),yz=a("a"),Trr=o("Wav2Vec2ForCTC"),Mrr=o(" (Wav2Vec2 model)"),Err=l(),iF=a("li"),Iue=a("strong"),Crr=o("wav2vec2-conformer"),wrr=o(" \u2014 "),Lz=a("a"),Arr=o("Wav2Vec2ConformerForCTC"),yrr=o(" (Wav2Vec2-Conformer model)"),Lrr=l(),dF=a("li"),Nue=a("strong"),xrr=o("wavlm"),$rr=o(" \u2014 "),xz=a("a"),krr=o("WavLMForCTC"),Srr=o(" (WavLM model)"),Rrr=l(),cF=a("p"),Prr=o("The model is set in evaluation mode by default using "),que=a("code"),Brr=o("model.eval()"),Irr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),Nrr=o("model.train()"),qrr=l(),F(fF.$$.fragment),dje=l(),vd=a("h2"),mF=a("a"),Due=a("span"),F($L.$$.fragment),jrr=l(),Gue=a("span"),Drr=o("AutoModelForSpeechSeq2Seq"),cje=l(),Xo=a("div"),F(kL.$$.fragment),Grr=l(),Fd=a("p"),Orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$z=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" class method or the "),kz=a("a"),zrr=o("from_config()"),Wrr=o(` class
method.`),Qrr=l(),SL=a("p"),Hrr=o("This class cannot be instantiated directly using "),Oue=a("code"),Urr=o("__init__()"),Jrr=o(" (throws an error)."),Yrr=l(),Ft=a("div"),F(RL.$$.fragment),Krr=l(),Vue=a("p"),Zrr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),etr=l(),Td=a("p"),otr=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),rtr=o("not"),ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),atr=o("from_pretrained()"),ntr=o(" to load the model weights."),str=l(),F(gF.$$.fragment),ltr=l(),go=a("div"),F(PL.$$.fragment),itr=l(),zue=a("p"),dtr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ctr=l(),Xa=a("p"),ftr=o("The model class to instantiate is selected based on the "),Wue=a("code"),mtr=o("model_type"),gtr=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),htr=o("pretrained_model_name_or_path"),ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),_tr=o("pretrained_model_name_or_path"),utr=o(":"),btr=l(),BL=a("ul"),hF=a("li"),Uue=a("strong"),vtr=o("speech-encoder-decoder"),Ftr=o(" \u2014 "),Rz=a("a"),Ttr=o("SpeechEncoderDecoderModel"),Mtr=o(" (Speech Encoder decoder model)"),Etr=l(),pF=a("li"),Jue=a("strong"),Ctr=o("speech_to_text"),wtr=o(" \u2014 "),Pz=a("a"),Atr=o("Speech2TextForConditionalGeneration"),ytr=o(" (Speech2Text model)"),Ltr=l(),_F=a("p"),xtr=o("The model is set in evaluation mode by default using "),Yue=a("code"),$tr=o("model.eval()"),ktr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=a("code"),Str=o("model.train()"),Rtr=l(),F(uF.$$.fragment),fje=l(),Md=a("h2"),bF=a("a"),Zue=a("span"),F(IL.$$.fragment),Ptr=l(),e4e=a("span"),Btr=o("AutoModelForAudioXVector"),mje=l(),zo=a("div"),F(NL.$$.fragment),Itr=l(),Ed=a("p"),Ntr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Bz=a("a"),qtr=o("from_pretrained()"),jtr=o(" class method or the "),Iz=a("a"),Dtr=o("from_config()"),Gtr=o(` class
method.`),Otr=l(),qL=a("p"),Vtr=o("This class cannot be instantiated directly using "),o4e=a("code"),Xtr=o("__init__()"),ztr=o(" (throws an error)."),Wtr=l(),Tt=a("div"),F(jL.$$.fragment),Qtr=l(),r4e=a("p"),Htr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Utr=l(),Cd=a("p"),Jtr=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),Ytr=o("not"),Ktr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Ztr=o("from_pretrained()"),ear=o(" to load the model weights."),oar=l(),F(vF.$$.fragment),rar=l(),ho=a("div"),F(DL.$$.fragment),tar=l(),a4e=a("p"),aar=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nar=l(),za=a("p"),sar=o("The model class to instantiate is selected based on the "),n4e=a("code"),lar=o("model_type"),iar=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),dar=o("pretrained_model_name_or_path"),car=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),far=o("pretrained_model_name_or_path"),mar=o(":"),gar=l(),Zr=a("ul"),FF=a("li"),i4e=a("strong"),har=o("data2vec-audio"),par=o(" \u2014 "),qz=a("a"),_ar=o("Data2VecAudioForXVector"),uar=o(" (Data2VecAudio model)"),bar=l(),TF=a("li"),d4e=a("strong"),Far=o("unispeech-sat"),Tar=o(" \u2014 "),jz=a("a"),Mar=o("UniSpeechSatForXVector"),Ear=o(" (UniSpeechSat model)"),Car=l(),MF=a("li"),c4e=a("strong"),war=o("wav2vec2"),Aar=o(" \u2014 "),Dz=a("a"),yar=o("Wav2Vec2ForXVector"),Lar=o(" (Wav2Vec2 model)"),xar=l(),EF=a("li"),f4e=a("strong"),$ar=o("wav2vec2-conformer"),kar=o(" \u2014 "),Gz=a("a"),Sar=o("Wav2Vec2ConformerForXVector"),Rar=o(" (Wav2Vec2-Conformer model)"),Par=l(),CF=a("li"),m4e=a("strong"),Bar=o("wavlm"),Iar=o(" \u2014 "),Oz=a("a"),Nar=o("WavLMForXVector"),qar=o(" (WavLM model)"),jar=l(),wF=a("p"),Dar=o("The model is set in evaluation mode by default using "),g4e=a("code"),Gar=o("model.eval()"),Oar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h4e=a("code"),Var=o("model.train()"),Xar=l(),F(AF.$$.fragment),gje=l(),wd=a("h2"),yF=a("a"),p4e=a("span"),F(GL.$$.fragment),zar=l(),_4e=a("span"),War=o("AutoModelForMaskedImageModeling"),hje=l(),Wo=a("div"),F(OL.$$.fragment),Qar=l(),Ad=a("p"),Har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Vz=a("a"),Uar=o("from_pretrained()"),Jar=o(" class method or the "),Xz=a("a"),Yar=o("from_config()"),Kar=o(` class
method.`),Zar=l(),VL=a("p"),enr=o("This class cannot be instantiated directly using "),u4e=a("code"),onr=o("__init__()"),rnr=o(" (throws an error)."),tnr=l(),Mt=a("div"),F(XL.$$.fragment),anr=l(),b4e=a("p"),nnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),snr=l(),yd=a("p"),lnr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),inr=o("not"),dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),cnr=o("from_pretrained()"),fnr=o(" to load the model weights."),mnr=l(),F(LF.$$.fragment),gnr=l(),po=a("div"),F(zL.$$.fragment),hnr=l(),F4e=a("p"),pnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_nr=l(),Wa=a("p"),unr=o("The model class to instantiate is selected based on the "),T4e=a("code"),bnr=o("model_type"),vnr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),Fnr=o("pretrained_model_name_or_path"),Tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),Mnr=o("pretrained_model_name_or_path"),Enr=o(":"),Cnr=l(),Ld=a("ul"),xF=a("li"),C4e=a("strong"),wnr=o("deit"),Anr=o(" \u2014 "),Wz=a("a"),ynr=o("DeiTForMaskedImageModeling"),Lnr=o(" (DeiT model)"),xnr=l(),$F=a("li"),w4e=a("strong"),$nr=o("swin"),knr=o(" \u2014 "),Qz=a("a"),Snr=o("SwinForMaskedImageModeling"),Rnr=o(" (Swin model)"),Pnr=l(),kF=a("li"),A4e=a("strong"),Bnr=o("vit"),Inr=o(" \u2014 "),Hz=a("a"),Nnr=o("ViTForMaskedImageModeling"),qnr=o(" (ViT model)"),jnr=l(),SF=a("p"),Dnr=o("The model is set in evaluation mode by default using "),y4e=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L4e=a("code"),Vnr=o("model.train()"),Xnr=l(),F(RF.$$.fragment),pje=l(),xd=a("h2"),PF=a("a"),x4e=a("span"),F(WL.$$.fragment),znr=l(),$4e=a("span"),Wnr=o("AutoModelForObjectDetection"),_je=l(),Qo=a("div"),F(QL.$$.fragment),Qnr=l(),$d=a("p"),Hnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Uz=a("a"),Unr=o("from_pretrained()"),Jnr=o(" class method or the "),Jz=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),HL=a("p"),esr=o("This class cannot be instantiated directly using "),k4e=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),Et=a("div"),F(UL.$$.fragment),asr=l(),S4e=a("p"),nsr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ssr=l(),kd=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),csr=o("from_pretrained()"),fsr=o(" to load the model weights."),msr=l(),F(BF.$$.fragment),gsr=l(),_o=a("div"),F(JL.$$.fragment),hsr=l(),P4e=a("p"),psr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_sr=l(),Qa=a("p"),usr=o("The model class to instantiate is selected based on the "),B4e=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),YL=a("ul"),IF=a("li"),q4e=a("strong"),wsr=o("detr"),Asr=o(" \u2014 "),Kz=a("a"),ysr=o("DetrForObjectDetection"),Lsr=o(" (DETR model)"),xsr=l(),NF=a("li"),j4e=a("strong"),$sr=o("yolos"),ksr=o(" \u2014 "),Zz=a("a"),Ssr=o("YolosForObjectDetection"),Rsr=o(" (YOLOS model)"),Psr=l(),qF=a("p"),Bsr=o("The model is set in evaluation mode by default using "),D4e=a("code"),Isr=o("model.eval()"),Nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=a("code"),qsr=o("model.train()"),jsr=l(),F(jF.$$.fragment),uje=l(),Sd=a("h2"),DF=a("a"),O4e=a("span"),F(KL.$$.fragment),Dsr=l(),V4e=a("span"),Gsr=o("AutoModelForImageSegmentation"),bje=l(),Ho=a("div"),F(ZL.$$.fragment),Osr=l(),Rd=a("p"),Vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eW=a("a"),Xsr=o("from_pretrained()"),zsr=o(" class method or the "),oW=a("a"),Wsr=o("from_config()"),Qsr=o(` class
method.`),Hsr=l(),e8=a("p"),Usr=o("This class cannot be instantiated directly using "),X4e=a("code"),Jsr=o("__init__()"),Ysr=o(" (throws an error)."),Ksr=l(),Ct=a("div"),F(o8.$$.fragment),Zsr=l(),z4e=a("p"),elr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),olr=l(),Pd=a("p"),rlr=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),tlr=o("not"),alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),nlr=o("from_pretrained()"),slr=o(" to load the model weights."),llr=l(),F(GF.$$.fragment),ilr=l(),uo=a("div"),F(r8.$$.fragment),dlr=l(),Q4e=a("p"),clr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),flr=l(),Ha=a("p"),mlr=o("The model class to instantiate is selected based on the "),H4e=a("code"),glr=o("model_type"),hlr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),ulr=o("pretrained_model_name_or_path"),blr=o(":"),vlr=l(),Y4e=a("ul"),OF=a("li"),K4e=a("strong"),Flr=o("detr"),Tlr=o(" \u2014 "),tW=a("a"),Mlr=o("DetrForSegmentation"),Elr=o(" (DETR model)"),Clr=l(),VF=a("p"),wlr=o("The model is set in evaluation mode by default using "),Z4e=a("code"),Alr=o("model.eval()"),ylr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),Llr=o("model.train()"),xlr=l(),F(XF.$$.fragment),vje=l(),Bd=a("h2"),zF=a("a"),o1e=a("span"),F(t8.$$.fragment),$lr=l(),r1e=a("span"),klr=o("AutoModelForSemanticSegmentation"),Fje=l(),Uo=a("div"),F(a8.$$.fragment),Slr=l(),Id=a("p"),Rlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aW=a("a"),Plr=o("from_pretrained()"),Blr=o(" class method or the "),nW=a("a"),Ilr=o("from_config()"),Nlr=o(` class
method.`),qlr=l(),n8=a("p"),jlr=o("This class cannot be instantiated directly using "),t1e=a("code"),Dlr=o("__init__()"),Glr=o(" (throws an error)."),Olr=l(),wt=a("div"),F(s8.$$.fragment),Vlr=l(),a1e=a("p"),Xlr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zlr=l(),Nd=a("p"),Wlr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Qlr=o("not"),Hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" to load the model weights."),Ylr=l(),F(WF.$$.fragment),Klr=l(),bo=a("div"),F(l8.$$.fragment),Zlr=l(),s1e=a("p"),eir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),oir=l(),Ua=a("p"),rir=o("The model class to instantiate is selected based on the "),l1e=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),Ja=a("ul"),QF=a("li"),c1e=a("strong"),cir=o("beit"),fir=o(" \u2014 "),lW=a("a"),mir=o("BeitForSemanticSegmentation"),gir=o(" (BEiT model)"),hir=l(),HF=a("li"),f1e=a("strong"),pir=o("data2vec-vision"),_ir=o(" \u2014 "),iW=a("a"),uir=o("Data2VecVisionForSemanticSegmentation"),bir=o(" (Data2VecVision model)"),vir=l(),UF=a("li"),m1e=a("strong"),Fir=o("dpt"),Tir=o(" \u2014 "),dW=a("a"),Mir=o("DPTForSemanticSegmentation"),Eir=o(" (DPT model)"),Cir=l(),JF=a("li"),g1e=a("strong"),wir=o("segformer"),Air=o(" \u2014 "),cW=a("a"),yir=o("SegformerForSemanticSegmentation"),Lir=o(" (SegFormer model)"),xir=l(),YF=a("p"),$ir=o("The model is set in evaluation mode by default using "),h1e=a("code"),kir=o("model.eval()"),Sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),Rir=o("model.train()"),Pir=l(),F(KF.$$.fragment),Tje=l(),qd=a("h2"),ZF=a("a"),_1e=a("span"),F(i8.$$.fragment),Bir=l(),u1e=a("span"),Iir=o("AutoModelForInstanceSegmentation"),Mje=l(),Jo=a("div"),F(d8.$$.fragment),Nir=l(),jd=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fW=a("a"),jir=o("from_pretrained()"),Dir=o(" class method or the "),mW=a("a"),Gir=o("from_config()"),Oir=o(` class
method.`),Vir=l(),c8=a("p"),Xir=o("This class cannot be instantiated directly using "),b1e=a("code"),zir=o("__init__()"),Wir=o(" (throws an error)."),Qir=l(),At=a("div"),F(f8.$$.fragment),Hir=l(),v1e=a("p"),Uir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jir=l(),Dd=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),edr=o("from_pretrained()"),odr=o(" to load the model weights."),rdr=l(),F(eT.$$.fragment),tdr=l(),vo=a("div"),F(m8.$$.fragment),adr=l(),T1e=a("p"),ndr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),sdr=l(),Ya=a("p"),ldr=o("The model class to instantiate is selected based on the "),M1e=a("code"),idr=o("model_type"),ddr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),cdr=o("pretrained_model_name_or_path"),fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(":"),hdr=l(),w1e=a("ul"),oT=a("li"),A1e=a("strong"),pdr=o("maskformer"),_dr=o(" \u2014 "),hW=a("a"),udr=o("MaskFormerForInstanceSegmentation"),bdr=o(" (MaskFormer model)"),vdr=l(),rT=a("p"),Fdr=o("The model is set in evaluation mode by default using "),y1e=a("code"),Tdr=o("model.eval()"),Mdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=a("code"),Edr=o("model.train()"),Cdr=l(),F(tT.$$.fragment),Eje=l(),Gd=a("h2"),aT=a("a"),x1e=a("span"),F(g8.$$.fragment),wdr=l(),$1e=a("span"),Adr=o("TFAutoModel"),Cje=l(),Yo=a("div"),F(h8.$$.fragment),ydr=l(),Od=a("p"),Ldr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pW=a("a"),xdr=o("from_pretrained()"),$dr=o(" class method or the "),_W=a("a"),kdr=o("from_config()"),Sdr=o(` class
method.`),Rdr=l(),p8=a("p"),Pdr=o("This class cannot be instantiated directly using "),k1e=a("code"),Bdr=o("__init__()"),Idr=o(" (throws an error)."),Ndr=l(),yt=a("div"),F(_8.$$.fragment),qdr=l(),S1e=a("p"),jdr=o("Instantiates one of the base model classes of the library from a configuration."),Ddr=l(),Vd=a("p"),Gdr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),Odr=o("not"),Vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Xdr=o("from_pretrained()"),zdr=o(" to load the model weights."),Wdr=l(),F(nT.$$.fragment),Qdr=l(),wr=a("div"),F(u8.$$.fragment),Hdr=l(),P1e=a("p"),Udr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jdr=l(),Ka=a("p"),Ydr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Kdr=o("model_type"),Zdr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),ecr=o("pretrained_model_name_or_path"),ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),rcr=o("pretrained_model_name_or_path"),tcr=o(":"),acr=l(),q=a("ul"),sT=a("li"),q1e=a("strong"),ncr=o("albert"),scr=o(" \u2014 "),bW=a("a"),lcr=o("TFAlbertModel"),icr=o(" (ALBERT model)"),dcr=l(),lT=a("li"),j1e=a("strong"),ccr=o("bart"),fcr=o(" \u2014 "),vW=a("a"),mcr=o("TFBartModel"),gcr=o(" (BART model)"),hcr=l(),iT=a("li"),D1e=a("strong"),pcr=o("bert"),_cr=o(" \u2014 "),FW=a("a"),ucr=o("TFBertModel"),bcr=o(" (BERT model)"),vcr=l(),dT=a("li"),G1e=a("strong"),Fcr=o("blenderbot"),Tcr=o(" \u2014 "),TW=a("a"),Mcr=o("TFBlenderbotModel"),Ecr=o(" (Blenderbot model)"),Ccr=l(),cT=a("li"),O1e=a("strong"),wcr=o("blenderbot-small"),Acr=o(" \u2014 "),MW=a("a"),ycr=o("TFBlenderbotSmallModel"),Lcr=o(" (BlenderbotSmall model)"),xcr=l(),fT=a("li"),V1e=a("strong"),$cr=o("camembert"),kcr=o(" \u2014 "),EW=a("a"),Scr=o("TFCamembertModel"),Rcr=o(" (CamemBERT model)"),Pcr=l(),mT=a("li"),X1e=a("strong"),Bcr=o("clip"),Icr=o(" \u2014 "),CW=a("a"),Ncr=o("TFCLIPModel"),qcr=o(" (CLIP model)"),jcr=l(),gT=a("li"),z1e=a("strong"),Dcr=o("convbert"),Gcr=o(" \u2014 "),wW=a("a"),Ocr=o("TFConvBertModel"),Vcr=o(" (ConvBERT model)"),Xcr=l(),hT=a("li"),W1e=a("strong"),zcr=o("convnext"),Wcr=o(" \u2014 "),AW=a("a"),Qcr=o("TFConvNextModel"),Hcr=o(" (ConvNext model)"),Ucr=l(),pT=a("li"),Q1e=a("strong"),Jcr=o("ctrl"),Ycr=o(" \u2014 "),yW=a("a"),Kcr=o("TFCTRLModel"),Zcr=o(" (CTRL model)"),efr=l(),_T=a("li"),H1e=a("strong"),ofr=o("data2vec-vision"),rfr=o(" \u2014 "),LW=a("a"),tfr=o("TFData2VecVisionModel"),afr=o(" (Data2VecVision model)"),nfr=l(),uT=a("li"),U1e=a("strong"),sfr=o("deberta"),lfr=o(" \u2014 "),xW=a("a"),ifr=o("TFDebertaModel"),dfr=o(" (DeBERTa model)"),cfr=l(),bT=a("li"),J1e=a("strong"),ffr=o("deberta-v2"),mfr=o(" \u2014 "),$W=a("a"),gfr=o("TFDebertaV2Model"),hfr=o(" (DeBERTa-v2 model)"),pfr=l(),vT=a("li"),Y1e=a("strong"),_fr=o("distilbert"),ufr=o(" \u2014 "),kW=a("a"),bfr=o("TFDistilBertModel"),vfr=o(" (DistilBERT model)"),Ffr=l(),FT=a("li"),K1e=a("strong"),Tfr=o("dpr"),Mfr=o(" \u2014 "),SW=a("a"),Efr=o("TFDPRQuestionEncoder"),Cfr=o(" (DPR model)"),wfr=l(),TT=a("li"),Z1e=a("strong"),Afr=o("electra"),yfr=o(" \u2014 "),RW=a("a"),Lfr=o("TFElectraModel"),xfr=o(" (ELECTRA model)"),$fr=l(),MT=a("li"),e7e=a("strong"),kfr=o("flaubert"),Sfr=o(" \u2014 "),PW=a("a"),Rfr=o("TFFlaubertModel"),Pfr=o(" (FlauBERT model)"),Bfr=l(),Is=a("li"),o7e=a("strong"),Ifr=o("funnel"),Nfr=o(" \u2014 "),BW=a("a"),qfr=o("TFFunnelModel"),jfr=o(" or "),IW=a("a"),Dfr=o("TFFunnelBaseModel"),Gfr=o(" (Funnel Transformer model)"),Ofr=l(),ET=a("li"),r7e=a("strong"),Vfr=o("gpt2"),Xfr=o(" \u2014 "),NW=a("a"),zfr=o("TFGPT2Model"),Wfr=o(" (OpenAI GPT-2 model)"),Qfr=l(),CT=a("li"),t7e=a("strong"),Hfr=o("gptj"),Ufr=o(" \u2014 "),qW=a("a"),Jfr=o("TFGPTJModel"),Yfr=o(" (GPT-J model)"),Kfr=l(),wT=a("li"),a7e=a("strong"),Zfr=o("hubert"),emr=o(" \u2014 "),jW=a("a"),omr=o("TFHubertModel"),rmr=o(" (Hubert model)"),tmr=l(),AT=a("li"),n7e=a("strong"),amr=o("layoutlm"),nmr=o(" \u2014 "),DW=a("a"),smr=o("TFLayoutLMModel"),lmr=o(" (LayoutLM model)"),imr=l(),yT=a("li"),s7e=a("strong"),dmr=o("led"),cmr=o(" \u2014 "),GW=a("a"),fmr=o("TFLEDModel"),mmr=o(" (LED model)"),gmr=l(),LT=a("li"),l7e=a("strong"),hmr=o("longformer"),pmr=o(" \u2014 "),OW=a("a"),_mr=o("TFLongformerModel"),umr=o(" (Longformer model)"),bmr=l(),xT=a("li"),i7e=a("strong"),vmr=o("lxmert"),Fmr=o(" \u2014 "),VW=a("a"),Tmr=o("TFLxmertModel"),Mmr=o(" (LXMERT model)"),Emr=l(),$T=a("li"),d7e=a("strong"),Cmr=o("marian"),wmr=o(" \u2014 "),XW=a("a"),Amr=o("TFMarianModel"),ymr=o(" (Marian model)"),Lmr=l(),kT=a("li"),c7e=a("strong"),xmr=o("mbart"),$mr=o(" \u2014 "),zW=a("a"),kmr=o("TFMBartModel"),Smr=o(" (mBART model)"),Rmr=l(),ST=a("li"),f7e=a("strong"),Pmr=o("mobilebert"),Bmr=o(" \u2014 "),WW=a("a"),Imr=o("TFMobileBertModel"),Nmr=o(" (MobileBERT model)"),qmr=l(),RT=a("li"),m7e=a("strong"),jmr=o("mpnet"),Dmr=o(" \u2014 "),QW=a("a"),Gmr=o("TFMPNetModel"),Omr=o(" (MPNet model)"),Vmr=l(),PT=a("li"),g7e=a("strong"),Xmr=o("mt5"),zmr=o(" \u2014 "),HW=a("a"),Wmr=o("TFMT5Model"),Qmr=o(" (mT5 model)"),Hmr=l(),BT=a("li"),h7e=a("strong"),Umr=o("openai-gpt"),Jmr=o(" \u2014 "),UW=a("a"),Ymr=o("TFOpenAIGPTModel"),Kmr=o(" (OpenAI GPT model)"),Zmr=l(),IT=a("li"),p7e=a("strong"),egr=o("pegasus"),ogr=o(" \u2014 "),JW=a("a"),rgr=o("TFPegasusModel"),tgr=o(" (Pegasus model)"),agr=l(),NT=a("li"),_7e=a("strong"),ngr=o("rembert"),sgr=o(" \u2014 "),YW=a("a"),lgr=o("TFRemBertModel"),igr=o(" (RemBERT model)"),dgr=l(),qT=a("li"),u7e=a("strong"),cgr=o("roberta"),fgr=o(" \u2014 "),KW=a("a"),mgr=o("TFRobertaModel"),ggr=o(" (RoBERTa model)"),hgr=l(),jT=a("li"),b7e=a("strong"),pgr=o("roformer"),_gr=o(" \u2014 "),ZW=a("a"),ugr=o("TFRoFormerModel"),bgr=o(" (RoFormer model)"),vgr=l(),DT=a("li"),v7e=a("strong"),Fgr=o("speech_to_text"),Tgr=o(" \u2014 "),eQ=a("a"),Mgr=o("TFSpeech2TextModel"),Egr=o(" (Speech2Text model)"),Cgr=l(),GT=a("li"),F7e=a("strong"),wgr=o("swin"),Agr=o(" \u2014 "),oQ=a("a"),ygr=o("TFSwinModel"),Lgr=o(" (Swin model)"),xgr=l(),OT=a("li"),T7e=a("strong"),$gr=o("t5"),kgr=o(" \u2014 "),rQ=a("a"),Sgr=o("TFT5Model"),Rgr=o(" (T5 model)"),Pgr=l(),VT=a("li"),M7e=a("strong"),Bgr=o("tapas"),Igr=o(" \u2014 "),tQ=a("a"),Ngr=o("TFTapasModel"),qgr=o(" (TAPAS model)"),jgr=l(),XT=a("li"),E7e=a("strong"),Dgr=o("transfo-xl"),Ggr=o(" \u2014 "),aQ=a("a"),Ogr=o("TFTransfoXLModel"),Vgr=o(" (Transformer-XL model)"),Xgr=l(),zT=a("li"),C7e=a("strong"),zgr=o("vit"),Wgr=o(" \u2014 "),nQ=a("a"),Qgr=o("TFViTModel"),Hgr=o(" (ViT model)"),Ugr=l(),WT=a("li"),w7e=a("strong"),Jgr=o("vit_mae"),Ygr=o(" \u2014 "),sQ=a("a"),Kgr=o("TFViTMAEModel"),Zgr=o(" (ViTMAE model)"),ehr=l(),QT=a("li"),A7e=a("strong"),ohr=o("wav2vec2"),rhr=o(" \u2014 "),lQ=a("a"),thr=o("TFWav2Vec2Model"),ahr=o(" (Wav2Vec2 model)"),nhr=l(),HT=a("li"),y7e=a("strong"),shr=o("xlm"),lhr=o(" \u2014 "),iQ=a("a"),ihr=o("TFXLMModel"),dhr=o(" (XLM model)"),chr=l(),UT=a("li"),L7e=a("strong"),fhr=o("xlm-roberta"),mhr=o(" \u2014 "),dQ=a("a"),ghr=o("TFXLMRobertaModel"),hhr=o(" (XLM-RoBERTa model)"),phr=l(),JT=a("li"),x7e=a("strong"),_hr=o("xlnet"),uhr=o(" \u2014 "),cQ=a("a"),bhr=o("TFXLNetModel"),vhr=o(" (XLNet model)"),Fhr=l(),F(YT.$$.fragment),wje=l(),Xd=a("h2"),KT=a("a"),$7e=a("span"),F(b8.$$.fragment),Thr=l(),k7e=a("span"),Mhr=o("TFAutoModelForPreTraining"),Aje=l(),Ko=a("div"),F(v8.$$.fragment),Ehr=l(),zd=a("p"),Chr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fQ=a("a"),whr=o("from_pretrained()"),Ahr=o(" class method or the "),mQ=a("a"),yhr=o("from_config()"),Lhr=o(` class
method.`),xhr=l(),F8=a("p"),$hr=o("This class cannot be instantiated directly using "),S7e=a("code"),khr=o("__init__()"),Shr=o(" (throws an error)."),Rhr=l(),Lt=a("div"),F(T8.$$.fragment),Phr=l(),R7e=a("p"),Bhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ihr=l(),Wd=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),qhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" to load the model weights."),Ohr=l(),F(ZT.$$.fragment),Vhr=l(),Ar=a("div"),F(M8.$$.fragment),Xhr=l(),B7e=a("p"),zhr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Whr=l(),Za=a("p"),Qhr=o("The model class to instantiate is selected based on the "),I7e=a("code"),Hhr=o("model_type"),Uhr=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),Jhr=o("pretrained_model_name_or_path"),Yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(":"),epr=l(),se=a("ul"),eM=a("li"),j7e=a("strong"),opr=o("albert"),rpr=o(" \u2014 "),hQ=a("a"),tpr=o("TFAlbertForPreTraining"),apr=o(" (ALBERT model)"),npr=l(),oM=a("li"),D7e=a("strong"),spr=o("bart"),lpr=o(" \u2014 "),pQ=a("a"),ipr=o("TFBartForConditionalGeneration"),dpr=o(" (BART model)"),cpr=l(),rM=a("li"),G7e=a("strong"),fpr=o("bert"),mpr=o(" \u2014 "),_Q=a("a"),gpr=o("TFBertForPreTraining"),hpr=o(" (BERT model)"),ppr=l(),tM=a("li"),O7e=a("strong"),_pr=o("camembert"),upr=o(" \u2014 "),uQ=a("a"),bpr=o("TFCamembertForMaskedLM"),vpr=o(" (CamemBERT model)"),Fpr=l(),aM=a("li"),V7e=a("strong"),Tpr=o("ctrl"),Mpr=o(" \u2014 "),bQ=a("a"),Epr=o("TFCTRLLMHeadModel"),Cpr=o(" (CTRL model)"),wpr=l(),nM=a("li"),X7e=a("strong"),Apr=o("distilbert"),ypr=o(" \u2014 "),vQ=a("a"),Lpr=o("TFDistilBertForMaskedLM"),xpr=o(" (DistilBERT model)"),$pr=l(),sM=a("li"),z7e=a("strong"),kpr=o("electra"),Spr=o(" \u2014 "),FQ=a("a"),Rpr=o("TFElectraForPreTraining"),Ppr=o(" (ELECTRA model)"),Bpr=l(),lM=a("li"),W7e=a("strong"),Ipr=o("flaubert"),Npr=o(" \u2014 "),TQ=a("a"),qpr=o("TFFlaubertWithLMHeadModel"),jpr=o(" (FlauBERT model)"),Dpr=l(),iM=a("li"),Q7e=a("strong"),Gpr=o("funnel"),Opr=o(" \u2014 "),MQ=a("a"),Vpr=o("TFFunnelForPreTraining"),Xpr=o(" (Funnel Transformer model)"),zpr=l(),dM=a("li"),H7e=a("strong"),Wpr=o("gpt2"),Qpr=o(" \u2014 "),EQ=a("a"),Hpr=o("TFGPT2LMHeadModel"),Upr=o(" (OpenAI GPT-2 model)"),Jpr=l(),cM=a("li"),U7e=a("strong"),Ypr=o("layoutlm"),Kpr=o(" \u2014 "),CQ=a("a"),Zpr=o("TFLayoutLMForMaskedLM"),e_r=o(" (LayoutLM model)"),o_r=l(),fM=a("li"),J7e=a("strong"),r_r=o("lxmert"),t_r=o(" \u2014 "),wQ=a("a"),a_r=o("TFLxmertForPreTraining"),n_r=o(" (LXMERT model)"),s_r=l(),mM=a("li"),Y7e=a("strong"),l_r=o("mobilebert"),i_r=o(" \u2014 "),AQ=a("a"),d_r=o("TFMobileBertForPreTraining"),c_r=o(" (MobileBERT model)"),f_r=l(),gM=a("li"),K7e=a("strong"),m_r=o("mpnet"),g_r=o(" \u2014 "),yQ=a("a"),h_r=o("TFMPNetForMaskedLM"),p_r=o(" (MPNet model)"),__r=l(),hM=a("li"),Z7e=a("strong"),u_r=o("openai-gpt"),b_r=o(" \u2014 "),LQ=a("a"),v_r=o("TFOpenAIGPTLMHeadModel"),F_r=o(" (OpenAI GPT model)"),T_r=l(),pM=a("li"),ebe=a("strong"),M_r=o("roberta"),E_r=o(" \u2014 "),xQ=a("a"),C_r=o("TFRobertaForMaskedLM"),w_r=o(" (RoBERTa model)"),A_r=l(),_M=a("li"),obe=a("strong"),y_r=o("t5"),L_r=o(" \u2014 "),$Q=a("a"),x_r=o("TFT5ForConditionalGeneration"),$_r=o(" (T5 model)"),k_r=l(),uM=a("li"),rbe=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),kQ=a("a"),P_r=o("TFTapasForMaskedLM"),B_r=o(" (TAPAS model)"),I_r=l(),bM=a("li"),tbe=a("strong"),N_r=o("transfo-xl"),q_r=o(" \u2014 "),SQ=a("a"),j_r=o("TFTransfoXLLMHeadModel"),D_r=o(" (Transformer-XL model)"),G_r=l(),vM=a("li"),abe=a("strong"),O_r=o("vit_mae"),V_r=o(" \u2014 "),RQ=a("a"),X_r=o("TFViTMAEForPreTraining"),z_r=o(" (ViTMAE model)"),W_r=l(),FM=a("li"),nbe=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),PQ=a("a"),U_r=o("TFXLMWithLMHeadModel"),J_r=o(" (XLM model)"),Y_r=l(),TM=a("li"),sbe=a("strong"),K_r=o("xlm-roberta"),Z_r=o(" \u2014 "),BQ=a("a"),eur=o("TFXLMRobertaForMaskedLM"),our=o(" (XLM-RoBERTa model)"),rur=l(),MM=a("li"),lbe=a("strong"),tur=o("xlnet"),aur=o(" \u2014 "),IQ=a("a"),nur=o("TFXLNetLMHeadModel"),sur=o(" (XLNet model)"),lur=l(),F(EM.$$.fragment),yje=l(),Qd=a("h2"),CM=a("a"),ibe=a("span"),F(E8.$$.fragment),iur=l(),dbe=a("span"),dur=o("TFAutoModelForCausalLM"),Lje=l(),Zo=a("div"),F(C8.$$.fragment),cur=l(),Hd=a("p"),fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NQ=a("a"),mur=o("from_pretrained()"),gur=o(" class method or the "),qQ=a("a"),hur=o("from_config()"),pur=o(` class
method.`),_ur=l(),w8=a("p"),uur=o("This class cannot be instantiated directly using "),cbe=a("code"),bur=o("__init__()"),vur=o(" (throws an error)."),Fur=l(),xt=a("div"),F(A8.$$.fragment),Tur=l(),fbe=a("p"),Mur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Eur=l(),Ud=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),yur=o("from_pretrained()"),Lur=o(" to load the model weights."),xur=l(),F(wM.$$.fragment),$ur=l(),yr=a("div"),F(y8.$$.fragment),kur=l(),gbe=a("p"),Sur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rur=l(),en=a("p"),Pur=o("The model class to instantiate is selected based on the "),hbe=a("code"),Bur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(":"),Gur=l(),Me=a("ul"),AM=a("li"),ube=a("strong"),Our=o("bert"),Vur=o(" \u2014 "),DQ=a("a"),Xur=o("TFBertLMHeadModel"),zur=o(" (BERT model)"),Wur=l(),yM=a("li"),bbe=a("strong"),Qur=o("camembert"),Hur=o(" \u2014 "),GQ=a("a"),Uur=o("TFCamembertForCausalLM"),Jur=o(" (CamemBERT model)"),Yur=l(),LM=a("li"),vbe=a("strong"),Kur=o("ctrl"),Zur=o(" \u2014 "),OQ=a("a"),e4r=o("TFCTRLLMHeadModel"),o4r=o(" (CTRL model)"),r4r=l(),xM=a("li"),Fbe=a("strong"),t4r=o("gpt2"),a4r=o(" \u2014 "),VQ=a("a"),n4r=o("TFGPT2LMHeadModel"),s4r=o(" (OpenAI GPT-2 model)"),l4r=l(),$M=a("li"),Tbe=a("strong"),i4r=o("gptj"),d4r=o(" \u2014 "),XQ=a("a"),c4r=o("TFGPTJForCausalLM"),f4r=o(" (GPT-J model)"),m4r=l(),kM=a("li"),Mbe=a("strong"),g4r=o("openai-gpt"),h4r=o(" \u2014 "),zQ=a("a"),p4r=o("TFOpenAIGPTLMHeadModel"),_4r=o(" (OpenAI GPT model)"),u4r=l(),SM=a("li"),Ebe=a("strong"),b4r=o("rembert"),v4r=o(" \u2014 "),WQ=a("a"),F4r=o("TFRemBertForCausalLM"),T4r=o(" (RemBERT model)"),M4r=l(),RM=a("li"),Cbe=a("strong"),E4r=o("roberta"),C4r=o(" \u2014 "),QQ=a("a"),w4r=o("TFRobertaForCausalLM"),A4r=o(" (RoBERTa model)"),y4r=l(),PM=a("li"),wbe=a("strong"),L4r=o("roformer"),x4r=o(" \u2014 "),HQ=a("a"),$4r=o("TFRoFormerForCausalLM"),k4r=o(" (RoFormer model)"),S4r=l(),BM=a("li"),Abe=a("strong"),R4r=o("transfo-xl"),P4r=o(" \u2014 "),UQ=a("a"),B4r=o("TFTransfoXLLMHeadModel"),I4r=o(" (Transformer-XL model)"),N4r=l(),IM=a("li"),ybe=a("strong"),q4r=o("xlm"),j4r=o(" \u2014 "),JQ=a("a"),D4r=o("TFXLMWithLMHeadModel"),G4r=o(" (XLM model)"),O4r=l(),NM=a("li"),Lbe=a("strong"),V4r=o("xlnet"),X4r=o(" \u2014 "),YQ=a("a"),z4r=o("TFXLNetLMHeadModel"),W4r=o(" (XLNet model)"),Q4r=l(),F(qM.$$.fragment),xje=l(),Jd=a("h2"),jM=a("a"),xbe=a("span"),F(L8.$$.fragment),H4r=l(),$be=a("span"),U4r=o("TFAutoModelForImageClassification"),$je=l(),er=a("div"),F(x8.$$.fragment),J4r=l(),Yd=a("p"),Y4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=a("a"),K4r=o("from_pretrained()"),Z4r=o(" class method or the "),ZQ=a("a"),e1r=o("from_config()"),o1r=o(` class
method.`),r1r=l(),$8=a("p"),t1r=o("This class cannot be instantiated directly using "),kbe=a("code"),a1r=o("__init__()"),n1r=o(" (throws an error)."),s1r=l(),$t=a("div"),F(k8.$$.fragment),l1r=l(),Sbe=a("p"),i1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d1r=l(),Kd=a("p"),c1r=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),f1r=o("not"),m1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),g1r=o("from_pretrained()"),h1r=o(" to load the model weights."),p1r=l(),F(DM.$$.fragment),_1r=l(),Lr=a("div"),F(S8.$$.fragment),u1r=l(),Pbe=a("p"),b1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),v1r=l(),on=a("p"),F1r=o("The model class to instantiate is selected based on the "),Bbe=a("code"),T1r=o("model_type"),M1r=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(":"),y1r=l(),rn=a("ul"),GM=a("li"),qbe=a("strong"),L1r=o("convnext"),x1r=o(" \u2014 "),oH=a("a"),$1r=o("TFConvNextForImageClassification"),k1r=o(" (ConvNext model)"),S1r=l(),OM=a("li"),jbe=a("strong"),R1r=o("data2vec-vision"),P1r=o(" \u2014 "),rH=a("a"),B1r=o("TFData2VecVisionForImageClassification"),I1r=o(" (Data2VecVision model)"),N1r=l(),VM=a("li"),Dbe=a("strong"),q1r=o("swin"),j1r=o(" \u2014 "),tH=a("a"),D1r=o("TFSwinForImageClassification"),G1r=o(" (Swin model)"),O1r=l(),XM=a("li"),Gbe=a("strong"),V1r=o("vit"),X1r=o(" \u2014 "),aH=a("a"),z1r=o("TFViTForImageClassification"),W1r=o(" (ViT model)"),Q1r=l(),F(zM.$$.fragment),kje=l(),Zd=a("h2"),WM=a("a"),Obe=a("span"),F(R8.$$.fragment),H1r=l(),Vbe=a("span"),U1r=o("TFAutoModelForMaskedLM"),Sje=l(),or=a("div"),F(P8.$$.fragment),J1r=l(),ec=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nH=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),sH=a("a"),e7r=o("from_config()"),o7r=o(` class
method.`),r7r=l(),B8=a("p"),t7r=o("This class cannot be instantiated directly using "),Xbe=a("code"),a7r=o("__init__()"),n7r=o(" (throws an error)."),s7r=l(),kt=a("div"),F(I8.$$.fragment),l7r=l(),zbe=a("p"),i7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),d7r=l(),oc=a("p"),c7r=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),f7r=o("not"),m7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),g7r=o("from_pretrained()"),h7r=o(" to load the model weights."),p7r=l(),F(QM.$$.fragment),_7r=l(),xr=a("div"),F(N8.$$.fragment),u7r=l(),Qbe=a("p"),b7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v7r=l(),tn=a("p"),F7r=o("The model class to instantiate is selected based on the "),Hbe=a("code"),T7r=o("model_type"),M7r=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),E7r=o("pretrained_model_name_or_path"),C7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(":"),y7r=l(),ie=a("ul"),HM=a("li"),Ybe=a("strong"),L7r=o("albert"),x7r=o(" \u2014 "),iH=a("a"),$7r=o("TFAlbertForMaskedLM"),k7r=o(" (ALBERT model)"),S7r=l(),UM=a("li"),Kbe=a("strong"),R7r=o("bert"),P7r=o(" \u2014 "),dH=a("a"),B7r=o("TFBertForMaskedLM"),I7r=o(" (BERT model)"),N7r=l(),JM=a("li"),Zbe=a("strong"),q7r=o("camembert"),j7r=o(" \u2014 "),cH=a("a"),D7r=o("TFCamembertForMaskedLM"),G7r=o(" (CamemBERT model)"),O7r=l(),YM=a("li"),e2e=a("strong"),V7r=o("convbert"),X7r=o(" \u2014 "),fH=a("a"),z7r=o("TFConvBertForMaskedLM"),W7r=o(" (ConvBERT model)"),Q7r=l(),KM=a("li"),o2e=a("strong"),H7r=o("deberta"),U7r=o(" \u2014 "),mH=a("a"),J7r=o("TFDebertaForMaskedLM"),Y7r=o(" (DeBERTa model)"),K7r=l(),ZM=a("li"),r2e=a("strong"),Z7r=o("deberta-v2"),ebr=o(" \u2014 "),gH=a("a"),obr=o("TFDebertaV2ForMaskedLM"),rbr=o(" (DeBERTa-v2 model)"),tbr=l(),eE=a("li"),t2e=a("strong"),abr=o("distilbert"),nbr=o(" \u2014 "),hH=a("a"),sbr=o("TFDistilBertForMaskedLM"),lbr=o(" (DistilBERT model)"),ibr=l(),oE=a("li"),a2e=a("strong"),dbr=o("electra"),cbr=o(" \u2014 "),pH=a("a"),fbr=o("TFElectraForMaskedLM"),mbr=o(" (ELECTRA model)"),gbr=l(),rE=a("li"),n2e=a("strong"),hbr=o("flaubert"),pbr=o(" \u2014 "),_H=a("a"),_br=o("TFFlaubertWithLMHeadModel"),ubr=o(" (FlauBERT model)"),bbr=l(),tE=a("li"),s2e=a("strong"),vbr=o("funnel"),Fbr=o(" \u2014 "),uH=a("a"),Tbr=o("TFFunnelForMaskedLM"),Mbr=o(" (Funnel Transformer model)"),Ebr=l(),aE=a("li"),l2e=a("strong"),Cbr=o("layoutlm"),wbr=o(" \u2014 "),bH=a("a"),Abr=o("TFLayoutLMForMaskedLM"),ybr=o(" (LayoutLM model)"),Lbr=l(),nE=a("li"),i2e=a("strong"),xbr=o("longformer"),$br=o(" \u2014 "),vH=a("a"),kbr=o("TFLongformerForMaskedLM"),Sbr=o(" (Longformer model)"),Rbr=l(),sE=a("li"),d2e=a("strong"),Pbr=o("mobilebert"),Bbr=o(" \u2014 "),FH=a("a"),Ibr=o("TFMobileBertForMaskedLM"),Nbr=o(" (MobileBERT model)"),qbr=l(),lE=a("li"),c2e=a("strong"),jbr=o("mpnet"),Dbr=o(" \u2014 "),TH=a("a"),Gbr=o("TFMPNetForMaskedLM"),Obr=o(" (MPNet model)"),Vbr=l(),iE=a("li"),f2e=a("strong"),Xbr=o("rembert"),zbr=o(" \u2014 "),MH=a("a"),Wbr=o("TFRemBertForMaskedLM"),Qbr=o(" (RemBERT model)"),Hbr=l(),dE=a("li"),m2e=a("strong"),Ubr=o("roberta"),Jbr=o(" \u2014 "),EH=a("a"),Ybr=o("TFRobertaForMaskedLM"),Kbr=o(" (RoBERTa model)"),Zbr=l(),cE=a("li"),g2e=a("strong"),e2r=o("roformer"),o2r=o(" \u2014 "),CH=a("a"),r2r=o("TFRoFormerForMaskedLM"),t2r=o(" (RoFormer model)"),a2r=l(),fE=a("li"),h2e=a("strong"),n2r=o("tapas"),s2r=o(" \u2014 "),wH=a("a"),l2r=o("TFTapasForMaskedLM"),i2r=o(" (TAPAS model)"),d2r=l(),mE=a("li"),p2e=a("strong"),c2r=o("xlm"),f2r=o(" \u2014 "),AH=a("a"),m2r=o("TFXLMWithLMHeadModel"),g2r=o(" (XLM model)"),h2r=l(),gE=a("li"),_2e=a("strong"),p2r=o("xlm-roberta"),_2r=o(" \u2014 "),yH=a("a"),u2r=o("TFXLMRobertaForMaskedLM"),b2r=o(" (XLM-RoBERTa model)"),v2r=l(),F(hE.$$.fragment),Rje=l(),rc=a("h2"),pE=a("a"),u2e=a("span"),F(q8.$$.fragment),F2r=l(),b2e=a("span"),T2r=o("TFAutoModelForSeq2SeqLM"),Pje=l(),rr=a("div"),F(j8.$$.fragment),M2r=l(),tc=a("p"),E2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LH=a("a"),C2r=o("from_pretrained()"),w2r=o(" class method or the "),xH=a("a"),A2r=o("from_config()"),y2r=o(` class
method.`),L2r=l(),D8=a("p"),x2r=o("This class cannot be instantiated directly using "),v2e=a("code"),$2r=o("__init__()"),k2r=o(" (throws an error)."),S2r=l(),St=a("div"),F(G8.$$.fragment),R2r=l(),F2e=a("p"),P2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B2r=l(),ac=a("p"),I2r=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),N2r=o("not"),q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),j2r=o("from_pretrained()"),D2r=o(" to load the model weights."),G2r=l(),F(_E.$$.fragment),O2r=l(),$r=a("div"),F(O8.$$.fragment),V2r=l(),M2e=a("p"),X2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z2r=l(),an=a("p"),W2r=o("The model class to instantiate is selected based on the "),E2e=a("code"),Q2r=o("model_type"),H2r=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),U2r=o("pretrained_model_name_or_path"),J2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(":"),Z2r=l(),ye=a("ul"),uE=a("li"),A2e=a("strong"),evr=o("bart"),ovr=o(" \u2014 "),kH=a("a"),rvr=o("TFBartForConditionalGeneration"),tvr=o(" (BART model)"),avr=l(),bE=a("li"),y2e=a("strong"),nvr=o("blenderbot"),svr=o(" \u2014 "),SH=a("a"),lvr=o("TFBlenderbotForConditionalGeneration"),ivr=o(" (Blenderbot model)"),dvr=l(),vE=a("li"),L2e=a("strong"),cvr=o("blenderbot-small"),fvr=o(" \u2014 "),RH=a("a"),mvr=o("TFBlenderbotSmallForConditionalGeneration"),gvr=o(" (BlenderbotSmall model)"),hvr=l(),FE=a("li"),x2e=a("strong"),pvr=o("encoder-decoder"),_vr=o(" \u2014 "),PH=a("a"),uvr=o("TFEncoderDecoderModel"),bvr=o(" (Encoder decoder model)"),vvr=l(),TE=a("li"),$2e=a("strong"),Fvr=o("led"),Tvr=o(" \u2014 "),BH=a("a"),Mvr=o("TFLEDForConditionalGeneration"),Evr=o(" (LED model)"),Cvr=l(),ME=a("li"),k2e=a("strong"),wvr=o("marian"),Avr=o(" \u2014 "),IH=a("a"),yvr=o("TFMarianMTModel"),Lvr=o(" (Marian model)"),xvr=l(),EE=a("li"),S2e=a("strong"),$vr=o("mbart"),kvr=o(" \u2014 "),NH=a("a"),Svr=o("TFMBartForConditionalGeneration"),Rvr=o(" (mBART model)"),Pvr=l(),CE=a("li"),R2e=a("strong"),Bvr=o("mt5"),Ivr=o(" \u2014 "),qH=a("a"),Nvr=o("TFMT5ForConditionalGeneration"),qvr=o(" (mT5 model)"),jvr=l(),wE=a("li"),P2e=a("strong"),Dvr=o("pegasus"),Gvr=o(" \u2014 "),jH=a("a"),Ovr=o("TFPegasusForConditionalGeneration"),Vvr=o(" (Pegasus model)"),Xvr=l(),AE=a("li"),B2e=a("strong"),zvr=o("t5"),Wvr=o(" \u2014 "),DH=a("a"),Qvr=o("TFT5ForConditionalGeneration"),Hvr=o(" (T5 model)"),Uvr=l(),F(yE.$$.fragment),Bje=l(),nc=a("h2"),LE=a("a"),I2e=a("span"),F(V8.$$.fragment),Jvr=l(),N2e=a("span"),Yvr=o("TFAutoModelForSequenceClassification"),Ije=l(),tr=a("div"),F(X8.$$.fragment),Kvr=l(),sc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GH=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),OH=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),z8=a("p"),nFr=o("This class cannot be instantiated directly using "),q2e=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),Rt=a("div"),F(W8.$$.fragment),dFr=l(),j2e=a("p"),cFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fFr=l(),lc=a("p"),mFr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),gFr=o("not"),hFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),pFr=o("from_pretrained()"),_Fr=o(" to load the model weights."),uFr=l(),F(xE.$$.fragment),bFr=l(),kr=a("div"),F(Q8.$$.fragment),vFr=l(),G2e=a("p"),FFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TFr=l(),nn=a("p"),MFr=o("The model class to instantiate is selected based on the "),O2e=a("code"),EFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),wFr=o("pretrained_model_name_or_path"),AFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(":"),xFr=l(),oe=a("ul"),$E=a("li"),z2e=a("strong"),$Fr=o("albert"),kFr=o(" \u2014 "),XH=a("a"),SFr=o("TFAlbertForSequenceClassification"),RFr=o(" (ALBERT model)"),PFr=l(),kE=a("li"),W2e=a("strong"),BFr=o("bert"),IFr=o(" \u2014 "),zH=a("a"),NFr=o("TFBertForSequenceClassification"),qFr=o(" (BERT model)"),jFr=l(),SE=a("li"),Q2e=a("strong"),DFr=o("camembert"),GFr=o(" \u2014 "),WH=a("a"),OFr=o("TFCamembertForSequenceClassification"),VFr=o(" (CamemBERT model)"),XFr=l(),RE=a("li"),H2e=a("strong"),zFr=o("convbert"),WFr=o(" \u2014 "),QH=a("a"),QFr=o("TFConvBertForSequenceClassification"),HFr=o(" (ConvBERT model)"),UFr=l(),PE=a("li"),U2e=a("strong"),JFr=o("ctrl"),YFr=o(" \u2014 "),HH=a("a"),KFr=o("TFCTRLForSequenceClassification"),ZFr=o(" (CTRL model)"),eTr=l(),BE=a("li"),J2e=a("strong"),oTr=o("deberta"),rTr=o(" \u2014 "),UH=a("a"),tTr=o("TFDebertaForSequenceClassification"),aTr=o(" (DeBERTa model)"),nTr=l(),IE=a("li"),Y2e=a("strong"),sTr=o("deberta-v2"),lTr=o(" \u2014 "),JH=a("a"),iTr=o("TFDebertaV2ForSequenceClassification"),dTr=o(" (DeBERTa-v2 model)"),cTr=l(),NE=a("li"),K2e=a("strong"),fTr=o("distilbert"),mTr=o(" \u2014 "),YH=a("a"),gTr=o("TFDistilBertForSequenceClassification"),hTr=o(" (DistilBERT model)"),pTr=l(),qE=a("li"),Z2e=a("strong"),_Tr=o("electra"),uTr=o(" \u2014 "),KH=a("a"),bTr=o("TFElectraForSequenceClassification"),vTr=o(" (ELECTRA model)"),FTr=l(),jE=a("li"),eve=a("strong"),TTr=o("flaubert"),MTr=o(" \u2014 "),ZH=a("a"),ETr=o("TFFlaubertForSequenceClassification"),CTr=o(" (FlauBERT model)"),wTr=l(),DE=a("li"),ove=a("strong"),ATr=o("funnel"),yTr=o(" \u2014 "),eU=a("a"),LTr=o("TFFunnelForSequenceClassification"),xTr=o(" (Funnel Transformer model)"),$Tr=l(),GE=a("li"),rve=a("strong"),kTr=o("gpt2"),STr=o(" \u2014 "),oU=a("a"),RTr=o("TFGPT2ForSequenceClassification"),PTr=o(" (OpenAI GPT-2 model)"),BTr=l(),OE=a("li"),tve=a("strong"),ITr=o("gptj"),NTr=o(" \u2014 "),rU=a("a"),qTr=o("TFGPTJForSequenceClassification"),jTr=o(" (GPT-J model)"),DTr=l(),VE=a("li"),ave=a("strong"),GTr=o("layoutlm"),OTr=o(" \u2014 "),tU=a("a"),VTr=o("TFLayoutLMForSequenceClassification"),XTr=o(" (LayoutLM model)"),zTr=l(),XE=a("li"),nve=a("strong"),WTr=o("longformer"),QTr=o(" \u2014 "),aU=a("a"),HTr=o("TFLongformerForSequenceClassification"),UTr=o(" (Longformer model)"),JTr=l(),zE=a("li"),sve=a("strong"),YTr=o("mobilebert"),KTr=o(" \u2014 "),nU=a("a"),ZTr=o("TFMobileBertForSequenceClassification"),eMr=o(" (MobileBERT model)"),oMr=l(),WE=a("li"),lve=a("strong"),rMr=o("mpnet"),tMr=o(" \u2014 "),sU=a("a"),aMr=o("TFMPNetForSequenceClassification"),nMr=o(" (MPNet model)"),sMr=l(),QE=a("li"),ive=a("strong"),lMr=o("openai-gpt"),iMr=o(" \u2014 "),lU=a("a"),dMr=o("TFOpenAIGPTForSequenceClassification"),cMr=o(" (OpenAI GPT model)"),fMr=l(),HE=a("li"),dve=a("strong"),mMr=o("rembert"),gMr=o(" \u2014 "),iU=a("a"),hMr=o("TFRemBertForSequenceClassification"),pMr=o(" (RemBERT model)"),_Mr=l(),UE=a("li"),cve=a("strong"),uMr=o("roberta"),bMr=o(" \u2014 "),dU=a("a"),vMr=o("TFRobertaForSequenceClassification"),FMr=o(" (RoBERTa model)"),TMr=l(),JE=a("li"),fve=a("strong"),MMr=o("roformer"),EMr=o(" \u2014 "),cU=a("a"),CMr=o("TFRoFormerForSequenceClassification"),wMr=o(" (RoFormer model)"),AMr=l(),YE=a("li"),mve=a("strong"),yMr=o("tapas"),LMr=o(" \u2014 "),fU=a("a"),xMr=o("TFTapasForSequenceClassification"),$Mr=o(" (TAPAS model)"),kMr=l(),KE=a("li"),gve=a("strong"),SMr=o("transfo-xl"),RMr=o(" \u2014 "),mU=a("a"),PMr=o("TFTransfoXLForSequenceClassification"),BMr=o(" (Transformer-XL model)"),IMr=l(),ZE=a("li"),hve=a("strong"),NMr=o("xlm"),qMr=o(" \u2014 "),gU=a("a"),jMr=o("TFXLMForSequenceClassification"),DMr=o(" (XLM model)"),GMr=l(),eC=a("li"),pve=a("strong"),OMr=o("xlm-roberta"),VMr=o(" \u2014 "),hU=a("a"),XMr=o("TFXLMRobertaForSequenceClassification"),zMr=o(" (XLM-RoBERTa model)"),WMr=l(),oC=a("li"),_ve=a("strong"),QMr=o("xlnet"),HMr=o(" \u2014 "),pU=a("a"),UMr=o("TFXLNetForSequenceClassification"),JMr=o(" (XLNet model)"),YMr=l(),F(rC.$$.fragment),Nje=l(),ic=a("h2"),tC=a("a"),uve=a("span"),F(H8.$$.fragment),KMr=l(),bve=a("span"),ZMr=o("TFAutoModelForMultipleChoice"),qje=l(),ar=a("div"),F(U8.$$.fragment),eEr=l(),dc=a("p"),oEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_U=a("a"),rEr=o("from_pretrained()"),tEr=o(" class method or the "),uU=a("a"),aEr=o("from_config()"),nEr=o(` class
method.`),sEr=l(),J8=a("p"),lEr=o("This class cannot be instantiated directly using "),vve=a("code"),iEr=o("__init__()"),dEr=o(" (throws an error)."),cEr=l(),Pt=a("div"),F(Y8.$$.fragment),fEr=l(),Fve=a("p"),mEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gEr=l(),cc=a("p"),hEr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),pEr=o("not"),_Er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),uEr=o("from_pretrained()"),bEr=o(" to load the model weights."),vEr=l(),F(aC.$$.fragment),FEr=l(),Sr=a("div"),F(K8.$$.fragment),TEr=l(),Mve=a("p"),MEr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),EEr=l(),sn=a("p"),CEr=o("The model class to instantiate is selected based on the "),Eve=a("code"),wEr=o("model_type"),AEr=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),yEr=o("pretrained_model_name_or_path"),LEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),xEr=o("pretrained_model_name_or_path"),$Er=o(":"),kEr=l(),pe=a("ul"),nC=a("li"),Ave=a("strong"),SEr=o("albert"),REr=o(" \u2014 "),vU=a("a"),PEr=o("TFAlbertForMultipleChoice"),BEr=o(" (ALBERT model)"),IEr=l(),sC=a("li"),yve=a("strong"),NEr=o("bert"),qEr=o(" \u2014 "),FU=a("a"),jEr=o("TFBertForMultipleChoice"),DEr=o(" (BERT model)"),GEr=l(),lC=a("li"),Lve=a("strong"),OEr=o("camembert"),VEr=o(" \u2014 "),TU=a("a"),XEr=o("TFCamembertForMultipleChoice"),zEr=o(" (CamemBERT model)"),WEr=l(),iC=a("li"),xve=a("strong"),QEr=o("convbert"),HEr=o(" \u2014 "),MU=a("a"),UEr=o("TFConvBertForMultipleChoice"),JEr=o(" (ConvBERT model)"),YEr=l(),dC=a("li"),$ve=a("strong"),KEr=o("distilbert"),ZEr=o(" \u2014 "),EU=a("a"),eCr=o("TFDistilBertForMultipleChoice"),oCr=o(" (DistilBERT model)"),rCr=l(),cC=a("li"),kve=a("strong"),tCr=o("electra"),aCr=o(" \u2014 "),CU=a("a"),nCr=o("TFElectraForMultipleChoice"),sCr=o(" (ELECTRA model)"),lCr=l(),fC=a("li"),Sve=a("strong"),iCr=o("flaubert"),dCr=o(" \u2014 "),wU=a("a"),cCr=o("TFFlaubertForMultipleChoice"),fCr=o(" (FlauBERT model)"),mCr=l(),mC=a("li"),Rve=a("strong"),gCr=o("funnel"),hCr=o(" \u2014 "),AU=a("a"),pCr=o("TFFunnelForMultipleChoice"),_Cr=o(" (Funnel Transformer model)"),uCr=l(),gC=a("li"),Pve=a("strong"),bCr=o("longformer"),vCr=o(" \u2014 "),yU=a("a"),FCr=o("TFLongformerForMultipleChoice"),TCr=o(" (Longformer model)"),MCr=l(),hC=a("li"),Bve=a("strong"),ECr=o("mobilebert"),CCr=o(" \u2014 "),LU=a("a"),wCr=o("TFMobileBertForMultipleChoice"),ACr=o(" (MobileBERT model)"),yCr=l(),pC=a("li"),Ive=a("strong"),LCr=o("mpnet"),xCr=o(" \u2014 "),xU=a("a"),$Cr=o("TFMPNetForMultipleChoice"),kCr=o(" (MPNet model)"),SCr=l(),_C=a("li"),Nve=a("strong"),RCr=o("rembert"),PCr=o(" \u2014 "),$U=a("a"),BCr=o("TFRemBertForMultipleChoice"),ICr=o(" (RemBERT model)"),NCr=l(),uC=a("li"),qve=a("strong"),qCr=o("roberta"),jCr=o(" \u2014 "),kU=a("a"),DCr=o("TFRobertaForMultipleChoice"),GCr=o(" (RoBERTa model)"),OCr=l(),bC=a("li"),jve=a("strong"),VCr=o("roformer"),XCr=o(" \u2014 "),SU=a("a"),zCr=o("TFRoFormerForMultipleChoice"),WCr=o(" (RoFormer model)"),QCr=l(),vC=a("li"),Dve=a("strong"),HCr=o("xlm"),UCr=o(" \u2014 "),RU=a("a"),JCr=o("TFXLMForMultipleChoice"),YCr=o(" (XLM model)"),KCr=l(),FC=a("li"),Gve=a("strong"),ZCr=o("xlm-roberta"),e5r=o(" \u2014 "),PU=a("a"),o5r=o("TFXLMRobertaForMultipleChoice"),r5r=o(" (XLM-RoBERTa model)"),t5r=l(),TC=a("li"),Ove=a("strong"),a5r=o("xlnet"),n5r=o(" \u2014 "),BU=a("a"),s5r=o("TFXLNetForMultipleChoice"),l5r=o(" (XLNet model)"),i5r=l(),F(MC.$$.fragment),jje=l(),fc=a("h2"),EC=a("a"),Vve=a("span"),F(Z8.$$.fragment),d5r=l(),Xve=a("span"),c5r=o("TFAutoModelForNextSentencePrediction"),Dje=l(),nr=a("div"),F(e9.$$.fragment),f5r=l(),mc=a("p"),m5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IU=a("a"),g5r=o("from_pretrained()"),h5r=o(" class method or the "),NU=a("a"),p5r=o("from_config()"),_5r=o(` class
method.`),u5r=l(),o9=a("p"),b5r=o("This class cannot be instantiated directly using "),zve=a("code"),v5r=o("__init__()"),F5r=o(" (throws an error)."),T5r=l(),Bt=a("div"),F(r9.$$.fragment),M5r=l(),Wve=a("p"),E5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),C5r=l(),gc=a("p"),w5r=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),A5r=o("not"),y5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),L5r=o("from_pretrained()"),x5r=o(" to load the model weights."),$5r=l(),F(CC.$$.fragment),k5r=l(),Rr=a("div"),F(t9.$$.fragment),S5r=l(),Hve=a("p"),R5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),P5r=l(),ln=a("p"),B5r=o("The model class to instantiate is selected based on the "),Uve=a("code"),I5r=o("model_type"),N5r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),q5r=o("pretrained_model_name_or_path"),j5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),D5r=o("pretrained_model_name_or_path"),G5r=o(":"),O5r=l(),a9=a("ul"),wC=a("li"),Kve=a("strong"),V5r=o("bert"),X5r=o(" \u2014 "),jU=a("a"),z5r=o("TFBertForNextSentencePrediction"),W5r=o(" (BERT model)"),Q5r=l(),AC=a("li"),Zve=a("strong"),H5r=o("mobilebert"),U5r=o(" \u2014 "),DU=a("a"),J5r=o("TFMobileBertForNextSentencePrediction"),Y5r=o(" (MobileBERT model)"),K5r=l(),F(yC.$$.fragment),Gje=l(),hc=a("h2"),LC=a("a"),eFe=a("span"),F(n9.$$.fragment),Z5r=l(),oFe=a("span"),e3r=o("TFAutoModelForTableQuestionAnswering"),Oje=l(),sr=a("div"),F(s9.$$.fragment),o3r=l(),pc=a("p"),r3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GU=a("a"),t3r=o("from_pretrained()"),a3r=o(" class method or the "),OU=a("a"),n3r=o("from_config()"),s3r=o(` class
method.`),l3r=l(),l9=a("p"),i3r=o("This class cannot be instantiated directly using "),rFe=a("code"),d3r=o("__init__()"),c3r=o(" (throws an error)."),f3r=l(),It=a("div"),F(i9.$$.fragment),m3r=l(),tFe=a("p"),g3r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h3r=l(),_c=a("p"),p3r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),_3r=o("not"),u3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),b3r=o("from_pretrained()"),v3r=o(" to load the model weights."),F3r=l(),F(xC.$$.fragment),T3r=l(),Pr=a("div"),F(d9.$$.fragment),M3r=l(),nFe=a("p"),E3r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),C3r=l(),dn=a("p"),w3r=o("The model class to instantiate is selected based on the "),sFe=a("code"),A3r=o("model_type"),y3r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),L3r=o("pretrained_model_name_or_path"),x3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(":"),S3r=l(),dFe=a("ul"),$C=a("li"),cFe=a("strong"),R3r=o("tapas"),P3r=o(" \u2014 "),XU=a("a"),B3r=o("TFTapasForQuestionAnswering"),I3r=o(" (TAPAS model)"),N3r=l(),F(kC.$$.fragment),Vje=l(),uc=a("h2"),SC=a("a"),fFe=a("span"),F(c9.$$.fragment),q3r=l(),mFe=a("span"),j3r=o("TFAutoModelForTokenClassification"),Xje=l(),lr=a("div"),F(f9.$$.fragment),D3r=l(),bc=a("p"),G3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zU=a("a"),O3r=o("from_pretrained()"),V3r=o(" class method or the "),WU=a("a"),X3r=o("from_config()"),z3r=o(` class
method.`),W3r=l(),m9=a("p"),Q3r=o("This class cannot be instantiated directly using "),gFe=a("code"),H3r=o("__init__()"),U3r=o(" (throws an error)."),J3r=l(),Nt=a("div"),F(g9.$$.fragment),Y3r=l(),hFe=a("p"),K3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Z3r=l(),vc=a("p"),ewr=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),owr=o("not"),rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),twr=o("from_pretrained()"),awr=o(" to load the model weights."),nwr=l(),F(RC.$$.fragment),swr=l(),Br=a("div"),F(h9.$$.fragment),lwr=l(),_Fe=a("p"),iwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dwr=l(),cn=a("p"),cwr=o("The model class to instantiate is selected based on the "),uFe=a("code"),fwr=o("model_type"),mwr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),gwr=o("pretrained_model_name_or_path"),hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(":"),uwr=l(),de=a("ul"),PC=a("li"),FFe=a("strong"),bwr=o("albert"),vwr=o(" \u2014 "),HU=a("a"),Fwr=o("TFAlbertForTokenClassification"),Twr=o(" (ALBERT model)"),Mwr=l(),BC=a("li"),TFe=a("strong"),Ewr=o("bert"),Cwr=o(" \u2014 "),UU=a("a"),wwr=o("TFBertForTokenClassification"),Awr=o(" (BERT model)"),ywr=l(),IC=a("li"),MFe=a("strong"),Lwr=o("camembert"),xwr=o(" \u2014 "),JU=a("a"),$wr=o("TFCamembertForTokenClassification"),kwr=o(" (CamemBERT model)"),Swr=l(),NC=a("li"),EFe=a("strong"),Rwr=o("convbert"),Pwr=o(" \u2014 "),YU=a("a"),Bwr=o("TFConvBertForTokenClassification"),Iwr=o(" (ConvBERT model)"),Nwr=l(),qC=a("li"),CFe=a("strong"),qwr=o("deberta"),jwr=o(" \u2014 "),KU=a("a"),Dwr=o("TFDebertaForTokenClassification"),Gwr=o(" (DeBERTa model)"),Owr=l(),jC=a("li"),wFe=a("strong"),Vwr=o("deberta-v2"),Xwr=o(" \u2014 "),ZU=a("a"),zwr=o("TFDebertaV2ForTokenClassification"),Wwr=o(" (DeBERTa-v2 model)"),Qwr=l(),DC=a("li"),AFe=a("strong"),Hwr=o("distilbert"),Uwr=o(" \u2014 "),eJ=a("a"),Jwr=o("TFDistilBertForTokenClassification"),Ywr=o(" (DistilBERT model)"),Kwr=l(),GC=a("li"),yFe=a("strong"),Zwr=o("electra"),e0r=o(" \u2014 "),oJ=a("a"),o0r=o("TFElectraForTokenClassification"),r0r=o(" (ELECTRA model)"),t0r=l(),OC=a("li"),LFe=a("strong"),a0r=o("flaubert"),n0r=o(" \u2014 "),rJ=a("a"),s0r=o("TFFlaubertForTokenClassification"),l0r=o(" (FlauBERT model)"),i0r=l(),VC=a("li"),xFe=a("strong"),d0r=o("funnel"),c0r=o(" \u2014 "),tJ=a("a"),f0r=o("TFFunnelForTokenClassification"),m0r=o(" (Funnel Transformer model)"),g0r=l(),XC=a("li"),$Fe=a("strong"),h0r=o("layoutlm"),p0r=o(" \u2014 "),aJ=a("a"),_0r=o("TFLayoutLMForTokenClassification"),u0r=o(" (LayoutLM model)"),b0r=l(),zC=a("li"),kFe=a("strong"),v0r=o("longformer"),F0r=o(" \u2014 "),nJ=a("a"),T0r=o("TFLongformerForTokenClassification"),M0r=o(" (Longformer model)"),E0r=l(),WC=a("li"),SFe=a("strong"),C0r=o("mobilebert"),w0r=o(" \u2014 "),sJ=a("a"),A0r=o("TFMobileBertForTokenClassification"),y0r=o(" (MobileBERT model)"),L0r=l(),QC=a("li"),RFe=a("strong"),x0r=o("mpnet"),$0r=o(" \u2014 "),lJ=a("a"),k0r=o("TFMPNetForTokenClassification"),S0r=o(" (MPNet model)"),R0r=l(),HC=a("li"),PFe=a("strong"),P0r=o("rembert"),B0r=o(" \u2014 "),iJ=a("a"),I0r=o("TFRemBertForTokenClassification"),N0r=o(" (RemBERT model)"),q0r=l(),UC=a("li"),BFe=a("strong"),j0r=o("roberta"),D0r=o(" \u2014 "),dJ=a("a"),G0r=o("TFRobertaForTokenClassification"),O0r=o(" (RoBERTa model)"),V0r=l(),JC=a("li"),IFe=a("strong"),X0r=o("roformer"),z0r=o(" \u2014 "),cJ=a("a"),W0r=o("TFRoFormerForTokenClassification"),Q0r=o(" (RoFormer model)"),H0r=l(),YC=a("li"),NFe=a("strong"),U0r=o("xlm"),J0r=o(" \u2014 "),fJ=a("a"),Y0r=o("TFXLMForTokenClassification"),K0r=o(" (XLM model)"),Z0r=l(),KC=a("li"),qFe=a("strong"),e6r=o("xlm-roberta"),o6r=o(" \u2014 "),mJ=a("a"),r6r=o("TFXLMRobertaForTokenClassification"),t6r=o(" (XLM-RoBERTa model)"),a6r=l(),ZC=a("li"),jFe=a("strong"),n6r=o("xlnet"),s6r=o(" \u2014 "),gJ=a("a"),l6r=o("TFXLNetForTokenClassification"),i6r=o(" (XLNet model)"),d6r=l(),F(e5.$$.fragment),zje=l(),Fc=a("h2"),o5=a("a"),DFe=a("span"),F(p9.$$.fragment),c6r=l(),GFe=a("span"),f6r=o("TFAutoModelForQuestionAnswering"),Wje=l(),ir=a("div"),F(_9.$$.fragment),m6r=l(),Tc=a("p"),g6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hJ=a("a"),h6r=o("from_pretrained()"),p6r=o(" class method or the "),pJ=a("a"),_6r=o("from_config()"),u6r=o(` class
method.`),b6r=l(),u9=a("p"),v6r=o("This class cannot be instantiated directly using "),OFe=a("code"),F6r=o("__init__()"),T6r=o(" (throws an error)."),M6r=l(),qt=a("div"),F(b9.$$.fragment),E6r=l(),VFe=a("p"),C6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w6r=l(),Mc=a("p"),A6r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),y6r=o("not"),L6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),x6r=o("from_pretrained()"),$6r=o(" to load the model weights."),k6r=l(),F(r5.$$.fragment),S6r=l(),Ir=a("div"),F(v9.$$.fragment),R6r=l(),zFe=a("p"),P6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B6r=l(),fn=a("p"),I6r=o("The model class to instantiate is selected based on the "),WFe=a("code"),N6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(":"),V6r=l(),ce=a("ul"),t5=a("li"),UFe=a("strong"),X6r=o("albert"),z6r=o(" \u2014 "),uJ=a("a"),W6r=o("TFAlbertForQuestionAnswering"),Q6r=o(" (ALBERT model)"),H6r=l(),a5=a("li"),JFe=a("strong"),U6r=o("bert"),J6r=o(" \u2014 "),bJ=a("a"),Y6r=o("TFBertForQuestionAnswering"),K6r=o(" (BERT model)"),Z6r=l(),n5=a("li"),YFe=a("strong"),eAr=o("camembert"),oAr=o(" \u2014 "),vJ=a("a"),rAr=o("TFCamembertForQuestionAnswering"),tAr=o(" (CamemBERT model)"),aAr=l(),s5=a("li"),KFe=a("strong"),nAr=o("convbert"),sAr=o(" \u2014 "),FJ=a("a"),lAr=o("TFConvBertForQuestionAnswering"),iAr=o(" (ConvBERT model)"),dAr=l(),l5=a("li"),ZFe=a("strong"),cAr=o("deberta"),fAr=o(" \u2014 "),TJ=a("a"),mAr=o("TFDebertaForQuestionAnswering"),gAr=o(" (DeBERTa model)"),hAr=l(),i5=a("li"),eTe=a("strong"),pAr=o("deberta-v2"),_Ar=o(" \u2014 "),MJ=a("a"),uAr=o("TFDebertaV2ForQuestionAnswering"),bAr=o(" (DeBERTa-v2 model)"),vAr=l(),d5=a("li"),oTe=a("strong"),FAr=o("distilbert"),TAr=o(" \u2014 "),EJ=a("a"),MAr=o("TFDistilBertForQuestionAnswering"),EAr=o(" (DistilBERT model)"),CAr=l(),c5=a("li"),rTe=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),CJ=a("a"),yAr=o("TFElectraForQuestionAnswering"),LAr=o(" (ELECTRA model)"),xAr=l(),f5=a("li"),tTe=a("strong"),$Ar=o("flaubert"),kAr=o(" \u2014 "),wJ=a("a"),SAr=o("TFFlaubertForQuestionAnsweringSimple"),RAr=o(" (FlauBERT model)"),PAr=l(),m5=a("li"),aTe=a("strong"),BAr=o("funnel"),IAr=o(" \u2014 "),AJ=a("a"),NAr=o("TFFunnelForQuestionAnswering"),qAr=o(" (Funnel Transformer model)"),jAr=l(),g5=a("li"),nTe=a("strong"),DAr=o("gptj"),GAr=o(" \u2014 "),yJ=a("a"),OAr=o("TFGPTJForQuestionAnswering"),VAr=o(" (GPT-J model)"),XAr=l(),h5=a("li"),sTe=a("strong"),zAr=o("longformer"),WAr=o(" \u2014 "),LJ=a("a"),QAr=o("TFLongformerForQuestionAnswering"),HAr=o(" (Longformer model)"),UAr=l(),p5=a("li"),lTe=a("strong"),JAr=o("mobilebert"),YAr=o(" \u2014 "),xJ=a("a"),KAr=o("TFMobileBertForQuestionAnswering"),ZAr=o(" (MobileBERT model)"),eyr=l(),_5=a("li"),iTe=a("strong"),oyr=o("mpnet"),ryr=o(" \u2014 "),$J=a("a"),tyr=o("TFMPNetForQuestionAnswering"),ayr=o(" (MPNet model)"),nyr=l(),u5=a("li"),dTe=a("strong"),syr=o("rembert"),lyr=o(" \u2014 "),kJ=a("a"),iyr=o("TFRemBertForQuestionAnswering"),dyr=o(" (RemBERT model)"),cyr=l(),b5=a("li"),cTe=a("strong"),fyr=o("roberta"),myr=o(" \u2014 "),SJ=a("a"),gyr=o("TFRobertaForQuestionAnswering"),hyr=o(" (RoBERTa model)"),pyr=l(),v5=a("li"),fTe=a("strong"),_yr=o("roformer"),uyr=o(" \u2014 "),RJ=a("a"),byr=o("TFRoFormerForQuestionAnswering"),vyr=o(" (RoFormer model)"),Fyr=l(),F5=a("li"),mTe=a("strong"),Tyr=o("xlm"),Myr=o(" \u2014 "),PJ=a("a"),Eyr=o("TFXLMForQuestionAnsweringSimple"),Cyr=o(" (XLM model)"),wyr=l(),T5=a("li"),gTe=a("strong"),Ayr=o("xlm-roberta"),yyr=o(" \u2014 "),BJ=a("a"),Lyr=o("TFXLMRobertaForQuestionAnswering"),xyr=o(" (XLM-RoBERTa model)"),$yr=l(),M5=a("li"),hTe=a("strong"),kyr=o("xlnet"),Syr=o(" \u2014 "),IJ=a("a"),Ryr=o("TFXLNetForQuestionAnsweringSimple"),Pyr=o(" (XLNet model)"),Byr=l(),F(E5.$$.fragment),Qje=l(),Ec=a("h2"),C5=a("a"),pTe=a("span"),F(F9.$$.fragment),Iyr=l(),_Te=a("span"),Nyr=o("TFAutoModelForVision2Seq"),Hje=l(),dr=a("div"),F(T9.$$.fragment),qyr=l(),Cc=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NJ=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" class method or the "),qJ=a("a"),Oyr=o("from_config()"),Vyr=o(` class
method.`),Xyr=l(),M9=a("p"),zyr=o("This class cannot be instantiated directly using "),uTe=a("code"),Wyr=o("__init__()"),Qyr=o(" (throws an error)."),Hyr=l(),jt=a("div"),F(E9.$$.fragment),Uyr=l(),bTe=a("p"),Jyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yyr=l(),wc=a("p"),Kyr=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),Zyr=o("not"),eLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),oLr=o("from_pretrained()"),rLr=o(" to load the model weights."),tLr=l(),F(w5.$$.fragment),aLr=l(),Nr=a("div"),F(C9.$$.fragment),nLr=l(),FTe=a("p"),sLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lLr=l(),mn=a("p"),iLr=o("The model class to instantiate is selected based on the "),TTe=a("code"),dLr=o("model_type"),cLr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(":"),pLr=l(),CTe=a("ul"),A5=a("li"),wTe=a("strong"),_Lr=o("vision-encoder-decoder"),uLr=o(" \u2014 "),DJ=a("a"),bLr=o("TFVisionEncoderDecoderModel"),vLr=o(" (Vision Encoder decoder model)"),FLr=l(),F(y5.$$.fragment),Uje=l(),Ac=a("h2"),L5=a("a"),ATe=a("span"),F(w9.$$.fragment),TLr=l(),yTe=a("span"),MLr=o("TFAutoModelForSpeechSeq2Seq"),Jje=l(),cr=a("div"),F(A9.$$.fragment),ELr=l(),yc=a("p"),CLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GJ=a("a"),wLr=o("from_pretrained()"),ALr=o(" class method or the "),OJ=a("a"),yLr=o("from_config()"),LLr=o(` class
method.`),xLr=l(),y9=a("p"),$Lr=o("This class cannot be instantiated directly using "),LTe=a("code"),kLr=o("__init__()"),SLr=o(" (throws an error)."),RLr=l(),Dt=a("div"),F(L9.$$.fragment),PLr=l(),xTe=a("p"),BLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ILr=l(),Lc=a("p"),NLr=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),qLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),DLr=o("from_pretrained()"),GLr=o(" to load the model weights."),OLr=l(),F(x5.$$.fragment),VLr=l(),qr=a("div"),F(x9.$$.fragment),XLr=l(),kTe=a("p"),zLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WLr=l(),gn=a("p"),QLr=o("The model class to instantiate is selected based on the "),STe=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),e8r=l(),BTe=a("ul"),$5=a("li"),ITe=a("strong"),o8r=o("speech_to_text"),r8r=o(" \u2014 "),XJ=a("a"),t8r=o("TFSpeech2TextForConditionalGeneration"),a8r=o(" (Speech2Text model)"),n8r=l(),F(k5.$$.fragment),Yje=l(),xc=a("h2"),S5=a("a"),NTe=a("span"),F($9.$$.fragment),s8r=l(),qTe=a("span"),l8r=o("FlaxAutoModel"),Kje=l(),fr=a("div"),F(k9.$$.fragment),i8r=l(),$c=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=a("a"),c8r=o("from_pretrained()"),f8r=o(" class method or the "),WJ=a("a"),m8r=o("from_config()"),g8r=o(` class
method.`),h8r=l(),S9=a("p"),p8r=o("This class cannot be instantiated directly using "),jTe=a("code"),_8r=o("__init__()"),u8r=o(" (throws an error)."),b8r=l(),Gt=a("div"),F(R9.$$.fragment),v8r=l(),DTe=a("p"),F8r=o("Instantiates one of the base model classes of the library from a configuration."),T8r=l(),kc=a("p"),M8r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),E8r=o("not"),C8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),w8r=o("from_pretrained()"),A8r=o(" to load the model weights."),y8r=l(),F(R5.$$.fragment),L8r=l(),jr=a("div"),F(P9.$$.fragment),x8r=l(),OTe=a("p"),$8r=o("Instantiate one of the base model classes of the library from a pretrained model."),k8r=l(),hn=a("p"),S8r=o("The model class to instantiate is selected based on the "),VTe=a("code"),R8r=o("model_type"),P8r=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),B8r=o("pretrained_model_name_or_path"),I8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),N8r=o("pretrained_model_name_or_path"),q8r=o(":"),j8r=l(),te=a("ul"),P5=a("li"),WTe=a("strong"),D8r=o("albert"),G8r=o(" \u2014 "),HJ=a("a"),O8r=o("FlaxAlbertModel"),V8r=o(" (ALBERT model)"),X8r=l(),B5=a("li"),QTe=a("strong"),z8r=o("bart"),W8r=o(" \u2014 "),UJ=a("a"),Q8r=o("FlaxBartModel"),H8r=o(" (BART model)"),U8r=l(),I5=a("li"),HTe=a("strong"),J8r=o("beit"),Y8r=o(" \u2014 "),JJ=a("a"),K8r=o("FlaxBeitModel"),Z8r=o(" (BEiT model)"),e9r=l(),N5=a("li"),UTe=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),YJ=a("a"),t9r=o("FlaxBertModel"),a9r=o(" (BERT model)"),n9r=l(),q5=a("li"),JTe=a("strong"),s9r=o("big_bird"),l9r=o(" \u2014 "),KJ=a("a"),i9r=o("FlaxBigBirdModel"),d9r=o(" (BigBird model)"),c9r=l(),j5=a("li"),YTe=a("strong"),f9r=o("blenderbot"),m9r=o(" \u2014 "),ZJ=a("a"),g9r=o("FlaxBlenderbotModel"),h9r=o(" (Blenderbot model)"),p9r=l(),D5=a("li"),KTe=a("strong"),_9r=o("blenderbot-small"),u9r=o(" \u2014 "),eY=a("a"),b9r=o("FlaxBlenderbotSmallModel"),v9r=o(" (BlenderbotSmall model)"),F9r=l(),G5=a("li"),ZTe=a("strong"),T9r=o("clip"),M9r=o(" \u2014 "),oY=a("a"),E9r=o("FlaxCLIPModel"),C9r=o(" (CLIP model)"),w9r=l(),O5=a("li"),eMe=a("strong"),A9r=o("distilbert"),y9r=o(" \u2014 "),rY=a("a"),L9r=o("FlaxDistilBertModel"),x9r=o(" (DistilBERT model)"),$9r=l(),V5=a("li"),oMe=a("strong"),k9r=o("electra"),S9r=o(" \u2014 "),tY=a("a"),R9r=o("FlaxElectraModel"),P9r=o(" (ELECTRA model)"),B9r=l(),X5=a("li"),rMe=a("strong"),I9r=o("gpt2"),N9r=o(" \u2014 "),aY=a("a"),q9r=o("FlaxGPT2Model"),j9r=o(" (OpenAI GPT-2 model)"),D9r=l(),z5=a("li"),tMe=a("strong"),G9r=o("gpt_neo"),O9r=o(" \u2014 "),nY=a("a"),V9r=o("FlaxGPTNeoModel"),X9r=o(" (GPT Neo model)"),z9r=l(),W5=a("li"),aMe=a("strong"),W9r=o("gptj"),Q9r=o(" \u2014 "),sY=a("a"),H9r=o("FlaxGPTJModel"),U9r=o(" (GPT-J model)"),J9r=l(),Q5=a("li"),nMe=a("strong"),Y9r=o("marian"),K9r=o(" \u2014 "),lY=a("a"),Z9r=o("FlaxMarianModel"),exr=o(" (Marian model)"),oxr=l(),H5=a("li"),sMe=a("strong"),rxr=o("mbart"),txr=o(" \u2014 "),iY=a("a"),axr=o("FlaxMBartModel"),nxr=o(" (mBART model)"),sxr=l(),U5=a("li"),lMe=a("strong"),lxr=o("mt5"),ixr=o(" \u2014 "),dY=a("a"),dxr=o("FlaxMT5Model"),cxr=o(" (mT5 model)"),fxr=l(),J5=a("li"),iMe=a("strong"),mxr=o("pegasus"),gxr=o(" \u2014 "),cY=a("a"),hxr=o("FlaxPegasusModel"),pxr=o(" (Pegasus model)"),_xr=l(),Y5=a("li"),dMe=a("strong"),uxr=o("roberta"),bxr=o(" \u2014 "),fY=a("a"),vxr=o("FlaxRobertaModel"),Fxr=o(" (RoBERTa model)"),Txr=l(),K5=a("li"),cMe=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),mY=a("a"),Cxr=o("FlaxRoFormerModel"),wxr=o(" (RoFormer model)"),Axr=l(),Z5=a("li"),fMe=a("strong"),yxr=o("t5"),Lxr=o(" \u2014 "),gY=a("a"),xxr=o("FlaxT5Model"),$xr=o(" (T5 model)"),kxr=l(),e3=a("li"),mMe=a("strong"),Sxr=o("vision-text-dual-encoder"),Rxr=o(" \u2014 "),hY=a("a"),Pxr=o("FlaxVisionTextDualEncoderModel"),Bxr=o(" (VisionTextDualEncoder model)"),Ixr=l(),o3=a("li"),gMe=a("strong"),Nxr=o("vit"),qxr=o(" \u2014 "),pY=a("a"),jxr=o("FlaxViTModel"),Dxr=o(" (ViT model)"),Gxr=l(),r3=a("li"),hMe=a("strong"),Oxr=o("wav2vec2"),Vxr=o(" \u2014 "),_Y=a("a"),Xxr=o("FlaxWav2Vec2Model"),zxr=o(" (Wav2Vec2 model)"),Wxr=l(),t3=a("li"),pMe=a("strong"),Qxr=o("xglm"),Hxr=o(" \u2014 "),uY=a("a"),Uxr=o("FlaxXGLMModel"),Jxr=o(" (XGLM model)"),Yxr=l(),a3=a("li"),_Me=a("strong"),Kxr=o("xlm-roberta"),Zxr=o(" \u2014 "),bY=a("a"),e$r=o("FlaxXLMRobertaModel"),o$r=o(" (XLM-RoBERTa model)"),r$r=l(),F(n3.$$.fragment),Zje=l(),Sc=a("h2"),s3=a("a"),uMe=a("span"),F(B9.$$.fragment),t$r=l(),bMe=a("span"),a$r=o("FlaxAutoModelForCausalLM"),eDe=l(),mr=a("div"),F(I9.$$.fragment),n$r=l(),Rc=a("p"),s$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vY=a("a"),l$r=o("from_pretrained()"),i$r=o(" class method or the "),FY=a("a"),d$r=o("from_config()"),c$r=o(` class
method.`),f$r=l(),N9=a("p"),m$r=o("This class cannot be instantiated directly using "),vMe=a("code"),g$r=o("__init__()"),h$r=o(" (throws an error)."),p$r=l(),Ot=a("div"),F(q9.$$.fragment),_$r=l(),FMe=a("p"),u$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b$r=l(),Pc=a("p"),v$r=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),F$r=o("not"),T$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),M$r=o("from_pretrained()"),E$r=o(" to load the model weights."),C$r=l(),F(l3.$$.fragment),w$r=l(),Dr=a("div"),F(j9.$$.fragment),A$r=l(),MMe=a("p"),y$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L$r=l(),pn=a("p"),x$r=o("The model class to instantiate is selected based on the "),EMe=a("code"),$$r=o("model_type"),k$r=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(":"),I$r=l(),Re=a("ul"),i3=a("li"),AMe=a("strong"),N$r=o("bart"),q$r=o(" \u2014 "),MY=a("a"),j$r=o("FlaxBartForCausalLM"),D$r=o(" (BART model)"),G$r=l(),d3=a("li"),yMe=a("strong"),O$r=o("bert"),V$r=o(" \u2014 "),EY=a("a"),X$r=o("FlaxBertForCausalLM"),z$r=o(" (BERT model)"),W$r=l(),c3=a("li"),LMe=a("strong"),Q$r=o("big_bird"),H$r=o(" \u2014 "),CY=a("a"),U$r=o("FlaxBigBirdForCausalLM"),J$r=o(" (BigBird model)"),Y$r=l(),f3=a("li"),xMe=a("strong"),K$r=o("electra"),Z$r=o(" \u2014 "),wY=a("a"),ekr=o("FlaxElectraForCausalLM"),okr=o(" (ELECTRA model)"),rkr=l(),m3=a("li"),$Me=a("strong"),tkr=o("gpt2"),akr=o(" \u2014 "),AY=a("a"),nkr=o("FlaxGPT2LMHeadModel"),skr=o(" (OpenAI GPT-2 model)"),lkr=l(),g3=a("li"),kMe=a("strong"),ikr=o("gpt_neo"),dkr=o(" \u2014 "),yY=a("a"),ckr=o("FlaxGPTNeoForCausalLM"),fkr=o(" (GPT Neo model)"),mkr=l(),h3=a("li"),SMe=a("strong"),gkr=o("gptj"),hkr=o(" \u2014 "),LY=a("a"),pkr=o("FlaxGPTJForCausalLM"),_kr=o(" (GPT-J model)"),ukr=l(),p3=a("li"),RMe=a("strong"),bkr=o("roberta"),vkr=o(" \u2014 "),xY=a("a"),Fkr=o("FlaxRobertaForCausalLM"),Tkr=o(" (RoBERTa model)"),Mkr=l(),_3=a("li"),PMe=a("strong"),Ekr=o("xglm"),Ckr=o(" \u2014 "),$Y=a("a"),wkr=o("FlaxXGLMForCausalLM"),Akr=o(" (XGLM model)"),ykr=l(),F(u3.$$.fragment),oDe=l(),Bc=a("h2"),b3=a("a"),BMe=a("span"),F(D9.$$.fragment),Lkr=l(),IMe=a("span"),xkr=o("FlaxAutoModelForPreTraining"),rDe=l(),gr=a("div"),F(G9.$$.fragment),$kr=l(),Ic=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),SY=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),O9=a("p"),Nkr=o("This class cannot be instantiated directly using "),NMe=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Vt=a("div"),F(V9.$$.fragment),Gkr=l(),qMe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vkr=l(),Nc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Qkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(v3.$$.fragment),Jkr=l(),Gr=a("div"),F(X9.$$.fragment),Ykr=l(),DMe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zkr=l(),_n=a("p"),eSr=o("The model class to instantiate is selected based on the "),GMe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),Ee=a("ul"),F3=a("li"),XMe=a("strong"),iSr=o("albert"),dSr=o(" \u2014 "),PY=a("a"),cSr=o("FlaxAlbertForPreTraining"),fSr=o(" (ALBERT model)"),mSr=l(),T3=a("li"),zMe=a("strong"),gSr=o("bart"),hSr=o(" \u2014 "),BY=a("a"),pSr=o("FlaxBartForConditionalGeneration"),_Sr=o(" (BART model)"),uSr=l(),M3=a("li"),WMe=a("strong"),bSr=o("bert"),vSr=o(" \u2014 "),IY=a("a"),FSr=o("FlaxBertForPreTraining"),TSr=o(" (BERT model)"),MSr=l(),E3=a("li"),QMe=a("strong"),ESr=o("big_bird"),CSr=o(" \u2014 "),NY=a("a"),wSr=o("FlaxBigBirdForPreTraining"),ASr=o(" (BigBird model)"),ySr=l(),C3=a("li"),HMe=a("strong"),LSr=o("electra"),xSr=o(" \u2014 "),qY=a("a"),$Sr=o("FlaxElectraForPreTraining"),kSr=o(" (ELECTRA model)"),SSr=l(),w3=a("li"),UMe=a("strong"),RSr=o("mbart"),PSr=o(" \u2014 "),jY=a("a"),BSr=o("FlaxMBartForConditionalGeneration"),ISr=o(" (mBART model)"),NSr=l(),A3=a("li"),JMe=a("strong"),qSr=o("mt5"),jSr=o(" \u2014 "),DY=a("a"),DSr=o("FlaxMT5ForConditionalGeneration"),GSr=o(" (mT5 model)"),OSr=l(),y3=a("li"),YMe=a("strong"),VSr=o("roberta"),XSr=o(" \u2014 "),GY=a("a"),zSr=o("FlaxRobertaForMaskedLM"),WSr=o(" (RoBERTa model)"),QSr=l(),L3=a("li"),KMe=a("strong"),HSr=o("roformer"),USr=o(" \u2014 "),OY=a("a"),JSr=o("FlaxRoFormerForMaskedLM"),YSr=o(" (RoFormer model)"),KSr=l(),x3=a("li"),ZMe=a("strong"),ZSr=o("t5"),eRr=o(" \u2014 "),VY=a("a"),oRr=o("FlaxT5ForConditionalGeneration"),rRr=o(" (T5 model)"),tRr=l(),$3=a("li"),eEe=a("strong"),aRr=o("wav2vec2"),nRr=o(" \u2014 "),XY=a("a"),sRr=o("FlaxWav2Vec2ForPreTraining"),lRr=o(" (Wav2Vec2 model)"),iRr=l(),k3=a("li"),oEe=a("strong"),dRr=o("xlm-roberta"),cRr=o(" \u2014 "),zY=a("a"),fRr=o("FlaxXLMRobertaForMaskedLM"),mRr=o(" (XLM-RoBERTa model)"),gRr=l(),F(S3.$$.fragment),tDe=l(),qc=a("h2"),R3=a("a"),rEe=a("span"),F(z9.$$.fragment),hRr=l(),tEe=a("span"),pRr=o("FlaxAutoModelForMaskedLM"),aDe=l(),hr=a("div"),F(W9.$$.fragment),_Rr=l(),jc=a("p"),uRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=a("a"),bRr=o("from_pretrained()"),vRr=o(" class method or the "),QY=a("a"),FRr=o("from_config()"),TRr=o(` class
method.`),MRr=l(),Q9=a("p"),ERr=o("This class cannot be instantiated directly using "),aEe=a("code"),CRr=o("__init__()"),wRr=o(" (throws an error)."),ARr=l(),Xt=a("div"),F(H9.$$.fragment),yRr=l(),nEe=a("p"),LRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xRr=l(),Dc=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),sEe=a("strong"),kRr=o("not"),SRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),RRr=o("from_pretrained()"),PRr=o(" to load the model weights."),BRr=l(),F(P3.$$.fragment),IRr=l(),Or=a("div"),F(U9.$$.fragment),NRr=l(),lEe=a("p"),qRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jRr=l(),un=a("p"),DRr=o("The model class to instantiate is selected based on the "),iEe=a("code"),GRr=o("model_type"),ORr=o(` property of the config object (either
passed as an argument or loaded from `),dEe=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=a("code"),zRr=o("pretrained_model_name_or_path"),WRr=o(":"),QRr=l(),Le=a("ul"),B3=a("li"),fEe=a("strong"),HRr=o("albert"),URr=o(" \u2014 "),UY=a("a"),JRr=o("FlaxAlbertForMaskedLM"),YRr=o(" (ALBERT model)"),KRr=l(),I3=a("li"),mEe=a("strong"),ZRr=o("bart"),ePr=o(" \u2014 "),JY=a("a"),oPr=o("FlaxBartForConditionalGeneration"),rPr=o(" (BART model)"),tPr=l(),N3=a("li"),gEe=a("strong"),aPr=o("bert"),nPr=o(" \u2014 "),YY=a("a"),sPr=o("FlaxBertForMaskedLM"),lPr=o(" (BERT model)"),iPr=l(),q3=a("li"),hEe=a("strong"),dPr=o("big_bird"),cPr=o(" \u2014 "),KY=a("a"),fPr=o("FlaxBigBirdForMaskedLM"),mPr=o(" (BigBird model)"),gPr=l(),j3=a("li"),pEe=a("strong"),hPr=o("distilbert"),pPr=o(" \u2014 "),ZY=a("a"),_Pr=o("FlaxDistilBertForMaskedLM"),uPr=o(" (DistilBERT model)"),bPr=l(),D3=a("li"),_Ee=a("strong"),vPr=o("electra"),FPr=o(" \u2014 "),eK=a("a"),TPr=o("FlaxElectraForMaskedLM"),MPr=o(" (ELECTRA model)"),EPr=l(),G3=a("li"),uEe=a("strong"),CPr=o("mbart"),wPr=o(" \u2014 "),oK=a("a"),APr=o("FlaxMBartForConditionalGeneration"),yPr=o(" (mBART model)"),LPr=l(),O3=a("li"),bEe=a("strong"),xPr=o("roberta"),$Pr=o(" \u2014 "),rK=a("a"),kPr=o("FlaxRobertaForMaskedLM"),SPr=o(" (RoBERTa model)"),RPr=l(),V3=a("li"),vEe=a("strong"),PPr=o("roformer"),BPr=o(" \u2014 "),tK=a("a"),IPr=o("FlaxRoFormerForMaskedLM"),NPr=o(" (RoFormer model)"),qPr=l(),X3=a("li"),FEe=a("strong"),jPr=o("xlm-roberta"),DPr=o(" \u2014 "),aK=a("a"),GPr=o("FlaxXLMRobertaForMaskedLM"),OPr=o(" (XLM-RoBERTa model)"),VPr=l(),F(z3.$$.fragment),nDe=l(),Gc=a("h2"),W3=a("a"),TEe=a("span"),F(J9.$$.fragment),XPr=l(),MEe=a("span"),zPr=o("FlaxAutoModelForSeq2SeqLM"),sDe=l(),pr=a("div"),F(Y9.$$.fragment),WPr=l(),Oc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),sK=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),K9=a("p"),ZPr=o("This class cannot be instantiated directly using "),EEe=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),zt=a("div"),F(Z9.$$.fragment),tBr=l(),CEe=a("p"),aBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nBr=l(),Vc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),wEe=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),fBr=l(),F(Q3.$$.fragment),mBr=l(),Vr=a("div"),F(ex.$$.fragment),gBr=l(),AEe=a("p"),hBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pBr=l(),bn=a("p"),_Br=o("The model class to instantiate is selected based on the "),yEe=a("code"),uBr=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),LEe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),Pe=a("ul"),H3=a("li"),$Ee=a("strong"),CBr=o("bart"),wBr=o(" \u2014 "),iK=a("a"),ABr=o("FlaxBartForConditionalGeneration"),yBr=o(" (BART model)"),LBr=l(),U3=a("li"),kEe=a("strong"),xBr=o("blenderbot"),$Br=o(" \u2014 "),dK=a("a"),kBr=o("FlaxBlenderbotForConditionalGeneration"),SBr=o(" (Blenderbot model)"),RBr=l(),J3=a("li"),SEe=a("strong"),PBr=o("blenderbot-small"),BBr=o(" \u2014 "),cK=a("a"),IBr=o("FlaxBlenderbotSmallForConditionalGeneration"),NBr=o(" (BlenderbotSmall model)"),qBr=l(),Y3=a("li"),REe=a("strong"),jBr=o("encoder-decoder"),DBr=o(" \u2014 "),fK=a("a"),GBr=o("FlaxEncoderDecoderModel"),OBr=o(" (Encoder decoder model)"),VBr=l(),K3=a("li"),PEe=a("strong"),XBr=o("marian"),zBr=o(" \u2014 "),mK=a("a"),WBr=o("FlaxMarianMTModel"),QBr=o(" (Marian model)"),HBr=l(),Z3=a("li"),BEe=a("strong"),UBr=o("mbart"),JBr=o(" \u2014 "),gK=a("a"),YBr=o("FlaxMBartForConditionalGeneration"),KBr=o(" (mBART model)"),ZBr=l(),ew=a("li"),IEe=a("strong"),eIr=o("mt5"),oIr=o(" \u2014 "),hK=a("a"),rIr=o("FlaxMT5ForConditionalGeneration"),tIr=o(" (mT5 model)"),aIr=l(),ow=a("li"),NEe=a("strong"),nIr=o("pegasus"),sIr=o(" \u2014 "),pK=a("a"),lIr=o("FlaxPegasusForConditionalGeneration"),iIr=o(" (Pegasus model)"),dIr=l(),rw=a("li"),qEe=a("strong"),cIr=o("t5"),fIr=o(" \u2014 "),_K=a("a"),mIr=o("FlaxT5ForConditionalGeneration"),gIr=o(" (T5 model)"),hIr=l(),F(tw.$$.fragment),lDe=l(),Xc=a("h2"),aw=a("a"),jEe=a("span"),F(ox.$$.fragment),pIr=l(),DEe=a("span"),_Ir=o("FlaxAutoModelForSequenceClassification"),iDe=l(),_r=a("div"),F(rx.$$.fragment),uIr=l(),zc=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),bK=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),tx=a("p"),CIr=o("This class cannot be instantiated directly using "),GEe=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),yIr=l(),Wt=a("div"),F(ax.$$.fragment),LIr=l(),OEe=a("p"),xIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Ir=l(),Wc=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),PIr=o("from_pretrained()"),BIr=o(" to load the model weights."),IIr=l(),F(nw.$$.fragment),NIr=l(),Xr=a("div"),F(nx.$$.fragment),qIr=l(),XEe=a("p"),jIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DIr=l(),vn=a("p"),GIr=o("The model class to instantiate is selected based on the "),zEe=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),WIr=o("pretrained_model_name_or_path"),QIr=o(":"),HIr=l(),xe=a("ul"),sw=a("li"),HEe=a("strong"),UIr=o("albert"),JIr=o(" \u2014 "),FK=a("a"),YIr=o("FlaxAlbertForSequenceClassification"),KIr=o(" (ALBERT model)"),ZIr=l(),lw=a("li"),UEe=a("strong"),eNr=o("bart"),oNr=o(" \u2014 "),TK=a("a"),rNr=o("FlaxBartForSequenceClassification"),tNr=o(" (BART model)"),aNr=l(),iw=a("li"),JEe=a("strong"),nNr=o("bert"),sNr=o(" \u2014 "),MK=a("a"),lNr=o("FlaxBertForSequenceClassification"),iNr=o(" (BERT model)"),dNr=l(),dw=a("li"),YEe=a("strong"),cNr=o("big_bird"),fNr=o(" \u2014 "),EK=a("a"),mNr=o("FlaxBigBirdForSequenceClassification"),gNr=o(" (BigBird model)"),hNr=l(),cw=a("li"),KEe=a("strong"),pNr=o("distilbert"),_Nr=o(" \u2014 "),CK=a("a"),uNr=o("FlaxDistilBertForSequenceClassification"),bNr=o(" (DistilBERT model)"),vNr=l(),fw=a("li"),ZEe=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),wK=a("a"),MNr=o("FlaxElectraForSequenceClassification"),ENr=o(" (ELECTRA model)"),CNr=l(),mw=a("li"),eCe=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),AK=a("a"),yNr=o("FlaxMBartForSequenceClassification"),LNr=o(" (mBART model)"),xNr=l(),gw=a("li"),oCe=a("strong"),$Nr=o("roberta"),kNr=o(" \u2014 "),yK=a("a"),SNr=o("FlaxRobertaForSequenceClassification"),RNr=o(" (RoBERTa model)"),PNr=l(),hw=a("li"),rCe=a("strong"),BNr=o("roformer"),INr=o(" \u2014 "),LK=a("a"),NNr=o("FlaxRoFormerForSequenceClassification"),qNr=o(" (RoFormer model)"),jNr=l(),pw=a("li"),tCe=a("strong"),DNr=o("xlm-roberta"),GNr=o(" \u2014 "),xK=a("a"),ONr=o("FlaxXLMRobertaForSequenceClassification"),VNr=o(" (XLM-RoBERTa model)"),XNr=l(),F(_w.$$.fragment),dDe=l(),Qc=a("h2"),uw=a("a"),aCe=a("span"),F(sx.$$.fragment),zNr=l(),nCe=a("span"),WNr=o("FlaxAutoModelForQuestionAnswering"),cDe=l(),ur=a("div"),F(lx.$$.fragment),QNr=l(),Hc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),kK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),ix=a("p"),eqr=o("This class cannot be instantiated directly using "),sCe=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Qt=a("div"),F(dx.$$.fragment),aqr=l(),lCe=a("p"),nqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sqr=l(),Uc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(bw.$$.fragment),gqr=l(),zr=a("div"),F(cx.$$.fragment),hqr=l(),dCe=a("p"),pqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_qr=l(),Fn=a("p"),uqr=o("The model class to instantiate is selected based on the "),cCe=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),$e=a("ul"),vw=a("li"),gCe=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),RK=a("a"),yqr=o("FlaxAlbertForQuestionAnswering"),Lqr=o(" (ALBERT model)"),xqr=l(),Fw=a("li"),hCe=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),PK=a("a"),Sqr=o("FlaxBartForQuestionAnswering"),Rqr=o(" (BART model)"),Pqr=l(),Tw=a("li"),pCe=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),BK=a("a"),Nqr=o("FlaxBertForQuestionAnswering"),qqr=o(" (BERT model)"),jqr=l(),Mw=a("li"),_Ce=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),IK=a("a"),Oqr=o("FlaxBigBirdForQuestionAnswering"),Vqr=o(" (BigBird model)"),Xqr=l(),Ew=a("li"),uCe=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),NK=a("a"),Qqr=o("FlaxDistilBertForQuestionAnswering"),Hqr=o(" (DistilBERT model)"),Uqr=l(),Cw=a("li"),bCe=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),qK=a("a"),Kqr=o("FlaxElectraForQuestionAnswering"),Zqr=o(" (ELECTRA model)"),ejr=l(),ww=a("li"),vCe=a("strong"),ojr=o("mbart"),rjr=o(" \u2014 "),jK=a("a"),tjr=o("FlaxMBartForQuestionAnswering"),ajr=o(" (mBART model)"),njr=l(),Aw=a("li"),FCe=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),DK=a("a"),ijr=o("FlaxRobertaForQuestionAnswering"),djr=o(" (RoBERTa model)"),cjr=l(),yw=a("li"),TCe=a("strong"),fjr=o("roformer"),mjr=o(" \u2014 "),GK=a("a"),gjr=o("FlaxRoFormerForQuestionAnswering"),hjr=o(" (RoFormer model)"),pjr=l(),Lw=a("li"),MCe=a("strong"),_jr=o("xlm-roberta"),ujr=o(" \u2014 "),OK=a("a"),bjr=o("FlaxXLMRobertaForQuestionAnswering"),vjr=o(" (XLM-RoBERTa model)"),Fjr=l(),F(xw.$$.fragment),fDe=l(),Jc=a("h2"),$w=a("a"),ECe=a("span"),F(fx.$$.fragment),Tjr=l(),CCe=a("span"),Mjr=o("FlaxAutoModelForTokenClassification"),mDe=l(),br=a("div"),F(mx.$$.fragment),Ejr=l(),Yc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),XK=a("a"),yjr=o("from_config()"),Ljr=o(` class
method.`),xjr=l(),gx=a("p"),$jr=o("This class cannot be instantiated directly using "),wCe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Ht=a("div"),F(hx.$$.fragment),Pjr=l(),ACe=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ijr=l(),Kc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),yCe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(kw.$$.fragment),Vjr=l(),Wr=a("div"),F(px.$$.fragment),Xjr=l(),LCe=a("p"),zjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wjr=l(),Tn=a("p"),Qjr=o("The model class to instantiate is selected based on the "),xCe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),De=a("ul"),Sw=a("li"),SCe=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),WK=a("a"),tDr=o("FlaxAlbertForTokenClassification"),aDr=o(" (ALBERT model)"),nDr=l(),Rw=a("li"),RCe=a("strong"),sDr=o("bert"),lDr=o(" \u2014 "),QK=a("a"),iDr=o("FlaxBertForTokenClassification"),dDr=o(" (BERT model)"),cDr=l(),Pw=a("li"),PCe=a("strong"),fDr=o("big_bird"),mDr=o(" \u2014 "),HK=a("a"),gDr=o("FlaxBigBirdForTokenClassification"),hDr=o(" (BigBird model)"),pDr=l(),Bw=a("li"),BCe=a("strong"),_Dr=o("distilbert"),uDr=o(" \u2014 "),UK=a("a"),bDr=o("FlaxDistilBertForTokenClassification"),vDr=o(" (DistilBERT model)"),FDr=l(),Iw=a("li"),ICe=a("strong"),TDr=o("electra"),MDr=o(" \u2014 "),JK=a("a"),EDr=o("FlaxElectraForTokenClassification"),CDr=o(" (ELECTRA model)"),wDr=l(),Nw=a("li"),NCe=a("strong"),ADr=o("roberta"),yDr=o(" \u2014 "),YK=a("a"),LDr=o("FlaxRobertaForTokenClassification"),xDr=o(" (RoBERTa model)"),$Dr=l(),qw=a("li"),qCe=a("strong"),kDr=o("roformer"),SDr=o(" \u2014 "),KK=a("a"),RDr=o("FlaxRoFormerForTokenClassification"),PDr=o(" (RoFormer model)"),BDr=l(),jw=a("li"),jCe=a("strong"),IDr=o("xlm-roberta"),NDr=o(" \u2014 "),ZK=a("a"),qDr=o("FlaxXLMRobertaForTokenClassification"),jDr=o(" (XLM-RoBERTa model)"),DDr=l(),F(Dw.$$.fragment),gDe=l(),Zc=a("h2"),Gw=a("a"),DCe=a("span"),F(_x.$$.fragment),GDr=l(),GCe=a("span"),ODr=o("FlaxAutoModelForMultipleChoice"),hDe=l(),vr=a("div"),F(ux.$$.fragment),VDr=l(),ef=a("p"),XDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=a("a"),zDr=o("from_pretrained()"),WDr=o(" class method or the "),oZ=a("a"),QDr=o("from_config()"),HDr=o(` class
method.`),UDr=l(),bx=a("p"),JDr=o("This class cannot be instantiated directly using "),OCe=a("code"),YDr=o("__init__()"),KDr=o(" (throws an error)."),ZDr=l(),Ut=a("div"),F(vx.$$.fragment),eGr=l(),VCe=a("p"),oGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rGr=l(),of=a("p"),tGr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),aGr=o("not"),nGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),sGr=o("from_pretrained()"),lGr=o(" to load the model weights."),iGr=l(),F(Ow.$$.fragment),dGr=l(),Qr=a("div"),F(Fx.$$.fragment),cGr=l(),zCe=a("p"),fGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mGr=l(),Mn=a("p"),gGr=o("The model class to instantiate is selected based on the "),WCe=a("code"),hGr=o("model_type"),pGr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),_Gr=o("pretrained_model_name_or_path"),uGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),bGr=o("pretrained_model_name_or_path"),vGr=o(":"),FGr=l(),Ge=a("ul"),Vw=a("li"),UCe=a("strong"),TGr=o("albert"),MGr=o(" \u2014 "),tZ=a("a"),EGr=o("FlaxAlbertForMultipleChoice"),CGr=o(" (ALBERT model)"),wGr=l(),Xw=a("li"),JCe=a("strong"),AGr=o("bert"),yGr=o(" \u2014 "),aZ=a("a"),LGr=o("FlaxBertForMultipleChoice"),xGr=o(" (BERT model)"),$Gr=l(),zw=a("li"),YCe=a("strong"),kGr=o("big_bird"),SGr=o(" \u2014 "),nZ=a("a"),RGr=o("FlaxBigBirdForMultipleChoice"),PGr=o(" (BigBird model)"),BGr=l(),Ww=a("li"),KCe=a("strong"),IGr=o("distilbert"),NGr=o(" \u2014 "),sZ=a("a"),qGr=o("FlaxDistilBertForMultipleChoice"),jGr=o(" (DistilBERT model)"),DGr=l(),Qw=a("li"),ZCe=a("strong"),GGr=o("electra"),OGr=o(" \u2014 "),lZ=a("a"),VGr=o("FlaxElectraForMultipleChoice"),XGr=o(" (ELECTRA model)"),zGr=l(),Hw=a("li"),e5e=a("strong"),WGr=o("roberta"),QGr=o(" \u2014 "),iZ=a("a"),HGr=o("FlaxRobertaForMultipleChoice"),UGr=o(" (RoBERTa model)"),JGr=l(),Uw=a("li"),o5e=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),dZ=a("a"),ZGr=o("FlaxRoFormerForMultipleChoice"),eOr=o(" (RoFormer model)"),oOr=l(),Jw=a("li"),r5e=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),cZ=a("a"),aOr=o("FlaxXLMRobertaForMultipleChoice"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(Yw.$$.fragment),pDe=l(),rf=a("h2"),Kw=a("a"),t5e=a("span"),F(Tx.$$.fragment),lOr=l(),a5e=a("span"),iOr=o("FlaxAutoModelForNextSentencePrediction"),_De=l(),Fr=a("div"),F(Mx.$$.fragment),dOr=l(),tf=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),mZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Ex=a("p"),_Or=o("This class cannot be instantiated directly using "),n5e=a("code"),uOr=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Jt=a("div"),F(Cx.$$.fragment),FOr=l(),s5e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MOr=l(),af=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),AOr=o("from_pretrained()"),yOr=o(" to load the model weights."),LOr=l(),F(Zw.$$.fragment),xOr=l(),Hr=a("div"),F(wx.$$.fragment),$Or=l(),i5e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SOr=l(),En=a("p"),ROr=o("The model class to instantiate is selected based on the "),d5e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),m5e=a("ul"),e0=a("li"),g5e=a("strong"),GOr=o("bert"),OOr=o(" \u2014 "),hZ=a("a"),VOr=o("FlaxBertForNextSentencePrediction"),XOr=o(" (BERT model)"),zOr=l(),F(o0.$$.fragment),uDe=l(),nf=a("h2"),r0=a("a"),h5e=a("span"),F(Ax.$$.fragment),WOr=l(),p5e=a("span"),QOr=o("FlaxAutoModelForImageClassification"),bDe=l(),Tr=a("div"),F(yx.$$.fragment),HOr=l(),sf=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),_Z=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),Lx=a("p"),oVr=o("This class cannot be instantiated directly using "),_5e=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Yt=a("div"),F(xx.$$.fragment),nVr=l(),u5e=a("p"),sVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lVr=l(),lf=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),b5e=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(t0.$$.fragment),hVr=l(),Ur=a("div"),F($x.$$.fragment),pVr=l(),v5e=a("p"),_Vr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uVr=l(),Cn=a("p"),bVr=o("The model class to instantiate is selected based on the "),F5e=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),kx=a("ul"),a0=a("li"),E5e=a("strong"),AVr=o("beit"),yVr=o(" \u2014 "),bZ=a("a"),LVr=o("FlaxBeitForImageClassification"),xVr=o(" (BEiT model)"),$Vr=l(),n0=a("li"),C5e=a("strong"),kVr=o("vit"),SVr=o(" \u2014 "),vZ=a("a"),RVr=o("FlaxViTForImageClassification"),PVr=o(" (ViT model)"),BVr=l(),F(s0.$$.fragment),vDe=l(),df=a("h2"),l0=a("a"),w5e=a("span"),F(Sx.$$.fragment),IVr=l(),A5e=a("span"),NVr=o("FlaxAutoModelForVision2Seq"),FDe=l(),Mr=a("div"),F(Rx.$$.fragment),qVr=l(),cf=a("p"),jVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=a("a"),DVr=o("from_pretrained()"),GVr=o(" class method or the "),TZ=a("a"),OVr=o("from_config()"),VVr=o(` class
method.`),XVr=l(),Px=a("p"),zVr=o("This class cannot be instantiated directly using "),y5e=a("code"),WVr=o("__init__()"),QVr=o(" (throws an error)."),HVr=l(),Kt=a("div"),F(Bx.$$.fragment),UVr=l(),L5e=a("p"),JVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YVr=l(),ff=a("p"),KVr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),ZVr=o("not"),eXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),oXr=o("from_pretrained()"),rXr=o(" to load the model weights."),tXr=l(),F(i0.$$.fragment),aXr=l(),Jr=a("div"),F(Ix.$$.fragment),nXr=l(),$5e=a("p"),sXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lXr=l(),wn=a("p"),iXr=o("The model class to instantiate is selected based on the "),k5e=a("code"),dXr=o("model_type"),cXr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),fXr=o("pretrained_model_name_or_path"),mXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),gXr=o("pretrained_model_name_or_path"),hXr=o(":"),pXr=l(),P5e=a("ul"),d0=a("li"),B5e=a("strong"),_Xr=o("vision-encoder-decoder"),uXr=o(" \u2014 "),EZ=a("a"),bXr=o("FlaxVisionEncoderDecoderModel"),vXr=o(" (Vision Encoder decoder model)"),FXr=l(),F(c0.$$.fragment),this.h()},l(f){const u=ckt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Nx=s(p);m=n(Nx,"A",{id:!0,class:!0,href:!0});var I5e=s(m);_=n(I5e,"SPAN",{});var N5e=s(_);T(d.$$.fragment,N5e),N5e.forEach(t),I5e.forEach(t),h=i(Nx),Mo=n(Nx,"SPAN",{});var q5e=s(Mo);fi=r(q5e,"Auto Classes"),q5e.forEach(t),Nx.forEach(t),pf=i(f),rt=n(f,"P",{});var qx=s(rt);mi=r(qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(qx,"CODE",{});var j5e=s(gi);LA=r(j5e,"from_pretrained()"),j5e.forEach(t),_f=r(qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var D5e=s(yn);xA=r(D5e,"AutoConfig"),D5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var G5e=s(xn);$A=r(G5e,"AutoModel"),G5e.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var O5e=s($n);kA=r(O5e,"AutoTokenizer"),O5e.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var jx=s(Ae);J$=r(jx,"will create a model that is an instance of "),ui=n(jx,"A",{href:!0});var V5e=s(ui);Y$=r(V5e,"BertModel"),V5e.forEach(t),K$=r(jx,"."),jx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Dx=s(wa);Z$=r(Dx,"There is one class of "),bf=n(Dx,"CODE",{});var X5e=s(bf);ek=r(X5e,"AutoModel"),X5e.forEach(t),xOe=r(Dx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Dx.forEach(t),bqe=i(f),bi=n(f,"H2",{class:!0});var Gx=s(bi);vf=n(Gx,"A",{id:!0,class:!0,href:!0});var z5e=s(vf);_oe=n(z5e,"SPAN",{});var W5e=s(_oe);T(SA.$$.fragment,W5e),W5e.forEach(t),z5e.forEach(t),$Oe=i(Gx),uoe=n(Gx,"SPAN",{});var Q5e=s(uoe);kOe=r(Q5e,"Extending the Auto Classes"),Q5e.forEach(t),Gx.forEach(t),vqe=i(f),kn=n(f,"P",{});var mf=s(kn);SOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=n(mf,"CODE",{});var H5e=s(boe);ROe=r(H5e,"NewModel"),H5e.forEach(t),POe=r(mf,", make sure you have a "),voe=n(mf,"CODE",{});var U5e=s(voe);BOe=r(U5e,"NewModelConfig"),U5e.forEach(t),IOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Fqe=i(f),T(RA.$$.fragment,f),Tqe=i(f),ok=n(f,"P",{});var J5e=s(ok);NOe=r(J5e,"You will then be able to use the auto classes like you would usually do!"),J5e.forEach(t),Mqe=i(f),T(Ff.$$.fragment,f),Eqe=i(f),vi=n(f,"H2",{class:!0});var Ox=s(vi);Tf=n(Ox,"A",{id:!0,class:!0,href:!0});var Y5e=s(Tf);Foe=n(Y5e,"SPAN",{});var K5e=s(Foe);T(PA.$$.fragment,K5e),K5e.forEach(t),Y5e.forEach(t),qOe=i(Ox),Toe=n(Ox,"SPAN",{});var Z5e=s(Toe);jOe=r(Z5e,"AutoConfig"),Z5e.forEach(t),Ox.forEach(t),Cqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(BA.$$.fragment,et),DOe=i(et),IA=n(et,"P",{});var Vx=s(IA);GOe=r(Vx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=n(Vx,"A",{href:!0});var e3e=s(rk);OOe=r(e3e,"from_pretrained()"),e3e.forEach(t),VOe=r(Vx," class method."),Vx.forEach(t),XOe=i(et),NA=n(et,"P",{});var Xx=s(NA);zOe=r(Xx,"This class cannot be instantiated directly using "),Moe=n(Xx,"CODE",{});var o3e=s(Moe);WOe=r(o3e,"__init__()"),o3e.forEach(t),QOe=r(Xx," (throws an error)."),Xx.forEach(t),HOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(qA.$$.fragment,ot),UOe=i(ot),Eoe=n(ot,"P",{});var r3e=s(Eoe);JOe=r(r3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),r3e.forEach(t),YOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);KOe=r(gf,"The configuration class to instantiate is selected based on the "),Coe=n(gf,"CODE",{});var t3e=s(Coe);ZOe=r(t3e,"model_type"),t3e.forEach(t),eVe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=n(gf,"CODE",{});var a3e=s(woe);oVe=r(a3e,"pretrained_model_name_or_path"),a3e.forEach(t),rVe=r(gf,":"),gf.forEach(t),tVe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var f0=s(Mf);Aoe=n(f0,"STRONG",{});var n3e=s(Aoe);aVe=r(n3e,"albert"),n3e.forEach(t),nVe=r(f0," \u2014 "),tk=n(f0,"A",{href:!0});var s3e=s(tk);sVe=r(s3e,"AlbertConfig"),s3e.forEach(t),lVe=r(f0," (ALBERT model)"),f0.forEach(t),iVe=i(y),Ef=n(y,"LI",{});var m0=s(Ef);yoe=n(m0,"STRONG",{});var l3e=s(yoe);dVe=r(l3e,"bart"),l3e.forEach(t),cVe=r(m0," \u2014 "),ak=n(m0,"A",{href:!0});var i3e=s(ak);fVe=r(i3e,"BartConfig"),i3e.forEach(t),mVe=r(m0," (BART model)"),m0.forEach(t),gVe=i(y),Cf=n(y,"LI",{});var g0=s(Cf);Loe=n(g0,"STRONG",{});var d3e=s(Loe);hVe=r(d3e,"beit"),d3e.forEach(t),pVe=r(g0," \u2014 "),nk=n(g0,"A",{href:!0});var c3e=s(nk);_Ve=r(c3e,"BeitConfig"),c3e.forEach(t),uVe=r(g0," (BEiT model)"),g0.forEach(t),bVe=i(y),wf=n(y,"LI",{});var h0=s(wf);xoe=n(h0,"STRONG",{});var f3e=s(xoe);vVe=r(f3e,"bert"),f3e.forEach(t),FVe=r(h0," \u2014 "),sk=n(h0,"A",{href:!0});var m3e=s(sk);TVe=r(m3e,"BertConfig"),m3e.forEach(t),MVe=r(h0," (BERT model)"),h0.forEach(t),EVe=i(y),Af=n(y,"LI",{});var p0=s(Af);$oe=n(p0,"STRONG",{});var g3e=s($oe);CVe=r(g3e,"bert-generation"),g3e.forEach(t),wVe=r(p0," \u2014 "),lk=n(p0,"A",{href:!0});var h3e=s(lk);AVe=r(h3e,"BertGenerationConfig"),h3e.forEach(t),yVe=r(p0," (Bert Generation model)"),p0.forEach(t),LVe=i(y),yf=n(y,"LI",{});var _0=s(yf);koe=n(_0,"STRONG",{});var p3e=s(koe);xVe=r(p3e,"big_bird"),p3e.forEach(t),$Ve=r(_0," \u2014 "),ik=n(_0,"A",{href:!0});var _3e=s(ik);kVe=r(_3e,"BigBirdConfig"),_3e.forEach(t),SVe=r(_0," (BigBird model)"),_0.forEach(t),RVe=i(y),Lf=n(y,"LI",{});var u0=s(Lf);Soe=n(u0,"STRONG",{});var u3e=s(Soe);PVe=r(u3e,"bigbird_pegasus"),u3e.forEach(t),BVe=r(u0," \u2014 "),dk=n(u0,"A",{href:!0});var b3e=s(dk);IVe=r(b3e,"BigBirdPegasusConfig"),b3e.forEach(t),NVe=r(u0," (BigBirdPegasus model)"),u0.forEach(t),qVe=i(y),xf=n(y,"LI",{});var b0=s(xf);Roe=n(b0,"STRONG",{});var v3e=s(Roe);jVe=r(v3e,"blenderbot"),v3e.forEach(t),DVe=r(b0," \u2014 "),ck=n(b0,"A",{href:!0});var F3e=s(ck);GVe=r(F3e,"BlenderbotConfig"),F3e.forEach(t),OVe=r(b0," (Blenderbot model)"),b0.forEach(t),VVe=i(y),$f=n(y,"LI",{});var v0=s($f);Poe=n(v0,"STRONG",{});var T3e=s(Poe);XVe=r(T3e,"blenderbot-small"),T3e.forEach(t),zVe=r(v0," \u2014 "),fk=n(v0,"A",{href:!0});var M3e=s(fk);WVe=r(M3e,"BlenderbotSmallConfig"),M3e.forEach(t),QVe=r(v0," (BlenderbotSmall model)"),v0.forEach(t),HVe=i(y),kf=n(y,"LI",{});var F0=s(kf);Boe=n(F0,"STRONG",{});var E3e=s(Boe);UVe=r(E3e,"bloom"),E3e.forEach(t),JVe=r(F0," \u2014 "),mk=n(F0,"A",{href:!0});var C3e=s(mk);YVe=r(C3e,"BloomConfig"),C3e.forEach(t),KVe=r(F0," (BLOOM model)"),F0.forEach(t),ZVe=i(y),Sf=n(y,"LI",{});var T0=s(Sf);Ioe=n(T0,"STRONG",{});var w3e=s(Ioe);eXe=r(w3e,"camembert"),w3e.forEach(t),oXe=r(T0," \u2014 "),gk=n(T0,"A",{href:!0});var A3e=s(gk);rXe=r(A3e,"CamembertConfig"),A3e.forEach(t),tXe=r(T0," (CamemBERT model)"),T0.forEach(t),aXe=i(y),Rf=n(y,"LI",{});var M0=s(Rf);Noe=n(M0,"STRONG",{});var y3e=s(Noe);nXe=r(y3e,"canine"),y3e.forEach(t),sXe=r(M0," \u2014 "),hk=n(M0,"A",{href:!0});var L3e=s(hk);lXe=r(L3e,"CanineConfig"),L3e.forEach(t),iXe=r(M0," (Canine model)"),M0.forEach(t),dXe=i(y),Pf=n(y,"LI",{});var E0=s(Pf);qoe=n(E0,"STRONG",{});var x3e=s(qoe);cXe=r(x3e,"clip"),x3e.forEach(t),fXe=r(E0," \u2014 "),pk=n(E0,"A",{href:!0});var $3e=s(pk);mXe=r($3e,"CLIPConfig"),$3e.forEach(t),gXe=r(E0," (CLIP model)"),E0.forEach(t),hXe=i(y),Bf=n(y,"LI",{});var C0=s(Bf);joe=n(C0,"STRONG",{});var k3e=s(joe);pXe=r(k3e,"convbert"),k3e.forEach(t),_Xe=r(C0," \u2014 "),_k=n(C0,"A",{href:!0});var S3e=s(_k);uXe=r(S3e,"ConvBertConfig"),S3e.forEach(t),bXe=r(C0," (ConvBERT model)"),C0.forEach(t),vXe=i(y),If=n(y,"LI",{});var w0=s(If);Doe=n(w0,"STRONG",{});var R3e=s(Doe);FXe=r(R3e,"convnext"),R3e.forEach(t),TXe=r(w0," \u2014 "),uk=n(w0,"A",{href:!0});var P3e=s(uk);MXe=r(P3e,"ConvNextConfig"),P3e.forEach(t),EXe=r(w0," (ConvNext model)"),w0.forEach(t),CXe=i(y),Nf=n(y,"LI",{});var A0=s(Nf);Goe=n(A0,"STRONG",{});var B3e=s(Goe);wXe=r(B3e,"ctrl"),B3e.forEach(t),AXe=r(A0," \u2014 "),bk=n(A0,"A",{href:!0});var I3e=s(bk);yXe=r(I3e,"CTRLConfig"),I3e.forEach(t),LXe=r(A0," (CTRL model)"),A0.forEach(t),xXe=i(y),qf=n(y,"LI",{});var y0=s(qf);Ooe=n(y0,"STRONG",{});var N3e=s(Ooe);$Xe=r(N3e,"cvt"),N3e.forEach(t),kXe=r(y0," \u2014 "),vk=n(y0,"A",{href:!0});var q3e=s(vk);SXe=r(q3e,"CvtConfig"),q3e.forEach(t),RXe=r(y0," (CvT model)"),y0.forEach(t),PXe=i(y),jf=n(y,"LI",{});var L0=s(jf);Voe=n(L0,"STRONG",{});var j3e=s(Voe);BXe=r(j3e,"data2vec-audio"),j3e.forEach(t),IXe=r(L0," \u2014 "),Fk=n(L0,"A",{href:!0});var D3e=s(Fk);NXe=r(D3e,"Data2VecAudioConfig"),D3e.forEach(t),qXe=r(L0," (Data2VecAudio model)"),L0.forEach(t),jXe=i(y),Df=n(y,"LI",{});var x0=s(Df);Xoe=n(x0,"STRONG",{});var G3e=s(Xoe);DXe=r(G3e,"data2vec-text"),G3e.forEach(t),GXe=r(x0," \u2014 "),Tk=n(x0,"A",{href:!0});var O3e=s(Tk);OXe=r(O3e,"Data2VecTextConfig"),O3e.forEach(t),VXe=r(x0," (Data2VecText model)"),x0.forEach(t),XXe=i(y),Gf=n(y,"LI",{});var $0=s(Gf);zoe=n($0,"STRONG",{});var V3e=s(zoe);zXe=r(V3e,"data2vec-vision"),V3e.forEach(t),WXe=r($0," \u2014 "),Mk=n($0,"A",{href:!0});var X3e=s(Mk);QXe=r(X3e,"Data2VecVisionConfig"),X3e.forEach(t),HXe=r($0," (Data2VecVision model)"),$0.forEach(t),UXe=i(y),Of=n(y,"LI",{});var k0=s(Of);Woe=n(k0,"STRONG",{});var z3e=s(Woe);JXe=r(z3e,"deberta"),z3e.forEach(t),YXe=r(k0," \u2014 "),Ek=n(k0,"A",{href:!0});var W3e=s(Ek);KXe=r(W3e,"DebertaConfig"),W3e.forEach(t),ZXe=r(k0," (DeBERTa model)"),k0.forEach(t),eze=i(y),Vf=n(y,"LI",{});var S0=s(Vf);Qoe=n(S0,"STRONG",{});var Q3e=s(Qoe);oze=r(Q3e,"deberta-v2"),Q3e.forEach(t),rze=r(S0," \u2014 "),Ck=n(S0,"A",{href:!0});var H3e=s(Ck);tze=r(H3e,"DebertaV2Config"),H3e.forEach(t),aze=r(S0," (DeBERTa-v2 model)"),S0.forEach(t),nze=i(y),Xf=n(y,"LI",{});var R0=s(Xf);Hoe=n(R0,"STRONG",{});var U3e=s(Hoe);sze=r(U3e,"decision_transformer"),U3e.forEach(t),lze=r(R0," \u2014 "),wk=n(R0,"A",{href:!0});var MXr=s(wk);ize=r(MXr,"DecisionTransformerConfig"),MXr.forEach(t),dze=r(R0," (Decision Transformer model)"),R0.forEach(t),cze=i(y),zf=n(y,"LI",{});var J3e=s(zf);Uoe=n(J3e,"STRONG",{});var EXr=s(Uoe);fze=r(EXr,"deit"),EXr.forEach(t),mze=r(J3e," \u2014 "),Ak=n(J3e,"A",{href:!0});var CXr=s(Ak);gze=r(CXr,"DeiTConfig"),CXr.forEach(t),hze=r(J3e," (DeiT model)"),J3e.forEach(t),pze=i(y),Wf=n(y,"LI",{});var Y3e=s(Wf);Joe=n(Y3e,"STRONG",{});var wXr=s(Joe);_ze=r(wXr,"detr"),wXr.forEach(t),uze=r(Y3e," \u2014 "),yk=n(Y3e,"A",{href:!0});var AXr=s(yk);bze=r(AXr,"DetrConfig"),AXr.forEach(t),vze=r(Y3e," (DETR model)"),Y3e.forEach(t),Fze=i(y),Qf=n(y,"LI",{});var K3e=s(Qf);Yoe=n(K3e,"STRONG",{});var yXr=s(Yoe);Tze=r(yXr,"distilbert"),yXr.forEach(t),Mze=r(K3e," \u2014 "),Lk=n(K3e,"A",{href:!0});var LXr=s(Lk);Eze=r(LXr,"DistilBertConfig"),LXr.forEach(t),Cze=r(K3e," (DistilBERT model)"),K3e.forEach(t),wze=i(y),Hf=n(y,"LI",{});var Z3e=s(Hf);Koe=n(Z3e,"STRONG",{});var xXr=s(Koe);Aze=r(xXr,"dpr"),xXr.forEach(t),yze=r(Z3e," \u2014 "),xk=n(Z3e,"A",{href:!0});var $Xr=s(xk);Lze=r($Xr,"DPRConfig"),$Xr.forEach(t),xze=r(Z3e," (DPR model)"),Z3e.forEach(t),$ze=i(y),Uf=n(y,"LI",{});var ewe=s(Uf);Zoe=n(ewe,"STRONG",{});var kXr=s(Zoe);kze=r(kXr,"dpt"),kXr.forEach(t),Sze=r(ewe," \u2014 "),$k=n(ewe,"A",{href:!0});var SXr=s($k);Rze=r(SXr,"DPTConfig"),SXr.forEach(t),Pze=r(ewe," (DPT model)"),ewe.forEach(t),Bze=i(y),Jf=n(y,"LI",{});var owe=s(Jf);ere=n(owe,"STRONG",{});var RXr=s(ere);Ize=r(RXr,"electra"),RXr.forEach(t),Nze=r(owe," \u2014 "),kk=n(owe,"A",{href:!0});var PXr=s(kk);qze=r(PXr,"ElectraConfig"),PXr.forEach(t),jze=r(owe," (ELECTRA model)"),owe.forEach(t),Dze=i(y),Yf=n(y,"LI",{});var rwe=s(Yf);ore=n(rwe,"STRONG",{});var BXr=s(ore);Gze=r(BXr,"encoder-decoder"),BXr.forEach(t),Oze=r(rwe," \u2014 "),Sk=n(rwe,"A",{href:!0});var IXr=s(Sk);Vze=r(IXr,"EncoderDecoderConfig"),IXr.forEach(t),Xze=r(rwe," (Encoder decoder model)"),rwe.forEach(t),zze=i(y),Kf=n(y,"LI",{});var twe=s(Kf);rre=n(twe,"STRONG",{});var NXr=s(rre);Wze=r(NXr,"flaubert"),NXr.forEach(t),Qze=r(twe," \u2014 "),Rk=n(twe,"A",{href:!0});var qXr=s(Rk);Hze=r(qXr,"FlaubertConfig"),qXr.forEach(t),Uze=r(twe," (FlauBERT model)"),twe.forEach(t),Jze=i(y),Zf=n(y,"LI",{});var awe=s(Zf);tre=n(awe,"STRONG",{});var jXr=s(tre);Yze=r(jXr,"flava"),jXr.forEach(t),Kze=r(awe," \u2014 "),Pk=n(awe,"A",{href:!0});var DXr=s(Pk);Zze=r(DXr,"FlavaConfig"),DXr.forEach(t),eWe=r(awe," (Flava model)"),awe.forEach(t),oWe=i(y),em=n(y,"LI",{});var nwe=s(em);are=n(nwe,"STRONG",{});var GXr=s(are);rWe=r(GXr,"fnet"),GXr.forEach(t),tWe=r(nwe," \u2014 "),Bk=n(nwe,"A",{href:!0});var OXr=s(Bk);aWe=r(OXr,"FNetConfig"),OXr.forEach(t),nWe=r(nwe," (FNet model)"),nwe.forEach(t),sWe=i(y),om=n(y,"LI",{});var swe=s(om);nre=n(swe,"STRONG",{});var VXr=s(nre);lWe=r(VXr,"fsmt"),VXr.forEach(t),iWe=r(swe," \u2014 "),Ik=n(swe,"A",{href:!0});var XXr=s(Ik);dWe=r(XXr,"FSMTConfig"),XXr.forEach(t),cWe=r(swe," (FairSeq Machine-Translation model)"),swe.forEach(t),fWe=i(y),rm=n(y,"LI",{});var lwe=s(rm);sre=n(lwe,"STRONG",{});var zXr=s(sre);mWe=r(zXr,"funnel"),zXr.forEach(t),gWe=r(lwe," \u2014 "),Nk=n(lwe,"A",{href:!0});var WXr=s(Nk);hWe=r(WXr,"FunnelConfig"),WXr.forEach(t),pWe=r(lwe," (Funnel Transformer model)"),lwe.forEach(t),_We=i(y),tm=n(y,"LI",{});var iwe=s(tm);lre=n(iwe,"STRONG",{});var QXr=s(lre);uWe=r(QXr,"glpn"),QXr.forEach(t),bWe=r(iwe," \u2014 "),qk=n(iwe,"A",{href:!0});var HXr=s(qk);vWe=r(HXr,"GLPNConfig"),HXr.forEach(t),FWe=r(iwe," (GLPN model)"),iwe.forEach(t),TWe=i(y),am=n(y,"LI",{});var dwe=s(am);ire=n(dwe,"STRONG",{});var UXr=s(ire);MWe=r(UXr,"gpt2"),UXr.forEach(t),EWe=r(dwe," \u2014 "),jk=n(dwe,"A",{href:!0});var JXr=s(jk);CWe=r(JXr,"GPT2Config"),JXr.forEach(t),wWe=r(dwe," (OpenAI GPT-2 model)"),dwe.forEach(t),AWe=i(y),nm=n(y,"LI",{});var cwe=s(nm);dre=n(cwe,"STRONG",{});var YXr=s(dre);yWe=r(YXr,"gpt_neo"),YXr.forEach(t),LWe=r(cwe," \u2014 "),Dk=n(cwe,"A",{href:!0});var KXr=s(Dk);xWe=r(KXr,"GPTNeoConfig"),KXr.forEach(t),$We=r(cwe," (GPT Neo model)"),cwe.forEach(t),kWe=i(y),sm=n(y,"LI",{});var fwe=s(sm);cre=n(fwe,"STRONG",{});var ZXr=s(cre);SWe=r(ZXr,"gpt_neox"),ZXr.forEach(t),RWe=r(fwe," \u2014 "),Gk=n(fwe,"A",{href:!0});var ezr=s(Gk);PWe=r(ezr,"GPTNeoXConfig"),ezr.forEach(t),BWe=r(fwe," (GPT NeoX model)"),fwe.forEach(t),IWe=i(y),lm=n(y,"LI",{});var mwe=s(lm);fre=n(mwe,"STRONG",{});var ozr=s(fre);NWe=r(ozr,"gptj"),ozr.forEach(t),qWe=r(mwe," \u2014 "),Ok=n(mwe,"A",{href:!0});var rzr=s(Ok);jWe=r(rzr,"GPTJConfig"),rzr.forEach(t),DWe=r(mwe," (GPT-J model)"),mwe.forEach(t),GWe=i(y),im=n(y,"LI",{});var gwe=s(im);mre=n(gwe,"STRONG",{});var tzr=s(mre);OWe=r(tzr,"hubert"),tzr.forEach(t),VWe=r(gwe," \u2014 "),Vk=n(gwe,"A",{href:!0});var azr=s(Vk);XWe=r(azr,"HubertConfig"),azr.forEach(t),zWe=r(gwe," (Hubert model)"),gwe.forEach(t),WWe=i(y),dm=n(y,"LI",{});var hwe=s(dm);gre=n(hwe,"STRONG",{});var nzr=s(gre);QWe=r(nzr,"ibert"),nzr.forEach(t),HWe=r(hwe," \u2014 "),Xk=n(hwe,"A",{href:!0});var szr=s(Xk);UWe=r(szr,"IBertConfig"),szr.forEach(t),JWe=r(hwe," (I-BERT model)"),hwe.forEach(t),YWe=i(y),cm=n(y,"LI",{});var pwe=s(cm);hre=n(pwe,"STRONG",{});var lzr=s(hre);KWe=r(lzr,"imagegpt"),lzr.forEach(t),ZWe=r(pwe," \u2014 "),zk=n(pwe,"A",{href:!0});var izr=s(zk);eQe=r(izr,"ImageGPTConfig"),izr.forEach(t),oQe=r(pwe," (ImageGPT model)"),pwe.forEach(t),rQe=i(y),fm=n(y,"LI",{});var _we=s(fm);pre=n(_we,"STRONG",{});var dzr=s(pre);tQe=r(dzr,"layoutlm"),dzr.forEach(t),aQe=r(_we," \u2014 "),Wk=n(_we,"A",{href:!0});var czr=s(Wk);nQe=r(czr,"LayoutLMConfig"),czr.forEach(t),sQe=r(_we," (LayoutLM model)"),_we.forEach(t),lQe=i(y),mm=n(y,"LI",{});var uwe=s(mm);_re=n(uwe,"STRONG",{});var fzr=s(_re);iQe=r(fzr,"layoutlmv2"),fzr.forEach(t),dQe=r(uwe," \u2014 "),Qk=n(uwe,"A",{href:!0});var mzr=s(Qk);cQe=r(mzr,"LayoutLMv2Config"),mzr.forEach(t),fQe=r(uwe," (LayoutLMv2 model)"),uwe.forEach(t),mQe=i(y),gm=n(y,"LI",{});var bwe=s(gm);ure=n(bwe,"STRONG",{});var gzr=s(ure);gQe=r(gzr,"layoutlmv3"),gzr.forEach(t),hQe=r(bwe," \u2014 "),Hk=n(bwe,"A",{href:!0});var hzr=s(Hk);pQe=r(hzr,"LayoutLMv3Config"),hzr.forEach(t),_Qe=r(bwe," (LayoutLMv3 model)"),bwe.forEach(t),uQe=i(y),hm=n(y,"LI",{});var vwe=s(hm);bre=n(vwe,"STRONG",{});var pzr=s(bre);bQe=r(pzr,"led"),pzr.forEach(t),vQe=r(vwe," \u2014 "),Uk=n(vwe,"A",{href:!0});var _zr=s(Uk);FQe=r(_zr,"LEDConfig"),_zr.forEach(t),TQe=r(vwe," (LED model)"),vwe.forEach(t),MQe=i(y),pm=n(y,"LI",{});var Fwe=s(pm);vre=n(Fwe,"STRONG",{});var uzr=s(vre);EQe=r(uzr,"longformer"),uzr.forEach(t),CQe=r(Fwe," \u2014 "),Jk=n(Fwe,"A",{href:!0});var bzr=s(Jk);wQe=r(bzr,"LongformerConfig"),bzr.forEach(t),AQe=r(Fwe," (Longformer model)"),Fwe.forEach(t),yQe=i(y),_m=n(y,"LI",{});var Twe=s(_m);Fre=n(Twe,"STRONG",{});var vzr=s(Fre);LQe=r(vzr,"luke"),vzr.forEach(t),xQe=r(Twe," \u2014 "),Yk=n(Twe,"A",{href:!0});var Fzr=s(Yk);$Qe=r(Fzr,"LukeConfig"),Fzr.forEach(t),kQe=r(Twe," (LUKE model)"),Twe.forEach(t),SQe=i(y),um=n(y,"LI",{});var Mwe=s(um);Tre=n(Mwe,"STRONG",{});var Tzr=s(Tre);RQe=r(Tzr,"lxmert"),Tzr.forEach(t),PQe=r(Mwe," \u2014 "),Kk=n(Mwe,"A",{href:!0});var Mzr=s(Kk);BQe=r(Mzr,"LxmertConfig"),Mzr.forEach(t),IQe=r(Mwe," (LXMERT model)"),Mwe.forEach(t),NQe=i(y),bm=n(y,"LI",{});var Ewe=s(bm);Mre=n(Ewe,"STRONG",{});var Ezr=s(Mre);qQe=r(Ezr,"m2m_100"),Ezr.forEach(t),jQe=r(Ewe," \u2014 "),Zk=n(Ewe,"A",{href:!0});var Czr=s(Zk);DQe=r(Czr,"M2M100Config"),Czr.forEach(t),GQe=r(Ewe," (M2M100 model)"),Ewe.forEach(t),OQe=i(y),vm=n(y,"LI",{});var Cwe=s(vm);Ere=n(Cwe,"STRONG",{});var wzr=s(Ere);VQe=r(wzr,"marian"),wzr.forEach(t),XQe=r(Cwe," \u2014 "),eS=n(Cwe,"A",{href:!0});var Azr=s(eS);zQe=r(Azr,"MarianConfig"),Azr.forEach(t),WQe=r(Cwe," (Marian model)"),Cwe.forEach(t),QQe=i(y),Fm=n(y,"LI",{});var wwe=s(Fm);Cre=n(wwe,"STRONG",{});var yzr=s(Cre);HQe=r(yzr,"maskformer"),yzr.forEach(t),UQe=r(wwe," \u2014 "),oS=n(wwe,"A",{href:!0});var Lzr=s(oS);JQe=r(Lzr,"MaskFormerConfig"),Lzr.forEach(t),YQe=r(wwe," (MaskFormer model)"),wwe.forEach(t),KQe=i(y),Tm=n(y,"LI",{});var Awe=s(Tm);wre=n(Awe,"STRONG",{});var xzr=s(wre);ZQe=r(xzr,"mbart"),xzr.forEach(t),eHe=r(Awe," \u2014 "),rS=n(Awe,"A",{href:!0});var $zr=s(rS);oHe=r($zr,"MBartConfig"),$zr.forEach(t),rHe=r(Awe," (mBART model)"),Awe.forEach(t),tHe=i(y),Mm=n(y,"LI",{});var ywe=s(Mm);Are=n(ywe,"STRONG",{});var kzr=s(Are);aHe=r(kzr,"megatron-bert"),kzr.forEach(t),nHe=r(ywe," \u2014 "),tS=n(ywe,"A",{href:!0});var Szr=s(tS);sHe=r(Szr,"MegatronBertConfig"),Szr.forEach(t),lHe=r(ywe," (MegatronBert model)"),ywe.forEach(t),iHe=i(y),Em=n(y,"LI",{});var Lwe=s(Em);yre=n(Lwe,"STRONG",{});var Rzr=s(yre);dHe=r(Rzr,"mobilebert"),Rzr.forEach(t),cHe=r(Lwe," \u2014 "),aS=n(Lwe,"A",{href:!0});var Pzr=s(aS);fHe=r(Pzr,"MobileBertConfig"),Pzr.forEach(t),mHe=r(Lwe," (MobileBERT model)"),Lwe.forEach(t),gHe=i(y),Cm=n(y,"LI",{});var xwe=s(Cm);Lre=n(xwe,"STRONG",{});var Bzr=s(Lre);hHe=r(Bzr,"mpnet"),Bzr.forEach(t),pHe=r(xwe," \u2014 "),nS=n(xwe,"A",{href:!0});var Izr=s(nS);_He=r(Izr,"MPNetConfig"),Izr.forEach(t),uHe=r(xwe," (MPNet model)"),xwe.forEach(t),bHe=i(y),wm=n(y,"LI",{});var $we=s(wm);xre=n($we,"STRONG",{});var Nzr=s(xre);vHe=r(Nzr,"mt5"),Nzr.forEach(t),FHe=r($we," \u2014 "),sS=n($we,"A",{href:!0});var qzr=s(sS);THe=r(qzr,"MT5Config"),qzr.forEach(t),MHe=r($we," (mT5 model)"),$we.forEach(t),EHe=i(y),Am=n(y,"LI",{});var kwe=s(Am);$re=n(kwe,"STRONG",{});var jzr=s($re);CHe=r(jzr,"nystromformer"),jzr.forEach(t),wHe=r(kwe," \u2014 "),lS=n(kwe,"A",{href:!0});var Dzr=s(lS);AHe=r(Dzr,"NystromformerConfig"),Dzr.forEach(t),yHe=r(kwe," (Nystromformer model)"),kwe.forEach(t),LHe=i(y),ym=n(y,"LI",{});var Swe=s(ym);kre=n(Swe,"STRONG",{});var Gzr=s(kre);xHe=r(Gzr,"openai-gpt"),Gzr.forEach(t),$He=r(Swe," \u2014 "),iS=n(Swe,"A",{href:!0});var Ozr=s(iS);kHe=r(Ozr,"OpenAIGPTConfig"),Ozr.forEach(t),SHe=r(Swe," (OpenAI GPT model)"),Swe.forEach(t),RHe=i(y),Lm=n(y,"LI",{});var Rwe=s(Lm);Sre=n(Rwe,"STRONG",{});var Vzr=s(Sre);PHe=r(Vzr,"opt"),Vzr.forEach(t),BHe=r(Rwe," \u2014 "),dS=n(Rwe,"A",{href:!0});var Xzr=s(dS);IHe=r(Xzr,"OPTConfig"),Xzr.forEach(t),NHe=r(Rwe," (OPT model)"),Rwe.forEach(t),qHe=i(y),xm=n(y,"LI",{});var Pwe=s(xm);Rre=n(Pwe,"STRONG",{});var zzr=s(Rre);jHe=r(zzr,"pegasus"),zzr.forEach(t),DHe=r(Pwe," \u2014 "),cS=n(Pwe,"A",{href:!0});var Wzr=s(cS);GHe=r(Wzr,"PegasusConfig"),Wzr.forEach(t),OHe=r(Pwe," (Pegasus model)"),Pwe.forEach(t),VHe=i(y),$m=n(y,"LI",{});var Bwe=s($m);Pre=n(Bwe,"STRONG",{});var Qzr=s(Pre);XHe=r(Qzr,"perceiver"),Qzr.forEach(t),zHe=r(Bwe," \u2014 "),fS=n(Bwe,"A",{href:!0});var Hzr=s(fS);WHe=r(Hzr,"PerceiverConfig"),Hzr.forEach(t),QHe=r(Bwe," (Perceiver model)"),Bwe.forEach(t),HHe=i(y),km=n(y,"LI",{});var Iwe=s(km);Bre=n(Iwe,"STRONG",{});var Uzr=s(Bre);UHe=r(Uzr,"plbart"),Uzr.forEach(t),JHe=r(Iwe," \u2014 "),mS=n(Iwe,"A",{href:!0});var Jzr=s(mS);YHe=r(Jzr,"PLBartConfig"),Jzr.forEach(t),KHe=r(Iwe," (PLBart model)"),Iwe.forEach(t),ZHe=i(y),Sm=n(y,"LI",{});var Nwe=s(Sm);Ire=n(Nwe,"STRONG",{});var Yzr=s(Ire);eUe=r(Yzr,"poolformer"),Yzr.forEach(t),oUe=r(Nwe," \u2014 "),gS=n(Nwe,"A",{href:!0});var Kzr=s(gS);rUe=r(Kzr,"PoolFormerConfig"),Kzr.forEach(t),tUe=r(Nwe," (PoolFormer model)"),Nwe.forEach(t),aUe=i(y),Rm=n(y,"LI",{});var qwe=s(Rm);Nre=n(qwe,"STRONG",{});var Zzr=s(Nre);nUe=r(Zzr,"prophetnet"),Zzr.forEach(t),sUe=r(qwe," \u2014 "),hS=n(qwe,"A",{href:!0});var eWr=s(hS);lUe=r(eWr,"ProphetNetConfig"),eWr.forEach(t),iUe=r(qwe," (ProphetNet model)"),qwe.forEach(t),dUe=i(y),Pm=n(y,"LI",{});var jwe=s(Pm);qre=n(jwe,"STRONG",{});var oWr=s(qre);cUe=r(oWr,"qdqbert"),oWr.forEach(t),fUe=r(jwe," \u2014 "),pS=n(jwe,"A",{href:!0});var rWr=s(pS);mUe=r(rWr,"QDQBertConfig"),rWr.forEach(t),gUe=r(jwe," (QDQBert model)"),jwe.forEach(t),hUe=i(y),Bm=n(y,"LI",{});var Dwe=s(Bm);jre=n(Dwe,"STRONG",{});var tWr=s(jre);pUe=r(tWr,"rag"),tWr.forEach(t),_Ue=r(Dwe," \u2014 "),_S=n(Dwe,"A",{href:!0});var aWr=s(_S);uUe=r(aWr,"RagConfig"),aWr.forEach(t),bUe=r(Dwe," (RAG model)"),Dwe.forEach(t),vUe=i(y),Im=n(y,"LI",{});var Gwe=s(Im);Dre=n(Gwe,"STRONG",{});var nWr=s(Dre);FUe=r(nWr,"realm"),nWr.forEach(t),TUe=r(Gwe," \u2014 "),uS=n(Gwe,"A",{href:!0});var sWr=s(uS);MUe=r(sWr,"RealmConfig"),sWr.forEach(t),EUe=r(Gwe," (Realm model)"),Gwe.forEach(t),CUe=i(y),Nm=n(y,"LI",{});var Owe=s(Nm);Gre=n(Owe,"STRONG",{});var lWr=s(Gre);wUe=r(lWr,"reformer"),lWr.forEach(t),AUe=r(Owe," \u2014 "),bS=n(Owe,"A",{href:!0});var iWr=s(bS);yUe=r(iWr,"ReformerConfig"),iWr.forEach(t),LUe=r(Owe," (Reformer model)"),Owe.forEach(t),xUe=i(y),qm=n(y,"LI",{});var Vwe=s(qm);Ore=n(Vwe,"STRONG",{});var dWr=s(Ore);$Ue=r(dWr,"regnet"),dWr.forEach(t),kUe=r(Vwe," \u2014 "),vS=n(Vwe,"A",{href:!0});var cWr=s(vS);SUe=r(cWr,"RegNetConfig"),cWr.forEach(t),RUe=r(Vwe," (RegNet model)"),Vwe.forEach(t),PUe=i(y),jm=n(y,"LI",{});var Xwe=s(jm);Vre=n(Xwe,"STRONG",{});var fWr=s(Vre);BUe=r(fWr,"rembert"),fWr.forEach(t),IUe=r(Xwe," \u2014 "),FS=n(Xwe,"A",{href:!0});var mWr=s(FS);NUe=r(mWr,"RemBertConfig"),mWr.forEach(t),qUe=r(Xwe," (RemBERT model)"),Xwe.forEach(t),jUe=i(y),Dm=n(y,"LI",{});var zwe=s(Dm);Xre=n(zwe,"STRONG",{});var gWr=s(Xre);DUe=r(gWr,"resnet"),gWr.forEach(t),GUe=r(zwe," \u2014 "),TS=n(zwe,"A",{href:!0});var hWr=s(TS);OUe=r(hWr,"ResNetConfig"),hWr.forEach(t),VUe=r(zwe," (ResNet model)"),zwe.forEach(t),XUe=i(y),Gm=n(y,"LI",{});var Wwe=s(Gm);zre=n(Wwe,"STRONG",{});var pWr=s(zre);zUe=r(pWr,"retribert"),pWr.forEach(t),WUe=r(Wwe," \u2014 "),MS=n(Wwe,"A",{href:!0});var _Wr=s(MS);QUe=r(_Wr,"RetriBertConfig"),_Wr.forEach(t),HUe=r(Wwe," (RetriBERT model)"),Wwe.forEach(t),UUe=i(y),Om=n(y,"LI",{});var Qwe=s(Om);Wre=n(Qwe,"STRONG",{});var uWr=s(Wre);JUe=r(uWr,"roberta"),uWr.forEach(t),YUe=r(Qwe," \u2014 "),ES=n(Qwe,"A",{href:!0});var bWr=s(ES);KUe=r(bWr,"RobertaConfig"),bWr.forEach(t),ZUe=r(Qwe," (RoBERTa model)"),Qwe.forEach(t),eJe=i(y),Vm=n(y,"LI",{});var Hwe=s(Vm);Qre=n(Hwe,"STRONG",{});var vWr=s(Qre);oJe=r(vWr,"roformer"),vWr.forEach(t),rJe=r(Hwe," \u2014 "),CS=n(Hwe,"A",{href:!0});var FWr=s(CS);tJe=r(FWr,"RoFormerConfig"),FWr.forEach(t),aJe=r(Hwe," (RoFormer model)"),Hwe.forEach(t),nJe=i(y),Xm=n(y,"LI",{});var Uwe=s(Xm);Hre=n(Uwe,"STRONG",{});var TWr=s(Hre);sJe=r(TWr,"segformer"),TWr.forEach(t),lJe=r(Uwe," \u2014 "),wS=n(Uwe,"A",{href:!0});var MWr=s(wS);iJe=r(MWr,"SegformerConfig"),MWr.forEach(t),dJe=r(Uwe," (SegFormer model)"),Uwe.forEach(t),cJe=i(y),zm=n(y,"LI",{});var Jwe=s(zm);Ure=n(Jwe,"STRONG",{});var EWr=s(Ure);fJe=r(EWr,"sew"),EWr.forEach(t),mJe=r(Jwe," \u2014 "),AS=n(Jwe,"A",{href:!0});var CWr=s(AS);gJe=r(CWr,"SEWConfig"),CWr.forEach(t),hJe=r(Jwe," (SEW model)"),Jwe.forEach(t),pJe=i(y),Wm=n(y,"LI",{});var Ywe=s(Wm);Jre=n(Ywe,"STRONG",{});var wWr=s(Jre);_Je=r(wWr,"sew-d"),wWr.forEach(t),uJe=r(Ywe," \u2014 "),yS=n(Ywe,"A",{href:!0});var AWr=s(yS);bJe=r(AWr,"SEWDConfig"),AWr.forEach(t),vJe=r(Ywe," (SEW-D model)"),Ywe.forEach(t),FJe=i(y),Qm=n(y,"LI",{});var Kwe=s(Qm);Yre=n(Kwe,"STRONG",{});var yWr=s(Yre);TJe=r(yWr,"speech-encoder-decoder"),yWr.forEach(t),MJe=r(Kwe," \u2014 "),LS=n(Kwe,"A",{href:!0});var LWr=s(LS);EJe=r(LWr,"SpeechEncoderDecoderConfig"),LWr.forEach(t),CJe=r(Kwe," (Speech Encoder decoder model)"),Kwe.forEach(t),wJe=i(y),Hm=n(y,"LI",{});var Zwe=s(Hm);Kre=n(Zwe,"STRONG",{});var xWr=s(Kre);AJe=r(xWr,"speech_to_text"),xWr.forEach(t),yJe=r(Zwe," \u2014 "),xS=n(Zwe,"A",{href:!0});var $Wr=s(xS);LJe=r($Wr,"Speech2TextConfig"),$Wr.forEach(t),xJe=r(Zwe," (Speech2Text model)"),Zwe.forEach(t),$Je=i(y),Um=n(y,"LI",{});var e0e=s(Um);Zre=n(e0e,"STRONG",{});var kWr=s(Zre);kJe=r(kWr,"speech_to_text_2"),kWr.forEach(t),SJe=r(e0e," \u2014 "),$S=n(e0e,"A",{href:!0});var SWr=s($S);RJe=r(SWr,"Speech2Text2Config"),SWr.forEach(t),PJe=r(e0e," (Speech2Text2 model)"),e0e.forEach(t),BJe=i(y),Jm=n(y,"LI",{});var o0e=s(Jm);ete=n(o0e,"STRONG",{});var RWr=s(ete);IJe=r(RWr,"splinter"),RWr.forEach(t),NJe=r(o0e," \u2014 "),kS=n(o0e,"A",{href:!0});var PWr=s(kS);qJe=r(PWr,"SplinterConfig"),PWr.forEach(t),jJe=r(o0e," (Splinter model)"),o0e.forEach(t),DJe=i(y),Ym=n(y,"LI",{});var r0e=s(Ym);ote=n(r0e,"STRONG",{});var BWr=s(ote);GJe=r(BWr,"squeezebert"),BWr.forEach(t),OJe=r(r0e," \u2014 "),SS=n(r0e,"A",{href:!0});var IWr=s(SS);VJe=r(IWr,"SqueezeBertConfig"),IWr.forEach(t),XJe=r(r0e," (SqueezeBERT model)"),r0e.forEach(t),zJe=i(y),Km=n(y,"LI",{});var t0e=s(Km);rte=n(t0e,"STRONG",{});var NWr=s(rte);WJe=r(NWr,"swin"),NWr.forEach(t),QJe=r(t0e," \u2014 "),RS=n(t0e,"A",{href:!0});var qWr=s(RS);HJe=r(qWr,"SwinConfig"),qWr.forEach(t),UJe=r(t0e," (Swin model)"),t0e.forEach(t),JJe=i(y),Zm=n(y,"LI",{});var a0e=s(Zm);tte=n(a0e,"STRONG",{});var jWr=s(tte);YJe=r(jWr,"t5"),jWr.forEach(t),KJe=r(a0e," \u2014 "),PS=n(a0e,"A",{href:!0});var DWr=s(PS);ZJe=r(DWr,"T5Config"),DWr.forEach(t),eYe=r(a0e," (T5 model)"),a0e.forEach(t),oYe=i(y),eg=n(y,"LI",{});var n0e=s(eg);ate=n(n0e,"STRONG",{});var GWr=s(ate);rYe=r(GWr,"tapas"),GWr.forEach(t),tYe=r(n0e," \u2014 "),BS=n(n0e,"A",{href:!0});var OWr=s(BS);aYe=r(OWr,"TapasConfig"),OWr.forEach(t),nYe=r(n0e," (TAPAS model)"),n0e.forEach(t),sYe=i(y),og=n(y,"LI",{});var s0e=s(og);nte=n(s0e,"STRONG",{});var VWr=s(nte);lYe=r(VWr,"trajectory_transformer"),VWr.forEach(t),iYe=r(s0e," \u2014 "),IS=n(s0e,"A",{href:!0});var XWr=s(IS);dYe=r(XWr,"TrajectoryTransformerConfig"),XWr.forEach(t),cYe=r(s0e," (Trajectory Transformer model)"),s0e.forEach(t),fYe=i(y),rg=n(y,"LI",{});var l0e=s(rg);ste=n(l0e,"STRONG",{});var zWr=s(ste);mYe=r(zWr,"transfo-xl"),zWr.forEach(t),gYe=r(l0e," \u2014 "),NS=n(l0e,"A",{href:!0});var WWr=s(NS);hYe=r(WWr,"TransfoXLConfig"),WWr.forEach(t),pYe=r(l0e," (Transformer-XL model)"),l0e.forEach(t),_Ye=i(y),tg=n(y,"LI",{});var i0e=s(tg);lte=n(i0e,"STRONG",{});var QWr=s(lte);uYe=r(QWr,"trocr"),QWr.forEach(t),bYe=r(i0e," \u2014 "),qS=n(i0e,"A",{href:!0});var HWr=s(qS);vYe=r(HWr,"TrOCRConfig"),HWr.forEach(t),FYe=r(i0e," (TrOCR model)"),i0e.forEach(t),TYe=i(y),ag=n(y,"LI",{});var d0e=s(ag);ite=n(d0e,"STRONG",{});var UWr=s(ite);MYe=r(UWr,"unispeech"),UWr.forEach(t),EYe=r(d0e," \u2014 "),jS=n(d0e,"A",{href:!0});var JWr=s(jS);CYe=r(JWr,"UniSpeechConfig"),JWr.forEach(t),wYe=r(d0e," (UniSpeech model)"),d0e.forEach(t),AYe=i(y),ng=n(y,"LI",{});var c0e=s(ng);dte=n(c0e,"STRONG",{});var YWr=s(dte);yYe=r(YWr,"unispeech-sat"),YWr.forEach(t),LYe=r(c0e," \u2014 "),DS=n(c0e,"A",{href:!0});var KWr=s(DS);xYe=r(KWr,"UniSpeechSatConfig"),KWr.forEach(t),$Ye=r(c0e," (UniSpeechSat model)"),c0e.forEach(t),kYe=i(y),sg=n(y,"LI",{});var f0e=s(sg);cte=n(f0e,"STRONG",{});var ZWr=s(cte);SYe=r(ZWr,"van"),ZWr.forEach(t),RYe=r(f0e," \u2014 "),GS=n(f0e,"A",{href:!0});var eQr=s(GS);PYe=r(eQr,"VanConfig"),eQr.forEach(t),BYe=r(f0e," (VAN model)"),f0e.forEach(t),IYe=i(y),lg=n(y,"LI",{});var m0e=s(lg);fte=n(m0e,"STRONG",{});var oQr=s(fte);NYe=r(oQr,"vilt"),oQr.forEach(t),qYe=r(m0e," \u2014 "),OS=n(m0e,"A",{href:!0});var rQr=s(OS);jYe=r(rQr,"ViltConfig"),rQr.forEach(t),DYe=r(m0e," (ViLT model)"),m0e.forEach(t),GYe=i(y),ig=n(y,"LI",{});var g0e=s(ig);mte=n(g0e,"STRONG",{});var tQr=s(mte);OYe=r(tQr,"vision-encoder-decoder"),tQr.forEach(t),VYe=r(g0e," \u2014 "),VS=n(g0e,"A",{href:!0});var aQr=s(VS);XYe=r(aQr,"VisionEncoderDecoderConfig"),aQr.forEach(t),zYe=r(g0e," (Vision Encoder decoder model)"),g0e.forEach(t),WYe=i(y),dg=n(y,"LI",{});var h0e=s(dg);gte=n(h0e,"STRONG",{});var nQr=s(gte);QYe=r(nQr,"vision-text-dual-encoder"),nQr.forEach(t),HYe=r(h0e," \u2014 "),XS=n(h0e,"A",{href:!0});var sQr=s(XS);UYe=r(sQr,"VisionTextDualEncoderConfig"),sQr.forEach(t),JYe=r(h0e," (VisionTextDualEncoder model)"),h0e.forEach(t),YYe=i(y),cg=n(y,"LI",{});var p0e=s(cg);hte=n(p0e,"STRONG",{});var lQr=s(hte);KYe=r(lQr,"visual_bert"),lQr.forEach(t),ZYe=r(p0e," \u2014 "),zS=n(p0e,"A",{href:!0});var iQr=s(zS);eKe=r(iQr,"VisualBertConfig"),iQr.forEach(t),oKe=r(p0e," (VisualBert model)"),p0e.forEach(t),rKe=i(y),fg=n(y,"LI",{});var _0e=s(fg);pte=n(_0e,"STRONG",{});var dQr=s(pte);tKe=r(dQr,"vit"),dQr.forEach(t),aKe=r(_0e," \u2014 "),WS=n(_0e,"A",{href:!0});var cQr=s(WS);nKe=r(cQr,"ViTConfig"),cQr.forEach(t),sKe=r(_0e," (ViT model)"),_0e.forEach(t),lKe=i(y),mg=n(y,"LI",{});var u0e=s(mg);_te=n(u0e,"STRONG",{});var fQr=s(_te);iKe=r(fQr,"vit_mae"),fQr.forEach(t),dKe=r(u0e," \u2014 "),QS=n(u0e,"A",{href:!0});var mQr=s(QS);cKe=r(mQr,"ViTMAEConfig"),mQr.forEach(t),fKe=r(u0e," (ViTMAE model)"),u0e.forEach(t),mKe=i(y),gg=n(y,"LI",{});var b0e=s(gg);ute=n(b0e,"STRONG",{});var gQr=s(ute);gKe=r(gQr,"wav2vec2"),gQr.forEach(t),hKe=r(b0e," \u2014 "),HS=n(b0e,"A",{href:!0});var hQr=s(HS);pKe=r(hQr,"Wav2Vec2Config"),hQr.forEach(t),_Ke=r(b0e," (Wav2Vec2 model)"),b0e.forEach(t),uKe=i(y),hg=n(y,"LI",{});var v0e=s(hg);bte=n(v0e,"STRONG",{});var pQr=s(bte);bKe=r(pQr,"wav2vec2-conformer"),pQr.forEach(t),vKe=r(v0e," \u2014 "),US=n(v0e,"A",{href:!0});var _Qr=s(US);FKe=r(_Qr,"Wav2Vec2ConformerConfig"),_Qr.forEach(t),TKe=r(v0e," (Wav2Vec2-Conformer model)"),v0e.forEach(t),MKe=i(y),pg=n(y,"LI",{});var F0e=s(pg);vte=n(F0e,"STRONG",{});var uQr=s(vte);EKe=r(uQr,"wavlm"),uQr.forEach(t),CKe=r(F0e," \u2014 "),JS=n(F0e,"A",{href:!0});var bQr=s(JS);wKe=r(bQr,"WavLMConfig"),bQr.forEach(t),AKe=r(F0e," (WavLM model)"),F0e.forEach(t),yKe=i(y),_g=n(y,"LI",{});var T0e=s(_g);Fte=n(T0e,"STRONG",{});var vQr=s(Fte);LKe=r(vQr,"xglm"),vQr.forEach(t),xKe=r(T0e," \u2014 "),YS=n(T0e,"A",{href:!0});var FQr=s(YS);$Ke=r(FQr,"XGLMConfig"),FQr.forEach(t),kKe=r(T0e," (XGLM model)"),T0e.forEach(t),SKe=i(y),ug=n(y,"LI",{});var M0e=s(ug);Tte=n(M0e,"STRONG",{});var TQr=s(Tte);RKe=r(TQr,"xlm"),TQr.forEach(t),PKe=r(M0e," \u2014 "),KS=n(M0e,"A",{href:!0});var MQr=s(KS);BKe=r(MQr,"XLMConfig"),MQr.forEach(t),IKe=r(M0e," (XLM model)"),M0e.forEach(t),NKe=i(y),bg=n(y,"LI",{});var E0e=s(bg);Mte=n(E0e,"STRONG",{});var EQr=s(Mte);qKe=r(EQr,"xlm-prophetnet"),EQr.forEach(t),jKe=r(E0e," \u2014 "),ZS=n(E0e,"A",{href:!0});var CQr=s(ZS);DKe=r(CQr,"XLMProphetNetConfig"),CQr.forEach(t),GKe=r(E0e," (XLMProphetNet model)"),E0e.forEach(t),OKe=i(y),vg=n(y,"LI",{});var C0e=s(vg);Ete=n(C0e,"STRONG",{});var wQr=s(Ete);VKe=r(wQr,"xlm-roberta"),wQr.forEach(t),XKe=r(C0e," \u2014 "),eR=n(C0e,"A",{href:!0});var AQr=s(eR);zKe=r(AQr,"XLMRobertaConfig"),AQr.forEach(t),WKe=r(C0e," (XLM-RoBERTa model)"),C0e.forEach(t),QKe=i(y),Fg=n(y,"LI",{});var w0e=s(Fg);Cte=n(w0e,"STRONG",{});var yQr=s(Cte);HKe=r(yQr,"xlm-roberta-xl"),yQr.forEach(t),UKe=r(w0e," \u2014 "),oR=n(w0e,"A",{href:!0});var LQr=s(oR);JKe=r(LQr,"XLMRobertaXLConfig"),LQr.forEach(t),YKe=r(w0e," (XLM-RoBERTa-XL model)"),w0e.forEach(t),KKe=i(y),Tg=n(y,"LI",{});var A0e=s(Tg);wte=n(A0e,"STRONG",{});var xQr=s(wte);ZKe=r(xQr,"xlnet"),xQr.forEach(t),eZe=r(A0e," \u2014 "),rR=n(A0e,"A",{href:!0});var $Qr=s(rR);oZe=r($Qr,"XLNetConfig"),$Qr.forEach(t),rZe=r(A0e," (XLNet model)"),A0e.forEach(t),tZe=i(y),Mg=n(y,"LI",{});var y0e=s(Mg);Ate=n(y0e,"STRONG",{});var kQr=s(Ate);aZe=r(kQr,"yolos"),kQr.forEach(t),nZe=r(y0e," \u2014 "),tR=n(y0e,"A",{href:!0});var SQr=s(tR);sZe=r(SQr,"YolosConfig"),SQr.forEach(t),lZe=r(y0e," (YOLOS model)"),y0e.forEach(t),iZe=i(y),Eg=n(y,"LI",{});var L0e=s(Eg);yte=n(L0e,"STRONG",{});var RQr=s(yte);dZe=r(RQr,"yoso"),RQr.forEach(t),cZe=r(L0e," \u2014 "),aR=n(L0e,"A",{href:!0});var PQr=s(aR);fZe=r(PQr,"YosoConfig"),PQr.forEach(t),mZe=r(L0e," (YOSO model)"),L0e.forEach(t),y.forEach(t),gZe=i(ot),T(Cg.$$.fragment,ot),ot.forEach(t),hZe=i(et),wg=n(et,"DIV",{class:!0});var MDe=s(wg);T(jA.$$.fragment,MDe),pZe=i(MDe),Lte=n(MDe,"P",{});var BQr=s(Lte);_Ze=r(BQr,"Register a new configuration for this class."),BQr.forEach(t),MDe.forEach(t),et.forEach(t),wqe=i(f),Ti=n(f,"H2",{class:!0});var EDe=s(Ti);Ag=n(EDe,"A",{id:!0,class:!0,href:!0});var IQr=s(Ag);xte=n(IQr,"SPAN",{});var NQr=s(xte);T(DA.$$.fragment,NQr),NQr.forEach(t),IQr.forEach(t),uZe=i(EDe),$te=n(EDe,"SPAN",{});var qQr=s($te);bZe=r(qQr,"AutoTokenizer"),qQr.forEach(t),EDe.forEach(t),Aqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(GA.$$.fragment,Ns),vZe=i(Ns),OA=n(Ns,"P",{});var CDe=s(OA);FZe=r(CDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nR=n(CDe,"A",{href:!0});var jQr=s(nR);TZe=r(jQr,"AutoTokenizer.from_pretrained()"),jQr.forEach(t),MZe=r(CDe," class method."),CDe.forEach(t),EZe=i(Ns),VA=n(Ns,"P",{});var wDe=s(VA);CZe=r(wDe,"This class cannot be instantiated directly using "),kte=n(wDe,"CODE",{});var DQr=s(kte);wZe=r(DQr,"__init__()"),DQr.forEach(t),AZe=r(wDe," (throws an error)."),wDe.forEach(t),yZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(XA.$$.fragment,qs),LZe=i(qs),Ste=n(qs,"P",{});var GQr=s(Ste);xZe=r(GQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GQr.forEach(t),$Ze=i(qs),Aa=n(qs,"P",{});var P0=s(Aa);kZe=r(P0,"The tokenizer class to instantiate is selected based on the "),Rte=n(P0,"CODE",{});var OQr=s(Rte);SZe=r(OQr,"model_type"),OQr.forEach(t),RZe=r(P0,` property of the config object (either
passed as an argument or loaded from `),Pte=n(P0,"CODE",{});var VQr=s(Pte);PZe=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),BZe=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=n(P0,"CODE",{});var XQr=s(Bte);IZe=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),NZe=r(P0,":"),P0.forEach(t),qZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var zx=s(Sn);Ite=n(zx,"STRONG",{});var zQr=s(Ite);jZe=r(zQr,"albert"),zQr.forEach(t),DZe=r(zx," \u2014 "),sR=n(zx,"A",{href:!0});var WQr=s(sR);GZe=r(WQr,"AlbertTokenizer"),WQr.forEach(t),OZe=r(zx," or "),lR=n(zx,"A",{href:!0});var QQr=s(lR);VZe=r(QQr,"AlbertTokenizerFast"),QQr.forEach(t),XZe=r(zx," (ALBERT model)"),zx.forEach(t),zZe=i(S),Rn=n(S,"LI",{});var Wx=s(Rn);Nte=n(Wx,"STRONG",{});var HQr=s(Nte);WZe=r(HQr,"bart"),HQr.forEach(t),QZe=r(Wx," \u2014 "),iR=n(Wx,"A",{href:!0});var UQr=s(iR);HZe=r(UQr,"BartTokenizer"),UQr.forEach(t),UZe=r(Wx," or "),dR=n(Wx,"A",{href:!0});var JQr=s(dR);JZe=r(JQr,"BartTokenizerFast"),JQr.forEach(t),YZe=r(Wx," (BART model)"),Wx.forEach(t),KZe=i(S),Pn=n(S,"LI",{});var Qx=s(Pn);qte=n(Qx,"STRONG",{});var YQr=s(qte);ZZe=r(YQr,"barthez"),YQr.forEach(t),eeo=r(Qx," \u2014 "),cR=n(Qx,"A",{href:!0});var KQr=s(cR);oeo=r(KQr,"BarthezTokenizer"),KQr.forEach(t),reo=r(Qx," or "),fR=n(Qx,"A",{href:!0});var ZQr=s(fR);teo=r(ZQr,"BarthezTokenizerFast"),ZQr.forEach(t),aeo=r(Qx," (BARThez model)"),Qx.forEach(t),neo=i(S),yg=n(S,"LI",{});var x0e=s(yg);jte=n(x0e,"STRONG",{});var eHr=s(jte);seo=r(eHr,"bartpho"),eHr.forEach(t),leo=r(x0e," \u2014 "),mR=n(x0e,"A",{href:!0});var oHr=s(mR);ieo=r(oHr,"BartphoTokenizer"),oHr.forEach(t),deo=r(x0e," (BARTpho model)"),x0e.forEach(t),ceo=i(S),Bn=n(S,"LI",{});var Hx=s(Bn);Dte=n(Hx,"STRONG",{});var rHr=s(Dte);feo=r(rHr,"bert"),rHr.forEach(t),meo=r(Hx," \u2014 "),gR=n(Hx,"A",{href:!0});var tHr=s(gR);geo=r(tHr,"BertTokenizer"),tHr.forEach(t),heo=r(Hx," or "),hR=n(Hx,"A",{href:!0});var aHr=s(hR);peo=r(aHr,"BertTokenizerFast"),aHr.forEach(t),_eo=r(Hx," (BERT model)"),Hx.forEach(t),ueo=i(S),Lg=n(S,"LI",{});var $0e=s(Lg);Gte=n($0e,"STRONG",{});var nHr=s(Gte);beo=r(nHr,"bert-generation"),nHr.forEach(t),veo=r($0e," \u2014 "),pR=n($0e,"A",{href:!0});var sHr=s(pR);Feo=r(sHr,"BertGenerationTokenizer"),sHr.forEach(t),Teo=r($0e," (Bert Generation model)"),$0e.forEach(t),Meo=i(S),xg=n(S,"LI",{});var k0e=s(xg);Ote=n(k0e,"STRONG",{});var lHr=s(Ote);Eeo=r(lHr,"bert-japanese"),lHr.forEach(t),Ceo=r(k0e," \u2014 "),_R=n(k0e,"A",{href:!0});var iHr=s(_R);weo=r(iHr,"BertJapaneseTokenizer"),iHr.forEach(t),Aeo=r(k0e," (BertJapanese model)"),k0e.forEach(t),yeo=i(S),$g=n(S,"LI",{});var S0e=s($g);Vte=n(S0e,"STRONG",{});var dHr=s(Vte);Leo=r(dHr,"bertweet"),dHr.forEach(t),xeo=r(S0e," \u2014 "),uR=n(S0e,"A",{href:!0});var cHr=s(uR);$eo=r(cHr,"BertweetTokenizer"),cHr.forEach(t),keo=r(S0e," (Bertweet model)"),S0e.forEach(t),Seo=i(S),In=n(S,"LI",{});var Ux=s(In);Xte=n(Ux,"STRONG",{});var fHr=s(Xte);Reo=r(fHr,"big_bird"),fHr.forEach(t),Peo=r(Ux," \u2014 "),bR=n(Ux,"A",{href:!0});var mHr=s(bR);Beo=r(mHr,"BigBirdTokenizer"),mHr.forEach(t),Ieo=r(Ux," or "),vR=n(Ux,"A",{href:!0});var gHr=s(vR);Neo=r(gHr,"BigBirdTokenizerFast"),gHr.forEach(t),qeo=r(Ux," (BigBird model)"),Ux.forEach(t),jeo=i(S),Nn=n(S,"LI",{});var Jx=s(Nn);zte=n(Jx,"STRONG",{});var hHr=s(zte);Deo=r(hHr,"bigbird_pegasus"),hHr.forEach(t),Geo=r(Jx," \u2014 "),FR=n(Jx,"A",{href:!0});var pHr=s(FR);Oeo=r(pHr,"PegasusTokenizer"),pHr.forEach(t),Veo=r(Jx," or "),TR=n(Jx,"A",{href:!0});var _Hr=s(TR);Xeo=r(_Hr,"PegasusTokenizerFast"),_Hr.forEach(t),zeo=r(Jx," (BigBirdPegasus model)"),Jx.forEach(t),Weo=i(S),qn=n(S,"LI",{});var Yx=s(qn);Wte=n(Yx,"STRONG",{});var uHr=s(Wte);Qeo=r(uHr,"blenderbot"),uHr.forEach(t),Heo=r(Yx," \u2014 "),MR=n(Yx,"A",{href:!0});var bHr=s(MR);Ueo=r(bHr,"BlenderbotTokenizer"),bHr.forEach(t),Jeo=r(Yx," or "),ER=n(Yx,"A",{href:!0});var vHr=s(ER);Yeo=r(vHr,"BlenderbotTokenizerFast"),vHr.forEach(t),Keo=r(Yx," (Blenderbot model)"),Yx.forEach(t),Zeo=i(S),kg=n(S,"LI",{});var R0e=s(kg);Qte=n(R0e,"STRONG",{});var FHr=s(Qte);eoo=r(FHr,"blenderbot-small"),FHr.forEach(t),ooo=r(R0e," \u2014 "),CR=n(R0e,"A",{href:!0});var THr=s(CR);roo=r(THr,"BlenderbotSmallTokenizer"),THr.forEach(t),too=r(R0e," (BlenderbotSmall model)"),R0e.forEach(t),aoo=i(S),Sg=n(S,"LI",{});var P0e=s(Sg);Hte=n(P0e,"STRONG",{});var MHr=s(Hte);noo=r(MHr,"bloom"),MHr.forEach(t),soo=r(P0e," \u2014 "),wR=n(P0e,"A",{href:!0});var EHr=s(wR);loo=r(EHr,"BloomTokenizerFast"),EHr.forEach(t),ioo=r(P0e," (BLOOM model)"),P0e.forEach(t),doo=i(S),Rg=n(S,"LI",{});var B0e=s(Rg);Ute=n(B0e,"STRONG",{});var CHr=s(Ute);coo=r(CHr,"byt5"),CHr.forEach(t),foo=r(B0e," \u2014 "),AR=n(B0e,"A",{href:!0});var wHr=s(AR);moo=r(wHr,"ByT5Tokenizer"),wHr.forEach(t),goo=r(B0e," (ByT5 model)"),B0e.forEach(t),hoo=i(S),jn=n(S,"LI",{});var Kx=s(jn);Jte=n(Kx,"STRONG",{});var AHr=s(Jte);poo=r(AHr,"camembert"),AHr.forEach(t),_oo=r(Kx," \u2014 "),yR=n(Kx,"A",{href:!0});var yHr=s(yR);uoo=r(yHr,"CamembertTokenizer"),yHr.forEach(t),boo=r(Kx," or "),LR=n(Kx,"A",{href:!0});var LHr=s(LR);voo=r(LHr,"CamembertTokenizerFast"),LHr.forEach(t),Foo=r(Kx," (CamemBERT model)"),Kx.forEach(t),Too=i(S),Pg=n(S,"LI",{});var I0e=s(Pg);Yte=n(I0e,"STRONG",{});var xHr=s(Yte);Moo=r(xHr,"canine"),xHr.forEach(t),Eoo=r(I0e," \u2014 "),xR=n(I0e,"A",{href:!0});var $Hr=s(xR);Coo=r($Hr,"CanineTokenizer"),$Hr.forEach(t),woo=r(I0e," (Canine model)"),I0e.forEach(t),Aoo=i(S),Dn=n(S,"LI",{});var Zx=s(Dn);Kte=n(Zx,"STRONG",{});var kHr=s(Kte);yoo=r(kHr,"clip"),kHr.forEach(t),Loo=r(Zx," \u2014 "),$R=n(Zx,"A",{href:!0});var SHr=s($R);xoo=r(SHr,"CLIPTokenizer"),SHr.forEach(t),$oo=r(Zx," or "),kR=n(Zx,"A",{href:!0});var RHr=s(kR);koo=r(RHr,"CLIPTokenizerFast"),RHr.forEach(t),Soo=r(Zx," (CLIP model)"),Zx.forEach(t),Roo=i(S),Gn=n(S,"LI",{});var e$=s(Gn);Zte=n(e$,"STRONG",{});var PHr=s(Zte);Poo=r(PHr,"convbert"),PHr.forEach(t),Boo=r(e$," \u2014 "),SR=n(e$,"A",{href:!0});var BHr=s(SR);Ioo=r(BHr,"ConvBertTokenizer"),BHr.forEach(t),Noo=r(e$," or "),RR=n(e$,"A",{href:!0});var IHr=s(RR);qoo=r(IHr,"ConvBertTokenizerFast"),IHr.forEach(t),joo=r(e$," (ConvBERT model)"),e$.forEach(t),Doo=i(S),On=n(S,"LI",{});var o$=s(On);eae=n(o$,"STRONG",{});var NHr=s(eae);Goo=r(NHr,"cpm"),NHr.forEach(t),Ooo=r(o$," \u2014 "),PR=n(o$,"A",{href:!0});var qHr=s(PR);Voo=r(qHr,"CpmTokenizer"),qHr.forEach(t),Xoo=r(o$," or "),BR=n(o$,"A",{href:!0});var jHr=s(BR);zoo=r(jHr,"CpmTokenizerFast"),jHr.forEach(t),Woo=r(o$," (CPM model)"),o$.forEach(t),Qoo=i(S),Bg=n(S,"LI",{});var N0e=s(Bg);oae=n(N0e,"STRONG",{});var DHr=s(oae);Hoo=r(DHr,"ctrl"),DHr.forEach(t),Uoo=r(N0e," \u2014 "),IR=n(N0e,"A",{href:!0});var GHr=s(IR);Joo=r(GHr,"CTRLTokenizer"),GHr.forEach(t),Yoo=r(N0e," (CTRL model)"),N0e.forEach(t),Koo=i(S),Vn=n(S,"LI",{});var r$=s(Vn);rae=n(r$,"STRONG",{});var OHr=s(rae);Zoo=r(OHr,"data2vec-text"),OHr.forEach(t),ero=r(r$," \u2014 "),NR=n(r$,"A",{href:!0});var VHr=s(NR);oro=r(VHr,"RobertaTokenizer"),VHr.forEach(t),rro=r(r$," or "),qR=n(r$,"A",{href:!0});var XHr=s(qR);tro=r(XHr,"RobertaTokenizerFast"),XHr.forEach(t),aro=r(r$," (Data2VecText model)"),r$.forEach(t),nro=i(S),Xn=n(S,"LI",{});var t$=s(Xn);tae=n(t$,"STRONG",{});var zHr=s(tae);sro=r(zHr,"deberta"),zHr.forEach(t),lro=r(t$," \u2014 "),jR=n(t$,"A",{href:!0});var WHr=s(jR);iro=r(WHr,"DebertaTokenizer"),WHr.forEach(t),dro=r(t$," or "),DR=n(t$,"A",{href:!0});var QHr=s(DR);cro=r(QHr,"DebertaTokenizerFast"),QHr.forEach(t),fro=r(t$," (DeBERTa model)"),t$.forEach(t),mro=i(S),zn=n(S,"LI",{});var a$=s(zn);aae=n(a$,"STRONG",{});var HHr=s(aae);gro=r(HHr,"deberta-v2"),HHr.forEach(t),hro=r(a$," \u2014 "),GR=n(a$,"A",{href:!0});var UHr=s(GR);pro=r(UHr,"DebertaV2Tokenizer"),UHr.forEach(t),_ro=r(a$," or "),OR=n(a$,"A",{href:!0});var JHr=s(OR);uro=r(JHr,"DebertaV2TokenizerFast"),JHr.forEach(t),bro=r(a$," (DeBERTa-v2 model)"),a$.forEach(t),vro=i(S),Wn=n(S,"LI",{});var n$=s(Wn);nae=n(n$,"STRONG",{});var YHr=s(nae);Fro=r(YHr,"distilbert"),YHr.forEach(t),Tro=r(n$," \u2014 "),VR=n(n$,"A",{href:!0});var KHr=s(VR);Mro=r(KHr,"DistilBertTokenizer"),KHr.forEach(t),Ero=r(n$," or "),XR=n(n$,"A",{href:!0});var ZHr=s(XR);Cro=r(ZHr,"DistilBertTokenizerFast"),ZHr.forEach(t),wro=r(n$," (DistilBERT model)"),n$.forEach(t),Aro=i(S),Qn=n(S,"LI",{});var s$=s(Qn);sae=n(s$,"STRONG",{});var eUr=s(sae);yro=r(eUr,"dpr"),eUr.forEach(t),Lro=r(s$," \u2014 "),zR=n(s$,"A",{href:!0});var oUr=s(zR);xro=r(oUr,"DPRQuestionEncoderTokenizer"),oUr.forEach(t),$ro=r(s$," or "),WR=n(s$,"A",{href:!0});var rUr=s(WR);kro=r(rUr,"DPRQuestionEncoderTokenizerFast"),rUr.forEach(t),Sro=r(s$," (DPR model)"),s$.forEach(t),Rro=i(S),Hn=n(S,"LI",{});var l$=s(Hn);lae=n(l$,"STRONG",{});var tUr=s(lae);Pro=r(tUr,"electra"),tUr.forEach(t),Bro=r(l$," \u2014 "),QR=n(l$,"A",{href:!0});var aUr=s(QR);Iro=r(aUr,"ElectraTokenizer"),aUr.forEach(t),Nro=r(l$," or "),HR=n(l$,"A",{href:!0});var nUr=s(HR);qro=r(nUr,"ElectraTokenizerFast"),nUr.forEach(t),jro=r(l$," (ELECTRA model)"),l$.forEach(t),Dro=i(S),Ig=n(S,"LI",{});var q0e=s(Ig);iae=n(q0e,"STRONG",{});var sUr=s(iae);Gro=r(sUr,"flaubert"),sUr.forEach(t),Oro=r(q0e," \u2014 "),UR=n(q0e,"A",{href:!0});var lUr=s(UR);Vro=r(lUr,"FlaubertTokenizer"),lUr.forEach(t),Xro=r(q0e," (FlauBERT model)"),q0e.forEach(t),zro=i(S),Un=n(S,"LI",{});var i$=s(Un);dae=n(i$,"STRONG",{});var iUr=s(dae);Wro=r(iUr,"fnet"),iUr.forEach(t),Qro=r(i$," \u2014 "),JR=n(i$,"A",{href:!0});var dUr=s(JR);Hro=r(dUr,"FNetTokenizer"),dUr.forEach(t),Uro=r(i$," or "),YR=n(i$,"A",{href:!0});var cUr=s(YR);Jro=r(cUr,"FNetTokenizerFast"),cUr.forEach(t),Yro=r(i$," (FNet model)"),i$.forEach(t),Kro=i(S),Ng=n(S,"LI",{});var j0e=s(Ng);cae=n(j0e,"STRONG",{});var fUr=s(cae);Zro=r(fUr,"fsmt"),fUr.forEach(t),eto=r(j0e," \u2014 "),KR=n(j0e,"A",{href:!0});var mUr=s(KR);oto=r(mUr,"FSMTTokenizer"),mUr.forEach(t),rto=r(j0e," (FairSeq Machine-Translation model)"),j0e.forEach(t),tto=i(S),Jn=n(S,"LI",{});var d$=s(Jn);fae=n(d$,"STRONG",{});var gUr=s(fae);ato=r(gUr,"funnel"),gUr.forEach(t),nto=r(d$," \u2014 "),ZR=n(d$,"A",{href:!0});var hUr=s(ZR);sto=r(hUr,"FunnelTokenizer"),hUr.forEach(t),lto=r(d$," or "),eP=n(d$,"A",{href:!0});var pUr=s(eP);ito=r(pUr,"FunnelTokenizerFast"),pUr.forEach(t),dto=r(d$," (Funnel Transformer model)"),d$.forEach(t),cto=i(S),Yn=n(S,"LI",{});var c$=s(Yn);mae=n(c$,"STRONG",{});var _Ur=s(mae);fto=r(_Ur,"gpt2"),_Ur.forEach(t),mto=r(c$," \u2014 "),oP=n(c$,"A",{href:!0});var uUr=s(oP);gto=r(uUr,"GPT2Tokenizer"),uUr.forEach(t),hto=r(c$," or "),rP=n(c$,"A",{href:!0});var bUr=s(rP);pto=r(bUr,"GPT2TokenizerFast"),bUr.forEach(t),_to=r(c$," (OpenAI GPT-2 model)"),c$.forEach(t),uto=i(S),Kn=n(S,"LI",{});var f$=s(Kn);gae=n(f$,"STRONG",{});var vUr=s(gae);bto=r(vUr,"gpt_neo"),vUr.forEach(t),vto=r(f$," \u2014 "),tP=n(f$,"A",{href:!0});var FUr=s(tP);Fto=r(FUr,"GPT2Tokenizer"),FUr.forEach(t),Tto=r(f$," or "),aP=n(f$,"A",{href:!0});var TUr=s(aP);Mto=r(TUr,"GPT2TokenizerFast"),TUr.forEach(t),Eto=r(f$," (GPT Neo model)"),f$.forEach(t),Cto=i(S),qg=n(S,"LI",{});var D0e=s(qg);hae=n(D0e,"STRONG",{});var MUr=s(hae);wto=r(MUr,"gpt_neox"),MUr.forEach(t),Ato=r(D0e," \u2014 "),nP=n(D0e,"A",{href:!0});var EUr=s(nP);yto=r(EUr,"GPTNeoXTokenizerFast"),EUr.forEach(t),Lto=r(D0e," (GPT NeoX model)"),D0e.forEach(t),xto=i(S),Zn=n(S,"LI",{});var m$=s(Zn);pae=n(m$,"STRONG",{});var CUr=s(pae);$to=r(CUr,"gptj"),CUr.forEach(t),kto=r(m$," \u2014 "),sP=n(m$,"A",{href:!0});var wUr=s(sP);Sto=r(wUr,"GPT2Tokenizer"),wUr.forEach(t),Rto=r(m$," or "),lP=n(m$,"A",{href:!0});var AUr=s(lP);Pto=r(AUr,"GPT2TokenizerFast"),AUr.forEach(t),Bto=r(m$," (GPT-J model)"),m$.forEach(t),Ito=i(S),es=n(S,"LI",{});var g$=s(es);_ae=n(g$,"STRONG",{});var yUr=s(_ae);Nto=r(yUr,"herbert"),yUr.forEach(t),qto=r(g$," \u2014 "),iP=n(g$,"A",{href:!0});var LUr=s(iP);jto=r(LUr,"HerbertTokenizer"),LUr.forEach(t),Dto=r(g$," or "),dP=n(g$,"A",{href:!0});var xUr=s(dP);Gto=r(xUr,"HerbertTokenizerFast"),xUr.forEach(t),Oto=r(g$," (HerBERT model)"),g$.forEach(t),Vto=i(S),jg=n(S,"LI",{});var G0e=s(jg);uae=n(G0e,"STRONG",{});var $Ur=s(uae);Xto=r($Ur,"hubert"),$Ur.forEach(t),zto=r(G0e," \u2014 "),cP=n(G0e,"A",{href:!0});var kUr=s(cP);Wto=r(kUr,"Wav2Vec2CTCTokenizer"),kUr.forEach(t),Qto=r(G0e," (Hubert model)"),G0e.forEach(t),Hto=i(S),os=n(S,"LI",{});var h$=s(os);bae=n(h$,"STRONG",{});var SUr=s(bae);Uto=r(SUr,"ibert"),SUr.forEach(t),Jto=r(h$," \u2014 "),fP=n(h$,"A",{href:!0});var RUr=s(fP);Yto=r(RUr,"RobertaTokenizer"),RUr.forEach(t),Kto=r(h$," or "),mP=n(h$,"A",{href:!0});var PUr=s(mP);Zto=r(PUr,"RobertaTokenizerFast"),PUr.forEach(t),eao=r(h$," (I-BERT model)"),h$.forEach(t),oao=i(S),rs=n(S,"LI",{});var p$=s(rs);vae=n(p$,"STRONG",{});var BUr=s(vae);rao=r(BUr,"layoutlm"),BUr.forEach(t),tao=r(p$," \u2014 "),gP=n(p$,"A",{href:!0});var IUr=s(gP);aao=r(IUr,"LayoutLMTokenizer"),IUr.forEach(t),nao=r(p$," or "),hP=n(p$,"A",{href:!0});var NUr=s(hP);sao=r(NUr,"LayoutLMTokenizerFast"),NUr.forEach(t),lao=r(p$," (LayoutLM model)"),p$.forEach(t),iao=i(S),ts=n(S,"LI",{});var _$=s(ts);Fae=n(_$,"STRONG",{});var qUr=s(Fae);dao=r(qUr,"layoutlmv2"),qUr.forEach(t),cao=r(_$," \u2014 "),pP=n(_$,"A",{href:!0});var jUr=s(pP);fao=r(jUr,"LayoutLMv2Tokenizer"),jUr.forEach(t),mao=r(_$," or "),_P=n(_$,"A",{href:!0});var DUr=s(_P);gao=r(DUr,"LayoutLMv2TokenizerFast"),DUr.forEach(t),hao=r(_$," (LayoutLMv2 model)"),_$.forEach(t),pao=i(S),as=n(S,"LI",{});var u$=s(as);Tae=n(u$,"STRONG",{});var GUr=s(Tae);_ao=r(GUr,"layoutlmv3"),GUr.forEach(t),uao=r(u$," \u2014 "),uP=n(u$,"A",{href:!0});var OUr=s(uP);bao=r(OUr,"LayoutLMv3Tokenizer"),OUr.forEach(t),vao=r(u$," or "),bP=n(u$,"A",{href:!0});var VUr=s(bP);Fao=r(VUr,"LayoutLMv3TokenizerFast"),VUr.forEach(t),Tao=r(u$," (LayoutLMv3 model)"),u$.forEach(t),Mao=i(S),ns=n(S,"LI",{});var b$=s(ns);Mae=n(b$,"STRONG",{});var XUr=s(Mae);Eao=r(XUr,"layoutxlm"),XUr.forEach(t),Cao=r(b$," \u2014 "),vP=n(b$,"A",{href:!0});var zUr=s(vP);wao=r(zUr,"LayoutXLMTokenizer"),zUr.forEach(t),Aao=r(b$," or "),FP=n(b$,"A",{href:!0});var WUr=s(FP);yao=r(WUr,"LayoutXLMTokenizerFast"),WUr.forEach(t),Lao=r(b$," (LayoutXLM model)"),b$.forEach(t),xao=i(S),ss=n(S,"LI",{});var v$=s(ss);Eae=n(v$,"STRONG",{});var QUr=s(Eae);$ao=r(QUr,"led"),QUr.forEach(t),kao=r(v$," \u2014 "),TP=n(v$,"A",{href:!0});var HUr=s(TP);Sao=r(HUr,"LEDTokenizer"),HUr.forEach(t),Rao=r(v$," or "),MP=n(v$,"A",{href:!0});var UUr=s(MP);Pao=r(UUr,"LEDTokenizerFast"),UUr.forEach(t),Bao=r(v$," (LED model)"),v$.forEach(t),Iao=i(S),ls=n(S,"LI",{});var F$=s(ls);Cae=n(F$,"STRONG",{});var JUr=s(Cae);Nao=r(JUr,"longformer"),JUr.forEach(t),qao=r(F$," \u2014 "),EP=n(F$,"A",{href:!0});var YUr=s(EP);jao=r(YUr,"LongformerTokenizer"),YUr.forEach(t),Dao=r(F$," or "),CP=n(F$,"A",{href:!0});var KUr=s(CP);Gao=r(KUr,"LongformerTokenizerFast"),KUr.forEach(t),Oao=r(F$," (Longformer model)"),F$.forEach(t),Vao=i(S),Dg=n(S,"LI",{});var O0e=s(Dg);wae=n(O0e,"STRONG",{});var ZUr=s(wae);Xao=r(ZUr,"luke"),ZUr.forEach(t),zao=r(O0e," \u2014 "),wP=n(O0e,"A",{href:!0});var eJr=s(wP);Wao=r(eJr,"LukeTokenizer"),eJr.forEach(t),Qao=r(O0e," (LUKE model)"),O0e.forEach(t),Hao=i(S),is=n(S,"LI",{});var T$=s(is);Aae=n(T$,"STRONG",{});var oJr=s(Aae);Uao=r(oJr,"lxmert"),oJr.forEach(t),Jao=r(T$," \u2014 "),AP=n(T$,"A",{href:!0});var rJr=s(AP);Yao=r(rJr,"LxmertTokenizer"),rJr.forEach(t),Kao=r(T$," or "),yP=n(T$,"A",{href:!0});var tJr=s(yP);Zao=r(tJr,"LxmertTokenizerFast"),tJr.forEach(t),eno=r(T$," (LXMERT model)"),T$.forEach(t),ono=i(S),Gg=n(S,"LI",{});var V0e=s(Gg);yae=n(V0e,"STRONG",{});var aJr=s(yae);rno=r(aJr,"m2m_100"),aJr.forEach(t),tno=r(V0e," \u2014 "),LP=n(V0e,"A",{href:!0});var nJr=s(LP);ano=r(nJr,"M2M100Tokenizer"),nJr.forEach(t),nno=r(V0e," (M2M100 model)"),V0e.forEach(t),sno=i(S),Og=n(S,"LI",{});var X0e=s(Og);Lae=n(X0e,"STRONG",{});var sJr=s(Lae);lno=r(sJr,"marian"),sJr.forEach(t),ino=r(X0e," \u2014 "),xP=n(X0e,"A",{href:!0});var lJr=s(xP);dno=r(lJr,"MarianTokenizer"),lJr.forEach(t),cno=r(X0e," (Marian model)"),X0e.forEach(t),fno=i(S),ds=n(S,"LI",{});var M$=s(ds);xae=n(M$,"STRONG",{});var iJr=s(xae);mno=r(iJr,"mbart"),iJr.forEach(t),gno=r(M$," \u2014 "),$P=n(M$,"A",{href:!0});var dJr=s($P);hno=r(dJr,"MBartTokenizer"),dJr.forEach(t),pno=r(M$," or "),kP=n(M$,"A",{href:!0});var cJr=s(kP);_no=r(cJr,"MBartTokenizerFast"),cJr.forEach(t),uno=r(M$," (mBART model)"),M$.forEach(t),bno=i(S),cs=n(S,"LI",{});var E$=s(cs);$ae=n(E$,"STRONG",{});var fJr=s($ae);vno=r(fJr,"mbart50"),fJr.forEach(t),Fno=r(E$," \u2014 "),SP=n(E$,"A",{href:!0});var mJr=s(SP);Tno=r(mJr,"MBart50Tokenizer"),mJr.forEach(t),Mno=r(E$," or "),RP=n(E$,"A",{href:!0});var gJr=s(RP);Eno=r(gJr,"MBart50TokenizerFast"),gJr.forEach(t),Cno=r(E$," (mBART-50 model)"),E$.forEach(t),wno=i(S),fs=n(S,"LI",{});var C$=s(fs);kae=n(C$,"STRONG",{});var hJr=s(kae);Ano=r(hJr,"megatron-bert"),hJr.forEach(t),yno=r(C$," \u2014 "),PP=n(C$,"A",{href:!0});var pJr=s(PP);Lno=r(pJr,"BertTokenizer"),pJr.forEach(t),xno=r(C$," or "),BP=n(C$,"A",{href:!0});var _Jr=s(BP);$no=r(_Jr,"BertTokenizerFast"),_Jr.forEach(t),kno=r(C$," (MegatronBert model)"),C$.forEach(t),Sno=i(S),Vg=n(S,"LI",{});var z0e=s(Vg);Sae=n(z0e,"STRONG",{});var uJr=s(Sae);Rno=r(uJr,"mluke"),uJr.forEach(t),Pno=r(z0e," \u2014 "),IP=n(z0e,"A",{href:!0});var bJr=s(IP);Bno=r(bJr,"MLukeTokenizer"),bJr.forEach(t),Ino=r(z0e," (mLUKE model)"),z0e.forEach(t),Nno=i(S),ms=n(S,"LI",{});var w$=s(ms);Rae=n(w$,"STRONG",{});var vJr=s(Rae);qno=r(vJr,"mobilebert"),vJr.forEach(t),jno=r(w$," \u2014 "),NP=n(w$,"A",{href:!0});var FJr=s(NP);Dno=r(FJr,"MobileBertTokenizer"),FJr.forEach(t),Gno=r(w$," or "),qP=n(w$,"A",{href:!0});var TJr=s(qP);Ono=r(TJr,"MobileBertTokenizerFast"),TJr.forEach(t),Vno=r(w$," (MobileBERT model)"),w$.forEach(t),Xno=i(S),gs=n(S,"LI",{});var A$=s(gs);Pae=n(A$,"STRONG",{});var MJr=s(Pae);zno=r(MJr,"mpnet"),MJr.forEach(t),Wno=r(A$," \u2014 "),jP=n(A$,"A",{href:!0});var EJr=s(jP);Qno=r(EJr,"MPNetTokenizer"),EJr.forEach(t),Hno=r(A$," or "),DP=n(A$,"A",{href:!0});var CJr=s(DP);Uno=r(CJr,"MPNetTokenizerFast"),CJr.forEach(t),Jno=r(A$," (MPNet model)"),A$.forEach(t),Yno=i(S),hs=n(S,"LI",{});var y$=s(hs);Bae=n(y$,"STRONG",{});var wJr=s(Bae);Kno=r(wJr,"mt5"),wJr.forEach(t),Zno=r(y$," \u2014 "),GP=n(y$,"A",{href:!0});var AJr=s(GP);eso=r(AJr,"MT5Tokenizer"),AJr.forEach(t),oso=r(y$," or "),OP=n(y$,"A",{href:!0});var yJr=s(OP);rso=r(yJr,"MT5TokenizerFast"),yJr.forEach(t),tso=r(y$," (mT5 model)"),y$.forEach(t),aso=i(S),ps=n(S,"LI",{});var L$=s(ps);Iae=n(L$,"STRONG",{});var LJr=s(Iae);nso=r(LJr,"nystromformer"),LJr.forEach(t),sso=r(L$," \u2014 "),VP=n(L$,"A",{href:!0});var xJr=s(VP);lso=r(xJr,"AlbertTokenizer"),xJr.forEach(t),iso=r(L$," or "),XP=n(L$,"A",{href:!0});var $Jr=s(XP);dso=r($Jr,"AlbertTokenizerFast"),$Jr.forEach(t),cso=r(L$," (Nystromformer model)"),L$.forEach(t),fso=i(S),_s=n(S,"LI",{});var x$=s(_s);Nae=n(x$,"STRONG",{});var kJr=s(Nae);mso=r(kJr,"openai-gpt"),kJr.forEach(t),gso=r(x$," \u2014 "),zP=n(x$,"A",{href:!0});var SJr=s(zP);hso=r(SJr,"OpenAIGPTTokenizer"),SJr.forEach(t),pso=r(x$," or "),WP=n(x$,"A",{href:!0});var RJr=s(WP);_so=r(RJr,"OpenAIGPTTokenizerFast"),RJr.forEach(t),uso=r(x$," (OpenAI GPT model)"),x$.forEach(t),bso=i(S),Xg=n(S,"LI",{});var W0e=s(Xg);qae=n(W0e,"STRONG",{});var PJr=s(qae);vso=r(PJr,"opt"),PJr.forEach(t),Fso=r(W0e," \u2014 "),QP=n(W0e,"A",{href:!0});var BJr=s(QP);Tso=r(BJr,"GPT2Tokenizer"),BJr.forEach(t),Mso=r(W0e," (OPT model)"),W0e.forEach(t),Eso=i(S),us=n(S,"LI",{});var $$=s(us);jae=n($$,"STRONG",{});var IJr=s(jae);Cso=r(IJr,"pegasus"),IJr.forEach(t),wso=r($$," \u2014 "),HP=n($$,"A",{href:!0});var NJr=s(HP);Aso=r(NJr,"PegasusTokenizer"),NJr.forEach(t),yso=r($$," or "),UP=n($$,"A",{href:!0});var qJr=s(UP);Lso=r(qJr,"PegasusTokenizerFast"),qJr.forEach(t),xso=r($$," (Pegasus model)"),$$.forEach(t),$so=i(S),zg=n(S,"LI",{});var Q0e=s(zg);Dae=n(Q0e,"STRONG",{});var jJr=s(Dae);kso=r(jJr,"perceiver"),jJr.forEach(t),Sso=r(Q0e," \u2014 "),JP=n(Q0e,"A",{href:!0});var DJr=s(JP);Rso=r(DJr,"PerceiverTokenizer"),DJr.forEach(t),Pso=r(Q0e," (Perceiver model)"),Q0e.forEach(t),Bso=i(S),Wg=n(S,"LI",{});var H0e=s(Wg);Gae=n(H0e,"STRONG",{});var GJr=s(Gae);Iso=r(GJr,"phobert"),GJr.forEach(t),Nso=r(H0e," \u2014 "),YP=n(H0e,"A",{href:!0});var OJr=s(YP);qso=r(OJr,"PhobertTokenizer"),OJr.forEach(t),jso=r(H0e," (PhoBERT model)"),H0e.forEach(t),Dso=i(S),Qg=n(S,"LI",{});var U0e=s(Qg);Oae=n(U0e,"STRONG",{});var VJr=s(Oae);Gso=r(VJr,"plbart"),VJr.forEach(t),Oso=r(U0e," \u2014 "),KP=n(U0e,"A",{href:!0});var XJr=s(KP);Vso=r(XJr,"PLBartTokenizer"),XJr.forEach(t),Xso=r(U0e," (PLBart model)"),U0e.forEach(t),zso=i(S),Hg=n(S,"LI",{});var J0e=s(Hg);Vae=n(J0e,"STRONG",{});var zJr=s(Vae);Wso=r(zJr,"prophetnet"),zJr.forEach(t),Qso=r(J0e," \u2014 "),ZP=n(J0e,"A",{href:!0});var WJr=s(ZP);Hso=r(WJr,"ProphetNetTokenizer"),WJr.forEach(t),Uso=r(J0e," (ProphetNet model)"),J0e.forEach(t),Jso=i(S),bs=n(S,"LI",{});var k$=s(bs);Xae=n(k$,"STRONG",{});var QJr=s(Xae);Yso=r(QJr,"qdqbert"),QJr.forEach(t),Kso=r(k$," \u2014 "),eB=n(k$,"A",{href:!0});var HJr=s(eB);Zso=r(HJr,"BertTokenizer"),HJr.forEach(t),elo=r(k$," or "),oB=n(k$,"A",{href:!0});var UJr=s(oB);olo=r(UJr,"BertTokenizerFast"),UJr.forEach(t),rlo=r(k$," (QDQBert model)"),k$.forEach(t),tlo=i(S),Ug=n(S,"LI",{});var Y0e=s(Ug);zae=n(Y0e,"STRONG",{});var JJr=s(zae);alo=r(JJr,"rag"),JJr.forEach(t),nlo=r(Y0e," \u2014 "),rB=n(Y0e,"A",{href:!0});var YJr=s(rB);slo=r(YJr,"RagTokenizer"),YJr.forEach(t),llo=r(Y0e," (RAG model)"),Y0e.forEach(t),ilo=i(S),vs=n(S,"LI",{});var S$=s(vs);Wae=n(S$,"STRONG",{});var KJr=s(Wae);dlo=r(KJr,"realm"),KJr.forEach(t),clo=r(S$," \u2014 "),tB=n(S$,"A",{href:!0});var ZJr=s(tB);flo=r(ZJr,"RealmTokenizer"),ZJr.forEach(t),mlo=r(S$," or "),aB=n(S$,"A",{href:!0});var eYr=s(aB);glo=r(eYr,"RealmTokenizerFast"),eYr.forEach(t),hlo=r(S$," (Realm model)"),S$.forEach(t),plo=i(S),Fs=n(S,"LI",{});var R$=s(Fs);Qae=n(R$,"STRONG",{});var oYr=s(Qae);_lo=r(oYr,"reformer"),oYr.forEach(t),ulo=r(R$," \u2014 "),nB=n(R$,"A",{href:!0});var rYr=s(nB);blo=r(rYr,"ReformerTokenizer"),rYr.forEach(t),vlo=r(R$," or "),sB=n(R$,"A",{href:!0});var tYr=s(sB);Flo=r(tYr,"ReformerTokenizerFast"),tYr.forEach(t),Tlo=r(R$," (Reformer model)"),R$.forEach(t),Mlo=i(S),Ts=n(S,"LI",{});var P$=s(Ts);Hae=n(P$,"STRONG",{});var aYr=s(Hae);Elo=r(aYr,"rembert"),aYr.forEach(t),Clo=r(P$," \u2014 "),lB=n(P$,"A",{href:!0});var nYr=s(lB);wlo=r(nYr,"RemBertTokenizer"),nYr.forEach(t),Alo=r(P$," or "),iB=n(P$,"A",{href:!0});var sYr=s(iB);ylo=r(sYr,"RemBertTokenizerFast"),sYr.forEach(t),Llo=r(P$," (RemBERT model)"),P$.forEach(t),xlo=i(S),Ms=n(S,"LI",{});var B$=s(Ms);Uae=n(B$,"STRONG",{});var lYr=s(Uae);$lo=r(lYr,"retribert"),lYr.forEach(t),klo=r(B$," \u2014 "),dB=n(B$,"A",{href:!0});var iYr=s(dB);Slo=r(iYr,"RetriBertTokenizer"),iYr.forEach(t),Rlo=r(B$," or "),cB=n(B$,"A",{href:!0});var dYr=s(cB);Plo=r(dYr,"RetriBertTokenizerFast"),dYr.forEach(t),Blo=r(B$," (RetriBERT model)"),B$.forEach(t),Ilo=i(S),Es=n(S,"LI",{});var I$=s(Es);Jae=n(I$,"STRONG",{});var cYr=s(Jae);Nlo=r(cYr,"roberta"),cYr.forEach(t),qlo=r(I$," \u2014 "),fB=n(I$,"A",{href:!0});var fYr=s(fB);jlo=r(fYr,"RobertaTokenizer"),fYr.forEach(t),Dlo=r(I$," or "),mB=n(I$,"A",{href:!0});var mYr=s(mB);Glo=r(mYr,"RobertaTokenizerFast"),mYr.forEach(t),Olo=r(I$," (RoBERTa model)"),I$.forEach(t),Vlo=i(S),Cs=n(S,"LI",{});var N$=s(Cs);Yae=n(N$,"STRONG",{});var gYr=s(Yae);Xlo=r(gYr,"roformer"),gYr.forEach(t),zlo=r(N$," \u2014 "),gB=n(N$,"A",{href:!0});var hYr=s(gB);Wlo=r(hYr,"RoFormerTokenizer"),hYr.forEach(t),Qlo=r(N$," or "),hB=n(N$,"A",{href:!0});var pYr=s(hB);Hlo=r(pYr,"RoFormerTokenizerFast"),pYr.forEach(t),Ulo=r(N$," (RoFormer model)"),N$.forEach(t),Jlo=i(S),Jg=n(S,"LI",{});var K0e=s(Jg);Kae=n(K0e,"STRONG",{});var _Yr=s(Kae);Ylo=r(_Yr,"speech_to_text"),_Yr.forEach(t),Klo=r(K0e," \u2014 "),pB=n(K0e,"A",{href:!0});var uYr=s(pB);Zlo=r(uYr,"Speech2TextTokenizer"),uYr.forEach(t),eio=r(K0e," (Speech2Text model)"),K0e.forEach(t),oio=i(S),Yg=n(S,"LI",{});var Z0e=s(Yg);Zae=n(Z0e,"STRONG",{});var bYr=s(Zae);rio=r(bYr,"speech_to_text_2"),bYr.forEach(t),tio=r(Z0e," \u2014 "),_B=n(Z0e,"A",{href:!0});var vYr=s(_B);aio=r(vYr,"Speech2Text2Tokenizer"),vYr.forEach(t),nio=r(Z0e," (Speech2Text2 model)"),Z0e.forEach(t),sio=i(S),ws=n(S,"LI",{});var q$=s(ws);ene=n(q$,"STRONG",{});var FYr=s(ene);lio=r(FYr,"splinter"),FYr.forEach(t),iio=r(q$," \u2014 "),uB=n(q$,"A",{href:!0});var TYr=s(uB);dio=r(TYr,"SplinterTokenizer"),TYr.forEach(t),cio=r(q$," or "),bB=n(q$,"A",{href:!0});var MYr=s(bB);fio=r(MYr,"SplinterTokenizerFast"),MYr.forEach(t),mio=r(q$," (Splinter model)"),q$.forEach(t),gio=i(S),As=n(S,"LI",{});var j$=s(As);one=n(j$,"STRONG",{});var EYr=s(one);hio=r(EYr,"squeezebert"),EYr.forEach(t),pio=r(j$," \u2014 "),vB=n(j$,"A",{href:!0});var CYr=s(vB);_io=r(CYr,"SqueezeBertTokenizer"),CYr.forEach(t),uio=r(j$," or "),FB=n(j$,"A",{href:!0});var wYr=s(FB);bio=r(wYr,"SqueezeBertTokenizerFast"),wYr.forEach(t),vio=r(j$," (SqueezeBERT model)"),j$.forEach(t),Fio=i(S),ys=n(S,"LI",{});var D$=s(ys);rne=n(D$,"STRONG",{});var AYr=s(rne);Tio=r(AYr,"t5"),AYr.forEach(t),Mio=r(D$," \u2014 "),TB=n(D$,"A",{href:!0});var yYr=s(TB);Eio=r(yYr,"T5Tokenizer"),yYr.forEach(t),Cio=r(D$," or "),MB=n(D$,"A",{href:!0});var LYr=s(MB);wio=r(LYr,"T5TokenizerFast"),LYr.forEach(t),Aio=r(D$," (T5 model)"),D$.forEach(t),yio=i(S),Kg=n(S,"LI",{});var e6e=s(Kg);tne=n(e6e,"STRONG",{});var xYr=s(tne);Lio=r(xYr,"tapas"),xYr.forEach(t),xio=r(e6e," \u2014 "),EB=n(e6e,"A",{href:!0});var $Yr=s(EB);$io=r($Yr,"TapasTokenizer"),$Yr.forEach(t),kio=r(e6e," (TAPAS model)"),e6e.forEach(t),Sio=i(S),Zg=n(S,"LI",{});var o6e=s(Zg);ane=n(o6e,"STRONG",{});var kYr=s(ane);Rio=r(kYr,"tapex"),kYr.forEach(t),Pio=r(o6e," \u2014 "),CB=n(o6e,"A",{href:!0});var SYr=s(CB);Bio=r(SYr,"TapexTokenizer"),SYr.forEach(t),Iio=r(o6e," (TAPEX model)"),o6e.forEach(t),Nio=i(S),eh=n(S,"LI",{});var r6e=s(eh);nne=n(r6e,"STRONG",{});var RYr=s(nne);qio=r(RYr,"transfo-xl"),RYr.forEach(t),jio=r(r6e," \u2014 "),wB=n(r6e,"A",{href:!0});var PYr=s(wB);Dio=r(PYr,"TransfoXLTokenizer"),PYr.forEach(t),Gio=r(r6e," (Transformer-XL model)"),r6e.forEach(t),Oio=i(S),Ls=n(S,"LI",{});var G$=s(Ls);sne=n(G$,"STRONG",{});var BYr=s(sne);Vio=r(BYr,"visual_bert"),BYr.forEach(t),Xio=r(G$," \u2014 "),AB=n(G$,"A",{href:!0});var IYr=s(AB);zio=r(IYr,"BertTokenizer"),IYr.forEach(t),Wio=r(G$," or "),yB=n(G$,"A",{href:!0});var NYr=s(yB);Qio=r(NYr,"BertTokenizerFast"),NYr.forEach(t),Hio=r(G$," (VisualBert model)"),G$.forEach(t),Uio=i(S),oh=n(S,"LI",{});var t6e=s(oh);lne=n(t6e,"STRONG",{});var qYr=s(lne);Jio=r(qYr,"wav2vec2"),qYr.forEach(t),Yio=r(t6e," \u2014 "),LB=n(t6e,"A",{href:!0});var jYr=s(LB);Kio=r(jYr,"Wav2Vec2CTCTokenizer"),jYr.forEach(t),Zio=r(t6e," (Wav2Vec2 model)"),t6e.forEach(t),edo=i(S),rh=n(S,"LI",{});var a6e=s(rh);ine=n(a6e,"STRONG",{});var DYr=s(ine);odo=r(DYr,"wav2vec2-conformer"),DYr.forEach(t),rdo=r(a6e," \u2014 "),xB=n(a6e,"A",{href:!0});var GYr=s(xB);tdo=r(GYr,"Wav2Vec2CTCTokenizer"),GYr.forEach(t),ado=r(a6e," (Wav2Vec2-Conformer model)"),a6e.forEach(t),ndo=i(S),th=n(S,"LI",{});var n6e=s(th);dne=n(n6e,"STRONG",{});var OYr=s(dne);sdo=r(OYr,"wav2vec2_phoneme"),OYr.forEach(t),ldo=r(n6e," \u2014 "),$B=n(n6e,"A",{href:!0});var VYr=s($B);ido=r(VYr,"Wav2Vec2PhonemeCTCTokenizer"),VYr.forEach(t),ddo=r(n6e," (Wav2Vec2Phoneme model)"),n6e.forEach(t),cdo=i(S),xs=n(S,"LI",{});var O$=s(xs);cne=n(O$,"STRONG",{});var XYr=s(cne);fdo=r(XYr,"xglm"),XYr.forEach(t),mdo=r(O$," \u2014 "),kB=n(O$,"A",{href:!0});var zYr=s(kB);gdo=r(zYr,"XGLMTokenizer"),zYr.forEach(t),hdo=r(O$," or "),SB=n(O$,"A",{href:!0});var WYr=s(SB);pdo=r(WYr,"XGLMTokenizerFast"),WYr.forEach(t),_do=r(O$," (XGLM model)"),O$.forEach(t),udo=i(S),ah=n(S,"LI",{});var s6e=s(ah);fne=n(s6e,"STRONG",{});var QYr=s(fne);bdo=r(QYr,"xlm"),QYr.forEach(t),vdo=r(s6e," \u2014 "),RB=n(s6e,"A",{href:!0});var HYr=s(RB);Fdo=r(HYr,"XLMTokenizer"),HYr.forEach(t),Tdo=r(s6e," (XLM model)"),s6e.forEach(t),Mdo=i(S),nh=n(S,"LI",{});var l6e=s(nh);mne=n(l6e,"STRONG",{});var UYr=s(mne);Edo=r(UYr,"xlm-prophetnet"),UYr.forEach(t),Cdo=r(l6e," \u2014 "),PB=n(l6e,"A",{href:!0});var JYr=s(PB);wdo=r(JYr,"XLMProphetNetTokenizer"),JYr.forEach(t),Ado=r(l6e," (XLMProphetNet model)"),l6e.forEach(t),ydo=i(S),$s=n(S,"LI",{});var V$=s($s);gne=n(V$,"STRONG",{});var YYr=s(gne);Ldo=r(YYr,"xlm-roberta"),YYr.forEach(t),xdo=r(V$," \u2014 "),BB=n(V$,"A",{href:!0});var KYr=s(BB);$do=r(KYr,"XLMRobertaTokenizer"),KYr.forEach(t),kdo=r(V$," or "),IB=n(V$,"A",{href:!0});var ZYr=s(IB);Sdo=r(ZYr,"XLMRobertaTokenizerFast"),ZYr.forEach(t),Rdo=r(V$," (XLM-RoBERTa model)"),V$.forEach(t),Pdo=i(S),ks=n(S,"LI",{});var X$=s(ks);hne=n(X$,"STRONG",{});var eKr=s(hne);Bdo=r(eKr,"xlm-roberta-xl"),eKr.forEach(t),Ido=r(X$," \u2014 "),NB=n(X$,"A",{href:!0});var oKr=s(NB);Ndo=r(oKr,"RobertaTokenizer"),oKr.forEach(t),qdo=r(X$," or "),qB=n(X$,"A",{href:!0});var rKr=s(qB);jdo=r(rKr,"RobertaTokenizerFast"),rKr.forEach(t),Ddo=r(X$," (XLM-RoBERTa-XL model)"),X$.forEach(t),Gdo=i(S),Ss=n(S,"LI",{});var z$=s(Ss);pne=n(z$,"STRONG",{});var tKr=s(pne);Odo=r(tKr,"xlnet"),tKr.forEach(t),Vdo=r(z$," \u2014 "),jB=n(z$,"A",{href:!0});var aKr=s(jB);Xdo=r(aKr,"XLNetTokenizer"),aKr.forEach(t),zdo=r(z$," or "),DB=n(z$,"A",{href:!0});var nKr=s(DB);Wdo=r(nKr,"XLNetTokenizerFast"),nKr.forEach(t),Qdo=r(z$," (XLNet model)"),z$.forEach(t),Hdo=i(S),Rs=n(S,"LI",{});var W$=s(Rs);_ne=n(W$,"STRONG",{});var sKr=s(_ne);Udo=r(sKr,"yoso"),sKr.forEach(t),Jdo=r(W$," \u2014 "),GB=n(W$,"A",{href:!0});var lKr=s(GB);Ydo=r(lKr,"AlbertTokenizer"),lKr.forEach(t),Kdo=r(W$," or "),OB=n(W$,"A",{href:!0});var iKr=s(OB);Zdo=r(iKr,"AlbertTokenizerFast"),iKr.forEach(t),eco=r(W$," (YOSO model)"),W$.forEach(t),S.forEach(t),oco=i(qs),T(sh.$$.fragment,qs),qs.forEach(t),rco=i(Ns),lh=n(Ns,"DIV",{class:!0});var ADe=s(lh);T(zA.$$.fragment,ADe),tco=i(ADe),une=n(ADe,"P",{});var dKr=s(une);aco=r(dKr,"Register a new tokenizer in this mapping."),dKr.forEach(t),ADe.forEach(t),Ns.forEach(t),yqe=i(f),Mi=n(f,"H2",{class:!0});var yDe=s(Mi);ih=n(yDe,"A",{id:!0,class:!0,href:!0});var cKr=s(ih);bne=n(cKr,"SPAN",{});var fKr=s(bne);T(WA.$$.fragment,fKr),fKr.forEach(t),cKr.forEach(t),nco=i(yDe),vne=n(yDe,"SPAN",{});var mKr=s(vne);sco=r(mKr,"AutoFeatureExtractor"),mKr.forEach(t),yDe.forEach(t),Lqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(QA.$$.fragment,js),lco=i(js),HA=n(js,"P",{});var LDe=s(HA);ico=r(LDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VB=n(LDe,"A",{href:!0});var gKr=s(VB);dco=r(gKr,"AutoFeatureExtractor.from_pretrained()"),gKr.forEach(t),cco=r(LDe," class method."),LDe.forEach(t),fco=i(js),UA=n(js,"P",{});var xDe=s(UA);mco=r(xDe,"This class cannot be instantiated directly using "),Fne=n(xDe,"CODE",{});var hKr=s(Fne);gco=r(hKr,"__init__()"),hKr.forEach(t),hco=r(xDe," (throws an error)."),xDe.forEach(t),pco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(JA.$$.fragment,Zt),_co=i(Zt),Tne=n(Zt,"P",{});var pKr=s(Tne);uco=r(pKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pKr.forEach(t),bco=i(Zt),ya=n(Zt,"P",{});var B0=s(ya);vco=r(B0,"The feature extractor class to instantiate is selected based on the "),Mne=n(B0,"CODE",{});var _Kr=s(Mne);Fco=r(_Kr,"model_type"),_Kr.forEach(t),Tco=r(B0,` property of the config object
(either passed as an argument or loaded from `),Ene=n(B0,"CODE",{});var uKr=s(Ene);Mco=r(uKr,"pretrained_model_name_or_path"),uKr.forEach(t),Eco=r(B0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Cne=n(B0,"CODE",{});var bKr=s(Cne);Cco=r(bKr,"pretrained_model_name_or_path"),bKr.forEach(t),wco=r(B0,":"),B0.forEach(t),Aco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var i6e=s(dh);wne=n(i6e,"STRONG",{});var vKr=s(wne);yco=r(vKr,"beit"),vKr.forEach(t),Lco=r(i6e," \u2014 "),XB=n(i6e,"A",{href:!0});var FKr=s(XB);xco=r(FKr,"BeitFeatureExtractor"),FKr.forEach(t),$co=r(i6e," (BEiT model)"),i6e.forEach(t),kco=i(Z),ch=n(Z,"LI",{});var d6e=s(ch);Ane=n(d6e,"STRONG",{});var TKr=s(Ane);Sco=r(TKr,"clip"),TKr.forEach(t),Rco=r(d6e," \u2014 "),zB=n(d6e,"A",{href:!0});var MKr=s(zB);Pco=r(MKr,"CLIPFeatureExtractor"),MKr.forEach(t),Bco=r(d6e," (CLIP model)"),d6e.forEach(t),Ico=i(Z),fh=n(Z,"LI",{});var c6e=s(fh);yne=n(c6e,"STRONG",{});var EKr=s(yne);Nco=r(EKr,"convnext"),EKr.forEach(t),qco=r(c6e," \u2014 "),WB=n(c6e,"A",{href:!0});var CKr=s(WB);jco=r(CKr,"ConvNextFeatureExtractor"),CKr.forEach(t),Dco=r(c6e," (ConvNext model)"),c6e.forEach(t),Gco=i(Z),mh=n(Z,"LI",{});var f6e=s(mh);Lne=n(f6e,"STRONG",{});var wKr=s(Lne);Oco=r(wKr,"cvt"),wKr.forEach(t),Vco=r(f6e," \u2014 "),QB=n(f6e,"A",{href:!0});var AKr=s(QB);Xco=r(AKr,"ConvNextFeatureExtractor"),AKr.forEach(t),zco=r(f6e," (CvT model)"),f6e.forEach(t),Wco=i(Z),gh=n(Z,"LI",{});var m6e=s(gh);xne=n(m6e,"STRONG",{});var yKr=s(xne);Qco=r(yKr,"data2vec-audio"),yKr.forEach(t),Hco=r(m6e," \u2014 "),HB=n(m6e,"A",{href:!0});var LKr=s(HB);Uco=r(LKr,"Wav2Vec2FeatureExtractor"),LKr.forEach(t),Jco=r(m6e," (Data2VecAudio model)"),m6e.forEach(t),Yco=i(Z),hh=n(Z,"LI",{});var g6e=s(hh);$ne=n(g6e,"STRONG",{});var xKr=s($ne);Kco=r(xKr,"data2vec-vision"),xKr.forEach(t),Zco=r(g6e," \u2014 "),UB=n(g6e,"A",{href:!0});var $Kr=s(UB);efo=r($Kr,"BeitFeatureExtractor"),$Kr.forEach(t),ofo=r(g6e," (Data2VecVision model)"),g6e.forEach(t),rfo=i(Z),ph=n(Z,"LI",{});var h6e=s(ph);kne=n(h6e,"STRONG",{});var kKr=s(kne);tfo=r(kKr,"deit"),kKr.forEach(t),afo=r(h6e," \u2014 "),JB=n(h6e,"A",{href:!0});var SKr=s(JB);nfo=r(SKr,"DeiTFeatureExtractor"),SKr.forEach(t),sfo=r(h6e," (DeiT model)"),h6e.forEach(t),lfo=i(Z),_h=n(Z,"LI",{});var p6e=s(_h);Sne=n(p6e,"STRONG",{});var RKr=s(Sne);ifo=r(RKr,"detr"),RKr.forEach(t),dfo=r(p6e," \u2014 "),YB=n(p6e,"A",{href:!0});var PKr=s(YB);cfo=r(PKr,"DetrFeatureExtractor"),PKr.forEach(t),ffo=r(p6e," (DETR model)"),p6e.forEach(t),mfo=i(Z),uh=n(Z,"LI",{});var _6e=s(uh);Rne=n(_6e,"STRONG",{});var BKr=s(Rne);gfo=r(BKr,"dpt"),BKr.forEach(t),hfo=r(_6e," \u2014 "),KB=n(_6e,"A",{href:!0});var IKr=s(KB);pfo=r(IKr,"DPTFeatureExtractor"),IKr.forEach(t),_fo=r(_6e," (DPT model)"),_6e.forEach(t),ufo=i(Z),bh=n(Z,"LI",{});var u6e=s(bh);Pne=n(u6e,"STRONG",{});var NKr=s(Pne);bfo=r(NKr,"flava"),NKr.forEach(t),vfo=r(u6e," \u2014 "),ZB=n(u6e,"A",{href:!0});var qKr=s(ZB);Ffo=r(qKr,"FlavaFeatureExtractor"),qKr.forEach(t),Tfo=r(u6e," (Flava model)"),u6e.forEach(t),Mfo=i(Z),vh=n(Z,"LI",{});var b6e=s(vh);Bne=n(b6e,"STRONG",{});var jKr=s(Bne);Efo=r(jKr,"glpn"),jKr.forEach(t),Cfo=r(b6e," \u2014 "),eI=n(b6e,"A",{href:!0});var DKr=s(eI);wfo=r(DKr,"GLPNFeatureExtractor"),DKr.forEach(t),Afo=r(b6e," (GLPN model)"),b6e.forEach(t),yfo=i(Z),Fh=n(Z,"LI",{});var v6e=s(Fh);Ine=n(v6e,"STRONG",{});var GKr=s(Ine);Lfo=r(GKr,"hubert"),GKr.forEach(t),xfo=r(v6e," \u2014 "),oI=n(v6e,"A",{href:!0});var OKr=s(oI);$fo=r(OKr,"Wav2Vec2FeatureExtractor"),OKr.forEach(t),kfo=r(v6e," (Hubert model)"),v6e.forEach(t),Sfo=i(Z),Th=n(Z,"LI",{});var F6e=s(Th);Nne=n(F6e,"STRONG",{});var VKr=s(Nne);Rfo=r(VKr,"imagegpt"),VKr.forEach(t),Pfo=r(F6e," \u2014 "),rI=n(F6e,"A",{href:!0});var XKr=s(rI);Bfo=r(XKr,"ImageGPTFeatureExtractor"),XKr.forEach(t),Ifo=r(F6e," (ImageGPT model)"),F6e.forEach(t),Nfo=i(Z),Mh=n(Z,"LI",{});var T6e=s(Mh);qne=n(T6e,"STRONG",{});var zKr=s(qne);qfo=r(zKr,"layoutlmv2"),zKr.forEach(t),jfo=r(T6e," \u2014 "),tI=n(T6e,"A",{href:!0});var WKr=s(tI);Dfo=r(WKr,"LayoutLMv2FeatureExtractor"),WKr.forEach(t),Gfo=r(T6e," (LayoutLMv2 model)"),T6e.forEach(t),Ofo=i(Z),Eh=n(Z,"LI",{});var M6e=s(Eh);jne=n(M6e,"STRONG",{});var QKr=s(jne);Vfo=r(QKr,"layoutlmv3"),QKr.forEach(t),Xfo=r(M6e," \u2014 "),aI=n(M6e,"A",{href:!0});var HKr=s(aI);zfo=r(HKr,"LayoutLMv3FeatureExtractor"),HKr.forEach(t),Wfo=r(M6e," (LayoutLMv3 model)"),M6e.forEach(t),Qfo=i(Z),Ch=n(Z,"LI",{});var E6e=s(Ch);Dne=n(E6e,"STRONG",{});var UKr=s(Dne);Hfo=r(UKr,"maskformer"),UKr.forEach(t),Ufo=r(E6e," \u2014 "),nI=n(E6e,"A",{href:!0});var JKr=s(nI);Jfo=r(JKr,"MaskFormerFeatureExtractor"),JKr.forEach(t),Yfo=r(E6e," (MaskFormer model)"),E6e.forEach(t),Kfo=i(Z),wh=n(Z,"LI",{});var C6e=s(wh);Gne=n(C6e,"STRONG",{});var YKr=s(Gne);Zfo=r(YKr,"perceiver"),YKr.forEach(t),emo=r(C6e," \u2014 "),sI=n(C6e,"A",{href:!0});var KKr=s(sI);omo=r(KKr,"PerceiverFeatureExtractor"),KKr.forEach(t),rmo=r(C6e," (Perceiver model)"),C6e.forEach(t),tmo=i(Z),Ah=n(Z,"LI",{});var w6e=s(Ah);One=n(w6e,"STRONG",{});var ZKr=s(One);amo=r(ZKr,"poolformer"),ZKr.forEach(t),nmo=r(w6e," \u2014 "),lI=n(w6e,"A",{href:!0});var eZr=s(lI);smo=r(eZr,"PoolFormerFeatureExtractor"),eZr.forEach(t),lmo=r(w6e," (PoolFormer model)"),w6e.forEach(t),imo=i(Z),yh=n(Z,"LI",{});var A6e=s(yh);Vne=n(A6e,"STRONG",{});var oZr=s(Vne);dmo=r(oZr,"regnet"),oZr.forEach(t),cmo=r(A6e," \u2014 "),iI=n(A6e,"A",{href:!0});var rZr=s(iI);fmo=r(rZr,"ConvNextFeatureExtractor"),rZr.forEach(t),mmo=r(A6e," (RegNet model)"),A6e.forEach(t),gmo=i(Z),Lh=n(Z,"LI",{});var y6e=s(Lh);Xne=n(y6e,"STRONG",{});var tZr=s(Xne);hmo=r(tZr,"resnet"),tZr.forEach(t),pmo=r(y6e," \u2014 "),dI=n(y6e,"A",{href:!0});var aZr=s(dI);_mo=r(aZr,"ConvNextFeatureExtractor"),aZr.forEach(t),umo=r(y6e," (ResNet model)"),y6e.forEach(t),bmo=i(Z),xh=n(Z,"LI",{});var L6e=s(xh);zne=n(L6e,"STRONG",{});var nZr=s(zne);vmo=r(nZr,"segformer"),nZr.forEach(t),Fmo=r(L6e," \u2014 "),cI=n(L6e,"A",{href:!0});var sZr=s(cI);Tmo=r(sZr,"SegformerFeatureExtractor"),sZr.forEach(t),Mmo=r(L6e," (SegFormer model)"),L6e.forEach(t),Emo=i(Z),$h=n(Z,"LI",{});var x6e=s($h);Wne=n(x6e,"STRONG",{});var lZr=s(Wne);Cmo=r(lZr,"speech_to_text"),lZr.forEach(t),wmo=r(x6e," \u2014 "),fI=n(x6e,"A",{href:!0});var iZr=s(fI);Amo=r(iZr,"Speech2TextFeatureExtractor"),iZr.forEach(t),ymo=r(x6e," (Speech2Text model)"),x6e.forEach(t),Lmo=i(Z),kh=n(Z,"LI",{});var $6e=s(kh);Qne=n($6e,"STRONG",{});var dZr=s(Qne);xmo=r(dZr,"swin"),dZr.forEach(t),$mo=r($6e," \u2014 "),mI=n($6e,"A",{href:!0});var cZr=s(mI);kmo=r(cZr,"ViTFeatureExtractor"),cZr.forEach(t),Smo=r($6e," (Swin model)"),$6e.forEach(t),Rmo=i(Z),Sh=n(Z,"LI",{});var k6e=s(Sh);Hne=n(k6e,"STRONG",{});var fZr=s(Hne);Pmo=r(fZr,"van"),fZr.forEach(t),Bmo=r(k6e," \u2014 "),gI=n(k6e,"A",{href:!0});var mZr=s(gI);Imo=r(mZr,"ConvNextFeatureExtractor"),mZr.forEach(t),Nmo=r(k6e," (VAN model)"),k6e.forEach(t),qmo=i(Z),Rh=n(Z,"LI",{});var S6e=s(Rh);Une=n(S6e,"STRONG",{});var gZr=s(Une);jmo=r(gZr,"vit"),gZr.forEach(t),Dmo=r(S6e," \u2014 "),hI=n(S6e,"A",{href:!0});var hZr=s(hI);Gmo=r(hZr,"ViTFeatureExtractor"),hZr.forEach(t),Omo=r(S6e," (ViT model)"),S6e.forEach(t),Vmo=i(Z),Ph=n(Z,"LI",{});var R6e=s(Ph);Jne=n(R6e,"STRONG",{});var pZr=s(Jne);Xmo=r(pZr,"vit_mae"),pZr.forEach(t),zmo=r(R6e," \u2014 "),pI=n(R6e,"A",{href:!0});var _Zr=s(pI);Wmo=r(_Zr,"ViTFeatureExtractor"),_Zr.forEach(t),Qmo=r(R6e," (ViTMAE model)"),R6e.forEach(t),Hmo=i(Z),Bh=n(Z,"LI",{});var P6e=s(Bh);Yne=n(P6e,"STRONG",{});var uZr=s(Yne);Umo=r(uZr,"wav2vec2"),uZr.forEach(t),Jmo=r(P6e," \u2014 "),_I=n(P6e,"A",{href:!0});var bZr=s(_I);Ymo=r(bZr,"Wav2Vec2FeatureExtractor"),bZr.forEach(t),Kmo=r(P6e," (Wav2Vec2 model)"),P6e.forEach(t),Zmo=i(Z),Ih=n(Z,"LI",{});var B6e=s(Ih);Kne=n(B6e,"STRONG",{});var vZr=s(Kne);ego=r(vZr,"wav2vec2-conformer"),vZr.forEach(t),ogo=r(B6e," \u2014 "),uI=n(B6e,"A",{href:!0});var FZr=s(uI);rgo=r(FZr,"Wav2Vec2FeatureExtractor"),FZr.forEach(t),tgo=r(B6e," (Wav2Vec2-Conformer model)"),B6e.forEach(t),ago=i(Z),Nh=n(Z,"LI",{});var I6e=s(Nh);Zne=n(I6e,"STRONG",{});var TZr=s(Zne);ngo=r(TZr,"yolos"),TZr.forEach(t),sgo=r(I6e," \u2014 "),bI=n(I6e,"A",{href:!0});var MZr=s(bI);lgo=r(MZr,"YolosFeatureExtractor"),MZr.forEach(t),igo=r(I6e," (YOLOS model)"),I6e.forEach(t),Z.forEach(t),dgo=i(Zt),T(qh.$$.fragment,Zt),cgo=i(Zt),T(jh.$$.fragment,Zt),Zt.forEach(t),fgo=i(js),Dh=n(js,"DIV",{class:!0});var $De=s(Dh);T(YA.$$.fragment,$De),mgo=i($De),ese=n($De,"P",{});var EZr=s(ese);ggo=r(EZr,"Register a new feature extractor for this class."),EZr.forEach(t),$De.forEach(t),js.forEach(t),xqe=i(f),Ei=n(f,"H2",{class:!0});var kDe=s(Ei);Gh=n(kDe,"A",{id:!0,class:!0,href:!0});var CZr=s(Gh);ose=n(CZr,"SPAN",{});var wZr=s(ose);T(KA.$$.fragment,wZr),wZr.forEach(t),CZr.forEach(t),hgo=i(kDe),rse=n(kDe,"SPAN",{});var AZr=s(rse);pgo=r(AZr,"AutoProcessor"),AZr.forEach(t),kDe.forEach(t),$qe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(ZA.$$.fragment,Ds),_go=i(Ds),ey=n(Ds,"P",{});var SDe=s(ey);ugo=r(SDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=n(SDe,"A",{href:!0});var yZr=s(vI);bgo=r(yZr,"AutoProcessor.from_pretrained()"),yZr.forEach(t),vgo=r(SDe," class method."),SDe.forEach(t),Fgo=i(Ds),oy=n(Ds,"P",{});var RDe=s(oy);Tgo=r(RDe,"This class cannot be instantiated directly using "),tse=n(RDe,"CODE",{});var LZr=s(tse);Mgo=r(LZr,"__init__()"),LZr.forEach(t),Ego=r(RDe," (throws an error)."),RDe.forEach(t),Cgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(ry.$$.fragment,ea),wgo=i(ea),ase=n(ea,"P",{});var xZr=s(ase);Ago=r(xZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xZr.forEach(t),ygo=i(ea),Ci=n(ea,"P",{});var CZ=s(Ci);Lgo=r(CZ,"The processor class to instantiate is selected based on the "),nse=n(CZ,"CODE",{});var $Zr=s(nse);xgo=r($Zr,"model_type"),$Zr.forEach(t),$go=r(CZ,` property of the config object (either
passed as an argument or loaded from `),sse=n(CZ,"CODE",{});var kZr=s(sse);kgo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),Sgo=r(CZ," if possible):"),CZ.forEach(t),Rgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Oh=n(ue,"LI",{});var N6e=s(Oh);lse=n(N6e,"STRONG",{});var SZr=s(lse);Pgo=r(SZr,"clip"),SZr.forEach(t),Bgo=r(N6e," \u2014 "),FI=n(N6e,"A",{href:!0});var RZr=s(FI);Igo=r(RZr,"CLIPProcessor"),RZr.forEach(t),Ngo=r(N6e," (CLIP model)"),N6e.forEach(t),qgo=i(ue),Vh=n(ue,"LI",{});var q6e=s(Vh);ise=n(q6e,"STRONG",{});var PZr=s(ise);jgo=r(PZr,"flava"),PZr.forEach(t),Dgo=r(q6e," \u2014 "),dse=n(q6e,"CODE",{});var BZr=s(dse);Ggo=r(BZr,"FLAVAProcessor"),BZr.forEach(t),Ogo=r(q6e," (Flava model)"),q6e.forEach(t),Vgo=i(ue),Xh=n(ue,"LI",{});var j6e=s(Xh);cse=n(j6e,"STRONG",{});var IZr=s(cse);Xgo=r(IZr,"layoutlmv2"),IZr.forEach(t),zgo=r(j6e," \u2014 "),TI=n(j6e,"A",{href:!0});var NZr=s(TI);Wgo=r(NZr,"LayoutLMv2Processor"),NZr.forEach(t),Qgo=r(j6e," (LayoutLMv2 model)"),j6e.forEach(t),Hgo=i(ue),zh=n(ue,"LI",{});var D6e=s(zh);fse=n(D6e,"STRONG",{});var qZr=s(fse);Ugo=r(qZr,"layoutlmv3"),qZr.forEach(t),Jgo=r(D6e," \u2014 "),MI=n(D6e,"A",{href:!0});var jZr=s(MI);Ygo=r(jZr,"LayoutLMv3Processor"),jZr.forEach(t),Kgo=r(D6e," (LayoutLMv3 model)"),D6e.forEach(t),Zgo=i(ue),Wh=n(ue,"LI",{});var G6e=s(Wh);mse=n(G6e,"STRONG",{});var DZr=s(mse);eho=r(DZr,"layoutxlm"),DZr.forEach(t),oho=r(G6e," \u2014 "),EI=n(G6e,"A",{href:!0});var GZr=s(EI);rho=r(GZr,"LayoutXLMProcessor"),GZr.forEach(t),tho=r(G6e," (LayoutXLM model)"),G6e.forEach(t),aho=i(ue),Qh=n(ue,"LI",{});var O6e=s(Qh);gse=n(O6e,"STRONG",{});var OZr=s(gse);nho=r(OZr,"sew"),OZr.forEach(t),sho=r(O6e," \u2014 "),CI=n(O6e,"A",{href:!0});var VZr=s(CI);lho=r(VZr,"Wav2Vec2Processor"),VZr.forEach(t),iho=r(O6e," (SEW model)"),O6e.forEach(t),dho=i(ue),Hh=n(ue,"LI",{});var V6e=s(Hh);hse=n(V6e,"STRONG",{});var XZr=s(hse);cho=r(XZr,"sew-d"),XZr.forEach(t),fho=r(V6e," \u2014 "),wI=n(V6e,"A",{href:!0});var zZr=s(wI);mho=r(zZr,"Wav2Vec2Processor"),zZr.forEach(t),gho=r(V6e," (SEW-D model)"),V6e.forEach(t),hho=i(ue),Uh=n(ue,"LI",{});var X6e=s(Uh);pse=n(X6e,"STRONG",{});var WZr=s(pse);pho=r(WZr,"speech_to_text"),WZr.forEach(t),_ho=r(X6e," \u2014 "),AI=n(X6e,"A",{href:!0});var QZr=s(AI);uho=r(QZr,"Speech2TextProcessor"),QZr.forEach(t),bho=r(X6e," (Speech2Text model)"),X6e.forEach(t),vho=i(ue),Jh=n(ue,"LI",{});var z6e=s(Jh);_se=n(z6e,"STRONG",{});var HZr=s(_se);Fho=r(HZr,"speech_to_text_2"),HZr.forEach(t),Tho=r(z6e," \u2014 "),yI=n(z6e,"A",{href:!0});var UZr=s(yI);Mho=r(UZr,"Speech2Text2Processor"),UZr.forEach(t),Eho=r(z6e," (Speech2Text2 model)"),z6e.forEach(t),Cho=i(ue),Yh=n(ue,"LI",{});var W6e=s(Yh);use=n(W6e,"STRONG",{});var JZr=s(use);who=r(JZr,"trocr"),JZr.forEach(t),Aho=r(W6e," \u2014 "),LI=n(W6e,"A",{href:!0});var YZr=s(LI);yho=r(YZr,"TrOCRProcessor"),YZr.forEach(t),Lho=r(W6e," (TrOCR model)"),W6e.forEach(t),xho=i(ue),Kh=n(ue,"LI",{});var Q6e=s(Kh);bse=n(Q6e,"STRONG",{});var KZr=s(bse);$ho=r(KZr,"unispeech"),KZr.forEach(t),kho=r(Q6e," \u2014 "),xI=n(Q6e,"A",{href:!0});var ZZr=s(xI);Sho=r(ZZr,"Wav2Vec2Processor"),ZZr.forEach(t),Rho=r(Q6e," (UniSpeech model)"),Q6e.forEach(t),Pho=i(ue),Zh=n(ue,"LI",{});var H6e=s(Zh);vse=n(H6e,"STRONG",{});var eet=s(vse);Bho=r(eet,"unispeech-sat"),eet.forEach(t),Iho=r(H6e," \u2014 "),$I=n(H6e,"A",{href:!0});var oet=s($I);Nho=r(oet,"Wav2Vec2Processor"),oet.forEach(t),qho=r(H6e," (UniSpeechSat model)"),H6e.forEach(t),jho=i(ue),ep=n(ue,"LI",{});var U6e=s(ep);Fse=n(U6e,"STRONG",{});var ret=s(Fse);Dho=r(ret,"vilt"),ret.forEach(t),Gho=r(U6e," \u2014 "),kI=n(U6e,"A",{href:!0});var tet=s(kI);Oho=r(tet,"ViltProcessor"),tet.forEach(t),Vho=r(U6e," (ViLT model)"),U6e.forEach(t),Xho=i(ue),op=n(ue,"LI",{});var J6e=s(op);Tse=n(J6e,"STRONG",{});var aet=s(Tse);zho=r(aet,"vision-text-dual-encoder"),aet.forEach(t),Who=r(J6e," \u2014 "),SI=n(J6e,"A",{href:!0});var net=s(SI);Qho=r(net,"VisionTextDualEncoderProcessor"),net.forEach(t),Hho=r(J6e," (VisionTextDualEncoder model)"),J6e.forEach(t),Uho=i(ue),rp=n(ue,"LI",{});var Y6e=s(rp);Mse=n(Y6e,"STRONG",{});var set=s(Mse);Jho=r(set,"wav2vec2"),set.forEach(t),Yho=r(Y6e," \u2014 "),RI=n(Y6e,"A",{href:!0});var iet=s(RI);Kho=r(iet,"Wav2Vec2Processor"),iet.forEach(t),Zho=r(Y6e," (Wav2Vec2 model)"),Y6e.forEach(t),epo=i(ue),tp=n(ue,"LI",{});var K6e=s(tp);Ese=n(K6e,"STRONG",{});var det=s(Ese);opo=r(det,"wav2vec2-conformer"),det.forEach(t),rpo=r(K6e," \u2014 "),PI=n(K6e,"A",{href:!0});var cet=s(PI);tpo=r(cet,"Wav2Vec2Processor"),cet.forEach(t),apo=r(K6e," (Wav2Vec2-Conformer model)"),K6e.forEach(t),npo=i(ue),ap=n(ue,"LI",{});var Z6e=s(ap);Cse=n(Z6e,"STRONG",{});var fet=s(Cse);spo=r(fet,"wavlm"),fet.forEach(t),lpo=r(Z6e," \u2014 "),BI=n(Z6e,"A",{href:!0});var met=s(BI);ipo=r(met,"Wav2Vec2Processor"),met.forEach(t),dpo=r(Z6e," (WavLM model)"),Z6e.forEach(t),ue.forEach(t),cpo=i(ea),T(np.$$.fragment,ea),fpo=i(ea),T(sp.$$.fragment,ea),ea.forEach(t),mpo=i(Ds),lp=n(Ds,"DIV",{class:!0});var PDe=s(lp);T(ty.$$.fragment,PDe),gpo=i(PDe),wse=n(PDe,"P",{});var get=s(wse);hpo=r(get,"Register a new processor for this class."),get.forEach(t),PDe.forEach(t),Ds.forEach(t),kqe=i(f),wi=n(f,"H2",{class:!0});var BDe=s(wi);ip=n(BDe,"A",{id:!0,class:!0,href:!0});var het=s(ip);Ase=n(het,"SPAN",{});var pet=s(Ase);T(ay.$$.fragment,pet),pet.forEach(t),het.forEach(t),ppo=i(BDe),yse=n(BDe,"SPAN",{});var _et=s(yse);_po=r(_et,"AutoModel"),_et.forEach(t),BDe.forEach(t),Sqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ny.$$.fragment,Gs),upo=i(Gs),Ai=n(Gs,"P",{});var wZ=s(Ai);bpo=r(wZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),II=n(wZ,"A",{href:!0});var uet=s(II);vpo=r(uet,"from_pretrained()"),uet.forEach(t),Fpo=r(wZ," class method or the "),NI=n(wZ,"A",{href:!0});var bet=s(NI);Tpo=r(bet,"from_config()"),bet.forEach(t),Mpo=r(wZ,` class
method.`),wZ.forEach(t),Epo=i(Gs),sy=n(Gs,"P",{});var IDe=s(sy);Cpo=r(IDe,"This class cannot be instantiated directly using "),Lse=n(IDe,"CODE",{});var vet=s(Lse);wpo=r(vet,"__init__()"),vet.forEach(t),Apo=r(IDe," (throws an error)."),IDe.forEach(t),ypo=i(Gs),tt=n(Gs,"DIV",{class:!0});var I0=s(tt);T(ly.$$.fragment,I0),Lpo=i(I0),xse=n(I0,"P",{});var Fet=s(xse);xpo=r(Fet,"Instantiates one of the base model classes of the library from a configuration."),Fet.forEach(t),$po=i(I0),yi=n(I0,"P",{});var AZ=s(yi);kpo=r(AZ,`Note:
Loading a model from its configuration file does `),$se=n(AZ,"STRONG",{});var Tet=s($se);Spo=r(Tet,"not"),Tet.forEach(t),Rpo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=n(AZ,"A",{href:!0});var Met=s(qI);Ppo=r(Met,"from_pretrained()"),Met.forEach(t),Bpo=r(AZ," to load the model weights."),AZ.forEach(t),Ipo=i(I0),T(dp.$$.fragment,I0),I0.forEach(t),Npo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(iy.$$.fragment,oa),qpo=i(oa),kse=n(oa,"P",{});var Eet=s(kse);jpo=r(Eet,"Instantiate one of the base model classes of the library from a pretrained model."),Eet.forEach(t),Dpo=i(oa),La=n(oa,"P",{});var N0=s(La);Gpo=r(N0,"The model class to instantiate is selected based on the "),Sse=n(N0,"CODE",{});var Cet=s(Sse);Opo=r(Cet,"model_type"),Cet.forEach(t),Vpo=r(N0,` property of the config object (either
passed as an argument or loaded from `),Rse=n(N0,"CODE",{});var wet=s(Rse);Xpo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),zpo=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=n(N0,"CODE",{});var Aet=s(Pse);Wpo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),Qpo=r(N0,":"),N0.forEach(t),Hpo=i(oa),x=n(oa,"UL",{});var $=s(x);cp=n($,"LI",{});var eAe=s(cp);Bse=n(eAe,"STRONG",{});var yet=s(Bse);Upo=r(yet,"albert"),yet.forEach(t),Jpo=r(eAe," \u2014 "),jI=n(eAe,"A",{href:!0});var Let=s(jI);Ypo=r(Let,"AlbertModel"),Let.forEach(t),Kpo=r(eAe," (ALBERT model)"),eAe.forEach(t),Zpo=i($),fp=n($,"LI",{});var oAe=s(fp);Ise=n(oAe,"STRONG",{});var xet=s(Ise);e_o=r(xet,"bart"),xet.forEach(t),o_o=r(oAe," \u2014 "),DI=n(oAe,"A",{href:!0});var $et=s(DI);r_o=r($et,"BartModel"),$et.forEach(t),t_o=r(oAe," (BART model)"),oAe.forEach(t),a_o=i($),mp=n($,"LI",{});var rAe=s(mp);Nse=n(rAe,"STRONG",{});var ket=s(Nse);n_o=r(ket,"beit"),ket.forEach(t),s_o=r(rAe," \u2014 "),GI=n(rAe,"A",{href:!0});var Set=s(GI);l_o=r(Set,"BeitModel"),Set.forEach(t),i_o=r(rAe," (BEiT model)"),rAe.forEach(t),d_o=i($),gp=n($,"LI",{});var tAe=s(gp);qse=n(tAe,"STRONG",{});var Ret=s(qse);c_o=r(Ret,"bert"),Ret.forEach(t),f_o=r(tAe," \u2014 "),OI=n(tAe,"A",{href:!0});var Pet=s(OI);m_o=r(Pet,"BertModel"),Pet.forEach(t),g_o=r(tAe," (BERT model)"),tAe.forEach(t),h_o=i($),hp=n($,"LI",{});var aAe=s(hp);jse=n(aAe,"STRONG",{});var Bet=s(jse);p_o=r(Bet,"bert-generation"),Bet.forEach(t),__o=r(aAe," \u2014 "),VI=n(aAe,"A",{href:!0});var Iet=s(VI);u_o=r(Iet,"BertGenerationEncoder"),Iet.forEach(t),b_o=r(aAe," (Bert Generation model)"),aAe.forEach(t),v_o=i($),pp=n($,"LI",{});var nAe=s(pp);Dse=n(nAe,"STRONG",{});var Net=s(Dse);F_o=r(Net,"big_bird"),Net.forEach(t),T_o=r(nAe," \u2014 "),XI=n(nAe,"A",{href:!0});var qet=s(XI);M_o=r(qet,"BigBirdModel"),qet.forEach(t),E_o=r(nAe," (BigBird model)"),nAe.forEach(t),C_o=i($),_p=n($,"LI",{});var sAe=s(_p);Gse=n(sAe,"STRONG",{});var jet=s(Gse);w_o=r(jet,"bigbird_pegasus"),jet.forEach(t),A_o=r(sAe," \u2014 "),zI=n(sAe,"A",{href:!0});var Det=s(zI);y_o=r(Det,"BigBirdPegasusModel"),Det.forEach(t),L_o=r(sAe," (BigBirdPegasus model)"),sAe.forEach(t),x_o=i($),up=n($,"LI",{});var lAe=s(up);Ose=n(lAe,"STRONG",{});var Get=s(Ose);$_o=r(Get,"blenderbot"),Get.forEach(t),k_o=r(lAe," \u2014 "),WI=n(lAe,"A",{href:!0});var Oet=s(WI);S_o=r(Oet,"BlenderbotModel"),Oet.forEach(t),R_o=r(lAe," (Blenderbot model)"),lAe.forEach(t),P_o=i($),bp=n($,"LI",{});var iAe=s(bp);Vse=n(iAe,"STRONG",{});var Vet=s(Vse);B_o=r(Vet,"blenderbot-small"),Vet.forEach(t),I_o=r(iAe," \u2014 "),QI=n(iAe,"A",{href:!0});var Xet=s(QI);N_o=r(Xet,"BlenderbotSmallModel"),Xet.forEach(t),q_o=r(iAe," (BlenderbotSmall model)"),iAe.forEach(t),j_o=i($),vp=n($,"LI",{});var dAe=s(vp);Xse=n(dAe,"STRONG",{});var zet=s(Xse);D_o=r(zet,"bloom"),zet.forEach(t),G_o=r(dAe," \u2014 "),HI=n(dAe,"A",{href:!0});var Wet=s(HI);O_o=r(Wet,"BloomModel"),Wet.forEach(t),V_o=r(dAe," (BLOOM model)"),dAe.forEach(t),X_o=i($),Fp=n($,"LI",{});var cAe=s(Fp);zse=n(cAe,"STRONG",{});var Qet=s(zse);z_o=r(Qet,"camembert"),Qet.forEach(t),W_o=r(cAe," \u2014 "),UI=n(cAe,"A",{href:!0});var Het=s(UI);Q_o=r(Het,"CamembertModel"),Het.forEach(t),H_o=r(cAe," (CamemBERT model)"),cAe.forEach(t),U_o=i($),Tp=n($,"LI",{});var fAe=s(Tp);Wse=n(fAe,"STRONG",{});var Uet=s(Wse);J_o=r(Uet,"canine"),Uet.forEach(t),Y_o=r(fAe," \u2014 "),JI=n(fAe,"A",{href:!0});var Jet=s(JI);K_o=r(Jet,"CanineModel"),Jet.forEach(t),Z_o=r(fAe," (Canine model)"),fAe.forEach(t),euo=i($),Mp=n($,"LI",{});var mAe=s(Mp);Qse=n(mAe,"STRONG",{});var Yet=s(Qse);ouo=r(Yet,"clip"),Yet.forEach(t),ruo=r(mAe," \u2014 "),YI=n(mAe,"A",{href:!0});var Ket=s(YI);tuo=r(Ket,"CLIPModel"),Ket.forEach(t),auo=r(mAe," (CLIP model)"),mAe.forEach(t),nuo=i($),Ep=n($,"LI",{});var gAe=s(Ep);Hse=n(gAe,"STRONG",{});var Zet=s(Hse);suo=r(Zet,"convbert"),Zet.forEach(t),luo=r(gAe," \u2014 "),KI=n(gAe,"A",{href:!0});var eot=s(KI);iuo=r(eot,"ConvBertModel"),eot.forEach(t),duo=r(gAe," (ConvBERT model)"),gAe.forEach(t),cuo=i($),Cp=n($,"LI",{});var hAe=s(Cp);Use=n(hAe,"STRONG",{});var oot=s(Use);fuo=r(oot,"convnext"),oot.forEach(t),muo=r(hAe," \u2014 "),ZI=n(hAe,"A",{href:!0});var rot=s(ZI);guo=r(rot,"ConvNextModel"),rot.forEach(t),huo=r(hAe," (ConvNext model)"),hAe.forEach(t),puo=i($),wp=n($,"LI",{});var pAe=s(wp);Jse=n(pAe,"STRONG",{});var tot=s(Jse);_uo=r(tot,"ctrl"),tot.forEach(t),uuo=r(pAe," \u2014 "),eN=n(pAe,"A",{href:!0});var aot=s(eN);buo=r(aot,"CTRLModel"),aot.forEach(t),vuo=r(pAe," (CTRL model)"),pAe.forEach(t),Fuo=i($),Ap=n($,"LI",{});var _Ae=s(Ap);Yse=n(_Ae,"STRONG",{});var not=s(Yse);Tuo=r(not,"cvt"),not.forEach(t),Muo=r(_Ae," \u2014 "),oN=n(_Ae,"A",{href:!0});var sot=s(oN);Euo=r(sot,"CvtModel"),sot.forEach(t),Cuo=r(_Ae," (CvT model)"),_Ae.forEach(t),wuo=i($),yp=n($,"LI",{});var uAe=s(yp);Kse=n(uAe,"STRONG",{});var lot=s(Kse);Auo=r(lot,"data2vec-audio"),lot.forEach(t),yuo=r(uAe," \u2014 "),rN=n(uAe,"A",{href:!0});var iot=s(rN);Luo=r(iot,"Data2VecAudioModel"),iot.forEach(t),xuo=r(uAe," (Data2VecAudio model)"),uAe.forEach(t),$uo=i($),Lp=n($,"LI",{});var bAe=s(Lp);Zse=n(bAe,"STRONG",{});var dot=s(Zse);kuo=r(dot,"data2vec-text"),dot.forEach(t),Suo=r(bAe," \u2014 "),tN=n(bAe,"A",{href:!0});var cot=s(tN);Ruo=r(cot,"Data2VecTextModel"),cot.forEach(t),Puo=r(bAe," (Data2VecText model)"),bAe.forEach(t),Buo=i($),xp=n($,"LI",{});var vAe=s(xp);ele=n(vAe,"STRONG",{});var fot=s(ele);Iuo=r(fot,"data2vec-vision"),fot.forEach(t),Nuo=r(vAe," \u2014 "),aN=n(vAe,"A",{href:!0});var mot=s(aN);quo=r(mot,"Data2VecVisionModel"),mot.forEach(t),juo=r(vAe," (Data2VecVision model)"),vAe.forEach(t),Duo=i($),$p=n($,"LI",{});var FAe=s($p);ole=n(FAe,"STRONG",{});var got=s(ole);Guo=r(got,"deberta"),got.forEach(t),Ouo=r(FAe," \u2014 "),nN=n(FAe,"A",{href:!0});var hot=s(nN);Vuo=r(hot,"DebertaModel"),hot.forEach(t),Xuo=r(FAe," (DeBERTa model)"),FAe.forEach(t),zuo=i($),kp=n($,"LI",{});var TAe=s(kp);rle=n(TAe,"STRONG",{});var pot=s(rle);Wuo=r(pot,"deberta-v2"),pot.forEach(t),Quo=r(TAe," \u2014 "),sN=n(TAe,"A",{href:!0});var _ot=s(sN);Huo=r(_ot,"DebertaV2Model"),_ot.forEach(t),Uuo=r(TAe," (DeBERTa-v2 model)"),TAe.forEach(t),Juo=i($),Sp=n($,"LI",{});var MAe=s(Sp);tle=n(MAe,"STRONG",{});var uot=s(tle);Yuo=r(uot,"decision_transformer"),uot.forEach(t),Kuo=r(MAe," \u2014 "),lN=n(MAe,"A",{href:!0});var bot=s(lN);Zuo=r(bot,"DecisionTransformerModel"),bot.forEach(t),e4o=r(MAe," (Decision Transformer model)"),MAe.forEach(t),o4o=i($),Rp=n($,"LI",{});var EAe=s(Rp);ale=n(EAe,"STRONG",{});var vot=s(ale);r4o=r(vot,"deit"),vot.forEach(t),t4o=r(EAe," \u2014 "),iN=n(EAe,"A",{href:!0});var Fot=s(iN);a4o=r(Fot,"DeiTModel"),Fot.forEach(t),n4o=r(EAe," (DeiT model)"),EAe.forEach(t),s4o=i($),Pp=n($,"LI",{});var CAe=s(Pp);nle=n(CAe,"STRONG",{});var Tot=s(nle);l4o=r(Tot,"detr"),Tot.forEach(t),i4o=r(CAe," \u2014 "),dN=n(CAe,"A",{href:!0});var Mot=s(dN);d4o=r(Mot,"DetrModel"),Mot.forEach(t),c4o=r(CAe," (DETR model)"),CAe.forEach(t),f4o=i($),Bp=n($,"LI",{});var wAe=s(Bp);sle=n(wAe,"STRONG",{});var Eot=s(sle);m4o=r(Eot,"distilbert"),Eot.forEach(t),g4o=r(wAe," \u2014 "),cN=n(wAe,"A",{href:!0});var Cot=s(cN);h4o=r(Cot,"DistilBertModel"),Cot.forEach(t),p4o=r(wAe," (DistilBERT model)"),wAe.forEach(t),_4o=i($),Ip=n($,"LI",{});var AAe=s(Ip);lle=n(AAe,"STRONG",{});var wot=s(lle);u4o=r(wot,"dpr"),wot.forEach(t),b4o=r(AAe," \u2014 "),fN=n(AAe,"A",{href:!0});var Aot=s(fN);v4o=r(Aot,"DPRQuestionEncoder"),Aot.forEach(t),F4o=r(AAe," (DPR model)"),AAe.forEach(t),T4o=i($),Np=n($,"LI",{});var yAe=s(Np);ile=n(yAe,"STRONG",{});var yot=s(ile);M4o=r(yot,"dpt"),yot.forEach(t),E4o=r(yAe," \u2014 "),mN=n(yAe,"A",{href:!0});var Lot=s(mN);C4o=r(Lot,"DPTModel"),Lot.forEach(t),w4o=r(yAe," (DPT model)"),yAe.forEach(t),A4o=i($),qp=n($,"LI",{});var LAe=s(qp);dle=n(LAe,"STRONG",{});var xot=s(dle);y4o=r(xot,"electra"),xot.forEach(t),L4o=r(LAe," \u2014 "),gN=n(LAe,"A",{href:!0});var $ot=s(gN);x4o=r($ot,"ElectraModel"),$ot.forEach(t),$4o=r(LAe," (ELECTRA model)"),LAe.forEach(t),k4o=i($),jp=n($,"LI",{});var xAe=s(jp);cle=n(xAe,"STRONG",{});var kot=s(cle);S4o=r(kot,"flaubert"),kot.forEach(t),R4o=r(xAe," \u2014 "),hN=n(xAe,"A",{href:!0});var Sot=s(hN);P4o=r(Sot,"FlaubertModel"),Sot.forEach(t),B4o=r(xAe," (FlauBERT model)"),xAe.forEach(t),I4o=i($),Dp=n($,"LI",{});var $Ae=s(Dp);fle=n($Ae,"STRONG",{});var Rot=s(fle);N4o=r(Rot,"flava"),Rot.forEach(t),q4o=r($Ae," \u2014 "),pN=n($Ae,"A",{href:!0});var Pot=s(pN);j4o=r(Pot,"FlavaModel"),Pot.forEach(t),D4o=r($Ae," (Flava model)"),$Ae.forEach(t),G4o=i($),Gp=n($,"LI",{});var kAe=s(Gp);mle=n(kAe,"STRONG",{});var Bot=s(mle);O4o=r(Bot,"fnet"),Bot.forEach(t),V4o=r(kAe," \u2014 "),_N=n(kAe,"A",{href:!0});var Iot=s(_N);X4o=r(Iot,"FNetModel"),Iot.forEach(t),z4o=r(kAe," (FNet model)"),kAe.forEach(t),W4o=i($),Op=n($,"LI",{});var SAe=s(Op);gle=n(SAe,"STRONG",{});var Not=s(gle);Q4o=r(Not,"fsmt"),Not.forEach(t),H4o=r(SAe," \u2014 "),uN=n(SAe,"A",{href:!0});var qot=s(uN);U4o=r(qot,"FSMTModel"),qot.forEach(t),J4o=r(SAe," (FairSeq Machine-Translation model)"),SAe.forEach(t),Y4o=i($),Ps=n($,"LI",{});var Q$=s(Ps);hle=n(Q$,"STRONG",{});var jot=s(hle);K4o=r(jot,"funnel"),jot.forEach(t),Z4o=r(Q$," \u2014 "),bN=n(Q$,"A",{href:!0});var Dot=s(bN);e1o=r(Dot,"FunnelModel"),Dot.forEach(t),o1o=r(Q$," or "),vN=n(Q$,"A",{href:!0});var Got=s(vN);r1o=r(Got,"FunnelBaseModel"),Got.forEach(t),t1o=r(Q$," (Funnel Transformer model)"),Q$.forEach(t),a1o=i($),Vp=n($,"LI",{});var RAe=s(Vp);ple=n(RAe,"STRONG",{});var Oot=s(ple);n1o=r(Oot,"glpn"),Oot.forEach(t),s1o=r(RAe," \u2014 "),FN=n(RAe,"A",{href:!0});var Vot=s(FN);l1o=r(Vot,"GLPNModel"),Vot.forEach(t),i1o=r(RAe," (GLPN model)"),RAe.forEach(t),d1o=i($),Xp=n($,"LI",{});var PAe=s(Xp);_le=n(PAe,"STRONG",{});var Xot=s(_le);c1o=r(Xot,"gpt2"),Xot.forEach(t),f1o=r(PAe," \u2014 "),TN=n(PAe,"A",{href:!0});var zot=s(TN);m1o=r(zot,"GPT2Model"),zot.forEach(t),g1o=r(PAe," (OpenAI GPT-2 model)"),PAe.forEach(t),h1o=i($),zp=n($,"LI",{});var BAe=s(zp);ule=n(BAe,"STRONG",{});var Wot=s(ule);p1o=r(Wot,"gpt_neo"),Wot.forEach(t),_1o=r(BAe," \u2014 "),MN=n(BAe,"A",{href:!0});var Qot=s(MN);u1o=r(Qot,"GPTNeoModel"),Qot.forEach(t),b1o=r(BAe," (GPT Neo model)"),BAe.forEach(t),v1o=i($),Wp=n($,"LI",{});var IAe=s(Wp);ble=n(IAe,"STRONG",{});var Hot=s(ble);F1o=r(Hot,"gpt_neox"),Hot.forEach(t),T1o=r(IAe," \u2014 "),EN=n(IAe,"A",{href:!0});var Uot=s(EN);M1o=r(Uot,"GPTNeoXModel"),Uot.forEach(t),E1o=r(IAe," (GPT NeoX model)"),IAe.forEach(t),C1o=i($),Qp=n($,"LI",{});var NAe=s(Qp);vle=n(NAe,"STRONG",{});var Jot=s(vle);w1o=r(Jot,"gptj"),Jot.forEach(t),A1o=r(NAe," \u2014 "),CN=n(NAe,"A",{href:!0});var Yot=s(CN);y1o=r(Yot,"GPTJModel"),Yot.forEach(t),L1o=r(NAe," (GPT-J model)"),NAe.forEach(t),x1o=i($),Hp=n($,"LI",{});var qAe=s(Hp);Fle=n(qAe,"STRONG",{});var Kot=s(Fle);$1o=r(Kot,"hubert"),Kot.forEach(t),k1o=r(qAe," \u2014 "),wN=n(qAe,"A",{href:!0});var Zot=s(wN);S1o=r(Zot,"HubertModel"),Zot.forEach(t),R1o=r(qAe," (Hubert model)"),qAe.forEach(t),P1o=i($),Up=n($,"LI",{});var jAe=s(Up);Tle=n(jAe,"STRONG",{});var ert=s(Tle);B1o=r(ert,"ibert"),ert.forEach(t),I1o=r(jAe," \u2014 "),AN=n(jAe,"A",{href:!0});var ort=s(AN);N1o=r(ort,"IBertModel"),ort.forEach(t),q1o=r(jAe," (I-BERT model)"),jAe.forEach(t),j1o=i($),Jp=n($,"LI",{});var DAe=s(Jp);Mle=n(DAe,"STRONG",{});var rrt=s(Mle);D1o=r(rrt,"imagegpt"),rrt.forEach(t),G1o=r(DAe," \u2014 "),yN=n(DAe,"A",{href:!0});var trt=s(yN);O1o=r(trt,"ImageGPTModel"),trt.forEach(t),V1o=r(DAe," (ImageGPT model)"),DAe.forEach(t),X1o=i($),Yp=n($,"LI",{});var GAe=s(Yp);Ele=n(GAe,"STRONG",{});var art=s(Ele);z1o=r(art,"layoutlm"),art.forEach(t),W1o=r(GAe," \u2014 "),LN=n(GAe,"A",{href:!0});var nrt=s(LN);Q1o=r(nrt,"LayoutLMModel"),nrt.forEach(t),H1o=r(GAe," (LayoutLM model)"),GAe.forEach(t),U1o=i($),Kp=n($,"LI",{});var OAe=s(Kp);Cle=n(OAe,"STRONG",{});var srt=s(Cle);J1o=r(srt,"layoutlmv2"),srt.forEach(t),Y1o=r(OAe," \u2014 "),xN=n(OAe,"A",{href:!0});var lrt=s(xN);K1o=r(lrt,"LayoutLMv2Model"),lrt.forEach(t),Z1o=r(OAe," (LayoutLMv2 model)"),OAe.forEach(t),e7o=i($),Zp=n($,"LI",{});var VAe=s(Zp);wle=n(VAe,"STRONG",{});var irt=s(wle);o7o=r(irt,"layoutlmv3"),irt.forEach(t),r7o=r(VAe," \u2014 "),$N=n(VAe,"A",{href:!0});var drt=s($N);t7o=r(drt,"LayoutLMv3Model"),drt.forEach(t),a7o=r(VAe," (LayoutLMv3 model)"),VAe.forEach(t),n7o=i($),e_=n($,"LI",{});var XAe=s(e_);Ale=n(XAe,"STRONG",{});var crt=s(Ale);s7o=r(crt,"led"),crt.forEach(t),l7o=r(XAe," \u2014 "),kN=n(XAe,"A",{href:!0});var frt=s(kN);i7o=r(frt,"LEDModel"),frt.forEach(t),d7o=r(XAe," (LED model)"),XAe.forEach(t),c7o=i($),o_=n($,"LI",{});var zAe=s(o_);yle=n(zAe,"STRONG",{});var mrt=s(yle);f7o=r(mrt,"longformer"),mrt.forEach(t),m7o=r(zAe," \u2014 "),SN=n(zAe,"A",{href:!0});var grt=s(SN);g7o=r(grt,"LongformerModel"),grt.forEach(t),h7o=r(zAe," (Longformer model)"),zAe.forEach(t),p7o=i($),r_=n($,"LI",{});var WAe=s(r_);Lle=n(WAe,"STRONG",{});var hrt=s(Lle);_7o=r(hrt,"luke"),hrt.forEach(t),u7o=r(WAe," \u2014 "),RN=n(WAe,"A",{href:!0});var prt=s(RN);b7o=r(prt,"LukeModel"),prt.forEach(t),v7o=r(WAe," (LUKE model)"),WAe.forEach(t),F7o=i($),t_=n($,"LI",{});var QAe=s(t_);xle=n(QAe,"STRONG",{});var _rt=s(xle);T7o=r(_rt,"lxmert"),_rt.forEach(t),M7o=r(QAe," \u2014 "),PN=n(QAe,"A",{href:!0});var urt=s(PN);E7o=r(urt,"LxmertModel"),urt.forEach(t),C7o=r(QAe," (LXMERT model)"),QAe.forEach(t),w7o=i($),a_=n($,"LI",{});var HAe=s(a_);$le=n(HAe,"STRONG",{});var brt=s($le);A7o=r(brt,"m2m_100"),brt.forEach(t),y7o=r(HAe," \u2014 "),BN=n(HAe,"A",{href:!0});var vrt=s(BN);L7o=r(vrt,"M2M100Model"),vrt.forEach(t),x7o=r(HAe," (M2M100 model)"),HAe.forEach(t),$7o=i($),n_=n($,"LI",{});var UAe=s(n_);kle=n(UAe,"STRONG",{});var Frt=s(kle);k7o=r(Frt,"marian"),Frt.forEach(t),S7o=r(UAe," \u2014 "),IN=n(UAe,"A",{href:!0});var Trt=s(IN);R7o=r(Trt,"MarianModel"),Trt.forEach(t),P7o=r(UAe," (Marian model)"),UAe.forEach(t),B7o=i($),s_=n($,"LI",{});var JAe=s(s_);Sle=n(JAe,"STRONG",{});var Mrt=s(Sle);I7o=r(Mrt,"maskformer"),Mrt.forEach(t),N7o=r(JAe," \u2014 "),NN=n(JAe,"A",{href:!0});var Ert=s(NN);q7o=r(Ert,"MaskFormerModel"),Ert.forEach(t),j7o=r(JAe," (MaskFormer model)"),JAe.forEach(t),D7o=i($),l_=n($,"LI",{});var YAe=s(l_);Rle=n(YAe,"STRONG",{});var Crt=s(Rle);G7o=r(Crt,"mbart"),Crt.forEach(t),O7o=r(YAe," \u2014 "),qN=n(YAe,"A",{href:!0});var wrt=s(qN);V7o=r(wrt,"MBartModel"),wrt.forEach(t),X7o=r(YAe," (mBART model)"),YAe.forEach(t),z7o=i($),i_=n($,"LI",{});var KAe=s(i_);Ple=n(KAe,"STRONG",{});var Art=s(Ple);W7o=r(Art,"megatron-bert"),Art.forEach(t),Q7o=r(KAe," \u2014 "),jN=n(KAe,"A",{href:!0});var yrt=s(jN);H7o=r(yrt,"MegatronBertModel"),yrt.forEach(t),U7o=r(KAe," (MegatronBert model)"),KAe.forEach(t),J7o=i($),d_=n($,"LI",{});var ZAe=s(d_);Ble=n(ZAe,"STRONG",{});var Lrt=s(Ble);Y7o=r(Lrt,"mobilebert"),Lrt.forEach(t),K7o=r(ZAe," \u2014 "),DN=n(ZAe,"A",{href:!0});var xrt=s(DN);Z7o=r(xrt,"MobileBertModel"),xrt.forEach(t),ebo=r(ZAe," (MobileBERT model)"),ZAe.forEach(t),obo=i($),c_=n($,"LI",{});var eye=s(c_);Ile=n(eye,"STRONG",{});var $rt=s(Ile);rbo=r($rt,"mpnet"),$rt.forEach(t),tbo=r(eye," \u2014 "),GN=n(eye,"A",{href:!0});var krt=s(GN);abo=r(krt,"MPNetModel"),krt.forEach(t),nbo=r(eye," (MPNet model)"),eye.forEach(t),sbo=i($),f_=n($,"LI",{});var oye=s(f_);Nle=n(oye,"STRONG",{});var Srt=s(Nle);lbo=r(Srt,"mt5"),Srt.forEach(t),ibo=r(oye," \u2014 "),ON=n(oye,"A",{href:!0});var Rrt=s(ON);dbo=r(Rrt,"MT5Model"),Rrt.forEach(t),cbo=r(oye," (mT5 model)"),oye.forEach(t),fbo=i($),m_=n($,"LI",{});var rye=s(m_);qle=n(rye,"STRONG",{});var Prt=s(qle);mbo=r(Prt,"nystromformer"),Prt.forEach(t),gbo=r(rye," \u2014 "),VN=n(rye,"A",{href:!0});var Brt=s(VN);hbo=r(Brt,"NystromformerModel"),Brt.forEach(t),pbo=r(rye," (Nystromformer model)"),rye.forEach(t),_bo=i($),g_=n($,"LI",{});var tye=s(g_);jle=n(tye,"STRONG",{});var Irt=s(jle);ubo=r(Irt,"openai-gpt"),Irt.forEach(t),bbo=r(tye," \u2014 "),XN=n(tye,"A",{href:!0});var Nrt=s(XN);vbo=r(Nrt,"OpenAIGPTModel"),Nrt.forEach(t),Fbo=r(tye," (OpenAI GPT model)"),tye.forEach(t),Tbo=i($),h_=n($,"LI",{});var aye=s(h_);Dle=n(aye,"STRONG",{});var qrt=s(Dle);Mbo=r(qrt,"opt"),qrt.forEach(t),Ebo=r(aye," \u2014 "),zN=n(aye,"A",{href:!0});var jrt=s(zN);Cbo=r(jrt,"OPTModel"),jrt.forEach(t),wbo=r(aye," (OPT model)"),aye.forEach(t),Abo=i($),p_=n($,"LI",{});var nye=s(p_);Gle=n(nye,"STRONG",{});var Drt=s(Gle);ybo=r(Drt,"pegasus"),Drt.forEach(t),Lbo=r(nye," \u2014 "),WN=n(nye,"A",{href:!0});var Grt=s(WN);xbo=r(Grt,"PegasusModel"),Grt.forEach(t),$bo=r(nye," (Pegasus model)"),nye.forEach(t),kbo=i($),__=n($,"LI",{});var sye=s(__);Ole=n(sye,"STRONG",{});var Ort=s(Ole);Sbo=r(Ort,"perceiver"),Ort.forEach(t),Rbo=r(sye," \u2014 "),QN=n(sye,"A",{href:!0});var Vrt=s(QN);Pbo=r(Vrt,"PerceiverModel"),Vrt.forEach(t),Bbo=r(sye," (Perceiver model)"),sye.forEach(t),Ibo=i($),u_=n($,"LI",{});var lye=s(u_);Vle=n(lye,"STRONG",{});var Xrt=s(Vle);Nbo=r(Xrt,"plbart"),Xrt.forEach(t),qbo=r(lye," \u2014 "),HN=n(lye,"A",{href:!0});var zrt=s(HN);jbo=r(zrt,"PLBartModel"),zrt.forEach(t),Dbo=r(lye," (PLBart model)"),lye.forEach(t),Gbo=i($),b_=n($,"LI",{});var iye=s(b_);Xle=n(iye,"STRONG",{});var Wrt=s(Xle);Obo=r(Wrt,"poolformer"),Wrt.forEach(t),Vbo=r(iye," \u2014 "),UN=n(iye,"A",{href:!0});var Qrt=s(UN);Xbo=r(Qrt,"PoolFormerModel"),Qrt.forEach(t),zbo=r(iye," (PoolFormer model)"),iye.forEach(t),Wbo=i($),v_=n($,"LI",{});var dye=s(v_);zle=n(dye,"STRONG",{});var Hrt=s(zle);Qbo=r(Hrt,"prophetnet"),Hrt.forEach(t),Hbo=r(dye," \u2014 "),JN=n(dye,"A",{href:!0});var Urt=s(JN);Ubo=r(Urt,"ProphetNetModel"),Urt.forEach(t),Jbo=r(dye," (ProphetNet model)"),dye.forEach(t),Ybo=i($),F_=n($,"LI",{});var cye=s(F_);Wle=n(cye,"STRONG",{});var Jrt=s(Wle);Kbo=r(Jrt,"qdqbert"),Jrt.forEach(t),Zbo=r(cye," \u2014 "),YN=n(cye,"A",{href:!0});var Yrt=s(YN);e2o=r(Yrt,"QDQBertModel"),Yrt.forEach(t),o2o=r(cye," (QDQBert model)"),cye.forEach(t),r2o=i($),T_=n($,"LI",{});var fye=s(T_);Qle=n(fye,"STRONG",{});var Krt=s(Qle);t2o=r(Krt,"reformer"),Krt.forEach(t),a2o=r(fye," \u2014 "),KN=n(fye,"A",{href:!0});var Zrt=s(KN);n2o=r(Zrt,"ReformerModel"),Zrt.forEach(t),s2o=r(fye," (Reformer model)"),fye.forEach(t),l2o=i($),M_=n($,"LI",{});var mye=s(M_);Hle=n(mye,"STRONG",{});var ett=s(Hle);i2o=r(ett,"regnet"),ett.forEach(t),d2o=r(mye," \u2014 "),ZN=n(mye,"A",{href:!0});var ott=s(ZN);c2o=r(ott,"RegNetModel"),ott.forEach(t),f2o=r(mye," (RegNet model)"),mye.forEach(t),m2o=i($),E_=n($,"LI",{});var gye=s(E_);Ule=n(gye,"STRONG",{});var rtt=s(Ule);g2o=r(rtt,"rembert"),rtt.forEach(t),h2o=r(gye," \u2014 "),eq=n(gye,"A",{href:!0});var ttt=s(eq);p2o=r(ttt,"RemBertModel"),ttt.forEach(t),_2o=r(gye," (RemBERT model)"),gye.forEach(t),u2o=i($),C_=n($,"LI",{});var hye=s(C_);Jle=n(hye,"STRONG",{});var att=s(Jle);b2o=r(att,"resnet"),att.forEach(t),v2o=r(hye," \u2014 "),oq=n(hye,"A",{href:!0});var ntt=s(oq);F2o=r(ntt,"ResNetModel"),ntt.forEach(t),T2o=r(hye," (ResNet model)"),hye.forEach(t),M2o=i($),w_=n($,"LI",{});var pye=s(w_);Yle=n(pye,"STRONG",{});var stt=s(Yle);E2o=r(stt,"retribert"),stt.forEach(t),C2o=r(pye," \u2014 "),rq=n(pye,"A",{href:!0});var ltt=s(rq);w2o=r(ltt,"RetriBertModel"),ltt.forEach(t),A2o=r(pye," (RetriBERT model)"),pye.forEach(t),y2o=i($),A_=n($,"LI",{});var _ye=s(A_);Kle=n(_ye,"STRONG",{});var itt=s(Kle);L2o=r(itt,"roberta"),itt.forEach(t),x2o=r(_ye," \u2014 "),tq=n(_ye,"A",{href:!0});var dtt=s(tq);$2o=r(dtt,"RobertaModel"),dtt.forEach(t),k2o=r(_ye," (RoBERTa model)"),_ye.forEach(t),S2o=i($),y_=n($,"LI",{});var uye=s(y_);Zle=n(uye,"STRONG",{});var ctt=s(Zle);R2o=r(ctt,"roformer"),ctt.forEach(t),P2o=r(uye," \u2014 "),aq=n(uye,"A",{href:!0});var ftt=s(aq);B2o=r(ftt,"RoFormerModel"),ftt.forEach(t),I2o=r(uye," (RoFormer model)"),uye.forEach(t),N2o=i($),L_=n($,"LI",{});var bye=s(L_);eie=n(bye,"STRONG",{});var mtt=s(eie);q2o=r(mtt,"segformer"),mtt.forEach(t),j2o=r(bye," \u2014 "),nq=n(bye,"A",{href:!0});var gtt=s(nq);D2o=r(gtt,"SegformerModel"),gtt.forEach(t),G2o=r(bye," (SegFormer model)"),bye.forEach(t),O2o=i($),x_=n($,"LI",{});var vye=s(x_);oie=n(vye,"STRONG",{});var htt=s(oie);V2o=r(htt,"sew"),htt.forEach(t),X2o=r(vye," \u2014 "),sq=n(vye,"A",{href:!0});var ptt=s(sq);z2o=r(ptt,"SEWModel"),ptt.forEach(t),W2o=r(vye," (SEW model)"),vye.forEach(t),Q2o=i($),$_=n($,"LI",{});var Fye=s($_);rie=n(Fye,"STRONG",{});var _tt=s(rie);H2o=r(_tt,"sew-d"),_tt.forEach(t),U2o=r(Fye," \u2014 "),lq=n(Fye,"A",{href:!0});var utt=s(lq);J2o=r(utt,"SEWDModel"),utt.forEach(t),Y2o=r(Fye," (SEW-D model)"),Fye.forEach(t),K2o=i($),k_=n($,"LI",{});var Tye=s(k_);tie=n(Tye,"STRONG",{});var btt=s(tie);Z2o=r(btt,"speech_to_text"),btt.forEach(t),evo=r(Tye," \u2014 "),iq=n(Tye,"A",{href:!0});var vtt=s(iq);ovo=r(vtt,"Speech2TextModel"),vtt.forEach(t),rvo=r(Tye," (Speech2Text model)"),Tye.forEach(t),tvo=i($),S_=n($,"LI",{});var Mye=s(S_);aie=n(Mye,"STRONG",{});var Ftt=s(aie);avo=r(Ftt,"splinter"),Ftt.forEach(t),nvo=r(Mye," \u2014 "),dq=n(Mye,"A",{href:!0});var Ttt=s(dq);svo=r(Ttt,"SplinterModel"),Ttt.forEach(t),lvo=r(Mye," (Splinter model)"),Mye.forEach(t),ivo=i($),R_=n($,"LI",{});var Eye=s(R_);nie=n(Eye,"STRONG",{});var Mtt=s(nie);dvo=r(Mtt,"squeezebert"),Mtt.forEach(t),cvo=r(Eye," \u2014 "),cq=n(Eye,"A",{href:!0});var Ett=s(cq);fvo=r(Ett,"SqueezeBertModel"),Ett.forEach(t),mvo=r(Eye," (SqueezeBERT model)"),Eye.forEach(t),gvo=i($),P_=n($,"LI",{});var Cye=s(P_);sie=n(Cye,"STRONG",{});var Ctt=s(sie);hvo=r(Ctt,"swin"),Ctt.forEach(t),pvo=r(Cye," \u2014 "),fq=n(Cye,"A",{href:!0});var wtt=s(fq);_vo=r(wtt,"SwinModel"),wtt.forEach(t),uvo=r(Cye," (Swin model)"),Cye.forEach(t),bvo=i($),B_=n($,"LI",{});var wye=s(B_);lie=n(wye,"STRONG",{});var Att=s(lie);vvo=r(Att,"t5"),Att.forEach(t),Fvo=r(wye," \u2014 "),mq=n(wye,"A",{href:!0});var ytt=s(mq);Tvo=r(ytt,"T5Model"),ytt.forEach(t),Mvo=r(wye," (T5 model)"),wye.forEach(t),Evo=i($),I_=n($,"LI",{});var Aye=s(I_);iie=n(Aye,"STRONG",{});var Ltt=s(iie);Cvo=r(Ltt,"tapas"),Ltt.forEach(t),wvo=r(Aye," \u2014 "),gq=n(Aye,"A",{href:!0});var xtt=s(gq);Avo=r(xtt,"TapasModel"),xtt.forEach(t),yvo=r(Aye," (TAPAS model)"),Aye.forEach(t),Lvo=i($),N_=n($,"LI",{});var yye=s(N_);die=n(yye,"STRONG",{});var $tt=s(die);xvo=r($tt,"trajectory_transformer"),$tt.forEach(t),$vo=r(yye," \u2014 "),hq=n(yye,"A",{href:!0});var ktt=s(hq);kvo=r(ktt,"TrajectoryTransformerModel"),ktt.forEach(t),Svo=r(yye," (Trajectory Transformer model)"),yye.forEach(t),Rvo=i($),q_=n($,"LI",{});var Lye=s(q_);cie=n(Lye,"STRONG",{});var Stt=s(cie);Pvo=r(Stt,"transfo-xl"),Stt.forEach(t),Bvo=r(Lye," \u2014 "),pq=n(Lye,"A",{href:!0});var Rtt=s(pq);Ivo=r(Rtt,"TransfoXLModel"),Rtt.forEach(t),Nvo=r(Lye," (Transformer-XL model)"),Lye.forEach(t),qvo=i($),j_=n($,"LI",{});var xye=s(j_);fie=n(xye,"STRONG",{});var Ptt=s(fie);jvo=r(Ptt,"unispeech"),Ptt.forEach(t),Dvo=r(xye," \u2014 "),_q=n(xye,"A",{href:!0});var Btt=s(_q);Gvo=r(Btt,"UniSpeechModel"),Btt.forEach(t),Ovo=r(xye," (UniSpeech model)"),xye.forEach(t),Vvo=i($),D_=n($,"LI",{});var $ye=s(D_);mie=n($ye,"STRONG",{});var Itt=s(mie);Xvo=r(Itt,"unispeech-sat"),Itt.forEach(t),zvo=r($ye," \u2014 "),uq=n($ye,"A",{href:!0});var Ntt=s(uq);Wvo=r(Ntt,"UniSpeechSatModel"),Ntt.forEach(t),Qvo=r($ye," (UniSpeechSat model)"),$ye.forEach(t),Hvo=i($),G_=n($,"LI",{});var kye=s(G_);gie=n(kye,"STRONG",{});var qtt=s(gie);Uvo=r(qtt,"van"),qtt.forEach(t),Jvo=r(kye," \u2014 "),bq=n(kye,"A",{href:!0});var jtt=s(bq);Yvo=r(jtt,"VanModel"),jtt.forEach(t),Kvo=r(kye," (VAN model)"),kye.forEach(t),Zvo=i($),O_=n($,"LI",{});var Sye=s(O_);hie=n(Sye,"STRONG",{});var Dtt=s(hie);eFo=r(Dtt,"vilt"),Dtt.forEach(t),oFo=r(Sye," \u2014 "),vq=n(Sye,"A",{href:!0});var Gtt=s(vq);rFo=r(Gtt,"ViltModel"),Gtt.forEach(t),tFo=r(Sye," (ViLT model)"),Sye.forEach(t),aFo=i($),V_=n($,"LI",{});var Rye=s(V_);pie=n(Rye,"STRONG",{});var Ott=s(pie);nFo=r(Ott,"vision-text-dual-encoder"),Ott.forEach(t),sFo=r(Rye," \u2014 "),Fq=n(Rye,"A",{href:!0});var Vtt=s(Fq);lFo=r(Vtt,"VisionTextDualEncoderModel"),Vtt.forEach(t),iFo=r(Rye," (VisionTextDualEncoder model)"),Rye.forEach(t),dFo=i($),X_=n($,"LI",{});var Pye=s(X_);_ie=n(Pye,"STRONG",{});var Xtt=s(_ie);cFo=r(Xtt,"visual_bert"),Xtt.forEach(t),fFo=r(Pye," \u2014 "),Tq=n(Pye,"A",{href:!0});var ztt=s(Tq);mFo=r(ztt,"VisualBertModel"),ztt.forEach(t),gFo=r(Pye," (VisualBert model)"),Pye.forEach(t),hFo=i($),z_=n($,"LI",{});var Bye=s(z_);uie=n(Bye,"STRONG",{});var Wtt=s(uie);pFo=r(Wtt,"vit"),Wtt.forEach(t),_Fo=r(Bye," \u2014 "),Mq=n(Bye,"A",{href:!0});var Qtt=s(Mq);uFo=r(Qtt,"ViTModel"),Qtt.forEach(t),bFo=r(Bye," (ViT model)"),Bye.forEach(t),vFo=i($),W_=n($,"LI",{});var Iye=s(W_);bie=n(Iye,"STRONG",{});var Htt=s(bie);FFo=r(Htt,"vit_mae"),Htt.forEach(t),TFo=r(Iye," \u2014 "),Eq=n(Iye,"A",{href:!0});var Utt=s(Eq);MFo=r(Utt,"ViTMAEModel"),Utt.forEach(t),EFo=r(Iye," (ViTMAE model)"),Iye.forEach(t),CFo=i($),Q_=n($,"LI",{});var Nye=s(Q_);vie=n(Nye,"STRONG",{});var Jtt=s(vie);wFo=r(Jtt,"wav2vec2"),Jtt.forEach(t),AFo=r(Nye," \u2014 "),Cq=n(Nye,"A",{href:!0});var Ytt=s(Cq);yFo=r(Ytt,"Wav2Vec2Model"),Ytt.forEach(t),LFo=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),xFo=i($),H_=n($,"LI",{});var qye=s(H_);Fie=n(qye,"STRONG",{});var Ktt=s(Fie);$Fo=r(Ktt,"wav2vec2-conformer"),Ktt.forEach(t),kFo=r(qye," \u2014 "),wq=n(qye,"A",{href:!0});var Ztt=s(wq);SFo=r(Ztt,"Wav2Vec2ConformerModel"),Ztt.forEach(t),RFo=r(qye," (Wav2Vec2-Conformer model)"),qye.forEach(t),PFo=i($),U_=n($,"LI",{});var jye=s(U_);Tie=n(jye,"STRONG",{});var eat=s(Tie);BFo=r(eat,"wavlm"),eat.forEach(t),IFo=r(jye," \u2014 "),Aq=n(jye,"A",{href:!0});var oat=s(Aq);NFo=r(oat,"WavLMModel"),oat.forEach(t),qFo=r(jye," (WavLM model)"),jye.forEach(t),jFo=i($),J_=n($,"LI",{});var Dye=s(J_);Mie=n(Dye,"STRONG",{});var rat=s(Mie);DFo=r(rat,"xglm"),rat.forEach(t),GFo=r(Dye," \u2014 "),yq=n(Dye,"A",{href:!0});var tat=s(yq);OFo=r(tat,"XGLMModel"),tat.forEach(t),VFo=r(Dye," (XGLM model)"),Dye.forEach(t),XFo=i($),Y_=n($,"LI",{});var Gye=s(Y_);Eie=n(Gye,"STRONG",{});var aat=s(Eie);zFo=r(aat,"xlm"),aat.forEach(t),WFo=r(Gye," \u2014 "),Lq=n(Gye,"A",{href:!0});var nat=s(Lq);QFo=r(nat,"XLMModel"),nat.forEach(t),HFo=r(Gye," (XLM model)"),Gye.forEach(t),UFo=i($),K_=n($,"LI",{});var Oye=s(K_);Cie=n(Oye,"STRONG",{});var sat=s(Cie);JFo=r(sat,"xlm-prophetnet"),sat.forEach(t),YFo=r(Oye," \u2014 "),xq=n(Oye,"A",{href:!0});var lat=s(xq);KFo=r(lat,"XLMProphetNetModel"),lat.forEach(t),ZFo=r(Oye," (XLMProphetNet model)"),Oye.forEach(t),eTo=i($),Z_=n($,"LI",{});var Vye=s(Z_);wie=n(Vye,"STRONG",{});var iat=s(wie);oTo=r(iat,"xlm-roberta"),iat.forEach(t),rTo=r(Vye," \u2014 "),$q=n(Vye,"A",{href:!0});var dat=s($q);tTo=r(dat,"XLMRobertaModel"),dat.forEach(t),aTo=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),nTo=i($),eu=n($,"LI",{});var Xye=s(eu);Aie=n(Xye,"STRONG",{});var cat=s(Aie);sTo=r(cat,"xlm-roberta-xl"),cat.forEach(t),lTo=r(Xye," \u2014 "),kq=n(Xye,"A",{href:!0});var fat=s(kq);iTo=r(fat,"XLMRobertaXLModel"),fat.forEach(t),dTo=r(Xye," (XLM-RoBERTa-XL model)"),Xye.forEach(t),cTo=i($),ou=n($,"LI",{});var zye=s(ou);yie=n(zye,"STRONG",{});var mat=s(yie);fTo=r(mat,"xlnet"),mat.forEach(t),mTo=r(zye," \u2014 "),Sq=n(zye,"A",{href:!0});var gat=s(Sq);gTo=r(gat,"XLNetModel"),gat.forEach(t),hTo=r(zye," (XLNet model)"),zye.forEach(t),pTo=i($),ru=n($,"LI",{});var Wye=s(ru);Lie=n(Wye,"STRONG",{});var hat=s(Lie);_To=r(hat,"yolos"),hat.forEach(t),uTo=r(Wye," \u2014 "),Rq=n(Wye,"A",{href:!0});var pat=s(Rq);bTo=r(pat,"YolosModel"),pat.forEach(t),vTo=r(Wye," (YOLOS model)"),Wye.forEach(t),FTo=i($),tu=n($,"LI",{});var Qye=s(tu);xie=n(Qye,"STRONG",{});var _at=s(xie);TTo=r(_at,"yoso"),_at.forEach(t),MTo=r(Qye," \u2014 "),Pq=n(Qye,"A",{href:!0});var uat=s(Pq);ETo=r(uat,"YosoModel"),uat.forEach(t),CTo=r(Qye," (YOSO model)"),Qye.forEach(t),$.forEach(t),wTo=i(oa),au=n(oa,"P",{});var Hye=s(au);ATo=r(Hye,"The model is set in evaluation mode by default using "),$ie=n(Hye,"CODE",{});var bat=s($ie);yTo=r(bat,"model.eval()"),bat.forEach(t),LTo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(Hye,"CODE",{});var vat=s(kie);xTo=r(vat,"model.train()"),vat.forEach(t),Hye.forEach(t),$To=i(oa),T(nu.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Rqe=i(f),Li=n(f,"H2",{class:!0});var NDe=s(Li);su=n(NDe,"A",{id:!0,class:!0,href:!0});var Fat=s(su);Sie=n(Fat,"SPAN",{});var Tat=s(Sie);T(dy.$$.fragment,Tat),Tat.forEach(t),Fat.forEach(t),kTo=i(NDe),Rie=n(NDe,"SPAN",{});var Mat=s(Rie);STo=r(Mat,"AutoModelForPreTraining"),Mat.forEach(t),NDe.forEach(t),Pqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(cy.$$.fragment,Os),RTo=i(Os),xi=n(Os,"P",{});var yZ=s(xi);PTo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=n(yZ,"A",{href:!0});var Eat=s(Bq);BTo=r(Eat,"from_pretrained()"),Eat.forEach(t),ITo=r(yZ," class method or the "),Iq=n(yZ,"A",{href:!0});var Cat=s(Iq);NTo=r(Cat,"from_config()"),Cat.forEach(t),qTo=r(yZ,` class
method.`),yZ.forEach(t),jTo=i(Os),fy=n(Os,"P",{});var qDe=s(fy);DTo=r(qDe,"This class cannot be instantiated directly using "),Pie=n(qDe,"CODE",{});var wat=s(Pie);GTo=r(wat,"__init__()"),wat.forEach(t),OTo=r(qDe," (throws an error)."),qDe.forEach(t),VTo=i(Os),at=n(Os,"DIV",{class:!0});var q0=s(at);T(my.$$.fragment,q0),XTo=i(q0),Bie=n(q0,"P",{});var Aat=s(Bie);zTo=r(Aat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Aat.forEach(t),WTo=i(q0),$i=n(q0,"P",{});var LZ=s($i);QTo=r(LZ,`Note:
Loading a model from its configuration file does `),Iie=n(LZ,"STRONG",{});var yat=s(Iie);HTo=r(yat,"not"),yat.forEach(t),UTo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=n(LZ,"A",{href:!0});var Lat=s(Nq);JTo=r(Lat,"from_pretrained()"),Lat.forEach(t),YTo=r(LZ," to load the model weights."),LZ.forEach(t),KTo=i(q0),T(lu.$$.fragment,q0),q0.forEach(t),ZTo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(gy.$$.fragment,ra),eMo=i(ra),Nie=n(ra,"P",{});var xat=s(Nie);oMo=r(xat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xat.forEach(t),rMo=i(ra),xa=n(ra,"P",{});var j0=s(xa);tMo=r(j0,"The model class to instantiate is selected based on the "),qie=n(j0,"CODE",{});var $at=s(qie);aMo=r($at,"model_type"),$at.forEach(t),nMo=r(j0,` property of the config object (either
passed as an argument or loaded from `),jie=n(j0,"CODE",{});var kat=s(jie);sMo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),lMo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(j0,"CODE",{});var Sat=s(Die);iMo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),dMo=r(j0,":"),j0.forEach(t),cMo=i(ra),G=n(ra,"UL",{});var O=s(G);iu=n(O,"LI",{});var Uye=s(iu);Gie=n(Uye,"STRONG",{});var Rat=s(Gie);fMo=r(Rat,"albert"),Rat.forEach(t),mMo=r(Uye," \u2014 "),qq=n(Uye,"A",{href:!0});var Pat=s(qq);gMo=r(Pat,"AlbertForPreTraining"),Pat.forEach(t),hMo=r(Uye," (ALBERT model)"),Uye.forEach(t),pMo=i(O),du=n(O,"LI",{});var Jye=s(du);Oie=n(Jye,"STRONG",{});var Bat=s(Oie);_Mo=r(Bat,"bart"),Bat.forEach(t),uMo=r(Jye," \u2014 "),jq=n(Jye,"A",{href:!0});var Iat=s(jq);bMo=r(Iat,"BartForConditionalGeneration"),Iat.forEach(t),vMo=r(Jye," (BART model)"),Jye.forEach(t),FMo=i(O),cu=n(O,"LI",{});var Yye=s(cu);Vie=n(Yye,"STRONG",{});var Nat=s(Vie);TMo=r(Nat,"bert"),Nat.forEach(t),MMo=r(Yye," \u2014 "),Dq=n(Yye,"A",{href:!0});var qat=s(Dq);EMo=r(qat,"BertForPreTraining"),qat.forEach(t),CMo=r(Yye," (BERT model)"),Yye.forEach(t),wMo=i(O),fu=n(O,"LI",{});var Kye=s(fu);Xie=n(Kye,"STRONG",{});var jat=s(Xie);AMo=r(jat,"big_bird"),jat.forEach(t),yMo=r(Kye," \u2014 "),Gq=n(Kye,"A",{href:!0});var Dat=s(Gq);LMo=r(Dat,"BigBirdForPreTraining"),Dat.forEach(t),xMo=r(Kye," (BigBird model)"),Kye.forEach(t),$Mo=i(O),mu=n(O,"LI",{});var Zye=s(mu);zie=n(Zye,"STRONG",{});var Gat=s(zie);kMo=r(Gat,"bloom"),Gat.forEach(t),SMo=r(Zye," \u2014 "),Oq=n(Zye,"A",{href:!0});var Oat=s(Oq);RMo=r(Oat,"BloomForCausalLM"),Oat.forEach(t),PMo=r(Zye," (BLOOM model)"),Zye.forEach(t),BMo=i(O),gu=n(O,"LI",{});var eLe=s(gu);Wie=n(eLe,"STRONG",{});var Vat=s(Wie);IMo=r(Vat,"camembert"),Vat.forEach(t),NMo=r(eLe," \u2014 "),Vq=n(eLe,"A",{href:!0});var Xat=s(Vq);qMo=r(Xat,"CamembertForMaskedLM"),Xat.forEach(t),jMo=r(eLe," (CamemBERT model)"),eLe.forEach(t),DMo=i(O),hu=n(O,"LI",{});var oLe=s(hu);Qie=n(oLe,"STRONG",{});var zat=s(Qie);GMo=r(zat,"ctrl"),zat.forEach(t),OMo=r(oLe," \u2014 "),Xq=n(oLe,"A",{href:!0});var Wat=s(Xq);VMo=r(Wat,"CTRLLMHeadModel"),Wat.forEach(t),XMo=r(oLe," (CTRL model)"),oLe.forEach(t),zMo=i(O),pu=n(O,"LI",{});var rLe=s(pu);Hie=n(rLe,"STRONG",{});var Qat=s(Hie);WMo=r(Qat,"data2vec-text"),Qat.forEach(t),QMo=r(rLe," \u2014 "),zq=n(rLe,"A",{href:!0});var Hat=s(zq);HMo=r(Hat,"Data2VecTextForMaskedLM"),Hat.forEach(t),UMo=r(rLe," (Data2VecText model)"),rLe.forEach(t),JMo=i(O),_u=n(O,"LI",{});var tLe=s(_u);Uie=n(tLe,"STRONG",{});var Uat=s(Uie);YMo=r(Uat,"deberta"),Uat.forEach(t),KMo=r(tLe," \u2014 "),Wq=n(tLe,"A",{href:!0});var Jat=s(Wq);ZMo=r(Jat,"DebertaForMaskedLM"),Jat.forEach(t),eEo=r(tLe," (DeBERTa model)"),tLe.forEach(t),oEo=i(O),uu=n(O,"LI",{});var aLe=s(uu);Jie=n(aLe,"STRONG",{});var Yat=s(Jie);rEo=r(Yat,"deberta-v2"),Yat.forEach(t),tEo=r(aLe," \u2014 "),Qq=n(aLe,"A",{href:!0});var Kat=s(Qq);aEo=r(Kat,"DebertaV2ForMaskedLM"),Kat.forEach(t),nEo=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),sEo=i(O),bu=n(O,"LI",{});var nLe=s(bu);Yie=n(nLe,"STRONG",{});var Zat=s(Yie);lEo=r(Zat,"distilbert"),Zat.forEach(t),iEo=r(nLe," \u2014 "),Hq=n(nLe,"A",{href:!0});var ent=s(Hq);dEo=r(ent,"DistilBertForMaskedLM"),ent.forEach(t),cEo=r(nLe," (DistilBERT model)"),nLe.forEach(t),fEo=i(O),vu=n(O,"LI",{});var sLe=s(vu);Kie=n(sLe,"STRONG",{});var ont=s(Kie);mEo=r(ont,"electra"),ont.forEach(t),gEo=r(sLe," \u2014 "),Uq=n(sLe,"A",{href:!0});var rnt=s(Uq);hEo=r(rnt,"ElectraForPreTraining"),rnt.forEach(t),pEo=r(sLe," (ELECTRA model)"),sLe.forEach(t),_Eo=i(O),Fu=n(O,"LI",{});var lLe=s(Fu);Zie=n(lLe,"STRONG",{});var tnt=s(Zie);uEo=r(tnt,"flaubert"),tnt.forEach(t),bEo=r(lLe," \u2014 "),Jq=n(lLe,"A",{href:!0});var ant=s(Jq);vEo=r(ant,"FlaubertWithLMHeadModel"),ant.forEach(t),FEo=r(lLe," (FlauBERT model)"),lLe.forEach(t),TEo=i(O),Tu=n(O,"LI",{});var iLe=s(Tu);ede=n(iLe,"STRONG",{});var nnt=s(ede);MEo=r(nnt,"flava"),nnt.forEach(t),EEo=r(iLe," \u2014 "),Yq=n(iLe,"A",{href:!0});var snt=s(Yq);CEo=r(snt,"FlavaForPreTraining"),snt.forEach(t),wEo=r(iLe," (Flava model)"),iLe.forEach(t),AEo=i(O),Mu=n(O,"LI",{});var dLe=s(Mu);ode=n(dLe,"STRONG",{});var lnt=s(ode);yEo=r(lnt,"fnet"),lnt.forEach(t),LEo=r(dLe," \u2014 "),Kq=n(dLe,"A",{href:!0});var int=s(Kq);xEo=r(int,"FNetForPreTraining"),int.forEach(t),$Eo=r(dLe," (FNet model)"),dLe.forEach(t),kEo=i(O),Eu=n(O,"LI",{});var cLe=s(Eu);rde=n(cLe,"STRONG",{});var dnt=s(rde);SEo=r(dnt,"fsmt"),dnt.forEach(t),REo=r(cLe," \u2014 "),Zq=n(cLe,"A",{href:!0});var cnt=s(Zq);PEo=r(cnt,"FSMTForConditionalGeneration"),cnt.forEach(t),BEo=r(cLe," (FairSeq Machine-Translation model)"),cLe.forEach(t),IEo=i(O),Cu=n(O,"LI",{});var fLe=s(Cu);tde=n(fLe,"STRONG",{});var fnt=s(tde);NEo=r(fnt,"funnel"),fnt.forEach(t),qEo=r(fLe," \u2014 "),ej=n(fLe,"A",{href:!0});var mnt=s(ej);jEo=r(mnt,"FunnelForPreTraining"),mnt.forEach(t),DEo=r(fLe," (Funnel Transformer model)"),fLe.forEach(t),GEo=i(O),wu=n(O,"LI",{});var mLe=s(wu);ade=n(mLe,"STRONG",{});var gnt=s(ade);OEo=r(gnt,"gpt2"),gnt.forEach(t),VEo=r(mLe," \u2014 "),oj=n(mLe,"A",{href:!0});var hnt=s(oj);XEo=r(hnt,"GPT2LMHeadModel"),hnt.forEach(t),zEo=r(mLe," (OpenAI GPT-2 model)"),mLe.forEach(t),WEo=i(O),Au=n(O,"LI",{});var gLe=s(Au);nde=n(gLe,"STRONG",{});var pnt=s(nde);QEo=r(pnt,"ibert"),pnt.forEach(t),HEo=r(gLe," \u2014 "),rj=n(gLe,"A",{href:!0});var _nt=s(rj);UEo=r(_nt,"IBertForMaskedLM"),_nt.forEach(t),JEo=r(gLe," (I-BERT model)"),gLe.forEach(t),YEo=i(O),yu=n(O,"LI",{});var hLe=s(yu);sde=n(hLe,"STRONG",{});var unt=s(sde);KEo=r(unt,"layoutlm"),unt.forEach(t),ZEo=r(hLe," \u2014 "),tj=n(hLe,"A",{href:!0});var bnt=s(tj);eCo=r(bnt,"LayoutLMForMaskedLM"),bnt.forEach(t),oCo=r(hLe," (LayoutLM model)"),hLe.forEach(t),rCo=i(O),Lu=n(O,"LI",{});var pLe=s(Lu);lde=n(pLe,"STRONG",{});var vnt=s(lde);tCo=r(vnt,"longformer"),vnt.forEach(t),aCo=r(pLe," \u2014 "),aj=n(pLe,"A",{href:!0});var Fnt=s(aj);nCo=r(Fnt,"LongformerForMaskedLM"),Fnt.forEach(t),sCo=r(pLe," (Longformer model)"),pLe.forEach(t),lCo=i(O),xu=n(O,"LI",{});var _Le=s(xu);ide=n(_Le,"STRONG",{});var Tnt=s(ide);iCo=r(Tnt,"lxmert"),Tnt.forEach(t),dCo=r(_Le," \u2014 "),nj=n(_Le,"A",{href:!0});var Mnt=s(nj);cCo=r(Mnt,"LxmertForPreTraining"),Mnt.forEach(t),fCo=r(_Le," (LXMERT model)"),_Le.forEach(t),mCo=i(O),$u=n(O,"LI",{});var uLe=s($u);dde=n(uLe,"STRONG",{});var Ent=s(dde);gCo=r(Ent,"megatron-bert"),Ent.forEach(t),hCo=r(uLe," \u2014 "),sj=n(uLe,"A",{href:!0});var Cnt=s(sj);pCo=r(Cnt,"MegatronBertForPreTraining"),Cnt.forEach(t),_Co=r(uLe," (MegatronBert model)"),uLe.forEach(t),uCo=i(O),ku=n(O,"LI",{});var bLe=s(ku);cde=n(bLe,"STRONG",{});var wnt=s(cde);bCo=r(wnt,"mobilebert"),wnt.forEach(t),vCo=r(bLe," \u2014 "),lj=n(bLe,"A",{href:!0});var Ant=s(lj);FCo=r(Ant,"MobileBertForPreTraining"),Ant.forEach(t),TCo=r(bLe," (MobileBERT model)"),bLe.forEach(t),MCo=i(O),Su=n(O,"LI",{});var vLe=s(Su);fde=n(vLe,"STRONG",{});var ynt=s(fde);ECo=r(ynt,"mpnet"),ynt.forEach(t),CCo=r(vLe," \u2014 "),ij=n(vLe,"A",{href:!0});var Lnt=s(ij);wCo=r(Lnt,"MPNetForMaskedLM"),Lnt.forEach(t),ACo=r(vLe," (MPNet model)"),vLe.forEach(t),yCo=i(O),Ru=n(O,"LI",{});var FLe=s(Ru);mde=n(FLe,"STRONG",{});var xnt=s(mde);LCo=r(xnt,"openai-gpt"),xnt.forEach(t),xCo=r(FLe," \u2014 "),dj=n(FLe,"A",{href:!0});var $nt=s(dj);$Co=r($nt,"OpenAIGPTLMHeadModel"),$nt.forEach(t),kCo=r(FLe," (OpenAI GPT model)"),FLe.forEach(t),SCo=i(O),Pu=n(O,"LI",{});var TLe=s(Pu);gde=n(TLe,"STRONG",{});var knt=s(gde);RCo=r(knt,"retribert"),knt.forEach(t),PCo=r(TLe," \u2014 "),cj=n(TLe,"A",{href:!0});var Snt=s(cj);BCo=r(Snt,"RetriBertModel"),Snt.forEach(t),ICo=r(TLe," (RetriBERT model)"),TLe.forEach(t),NCo=i(O),Bu=n(O,"LI",{});var MLe=s(Bu);hde=n(MLe,"STRONG",{});var Rnt=s(hde);qCo=r(Rnt,"roberta"),Rnt.forEach(t),jCo=r(MLe," \u2014 "),fj=n(MLe,"A",{href:!0});var Pnt=s(fj);DCo=r(Pnt,"RobertaForMaskedLM"),Pnt.forEach(t),GCo=r(MLe," (RoBERTa model)"),MLe.forEach(t),OCo=i(O),Iu=n(O,"LI",{});var ELe=s(Iu);pde=n(ELe,"STRONG",{});var Bnt=s(pde);VCo=r(Bnt,"splinter"),Bnt.forEach(t),XCo=r(ELe," \u2014 "),mj=n(ELe,"A",{href:!0});var Int=s(mj);zCo=r(Int,"SplinterForPreTraining"),Int.forEach(t),WCo=r(ELe," (Splinter model)"),ELe.forEach(t),QCo=i(O),Nu=n(O,"LI",{});var CLe=s(Nu);_de=n(CLe,"STRONG",{});var Nnt=s(_de);HCo=r(Nnt,"squeezebert"),Nnt.forEach(t),UCo=r(CLe," \u2014 "),gj=n(CLe,"A",{href:!0});var qnt=s(gj);JCo=r(qnt,"SqueezeBertForMaskedLM"),qnt.forEach(t),YCo=r(CLe," (SqueezeBERT model)"),CLe.forEach(t),KCo=i(O),qu=n(O,"LI",{});var wLe=s(qu);ude=n(wLe,"STRONG",{});var jnt=s(ude);ZCo=r(jnt,"t5"),jnt.forEach(t),e5o=r(wLe," \u2014 "),hj=n(wLe,"A",{href:!0});var Dnt=s(hj);o5o=r(Dnt,"T5ForConditionalGeneration"),Dnt.forEach(t),r5o=r(wLe," (T5 model)"),wLe.forEach(t),t5o=i(O),ju=n(O,"LI",{});var ALe=s(ju);bde=n(ALe,"STRONG",{});var Gnt=s(bde);a5o=r(Gnt,"tapas"),Gnt.forEach(t),n5o=r(ALe," \u2014 "),pj=n(ALe,"A",{href:!0});var Ont=s(pj);s5o=r(Ont,"TapasForMaskedLM"),Ont.forEach(t),l5o=r(ALe," (TAPAS model)"),ALe.forEach(t),i5o=i(O),Du=n(O,"LI",{});var yLe=s(Du);vde=n(yLe,"STRONG",{});var Vnt=s(vde);d5o=r(Vnt,"transfo-xl"),Vnt.forEach(t),c5o=r(yLe," \u2014 "),_j=n(yLe,"A",{href:!0});var Xnt=s(_j);f5o=r(Xnt,"TransfoXLLMHeadModel"),Xnt.forEach(t),m5o=r(yLe," (Transformer-XL model)"),yLe.forEach(t),g5o=i(O),Gu=n(O,"LI",{});var LLe=s(Gu);Fde=n(LLe,"STRONG",{});var znt=s(Fde);h5o=r(znt,"unispeech"),znt.forEach(t),p5o=r(LLe," \u2014 "),uj=n(LLe,"A",{href:!0});var Wnt=s(uj);_5o=r(Wnt,"UniSpeechForPreTraining"),Wnt.forEach(t),u5o=r(LLe," (UniSpeech model)"),LLe.forEach(t),b5o=i(O),Ou=n(O,"LI",{});var xLe=s(Ou);Tde=n(xLe,"STRONG",{});var Qnt=s(Tde);v5o=r(Qnt,"unispeech-sat"),Qnt.forEach(t),F5o=r(xLe," \u2014 "),bj=n(xLe,"A",{href:!0});var Hnt=s(bj);T5o=r(Hnt,"UniSpeechSatForPreTraining"),Hnt.forEach(t),M5o=r(xLe," (UniSpeechSat model)"),xLe.forEach(t),E5o=i(O),Vu=n(O,"LI",{});var $Le=s(Vu);Mde=n($Le,"STRONG",{});var Unt=s(Mde);C5o=r(Unt,"visual_bert"),Unt.forEach(t),w5o=r($Le," \u2014 "),vj=n($Le,"A",{href:!0});var Jnt=s(vj);A5o=r(Jnt,"VisualBertForPreTraining"),Jnt.forEach(t),y5o=r($Le," (VisualBert model)"),$Le.forEach(t),L5o=i(O),Xu=n(O,"LI",{});var kLe=s(Xu);Ede=n(kLe,"STRONG",{});var Ynt=s(Ede);x5o=r(Ynt,"vit_mae"),Ynt.forEach(t),$5o=r(kLe," \u2014 "),Fj=n(kLe,"A",{href:!0});var Knt=s(Fj);k5o=r(Knt,"ViTMAEForPreTraining"),Knt.forEach(t),S5o=r(kLe," (ViTMAE model)"),kLe.forEach(t),R5o=i(O),zu=n(O,"LI",{});var SLe=s(zu);Cde=n(SLe,"STRONG",{});var Znt=s(Cde);P5o=r(Znt,"wav2vec2"),Znt.forEach(t),B5o=r(SLe," \u2014 "),Tj=n(SLe,"A",{href:!0});var est=s(Tj);I5o=r(est,"Wav2Vec2ForPreTraining"),est.forEach(t),N5o=r(SLe," (Wav2Vec2 model)"),SLe.forEach(t),q5o=i(O),Wu=n(O,"LI",{});var RLe=s(Wu);wde=n(RLe,"STRONG",{});var ost=s(wde);j5o=r(ost,"wav2vec2-conformer"),ost.forEach(t),D5o=r(RLe," \u2014 "),Mj=n(RLe,"A",{href:!0});var rst=s(Mj);G5o=r(rst,"Wav2Vec2ConformerForPreTraining"),rst.forEach(t),O5o=r(RLe," (Wav2Vec2-Conformer model)"),RLe.forEach(t),V5o=i(O),Qu=n(O,"LI",{});var PLe=s(Qu);Ade=n(PLe,"STRONG",{});var tst=s(Ade);X5o=r(tst,"xlm"),tst.forEach(t),z5o=r(PLe," \u2014 "),Ej=n(PLe,"A",{href:!0});var ast=s(Ej);W5o=r(ast,"XLMWithLMHeadModel"),ast.forEach(t),Q5o=r(PLe," (XLM model)"),PLe.forEach(t),H5o=i(O),Hu=n(O,"LI",{});var BLe=s(Hu);yde=n(BLe,"STRONG",{});var nst=s(yde);U5o=r(nst,"xlm-roberta"),nst.forEach(t),J5o=r(BLe," \u2014 "),Cj=n(BLe,"A",{href:!0});var sst=s(Cj);Y5o=r(sst,"XLMRobertaForMaskedLM"),sst.forEach(t),K5o=r(BLe," (XLM-RoBERTa model)"),BLe.forEach(t),Z5o=i(O),Uu=n(O,"LI",{});var ILe=s(Uu);Lde=n(ILe,"STRONG",{});var lst=s(Lde);e3o=r(lst,"xlm-roberta-xl"),lst.forEach(t),o3o=r(ILe," \u2014 "),wj=n(ILe,"A",{href:!0});var ist=s(wj);r3o=r(ist,"XLMRobertaXLForMaskedLM"),ist.forEach(t),t3o=r(ILe," (XLM-RoBERTa-XL model)"),ILe.forEach(t),a3o=i(O),Ju=n(O,"LI",{});var NLe=s(Ju);xde=n(NLe,"STRONG",{});var dst=s(xde);n3o=r(dst,"xlnet"),dst.forEach(t),s3o=r(NLe," \u2014 "),Aj=n(NLe,"A",{href:!0});var cst=s(Aj);l3o=r(cst,"XLNetLMHeadModel"),cst.forEach(t),i3o=r(NLe," (XLNet model)"),NLe.forEach(t),O.forEach(t),d3o=i(ra),Yu=n(ra,"P",{});var qLe=s(Yu);c3o=r(qLe,"The model is set in evaluation mode by default using "),$de=n(qLe,"CODE",{});var fst=s($de);f3o=r(fst,"model.eval()"),fst.forEach(t),m3o=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=n(qLe,"CODE",{});var mst=s(kde);g3o=r(mst,"model.train()"),mst.forEach(t),qLe.forEach(t),h3o=i(ra),T(Ku.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Bqe=i(f),ki=n(f,"H2",{class:!0});var jDe=s(ki);Zu=n(jDe,"A",{id:!0,class:!0,href:!0});var gst=s(Zu);Sde=n(gst,"SPAN",{});var hst=s(Sde);T(hy.$$.fragment,hst),hst.forEach(t),gst.forEach(t),p3o=i(jDe),Rde=n(jDe,"SPAN",{});var pst=s(Rde);_3o=r(pst,"AutoModelForCausalLM"),pst.forEach(t),jDe.forEach(t),Iqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(py.$$.fragment,Vs),u3o=i(Vs),Si=n(Vs,"P",{});var xZ=s(Si);b3o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yj=n(xZ,"A",{href:!0});var _st=s(yj);v3o=r(_st,"from_pretrained()"),_st.forEach(t),F3o=r(xZ," class method or the "),Lj=n(xZ,"A",{href:!0});var ust=s(Lj);T3o=r(ust,"from_config()"),ust.forEach(t),M3o=r(xZ,` class
method.`),xZ.forEach(t),E3o=i(Vs),_y=n(Vs,"P",{});var DDe=s(_y);C3o=r(DDe,"This class cannot be instantiated directly using "),Pde=n(DDe,"CODE",{});var bst=s(Pde);w3o=r(bst,"__init__()"),bst.forEach(t),A3o=r(DDe," (throws an error)."),DDe.forEach(t),y3o=i(Vs),nt=n(Vs,"DIV",{class:!0});var D0=s(nt);T(uy.$$.fragment,D0),L3o=i(D0),Bde=n(D0,"P",{});var vst=s(Bde);x3o=r(vst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vst.forEach(t),$3o=i(D0),Ri=n(D0,"P",{});var $Z=s(Ri);k3o=r($Z,`Note:
Loading a model from its configuration file does `),Ide=n($Z,"STRONG",{});var Fst=s(Ide);S3o=r(Fst,"not"),Fst.forEach(t),R3o=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n($Z,"A",{href:!0});var Tst=s(xj);P3o=r(Tst,"from_pretrained()"),Tst.forEach(t),B3o=r($Z," to load the model weights."),$Z.forEach(t),I3o=i(D0),T(e4.$$.fragment,D0),D0.forEach(t),N3o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(by.$$.fragment,ta),q3o=i(ta),Nde=n(ta,"P",{});var Mst=s(Nde);j3o=r(Mst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mst.forEach(t),D3o=i(ta),$a=n(ta,"P",{});var G0=s($a);G3o=r(G0,"The model class to instantiate is selected based on the "),qde=n(G0,"CODE",{});var Est=s(qde);O3o=r(Est,"model_type"),Est.forEach(t),V3o=r(G0,` property of the config object (either
passed as an argument or loaded from `),jde=n(G0,"CODE",{});var Cst=s(jde);X3o=r(Cst,"pretrained_model_name_or_path"),Cst.forEach(t),z3o=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=n(G0,"CODE",{});var wst=s(Dde);W3o=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),Q3o=r(G0,":"),G0.forEach(t),H3o=i(ta),z=n(ta,"UL",{});var W=s(z);o4=n(W,"LI",{});var jLe=s(o4);Gde=n(jLe,"STRONG",{});var Ast=s(Gde);U3o=r(Ast,"bart"),Ast.forEach(t),J3o=r(jLe," \u2014 "),$j=n(jLe,"A",{href:!0});var yst=s($j);Y3o=r(yst,"BartForCausalLM"),yst.forEach(t),K3o=r(jLe," (BART model)"),jLe.forEach(t),Z3o=i(W),r4=n(W,"LI",{});var DLe=s(r4);Ode=n(DLe,"STRONG",{});var Lst=s(Ode);ewo=r(Lst,"bert"),Lst.forEach(t),owo=r(DLe," \u2014 "),kj=n(DLe,"A",{href:!0});var xst=s(kj);rwo=r(xst,"BertLMHeadModel"),xst.forEach(t),two=r(DLe," (BERT model)"),DLe.forEach(t),awo=i(W),t4=n(W,"LI",{});var GLe=s(t4);Vde=n(GLe,"STRONG",{});var $st=s(Vde);nwo=r($st,"bert-generation"),$st.forEach(t),swo=r(GLe," \u2014 "),Sj=n(GLe,"A",{href:!0});var kst=s(Sj);lwo=r(kst,"BertGenerationDecoder"),kst.forEach(t),iwo=r(GLe," (Bert Generation model)"),GLe.forEach(t),dwo=i(W),a4=n(W,"LI",{});var OLe=s(a4);Xde=n(OLe,"STRONG",{});var Sst=s(Xde);cwo=r(Sst,"big_bird"),Sst.forEach(t),fwo=r(OLe," \u2014 "),Rj=n(OLe,"A",{href:!0});var Rst=s(Rj);mwo=r(Rst,"BigBirdForCausalLM"),Rst.forEach(t),gwo=r(OLe," (BigBird model)"),OLe.forEach(t),hwo=i(W),n4=n(W,"LI",{});var VLe=s(n4);zde=n(VLe,"STRONG",{});var Pst=s(zde);pwo=r(Pst,"bigbird_pegasus"),Pst.forEach(t),_wo=r(VLe," \u2014 "),Pj=n(VLe,"A",{href:!0});var Bst=s(Pj);uwo=r(Bst,"BigBirdPegasusForCausalLM"),Bst.forEach(t),bwo=r(VLe," (BigBirdPegasus model)"),VLe.forEach(t),vwo=i(W),s4=n(W,"LI",{});var XLe=s(s4);Wde=n(XLe,"STRONG",{});var Ist=s(Wde);Fwo=r(Ist,"blenderbot"),Ist.forEach(t),Two=r(XLe," \u2014 "),Bj=n(XLe,"A",{href:!0});var Nst=s(Bj);Mwo=r(Nst,"BlenderbotForCausalLM"),Nst.forEach(t),Ewo=r(XLe," (Blenderbot model)"),XLe.forEach(t),Cwo=i(W),l4=n(W,"LI",{});var zLe=s(l4);Qde=n(zLe,"STRONG",{});var qst=s(Qde);wwo=r(qst,"blenderbot-small"),qst.forEach(t),Awo=r(zLe," \u2014 "),Ij=n(zLe,"A",{href:!0});var jst=s(Ij);ywo=r(jst,"BlenderbotSmallForCausalLM"),jst.forEach(t),Lwo=r(zLe," (BlenderbotSmall model)"),zLe.forEach(t),xwo=i(W),i4=n(W,"LI",{});var WLe=s(i4);Hde=n(WLe,"STRONG",{});var Dst=s(Hde);$wo=r(Dst,"bloom"),Dst.forEach(t),kwo=r(WLe," \u2014 "),Nj=n(WLe,"A",{href:!0});var Gst=s(Nj);Swo=r(Gst,"BloomForCausalLM"),Gst.forEach(t),Rwo=r(WLe," (BLOOM model)"),WLe.forEach(t),Pwo=i(W),d4=n(W,"LI",{});var QLe=s(d4);Ude=n(QLe,"STRONG",{});var Ost=s(Ude);Bwo=r(Ost,"camembert"),Ost.forEach(t),Iwo=r(QLe," \u2014 "),qj=n(QLe,"A",{href:!0});var Vst=s(qj);Nwo=r(Vst,"CamembertForCausalLM"),Vst.forEach(t),qwo=r(QLe," (CamemBERT model)"),QLe.forEach(t),jwo=i(W),c4=n(W,"LI",{});var HLe=s(c4);Jde=n(HLe,"STRONG",{});var Xst=s(Jde);Dwo=r(Xst,"ctrl"),Xst.forEach(t),Gwo=r(HLe," \u2014 "),jj=n(HLe,"A",{href:!0});var zst=s(jj);Owo=r(zst,"CTRLLMHeadModel"),zst.forEach(t),Vwo=r(HLe," (CTRL model)"),HLe.forEach(t),Xwo=i(W),f4=n(W,"LI",{});var ULe=s(f4);Yde=n(ULe,"STRONG",{});var Wst=s(Yde);zwo=r(Wst,"data2vec-text"),Wst.forEach(t),Wwo=r(ULe," \u2014 "),Dj=n(ULe,"A",{href:!0});var Qst=s(Dj);Qwo=r(Qst,"Data2VecTextForCausalLM"),Qst.forEach(t),Hwo=r(ULe," (Data2VecText model)"),ULe.forEach(t),Uwo=i(W),m4=n(W,"LI",{});var JLe=s(m4);Kde=n(JLe,"STRONG",{});var Hst=s(Kde);Jwo=r(Hst,"electra"),Hst.forEach(t),Ywo=r(JLe," \u2014 "),Gj=n(JLe,"A",{href:!0});var Ust=s(Gj);Kwo=r(Ust,"ElectraForCausalLM"),Ust.forEach(t),Zwo=r(JLe," (ELECTRA model)"),JLe.forEach(t),e0o=i(W),g4=n(W,"LI",{});var YLe=s(g4);Zde=n(YLe,"STRONG",{});var Jst=s(Zde);o0o=r(Jst,"gpt2"),Jst.forEach(t),r0o=r(YLe," \u2014 "),Oj=n(YLe,"A",{href:!0});var Yst=s(Oj);t0o=r(Yst,"GPT2LMHeadModel"),Yst.forEach(t),a0o=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),n0o=i(W),h4=n(W,"LI",{});var KLe=s(h4);ece=n(KLe,"STRONG",{});var Kst=s(ece);s0o=r(Kst,"gpt_neo"),Kst.forEach(t),l0o=r(KLe," \u2014 "),Vj=n(KLe,"A",{href:!0});var Zst=s(Vj);i0o=r(Zst,"GPTNeoForCausalLM"),Zst.forEach(t),d0o=r(KLe," (GPT Neo model)"),KLe.forEach(t),c0o=i(W),p4=n(W,"LI",{});var ZLe=s(p4);oce=n(ZLe,"STRONG",{});var elt=s(oce);f0o=r(elt,"gpt_neox"),elt.forEach(t),m0o=r(ZLe," \u2014 "),Xj=n(ZLe,"A",{href:!0});var olt=s(Xj);g0o=r(olt,"GPTNeoXForCausalLM"),olt.forEach(t),h0o=r(ZLe," (GPT NeoX model)"),ZLe.forEach(t),p0o=i(W),_4=n(W,"LI",{});var e8e=s(_4);rce=n(e8e,"STRONG",{});var rlt=s(rce);_0o=r(rlt,"gptj"),rlt.forEach(t),u0o=r(e8e," \u2014 "),zj=n(e8e,"A",{href:!0});var tlt=s(zj);b0o=r(tlt,"GPTJForCausalLM"),tlt.forEach(t),v0o=r(e8e," (GPT-J model)"),e8e.forEach(t),F0o=i(W),u4=n(W,"LI",{});var o8e=s(u4);tce=n(o8e,"STRONG",{});var alt=s(tce);T0o=r(alt,"marian"),alt.forEach(t),M0o=r(o8e," \u2014 "),Wj=n(o8e,"A",{href:!0});var nlt=s(Wj);E0o=r(nlt,"MarianForCausalLM"),nlt.forEach(t),C0o=r(o8e," (Marian model)"),o8e.forEach(t),w0o=i(W),b4=n(W,"LI",{});var r8e=s(b4);ace=n(r8e,"STRONG",{});var slt=s(ace);A0o=r(slt,"mbart"),slt.forEach(t),y0o=r(r8e," \u2014 "),Qj=n(r8e,"A",{href:!0});var llt=s(Qj);L0o=r(llt,"MBartForCausalLM"),llt.forEach(t),x0o=r(r8e," (mBART model)"),r8e.forEach(t),$0o=i(W),v4=n(W,"LI",{});var t8e=s(v4);nce=n(t8e,"STRONG",{});var ilt=s(nce);k0o=r(ilt,"megatron-bert"),ilt.forEach(t),S0o=r(t8e," \u2014 "),Hj=n(t8e,"A",{href:!0});var dlt=s(Hj);R0o=r(dlt,"MegatronBertForCausalLM"),dlt.forEach(t),P0o=r(t8e," (MegatronBert model)"),t8e.forEach(t),B0o=i(W),F4=n(W,"LI",{});var a8e=s(F4);sce=n(a8e,"STRONG",{});var clt=s(sce);I0o=r(clt,"openai-gpt"),clt.forEach(t),N0o=r(a8e," \u2014 "),Uj=n(a8e,"A",{href:!0});var flt=s(Uj);q0o=r(flt,"OpenAIGPTLMHeadModel"),flt.forEach(t),j0o=r(a8e," (OpenAI GPT model)"),a8e.forEach(t),D0o=i(W),T4=n(W,"LI",{});var n8e=s(T4);lce=n(n8e,"STRONG",{});var mlt=s(lce);G0o=r(mlt,"opt"),mlt.forEach(t),O0o=r(n8e," \u2014 "),Jj=n(n8e,"A",{href:!0});var glt=s(Jj);V0o=r(glt,"OPTForCausalLM"),glt.forEach(t),X0o=r(n8e," (OPT model)"),n8e.forEach(t),z0o=i(W),M4=n(W,"LI",{});var s8e=s(M4);ice=n(s8e,"STRONG",{});var hlt=s(ice);W0o=r(hlt,"pegasus"),hlt.forEach(t),Q0o=r(s8e," \u2014 "),Yj=n(s8e,"A",{href:!0});var plt=s(Yj);H0o=r(plt,"PegasusForCausalLM"),plt.forEach(t),U0o=r(s8e," (Pegasus model)"),s8e.forEach(t),J0o=i(W),E4=n(W,"LI",{});var l8e=s(E4);dce=n(l8e,"STRONG",{});var _lt=s(dce);Y0o=r(_lt,"plbart"),_lt.forEach(t),K0o=r(l8e," \u2014 "),Kj=n(l8e,"A",{href:!0});var ult=s(Kj);Z0o=r(ult,"PLBartForCausalLM"),ult.forEach(t),e6o=r(l8e," (PLBart model)"),l8e.forEach(t),o6o=i(W),C4=n(W,"LI",{});var i8e=s(C4);cce=n(i8e,"STRONG",{});var blt=s(cce);r6o=r(blt,"prophetnet"),blt.forEach(t),t6o=r(i8e," \u2014 "),Zj=n(i8e,"A",{href:!0});var vlt=s(Zj);a6o=r(vlt,"ProphetNetForCausalLM"),vlt.forEach(t),n6o=r(i8e," (ProphetNet model)"),i8e.forEach(t),s6o=i(W),w4=n(W,"LI",{});var d8e=s(w4);fce=n(d8e,"STRONG",{});var Flt=s(fce);l6o=r(Flt,"qdqbert"),Flt.forEach(t),i6o=r(d8e," \u2014 "),eD=n(d8e,"A",{href:!0});var Tlt=s(eD);d6o=r(Tlt,"QDQBertLMHeadModel"),Tlt.forEach(t),c6o=r(d8e," (QDQBert model)"),d8e.forEach(t),f6o=i(W),A4=n(W,"LI",{});var c8e=s(A4);mce=n(c8e,"STRONG",{});var Mlt=s(mce);m6o=r(Mlt,"reformer"),Mlt.forEach(t),g6o=r(c8e," \u2014 "),oD=n(c8e,"A",{href:!0});var Elt=s(oD);h6o=r(Elt,"ReformerModelWithLMHead"),Elt.forEach(t),p6o=r(c8e," (Reformer model)"),c8e.forEach(t),_6o=i(W),y4=n(W,"LI",{});var f8e=s(y4);gce=n(f8e,"STRONG",{});var Clt=s(gce);u6o=r(Clt,"rembert"),Clt.forEach(t),b6o=r(f8e," \u2014 "),rD=n(f8e,"A",{href:!0});var wlt=s(rD);v6o=r(wlt,"RemBertForCausalLM"),wlt.forEach(t),F6o=r(f8e," (RemBERT model)"),f8e.forEach(t),T6o=i(W),L4=n(W,"LI",{});var m8e=s(L4);hce=n(m8e,"STRONG",{});var Alt=s(hce);M6o=r(Alt,"roberta"),Alt.forEach(t),E6o=r(m8e," \u2014 "),tD=n(m8e,"A",{href:!0});var ylt=s(tD);C6o=r(ylt,"RobertaForCausalLM"),ylt.forEach(t),w6o=r(m8e," (RoBERTa model)"),m8e.forEach(t),A6o=i(W),x4=n(W,"LI",{});var g8e=s(x4);pce=n(g8e,"STRONG",{});var Llt=s(pce);y6o=r(Llt,"roformer"),Llt.forEach(t),L6o=r(g8e," \u2014 "),aD=n(g8e,"A",{href:!0});var xlt=s(aD);x6o=r(xlt,"RoFormerForCausalLM"),xlt.forEach(t),$6o=r(g8e," (RoFormer model)"),g8e.forEach(t),k6o=i(W),$4=n(W,"LI",{});var h8e=s($4);_ce=n(h8e,"STRONG",{});var $lt=s(_ce);S6o=r($lt,"speech_to_text_2"),$lt.forEach(t),R6o=r(h8e," \u2014 "),nD=n(h8e,"A",{href:!0});var klt=s(nD);P6o=r(klt,"Speech2Text2ForCausalLM"),klt.forEach(t),B6o=r(h8e," (Speech2Text2 model)"),h8e.forEach(t),I6o=i(W),k4=n(W,"LI",{});var p8e=s(k4);uce=n(p8e,"STRONG",{});var Slt=s(uce);N6o=r(Slt,"transfo-xl"),Slt.forEach(t),q6o=r(p8e," \u2014 "),sD=n(p8e,"A",{href:!0});var Rlt=s(sD);j6o=r(Rlt,"TransfoXLLMHeadModel"),Rlt.forEach(t),D6o=r(p8e," (Transformer-XL model)"),p8e.forEach(t),G6o=i(W),S4=n(W,"LI",{});var _8e=s(S4);bce=n(_8e,"STRONG",{});var Plt=s(bce);O6o=r(Plt,"trocr"),Plt.forEach(t),V6o=r(_8e," \u2014 "),lD=n(_8e,"A",{href:!0});var Blt=s(lD);X6o=r(Blt,"TrOCRForCausalLM"),Blt.forEach(t),z6o=r(_8e," (TrOCR model)"),_8e.forEach(t),W6o=i(W),R4=n(W,"LI",{});var u8e=s(R4);vce=n(u8e,"STRONG",{});var Ilt=s(vce);Q6o=r(Ilt,"xglm"),Ilt.forEach(t),H6o=r(u8e," \u2014 "),iD=n(u8e,"A",{href:!0});var Nlt=s(iD);U6o=r(Nlt,"XGLMForCausalLM"),Nlt.forEach(t),J6o=r(u8e," (XGLM model)"),u8e.forEach(t),Y6o=i(W),P4=n(W,"LI",{});var b8e=s(P4);Fce=n(b8e,"STRONG",{});var qlt=s(Fce);K6o=r(qlt,"xlm"),qlt.forEach(t),Z6o=r(b8e," \u2014 "),dD=n(b8e,"A",{href:!0});var jlt=s(dD);eAo=r(jlt,"XLMWithLMHeadModel"),jlt.forEach(t),oAo=r(b8e," (XLM model)"),b8e.forEach(t),rAo=i(W),B4=n(W,"LI",{});var v8e=s(B4);Tce=n(v8e,"STRONG",{});var Dlt=s(Tce);tAo=r(Dlt,"xlm-prophetnet"),Dlt.forEach(t),aAo=r(v8e," \u2014 "),cD=n(v8e,"A",{href:!0});var Glt=s(cD);nAo=r(Glt,"XLMProphetNetForCausalLM"),Glt.forEach(t),sAo=r(v8e," (XLMProphetNet model)"),v8e.forEach(t),lAo=i(W),I4=n(W,"LI",{});var F8e=s(I4);Mce=n(F8e,"STRONG",{});var Olt=s(Mce);iAo=r(Olt,"xlm-roberta"),Olt.forEach(t),dAo=r(F8e," \u2014 "),fD=n(F8e,"A",{href:!0});var Vlt=s(fD);cAo=r(Vlt,"XLMRobertaForCausalLM"),Vlt.forEach(t),fAo=r(F8e," (XLM-RoBERTa model)"),F8e.forEach(t),mAo=i(W),N4=n(W,"LI",{});var T8e=s(N4);Ece=n(T8e,"STRONG",{});var Xlt=s(Ece);gAo=r(Xlt,"xlm-roberta-xl"),Xlt.forEach(t),hAo=r(T8e," \u2014 "),mD=n(T8e,"A",{href:!0});var zlt=s(mD);pAo=r(zlt,"XLMRobertaXLForCausalLM"),zlt.forEach(t),_Ao=r(T8e," (XLM-RoBERTa-XL model)"),T8e.forEach(t),uAo=i(W),q4=n(W,"LI",{});var M8e=s(q4);Cce=n(M8e,"STRONG",{});var Wlt=s(Cce);bAo=r(Wlt,"xlnet"),Wlt.forEach(t),vAo=r(M8e," \u2014 "),gD=n(M8e,"A",{href:!0});var Qlt=s(gD);FAo=r(Qlt,"XLNetLMHeadModel"),Qlt.forEach(t),TAo=r(M8e," (XLNet model)"),M8e.forEach(t),W.forEach(t),MAo=i(ta),j4=n(ta,"P",{});var E8e=s(j4);EAo=r(E8e,"The model is set in evaluation mode by default using "),wce=n(E8e,"CODE",{});var Hlt=s(wce);CAo=r(Hlt,"model.eval()"),Hlt.forEach(t),wAo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=n(E8e,"CODE",{});var Ult=s(Ace);AAo=r(Ult,"model.train()"),Ult.forEach(t),E8e.forEach(t),yAo=i(ta),T(D4.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Nqe=i(f),Pi=n(f,"H2",{class:!0});var GDe=s(Pi);G4=n(GDe,"A",{id:!0,class:!0,href:!0});var Jlt=s(G4);yce=n(Jlt,"SPAN",{});var Ylt=s(yce);T(vy.$$.fragment,Ylt),Ylt.forEach(t),Jlt.forEach(t),LAo=i(GDe),Lce=n(GDe,"SPAN",{});var Klt=s(Lce);xAo=r(Klt,"AutoModelForMaskedLM"),Klt.forEach(t),GDe.forEach(t),qqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(Fy.$$.fragment,Xs),$Ao=i(Xs),Bi=n(Xs,"P",{});var kZ=s(Bi);kAo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hD=n(kZ,"A",{href:!0});var Zlt=s(hD);SAo=r(Zlt,"from_pretrained()"),Zlt.forEach(t),RAo=r(kZ," class method or the "),pD=n(kZ,"A",{href:!0});var eit=s(pD);PAo=r(eit,"from_config()"),eit.forEach(t),BAo=r(kZ,` class
method.`),kZ.forEach(t),IAo=i(Xs),Ty=n(Xs,"P",{});var ODe=s(Ty);NAo=r(ODe,"This class cannot be instantiated directly using "),xce=n(ODe,"CODE",{});var oit=s(xce);qAo=r(oit,"__init__()"),oit.forEach(t),jAo=r(ODe," (throws an error)."),ODe.forEach(t),DAo=i(Xs),st=n(Xs,"DIV",{class:!0});var O0=s(st);T(My.$$.fragment,O0),GAo=i(O0),$ce=n(O0,"P",{});var rit=s($ce);OAo=r(rit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rit.forEach(t),VAo=i(O0),Ii=n(O0,"P",{});var SZ=s(Ii);XAo=r(SZ,`Note:
Loading a model from its configuration file does `),kce=n(SZ,"STRONG",{});var tit=s(kce);zAo=r(tit,"not"),tit.forEach(t),WAo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(SZ,"A",{href:!0});var ait=s(_D);QAo=r(ait,"from_pretrained()"),ait.forEach(t),HAo=r(SZ," to load the model weights."),SZ.forEach(t),UAo=i(O0),T(O4.$$.fragment,O0),O0.forEach(t),JAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Ey.$$.fragment,aa),YAo=i(aa),Sce=n(aa,"P",{});var nit=s(Sce);KAo=r(nit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nit.forEach(t),ZAo=i(aa),ka=n(aa,"P",{});var V0=s(ka);eyo=r(V0,"The model class to instantiate is selected based on the "),Rce=n(V0,"CODE",{});var sit=s(Rce);oyo=r(sit,"model_type"),sit.forEach(t),ryo=r(V0,` property of the config object (either
passed as an argument or loaded from `),Pce=n(V0,"CODE",{});var lit=s(Pce);tyo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),ayo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(V0,"CODE",{});var iit=s(Bce);nyo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),syo=r(V0,":"),V0.forEach(t),lyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);V4=n(U,"LI",{});var C8e=s(V4);Ice=n(C8e,"STRONG",{});var dit=s(Ice);iyo=r(dit,"albert"),dit.forEach(t),dyo=r(C8e," \u2014 "),uD=n(C8e,"A",{href:!0});var cit=s(uD);cyo=r(cit,"AlbertForMaskedLM"),cit.forEach(t),fyo=r(C8e," (ALBERT model)"),C8e.forEach(t),myo=i(U),X4=n(U,"LI",{});var w8e=s(X4);Nce=n(w8e,"STRONG",{});var fit=s(Nce);gyo=r(fit,"bart"),fit.forEach(t),hyo=r(w8e," \u2014 "),bD=n(w8e,"A",{href:!0});var mit=s(bD);pyo=r(mit,"BartForConditionalGeneration"),mit.forEach(t),_yo=r(w8e," (BART model)"),w8e.forEach(t),uyo=i(U),z4=n(U,"LI",{});var A8e=s(z4);qce=n(A8e,"STRONG",{});var git=s(qce);byo=r(git,"bert"),git.forEach(t),vyo=r(A8e," \u2014 "),vD=n(A8e,"A",{href:!0});var hit=s(vD);Fyo=r(hit,"BertForMaskedLM"),hit.forEach(t),Tyo=r(A8e," (BERT model)"),A8e.forEach(t),Myo=i(U),W4=n(U,"LI",{});var y8e=s(W4);jce=n(y8e,"STRONG",{});var pit=s(jce);Eyo=r(pit,"big_bird"),pit.forEach(t),Cyo=r(y8e," \u2014 "),FD=n(y8e,"A",{href:!0});var _it=s(FD);wyo=r(_it,"BigBirdForMaskedLM"),_it.forEach(t),Ayo=r(y8e," (BigBird model)"),y8e.forEach(t),yyo=i(U),Q4=n(U,"LI",{});var L8e=s(Q4);Dce=n(L8e,"STRONG",{});var uit=s(Dce);Lyo=r(uit,"camembert"),uit.forEach(t),xyo=r(L8e," \u2014 "),TD=n(L8e,"A",{href:!0});var bit=s(TD);$yo=r(bit,"CamembertForMaskedLM"),bit.forEach(t),kyo=r(L8e," (CamemBERT model)"),L8e.forEach(t),Syo=i(U),H4=n(U,"LI",{});var x8e=s(H4);Gce=n(x8e,"STRONG",{});var vit=s(Gce);Ryo=r(vit,"convbert"),vit.forEach(t),Pyo=r(x8e," \u2014 "),MD=n(x8e,"A",{href:!0});var Fit=s(MD);Byo=r(Fit,"ConvBertForMaskedLM"),Fit.forEach(t),Iyo=r(x8e," (ConvBERT model)"),x8e.forEach(t),Nyo=i(U),U4=n(U,"LI",{});var $8e=s(U4);Oce=n($8e,"STRONG",{});var Tit=s(Oce);qyo=r(Tit,"data2vec-text"),Tit.forEach(t),jyo=r($8e," \u2014 "),ED=n($8e,"A",{href:!0});var Mit=s(ED);Dyo=r(Mit,"Data2VecTextForMaskedLM"),Mit.forEach(t),Gyo=r($8e," (Data2VecText model)"),$8e.forEach(t),Oyo=i(U),J4=n(U,"LI",{});var k8e=s(J4);Vce=n(k8e,"STRONG",{});var Eit=s(Vce);Vyo=r(Eit,"deberta"),Eit.forEach(t),Xyo=r(k8e," \u2014 "),CD=n(k8e,"A",{href:!0});var Cit=s(CD);zyo=r(Cit,"DebertaForMaskedLM"),Cit.forEach(t),Wyo=r(k8e," (DeBERTa model)"),k8e.forEach(t),Qyo=i(U),Y4=n(U,"LI",{});var S8e=s(Y4);Xce=n(S8e,"STRONG",{});var wit=s(Xce);Hyo=r(wit,"deberta-v2"),wit.forEach(t),Uyo=r(S8e," \u2014 "),wD=n(S8e,"A",{href:!0});var Ait=s(wD);Jyo=r(Ait,"DebertaV2ForMaskedLM"),Ait.forEach(t),Yyo=r(S8e," (DeBERTa-v2 model)"),S8e.forEach(t),Kyo=i(U),K4=n(U,"LI",{});var R8e=s(K4);zce=n(R8e,"STRONG",{});var yit=s(zce);Zyo=r(yit,"distilbert"),yit.forEach(t),eLo=r(R8e," \u2014 "),AD=n(R8e,"A",{href:!0});var Lit=s(AD);oLo=r(Lit,"DistilBertForMaskedLM"),Lit.forEach(t),rLo=r(R8e," (DistilBERT model)"),R8e.forEach(t),tLo=i(U),Z4=n(U,"LI",{});var P8e=s(Z4);Wce=n(P8e,"STRONG",{});var xit=s(Wce);aLo=r(xit,"electra"),xit.forEach(t),nLo=r(P8e," \u2014 "),yD=n(P8e,"A",{href:!0});var $it=s(yD);sLo=r($it,"ElectraForMaskedLM"),$it.forEach(t),lLo=r(P8e," (ELECTRA model)"),P8e.forEach(t),iLo=i(U),e1=n(U,"LI",{});var B8e=s(e1);Qce=n(B8e,"STRONG",{});var kit=s(Qce);dLo=r(kit,"flaubert"),kit.forEach(t),cLo=r(B8e," \u2014 "),LD=n(B8e,"A",{href:!0});var Sit=s(LD);fLo=r(Sit,"FlaubertWithLMHeadModel"),Sit.forEach(t),mLo=r(B8e," (FlauBERT model)"),B8e.forEach(t),gLo=i(U),o1=n(U,"LI",{});var I8e=s(o1);Hce=n(I8e,"STRONG",{});var Rit=s(Hce);hLo=r(Rit,"fnet"),Rit.forEach(t),pLo=r(I8e," \u2014 "),xD=n(I8e,"A",{href:!0});var Pit=s(xD);_Lo=r(Pit,"FNetForMaskedLM"),Pit.forEach(t),uLo=r(I8e," (FNet model)"),I8e.forEach(t),bLo=i(U),r1=n(U,"LI",{});var N8e=s(r1);Uce=n(N8e,"STRONG",{});var Bit=s(Uce);vLo=r(Bit,"funnel"),Bit.forEach(t),FLo=r(N8e," \u2014 "),$D=n(N8e,"A",{href:!0});var Iit=s($D);TLo=r(Iit,"FunnelForMaskedLM"),Iit.forEach(t),MLo=r(N8e," (Funnel Transformer model)"),N8e.forEach(t),ELo=i(U),t1=n(U,"LI",{});var q8e=s(t1);Jce=n(q8e,"STRONG",{});var Nit=s(Jce);CLo=r(Nit,"ibert"),Nit.forEach(t),wLo=r(q8e," \u2014 "),kD=n(q8e,"A",{href:!0});var qit=s(kD);ALo=r(qit,"IBertForMaskedLM"),qit.forEach(t),yLo=r(q8e," (I-BERT model)"),q8e.forEach(t),LLo=i(U),a1=n(U,"LI",{});var j8e=s(a1);Yce=n(j8e,"STRONG",{});var jit=s(Yce);xLo=r(jit,"layoutlm"),jit.forEach(t),$Lo=r(j8e," \u2014 "),SD=n(j8e,"A",{href:!0});var Dit=s(SD);kLo=r(Dit,"LayoutLMForMaskedLM"),Dit.forEach(t),SLo=r(j8e," (LayoutLM model)"),j8e.forEach(t),RLo=i(U),n1=n(U,"LI",{});var D8e=s(n1);Kce=n(D8e,"STRONG",{});var Git=s(Kce);PLo=r(Git,"longformer"),Git.forEach(t),BLo=r(D8e," \u2014 "),RD=n(D8e,"A",{href:!0});var Oit=s(RD);ILo=r(Oit,"LongformerForMaskedLM"),Oit.forEach(t),NLo=r(D8e," (Longformer model)"),D8e.forEach(t),qLo=i(U),s1=n(U,"LI",{});var G8e=s(s1);Zce=n(G8e,"STRONG",{});var Vit=s(Zce);jLo=r(Vit,"mbart"),Vit.forEach(t),DLo=r(G8e," \u2014 "),PD=n(G8e,"A",{href:!0});var Xit=s(PD);GLo=r(Xit,"MBartForConditionalGeneration"),Xit.forEach(t),OLo=r(G8e," (mBART model)"),G8e.forEach(t),VLo=i(U),l1=n(U,"LI",{});var O8e=s(l1);efe=n(O8e,"STRONG",{});var zit=s(efe);XLo=r(zit,"megatron-bert"),zit.forEach(t),zLo=r(O8e," \u2014 "),BD=n(O8e,"A",{href:!0});var Wit=s(BD);WLo=r(Wit,"MegatronBertForMaskedLM"),Wit.forEach(t),QLo=r(O8e," (MegatronBert model)"),O8e.forEach(t),HLo=i(U),i1=n(U,"LI",{});var V8e=s(i1);ofe=n(V8e,"STRONG",{});var Qit=s(ofe);ULo=r(Qit,"mobilebert"),Qit.forEach(t),JLo=r(V8e," \u2014 "),ID=n(V8e,"A",{href:!0});var Hit=s(ID);YLo=r(Hit,"MobileBertForMaskedLM"),Hit.forEach(t),KLo=r(V8e," (MobileBERT model)"),V8e.forEach(t),ZLo=i(U),d1=n(U,"LI",{});var X8e=s(d1);rfe=n(X8e,"STRONG",{});var Uit=s(rfe);e8o=r(Uit,"mpnet"),Uit.forEach(t),o8o=r(X8e," \u2014 "),ND=n(X8e,"A",{href:!0});var Jit=s(ND);r8o=r(Jit,"MPNetForMaskedLM"),Jit.forEach(t),t8o=r(X8e," (MPNet model)"),X8e.forEach(t),a8o=i(U),c1=n(U,"LI",{});var z8e=s(c1);tfe=n(z8e,"STRONG",{});var Yit=s(tfe);n8o=r(Yit,"nystromformer"),Yit.forEach(t),s8o=r(z8e," \u2014 "),qD=n(z8e,"A",{href:!0});var Kit=s(qD);l8o=r(Kit,"NystromformerForMaskedLM"),Kit.forEach(t),i8o=r(z8e," (Nystromformer model)"),z8e.forEach(t),d8o=i(U),f1=n(U,"LI",{});var W8e=s(f1);afe=n(W8e,"STRONG",{});var Zit=s(afe);c8o=r(Zit,"perceiver"),Zit.forEach(t),f8o=r(W8e," \u2014 "),jD=n(W8e,"A",{href:!0});var edt=s(jD);m8o=r(edt,"PerceiverForMaskedLM"),edt.forEach(t),g8o=r(W8e," (Perceiver model)"),W8e.forEach(t),h8o=i(U),m1=n(U,"LI",{});var Q8e=s(m1);nfe=n(Q8e,"STRONG",{});var odt=s(nfe);p8o=r(odt,"qdqbert"),odt.forEach(t),_8o=r(Q8e," \u2014 "),DD=n(Q8e,"A",{href:!0});var rdt=s(DD);u8o=r(rdt,"QDQBertForMaskedLM"),rdt.forEach(t),b8o=r(Q8e," (QDQBert model)"),Q8e.forEach(t),v8o=i(U),g1=n(U,"LI",{});var H8e=s(g1);sfe=n(H8e,"STRONG",{});var tdt=s(sfe);F8o=r(tdt,"reformer"),tdt.forEach(t),T8o=r(H8e," \u2014 "),GD=n(H8e,"A",{href:!0});var adt=s(GD);M8o=r(adt,"ReformerForMaskedLM"),adt.forEach(t),E8o=r(H8e," (Reformer model)"),H8e.forEach(t),C8o=i(U),h1=n(U,"LI",{});var U8e=s(h1);lfe=n(U8e,"STRONG",{});var ndt=s(lfe);w8o=r(ndt,"rembert"),ndt.forEach(t),A8o=r(U8e," \u2014 "),OD=n(U8e,"A",{href:!0});var sdt=s(OD);y8o=r(sdt,"RemBertForMaskedLM"),sdt.forEach(t),L8o=r(U8e," (RemBERT model)"),U8e.forEach(t),x8o=i(U),p1=n(U,"LI",{});var J8e=s(p1);ife=n(J8e,"STRONG",{});var ldt=s(ife);$8o=r(ldt,"roberta"),ldt.forEach(t),k8o=r(J8e," \u2014 "),VD=n(J8e,"A",{href:!0});var idt=s(VD);S8o=r(idt,"RobertaForMaskedLM"),idt.forEach(t),R8o=r(J8e," (RoBERTa model)"),J8e.forEach(t),P8o=i(U),_1=n(U,"LI",{});var Y8e=s(_1);dfe=n(Y8e,"STRONG",{});var ddt=s(dfe);B8o=r(ddt,"roformer"),ddt.forEach(t),I8o=r(Y8e," \u2014 "),XD=n(Y8e,"A",{href:!0});var cdt=s(XD);N8o=r(cdt,"RoFormerForMaskedLM"),cdt.forEach(t),q8o=r(Y8e," (RoFormer model)"),Y8e.forEach(t),j8o=i(U),u1=n(U,"LI",{});var K8e=s(u1);cfe=n(K8e,"STRONG",{});var fdt=s(cfe);D8o=r(fdt,"squeezebert"),fdt.forEach(t),G8o=r(K8e," \u2014 "),zD=n(K8e,"A",{href:!0});var mdt=s(zD);O8o=r(mdt,"SqueezeBertForMaskedLM"),mdt.forEach(t),V8o=r(K8e," (SqueezeBERT model)"),K8e.forEach(t),X8o=i(U),b1=n(U,"LI",{});var Z8e=s(b1);ffe=n(Z8e,"STRONG",{});var gdt=s(ffe);z8o=r(gdt,"tapas"),gdt.forEach(t),W8o=r(Z8e," \u2014 "),WD=n(Z8e,"A",{href:!0});var hdt=s(WD);Q8o=r(hdt,"TapasForMaskedLM"),hdt.forEach(t),H8o=r(Z8e," (TAPAS model)"),Z8e.forEach(t),U8o=i(U),v1=n(U,"LI",{});var e9e=s(v1);mfe=n(e9e,"STRONG",{});var pdt=s(mfe);J8o=r(pdt,"wav2vec2"),pdt.forEach(t),Y8o=r(e9e," \u2014 "),gfe=n(e9e,"CODE",{});var _dt=s(gfe);K8o=r(_dt,"Wav2Vec2ForMaskedLM"),_dt.forEach(t),Z8o=r(e9e," (Wav2Vec2 model)"),e9e.forEach(t),e9o=i(U),F1=n(U,"LI",{});var o9e=s(F1);hfe=n(o9e,"STRONG",{});var udt=s(hfe);o9o=r(udt,"xlm"),udt.forEach(t),r9o=r(o9e," \u2014 "),QD=n(o9e,"A",{href:!0});var bdt=s(QD);t9o=r(bdt,"XLMWithLMHeadModel"),bdt.forEach(t),a9o=r(o9e," (XLM model)"),o9e.forEach(t),n9o=i(U),T1=n(U,"LI",{});var r9e=s(T1);pfe=n(r9e,"STRONG",{});var vdt=s(pfe);s9o=r(vdt,"xlm-roberta"),vdt.forEach(t),l9o=r(r9e," \u2014 "),HD=n(r9e,"A",{href:!0});var Fdt=s(HD);i9o=r(Fdt,"XLMRobertaForMaskedLM"),Fdt.forEach(t),d9o=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),c9o=i(U),M1=n(U,"LI",{});var t9e=s(M1);_fe=n(t9e,"STRONG",{});var Tdt=s(_fe);f9o=r(Tdt,"xlm-roberta-xl"),Tdt.forEach(t),m9o=r(t9e," \u2014 "),UD=n(t9e,"A",{href:!0});var Mdt=s(UD);g9o=r(Mdt,"XLMRobertaXLForMaskedLM"),Mdt.forEach(t),h9o=r(t9e," (XLM-RoBERTa-XL model)"),t9e.forEach(t),p9o=i(U),E1=n(U,"LI",{});var a9e=s(E1);ufe=n(a9e,"STRONG",{});var Edt=s(ufe);_9o=r(Edt,"yoso"),Edt.forEach(t),u9o=r(a9e," \u2014 "),JD=n(a9e,"A",{href:!0});var Cdt=s(JD);b9o=r(Cdt,"YosoForMaskedLM"),Cdt.forEach(t),v9o=r(a9e," (YOSO model)"),a9e.forEach(t),U.forEach(t),F9o=i(aa),C1=n(aa,"P",{});var n9e=s(C1);T9o=r(n9e,"The model is set in evaluation mode by default using "),bfe=n(n9e,"CODE",{});var wdt=s(bfe);M9o=r(wdt,"model.eval()"),wdt.forEach(t),E9o=r(n9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(n9e,"CODE",{});var Adt=s(vfe);C9o=r(Adt,"model.train()"),Adt.forEach(t),n9e.forEach(t),w9o=i(aa),T(w1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),jqe=i(f),Ni=n(f,"H2",{class:!0});var VDe=s(Ni);A1=n(VDe,"A",{id:!0,class:!0,href:!0});var ydt=s(A1);Ffe=n(ydt,"SPAN",{});var Ldt=s(Ffe);T(Cy.$$.fragment,Ldt),Ldt.forEach(t),ydt.forEach(t),A9o=i(VDe),Tfe=n(VDe,"SPAN",{});var xdt=s(Tfe);y9o=r(xdt,"AutoModelForSeq2SeqLM"),xdt.forEach(t),VDe.forEach(t),Dqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(wy.$$.fragment,zs),L9o=i(zs),qi=n(zs,"P",{});var RZ=s(qi);x9o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YD=n(RZ,"A",{href:!0});var $dt=s(YD);$9o=r($dt,"from_pretrained()"),$dt.forEach(t),k9o=r(RZ," class method or the "),KD=n(RZ,"A",{href:!0});var kdt=s(KD);S9o=r(kdt,"from_config()"),kdt.forEach(t),R9o=r(RZ,` class
method.`),RZ.forEach(t),P9o=i(zs),Ay=n(zs,"P",{});var XDe=s(Ay);B9o=r(XDe,"This class cannot be instantiated directly using "),Mfe=n(XDe,"CODE",{});var Sdt=s(Mfe);I9o=r(Sdt,"__init__()"),Sdt.forEach(t),N9o=r(XDe," (throws an error)."),XDe.forEach(t),q9o=i(zs),lt=n(zs,"DIV",{class:!0});var X0=s(lt);T(yy.$$.fragment,X0),j9o=i(X0),Efe=n(X0,"P",{});var Rdt=s(Efe);D9o=r(Rdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rdt.forEach(t),G9o=i(X0),ji=n(X0,"P",{});var PZ=s(ji);O9o=r(PZ,`Note:
Loading a model from its configuration file does `),Cfe=n(PZ,"STRONG",{});var Pdt=s(Cfe);V9o=r(Pdt,"not"),Pdt.forEach(t),X9o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(PZ,"A",{href:!0});var Bdt=s(ZD);z9o=r(Bdt,"from_pretrained()"),Bdt.forEach(t),W9o=r(PZ," to load the model weights."),PZ.forEach(t),Q9o=i(X0),T(y1.$$.fragment,X0),X0.forEach(t),H9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Ly.$$.fragment,na),U9o=i(na),wfe=n(na,"P",{});var Idt=s(wfe);J9o=r(Idt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Idt.forEach(t),Y9o=i(na),Sa=n(na,"P",{});var z0=s(Sa);K9o=r(z0,"The model class to instantiate is selected based on the "),Afe=n(z0,"CODE",{});var Ndt=s(Afe);Z9o=r(Ndt,"model_type"),Ndt.forEach(t),exo=r(z0,` property of the config object (either
passed as an argument or loaded from `),yfe=n(z0,"CODE",{});var qdt=s(yfe);oxo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),rxo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(z0,"CODE",{});var jdt=s(Lfe);txo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),axo=r(z0,":"),z0.forEach(t),nxo=i(na),_e=n(na,"UL",{});var ve=s(_e);L1=n(ve,"LI",{});var s9e=s(L1);xfe=n(s9e,"STRONG",{});var Ddt=s(xfe);sxo=r(Ddt,"bart"),Ddt.forEach(t),lxo=r(s9e," \u2014 "),eG=n(s9e,"A",{href:!0});var Gdt=s(eG);ixo=r(Gdt,"BartForConditionalGeneration"),Gdt.forEach(t),dxo=r(s9e," (BART model)"),s9e.forEach(t),cxo=i(ve),x1=n(ve,"LI",{});var l9e=s(x1);$fe=n(l9e,"STRONG",{});var Odt=s($fe);fxo=r(Odt,"bigbird_pegasus"),Odt.forEach(t),mxo=r(l9e," \u2014 "),oG=n(l9e,"A",{href:!0});var Vdt=s(oG);gxo=r(Vdt,"BigBirdPegasusForConditionalGeneration"),Vdt.forEach(t),hxo=r(l9e," (BigBirdPegasus model)"),l9e.forEach(t),pxo=i(ve),$1=n(ve,"LI",{});var i9e=s($1);kfe=n(i9e,"STRONG",{});var Xdt=s(kfe);_xo=r(Xdt,"blenderbot"),Xdt.forEach(t),uxo=r(i9e," \u2014 "),rG=n(i9e,"A",{href:!0});var zdt=s(rG);bxo=r(zdt,"BlenderbotForConditionalGeneration"),zdt.forEach(t),vxo=r(i9e," (Blenderbot model)"),i9e.forEach(t),Fxo=i(ve),k1=n(ve,"LI",{});var d9e=s(k1);Sfe=n(d9e,"STRONG",{});var Wdt=s(Sfe);Txo=r(Wdt,"blenderbot-small"),Wdt.forEach(t),Mxo=r(d9e," \u2014 "),tG=n(d9e,"A",{href:!0});var Qdt=s(tG);Exo=r(Qdt,"BlenderbotSmallForConditionalGeneration"),Qdt.forEach(t),Cxo=r(d9e," (BlenderbotSmall model)"),d9e.forEach(t),wxo=i(ve),S1=n(ve,"LI",{});var c9e=s(S1);Rfe=n(c9e,"STRONG",{});var Hdt=s(Rfe);Axo=r(Hdt,"encoder-decoder"),Hdt.forEach(t),yxo=r(c9e," \u2014 "),aG=n(c9e,"A",{href:!0});var Udt=s(aG);Lxo=r(Udt,"EncoderDecoderModel"),Udt.forEach(t),xxo=r(c9e," (Encoder decoder model)"),c9e.forEach(t),$xo=i(ve),R1=n(ve,"LI",{});var f9e=s(R1);Pfe=n(f9e,"STRONG",{});var Jdt=s(Pfe);kxo=r(Jdt,"fsmt"),Jdt.forEach(t),Sxo=r(f9e," \u2014 "),nG=n(f9e,"A",{href:!0});var Ydt=s(nG);Rxo=r(Ydt,"FSMTForConditionalGeneration"),Ydt.forEach(t),Pxo=r(f9e," (FairSeq Machine-Translation model)"),f9e.forEach(t),Bxo=i(ve),P1=n(ve,"LI",{});var m9e=s(P1);Bfe=n(m9e,"STRONG",{});var Kdt=s(Bfe);Ixo=r(Kdt,"led"),Kdt.forEach(t),Nxo=r(m9e," \u2014 "),sG=n(m9e,"A",{href:!0});var Zdt=s(sG);qxo=r(Zdt,"LEDForConditionalGeneration"),Zdt.forEach(t),jxo=r(m9e," (LED model)"),m9e.forEach(t),Dxo=i(ve),B1=n(ve,"LI",{});var g9e=s(B1);Ife=n(g9e,"STRONG",{});var ect=s(Ife);Gxo=r(ect,"m2m_100"),ect.forEach(t),Oxo=r(g9e," \u2014 "),lG=n(g9e,"A",{href:!0});var oct=s(lG);Vxo=r(oct,"M2M100ForConditionalGeneration"),oct.forEach(t),Xxo=r(g9e," (M2M100 model)"),g9e.forEach(t),zxo=i(ve),I1=n(ve,"LI",{});var h9e=s(I1);Nfe=n(h9e,"STRONG",{});var rct=s(Nfe);Wxo=r(rct,"marian"),rct.forEach(t),Qxo=r(h9e," \u2014 "),iG=n(h9e,"A",{href:!0});var tct=s(iG);Hxo=r(tct,"MarianMTModel"),tct.forEach(t),Uxo=r(h9e," (Marian model)"),h9e.forEach(t),Jxo=i(ve),N1=n(ve,"LI",{});var p9e=s(N1);qfe=n(p9e,"STRONG",{});var act=s(qfe);Yxo=r(act,"mbart"),act.forEach(t),Kxo=r(p9e," \u2014 "),dG=n(p9e,"A",{href:!0});var nct=s(dG);Zxo=r(nct,"MBartForConditionalGeneration"),nct.forEach(t),e$o=r(p9e," (mBART model)"),p9e.forEach(t),o$o=i(ve),q1=n(ve,"LI",{});var _9e=s(q1);jfe=n(_9e,"STRONG",{});var sct=s(jfe);r$o=r(sct,"mt5"),sct.forEach(t),t$o=r(_9e," \u2014 "),cG=n(_9e,"A",{href:!0});var lct=s(cG);a$o=r(lct,"MT5ForConditionalGeneration"),lct.forEach(t),n$o=r(_9e," (mT5 model)"),_9e.forEach(t),s$o=i(ve),j1=n(ve,"LI",{});var u9e=s(j1);Dfe=n(u9e,"STRONG",{});var ict=s(Dfe);l$o=r(ict,"pegasus"),ict.forEach(t),i$o=r(u9e," \u2014 "),fG=n(u9e,"A",{href:!0});var dct=s(fG);d$o=r(dct,"PegasusForConditionalGeneration"),dct.forEach(t),c$o=r(u9e," (Pegasus model)"),u9e.forEach(t),f$o=i(ve),D1=n(ve,"LI",{});var b9e=s(D1);Gfe=n(b9e,"STRONG",{});var cct=s(Gfe);m$o=r(cct,"plbart"),cct.forEach(t),g$o=r(b9e," \u2014 "),mG=n(b9e,"A",{href:!0});var fct=s(mG);h$o=r(fct,"PLBartForConditionalGeneration"),fct.forEach(t),p$o=r(b9e," (PLBart model)"),b9e.forEach(t),_$o=i(ve),G1=n(ve,"LI",{});var v9e=s(G1);Ofe=n(v9e,"STRONG",{});var mct=s(Ofe);u$o=r(mct,"prophetnet"),mct.forEach(t),b$o=r(v9e," \u2014 "),gG=n(v9e,"A",{href:!0});var gct=s(gG);v$o=r(gct,"ProphetNetForConditionalGeneration"),gct.forEach(t),F$o=r(v9e," (ProphetNet model)"),v9e.forEach(t),T$o=i(ve),O1=n(ve,"LI",{});var F9e=s(O1);Vfe=n(F9e,"STRONG",{});var hct=s(Vfe);M$o=r(hct,"t5"),hct.forEach(t),E$o=r(F9e," \u2014 "),hG=n(F9e,"A",{href:!0});var pct=s(hG);C$o=r(pct,"T5ForConditionalGeneration"),pct.forEach(t),w$o=r(F9e," (T5 model)"),F9e.forEach(t),A$o=i(ve),V1=n(ve,"LI",{});var T9e=s(V1);Xfe=n(T9e,"STRONG",{});var _ct=s(Xfe);y$o=r(_ct,"xlm-prophetnet"),_ct.forEach(t),L$o=r(T9e," \u2014 "),pG=n(T9e,"A",{href:!0});var uct=s(pG);x$o=r(uct,"XLMProphetNetForConditionalGeneration"),uct.forEach(t),$$o=r(T9e," (XLMProphetNet model)"),T9e.forEach(t),ve.forEach(t),k$o=i(na),X1=n(na,"P",{});var M9e=s(X1);S$o=r(M9e,"The model is set in evaluation mode by default using "),zfe=n(M9e,"CODE",{});var bct=s(zfe);R$o=r(bct,"model.eval()"),bct.forEach(t),P$o=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(M9e,"CODE",{});var vct=s(Wfe);B$o=r(vct,"model.train()"),vct.forEach(t),M9e.forEach(t),I$o=i(na),T(z1.$$.fragment,na),na.forEach(t),zs.forEach(t),Gqe=i(f),Di=n(f,"H2",{class:!0});var zDe=s(Di);W1=n(zDe,"A",{id:!0,class:!0,href:!0});var Fct=s(W1);Qfe=n(Fct,"SPAN",{});var Tct=s(Qfe);T(xy.$$.fragment,Tct),Tct.forEach(t),Fct.forEach(t),N$o=i(zDe),Hfe=n(zDe,"SPAN",{});var Mct=s(Hfe);q$o=r(Mct,"AutoModelForSequenceClassification"),Mct.forEach(t),zDe.forEach(t),Oqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T($y.$$.fragment,Ws),j$o=i(Ws),Gi=n(Ws,"P",{});var BZ=s(Gi);D$o=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_G=n(BZ,"A",{href:!0});var Ect=s(_G);G$o=r(Ect,"from_pretrained()"),Ect.forEach(t),O$o=r(BZ," class method or the "),uG=n(BZ,"A",{href:!0});var Cct=s(uG);V$o=r(Cct,"from_config()"),Cct.forEach(t),X$o=r(BZ,` class
method.`),BZ.forEach(t),z$o=i(Ws),ky=n(Ws,"P",{});var WDe=s(ky);W$o=r(WDe,"This class cannot be instantiated directly using "),Ufe=n(WDe,"CODE",{});var wct=s(Ufe);Q$o=r(wct,"__init__()"),wct.forEach(t),H$o=r(WDe," (throws an error)."),WDe.forEach(t),U$o=i(Ws),it=n(Ws,"DIV",{class:!0});var W0=s(it);T(Sy.$$.fragment,W0),J$o=i(W0),Jfe=n(W0,"P",{});var Act=s(Jfe);Y$o=r(Act,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Act.forEach(t),K$o=i(W0),Oi=n(W0,"P",{});var IZ=s(Oi);Z$o=r(IZ,`Note:
Loading a model from its configuration file does `),Yfe=n(IZ,"STRONG",{});var yct=s(Yfe);eko=r(yct,"not"),yct.forEach(t),oko=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(IZ,"A",{href:!0});var Lct=s(bG);rko=r(Lct,"from_pretrained()"),Lct.forEach(t),tko=r(IZ," to load the model weights."),IZ.forEach(t),ako=i(W0),T(Q1.$$.fragment,W0),W0.forEach(t),nko=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Ry.$$.fragment,sa),sko=i(sa),Kfe=n(sa,"P",{});var xct=s(Kfe);lko=r(xct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xct.forEach(t),iko=i(sa),Ra=n(sa,"P",{});var Q0=s(Ra);dko=r(Q0,"The model class to instantiate is selected based on the "),Zfe=n(Q0,"CODE",{});var $ct=s(Zfe);cko=r($ct,"model_type"),$ct.forEach(t),fko=r(Q0,` property of the config object (either
passed as an argument or loaded from `),eme=n(Q0,"CODE",{});var kct=s(eme);mko=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),gko=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(Q0,"CODE",{});var Sct=s(ome);hko=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),pko=r(Q0,":"),Q0.forEach(t),_ko=i(sa),N=n(sa,"UL",{});var j=s(N);H1=n(j,"LI",{});var E9e=s(H1);rme=n(E9e,"STRONG",{});var Rct=s(rme);uko=r(Rct,"albert"),Rct.forEach(t),bko=r(E9e," \u2014 "),vG=n(E9e,"A",{href:!0});var Pct=s(vG);vko=r(Pct,"AlbertForSequenceClassification"),Pct.forEach(t),Fko=r(E9e," (ALBERT model)"),E9e.forEach(t),Tko=i(j),U1=n(j,"LI",{});var C9e=s(U1);tme=n(C9e,"STRONG",{});var Bct=s(tme);Mko=r(Bct,"bart"),Bct.forEach(t),Eko=r(C9e," \u2014 "),FG=n(C9e,"A",{href:!0});var Ict=s(FG);Cko=r(Ict,"BartForSequenceClassification"),Ict.forEach(t),wko=r(C9e," (BART model)"),C9e.forEach(t),Ako=i(j),J1=n(j,"LI",{});var w9e=s(J1);ame=n(w9e,"STRONG",{});var Nct=s(ame);yko=r(Nct,"bert"),Nct.forEach(t),Lko=r(w9e," \u2014 "),TG=n(w9e,"A",{href:!0});var qct=s(TG);xko=r(qct,"BertForSequenceClassification"),qct.forEach(t),$ko=r(w9e," (BERT model)"),w9e.forEach(t),kko=i(j),Y1=n(j,"LI",{});var A9e=s(Y1);nme=n(A9e,"STRONG",{});var jct=s(nme);Sko=r(jct,"big_bird"),jct.forEach(t),Rko=r(A9e," \u2014 "),MG=n(A9e,"A",{href:!0});var Dct=s(MG);Pko=r(Dct,"BigBirdForSequenceClassification"),Dct.forEach(t),Bko=r(A9e," (BigBird model)"),A9e.forEach(t),Iko=i(j),K1=n(j,"LI",{});var y9e=s(K1);sme=n(y9e,"STRONG",{});var Gct=s(sme);Nko=r(Gct,"bigbird_pegasus"),Gct.forEach(t),qko=r(y9e," \u2014 "),EG=n(y9e,"A",{href:!0});var Oct=s(EG);jko=r(Oct,"BigBirdPegasusForSequenceClassification"),Oct.forEach(t),Dko=r(y9e," (BigBirdPegasus model)"),y9e.forEach(t),Gko=i(j),Z1=n(j,"LI",{});var L9e=s(Z1);lme=n(L9e,"STRONG",{});var Vct=s(lme);Oko=r(Vct,"camembert"),Vct.forEach(t),Vko=r(L9e," \u2014 "),CG=n(L9e,"A",{href:!0});var Xct=s(CG);Xko=r(Xct,"CamembertForSequenceClassification"),Xct.forEach(t),zko=r(L9e," (CamemBERT model)"),L9e.forEach(t),Wko=i(j),e7=n(j,"LI",{});var x9e=s(e7);ime=n(x9e,"STRONG",{});var zct=s(ime);Qko=r(zct,"canine"),zct.forEach(t),Hko=r(x9e," \u2014 "),wG=n(x9e,"A",{href:!0});var Wct=s(wG);Uko=r(Wct,"CanineForSequenceClassification"),Wct.forEach(t),Jko=r(x9e," (Canine model)"),x9e.forEach(t),Yko=i(j),o7=n(j,"LI",{});var $9e=s(o7);dme=n($9e,"STRONG",{});var Qct=s(dme);Kko=r(Qct,"convbert"),Qct.forEach(t),Zko=r($9e," \u2014 "),AG=n($9e,"A",{href:!0});var Hct=s(AG);eSo=r(Hct,"ConvBertForSequenceClassification"),Hct.forEach(t),oSo=r($9e," (ConvBERT model)"),$9e.forEach(t),rSo=i(j),r7=n(j,"LI",{});var k9e=s(r7);cme=n(k9e,"STRONG",{});var Uct=s(cme);tSo=r(Uct,"ctrl"),Uct.forEach(t),aSo=r(k9e," \u2014 "),yG=n(k9e,"A",{href:!0});var Jct=s(yG);nSo=r(Jct,"CTRLForSequenceClassification"),Jct.forEach(t),sSo=r(k9e," (CTRL model)"),k9e.forEach(t),lSo=i(j),t7=n(j,"LI",{});var S9e=s(t7);fme=n(S9e,"STRONG",{});var Yct=s(fme);iSo=r(Yct,"data2vec-text"),Yct.forEach(t),dSo=r(S9e," \u2014 "),LG=n(S9e,"A",{href:!0});var Kct=s(LG);cSo=r(Kct,"Data2VecTextForSequenceClassification"),Kct.forEach(t),fSo=r(S9e," (Data2VecText model)"),S9e.forEach(t),mSo=i(j),a7=n(j,"LI",{});var R9e=s(a7);mme=n(R9e,"STRONG",{});var Zct=s(mme);gSo=r(Zct,"deberta"),Zct.forEach(t),hSo=r(R9e," \u2014 "),xG=n(R9e,"A",{href:!0});var eft=s(xG);pSo=r(eft,"DebertaForSequenceClassification"),eft.forEach(t),_So=r(R9e," (DeBERTa model)"),R9e.forEach(t),uSo=i(j),n7=n(j,"LI",{});var P9e=s(n7);gme=n(P9e,"STRONG",{});var oft=s(gme);bSo=r(oft,"deberta-v2"),oft.forEach(t),vSo=r(P9e," \u2014 "),$G=n(P9e,"A",{href:!0});var rft=s($G);FSo=r(rft,"DebertaV2ForSequenceClassification"),rft.forEach(t),TSo=r(P9e," (DeBERTa-v2 model)"),P9e.forEach(t),MSo=i(j),s7=n(j,"LI",{});var B9e=s(s7);hme=n(B9e,"STRONG",{});var tft=s(hme);ESo=r(tft,"distilbert"),tft.forEach(t),CSo=r(B9e," \u2014 "),kG=n(B9e,"A",{href:!0});var aft=s(kG);wSo=r(aft,"DistilBertForSequenceClassification"),aft.forEach(t),ASo=r(B9e," (DistilBERT model)"),B9e.forEach(t),ySo=i(j),l7=n(j,"LI",{});var I9e=s(l7);pme=n(I9e,"STRONG",{});var nft=s(pme);LSo=r(nft,"electra"),nft.forEach(t),xSo=r(I9e," \u2014 "),SG=n(I9e,"A",{href:!0});var sft=s(SG);$So=r(sft,"ElectraForSequenceClassification"),sft.forEach(t),kSo=r(I9e," (ELECTRA model)"),I9e.forEach(t),SSo=i(j),i7=n(j,"LI",{});var N9e=s(i7);_me=n(N9e,"STRONG",{});var lft=s(_me);RSo=r(lft,"flaubert"),lft.forEach(t),PSo=r(N9e," \u2014 "),RG=n(N9e,"A",{href:!0});var ift=s(RG);BSo=r(ift,"FlaubertForSequenceClassification"),ift.forEach(t),ISo=r(N9e," (FlauBERT model)"),N9e.forEach(t),NSo=i(j),d7=n(j,"LI",{});var q9e=s(d7);ume=n(q9e,"STRONG",{});var dft=s(ume);qSo=r(dft,"fnet"),dft.forEach(t),jSo=r(q9e," \u2014 "),PG=n(q9e,"A",{href:!0});var cft=s(PG);DSo=r(cft,"FNetForSequenceClassification"),cft.forEach(t),GSo=r(q9e," (FNet model)"),q9e.forEach(t),OSo=i(j),c7=n(j,"LI",{});var j9e=s(c7);bme=n(j9e,"STRONG",{});var fft=s(bme);VSo=r(fft,"funnel"),fft.forEach(t),XSo=r(j9e," \u2014 "),BG=n(j9e,"A",{href:!0});var mft=s(BG);zSo=r(mft,"FunnelForSequenceClassification"),mft.forEach(t),WSo=r(j9e," (Funnel Transformer model)"),j9e.forEach(t),QSo=i(j),f7=n(j,"LI",{});var D9e=s(f7);vme=n(D9e,"STRONG",{});var gft=s(vme);HSo=r(gft,"gpt2"),gft.forEach(t),USo=r(D9e," \u2014 "),IG=n(D9e,"A",{href:!0});var hft=s(IG);JSo=r(hft,"GPT2ForSequenceClassification"),hft.forEach(t),YSo=r(D9e," (OpenAI GPT-2 model)"),D9e.forEach(t),KSo=i(j),m7=n(j,"LI",{});var G9e=s(m7);Fme=n(G9e,"STRONG",{});var pft=s(Fme);ZSo=r(pft,"gpt_neo"),pft.forEach(t),eRo=r(G9e," \u2014 "),NG=n(G9e,"A",{href:!0});var _ft=s(NG);oRo=r(_ft,"GPTNeoForSequenceClassification"),_ft.forEach(t),rRo=r(G9e," (GPT Neo model)"),G9e.forEach(t),tRo=i(j),g7=n(j,"LI",{});var O9e=s(g7);Tme=n(O9e,"STRONG",{});var uft=s(Tme);aRo=r(uft,"gptj"),uft.forEach(t),nRo=r(O9e," \u2014 "),qG=n(O9e,"A",{href:!0});var bft=s(qG);sRo=r(bft,"GPTJForSequenceClassification"),bft.forEach(t),lRo=r(O9e," (GPT-J model)"),O9e.forEach(t),iRo=i(j),h7=n(j,"LI",{});var V9e=s(h7);Mme=n(V9e,"STRONG",{});var vft=s(Mme);dRo=r(vft,"ibert"),vft.forEach(t),cRo=r(V9e," \u2014 "),jG=n(V9e,"A",{href:!0});var Fft=s(jG);fRo=r(Fft,"IBertForSequenceClassification"),Fft.forEach(t),mRo=r(V9e," (I-BERT model)"),V9e.forEach(t),gRo=i(j),p7=n(j,"LI",{});var X9e=s(p7);Eme=n(X9e,"STRONG",{});var Tft=s(Eme);hRo=r(Tft,"layoutlm"),Tft.forEach(t),pRo=r(X9e," \u2014 "),DG=n(X9e,"A",{href:!0});var Mft=s(DG);_Ro=r(Mft,"LayoutLMForSequenceClassification"),Mft.forEach(t),uRo=r(X9e," (LayoutLM model)"),X9e.forEach(t),bRo=i(j),_7=n(j,"LI",{});var z9e=s(_7);Cme=n(z9e,"STRONG",{});var Eft=s(Cme);vRo=r(Eft,"layoutlmv2"),Eft.forEach(t),FRo=r(z9e," \u2014 "),GG=n(z9e,"A",{href:!0});var Cft=s(GG);TRo=r(Cft,"LayoutLMv2ForSequenceClassification"),Cft.forEach(t),MRo=r(z9e," (LayoutLMv2 model)"),z9e.forEach(t),ERo=i(j),u7=n(j,"LI",{});var W9e=s(u7);wme=n(W9e,"STRONG",{});var wft=s(wme);CRo=r(wft,"layoutlmv3"),wft.forEach(t),wRo=r(W9e," \u2014 "),OG=n(W9e,"A",{href:!0});var Aft=s(OG);ARo=r(Aft,"LayoutLMv3ForSequenceClassification"),Aft.forEach(t),yRo=r(W9e," (LayoutLMv3 model)"),W9e.forEach(t),LRo=i(j),b7=n(j,"LI",{});var Q9e=s(b7);Ame=n(Q9e,"STRONG",{});var yft=s(Ame);xRo=r(yft,"led"),yft.forEach(t),$Ro=r(Q9e," \u2014 "),VG=n(Q9e,"A",{href:!0});var Lft=s(VG);kRo=r(Lft,"LEDForSequenceClassification"),Lft.forEach(t),SRo=r(Q9e," (LED model)"),Q9e.forEach(t),RRo=i(j),v7=n(j,"LI",{});var H9e=s(v7);yme=n(H9e,"STRONG",{});var xft=s(yme);PRo=r(xft,"longformer"),xft.forEach(t),BRo=r(H9e," \u2014 "),XG=n(H9e,"A",{href:!0});var $ft=s(XG);IRo=r($ft,"LongformerForSequenceClassification"),$ft.forEach(t),NRo=r(H9e," (Longformer model)"),H9e.forEach(t),qRo=i(j),F7=n(j,"LI",{});var U9e=s(F7);Lme=n(U9e,"STRONG",{});var kft=s(Lme);jRo=r(kft,"mbart"),kft.forEach(t),DRo=r(U9e," \u2014 "),zG=n(U9e,"A",{href:!0});var Sft=s(zG);GRo=r(Sft,"MBartForSequenceClassification"),Sft.forEach(t),ORo=r(U9e," (mBART model)"),U9e.forEach(t),VRo=i(j),T7=n(j,"LI",{});var J9e=s(T7);xme=n(J9e,"STRONG",{});var Rft=s(xme);XRo=r(Rft,"megatron-bert"),Rft.forEach(t),zRo=r(J9e," \u2014 "),WG=n(J9e,"A",{href:!0});var Pft=s(WG);WRo=r(Pft,"MegatronBertForSequenceClassification"),Pft.forEach(t),QRo=r(J9e," (MegatronBert model)"),J9e.forEach(t),HRo=i(j),M7=n(j,"LI",{});var Y9e=s(M7);$me=n(Y9e,"STRONG",{});var Bft=s($me);URo=r(Bft,"mobilebert"),Bft.forEach(t),JRo=r(Y9e," \u2014 "),QG=n(Y9e,"A",{href:!0});var Ift=s(QG);YRo=r(Ift,"MobileBertForSequenceClassification"),Ift.forEach(t),KRo=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),ZRo=i(j),E7=n(j,"LI",{});var K9e=s(E7);kme=n(K9e,"STRONG",{});var Nft=s(kme);ePo=r(Nft,"mpnet"),Nft.forEach(t),oPo=r(K9e," \u2014 "),HG=n(K9e,"A",{href:!0});var qft=s(HG);rPo=r(qft,"MPNetForSequenceClassification"),qft.forEach(t),tPo=r(K9e," (MPNet model)"),K9e.forEach(t),aPo=i(j),C7=n(j,"LI",{});var Z9e=s(C7);Sme=n(Z9e,"STRONG",{});var jft=s(Sme);nPo=r(jft,"nystromformer"),jft.forEach(t),sPo=r(Z9e," \u2014 "),UG=n(Z9e,"A",{href:!0});var Dft=s(UG);lPo=r(Dft,"NystromformerForSequenceClassification"),Dft.forEach(t),iPo=r(Z9e," (Nystromformer model)"),Z9e.forEach(t),dPo=i(j),w7=n(j,"LI",{});var exe=s(w7);Rme=n(exe,"STRONG",{});var Gft=s(Rme);cPo=r(Gft,"openai-gpt"),Gft.forEach(t),fPo=r(exe," \u2014 "),JG=n(exe,"A",{href:!0});var Oft=s(JG);mPo=r(Oft,"OpenAIGPTForSequenceClassification"),Oft.forEach(t),gPo=r(exe," (OpenAI GPT model)"),exe.forEach(t),hPo=i(j),A7=n(j,"LI",{});var oxe=s(A7);Pme=n(oxe,"STRONG",{});var Vft=s(Pme);pPo=r(Vft,"perceiver"),Vft.forEach(t),_Po=r(oxe," \u2014 "),YG=n(oxe,"A",{href:!0});var Xft=s(YG);uPo=r(Xft,"PerceiverForSequenceClassification"),Xft.forEach(t),bPo=r(oxe," (Perceiver model)"),oxe.forEach(t),vPo=i(j),y7=n(j,"LI",{});var rxe=s(y7);Bme=n(rxe,"STRONG",{});var zft=s(Bme);FPo=r(zft,"plbart"),zft.forEach(t),TPo=r(rxe," \u2014 "),KG=n(rxe,"A",{href:!0});var Wft=s(KG);MPo=r(Wft,"PLBartForSequenceClassification"),Wft.forEach(t),EPo=r(rxe," (PLBart model)"),rxe.forEach(t),CPo=i(j),L7=n(j,"LI",{});var txe=s(L7);Ime=n(txe,"STRONG",{});var Qft=s(Ime);wPo=r(Qft,"qdqbert"),Qft.forEach(t),APo=r(txe," \u2014 "),ZG=n(txe,"A",{href:!0});var Hft=s(ZG);yPo=r(Hft,"QDQBertForSequenceClassification"),Hft.forEach(t),LPo=r(txe," (QDQBert model)"),txe.forEach(t),xPo=i(j),x7=n(j,"LI",{});var axe=s(x7);Nme=n(axe,"STRONG",{});var Uft=s(Nme);$Po=r(Uft,"reformer"),Uft.forEach(t),kPo=r(axe," \u2014 "),eO=n(axe,"A",{href:!0});var Jft=s(eO);SPo=r(Jft,"ReformerForSequenceClassification"),Jft.forEach(t),RPo=r(axe," (Reformer model)"),axe.forEach(t),PPo=i(j),$7=n(j,"LI",{});var nxe=s($7);qme=n(nxe,"STRONG",{});var Yft=s(qme);BPo=r(Yft,"rembert"),Yft.forEach(t),IPo=r(nxe," \u2014 "),oO=n(nxe,"A",{href:!0});var Kft=s(oO);NPo=r(Kft,"RemBertForSequenceClassification"),Kft.forEach(t),qPo=r(nxe," (RemBERT model)"),nxe.forEach(t),jPo=i(j),k7=n(j,"LI",{});var sxe=s(k7);jme=n(sxe,"STRONG",{});var Zft=s(jme);DPo=r(Zft,"roberta"),Zft.forEach(t),GPo=r(sxe," \u2014 "),rO=n(sxe,"A",{href:!0});var emt=s(rO);OPo=r(emt,"RobertaForSequenceClassification"),emt.forEach(t),VPo=r(sxe," (RoBERTa model)"),sxe.forEach(t),XPo=i(j),S7=n(j,"LI",{});var lxe=s(S7);Dme=n(lxe,"STRONG",{});var omt=s(Dme);zPo=r(omt,"roformer"),omt.forEach(t),WPo=r(lxe," \u2014 "),tO=n(lxe,"A",{href:!0});var rmt=s(tO);QPo=r(rmt,"RoFormerForSequenceClassification"),rmt.forEach(t),HPo=r(lxe," (RoFormer model)"),lxe.forEach(t),UPo=i(j),R7=n(j,"LI",{});var ixe=s(R7);Gme=n(ixe,"STRONG",{});var tmt=s(Gme);JPo=r(tmt,"squeezebert"),tmt.forEach(t),YPo=r(ixe," \u2014 "),aO=n(ixe,"A",{href:!0});var amt=s(aO);KPo=r(amt,"SqueezeBertForSequenceClassification"),amt.forEach(t),ZPo=r(ixe," (SqueezeBERT model)"),ixe.forEach(t),eBo=i(j),P7=n(j,"LI",{});var dxe=s(P7);Ome=n(dxe,"STRONG",{});var nmt=s(Ome);oBo=r(nmt,"tapas"),nmt.forEach(t),rBo=r(dxe," \u2014 "),nO=n(dxe,"A",{href:!0});var smt=s(nO);tBo=r(smt,"TapasForSequenceClassification"),smt.forEach(t),aBo=r(dxe," (TAPAS model)"),dxe.forEach(t),nBo=i(j),B7=n(j,"LI",{});var cxe=s(B7);Vme=n(cxe,"STRONG",{});var lmt=s(Vme);sBo=r(lmt,"transfo-xl"),lmt.forEach(t),lBo=r(cxe," \u2014 "),sO=n(cxe,"A",{href:!0});var imt=s(sO);iBo=r(imt,"TransfoXLForSequenceClassification"),imt.forEach(t),dBo=r(cxe," (Transformer-XL model)"),cxe.forEach(t),cBo=i(j),I7=n(j,"LI",{});var fxe=s(I7);Xme=n(fxe,"STRONG",{});var dmt=s(Xme);fBo=r(dmt,"xlm"),dmt.forEach(t),mBo=r(fxe," \u2014 "),lO=n(fxe,"A",{href:!0});var cmt=s(lO);gBo=r(cmt,"XLMForSequenceClassification"),cmt.forEach(t),hBo=r(fxe," (XLM model)"),fxe.forEach(t),pBo=i(j),N7=n(j,"LI",{});var mxe=s(N7);zme=n(mxe,"STRONG",{});var fmt=s(zme);_Bo=r(fmt,"xlm-roberta"),fmt.forEach(t),uBo=r(mxe," \u2014 "),iO=n(mxe,"A",{href:!0});var mmt=s(iO);bBo=r(mmt,"XLMRobertaForSequenceClassification"),mmt.forEach(t),vBo=r(mxe," (XLM-RoBERTa model)"),mxe.forEach(t),FBo=i(j),q7=n(j,"LI",{});var gxe=s(q7);Wme=n(gxe,"STRONG",{});var gmt=s(Wme);TBo=r(gmt,"xlm-roberta-xl"),gmt.forEach(t),MBo=r(gxe," \u2014 "),dO=n(gxe,"A",{href:!0});var hmt=s(dO);EBo=r(hmt,"XLMRobertaXLForSequenceClassification"),hmt.forEach(t),CBo=r(gxe," (XLM-RoBERTa-XL model)"),gxe.forEach(t),wBo=i(j),j7=n(j,"LI",{});var hxe=s(j7);Qme=n(hxe,"STRONG",{});var pmt=s(Qme);ABo=r(pmt,"xlnet"),pmt.forEach(t),yBo=r(hxe," \u2014 "),cO=n(hxe,"A",{href:!0});var _mt=s(cO);LBo=r(_mt,"XLNetForSequenceClassification"),_mt.forEach(t),xBo=r(hxe," (XLNet model)"),hxe.forEach(t),$Bo=i(j),D7=n(j,"LI",{});var pxe=s(D7);Hme=n(pxe,"STRONG",{});var umt=s(Hme);kBo=r(umt,"yoso"),umt.forEach(t),SBo=r(pxe," \u2014 "),fO=n(pxe,"A",{href:!0});var bmt=s(fO);RBo=r(bmt,"YosoForSequenceClassification"),bmt.forEach(t),PBo=r(pxe," (YOSO model)"),pxe.forEach(t),j.forEach(t),BBo=i(sa),G7=n(sa,"P",{});var _xe=s(G7);IBo=r(_xe,"The model is set in evaluation mode by default using "),Ume=n(_xe,"CODE",{});var vmt=s(Ume);NBo=r(vmt,"model.eval()"),vmt.forEach(t),qBo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=n(_xe,"CODE",{});var Fmt=s(Jme);jBo=r(Fmt,"model.train()"),Fmt.forEach(t),_xe.forEach(t),DBo=i(sa),T(O7.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Vqe=i(f),Vi=n(f,"H2",{class:!0});var QDe=s(Vi);V7=n(QDe,"A",{id:!0,class:!0,href:!0});var Tmt=s(V7);Yme=n(Tmt,"SPAN",{});var Mmt=s(Yme);T(Py.$$.fragment,Mmt),Mmt.forEach(t),Tmt.forEach(t),GBo=i(QDe),Kme=n(QDe,"SPAN",{});var Emt=s(Kme);OBo=r(Emt,"AutoModelForMultipleChoice"),Emt.forEach(t),QDe.forEach(t),Xqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(By.$$.fragment,Qs),VBo=i(Qs),Xi=n(Qs,"P",{});var NZ=s(Xi);XBo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mO=n(NZ,"A",{href:!0});var Cmt=s(mO);zBo=r(Cmt,"from_pretrained()"),Cmt.forEach(t),WBo=r(NZ," class method or the "),gO=n(NZ,"A",{href:!0});var wmt=s(gO);QBo=r(wmt,"from_config()"),wmt.forEach(t),HBo=r(NZ,` class
method.`),NZ.forEach(t),UBo=i(Qs),Iy=n(Qs,"P",{});var HDe=s(Iy);JBo=r(HDe,"This class cannot be instantiated directly using "),Zme=n(HDe,"CODE",{});var Amt=s(Zme);YBo=r(Amt,"__init__()"),Amt.forEach(t),KBo=r(HDe," (throws an error)."),HDe.forEach(t),ZBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var H0=s(dt);T(Ny.$$.fragment,H0),eIo=i(H0),ege=n(H0,"P",{});var ymt=s(ege);oIo=r(ymt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ymt.forEach(t),rIo=i(H0),zi=n(H0,"P",{});var qZ=s(zi);tIo=r(qZ,`Note:
Loading a model from its configuration file does `),oge=n(qZ,"STRONG",{});var Lmt=s(oge);aIo=r(Lmt,"not"),Lmt.forEach(t),nIo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(qZ,"A",{href:!0});var xmt=s(hO);sIo=r(xmt,"from_pretrained()"),xmt.forEach(t),lIo=r(qZ," to load the model weights."),qZ.forEach(t),iIo=i(H0),T(X7.$$.fragment,H0),H0.forEach(t),dIo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(qy.$$.fragment,la),cIo=i(la),rge=n(la,"P",{});var $mt=s(rge);fIo=r($mt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$mt.forEach(t),mIo=i(la),Pa=n(la,"P",{});var U0=s(Pa);gIo=r(U0,"The model class to instantiate is selected based on the "),tge=n(U0,"CODE",{});var kmt=s(tge);hIo=r(kmt,"model_type"),kmt.forEach(t),pIo=r(U0,` property of the config object (either
passed as an argument or loaded from `),age=n(U0,"CODE",{});var Smt=s(age);_Io=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),uIo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(U0,"CODE",{});var Rmt=s(nge);bIo=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),vIo=r(U0,":"),U0.forEach(t),FIo=i(la),K=n(la,"UL",{});var ee=s(K);z7=n(ee,"LI",{});var uxe=s(z7);sge=n(uxe,"STRONG",{});var Pmt=s(sge);TIo=r(Pmt,"albert"),Pmt.forEach(t),MIo=r(uxe," \u2014 "),pO=n(uxe,"A",{href:!0});var Bmt=s(pO);EIo=r(Bmt,"AlbertForMultipleChoice"),Bmt.forEach(t),CIo=r(uxe," (ALBERT model)"),uxe.forEach(t),wIo=i(ee),W7=n(ee,"LI",{});var bxe=s(W7);lge=n(bxe,"STRONG",{});var Imt=s(lge);AIo=r(Imt,"bert"),Imt.forEach(t),yIo=r(bxe," \u2014 "),_O=n(bxe,"A",{href:!0});var Nmt=s(_O);LIo=r(Nmt,"BertForMultipleChoice"),Nmt.forEach(t),xIo=r(bxe," (BERT model)"),bxe.forEach(t),$Io=i(ee),Q7=n(ee,"LI",{});var vxe=s(Q7);ige=n(vxe,"STRONG",{});var qmt=s(ige);kIo=r(qmt,"big_bird"),qmt.forEach(t),SIo=r(vxe," \u2014 "),uO=n(vxe,"A",{href:!0});var jmt=s(uO);RIo=r(jmt,"BigBirdForMultipleChoice"),jmt.forEach(t),PIo=r(vxe," (BigBird model)"),vxe.forEach(t),BIo=i(ee),H7=n(ee,"LI",{});var Fxe=s(H7);dge=n(Fxe,"STRONG",{});var Dmt=s(dge);IIo=r(Dmt,"camembert"),Dmt.forEach(t),NIo=r(Fxe," \u2014 "),bO=n(Fxe,"A",{href:!0});var Gmt=s(bO);qIo=r(Gmt,"CamembertForMultipleChoice"),Gmt.forEach(t),jIo=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),DIo=i(ee),U7=n(ee,"LI",{});var Txe=s(U7);cge=n(Txe,"STRONG",{});var Omt=s(cge);GIo=r(Omt,"canine"),Omt.forEach(t),OIo=r(Txe," \u2014 "),vO=n(Txe,"A",{href:!0});var Vmt=s(vO);VIo=r(Vmt,"CanineForMultipleChoice"),Vmt.forEach(t),XIo=r(Txe," (Canine model)"),Txe.forEach(t),zIo=i(ee),J7=n(ee,"LI",{});var Mxe=s(J7);fge=n(Mxe,"STRONG",{});var Xmt=s(fge);WIo=r(Xmt,"convbert"),Xmt.forEach(t),QIo=r(Mxe," \u2014 "),FO=n(Mxe,"A",{href:!0});var zmt=s(FO);HIo=r(zmt,"ConvBertForMultipleChoice"),zmt.forEach(t),UIo=r(Mxe," (ConvBERT model)"),Mxe.forEach(t),JIo=i(ee),Y7=n(ee,"LI",{});var Exe=s(Y7);mge=n(Exe,"STRONG",{});var Wmt=s(mge);YIo=r(Wmt,"data2vec-text"),Wmt.forEach(t),KIo=r(Exe," \u2014 "),TO=n(Exe,"A",{href:!0});var Qmt=s(TO);ZIo=r(Qmt,"Data2VecTextForMultipleChoice"),Qmt.forEach(t),eNo=r(Exe," (Data2VecText model)"),Exe.forEach(t),oNo=i(ee),K7=n(ee,"LI",{});var Cxe=s(K7);gge=n(Cxe,"STRONG",{});var Hmt=s(gge);rNo=r(Hmt,"deberta-v2"),Hmt.forEach(t),tNo=r(Cxe," \u2014 "),MO=n(Cxe,"A",{href:!0});var Umt=s(MO);aNo=r(Umt,"DebertaV2ForMultipleChoice"),Umt.forEach(t),nNo=r(Cxe," (DeBERTa-v2 model)"),Cxe.forEach(t),sNo=i(ee),Z7=n(ee,"LI",{});var wxe=s(Z7);hge=n(wxe,"STRONG",{});var Jmt=s(hge);lNo=r(Jmt,"distilbert"),Jmt.forEach(t),iNo=r(wxe," \u2014 "),EO=n(wxe,"A",{href:!0});var Ymt=s(EO);dNo=r(Ymt,"DistilBertForMultipleChoice"),Ymt.forEach(t),cNo=r(wxe," (DistilBERT model)"),wxe.forEach(t),fNo=i(ee),eb=n(ee,"LI",{});var Axe=s(eb);pge=n(Axe,"STRONG",{});var Kmt=s(pge);mNo=r(Kmt,"electra"),Kmt.forEach(t),gNo=r(Axe," \u2014 "),CO=n(Axe,"A",{href:!0});var Zmt=s(CO);hNo=r(Zmt,"ElectraForMultipleChoice"),Zmt.forEach(t),pNo=r(Axe," (ELECTRA model)"),Axe.forEach(t),_No=i(ee),ob=n(ee,"LI",{});var yxe=s(ob);_ge=n(yxe,"STRONG",{});var egt=s(_ge);uNo=r(egt,"flaubert"),egt.forEach(t),bNo=r(yxe," \u2014 "),wO=n(yxe,"A",{href:!0});var ogt=s(wO);vNo=r(ogt,"FlaubertForMultipleChoice"),ogt.forEach(t),FNo=r(yxe," (FlauBERT model)"),yxe.forEach(t),TNo=i(ee),rb=n(ee,"LI",{});var Lxe=s(rb);uge=n(Lxe,"STRONG",{});var rgt=s(uge);MNo=r(rgt,"fnet"),rgt.forEach(t),ENo=r(Lxe," \u2014 "),AO=n(Lxe,"A",{href:!0});var tgt=s(AO);CNo=r(tgt,"FNetForMultipleChoice"),tgt.forEach(t),wNo=r(Lxe," (FNet model)"),Lxe.forEach(t),ANo=i(ee),tb=n(ee,"LI",{});var xxe=s(tb);bge=n(xxe,"STRONG",{});var agt=s(bge);yNo=r(agt,"funnel"),agt.forEach(t),LNo=r(xxe," \u2014 "),yO=n(xxe,"A",{href:!0});var ngt=s(yO);xNo=r(ngt,"FunnelForMultipleChoice"),ngt.forEach(t),$No=r(xxe," (Funnel Transformer model)"),xxe.forEach(t),kNo=i(ee),ab=n(ee,"LI",{});var $xe=s(ab);vge=n($xe,"STRONG",{});var sgt=s(vge);SNo=r(sgt,"ibert"),sgt.forEach(t),RNo=r($xe," \u2014 "),LO=n($xe,"A",{href:!0});var lgt=s(LO);PNo=r(lgt,"IBertForMultipleChoice"),lgt.forEach(t),BNo=r($xe," (I-BERT model)"),$xe.forEach(t),INo=i(ee),nb=n(ee,"LI",{});var kxe=s(nb);Fge=n(kxe,"STRONG",{});var igt=s(Fge);NNo=r(igt,"longformer"),igt.forEach(t),qNo=r(kxe," \u2014 "),xO=n(kxe,"A",{href:!0});var dgt=s(xO);jNo=r(dgt,"LongformerForMultipleChoice"),dgt.forEach(t),DNo=r(kxe," (Longformer model)"),kxe.forEach(t),GNo=i(ee),sb=n(ee,"LI",{});var Sxe=s(sb);Tge=n(Sxe,"STRONG",{});var cgt=s(Tge);ONo=r(cgt,"megatron-bert"),cgt.forEach(t),VNo=r(Sxe," \u2014 "),$O=n(Sxe,"A",{href:!0});var fgt=s($O);XNo=r(fgt,"MegatronBertForMultipleChoice"),fgt.forEach(t),zNo=r(Sxe," (MegatronBert model)"),Sxe.forEach(t),WNo=i(ee),lb=n(ee,"LI",{});var Rxe=s(lb);Mge=n(Rxe,"STRONG",{});var mgt=s(Mge);QNo=r(mgt,"mobilebert"),mgt.forEach(t),HNo=r(Rxe," \u2014 "),kO=n(Rxe,"A",{href:!0});var ggt=s(kO);UNo=r(ggt,"MobileBertForMultipleChoice"),ggt.forEach(t),JNo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),YNo=i(ee),ib=n(ee,"LI",{});var Pxe=s(ib);Ege=n(Pxe,"STRONG",{});var hgt=s(Ege);KNo=r(hgt,"mpnet"),hgt.forEach(t),ZNo=r(Pxe," \u2014 "),SO=n(Pxe,"A",{href:!0});var pgt=s(SO);eqo=r(pgt,"MPNetForMultipleChoice"),pgt.forEach(t),oqo=r(Pxe," (MPNet model)"),Pxe.forEach(t),rqo=i(ee),db=n(ee,"LI",{});var Bxe=s(db);Cge=n(Bxe,"STRONG",{});var _gt=s(Cge);tqo=r(_gt,"nystromformer"),_gt.forEach(t),aqo=r(Bxe," \u2014 "),RO=n(Bxe,"A",{href:!0});var ugt=s(RO);nqo=r(ugt,"NystromformerForMultipleChoice"),ugt.forEach(t),sqo=r(Bxe," (Nystromformer model)"),Bxe.forEach(t),lqo=i(ee),cb=n(ee,"LI",{});var Ixe=s(cb);wge=n(Ixe,"STRONG",{});var bgt=s(wge);iqo=r(bgt,"qdqbert"),bgt.forEach(t),dqo=r(Ixe," \u2014 "),PO=n(Ixe,"A",{href:!0});var vgt=s(PO);cqo=r(vgt,"QDQBertForMultipleChoice"),vgt.forEach(t),fqo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),mqo=i(ee),fb=n(ee,"LI",{});var Nxe=s(fb);Age=n(Nxe,"STRONG",{});var Fgt=s(Age);gqo=r(Fgt,"rembert"),Fgt.forEach(t),hqo=r(Nxe," \u2014 "),BO=n(Nxe,"A",{href:!0});var Tgt=s(BO);pqo=r(Tgt,"RemBertForMultipleChoice"),Tgt.forEach(t),_qo=r(Nxe," (RemBERT model)"),Nxe.forEach(t),uqo=i(ee),mb=n(ee,"LI",{});var qxe=s(mb);yge=n(qxe,"STRONG",{});var Mgt=s(yge);bqo=r(Mgt,"roberta"),Mgt.forEach(t),vqo=r(qxe," \u2014 "),IO=n(qxe,"A",{href:!0});var Egt=s(IO);Fqo=r(Egt,"RobertaForMultipleChoice"),Egt.forEach(t),Tqo=r(qxe," (RoBERTa model)"),qxe.forEach(t),Mqo=i(ee),gb=n(ee,"LI",{});var jxe=s(gb);Lge=n(jxe,"STRONG",{});var Cgt=s(Lge);Eqo=r(Cgt,"roformer"),Cgt.forEach(t),Cqo=r(jxe," \u2014 "),NO=n(jxe,"A",{href:!0});var wgt=s(NO);wqo=r(wgt,"RoFormerForMultipleChoice"),wgt.forEach(t),Aqo=r(jxe," (RoFormer model)"),jxe.forEach(t),yqo=i(ee),hb=n(ee,"LI",{});var Dxe=s(hb);xge=n(Dxe,"STRONG",{});var Agt=s(xge);Lqo=r(Agt,"squeezebert"),Agt.forEach(t),xqo=r(Dxe," \u2014 "),qO=n(Dxe,"A",{href:!0});var ygt=s(qO);$qo=r(ygt,"SqueezeBertForMultipleChoice"),ygt.forEach(t),kqo=r(Dxe," (SqueezeBERT model)"),Dxe.forEach(t),Sqo=i(ee),pb=n(ee,"LI",{});var Gxe=s(pb);$ge=n(Gxe,"STRONG",{});var Lgt=s($ge);Rqo=r(Lgt,"xlm"),Lgt.forEach(t),Pqo=r(Gxe," \u2014 "),jO=n(Gxe,"A",{href:!0});var xgt=s(jO);Bqo=r(xgt,"XLMForMultipleChoice"),xgt.forEach(t),Iqo=r(Gxe," (XLM model)"),Gxe.forEach(t),Nqo=i(ee),_b=n(ee,"LI",{});var Oxe=s(_b);kge=n(Oxe,"STRONG",{});var $gt=s(kge);qqo=r($gt,"xlm-roberta"),$gt.forEach(t),jqo=r(Oxe," \u2014 "),DO=n(Oxe,"A",{href:!0});var kgt=s(DO);Dqo=r(kgt,"XLMRobertaForMultipleChoice"),kgt.forEach(t),Gqo=r(Oxe," (XLM-RoBERTa model)"),Oxe.forEach(t),Oqo=i(ee),ub=n(ee,"LI",{});var Vxe=s(ub);Sge=n(Vxe,"STRONG",{});var Sgt=s(Sge);Vqo=r(Sgt,"xlm-roberta-xl"),Sgt.forEach(t),Xqo=r(Vxe," \u2014 "),GO=n(Vxe,"A",{href:!0});var Rgt=s(GO);zqo=r(Rgt,"XLMRobertaXLForMultipleChoice"),Rgt.forEach(t),Wqo=r(Vxe," (XLM-RoBERTa-XL model)"),Vxe.forEach(t),Qqo=i(ee),bb=n(ee,"LI",{});var Xxe=s(bb);Rge=n(Xxe,"STRONG",{});var Pgt=s(Rge);Hqo=r(Pgt,"xlnet"),Pgt.forEach(t),Uqo=r(Xxe," \u2014 "),OO=n(Xxe,"A",{href:!0});var Bgt=s(OO);Jqo=r(Bgt,"XLNetForMultipleChoice"),Bgt.forEach(t),Yqo=r(Xxe," (XLNet model)"),Xxe.forEach(t),Kqo=i(ee),vb=n(ee,"LI",{});var zxe=s(vb);Pge=n(zxe,"STRONG",{});var Igt=s(Pge);Zqo=r(Igt,"yoso"),Igt.forEach(t),ejo=r(zxe," \u2014 "),VO=n(zxe,"A",{href:!0});var Ngt=s(VO);ojo=r(Ngt,"YosoForMultipleChoice"),Ngt.forEach(t),rjo=r(zxe," (YOSO model)"),zxe.forEach(t),ee.forEach(t),tjo=i(la),Fb=n(la,"P",{});var Wxe=s(Fb);ajo=r(Wxe,"The model is set in evaluation mode by default using "),Bge=n(Wxe,"CODE",{});var qgt=s(Bge);njo=r(qgt,"model.eval()"),qgt.forEach(t),sjo=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(Wxe,"CODE",{});var jgt=s(Ige);ljo=r(jgt,"model.train()"),jgt.forEach(t),Wxe.forEach(t),ijo=i(la),T(Tb.$$.fragment,la),la.forEach(t),Qs.forEach(t),zqe=i(f),Wi=n(f,"H2",{class:!0});var UDe=s(Wi);Mb=n(UDe,"A",{id:!0,class:!0,href:!0});var Dgt=s(Mb);Nge=n(Dgt,"SPAN",{});var Ggt=s(Nge);T(jy.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),djo=i(UDe),qge=n(UDe,"SPAN",{});var Ogt=s(qge);cjo=r(Ogt,"AutoModelForNextSentencePrediction"),Ogt.forEach(t),UDe.forEach(t),Wqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Dy.$$.fragment,Hs),fjo=i(Hs),Qi=n(Hs,"P",{});var jZ=s(Qi);mjo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XO=n(jZ,"A",{href:!0});var Vgt=s(XO);gjo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),hjo=r(jZ," class method or the "),zO=n(jZ,"A",{href:!0});var Xgt=s(zO);pjo=r(Xgt,"from_config()"),Xgt.forEach(t),_jo=r(jZ,` class
method.`),jZ.forEach(t),ujo=i(Hs),Gy=n(Hs,"P",{});var JDe=s(Gy);bjo=r(JDe,"This class cannot be instantiated directly using "),jge=n(JDe,"CODE",{});var zgt=s(jge);vjo=r(zgt,"__init__()"),zgt.forEach(t),Fjo=r(JDe," (throws an error)."),JDe.forEach(t),Tjo=i(Hs),ct=n(Hs,"DIV",{class:!0});var J0=s(ct);T(Oy.$$.fragment,J0),Mjo=i(J0),Dge=n(J0,"P",{});var Wgt=s(Dge);Ejo=r(Wgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wgt.forEach(t),Cjo=i(J0),Hi=n(J0,"P",{});var DZ=s(Hi);wjo=r(DZ,`Note:
Loading a model from its configuration file does `),Gge=n(DZ,"STRONG",{});var Qgt=s(Gge);Ajo=r(Qgt,"not"),Qgt.forEach(t),yjo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(DZ,"A",{href:!0});var Hgt=s(WO);Ljo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),xjo=r(DZ," to load the model weights."),DZ.forEach(t),$jo=i(J0),T(Eb.$$.fragment,J0),J0.forEach(t),kjo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Vy.$$.fragment,ia),Sjo=i(ia),Oge=n(ia,"P",{});var Ugt=s(Oge);Rjo=r(Ugt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ugt.forEach(t),Pjo=i(ia),Ba=n(ia,"P",{});var Y0=s(Ba);Bjo=r(Y0,"The model class to instantiate is selected based on the "),Vge=n(Y0,"CODE",{});var Jgt=s(Vge);Ijo=r(Jgt,"model_type"),Jgt.forEach(t),Njo=r(Y0,` property of the config object (either
passed as an argument or loaded from `),Xge=n(Y0,"CODE",{});var Ygt=s(Xge);qjo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),jjo=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(Y0,"CODE",{});var Kgt=s(zge);Djo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),Gjo=r(Y0,":"),Y0.forEach(t),Ojo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);Cb=n(Us,"LI",{});var Qxe=s(Cb);Wge=n(Qxe,"STRONG",{});var Zgt=s(Wge);Vjo=r(Zgt,"bert"),Zgt.forEach(t),Xjo=r(Qxe," \u2014 "),QO=n(Qxe,"A",{href:!0});var eht=s(QO);zjo=r(eht,"BertForNextSentencePrediction"),eht.forEach(t),Wjo=r(Qxe," (BERT model)"),Qxe.forEach(t),Qjo=i(Us),wb=n(Us,"LI",{});var Hxe=s(wb);Qge=n(Hxe,"STRONG",{});var oht=s(Qge);Hjo=r(oht,"fnet"),oht.forEach(t),Ujo=r(Hxe," \u2014 "),HO=n(Hxe,"A",{href:!0});var rht=s(HO);Jjo=r(rht,"FNetForNextSentencePrediction"),rht.forEach(t),Yjo=r(Hxe," (FNet model)"),Hxe.forEach(t),Kjo=i(Us),Ab=n(Us,"LI",{});var Uxe=s(Ab);Hge=n(Uxe,"STRONG",{});var tht=s(Hge);Zjo=r(tht,"megatron-bert"),tht.forEach(t),eDo=r(Uxe," \u2014 "),UO=n(Uxe,"A",{href:!0});var aht=s(UO);oDo=r(aht,"MegatronBertForNextSentencePrediction"),aht.forEach(t),rDo=r(Uxe," (MegatronBert model)"),Uxe.forEach(t),tDo=i(Us),yb=n(Us,"LI",{});var Jxe=s(yb);Uge=n(Jxe,"STRONG",{});var nht=s(Uge);aDo=r(nht,"mobilebert"),nht.forEach(t),nDo=r(Jxe," \u2014 "),JO=n(Jxe,"A",{href:!0});var sht=s(JO);sDo=r(sht,"MobileBertForNextSentencePrediction"),sht.forEach(t),lDo=r(Jxe," (MobileBERT model)"),Jxe.forEach(t),iDo=i(Us),Lb=n(Us,"LI",{});var Yxe=s(Lb);Jge=n(Yxe,"STRONG",{});var lht=s(Jge);dDo=r(lht,"qdqbert"),lht.forEach(t),cDo=r(Yxe," \u2014 "),YO=n(Yxe,"A",{href:!0});var iht=s(YO);fDo=r(iht,"QDQBertForNextSentencePrediction"),iht.forEach(t),mDo=r(Yxe," (QDQBert model)"),Yxe.forEach(t),Us.forEach(t),gDo=i(ia),xb=n(ia,"P",{});var Kxe=s(xb);hDo=r(Kxe,"The model is set in evaluation mode by default using "),Yge=n(Kxe,"CODE",{});var dht=s(Yge);pDo=r(dht,"model.eval()"),dht.forEach(t),_Do=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(Kxe,"CODE",{});var cht=s(Kge);uDo=r(cht,"model.train()"),cht.forEach(t),Kxe.forEach(t),bDo=i(ia),T($b.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Qqe=i(f),Ui=n(f,"H2",{class:!0});var YDe=s(Ui);kb=n(YDe,"A",{id:!0,class:!0,href:!0});var fht=s(kb);Zge=n(fht,"SPAN",{});var mht=s(Zge);T(Xy.$$.fragment,mht),mht.forEach(t),fht.forEach(t),vDo=i(YDe),ehe=n(YDe,"SPAN",{});var ght=s(ehe);FDo=r(ght,"AutoModelForTokenClassification"),ght.forEach(t),YDe.forEach(t),Hqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(zy.$$.fragment,Js),TDo=i(Js),Ji=n(Js,"P",{});var GZ=s(Ji);MDo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KO=n(GZ,"A",{href:!0});var hht=s(KO);EDo=r(hht,"from_pretrained()"),hht.forEach(t),CDo=r(GZ," class method or the "),ZO=n(GZ,"A",{href:!0});var pht=s(ZO);wDo=r(pht,"from_config()"),pht.forEach(t),ADo=r(GZ,` class
method.`),GZ.forEach(t),yDo=i(Js),Wy=n(Js,"P",{});var KDe=s(Wy);LDo=r(KDe,"This class cannot be instantiated directly using "),ohe=n(KDe,"CODE",{});var _ht=s(ohe);xDo=r(_ht,"__init__()"),_ht.forEach(t),$Do=r(KDe," (throws an error)."),KDe.forEach(t),kDo=i(Js),ft=n(Js,"DIV",{class:!0});var K0=s(ft);T(Qy.$$.fragment,K0),SDo=i(K0),rhe=n(K0,"P",{});var uht=s(rhe);RDo=r(uht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uht.forEach(t),PDo=i(K0),Yi=n(K0,"P",{});var OZ=s(Yi);BDo=r(OZ,`Note:
Loading a model from its configuration file does `),the=n(OZ,"STRONG",{});var bht=s(the);IDo=r(bht,"not"),bht.forEach(t),NDo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(OZ,"A",{href:!0});var vht=s(eV);qDo=r(vht,"from_pretrained()"),vht.forEach(t),jDo=r(OZ," to load the model weights."),OZ.forEach(t),DDo=i(K0),T(Sb.$$.fragment,K0),K0.forEach(t),GDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Hy.$$.fragment,da),ODo=i(da),ahe=n(da,"P",{});var Fht=s(ahe);VDo=r(Fht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fht.forEach(t),XDo=i(da),Ia=n(da,"P",{});var Z0=s(Ia);zDo=r(Z0,"The model class to instantiate is selected based on the "),nhe=n(Z0,"CODE",{});var Tht=s(nhe);WDo=r(Tht,"model_type"),Tht.forEach(t),QDo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),she=n(Z0,"CODE",{});var Mht=s(she);HDo=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),UDo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(Z0,"CODE",{});var Eht=s(lhe);JDo=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),YDo=r(Z0,":"),Z0.forEach(t),KDo=i(da),H=n(da,"UL",{});var J=s(H);Rb=n(J,"LI",{});var Zxe=s(Rb);ihe=n(Zxe,"STRONG",{});var Cht=s(ihe);ZDo=r(Cht,"albert"),Cht.forEach(t),eGo=r(Zxe," \u2014 "),oV=n(Zxe,"A",{href:!0});var wht=s(oV);oGo=r(wht,"AlbertForTokenClassification"),wht.forEach(t),rGo=r(Zxe," (ALBERT model)"),Zxe.forEach(t),tGo=i(J),Pb=n(J,"LI",{});var e$e=s(Pb);dhe=n(e$e,"STRONG",{});var Aht=s(dhe);aGo=r(Aht,"bert"),Aht.forEach(t),nGo=r(e$e," \u2014 "),rV=n(e$e,"A",{href:!0});var yht=s(rV);sGo=r(yht,"BertForTokenClassification"),yht.forEach(t),lGo=r(e$e," (BERT model)"),e$e.forEach(t),iGo=i(J),Bb=n(J,"LI",{});var o$e=s(Bb);che=n(o$e,"STRONG",{});var Lht=s(che);dGo=r(Lht,"big_bird"),Lht.forEach(t),cGo=r(o$e," \u2014 "),tV=n(o$e,"A",{href:!0});var xht=s(tV);fGo=r(xht,"BigBirdForTokenClassification"),xht.forEach(t),mGo=r(o$e," (BigBird model)"),o$e.forEach(t),gGo=i(J),Ib=n(J,"LI",{});var r$e=s(Ib);fhe=n(r$e,"STRONG",{});var $ht=s(fhe);hGo=r($ht,"camembert"),$ht.forEach(t),pGo=r(r$e," \u2014 "),aV=n(r$e,"A",{href:!0});var kht=s(aV);_Go=r(kht,"CamembertForTokenClassification"),kht.forEach(t),uGo=r(r$e," (CamemBERT model)"),r$e.forEach(t),bGo=i(J),Nb=n(J,"LI",{});var t$e=s(Nb);mhe=n(t$e,"STRONG",{});var Sht=s(mhe);vGo=r(Sht,"canine"),Sht.forEach(t),FGo=r(t$e," \u2014 "),nV=n(t$e,"A",{href:!0});var Rht=s(nV);TGo=r(Rht,"CanineForTokenClassification"),Rht.forEach(t),MGo=r(t$e," (Canine model)"),t$e.forEach(t),EGo=i(J),qb=n(J,"LI",{});var a$e=s(qb);ghe=n(a$e,"STRONG",{});var Pht=s(ghe);CGo=r(Pht,"convbert"),Pht.forEach(t),wGo=r(a$e," \u2014 "),sV=n(a$e,"A",{href:!0});var Bht=s(sV);AGo=r(Bht,"ConvBertForTokenClassification"),Bht.forEach(t),yGo=r(a$e," (ConvBERT model)"),a$e.forEach(t),LGo=i(J),jb=n(J,"LI",{});var n$e=s(jb);hhe=n(n$e,"STRONG",{});var Iht=s(hhe);xGo=r(Iht,"data2vec-text"),Iht.forEach(t),$Go=r(n$e," \u2014 "),lV=n(n$e,"A",{href:!0});var Nht=s(lV);kGo=r(Nht,"Data2VecTextForTokenClassification"),Nht.forEach(t),SGo=r(n$e," (Data2VecText model)"),n$e.forEach(t),RGo=i(J),Db=n(J,"LI",{});var s$e=s(Db);phe=n(s$e,"STRONG",{});var qht=s(phe);PGo=r(qht,"deberta"),qht.forEach(t),BGo=r(s$e," \u2014 "),iV=n(s$e,"A",{href:!0});var jht=s(iV);IGo=r(jht,"DebertaForTokenClassification"),jht.forEach(t),NGo=r(s$e," (DeBERTa model)"),s$e.forEach(t),qGo=i(J),Gb=n(J,"LI",{});var l$e=s(Gb);_he=n(l$e,"STRONG",{});var Dht=s(_he);jGo=r(Dht,"deberta-v2"),Dht.forEach(t),DGo=r(l$e," \u2014 "),dV=n(l$e,"A",{href:!0});var Ght=s(dV);GGo=r(Ght,"DebertaV2ForTokenClassification"),Ght.forEach(t),OGo=r(l$e," (DeBERTa-v2 model)"),l$e.forEach(t),VGo=i(J),Ob=n(J,"LI",{});var i$e=s(Ob);uhe=n(i$e,"STRONG",{});var Oht=s(uhe);XGo=r(Oht,"distilbert"),Oht.forEach(t),zGo=r(i$e," \u2014 "),cV=n(i$e,"A",{href:!0});var Vht=s(cV);WGo=r(Vht,"DistilBertForTokenClassification"),Vht.forEach(t),QGo=r(i$e," (DistilBERT model)"),i$e.forEach(t),HGo=i(J),Vb=n(J,"LI",{});var d$e=s(Vb);bhe=n(d$e,"STRONG",{});var Xht=s(bhe);UGo=r(Xht,"electra"),Xht.forEach(t),JGo=r(d$e," \u2014 "),fV=n(d$e,"A",{href:!0});var zht=s(fV);YGo=r(zht,"ElectraForTokenClassification"),zht.forEach(t),KGo=r(d$e," (ELECTRA model)"),d$e.forEach(t),ZGo=i(J),Xb=n(J,"LI",{});var c$e=s(Xb);vhe=n(c$e,"STRONG",{});var Wht=s(vhe);eOo=r(Wht,"flaubert"),Wht.forEach(t),oOo=r(c$e," \u2014 "),mV=n(c$e,"A",{href:!0});var Qht=s(mV);rOo=r(Qht,"FlaubertForTokenClassification"),Qht.forEach(t),tOo=r(c$e," (FlauBERT model)"),c$e.forEach(t),aOo=i(J),zb=n(J,"LI",{});var f$e=s(zb);Fhe=n(f$e,"STRONG",{});var Hht=s(Fhe);nOo=r(Hht,"fnet"),Hht.forEach(t),sOo=r(f$e," \u2014 "),gV=n(f$e,"A",{href:!0});var Uht=s(gV);lOo=r(Uht,"FNetForTokenClassification"),Uht.forEach(t),iOo=r(f$e," (FNet model)"),f$e.forEach(t),dOo=i(J),Wb=n(J,"LI",{});var m$e=s(Wb);The=n(m$e,"STRONG",{});var Jht=s(The);cOo=r(Jht,"funnel"),Jht.forEach(t),fOo=r(m$e," \u2014 "),hV=n(m$e,"A",{href:!0});var Yht=s(hV);mOo=r(Yht,"FunnelForTokenClassification"),Yht.forEach(t),gOo=r(m$e," (Funnel Transformer model)"),m$e.forEach(t),hOo=i(J),Qb=n(J,"LI",{});var g$e=s(Qb);Mhe=n(g$e,"STRONG",{});var Kht=s(Mhe);pOo=r(Kht,"gpt2"),Kht.forEach(t),_Oo=r(g$e," \u2014 "),pV=n(g$e,"A",{href:!0});var Zht=s(pV);uOo=r(Zht,"GPT2ForTokenClassification"),Zht.forEach(t),bOo=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),vOo=i(J),Hb=n(J,"LI",{});var h$e=s(Hb);Ehe=n(h$e,"STRONG",{});var ept=s(Ehe);FOo=r(ept,"ibert"),ept.forEach(t),TOo=r(h$e," \u2014 "),_V=n(h$e,"A",{href:!0});var opt=s(_V);MOo=r(opt,"IBertForTokenClassification"),opt.forEach(t),EOo=r(h$e," (I-BERT model)"),h$e.forEach(t),COo=i(J),Ub=n(J,"LI",{});var p$e=s(Ub);Che=n(p$e,"STRONG",{});var rpt=s(Che);wOo=r(rpt,"layoutlm"),rpt.forEach(t),AOo=r(p$e," \u2014 "),uV=n(p$e,"A",{href:!0});var tpt=s(uV);yOo=r(tpt,"LayoutLMForTokenClassification"),tpt.forEach(t),LOo=r(p$e," (LayoutLM model)"),p$e.forEach(t),xOo=i(J),Jb=n(J,"LI",{});var _$e=s(Jb);whe=n(_$e,"STRONG",{});var apt=s(whe);$Oo=r(apt,"layoutlmv2"),apt.forEach(t),kOo=r(_$e," \u2014 "),bV=n(_$e,"A",{href:!0});var npt=s(bV);SOo=r(npt,"LayoutLMv2ForTokenClassification"),npt.forEach(t),ROo=r(_$e," (LayoutLMv2 model)"),_$e.forEach(t),POo=i(J),Yb=n(J,"LI",{});var u$e=s(Yb);Ahe=n(u$e,"STRONG",{});var spt=s(Ahe);BOo=r(spt,"layoutlmv3"),spt.forEach(t),IOo=r(u$e," \u2014 "),vV=n(u$e,"A",{href:!0});var lpt=s(vV);NOo=r(lpt,"LayoutLMv3ForTokenClassification"),lpt.forEach(t),qOo=r(u$e," (LayoutLMv3 model)"),u$e.forEach(t),jOo=i(J),Kb=n(J,"LI",{});var b$e=s(Kb);yhe=n(b$e,"STRONG",{});var ipt=s(yhe);DOo=r(ipt,"longformer"),ipt.forEach(t),GOo=r(b$e," \u2014 "),FV=n(b$e,"A",{href:!0});var dpt=s(FV);OOo=r(dpt,"LongformerForTokenClassification"),dpt.forEach(t),VOo=r(b$e," (Longformer model)"),b$e.forEach(t),XOo=i(J),Zb=n(J,"LI",{});var v$e=s(Zb);Lhe=n(v$e,"STRONG",{});var cpt=s(Lhe);zOo=r(cpt,"megatron-bert"),cpt.forEach(t),WOo=r(v$e," \u2014 "),TV=n(v$e,"A",{href:!0});var fpt=s(TV);QOo=r(fpt,"MegatronBertForTokenClassification"),fpt.forEach(t),HOo=r(v$e," (MegatronBert model)"),v$e.forEach(t),UOo=i(J),e2=n(J,"LI",{});var F$e=s(e2);xhe=n(F$e,"STRONG",{});var mpt=s(xhe);JOo=r(mpt,"mobilebert"),mpt.forEach(t),YOo=r(F$e," \u2014 "),MV=n(F$e,"A",{href:!0});var gpt=s(MV);KOo=r(gpt,"MobileBertForTokenClassification"),gpt.forEach(t),ZOo=r(F$e," (MobileBERT model)"),F$e.forEach(t),eVo=i(J),o2=n(J,"LI",{});var T$e=s(o2);$he=n(T$e,"STRONG",{});var hpt=s($he);oVo=r(hpt,"mpnet"),hpt.forEach(t),rVo=r(T$e," \u2014 "),EV=n(T$e,"A",{href:!0});var ppt=s(EV);tVo=r(ppt,"MPNetForTokenClassification"),ppt.forEach(t),aVo=r(T$e," (MPNet model)"),T$e.forEach(t),nVo=i(J),r2=n(J,"LI",{});var M$e=s(r2);khe=n(M$e,"STRONG",{});var _pt=s(khe);sVo=r(_pt,"nystromformer"),_pt.forEach(t),lVo=r(M$e," \u2014 "),CV=n(M$e,"A",{href:!0});var upt=s(CV);iVo=r(upt,"NystromformerForTokenClassification"),upt.forEach(t),dVo=r(M$e," (Nystromformer model)"),M$e.forEach(t),cVo=i(J),t2=n(J,"LI",{});var E$e=s(t2);She=n(E$e,"STRONG",{});var bpt=s(She);fVo=r(bpt,"qdqbert"),bpt.forEach(t),mVo=r(E$e," \u2014 "),wV=n(E$e,"A",{href:!0});var vpt=s(wV);gVo=r(vpt,"QDQBertForTokenClassification"),vpt.forEach(t),hVo=r(E$e," (QDQBert model)"),E$e.forEach(t),pVo=i(J),a2=n(J,"LI",{});var C$e=s(a2);Rhe=n(C$e,"STRONG",{});var Fpt=s(Rhe);_Vo=r(Fpt,"rembert"),Fpt.forEach(t),uVo=r(C$e," \u2014 "),AV=n(C$e,"A",{href:!0});var Tpt=s(AV);bVo=r(Tpt,"RemBertForTokenClassification"),Tpt.forEach(t),vVo=r(C$e," (RemBERT model)"),C$e.forEach(t),FVo=i(J),n2=n(J,"LI",{});var w$e=s(n2);Phe=n(w$e,"STRONG",{});var Mpt=s(Phe);TVo=r(Mpt,"roberta"),Mpt.forEach(t),MVo=r(w$e," \u2014 "),yV=n(w$e,"A",{href:!0});var Ept=s(yV);EVo=r(Ept,"RobertaForTokenClassification"),Ept.forEach(t),CVo=r(w$e," (RoBERTa model)"),w$e.forEach(t),wVo=i(J),s2=n(J,"LI",{});var A$e=s(s2);Bhe=n(A$e,"STRONG",{});var Cpt=s(Bhe);AVo=r(Cpt,"roformer"),Cpt.forEach(t),yVo=r(A$e," \u2014 "),LV=n(A$e,"A",{href:!0});var wpt=s(LV);LVo=r(wpt,"RoFormerForTokenClassification"),wpt.forEach(t),xVo=r(A$e," (RoFormer model)"),A$e.forEach(t),$Vo=i(J),l2=n(J,"LI",{});var y$e=s(l2);Ihe=n(y$e,"STRONG",{});var Apt=s(Ihe);kVo=r(Apt,"squeezebert"),Apt.forEach(t),SVo=r(y$e," \u2014 "),xV=n(y$e,"A",{href:!0});var ypt=s(xV);RVo=r(ypt,"SqueezeBertForTokenClassification"),ypt.forEach(t),PVo=r(y$e," (SqueezeBERT model)"),y$e.forEach(t),BVo=i(J),i2=n(J,"LI",{});var L$e=s(i2);Nhe=n(L$e,"STRONG",{});var Lpt=s(Nhe);IVo=r(Lpt,"xlm"),Lpt.forEach(t),NVo=r(L$e," \u2014 "),$V=n(L$e,"A",{href:!0});var xpt=s($V);qVo=r(xpt,"XLMForTokenClassification"),xpt.forEach(t),jVo=r(L$e," (XLM model)"),L$e.forEach(t),DVo=i(J),d2=n(J,"LI",{});var x$e=s(d2);qhe=n(x$e,"STRONG",{});var $pt=s(qhe);GVo=r($pt,"xlm-roberta"),$pt.forEach(t),OVo=r(x$e," \u2014 "),kV=n(x$e,"A",{href:!0});var kpt=s(kV);VVo=r(kpt,"XLMRobertaForTokenClassification"),kpt.forEach(t),XVo=r(x$e," (XLM-RoBERTa model)"),x$e.forEach(t),zVo=i(J),c2=n(J,"LI",{});var $$e=s(c2);jhe=n($$e,"STRONG",{});var Spt=s(jhe);WVo=r(Spt,"xlm-roberta-xl"),Spt.forEach(t),QVo=r($$e," \u2014 "),SV=n($$e,"A",{href:!0});var Rpt=s(SV);HVo=r(Rpt,"XLMRobertaXLForTokenClassification"),Rpt.forEach(t),UVo=r($$e," (XLM-RoBERTa-XL model)"),$$e.forEach(t),JVo=i(J),f2=n(J,"LI",{});var k$e=s(f2);Dhe=n(k$e,"STRONG",{});var Ppt=s(Dhe);YVo=r(Ppt,"xlnet"),Ppt.forEach(t),KVo=r(k$e," \u2014 "),RV=n(k$e,"A",{href:!0});var Bpt=s(RV);ZVo=r(Bpt,"XLNetForTokenClassification"),Bpt.forEach(t),eXo=r(k$e," (XLNet model)"),k$e.forEach(t),oXo=i(J),m2=n(J,"LI",{});var S$e=s(m2);Ghe=n(S$e,"STRONG",{});var Ipt=s(Ghe);rXo=r(Ipt,"yoso"),Ipt.forEach(t),tXo=r(S$e," \u2014 "),PV=n(S$e,"A",{href:!0});var Npt=s(PV);aXo=r(Npt,"YosoForTokenClassification"),Npt.forEach(t),nXo=r(S$e," (YOSO model)"),S$e.forEach(t),J.forEach(t),sXo=i(da),g2=n(da,"P",{});var R$e=s(g2);lXo=r(R$e,"The model is set in evaluation mode by default using "),Ohe=n(R$e,"CODE",{});var qpt=s(Ohe);iXo=r(qpt,"model.eval()"),qpt.forEach(t),dXo=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=n(R$e,"CODE",{});var jpt=s(Vhe);cXo=r(jpt,"model.train()"),jpt.forEach(t),R$e.forEach(t),fXo=i(da),T(h2.$$.fragment,da),da.forEach(t),Js.forEach(t),Uqe=i(f),Ki=n(f,"H2",{class:!0});var ZDe=s(Ki);p2=n(ZDe,"A",{id:!0,class:!0,href:!0});var Dpt=s(p2);Xhe=n(Dpt,"SPAN",{});var Gpt=s(Xhe);T(Uy.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),mXo=i(ZDe),zhe=n(ZDe,"SPAN",{});var Opt=s(zhe);gXo=r(Opt,"AutoModelForQuestionAnswering"),Opt.forEach(t),ZDe.forEach(t),Jqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Jy.$$.fragment,Ys),hXo=i(Ys),Zi=n(Ys,"P",{});var VZ=s(Zi);pXo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BV=n(VZ,"A",{href:!0});var Vpt=s(BV);_Xo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),uXo=r(VZ," class method or the "),IV=n(VZ,"A",{href:!0});var Xpt=s(IV);bXo=r(Xpt,"from_config()"),Xpt.forEach(t),vXo=r(VZ,` class
method.`),VZ.forEach(t),FXo=i(Ys),Yy=n(Ys,"P",{});var eGe=s(Yy);TXo=r(eGe,"This class cannot be instantiated directly using "),Whe=n(eGe,"CODE",{});var zpt=s(Whe);MXo=r(zpt,"__init__()"),zpt.forEach(t),EXo=r(eGe," (throws an error)."),eGe.forEach(t),CXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var e6=s(mt);T(Ky.$$.fragment,e6),wXo=i(e6),Qhe=n(e6,"P",{});var Wpt=s(Qhe);AXo=r(Wpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wpt.forEach(t),yXo=i(e6),ed=n(e6,"P",{});var XZ=s(ed);LXo=r(XZ,`Note:
Loading a model from its configuration file does `),Hhe=n(XZ,"STRONG",{});var Qpt=s(Hhe);xXo=r(Qpt,"not"),Qpt.forEach(t),$Xo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(XZ,"A",{href:!0});var Hpt=s(NV);kXo=r(Hpt,"from_pretrained()"),Hpt.forEach(t),SXo=r(XZ," to load the model weights."),XZ.forEach(t),RXo=i(e6),T(_2.$$.fragment,e6),e6.forEach(t),PXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Zy.$$.fragment,ca),BXo=i(ca),Uhe=n(ca,"P",{});var Upt=s(Uhe);IXo=r(Upt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Upt.forEach(t),NXo=i(ca),Na=n(ca,"P",{});var o6=s(Na);qXo=r(o6,"The model class to instantiate is selected based on the "),Jhe=n(o6,"CODE",{});var Jpt=s(Jhe);jXo=r(Jpt,"model_type"),Jpt.forEach(t),DXo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(o6,"CODE",{});var Ypt=s(Yhe);GXo=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),OXo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(o6,"CODE",{});var Kpt=s(Khe);VXo=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),XXo=r(o6,":"),o6.forEach(t),zXo=i(ca),V=n(ca,"UL",{});var X=s(V);u2=n(X,"LI",{});var P$e=s(u2);Zhe=n(P$e,"STRONG",{});var Zpt=s(Zhe);WXo=r(Zpt,"albert"),Zpt.forEach(t),QXo=r(P$e," \u2014 "),qV=n(P$e,"A",{href:!0});var e_t=s(qV);HXo=r(e_t,"AlbertForQuestionAnswering"),e_t.forEach(t),UXo=r(P$e," (ALBERT model)"),P$e.forEach(t),JXo=i(X),b2=n(X,"LI",{});var B$e=s(b2);epe=n(B$e,"STRONG",{});var o_t=s(epe);YXo=r(o_t,"bart"),o_t.forEach(t),KXo=r(B$e," \u2014 "),jV=n(B$e,"A",{href:!0});var r_t=s(jV);ZXo=r(r_t,"BartForQuestionAnswering"),r_t.forEach(t),ezo=r(B$e," (BART model)"),B$e.forEach(t),ozo=i(X),v2=n(X,"LI",{});var I$e=s(v2);ope=n(I$e,"STRONG",{});var t_t=s(ope);rzo=r(t_t,"bert"),t_t.forEach(t),tzo=r(I$e," \u2014 "),DV=n(I$e,"A",{href:!0});var a_t=s(DV);azo=r(a_t,"BertForQuestionAnswering"),a_t.forEach(t),nzo=r(I$e," (BERT model)"),I$e.forEach(t),szo=i(X),F2=n(X,"LI",{});var N$e=s(F2);rpe=n(N$e,"STRONG",{});var n_t=s(rpe);lzo=r(n_t,"big_bird"),n_t.forEach(t),izo=r(N$e," \u2014 "),GV=n(N$e,"A",{href:!0});var s_t=s(GV);dzo=r(s_t,"BigBirdForQuestionAnswering"),s_t.forEach(t),czo=r(N$e," (BigBird model)"),N$e.forEach(t),fzo=i(X),T2=n(X,"LI",{});var q$e=s(T2);tpe=n(q$e,"STRONG",{});var l_t=s(tpe);mzo=r(l_t,"bigbird_pegasus"),l_t.forEach(t),gzo=r(q$e," \u2014 "),OV=n(q$e,"A",{href:!0});var i_t=s(OV);hzo=r(i_t,"BigBirdPegasusForQuestionAnswering"),i_t.forEach(t),pzo=r(q$e," (BigBirdPegasus model)"),q$e.forEach(t),_zo=i(X),M2=n(X,"LI",{});var j$e=s(M2);ape=n(j$e,"STRONG",{});var d_t=s(ape);uzo=r(d_t,"camembert"),d_t.forEach(t),bzo=r(j$e," \u2014 "),VV=n(j$e,"A",{href:!0});var c_t=s(VV);vzo=r(c_t,"CamembertForQuestionAnswering"),c_t.forEach(t),Fzo=r(j$e," (CamemBERT model)"),j$e.forEach(t),Tzo=i(X),E2=n(X,"LI",{});var D$e=s(E2);npe=n(D$e,"STRONG",{});var f_t=s(npe);Mzo=r(f_t,"canine"),f_t.forEach(t),Ezo=r(D$e," \u2014 "),XV=n(D$e,"A",{href:!0});var m_t=s(XV);Czo=r(m_t,"CanineForQuestionAnswering"),m_t.forEach(t),wzo=r(D$e," (Canine model)"),D$e.forEach(t),Azo=i(X),C2=n(X,"LI",{});var G$e=s(C2);spe=n(G$e,"STRONG",{});var g_t=s(spe);yzo=r(g_t,"convbert"),g_t.forEach(t),Lzo=r(G$e," \u2014 "),zV=n(G$e,"A",{href:!0});var h_t=s(zV);xzo=r(h_t,"ConvBertForQuestionAnswering"),h_t.forEach(t),$zo=r(G$e," (ConvBERT model)"),G$e.forEach(t),kzo=i(X),w2=n(X,"LI",{});var O$e=s(w2);lpe=n(O$e,"STRONG",{});var p_t=s(lpe);Szo=r(p_t,"data2vec-text"),p_t.forEach(t),Rzo=r(O$e," \u2014 "),WV=n(O$e,"A",{href:!0});var __t=s(WV);Pzo=r(__t,"Data2VecTextForQuestionAnswering"),__t.forEach(t),Bzo=r(O$e," (Data2VecText model)"),O$e.forEach(t),Izo=i(X),A2=n(X,"LI",{});var V$e=s(A2);ipe=n(V$e,"STRONG",{});var u_t=s(ipe);Nzo=r(u_t,"deberta"),u_t.forEach(t),qzo=r(V$e," \u2014 "),QV=n(V$e,"A",{href:!0});var b_t=s(QV);jzo=r(b_t,"DebertaForQuestionAnswering"),b_t.forEach(t),Dzo=r(V$e," (DeBERTa model)"),V$e.forEach(t),Gzo=i(X),y2=n(X,"LI",{});var X$e=s(y2);dpe=n(X$e,"STRONG",{});var v_t=s(dpe);Ozo=r(v_t,"deberta-v2"),v_t.forEach(t),Vzo=r(X$e," \u2014 "),HV=n(X$e,"A",{href:!0});var F_t=s(HV);Xzo=r(F_t,"DebertaV2ForQuestionAnswering"),F_t.forEach(t),zzo=r(X$e," (DeBERTa-v2 model)"),X$e.forEach(t),Wzo=i(X),L2=n(X,"LI",{});var z$e=s(L2);cpe=n(z$e,"STRONG",{});var T_t=s(cpe);Qzo=r(T_t,"distilbert"),T_t.forEach(t),Hzo=r(z$e," \u2014 "),UV=n(z$e,"A",{href:!0});var M_t=s(UV);Uzo=r(M_t,"DistilBertForQuestionAnswering"),M_t.forEach(t),Jzo=r(z$e," (DistilBERT model)"),z$e.forEach(t),Yzo=i(X),x2=n(X,"LI",{});var W$e=s(x2);fpe=n(W$e,"STRONG",{});var E_t=s(fpe);Kzo=r(E_t,"electra"),E_t.forEach(t),Zzo=r(W$e," \u2014 "),JV=n(W$e,"A",{href:!0});var C_t=s(JV);eWo=r(C_t,"ElectraForQuestionAnswering"),C_t.forEach(t),oWo=r(W$e," (ELECTRA model)"),W$e.forEach(t),rWo=i(X),$2=n(X,"LI",{});var Q$e=s($2);mpe=n(Q$e,"STRONG",{});var w_t=s(mpe);tWo=r(w_t,"flaubert"),w_t.forEach(t),aWo=r(Q$e," \u2014 "),YV=n(Q$e,"A",{href:!0});var A_t=s(YV);nWo=r(A_t,"FlaubertForQuestionAnsweringSimple"),A_t.forEach(t),sWo=r(Q$e," (FlauBERT model)"),Q$e.forEach(t),lWo=i(X),k2=n(X,"LI",{});var H$e=s(k2);gpe=n(H$e,"STRONG",{});var y_t=s(gpe);iWo=r(y_t,"fnet"),y_t.forEach(t),dWo=r(H$e," \u2014 "),KV=n(H$e,"A",{href:!0});var L_t=s(KV);cWo=r(L_t,"FNetForQuestionAnswering"),L_t.forEach(t),fWo=r(H$e," (FNet model)"),H$e.forEach(t),mWo=i(X),S2=n(X,"LI",{});var U$e=s(S2);hpe=n(U$e,"STRONG",{});var x_t=s(hpe);gWo=r(x_t,"funnel"),x_t.forEach(t),hWo=r(U$e," \u2014 "),ZV=n(U$e,"A",{href:!0});var $_t=s(ZV);pWo=r($_t,"FunnelForQuestionAnswering"),$_t.forEach(t),_Wo=r(U$e," (Funnel Transformer model)"),U$e.forEach(t),uWo=i(X),R2=n(X,"LI",{});var J$e=s(R2);ppe=n(J$e,"STRONG",{});var k_t=s(ppe);bWo=r(k_t,"gptj"),k_t.forEach(t),vWo=r(J$e," \u2014 "),eX=n(J$e,"A",{href:!0});var S_t=s(eX);FWo=r(S_t,"GPTJForQuestionAnswering"),S_t.forEach(t),TWo=r(J$e," (GPT-J model)"),J$e.forEach(t),MWo=i(X),P2=n(X,"LI",{});var Y$e=s(P2);_pe=n(Y$e,"STRONG",{});var R_t=s(_pe);EWo=r(R_t,"ibert"),R_t.forEach(t),CWo=r(Y$e," \u2014 "),oX=n(Y$e,"A",{href:!0});var P_t=s(oX);wWo=r(P_t,"IBertForQuestionAnswering"),P_t.forEach(t),AWo=r(Y$e," (I-BERT model)"),Y$e.forEach(t),yWo=i(X),B2=n(X,"LI",{});var K$e=s(B2);upe=n(K$e,"STRONG",{});var B_t=s(upe);LWo=r(B_t,"layoutlmv2"),B_t.forEach(t),xWo=r(K$e," \u2014 "),rX=n(K$e,"A",{href:!0});var I_t=s(rX);$Wo=r(I_t,"LayoutLMv2ForQuestionAnswering"),I_t.forEach(t),kWo=r(K$e," (LayoutLMv2 model)"),K$e.forEach(t),SWo=i(X),I2=n(X,"LI",{});var Z$e=s(I2);bpe=n(Z$e,"STRONG",{});var N_t=s(bpe);RWo=r(N_t,"layoutlmv3"),N_t.forEach(t),PWo=r(Z$e," \u2014 "),tX=n(Z$e,"A",{href:!0});var q_t=s(tX);BWo=r(q_t,"LayoutLMv3ForQuestionAnswering"),q_t.forEach(t),IWo=r(Z$e," (LayoutLMv3 model)"),Z$e.forEach(t),NWo=i(X),N2=n(X,"LI",{});var eke=s(N2);vpe=n(eke,"STRONG",{});var j_t=s(vpe);qWo=r(j_t,"led"),j_t.forEach(t),jWo=r(eke," \u2014 "),aX=n(eke,"A",{href:!0});var D_t=s(aX);DWo=r(D_t,"LEDForQuestionAnswering"),D_t.forEach(t),GWo=r(eke," (LED model)"),eke.forEach(t),OWo=i(X),q2=n(X,"LI",{});var oke=s(q2);Fpe=n(oke,"STRONG",{});var G_t=s(Fpe);VWo=r(G_t,"longformer"),G_t.forEach(t),XWo=r(oke," \u2014 "),nX=n(oke,"A",{href:!0});var O_t=s(nX);zWo=r(O_t,"LongformerForQuestionAnswering"),O_t.forEach(t),WWo=r(oke," (Longformer model)"),oke.forEach(t),QWo=i(X),j2=n(X,"LI",{});var rke=s(j2);Tpe=n(rke,"STRONG",{});var V_t=s(Tpe);HWo=r(V_t,"lxmert"),V_t.forEach(t),UWo=r(rke," \u2014 "),sX=n(rke,"A",{href:!0});var X_t=s(sX);JWo=r(X_t,"LxmertForQuestionAnswering"),X_t.forEach(t),YWo=r(rke," (LXMERT model)"),rke.forEach(t),KWo=i(X),D2=n(X,"LI",{});var tke=s(D2);Mpe=n(tke,"STRONG",{});var z_t=s(Mpe);ZWo=r(z_t,"mbart"),z_t.forEach(t),eQo=r(tke," \u2014 "),lX=n(tke,"A",{href:!0});var W_t=s(lX);oQo=r(W_t,"MBartForQuestionAnswering"),W_t.forEach(t),rQo=r(tke," (mBART model)"),tke.forEach(t),tQo=i(X),G2=n(X,"LI",{});var ake=s(G2);Epe=n(ake,"STRONG",{});var Q_t=s(Epe);aQo=r(Q_t,"megatron-bert"),Q_t.forEach(t),nQo=r(ake," \u2014 "),iX=n(ake,"A",{href:!0});var H_t=s(iX);sQo=r(H_t,"MegatronBertForQuestionAnswering"),H_t.forEach(t),lQo=r(ake," (MegatronBert model)"),ake.forEach(t),iQo=i(X),O2=n(X,"LI",{});var nke=s(O2);Cpe=n(nke,"STRONG",{});var U_t=s(Cpe);dQo=r(U_t,"mobilebert"),U_t.forEach(t),cQo=r(nke," \u2014 "),dX=n(nke,"A",{href:!0});var J_t=s(dX);fQo=r(J_t,"MobileBertForQuestionAnswering"),J_t.forEach(t),mQo=r(nke," (MobileBERT model)"),nke.forEach(t),gQo=i(X),V2=n(X,"LI",{});var ske=s(V2);wpe=n(ske,"STRONG",{});var Y_t=s(wpe);hQo=r(Y_t,"mpnet"),Y_t.forEach(t),pQo=r(ske," \u2014 "),cX=n(ske,"A",{href:!0});var K_t=s(cX);_Qo=r(K_t,"MPNetForQuestionAnswering"),K_t.forEach(t),uQo=r(ske," (MPNet model)"),ske.forEach(t),bQo=i(X),X2=n(X,"LI",{});var lke=s(X2);Ape=n(lke,"STRONG",{});var Z_t=s(Ape);vQo=r(Z_t,"nystromformer"),Z_t.forEach(t),FQo=r(lke," \u2014 "),fX=n(lke,"A",{href:!0});var eut=s(fX);TQo=r(eut,"NystromformerForQuestionAnswering"),eut.forEach(t),MQo=r(lke," (Nystromformer model)"),lke.forEach(t),EQo=i(X),z2=n(X,"LI",{});var ike=s(z2);ype=n(ike,"STRONG",{});var out=s(ype);CQo=r(out,"qdqbert"),out.forEach(t),wQo=r(ike," \u2014 "),mX=n(ike,"A",{href:!0});var rut=s(mX);AQo=r(rut,"QDQBertForQuestionAnswering"),rut.forEach(t),yQo=r(ike," (QDQBert model)"),ike.forEach(t),LQo=i(X),W2=n(X,"LI",{});var dke=s(W2);Lpe=n(dke,"STRONG",{});var tut=s(Lpe);xQo=r(tut,"reformer"),tut.forEach(t),$Qo=r(dke," \u2014 "),gX=n(dke,"A",{href:!0});var aut=s(gX);kQo=r(aut,"ReformerForQuestionAnswering"),aut.forEach(t),SQo=r(dke," (Reformer model)"),dke.forEach(t),RQo=i(X),Q2=n(X,"LI",{});var cke=s(Q2);xpe=n(cke,"STRONG",{});var nut=s(xpe);PQo=r(nut,"rembert"),nut.forEach(t),BQo=r(cke," \u2014 "),hX=n(cke,"A",{href:!0});var sut=s(hX);IQo=r(sut,"RemBertForQuestionAnswering"),sut.forEach(t),NQo=r(cke," (RemBERT model)"),cke.forEach(t),qQo=i(X),H2=n(X,"LI",{});var fke=s(H2);$pe=n(fke,"STRONG",{});var lut=s($pe);jQo=r(lut,"roberta"),lut.forEach(t),DQo=r(fke," \u2014 "),pX=n(fke,"A",{href:!0});var iut=s(pX);GQo=r(iut,"RobertaForQuestionAnswering"),iut.forEach(t),OQo=r(fke," (RoBERTa model)"),fke.forEach(t),VQo=i(X),U2=n(X,"LI",{});var mke=s(U2);kpe=n(mke,"STRONG",{});var dut=s(kpe);XQo=r(dut,"roformer"),dut.forEach(t),zQo=r(mke," \u2014 "),_X=n(mke,"A",{href:!0});var cut=s(_X);WQo=r(cut,"RoFormerForQuestionAnswering"),cut.forEach(t),QQo=r(mke," (RoFormer model)"),mke.forEach(t),HQo=i(X),J2=n(X,"LI",{});var gke=s(J2);Spe=n(gke,"STRONG",{});var fut=s(Spe);UQo=r(fut,"splinter"),fut.forEach(t),JQo=r(gke," \u2014 "),uX=n(gke,"A",{href:!0});var mut=s(uX);YQo=r(mut,"SplinterForQuestionAnswering"),mut.forEach(t),KQo=r(gke," (Splinter model)"),gke.forEach(t),ZQo=i(X),Y2=n(X,"LI",{});var hke=s(Y2);Rpe=n(hke,"STRONG",{});var gut=s(Rpe);eHo=r(gut,"squeezebert"),gut.forEach(t),oHo=r(hke," \u2014 "),bX=n(hke,"A",{href:!0});var hut=s(bX);rHo=r(hut,"SqueezeBertForQuestionAnswering"),hut.forEach(t),tHo=r(hke," (SqueezeBERT model)"),hke.forEach(t),aHo=i(X),K2=n(X,"LI",{});var pke=s(K2);Ppe=n(pke,"STRONG",{});var put=s(Ppe);nHo=r(put,"xlm"),put.forEach(t),sHo=r(pke," \u2014 "),vX=n(pke,"A",{href:!0});var _ut=s(vX);lHo=r(_ut,"XLMForQuestionAnsweringSimple"),_ut.forEach(t),iHo=r(pke," (XLM model)"),pke.forEach(t),dHo=i(X),Z2=n(X,"LI",{});var _ke=s(Z2);Bpe=n(_ke,"STRONG",{});var uut=s(Bpe);cHo=r(uut,"xlm-roberta"),uut.forEach(t),fHo=r(_ke," \u2014 "),FX=n(_ke,"A",{href:!0});var but=s(FX);mHo=r(but,"XLMRobertaForQuestionAnswering"),but.forEach(t),gHo=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),hHo=i(X),ev=n(X,"LI",{});var uke=s(ev);Ipe=n(uke,"STRONG",{});var vut=s(Ipe);pHo=r(vut,"xlm-roberta-xl"),vut.forEach(t),_Ho=r(uke," \u2014 "),TX=n(uke,"A",{href:!0});var Fut=s(TX);uHo=r(Fut,"XLMRobertaXLForQuestionAnswering"),Fut.forEach(t),bHo=r(uke," (XLM-RoBERTa-XL model)"),uke.forEach(t),vHo=i(X),ov=n(X,"LI",{});var bke=s(ov);Npe=n(bke,"STRONG",{});var Tut=s(Npe);FHo=r(Tut,"xlnet"),Tut.forEach(t),THo=r(bke," \u2014 "),MX=n(bke,"A",{href:!0});var Mut=s(MX);MHo=r(Mut,"XLNetForQuestionAnsweringSimple"),Mut.forEach(t),EHo=r(bke," (XLNet model)"),bke.forEach(t),CHo=i(X),rv=n(X,"LI",{});var vke=s(rv);qpe=n(vke,"STRONG",{});var Eut=s(qpe);wHo=r(Eut,"yoso"),Eut.forEach(t),AHo=r(vke," \u2014 "),EX=n(vke,"A",{href:!0});var Cut=s(EX);yHo=r(Cut,"YosoForQuestionAnswering"),Cut.forEach(t),LHo=r(vke," (YOSO model)"),vke.forEach(t),X.forEach(t),xHo=i(ca),tv=n(ca,"P",{});var Fke=s(tv);$Ho=r(Fke,"The model is set in evaluation mode by default using "),jpe=n(Fke,"CODE",{});var wut=s(jpe);kHo=r(wut,"model.eval()"),wut.forEach(t),SHo=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(Fke,"CODE",{});var Aut=s(Dpe);RHo=r(Aut,"model.train()"),Aut.forEach(t),Fke.forEach(t),PHo=i(ca),T(av.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Yqe=i(f),od=n(f,"H2",{class:!0});var oGe=s(od);nv=n(oGe,"A",{id:!0,class:!0,href:!0});var yut=s(nv);Gpe=n(yut,"SPAN",{});var Lut=s(Gpe);T(eL.$$.fragment,Lut),Lut.forEach(t),yut.forEach(t),BHo=i(oGe),Ope=n(oGe,"SPAN",{});var xut=s(Ope);IHo=r(xut,"AutoModelForTableQuestionAnswering"),xut.forEach(t),oGe.forEach(t),Kqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(oL.$$.fragment,Ks),NHo=i(Ks),rd=n(Ks,"P",{});var zZ=s(rd);qHo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CX=n(zZ,"A",{href:!0});var $ut=s(CX);jHo=r($ut,"from_pretrained()"),$ut.forEach(t),DHo=r(zZ," class method or the "),wX=n(zZ,"A",{href:!0});var kut=s(wX);GHo=r(kut,"from_config()"),kut.forEach(t),OHo=r(zZ,` class
method.`),zZ.forEach(t),VHo=i(Ks),rL=n(Ks,"P",{});var rGe=s(rL);XHo=r(rGe,"This class cannot be instantiated directly using "),Vpe=n(rGe,"CODE",{});var Sut=s(Vpe);zHo=r(Sut,"__init__()"),Sut.forEach(t),WHo=r(rGe," (throws an error)."),rGe.forEach(t),QHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var r6=s(gt);T(tL.$$.fragment,r6),HHo=i(r6),Xpe=n(r6,"P",{});var Rut=s(Xpe);UHo=r(Rut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rut.forEach(t),JHo=i(r6),td=n(r6,"P",{});var WZ=s(td);YHo=r(WZ,`Note:
Loading a model from its configuration file does `),zpe=n(WZ,"STRONG",{});var Put=s(zpe);KHo=r(Put,"not"),Put.forEach(t),ZHo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(WZ,"A",{href:!0});var But=s(AX);eUo=r(But,"from_pretrained()"),But.forEach(t),oUo=r(WZ," to load the model weights."),WZ.forEach(t),rUo=i(r6),T(sv.$$.fragment,r6),r6.forEach(t),tUo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(aL.$$.fragment,fa),aUo=i(fa),Wpe=n(fa,"P",{});var Iut=s(Wpe);nUo=r(Iut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iut.forEach(t),sUo=i(fa),qa=n(fa,"P",{});var t6=s(qa);lUo=r(t6,"The model class to instantiate is selected based on the "),Qpe=n(t6,"CODE",{});var Nut=s(Qpe);iUo=r(Nut,"model_type"),Nut.forEach(t),dUo=r(t6,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(t6,"CODE",{});var qut=s(Hpe);cUo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),fUo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(t6,"CODE",{});var jut=s(Upe);mUo=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),gUo=r(t6,":"),t6.forEach(t),hUo=i(fa),Jpe=n(fa,"UL",{});var Dut=s(Jpe);lv=n(Dut,"LI",{});var Tke=s(lv);Ype=n(Tke,"STRONG",{});var Gut=s(Ype);pUo=r(Gut,"tapas"),Gut.forEach(t),_Uo=r(Tke," \u2014 "),yX=n(Tke,"A",{href:!0});var Out=s(yX);uUo=r(Out,"TapasForQuestionAnswering"),Out.forEach(t),bUo=r(Tke," (TAPAS model)"),Tke.forEach(t),Dut.forEach(t),vUo=i(fa),iv=n(fa,"P",{});var Mke=s(iv);FUo=r(Mke,"The model is set in evaluation mode by default using "),Kpe=n(Mke,"CODE",{});var Vut=s(Kpe);TUo=r(Vut,"model.eval()"),Vut.forEach(t),MUo=r(Mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(Mke,"CODE",{});var Xut=s(Zpe);EUo=r(Xut,"model.train()"),Xut.forEach(t),Mke.forEach(t),CUo=i(fa),T(dv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Zqe=i(f),ad=n(f,"H2",{class:!0});var tGe=s(ad);cv=n(tGe,"A",{id:!0,class:!0,href:!0});var zut=s(cv);e_e=n(zut,"SPAN",{});var Wut=s(e_e);T(nL.$$.fragment,Wut),Wut.forEach(t),zut.forEach(t),wUo=i(tGe),o_e=n(tGe,"SPAN",{});var Qut=s(o_e);AUo=r(Qut,"AutoModelForImageClassification"),Qut.forEach(t),tGe.forEach(t),eje=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(sL.$$.fragment,Zs),yUo=i(Zs),nd=n(Zs,"P",{});var QZ=s(nd);LUo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LX=n(QZ,"A",{href:!0});var Hut=s(LX);xUo=r(Hut,"from_pretrained()"),Hut.forEach(t),$Uo=r(QZ," class method or the "),xX=n(QZ,"A",{href:!0});var Uut=s(xX);kUo=r(Uut,"from_config()"),Uut.forEach(t),SUo=r(QZ,` class
method.`),QZ.forEach(t),RUo=i(Zs),lL=n(Zs,"P",{});var aGe=s(lL);PUo=r(aGe,"This class cannot be instantiated directly using "),r_e=n(aGe,"CODE",{});var Jut=s(r_e);BUo=r(Jut,"__init__()"),Jut.forEach(t),IUo=r(aGe," (throws an error)."),aGe.forEach(t),NUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var a6=s(ht);T(iL.$$.fragment,a6),qUo=i(a6),t_e=n(a6,"P",{});var Yut=s(t_e);jUo=r(Yut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yut.forEach(t),DUo=i(a6),sd=n(a6,"P",{});var HZ=s(sd);GUo=r(HZ,`Note:
Loading a model from its configuration file does `),a_e=n(HZ,"STRONG",{});var Kut=s(a_e);OUo=r(Kut,"not"),Kut.forEach(t),VUo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(HZ,"A",{href:!0});var Zut=s($X);XUo=r(Zut,"from_pretrained()"),Zut.forEach(t),zUo=r(HZ," to load the model weights."),HZ.forEach(t),WUo=i(a6),T(fv.$$.fragment,a6),a6.forEach(t),QUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(dL.$$.fragment,ma),HUo=i(ma),n_e=n(ma,"P",{});var e4t=s(n_e);UUo=r(e4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e4t.forEach(t),JUo=i(ma),ja=n(ma,"P",{});var n6=s(ja);YUo=r(n6,"The model class to instantiate is selected based on the "),s_e=n(n6,"CODE",{});var o4t=s(s_e);KUo=r(o4t,"model_type"),o4t.forEach(t),ZUo=r(n6,` property of the config object (either
passed as an argument or loaded from `),l_e=n(n6,"CODE",{});var r4t=s(l_e);eJo=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),oJo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(n6,"CODE",{});var t4t=s(i_e);rJo=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),tJo=r(n6,":"),n6.forEach(t),aJo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);mv=n(Te,"LI",{});var Eke=s(mv);d_e=n(Eke,"STRONG",{});var a4t=s(d_e);nJo=r(a4t,"beit"),a4t.forEach(t),sJo=r(Eke," \u2014 "),kX=n(Eke,"A",{href:!0});var n4t=s(kX);lJo=r(n4t,"BeitForImageClassification"),n4t.forEach(t),iJo=r(Eke," (BEiT model)"),Eke.forEach(t),dJo=i(Te),gv=n(Te,"LI",{});var Cke=s(gv);c_e=n(Cke,"STRONG",{});var s4t=s(c_e);cJo=r(s4t,"convnext"),s4t.forEach(t),fJo=r(Cke," \u2014 "),SX=n(Cke,"A",{href:!0});var l4t=s(SX);mJo=r(l4t,"ConvNextForImageClassification"),l4t.forEach(t),gJo=r(Cke," (ConvNext model)"),Cke.forEach(t),hJo=i(Te),hv=n(Te,"LI",{});var wke=s(hv);f_e=n(wke,"STRONG",{});var i4t=s(f_e);pJo=r(i4t,"cvt"),i4t.forEach(t),_Jo=r(wke," \u2014 "),RX=n(wke,"A",{href:!0});var d4t=s(RX);uJo=r(d4t,"CvtForImageClassification"),d4t.forEach(t),bJo=r(wke," (CvT model)"),wke.forEach(t),vJo=i(Te),pv=n(Te,"LI",{});var Ake=s(pv);m_e=n(Ake,"STRONG",{});var c4t=s(m_e);FJo=r(c4t,"data2vec-vision"),c4t.forEach(t),TJo=r(Ake," \u2014 "),PX=n(Ake,"A",{href:!0});var f4t=s(PX);MJo=r(f4t,"Data2VecVisionForImageClassification"),f4t.forEach(t),EJo=r(Ake," (Data2VecVision model)"),Ake.forEach(t),CJo=i(Te),Bs=n(Te,"LI",{});var H$=s(Bs);g_e=n(H$,"STRONG",{});var m4t=s(g_e);wJo=r(m4t,"deit"),m4t.forEach(t),AJo=r(H$," \u2014 "),BX=n(H$,"A",{href:!0});var g4t=s(BX);yJo=r(g4t,"DeiTForImageClassification"),g4t.forEach(t),LJo=r(H$," or "),IX=n(H$,"A",{href:!0});var h4t=s(IX);xJo=r(h4t,"DeiTForImageClassificationWithTeacher"),h4t.forEach(t),$Jo=r(H$," (DeiT model)"),H$.forEach(t),kJo=i(Te),_v=n(Te,"LI",{});var yke=s(_v);h_e=n(yke,"STRONG",{});var p4t=s(h_e);SJo=r(p4t,"imagegpt"),p4t.forEach(t),RJo=r(yke," \u2014 "),NX=n(yke,"A",{href:!0});var _4t=s(NX);PJo=r(_4t,"ImageGPTForImageClassification"),_4t.forEach(t),BJo=r(yke," (ImageGPT model)"),yke.forEach(t),IJo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);p_e=n(hf,"STRONG",{});var u4t=s(p_e);NJo=r(u4t,"perceiver"),u4t.forEach(t),qJo=r(hf," \u2014 "),qX=n(hf,"A",{href:!0});var b4t=s(qX);jJo=r(b4t,"PerceiverForImageClassificationLearned"),b4t.forEach(t),DJo=r(hf," or "),jX=n(hf,"A",{href:!0});var v4t=s(jX);GJo=r(v4t,"PerceiverForImageClassificationFourier"),v4t.forEach(t),OJo=r(hf," or "),DX=n(hf,"A",{href:!0});var F4t=s(DX);VJo=r(F4t,"PerceiverForImageClassificationConvProcessing"),F4t.forEach(t),XJo=r(hf," (Perceiver model)"),hf.forEach(t),zJo=i(Te),uv=n(Te,"LI",{});var Lke=s(uv);__e=n(Lke,"STRONG",{});var T4t=s(__e);WJo=r(T4t,"poolformer"),T4t.forEach(t),QJo=r(Lke," \u2014 "),GX=n(Lke,"A",{href:!0});var M4t=s(GX);HJo=r(M4t,"PoolFormerForImageClassification"),M4t.forEach(t),UJo=r(Lke," (PoolFormer model)"),Lke.forEach(t),JJo=i(Te),bv=n(Te,"LI",{});var xke=s(bv);u_e=n(xke,"STRONG",{});var E4t=s(u_e);YJo=r(E4t,"regnet"),E4t.forEach(t),KJo=r(xke," \u2014 "),OX=n(xke,"A",{href:!0});var C4t=s(OX);ZJo=r(C4t,"RegNetForImageClassification"),C4t.forEach(t),eYo=r(xke," (RegNet model)"),xke.forEach(t),oYo=i(Te),vv=n(Te,"LI",{});var $ke=s(vv);b_e=n($ke,"STRONG",{});var w4t=s(b_e);rYo=r(w4t,"resnet"),w4t.forEach(t),tYo=r($ke," \u2014 "),VX=n($ke,"A",{href:!0});var A4t=s(VX);aYo=r(A4t,"ResNetForImageClassification"),A4t.forEach(t),nYo=r($ke," (ResNet model)"),$ke.forEach(t),sYo=i(Te),Fv=n(Te,"LI",{});var kke=s(Fv);v_e=n(kke,"STRONG",{});var y4t=s(v_e);lYo=r(y4t,"segformer"),y4t.forEach(t),iYo=r(kke," \u2014 "),XX=n(kke,"A",{href:!0});var L4t=s(XX);dYo=r(L4t,"SegformerForImageClassification"),L4t.forEach(t),cYo=r(kke," (SegFormer model)"),kke.forEach(t),fYo=i(Te),Tv=n(Te,"LI",{});var Ske=s(Tv);F_e=n(Ske,"STRONG",{});var x4t=s(F_e);mYo=r(x4t,"swin"),x4t.forEach(t),gYo=r(Ske," \u2014 "),zX=n(Ske,"A",{href:!0});var $4t=s(zX);hYo=r($4t,"SwinForImageClassification"),$4t.forEach(t),pYo=r(Ske," (Swin model)"),Ske.forEach(t),_Yo=i(Te),Mv=n(Te,"LI",{});var Rke=s(Mv);T_e=n(Rke,"STRONG",{});var k4t=s(T_e);uYo=r(k4t,"van"),k4t.forEach(t),bYo=r(Rke," \u2014 "),WX=n(Rke,"A",{href:!0});var S4t=s(WX);vYo=r(S4t,"VanForImageClassification"),S4t.forEach(t),FYo=r(Rke," (VAN model)"),Rke.forEach(t),TYo=i(Te),Ev=n(Te,"LI",{});var Pke=s(Ev);M_e=n(Pke,"STRONG",{});var R4t=s(M_e);MYo=r(R4t,"vit"),R4t.forEach(t),EYo=r(Pke," \u2014 "),QX=n(Pke,"A",{href:!0});var P4t=s(QX);CYo=r(P4t,"ViTForImageClassification"),P4t.forEach(t),wYo=r(Pke," (ViT model)"),Pke.forEach(t),Te.forEach(t),AYo=i(ma),Cv=n(ma,"P",{});var Bke=s(Cv);yYo=r(Bke,"The model is set in evaluation mode by default using "),E_e=n(Bke,"CODE",{});var B4t=s(E_e);LYo=r(B4t,"model.eval()"),B4t.forEach(t),xYo=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(Bke,"CODE",{});var I4t=s(C_e);$Yo=r(I4t,"model.train()"),I4t.forEach(t),Bke.forEach(t),kYo=i(ma),T(wv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),oje=i(f),ld=n(f,"H2",{class:!0});var nGe=s(ld);Av=n(nGe,"A",{id:!0,class:!0,href:!0});var N4t=s(Av);w_e=n(N4t,"SPAN",{});var q4t=s(w_e);T(cL.$$.fragment,q4t),q4t.forEach(t),N4t.forEach(t),SYo=i(nGe),A_e=n(nGe,"SPAN",{});var j4t=s(A_e);RYo=r(j4t,"AutoModelForVision2Seq"),j4t.forEach(t),nGe.forEach(t),rje=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(fL.$$.fragment,el),PYo=i(el),id=n(el,"P",{});var UZ=s(id);BYo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HX=n(UZ,"A",{href:!0});var D4t=s(HX);IYo=r(D4t,"from_pretrained()"),D4t.forEach(t),NYo=r(UZ," class method or the "),UX=n(UZ,"A",{href:!0});var G4t=s(UX);qYo=r(G4t,"from_config()"),G4t.forEach(t),jYo=r(UZ,` class
method.`),UZ.forEach(t),DYo=i(el),mL=n(el,"P",{});var sGe=s(mL);GYo=r(sGe,"This class cannot be instantiated directly using "),y_e=n(sGe,"CODE",{});var O4t=s(y_e);OYo=r(O4t,"__init__()"),O4t.forEach(t),VYo=r(sGe," (throws an error)."),sGe.forEach(t),XYo=i(el),_t=n(el,"DIV",{class:!0});var s6=s(_t);T(gL.$$.fragment,s6),zYo=i(s6),L_e=n(s6,"P",{});var V4t=s(L_e);WYo=r(V4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),V4t.forEach(t),QYo=i(s6),dd=n(s6,"P",{});var JZ=s(dd);HYo=r(JZ,`Note:
Loading a model from its configuration file does `),x_e=n(JZ,"STRONG",{});var X4t=s(x_e);UYo=r(X4t,"not"),X4t.forEach(t),JYo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(JZ,"A",{href:!0});var z4t=s(JX);YYo=r(z4t,"from_pretrained()"),z4t.forEach(t),KYo=r(JZ," to load the model weights."),JZ.forEach(t),ZYo=i(s6),T(yv.$$.fragment,s6),s6.forEach(t),eKo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(hL.$$.fragment,ga),oKo=i(ga),$_e=n(ga,"P",{});var W4t=s($_e);rKo=r(W4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W4t.forEach(t),tKo=i(ga),Da=n(ga,"P",{});var l6=s(Da);aKo=r(l6,"The model class to instantiate is selected based on the "),k_e=n(l6,"CODE",{});var Q4t=s(k_e);nKo=r(Q4t,"model_type"),Q4t.forEach(t),sKo=r(l6,` property of the config object (either
passed as an argument or loaded from `),S_e=n(l6,"CODE",{});var H4t=s(S_e);lKo=r(H4t,"pretrained_model_name_or_path"),H4t.forEach(t),iKo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(l6,"CODE",{});var U4t=s(R_e);dKo=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),cKo=r(l6,":"),l6.forEach(t),fKo=i(ga),P_e=n(ga,"UL",{});var J4t=s(P_e);Lv=n(J4t,"LI",{});var Ike=s(Lv);B_e=n(Ike,"STRONG",{});var Y4t=s(B_e);mKo=r(Y4t,"vision-encoder-decoder"),Y4t.forEach(t),gKo=r(Ike," \u2014 "),YX=n(Ike,"A",{href:!0});var K4t=s(YX);hKo=r(K4t,"VisionEncoderDecoderModel"),K4t.forEach(t),pKo=r(Ike," (Vision Encoder decoder model)"),Ike.forEach(t),J4t.forEach(t),_Ko=i(ga),xv=n(ga,"P",{});var Nke=s(xv);uKo=r(Nke,"The model is set in evaluation mode by default using "),I_e=n(Nke,"CODE",{});var Z4t=s(I_e);bKo=r(Z4t,"model.eval()"),Z4t.forEach(t),vKo=r(Nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(Nke,"CODE",{});var e1t=s(N_e);FKo=r(e1t,"model.train()"),e1t.forEach(t),Nke.forEach(t),TKo=i(ga),T($v.$$.fragment,ga),ga.forEach(t),el.forEach(t),tje=i(f),cd=n(f,"H2",{class:!0});var lGe=s(cd);kv=n(lGe,"A",{id:!0,class:!0,href:!0});var o1t=s(kv);q_e=n(o1t,"SPAN",{});var r1t=s(q_e);T(pL.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),MKo=i(lGe),j_e=n(lGe,"SPAN",{});var t1t=s(j_e);EKo=r(t1t,"AutoModelForAudioClassification"),t1t.forEach(t),lGe.forEach(t),aje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(_L.$$.fragment,ol),CKo=i(ol),fd=n(ol,"P",{});var YZ=s(fd);wKo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KX=n(YZ,"A",{href:!0});var a1t=s(KX);AKo=r(a1t,"from_pretrained()"),a1t.forEach(t),yKo=r(YZ," class method or the "),ZX=n(YZ,"A",{href:!0});var n1t=s(ZX);LKo=r(n1t,"from_config()"),n1t.forEach(t),xKo=r(YZ,` class
method.`),YZ.forEach(t),$Ko=i(ol),uL=n(ol,"P",{});var iGe=s(uL);kKo=r(iGe,"This class cannot be instantiated directly using "),D_e=n(iGe,"CODE",{});var s1t=s(D_e);SKo=r(s1t,"__init__()"),s1t.forEach(t),RKo=r(iGe," (throws an error)."),iGe.forEach(t),PKo=i(ol),ut=n(ol,"DIV",{class:!0});var i6=s(ut);T(bL.$$.fragment,i6),BKo=i(i6),G_e=n(i6,"P",{});var l1t=s(G_e);IKo=r(l1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),l1t.forEach(t),NKo=i(i6),md=n(i6,"P",{});var KZ=s(md);qKo=r(KZ,`Note:
Loading a model from its configuration file does `),O_e=n(KZ,"STRONG",{});var i1t=s(O_e);jKo=r(i1t,"not"),i1t.forEach(t),DKo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(KZ,"A",{href:!0});var d1t=s(ez);GKo=r(d1t,"from_pretrained()"),d1t.forEach(t),OKo=r(KZ," to load the model weights."),KZ.forEach(t),VKo=i(i6),T(Sv.$$.fragment,i6),i6.forEach(t),XKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(vL.$$.fragment,ha),zKo=i(ha),V_e=n(ha,"P",{});var c1t=s(V_e);WKo=r(c1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),c1t.forEach(t),QKo=i(ha),Ga=n(ha,"P",{});var d6=s(Ga);HKo=r(d6,"The model class to instantiate is selected based on the "),X_e=n(d6,"CODE",{});var f1t=s(X_e);UKo=r(f1t,"model_type"),f1t.forEach(t),JKo=r(d6,` property of the config object (either
passed as an argument or loaded from `),z_e=n(d6,"CODE",{});var m1t=s(z_e);YKo=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),KKo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(d6,"CODE",{});var g1t=s(W_e);ZKo=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),eZo=r(d6,":"),d6.forEach(t),oZo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);Rv=n(Oe,"LI",{});var qke=s(Rv);Q_e=n(qke,"STRONG",{});var h1t=s(Q_e);rZo=r(h1t,"data2vec-audio"),h1t.forEach(t),tZo=r(qke," \u2014 "),oz=n(qke,"A",{href:!0});var p1t=s(oz);aZo=r(p1t,"Data2VecAudioForSequenceClassification"),p1t.forEach(t),nZo=r(qke," (Data2VecAudio model)"),qke.forEach(t),sZo=i(Oe),Pv=n(Oe,"LI",{});var jke=s(Pv);H_e=n(jke,"STRONG",{});var _1t=s(H_e);lZo=r(_1t,"hubert"),_1t.forEach(t),iZo=r(jke," \u2014 "),rz=n(jke,"A",{href:!0});var u1t=s(rz);dZo=r(u1t,"HubertForSequenceClassification"),u1t.forEach(t),cZo=r(jke," (Hubert model)"),jke.forEach(t),fZo=i(Oe),Bv=n(Oe,"LI",{});var Dke=s(Bv);U_e=n(Dke,"STRONG",{});var b1t=s(U_e);mZo=r(b1t,"sew"),b1t.forEach(t),gZo=r(Dke," \u2014 "),tz=n(Dke,"A",{href:!0});var v1t=s(tz);hZo=r(v1t,"SEWForSequenceClassification"),v1t.forEach(t),pZo=r(Dke," (SEW model)"),Dke.forEach(t),_Zo=i(Oe),Iv=n(Oe,"LI",{});var Gke=s(Iv);J_e=n(Gke,"STRONG",{});var F1t=s(J_e);uZo=r(F1t,"sew-d"),F1t.forEach(t),bZo=r(Gke," \u2014 "),az=n(Gke,"A",{href:!0});var T1t=s(az);vZo=r(T1t,"SEWDForSequenceClassification"),T1t.forEach(t),FZo=r(Gke," (SEW-D model)"),Gke.forEach(t),TZo=i(Oe),Nv=n(Oe,"LI",{});var Oke=s(Nv);Y_e=n(Oke,"STRONG",{});var M1t=s(Y_e);MZo=r(M1t,"unispeech"),M1t.forEach(t),EZo=r(Oke," \u2014 "),nz=n(Oke,"A",{href:!0});var E1t=s(nz);CZo=r(E1t,"UniSpeechForSequenceClassification"),E1t.forEach(t),wZo=r(Oke," (UniSpeech model)"),Oke.forEach(t),AZo=i(Oe),qv=n(Oe,"LI",{});var Vke=s(qv);K_e=n(Vke,"STRONG",{});var C1t=s(K_e);yZo=r(C1t,"unispeech-sat"),C1t.forEach(t),LZo=r(Vke," \u2014 "),sz=n(Vke,"A",{href:!0});var w1t=s(sz);xZo=r(w1t,"UniSpeechSatForSequenceClassification"),w1t.forEach(t),$Zo=r(Vke," (UniSpeechSat model)"),Vke.forEach(t),kZo=i(Oe),jv=n(Oe,"LI",{});var Xke=s(jv);Z_e=n(Xke,"STRONG",{});var A1t=s(Z_e);SZo=r(A1t,"wav2vec2"),A1t.forEach(t),RZo=r(Xke," \u2014 "),lz=n(Xke,"A",{href:!0});var y1t=s(lz);PZo=r(y1t,"Wav2Vec2ForSequenceClassification"),y1t.forEach(t),BZo=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),IZo=i(Oe),Dv=n(Oe,"LI",{});var zke=s(Dv);eue=n(zke,"STRONG",{});var L1t=s(eue);NZo=r(L1t,"wav2vec2-conformer"),L1t.forEach(t),qZo=r(zke," \u2014 "),iz=n(zke,"A",{href:!0});var x1t=s(iz);jZo=r(x1t,"Wav2Vec2ConformerForSequenceClassification"),x1t.forEach(t),DZo=r(zke," (Wav2Vec2-Conformer model)"),zke.forEach(t),GZo=i(Oe),Gv=n(Oe,"LI",{});var Wke=s(Gv);oue=n(Wke,"STRONG",{});var $1t=s(oue);OZo=r($1t,"wavlm"),$1t.forEach(t),VZo=r(Wke," \u2014 "),dz=n(Wke,"A",{href:!0});var k1t=s(dz);XZo=r(k1t,"WavLMForSequenceClassification"),k1t.forEach(t),zZo=r(Wke," (WavLM model)"),Wke.forEach(t),Oe.forEach(t),WZo=i(ha),Ov=n(ha,"P",{});var Qke=s(Ov);QZo=r(Qke,"The model is set in evaluation mode by default using "),rue=n(Qke,"CODE",{});var S1t=s(rue);HZo=r(S1t,"model.eval()"),S1t.forEach(t),UZo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(Qke,"CODE",{});var R1t=s(tue);JZo=r(R1t,"model.train()"),R1t.forEach(t),Qke.forEach(t),YZo=i(ha),T(Vv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),nje=i(f),gd=n(f,"H2",{class:!0});var dGe=s(gd);Xv=n(dGe,"A",{id:!0,class:!0,href:!0});var P1t=s(Xv);aue=n(P1t,"SPAN",{});var B1t=s(aue);T(FL.$$.fragment,B1t),B1t.forEach(t),P1t.forEach(t),KZo=i(dGe),nue=n(dGe,"SPAN",{});var I1t=s(nue);ZZo=r(I1t,"AutoModelForAudioFrameClassification"),I1t.forEach(t),dGe.forEach(t),sje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(TL.$$.fragment,rl),eer=i(rl),hd=n(rl,"P",{});var ZZ=s(hd);oer=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cz=n(ZZ,"A",{href:!0});var N1t=s(cz);rer=r(N1t,"from_pretrained()"),N1t.forEach(t),ter=r(ZZ," class method or the "),fz=n(ZZ,"A",{href:!0});var q1t=s(fz);aer=r(q1t,"from_config()"),q1t.forEach(t),ner=r(ZZ,` class
method.`),ZZ.forEach(t),ser=i(rl),ML=n(rl,"P",{});var cGe=s(ML);ler=r(cGe,"This class cannot be instantiated directly using "),sue=n(cGe,"CODE",{});var j1t=s(sue);ier=r(j1t,"__init__()"),j1t.forEach(t),der=r(cGe," (throws an error)."),cGe.forEach(t),cer=i(rl),bt=n(rl,"DIV",{class:!0});var c6=s(bt);T(EL.$$.fragment,c6),fer=i(c6),lue=n(c6,"P",{});var D1t=s(lue);mer=r(D1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),D1t.forEach(t),ger=i(c6),pd=n(c6,"P",{});var eee=s(pd);her=r(eee,`Note:
Loading a model from its configuration file does `),iue=n(eee,"STRONG",{});var G1t=s(iue);per=r(G1t,"not"),G1t.forEach(t),_er=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(eee,"A",{href:!0});var O1t=s(mz);uer=r(O1t,"from_pretrained()"),O1t.forEach(t),ber=r(eee," to load the model weights."),eee.forEach(t),ver=i(c6),T(zv.$$.fragment,c6),c6.forEach(t),Fer=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(CL.$$.fragment,pa),Ter=i(pa),due=n(pa,"P",{});var V1t=s(due);Mer=r(V1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),V1t.forEach(t),Eer=i(pa),Oa=n(pa,"P",{});var f6=s(Oa);Cer=r(f6,"The model class to instantiate is selected based on the "),cue=n(f6,"CODE",{});var X1t=s(cue);wer=r(X1t,"model_type"),X1t.forEach(t),Aer=r(f6,` property of the config object (either
passed as an argument or loaded from `),fue=n(f6,"CODE",{});var z1t=s(fue);yer=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),Ler=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(f6,"CODE",{});var W1t=s(mue);xer=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),$er=r(f6,":"),f6.forEach(t),ker=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Wv=n(tl,"LI",{});var Hke=s(Wv);gue=n(Hke,"STRONG",{});var Q1t=s(gue);Ser=r(Q1t,"data2vec-audio"),Q1t.forEach(t),Rer=r(Hke," \u2014 "),gz=n(Hke,"A",{href:!0});var H1t=s(gz);Per=r(H1t,"Data2VecAudioForAudioFrameClassification"),H1t.forEach(t),Ber=r(Hke," (Data2VecAudio model)"),Hke.forEach(t),Ier=i(tl),Qv=n(tl,"LI",{});var Uke=s(Qv);hue=n(Uke,"STRONG",{});var U1t=s(hue);Ner=r(U1t,"unispeech-sat"),U1t.forEach(t),qer=r(Uke," \u2014 "),hz=n(Uke,"A",{href:!0});var J1t=s(hz);jer=r(J1t,"UniSpeechSatForAudioFrameClassification"),J1t.forEach(t),Der=r(Uke," (UniSpeechSat model)"),Uke.forEach(t),Ger=i(tl),Hv=n(tl,"LI",{});var Jke=s(Hv);pue=n(Jke,"STRONG",{});var Y1t=s(pue);Oer=r(Y1t,"wav2vec2"),Y1t.forEach(t),Ver=r(Jke," \u2014 "),pz=n(Jke,"A",{href:!0});var K1t=s(pz);Xer=r(K1t,"Wav2Vec2ForAudioFrameClassification"),K1t.forEach(t),zer=r(Jke," (Wav2Vec2 model)"),Jke.forEach(t),Wer=i(tl),Uv=n(tl,"LI",{});var Yke=s(Uv);_ue=n(Yke,"STRONG",{});var Z1t=s(_ue);Qer=r(Z1t,"wav2vec2-conformer"),Z1t.forEach(t),Her=r(Yke," \u2014 "),_z=n(Yke,"A",{href:!0});var e7t=s(_z);Uer=r(e7t,"Wav2Vec2ConformerForAudioFrameClassification"),e7t.forEach(t),Jer=r(Yke," (Wav2Vec2-Conformer model)"),Yke.forEach(t),Yer=i(tl),Jv=n(tl,"LI",{});var Kke=s(Jv);uue=n(Kke,"STRONG",{});var o7t=s(uue);Ker=r(o7t,"wavlm"),o7t.forEach(t),Zer=r(Kke," \u2014 "),uz=n(Kke,"A",{href:!0});var r7t=s(uz);eor=r(r7t,"WavLMForAudioFrameClassification"),r7t.forEach(t),oor=r(Kke," (WavLM model)"),Kke.forEach(t),tl.forEach(t),ror=i(pa),Yv=n(pa,"P",{});var Zke=s(Yv);tor=r(Zke,"The model is set in evaluation mode by default using "),bue=n(Zke,"CODE",{});var t7t=s(bue);aor=r(t7t,"model.eval()"),t7t.forEach(t),nor=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(Zke,"CODE",{});var a7t=s(vue);sor=r(a7t,"model.train()"),a7t.forEach(t),Zke.forEach(t),lor=i(pa),T(Kv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),lje=i(f),_d=n(f,"H2",{class:!0});var fGe=s(_d);Zv=n(fGe,"A",{id:!0,class:!0,href:!0});var n7t=s(Zv);Fue=n(n7t,"SPAN",{});var s7t=s(Fue);T(wL.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),ior=i(fGe),Tue=n(fGe,"SPAN",{});var l7t=s(Tue);dor=r(l7t,"AutoModelForCTC"),l7t.forEach(t),fGe.forEach(t),ije=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(AL.$$.fragment,al),cor=i(al),ud=n(al,"P",{});var oee=s(ud);mor=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bz=n(oee,"A",{href:!0});var i7t=s(bz);gor=r(i7t,"from_pretrained()"),i7t.forEach(t),hor=r(oee," class method or the "),vz=n(oee,"A",{href:!0});var d7t=s(vz);por=r(d7t,"from_config()"),d7t.forEach(t),_or=r(oee,` class
method.`),oee.forEach(t),uor=i(al),yL=n(al,"P",{});var mGe=s(yL);bor=r(mGe,"This class cannot be instantiated directly using "),Mue=n(mGe,"CODE",{});var c7t=s(Mue);vor=r(c7t,"__init__()"),c7t.forEach(t),For=r(mGe," (throws an error)."),mGe.forEach(t),Tor=i(al),vt=n(al,"DIV",{class:!0});var m6=s(vt);T(LL.$$.fragment,m6),Mor=i(m6),Eue=n(m6,"P",{});var f7t=s(Eue);Eor=r(f7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),f7t.forEach(t),Cor=i(m6),bd=n(m6,"P",{});var ree=s(bd);wor=r(ree,`Note:
Loading a model from its configuration file does `),Cue=n(ree,"STRONG",{});var m7t=s(Cue);Aor=r(m7t,"not"),m7t.forEach(t),yor=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(ree,"A",{href:!0});var g7t=s(Fz);Lor=r(g7t,"from_pretrained()"),g7t.forEach(t),xor=r(ree," to load the model weights."),ree.forEach(t),$or=i(m6),T(eF.$$.fragment,m6),m6.forEach(t),kor=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(xL.$$.fragment,_a),Sor=i(_a),wue=n(_a,"P",{});var h7t=s(wue);Ror=r(h7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),h7t.forEach(t),Por=i(_a),Va=n(_a,"P",{});var g6=s(Va);Bor=r(g6,"The model class to instantiate is selected based on the "),Aue=n(g6,"CODE",{});var p7t=s(Aue);Ior=r(p7t,"model_type"),p7t.forEach(t),Nor=r(g6,` property of the config object (either
passed as an argument or loaded from `),yue=n(g6,"CODE",{});var _7t=s(yue);qor=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),jor=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(g6,"CODE",{});var u7t=s(Lue);Dor=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),Gor=r(g6,":"),g6.forEach(t),Oor=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);oF=n(Ve,"LI",{});var eSe=s(oF);xue=n(eSe,"STRONG",{});var b7t=s(xue);Vor=r(b7t,"data2vec-audio"),b7t.forEach(t),Xor=r(eSe," \u2014 "),Tz=n(eSe,"A",{href:!0});var v7t=s(Tz);zor=r(v7t,"Data2VecAudioForCTC"),v7t.forEach(t),Wor=r(eSe," (Data2VecAudio model)"),eSe.forEach(t),Qor=i(Ve),rF=n(Ve,"LI",{});var oSe=s(rF);$ue=n(oSe,"STRONG",{});var F7t=s($ue);Hor=r(F7t,"hubert"),F7t.forEach(t),Uor=r(oSe," \u2014 "),Mz=n(oSe,"A",{href:!0});var T7t=s(Mz);Jor=r(T7t,"HubertForCTC"),T7t.forEach(t),Yor=r(oSe," (Hubert model)"),oSe.forEach(t),Kor=i(Ve),tF=n(Ve,"LI",{});var rSe=s(tF);kue=n(rSe,"STRONG",{});var M7t=s(kue);Zor=r(M7t,"sew"),M7t.forEach(t),err=r(rSe," \u2014 "),Ez=n(rSe,"A",{href:!0});var E7t=s(Ez);orr=r(E7t,"SEWForCTC"),E7t.forEach(t),rrr=r(rSe," (SEW model)"),rSe.forEach(t),trr=i(Ve),aF=n(Ve,"LI",{});var tSe=s(aF);Sue=n(tSe,"STRONG",{});var C7t=s(Sue);arr=r(C7t,"sew-d"),C7t.forEach(t),nrr=r(tSe," \u2014 "),Cz=n(tSe,"A",{href:!0});var w7t=s(Cz);srr=r(w7t,"SEWDForCTC"),w7t.forEach(t),lrr=r(tSe," (SEW-D model)"),tSe.forEach(t),irr=i(Ve),nF=n(Ve,"LI",{});var aSe=s(nF);Rue=n(aSe,"STRONG",{});var A7t=s(Rue);drr=r(A7t,"unispeech"),A7t.forEach(t),crr=r(aSe," \u2014 "),wz=n(aSe,"A",{href:!0});var y7t=s(wz);frr=r(y7t,"UniSpeechForCTC"),y7t.forEach(t),mrr=r(aSe," (UniSpeech model)"),aSe.forEach(t),grr=i(Ve),sF=n(Ve,"LI",{});var nSe=s(sF);Pue=n(nSe,"STRONG",{});var L7t=s(Pue);hrr=r(L7t,"unispeech-sat"),L7t.forEach(t),prr=r(nSe," \u2014 "),Az=n(nSe,"A",{href:!0});var x7t=s(Az);_rr=r(x7t,"UniSpeechSatForCTC"),x7t.forEach(t),urr=r(nSe," (UniSpeechSat model)"),nSe.forEach(t),brr=i(Ve),lF=n(Ve,"LI",{});var sSe=s(lF);Bue=n(sSe,"STRONG",{});var $7t=s(Bue);vrr=r($7t,"wav2vec2"),$7t.forEach(t),Frr=r(sSe," \u2014 "),yz=n(sSe,"A",{href:!0});var k7t=s(yz);Trr=r(k7t,"Wav2Vec2ForCTC"),k7t.forEach(t),Mrr=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),Err=i(Ve),iF=n(Ve,"LI",{});var lSe=s(iF);Iue=n(lSe,"STRONG",{});var S7t=s(Iue);Crr=r(S7t,"wav2vec2-conformer"),S7t.forEach(t),wrr=r(lSe," \u2014 "),Lz=n(lSe,"A",{href:!0});var R7t=s(Lz);Arr=r(R7t,"Wav2Vec2ConformerForCTC"),R7t.forEach(t),yrr=r(lSe," (Wav2Vec2-Conformer model)"),lSe.forEach(t),Lrr=i(Ve),dF=n(Ve,"LI",{});var iSe=s(dF);Nue=n(iSe,"STRONG",{});var P7t=s(Nue);xrr=r(P7t,"wavlm"),P7t.forEach(t),$rr=r(iSe," \u2014 "),xz=n(iSe,"A",{href:!0});var B7t=s(xz);krr=r(B7t,"WavLMForCTC"),B7t.forEach(t),Srr=r(iSe," (WavLM model)"),iSe.forEach(t),Ve.forEach(t),Rrr=i(_a),cF=n(_a,"P",{});var dSe=s(cF);Prr=r(dSe,"The model is set in evaluation mode by default using "),que=n(dSe,"CODE",{});var I7t=s(que);Brr=r(I7t,"model.eval()"),I7t.forEach(t),Irr=r(dSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(dSe,"CODE",{});var N7t=s(jue);Nrr=r(N7t,"model.train()"),N7t.forEach(t),dSe.forEach(t),qrr=i(_a),T(fF.$$.fragment,_a),_a.forEach(t),al.forEach(t),dje=i(f),vd=n(f,"H2",{class:!0});var gGe=s(vd);mF=n(gGe,"A",{id:!0,class:!0,href:!0});var q7t=s(mF);Due=n(q7t,"SPAN",{});var j7t=s(Due);T($L.$$.fragment,j7t),j7t.forEach(t),q7t.forEach(t),jrr=i(gGe),Gue=n(gGe,"SPAN",{});var D7t=s(Gue);Drr=r(D7t,"AutoModelForSpeechSeq2Seq"),D7t.forEach(t),gGe.forEach(t),cje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(kL.$$.fragment,nl),Grr=i(nl),Fd=n(nl,"P",{});var tee=s(Fd);Orr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$z=n(tee,"A",{href:!0});var G7t=s($z);Vrr=r(G7t,"from_pretrained()"),G7t.forEach(t),Xrr=r(tee," class method or the "),kz=n(tee,"A",{href:!0});var O7t=s(kz);zrr=r(O7t,"from_config()"),O7t.forEach(t),Wrr=r(tee,` class
method.`),tee.forEach(t),Qrr=i(nl),SL=n(nl,"P",{});var hGe=s(SL);Hrr=r(hGe,"This class cannot be instantiated directly using "),Oue=n(hGe,"CODE",{});var V7t=s(Oue);Urr=r(V7t,"__init__()"),V7t.forEach(t),Jrr=r(hGe," (throws an error)."),hGe.forEach(t),Yrr=i(nl),Ft=n(nl,"DIV",{class:!0});var h6=s(Ft);T(RL.$$.fragment,h6),Krr=i(h6),Vue=n(h6,"P",{});var X7t=s(Vue);Zrr=r(X7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),X7t.forEach(t),etr=i(h6),Td=n(h6,"P",{});var aee=s(Td);otr=r(aee,`Note:
Loading a model from its configuration file does `),Xue=n(aee,"STRONG",{});var z7t=s(Xue);rtr=r(z7t,"not"),z7t.forEach(t),ttr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(aee,"A",{href:!0});var W7t=s(Sz);atr=r(W7t,"from_pretrained()"),W7t.forEach(t),ntr=r(aee," to load the model weights."),aee.forEach(t),str=i(h6),T(gF.$$.fragment,h6),h6.forEach(t),ltr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(PL.$$.fragment,ua),itr=i(ua),zue=n(ua,"P",{});var Q7t=s(zue);dtr=r(Q7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Q7t.forEach(t),ctr=i(ua),Xa=n(ua,"P",{});var p6=s(Xa);ftr=r(p6,"The model class to instantiate is selected based on the "),Wue=n(p6,"CODE",{});var H7t=s(Wue);mtr=r(H7t,"model_type"),H7t.forEach(t),gtr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Que=n(p6,"CODE",{});var U7t=s(Que);htr=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),ptr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(p6,"CODE",{});var J7t=s(Hue);_tr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),utr=r(p6,":"),p6.forEach(t),btr=i(ua),BL=n(ua,"UL",{});var pGe=s(BL);hF=n(pGe,"LI",{});var cSe=s(hF);Uue=n(cSe,"STRONG",{});var Y7t=s(Uue);vtr=r(Y7t,"speech-encoder-decoder"),Y7t.forEach(t),Ftr=r(cSe," \u2014 "),Rz=n(cSe,"A",{href:!0});var K7t=s(Rz);Ttr=r(K7t,"SpeechEncoderDecoderModel"),K7t.forEach(t),Mtr=r(cSe," (Speech Encoder decoder model)"),cSe.forEach(t),Etr=i(pGe),pF=n(pGe,"LI",{});var fSe=s(pF);Jue=n(fSe,"STRONG",{});var Z7t=s(Jue);Ctr=r(Z7t,"speech_to_text"),Z7t.forEach(t),wtr=r(fSe," \u2014 "),Pz=n(fSe,"A",{href:!0});var ebt=s(Pz);Atr=r(ebt,"Speech2TextForConditionalGeneration"),ebt.forEach(t),ytr=r(fSe," (Speech2Text model)"),fSe.forEach(t),pGe.forEach(t),Ltr=i(ua),_F=n(ua,"P",{});var mSe=s(_F);xtr=r(mSe,"The model is set in evaluation mode by default using "),Yue=n(mSe,"CODE",{});var obt=s(Yue);$tr=r(obt,"model.eval()"),obt.forEach(t),ktr=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=n(mSe,"CODE",{});var rbt=s(Kue);Str=r(rbt,"model.train()"),rbt.forEach(t),mSe.forEach(t),Rtr=i(ua),T(uF.$$.fragment,ua),ua.forEach(t),nl.forEach(t),fje=i(f),Md=n(f,"H2",{class:!0});var _Ge=s(Md);bF=n(_Ge,"A",{id:!0,class:!0,href:!0});var tbt=s(bF);Zue=n(tbt,"SPAN",{});var abt=s(Zue);T(IL.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),Ptr=i(_Ge),e4e=n(_Ge,"SPAN",{});var nbt=s(e4e);Btr=r(nbt,"AutoModelForAudioXVector"),nbt.forEach(t),_Ge.forEach(t),mje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(NL.$$.fragment,sl),Itr=i(sl),Ed=n(sl,"P",{});var nee=s(Ed);Ntr=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Bz=n(nee,"A",{href:!0});var sbt=s(Bz);qtr=r(sbt,"from_pretrained()"),sbt.forEach(t),jtr=r(nee," class method or the "),Iz=n(nee,"A",{href:!0});var lbt=s(Iz);Dtr=r(lbt,"from_config()"),lbt.forEach(t),Gtr=r(nee,` class
method.`),nee.forEach(t),Otr=i(sl),qL=n(sl,"P",{});var uGe=s(qL);Vtr=r(uGe,"This class cannot be instantiated directly using "),o4e=n(uGe,"CODE",{});var ibt=s(o4e);Xtr=r(ibt,"__init__()"),ibt.forEach(t),ztr=r(uGe," (throws an error)."),uGe.forEach(t),Wtr=i(sl),Tt=n(sl,"DIV",{class:!0});var _6=s(Tt);T(jL.$$.fragment,_6),Qtr=i(_6),r4e=n(_6,"P",{});var dbt=s(r4e);Htr=r(dbt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dbt.forEach(t),Utr=i(_6),Cd=n(_6,"P",{});var see=s(Cd);Jtr=r(see,`Note:
Loading a model from its configuration file does `),t4e=n(see,"STRONG",{});var cbt=s(t4e);Ytr=r(cbt,"not"),cbt.forEach(t),Ktr=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(see,"A",{href:!0});var fbt=s(Nz);Ztr=r(fbt,"from_pretrained()"),fbt.forEach(t),ear=r(see," to load the model weights."),see.forEach(t),oar=i(_6),T(vF.$$.fragment,_6),_6.forEach(t),rar=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(DL.$$.fragment,ba),tar=i(ba),a4e=n(ba,"P",{});var mbt=s(a4e);aar=r(mbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mbt.forEach(t),nar=i(ba),za=n(ba,"P",{});var u6=s(za);sar=r(u6,"The model class to instantiate is selected based on the "),n4e=n(u6,"CODE",{});var gbt=s(n4e);lar=r(gbt,"model_type"),gbt.forEach(t),iar=r(u6,` property of the config object (either
passed as an argument or loaded from `),s4e=n(u6,"CODE",{});var hbt=s(s4e);dar=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),car=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(u6,"CODE",{});var pbt=s(l4e);far=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),mar=r(u6,":"),u6.forEach(t),gar=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);FF=n(ll,"LI",{});var gSe=s(FF);i4e=n(gSe,"STRONG",{});var _bt=s(i4e);har=r(_bt,"data2vec-audio"),_bt.forEach(t),par=r(gSe," \u2014 "),qz=n(gSe,"A",{href:!0});var ubt=s(qz);_ar=r(ubt,"Data2VecAudioForXVector"),ubt.forEach(t),uar=r(gSe," (Data2VecAudio model)"),gSe.forEach(t),bar=i(ll),TF=n(ll,"LI",{});var hSe=s(TF);d4e=n(hSe,"STRONG",{});var bbt=s(d4e);Far=r(bbt,"unispeech-sat"),bbt.forEach(t),Tar=r(hSe," \u2014 "),jz=n(hSe,"A",{href:!0});var vbt=s(jz);Mar=r(vbt,"UniSpeechSatForXVector"),vbt.forEach(t),Ear=r(hSe," (UniSpeechSat model)"),hSe.forEach(t),Car=i(ll),MF=n(ll,"LI",{});var pSe=s(MF);c4e=n(pSe,"STRONG",{});var Fbt=s(c4e);war=r(Fbt,"wav2vec2"),Fbt.forEach(t),Aar=r(pSe," \u2014 "),Dz=n(pSe,"A",{href:!0});var Tbt=s(Dz);yar=r(Tbt,"Wav2Vec2ForXVector"),Tbt.forEach(t),Lar=r(pSe," (Wav2Vec2 model)"),pSe.forEach(t),xar=i(ll),EF=n(ll,"LI",{});var _Se=s(EF);f4e=n(_Se,"STRONG",{});var Mbt=s(f4e);$ar=r(Mbt,"wav2vec2-conformer"),Mbt.forEach(t),kar=r(_Se," \u2014 "),Gz=n(_Se,"A",{href:!0});var Ebt=s(Gz);Sar=r(Ebt,"Wav2Vec2ConformerForXVector"),Ebt.forEach(t),Rar=r(_Se," (Wav2Vec2-Conformer model)"),_Se.forEach(t),Par=i(ll),CF=n(ll,"LI",{});var uSe=s(CF);m4e=n(uSe,"STRONG",{});var Cbt=s(m4e);Bar=r(Cbt,"wavlm"),Cbt.forEach(t),Iar=r(uSe," \u2014 "),Oz=n(uSe,"A",{href:!0});var wbt=s(Oz);Nar=r(wbt,"WavLMForXVector"),wbt.forEach(t),qar=r(uSe," (WavLM model)"),uSe.forEach(t),ll.forEach(t),jar=i(ba),wF=n(ba,"P",{});var bSe=s(wF);Dar=r(bSe,"The model is set in evaluation mode by default using "),g4e=n(bSe,"CODE",{});var Abt=s(g4e);Gar=r(Abt,"model.eval()"),Abt.forEach(t),Oar=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h4e=n(bSe,"CODE",{});var ybt=s(h4e);Var=r(ybt,"model.train()"),ybt.forEach(t),bSe.forEach(t),Xar=i(ba),T(AF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),gje=i(f),wd=n(f,"H2",{class:!0});var bGe=s(wd);yF=n(bGe,"A",{id:!0,class:!0,href:!0});var Lbt=s(yF);p4e=n(Lbt,"SPAN",{});var xbt=s(p4e);T(GL.$$.fragment,xbt),xbt.forEach(t),Lbt.forEach(t),zar=i(bGe),_4e=n(bGe,"SPAN",{});var $bt=s(_4e);War=r($bt,"AutoModelForMaskedImageModeling"),$bt.forEach(t),bGe.forEach(t),hje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(OL.$$.fragment,il),Qar=i(il),Ad=n(il,"P",{});var lee=s(Ad);Har=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Vz=n(lee,"A",{href:!0});var kbt=s(Vz);Uar=r(kbt,"from_pretrained()"),kbt.forEach(t),Jar=r(lee," class method or the "),Xz=n(lee,"A",{href:!0});var Sbt=s(Xz);Yar=r(Sbt,"from_config()"),Sbt.forEach(t),Kar=r(lee,` class
method.`),lee.forEach(t),Zar=i(il),VL=n(il,"P",{});var vGe=s(VL);enr=r(vGe,"This class cannot be instantiated directly using "),u4e=n(vGe,"CODE",{});var Rbt=s(u4e);onr=r(Rbt,"__init__()"),Rbt.forEach(t),rnr=r(vGe," (throws an error)."),vGe.forEach(t),tnr=i(il),Mt=n(il,"DIV",{class:!0});var b6=s(Mt);T(XL.$$.fragment,b6),anr=i(b6),b4e=n(b6,"P",{});var Pbt=s(b4e);nnr=r(Pbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pbt.forEach(t),snr=i(b6),yd=n(b6,"P",{});var iee=s(yd);lnr=r(iee,`Note:
Loading a model from its configuration file does `),v4e=n(iee,"STRONG",{});var Bbt=s(v4e);inr=r(Bbt,"not"),Bbt.forEach(t),dnr=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(iee,"A",{href:!0});var Ibt=s(zz);cnr=r(Ibt,"from_pretrained()"),Ibt.forEach(t),fnr=r(iee," to load the model weights."),iee.forEach(t),mnr=i(b6),T(LF.$$.fragment,b6),b6.forEach(t),gnr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(zL.$$.fragment,va),hnr=i(va),F4e=n(va,"P",{});var Nbt=s(F4e);pnr=r(Nbt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Nbt.forEach(t),_nr=i(va),Wa=n(va,"P",{});var v6=s(Wa);unr=r(v6,"The model class to instantiate is selected based on the "),T4e=n(v6,"CODE",{});var qbt=s(T4e);bnr=r(qbt,"model_type"),qbt.forEach(t),vnr=r(v6,` property of the config object (either
passed as an argument or loaded from `),M4e=n(v6,"CODE",{});var jbt=s(M4e);Fnr=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),Tnr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(v6,"CODE",{});var Dbt=s(E4e);Mnr=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),Enr=r(v6,":"),v6.forEach(t),Cnr=i(va),Ld=n(va,"UL",{});var dee=s(Ld);xF=n(dee,"LI",{});var vSe=s(xF);C4e=n(vSe,"STRONG",{});var Gbt=s(C4e);wnr=r(Gbt,"deit"),Gbt.forEach(t),Anr=r(vSe," \u2014 "),Wz=n(vSe,"A",{href:!0});var Obt=s(Wz);ynr=r(Obt,"DeiTForMaskedImageModeling"),Obt.forEach(t),Lnr=r(vSe," (DeiT model)"),vSe.forEach(t),xnr=i(dee),$F=n(dee,"LI",{});var FSe=s($F);w4e=n(FSe,"STRONG",{});var Vbt=s(w4e);$nr=r(Vbt,"swin"),Vbt.forEach(t),knr=r(FSe," \u2014 "),Qz=n(FSe,"A",{href:!0});var Xbt=s(Qz);Snr=r(Xbt,"SwinForMaskedImageModeling"),Xbt.forEach(t),Rnr=r(FSe," (Swin model)"),FSe.forEach(t),Pnr=i(dee),kF=n(dee,"LI",{});var TSe=s(kF);A4e=n(TSe,"STRONG",{});var zbt=s(A4e);Bnr=r(zbt,"vit"),zbt.forEach(t),Inr=r(TSe," \u2014 "),Hz=n(TSe,"A",{href:!0});var Wbt=s(Hz);Nnr=r(Wbt,"ViTForMaskedImageModeling"),Wbt.forEach(t),qnr=r(TSe," (ViT model)"),TSe.forEach(t),dee.forEach(t),jnr=i(va),SF=n(va,"P",{});var MSe=s(SF);Dnr=r(MSe,"The model is set in evaluation mode by default using "),y4e=n(MSe,"CODE",{});var Qbt=s(y4e);Gnr=r(Qbt,"model.eval()"),Qbt.forEach(t),Onr=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L4e=n(MSe,"CODE",{});var Hbt=s(L4e);Vnr=r(Hbt,"model.train()"),Hbt.forEach(t),MSe.forEach(t),Xnr=i(va),T(RF.$$.fragment,va),va.forEach(t),il.forEach(t),pje=i(f),xd=n(f,"H2",{class:!0});var FGe=s(xd);PF=n(FGe,"A",{id:!0,class:!0,href:!0});var Ubt=s(PF);x4e=n(Ubt,"SPAN",{});var Jbt=s(x4e);T(WL.$$.fragment,Jbt),Jbt.forEach(t),Ubt.forEach(t),znr=i(FGe),$4e=n(FGe,"SPAN",{});var Ybt=s($4e);Wnr=r(Ybt,"AutoModelForObjectDetection"),Ybt.forEach(t),FGe.forEach(t),_je=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(QL.$$.fragment,dl),Qnr=i(dl),$d=n(dl,"P",{});var cee=s($d);Hnr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Uz=n(cee,"A",{href:!0});var Kbt=s(Uz);Unr=r(Kbt,"from_pretrained()"),Kbt.forEach(t),Jnr=r(cee," class method or the "),Jz=n(cee,"A",{href:!0});var Zbt=s(Jz);Ynr=r(Zbt,"from_config()"),Zbt.forEach(t),Knr=r(cee,` class
method.`),cee.forEach(t),Znr=i(dl),HL=n(dl,"P",{});var TGe=s(HL);esr=r(TGe,"This class cannot be instantiated directly using "),k4e=n(TGe,"CODE",{});var e2t=s(k4e);osr=r(e2t,"__init__()"),e2t.forEach(t),rsr=r(TGe," (throws an error)."),TGe.forEach(t),tsr=i(dl),Et=n(dl,"DIV",{class:!0});var F6=s(Et);T(UL.$$.fragment,F6),asr=i(F6),S4e=n(F6,"P",{});var o2t=s(S4e);nsr=r(o2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),o2t.forEach(t),ssr=i(F6),kd=n(F6,"P",{});var fee=s(kd);lsr=r(fee,`Note:
Loading a model from its configuration file does `),R4e=n(fee,"STRONG",{});var r2t=s(R4e);isr=r(r2t,"not"),r2t.forEach(t),dsr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(fee,"A",{href:!0});var t2t=s(Yz);csr=r(t2t,"from_pretrained()"),t2t.forEach(t),fsr=r(fee," to load the model weights."),fee.forEach(t),msr=i(F6),T(BF.$$.fragment,F6),F6.forEach(t),gsr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(JL.$$.fragment,Fa),hsr=i(Fa),P4e=n(Fa,"P",{});var a2t=s(P4e);psr=r(a2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),a2t.forEach(t),_sr=i(Fa),Qa=n(Fa,"P",{});var T6=s(Qa);usr=r(T6,"The model class to instantiate is selected based on the "),B4e=n(T6,"CODE",{});var n2t=s(B4e);bsr=r(n2t,"model_type"),n2t.forEach(t),vsr=r(T6,` property of the config object (either
passed as an argument or loaded from `),I4e=n(T6,"CODE",{});var s2t=s(I4e);Fsr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),Tsr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(T6,"CODE",{});var l2t=s(N4e);Msr=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),Esr=r(T6,":"),T6.forEach(t),Csr=i(Fa),YL=n(Fa,"UL",{});var MGe=s(YL);IF=n(MGe,"LI",{});var ESe=s(IF);q4e=n(ESe,"STRONG",{});var i2t=s(q4e);wsr=r(i2t,"detr"),i2t.forEach(t),Asr=r(ESe," \u2014 "),Kz=n(ESe,"A",{href:!0});var d2t=s(Kz);ysr=r(d2t,"DetrForObjectDetection"),d2t.forEach(t),Lsr=r(ESe," (DETR model)"),ESe.forEach(t),xsr=i(MGe),NF=n(MGe,"LI",{});var CSe=s(NF);j4e=n(CSe,"STRONG",{});var c2t=s(j4e);$sr=r(c2t,"yolos"),c2t.forEach(t),ksr=r(CSe," \u2014 "),Zz=n(CSe,"A",{href:!0});var f2t=s(Zz);Ssr=r(f2t,"YolosForObjectDetection"),f2t.forEach(t),Rsr=r(CSe," (YOLOS model)"),CSe.forEach(t),MGe.forEach(t),Psr=i(Fa),qF=n(Fa,"P",{});var wSe=s(qF);Bsr=r(wSe,"The model is set in evaluation mode by default using "),D4e=n(wSe,"CODE",{});var m2t=s(D4e);Isr=r(m2t,"model.eval()"),m2t.forEach(t),Nsr=r(wSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=n(wSe,"CODE",{});var g2t=s(G4e);qsr=r(g2t,"model.train()"),g2t.forEach(t),wSe.forEach(t),jsr=i(Fa),T(jF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),uje=i(f),Sd=n(f,"H2",{class:!0});var EGe=s(Sd);DF=n(EGe,"A",{id:!0,class:!0,href:!0});var h2t=s(DF);O4e=n(h2t,"SPAN",{});var p2t=s(O4e);T(KL.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),Dsr=i(EGe),V4e=n(EGe,"SPAN",{});var _2t=s(V4e);Gsr=r(_2t,"AutoModelForImageSegmentation"),_2t.forEach(t),EGe.forEach(t),bje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(ZL.$$.fragment,cl),Osr=i(cl),Rd=n(cl,"P",{});var mee=s(Rd);Vsr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eW=n(mee,"A",{href:!0});var u2t=s(eW);Xsr=r(u2t,"from_pretrained()"),u2t.forEach(t),zsr=r(mee," class method or the "),oW=n(mee,"A",{href:!0});var b2t=s(oW);Wsr=r(b2t,"from_config()"),b2t.forEach(t),Qsr=r(mee,` class
method.`),mee.forEach(t),Hsr=i(cl),e8=n(cl,"P",{});var CGe=s(e8);Usr=r(CGe,"This class cannot be instantiated directly using "),X4e=n(CGe,"CODE",{});var v2t=s(X4e);Jsr=r(v2t,"__init__()"),v2t.forEach(t),Ysr=r(CGe," (throws an error)."),CGe.forEach(t),Ksr=i(cl),Ct=n(cl,"DIV",{class:!0});var M6=s(Ct);T(o8.$$.fragment,M6),Zsr=i(M6),z4e=n(M6,"P",{});var F2t=s(z4e);elr=r(F2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),F2t.forEach(t),olr=i(M6),Pd=n(M6,"P",{});var gee=s(Pd);rlr=r(gee,`Note:
Loading a model from its configuration file does `),W4e=n(gee,"STRONG",{});var T2t=s(W4e);tlr=r(T2t,"not"),T2t.forEach(t),alr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(gee,"A",{href:!0});var M2t=s(rW);nlr=r(M2t,"from_pretrained()"),M2t.forEach(t),slr=r(gee," to load the model weights."),gee.forEach(t),llr=i(M6),T(GF.$$.fragment,M6),M6.forEach(t),ilr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(r8.$$.fragment,Ta),dlr=i(Ta),Q4e=n(Ta,"P",{});var E2t=s(Q4e);clr=r(E2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),E2t.forEach(t),flr=i(Ta),Ha=n(Ta,"P",{});var E6=s(Ha);mlr=r(E6,"The model class to instantiate is selected based on the "),H4e=n(E6,"CODE",{});var C2t=s(H4e);glr=r(C2t,"model_type"),C2t.forEach(t),hlr=r(E6,` property of the config object (either
passed as an argument or loaded from `),U4e=n(E6,"CODE",{});var w2t=s(U4e);plr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),_lr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(E6,"CODE",{});var A2t=s(J4e);ulr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),blr=r(E6,":"),E6.forEach(t),vlr=i(Ta),Y4e=n(Ta,"UL",{});var y2t=s(Y4e);OF=n(y2t,"LI",{});var ASe=s(OF);K4e=n(ASe,"STRONG",{});var L2t=s(K4e);Flr=r(L2t,"detr"),L2t.forEach(t),Tlr=r(ASe," \u2014 "),tW=n(ASe,"A",{href:!0});var x2t=s(tW);Mlr=r(x2t,"DetrForSegmentation"),x2t.forEach(t),Elr=r(ASe," (DETR model)"),ASe.forEach(t),y2t.forEach(t),Clr=i(Ta),VF=n(Ta,"P",{});var ySe=s(VF);wlr=r(ySe,"The model is set in evaluation mode by default using "),Z4e=n(ySe,"CODE",{});var $2t=s(Z4e);Alr=r($2t,"model.eval()"),$2t.forEach(t),ylr=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(ySe,"CODE",{});var k2t=s(e1e);Llr=r(k2t,"model.train()"),k2t.forEach(t),ySe.forEach(t),xlr=i(Ta),T(XF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),vje=i(f),Bd=n(f,"H2",{class:!0});var wGe=s(Bd);zF=n(wGe,"A",{id:!0,class:!0,href:!0});var S2t=s(zF);o1e=n(S2t,"SPAN",{});var R2t=s(o1e);T(t8.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),$lr=i(wGe),r1e=n(wGe,"SPAN",{});var P2t=s(r1e);klr=r(P2t,"AutoModelForSemanticSegmentation"),P2t.forEach(t),wGe.forEach(t),Fje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(a8.$$.fragment,fl),Slr=i(fl),Id=n(fl,"P",{});var hee=s(Id);Rlr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aW=n(hee,"A",{href:!0});var B2t=s(aW);Plr=r(B2t,"from_pretrained()"),B2t.forEach(t),Blr=r(hee," class method or the "),nW=n(hee,"A",{href:!0});var I2t=s(nW);Ilr=r(I2t,"from_config()"),I2t.forEach(t),Nlr=r(hee,` class
method.`),hee.forEach(t),qlr=i(fl),n8=n(fl,"P",{});var AGe=s(n8);jlr=r(AGe,"This class cannot be instantiated directly using "),t1e=n(AGe,"CODE",{});var N2t=s(t1e);Dlr=r(N2t,"__init__()"),N2t.forEach(t),Glr=r(AGe," (throws an error)."),AGe.forEach(t),Olr=i(fl),wt=n(fl,"DIV",{class:!0});var C6=s(wt);T(s8.$$.fragment,C6),Vlr=i(C6),a1e=n(C6,"P",{});var q2t=s(a1e);Xlr=r(q2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),q2t.forEach(t),zlr=i(C6),Nd=n(C6,"P",{});var pee=s(Nd);Wlr=r(pee,`Note:
Loading a model from its configuration file does `),n1e=n(pee,"STRONG",{});var j2t=s(n1e);Qlr=r(j2t,"not"),j2t.forEach(t),Hlr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(pee,"A",{href:!0});var D2t=s(sW);Ulr=r(D2t,"from_pretrained()"),D2t.forEach(t),Jlr=r(pee," to load the model weights."),pee.forEach(t),Ylr=i(C6),T(WF.$$.fragment,C6),C6.forEach(t),Klr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(l8.$$.fragment,Ma),Zlr=i(Ma),s1e=n(Ma,"P",{});var G2t=s(s1e);eir=r(G2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),G2t.forEach(t),oir=i(Ma),Ua=n(Ma,"P",{});var w6=s(Ua);rir=r(w6,"The model class to instantiate is selected based on the "),l1e=n(w6,"CODE",{});var O2t=s(l1e);tir=r(O2t,"model_type"),O2t.forEach(t),air=r(w6,` property of the config object (either
passed as an argument or loaded from `),i1e=n(w6,"CODE",{});var V2t=s(i1e);nir=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),sir=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(w6,"CODE",{});var X2t=s(d1e);lir=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),iir=r(w6,":"),w6.forEach(t),dir=i(Ma),Ja=n(Ma,"UL",{});var A6=s(Ja);QF=n(A6,"LI",{});var LSe=s(QF);c1e=n(LSe,"STRONG",{});var z2t=s(c1e);cir=r(z2t,"beit"),z2t.forEach(t),fir=r(LSe," \u2014 "),lW=n(LSe,"A",{href:!0});var W2t=s(lW);mir=r(W2t,"BeitForSemanticSegmentation"),W2t.forEach(t),gir=r(LSe," (BEiT model)"),LSe.forEach(t),hir=i(A6),HF=n(A6,"LI",{});var xSe=s(HF);f1e=n(xSe,"STRONG",{});var Q2t=s(f1e);pir=r(Q2t,"data2vec-vision"),Q2t.forEach(t),_ir=r(xSe," \u2014 "),iW=n(xSe,"A",{href:!0});var H2t=s(iW);uir=r(H2t,"Data2VecVisionForSemanticSegmentation"),H2t.forEach(t),bir=r(xSe," (Data2VecVision model)"),xSe.forEach(t),vir=i(A6),UF=n(A6,"LI",{});var $Se=s(UF);m1e=n($Se,"STRONG",{});var U2t=s(m1e);Fir=r(U2t,"dpt"),U2t.forEach(t),Tir=r($Se," \u2014 "),dW=n($Se,"A",{href:!0});var J2t=s(dW);Mir=r(J2t,"DPTForSemanticSegmentation"),J2t.forEach(t),Eir=r($Se," (DPT model)"),$Se.forEach(t),Cir=i(A6),JF=n(A6,"LI",{});var kSe=s(JF);g1e=n(kSe,"STRONG",{});var Y2t=s(g1e);wir=r(Y2t,"segformer"),Y2t.forEach(t),Air=r(kSe," \u2014 "),cW=n(kSe,"A",{href:!0});var K2t=s(cW);yir=r(K2t,"SegformerForSemanticSegmentation"),K2t.forEach(t),Lir=r(kSe," (SegFormer model)"),kSe.forEach(t),A6.forEach(t),xir=i(Ma),YF=n(Ma,"P",{});var SSe=s(YF);$ir=r(SSe,"The model is set in evaluation mode by default using "),h1e=n(SSe,"CODE",{});var Z2t=s(h1e);kir=r(Z2t,"model.eval()"),Z2t.forEach(t),Sir=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(SSe,"CODE",{});var evt=s(p1e);Rir=r(evt,"model.train()"),evt.forEach(t),SSe.forEach(t),Pir=i(Ma),T(KF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),Tje=i(f),qd=n(f,"H2",{class:!0});var yGe=s(qd);ZF=n(yGe,"A",{id:!0,class:!0,href:!0});var ovt=s(ZF);_1e=n(ovt,"SPAN",{});var rvt=s(_1e);T(i8.$$.fragment,rvt),rvt.forEach(t),ovt.forEach(t),Bir=i(yGe),u1e=n(yGe,"SPAN",{});var tvt=s(u1e);Iir=r(tvt,"AutoModelForInstanceSegmentation"),tvt.forEach(t),yGe.forEach(t),Mje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(d8.$$.fragment,ml),Nir=i(ml),jd=n(ml,"P",{});var _ee=s(jd);qir=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fW=n(_ee,"A",{href:!0});var avt=s(fW);jir=r(avt,"from_pretrained()"),avt.forEach(t),Dir=r(_ee," class method or the "),mW=n(_ee,"A",{href:!0});var nvt=s(mW);Gir=r(nvt,"from_config()"),nvt.forEach(t),Oir=r(_ee,` class
method.`),_ee.forEach(t),Vir=i(ml),c8=n(ml,"P",{});var LGe=s(c8);Xir=r(LGe,"This class cannot be instantiated directly using "),b1e=n(LGe,"CODE",{});var svt=s(b1e);zir=r(svt,"__init__()"),svt.forEach(t),Wir=r(LGe," (throws an error)."),LGe.forEach(t),Qir=i(ml),At=n(ml,"DIV",{class:!0});var y6=s(At);T(f8.$$.fragment,y6),Hir=i(y6),v1e=n(y6,"P",{});var lvt=s(v1e);Uir=r(lvt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lvt.forEach(t),Jir=i(y6),Dd=n(y6,"P",{});var uee=s(Dd);Yir=r(uee,`Note:
Loading a model from its configuration file does `),F1e=n(uee,"STRONG",{});var ivt=s(F1e);Kir=r(ivt,"not"),ivt.forEach(t),Zir=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(uee,"A",{href:!0});var dvt=s(gW);edr=r(dvt,"from_pretrained()"),dvt.forEach(t),odr=r(uee," to load the model weights."),uee.forEach(t),rdr=i(y6),T(eT.$$.fragment,y6),y6.forEach(t),tdr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(m8.$$.fragment,Ea),adr=i(Ea),T1e=n(Ea,"P",{});var cvt=s(T1e);ndr=r(cvt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),cvt.forEach(t),sdr=i(Ea),Ya=n(Ea,"P",{});var L6=s(Ya);ldr=r(L6,"The model class to instantiate is selected based on the "),M1e=n(L6,"CODE",{});var fvt=s(M1e);idr=r(fvt,"model_type"),fvt.forEach(t),ddr=r(L6,` property of the config object (either
passed as an argument or loaded from `),E1e=n(L6,"CODE",{});var mvt=s(E1e);cdr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),fdr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(L6,"CODE",{});var gvt=s(C1e);mdr=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),gdr=r(L6,":"),L6.forEach(t),hdr=i(Ea),w1e=n(Ea,"UL",{});var hvt=s(w1e);oT=n(hvt,"LI",{});var RSe=s(oT);A1e=n(RSe,"STRONG",{});var pvt=s(A1e);pdr=r(pvt,"maskformer"),pvt.forEach(t),_dr=r(RSe," \u2014 "),hW=n(RSe,"A",{href:!0});var _vt=s(hW);udr=r(_vt,"MaskFormerForInstanceSegmentation"),_vt.forEach(t),bdr=r(RSe," (MaskFormer model)"),RSe.forEach(t),hvt.forEach(t),vdr=i(Ea),rT=n(Ea,"P",{});var PSe=s(rT);Fdr=r(PSe,"The model is set in evaluation mode by default using "),y1e=n(PSe,"CODE",{});var uvt=s(y1e);Tdr=r(uvt,"model.eval()"),uvt.forEach(t),Mdr=r(PSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=n(PSe,"CODE",{});var bvt=s(L1e);Edr=r(bvt,"model.train()"),bvt.forEach(t),PSe.forEach(t),Cdr=i(Ea),T(tT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),Eje=i(f),Gd=n(f,"H2",{class:!0});var xGe=s(Gd);aT=n(xGe,"A",{id:!0,class:!0,href:!0});var vvt=s(aT);x1e=n(vvt,"SPAN",{});var Fvt=s(x1e);T(g8.$$.fragment,Fvt),Fvt.forEach(t),vvt.forEach(t),wdr=i(xGe),$1e=n(xGe,"SPAN",{});var Tvt=s($1e);Adr=r(Tvt,"TFAutoModel"),Tvt.forEach(t),xGe.forEach(t),Cje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(h8.$$.fragment,gl),ydr=i(gl),Od=n(gl,"P",{});var bee=s(Od);Ldr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pW=n(bee,"A",{href:!0});var Mvt=s(pW);xdr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),$dr=r(bee," class method or the "),_W=n(bee,"A",{href:!0});var Evt=s(_W);kdr=r(Evt,"from_config()"),Evt.forEach(t),Sdr=r(bee,` class
method.`),bee.forEach(t),Rdr=i(gl),p8=n(gl,"P",{});var $Ge=s(p8);Pdr=r($Ge,"This class cannot be instantiated directly using "),k1e=n($Ge,"CODE",{});var Cvt=s(k1e);Bdr=r(Cvt,"__init__()"),Cvt.forEach(t),Idr=r($Ge," (throws an error)."),$Ge.forEach(t),Ndr=i(gl),yt=n(gl,"DIV",{class:!0});var x6=s(yt);T(_8.$$.fragment,x6),qdr=i(x6),S1e=n(x6,"P",{});var wvt=s(S1e);jdr=r(wvt,"Instantiates one of the base model classes of the library from a configuration."),wvt.forEach(t),Ddr=i(x6),Vd=n(x6,"P",{});var vee=s(Vd);Gdr=r(vee,`Note:
Loading a model from its configuration file does `),R1e=n(vee,"STRONG",{});var Avt=s(R1e);Odr=r(Avt,"not"),Avt.forEach(t),Vdr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(vee,"A",{href:!0});var yvt=s(uW);Xdr=r(yvt,"from_pretrained()"),yvt.forEach(t),zdr=r(vee," to load the model weights."),vee.forEach(t),Wdr=i(x6),T(nT.$$.fragment,x6),x6.forEach(t),Qdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(u8.$$.fragment,hl),Hdr=i(hl),P1e=n(hl,"P",{});var Lvt=s(P1e);Udr=r(Lvt,"Instantiate one of the base model classes of the library from a pretrained model."),Lvt.forEach(t),Jdr=i(hl),Ka=n(hl,"P",{});var $6=s(Ka);Ydr=r($6,"The model class to instantiate is selected based on the "),B1e=n($6,"CODE",{});var xvt=s(B1e);Kdr=r(xvt,"model_type"),xvt.forEach(t),Zdr=r($6,` property of the config object (either
passed as an argument or loaded from `),I1e=n($6,"CODE",{});var $vt=s(I1e);ecr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),ocr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n($6,"CODE",{});var kvt=s(N1e);rcr=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),tcr=r($6,":"),$6.forEach(t),acr=i(hl),q=n(hl,"UL",{});var D=s(q);sT=n(D,"LI",{});var BSe=s(sT);q1e=n(BSe,"STRONG",{});var Svt=s(q1e);ncr=r(Svt,"albert"),Svt.forEach(t),scr=r(BSe," \u2014 "),bW=n(BSe,"A",{href:!0});var Rvt=s(bW);lcr=r(Rvt,"TFAlbertModel"),Rvt.forEach(t),icr=r(BSe," (ALBERT model)"),BSe.forEach(t),dcr=i(D),lT=n(D,"LI",{});var ISe=s(lT);j1e=n(ISe,"STRONG",{});var Pvt=s(j1e);ccr=r(Pvt,"bart"),Pvt.forEach(t),fcr=r(ISe," \u2014 "),vW=n(ISe,"A",{href:!0});var Bvt=s(vW);mcr=r(Bvt,"TFBartModel"),Bvt.forEach(t),gcr=r(ISe," (BART model)"),ISe.forEach(t),hcr=i(D),iT=n(D,"LI",{});var NSe=s(iT);D1e=n(NSe,"STRONG",{});var Ivt=s(D1e);pcr=r(Ivt,"bert"),Ivt.forEach(t),_cr=r(NSe," \u2014 "),FW=n(NSe,"A",{href:!0});var Nvt=s(FW);ucr=r(Nvt,"TFBertModel"),Nvt.forEach(t),bcr=r(NSe," (BERT model)"),NSe.forEach(t),vcr=i(D),dT=n(D,"LI",{});var qSe=s(dT);G1e=n(qSe,"STRONG",{});var qvt=s(G1e);Fcr=r(qvt,"blenderbot"),qvt.forEach(t),Tcr=r(qSe," \u2014 "),TW=n(qSe,"A",{href:!0});var jvt=s(TW);Mcr=r(jvt,"TFBlenderbotModel"),jvt.forEach(t),Ecr=r(qSe," (Blenderbot model)"),qSe.forEach(t),Ccr=i(D),cT=n(D,"LI",{});var jSe=s(cT);O1e=n(jSe,"STRONG",{});var Dvt=s(O1e);wcr=r(Dvt,"blenderbot-small"),Dvt.forEach(t),Acr=r(jSe," \u2014 "),MW=n(jSe,"A",{href:!0});var Gvt=s(MW);ycr=r(Gvt,"TFBlenderbotSmallModel"),Gvt.forEach(t),Lcr=r(jSe," (BlenderbotSmall model)"),jSe.forEach(t),xcr=i(D),fT=n(D,"LI",{});var DSe=s(fT);V1e=n(DSe,"STRONG",{});var Ovt=s(V1e);$cr=r(Ovt,"camembert"),Ovt.forEach(t),kcr=r(DSe," \u2014 "),EW=n(DSe,"A",{href:!0});var Vvt=s(EW);Scr=r(Vvt,"TFCamembertModel"),Vvt.forEach(t),Rcr=r(DSe," (CamemBERT model)"),DSe.forEach(t),Pcr=i(D),mT=n(D,"LI",{});var GSe=s(mT);X1e=n(GSe,"STRONG",{});var Xvt=s(X1e);Bcr=r(Xvt,"clip"),Xvt.forEach(t),Icr=r(GSe," \u2014 "),CW=n(GSe,"A",{href:!0});var zvt=s(CW);Ncr=r(zvt,"TFCLIPModel"),zvt.forEach(t),qcr=r(GSe," (CLIP model)"),GSe.forEach(t),jcr=i(D),gT=n(D,"LI",{});var OSe=s(gT);z1e=n(OSe,"STRONG",{});var Wvt=s(z1e);Dcr=r(Wvt,"convbert"),Wvt.forEach(t),Gcr=r(OSe," \u2014 "),wW=n(OSe,"A",{href:!0});var Qvt=s(wW);Ocr=r(Qvt,"TFConvBertModel"),Qvt.forEach(t),Vcr=r(OSe," (ConvBERT model)"),OSe.forEach(t),Xcr=i(D),hT=n(D,"LI",{});var VSe=s(hT);W1e=n(VSe,"STRONG",{});var Hvt=s(W1e);zcr=r(Hvt,"convnext"),Hvt.forEach(t),Wcr=r(VSe," \u2014 "),AW=n(VSe,"A",{href:!0});var Uvt=s(AW);Qcr=r(Uvt,"TFConvNextModel"),Uvt.forEach(t),Hcr=r(VSe," (ConvNext model)"),VSe.forEach(t),Ucr=i(D),pT=n(D,"LI",{});var XSe=s(pT);Q1e=n(XSe,"STRONG",{});var Jvt=s(Q1e);Jcr=r(Jvt,"ctrl"),Jvt.forEach(t),Ycr=r(XSe," \u2014 "),yW=n(XSe,"A",{href:!0});var Yvt=s(yW);Kcr=r(Yvt,"TFCTRLModel"),Yvt.forEach(t),Zcr=r(XSe," (CTRL model)"),XSe.forEach(t),efr=i(D),_T=n(D,"LI",{});var zSe=s(_T);H1e=n(zSe,"STRONG",{});var Kvt=s(H1e);ofr=r(Kvt,"data2vec-vision"),Kvt.forEach(t),rfr=r(zSe," \u2014 "),LW=n(zSe,"A",{href:!0});var Zvt=s(LW);tfr=r(Zvt,"TFData2VecVisionModel"),Zvt.forEach(t),afr=r(zSe," (Data2VecVision model)"),zSe.forEach(t),nfr=i(D),uT=n(D,"LI",{});var WSe=s(uT);U1e=n(WSe,"STRONG",{});var eFt=s(U1e);sfr=r(eFt,"deberta"),eFt.forEach(t),lfr=r(WSe," \u2014 "),xW=n(WSe,"A",{href:!0});var oFt=s(xW);ifr=r(oFt,"TFDebertaModel"),oFt.forEach(t),dfr=r(WSe," (DeBERTa model)"),WSe.forEach(t),cfr=i(D),bT=n(D,"LI",{});var QSe=s(bT);J1e=n(QSe,"STRONG",{});var rFt=s(J1e);ffr=r(rFt,"deberta-v2"),rFt.forEach(t),mfr=r(QSe," \u2014 "),$W=n(QSe,"A",{href:!0});var tFt=s($W);gfr=r(tFt,"TFDebertaV2Model"),tFt.forEach(t),hfr=r(QSe," (DeBERTa-v2 model)"),QSe.forEach(t),pfr=i(D),vT=n(D,"LI",{});var HSe=s(vT);Y1e=n(HSe,"STRONG",{});var aFt=s(Y1e);_fr=r(aFt,"distilbert"),aFt.forEach(t),ufr=r(HSe," \u2014 "),kW=n(HSe,"A",{href:!0});var nFt=s(kW);bfr=r(nFt,"TFDistilBertModel"),nFt.forEach(t),vfr=r(HSe," (DistilBERT model)"),HSe.forEach(t),Ffr=i(D),FT=n(D,"LI",{});var USe=s(FT);K1e=n(USe,"STRONG",{});var sFt=s(K1e);Tfr=r(sFt,"dpr"),sFt.forEach(t),Mfr=r(USe," \u2014 "),SW=n(USe,"A",{href:!0});var lFt=s(SW);Efr=r(lFt,"TFDPRQuestionEncoder"),lFt.forEach(t),Cfr=r(USe," (DPR model)"),USe.forEach(t),wfr=i(D),TT=n(D,"LI",{});var JSe=s(TT);Z1e=n(JSe,"STRONG",{});var iFt=s(Z1e);Afr=r(iFt,"electra"),iFt.forEach(t),yfr=r(JSe," \u2014 "),RW=n(JSe,"A",{href:!0});var dFt=s(RW);Lfr=r(dFt,"TFElectraModel"),dFt.forEach(t),xfr=r(JSe," (ELECTRA model)"),JSe.forEach(t),$fr=i(D),MT=n(D,"LI",{});var YSe=s(MT);e7e=n(YSe,"STRONG",{});var cFt=s(e7e);kfr=r(cFt,"flaubert"),cFt.forEach(t),Sfr=r(YSe," \u2014 "),PW=n(YSe,"A",{href:!0});var fFt=s(PW);Rfr=r(fFt,"TFFlaubertModel"),fFt.forEach(t),Pfr=r(YSe," (FlauBERT model)"),YSe.forEach(t),Bfr=i(D),Is=n(D,"LI",{});var U$=s(Is);o7e=n(U$,"STRONG",{});var mFt=s(o7e);Ifr=r(mFt,"funnel"),mFt.forEach(t),Nfr=r(U$," \u2014 "),BW=n(U$,"A",{href:!0});var gFt=s(BW);qfr=r(gFt,"TFFunnelModel"),gFt.forEach(t),jfr=r(U$," or "),IW=n(U$,"A",{href:!0});var hFt=s(IW);Dfr=r(hFt,"TFFunnelBaseModel"),hFt.forEach(t),Gfr=r(U$," (Funnel Transformer model)"),U$.forEach(t),Ofr=i(D),ET=n(D,"LI",{});var KSe=s(ET);r7e=n(KSe,"STRONG",{});var pFt=s(r7e);Vfr=r(pFt,"gpt2"),pFt.forEach(t),Xfr=r(KSe," \u2014 "),NW=n(KSe,"A",{href:!0});var _Ft=s(NW);zfr=r(_Ft,"TFGPT2Model"),_Ft.forEach(t),Wfr=r(KSe," (OpenAI GPT-2 model)"),KSe.forEach(t),Qfr=i(D),CT=n(D,"LI",{});var ZSe=s(CT);t7e=n(ZSe,"STRONG",{});var uFt=s(t7e);Hfr=r(uFt,"gptj"),uFt.forEach(t),Ufr=r(ZSe," \u2014 "),qW=n(ZSe,"A",{href:!0});var bFt=s(qW);Jfr=r(bFt,"TFGPTJModel"),bFt.forEach(t),Yfr=r(ZSe," (GPT-J model)"),ZSe.forEach(t),Kfr=i(D),wT=n(D,"LI",{});var eRe=s(wT);a7e=n(eRe,"STRONG",{});var vFt=s(a7e);Zfr=r(vFt,"hubert"),vFt.forEach(t),emr=r(eRe," \u2014 "),jW=n(eRe,"A",{href:!0});var FFt=s(jW);omr=r(FFt,"TFHubertModel"),FFt.forEach(t),rmr=r(eRe," (Hubert model)"),eRe.forEach(t),tmr=i(D),AT=n(D,"LI",{});var oRe=s(AT);n7e=n(oRe,"STRONG",{});var TFt=s(n7e);amr=r(TFt,"layoutlm"),TFt.forEach(t),nmr=r(oRe," \u2014 "),DW=n(oRe,"A",{href:!0});var MFt=s(DW);smr=r(MFt,"TFLayoutLMModel"),MFt.forEach(t),lmr=r(oRe," (LayoutLM model)"),oRe.forEach(t),imr=i(D),yT=n(D,"LI",{});var rRe=s(yT);s7e=n(rRe,"STRONG",{});var EFt=s(s7e);dmr=r(EFt,"led"),EFt.forEach(t),cmr=r(rRe," \u2014 "),GW=n(rRe,"A",{href:!0});var CFt=s(GW);fmr=r(CFt,"TFLEDModel"),CFt.forEach(t),mmr=r(rRe," (LED model)"),rRe.forEach(t),gmr=i(D),LT=n(D,"LI",{});var tRe=s(LT);l7e=n(tRe,"STRONG",{});var wFt=s(l7e);hmr=r(wFt,"longformer"),wFt.forEach(t),pmr=r(tRe," \u2014 "),OW=n(tRe,"A",{href:!0});var AFt=s(OW);_mr=r(AFt,"TFLongformerModel"),AFt.forEach(t),umr=r(tRe," (Longformer model)"),tRe.forEach(t),bmr=i(D),xT=n(D,"LI",{});var aRe=s(xT);i7e=n(aRe,"STRONG",{});var yFt=s(i7e);vmr=r(yFt,"lxmert"),yFt.forEach(t),Fmr=r(aRe," \u2014 "),VW=n(aRe,"A",{href:!0});var LFt=s(VW);Tmr=r(LFt,"TFLxmertModel"),LFt.forEach(t),Mmr=r(aRe," (LXMERT model)"),aRe.forEach(t),Emr=i(D),$T=n(D,"LI",{});var nRe=s($T);d7e=n(nRe,"STRONG",{});var xFt=s(d7e);Cmr=r(xFt,"marian"),xFt.forEach(t),wmr=r(nRe," \u2014 "),XW=n(nRe,"A",{href:!0});var $Ft=s(XW);Amr=r($Ft,"TFMarianModel"),$Ft.forEach(t),ymr=r(nRe," (Marian model)"),nRe.forEach(t),Lmr=i(D),kT=n(D,"LI",{});var sRe=s(kT);c7e=n(sRe,"STRONG",{});var kFt=s(c7e);xmr=r(kFt,"mbart"),kFt.forEach(t),$mr=r(sRe," \u2014 "),zW=n(sRe,"A",{href:!0});var SFt=s(zW);kmr=r(SFt,"TFMBartModel"),SFt.forEach(t),Smr=r(sRe," (mBART model)"),sRe.forEach(t),Rmr=i(D),ST=n(D,"LI",{});var lRe=s(ST);f7e=n(lRe,"STRONG",{});var RFt=s(f7e);Pmr=r(RFt,"mobilebert"),RFt.forEach(t),Bmr=r(lRe," \u2014 "),WW=n(lRe,"A",{href:!0});var PFt=s(WW);Imr=r(PFt,"TFMobileBertModel"),PFt.forEach(t),Nmr=r(lRe," (MobileBERT model)"),lRe.forEach(t),qmr=i(D),RT=n(D,"LI",{});var iRe=s(RT);m7e=n(iRe,"STRONG",{});var BFt=s(m7e);jmr=r(BFt,"mpnet"),BFt.forEach(t),Dmr=r(iRe," \u2014 "),QW=n(iRe,"A",{href:!0});var IFt=s(QW);Gmr=r(IFt,"TFMPNetModel"),IFt.forEach(t),Omr=r(iRe," (MPNet model)"),iRe.forEach(t),Vmr=i(D),PT=n(D,"LI",{});var dRe=s(PT);g7e=n(dRe,"STRONG",{});var NFt=s(g7e);Xmr=r(NFt,"mt5"),NFt.forEach(t),zmr=r(dRe," \u2014 "),HW=n(dRe,"A",{href:!0});var qFt=s(HW);Wmr=r(qFt,"TFMT5Model"),qFt.forEach(t),Qmr=r(dRe," (mT5 model)"),dRe.forEach(t),Hmr=i(D),BT=n(D,"LI",{});var cRe=s(BT);h7e=n(cRe,"STRONG",{});var jFt=s(h7e);Umr=r(jFt,"openai-gpt"),jFt.forEach(t),Jmr=r(cRe," \u2014 "),UW=n(cRe,"A",{href:!0});var DFt=s(UW);Ymr=r(DFt,"TFOpenAIGPTModel"),DFt.forEach(t),Kmr=r(cRe," (OpenAI GPT model)"),cRe.forEach(t),Zmr=i(D),IT=n(D,"LI",{});var fRe=s(IT);p7e=n(fRe,"STRONG",{});var GFt=s(p7e);egr=r(GFt,"pegasus"),GFt.forEach(t),ogr=r(fRe," \u2014 "),JW=n(fRe,"A",{href:!0});var OFt=s(JW);rgr=r(OFt,"TFPegasusModel"),OFt.forEach(t),tgr=r(fRe," (Pegasus model)"),fRe.forEach(t),agr=i(D),NT=n(D,"LI",{});var mRe=s(NT);_7e=n(mRe,"STRONG",{});var VFt=s(_7e);ngr=r(VFt,"rembert"),VFt.forEach(t),sgr=r(mRe," \u2014 "),YW=n(mRe,"A",{href:!0});var XFt=s(YW);lgr=r(XFt,"TFRemBertModel"),XFt.forEach(t),igr=r(mRe," (RemBERT model)"),mRe.forEach(t),dgr=i(D),qT=n(D,"LI",{});var gRe=s(qT);u7e=n(gRe,"STRONG",{});var zFt=s(u7e);cgr=r(zFt,"roberta"),zFt.forEach(t),fgr=r(gRe," \u2014 "),KW=n(gRe,"A",{href:!0});var WFt=s(KW);mgr=r(WFt,"TFRobertaModel"),WFt.forEach(t),ggr=r(gRe," (RoBERTa model)"),gRe.forEach(t),hgr=i(D),jT=n(D,"LI",{});var hRe=s(jT);b7e=n(hRe,"STRONG",{});var QFt=s(b7e);pgr=r(QFt,"roformer"),QFt.forEach(t),_gr=r(hRe," \u2014 "),ZW=n(hRe,"A",{href:!0});var HFt=s(ZW);ugr=r(HFt,"TFRoFormerModel"),HFt.forEach(t),bgr=r(hRe," (RoFormer model)"),hRe.forEach(t),vgr=i(D),DT=n(D,"LI",{});var pRe=s(DT);v7e=n(pRe,"STRONG",{});var UFt=s(v7e);Fgr=r(UFt,"speech_to_text"),UFt.forEach(t),Tgr=r(pRe," \u2014 "),eQ=n(pRe,"A",{href:!0});var JFt=s(eQ);Mgr=r(JFt,"TFSpeech2TextModel"),JFt.forEach(t),Egr=r(pRe," (Speech2Text model)"),pRe.forEach(t),Cgr=i(D),GT=n(D,"LI",{});var _Re=s(GT);F7e=n(_Re,"STRONG",{});var YFt=s(F7e);wgr=r(YFt,"swin"),YFt.forEach(t),Agr=r(_Re," \u2014 "),oQ=n(_Re,"A",{href:!0});var KFt=s(oQ);ygr=r(KFt,"TFSwinModel"),KFt.forEach(t),Lgr=r(_Re," (Swin model)"),_Re.forEach(t),xgr=i(D),OT=n(D,"LI",{});var uRe=s(OT);T7e=n(uRe,"STRONG",{});var ZFt=s(T7e);$gr=r(ZFt,"t5"),ZFt.forEach(t),kgr=r(uRe," \u2014 "),rQ=n(uRe,"A",{href:!0});var eTt=s(rQ);Sgr=r(eTt,"TFT5Model"),eTt.forEach(t),Rgr=r(uRe," (T5 model)"),uRe.forEach(t),Pgr=i(D),VT=n(D,"LI",{});var bRe=s(VT);M7e=n(bRe,"STRONG",{});var oTt=s(M7e);Bgr=r(oTt,"tapas"),oTt.forEach(t),Igr=r(bRe," \u2014 "),tQ=n(bRe,"A",{href:!0});var rTt=s(tQ);Ngr=r(rTt,"TFTapasModel"),rTt.forEach(t),qgr=r(bRe," (TAPAS model)"),bRe.forEach(t),jgr=i(D),XT=n(D,"LI",{});var vRe=s(XT);E7e=n(vRe,"STRONG",{});var tTt=s(E7e);Dgr=r(tTt,"transfo-xl"),tTt.forEach(t),Ggr=r(vRe," \u2014 "),aQ=n(vRe,"A",{href:!0});var aTt=s(aQ);Ogr=r(aTt,"TFTransfoXLModel"),aTt.forEach(t),Vgr=r(vRe," (Transformer-XL model)"),vRe.forEach(t),Xgr=i(D),zT=n(D,"LI",{});var FRe=s(zT);C7e=n(FRe,"STRONG",{});var nTt=s(C7e);zgr=r(nTt,"vit"),nTt.forEach(t),Wgr=r(FRe," \u2014 "),nQ=n(FRe,"A",{href:!0});var sTt=s(nQ);Qgr=r(sTt,"TFViTModel"),sTt.forEach(t),Hgr=r(FRe," (ViT model)"),FRe.forEach(t),Ugr=i(D),WT=n(D,"LI",{});var TRe=s(WT);w7e=n(TRe,"STRONG",{});var lTt=s(w7e);Jgr=r(lTt,"vit_mae"),lTt.forEach(t),Ygr=r(TRe," \u2014 "),sQ=n(TRe,"A",{href:!0});var iTt=s(sQ);Kgr=r(iTt,"TFViTMAEModel"),iTt.forEach(t),Zgr=r(TRe," (ViTMAE model)"),TRe.forEach(t),ehr=i(D),QT=n(D,"LI",{});var MRe=s(QT);A7e=n(MRe,"STRONG",{});var dTt=s(A7e);ohr=r(dTt,"wav2vec2"),dTt.forEach(t),rhr=r(MRe," \u2014 "),lQ=n(MRe,"A",{href:!0});var cTt=s(lQ);thr=r(cTt,"TFWav2Vec2Model"),cTt.forEach(t),ahr=r(MRe," (Wav2Vec2 model)"),MRe.forEach(t),nhr=i(D),HT=n(D,"LI",{});var ERe=s(HT);y7e=n(ERe,"STRONG",{});var fTt=s(y7e);shr=r(fTt,"xlm"),fTt.forEach(t),lhr=r(ERe," \u2014 "),iQ=n(ERe,"A",{href:!0});var mTt=s(iQ);ihr=r(mTt,"TFXLMModel"),mTt.forEach(t),dhr=r(ERe," (XLM model)"),ERe.forEach(t),chr=i(D),UT=n(D,"LI",{});var CRe=s(UT);L7e=n(CRe,"STRONG",{});var gTt=s(L7e);fhr=r(gTt,"xlm-roberta"),gTt.forEach(t),mhr=r(CRe," \u2014 "),dQ=n(CRe,"A",{href:!0});var hTt=s(dQ);ghr=r(hTt,"TFXLMRobertaModel"),hTt.forEach(t),hhr=r(CRe," (XLM-RoBERTa model)"),CRe.forEach(t),phr=i(D),JT=n(D,"LI",{});var wRe=s(JT);x7e=n(wRe,"STRONG",{});var pTt=s(x7e);_hr=r(pTt,"xlnet"),pTt.forEach(t),uhr=r(wRe," \u2014 "),cQ=n(wRe,"A",{href:!0});var _Tt=s(cQ);bhr=r(_Tt,"TFXLNetModel"),_Tt.forEach(t),vhr=r(wRe," (XLNet model)"),wRe.forEach(t),D.forEach(t),Fhr=i(hl),T(YT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),wje=i(f),Xd=n(f,"H2",{class:!0});var kGe=s(Xd);KT=n(kGe,"A",{id:!0,class:!0,href:!0});var uTt=s(KT);$7e=n(uTt,"SPAN",{});var bTt=s($7e);T(b8.$$.fragment,bTt),bTt.forEach(t),uTt.forEach(t),Thr=i(kGe),k7e=n(kGe,"SPAN",{});var vTt=s(k7e);Mhr=r(vTt,"TFAutoModelForPreTraining"),vTt.forEach(t),kGe.forEach(t),Aje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(v8.$$.fragment,pl),Ehr=i(pl),zd=n(pl,"P",{});var Fee=s(zd);Chr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fQ=n(Fee,"A",{href:!0});var FTt=s(fQ);whr=r(FTt,"from_pretrained()"),FTt.forEach(t),Ahr=r(Fee," class method or the "),mQ=n(Fee,"A",{href:!0});var TTt=s(mQ);yhr=r(TTt,"from_config()"),TTt.forEach(t),Lhr=r(Fee,` class
method.`),Fee.forEach(t),xhr=i(pl),F8=n(pl,"P",{});var SGe=s(F8);$hr=r(SGe,"This class cannot be instantiated directly using "),S7e=n(SGe,"CODE",{});var MTt=s(S7e);khr=r(MTt,"__init__()"),MTt.forEach(t),Shr=r(SGe," (throws an error)."),SGe.forEach(t),Rhr=i(pl),Lt=n(pl,"DIV",{class:!0});var k6=s(Lt);T(T8.$$.fragment,k6),Phr=i(k6),R7e=n(k6,"P",{});var ETt=s(R7e);Bhr=r(ETt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ETt.forEach(t),Ihr=i(k6),Wd=n(k6,"P",{});var Tee=s(Wd);Nhr=r(Tee,`Note:
Loading a model from its configuration file does `),P7e=n(Tee,"STRONG",{});var CTt=s(P7e);qhr=r(CTt,"not"),CTt.forEach(t),jhr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(Tee,"A",{href:!0});var wTt=s(gQ);Dhr=r(wTt,"from_pretrained()"),wTt.forEach(t),Ghr=r(Tee," to load the model weights."),Tee.forEach(t),Ohr=i(k6),T(ZT.$$.fragment,k6),k6.forEach(t),Vhr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(M8.$$.fragment,_l),Xhr=i(_l),B7e=n(_l,"P",{});var ATt=s(B7e);zhr=r(ATt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ATt.forEach(t),Whr=i(_l),Za=n(_l,"P",{});var S6=s(Za);Qhr=r(S6,"The model class to instantiate is selected based on the "),I7e=n(S6,"CODE",{});var yTt=s(I7e);Hhr=r(yTt,"model_type"),yTt.forEach(t),Uhr=r(S6,` property of the config object (either
passed as an argument or loaded from `),N7e=n(S6,"CODE",{});var LTt=s(N7e);Jhr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),Yhr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(S6,"CODE",{});var xTt=s(q7e);Khr=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),Zhr=r(S6,":"),S6.forEach(t),epr=i(_l),se=n(_l,"UL",{});var le=s(se);eM=n(le,"LI",{});var ARe=s(eM);j7e=n(ARe,"STRONG",{});var $Tt=s(j7e);opr=r($Tt,"albert"),$Tt.forEach(t),rpr=r(ARe," \u2014 "),hQ=n(ARe,"A",{href:!0});var kTt=s(hQ);tpr=r(kTt,"TFAlbertForPreTraining"),kTt.forEach(t),apr=r(ARe," (ALBERT model)"),ARe.forEach(t),npr=i(le),oM=n(le,"LI",{});var yRe=s(oM);D7e=n(yRe,"STRONG",{});var STt=s(D7e);spr=r(STt,"bart"),STt.forEach(t),lpr=r(yRe," \u2014 "),pQ=n(yRe,"A",{href:!0});var RTt=s(pQ);ipr=r(RTt,"TFBartForConditionalGeneration"),RTt.forEach(t),dpr=r(yRe," (BART model)"),yRe.forEach(t),cpr=i(le),rM=n(le,"LI",{});var LRe=s(rM);G7e=n(LRe,"STRONG",{});var PTt=s(G7e);fpr=r(PTt,"bert"),PTt.forEach(t),mpr=r(LRe," \u2014 "),_Q=n(LRe,"A",{href:!0});var BTt=s(_Q);gpr=r(BTt,"TFBertForPreTraining"),BTt.forEach(t),hpr=r(LRe," (BERT model)"),LRe.forEach(t),ppr=i(le),tM=n(le,"LI",{});var xRe=s(tM);O7e=n(xRe,"STRONG",{});var ITt=s(O7e);_pr=r(ITt,"camembert"),ITt.forEach(t),upr=r(xRe," \u2014 "),uQ=n(xRe,"A",{href:!0});var NTt=s(uQ);bpr=r(NTt,"TFCamembertForMaskedLM"),NTt.forEach(t),vpr=r(xRe," (CamemBERT model)"),xRe.forEach(t),Fpr=i(le),aM=n(le,"LI",{});var $Re=s(aM);V7e=n($Re,"STRONG",{});var qTt=s(V7e);Tpr=r(qTt,"ctrl"),qTt.forEach(t),Mpr=r($Re," \u2014 "),bQ=n($Re,"A",{href:!0});var jTt=s(bQ);Epr=r(jTt,"TFCTRLLMHeadModel"),jTt.forEach(t),Cpr=r($Re," (CTRL model)"),$Re.forEach(t),wpr=i(le),nM=n(le,"LI",{});var kRe=s(nM);X7e=n(kRe,"STRONG",{});var DTt=s(X7e);Apr=r(DTt,"distilbert"),DTt.forEach(t),ypr=r(kRe," \u2014 "),vQ=n(kRe,"A",{href:!0});var GTt=s(vQ);Lpr=r(GTt,"TFDistilBertForMaskedLM"),GTt.forEach(t),xpr=r(kRe," (DistilBERT model)"),kRe.forEach(t),$pr=i(le),sM=n(le,"LI",{});var SRe=s(sM);z7e=n(SRe,"STRONG",{});var OTt=s(z7e);kpr=r(OTt,"electra"),OTt.forEach(t),Spr=r(SRe," \u2014 "),FQ=n(SRe,"A",{href:!0});var VTt=s(FQ);Rpr=r(VTt,"TFElectraForPreTraining"),VTt.forEach(t),Ppr=r(SRe," (ELECTRA model)"),SRe.forEach(t),Bpr=i(le),lM=n(le,"LI",{});var RRe=s(lM);W7e=n(RRe,"STRONG",{});var XTt=s(W7e);Ipr=r(XTt,"flaubert"),XTt.forEach(t),Npr=r(RRe," \u2014 "),TQ=n(RRe,"A",{href:!0});var zTt=s(TQ);qpr=r(zTt,"TFFlaubertWithLMHeadModel"),zTt.forEach(t),jpr=r(RRe," (FlauBERT model)"),RRe.forEach(t),Dpr=i(le),iM=n(le,"LI",{});var PRe=s(iM);Q7e=n(PRe,"STRONG",{});var WTt=s(Q7e);Gpr=r(WTt,"funnel"),WTt.forEach(t),Opr=r(PRe," \u2014 "),MQ=n(PRe,"A",{href:!0});var QTt=s(MQ);Vpr=r(QTt,"TFFunnelForPreTraining"),QTt.forEach(t),Xpr=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),zpr=i(le),dM=n(le,"LI",{});var BRe=s(dM);H7e=n(BRe,"STRONG",{});var HTt=s(H7e);Wpr=r(HTt,"gpt2"),HTt.forEach(t),Qpr=r(BRe," \u2014 "),EQ=n(BRe,"A",{href:!0});var UTt=s(EQ);Hpr=r(UTt,"TFGPT2LMHeadModel"),UTt.forEach(t),Upr=r(BRe," (OpenAI GPT-2 model)"),BRe.forEach(t),Jpr=i(le),cM=n(le,"LI",{});var IRe=s(cM);U7e=n(IRe,"STRONG",{});var JTt=s(U7e);Ypr=r(JTt,"layoutlm"),JTt.forEach(t),Kpr=r(IRe," \u2014 "),CQ=n(IRe,"A",{href:!0});var YTt=s(CQ);Zpr=r(YTt,"TFLayoutLMForMaskedLM"),YTt.forEach(t),e_r=r(IRe," (LayoutLM model)"),IRe.forEach(t),o_r=i(le),fM=n(le,"LI",{});var NRe=s(fM);J7e=n(NRe,"STRONG",{});var KTt=s(J7e);r_r=r(KTt,"lxmert"),KTt.forEach(t),t_r=r(NRe," \u2014 "),wQ=n(NRe,"A",{href:!0});var ZTt=s(wQ);a_r=r(ZTt,"TFLxmertForPreTraining"),ZTt.forEach(t),n_r=r(NRe," (LXMERT model)"),NRe.forEach(t),s_r=i(le),mM=n(le,"LI",{});var qRe=s(mM);Y7e=n(qRe,"STRONG",{});var eMt=s(Y7e);l_r=r(eMt,"mobilebert"),eMt.forEach(t),i_r=r(qRe," \u2014 "),AQ=n(qRe,"A",{href:!0});var oMt=s(AQ);d_r=r(oMt,"TFMobileBertForPreTraining"),oMt.forEach(t),c_r=r(qRe," (MobileBERT model)"),qRe.forEach(t),f_r=i(le),gM=n(le,"LI",{});var jRe=s(gM);K7e=n(jRe,"STRONG",{});var rMt=s(K7e);m_r=r(rMt,"mpnet"),rMt.forEach(t),g_r=r(jRe," \u2014 "),yQ=n(jRe,"A",{href:!0});var tMt=s(yQ);h_r=r(tMt,"TFMPNetForMaskedLM"),tMt.forEach(t),p_r=r(jRe," (MPNet model)"),jRe.forEach(t),__r=i(le),hM=n(le,"LI",{});var DRe=s(hM);Z7e=n(DRe,"STRONG",{});var aMt=s(Z7e);u_r=r(aMt,"openai-gpt"),aMt.forEach(t),b_r=r(DRe," \u2014 "),LQ=n(DRe,"A",{href:!0});var nMt=s(LQ);v_r=r(nMt,"TFOpenAIGPTLMHeadModel"),nMt.forEach(t),F_r=r(DRe," (OpenAI GPT model)"),DRe.forEach(t),T_r=i(le),pM=n(le,"LI",{});var GRe=s(pM);ebe=n(GRe,"STRONG",{});var sMt=s(ebe);M_r=r(sMt,"roberta"),sMt.forEach(t),E_r=r(GRe," \u2014 "),xQ=n(GRe,"A",{href:!0});var lMt=s(xQ);C_r=r(lMt,"TFRobertaForMaskedLM"),lMt.forEach(t),w_r=r(GRe," (RoBERTa model)"),GRe.forEach(t),A_r=i(le),_M=n(le,"LI",{});var ORe=s(_M);obe=n(ORe,"STRONG",{});var iMt=s(obe);y_r=r(iMt,"t5"),iMt.forEach(t),L_r=r(ORe," \u2014 "),$Q=n(ORe,"A",{href:!0});var dMt=s($Q);x_r=r(dMt,"TFT5ForConditionalGeneration"),dMt.forEach(t),$_r=r(ORe," (T5 model)"),ORe.forEach(t),k_r=i(le),uM=n(le,"LI",{});var VRe=s(uM);rbe=n(VRe,"STRONG",{});var cMt=s(rbe);S_r=r(cMt,"tapas"),cMt.forEach(t),R_r=r(VRe," \u2014 "),kQ=n(VRe,"A",{href:!0});var fMt=s(kQ);P_r=r(fMt,"TFTapasForMaskedLM"),fMt.forEach(t),B_r=r(VRe," (TAPAS model)"),VRe.forEach(t),I_r=i(le),bM=n(le,"LI",{});var XRe=s(bM);tbe=n(XRe,"STRONG",{});var mMt=s(tbe);N_r=r(mMt,"transfo-xl"),mMt.forEach(t),q_r=r(XRe," \u2014 "),SQ=n(XRe,"A",{href:!0});var gMt=s(SQ);j_r=r(gMt,"TFTransfoXLLMHeadModel"),gMt.forEach(t),D_r=r(XRe," (Transformer-XL model)"),XRe.forEach(t),G_r=i(le),vM=n(le,"LI",{});var zRe=s(vM);abe=n(zRe,"STRONG",{});var hMt=s(abe);O_r=r(hMt,"vit_mae"),hMt.forEach(t),V_r=r(zRe," \u2014 "),RQ=n(zRe,"A",{href:!0});var pMt=s(RQ);X_r=r(pMt,"TFViTMAEForPreTraining"),pMt.forEach(t),z_r=r(zRe," (ViTMAE model)"),zRe.forEach(t),W_r=i(le),FM=n(le,"LI",{});var WRe=s(FM);nbe=n(WRe,"STRONG",{});var _Mt=s(nbe);Q_r=r(_Mt,"xlm"),_Mt.forEach(t),H_r=r(WRe," \u2014 "),PQ=n(WRe,"A",{href:!0});var uMt=s(PQ);U_r=r(uMt,"TFXLMWithLMHeadModel"),uMt.forEach(t),J_r=r(WRe," (XLM model)"),WRe.forEach(t),Y_r=i(le),TM=n(le,"LI",{});var QRe=s(TM);sbe=n(QRe,"STRONG",{});var bMt=s(sbe);K_r=r(bMt,"xlm-roberta"),bMt.forEach(t),Z_r=r(QRe," \u2014 "),BQ=n(QRe,"A",{href:!0});var vMt=s(BQ);eur=r(vMt,"TFXLMRobertaForMaskedLM"),vMt.forEach(t),our=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),rur=i(le),MM=n(le,"LI",{});var HRe=s(MM);lbe=n(HRe,"STRONG",{});var FMt=s(lbe);tur=r(FMt,"xlnet"),FMt.forEach(t),aur=r(HRe," \u2014 "),IQ=n(HRe,"A",{href:!0});var TMt=s(IQ);nur=r(TMt,"TFXLNetLMHeadModel"),TMt.forEach(t),sur=r(HRe," (XLNet model)"),HRe.forEach(t),le.forEach(t),lur=i(_l),T(EM.$$.fragment,_l),_l.forEach(t),pl.forEach(t),yje=i(f),Qd=n(f,"H2",{class:!0});var RGe=s(Qd);CM=n(RGe,"A",{id:!0,class:!0,href:!0});var MMt=s(CM);ibe=n(MMt,"SPAN",{});var EMt=s(ibe);T(E8.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),iur=i(RGe),dbe=n(RGe,"SPAN",{});var CMt=s(dbe);dur=r(CMt,"TFAutoModelForCausalLM"),CMt.forEach(t),RGe.forEach(t),Lje=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(C8.$$.fragment,ul),cur=i(ul),Hd=n(ul,"P",{});var Mee=s(Hd);fur=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NQ=n(Mee,"A",{href:!0});var wMt=s(NQ);mur=r(wMt,"from_pretrained()"),wMt.forEach(t),gur=r(Mee," class method or the "),qQ=n(Mee,"A",{href:!0});var AMt=s(qQ);hur=r(AMt,"from_config()"),AMt.forEach(t),pur=r(Mee,` class
method.`),Mee.forEach(t),_ur=i(ul),w8=n(ul,"P",{});var PGe=s(w8);uur=r(PGe,"This class cannot be instantiated directly using "),cbe=n(PGe,"CODE",{});var yMt=s(cbe);bur=r(yMt,"__init__()"),yMt.forEach(t),vur=r(PGe," (throws an error)."),PGe.forEach(t),Fur=i(ul),xt=n(ul,"DIV",{class:!0});var R6=s(xt);T(A8.$$.fragment,R6),Tur=i(R6),fbe=n(R6,"P",{});var LMt=s(fbe);Mur=r(LMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LMt.forEach(t),Eur=i(R6),Ud=n(R6,"P",{});var Eee=s(Ud);Cur=r(Eee,`Note:
Loading a model from its configuration file does `),mbe=n(Eee,"STRONG",{});var xMt=s(mbe);wur=r(xMt,"not"),xMt.forEach(t),Aur=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(Eee,"A",{href:!0});var $Mt=s(jQ);yur=r($Mt,"from_pretrained()"),$Mt.forEach(t),Lur=r(Eee," to load the model weights."),Eee.forEach(t),xur=i(R6),T(wM.$$.fragment,R6),R6.forEach(t),$ur=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(y8.$$.fragment,bl),kur=i(bl),gbe=n(bl,"P",{});var kMt=s(gbe);Sur=r(kMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kMt.forEach(t),Rur=i(bl),en=n(bl,"P",{});var P6=s(en);Pur=r(P6,"The model class to instantiate is selected based on the "),hbe=n(P6,"CODE",{});var SMt=s(hbe);Bur=r(SMt,"model_type"),SMt.forEach(t),Iur=r(P6,` property of the config object (either
passed as an argument or loaded from `),pbe=n(P6,"CODE",{});var RMt=s(pbe);Nur=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),qur=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(P6,"CODE",{});var PMt=s(_be);jur=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),Dur=r(P6,":"),P6.forEach(t),Gur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);AM=n(Ce,"LI",{});var URe=s(AM);ube=n(URe,"STRONG",{});var BMt=s(ube);Our=r(BMt,"bert"),BMt.forEach(t),Vur=r(URe," \u2014 "),DQ=n(URe,"A",{href:!0});var IMt=s(DQ);Xur=r(IMt,"TFBertLMHeadModel"),IMt.forEach(t),zur=r(URe," (BERT model)"),URe.forEach(t),Wur=i(Ce),yM=n(Ce,"LI",{});var JRe=s(yM);bbe=n(JRe,"STRONG",{});var NMt=s(bbe);Qur=r(NMt,"camembert"),NMt.forEach(t),Hur=r(JRe," \u2014 "),GQ=n(JRe,"A",{href:!0});var qMt=s(GQ);Uur=r(qMt,"TFCamembertForCausalLM"),qMt.forEach(t),Jur=r(JRe," (CamemBERT model)"),JRe.forEach(t),Yur=i(Ce),LM=n(Ce,"LI",{});var YRe=s(LM);vbe=n(YRe,"STRONG",{});var jMt=s(vbe);Kur=r(jMt,"ctrl"),jMt.forEach(t),Zur=r(YRe," \u2014 "),OQ=n(YRe,"A",{href:!0});var DMt=s(OQ);e4r=r(DMt,"TFCTRLLMHeadModel"),DMt.forEach(t),o4r=r(YRe," (CTRL model)"),YRe.forEach(t),r4r=i(Ce),xM=n(Ce,"LI",{});var KRe=s(xM);Fbe=n(KRe,"STRONG",{});var GMt=s(Fbe);t4r=r(GMt,"gpt2"),GMt.forEach(t),a4r=r(KRe," \u2014 "),VQ=n(KRe,"A",{href:!0});var OMt=s(VQ);n4r=r(OMt,"TFGPT2LMHeadModel"),OMt.forEach(t),s4r=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),l4r=i(Ce),$M=n(Ce,"LI",{});var ZRe=s($M);Tbe=n(ZRe,"STRONG",{});var VMt=s(Tbe);i4r=r(VMt,"gptj"),VMt.forEach(t),d4r=r(ZRe," \u2014 "),XQ=n(ZRe,"A",{href:!0});var XMt=s(XQ);c4r=r(XMt,"TFGPTJForCausalLM"),XMt.forEach(t),f4r=r(ZRe," (GPT-J model)"),ZRe.forEach(t),m4r=i(Ce),kM=n(Ce,"LI",{});var ePe=s(kM);Mbe=n(ePe,"STRONG",{});var zMt=s(Mbe);g4r=r(zMt,"openai-gpt"),zMt.forEach(t),h4r=r(ePe," \u2014 "),zQ=n(ePe,"A",{href:!0});var WMt=s(zQ);p4r=r(WMt,"TFOpenAIGPTLMHeadModel"),WMt.forEach(t),_4r=r(ePe," (OpenAI GPT model)"),ePe.forEach(t),u4r=i(Ce),SM=n(Ce,"LI",{});var oPe=s(SM);Ebe=n(oPe,"STRONG",{});var QMt=s(Ebe);b4r=r(QMt,"rembert"),QMt.forEach(t),v4r=r(oPe," \u2014 "),WQ=n(oPe,"A",{href:!0});var HMt=s(WQ);F4r=r(HMt,"TFRemBertForCausalLM"),HMt.forEach(t),T4r=r(oPe," (RemBERT model)"),oPe.forEach(t),M4r=i(Ce),RM=n(Ce,"LI",{});var rPe=s(RM);Cbe=n(rPe,"STRONG",{});var UMt=s(Cbe);E4r=r(UMt,"roberta"),UMt.forEach(t),C4r=r(rPe," \u2014 "),QQ=n(rPe,"A",{href:!0});var JMt=s(QQ);w4r=r(JMt,"TFRobertaForCausalLM"),JMt.forEach(t),A4r=r(rPe," (RoBERTa model)"),rPe.forEach(t),y4r=i(Ce),PM=n(Ce,"LI",{});var tPe=s(PM);wbe=n(tPe,"STRONG",{});var YMt=s(wbe);L4r=r(YMt,"roformer"),YMt.forEach(t),x4r=r(tPe," \u2014 "),HQ=n(tPe,"A",{href:!0});var KMt=s(HQ);$4r=r(KMt,"TFRoFormerForCausalLM"),KMt.forEach(t),k4r=r(tPe," (RoFormer model)"),tPe.forEach(t),S4r=i(Ce),BM=n(Ce,"LI",{});var aPe=s(BM);Abe=n(aPe,"STRONG",{});var ZMt=s(Abe);R4r=r(ZMt,"transfo-xl"),ZMt.forEach(t),P4r=r(aPe," \u2014 "),UQ=n(aPe,"A",{href:!0});var eEt=s(UQ);B4r=r(eEt,"TFTransfoXLLMHeadModel"),eEt.forEach(t),I4r=r(aPe," (Transformer-XL model)"),aPe.forEach(t),N4r=i(Ce),IM=n(Ce,"LI",{});var nPe=s(IM);ybe=n(nPe,"STRONG",{});var oEt=s(ybe);q4r=r(oEt,"xlm"),oEt.forEach(t),j4r=r(nPe," \u2014 "),JQ=n(nPe,"A",{href:!0});var rEt=s(JQ);D4r=r(rEt,"TFXLMWithLMHeadModel"),rEt.forEach(t),G4r=r(nPe," (XLM model)"),nPe.forEach(t),O4r=i(Ce),NM=n(Ce,"LI",{});var sPe=s(NM);Lbe=n(sPe,"STRONG",{});var tEt=s(Lbe);V4r=r(tEt,"xlnet"),tEt.forEach(t),X4r=r(sPe," \u2014 "),YQ=n(sPe,"A",{href:!0});var aEt=s(YQ);z4r=r(aEt,"TFXLNetLMHeadModel"),aEt.forEach(t),W4r=r(sPe," (XLNet model)"),sPe.forEach(t),Ce.forEach(t),Q4r=i(bl),T(qM.$$.fragment,bl),bl.forEach(t),ul.forEach(t),xje=i(f),Jd=n(f,"H2",{class:!0});var BGe=s(Jd);jM=n(BGe,"A",{id:!0,class:!0,href:!0});var nEt=s(jM);xbe=n(nEt,"SPAN",{});var sEt=s(xbe);T(L8.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),H4r=i(BGe),$be=n(BGe,"SPAN",{});var lEt=s($be);U4r=r(lEt,"TFAutoModelForImageClassification"),lEt.forEach(t),BGe.forEach(t),$je=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(x8.$$.fragment,vl),J4r=i(vl),Yd=n(vl,"P",{});var Cee=s(Yd);Y4r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=n(Cee,"A",{href:!0});var iEt=s(KQ);K4r=r(iEt,"from_pretrained()"),iEt.forEach(t),Z4r=r(Cee," class method or the "),ZQ=n(Cee,"A",{href:!0});var dEt=s(ZQ);e1r=r(dEt,"from_config()"),dEt.forEach(t),o1r=r(Cee,` class
method.`),Cee.forEach(t),r1r=i(vl),$8=n(vl,"P",{});var IGe=s($8);t1r=r(IGe,"This class cannot be instantiated directly using "),kbe=n(IGe,"CODE",{});var cEt=s(kbe);a1r=r(cEt,"__init__()"),cEt.forEach(t),n1r=r(IGe," (throws an error)."),IGe.forEach(t),s1r=i(vl),$t=n(vl,"DIV",{class:!0});var B6=s($t);T(k8.$$.fragment,B6),l1r=i(B6),Sbe=n(B6,"P",{});var fEt=s(Sbe);i1r=r(fEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fEt.forEach(t),d1r=i(B6),Kd=n(B6,"P",{});var wee=s(Kd);c1r=r(wee,`Note:
Loading a model from its configuration file does `),Rbe=n(wee,"STRONG",{});var mEt=s(Rbe);f1r=r(mEt,"not"),mEt.forEach(t),m1r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(wee,"A",{href:!0});var gEt=s(eH);g1r=r(gEt,"from_pretrained()"),gEt.forEach(t),h1r=r(wee," to load the model weights."),wee.forEach(t),p1r=i(B6),T(DM.$$.fragment,B6),B6.forEach(t),_1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(S8.$$.fragment,Fl),u1r=i(Fl),Pbe=n(Fl,"P",{});var hEt=s(Pbe);b1r=r(hEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hEt.forEach(t),v1r=i(Fl),on=n(Fl,"P",{});var I6=s(on);F1r=r(I6,"The model class to instantiate is selected based on the "),Bbe=n(I6,"CODE",{});var pEt=s(Bbe);T1r=r(pEt,"model_type"),pEt.forEach(t),M1r=r(I6,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(I6,"CODE",{});var _Et=s(Ibe);E1r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),C1r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(I6,"CODE",{});var uEt=s(Nbe);w1r=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),A1r=r(I6,":"),I6.forEach(t),y1r=i(Fl),rn=n(Fl,"UL",{});var N6=s(rn);GM=n(N6,"LI",{});var lPe=s(GM);qbe=n(lPe,"STRONG",{});var bEt=s(qbe);L1r=r(bEt,"convnext"),bEt.forEach(t),x1r=r(lPe," \u2014 "),oH=n(lPe,"A",{href:!0});var vEt=s(oH);$1r=r(vEt,"TFConvNextForImageClassification"),vEt.forEach(t),k1r=r(lPe," (ConvNext model)"),lPe.forEach(t),S1r=i(N6),OM=n(N6,"LI",{});var iPe=s(OM);jbe=n(iPe,"STRONG",{});var FEt=s(jbe);R1r=r(FEt,"data2vec-vision"),FEt.forEach(t),P1r=r(iPe," \u2014 "),rH=n(iPe,"A",{href:!0});var TEt=s(rH);B1r=r(TEt,"TFData2VecVisionForImageClassification"),TEt.forEach(t),I1r=r(iPe," (Data2VecVision model)"),iPe.forEach(t),N1r=i(N6),VM=n(N6,"LI",{});var dPe=s(VM);Dbe=n(dPe,"STRONG",{});var MEt=s(Dbe);q1r=r(MEt,"swin"),MEt.forEach(t),j1r=r(dPe," \u2014 "),tH=n(dPe,"A",{href:!0});var EEt=s(tH);D1r=r(EEt,"TFSwinForImageClassification"),EEt.forEach(t),G1r=r(dPe," (Swin model)"),dPe.forEach(t),O1r=i(N6),XM=n(N6,"LI",{});var cPe=s(XM);Gbe=n(cPe,"STRONG",{});var CEt=s(Gbe);V1r=r(CEt,"vit"),CEt.forEach(t),X1r=r(cPe," \u2014 "),aH=n(cPe,"A",{href:!0});var wEt=s(aH);z1r=r(wEt,"TFViTForImageClassification"),wEt.forEach(t),W1r=r(cPe," (ViT model)"),cPe.forEach(t),N6.forEach(t),Q1r=i(Fl),T(zM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),kje=i(f),Zd=n(f,"H2",{class:!0});var NGe=s(Zd);WM=n(NGe,"A",{id:!0,class:!0,href:!0});var AEt=s(WM);Obe=n(AEt,"SPAN",{});var yEt=s(Obe);T(R8.$$.fragment,yEt),yEt.forEach(t),AEt.forEach(t),H1r=i(NGe),Vbe=n(NGe,"SPAN",{});var LEt=s(Vbe);U1r=r(LEt,"TFAutoModelForMaskedLM"),LEt.forEach(t),NGe.forEach(t),Sje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(P8.$$.fragment,Tl),J1r=i(Tl),ec=n(Tl,"P",{});var Aee=s(ec);Y1r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nH=n(Aee,"A",{href:!0});var xEt=s(nH);K1r=r(xEt,"from_pretrained()"),xEt.forEach(t),Z1r=r(Aee," class method or the "),sH=n(Aee,"A",{href:!0});var $Et=s(sH);e7r=r($Et,"from_config()"),$Et.forEach(t),o7r=r(Aee,` class
method.`),Aee.forEach(t),r7r=i(Tl),B8=n(Tl,"P",{});var qGe=s(B8);t7r=r(qGe,"This class cannot be instantiated directly using "),Xbe=n(qGe,"CODE",{});var kEt=s(Xbe);a7r=r(kEt,"__init__()"),kEt.forEach(t),n7r=r(qGe," (throws an error)."),qGe.forEach(t),s7r=i(Tl),kt=n(Tl,"DIV",{class:!0});var q6=s(kt);T(I8.$$.fragment,q6),l7r=i(q6),zbe=n(q6,"P",{});var SEt=s(zbe);i7r=r(SEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SEt.forEach(t),d7r=i(q6),oc=n(q6,"P",{});var yee=s(oc);c7r=r(yee,`Note:
Loading a model from its configuration file does `),Wbe=n(yee,"STRONG",{});var REt=s(Wbe);f7r=r(REt,"not"),REt.forEach(t),m7r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(yee,"A",{href:!0});var PEt=s(lH);g7r=r(PEt,"from_pretrained()"),PEt.forEach(t),h7r=r(yee," to load the model weights."),yee.forEach(t),p7r=i(q6),T(QM.$$.fragment,q6),q6.forEach(t),_7r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(N8.$$.fragment,Ml),u7r=i(Ml),Qbe=n(Ml,"P",{});var BEt=s(Qbe);b7r=r(BEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BEt.forEach(t),v7r=i(Ml),tn=n(Ml,"P",{});var j6=s(tn);F7r=r(j6,"The model class to instantiate is selected based on the "),Hbe=n(j6,"CODE",{});var IEt=s(Hbe);T7r=r(IEt,"model_type"),IEt.forEach(t),M7r=r(j6,` property of the config object (either
passed as an argument or loaded from `),Ube=n(j6,"CODE",{});var NEt=s(Ube);E7r=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),C7r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(j6,"CODE",{});var qEt=s(Jbe);w7r=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),A7r=r(j6,":"),j6.forEach(t),y7r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);HM=n(fe,"LI",{});var fPe=s(HM);Ybe=n(fPe,"STRONG",{});var jEt=s(Ybe);L7r=r(jEt,"albert"),jEt.forEach(t),x7r=r(fPe," \u2014 "),iH=n(fPe,"A",{href:!0});var DEt=s(iH);$7r=r(DEt,"TFAlbertForMaskedLM"),DEt.forEach(t),k7r=r(fPe," (ALBERT model)"),fPe.forEach(t),S7r=i(fe),UM=n(fe,"LI",{});var mPe=s(UM);Kbe=n(mPe,"STRONG",{});var GEt=s(Kbe);R7r=r(GEt,"bert"),GEt.forEach(t),P7r=r(mPe," \u2014 "),dH=n(mPe,"A",{href:!0});var OEt=s(dH);B7r=r(OEt,"TFBertForMaskedLM"),OEt.forEach(t),I7r=r(mPe," (BERT model)"),mPe.forEach(t),N7r=i(fe),JM=n(fe,"LI",{});var gPe=s(JM);Zbe=n(gPe,"STRONG",{});var VEt=s(Zbe);q7r=r(VEt,"camembert"),VEt.forEach(t),j7r=r(gPe," \u2014 "),cH=n(gPe,"A",{href:!0});var XEt=s(cH);D7r=r(XEt,"TFCamembertForMaskedLM"),XEt.forEach(t),G7r=r(gPe," (CamemBERT model)"),gPe.forEach(t),O7r=i(fe),YM=n(fe,"LI",{});var hPe=s(YM);e2e=n(hPe,"STRONG",{});var zEt=s(e2e);V7r=r(zEt,"convbert"),zEt.forEach(t),X7r=r(hPe," \u2014 "),fH=n(hPe,"A",{href:!0});var WEt=s(fH);z7r=r(WEt,"TFConvBertForMaskedLM"),WEt.forEach(t),W7r=r(hPe," (ConvBERT model)"),hPe.forEach(t),Q7r=i(fe),KM=n(fe,"LI",{});var pPe=s(KM);o2e=n(pPe,"STRONG",{});var QEt=s(o2e);H7r=r(QEt,"deberta"),QEt.forEach(t),U7r=r(pPe," \u2014 "),mH=n(pPe,"A",{href:!0});var HEt=s(mH);J7r=r(HEt,"TFDebertaForMaskedLM"),HEt.forEach(t),Y7r=r(pPe," (DeBERTa model)"),pPe.forEach(t),K7r=i(fe),ZM=n(fe,"LI",{});var _Pe=s(ZM);r2e=n(_Pe,"STRONG",{});var UEt=s(r2e);Z7r=r(UEt,"deberta-v2"),UEt.forEach(t),ebr=r(_Pe," \u2014 "),gH=n(_Pe,"A",{href:!0});var JEt=s(gH);obr=r(JEt,"TFDebertaV2ForMaskedLM"),JEt.forEach(t),rbr=r(_Pe," (DeBERTa-v2 model)"),_Pe.forEach(t),tbr=i(fe),eE=n(fe,"LI",{});var uPe=s(eE);t2e=n(uPe,"STRONG",{});var YEt=s(t2e);abr=r(YEt,"distilbert"),YEt.forEach(t),nbr=r(uPe," \u2014 "),hH=n(uPe,"A",{href:!0});var KEt=s(hH);sbr=r(KEt,"TFDistilBertForMaskedLM"),KEt.forEach(t),lbr=r(uPe," (DistilBERT model)"),uPe.forEach(t),ibr=i(fe),oE=n(fe,"LI",{});var bPe=s(oE);a2e=n(bPe,"STRONG",{});var ZEt=s(a2e);dbr=r(ZEt,"electra"),ZEt.forEach(t),cbr=r(bPe," \u2014 "),pH=n(bPe,"A",{href:!0});var eCt=s(pH);fbr=r(eCt,"TFElectraForMaskedLM"),eCt.forEach(t),mbr=r(bPe," (ELECTRA model)"),bPe.forEach(t),gbr=i(fe),rE=n(fe,"LI",{});var vPe=s(rE);n2e=n(vPe,"STRONG",{});var oCt=s(n2e);hbr=r(oCt,"flaubert"),oCt.forEach(t),pbr=r(vPe," \u2014 "),_H=n(vPe,"A",{href:!0});var rCt=s(_H);_br=r(rCt,"TFFlaubertWithLMHeadModel"),rCt.forEach(t),ubr=r(vPe," (FlauBERT model)"),vPe.forEach(t),bbr=i(fe),tE=n(fe,"LI",{});var FPe=s(tE);s2e=n(FPe,"STRONG",{});var tCt=s(s2e);vbr=r(tCt,"funnel"),tCt.forEach(t),Fbr=r(FPe," \u2014 "),uH=n(FPe,"A",{href:!0});var aCt=s(uH);Tbr=r(aCt,"TFFunnelForMaskedLM"),aCt.forEach(t),Mbr=r(FPe," (Funnel Transformer model)"),FPe.forEach(t),Ebr=i(fe),aE=n(fe,"LI",{});var TPe=s(aE);l2e=n(TPe,"STRONG",{});var nCt=s(l2e);Cbr=r(nCt,"layoutlm"),nCt.forEach(t),wbr=r(TPe," \u2014 "),bH=n(TPe,"A",{href:!0});var sCt=s(bH);Abr=r(sCt,"TFLayoutLMForMaskedLM"),sCt.forEach(t),ybr=r(TPe," (LayoutLM model)"),TPe.forEach(t),Lbr=i(fe),nE=n(fe,"LI",{});var MPe=s(nE);i2e=n(MPe,"STRONG",{});var lCt=s(i2e);xbr=r(lCt,"longformer"),lCt.forEach(t),$br=r(MPe," \u2014 "),vH=n(MPe,"A",{href:!0});var iCt=s(vH);kbr=r(iCt,"TFLongformerForMaskedLM"),iCt.forEach(t),Sbr=r(MPe," (Longformer model)"),MPe.forEach(t),Rbr=i(fe),sE=n(fe,"LI",{});var EPe=s(sE);d2e=n(EPe,"STRONG",{});var dCt=s(d2e);Pbr=r(dCt,"mobilebert"),dCt.forEach(t),Bbr=r(EPe," \u2014 "),FH=n(EPe,"A",{href:!0});var cCt=s(FH);Ibr=r(cCt,"TFMobileBertForMaskedLM"),cCt.forEach(t),Nbr=r(EPe," (MobileBERT model)"),EPe.forEach(t),qbr=i(fe),lE=n(fe,"LI",{});var CPe=s(lE);c2e=n(CPe,"STRONG",{});var fCt=s(c2e);jbr=r(fCt,"mpnet"),fCt.forEach(t),Dbr=r(CPe," \u2014 "),TH=n(CPe,"A",{href:!0});var mCt=s(TH);Gbr=r(mCt,"TFMPNetForMaskedLM"),mCt.forEach(t),Obr=r(CPe," (MPNet model)"),CPe.forEach(t),Vbr=i(fe),iE=n(fe,"LI",{});var wPe=s(iE);f2e=n(wPe,"STRONG",{});var gCt=s(f2e);Xbr=r(gCt,"rembert"),gCt.forEach(t),zbr=r(wPe," \u2014 "),MH=n(wPe,"A",{href:!0});var hCt=s(MH);Wbr=r(hCt,"TFRemBertForMaskedLM"),hCt.forEach(t),Qbr=r(wPe," (RemBERT model)"),wPe.forEach(t),Hbr=i(fe),dE=n(fe,"LI",{});var APe=s(dE);m2e=n(APe,"STRONG",{});var pCt=s(m2e);Ubr=r(pCt,"roberta"),pCt.forEach(t),Jbr=r(APe," \u2014 "),EH=n(APe,"A",{href:!0});var _Ct=s(EH);Ybr=r(_Ct,"TFRobertaForMaskedLM"),_Ct.forEach(t),Kbr=r(APe," (RoBERTa model)"),APe.forEach(t),Zbr=i(fe),cE=n(fe,"LI",{});var yPe=s(cE);g2e=n(yPe,"STRONG",{});var uCt=s(g2e);e2r=r(uCt,"roformer"),uCt.forEach(t),o2r=r(yPe," \u2014 "),CH=n(yPe,"A",{href:!0});var bCt=s(CH);r2r=r(bCt,"TFRoFormerForMaskedLM"),bCt.forEach(t),t2r=r(yPe," (RoFormer model)"),yPe.forEach(t),a2r=i(fe),fE=n(fe,"LI",{});var LPe=s(fE);h2e=n(LPe,"STRONG",{});var vCt=s(h2e);n2r=r(vCt,"tapas"),vCt.forEach(t),s2r=r(LPe," \u2014 "),wH=n(LPe,"A",{href:!0});var FCt=s(wH);l2r=r(FCt,"TFTapasForMaskedLM"),FCt.forEach(t),i2r=r(LPe," (TAPAS model)"),LPe.forEach(t),d2r=i(fe),mE=n(fe,"LI",{});var xPe=s(mE);p2e=n(xPe,"STRONG",{});var TCt=s(p2e);c2r=r(TCt,"xlm"),TCt.forEach(t),f2r=r(xPe," \u2014 "),AH=n(xPe,"A",{href:!0});var MCt=s(AH);m2r=r(MCt,"TFXLMWithLMHeadModel"),MCt.forEach(t),g2r=r(xPe," (XLM model)"),xPe.forEach(t),h2r=i(fe),gE=n(fe,"LI",{});var $Pe=s(gE);_2e=n($Pe,"STRONG",{});var ECt=s(_2e);p2r=r(ECt,"xlm-roberta"),ECt.forEach(t),_2r=r($Pe," \u2014 "),yH=n($Pe,"A",{href:!0});var CCt=s(yH);u2r=r(CCt,"TFXLMRobertaForMaskedLM"),CCt.forEach(t),b2r=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),fe.forEach(t),v2r=i(Ml),T(hE.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Rje=i(f),rc=n(f,"H2",{class:!0});var jGe=s(rc);pE=n(jGe,"A",{id:!0,class:!0,href:!0});var wCt=s(pE);u2e=n(wCt,"SPAN",{});var ACt=s(u2e);T(q8.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),F2r=i(jGe),b2e=n(jGe,"SPAN",{});var yCt=s(b2e);T2r=r(yCt,"TFAutoModelForSeq2SeqLM"),yCt.forEach(t),jGe.forEach(t),Pje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(j8.$$.fragment,El),M2r=i(El),tc=n(El,"P",{});var Lee=s(tc);E2r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LH=n(Lee,"A",{href:!0});var LCt=s(LH);C2r=r(LCt,"from_pretrained()"),LCt.forEach(t),w2r=r(Lee," class method or the "),xH=n(Lee,"A",{href:!0});var xCt=s(xH);A2r=r(xCt,"from_config()"),xCt.forEach(t),y2r=r(Lee,` class
method.`),Lee.forEach(t),L2r=i(El),D8=n(El,"P",{});var DGe=s(D8);x2r=r(DGe,"This class cannot be instantiated directly using "),v2e=n(DGe,"CODE",{});var $Ct=s(v2e);$2r=r($Ct,"__init__()"),$Ct.forEach(t),k2r=r(DGe," (throws an error)."),DGe.forEach(t),S2r=i(El),St=n(El,"DIV",{class:!0});var D6=s(St);T(G8.$$.fragment,D6),R2r=i(D6),F2e=n(D6,"P",{});var kCt=s(F2e);P2r=r(kCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kCt.forEach(t),B2r=i(D6),ac=n(D6,"P",{});var xee=s(ac);I2r=r(xee,`Note:
Loading a model from its configuration file does `),T2e=n(xee,"STRONG",{});var SCt=s(T2e);N2r=r(SCt,"not"),SCt.forEach(t),q2r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(xee,"A",{href:!0});var RCt=s($H);j2r=r(RCt,"from_pretrained()"),RCt.forEach(t),D2r=r(xee," to load the model weights."),xee.forEach(t),G2r=i(D6),T(_E.$$.fragment,D6),D6.forEach(t),O2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(O8.$$.fragment,Cl),V2r=i(Cl),M2e=n(Cl,"P",{});var PCt=s(M2e);X2r=r(PCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PCt.forEach(t),z2r=i(Cl),an=n(Cl,"P",{});var G6=s(an);W2r=r(G6,"The model class to instantiate is selected based on the "),E2e=n(G6,"CODE",{});var BCt=s(E2e);Q2r=r(BCt,"model_type"),BCt.forEach(t),H2r=r(G6,` property of the config object (either
passed as an argument or loaded from `),C2e=n(G6,"CODE",{});var ICt=s(C2e);U2r=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),J2r=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(G6,"CODE",{});var NCt=s(w2e);Y2r=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),K2r=r(G6,":"),G6.forEach(t),Z2r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);uE=n(Be,"LI",{});var kPe=s(uE);A2e=n(kPe,"STRONG",{});var qCt=s(A2e);evr=r(qCt,"bart"),qCt.forEach(t),ovr=r(kPe," \u2014 "),kH=n(kPe,"A",{href:!0});var jCt=s(kH);rvr=r(jCt,"TFBartForConditionalGeneration"),jCt.forEach(t),tvr=r(kPe," (BART model)"),kPe.forEach(t),avr=i(Be),bE=n(Be,"LI",{});var SPe=s(bE);y2e=n(SPe,"STRONG",{});var DCt=s(y2e);nvr=r(DCt,"blenderbot"),DCt.forEach(t),svr=r(SPe," \u2014 "),SH=n(SPe,"A",{href:!0});var GCt=s(SH);lvr=r(GCt,"TFBlenderbotForConditionalGeneration"),GCt.forEach(t),ivr=r(SPe," (Blenderbot model)"),SPe.forEach(t),dvr=i(Be),vE=n(Be,"LI",{});var RPe=s(vE);L2e=n(RPe,"STRONG",{});var OCt=s(L2e);cvr=r(OCt,"blenderbot-small"),OCt.forEach(t),fvr=r(RPe," \u2014 "),RH=n(RPe,"A",{href:!0});var VCt=s(RH);mvr=r(VCt,"TFBlenderbotSmallForConditionalGeneration"),VCt.forEach(t),gvr=r(RPe," (BlenderbotSmall model)"),RPe.forEach(t),hvr=i(Be),FE=n(Be,"LI",{});var PPe=s(FE);x2e=n(PPe,"STRONG",{});var XCt=s(x2e);pvr=r(XCt,"encoder-decoder"),XCt.forEach(t),_vr=r(PPe," \u2014 "),PH=n(PPe,"A",{href:!0});var zCt=s(PH);uvr=r(zCt,"TFEncoderDecoderModel"),zCt.forEach(t),bvr=r(PPe," (Encoder decoder model)"),PPe.forEach(t),vvr=i(Be),TE=n(Be,"LI",{});var BPe=s(TE);$2e=n(BPe,"STRONG",{});var WCt=s($2e);Fvr=r(WCt,"led"),WCt.forEach(t),Tvr=r(BPe," \u2014 "),BH=n(BPe,"A",{href:!0});var QCt=s(BH);Mvr=r(QCt,"TFLEDForConditionalGeneration"),QCt.forEach(t),Evr=r(BPe," (LED model)"),BPe.forEach(t),Cvr=i(Be),ME=n(Be,"LI",{});var IPe=s(ME);k2e=n(IPe,"STRONG",{});var HCt=s(k2e);wvr=r(HCt,"marian"),HCt.forEach(t),Avr=r(IPe," \u2014 "),IH=n(IPe,"A",{href:!0});var UCt=s(IH);yvr=r(UCt,"TFMarianMTModel"),UCt.forEach(t),Lvr=r(IPe," (Marian model)"),IPe.forEach(t),xvr=i(Be),EE=n(Be,"LI",{});var NPe=s(EE);S2e=n(NPe,"STRONG",{});var JCt=s(S2e);$vr=r(JCt,"mbart"),JCt.forEach(t),kvr=r(NPe," \u2014 "),NH=n(NPe,"A",{href:!0});var YCt=s(NH);Svr=r(YCt,"TFMBartForConditionalGeneration"),YCt.forEach(t),Rvr=r(NPe," (mBART model)"),NPe.forEach(t),Pvr=i(Be),CE=n(Be,"LI",{});var qPe=s(CE);R2e=n(qPe,"STRONG",{});var KCt=s(R2e);Bvr=r(KCt,"mt5"),KCt.forEach(t),Ivr=r(qPe," \u2014 "),qH=n(qPe,"A",{href:!0});var ZCt=s(qH);Nvr=r(ZCt,"TFMT5ForConditionalGeneration"),ZCt.forEach(t),qvr=r(qPe," (mT5 model)"),qPe.forEach(t),jvr=i(Be),wE=n(Be,"LI",{});var jPe=s(wE);P2e=n(jPe,"STRONG",{});var e5t=s(P2e);Dvr=r(e5t,"pegasus"),e5t.forEach(t),Gvr=r(jPe," \u2014 "),jH=n(jPe,"A",{href:!0});var o5t=s(jH);Ovr=r(o5t,"TFPegasusForConditionalGeneration"),o5t.forEach(t),Vvr=r(jPe," (Pegasus model)"),jPe.forEach(t),Xvr=i(Be),AE=n(Be,"LI",{});var DPe=s(AE);B2e=n(DPe,"STRONG",{});var r5t=s(B2e);zvr=r(r5t,"t5"),r5t.forEach(t),Wvr=r(DPe," \u2014 "),DH=n(DPe,"A",{href:!0});var t5t=s(DH);Qvr=r(t5t,"TFT5ForConditionalGeneration"),t5t.forEach(t),Hvr=r(DPe," (T5 model)"),DPe.forEach(t),Be.forEach(t),Uvr=i(Cl),T(yE.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Bje=i(f),nc=n(f,"H2",{class:!0});var GGe=s(nc);LE=n(GGe,"A",{id:!0,class:!0,href:!0});var a5t=s(LE);I2e=n(a5t,"SPAN",{});var n5t=s(I2e);T(V8.$$.fragment,n5t),n5t.forEach(t),a5t.forEach(t),Jvr=i(GGe),N2e=n(GGe,"SPAN",{});var s5t=s(N2e);Yvr=r(s5t,"TFAutoModelForSequenceClassification"),s5t.forEach(t),GGe.forEach(t),Ije=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(X8.$$.fragment,wl),Kvr=i(wl),sc=n(wl,"P",{});var $ee=s(sc);Zvr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GH=n($ee,"A",{href:!0});var l5t=s(GH);eFr=r(l5t,"from_pretrained()"),l5t.forEach(t),oFr=r($ee," class method or the "),OH=n($ee,"A",{href:!0});var i5t=s(OH);rFr=r(i5t,"from_config()"),i5t.forEach(t),tFr=r($ee,` class
method.`),$ee.forEach(t),aFr=i(wl),z8=n(wl,"P",{});var OGe=s(z8);nFr=r(OGe,"This class cannot be instantiated directly using "),q2e=n(OGe,"CODE",{});var d5t=s(q2e);sFr=r(d5t,"__init__()"),d5t.forEach(t),lFr=r(OGe," (throws an error)."),OGe.forEach(t),iFr=i(wl),Rt=n(wl,"DIV",{class:!0});var O6=s(Rt);T(W8.$$.fragment,O6),dFr=i(O6),j2e=n(O6,"P",{});var c5t=s(j2e);cFr=r(c5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c5t.forEach(t),fFr=i(O6),lc=n(O6,"P",{});var kee=s(lc);mFr=r(kee,`Note:
Loading a model from its configuration file does `),D2e=n(kee,"STRONG",{});var f5t=s(D2e);gFr=r(f5t,"not"),f5t.forEach(t),hFr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(kee,"A",{href:!0});var m5t=s(VH);pFr=r(m5t,"from_pretrained()"),m5t.forEach(t),_Fr=r(kee," to load the model weights."),kee.forEach(t),uFr=i(O6),T(xE.$$.fragment,O6),O6.forEach(t),bFr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(Q8.$$.fragment,Al),vFr=i(Al),G2e=n(Al,"P",{});var g5t=s(G2e);FFr=r(g5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g5t.forEach(t),TFr=i(Al),nn=n(Al,"P",{});var V6=s(nn);MFr=r(V6,"The model class to instantiate is selected based on the "),O2e=n(V6,"CODE",{});var h5t=s(O2e);EFr=r(h5t,"model_type"),h5t.forEach(t),CFr=r(V6,` property of the config object (either
passed as an argument or loaded from `),V2e=n(V6,"CODE",{});var p5t=s(V2e);wFr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),AFr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(V6,"CODE",{});var _5t=s(X2e);yFr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),LFr=r(V6,":"),V6.forEach(t),xFr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);$E=n(ae,"LI",{});var GPe=s($E);z2e=n(GPe,"STRONG",{});var u5t=s(z2e);$Fr=r(u5t,"albert"),u5t.forEach(t),kFr=r(GPe," \u2014 "),XH=n(GPe,"A",{href:!0});var b5t=s(XH);SFr=r(b5t,"TFAlbertForSequenceClassification"),b5t.forEach(t),RFr=r(GPe," (ALBERT model)"),GPe.forEach(t),PFr=i(ae),kE=n(ae,"LI",{});var OPe=s(kE);W2e=n(OPe,"STRONG",{});var v5t=s(W2e);BFr=r(v5t,"bert"),v5t.forEach(t),IFr=r(OPe," \u2014 "),zH=n(OPe,"A",{href:!0});var F5t=s(zH);NFr=r(F5t,"TFBertForSequenceClassification"),F5t.forEach(t),qFr=r(OPe," (BERT model)"),OPe.forEach(t),jFr=i(ae),SE=n(ae,"LI",{});var VPe=s(SE);Q2e=n(VPe,"STRONG",{});var T5t=s(Q2e);DFr=r(T5t,"camembert"),T5t.forEach(t),GFr=r(VPe," \u2014 "),WH=n(VPe,"A",{href:!0});var M5t=s(WH);OFr=r(M5t,"TFCamembertForSequenceClassification"),M5t.forEach(t),VFr=r(VPe," (CamemBERT model)"),VPe.forEach(t),XFr=i(ae),RE=n(ae,"LI",{});var XPe=s(RE);H2e=n(XPe,"STRONG",{});var E5t=s(H2e);zFr=r(E5t,"convbert"),E5t.forEach(t),WFr=r(XPe," \u2014 "),QH=n(XPe,"A",{href:!0});var C5t=s(QH);QFr=r(C5t,"TFConvBertForSequenceClassification"),C5t.forEach(t),HFr=r(XPe," (ConvBERT model)"),XPe.forEach(t),UFr=i(ae),PE=n(ae,"LI",{});var zPe=s(PE);U2e=n(zPe,"STRONG",{});var w5t=s(U2e);JFr=r(w5t,"ctrl"),w5t.forEach(t),YFr=r(zPe," \u2014 "),HH=n(zPe,"A",{href:!0});var A5t=s(HH);KFr=r(A5t,"TFCTRLForSequenceClassification"),A5t.forEach(t),ZFr=r(zPe," (CTRL model)"),zPe.forEach(t),eTr=i(ae),BE=n(ae,"LI",{});var WPe=s(BE);J2e=n(WPe,"STRONG",{});var y5t=s(J2e);oTr=r(y5t,"deberta"),y5t.forEach(t),rTr=r(WPe," \u2014 "),UH=n(WPe,"A",{href:!0});var L5t=s(UH);tTr=r(L5t,"TFDebertaForSequenceClassification"),L5t.forEach(t),aTr=r(WPe," (DeBERTa model)"),WPe.forEach(t),nTr=i(ae),IE=n(ae,"LI",{});var QPe=s(IE);Y2e=n(QPe,"STRONG",{});var x5t=s(Y2e);sTr=r(x5t,"deberta-v2"),x5t.forEach(t),lTr=r(QPe," \u2014 "),JH=n(QPe,"A",{href:!0});var $5t=s(JH);iTr=r($5t,"TFDebertaV2ForSequenceClassification"),$5t.forEach(t),dTr=r(QPe," (DeBERTa-v2 model)"),QPe.forEach(t),cTr=i(ae),NE=n(ae,"LI",{});var HPe=s(NE);K2e=n(HPe,"STRONG",{});var k5t=s(K2e);fTr=r(k5t,"distilbert"),k5t.forEach(t),mTr=r(HPe," \u2014 "),YH=n(HPe,"A",{href:!0});var S5t=s(YH);gTr=r(S5t,"TFDistilBertForSequenceClassification"),S5t.forEach(t),hTr=r(HPe," (DistilBERT model)"),HPe.forEach(t),pTr=i(ae),qE=n(ae,"LI",{});var UPe=s(qE);Z2e=n(UPe,"STRONG",{});var R5t=s(Z2e);_Tr=r(R5t,"electra"),R5t.forEach(t),uTr=r(UPe," \u2014 "),KH=n(UPe,"A",{href:!0});var P5t=s(KH);bTr=r(P5t,"TFElectraForSequenceClassification"),P5t.forEach(t),vTr=r(UPe," (ELECTRA model)"),UPe.forEach(t),FTr=i(ae),jE=n(ae,"LI",{});var JPe=s(jE);eve=n(JPe,"STRONG",{});var B5t=s(eve);TTr=r(B5t,"flaubert"),B5t.forEach(t),MTr=r(JPe," \u2014 "),ZH=n(JPe,"A",{href:!0});var I5t=s(ZH);ETr=r(I5t,"TFFlaubertForSequenceClassification"),I5t.forEach(t),CTr=r(JPe," (FlauBERT model)"),JPe.forEach(t),wTr=i(ae),DE=n(ae,"LI",{});var YPe=s(DE);ove=n(YPe,"STRONG",{});var N5t=s(ove);ATr=r(N5t,"funnel"),N5t.forEach(t),yTr=r(YPe," \u2014 "),eU=n(YPe,"A",{href:!0});var q5t=s(eU);LTr=r(q5t,"TFFunnelForSequenceClassification"),q5t.forEach(t),xTr=r(YPe," (Funnel Transformer model)"),YPe.forEach(t),$Tr=i(ae),GE=n(ae,"LI",{});var KPe=s(GE);rve=n(KPe,"STRONG",{});var j5t=s(rve);kTr=r(j5t,"gpt2"),j5t.forEach(t),STr=r(KPe," \u2014 "),oU=n(KPe,"A",{href:!0});var D5t=s(oU);RTr=r(D5t,"TFGPT2ForSequenceClassification"),D5t.forEach(t),PTr=r(KPe," (OpenAI GPT-2 model)"),KPe.forEach(t),BTr=i(ae),OE=n(ae,"LI",{});var ZPe=s(OE);tve=n(ZPe,"STRONG",{});var G5t=s(tve);ITr=r(G5t,"gptj"),G5t.forEach(t),NTr=r(ZPe," \u2014 "),rU=n(ZPe,"A",{href:!0});var O5t=s(rU);qTr=r(O5t,"TFGPTJForSequenceClassification"),O5t.forEach(t),jTr=r(ZPe," (GPT-J model)"),ZPe.forEach(t),DTr=i(ae),VE=n(ae,"LI",{});var eBe=s(VE);ave=n(eBe,"STRONG",{});var V5t=s(ave);GTr=r(V5t,"layoutlm"),V5t.forEach(t),OTr=r(eBe," \u2014 "),tU=n(eBe,"A",{href:!0});var X5t=s(tU);VTr=r(X5t,"TFLayoutLMForSequenceClassification"),X5t.forEach(t),XTr=r(eBe," (LayoutLM model)"),eBe.forEach(t),zTr=i(ae),XE=n(ae,"LI",{});var oBe=s(XE);nve=n(oBe,"STRONG",{});var z5t=s(nve);WTr=r(z5t,"longformer"),z5t.forEach(t),QTr=r(oBe," \u2014 "),aU=n(oBe,"A",{href:!0});var W5t=s(aU);HTr=r(W5t,"TFLongformerForSequenceClassification"),W5t.forEach(t),UTr=r(oBe," (Longformer model)"),oBe.forEach(t),JTr=i(ae),zE=n(ae,"LI",{});var rBe=s(zE);sve=n(rBe,"STRONG",{});var Q5t=s(sve);YTr=r(Q5t,"mobilebert"),Q5t.forEach(t),KTr=r(rBe," \u2014 "),nU=n(rBe,"A",{href:!0});var H5t=s(nU);ZTr=r(H5t,"TFMobileBertForSequenceClassification"),H5t.forEach(t),eMr=r(rBe," (MobileBERT model)"),rBe.forEach(t),oMr=i(ae),WE=n(ae,"LI",{});var tBe=s(WE);lve=n(tBe,"STRONG",{});var U5t=s(lve);rMr=r(U5t,"mpnet"),U5t.forEach(t),tMr=r(tBe," \u2014 "),sU=n(tBe,"A",{href:!0});var J5t=s(sU);aMr=r(J5t,"TFMPNetForSequenceClassification"),J5t.forEach(t),nMr=r(tBe," (MPNet model)"),tBe.forEach(t),sMr=i(ae),QE=n(ae,"LI",{});var aBe=s(QE);ive=n(aBe,"STRONG",{});var Y5t=s(ive);lMr=r(Y5t,"openai-gpt"),Y5t.forEach(t),iMr=r(aBe," \u2014 "),lU=n(aBe,"A",{href:!0});var K5t=s(lU);dMr=r(K5t,"TFOpenAIGPTForSequenceClassification"),K5t.forEach(t),cMr=r(aBe," (OpenAI GPT model)"),aBe.forEach(t),fMr=i(ae),HE=n(ae,"LI",{});var nBe=s(HE);dve=n(nBe,"STRONG",{});var Z5t=s(dve);mMr=r(Z5t,"rembert"),Z5t.forEach(t),gMr=r(nBe," \u2014 "),iU=n(nBe,"A",{href:!0});var e3t=s(iU);hMr=r(e3t,"TFRemBertForSequenceClassification"),e3t.forEach(t),pMr=r(nBe," (RemBERT model)"),nBe.forEach(t),_Mr=i(ae),UE=n(ae,"LI",{});var sBe=s(UE);cve=n(sBe,"STRONG",{});var o3t=s(cve);uMr=r(o3t,"roberta"),o3t.forEach(t),bMr=r(sBe," \u2014 "),dU=n(sBe,"A",{href:!0});var r3t=s(dU);vMr=r(r3t,"TFRobertaForSequenceClassification"),r3t.forEach(t),FMr=r(sBe," (RoBERTa model)"),sBe.forEach(t),TMr=i(ae),JE=n(ae,"LI",{});var lBe=s(JE);fve=n(lBe,"STRONG",{});var t3t=s(fve);MMr=r(t3t,"roformer"),t3t.forEach(t),EMr=r(lBe," \u2014 "),cU=n(lBe,"A",{href:!0});var a3t=s(cU);CMr=r(a3t,"TFRoFormerForSequenceClassification"),a3t.forEach(t),wMr=r(lBe," (RoFormer model)"),lBe.forEach(t),AMr=i(ae),YE=n(ae,"LI",{});var iBe=s(YE);mve=n(iBe,"STRONG",{});var n3t=s(mve);yMr=r(n3t,"tapas"),n3t.forEach(t),LMr=r(iBe," \u2014 "),fU=n(iBe,"A",{href:!0});var s3t=s(fU);xMr=r(s3t,"TFTapasForSequenceClassification"),s3t.forEach(t),$Mr=r(iBe," (TAPAS model)"),iBe.forEach(t),kMr=i(ae),KE=n(ae,"LI",{});var dBe=s(KE);gve=n(dBe,"STRONG",{});var l3t=s(gve);SMr=r(l3t,"transfo-xl"),l3t.forEach(t),RMr=r(dBe," \u2014 "),mU=n(dBe,"A",{href:!0});var i3t=s(mU);PMr=r(i3t,"TFTransfoXLForSequenceClassification"),i3t.forEach(t),BMr=r(dBe," (Transformer-XL model)"),dBe.forEach(t),IMr=i(ae),ZE=n(ae,"LI",{});var cBe=s(ZE);hve=n(cBe,"STRONG",{});var d3t=s(hve);NMr=r(d3t,"xlm"),d3t.forEach(t),qMr=r(cBe," \u2014 "),gU=n(cBe,"A",{href:!0});var c3t=s(gU);jMr=r(c3t,"TFXLMForSequenceClassification"),c3t.forEach(t),DMr=r(cBe," (XLM model)"),cBe.forEach(t),GMr=i(ae),eC=n(ae,"LI",{});var fBe=s(eC);pve=n(fBe,"STRONG",{});var f3t=s(pve);OMr=r(f3t,"xlm-roberta"),f3t.forEach(t),VMr=r(fBe," \u2014 "),hU=n(fBe,"A",{href:!0});var m3t=s(hU);XMr=r(m3t,"TFXLMRobertaForSequenceClassification"),m3t.forEach(t),zMr=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),WMr=i(ae),oC=n(ae,"LI",{});var mBe=s(oC);_ve=n(mBe,"STRONG",{});var g3t=s(_ve);QMr=r(g3t,"xlnet"),g3t.forEach(t),HMr=r(mBe," \u2014 "),pU=n(mBe,"A",{href:!0});var h3t=s(pU);UMr=r(h3t,"TFXLNetForSequenceClassification"),h3t.forEach(t),JMr=r(mBe," (XLNet model)"),mBe.forEach(t),ae.forEach(t),YMr=i(Al),T(rC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Nje=i(f),ic=n(f,"H2",{class:!0});var VGe=s(ic);tC=n(VGe,"A",{id:!0,class:!0,href:!0});var p3t=s(tC);uve=n(p3t,"SPAN",{});var _3t=s(uve);T(H8.$$.fragment,_3t),_3t.forEach(t),p3t.forEach(t),KMr=i(VGe),bve=n(VGe,"SPAN",{});var u3t=s(bve);ZMr=r(u3t,"TFAutoModelForMultipleChoice"),u3t.forEach(t),VGe.forEach(t),qje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(U8.$$.fragment,yl),eEr=i(yl),dc=n(yl,"P",{});var See=s(dc);oEr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_U=n(See,"A",{href:!0});var b3t=s(_U);rEr=r(b3t,"from_pretrained()"),b3t.forEach(t),tEr=r(See," class method or the "),uU=n(See,"A",{href:!0});var v3t=s(uU);aEr=r(v3t,"from_config()"),v3t.forEach(t),nEr=r(See,` class
method.`),See.forEach(t),sEr=i(yl),J8=n(yl,"P",{});var XGe=s(J8);lEr=r(XGe,"This class cannot be instantiated directly using "),vve=n(XGe,"CODE",{});var F3t=s(vve);iEr=r(F3t,"__init__()"),F3t.forEach(t),dEr=r(XGe," (throws an error)."),XGe.forEach(t),cEr=i(yl),Pt=n(yl,"DIV",{class:!0});var X6=s(Pt);T(Y8.$$.fragment,X6),fEr=i(X6),Fve=n(X6,"P",{});var T3t=s(Fve);mEr=r(T3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T3t.forEach(t),gEr=i(X6),cc=n(X6,"P",{});var Ree=s(cc);hEr=r(Ree,`Note:
Loading a model from its configuration file does `),Tve=n(Ree,"STRONG",{});var M3t=s(Tve);pEr=r(M3t,"not"),M3t.forEach(t),_Er=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Ree,"A",{href:!0});var E3t=s(bU);uEr=r(E3t,"from_pretrained()"),E3t.forEach(t),bEr=r(Ree," to load the model weights."),Ree.forEach(t),vEr=i(X6),T(aC.$$.fragment,X6),X6.forEach(t),FEr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(K8.$$.fragment,Ll),TEr=i(Ll),Mve=n(Ll,"P",{});var C3t=s(Mve);MEr=r(C3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C3t.forEach(t),EEr=i(Ll),sn=n(Ll,"P",{});var z6=s(sn);CEr=r(z6,"The model class to instantiate is selected based on the "),Eve=n(z6,"CODE",{});var w3t=s(Eve);wEr=r(w3t,"model_type"),w3t.forEach(t),AEr=r(z6,` property of the config object (either
passed as an argument or loaded from `),Cve=n(z6,"CODE",{});var A3t=s(Cve);yEr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),LEr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(z6,"CODE",{});var y3t=s(wve);xEr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),$Er=r(z6,":"),z6.forEach(t),kEr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);nC=n(be,"LI",{});var gBe=s(nC);Ave=n(gBe,"STRONG",{});var L3t=s(Ave);SEr=r(L3t,"albert"),L3t.forEach(t),REr=r(gBe," \u2014 "),vU=n(gBe,"A",{href:!0});var x3t=s(vU);PEr=r(x3t,"TFAlbertForMultipleChoice"),x3t.forEach(t),BEr=r(gBe," (ALBERT model)"),gBe.forEach(t),IEr=i(be),sC=n(be,"LI",{});var hBe=s(sC);yve=n(hBe,"STRONG",{});var $3t=s(yve);NEr=r($3t,"bert"),$3t.forEach(t),qEr=r(hBe," \u2014 "),FU=n(hBe,"A",{href:!0});var k3t=s(FU);jEr=r(k3t,"TFBertForMultipleChoice"),k3t.forEach(t),DEr=r(hBe," (BERT model)"),hBe.forEach(t),GEr=i(be),lC=n(be,"LI",{});var pBe=s(lC);Lve=n(pBe,"STRONG",{});var S3t=s(Lve);OEr=r(S3t,"camembert"),S3t.forEach(t),VEr=r(pBe," \u2014 "),TU=n(pBe,"A",{href:!0});var R3t=s(TU);XEr=r(R3t,"TFCamembertForMultipleChoice"),R3t.forEach(t),zEr=r(pBe," (CamemBERT model)"),pBe.forEach(t),WEr=i(be),iC=n(be,"LI",{});var _Be=s(iC);xve=n(_Be,"STRONG",{});var P3t=s(xve);QEr=r(P3t,"convbert"),P3t.forEach(t),HEr=r(_Be," \u2014 "),MU=n(_Be,"A",{href:!0});var B3t=s(MU);UEr=r(B3t,"TFConvBertForMultipleChoice"),B3t.forEach(t),JEr=r(_Be," (ConvBERT model)"),_Be.forEach(t),YEr=i(be),dC=n(be,"LI",{});var uBe=s(dC);$ve=n(uBe,"STRONG",{});var I3t=s($ve);KEr=r(I3t,"distilbert"),I3t.forEach(t),ZEr=r(uBe," \u2014 "),EU=n(uBe,"A",{href:!0});var N3t=s(EU);eCr=r(N3t,"TFDistilBertForMultipleChoice"),N3t.forEach(t),oCr=r(uBe," (DistilBERT model)"),uBe.forEach(t),rCr=i(be),cC=n(be,"LI",{});var bBe=s(cC);kve=n(bBe,"STRONG",{});var q3t=s(kve);tCr=r(q3t,"electra"),q3t.forEach(t),aCr=r(bBe," \u2014 "),CU=n(bBe,"A",{href:!0});var j3t=s(CU);nCr=r(j3t,"TFElectraForMultipleChoice"),j3t.forEach(t),sCr=r(bBe," (ELECTRA model)"),bBe.forEach(t),lCr=i(be),fC=n(be,"LI",{});var vBe=s(fC);Sve=n(vBe,"STRONG",{});var D3t=s(Sve);iCr=r(D3t,"flaubert"),D3t.forEach(t),dCr=r(vBe," \u2014 "),wU=n(vBe,"A",{href:!0});var G3t=s(wU);cCr=r(G3t,"TFFlaubertForMultipleChoice"),G3t.forEach(t),fCr=r(vBe," (FlauBERT model)"),vBe.forEach(t),mCr=i(be),mC=n(be,"LI",{});var FBe=s(mC);Rve=n(FBe,"STRONG",{});var O3t=s(Rve);gCr=r(O3t,"funnel"),O3t.forEach(t),hCr=r(FBe," \u2014 "),AU=n(FBe,"A",{href:!0});var V3t=s(AU);pCr=r(V3t,"TFFunnelForMultipleChoice"),V3t.forEach(t),_Cr=r(FBe," (Funnel Transformer model)"),FBe.forEach(t),uCr=i(be),gC=n(be,"LI",{});var TBe=s(gC);Pve=n(TBe,"STRONG",{});var X3t=s(Pve);bCr=r(X3t,"longformer"),X3t.forEach(t),vCr=r(TBe," \u2014 "),yU=n(TBe,"A",{href:!0});var z3t=s(yU);FCr=r(z3t,"TFLongformerForMultipleChoice"),z3t.forEach(t),TCr=r(TBe," (Longformer model)"),TBe.forEach(t),MCr=i(be),hC=n(be,"LI",{});var MBe=s(hC);Bve=n(MBe,"STRONG",{});var W3t=s(Bve);ECr=r(W3t,"mobilebert"),W3t.forEach(t),CCr=r(MBe," \u2014 "),LU=n(MBe,"A",{href:!0});var Q3t=s(LU);wCr=r(Q3t,"TFMobileBertForMultipleChoice"),Q3t.forEach(t),ACr=r(MBe," (MobileBERT model)"),MBe.forEach(t),yCr=i(be),pC=n(be,"LI",{});var EBe=s(pC);Ive=n(EBe,"STRONG",{});var H3t=s(Ive);LCr=r(H3t,"mpnet"),H3t.forEach(t),xCr=r(EBe," \u2014 "),xU=n(EBe,"A",{href:!0});var U3t=s(xU);$Cr=r(U3t,"TFMPNetForMultipleChoice"),U3t.forEach(t),kCr=r(EBe," (MPNet model)"),EBe.forEach(t),SCr=i(be),_C=n(be,"LI",{});var CBe=s(_C);Nve=n(CBe,"STRONG",{});var J3t=s(Nve);RCr=r(J3t,"rembert"),J3t.forEach(t),PCr=r(CBe," \u2014 "),$U=n(CBe,"A",{href:!0});var Y3t=s($U);BCr=r(Y3t,"TFRemBertForMultipleChoice"),Y3t.forEach(t),ICr=r(CBe," (RemBERT model)"),CBe.forEach(t),NCr=i(be),uC=n(be,"LI",{});var wBe=s(uC);qve=n(wBe,"STRONG",{});var K3t=s(qve);qCr=r(K3t,"roberta"),K3t.forEach(t),jCr=r(wBe," \u2014 "),kU=n(wBe,"A",{href:!0});var Z3t=s(kU);DCr=r(Z3t,"TFRobertaForMultipleChoice"),Z3t.forEach(t),GCr=r(wBe," (RoBERTa model)"),wBe.forEach(t),OCr=i(be),bC=n(be,"LI",{});var ABe=s(bC);jve=n(ABe,"STRONG",{});var ewt=s(jve);VCr=r(ewt,"roformer"),ewt.forEach(t),XCr=r(ABe," \u2014 "),SU=n(ABe,"A",{href:!0});var owt=s(SU);zCr=r(owt,"TFRoFormerForMultipleChoice"),owt.forEach(t),WCr=r(ABe," (RoFormer model)"),ABe.forEach(t),QCr=i(be),vC=n(be,"LI",{});var yBe=s(vC);Dve=n(yBe,"STRONG",{});var rwt=s(Dve);HCr=r(rwt,"xlm"),rwt.forEach(t),UCr=r(yBe," \u2014 "),RU=n(yBe,"A",{href:!0});var twt=s(RU);JCr=r(twt,"TFXLMForMultipleChoice"),twt.forEach(t),YCr=r(yBe," (XLM model)"),yBe.forEach(t),KCr=i(be),FC=n(be,"LI",{});var LBe=s(FC);Gve=n(LBe,"STRONG",{});var awt=s(Gve);ZCr=r(awt,"xlm-roberta"),awt.forEach(t),e5r=r(LBe," \u2014 "),PU=n(LBe,"A",{href:!0});var nwt=s(PU);o5r=r(nwt,"TFXLMRobertaForMultipleChoice"),nwt.forEach(t),r5r=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),t5r=i(be),TC=n(be,"LI",{});var xBe=s(TC);Ove=n(xBe,"STRONG",{});var swt=s(Ove);a5r=r(swt,"xlnet"),swt.forEach(t),n5r=r(xBe," \u2014 "),BU=n(xBe,"A",{href:!0});var lwt=s(BU);s5r=r(lwt,"TFXLNetForMultipleChoice"),lwt.forEach(t),l5r=r(xBe," (XLNet model)"),xBe.forEach(t),be.forEach(t),i5r=i(Ll),T(MC.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),jje=i(f),fc=n(f,"H2",{class:!0});var zGe=s(fc);EC=n(zGe,"A",{id:!0,class:!0,href:!0});var iwt=s(EC);Vve=n(iwt,"SPAN",{});var dwt=s(Vve);T(Z8.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),d5r=i(zGe),Xve=n(zGe,"SPAN",{});var cwt=s(Xve);c5r=r(cwt,"TFAutoModelForNextSentencePrediction"),cwt.forEach(t),zGe.forEach(t),Dje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(e9.$$.fragment,xl),f5r=i(xl),mc=n(xl,"P",{});var Pee=s(mc);m5r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IU=n(Pee,"A",{href:!0});var fwt=s(IU);g5r=r(fwt,"from_pretrained()"),fwt.forEach(t),h5r=r(Pee," class method or the "),NU=n(Pee,"A",{href:!0});var mwt=s(NU);p5r=r(mwt,"from_config()"),mwt.forEach(t),_5r=r(Pee,` class
method.`),Pee.forEach(t),u5r=i(xl),o9=n(xl,"P",{});var WGe=s(o9);b5r=r(WGe,"This class cannot be instantiated directly using "),zve=n(WGe,"CODE",{});var gwt=s(zve);v5r=r(gwt,"__init__()"),gwt.forEach(t),F5r=r(WGe," (throws an error)."),WGe.forEach(t),T5r=i(xl),Bt=n(xl,"DIV",{class:!0});var W6=s(Bt);T(r9.$$.fragment,W6),M5r=i(W6),Wve=n(W6,"P",{});var hwt=s(Wve);E5r=r(hwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hwt.forEach(t),C5r=i(W6),gc=n(W6,"P",{});var Bee=s(gc);w5r=r(Bee,`Note:
Loading a model from its configuration file does `),Qve=n(Bee,"STRONG",{});var pwt=s(Qve);A5r=r(pwt,"not"),pwt.forEach(t),y5r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(Bee,"A",{href:!0});var _wt=s(qU);L5r=r(_wt,"from_pretrained()"),_wt.forEach(t),x5r=r(Bee," to load the model weights."),Bee.forEach(t),$5r=i(W6),T(CC.$$.fragment,W6),W6.forEach(t),k5r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(t9.$$.fragment,$l),S5r=i($l),Hve=n($l,"P",{});var uwt=s(Hve);R5r=r(uwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uwt.forEach(t),P5r=i($l),ln=n($l,"P",{});var Q6=s(ln);B5r=r(Q6,"The model class to instantiate is selected based on the "),Uve=n(Q6,"CODE",{});var bwt=s(Uve);I5r=r(bwt,"model_type"),bwt.forEach(t),N5r=r(Q6,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Q6,"CODE",{});var vwt=s(Jve);q5r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),j5r=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Q6,"CODE",{});var Fwt=s(Yve);D5r=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),G5r=r(Q6,":"),Q6.forEach(t),O5r=i($l),a9=n($l,"UL",{});var QGe=s(a9);wC=n(QGe,"LI",{});var $Be=s(wC);Kve=n($Be,"STRONG",{});var Twt=s(Kve);V5r=r(Twt,"bert"),Twt.forEach(t),X5r=r($Be," \u2014 "),jU=n($Be,"A",{href:!0});var Mwt=s(jU);z5r=r(Mwt,"TFBertForNextSentencePrediction"),Mwt.forEach(t),W5r=r($Be," (BERT model)"),$Be.forEach(t),Q5r=i(QGe),AC=n(QGe,"LI",{});var kBe=s(AC);Zve=n(kBe,"STRONG",{});var Ewt=s(Zve);H5r=r(Ewt,"mobilebert"),Ewt.forEach(t),U5r=r(kBe," \u2014 "),DU=n(kBe,"A",{href:!0});var Cwt=s(DU);J5r=r(Cwt,"TFMobileBertForNextSentencePrediction"),Cwt.forEach(t),Y5r=r(kBe," (MobileBERT model)"),kBe.forEach(t),QGe.forEach(t),K5r=i($l),T(yC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Gje=i(f),hc=n(f,"H2",{class:!0});var HGe=s(hc);LC=n(HGe,"A",{id:!0,class:!0,href:!0});var wwt=s(LC);eFe=n(wwt,"SPAN",{});var Awt=s(eFe);T(n9.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),Z5r=i(HGe),oFe=n(HGe,"SPAN",{});var ywt=s(oFe);e3r=r(ywt,"TFAutoModelForTableQuestionAnswering"),ywt.forEach(t),HGe.forEach(t),Oje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(s9.$$.fragment,kl),o3r=i(kl),pc=n(kl,"P",{});var Iee=s(pc);r3r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GU=n(Iee,"A",{href:!0});var Lwt=s(GU);t3r=r(Lwt,"from_pretrained()"),Lwt.forEach(t),a3r=r(Iee," class method or the "),OU=n(Iee,"A",{href:!0});var xwt=s(OU);n3r=r(xwt,"from_config()"),xwt.forEach(t),s3r=r(Iee,` class
method.`),Iee.forEach(t),l3r=i(kl),l9=n(kl,"P",{});var UGe=s(l9);i3r=r(UGe,"This class cannot be instantiated directly using "),rFe=n(UGe,"CODE",{});var $wt=s(rFe);d3r=r($wt,"__init__()"),$wt.forEach(t),c3r=r(UGe," (throws an error)."),UGe.forEach(t),f3r=i(kl),It=n(kl,"DIV",{class:!0});var H6=s(It);T(i9.$$.fragment,H6),m3r=i(H6),tFe=n(H6,"P",{});var kwt=s(tFe);g3r=r(kwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kwt.forEach(t),h3r=i(H6),_c=n(H6,"P",{});var Nee=s(_c);p3r=r(Nee,`Note:
Loading a model from its configuration file does `),aFe=n(Nee,"STRONG",{});var Swt=s(aFe);_3r=r(Swt,"not"),Swt.forEach(t),u3r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(Nee,"A",{href:!0});var Rwt=s(VU);b3r=r(Rwt,"from_pretrained()"),Rwt.forEach(t),v3r=r(Nee," to load the model weights."),Nee.forEach(t),F3r=i(H6),T(xC.$$.fragment,H6),H6.forEach(t),T3r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(d9.$$.fragment,Sl),M3r=i(Sl),nFe=n(Sl,"P",{});var Pwt=s(nFe);E3r=r(Pwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pwt.forEach(t),C3r=i(Sl),dn=n(Sl,"P",{});var U6=s(dn);w3r=r(U6,"The model class to instantiate is selected based on the "),sFe=n(U6,"CODE",{});var Bwt=s(sFe);A3r=r(Bwt,"model_type"),Bwt.forEach(t),y3r=r(U6,` property of the config object (either
passed as an argument or loaded from `),lFe=n(U6,"CODE",{});var Iwt=s(lFe);L3r=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),x3r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(U6,"CODE",{});var Nwt=s(iFe);$3r=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),k3r=r(U6,":"),U6.forEach(t),S3r=i(Sl),dFe=n(Sl,"UL",{});var qwt=s(dFe);$C=n(qwt,"LI",{});var SBe=s($C);cFe=n(SBe,"STRONG",{});var jwt=s(cFe);R3r=r(jwt,"tapas"),jwt.forEach(t),P3r=r(SBe," \u2014 "),XU=n(SBe,"A",{href:!0});var Dwt=s(XU);B3r=r(Dwt,"TFTapasForQuestionAnswering"),Dwt.forEach(t),I3r=r(SBe," (TAPAS model)"),SBe.forEach(t),qwt.forEach(t),N3r=i(Sl),T(kC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Vje=i(f),uc=n(f,"H2",{class:!0});var JGe=s(uc);SC=n(JGe,"A",{id:!0,class:!0,href:!0});var Gwt=s(SC);fFe=n(Gwt,"SPAN",{});var Owt=s(fFe);T(c9.$$.fragment,Owt),Owt.forEach(t),Gwt.forEach(t),q3r=i(JGe),mFe=n(JGe,"SPAN",{});var Vwt=s(mFe);j3r=r(Vwt,"TFAutoModelForTokenClassification"),Vwt.forEach(t),JGe.forEach(t),Xje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(f9.$$.fragment,Rl),D3r=i(Rl),bc=n(Rl,"P",{});var qee=s(bc);G3r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zU=n(qee,"A",{href:!0});var Xwt=s(zU);O3r=r(Xwt,"from_pretrained()"),Xwt.forEach(t),V3r=r(qee," class method or the "),WU=n(qee,"A",{href:!0});var zwt=s(WU);X3r=r(zwt,"from_config()"),zwt.forEach(t),z3r=r(qee,` class
method.`),qee.forEach(t),W3r=i(Rl),m9=n(Rl,"P",{});var YGe=s(m9);Q3r=r(YGe,"This class cannot be instantiated directly using "),gFe=n(YGe,"CODE",{});var Wwt=s(gFe);H3r=r(Wwt,"__init__()"),Wwt.forEach(t),U3r=r(YGe," (throws an error)."),YGe.forEach(t),J3r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var J6=s(Nt);T(g9.$$.fragment,J6),Y3r=i(J6),hFe=n(J6,"P",{});var Qwt=s(hFe);K3r=r(Qwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Qwt.forEach(t),Z3r=i(J6),vc=n(J6,"P",{});var jee=s(vc);ewr=r(jee,`Note:
Loading a model from its configuration file does `),pFe=n(jee,"STRONG",{});var Hwt=s(pFe);owr=r(Hwt,"not"),Hwt.forEach(t),rwr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(jee,"A",{href:!0});var Uwt=s(QU);twr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),awr=r(jee," to load the model weights."),jee.forEach(t),nwr=i(J6),T(RC.$$.fragment,J6),J6.forEach(t),swr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(h9.$$.fragment,Pl),lwr=i(Pl),_Fe=n(Pl,"P",{});var Jwt=s(_Fe);iwr=r(Jwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jwt.forEach(t),dwr=i(Pl),cn=n(Pl,"P",{});var Y6=s(cn);cwr=r(Y6,"The model class to instantiate is selected based on the "),uFe=n(Y6,"CODE",{});var Ywt=s(uFe);fwr=r(Ywt,"model_type"),Ywt.forEach(t),mwr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),bFe=n(Y6,"CODE",{});var Kwt=s(bFe);gwr=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),hwr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(Y6,"CODE",{});var Zwt=s(vFe);pwr=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),_wr=r(Y6,":"),Y6.forEach(t),uwr=i(Pl),de=n(Pl,"UL",{});var me=s(de);PC=n(me,"LI",{});var RBe=s(PC);FFe=n(RBe,"STRONG",{});var e0t=s(FFe);bwr=r(e0t,"albert"),e0t.forEach(t),vwr=r(RBe," \u2014 "),HU=n(RBe,"A",{href:!0});var o0t=s(HU);Fwr=r(o0t,"TFAlbertForTokenClassification"),o0t.forEach(t),Twr=r(RBe," (ALBERT model)"),RBe.forEach(t),Mwr=i(me),BC=n(me,"LI",{});var PBe=s(BC);TFe=n(PBe,"STRONG",{});var r0t=s(TFe);Ewr=r(r0t,"bert"),r0t.forEach(t),Cwr=r(PBe," \u2014 "),UU=n(PBe,"A",{href:!0});var t0t=s(UU);wwr=r(t0t,"TFBertForTokenClassification"),t0t.forEach(t),Awr=r(PBe," (BERT model)"),PBe.forEach(t),ywr=i(me),IC=n(me,"LI",{});var BBe=s(IC);MFe=n(BBe,"STRONG",{});var a0t=s(MFe);Lwr=r(a0t,"camembert"),a0t.forEach(t),xwr=r(BBe," \u2014 "),JU=n(BBe,"A",{href:!0});var n0t=s(JU);$wr=r(n0t,"TFCamembertForTokenClassification"),n0t.forEach(t),kwr=r(BBe," (CamemBERT model)"),BBe.forEach(t),Swr=i(me),NC=n(me,"LI",{});var IBe=s(NC);EFe=n(IBe,"STRONG",{});var s0t=s(EFe);Rwr=r(s0t,"convbert"),s0t.forEach(t),Pwr=r(IBe," \u2014 "),YU=n(IBe,"A",{href:!0});var l0t=s(YU);Bwr=r(l0t,"TFConvBertForTokenClassification"),l0t.forEach(t),Iwr=r(IBe," (ConvBERT model)"),IBe.forEach(t),Nwr=i(me),qC=n(me,"LI",{});var NBe=s(qC);CFe=n(NBe,"STRONG",{});var i0t=s(CFe);qwr=r(i0t,"deberta"),i0t.forEach(t),jwr=r(NBe," \u2014 "),KU=n(NBe,"A",{href:!0});var d0t=s(KU);Dwr=r(d0t,"TFDebertaForTokenClassification"),d0t.forEach(t),Gwr=r(NBe," (DeBERTa model)"),NBe.forEach(t),Owr=i(me),jC=n(me,"LI",{});var qBe=s(jC);wFe=n(qBe,"STRONG",{});var c0t=s(wFe);Vwr=r(c0t,"deberta-v2"),c0t.forEach(t),Xwr=r(qBe," \u2014 "),ZU=n(qBe,"A",{href:!0});var f0t=s(ZU);zwr=r(f0t,"TFDebertaV2ForTokenClassification"),f0t.forEach(t),Wwr=r(qBe," (DeBERTa-v2 model)"),qBe.forEach(t),Qwr=i(me),DC=n(me,"LI",{});var jBe=s(DC);AFe=n(jBe,"STRONG",{});var m0t=s(AFe);Hwr=r(m0t,"distilbert"),m0t.forEach(t),Uwr=r(jBe," \u2014 "),eJ=n(jBe,"A",{href:!0});var g0t=s(eJ);Jwr=r(g0t,"TFDistilBertForTokenClassification"),g0t.forEach(t),Ywr=r(jBe," (DistilBERT model)"),jBe.forEach(t),Kwr=i(me),GC=n(me,"LI",{});var DBe=s(GC);yFe=n(DBe,"STRONG",{});var h0t=s(yFe);Zwr=r(h0t,"electra"),h0t.forEach(t),e0r=r(DBe," \u2014 "),oJ=n(DBe,"A",{href:!0});var p0t=s(oJ);o0r=r(p0t,"TFElectraForTokenClassification"),p0t.forEach(t),r0r=r(DBe," (ELECTRA model)"),DBe.forEach(t),t0r=i(me),OC=n(me,"LI",{});var GBe=s(OC);LFe=n(GBe,"STRONG",{});var _0t=s(LFe);a0r=r(_0t,"flaubert"),_0t.forEach(t),n0r=r(GBe," \u2014 "),rJ=n(GBe,"A",{href:!0});var u0t=s(rJ);s0r=r(u0t,"TFFlaubertForTokenClassification"),u0t.forEach(t),l0r=r(GBe," (FlauBERT model)"),GBe.forEach(t),i0r=i(me),VC=n(me,"LI",{});var OBe=s(VC);xFe=n(OBe,"STRONG",{});var b0t=s(xFe);d0r=r(b0t,"funnel"),b0t.forEach(t),c0r=r(OBe," \u2014 "),tJ=n(OBe,"A",{href:!0});var v0t=s(tJ);f0r=r(v0t,"TFFunnelForTokenClassification"),v0t.forEach(t),m0r=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),g0r=i(me),XC=n(me,"LI",{});var VBe=s(XC);$Fe=n(VBe,"STRONG",{});var F0t=s($Fe);h0r=r(F0t,"layoutlm"),F0t.forEach(t),p0r=r(VBe," \u2014 "),aJ=n(VBe,"A",{href:!0});var T0t=s(aJ);_0r=r(T0t,"TFLayoutLMForTokenClassification"),T0t.forEach(t),u0r=r(VBe," (LayoutLM model)"),VBe.forEach(t),b0r=i(me),zC=n(me,"LI",{});var XBe=s(zC);kFe=n(XBe,"STRONG",{});var M0t=s(kFe);v0r=r(M0t,"longformer"),M0t.forEach(t),F0r=r(XBe," \u2014 "),nJ=n(XBe,"A",{href:!0});var E0t=s(nJ);T0r=r(E0t,"TFLongformerForTokenClassification"),E0t.forEach(t),M0r=r(XBe," (Longformer model)"),XBe.forEach(t),E0r=i(me),WC=n(me,"LI",{});var zBe=s(WC);SFe=n(zBe,"STRONG",{});var C0t=s(SFe);C0r=r(C0t,"mobilebert"),C0t.forEach(t),w0r=r(zBe," \u2014 "),sJ=n(zBe,"A",{href:!0});var w0t=s(sJ);A0r=r(w0t,"TFMobileBertForTokenClassification"),w0t.forEach(t),y0r=r(zBe," (MobileBERT model)"),zBe.forEach(t),L0r=i(me),QC=n(me,"LI",{});var WBe=s(QC);RFe=n(WBe,"STRONG",{});var A0t=s(RFe);x0r=r(A0t,"mpnet"),A0t.forEach(t),$0r=r(WBe," \u2014 "),lJ=n(WBe,"A",{href:!0});var y0t=s(lJ);k0r=r(y0t,"TFMPNetForTokenClassification"),y0t.forEach(t),S0r=r(WBe," (MPNet model)"),WBe.forEach(t),R0r=i(me),HC=n(me,"LI",{});var QBe=s(HC);PFe=n(QBe,"STRONG",{});var L0t=s(PFe);P0r=r(L0t,"rembert"),L0t.forEach(t),B0r=r(QBe," \u2014 "),iJ=n(QBe,"A",{href:!0});var x0t=s(iJ);I0r=r(x0t,"TFRemBertForTokenClassification"),x0t.forEach(t),N0r=r(QBe," (RemBERT model)"),QBe.forEach(t),q0r=i(me),UC=n(me,"LI",{});var HBe=s(UC);BFe=n(HBe,"STRONG",{});var $0t=s(BFe);j0r=r($0t,"roberta"),$0t.forEach(t),D0r=r(HBe," \u2014 "),dJ=n(HBe,"A",{href:!0});var k0t=s(dJ);G0r=r(k0t,"TFRobertaForTokenClassification"),k0t.forEach(t),O0r=r(HBe," (RoBERTa model)"),HBe.forEach(t),V0r=i(me),JC=n(me,"LI",{});var UBe=s(JC);IFe=n(UBe,"STRONG",{});var S0t=s(IFe);X0r=r(S0t,"roformer"),S0t.forEach(t),z0r=r(UBe," \u2014 "),cJ=n(UBe,"A",{href:!0});var R0t=s(cJ);W0r=r(R0t,"TFRoFormerForTokenClassification"),R0t.forEach(t),Q0r=r(UBe," (RoFormer model)"),UBe.forEach(t),H0r=i(me),YC=n(me,"LI",{});var JBe=s(YC);NFe=n(JBe,"STRONG",{});var P0t=s(NFe);U0r=r(P0t,"xlm"),P0t.forEach(t),J0r=r(JBe," \u2014 "),fJ=n(JBe,"A",{href:!0});var B0t=s(fJ);Y0r=r(B0t,"TFXLMForTokenClassification"),B0t.forEach(t),K0r=r(JBe," (XLM model)"),JBe.forEach(t),Z0r=i(me),KC=n(me,"LI",{});var YBe=s(KC);qFe=n(YBe,"STRONG",{});var I0t=s(qFe);e6r=r(I0t,"xlm-roberta"),I0t.forEach(t),o6r=r(YBe," \u2014 "),mJ=n(YBe,"A",{href:!0});var N0t=s(mJ);r6r=r(N0t,"TFXLMRobertaForTokenClassification"),N0t.forEach(t),t6r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),a6r=i(me),ZC=n(me,"LI",{});var KBe=s(ZC);jFe=n(KBe,"STRONG",{});var q0t=s(jFe);n6r=r(q0t,"xlnet"),q0t.forEach(t),s6r=r(KBe," \u2014 "),gJ=n(KBe,"A",{href:!0});var j0t=s(gJ);l6r=r(j0t,"TFXLNetForTokenClassification"),j0t.forEach(t),i6r=r(KBe," (XLNet model)"),KBe.forEach(t),me.forEach(t),d6r=i(Pl),T(e5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),zje=i(f),Fc=n(f,"H2",{class:!0});var KGe=s(Fc);o5=n(KGe,"A",{id:!0,class:!0,href:!0});var D0t=s(o5);DFe=n(D0t,"SPAN",{});var G0t=s(DFe);T(p9.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),c6r=i(KGe),GFe=n(KGe,"SPAN",{});var O0t=s(GFe);f6r=r(O0t,"TFAutoModelForQuestionAnswering"),O0t.forEach(t),KGe.forEach(t),Wje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(_9.$$.fragment,Bl),m6r=i(Bl),Tc=n(Bl,"P",{});var Dee=s(Tc);g6r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hJ=n(Dee,"A",{href:!0});var V0t=s(hJ);h6r=r(V0t,"from_pretrained()"),V0t.forEach(t),p6r=r(Dee," class method or the "),pJ=n(Dee,"A",{href:!0});var X0t=s(pJ);_6r=r(X0t,"from_config()"),X0t.forEach(t),u6r=r(Dee,` class
method.`),Dee.forEach(t),b6r=i(Bl),u9=n(Bl,"P",{});var ZGe=s(u9);v6r=r(ZGe,"This class cannot be instantiated directly using "),OFe=n(ZGe,"CODE",{});var z0t=s(OFe);F6r=r(z0t,"__init__()"),z0t.forEach(t),T6r=r(ZGe," (throws an error)."),ZGe.forEach(t),M6r=i(Bl),qt=n(Bl,"DIV",{class:!0});var K6=s(qt);T(b9.$$.fragment,K6),E6r=i(K6),VFe=n(K6,"P",{});var W0t=s(VFe);C6r=r(W0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W0t.forEach(t),w6r=i(K6),Mc=n(K6,"P",{});var Gee=s(Mc);A6r=r(Gee,`Note:
Loading a model from its configuration file does `),XFe=n(Gee,"STRONG",{});var Q0t=s(XFe);y6r=r(Q0t,"not"),Q0t.forEach(t),L6r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Gee,"A",{href:!0});var H0t=s(_J);x6r=r(H0t,"from_pretrained()"),H0t.forEach(t),$6r=r(Gee," to load the model weights."),Gee.forEach(t),k6r=i(K6),T(r5.$$.fragment,K6),K6.forEach(t),S6r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(v9.$$.fragment,Il),R6r=i(Il),zFe=n(Il,"P",{});var U0t=s(zFe);P6r=r(U0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U0t.forEach(t),B6r=i(Il),fn=n(Il,"P",{});var Z6=s(fn);I6r=r(Z6,"The model class to instantiate is selected based on the "),WFe=n(Z6,"CODE",{});var J0t=s(WFe);N6r=r(J0t,"model_type"),J0t.forEach(t),q6r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),QFe=n(Z6,"CODE",{});var Y0t=s(QFe);j6r=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),D6r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(Z6,"CODE",{});var K0t=s(HFe);G6r=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),O6r=r(Z6,":"),Z6.forEach(t),V6r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);t5=n(ge,"LI",{});var ZBe=s(t5);UFe=n(ZBe,"STRONG",{});var Z0t=s(UFe);X6r=r(Z0t,"albert"),Z0t.forEach(t),z6r=r(ZBe," \u2014 "),uJ=n(ZBe,"A",{href:!0});var e6t=s(uJ);W6r=r(e6t,"TFAlbertForQuestionAnswering"),e6t.forEach(t),Q6r=r(ZBe," (ALBERT model)"),ZBe.forEach(t),H6r=i(ge),a5=n(ge,"LI",{});var eIe=s(a5);JFe=n(eIe,"STRONG",{});var o6t=s(JFe);U6r=r(o6t,"bert"),o6t.forEach(t),J6r=r(eIe," \u2014 "),bJ=n(eIe,"A",{href:!0});var r6t=s(bJ);Y6r=r(r6t,"TFBertForQuestionAnswering"),r6t.forEach(t),K6r=r(eIe," (BERT model)"),eIe.forEach(t),Z6r=i(ge),n5=n(ge,"LI",{});var oIe=s(n5);YFe=n(oIe,"STRONG",{});var t6t=s(YFe);eAr=r(t6t,"camembert"),t6t.forEach(t),oAr=r(oIe," \u2014 "),vJ=n(oIe,"A",{href:!0});var a6t=s(vJ);rAr=r(a6t,"TFCamembertForQuestionAnswering"),a6t.forEach(t),tAr=r(oIe," (CamemBERT model)"),oIe.forEach(t),aAr=i(ge),s5=n(ge,"LI",{});var rIe=s(s5);KFe=n(rIe,"STRONG",{});var n6t=s(KFe);nAr=r(n6t,"convbert"),n6t.forEach(t),sAr=r(rIe," \u2014 "),FJ=n(rIe,"A",{href:!0});var s6t=s(FJ);lAr=r(s6t,"TFConvBertForQuestionAnswering"),s6t.forEach(t),iAr=r(rIe," (ConvBERT model)"),rIe.forEach(t),dAr=i(ge),l5=n(ge,"LI",{});var tIe=s(l5);ZFe=n(tIe,"STRONG",{});var l6t=s(ZFe);cAr=r(l6t,"deberta"),l6t.forEach(t),fAr=r(tIe," \u2014 "),TJ=n(tIe,"A",{href:!0});var i6t=s(TJ);mAr=r(i6t,"TFDebertaForQuestionAnswering"),i6t.forEach(t),gAr=r(tIe," (DeBERTa model)"),tIe.forEach(t),hAr=i(ge),i5=n(ge,"LI",{});var aIe=s(i5);eTe=n(aIe,"STRONG",{});var d6t=s(eTe);pAr=r(d6t,"deberta-v2"),d6t.forEach(t),_Ar=r(aIe," \u2014 "),MJ=n(aIe,"A",{href:!0});var c6t=s(MJ);uAr=r(c6t,"TFDebertaV2ForQuestionAnswering"),c6t.forEach(t),bAr=r(aIe," (DeBERTa-v2 model)"),aIe.forEach(t),vAr=i(ge),d5=n(ge,"LI",{});var nIe=s(d5);oTe=n(nIe,"STRONG",{});var f6t=s(oTe);FAr=r(f6t,"distilbert"),f6t.forEach(t),TAr=r(nIe," \u2014 "),EJ=n(nIe,"A",{href:!0});var m6t=s(EJ);MAr=r(m6t,"TFDistilBertForQuestionAnswering"),m6t.forEach(t),EAr=r(nIe," (DistilBERT model)"),nIe.forEach(t),CAr=i(ge),c5=n(ge,"LI",{});var sIe=s(c5);rTe=n(sIe,"STRONG",{});var g6t=s(rTe);wAr=r(g6t,"electra"),g6t.forEach(t),AAr=r(sIe," \u2014 "),CJ=n(sIe,"A",{href:!0});var h6t=s(CJ);yAr=r(h6t,"TFElectraForQuestionAnswering"),h6t.forEach(t),LAr=r(sIe," (ELECTRA model)"),sIe.forEach(t),xAr=i(ge),f5=n(ge,"LI",{});var lIe=s(f5);tTe=n(lIe,"STRONG",{});var p6t=s(tTe);$Ar=r(p6t,"flaubert"),p6t.forEach(t),kAr=r(lIe," \u2014 "),wJ=n(lIe,"A",{href:!0});var _6t=s(wJ);SAr=r(_6t,"TFFlaubertForQuestionAnsweringSimple"),_6t.forEach(t),RAr=r(lIe," (FlauBERT model)"),lIe.forEach(t),PAr=i(ge),m5=n(ge,"LI",{});var iIe=s(m5);aTe=n(iIe,"STRONG",{});var u6t=s(aTe);BAr=r(u6t,"funnel"),u6t.forEach(t),IAr=r(iIe," \u2014 "),AJ=n(iIe,"A",{href:!0});var b6t=s(AJ);NAr=r(b6t,"TFFunnelForQuestionAnswering"),b6t.forEach(t),qAr=r(iIe," (Funnel Transformer model)"),iIe.forEach(t),jAr=i(ge),g5=n(ge,"LI",{});var dIe=s(g5);nTe=n(dIe,"STRONG",{});var v6t=s(nTe);DAr=r(v6t,"gptj"),v6t.forEach(t),GAr=r(dIe," \u2014 "),yJ=n(dIe,"A",{href:!0});var F6t=s(yJ);OAr=r(F6t,"TFGPTJForQuestionAnswering"),F6t.forEach(t),VAr=r(dIe," (GPT-J model)"),dIe.forEach(t),XAr=i(ge),h5=n(ge,"LI",{});var cIe=s(h5);sTe=n(cIe,"STRONG",{});var T6t=s(sTe);zAr=r(T6t,"longformer"),T6t.forEach(t),WAr=r(cIe," \u2014 "),LJ=n(cIe,"A",{href:!0});var M6t=s(LJ);QAr=r(M6t,"TFLongformerForQuestionAnswering"),M6t.forEach(t),HAr=r(cIe," (Longformer model)"),cIe.forEach(t),UAr=i(ge),p5=n(ge,"LI",{});var fIe=s(p5);lTe=n(fIe,"STRONG",{});var E6t=s(lTe);JAr=r(E6t,"mobilebert"),E6t.forEach(t),YAr=r(fIe," \u2014 "),xJ=n(fIe,"A",{href:!0});var C6t=s(xJ);KAr=r(C6t,"TFMobileBertForQuestionAnswering"),C6t.forEach(t),ZAr=r(fIe," (MobileBERT model)"),fIe.forEach(t),eyr=i(ge),_5=n(ge,"LI",{});var mIe=s(_5);iTe=n(mIe,"STRONG",{});var w6t=s(iTe);oyr=r(w6t,"mpnet"),w6t.forEach(t),ryr=r(mIe," \u2014 "),$J=n(mIe,"A",{href:!0});var A6t=s($J);tyr=r(A6t,"TFMPNetForQuestionAnswering"),A6t.forEach(t),ayr=r(mIe," (MPNet model)"),mIe.forEach(t),nyr=i(ge),u5=n(ge,"LI",{});var gIe=s(u5);dTe=n(gIe,"STRONG",{});var y6t=s(dTe);syr=r(y6t,"rembert"),y6t.forEach(t),lyr=r(gIe," \u2014 "),kJ=n(gIe,"A",{href:!0});var L6t=s(kJ);iyr=r(L6t,"TFRemBertForQuestionAnswering"),L6t.forEach(t),dyr=r(gIe," (RemBERT model)"),gIe.forEach(t),cyr=i(ge),b5=n(ge,"LI",{});var hIe=s(b5);cTe=n(hIe,"STRONG",{});var x6t=s(cTe);fyr=r(x6t,"roberta"),x6t.forEach(t),myr=r(hIe," \u2014 "),SJ=n(hIe,"A",{href:!0});var $6t=s(SJ);gyr=r($6t,"TFRobertaForQuestionAnswering"),$6t.forEach(t),hyr=r(hIe," (RoBERTa model)"),hIe.forEach(t),pyr=i(ge),v5=n(ge,"LI",{});var pIe=s(v5);fTe=n(pIe,"STRONG",{});var k6t=s(fTe);_yr=r(k6t,"roformer"),k6t.forEach(t),uyr=r(pIe," \u2014 "),RJ=n(pIe,"A",{href:!0});var S6t=s(RJ);byr=r(S6t,"TFRoFormerForQuestionAnswering"),S6t.forEach(t),vyr=r(pIe," (RoFormer model)"),pIe.forEach(t),Fyr=i(ge),F5=n(ge,"LI",{});var _Ie=s(F5);mTe=n(_Ie,"STRONG",{});var R6t=s(mTe);Tyr=r(R6t,"xlm"),R6t.forEach(t),Myr=r(_Ie," \u2014 "),PJ=n(_Ie,"A",{href:!0});var P6t=s(PJ);Eyr=r(P6t,"TFXLMForQuestionAnsweringSimple"),P6t.forEach(t),Cyr=r(_Ie," (XLM model)"),_Ie.forEach(t),wyr=i(ge),T5=n(ge,"LI",{});var uIe=s(T5);gTe=n(uIe,"STRONG",{});var B6t=s(gTe);Ayr=r(B6t,"xlm-roberta"),B6t.forEach(t),yyr=r(uIe," \u2014 "),BJ=n(uIe,"A",{href:!0});var I6t=s(BJ);Lyr=r(I6t,"TFXLMRobertaForQuestionAnswering"),I6t.forEach(t),xyr=r(uIe," (XLM-RoBERTa model)"),uIe.forEach(t),$yr=i(ge),M5=n(ge,"LI",{});var bIe=s(M5);hTe=n(bIe,"STRONG",{});var N6t=s(hTe);kyr=r(N6t,"xlnet"),N6t.forEach(t),Syr=r(bIe," \u2014 "),IJ=n(bIe,"A",{href:!0});var q6t=s(IJ);Ryr=r(q6t,"TFXLNetForQuestionAnsweringSimple"),q6t.forEach(t),Pyr=r(bIe," (XLNet model)"),bIe.forEach(t),ge.forEach(t),Byr=i(Il),T(E5.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Qje=i(f),Ec=n(f,"H2",{class:!0});var eOe=s(Ec);C5=n(eOe,"A",{id:!0,class:!0,href:!0});var j6t=s(C5);pTe=n(j6t,"SPAN",{});var D6t=s(pTe);T(F9.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),Iyr=i(eOe),_Te=n(eOe,"SPAN",{});var G6t=s(_Te);Nyr=r(G6t,"TFAutoModelForVision2Seq"),G6t.forEach(t),eOe.forEach(t),Hje=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(T9.$$.fragment,Nl),qyr=i(Nl),Cc=n(Nl,"P",{});var Oee=s(Cc);jyr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NJ=n(Oee,"A",{href:!0});var O6t=s(NJ);Dyr=r(O6t,"from_pretrained()"),O6t.forEach(t),Gyr=r(Oee," class method or the "),qJ=n(Oee,"A",{href:!0});var V6t=s(qJ);Oyr=r(V6t,"from_config()"),V6t.forEach(t),Vyr=r(Oee,` class
method.`),Oee.forEach(t),Xyr=i(Nl),M9=n(Nl,"P",{});var oOe=s(M9);zyr=r(oOe,"This class cannot be instantiated directly using "),uTe=n(oOe,"CODE",{});var X6t=s(uTe);Wyr=r(X6t,"__init__()"),X6t.forEach(t),Qyr=r(oOe," (throws an error)."),oOe.forEach(t),Hyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var eA=s(jt);T(E9.$$.fragment,eA),Uyr=i(eA),bTe=n(eA,"P",{});var z6t=s(bTe);Jyr=r(z6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),z6t.forEach(t),Yyr=i(eA),wc=n(eA,"P",{});var Vee=s(wc);Kyr=r(Vee,`Note:
Loading a model from its configuration file does `),vTe=n(Vee,"STRONG",{});var W6t=s(vTe);Zyr=r(W6t,"not"),W6t.forEach(t),eLr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Vee,"A",{href:!0});var Q6t=s(jJ);oLr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),rLr=r(Vee," to load the model weights."),Vee.forEach(t),tLr=i(eA),T(w5.$$.fragment,eA),eA.forEach(t),aLr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(C9.$$.fragment,ql),nLr=i(ql),FTe=n(ql,"P",{});var H6t=s(FTe);sLr=r(H6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),H6t.forEach(t),lLr=i(ql),mn=n(ql,"P",{});var oA=s(mn);iLr=r(oA,"The model class to instantiate is selected based on the "),TTe=n(oA,"CODE",{});var U6t=s(TTe);dLr=r(U6t,"model_type"),U6t.forEach(t),cLr=r(oA,` property of the config object (either
passed as an argument or loaded from `),MTe=n(oA,"CODE",{});var J6t=s(MTe);fLr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),mLr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(oA,"CODE",{});var Y6t=s(ETe);gLr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),hLr=r(oA,":"),oA.forEach(t),pLr=i(ql),CTe=n(ql,"UL",{});var K6t=s(CTe);A5=n(K6t,"LI",{});var vIe=s(A5);wTe=n(vIe,"STRONG",{});var Z6t=s(wTe);_Lr=r(Z6t,"vision-encoder-decoder"),Z6t.forEach(t),uLr=r(vIe," \u2014 "),DJ=n(vIe,"A",{href:!0});var eAt=s(DJ);bLr=r(eAt,"TFVisionEncoderDecoderModel"),eAt.forEach(t),vLr=r(vIe," (Vision Encoder decoder model)"),vIe.forEach(t),K6t.forEach(t),FLr=i(ql),T(y5.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Uje=i(f),Ac=n(f,"H2",{class:!0});var rOe=s(Ac);L5=n(rOe,"A",{id:!0,class:!0,href:!0});var oAt=s(L5);ATe=n(oAt,"SPAN",{});var rAt=s(ATe);T(w9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),TLr=i(rOe),yTe=n(rOe,"SPAN",{});var tAt=s(yTe);MLr=r(tAt,"TFAutoModelForSpeechSeq2Seq"),tAt.forEach(t),rOe.forEach(t),Jje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(A9.$$.fragment,jl),ELr=i(jl),yc=n(jl,"P",{});var Xee=s(yc);CLr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GJ=n(Xee,"A",{href:!0});var aAt=s(GJ);wLr=r(aAt,"from_pretrained()"),aAt.forEach(t),ALr=r(Xee," class method or the "),OJ=n(Xee,"A",{href:!0});var nAt=s(OJ);yLr=r(nAt,"from_config()"),nAt.forEach(t),LLr=r(Xee,` class
method.`),Xee.forEach(t),xLr=i(jl),y9=n(jl,"P",{});var tOe=s(y9);$Lr=r(tOe,"This class cannot be instantiated directly using "),LTe=n(tOe,"CODE",{});var sAt=s(LTe);kLr=r(sAt,"__init__()"),sAt.forEach(t),SLr=r(tOe," (throws an error)."),tOe.forEach(t),RLr=i(jl),Dt=n(jl,"DIV",{class:!0});var rA=s(Dt);T(L9.$$.fragment,rA),PLr=i(rA),xTe=n(rA,"P",{});var lAt=s(xTe);BLr=r(lAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lAt.forEach(t),ILr=i(rA),Lc=n(rA,"P",{});var zee=s(Lc);NLr=r(zee,`Note:
Loading a model from its configuration file does `),$Te=n(zee,"STRONG",{});var iAt=s($Te);qLr=r(iAt,"not"),iAt.forEach(t),jLr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(zee,"A",{href:!0});var dAt=s(VJ);DLr=r(dAt,"from_pretrained()"),dAt.forEach(t),GLr=r(zee," to load the model weights."),zee.forEach(t),OLr=i(rA),T(x5.$$.fragment,rA),rA.forEach(t),VLr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(x9.$$.fragment,Dl),XLr=i(Dl),kTe=n(Dl,"P",{});var cAt=s(kTe);zLr=r(cAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cAt.forEach(t),WLr=i(Dl),gn=n(Dl,"P",{});var tA=s(gn);QLr=r(tA,"The model class to instantiate is selected based on the "),STe=n(tA,"CODE",{});var fAt=s(STe);HLr=r(fAt,"model_type"),fAt.forEach(t),ULr=r(tA,` property of the config object (either
passed as an argument or loaded from `),RTe=n(tA,"CODE",{});var mAt=s(RTe);JLr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),YLr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(tA,"CODE",{});var gAt=s(PTe);KLr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),ZLr=r(tA,":"),tA.forEach(t),e8r=i(Dl),BTe=n(Dl,"UL",{});var hAt=s(BTe);$5=n(hAt,"LI",{});var FIe=s($5);ITe=n(FIe,"STRONG",{});var pAt=s(ITe);o8r=r(pAt,"speech_to_text"),pAt.forEach(t),r8r=r(FIe," \u2014 "),XJ=n(FIe,"A",{href:!0});var _At=s(XJ);t8r=r(_At,"TFSpeech2TextForConditionalGeneration"),_At.forEach(t),a8r=r(FIe," (Speech2Text model)"),FIe.forEach(t),hAt.forEach(t),n8r=i(Dl),T(k5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Yje=i(f),xc=n(f,"H2",{class:!0});var aOe=s(xc);S5=n(aOe,"A",{id:!0,class:!0,href:!0});var uAt=s(S5);NTe=n(uAt,"SPAN",{});var bAt=s(NTe);T($9.$$.fragment,bAt),bAt.forEach(t),uAt.forEach(t),s8r=i(aOe),qTe=n(aOe,"SPAN",{});var vAt=s(qTe);l8r=r(vAt,"FlaxAutoModel"),vAt.forEach(t),aOe.forEach(t),Kje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(k9.$$.fragment,Gl),i8r=i(Gl),$c=n(Gl,"P",{});var Wee=s($c);d8r=r(Wee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=n(Wee,"A",{href:!0});var FAt=s(zJ);c8r=r(FAt,"from_pretrained()"),FAt.forEach(t),f8r=r(Wee," class method or the "),WJ=n(Wee,"A",{href:!0});var TAt=s(WJ);m8r=r(TAt,"from_config()"),TAt.forEach(t),g8r=r(Wee,` class
method.`),Wee.forEach(t),h8r=i(Gl),S9=n(Gl,"P",{});var nOe=s(S9);p8r=r(nOe,"This class cannot be instantiated directly using "),jTe=n(nOe,"CODE",{});var MAt=s(jTe);_8r=r(MAt,"__init__()"),MAt.forEach(t),u8r=r(nOe," (throws an error)."),nOe.forEach(t),b8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var aA=s(Gt);T(R9.$$.fragment,aA),v8r=i(aA),DTe=n(aA,"P",{});var EAt=s(DTe);F8r=r(EAt,"Instantiates one of the base model classes of the library from a configuration."),EAt.forEach(t),T8r=i(aA),kc=n(aA,"P",{});var Qee=s(kc);M8r=r(Qee,`Note:
Loading a model from its configuration file does `),GTe=n(Qee,"STRONG",{});var CAt=s(GTe);E8r=r(CAt,"not"),CAt.forEach(t),C8r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Qee,"A",{href:!0});var wAt=s(QJ);w8r=r(wAt,"from_pretrained()"),wAt.forEach(t),A8r=r(Qee," to load the model weights."),Qee.forEach(t),y8r=i(aA),T(R5.$$.fragment,aA),aA.forEach(t),L8r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(P9.$$.fragment,Ol),x8r=i(Ol),OTe=n(Ol,"P",{});var AAt=s(OTe);$8r=r(AAt,"Instantiate one of the base model classes of the library from a pretrained model."),AAt.forEach(t),k8r=i(Ol),hn=n(Ol,"P",{});var nA=s(hn);S8r=r(nA,"The model class to instantiate is selected based on the "),VTe=n(nA,"CODE",{});var yAt=s(VTe);R8r=r(yAt,"model_type"),yAt.forEach(t),P8r=r(nA,` property of the config object (either
passed as an argument or loaded from `),XTe=n(nA,"CODE",{});var LAt=s(XTe);B8r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),I8r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(nA,"CODE",{});var xAt=s(zTe);N8r=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),q8r=r(nA,":"),nA.forEach(t),j8r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);P5=n(ne,"LI",{});var TIe=s(P5);WTe=n(TIe,"STRONG",{});var $At=s(WTe);D8r=r($At,"albert"),$At.forEach(t),G8r=r(TIe," \u2014 "),HJ=n(TIe,"A",{href:!0});var kAt=s(HJ);O8r=r(kAt,"FlaxAlbertModel"),kAt.forEach(t),V8r=r(TIe," (ALBERT model)"),TIe.forEach(t),X8r=i(ne),B5=n(ne,"LI",{});var MIe=s(B5);QTe=n(MIe,"STRONG",{});var SAt=s(QTe);z8r=r(SAt,"bart"),SAt.forEach(t),W8r=r(MIe," \u2014 "),UJ=n(MIe,"A",{href:!0});var RAt=s(UJ);Q8r=r(RAt,"FlaxBartModel"),RAt.forEach(t),H8r=r(MIe," (BART model)"),MIe.forEach(t),U8r=i(ne),I5=n(ne,"LI",{});var EIe=s(I5);HTe=n(EIe,"STRONG",{});var PAt=s(HTe);J8r=r(PAt,"beit"),PAt.forEach(t),Y8r=r(EIe," \u2014 "),JJ=n(EIe,"A",{href:!0});var BAt=s(JJ);K8r=r(BAt,"FlaxBeitModel"),BAt.forEach(t),Z8r=r(EIe," (BEiT model)"),EIe.forEach(t),e9r=i(ne),N5=n(ne,"LI",{});var CIe=s(N5);UTe=n(CIe,"STRONG",{});var IAt=s(UTe);o9r=r(IAt,"bert"),IAt.forEach(t),r9r=r(CIe," \u2014 "),YJ=n(CIe,"A",{href:!0});var NAt=s(YJ);t9r=r(NAt,"FlaxBertModel"),NAt.forEach(t),a9r=r(CIe," (BERT model)"),CIe.forEach(t),n9r=i(ne),q5=n(ne,"LI",{});var wIe=s(q5);JTe=n(wIe,"STRONG",{});var qAt=s(JTe);s9r=r(qAt,"big_bird"),qAt.forEach(t),l9r=r(wIe," \u2014 "),KJ=n(wIe,"A",{href:!0});var jAt=s(KJ);i9r=r(jAt,"FlaxBigBirdModel"),jAt.forEach(t),d9r=r(wIe," (BigBird model)"),wIe.forEach(t),c9r=i(ne),j5=n(ne,"LI",{});var AIe=s(j5);YTe=n(AIe,"STRONG",{});var DAt=s(YTe);f9r=r(DAt,"blenderbot"),DAt.forEach(t),m9r=r(AIe," \u2014 "),ZJ=n(AIe,"A",{href:!0});var GAt=s(ZJ);g9r=r(GAt,"FlaxBlenderbotModel"),GAt.forEach(t),h9r=r(AIe," (Blenderbot model)"),AIe.forEach(t),p9r=i(ne),D5=n(ne,"LI",{});var yIe=s(D5);KTe=n(yIe,"STRONG",{});var OAt=s(KTe);_9r=r(OAt,"blenderbot-small"),OAt.forEach(t),u9r=r(yIe," \u2014 "),eY=n(yIe,"A",{href:!0});var VAt=s(eY);b9r=r(VAt,"FlaxBlenderbotSmallModel"),VAt.forEach(t),v9r=r(yIe," (BlenderbotSmall model)"),yIe.forEach(t),F9r=i(ne),G5=n(ne,"LI",{});var LIe=s(G5);ZTe=n(LIe,"STRONG",{});var XAt=s(ZTe);T9r=r(XAt,"clip"),XAt.forEach(t),M9r=r(LIe," \u2014 "),oY=n(LIe,"A",{href:!0});var zAt=s(oY);E9r=r(zAt,"FlaxCLIPModel"),zAt.forEach(t),C9r=r(LIe," (CLIP model)"),LIe.forEach(t),w9r=i(ne),O5=n(ne,"LI",{});var xIe=s(O5);eMe=n(xIe,"STRONG",{});var WAt=s(eMe);A9r=r(WAt,"distilbert"),WAt.forEach(t),y9r=r(xIe," \u2014 "),rY=n(xIe,"A",{href:!0});var QAt=s(rY);L9r=r(QAt,"FlaxDistilBertModel"),QAt.forEach(t),x9r=r(xIe," (DistilBERT model)"),xIe.forEach(t),$9r=i(ne),V5=n(ne,"LI",{});var $Ie=s(V5);oMe=n($Ie,"STRONG",{});var HAt=s(oMe);k9r=r(HAt,"electra"),HAt.forEach(t),S9r=r($Ie," \u2014 "),tY=n($Ie,"A",{href:!0});var UAt=s(tY);R9r=r(UAt,"FlaxElectraModel"),UAt.forEach(t),P9r=r($Ie," (ELECTRA model)"),$Ie.forEach(t),B9r=i(ne),X5=n(ne,"LI",{});var kIe=s(X5);rMe=n(kIe,"STRONG",{});var JAt=s(rMe);I9r=r(JAt,"gpt2"),JAt.forEach(t),N9r=r(kIe," \u2014 "),aY=n(kIe,"A",{href:!0});var YAt=s(aY);q9r=r(YAt,"FlaxGPT2Model"),YAt.forEach(t),j9r=r(kIe," (OpenAI GPT-2 model)"),kIe.forEach(t),D9r=i(ne),z5=n(ne,"LI",{});var SIe=s(z5);tMe=n(SIe,"STRONG",{});var KAt=s(tMe);G9r=r(KAt,"gpt_neo"),KAt.forEach(t),O9r=r(SIe," \u2014 "),nY=n(SIe,"A",{href:!0});var ZAt=s(nY);V9r=r(ZAt,"FlaxGPTNeoModel"),ZAt.forEach(t),X9r=r(SIe," (GPT Neo model)"),SIe.forEach(t),z9r=i(ne),W5=n(ne,"LI",{});var RIe=s(W5);aMe=n(RIe,"STRONG",{});var eyt=s(aMe);W9r=r(eyt,"gptj"),eyt.forEach(t),Q9r=r(RIe," \u2014 "),sY=n(RIe,"A",{href:!0});var oyt=s(sY);H9r=r(oyt,"FlaxGPTJModel"),oyt.forEach(t),U9r=r(RIe," (GPT-J model)"),RIe.forEach(t),J9r=i(ne),Q5=n(ne,"LI",{});var PIe=s(Q5);nMe=n(PIe,"STRONG",{});var ryt=s(nMe);Y9r=r(ryt,"marian"),ryt.forEach(t),K9r=r(PIe," \u2014 "),lY=n(PIe,"A",{href:!0});var tyt=s(lY);Z9r=r(tyt,"FlaxMarianModel"),tyt.forEach(t),exr=r(PIe," (Marian model)"),PIe.forEach(t),oxr=i(ne),H5=n(ne,"LI",{});var BIe=s(H5);sMe=n(BIe,"STRONG",{});var ayt=s(sMe);rxr=r(ayt,"mbart"),ayt.forEach(t),txr=r(BIe," \u2014 "),iY=n(BIe,"A",{href:!0});var nyt=s(iY);axr=r(nyt,"FlaxMBartModel"),nyt.forEach(t),nxr=r(BIe," (mBART model)"),BIe.forEach(t),sxr=i(ne),U5=n(ne,"LI",{});var IIe=s(U5);lMe=n(IIe,"STRONG",{});var syt=s(lMe);lxr=r(syt,"mt5"),syt.forEach(t),ixr=r(IIe," \u2014 "),dY=n(IIe,"A",{href:!0});var lyt=s(dY);dxr=r(lyt,"FlaxMT5Model"),lyt.forEach(t),cxr=r(IIe," (mT5 model)"),IIe.forEach(t),fxr=i(ne),J5=n(ne,"LI",{});var NIe=s(J5);iMe=n(NIe,"STRONG",{});var iyt=s(iMe);mxr=r(iyt,"pegasus"),iyt.forEach(t),gxr=r(NIe," \u2014 "),cY=n(NIe,"A",{href:!0});var dyt=s(cY);hxr=r(dyt,"FlaxPegasusModel"),dyt.forEach(t),pxr=r(NIe," (Pegasus model)"),NIe.forEach(t),_xr=i(ne),Y5=n(ne,"LI",{});var qIe=s(Y5);dMe=n(qIe,"STRONG",{});var cyt=s(dMe);uxr=r(cyt,"roberta"),cyt.forEach(t),bxr=r(qIe," \u2014 "),fY=n(qIe,"A",{href:!0});var fyt=s(fY);vxr=r(fyt,"FlaxRobertaModel"),fyt.forEach(t),Fxr=r(qIe," (RoBERTa model)"),qIe.forEach(t),Txr=i(ne),K5=n(ne,"LI",{});var jIe=s(K5);cMe=n(jIe,"STRONG",{});var myt=s(cMe);Mxr=r(myt,"roformer"),myt.forEach(t),Exr=r(jIe," \u2014 "),mY=n(jIe,"A",{href:!0});var gyt=s(mY);Cxr=r(gyt,"FlaxRoFormerModel"),gyt.forEach(t),wxr=r(jIe," (RoFormer model)"),jIe.forEach(t),Axr=i(ne),Z5=n(ne,"LI",{});var DIe=s(Z5);fMe=n(DIe,"STRONG",{});var hyt=s(fMe);yxr=r(hyt,"t5"),hyt.forEach(t),Lxr=r(DIe," \u2014 "),gY=n(DIe,"A",{href:!0});var pyt=s(gY);xxr=r(pyt,"FlaxT5Model"),pyt.forEach(t),$xr=r(DIe," (T5 model)"),DIe.forEach(t),kxr=i(ne),e3=n(ne,"LI",{});var GIe=s(e3);mMe=n(GIe,"STRONG",{});var _yt=s(mMe);Sxr=r(_yt,"vision-text-dual-encoder"),_yt.forEach(t),Rxr=r(GIe," \u2014 "),hY=n(GIe,"A",{href:!0});var uyt=s(hY);Pxr=r(uyt,"FlaxVisionTextDualEncoderModel"),uyt.forEach(t),Bxr=r(GIe," (VisionTextDualEncoder model)"),GIe.forEach(t),Ixr=i(ne),o3=n(ne,"LI",{});var OIe=s(o3);gMe=n(OIe,"STRONG",{});var byt=s(gMe);Nxr=r(byt,"vit"),byt.forEach(t),qxr=r(OIe," \u2014 "),pY=n(OIe,"A",{href:!0});var vyt=s(pY);jxr=r(vyt,"FlaxViTModel"),vyt.forEach(t),Dxr=r(OIe," (ViT model)"),OIe.forEach(t),Gxr=i(ne),r3=n(ne,"LI",{});var VIe=s(r3);hMe=n(VIe,"STRONG",{});var Fyt=s(hMe);Oxr=r(Fyt,"wav2vec2"),Fyt.forEach(t),Vxr=r(VIe," \u2014 "),_Y=n(VIe,"A",{href:!0});var Tyt=s(_Y);Xxr=r(Tyt,"FlaxWav2Vec2Model"),Tyt.forEach(t),zxr=r(VIe," (Wav2Vec2 model)"),VIe.forEach(t),Wxr=i(ne),t3=n(ne,"LI",{});var XIe=s(t3);pMe=n(XIe,"STRONG",{});var Myt=s(pMe);Qxr=r(Myt,"xglm"),Myt.forEach(t),Hxr=r(XIe," \u2014 "),uY=n(XIe,"A",{href:!0});var Eyt=s(uY);Uxr=r(Eyt,"FlaxXGLMModel"),Eyt.forEach(t),Jxr=r(XIe," (XGLM model)"),XIe.forEach(t),Yxr=i(ne),a3=n(ne,"LI",{});var zIe=s(a3);_Me=n(zIe,"STRONG",{});var Cyt=s(_Me);Kxr=r(Cyt,"xlm-roberta"),Cyt.forEach(t),Zxr=r(zIe," \u2014 "),bY=n(zIe,"A",{href:!0});var wyt=s(bY);e$r=r(wyt,"FlaxXLMRobertaModel"),wyt.forEach(t),o$r=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),ne.forEach(t),r$r=i(Ol),T(n3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Zje=i(f),Sc=n(f,"H2",{class:!0});var sOe=s(Sc);s3=n(sOe,"A",{id:!0,class:!0,href:!0});var Ayt=s(s3);uMe=n(Ayt,"SPAN",{});var yyt=s(uMe);T(B9.$$.fragment,yyt),yyt.forEach(t),Ayt.forEach(t),t$r=i(sOe),bMe=n(sOe,"SPAN",{});var Lyt=s(bMe);a$r=r(Lyt,"FlaxAutoModelForCausalLM"),Lyt.forEach(t),sOe.forEach(t),eDe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(I9.$$.fragment,Vl),n$r=i(Vl),Rc=n(Vl,"P",{});var Hee=s(Rc);s$r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vY=n(Hee,"A",{href:!0});var xyt=s(vY);l$r=r(xyt,"from_pretrained()"),xyt.forEach(t),i$r=r(Hee," class method or the "),FY=n(Hee,"A",{href:!0});var $yt=s(FY);d$r=r($yt,"from_config()"),$yt.forEach(t),c$r=r(Hee,` class
method.`),Hee.forEach(t),f$r=i(Vl),N9=n(Vl,"P",{});var lOe=s(N9);m$r=r(lOe,"This class cannot be instantiated directly using "),vMe=n(lOe,"CODE",{});var kyt=s(vMe);g$r=r(kyt,"__init__()"),kyt.forEach(t),h$r=r(lOe," (throws an error)."),lOe.forEach(t),p$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var sA=s(Ot);T(q9.$$.fragment,sA),_$r=i(sA),FMe=n(sA,"P",{});var Syt=s(FMe);u$r=r(Syt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Syt.forEach(t),b$r=i(sA),Pc=n(sA,"P",{});var Uee=s(Pc);v$r=r(Uee,`Note:
Loading a model from its configuration file does `),TMe=n(Uee,"STRONG",{});var Ryt=s(TMe);F$r=r(Ryt,"not"),Ryt.forEach(t),T$r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Uee,"A",{href:!0});var Pyt=s(TY);M$r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),E$r=r(Uee," to load the model weights."),Uee.forEach(t),C$r=i(sA),T(l3.$$.fragment,sA),sA.forEach(t),w$r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(j9.$$.fragment,Xl),A$r=i(Xl),MMe=n(Xl,"P",{});var Byt=s(MMe);y$r=r(Byt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Byt.forEach(t),L$r=i(Xl),pn=n(Xl,"P",{});var lA=s(pn);x$r=r(lA,"The model class to instantiate is selected based on the "),EMe=n(lA,"CODE",{});var Iyt=s(EMe);$$r=r(Iyt,"model_type"),Iyt.forEach(t),k$r=r(lA,` property of the config object (either
passed as an argument or loaded from `),CMe=n(lA,"CODE",{});var Nyt=s(CMe);S$r=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),R$r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(lA,"CODE",{});var qyt=s(wMe);P$r=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),B$r=r(lA,":"),lA.forEach(t),I$r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);i3=n(Xe,"LI",{});var WIe=s(i3);AMe=n(WIe,"STRONG",{});var jyt=s(AMe);N$r=r(jyt,"bart"),jyt.forEach(t),q$r=r(WIe," \u2014 "),MY=n(WIe,"A",{href:!0});var Dyt=s(MY);j$r=r(Dyt,"FlaxBartForCausalLM"),Dyt.forEach(t),D$r=r(WIe," (BART model)"),WIe.forEach(t),G$r=i(Xe),d3=n(Xe,"LI",{});var QIe=s(d3);yMe=n(QIe,"STRONG",{});var Gyt=s(yMe);O$r=r(Gyt,"bert"),Gyt.forEach(t),V$r=r(QIe," \u2014 "),EY=n(QIe,"A",{href:!0});var Oyt=s(EY);X$r=r(Oyt,"FlaxBertForCausalLM"),Oyt.forEach(t),z$r=r(QIe," (BERT model)"),QIe.forEach(t),W$r=i(Xe),c3=n(Xe,"LI",{});var HIe=s(c3);LMe=n(HIe,"STRONG",{});var Vyt=s(LMe);Q$r=r(Vyt,"big_bird"),Vyt.forEach(t),H$r=r(HIe," \u2014 "),CY=n(HIe,"A",{href:!0});var Xyt=s(CY);U$r=r(Xyt,"FlaxBigBirdForCausalLM"),Xyt.forEach(t),J$r=r(HIe," (BigBird model)"),HIe.forEach(t),Y$r=i(Xe),f3=n(Xe,"LI",{});var UIe=s(f3);xMe=n(UIe,"STRONG",{});var zyt=s(xMe);K$r=r(zyt,"electra"),zyt.forEach(t),Z$r=r(UIe," \u2014 "),wY=n(UIe,"A",{href:!0});var Wyt=s(wY);ekr=r(Wyt,"FlaxElectraForCausalLM"),Wyt.forEach(t),okr=r(UIe," (ELECTRA model)"),UIe.forEach(t),rkr=i(Xe),m3=n(Xe,"LI",{});var JIe=s(m3);$Me=n(JIe,"STRONG",{});var Qyt=s($Me);tkr=r(Qyt,"gpt2"),Qyt.forEach(t),akr=r(JIe," \u2014 "),AY=n(JIe,"A",{href:!0});var Hyt=s(AY);nkr=r(Hyt,"FlaxGPT2LMHeadModel"),Hyt.forEach(t),skr=r(JIe," (OpenAI GPT-2 model)"),JIe.forEach(t),lkr=i(Xe),g3=n(Xe,"LI",{});var YIe=s(g3);kMe=n(YIe,"STRONG",{});var Uyt=s(kMe);ikr=r(Uyt,"gpt_neo"),Uyt.forEach(t),dkr=r(YIe," \u2014 "),yY=n(YIe,"A",{href:!0});var Jyt=s(yY);ckr=r(Jyt,"FlaxGPTNeoForCausalLM"),Jyt.forEach(t),fkr=r(YIe," (GPT Neo model)"),YIe.forEach(t),mkr=i(Xe),h3=n(Xe,"LI",{});var KIe=s(h3);SMe=n(KIe,"STRONG",{});var Yyt=s(SMe);gkr=r(Yyt,"gptj"),Yyt.forEach(t),hkr=r(KIe," \u2014 "),LY=n(KIe,"A",{href:!0});var Kyt=s(LY);pkr=r(Kyt,"FlaxGPTJForCausalLM"),Kyt.forEach(t),_kr=r(KIe," (GPT-J model)"),KIe.forEach(t),ukr=i(Xe),p3=n(Xe,"LI",{});var ZIe=s(p3);RMe=n(ZIe,"STRONG",{});var Zyt=s(RMe);bkr=r(Zyt,"roberta"),Zyt.forEach(t),vkr=r(ZIe," \u2014 "),xY=n(ZIe,"A",{href:!0});var eLt=s(xY);Fkr=r(eLt,"FlaxRobertaForCausalLM"),eLt.forEach(t),Tkr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),Mkr=i(Xe),_3=n(Xe,"LI",{});var eNe=s(_3);PMe=n(eNe,"STRONG",{});var oLt=s(PMe);Ekr=r(oLt,"xglm"),oLt.forEach(t),Ckr=r(eNe," \u2014 "),$Y=n(eNe,"A",{href:!0});var rLt=s($Y);wkr=r(rLt,"FlaxXGLMForCausalLM"),rLt.forEach(t),Akr=r(eNe," (XGLM model)"),eNe.forEach(t),Xe.forEach(t),ykr=i(Xl),T(u3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),oDe=i(f),Bc=n(f,"H2",{class:!0});var iOe=s(Bc);b3=n(iOe,"A",{id:!0,class:!0,href:!0});var tLt=s(b3);BMe=n(tLt,"SPAN",{});var aLt=s(BMe);T(D9.$$.fragment,aLt),aLt.forEach(t),tLt.forEach(t),Lkr=i(iOe),IMe=n(iOe,"SPAN",{});var nLt=s(IMe);xkr=r(nLt,"FlaxAutoModelForPreTraining"),nLt.forEach(t),iOe.forEach(t),rDe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(G9.$$.fragment,zl),$kr=i(zl),Ic=n(zl,"P",{});var Jee=s(Ic);kkr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=n(Jee,"A",{href:!0});var sLt=s(kY);Skr=r(sLt,"from_pretrained()"),sLt.forEach(t),Rkr=r(Jee," class method or the "),SY=n(Jee,"A",{href:!0});var lLt=s(SY);Pkr=r(lLt,"from_config()"),lLt.forEach(t),Bkr=r(Jee,` class
method.`),Jee.forEach(t),Ikr=i(zl),O9=n(zl,"P",{});var dOe=s(O9);Nkr=r(dOe,"This class cannot be instantiated directly using "),NMe=n(dOe,"CODE",{});var iLt=s(NMe);qkr=r(iLt,"__init__()"),iLt.forEach(t),jkr=r(dOe," (throws an error)."),dOe.forEach(t),Dkr=i(zl),Vt=n(zl,"DIV",{class:!0});var iA=s(Vt);T(V9.$$.fragment,iA),Gkr=i(iA),qMe=n(iA,"P",{});var dLt=s(qMe);Okr=r(dLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dLt.forEach(t),Vkr=i(iA),Nc=n(iA,"P",{});var Yee=s(Nc);Xkr=r(Yee,`Note:
Loading a model from its configuration file does `),jMe=n(Yee,"STRONG",{});var cLt=s(jMe);zkr=r(cLt,"not"),cLt.forEach(t),Wkr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Yee,"A",{href:!0});var fLt=s(RY);Qkr=r(fLt,"from_pretrained()"),fLt.forEach(t),Hkr=r(Yee," to load the model weights."),Yee.forEach(t),Ukr=i(iA),T(v3.$$.fragment,iA),iA.forEach(t),Jkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(X9.$$.fragment,Wl),Ykr=i(Wl),DMe=n(Wl,"P",{});var mLt=s(DMe);Kkr=r(mLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mLt.forEach(t),Zkr=i(Wl),_n=n(Wl,"P",{});var dA=s(_n);eSr=r(dA,"The model class to instantiate is selected based on the "),GMe=n(dA,"CODE",{});var gLt=s(GMe);oSr=r(gLt,"model_type"),gLt.forEach(t),rSr=r(dA,` property of the config object (either
passed as an argument or loaded from `),OMe=n(dA,"CODE",{});var hLt=s(OMe);tSr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),aSr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(dA,"CODE",{});var pLt=s(VMe);nSr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),sSr=r(dA,":"),dA.forEach(t),lSr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);F3=n(we,"LI",{});var oNe=s(F3);XMe=n(oNe,"STRONG",{});var _Lt=s(XMe);iSr=r(_Lt,"albert"),_Lt.forEach(t),dSr=r(oNe," \u2014 "),PY=n(oNe,"A",{href:!0});var uLt=s(PY);cSr=r(uLt,"FlaxAlbertForPreTraining"),uLt.forEach(t),fSr=r(oNe," (ALBERT model)"),oNe.forEach(t),mSr=i(we),T3=n(we,"LI",{});var rNe=s(T3);zMe=n(rNe,"STRONG",{});var bLt=s(zMe);gSr=r(bLt,"bart"),bLt.forEach(t),hSr=r(rNe," \u2014 "),BY=n(rNe,"A",{href:!0});var vLt=s(BY);pSr=r(vLt,"FlaxBartForConditionalGeneration"),vLt.forEach(t),_Sr=r(rNe," (BART model)"),rNe.forEach(t),uSr=i(we),M3=n(we,"LI",{});var tNe=s(M3);WMe=n(tNe,"STRONG",{});var FLt=s(WMe);bSr=r(FLt,"bert"),FLt.forEach(t),vSr=r(tNe," \u2014 "),IY=n(tNe,"A",{href:!0});var TLt=s(IY);FSr=r(TLt,"FlaxBertForPreTraining"),TLt.forEach(t),TSr=r(tNe," (BERT model)"),tNe.forEach(t),MSr=i(we),E3=n(we,"LI",{});var aNe=s(E3);QMe=n(aNe,"STRONG",{});var MLt=s(QMe);ESr=r(MLt,"big_bird"),MLt.forEach(t),CSr=r(aNe," \u2014 "),NY=n(aNe,"A",{href:!0});var ELt=s(NY);wSr=r(ELt,"FlaxBigBirdForPreTraining"),ELt.forEach(t),ASr=r(aNe," (BigBird model)"),aNe.forEach(t),ySr=i(we),C3=n(we,"LI",{});var nNe=s(C3);HMe=n(nNe,"STRONG",{});var CLt=s(HMe);LSr=r(CLt,"electra"),CLt.forEach(t),xSr=r(nNe," \u2014 "),qY=n(nNe,"A",{href:!0});var wLt=s(qY);$Sr=r(wLt,"FlaxElectraForPreTraining"),wLt.forEach(t),kSr=r(nNe," (ELECTRA model)"),nNe.forEach(t),SSr=i(we),w3=n(we,"LI",{});var sNe=s(w3);UMe=n(sNe,"STRONG",{});var ALt=s(UMe);RSr=r(ALt,"mbart"),ALt.forEach(t),PSr=r(sNe," \u2014 "),jY=n(sNe,"A",{href:!0});var yLt=s(jY);BSr=r(yLt,"FlaxMBartForConditionalGeneration"),yLt.forEach(t),ISr=r(sNe," (mBART model)"),sNe.forEach(t),NSr=i(we),A3=n(we,"LI",{});var lNe=s(A3);JMe=n(lNe,"STRONG",{});var LLt=s(JMe);qSr=r(LLt,"mt5"),LLt.forEach(t),jSr=r(lNe," \u2014 "),DY=n(lNe,"A",{href:!0});var xLt=s(DY);DSr=r(xLt,"FlaxMT5ForConditionalGeneration"),xLt.forEach(t),GSr=r(lNe," (mT5 model)"),lNe.forEach(t),OSr=i(we),y3=n(we,"LI",{});var iNe=s(y3);YMe=n(iNe,"STRONG",{});var $Lt=s(YMe);VSr=r($Lt,"roberta"),$Lt.forEach(t),XSr=r(iNe," \u2014 "),GY=n(iNe,"A",{href:!0});var kLt=s(GY);zSr=r(kLt,"FlaxRobertaForMaskedLM"),kLt.forEach(t),WSr=r(iNe," (RoBERTa model)"),iNe.forEach(t),QSr=i(we),L3=n(we,"LI",{});var dNe=s(L3);KMe=n(dNe,"STRONG",{});var SLt=s(KMe);HSr=r(SLt,"roformer"),SLt.forEach(t),USr=r(dNe," \u2014 "),OY=n(dNe,"A",{href:!0});var RLt=s(OY);JSr=r(RLt,"FlaxRoFormerForMaskedLM"),RLt.forEach(t),YSr=r(dNe," (RoFormer model)"),dNe.forEach(t),KSr=i(we),x3=n(we,"LI",{});var cNe=s(x3);ZMe=n(cNe,"STRONG",{});var PLt=s(ZMe);ZSr=r(PLt,"t5"),PLt.forEach(t),eRr=r(cNe," \u2014 "),VY=n(cNe,"A",{href:!0});var BLt=s(VY);oRr=r(BLt,"FlaxT5ForConditionalGeneration"),BLt.forEach(t),rRr=r(cNe," (T5 model)"),cNe.forEach(t),tRr=i(we),$3=n(we,"LI",{});var fNe=s($3);eEe=n(fNe,"STRONG",{});var ILt=s(eEe);aRr=r(ILt,"wav2vec2"),ILt.forEach(t),nRr=r(fNe," \u2014 "),XY=n(fNe,"A",{href:!0});var NLt=s(XY);sRr=r(NLt,"FlaxWav2Vec2ForPreTraining"),NLt.forEach(t),lRr=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),iRr=i(we),k3=n(we,"LI",{});var mNe=s(k3);oEe=n(mNe,"STRONG",{});var qLt=s(oEe);dRr=r(qLt,"xlm-roberta"),qLt.forEach(t),cRr=r(mNe," \u2014 "),zY=n(mNe,"A",{href:!0});var jLt=s(zY);fRr=r(jLt,"FlaxXLMRobertaForMaskedLM"),jLt.forEach(t),mRr=r(mNe," (XLM-RoBERTa model)"),mNe.forEach(t),we.forEach(t),gRr=i(Wl),T(S3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),tDe=i(f),qc=n(f,"H2",{class:!0});var cOe=s(qc);R3=n(cOe,"A",{id:!0,class:!0,href:!0});var DLt=s(R3);rEe=n(DLt,"SPAN",{});var GLt=s(rEe);T(z9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),hRr=i(cOe),tEe=n(cOe,"SPAN",{});var OLt=s(tEe);pRr=r(OLt,"FlaxAutoModelForMaskedLM"),OLt.forEach(t),cOe.forEach(t),aDe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(W9.$$.fragment,Ql),_Rr=i(Ql),jc=n(Ql,"P",{});var Kee=s(jc);uRr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=n(Kee,"A",{href:!0});var VLt=s(WY);bRr=r(VLt,"from_pretrained()"),VLt.forEach(t),vRr=r(Kee," class method or the "),QY=n(Kee,"A",{href:!0});var XLt=s(QY);FRr=r(XLt,"from_config()"),XLt.forEach(t),TRr=r(Kee,` class
method.`),Kee.forEach(t),MRr=i(Ql),Q9=n(Ql,"P",{});var fOe=s(Q9);ERr=r(fOe,"This class cannot be instantiated directly using "),aEe=n(fOe,"CODE",{});var zLt=s(aEe);CRr=r(zLt,"__init__()"),zLt.forEach(t),wRr=r(fOe," (throws an error)."),fOe.forEach(t),ARr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var cA=s(Xt);T(H9.$$.fragment,cA),yRr=i(cA),nEe=n(cA,"P",{});var WLt=s(nEe);LRr=r(WLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WLt.forEach(t),xRr=i(cA),Dc=n(cA,"P",{});var Zee=s(Dc);$Rr=r(Zee,`Note:
Loading a model from its configuration file does `),sEe=n(Zee,"STRONG",{});var QLt=s(sEe);kRr=r(QLt,"not"),QLt.forEach(t),SRr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Zee,"A",{href:!0});var HLt=s(HY);RRr=r(HLt,"from_pretrained()"),HLt.forEach(t),PRr=r(Zee," to load the model weights."),Zee.forEach(t),BRr=i(cA),T(P3.$$.fragment,cA),cA.forEach(t),IRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(U9.$$.fragment,Hl),NRr=i(Hl),lEe=n(Hl,"P",{});var ULt=s(lEe);qRr=r(ULt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ULt.forEach(t),jRr=i(Hl),un=n(Hl,"P",{});var fA=s(un);DRr=r(fA,"The model class to instantiate is selected based on the "),iEe=n(fA,"CODE",{});var JLt=s(iEe);GRr=r(JLt,"model_type"),JLt.forEach(t),ORr=r(fA,` property of the config object (either
passed as an argument or loaded from `),dEe=n(fA,"CODE",{});var YLt=s(dEe);VRr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),XRr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cEe=n(fA,"CODE",{});var KLt=s(cEe);zRr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),WRr=r(fA,":"),fA.forEach(t),QRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);B3=n(Ie,"LI",{});var gNe=s(B3);fEe=n(gNe,"STRONG",{});var ZLt=s(fEe);HRr=r(ZLt,"albert"),ZLt.forEach(t),URr=r(gNe," \u2014 "),UY=n(gNe,"A",{href:!0});var e8t=s(UY);JRr=r(e8t,"FlaxAlbertForMaskedLM"),e8t.forEach(t),YRr=r(gNe," (ALBERT model)"),gNe.forEach(t),KRr=i(Ie),I3=n(Ie,"LI",{});var hNe=s(I3);mEe=n(hNe,"STRONG",{});var o8t=s(mEe);ZRr=r(o8t,"bart"),o8t.forEach(t),ePr=r(hNe," \u2014 "),JY=n(hNe,"A",{href:!0});var r8t=s(JY);oPr=r(r8t,"FlaxBartForConditionalGeneration"),r8t.forEach(t),rPr=r(hNe," (BART model)"),hNe.forEach(t),tPr=i(Ie),N3=n(Ie,"LI",{});var pNe=s(N3);gEe=n(pNe,"STRONG",{});var t8t=s(gEe);aPr=r(t8t,"bert"),t8t.forEach(t),nPr=r(pNe," \u2014 "),YY=n(pNe,"A",{href:!0});var a8t=s(YY);sPr=r(a8t,"FlaxBertForMaskedLM"),a8t.forEach(t),lPr=r(pNe," (BERT model)"),pNe.forEach(t),iPr=i(Ie),q3=n(Ie,"LI",{});var _Ne=s(q3);hEe=n(_Ne,"STRONG",{});var n8t=s(hEe);dPr=r(n8t,"big_bird"),n8t.forEach(t),cPr=r(_Ne," \u2014 "),KY=n(_Ne,"A",{href:!0});var s8t=s(KY);fPr=r(s8t,"FlaxBigBirdForMaskedLM"),s8t.forEach(t),mPr=r(_Ne," (BigBird model)"),_Ne.forEach(t),gPr=i(Ie),j3=n(Ie,"LI",{});var uNe=s(j3);pEe=n(uNe,"STRONG",{});var l8t=s(pEe);hPr=r(l8t,"distilbert"),l8t.forEach(t),pPr=r(uNe," \u2014 "),ZY=n(uNe,"A",{href:!0});var i8t=s(ZY);_Pr=r(i8t,"FlaxDistilBertForMaskedLM"),i8t.forEach(t),uPr=r(uNe," (DistilBERT model)"),uNe.forEach(t),bPr=i(Ie),D3=n(Ie,"LI",{});var bNe=s(D3);_Ee=n(bNe,"STRONG",{});var d8t=s(_Ee);vPr=r(d8t,"electra"),d8t.forEach(t),FPr=r(bNe," \u2014 "),eK=n(bNe,"A",{href:!0});var c8t=s(eK);TPr=r(c8t,"FlaxElectraForMaskedLM"),c8t.forEach(t),MPr=r(bNe," (ELECTRA model)"),bNe.forEach(t),EPr=i(Ie),G3=n(Ie,"LI",{});var vNe=s(G3);uEe=n(vNe,"STRONG",{});var f8t=s(uEe);CPr=r(f8t,"mbart"),f8t.forEach(t),wPr=r(vNe," \u2014 "),oK=n(vNe,"A",{href:!0});var m8t=s(oK);APr=r(m8t,"FlaxMBartForConditionalGeneration"),m8t.forEach(t),yPr=r(vNe," (mBART model)"),vNe.forEach(t),LPr=i(Ie),O3=n(Ie,"LI",{});var FNe=s(O3);bEe=n(FNe,"STRONG",{});var g8t=s(bEe);xPr=r(g8t,"roberta"),g8t.forEach(t),$Pr=r(FNe," \u2014 "),rK=n(FNe,"A",{href:!0});var h8t=s(rK);kPr=r(h8t,"FlaxRobertaForMaskedLM"),h8t.forEach(t),SPr=r(FNe," (RoBERTa model)"),FNe.forEach(t),RPr=i(Ie),V3=n(Ie,"LI",{});var TNe=s(V3);vEe=n(TNe,"STRONG",{});var p8t=s(vEe);PPr=r(p8t,"roformer"),p8t.forEach(t),BPr=r(TNe," \u2014 "),tK=n(TNe,"A",{href:!0});var _8t=s(tK);IPr=r(_8t,"FlaxRoFormerForMaskedLM"),_8t.forEach(t),NPr=r(TNe," (RoFormer model)"),TNe.forEach(t),qPr=i(Ie),X3=n(Ie,"LI",{});var MNe=s(X3);FEe=n(MNe,"STRONG",{});var u8t=s(FEe);jPr=r(u8t,"xlm-roberta"),u8t.forEach(t),DPr=r(MNe," \u2014 "),aK=n(MNe,"A",{href:!0});var b8t=s(aK);GPr=r(b8t,"FlaxXLMRobertaForMaskedLM"),b8t.forEach(t),OPr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),Ie.forEach(t),VPr=i(Hl),T(z3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),nDe=i(f),Gc=n(f,"H2",{class:!0});var mOe=s(Gc);W3=n(mOe,"A",{id:!0,class:!0,href:!0});var v8t=s(W3);TEe=n(v8t,"SPAN",{});var F8t=s(TEe);T(J9.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),XPr=i(mOe),MEe=n(mOe,"SPAN",{});var T8t=s(MEe);zPr=r(T8t,"FlaxAutoModelForSeq2SeqLM"),T8t.forEach(t),mOe.forEach(t),sDe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(Y9.$$.fragment,Ul),WPr=i(Ul),Oc=n(Ul,"P",{});var eoe=s(Oc);QPr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=n(eoe,"A",{href:!0});var M8t=s(nK);HPr=r(M8t,"from_pretrained()"),M8t.forEach(t),UPr=r(eoe," class method or the "),sK=n(eoe,"A",{href:!0});var E8t=s(sK);JPr=r(E8t,"from_config()"),E8t.forEach(t),YPr=r(eoe,` class
method.`),eoe.forEach(t),KPr=i(Ul),K9=n(Ul,"P",{});var gOe=s(K9);ZPr=r(gOe,"This class cannot be instantiated directly using "),EEe=n(gOe,"CODE",{});var C8t=s(EEe);eBr=r(C8t,"__init__()"),C8t.forEach(t),oBr=r(gOe," (throws an error)."),gOe.forEach(t),rBr=i(Ul),zt=n(Ul,"DIV",{class:!0});var mA=s(zt);T(Z9.$$.fragment,mA),tBr=i(mA),CEe=n(mA,"P",{});var w8t=s(CEe);aBr=r(w8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w8t.forEach(t),nBr=i(mA),Vc=n(mA,"P",{});var ooe=s(Vc);sBr=r(ooe,`Note:
Loading a model from its configuration file does `),wEe=n(ooe,"STRONG",{});var A8t=s(wEe);lBr=r(A8t,"not"),A8t.forEach(t),iBr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(ooe,"A",{href:!0});var y8t=s(lK);dBr=r(y8t,"from_pretrained()"),y8t.forEach(t),cBr=r(ooe," to load the model weights."),ooe.forEach(t),fBr=i(mA),T(Q3.$$.fragment,mA),mA.forEach(t),mBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(ex.$$.fragment,Jl),gBr=i(Jl),AEe=n(Jl,"P",{});var L8t=s(AEe);hBr=r(L8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L8t.forEach(t),pBr=i(Jl),bn=n(Jl,"P",{});var gA=s(bn);_Br=r(gA,"The model class to instantiate is selected based on the "),yEe=n(gA,"CODE",{});var x8t=s(yEe);uBr=r(x8t,"model_type"),x8t.forEach(t),bBr=r(gA,` property of the config object (either
passed as an argument or loaded from `),LEe=n(gA,"CODE",{});var $8t=s(LEe);vBr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),FBr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=n(gA,"CODE",{});var k8t=s(xEe);TBr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),MBr=r(gA,":"),gA.forEach(t),EBr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);H3=n(ze,"LI",{});var ENe=s(H3);$Ee=n(ENe,"STRONG",{});var S8t=s($Ee);CBr=r(S8t,"bart"),S8t.forEach(t),wBr=r(ENe," \u2014 "),iK=n(ENe,"A",{href:!0});var R8t=s(iK);ABr=r(R8t,"FlaxBartForConditionalGeneration"),R8t.forEach(t),yBr=r(ENe," (BART model)"),ENe.forEach(t),LBr=i(ze),U3=n(ze,"LI",{});var CNe=s(U3);kEe=n(CNe,"STRONG",{});var P8t=s(kEe);xBr=r(P8t,"blenderbot"),P8t.forEach(t),$Br=r(CNe," \u2014 "),dK=n(CNe,"A",{href:!0});var B8t=s(dK);kBr=r(B8t,"FlaxBlenderbotForConditionalGeneration"),B8t.forEach(t),SBr=r(CNe," (Blenderbot model)"),CNe.forEach(t),RBr=i(ze),J3=n(ze,"LI",{});var wNe=s(J3);SEe=n(wNe,"STRONG",{});var I8t=s(SEe);PBr=r(I8t,"blenderbot-small"),I8t.forEach(t),BBr=r(wNe," \u2014 "),cK=n(wNe,"A",{href:!0});var N8t=s(cK);IBr=r(N8t,"FlaxBlenderbotSmallForConditionalGeneration"),N8t.forEach(t),NBr=r(wNe," (BlenderbotSmall model)"),wNe.forEach(t),qBr=i(ze),Y3=n(ze,"LI",{});var ANe=s(Y3);REe=n(ANe,"STRONG",{});var q8t=s(REe);jBr=r(q8t,"encoder-decoder"),q8t.forEach(t),DBr=r(ANe," \u2014 "),fK=n(ANe,"A",{href:!0});var j8t=s(fK);GBr=r(j8t,"FlaxEncoderDecoderModel"),j8t.forEach(t),OBr=r(ANe," (Encoder decoder model)"),ANe.forEach(t),VBr=i(ze),K3=n(ze,"LI",{});var yNe=s(K3);PEe=n(yNe,"STRONG",{});var D8t=s(PEe);XBr=r(D8t,"marian"),D8t.forEach(t),zBr=r(yNe," \u2014 "),mK=n(yNe,"A",{href:!0});var G8t=s(mK);WBr=r(G8t,"FlaxMarianMTModel"),G8t.forEach(t),QBr=r(yNe," (Marian model)"),yNe.forEach(t),HBr=i(ze),Z3=n(ze,"LI",{});var LNe=s(Z3);BEe=n(LNe,"STRONG",{});var O8t=s(BEe);UBr=r(O8t,"mbart"),O8t.forEach(t),JBr=r(LNe," \u2014 "),gK=n(LNe,"A",{href:!0});var V8t=s(gK);YBr=r(V8t,"FlaxMBartForConditionalGeneration"),V8t.forEach(t),KBr=r(LNe," (mBART model)"),LNe.forEach(t),ZBr=i(ze),ew=n(ze,"LI",{});var xNe=s(ew);IEe=n(xNe,"STRONG",{});var X8t=s(IEe);eIr=r(X8t,"mt5"),X8t.forEach(t),oIr=r(xNe," \u2014 "),hK=n(xNe,"A",{href:!0});var z8t=s(hK);rIr=r(z8t,"FlaxMT5ForConditionalGeneration"),z8t.forEach(t),tIr=r(xNe," (mT5 model)"),xNe.forEach(t),aIr=i(ze),ow=n(ze,"LI",{});var $Ne=s(ow);NEe=n($Ne,"STRONG",{});var W8t=s(NEe);nIr=r(W8t,"pegasus"),W8t.forEach(t),sIr=r($Ne," \u2014 "),pK=n($Ne,"A",{href:!0});var Q8t=s(pK);lIr=r(Q8t,"FlaxPegasusForConditionalGeneration"),Q8t.forEach(t),iIr=r($Ne," (Pegasus model)"),$Ne.forEach(t),dIr=i(ze),rw=n(ze,"LI",{});var kNe=s(rw);qEe=n(kNe,"STRONG",{});var H8t=s(qEe);cIr=r(H8t,"t5"),H8t.forEach(t),fIr=r(kNe," \u2014 "),_K=n(kNe,"A",{href:!0});var U8t=s(_K);mIr=r(U8t,"FlaxT5ForConditionalGeneration"),U8t.forEach(t),gIr=r(kNe," (T5 model)"),kNe.forEach(t),ze.forEach(t),hIr=i(Jl),T(tw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),lDe=i(f),Xc=n(f,"H2",{class:!0});var hOe=s(Xc);aw=n(hOe,"A",{id:!0,class:!0,href:!0});var J8t=s(aw);jEe=n(J8t,"SPAN",{});var Y8t=s(jEe);T(ox.$$.fragment,Y8t),Y8t.forEach(t),J8t.forEach(t),pIr=i(hOe),DEe=n(hOe,"SPAN",{});var K8t=s(DEe);_Ir=r(K8t,"FlaxAutoModelForSequenceClassification"),K8t.forEach(t),hOe.forEach(t),iDe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(rx.$$.fragment,Yl),uIr=i(Yl),zc=n(Yl,"P",{});var roe=s(zc);bIr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=n(roe,"A",{href:!0});var Z8t=s(uK);vIr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),FIr=r(roe," class method or the "),bK=n(roe,"A",{href:!0});var e9t=s(bK);TIr=r(e9t,"from_config()"),e9t.forEach(t),MIr=r(roe,` class
method.`),roe.forEach(t),EIr=i(Yl),tx=n(Yl,"P",{});var pOe=s(tx);CIr=r(pOe,"This class cannot be instantiated directly using "),GEe=n(pOe,"CODE",{});var o9t=s(GEe);wIr=r(o9t,"__init__()"),o9t.forEach(t),AIr=r(pOe," (throws an error)."),pOe.forEach(t),yIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var hA=s(Wt);T(ax.$$.fragment,hA),LIr=i(hA),OEe=n(hA,"P",{});var r9t=s(OEe);xIr=r(r9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r9t.forEach(t),$Ir=i(hA),Wc=n(hA,"P",{});var toe=s(Wc);kIr=r(toe,`Note:
Loading a model from its configuration file does `),VEe=n(toe,"STRONG",{});var t9t=s(VEe);SIr=r(t9t,"not"),t9t.forEach(t),RIr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(toe,"A",{href:!0});var a9t=s(vK);PIr=r(a9t,"from_pretrained()"),a9t.forEach(t),BIr=r(toe," to load the model weights."),toe.forEach(t),IIr=i(hA),T(nw.$$.fragment,hA),hA.forEach(t),NIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(nx.$$.fragment,Kl),qIr=i(Kl),XEe=n(Kl,"P",{});var n9t=s(XEe);jIr=r(n9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n9t.forEach(t),DIr=i(Kl),vn=n(Kl,"P",{});var pA=s(vn);GIr=r(pA,"The model class to instantiate is selected based on the "),zEe=n(pA,"CODE",{});var s9t=s(zEe);OIr=r(s9t,"model_type"),s9t.forEach(t),VIr=r(pA,` property of the config object (either
passed as an argument or loaded from `),WEe=n(pA,"CODE",{});var l9t=s(WEe);XIr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),zIr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(pA,"CODE",{});var i9t=s(QEe);WIr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),QIr=r(pA,":"),pA.forEach(t),HIr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);sw=n(Ne,"LI",{});var SNe=s(sw);HEe=n(SNe,"STRONG",{});var d9t=s(HEe);UIr=r(d9t,"albert"),d9t.forEach(t),JIr=r(SNe," \u2014 "),FK=n(SNe,"A",{href:!0});var c9t=s(FK);YIr=r(c9t,"FlaxAlbertForSequenceClassification"),c9t.forEach(t),KIr=r(SNe," (ALBERT model)"),SNe.forEach(t),ZIr=i(Ne),lw=n(Ne,"LI",{});var RNe=s(lw);UEe=n(RNe,"STRONG",{});var f9t=s(UEe);eNr=r(f9t,"bart"),f9t.forEach(t),oNr=r(RNe," \u2014 "),TK=n(RNe,"A",{href:!0});var m9t=s(TK);rNr=r(m9t,"FlaxBartForSequenceClassification"),m9t.forEach(t),tNr=r(RNe," (BART model)"),RNe.forEach(t),aNr=i(Ne),iw=n(Ne,"LI",{});var PNe=s(iw);JEe=n(PNe,"STRONG",{});var g9t=s(JEe);nNr=r(g9t,"bert"),g9t.forEach(t),sNr=r(PNe," \u2014 "),MK=n(PNe,"A",{href:!0});var h9t=s(MK);lNr=r(h9t,"FlaxBertForSequenceClassification"),h9t.forEach(t),iNr=r(PNe," (BERT model)"),PNe.forEach(t),dNr=i(Ne),dw=n(Ne,"LI",{});var BNe=s(dw);YEe=n(BNe,"STRONG",{});var p9t=s(YEe);cNr=r(p9t,"big_bird"),p9t.forEach(t),fNr=r(BNe," \u2014 "),EK=n(BNe,"A",{href:!0});var _9t=s(EK);mNr=r(_9t,"FlaxBigBirdForSequenceClassification"),_9t.forEach(t),gNr=r(BNe," (BigBird model)"),BNe.forEach(t),hNr=i(Ne),cw=n(Ne,"LI",{});var INe=s(cw);KEe=n(INe,"STRONG",{});var u9t=s(KEe);pNr=r(u9t,"distilbert"),u9t.forEach(t),_Nr=r(INe," \u2014 "),CK=n(INe,"A",{href:!0});var b9t=s(CK);uNr=r(b9t,"FlaxDistilBertForSequenceClassification"),b9t.forEach(t),bNr=r(INe," (DistilBERT model)"),INe.forEach(t),vNr=i(Ne),fw=n(Ne,"LI",{});var NNe=s(fw);ZEe=n(NNe,"STRONG",{});var v9t=s(ZEe);FNr=r(v9t,"electra"),v9t.forEach(t),TNr=r(NNe," \u2014 "),wK=n(NNe,"A",{href:!0});var F9t=s(wK);MNr=r(F9t,"FlaxElectraForSequenceClassification"),F9t.forEach(t),ENr=r(NNe," (ELECTRA model)"),NNe.forEach(t),CNr=i(Ne),mw=n(Ne,"LI",{});var qNe=s(mw);eCe=n(qNe,"STRONG",{});var T9t=s(eCe);wNr=r(T9t,"mbart"),T9t.forEach(t),ANr=r(qNe," \u2014 "),AK=n(qNe,"A",{href:!0});var M9t=s(AK);yNr=r(M9t,"FlaxMBartForSequenceClassification"),M9t.forEach(t),LNr=r(qNe," (mBART model)"),qNe.forEach(t),xNr=i(Ne),gw=n(Ne,"LI",{});var jNe=s(gw);oCe=n(jNe,"STRONG",{});var E9t=s(oCe);$Nr=r(E9t,"roberta"),E9t.forEach(t),kNr=r(jNe," \u2014 "),yK=n(jNe,"A",{href:!0});var C9t=s(yK);SNr=r(C9t,"FlaxRobertaForSequenceClassification"),C9t.forEach(t),RNr=r(jNe," (RoBERTa model)"),jNe.forEach(t),PNr=i(Ne),hw=n(Ne,"LI",{});var DNe=s(hw);rCe=n(DNe,"STRONG",{});var w9t=s(rCe);BNr=r(w9t,"roformer"),w9t.forEach(t),INr=r(DNe," \u2014 "),LK=n(DNe,"A",{href:!0});var A9t=s(LK);NNr=r(A9t,"FlaxRoFormerForSequenceClassification"),A9t.forEach(t),qNr=r(DNe," (RoFormer model)"),DNe.forEach(t),jNr=i(Ne),pw=n(Ne,"LI",{});var GNe=s(pw);tCe=n(GNe,"STRONG",{});var y9t=s(tCe);DNr=r(y9t,"xlm-roberta"),y9t.forEach(t),GNr=r(GNe," \u2014 "),xK=n(GNe,"A",{href:!0});var L9t=s(xK);ONr=r(L9t,"FlaxXLMRobertaForSequenceClassification"),L9t.forEach(t),VNr=r(GNe," (XLM-RoBERTa model)"),GNe.forEach(t),Ne.forEach(t),XNr=i(Kl),T(_w.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),dDe=i(f),Qc=n(f,"H2",{class:!0});var _Oe=s(Qc);uw=n(_Oe,"A",{id:!0,class:!0,href:!0});var x9t=s(uw);aCe=n(x9t,"SPAN",{});var $9t=s(aCe);T(sx.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),zNr=i(_Oe),nCe=n(_Oe,"SPAN",{});var k9t=s(nCe);WNr=r(k9t,"FlaxAutoModelForQuestionAnswering"),k9t.forEach(t),_Oe.forEach(t),cDe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(lx.$$.fragment,Zl),QNr=i(Zl),Hc=n(Zl,"P",{});var aoe=s(Hc);HNr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=n(aoe,"A",{href:!0});var S9t=s($K);UNr=r(S9t,"from_pretrained()"),S9t.forEach(t),JNr=r(aoe," class method or the "),kK=n(aoe,"A",{href:!0});var R9t=s(kK);YNr=r(R9t,"from_config()"),R9t.forEach(t),KNr=r(aoe,` class
method.`),aoe.forEach(t),ZNr=i(Zl),ix=n(Zl,"P",{});var uOe=s(ix);eqr=r(uOe,"This class cannot be instantiated directly using "),sCe=n(uOe,"CODE",{});var P9t=s(sCe);oqr=r(P9t,"__init__()"),P9t.forEach(t),rqr=r(uOe," (throws an error)."),uOe.forEach(t),tqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var _A=s(Qt);T(dx.$$.fragment,_A),aqr=i(_A),lCe=n(_A,"P",{});var B9t=s(lCe);nqr=r(B9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B9t.forEach(t),sqr=i(_A),Uc=n(_A,"P",{});var noe=s(Uc);lqr=r(noe,`Note:
Loading a model from its configuration file does `),iCe=n(noe,"STRONG",{});var I9t=s(iCe);iqr=r(I9t,"not"),I9t.forEach(t),dqr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(noe,"A",{href:!0});var N9t=s(SK);cqr=r(N9t,"from_pretrained()"),N9t.forEach(t),fqr=r(noe," to load the model weights."),noe.forEach(t),mqr=i(_A),T(bw.$$.fragment,_A),_A.forEach(t),gqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(cx.$$.fragment,ei),hqr=i(ei),dCe=n(ei,"P",{});var q9t=s(dCe);pqr=r(q9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q9t.forEach(t),_qr=i(ei),Fn=n(ei,"P",{});var uA=s(Fn);uqr=r(uA,"The model class to instantiate is selected based on the "),cCe=n(uA,"CODE",{});var j9t=s(cCe);bqr=r(j9t,"model_type"),j9t.forEach(t),vqr=r(uA,` property of the config object (either
passed as an argument or loaded from `),fCe=n(uA,"CODE",{});var D9t=s(fCe);Fqr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Tqr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(uA,"CODE",{});var G9t=s(mCe);Mqr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Eqr=r(uA,":"),uA.forEach(t),Cqr=i(ei),$e=n(ei,"UL",{});var qe=s($e);vw=n(qe,"LI",{});var ONe=s(vw);gCe=n(ONe,"STRONG",{});var O9t=s(gCe);wqr=r(O9t,"albert"),O9t.forEach(t),Aqr=r(ONe," \u2014 "),RK=n(ONe,"A",{href:!0});var V9t=s(RK);yqr=r(V9t,"FlaxAlbertForQuestionAnswering"),V9t.forEach(t),Lqr=r(ONe," (ALBERT model)"),ONe.forEach(t),xqr=i(qe),Fw=n(qe,"LI",{});var VNe=s(Fw);hCe=n(VNe,"STRONG",{});var X9t=s(hCe);$qr=r(X9t,"bart"),X9t.forEach(t),kqr=r(VNe," \u2014 "),PK=n(VNe,"A",{href:!0});var z9t=s(PK);Sqr=r(z9t,"FlaxBartForQuestionAnswering"),z9t.forEach(t),Rqr=r(VNe," (BART model)"),VNe.forEach(t),Pqr=i(qe),Tw=n(qe,"LI",{});var XNe=s(Tw);pCe=n(XNe,"STRONG",{});var W9t=s(pCe);Bqr=r(W9t,"bert"),W9t.forEach(t),Iqr=r(XNe," \u2014 "),BK=n(XNe,"A",{href:!0});var Q9t=s(BK);Nqr=r(Q9t,"FlaxBertForQuestionAnswering"),Q9t.forEach(t),qqr=r(XNe," (BERT model)"),XNe.forEach(t),jqr=i(qe),Mw=n(qe,"LI",{});var zNe=s(Mw);_Ce=n(zNe,"STRONG",{});var H9t=s(_Ce);Dqr=r(H9t,"big_bird"),H9t.forEach(t),Gqr=r(zNe," \u2014 "),IK=n(zNe,"A",{href:!0});var U9t=s(IK);Oqr=r(U9t,"FlaxBigBirdForQuestionAnswering"),U9t.forEach(t),Vqr=r(zNe," (BigBird model)"),zNe.forEach(t),Xqr=i(qe),Ew=n(qe,"LI",{});var WNe=s(Ew);uCe=n(WNe,"STRONG",{});var J9t=s(uCe);zqr=r(J9t,"distilbert"),J9t.forEach(t),Wqr=r(WNe," \u2014 "),NK=n(WNe,"A",{href:!0});var Y9t=s(NK);Qqr=r(Y9t,"FlaxDistilBertForQuestionAnswering"),Y9t.forEach(t),Hqr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Uqr=i(qe),Cw=n(qe,"LI",{});var QNe=s(Cw);bCe=n(QNe,"STRONG",{});var K9t=s(bCe);Jqr=r(K9t,"electra"),K9t.forEach(t),Yqr=r(QNe," \u2014 "),qK=n(QNe,"A",{href:!0});var Z9t=s(qK);Kqr=r(Z9t,"FlaxElectraForQuestionAnswering"),Z9t.forEach(t),Zqr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ejr=i(qe),ww=n(qe,"LI",{});var HNe=s(ww);vCe=n(HNe,"STRONG",{});var ext=s(vCe);ojr=r(ext,"mbart"),ext.forEach(t),rjr=r(HNe," \u2014 "),jK=n(HNe,"A",{href:!0});var oxt=s(jK);tjr=r(oxt,"FlaxMBartForQuestionAnswering"),oxt.forEach(t),ajr=r(HNe," (mBART model)"),HNe.forEach(t),njr=i(qe),Aw=n(qe,"LI",{});var UNe=s(Aw);FCe=n(UNe,"STRONG",{});var rxt=s(FCe);sjr=r(rxt,"roberta"),rxt.forEach(t),ljr=r(UNe," \u2014 "),DK=n(UNe,"A",{href:!0});var txt=s(DK);ijr=r(txt,"FlaxRobertaForQuestionAnswering"),txt.forEach(t),djr=r(UNe," (RoBERTa model)"),UNe.forEach(t),cjr=i(qe),yw=n(qe,"LI",{});var JNe=s(yw);TCe=n(JNe,"STRONG",{});var axt=s(TCe);fjr=r(axt,"roformer"),axt.forEach(t),mjr=r(JNe," \u2014 "),GK=n(JNe,"A",{href:!0});var nxt=s(GK);gjr=r(nxt,"FlaxRoFormerForQuestionAnswering"),nxt.forEach(t),hjr=r(JNe," (RoFormer model)"),JNe.forEach(t),pjr=i(qe),Lw=n(qe,"LI",{});var YNe=s(Lw);MCe=n(YNe,"STRONG",{});var sxt=s(MCe);_jr=r(sxt,"xlm-roberta"),sxt.forEach(t),ujr=r(YNe," \u2014 "),OK=n(YNe,"A",{href:!0});var lxt=s(OK);bjr=r(lxt,"FlaxXLMRobertaForQuestionAnswering"),lxt.forEach(t),vjr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),qe.forEach(t),Fjr=i(ei),T(xw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),fDe=i(f),Jc=n(f,"H2",{class:!0});var bOe=s(Jc);$w=n(bOe,"A",{id:!0,class:!0,href:!0});var ixt=s($w);ECe=n(ixt,"SPAN",{});var dxt=s(ECe);T(fx.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),Tjr=i(bOe),CCe=n(bOe,"SPAN",{});var cxt=s(CCe);Mjr=r(cxt,"FlaxAutoModelForTokenClassification"),cxt.forEach(t),bOe.forEach(t),mDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(mx.$$.fragment,oi),Ejr=i(oi),Yc=n(oi,"P",{});var soe=s(Yc);Cjr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=n(soe,"A",{href:!0});var fxt=s(VK);wjr=r(fxt,"from_pretrained()"),fxt.forEach(t),Ajr=r(soe," class method or the "),XK=n(soe,"A",{href:!0});var mxt=s(XK);yjr=r(mxt,"from_config()"),mxt.forEach(t),Ljr=r(soe,` class
method.`),soe.forEach(t),xjr=i(oi),gx=n(oi,"P",{});var vOe=s(gx);$jr=r(vOe,"This class cannot be instantiated directly using "),wCe=n(vOe,"CODE",{});var gxt=s(wCe);kjr=r(gxt,"__init__()"),gxt.forEach(t),Sjr=r(vOe," (throws an error)."),vOe.forEach(t),Rjr=i(oi),Ht=n(oi,"DIV",{class:!0});var bA=s(Ht);T(hx.$$.fragment,bA),Pjr=i(bA),ACe=n(bA,"P",{});var hxt=s(ACe);Bjr=r(hxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hxt.forEach(t),Ijr=i(bA),Kc=n(bA,"P",{});var loe=s(Kc);Njr=r(loe,`Note:
Loading a model from its configuration file does `),yCe=n(loe,"STRONG",{});var pxt=s(yCe);qjr=r(pxt,"not"),pxt.forEach(t),jjr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(loe,"A",{href:!0});var _xt=s(zK);Djr=r(_xt,"from_pretrained()"),_xt.forEach(t),Gjr=r(loe," to load the model weights."),loe.forEach(t),Ojr=i(bA),T(kw.$$.fragment,bA),bA.forEach(t),Vjr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(px.$$.fragment,ri),Xjr=i(ri),LCe=n(ri,"P",{});var uxt=s(LCe);zjr=r(uxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uxt.forEach(t),Wjr=i(ri),Tn=n(ri,"P",{});var vA=s(Tn);Qjr=r(vA,"The model class to instantiate is selected based on the "),xCe=n(vA,"CODE",{});var bxt=s(xCe);Hjr=r(bxt,"model_type"),bxt.forEach(t),Ujr=r(vA,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(vA,"CODE",{});var vxt=s($Ce);Jjr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),Yjr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(vA,"CODE",{});var Fxt=s(kCe);Kjr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),Zjr=r(vA,":"),vA.forEach(t),eDr=i(ri),De=n(ri,"UL",{});var Fo=s(De);Sw=n(Fo,"LI",{});var KNe=s(Sw);SCe=n(KNe,"STRONG",{});var Txt=s(SCe);oDr=r(Txt,"albert"),Txt.forEach(t),rDr=r(KNe," \u2014 "),WK=n(KNe,"A",{href:!0});var Mxt=s(WK);tDr=r(Mxt,"FlaxAlbertForTokenClassification"),Mxt.forEach(t),aDr=r(KNe," (ALBERT model)"),KNe.forEach(t),nDr=i(Fo),Rw=n(Fo,"LI",{});var ZNe=s(Rw);RCe=n(ZNe,"STRONG",{});var Ext=s(RCe);sDr=r(Ext,"bert"),Ext.forEach(t),lDr=r(ZNe," \u2014 "),QK=n(ZNe,"A",{href:!0});var Cxt=s(QK);iDr=r(Cxt,"FlaxBertForTokenClassification"),Cxt.forEach(t),dDr=r(ZNe," (BERT model)"),ZNe.forEach(t),cDr=i(Fo),Pw=n(Fo,"LI",{});var eqe=s(Pw);PCe=n(eqe,"STRONG",{});var wxt=s(PCe);fDr=r(wxt,"big_bird"),wxt.forEach(t),mDr=r(eqe," \u2014 "),HK=n(eqe,"A",{href:!0});var Axt=s(HK);gDr=r(Axt,"FlaxBigBirdForTokenClassification"),Axt.forEach(t),hDr=r(eqe," (BigBird model)"),eqe.forEach(t),pDr=i(Fo),Bw=n(Fo,"LI",{});var oqe=s(Bw);BCe=n(oqe,"STRONG",{});var yxt=s(BCe);_Dr=r(yxt,"distilbert"),yxt.forEach(t),uDr=r(oqe," \u2014 "),UK=n(oqe,"A",{href:!0});var Lxt=s(UK);bDr=r(Lxt,"FlaxDistilBertForTokenClassification"),Lxt.forEach(t),vDr=r(oqe," (DistilBERT model)"),oqe.forEach(t),FDr=i(Fo),Iw=n(Fo,"LI",{});var rqe=s(Iw);ICe=n(rqe,"STRONG",{});var xxt=s(ICe);TDr=r(xxt,"electra"),xxt.forEach(t),MDr=r(rqe," \u2014 "),JK=n(rqe,"A",{href:!0});var $xt=s(JK);EDr=r($xt,"FlaxElectraForTokenClassification"),$xt.forEach(t),CDr=r(rqe," (ELECTRA model)"),rqe.forEach(t),wDr=i(Fo),Nw=n(Fo,"LI",{});var tqe=s(Nw);NCe=n(tqe,"STRONG",{});var kxt=s(NCe);ADr=r(kxt,"roberta"),kxt.forEach(t),yDr=r(tqe," \u2014 "),YK=n(tqe,"A",{href:!0});var Sxt=s(YK);LDr=r(Sxt,"FlaxRobertaForTokenClassification"),Sxt.forEach(t),xDr=r(tqe," (RoBERTa model)"),tqe.forEach(t),$Dr=i(Fo),qw=n(Fo,"LI",{});var aqe=s(qw);qCe=n(aqe,"STRONG",{});var Rxt=s(qCe);kDr=r(Rxt,"roformer"),Rxt.forEach(t),SDr=r(aqe," \u2014 "),KK=n(aqe,"A",{href:!0});var Pxt=s(KK);RDr=r(Pxt,"FlaxRoFormerForTokenClassification"),Pxt.forEach(t),PDr=r(aqe," (RoFormer model)"),aqe.forEach(t),BDr=i(Fo),jw=n(Fo,"LI",{});var nqe=s(jw);jCe=n(nqe,"STRONG",{});var Bxt=s(jCe);IDr=r(Bxt,"xlm-roberta"),Bxt.forEach(t),NDr=r(nqe," \u2014 "),ZK=n(nqe,"A",{href:!0});var Ixt=s(ZK);qDr=r(Ixt,"FlaxXLMRobertaForTokenClassification"),Ixt.forEach(t),jDr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),Fo.forEach(t),DDr=i(ri),T(Dw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),gDe=i(f),Zc=n(f,"H2",{class:!0});var FOe=s(Zc);Gw=n(FOe,"A",{id:!0,class:!0,href:!0});var Nxt=s(Gw);DCe=n(Nxt,"SPAN",{});var qxt=s(DCe);T(_x.$$.fragment,qxt),qxt.forEach(t),Nxt.forEach(t),GDr=i(FOe),GCe=n(FOe,"SPAN",{});var jxt=s(GCe);ODr=r(jxt,"FlaxAutoModelForMultipleChoice"),jxt.forEach(t),FOe.forEach(t),hDe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ux.$$.fragment,ti),VDr=i(ti),ef=n(ti,"P",{});var ioe=s(ef);XDr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=n(ioe,"A",{href:!0});var Dxt=s(eZ);zDr=r(Dxt,"from_pretrained()"),Dxt.forEach(t),WDr=r(ioe," class method or the "),oZ=n(ioe,"A",{href:!0});var Gxt=s(oZ);QDr=r(Gxt,"from_config()"),Gxt.forEach(t),HDr=r(ioe,` class
method.`),ioe.forEach(t),UDr=i(ti),bx=n(ti,"P",{});var TOe=s(bx);JDr=r(TOe,"This class cannot be instantiated directly using "),OCe=n(TOe,"CODE",{});var Oxt=s(OCe);YDr=r(Oxt,"__init__()"),Oxt.forEach(t),KDr=r(TOe," (throws an error)."),TOe.forEach(t),ZDr=i(ti),Ut=n(ti,"DIV",{class:!0});var FA=s(Ut);T(vx.$$.fragment,FA),eGr=i(FA),VCe=n(FA,"P",{});var Vxt=s(VCe);oGr=r(Vxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vxt.forEach(t),rGr=i(FA),of=n(FA,"P",{});var doe=s(of);tGr=r(doe,`Note:
Loading a model from its configuration file does `),XCe=n(doe,"STRONG",{});var Xxt=s(XCe);aGr=r(Xxt,"not"),Xxt.forEach(t),nGr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(doe,"A",{href:!0});var zxt=s(rZ);sGr=r(zxt,"from_pretrained()"),zxt.forEach(t),lGr=r(doe," to load the model weights."),doe.forEach(t),iGr=i(FA),T(Ow.$$.fragment,FA),FA.forEach(t),dGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(Fx.$$.fragment,ai),cGr=i(ai),zCe=n(ai,"P",{});var Wxt=s(zCe);fGr=r(Wxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wxt.forEach(t),mGr=i(ai),Mn=n(ai,"P",{});var TA=s(Mn);gGr=r(TA,"The model class to instantiate is selected based on the "),WCe=n(TA,"CODE",{});var Qxt=s(WCe);hGr=r(Qxt,"model_type"),Qxt.forEach(t),pGr=r(TA,` property of the config object (either
passed as an argument or loaded from `),QCe=n(TA,"CODE",{});var Hxt=s(QCe);_Gr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),uGr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(TA,"CODE",{});var Uxt=s(HCe);bGr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),vGr=r(TA,":"),TA.forEach(t),FGr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);Vw=n(To,"LI",{});var sqe=s(Vw);UCe=n(sqe,"STRONG",{});var Jxt=s(UCe);TGr=r(Jxt,"albert"),Jxt.forEach(t),MGr=r(sqe," \u2014 "),tZ=n(sqe,"A",{href:!0});var Yxt=s(tZ);EGr=r(Yxt,"FlaxAlbertForMultipleChoice"),Yxt.forEach(t),CGr=r(sqe," (ALBERT model)"),sqe.forEach(t),wGr=i(To),Xw=n(To,"LI",{});var lqe=s(Xw);JCe=n(lqe,"STRONG",{});var Kxt=s(JCe);AGr=r(Kxt,"bert"),Kxt.forEach(t),yGr=r(lqe," \u2014 "),aZ=n(lqe,"A",{href:!0});var Zxt=s(aZ);LGr=r(Zxt,"FlaxBertForMultipleChoice"),Zxt.forEach(t),xGr=r(lqe," (BERT model)"),lqe.forEach(t),$Gr=i(To),zw=n(To,"LI",{});var iqe=s(zw);YCe=n(iqe,"STRONG",{});var e$t=s(YCe);kGr=r(e$t,"big_bird"),e$t.forEach(t),SGr=r(iqe," \u2014 "),nZ=n(iqe,"A",{href:!0});var o$t=s(nZ);RGr=r(o$t,"FlaxBigBirdForMultipleChoice"),o$t.forEach(t),PGr=r(iqe," (BigBird model)"),iqe.forEach(t),BGr=i(To),Ww=n(To,"LI",{});var dqe=s(Ww);KCe=n(dqe,"STRONG",{});var r$t=s(KCe);IGr=r(r$t,"distilbert"),r$t.forEach(t),NGr=r(dqe," \u2014 "),sZ=n(dqe,"A",{href:!0});var t$t=s(sZ);qGr=r(t$t,"FlaxDistilBertForMultipleChoice"),t$t.forEach(t),jGr=r(dqe," (DistilBERT model)"),dqe.forEach(t),DGr=i(To),Qw=n(To,"LI",{});var cqe=s(Qw);ZCe=n(cqe,"STRONG",{});var a$t=s(ZCe);GGr=r(a$t,"electra"),a$t.forEach(t),OGr=r(cqe," \u2014 "),lZ=n(cqe,"A",{href:!0});var n$t=s(lZ);VGr=r(n$t,"FlaxElectraForMultipleChoice"),n$t.forEach(t),XGr=r(cqe," (ELECTRA model)"),cqe.forEach(t),zGr=i(To),Hw=n(To,"LI",{});var fqe=s(Hw);e5e=n(fqe,"STRONG",{});var s$t=s(e5e);WGr=r(s$t,"roberta"),s$t.forEach(t),QGr=r(fqe," \u2014 "),iZ=n(fqe,"A",{href:!0});var l$t=s(iZ);HGr=r(l$t,"FlaxRobertaForMultipleChoice"),l$t.forEach(t),UGr=r(fqe," (RoBERTa model)"),fqe.forEach(t),JGr=i(To),Uw=n(To,"LI",{});var mqe=s(Uw);o5e=n(mqe,"STRONG",{});var i$t=s(o5e);YGr=r(i$t,"roformer"),i$t.forEach(t),KGr=r(mqe," \u2014 "),dZ=n(mqe,"A",{href:!0});var d$t=s(dZ);ZGr=r(d$t,"FlaxRoFormerForMultipleChoice"),d$t.forEach(t),eOr=r(mqe," (RoFormer model)"),mqe.forEach(t),oOr=i(To),Jw=n(To,"LI",{});var gqe=s(Jw);r5e=n(gqe,"STRONG",{});var c$t=s(r5e);rOr=r(c$t,"xlm-roberta"),c$t.forEach(t),tOr=r(gqe," \u2014 "),cZ=n(gqe,"A",{href:!0});var f$t=s(cZ);aOr=r(f$t,"FlaxXLMRobertaForMultipleChoice"),f$t.forEach(t),nOr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),To.forEach(t),sOr=i(ai),T(Yw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),pDe=i(f),rf=n(f,"H2",{class:!0});var MOe=s(rf);Kw=n(MOe,"A",{id:!0,class:!0,href:!0});var m$t=s(Kw);t5e=n(m$t,"SPAN",{});var g$t=s(t5e);T(Tx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),lOr=i(MOe),a5e=n(MOe,"SPAN",{});var h$t=s(a5e);iOr=r(h$t,"FlaxAutoModelForNextSentencePrediction"),h$t.forEach(t),MOe.forEach(t),_De=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(Mx.$$.fragment,ni),dOr=i(ni),tf=n(ni,"P",{});var coe=s(tf);cOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=n(coe,"A",{href:!0});var p$t=s(fZ);fOr=r(p$t,"from_pretrained()"),p$t.forEach(t),mOr=r(coe," class method or the "),mZ=n(coe,"A",{href:!0});var _$t=s(mZ);gOr=r(_$t,"from_config()"),_$t.forEach(t),hOr=r(coe,` class
method.`),coe.forEach(t),pOr=i(ni),Ex=n(ni,"P",{});var EOe=s(Ex);_Or=r(EOe,"This class cannot be instantiated directly using "),n5e=n(EOe,"CODE",{});var u$t=s(n5e);uOr=r(u$t,"__init__()"),u$t.forEach(t),bOr=r(EOe," (throws an error)."),EOe.forEach(t),vOr=i(ni),Jt=n(ni,"DIV",{class:!0});var MA=s(Jt);T(Cx.$$.fragment,MA),FOr=i(MA),s5e=n(MA,"P",{});var b$t=s(s5e);TOr=r(b$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b$t.forEach(t),MOr=i(MA),af=n(MA,"P",{});var foe=s(af);EOr=r(foe,`Note:
Loading a model from its configuration file does `),l5e=n(foe,"STRONG",{});var v$t=s(l5e);COr=r(v$t,"not"),v$t.forEach(t),wOr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(foe,"A",{href:!0});var F$t=s(gZ);AOr=r(F$t,"from_pretrained()"),F$t.forEach(t),yOr=r(foe," to load the model weights."),foe.forEach(t),LOr=i(MA),T(Zw.$$.fragment,MA),MA.forEach(t),xOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(wx.$$.fragment,si),$Or=i(si),i5e=n(si,"P",{});var T$t=s(i5e);kOr=r(T$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T$t.forEach(t),SOr=i(si),En=n(si,"P",{});var EA=s(En);ROr=r(EA,"The model class to instantiate is selected based on the "),d5e=n(EA,"CODE",{});var M$t=s(d5e);POr=r(M$t,"model_type"),M$t.forEach(t),BOr=r(EA,` property of the config object (either
passed as an argument or loaded from `),c5e=n(EA,"CODE",{});var E$t=s(c5e);IOr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),NOr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(EA,"CODE",{});var C$t=s(f5e);qOr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),jOr=r(EA,":"),EA.forEach(t),DOr=i(si),m5e=n(si,"UL",{});var w$t=s(m5e);e0=n(w$t,"LI",{});var hqe=s(e0);g5e=n(hqe,"STRONG",{});var A$t=s(g5e);GOr=r(A$t,"bert"),A$t.forEach(t),OOr=r(hqe," \u2014 "),hZ=n(hqe,"A",{href:!0});var y$t=s(hZ);VOr=r(y$t,"FlaxBertForNextSentencePrediction"),y$t.forEach(t),XOr=r(hqe," (BERT model)"),hqe.forEach(t),w$t.forEach(t),zOr=i(si),T(o0.$$.fragment,si),si.forEach(t),ni.forEach(t),uDe=i(f),nf=n(f,"H2",{class:!0});var COe=s(nf);r0=n(COe,"A",{id:!0,class:!0,href:!0});var L$t=s(r0);h5e=n(L$t,"SPAN",{});var x$t=s(h5e);T(Ax.$$.fragment,x$t),x$t.forEach(t),L$t.forEach(t),WOr=i(COe),p5e=n(COe,"SPAN",{});var $$t=s(p5e);QOr=r($$t,"FlaxAutoModelForImageClassification"),$$t.forEach(t),COe.forEach(t),bDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(yx.$$.fragment,li),HOr=i(li),sf=n(li,"P",{});var moe=s(sf);UOr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=n(moe,"A",{href:!0});var k$t=s(pZ);JOr=r(k$t,"from_pretrained()"),k$t.forEach(t),YOr=r(moe," class method or the "),_Z=n(moe,"A",{href:!0});var S$t=s(_Z);KOr=r(S$t,"from_config()"),S$t.forEach(t),ZOr=r(moe,` class
method.`),moe.forEach(t),eVr=i(li),Lx=n(li,"P",{});var wOe=s(Lx);oVr=r(wOe,"This class cannot be instantiated directly using "),_5e=n(wOe,"CODE",{});var R$t=s(_5e);rVr=r(R$t,"__init__()"),R$t.forEach(t),tVr=r(wOe," (throws an error)."),wOe.forEach(t),aVr=i(li),Yt=n(li,"DIV",{class:!0});var CA=s(Yt);T(xx.$$.fragment,CA),nVr=i(CA),u5e=n(CA,"P",{});var P$t=s(u5e);sVr=r(P$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P$t.forEach(t),lVr=i(CA),lf=n(CA,"P",{});var goe=s(lf);iVr=r(goe,`Note:
Loading a model from its configuration file does `),b5e=n(goe,"STRONG",{});var B$t=s(b5e);dVr=r(B$t,"not"),B$t.forEach(t),cVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(goe,"A",{href:!0});var I$t=s(uZ);fVr=r(I$t,"from_pretrained()"),I$t.forEach(t),mVr=r(goe," to load the model weights."),goe.forEach(t),gVr=i(CA),T(t0.$$.fragment,CA),CA.forEach(t),hVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T($x.$$.fragment,ii),pVr=i(ii),v5e=n(ii,"P",{});var N$t=s(v5e);_Vr=r(N$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N$t.forEach(t),uVr=i(ii),Cn=n(ii,"P",{});var wA=s(Cn);bVr=r(wA,"The model class to instantiate is selected based on the "),F5e=n(wA,"CODE",{});var q$t=s(F5e);vVr=r(q$t,"model_type"),q$t.forEach(t),FVr=r(wA,` property of the config object (either
passed as an argument or loaded from `),T5e=n(wA,"CODE",{});var j$t=s(T5e);TVr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),MVr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M5e=n(wA,"CODE",{});var D$t=s(M5e);EVr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),CVr=r(wA,":"),wA.forEach(t),wVr=i(ii),kx=n(ii,"UL",{});var AOe=s(kx);a0=n(AOe,"LI",{});var pqe=s(a0);E5e=n(pqe,"STRONG",{});var G$t=s(E5e);AVr=r(G$t,"beit"),G$t.forEach(t),yVr=r(pqe," \u2014 "),bZ=n(pqe,"A",{href:!0});var O$t=s(bZ);LVr=r(O$t,"FlaxBeitForImageClassification"),O$t.forEach(t),xVr=r(pqe," (BEiT model)"),pqe.forEach(t),$Vr=i(AOe),n0=n(AOe,"LI",{});var _qe=s(n0);C5e=n(_qe,"STRONG",{});var V$t=s(C5e);kVr=r(V$t,"vit"),V$t.forEach(t),SVr=r(_qe," \u2014 "),vZ=n(_qe,"A",{href:!0});var X$t=s(vZ);RVr=r(X$t,"FlaxViTForImageClassification"),X$t.forEach(t),PVr=r(_qe," (ViT model)"),_qe.forEach(t),AOe.forEach(t),BVr=i(ii),T(s0.$$.fragment,ii),ii.forEach(t),li.forEach(t),vDe=i(f),df=n(f,"H2",{class:!0});var yOe=s(df);l0=n(yOe,"A",{id:!0,class:!0,href:!0});var z$t=s(l0);w5e=n(z$t,"SPAN",{});var W$t=s(w5e);T(Sx.$$.fragment,W$t),W$t.forEach(t),z$t.forEach(t),IVr=i(yOe),A5e=n(yOe,"SPAN",{});var Q$t=s(A5e);NVr=r(Q$t,"FlaxAutoModelForVision2Seq"),Q$t.forEach(t),yOe.forEach(t),FDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Rx.$$.fragment,di),qVr=i(di),cf=n(di,"P",{});var hoe=s(cf);jVr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=n(hoe,"A",{href:!0});var H$t=s(FZ);DVr=r(H$t,"from_pretrained()"),H$t.forEach(t),GVr=r(hoe," class method or the "),TZ=n(hoe,"A",{href:!0});var U$t=s(TZ);OVr=r(U$t,"from_config()"),U$t.forEach(t),VVr=r(hoe,` class
method.`),hoe.forEach(t),XVr=i(di),Px=n(di,"P",{});var LOe=s(Px);zVr=r(LOe,"This class cannot be instantiated directly using "),y5e=n(LOe,"CODE",{});var J$t=s(y5e);WVr=r(J$t,"__init__()"),J$t.forEach(t),QVr=r(LOe," (throws an error)."),LOe.forEach(t),HVr=i(di),Kt=n(di,"DIV",{class:!0});var AA=s(Kt);T(Bx.$$.fragment,AA),UVr=i(AA),L5e=n(AA,"P",{});var Y$t=s(L5e);JVr=r(Y$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y$t.forEach(t),YVr=i(AA),ff=n(AA,"P",{});var poe=s(ff);KVr=r(poe,`Note:
Loading a model from its configuration file does `),x5e=n(poe,"STRONG",{});var K$t=s(x5e);ZVr=r(K$t,"not"),K$t.forEach(t),eXr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(poe,"A",{href:!0});var Z$t=s(MZ);oXr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),rXr=r(poe," to load the model weights."),poe.forEach(t),tXr=i(AA),T(i0.$$.fragment,AA),AA.forEach(t),aXr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ix.$$.fragment,ci),nXr=i(ci),$5e=n(ci,"P",{});var ekt=s($5e);sXr=r(ekt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ekt.forEach(t),lXr=i(ci),wn=n(ci,"P",{});var yA=s(wn);iXr=r(yA,"The model class to instantiate is selected based on the "),k5e=n(yA,"CODE",{});var okt=s(k5e);dXr=r(okt,"model_type"),okt.forEach(t),cXr=r(yA,` property of the config object (either
passed as an argument or loaded from `),S5e=n(yA,"CODE",{});var rkt=s(S5e);fXr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),mXr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(yA,"CODE",{});var tkt=s(R5e);gXr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),hXr=r(yA,":"),yA.forEach(t),pXr=i(ci),P5e=n(ci,"UL",{});var akt=s(P5e);d0=n(akt,"LI",{});var uqe=s(d0);B5e=n(uqe,"STRONG",{});var nkt=s(B5e);_Xr=r(nkt,"vision-encoder-decoder"),nkt.forEach(t),uXr=r(uqe," \u2014 "),EZ=n(uqe,"A",{href:!0});var skt=s(EZ);bXr=r(skt,"FlaxVisionEncoderDecoderModel"),skt.forEach(t),vXr=r(uqe," (Vision Encoder decoder model)"),uqe.forEach(t),akt.forEach(t),FXr=i(ci),T(c0.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(rk,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(tk,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig"),c(ak,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig"),c(nk,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig"),c(sk,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig"),c(lk,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ik,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig"),c(dk,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ck,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(fk,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(mk,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig"),c(gk,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig"),c(hk,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig"),c(pk,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig"),c(_k,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig"),c(uk,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig"),c(bk,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig"),c(vk,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig"),c(Fk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Tk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Mk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ek,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig"),c(Ck,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(wk,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ak,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig"),c(yk,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig"),c(Lk,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig"),c(xk,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig"),c($k,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig"),c(kk,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig"),c(Sk,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Rk,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Pk,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig"),c(Bk,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig"),c(Ik,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig"),c(Nk,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig"),c(qk,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig"),c(jk,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config"),c(Dk,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Gk,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Ok,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig"),c(Vk,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig"),c(Xk,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig"),c(zk,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Wk,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Qk,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Hk,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Uk,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig"),c(Jk,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig"),c(Yk,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig"),c(Kk,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig"),c(Zk,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config"),c(eS,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig"),c(oS,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(rS,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig"),c(tS,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(aS,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(nS,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig"),c(sS,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config"),c(lS,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iS,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dS,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig"),c(cS,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig"),c(fS,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mS,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig"),c(gS,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hS,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(pS,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_S,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagConfig"),c(uS,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmConfig"),c(bS,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig"),c(vS,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig"),c(FS,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig"),c(TS,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig"),c(MS,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig"),c(ES,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig"),c(CS,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig"),c(wS,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig"),c(AS,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig"),c(yS,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig"),c(LS,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xS,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($S,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kS,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig"),c(SS,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(RS,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig"),c(PS,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config"),c(BS,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig"),c(IS,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NS,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(qS,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig"),c(jS,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(DS,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(GS,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig"),c(OS,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig"),c(VS,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(XS,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zS,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(WS,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig"),c(QS,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(HS,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(US,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(JS,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig"),c(YS,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig"),c(KS,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig"),c(ZS,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(eR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(oR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(rR,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig"),c(tR,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig"),c(aR,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoTokenizer"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(nR,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(sR,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(lR,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizer"),c(dR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizerFast"),c(cR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizer"),c(fR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mR,"href","/docs/transformers/pr_17474/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(gR,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(hR,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_R,"href","/docs/transformers/pr_17474/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uR,"href","/docs/transformers/pr_17474/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(bR,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vR,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(FR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(ER,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(CR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(wR,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(AR,"href","/docs/transformers/pr_17474/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineTokenizer"),c($R,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizer"),c(kR,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizer"),c(BR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(IR,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NR,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jR,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DR,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GR,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OR,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XR,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WR,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(QR,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizer"),c(HR,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(UR,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JR,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizer"),c(YR,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KR,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZR,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eP,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nP,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(sP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizer"),c(dP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(cP,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(hP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(pP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(_P,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(uP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(bP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(vP,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(FP,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(TP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizer"),c(MP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizerFast"),c(EP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizer"),c(CP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(wP,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeTokenizer"),c(AP,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yP,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xP,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianTokenizer"),c($P,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizer"),c(kP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(BP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17474/en/model_doc/mluke#transformers.MLukeTokenizer"),c(NP,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qP,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DP,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GP,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(OP,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(VP,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(XP,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(WP,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(QP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HP,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UP,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JP,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YP,"href","/docs/transformers/pr_17474/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KP,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZP,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(oB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagTokenizer"),c(tB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizer"),c(aB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nB,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sB,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gB,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hB,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(pB,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(_B,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vB,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FB,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(MB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(EB,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasTokenizer"),c(CB,"href","/docs/transformers/pr_17474/en/model_doc/tapex#transformers.TapexTokenizer"),c(wB,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(yB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($B,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(kB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizer"),c(SB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(RB,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMTokenizer"),c(PB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(BB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(IB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(DB,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(GB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(OB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(VB,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(XB,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rI,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(aI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(nI,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bI,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(vI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(FI,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPProcessor"),c(TI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(MI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(EI,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(CI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(yI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(LI,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltProcessor"),c(SI,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(RI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoModel"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(II,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jI,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel"),c(DI,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel"),c(GI,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel"),c(OI,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(VI,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(XI,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel"),c(zI,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WI,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QI,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(HI,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel"),c(UI,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel"),c(JI,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel"),c(YI,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel"),c(KI,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel"),c(ZI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel"),c(eN,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel"),c(oN,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel"),c(rN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(tN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(aN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(nN,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel"),c(sN,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(lN,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(iN,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel"),c(dN,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel"),c(cN,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel"),c(fN,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mN,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel"),c(gN,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel"),c(hN,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel"),c(pN,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel"),c(_N,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel"),c(uN,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel"),c(bN,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel"),c(vN,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FN,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel"),c(TN,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model"),c(MN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(CN,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel"),c(wN,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel"),c(AN,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel"),c(yN,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(LN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(xN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c($N,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(kN,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel"),c(SN,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel"),c(RN,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel"),c(PN,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel"),c(BN,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model"),c(IN,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel"),c(NN,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel"),c(qN,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel"),c(jN,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(DN,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel"),c(GN,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel"),c(ON,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model"),c(VN,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel"),c(XN,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(zN,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel"),c(WN,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel"),c(QN,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel"),c(HN,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel"),c(UN,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel"),c(JN,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(YN,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel"),c(KN,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel"),c(ZN,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel"),c(eq,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel"),c(oq,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel"),c(rq,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(tq,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel"),c(aq,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel"),c(nq,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel"),c(sq,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel"),c(lq,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel"),c(iq,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(dq,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel"),c(cq,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(fq,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel"),c(mq,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model"),c(gq,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel"),c(hq,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(pq,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(_q,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel"),c(uq,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(bq,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel"),c(vq,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel"),c(Fq,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Tq,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Mq,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel"),c(Eq,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Cq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(wq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Aq,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel"),c(yq,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel"),c(Lq,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel"),c(xq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c($q,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(kq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Sq,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel"),c(Rq,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel"),c(Pq,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModelForPreTraining"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(Bq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qq,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining"),c(jq,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Dq,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining"),c(Gq,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Oq,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Vq,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(zq,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Jq,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Yq,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Kq,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Zq,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(oj,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rj,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tj,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aj,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nj,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(sj,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(lj,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(ij,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dj,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(cj,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(fj,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mj,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(gj,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_j,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uj,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(bj,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(vj,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Fj,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Tj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Mj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Ej,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Cj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(yj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($j,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM"),c(kj,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Rj,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Pj,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Bj,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Ij,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Nj,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(qj,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(jj,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dj,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Gj,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Oj,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Vj,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Xj,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(zj,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Wj,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM"),c(Qj,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Hj,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Uj,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Jj,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM"),c(Yj,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Kj,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Zj,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(eD,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(oD,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(rD,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(tD,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(aD,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(nD,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(sD,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(lD,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(iD,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(dD,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(fD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(mD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(gD,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.AutoModelForMaskedLM"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(hD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_D,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uD,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(TD,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(CD,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wD,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AD,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(LD,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xD,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM"),c($D,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(kD,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(SD,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(RD,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(PD,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(qD,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(jD,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(DD,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(OD,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(XD,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(zD,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(WD,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(QD,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(UD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(JD,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForSeq2SeqLM"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(YD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(nG,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel"),c(dG,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSequenceClassification"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(_G,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vG,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c($G,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.AutoModelForMultipleChoice"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(mO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pO,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c($O,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForNextSentencePrediction"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(XO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(HO,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(UO,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(JO,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(YO,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kb,"id","transformers.AutoModelForTokenClassification"),c(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kb,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(KO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oV,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(rV,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(aV,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification"),c(sV,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(iV,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(dV,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(cV,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(mV,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(hV,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(pV,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(_V,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(bV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(FV,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(TV,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EV,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CV,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(LV,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(xV,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(kV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(RV,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(PV,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForQuestionAnswering"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(BV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(KV,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(FX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(EX,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForTableQuestionAnswering"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(CX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForImageClassification"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(LX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification"),c(SX,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(RX,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification"),c(PX,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(BX,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification"),c(IX,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(NX,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(qX,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(jX,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(DX,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(GX,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(OX,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(VX,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(XX,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(zX,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification"),c(WX,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification"),c(QX,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForVision2Seq"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(HX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForAudioClassification"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(KX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(az,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForAudioFrameClassification"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_z,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(uz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForCTC"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(bz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Mz,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC"),c(Ez,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC"),c(Cz,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC"),c(wz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Az,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Lz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(xz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c($z,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Pz,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForAudioXVector"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(jz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Dz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Gz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Oz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForMaskedImageModeling"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Qz,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Hz,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForObjectDetection"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Zz,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForSemanticSegmentation"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(aW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(iW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(dW,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(cW,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForInstanceSegmentation"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.TFAutoModel"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel"),c(vW,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel"),c(FW,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel"),c(TW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EW,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel"),c(CW,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel"),c(wW,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel"),c(AW,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel"),c(yW,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel"),c(LW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xW,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel"),c($W,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kW,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(SW,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(RW,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel"),c(PW,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(BW,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel"),c(IW,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(NW,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model"),c(qW,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel"),c(jW,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel"),c(DW,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(GW,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel"),c(OW,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel"),c(VW,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel"),c(XW,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel"),c(zW,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel"),c(WW,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QW,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel"),c(HW,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model"),c(UW,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(JW,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YW,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel"),c(KW,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZW,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eQ,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oQ,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel"),c(rQ,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model"),c(tQ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel"),c(aQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nQ,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel"),c(sQ,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lQ,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel"),c(dQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(cQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.TFAutoModelForPreTraining"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(pQ,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uQ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(TQ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(EQ,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CQ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(AQ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(yQ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(PQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForCausalLM"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(OQ,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XQ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(zQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(HQ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(UQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForImageClassification"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rH,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tH,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(aH,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForMaskedLM"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(nH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(cH,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(mH,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(gH,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(hH,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(_H,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uH,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(bH,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vH,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(FH,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MH,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CH,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(wH,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yH,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(LH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(RH,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(BH,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel"),c(NH,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForSequenceClassification"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForMultipleChoice"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(_U,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c($U,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(DU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(GU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.TFAutoModelForTokenClassification"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(JU,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(KU,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForQuestionAnswering"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(AJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(BJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.TFAutoModelForVision2Seq"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModel"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel"),c(UJ,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel"),c(JJ,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel"),c(YJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel"),c(KJ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ZJ,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(eY,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(oY,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel"),c(rY,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(tY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel"),c(aY,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(nY,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(sY,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(lY,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel"),c(iY,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dY,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cY,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(fY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(mY,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(gY,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model"),c(hY,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(pY,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel"),c(_Y,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(uY,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(bY,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s3,"id","transformers.FlaxAutoModelForCausalLM"),c(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(EY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(CY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(wY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(AY,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yY,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(LY,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(xY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c($Y,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForPreTraining"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(BY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(NY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(qY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(jY,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(OY,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(VY,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(zY,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForMaskedLM"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(JY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(KY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ZY,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(eK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(oK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(nK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(fK,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(mK,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(gK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c($K,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForTokenClassification"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(VK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(QK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(UK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(YK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(KK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForImageClassification"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(pZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vZ,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.FlaxAutoModelForVision2Seq"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,LA),e(rt,_f),b(f,je,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,xA),e(We,Ln),e(We,xn),e(xn,$A),e(We,pi),e(We,$n),e($n,kA),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,J$),e(Ae,ui),e(ui,Y$),e(Ae,K$),b(f,Eo,u),b(f,wa,u),e(wa,Z$),e(wa,bf),e(bf,ek),e(wa,xOe),b(f,bqe,u),b(f,bi,u),e(bi,vf),e(vf,_oe),M(SA,_oe,null),e(bi,$Oe),e(bi,uoe),e(uoe,kOe),b(f,vqe,u),b(f,kn,u),e(kn,SOe),e(kn,boe),e(boe,ROe),e(kn,POe),e(kn,voe),e(voe,BOe),e(kn,IOe),b(f,Fqe,u),M(RA,f,u),b(f,Tqe,u),b(f,ok,u),e(ok,NOe),b(f,Mqe,u),M(Ff,f,u),b(f,Eqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Foe),M(PA,Foe,null),e(vi,qOe),e(vi,Toe),e(Toe,jOe),b(f,Cqe,u),b(f,Co,u),M(BA,Co,null),e(Co,DOe),e(Co,IA),e(IA,GOe),e(IA,rk),e(rk,OOe),e(IA,VOe),e(Co,XOe),e(Co,NA),e(NA,zOe),e(NA,Moe),e(Moe,WOe),e(NA,QOe),e(Co,HOe),e(Co,Er),M(qA,Er,null),e(Er,UOe),e(Er,Eoe),e(Eoe,JOe),e(Er,YOe),e(Er,Fi),e(Fi,KOe),e(Fi,Coe),e(Coe,ZOe),e(Fi,eVe),e(Fi,woe),e(woe,oVe),e(Fi,rVe),e(Er,tVe),e(Er,A),e(A,Mf),e(Mf,Aoe),e(Aoe,aVe),e(Mf,nVe),e(Mf,tk),e(tk,sVe),e(Mf,lVe),e(A,iVe),e(A,Ef),e(Ef,yoe),e(yoe,dVe),e(Ef,cVe),e(Ef,ak),e(ak,fVe),e(Ef,mVe),e(A,gVe),e(A,Cf),e(Cf,Loe),e(Loe,hVe),e(Cf,pVe),e(Cf,nk),e(nk,_Ve),e(Cf,uVe),e(A,bVe),e(A,wf),e(wf,xoe),e(xoe,vVe),e(wf,FVe),e(wf,sk),e(sk,TVe),e(wf,MVe),e(A,EVe),e(A,Af),e(Af,$oe),e($oe,CVe),e(Af,wVe),e(Af,lk),e(lk,AVe),e(Af,yVe),e(A,LVe),e(A,yf),e(yf,koe),e(koe,xVe),e(yf,$Ve),e(yf,ik),e(ik,kVe),e(yf,SVe),e(A,RVe),e(A,Lf),e(Lf,Soe),e(Soe,PVe),e(Lf,BVe),e(Lf,dk),e(dk,IVe),e(Lf,NVe),e(A,qVe),e(A,xf),e(xf,Roe),e(Roe,jVe),e(xf,DVe),e(xf,ck),e(ck,GVe),e(xf,OVe),e(A,VVe),e(A,$f),e($f,Poe),e(Poe,XVe),e($f,zVe),e($f,fk),e(fk,WVe),e($f,QVe),e(A,HVe),e(A,kf),e(kf,Boe),e(Boe,UVe),e(kf,JVe),e(kf,mk),e(mk,YVe),e(kf,KVe),e(A,ZVe),e(A,Sf),e(Sf,Ioe),e(Ioe,eXe),e(Sf,oXe),e(Sf,gk),e(gk,rXe),e(Sf,tXe),e(A,aXe),e(A,Rf),e(Rf,Noe),e(Noe,nXe),e(Rf,sXe),e(Rf,hk),e(hk,lXe),e(Rf,iXe),e(A,dXe),e(A,Pf),e(Pf,qoe),e(qoe,cXe),e(Pf,fXe),e(Pf,pk),e(pk,mXe),e(Pf,gXe),e(A,hXe),e(A,Bf),e(Bf,joe),e(joe,pXe),e(Bf,_Xe),e(Bf,_k),e(_k,uXe),e(Bf,bXe),e(A,vXe),e(A,If),e(If,Doe),e(Doe,FXe),e(If,TXe),e(If,uk),e(uk,MXe),e(If,EXe),e(A,CXe),e(A,Nf),e(Nf,Goe),e(Goe,wXe),e(Nf,AXe),e(Nf,bk),e(bk,yXe),e(Nf,LXe),e(A,xXe),e(A,qf),e(qf,Ooe),e(Ooe,$Xe),e(qf,kXe),e(qf,vk),e(vk,SXe),e(qf,RXe),e(A,PXe),e(A,jf),e(jf,Voe),e(Voe,BXe),e(jf,IXe),e(jf,Fk),e(Fk,NXe),e(jf,qXe),e(A,jXe),e(A,Df),e(Df,Xoe),e(Xoe,DXe),e(Df,GXe),e(Df,Tk),e(Tk,OXe),e(Df,VXe),e(A,XXe),e(A,Gf),e(Gf,zoe),e(zoe,zXe),e(Gf,WXe),e(Gf,Mk),e(Mk,QXe),e(Gf,HXe),e(A,UXe),e(A,Of),e(Of,Woe),e(Woe,JXe),e(Of,YXe),e(Of,Ek),e(Ek,KXe),e(Of,ZXe),e(A,eze),e(A,Vf),e(Vf,Qoe),e(Qoe,oze),e(Vf,rze),e(Vf,Ck),e(Ck,tze),e(Vf,aze),e(A,nze),e(A,Xf),e(Xf,Hoe),e(Hoe,sze),e(Xf,lze),e(Xf,wk),e(wk,ize),e(Xf,dze),e(A,cze),e(A,zf),e(zf,Uoe),e(Uoe,fze),e(zf,mze),e(zf,Ak),e(Ak,gze),e(zf,hze),e(A,pze),e(A,Wf),e(Wf,Joe),e(Joe,_ze),e(Wf,uze),e(Wf,yk),e(yk,bze),e(Wf,vze),e(A,Fze),e(A,Qf),e(Qf,Yoe),e(Yoe,Tze),e(Qf,Mze),e(Qf,Lk),e(Lk,Eze),e(Qf,Cze),e(A,wze),e(A,Hf),e(Hf,Koe),e(Koe,Aze),e(Hf,yze),e(Hf,xk),e(xk,Lze),e(Hf,xze),e(A,$ze),e(A,Uf),e(Uf,Zoe),e(Zoe,kze),e(Uf,Sze),e(Uf,$k),e($k,Rze),e(Uf,Pze),e(A,Bze),e(A,Jf),e(Jf,ere),e(ere,Ize),e(Jf,Nze),e(Jf,kk),e(kk,qze),e(Jf,jze),e(A,Dze),e(A,Yf),e(Yf,ore),e(ore,Gze),e(Yf,Oze),e(Yf,Sk),e(Sk,Vze),e(Yf,Xze),e(A,zze),e(A,Kf),e(Kf,rre),e(rre,Wze),e(Kf,Qze),e(Kf,Rk),e(Rk,Hze),e(Kf,Uze),e(A,Jze),e(A,Zf),e(Zf,tre),e(tre,Yze),e(Zf,Kze),e(Zf,Pk),e(Pk,Zze),e(Zf,eWe),e(A,oWe),e(A,em),e(em,are),e(are,rWe),e(em,tWe),e(em,Bk),e(Bk,aWe),e(em,nWe),e(A,sWe),e(A,om),e(om,nre),e(nre,lWe),e(om,iWe),e(om,Ik),e(Ik,dWe),e(om,cWe),e(A,fWe),e(A,rm),e(rm,sre),e(sre,mWe),e(rm,gWe),e(rm,Nk),e(Nk,hWe),e(rm,pWe),e(A,_We),e(A,tm),e(tm,lre),e(lre,uWe),e(tm,bWe),e(tm,qk),e(qk,vWe),e(tm,FWe),e(A,TWe),e(A,am),e(am,ire),e(ire,MWe),e(am,EWe),e(am,jk),e(jk,CWe),e(am,wWe),e(A,AWe),e(A,nm),e(nm,dre),e(dre,yWe),e(nm,LWe),e(nm,Dk),e(Dk,xWe),e(nm,$We),e(A,kWe),e(A,sm),e(sm,cre),e(cre,SWe),e(sm,RWe),e(sm,Gk),e(Gk,PWe),e(sm,BWe),e(A,IWe),e(A,lm),e(lm,fre),e(fre,NWe),e(lm,qWe),e(lm,Ok),e(Ok,jWe),e(lm,DWe),e(A,GWe),e(A,im),e(im,mre),e(mre,OWe),e(im,VWe),e(im,Vk),e(Vk,XWe),e(im,zWe),e(A,WWe),e(A,dm),e(dm,gre),e(gre,QWe),e(dm,HWe),e(dm,Xk),e(Xk,UWe),e(dm,JWe),e(A,YWe),e(A,cm),e(cm,hre),e(hre,KWe),e(cm,ZWe),e(cm,zk),e(zk,eQe),e(cm,oQe),e(A,rQe),e(A,fm),e(fm,pre),e(pre,tQe),e(fm,aQe),e(fm,Wk),e(Wk,nQe),e(fm,sQe),e(A,lQe),e(A,mm),e(mm,_re),e(_re,iQe),e(mm,dQe),e(mm,Qk),e(Qk,cQe),e(mm,fQe),e(A,mQe),e(A,gm),e(gm,ure),e(ure,gQe),e(gm,hQe),e(gm,Hk),e(Hk,pQe),e(gm,_Qe),e(A,uQe),e(A,hm),e(hm,bre),e(bre,bQe),e(hm,vQe),e(hm,Uk),e(Uk,FQe),e(hm,TQe),e(A,MQe),e(A,pm),e(pm,vre),e(vre,EQe),e(pm,CQe),e(pm,Jk),e(Jk,wQe),e(pm,AQe),e(A,yQe),e(A,_m),e(_m,Fre),e(Fre,LQe),e(_m,xQe),e(_m,Yk),e(Yk,$Qe),e(_m,kQe),e(A,SQe),e(A,um),e(um,Tre),e(Tre,RQe),e(um,PQe),e(um,Kk),e(Kk,BQe),e(um,IQe),e(A,NQe),e(A,bm),e(bm,Mre),e(Mre,qQe),e(bm,jQe),e(bm,Zk),e(Zk,DQe),e(bm,GQe),e(A,OQe),e(A,vm),e(vm,Ere),e(Ere,VQe),e(vm,XQe),e(vm,eS),e(eS,zQe),e(vm,WQe),e(A,QQe),e(A,Fm),e(Fm,Cre),e(Cre,HQe),e(Fm,UQe),e(Fm,oS),e(oS,JQe),e(Fm,YQe),e(A,KQe),e(A,Tm),e(Tm,wre),e(wre,ZQe),e(Tm,eHe),e(Tm,rS),e(rS,oHe),e(Tm,rHe),e(A,tHe),e(A,Mm),e(Mm,Are),e(Are,aHe),e(Mm,nHe),e(Mm,tS),e(tS,sHe),e(Mm,lHe),e(A,iHe),e(A,Em),e(Em,yre),e(yre,dHe),e(Em,cHe),e(Em,aS),e(aS,fHe),e(Em,mHe),e(A,gHe),e(A,Cm),e(Cm,Lre),e(Lre,hHe),e(Cm,pHe),e(Cm,nS),e(nS,_He),e(Cm,uHe),e(A,bHe),e(A,wm),e(wm,xre),e(xre,vHe),e(wm,FHe),e(wm,sS),e(sS,THe),e(wm,MHe),e(A,EHe),e(A,Am),e(Am,$re),e($re,CHe),e(Am,wHe),e(Am,lS),e(lS,AHe),e(Am,yHe),e(A,LHe),e(A,ym),e(ym,kre),e(kre,xHe),e(ym,$He),e(ym,iS),e(iS,kHe),e(ym,SHe),e(A,RHe),e(A,Lm),e(Lm,Sre),e(Sre,PHe),e(Lm,BHe),e(Lm,dS),e(dS,IHe),e(Lm,NHe),e(A,qHe),e(A,xm),e(xm,Rre),e(Rre,jHe),e(xm,DHe),e(xm,cS),e(cS,GHe),e(xm,OHe),e(A,VHe),e(A,$m),e($m,Pre),e(Pre,XHe),e($m,zHe),e($m,fS),e(fS,WHe),e($m,QHe),e(A,HHe),e(A,km),e(km,Bre),e(Bre,UHe),e(km,JHe),e(km,mS),e(mS,YHe),e(km,KHe),e(A,ZHe),e(A,Sm),e(Sm,Ire),e(Ire,eUe),e(Sm,oUe),e(Sm,gS),e(gS,rUe),e(Sm,tUe),e(A,aUe),e(A,Rm),e(Rm,Nre),e(Nre,nUe),e(Rm,sUe),e(Rm,hS),e(hS,lUe),e(Rm,iUe),e(A,dUe),e(A,Pm),e(Pm,qre),e(qre,cUe),e(Pm,fUe),e(Pm,pS),e(pS,mUe),e(Pm,gUe),e(A,hUe),e(A,Bm),e(Bm,jre),e(jre,pUe),e(Bm,_Ue),e(Bm,_S),e(_S,uUe),e(Bm,bUe),e(A,vUe),e(A,Im),e(Im,Dre),e(Dre,FUe),e(Im,TUe),e(Im,uS),e(uS,MUe),e(Im,EUe),e(A,CUe),e(A,Nm),e(Nm,Gre),e(Gre,wUe),e(Nm,AUe),e(Nm,bS),e(bS,yUe),e(Nm,LUe),e(A,xUe),e(A,qm),e(qm,Ore),e(Ore,$Ue),e(qm,kUe),e(qm,vS),e(vS,SUe),e(qm,RUe),e(A,PUe),e(A,jm),e(jm,Vre),e(Vre,BUe),e(jm,IUe),e(jm,FS),e(FS,NUe),e(jm,qUe),e(A,jUe),e(A,Dm),e(Dm,Xre),e(Xre,DUe),e(Dm,GUe),e(Dm,TS),e(TS,OUe),e(Dm,VUe),e(A,XUe),e(A,Gm),e(Gm,zre),e(zre,zUe),e(Gm,WUe),e(Gm,MS),e(MS,QUe),e(Gm,HUe),e(A,UUe),e(A,Om),e(Om,Wre),e(Wre,JUe),e(Om,YUe),e(Om,ES),e(ES,KUe),e(Om,ZUe),e(A,eJe),e(A,Vm),e(Vm,Qre),e(Qre,oJe),e(Vm,rJe),e(Vm,CS),e(CS,tJe),e(Vm,aJe),e(A,nJe),e(A,Xm),e(Xm,Hre),e(Hre,sJe),e(Xm,lJe),e(Xm,wS),e(wS,iJe),e(Xm,dJe),e(A,cJe),e(A,zm),e(zm,Ure),e(Ure,fJe),e(zm,mJe),e(zm,AS),e(AS,gJe),e(zm,hJe),e(A,pJe),e(A,Wm),e(Wm,Jre),e(Jre,_Je),e(Wm,uJe),e(Wm,yS),e(yS,bJe),e(Wm,vJe),e(A,FJe),e(A,Qm),e(Qm,Yre),e(Yre,TJe),e(Qm,MJe),e(Qm,LS),e(LS,EJe),e(Qm,CJe),e(A,wJe),e(A,Hm),e(Hm,Kre),e(Kre,AJe),e(Hm,yJe),e(Hm,xS),e(xS,LJe),e(Hm,xJe),e(A,$Je),e(A,Um),e(Um,Zre),e(Zre,kJe),e(Um,SJe),e(Um,$S),e($S,RJe),e(Um,PJe),e(A,BJe),e(A,Jm),e(Jm,ete),e(ete,IJe),e(Jm,NJe),e(Jm,kS),e(kS,qJe),e(Jm,jJe),e(A,DJe),e(A,Ym),e(Ym,ote),e(ote,GJe),e(Ym,OJe),e(Ym,SS),e(SS,VJe),e(Ym,XJe),e(A,zJe),e(A,Km),e(Km,rte),e(rte,WJe),e(Km,QJe),e(Km,RS),e(RS,HJe),e(Km,UJe),e(A,JJe),e(A,Zm),e(Zm,tte),e(tte,YJe),e(Zm,KJe),e(Zm,PS),e(PS,ZJe),e(Zm,eYe),e(A,oYe),e(A,eg),e(eg,ate),e(ate,rYe),e(eg,tYe),e(eg,BS),e(BS,aYe),e(eg,nYe),e(A,sYe),e(A,og),e(og,nte),e(nte,lYe),e(og,iYe),e(og,IS),e(IS,dYe),e(og,cYe),e(A,fYe),e(A,rg),e(rg,ste),e(ste,mYe),e(rg,gYe),e(rg,NS),e(NS,hYe),e(rg,pYe),e(A,_Ye),e(A,tg),e(tg,lte),e(lte,uYe),e(tg,bYe),e(tg,qS),e(qS,vYe),e(tg,FYe),e(A,TYe),e(A,ag),e(ag,ite),e(ite,MYe),e(ag,EYe),e(ag,jS),e(jS,CYe),e(ag,wYe),e(A,AYe),e(A,ng),e(ng,dte),e(dte,yYe),e(ng,LYe),e(ng,DS),e(DS,xYe),e(ng,$Ye),e(A,kYe),e(A,sg),e(sg,cte),e(cte,SYe),e(sg,RYe),e(sg,GS),e(GS,PYe),e(sg,BYe),e(A,IYe),e(A,lg),e(lg,fte),e(fte,NYe),e(lg,qYe),e(lg,OS),e(OS,jYe),e(lg,DYe),e(A,GYe),e(A,ig),e(ig,mte),e(mte,OYe),e(ig,VYe),e(ig,VS),e(VS,XYe),e(ig,zYe),e(A,WYe),e(A,dg),e(dg,gte),e(gte,QYe),e(dg,HYe),e(dg,XS),e(XS,UYe),e(dg,JYe),e(A,YYe),e(A,cg),e(cg,hte),e(hte,KYe),e(cg,ZYe),e(cg,zS),e(zS,eKe),e(cg,oKe),e(A,rKe),e(A,fg),e(fg,pte),e(pte,tKe),e(fg,aKe),e(fg,WS),e(WS,nKe),e(fg,sKe),e(A,lKe),e(A,mg),e(mg,_te),e(_te,iKe),e(mg,dKe),e(mg,QS),e(QS,cKe),e(mg,fKe),e(A,mKe),e(A,gg),e(gg,ute),e(ute,gKe),e(gg,hKe),e(gg,HS),e(HS,pKe),e(gg,_Ke),e(A,uKe),e(A,hg),e(hg,bte),e(bte,bKe),e(hg,vKe),e(hg,US),e(US,FKe),e(hg,TKe),e(A,MKe),e(A,pg),e(pg,vte),e(vte,EKe),e(pg,CKe),e(pg,JS),e(JS,wKe),e(pg,AKe),e(A,yKe),e(A,_g),e(_g,Fte),e(Fte,LKe),e(_g,xKe),e(_g,YS),e(YS,$Ke),e(_g,kKe),e(A,SKe),e(A,ug),e(ug,Tte),e(Tte,RKe),e(ug,PKe),e(ug,KS),e(KS,BKe),e(ug,IKe),e(A,NKe),e(A,bg),e(bg,Mte),e(Mte,qKe),e(bg,jKe),e(bg,ZS),e(ZS,DKe),e(bg,GKe),e(A,OKe),e(A,vg),e(vg,Ete),e(Ete,VKe),e(vg,XKe),e(vg,eR),e(eR,zKe),e(vg,WKe),e(A,QKe),e(A,Fg),e(Fg,Cte),e(Cte,HKe),e(Fg,UKe),e(Fg,oR),e(oR,JKe),e(Fg,YKe),e(A,KKe),e(A,Tg),e(Tg,wte),e(wte,ZKe),e(Tg,eZe),e(Tg,rR),e(rR,oZe),e(Tg,rZe),e(A,tZe),e(A,Mg),e(Mg,Ate),e(Ate,aZe),e(Mg,nZe),e(Mg,tR),e(tR,sZe),e(Mg,lZe),e(A,iZe),e(A,Eg),e(Eg,yte),e(yte,dZe),e(Eg,cZe),e(Eg,aR),e(aR,fZe),e(Eg,mZe),e(Er,gZe),M(Cg,Er,null),e(Co,hZe),e(Co,wg),M(jA,wg,null),e(wg,pZe),e(wg,Lte),e(Lte,_Ze),b(f,wqe,u),b(f,Ti,u),e(Ti,Ag),e(Ag,xte),M(DA,xte,null),e(Ti,uZe),e(Ti,$te),e($te,bZe),b(f,Aqe,u),b(f,wo,u),M(GA,wo,null),e(wo,vZe),e(wo,OA),e(OA,FZe),e(OA,nR),e(nR,TZe),e(OA,MZe),e(wo,EZe),e(wo,VA),e(VA,CZe),e(VA,kte),e(kte,wZe),e(VA,AZe),e(wo,yZe),e(wo,Cr),M(XA,Cr,null),e(Cr,LZe),e(Cr,Ste),e(Ste,xZe),e(Cr,$Ze),e(Cr,Aa),e(Aa,kZe),e(Aa,Rte),e(Rte,SZe),e(Aa,RZe),e(Aa,Pte),e(Pte,PZe),e(Aa,BZe),e(Aa,Bte),e(Bte,IZe),e(Aa,NZe),e(Cr,qZe),e(Cr,k),e(k,Sn),e(Sn,Ite),e(Ite,jZe),e(Sn,DZe),e(Sn,sR),e(sR,GZe),e(Sn,OZe),e(Sn,lR),e(lR,VZe),e(Sn,XZe),e(k,zZe),e(k,Rn),e(Rn,Nte),e(Nte,WZe),e(Rn,QZe),e(Rn,iR),e(iR,HZe),e(Rn,UZe),e(Rn,dR),e(dR,JZe),e(Rn,YZe),e(k,KZe),e(k,Pn),e(Pn,qte),e(qte,ZZe),e(Pn,eeo),e(Pn,cR),e(cR,oeo),e(Pn,reo),e(Pn,fR),e(fR,teo),e(Pn,aeo),e(k,neo),e(k,yg),e(yg,jte),e(jte,seo),e(yg,leo),e(yg,mR),e(mR,ieo),e(yg,deo),e(k,ceo),e(k,Bn),e(Bn,Dte),e(Dte,feo),e(Bn,meo),e(Bn,gR),e(gR,geo),e(Bn,heo),e(Bn,hR),e(hR,peo),e(Bn,_eo),e(k,ueo),e(k,Lg),e(Lg,Gte),e(Gte,beo),e(Lg,veo),e(Lg,pR),e(pR,Feo),e(Lg,Teo),e(k,Meo),e(k,xg),e(xg,Ote),e(Ote,Eeo),e(xg,Ceo),e(xg,_R),e(_R,weo),e(xg,Aeo),e(k,yeo),e(k,$g),e($g,Vte),e(Vte,Leo),e($g,xeo),e($g,uR),e(uR,$eo),e($g,keo),e(k,Seo),e(k,In),e(In,Xte),e(Xte,Reo),e(In,Peo),e(In,bR),e(bR,Beo),e(In,Ieo),e(In,vR),e(vR,Neo),e(In,qeo),e(k,jeo),e(k,Nn),e(Nn,zte),e(zte,Deo),e(Nn,Geo),e(Nn,FR),e(FR,Oeo),e(Nn,Veo),e(Nn,TR),e(TR,Xeo),e(Nn,zeo),e(k,Weo),e(k,qn),e(qn,Wte),e(Wte,Qeo),e(qn,Heo),e(qn,MR),e(MR,Ueo),e(qn,Jeo),e(qn,ER),e(ER,Yeo),e(qn,Keo),e(k,Zeo),e(k,kg),e(kg,Qte),e(Qte,eoo),e(kg,ooo),e(kg,CR),e(CR,roo),e(kg,too),e(k,aoo),e(k,Sg),e(Sg,Hte),e(Hte,noo),e(Sg,soo),e(Sg,wR),e(wR,loo),e(Sg,ioo),e(k,doo),e(k,Rg),e(Rg,Ute),e(Ute,coo),e(Rg,foo),e(Rg,AR),e(AR,moo),e(Rg,goo),e(k,hoo),e(k,jn),e(jn,Jte),e(Jte,poo),e(jn,_oo),e(jn,yR),e(yR,uoo),e(jn,boo),e(jn,LR),e(LR,voo),e(jn,Foo),e(k,Too),e(k,Pg),e(Pg,Yte),e(Yte,Moo),e(Pg,Eoo),e(Pg,xR),e(xR,Coo),e(Pg,woo),e(k,Aoo),e(k,Dn),e(Dn,Kte),e(Kte,yoo),e(Dn,Loo),e(Dn,$R),e($R,xoo),e(Dn,$oo),e(Dn,kR),e(kR,koo),e(Dn,Soo),e(k,Roo),e(k,Gn),e(Gn,Zte),e(Zte,Poo),e(Gn,Boo),e(Gn,SR),e(SR,Ioo),e(Gn,Noo),e(Gn,RR),e(RR,qoo),e(Gn,joo),e(k,Doo),e(k,On),e(On,eae),e(eae,Goo),e(On,Ooo),e(On,PR),e(PR,Voo),e(On,Xoo),e(On,BR),e(BR,zoo),e(On,Woo),e(k,Qoo),e(k,Bg),e(Bg,oae),e(oae,Hoo),e(Bg,Uoo),e(Bg,IR),e(IR,Joo),e(Bg,Yoo),e(k,Koo),e(k,Vn),e(Vn,rae),e(rae,Zoo),e(Vn,ero),e(Vn,NR),e(NR,oro),e(Vn,rro),e(Vn,qR),e(qR,tro),e(Vn,aro),e(k,nro),e(k,Xn),e(Xn,tae),e(tae,sro),e(Xn,lro),e(Xn,jR),e(jR,iro),e(Xn,dro),e(Xn,DR),e(DR,cro),e(Xn,fro),e(k,mro),e(k,zn),e(zn,aae),e(aae,gro),e(zn,hro),e(zn,GR),e(GR,pro),e(zn,_ro),e(zn,OR),e(OR,uro),e(zn,bro),e(k,vro),e(k,Wn),e(Wn,nae),e(nae,Fro),e(Wn,Tro),e(Wn,VR),e(VR,Mro),e(Wn,Ero),e(Wn,XR),e(XR,Cro),e(Wn,wro),e(k,Aro),e(k,Qn),e(Qn,sae),e(sae,yro),e(Qn,Lro),e(Qn,zR),e(zR,xro),e(Qn,$ro),e(Qn,WR),e(WR,kro),e(Qn,Sro),e(k,Rro),e(k,Hn),e(Hn,lae),e(lae,Pro),e(Hn,Bro),e(Hn,QR),e(QR,Iro),e(Hn,Nro),e(Hn,HR),e(HR,qro),e(Hn,jro),e(k,Dro),e(k,Ig),e(Ig,iae),e(iae,Gro),e(Ig,Oro),e(Ig,UR),e(UR,Vro),e(Ig,Xro),e(k,zro),e(k,Un),e(Un,dae),e(dae,Wro),e(Un,Qro),e(Un,JR),e(JR,Hro),e(Un,Uro),e(Un,YR),e(YR,Jro),e(Un,Yro),e(k,Kro),e(k,Ng),e(Ng,cae),e(cae,Zro),e(Ng,eto),e(Ng,KR),e(KR,oto),e(Ng,rto),e(k,tto),e(k,Jn),e(Jn,fae),e(fae,ato),e(Jn,nto),e(Jn,ZR),e(ZR,sto),e(Jn,lto),e(Jn,eP),e(eP,ito),e(Jn,dto),e(k,cto),e(k,Yn),e(Yn,mae),e(mae,fto),e(Yn,mto),e(Yn,oP),e(oP,gto),e(Yn,hto),e(Yn,rP),e(rP,pto),e(Yn,_to),e(k,uto),e(k,Kn),e(Kn,gae),e(gae,bto),e(Kn,vto),e(Kn,tP),e(tP,Fto),e(Kn,Tto),e(Kn,aP),e(aP,Mto),e(Kn,Eto),e(k,Cto),e(k,qg),e(qg,hae),e(hae,wto),e(qg,Ato),e(qg,nP),e(nP,yto),e(qg,Lto),e(k,xto),e(k,Zn),e(Zn,pae),e(pae,$to),e(Zn,kto),e(Zn,sP),e(sP,Sto),e(Zn,Rto),e(Zn,lP),e(lP,Pto),e(Zn,Bto),e(k,Ito),e(k,es),e(es,_ae),e(_ae,Nto),e(es,qto),e(es,iP),e(iP,jto),e(es,Dto),e(es,dP),e(dP,Gto),e(es,Oto),e(k,Vto),e(k,jg),e(jg,uae),e(uae,Xto),e(jg,zto),e(jg,cP),e(cP,Wto),e(jg,Qto),e(k,Hto),e(k,os),e(os,bae),e(bae,Uto),e(os,Jto),e(os,fP),e(fP,Yto),e(os,Kto),e(os,mP),e(mP,Zto),e(os,eao),e(k,oao),e(k,rs),e(rs,vae),e(vae,rao),e(rs,tao),e(rs,gP),e(gP,aao),e(rs,nao),e(rs,hP),e(hP,sao),e(rs,lao),e(k,iao),e(k,ts),e(ts,Fae),e(Fae,dao),e(ts,cao),e(ts,pP),e(pP,fao),e(ts,mao),e(ts,_P),e(_P,gao),e(ts,hao),e(k,pao),e(k,as),e(as,Tae),e(Tae,_ao),e(as,uao),e(as,uP),e(uP,bao),e(as,vao),e(as,bP),e(bP,Fao),e(as,Tao),e(k,Mao),e(k,ns),e(ns,Mae),e(Mae,Eao),e(ns,Cao),e(ns,vP),e(vP,wao),e(ns,Aao),e(ns,FP),e(FP,yao),e(ns,Lao),e(k,xao),e(k,ss),e(ss,Eae),e(Eae,$ao),e(ss,kao),e(ss,TP),e(TP,Sao),e(ss,Rao),e(ss,MP),e(MP,Pao),e(ss,Bao),e(k,Iao),e(k,ls),e(ls,Cae),e(Cae,Nao),e(ls,qao),e(ls,EP),e(EP,jao),e(ls,Dao),e(ls,CP),e(CP,Gao),e(ls,Oao),e(k,Vao),e(k,Dg),e(Dg,wae),e(wae,Xao),e(Dg,zao),e(Dg,wP),e(wP,Wao),e(Dg,Qao),e(k,Hao),e(k,is),e(is,Aae),e(Aae,Uao),e(is,Jao),e(is,AP),e(AP,Yao),e(is,Kao),e(is,yP),e(yP,Zao),e(is,eno),e(k,ono),e(k,Gg),e(Gg,yae),e(yae,rno),e(Gg,tno),e(Gg,LP),e(LP,ano),e(Gg,nno),e(k,sno),e(k,Og),e(Og,Lae),e(Lae,lno),e(Og,ino),e(Og,xP),e(xP,dno),e(Og,cno),e(k,fno),e(k,ds),e(ds,xae),e(xae,mno),e(ds,gno),e(ds,$P),e($P,hno),e(ds,pno),e(ds,kP),e(kP,_no),e(ds,uno),e(k,bno),e(k,cs),e(cs,$ae),e($ae,vno),e(cs,Fno),e(cs,SP),e(SP,Tno),e(cs,Mno),e(cs,RP),e(RP,Eno),e(cs,Cno),e(k,wno),e(k,fs),e(fs,kae),e(kae,Ano),e(fs,yno),e(fs,PP),e(PP,Lno),e(fs,xno),e(fs,BP),e(BP,$no),e(fs,kno),e(k,Sno),e(k,Vg),e(Vg,Sae),e(Sae,Rno),e(Vg,Pno),e(Vg,IP),e(IP,Bno),e(Vg,Ino),e(k,Nno),e(k,ms),e(ms,Rae),e(Rae,qno),e(ms,jno),e(ms,NP),e(NP,Dno),e(ms,Gno),e(ms,qP),e(qP,Ono),e(ms,Vno),e(k,Xno),e(k,gs),e(gs,Pae),e(Pae,zno),e(gs,Wno),e(gs,jP),e(jP,Qno),e(gs,Hno),e(gs,DP),e(DP,Uno),e(gs,Jno),e(k,Yno),e(k,hs),e(hs,Bae),e(Bae,Kno),e(hs,Zno),e(hs,GP),e(GP,eso),e(hs,oso),e(hs,OP),e(OP,rso),e(hs,tso),e(k,aso),e(k,ps),e(ps,Iae),e(Iae,nso),e(ps,sso),e(ps,VP),e(VP,lso),e(ps,iso),e(ps,XP),e(XP,dso),e(ps,cso),e(k,fso),e(k,_s),e(_s,Nae),e(Nae,mso),e(_s,gso),e(_s,zP),e(zP,hso),e(_s,pso),e(_s,WP),e(WP,_so),e(_s,uso),e(k,bso),e(k,Xg),e(Xg,qae),e(qae,vso),e(Xg,Fso),e(Xg,QP),e(QP,Tso),e(Xg,Mso),e(k,Eso),e(k,us),e(us,jae),e(jae,Cso),e(us,wso),e(us,HP),e(HP,Aso),e(us,yso),e(us,UP),e(UP,Lso),e(us,xso),e(k,$so),e(k,zg),e(zg,Dae),e(Dae,kso),e(zg,Sso),e(zg,JP),e(JP,Rso),e(zg,Pso),e(k,Bso),e(k,Wg),e(Wg,Gae),e(Gae,Iso),e(Wg,Nso),e(Wg,YP),e(YP,qso),e(Wg,jso),e(k,Dso),e(k,Qg),e(Qg,Oae),e(Oae,Gso),e(Qg,Oso),e(Qg,KP),e(KP,Vso),e(Qg,Xso),e(k,zso),e(k,Hg),e(Hg,Vae),e(Vae,Wso),e(Hg,Qso),e(Hg,ZP),e(ZP,Hso),e(Hg,Uso),e(k,Jso),e(k,bs),e(bs,Xae),e(Xae,Yso),e(bs,Kso),e(bs,eB),e(eB,Zso),e(bs,elo),e(bs,oB),e(oB,olo),e(bs,rlo),e(k,tlo),e(k,Ug),e(Ug,zae),e(zae,alo),e(Ug,nlo),e(Ug,rB),e(rB,slo),e(Ug,llo),e(k,ilo),e(k,vs),e(vs,Wae),e(Wae,dlo),e(vs,clo),e(vs,tB),e(tB,flo),e(vs,mlo),e(vs,aB),e(aB,glo),e(vs,hlo),e(k,plo),e(k,Fs),e(Fs,Qae),e(Qae,_lo),e(Fs,ulo),e(Fs,nB),e(nB,blo),e(Fs,vlo),e(Fs,sB),e(sB,Flo),e(Fs,Tlo),e(k,Mlo),e(k,Ts),e(Ts,Hae),e(Hae,Elo),e(Ts,Clo),e(Ts,lB),e(lB,wlo),e(Ts,Alo),e(Ts,iB),e(iB,ylo),e(Ts,Llo),e(k,xlo),e(k,Ms),e(Ms,Uae),e(Uae,$lo),e(Ms,klo),e(Ms,dB),e(dB,Slo),e(Ms,Rlo),e(Ms,cB),e(cB,Plo),e(Ms,Blo),e(k,Ilo),e(k,Es),e(Es,Jae),e(Jae,Nlo),e(Es,qlo),e(Es,fB),e(fB,jlo),e(Es,Dlo),e(Es,mB),e(mB,Glo),e(Es,Olo),e(k,Vlo),e(k,Cs),e(Cs,Yae),e(Yae,Xlo),e(Cs,zlo),e(Cs,gB),e(gB,Wlo),e(Cs,Qlo),e(Cs,hB),e(hB,Hlo),e(Cs,Ulo),e(k,Jlo),e(k,Jg),e(Jg,Kae),e(Kae,Ylo),e(Jg,Klo),e(Jg,pB),e(pB,Zlo),e(Jg,eio),e(k,oio),e(k,Yg),e(Yg,Zae),e(Zae,rio),e(Yg,tio),e(Yg,_B),e(_B,aio),e(Yg,nio),e(k,sio),e(k,ws),e(ws,ene),e(ene,lio),e(ws,iio),e(ws,uB),e(uB,dio),e(ws,cio),e(ws,bB),e(bB,fio),e(ws,mio),e(k,gio),e(k,As),e(As,one),e(one,hio),e(As,pio),e(As,vB),e(vB,_io),e(As,uio),e(As,FB),e(FB,bio),e(As,vio),e(k,Fio),e(k,ys),e(ys,rne),e(rne,Tio),e(ys,Mio),e(ys,TB),e(TB,Eio),e(ys,Cio),e(ys,MB),e(MB,wio),e(ys,Aio),e(k,yio),e(k,Kg),e(Kg,tne),e(tne,Lio),e(Kg,xio),e(Kg,EB),e(EB,$io),e(Kg,kio),e(k,Sio),e(k,Zg),e(Zg,ane),e(ane,Rio),e(Zg,Pio),e(Zg,CB),e(CB,Bio),e(Zg,Iio),e(k,Nio),e(k,eh),e(eh,nne),e(nne,qio),e(eh,jio),e(eh,wB),e(wB,Dio),e(eh,Gio),e(k,Oio),e(k,Ls),e(Ls,sne),e(sne,Vio),e(Ls,Xio),e(Ls,AB),e(AB,zio),e(Ls,Wio),e(Ls,yB),e(yB,Qio),e(Ls,Hio),e(k,Uio),e(k,oh),e(oh,lne),e(lne,Jio),e(oh,Yio),e(oh,LB),e(LB,Kio),e(oh,Zio),e(k,edo),e(k,rh),e(rh,ine),e(ine,odo),e(rh,rdo),e(rh,xB),e(xB,tdo),e(rh,ado),e(k,ndo),e(k,th),e(th,dne),e(dne,sdo),e(th,ldo),e(th,$B),e($B,ido),e(th,ddo),e(k,cdo),e(k,xs),e(xs,cne),e(cne,fdo),e(xs,mdo),e(xs,kB),e(kB,gdo),e(xs,hdo),e(xs,SB),e(SB,pdo),e(xs,_do),e(k,udo),e(k,ah),e(ah,fne),e(fne,bdo),e(ah,vdo),e(ah,RB),e(RB,Fdo),e(ah,Tdo),e(k,Mdo),e(k,nh),e(nh,mne),e(mne,Edo),e(nh,Cdo),e(nh,PB),e(PB,wdo),e(nh,Ado),e(k,ydo),e(k,$s),e($s,gne),e(gne,Ldo),e($s,xdo),e($s,BB),e(BB,$do),e($s,kdo),e($s,IB),e(IB,Sdo),e($s,Rdo),e(k,Pdo),e(k,ks),e(ks,hne),e(hne,Bdo),e(ks,Ido),e(ks,NB),e(NB,Ndo),e(ks,qdo),e(ks,qB),e(qB,jdo),e(ks,Ddo),e(k,Gdo),e(k,Ss),e(Ss,pne),e(pne,Odo),e(Ss,Vdo),e(Ss,jB),e(jB,Xdo),e(Ss,zdo),e(Ss,DB),e(DB,Wdo),e(Ss,Qdo),e(k,Hdo),e(k,Rs),e(Rs,_ne),e(_ne,Udo),e(Rs,Jdo),e(Rs,GB),e(GB,Ydo),e(Rs,Kdo),e(Rs,OB),e(OB,Zdo),e(Rs,eco),e(Cr,oco),M(sh,Cr,null),e(wo,rco),e(wo,lh),M(zA,lh,null),e(lh,tco),e(lh,une),e(une,aco),b(f,yqe,u),b(f,Mi,u),e(Mi,ih),e(ih,bne),M(WA,bne,null),e(Mi,nco),e(Mi,vne),e(vne,sco),b(f,Lqe,u),b(f,Ao,u),M(QA,Ao,null),e(Ao,lco),e(Ao,HA),e(HA,ico),e(HA,VB),e(VB,dco),e(HA,cco),e(Ao,fco),e(Ao,UA),e(UA,mco),e(UA,Fne),e(Fne,gco),e(UA,hco),e(Ao,pco),e(Ao,He),M(JA,He,null),e(He,_co),e(He,Tne),e(Tne,uco),e(He,bco),e(He,ya),e(ya,vco),e(ya,Mne),e(Mne,Fco),e(ya,Tco),e(ya,Ene),e(Ene,Mco),e(ya,Eco),e(ya,Cne),e(Cne,Cco),e(ya,wco),e(He,Aco),e(He,Y),e(Y,dh),e(dh,wne),e(wne,yco),e(dh,Lco),e(dh,XB),e(XB,xco),e(dh,$co),e(Y,kco),e(Y,ch),e(ch,Ane),e(Ane,Sco),e(ch,Rco),e(ch,zB),e(zB,Pco),e(ch,Bco),e(Y,Ico),e(Y,fh),e(fh,yne),e(yne,Nco),e(fh,qco),e(fh,WB),e(WB,jco),e(fh,Dco),e(Y,Gco),e(Y,mh),e(mh,Lne),e(Lne,Oco),e(mh,Vco),e(mh,QB),e(QB,Xco),e(mh,zco),e(Y,Wco),e(Y,gh),e(gh,xne),e(xne,Qco),e(gh,Hco),e(gh,HB),e(HB,Uco),e(gh,Jco),e(Y,Yco),e(Y,hh),e(hh,$ne),e($ne,Kco),e(hh,Zco),e(hh,UB),e(UB,efo),e(hh,ofo),e(Y,rfo),e(Y,ph),e(ph,kne),e(kne,tfo),e(ph,afo),e(ph,JB),e(JB,nfo),e(ph,sfo),e(Y,lfo),e(Y,_h),e(_h,Sne),e(Sne,ifo),e(_h,dfo),e(_h,YB),e(YB,cfo),e(_h,ffo),e(Y,mfo),e(Y,uh),e(uh,Rne),e(Rne,gfo),e(uh,hfo),e(uh,KB),e(KB,pfo),e(uh,_fo),e(Y,ufo),e(Y,bh),e(bh,Pne),e(Pne,bfo),e(bh,vfo),e(bh,ZB),e(ZB,Ffo),e(bh,Tfo),e(Y,Mfo),e(Y,vh),e(vh,Bne),e(Bne,Efo),e(vh,Cfo),e(vh,eI),e(eI,wfo),e(vh,Afo),e(Y,yfo),e(Y,Fh),e(Fh,Ine),e(Ine,Lfo),e(Fh,xfo),e(Fh,oI),e(oI,$fo),e(Fh,kfo),e(Y,Sfo),e(Y,Th),e(Th,Nne),e(Nne,Rfo),e(Th,Pfo),e(Th,rI),e(rI,Bfo),e(Th,Ifo),e(Y,Nfo),e(Y,Mh),e(Mh,qne),e(qne,qfo),e(Mh,jfo),e(Mh,tI),e(tI,Dfo),e(Mh,Gfo),e(Y,Ofo),e(Y,Eh),e(Eh,jne),e(jne,Vfo),e(Eh,Xfo),e(Eh,aI),e(aI,zfo),e(Eh,Wfo),e(Y,Qfo),e(Y,Ch),e(Ch,Dne),e(Dne,Hfo),e(Ch,Ufo),e(Ch,nI),e(nI,Jfo),e(Ch,Yfo),e(Y,Kfo),e(Y,wh),e(wh,Gne),e(Gne,Zfo),e(wh,emo),e(wh,sI),e(sI,omo),e(wh,rmo),e(Y,tmo),e(Y,Ah),e(Ah,One),e(One,amo),e(Ah,nmo),e(Ah,lI),e(lI,smo),e(Ah,lmo),e(Y,imo),e(Y,yh),e(yh,Vne),e(Vne,dmo),e(yh,cmo),e(yh,iI),e(iI,fmo),e(yh,mmo),e(Y,gmo),e(Y,Lh),e(Lh,Xne),e(Xne,hmo),e(Lh,pmo),e(Lh,dI),e(dI,_mo),e(Lh,umo),e(Y,bmo),e(Y,xh),e(xh,zne),e(zne,vmo),e(xh,Fmo),e(xh,cI),e(cI,Tmo),e(xh,Mmo),e(Y,Emo),e(Y,$h),e($h,Wne),e(Wne,Cmo),e($h,wmo),e($h,fI),e(fI,Amo),e($h,ymo),e(Y,Lmo),e(Y,kh),e(kh,Qne),e(Qne,xmo),e(kh,$mo),e(kh,mI),e(mI,kmo),e(kh,Smo),e(Y,Rmo),e(Y,Sh),e(Sh,Hne),e(Hne,Pmo),e(Sh,Bmo),e(Sh,gI),e(gI,Imo),e(Sh,Nmo),e(Y,qmo),e(Y,Rh),e(Rh,Une),e(Une,jmo),e(Rh,Dmo),e(Rh,hI),e(hI,Gmo),e(Rh,Omo),e(Y,Vmo),e(Y,Ph),e(Ph,Jne),e(Jne,Xmo),e(Ph,zmo),e(Ph,pI),e(pI,Wmo),e(Ph,Qmo),e(Y,Hmo),e(Y,Bh),e(Bh,Yne),e(Yne,Umo),e(Bh,Jmo),e(Bh,_I),e(_I,Ymo),e(Bh,Kmo),e(Y,Zmo),e(Y,Ih),e(Ih,Kne),e(Kne,ego),e(Ih,ogo),e(Ih,uI),e(uI,rgo),e(Ih,tgo),e(Y,ago),e(Y,Nh),e(Nh,Zne),e(Zne,ngo),e(Nh,sgo),e(Nh,bI),e(bI,lgo),e(Nh,igo),e(He,dgo),M(qh,He,null),e(He,cgo),M(jh,He,null),e(Ao,fgo),e(Ao,Dh),M(YA,Dh,null),e(Dh,mgo),e(Dh,ese),e(ese,ggo),b(f,xqe,u),b(f,Ei,u),e(Ei,Gh),e(Gh,ose),M(KA,ose,null),e(Ei,hgo),e(Ei,rse),e(rse,pgo),b(f,$qe,u),b(f,yo,u),M(ZA,yo,null),e(yo,_go),e(yo,ey),e(ey,ugo),e(ey,vI),e(vI,bgo),e(ey,vgo),e(yo,Fgo),e(yo,oy),e(oy,Tgo),e(oy,tse),e(tse,Mgo),e(oy,Ego),e(yo,Cgo),e(yo,Ue),M(ry,Ue,null),e(Ue,wgo),e(Ue,ase),e(ase,Ago),e(Ue,ygo),e(Ue,Ci),e(Ci,Lgo),e(Ci,nse),e(nse,xgo),e(Ci,$go),e(Ci,sse),e(sse,kgo),e(Ci,Sgo),e(Ue,Rgo),e(Ue,he),e(he,Oh),e(Oh,lse),e(lse,Pgo),e(Oh,Bgo),e(Oh,FI),e(FI,Igo),e(Oh,Ngo),e(he,qgo),e(he,Vh),e(Vh,ise),e(ise,jgo),e(Vh,Dgo),e(Vh,dse),e(dse,Ggo),e(Vh,Ogo),e(he,Vgo),e(he,Xh),e(Xh,cse),e(cse,Xgo),e(Xh,zgo),e(Xh,TI),e(TI,Wgo),e(Xh,Qgo),e(he,Hgo),e(he,zh),e(zh,fse),e(fse,Ugo),e(zh,Jgo),e(zh,MI),e(MI,Ygo),e(zh,Kgo),e(he,Zgo),e(he,Wh),e(Wh,mse),e(mse,eho),e(Wh,oho),e(Wh,EI),e(EI,rho),e(Wh,tho),e(he,aho),e(he,Qh),e(Qh,gse),e(gse,nho),e(Qh,sho),e(Qh,CI),e(CI,lho),e(Qh,iho),e(he,dho),e(he,Hh),e(Hh,hse),e(hse,cho),e(Hh,fho),e(Hh,wI),e(wI,mho),e(Hh,gho),e(he,hho),e(he,Uh),e(Uh,pse),e(pse,pho),e(Uh,_ho),e(Uh,AI),e(AI,uho),e(Uh,bho),e(he,vho),e(he,Jh),e(Jh,_se),e(_se,Fho),e(Jh,Tho),e(Jh,yI),e(yI,Mho),e(Jh,Eho),e(he,Cho),e(he,Yh),e(Yh,use),e(use,who),e(Yh,Aho),e(Yh,LI),e(LI,yho),e(Yh,Lho),e(he,xho),e(he,Kh),e(Kh,bse),e(bse,$ho),e(Kh,kho),e(Kh,xI),e(xI,Sho),e(Kh,Rho),e(he,Pho),e(he,Zh),e(Zh,vse),e(vse,Bho),e(Zh,Iho),e(Zh,$I),e($I,Nho),e(Zh,qho),e(he,jho),e(he,ep),e(ep,Fse),e(Fse,Dho),e(ep,Gho),e(ep,kI),e(kI,Oho),e(ep,Vho),e(he,Xho),e(he,op),e(op,Tse),e(Tse,zho),e(op,Who),e(op,SI),e(SI,Qho),e(op,Hho),e(he,Uho),e(he,rp),e(rp,Mse),e(Mse,Jho),e(rp,Yho),e(rp,RI),e(RI,Kho),e(rp,Zho),e(he,epo),e(he,tp),e(tp,Ese),e(Ese,opo),e(tp,rpo),e(tp,PI),e(PI,tpo),e(tp,apo),e(he,npo),e(he,ap),e(ap,Cse),e(Cse,spo),e(ap,lpo),e(ap,BI),e(BI,ipo),e(ap,dpo),e(Ue,cpo),M(np,Ue,null),e(Ue,fpo),M(sp,Ue,null),e(yo,mpo),e(yo,lp),M(ty,lp,null),e(lp,gpo),e(lp,wse),e(wse,hpo),b(f,kqe,u),b(f,wi,u),e(wi,ip),e(ip,Ase),M(ay,Ase,null),e(wi,ppo),e(wi,yse),e(yse,_po),b(f,Sqe,u),b(f,Lo,u),M(ny,Lo,null),e(Lo,upo),e(Lo,Ai),e(Ai,bpo),e(Ai,II),e(II,vpo),e(Ai,Fpo),e(Ai,NI),e(NI,Tpo),e(Ai,Mpo),e(Lo,Epo),e(Lo,sy),e(sy,Cpo),e(sy,Lse),e(Lse,wpo),e(sy,Apo),e(Lo,ypo),e(Lo,tt),M(ly,tt,null),e(tt,Lpo),e(tt,xse),e(xse,xpo),e(tt,$po),e(tt,yi),e(yi,kpo),e(yi,$se),e($se,Spo),e(yi,Rpo),e(yi,qI),e(qI,Ppo),e(yi,Bpo),e(tt,Ipo),M(dp,tt,null),e(Lo,Npo),e(Lo,Je),M(iy,Je,null),e(Je,qpo),e(Je,kse),e(kse,jpo),e(Je,Dpo),e(Je,La),e(La,Gpo),e(La,Sse),e(Sse,Opo),e(La,Vpo),e(La,Rse),e(Rse,Xpo),e(La,zpo),e(La,Pse),e(Pse,Wpo),e(La,Qpo),e(Je,Hpo),e(Je,x),e(x,cp),e(cp,Bse),e(Bse,Upo),e(cp,Jpo),e(cp,jI),e(jI,Ypo),e(cp,Kpo),e(x,Zpo),e(x,fp),e(fp,Ise),e(Ise,e_o),e(fp,o_o),e(fp,DI),e(DI,r_o),e(fp,t_o),e(x,a_o),e(x,mp),e(mp,Nse),e(Nse,n_o),e(mp,s_o),e(mp,GI),e(GI,l_o),e(mp,i_o),e(x,d_o),e(x,gp),e(gp,qse),e(qse,c_o),e(gp,f_o),e(gp,OI),e(OI,m_o),e(gp,g_o),e(x,h_o),e(x,hp),e(hp,jse),e(jse,p_o),e(hp,__o),e(hp,VI),e(VI,u_o),e(hp,b_o),e(x,v_o),e(x,pp),e(pp,Dse),e(Dse,F_o),e(pp,T_o),e(pp,XI),e(XI,M_o),e(pp,E_o),e(x,C_o),e(x,_p),e(_p,Gse),e(Gse,w_o),e(_p,A_o),e(_p,zI),e(zI,y_o),e(_p,L_o),e(x,x_o),e(x,up),e(up,Ose),e(Ose,$_o),e(up,k_o),e(up,WI),e(WI,S_o),e(up,R_o),e(x,P_o),e(x,bp),e(bp,Vse),e(Vse,B_o),e(bp,I_o),e(bp,QI),e(QI,N_o),e(bp,q_o),e(x,j_o),e(x,vp),e(vp,Xse),e(Xse,D_o),e(vp,G_o),e(vp,HI),e(HI,O_o),e(vp,V_o),e(x,X_o),e(x,Fp),e(Fp,zse),e(zse,z_o),e(Fp,W_o),e(Fp,UI),e(UI,Q_o),e(Fp,H_o),e(x,U_o),e(x,Tp),e(Tp,Wse),e(Wse,J_o),e(Tp,Y_o),e(Tp,JI),e(JI,K_o),e(Tp,Z_o),e(x,euo),e(x,Mp),e(Mp,Qse),e(Qse,ouo),e(Mp,ruo),e(Mp,YI),e(YI,tuo),e(Mp,auo),e(x,nuo),e(x,Ep),e(Ep,Hse),e(Hse,suo),e(Ep,luo),e(Ep,KI),e(KI,iuo),e(Ep,duo),e(x,cuo),e(x,Cp),e(Cp,Use),e(Use,fuo),e(Cp,muo),e(Cp,ZI),e(ZI,guo),e(Cp,huo),e(x,puo),e(x,wp),e(wp,Jse),e(Jse,_uo),e(wp,uuo),e(wp,eN),e(eN,buo),e(wp,vuo),e(x,Fuo),e(x,Ap),e(Ap,Yse),e(Yse,Tuo),e(Ap,Muo),e(Ap,oN),e(oN,Euo),e(Ap,Cuo),e(x,wuo),e(x,yp),e(yp,Kse),e(Kse,Auo),e(yp,yuo),e(yp,rN),e(rN,Luo),e(yp,xuo),e(x,$uo),e(x,Lp),e(Lp,Zse),e(Zse,kuo),e(Lp,Suo),e(Lp,tN),e(tN,Ruo),e(Lp,Puo),e(x,Buo),e(x,xp),e(xp,ele),e(ele,Iuo),e(xp,Nuo),e(xp,aN),e(aN,quo),e(xp,juo),e(x,Duo),e(x,$p),e($p,ole),e(ole,Guo),e($p,Ouo),e($p,nN),e(nN,Vuo),e($p,Xuo),e(x,zuo),e(x,kp),e(kp,rle),e(rle,Wuo),e(kp,Quo),e(kp,sN),e(sN,Huo),e(kp,Uuo),e(x,Juo),e(x,Sp),e(Sp,tle),e(tle,Yuo),e(Sp,Kuo),e(Sp,lN),e(lN,Zuo),e(Sp,e4o),e(x,o4o),e(x,Rp),e(Rp,ale),e(ale,r4o),e(Rp,t4o),e(Rp,iN),e(iN,a4o),e(Rp,n4o),e(x,s4o),e(x,Pp),e(Pp,nle),e(nle,l4o),e(Pp,i4o),e(Pp,dN),e(dN,d4o),e(Pp,c4o),e(x,f4o),e(x,Bp),e(Bp,sle),e(sle,m4o),e(Bp,g4o),e(Bp,cN),e(cN,h4o),e(Bp,p4o),e(x,_4o),e(x,Ip),e(Ip,lle),e(lle,u4o),e(Ip,b4o),e(Ip,fN),e(fN,v4o),e(Ip,F4o),e(x,T4o),e(x,Np),e(Np,ile),e(ile,M4o),e(Np,E4o),e(Np,mN),e(mN,C4o),e(Np,w4o),e(x,A4o),e(x,qp),e(qp,dle),e(dle,y4o),e(qp,L4o),e(qp,gN),e(gN,x4o),e(qp,$4o),e(x,k4o),e(x,jp),e(jp,cle),e(cle,S4o),e(jp,R4o),e(jp,hN),e(hN,P4o),e(jp,B4o),e(x,I4o),e(x,Dp),e(Dp,fle),e(fle,N4o),e(Dp,q4o),e(Dp,pN),e(pN,j4o),e(Dp,D4o),e(x,G4o),e(x,Gp),e(Gp,mle),e(mle,O4o),e(Gp,V4o),e(Gp,_N),e(_N,X4o),e(Gp,z4o),e(x,W4o),e(x,Op),e(Op,gle),e(gle,Q4o),e(Op,H4o),e(Op,uN),e(uN,U4o),e(Op,J4o),e(x,Y4o),e(x,Ps),e(Ps,hle),e(hle,K4o),e(Ps,Z4o),e(Ps,bN),e(bN,e1o),e(Ps,o1o),e(Ps,vN),e(vN,r1o),e(Ps,t1o),e(x,a1o),e(x,Vp),e(Vp,ple),e(ple,n1o),e(Vp,s1o),e(Vp,FN),e(FN,l1o),e(Vp,i1o),e(x,d1o),e(x,Xp),e(Xp,_le),e(_le,c1o),e(Xp,f1o),e(Xp,TN),e(TN,m1o),e(Xp,g1o),e(x,h1o),e(x,zp),e(zp,ule),e(ule,p1o),e(zp,_1o),e(zp,MN),e(MN,u1o),e(zp,b1o),e(x,v1o),e(x,Wp),e(Wp,ble),e(ble,F1o),e(Wp,T1o),e(Wp,EN),e(EN,M1o),e(Wp,E1o),e(x,C1o),e(x,Qp),e(Qp,vle),e(vle,w1o),e(Qp,A1o),e(Qp,CN),e(CN,y1o),e(Qp,L1o),e(x,x1o),e(x,Hp),e(Hp,Fle),e(Fle,$1o),e(Hp,k1o),e(Hp,wN),e(wN,S1o),e(Hp,R1o),e(x,P1o),e(x,Up),e(Up,Tle),e(Tle,B1o),e(Up,I1o),e(Up,AN),e(AN,N1o),e(Up,q1o),e(x,j1o),e(x,Jp),e(Jp,Mle),e(Mle,D1o),e(Jp,G1o),e(Jp,yN),e(yN,O1o),e(Jp,V1o),e(x,X1o),e(x,Yp),e(Yp,Ele),e(Ele,z1o),e(Yp,W1o),e(Yp,LN),e(LN,Q1o),e(Yp,H1o),e(x,U1o),e(x,Kp),e(Kp,Cle),e(Cle,J1o),e(Kp,Y1o),e(Kp,xN),e(xN,K1o),e(Kp,Z1o),e(x,e7o),e(x,Zp),e(Zp,wle),e(wle,o7o),e(Zp,r7o),e(Zp,$N),e($N,t7o),e(Zp,a7o),e(x,n7o),e(x,e_),e(e_,Ale),e(Ale,s7o),e(e_,l7o),e(e_,kN),e(kN,i7o),e(e_,d7o),e(x,c7o),e(x,o_),e(o_,yle),e(yle,f7o),e(o_,m7o),e(o_,SN),e(SN,g7o),e(o_,h7o),e(x,p7o),e(x,r_),e(r_,Lle),e(Lle,_7o),e(r_,u7o),e(r_,RN),e(RN,b7o),e(r_,v7o),e(x,F7o),e(x,t_),e(t_,xle),e(xle,T7o),e(t_,M7o),e(t_,PN),e(PN,E7o),e(t_,C7o),e(x,w7o),e(x,a_),e(a_,$le),e($le,A7o),e(a_,y7o),e(a_,BN),e(BN,L7o),e(a_,x7o),e(x,$7o),e(x,n_),e(n_,kle),e(kle,k7o),e(n_,S7o),e(n_,IN),e(IN,R7o),e(n_,P7o),e(x,B7o),e(x,s_),e(s_,Sle),e(Sle,I7o),e(s_,N7o),e(s_,NN),e(NN,q7o),e(s_,j7o),e(x,D7o),e(x,l_),e(l_,Rle),e(Rle,G7o),e(l_,O7o),e(l_,qN),e(qN,V7o),e(l_,X7o),e(x,z7o),e(x,i_),e(i_,Ple),e(Ple,W7o),e(i_,Q7o),e(i_,jN),e(jN,H7o),e(i_,U7o),e(x,J7o),e(x,d_),e(d_,Ble),e(Ble,Y7o),e(d_,K7o),e(d_,DN),e(DN,Z7o),e(d_,ebo),e(x,obo),e(x,c_),e(c_,Ile),e(Ile,rbo),e(c_,tbo),e(c_,GN),e(GN,abo),e(c_,nbo),e(x,sbo),e(x,f_),e(f_,Nle),e(Nle,lbo),e(f_,ibo),e(f_,ON),e(ON,dbo),e(f_,cbo),e(x,fbo),e(x,m_),e(m_,qle),e(qle,mbo),e(m_,gbo),e(m_,VN),e(VN,hbo),e(m_,pbo),e(x,_bo),e(x,g_),e(g_,jle),e(jle,ubo),e(g_,bbo),e(g_,XN),e(XN,vbo),e(g_,Fbo),e(x,Tbo),e(x,h_),e(h_,Dle),e(Dle,Mbo),e(h_,Ebo),e(h_,zN),e(zN,Cbo),e(h_,wbo),e(x,Abo),e(x,p_),e(p_,Gle),e(Gle,ybo),e(p_,Lbo),e(p_,WN),e(WN,xbo),e(p_,$bo),e(x,kbo),e(x,__),e(__,Ole),e(Ole,Sbo),e(__,Rbo),e(__,QN),e(QN,Pbo),e(__,Bbo),e(x,Ibo),e(x,u_),e(u_,Vle),e(Vle,Nbo),e(u_,qbo),e(u_,HN),e(HN,jbo),e(u_,Dbo),e(x,Gbo),e(x,b_),e(b_,Xle),e(Xle,Obo),e(b_,Vbo),e(b_,UN),e(UN,Xbo),e(b_,zbo),e(x,Wbo),e(x,v_),e(v_,zle),e(zle,Qbo),e(v_,Hbo),e(v_,JN),e(JN,Ubo),e(v_,Jbo),e(x,Ybo),e(x,F_),e(F_,Wle),e(Wle,Kbo),e(F_,Zbo),e(F_,YN),e(YN,e2o),e(F_,o2o),e(x,r2o),e(x,T_),e(T_,Qle),e(Qle,t2o),e(T_,a2o),e(T_,KN),e(KN,n2o),e(T_,s2o),e(x,l2o),e(x,M_),e(M_,Hle),e(Hle,i2o),e(M_,d2o),e(M_,ZN),e(ZN,c2o),e(M_,f2o),e(x,m2o),e(x,E_),e(E_,Ule),e(Ule,g2o),e(E_,h2o),e(E_,eq),e(eq,p2o),e(E_,_2o),e(x,u2o),e(x,C_),e(C_,Jle),e(Jle,b2o),e(C_,v2o),e(C_,oq),e(oq,F2o),e(C_,T2o),e(x,M2o),e(x,w_),e(w_,Yle),e(Yle,E2o),e(w_,C2o),e(w_,rq),e(rq,w2o),e(w_,A2o),e(x,y2o),e(x,A_),e(A_,Kle),e(Kle,L2o),e(A_,x2o),e(A_,tq),e(tq,$2o),e(A_,k2o),e(x,S2o),e(x,y_),e(y_,Zle),e(Zle,R2o),e(y_,P2o),e(y_,aq),e(aq,B2o),e(y_,I2o),e(x,N2o),e(x,L_),e(L_,eie),e(eie,q2o),e(L_,j2o),e(L_,nq),e(nq,D2o),e(L_,G2o),e(x,O2o),e(x,x_),e(x_,oie),e(oie,V2o),e(x_,X2o),e(x_,sq),e(sq,z2o),e(x_,W2o),e(x,Q2o),e(x,$_),e($_,rie),e(rie,H2o),e($_,U2o),e($_,lq),e(lq,J2o),e($_,Y2o),e(x,K2o),e(x,k_),e(k_,tie),e(tie,Z2o),e(k_,evo),e(k_,iq),e(iq,ovo),e(k_,rvo),e(x,tvo),e(x,S_),e(S_,aie),e(aie,avo),e(S_,nvo),e(S_,dq),e(dq,svo),e(S_,lvo),e(x,ivo),e(x,R_),e(R_,nie),e(nie,dvo),e(R_,cvo),e(R_,cq),e(cq,fvo),e(R_,mvo),e(x,gvo),e(x,P_),e(P_,sie),e(sie,hvo),e(P_,pvo),e(P_,fq),e(fq,_vo),e(P_,uvo),e(x,bvo),e(x,B_),e(B_,lie),e(lie,vvo),e(B_,Fvo),e(B_,mq),e(mq,Tvo),e(B_,Mvo),e(x,Evo),e(x,I_),e(I_,iie),e(iie,Cvo),e(I_,wvo),e(I_,gq),e(gq,Avo),e(I_,yvo),e(x,Lvo),e(x,N_),e(N_,die),e(die,xvo),e(N_,$vo),e(N_,hq),e(hq,kvo),e(N_,Svo),e(x,Rvo),e(x,q_),e(q_,cie),e(cie,Pvo),e(q_,Bvo),e(q_,pq),e(pq,Ivo),e(q_,Nvo),e(x,qvo),e(x,j_),e(j_,fie),e(fie,jvo),e(j_,Dvo),e(j_,_q),e(_q,Gvo),e(j_,Ovo),e(x,Vvo),e(x,D_),e(D_,mie),e(mie,Xvo),e(D_,zvo),e(D_,uq),e(uq,Wvo),e(D_,Qvo),e(x,Hvo),e(x,G_),e(G_,gie),e(gie,Uvo),e(G_,Jvo),e(G_,bq),e(bq,Yvo),e(G_,Kvo),e(x,Zvo),e(x,O_),e(O_,hie),e(hie,eFo),e(O_,oFo),e(O_,vq),e(vq,rFo),e(O_,tFo),e(x,aFo),e(x,V_),e(V_,pie),e(pie,nFo),e(V_,sFo),e(V_,Fq),e(Fq,lFo),e(V_,iFo),e(x,dFo),e(x,X_),e(X_,_ie),e(_ie,cFo),e(X_,fFo),e(X_,Tq),e(Tq,mFo),e(X_,gFo),e(x,hFo),e(x,z_),e(z_,uie),e(uie,pFo),e(z_,_Fo),e(z_,Mq),e(Mq,uFo),e(z_,bFo),e(x,vFo),e(x,W_),e(W_,bie),e(bie,FFo),e(W_,TFo),e(W_,Eq),e(Eq,MFo),e(W_,EFo),e(x,CFo),e(x,Q_),e(Q_,vie),e(vie,wFo),e(Q_,AFo),e(Q_,Cq),e(Cq,yFo),e(Q_,LFo),e(x,xFo),e(x,H_),e(H_,Fie),e(Fie,$Fo),e(H_,kFo),e(H_,wq),e(wq,SFo),e(H_,RFo),e(x,PFo),e(x,U_),e(U_,Tie),e(Tie,BFo),e(U_,IFo),e(U_,Aq),e(Aq,NFo),e(U_,qFo),e(x,jFo),e(x,J_),e(J_,Mie),e(Mie,DFo),e(J_,GFo),e(J_,yq),e(yq,OFo),e(J_,VFo),e(x,XFo),e(x,Y_),e(Y_,Eie),e(Eie,zFo),e(Y_,WFo),e(Y_,Lq),e(Lq,QFo),e(Y_,HFo),e(x,UFo),e(x,K_),e(K_,Cie),e(Cie,JFo),e(K_,YFo),e(K_,xq),e(xq,KFo),e(K_,ZFo),e(x,eTo),e(x,Z_),e(Z_,wie),e(wie,oTo),e(Z_,rTo),e(Z_,$q),e($q,tTo),e(Z_,aTo),e(x,nTo),e(x,eu),e(eu,Aie),e(Aie,sTo),e(eu,lTo),e(eu,kq),e(kq,iTo),e(eu,dTo),e(x,cTo),e(x,ou),e(ou,yie),e(yie,fTo),e(ou,mTo),e(ou,Sq),e(Sq,gTo),e(ou,hTo),e(x,pTo),e(x,ru),e(ru,Lie),e(Lie,_To),e(ru,uTo),e(ru,Rq),e(Rq,bTo),e(ru,vTo),e(x,FTo),e(x,tu),e(tu,xie),e(xie,TTo),e(tu,MTo),e(tu,Pq),e(Pq,ETo),e(tu,CTo),e(Je,wTo),e(Je,au),e(au,ATo),e(au,$ie),e($ie,yTo),e(au,LTo),e(au,kie),e(kie,xTo),e(Je,$To),M(nu,Je,null),b(f,Rqe,u),b(f,Li,u),e(Li,su),e(su,Sie),M(dy,Sie,null),e(Li,kTo),e(Li,Rie),e(Rie,STo),b(f,Pqe,u),b(f,xo,u),M(cy,xo,null),e(xo,RTo),e(xo,xi),e(xi,PTo),e(xi,Bq),e(Bq,BTo),e(xi,ITo),e(xi,Iq),e(Iq,NTo),e(xi,qTo),e(xo,jTo),e(xo,fy),e(fy,DTo),e(fy,Pie),e(Pie,GTo),e(fy,OTo),e(xo,VTo),e(xo,at),M(my,at,null),e(at,XTo),e(at,Bie),e(Bie,zTo),e(at,WTo),e(at,$i),e($i,QTo),e($i,Iie),e(Iie,HTo),e($i,UTo),e($i,Nq),e(Nq,JTo),e($i,YTo),e(at,KTo),M(lu,at,null),e(xo,ZTo),e(xo,Ye),M(gy,Ye,null),e(Ye,eMo),e(Ye,Nie),e(Nie,oMo),e(Ye,rMo),e(Ye,xa),e(xa,tMo),e(xa,qie),e(qie,aMo),e(xa,nMo),e(xa,jie),e(jie,sMo),e(xa,lMo),e(xa,Die),e(Die,iMo),e(xa,dMo),e(Ye,cMo),e(Ye,G),e(G,iu),e(iu,Gie),e(Gie,fMo),e(iu,mMo),e(iu,qq),e(qq,gMo),e(iu,hMo),e(G,pMo),e(G,du),e(du,Oie),e(Oie,_Mo),e(du,uMo),e(du,jq),e(jq,bMo),e(du,vMo),e(G,FMo),e(G,cu),e(cu,Vie),e(Vie,TMo),e(cu,MMo),e(cu,Dq),e(Dq,EMo),e(cu,CMo),e(G,wMo),e(G,fu),e(fu,Xie),e(Xie,AMo),e(fu,yMo),e(fu,Gq),e(Gq,LMo),e(fu,xMo),e(G,$Mo),e(G,mu),e(mu,zie),e(zie,kMo),e(mu,SMo),e(mu,Oq),e(Oq,RMo),e(mu,PMo),e(G,BMo),e(G,gu),e(gu,Wie),e(Wie,IMo),e(gu,NMo),e(gu,Vq),e(Vq,qMo),e(gu,jMo),e(G,DMo),e(G,hu),e(hu,Qie),e(Qie,GMo),e(hu,OMo),e(hu,Xq),e(Xq,VMo),e(hu,XMo),e(G,zMo),e(G,pu),e(pu,Hie),e(Hie,WMo),e(pu,QMo),e(pu,zq),e(zq,HMo),e(pu,UMo),e(G,JMo),e(G,_u),e(_u,Uie),e(Uie,YMo),e(_u,KMo),e(_u,Wq),e(Wq,ZMo),e(_u,eEo),e(G,oEo),e(G,uu),e(uu,Jie),e(Jie,rEo),e(uu,tEo),e(uu,Qq),e(Qq,aEo),e(uu,nEo),e(G,sEo),e(G,bu),e(bu,Yie),e(Yie,lEo),e(bu,iEo),e(bu,Hq),e(Hq,dEo),e(bu,cEo),e(G,fEo),e(G,vu),e(vu,Kie),e(Kie,mEo),e(vu,gEo),e(vu,Uq),e(Uq,hEo),e(vu,pEo),e(G,_Eo),e(G,Fu),e(Fu,Zie),e(Zie,uEo),e(Fu,bEo),e(Fu,Jq),e(Jq,vEo),e(Fu,FEo),e(G,TEo),e(G,Tu),e(Tu,ede),e(ede,MEo),e(Tu,EEo),e(Tu,Yq),e(Yq,CEo),e(Tu,wEo),e(G,AEo),e(G,Mu),e(Mu,ode),e(ode,yEo),e(Mu,LEo),e(Mu,Kq),e(Kq,xEo),e(Mu,$Eo),e(G,kEo),e(G,Eu),e(Eu,rde),e(rde,SEo),e(Eu,REo),e(Eu,Zq),e(Zq,PEo),e(Eu,BEo),e(G,IEo),e(G,Cu),e(Cu,tde),e(tde,NEo),e(Cu,qEo),e(Cu,ej),e(ej,jEo),e(Cu,DEo),e(G,GEo),e(G,wu),e(wu,ade),e(ade,OEo),e(wu,VEo),e(wu,oj),e(oj,XEo),e(wu,zEo),e(G,WEo),e(G,Au),e(Au,nde),e(nde,QEo),e(Au,HEo),e(Au,rj),e(rj,UEo),e(Au,JEo),e(G,YEo),e(G,yu),e(yu,sde),e(sde,KEo),e(yu,ZEo),e(yu,tj),e(tj,eCo),e(yu,oCo),e(G,rCo),e(G,Lu),e(Lu,lde),e(lde,tCo),e(Lu,aCo),e(Lu,aj),e(aj,nCo),e(Lu,sCo),e(G,lCo),e(G,xu),e(xu,ide),e(ide,iCo),e(xu,dCo),e(xu,nj),e(nj,cCo),e(xu,fCo),e(G,mCo),e(G,$u),e($u,dde),e(dde,gCo),e($u,hCo),e($u,sj),e(sj,pCo),e($u,_Co),e(G,uCo),e(G,ku),e(ku,cde),e(cde,bCo),e(ku,vCo),e(ku,lj),e(lj,FCo),e(ku,TCo),e(G,MCo),e(G,Su),e(Su,fde),e(fde,ECo),e(Su,CCo),e(Su,ij),e(ij,wCo),e(Su,ACo),e(G,yCo),e(G,Ru),e(Ru,mde),e(mde,LCo),e(Ru,xCo),e(Ru,dj),e(dj,$Co),e(Ru,kCo),e(G,SCo),e(G,Pu),e(Pu,gde),e(gde,RCo),e(Pu,PCo),e(Pu,cj),e(cj,BCo),e(Pu,ICo),e(G,NCo),e(G,Bu),e(Bu,hde),e(hde,qCo),e(Bu,jCo),e(Bu,fj),e(fj,DCo),e(Bu,GCo),e(G,OCo),e(G,Iu),e(Iu,pde),e(pde,VCo),e(Iu,XCo),e(Iu,mj),e(mj,zCo),e(Iu,WCo),e(G,QCo),e(G,Nu),e(Nu,_de),e(_de,HCo),e(Nu,UCo),e(Nu,gj),e(gj,JCo),e(Nu,YCo),e(G,KCo),e(G,qu),e(qu,ude),e(ude,ZCo),e(qu,e5o),e(qu,hj),e(hj,o5o),e(qu,r5o),e(G,t5o),e(G,ju),e(ju,bde),e(bde,a5o),e(ju,n5o),e(ju,pj),e(pj,s5o),e(ju,l5o),e(G,i5o),e(G,Du),e(Du,vde),e(vde,d5o),e(Du,c5o),e(Du,_j),e(_j,f5o),e(Du,m5o),e(G,g5o),e(G,Gu),e(Gu,Fde),e(Fde,h5o),e(Gu,p5o),e(Gu,uj),e(uj,_5o),e(Gu,u5o),e(G,b5o),e(G,Ou),e(Ou,Tde),e(Tde,v5o),e(Ou,F5o),e(Ou,bj),e(bj,T5o),e(Ou,M5o),e(G,E5o),e(G,Vu),e(Vu,Mde),e(Mde,C5o),e(Vu,w5o),e(Vu,vj),e(vj,A5o),e(Vu,y5o),e(G,L5o),e(G,Xu),e(Xu,Ede),e(Ede,x5o),e(Xu,$5o),e(Xu,Fj),e(Fj,k5o),e(Xu,S5o),e(G,R5o),e(G,zu),e(zu,Cde),e(Cde,P5o),e(zu,B5o),e(zu,Tj),e(Tj,I5o),e(zu,N5o),e(G,q5o),e(G,Wu),e(Wu,wde),e(wde,j5o),e(Wu,D5o),e(Wu,Mj),e(Mj,G5o),e(Wu,O5o),e(G,V5o),e(G,Qu),e(Qu,Ade),e(Ade,X5o),e(Qu,z5o),e(Qu,Ej),e(Ej,W5o),e(Qu,Q5o),e(G,H5o),e(G,Hu),e(Hu,yde),e(yde,U5o),e(Hu,J5o),e(Hu,Cj),e(Cj,Y5o),e(Hu,K5o),e(G,Z5o),e(G,Uu),e(Uu,Lde),e(Lde,e3o),e(Uu,o3o),e(Uu,wj),e(wj,r3o),e(Uu,t3o),e(G,a3o),e(G,Ju),e(Ju,xde),e(xde,n3o),e(Ju,s3o),e(Ju,Aj),e(Aj,l3o),e(Ju,i3o),e(Ye,d3o),e(Ye,Yu),e(Yu,c3o),e(Yu,$de),e($de,f3o),e(Yu,m3o),e(Yu,kde),e(kde,g3o),e(Ye,h3o),M(Ku,Ye,null),b(f,Bqe,u),b(f,ki,u),e(ki,Zu),e(Zu,Sde),M(hy,Sde,null),e(ki,p3o),e(ki,Rde),e(Rde,_3o),b(f,Iqe,u),b(f,$o,u),M(py,$o,null),e($o,u3o),e($o,Si),e(Si,b3o),e(Si,yj),e(yj,v3o),e(Si,F3o),e(Si,Lj),e(Lj,T3o),e(Si,M3o),e($o,E3o),e($o,_y),e(_y,C3o),e(_y,Pde),e(Pde,w3o),e(_y,A3o),e($o,y3o),e($o,nt),M(uy,nt,null),e(nt,L3o),e(nt,Bde),e(Bde,x3o),e(nt,$3o),e(nt,Ri),e(Ri,k3o),e(Ri,Ide),e(Ide,S3o),e(Ri,R3o),e(Ri,xj),e(xj,P3o),e(Ri,B3o),e(nt,I3o),M(e4,nt,null),e($o,N3o),e($o,Ke),M(by,Ke,null),e(Ke,q3o),e(Ke,Nde),e(Nde,j3o),e(Ke,D3o),e(Ke,$a),e($a,G3o),e($a,qde),e(qde,O3o),e($a,V3o),e($a,jde),e(jde,X3o),e($a,z3o),e($a,Dde),e(Dde,W3o),e($a,Q3o),e(Ke,H3o),e(Ke,z),e(z,o4),e(o4,Gde),e(Gde,U3o),e(o4,J3o),e(o4,$j),e($j,Y3o),e(o4,K3o),e(z,Z3o),e(z,r4),e(r4,Ode),e(Ode,ewo),e(r4,owo),e(r4,kj),e(kj,rwo),e(r4,two),e(z,awo),e(z,t4),e(t4,Vde),e(Vde,nwo),e(t4,swo),e(t4,Sj),e(Sj,lwo),e(t4,iwo),e(z,dwo),e(z,a4),e(a4,Xde),e(Xde,cwo),e(a4,fwo),e(a4,Rj),e(Rj,mwo),e(a4,gwo),e(z,hwo),e(z,n4),e(n4,zde),e(zde,pwo),e(n4,_wo),e(n4,Pj),e(Pj,uwo),e(n4,bwo),e(z,vwo),e(z,s4),e(s4,Wde),e(Wde,Fwo),e(s4,Two),e(s4,Bj),e(Bj,Mwo),e(s4,Ewo),e(z,Cwo),e(z,l4),e(l4,Qde),e(Qde,wwo),e(l4,Awo),e(l4,Ij),e(Ij,ywo),e(l4,Lwo),e(z,xwo),e(z,i4),e(i4,Hde),e(Hde,$wo),e(i4,kwo),e(i4,Nj),e(Nj,Swo),e(i4,Rwo),e(z,Pwo),e(z,d4),e(d4,Ude),e(Ude,Bwo),e(d4,Iwo),e(d4,qj),e(qj,Nwo),e(d4,qwo),e(z,jwo),e(z,c4),e(c4,Jde),e(Jde,Dwo),e(c4,Gwo),e(c4,jj),e(jj,Owo),e(c4,Vwo),e(z,Xwo),e(z,f4),e(f4,Yde),e(Yde,zwo),e(f4,Wwo),e(f4,Dj),e(Dj,Qwo),e(f4,Hwo),e(z,Uwo),e(z,m4),e(m4,Kde),e(Kde,Jwo),e(m4,Ywo),e(m4,Gj),e(Gj,Kwo),e(m4,Zwo),e(z,e0o),e(z,g4),e(g4,Zde),e(Zde,o0o),e(g4,r0o),e(g4,Oj),e(Oj,t0o),e(g4,a0o),e(z,n0o),e(z,h4),e(h4,ece),e(ece,s0o),e(h4,l0o),e(h4,Vj),e(Vj,i0o),e(h4,d0o),e(z,c0o),e(z,p4),e(p4,oce),e(oce,f0o),e(p4,m0o),e(p4,Xj),e(Xj,g0o),e(p4,h0o),e(z,p0o),e(z,_4),e(_4,rce),e(rce,_0o),e(_4,u0o),e(_4,zj),e(zj,b0o),e(_4,v0o),e(z,F0o),e(z,u4),e(u4,tce),e(tce,T0o),e(u4,M0o),e(u4,Wj),e(Wj,E0o),e(u4,C0o),e(z,w0o),e(z,b4),e(b4,ace),e(ace,A0o),e(b4,y0o),e(b4,Qj),e(Qj,L0o),e(b4,x0o),e(z,$0o),e(z,v4),e(v4,nce),e(nce,k0o),e(v4,S0o),e(v4,Hj),e(Hj,R0o),e(v4,P0o),e(z,B0o),e(z,F4),e(F4,sce),e(sce,I0o),e(F4,N0o),e(F4,Uj),e(Uj,q0o),e(F4,j0o),e(z,D0o),e(z,T4),e(T4,lce),e(lce,G0o),e(T4,O0o),e(T4,Jj),e(Jj,V0o),e(T4,X0o),e(z,z0o),e(z,M4),e(M4,ice),e(ice,W0o),e(M4,Q0o),e(M4,Yj),e(Yj,H0o),e(M4,U0o),e(z,J0o),e(z,E4),e(E4,dce),e(dce,Y0o),e(E4,K0o),e(E4,Kj),e(Kj,Z0o),e(E4,e6o),e(z,o6o),e(z,C4),e(C4,cce),e(cce,r6o),e(C4,t6o),e(C4,Zj),e(Zj,a6o),e(C4,n6o),e(z,s6o),e(z,w4),e(w4,fce),e(fce,l6o),e(w4,i6o),e(w4,eD),e(eD,d6o),e(w4,c6o),e(z,f6o),e(z,A4),e(A4,mce),e(mce,m6o),e(A4,g6o),e(A4,oD),e(oD,h6o),e(A4,p6o),e(z,_6o),e(z,y4),e(y4,gce),e(gce,u6o),e(y4,b6o),e(y4,rD),e(rD,v6o),e(y4,F6o),e(z,T6o),e(z,L4),e(L4,hce),e(hce,M6o),e(L4,E6o),e(L4,tD),e(tD,C6o),e(L4,w6o),e(z,A6o),e(z,x4),e(x4,pce),e(pce,y6o),e(x4,L6o),e(x4,aD),e(aD,x6o),e(x4,$6o),e(z,k6o),e(z,$4),e($4,_ce),e(_ce,S6o),e($4,R6o),e($4,nD),e(nD,P6o),e($4,B6o),e(z,I6o),e(z,k4),e(k4,uce),e(uce,N6o),e(k4,q6o),e(k4,sD),e(sD,j6o),e(k4,D6o),e(z,G6o),e(z,S4),e(S4,bce),e(bce,O6o),e(S4,V6o),e(S4,lD),e(lD,X6o),e(S4,z6o),e(z,W6o),e(z,R4),e(R4,vce),e(vce,Q6o),e(R4,H6o),e(R4,iD),e(iD,U6o),e(R4,J6o),e(z,Y6o),e(z,P4),e(P4,Fce),e(Fce,K6o),e(P4,Z6o),e(P4,dD),e(dD,eAo),e(P4,oAo),e(z,rAo),e(z,B4),e(B4,Tce),e(Tce,tAo),e(B4,aAo),e(B4,cD),e(cD,nAo),e(B4,sAo),e(z,lAo),e(z,I4),e(I4,Mce),e(Mce,iAo),e(I4,dAo),e(I4,fD),e(fD,cAo),e(I4,fAo),e(z,mAo),e(z,N4),e(N4,Ece),e(Ece,gAo),e(N4,hAo),e(N4,mD),e(mD,pAo),e(N4,_Ao),e(z,uAo),e(z,q4),e(q4,Cce),e(Cce,bAo),e(q4,vAo),e(q4,gD),e(gD,FAo),e(q4,TAo),e(Ke,MAo),e(Ke,j4),e(j4,EAo),e(j4,wce),e(wce,CAo),e(j4,wAo),e(j4,Ace),e(Ace,AAo),e(Ke,yAo),M(D4,Ke,null),b(f,Nqe,u),b(f,Pi,u),e(Pi,G4),e(G4,yce),M(vy,yce,null),e(Pi,LAo),e(Pi,Lce),e(Lce,xAo),b(f,qqe,u),b(f,ko,u),M(Fy,ko,null),e(ko,$Ao),e(ko,Bi),e(Bi,kAo),e(Bi,hD),e(hD,SAo),e(Bi,RAo),e(Bi,pD),e(pD,PAo),e(Bi,BAo),e(ko,IAo),e(ko,Ty),e(Ty,NAo),e(Ty,xce),e(xce,qAo),e(Ty,jAo),e(ko,DAo),e(ko,st),M(My,st,null),e(st,GAo),e(st,$ce),e($ce,OAo),e(st,VAo),e(st,Ii),e(Ii,XAo),e(Ii,kce),e(kce,zAo),e(Ii,WAo),e(Ii,_D),e(_D,QAo),e(Ii,HAo),e(st,UAo),M(O4,st,null),e(ko,JAo),e(ko,Ze),M(Ey,Ze,null),e(Ze,YAo),e(Ze,Sce),e(Sce,KAo),e(Ze,ZAo),e(Ze,ka),e(ka,eyo),e(ka,Rce),e(Rce,oyo),e(ka,ryo),e(ka,Pce),e(Pce,tyo),e(ka,ayo),e(ka,Bce),e(Bce,nyo),e(ka,syo),e(Ze,lyo),e(Ze,Q),e(Q,V4),e(V4,Ice),e(Ice,iyo),e(V4,dyo),e(V4,uD),e(uD,cyo),e(V4,fyo),e(Q,myo),e(Q,X4),e(X4,Nce),e(Nce,gyo),e(X4,hyo),e(X4,bD),e(bD,pyo),e(X4,_yo),e(Q,uyo),e(Q,z4),e(z4,qce),e(qce,byo),e(z4,vyo),e(z4,vD),e(vD,Fyo),e(z4,Tyo),e(Q,Myo),e(Q,W4),e(W4,jce),e(jce,Eyo),e(W4,Cyo),e(W4,FD),e(FD,wyo),e(W4,Ayo),e(Q,yyo),e(Q,Q4),e(Q4,Dce),e(Dce,Lyo),e(Q4,xyo),e(Q4,TD),e(TD,$yo),e(Q4,kyo),e(Q,Syo),e(Q,H4),e(H4,Gce),e(Gce,Ryo),e(H4,Pyo),e(H4,MD),e(MD,Byo),e(H4,Iyo),e(Q,Nyo),e(Q,U4),e(U4,Oce),e(Oce,qyo),e(U4,jyo),e(U4,ED),e(ED,Dyo),e(U4,Gyo),e(Q,Oyo),e(Q,J4),e(J4,Vce),e(Vce,Vyo),e(J4,Xyo),e(J4,CD),e(CD,zyo),e(J4,Wyo),e(Q,Qyo),e(Q,Y4),e(Y4,Xce),e(Xce,Hyo),e(Y4,Uyo),e(Y4,wD),e(wD,Jyo),e(Y4,Yyo),e(Q,Kyo),e(Q,K4),e(K4,zce),e(zce,Zyo),e(K4,eLo),e(K4,AD),e(AD,oLo),e(K4,rLo),e(Q,tLo),e(Q,Z4),e(Z4,Wce),e(Wce,aLo),e(Z4,nLo),e(Z4,yD),e(yD,sLo),e(Z4,lLo),e(Q,iLo),e(Q,e1),e(e1,Qce),e(Qce,dLo),e(e1,cLo),e(e1,LD),e(LD,fLo),e(e1,mLo),e(Q,gLo),e(Q,o1),e(o1,Hce),e(Hce,hLo),e(o1,pLo),e(o1,xD),e(xD,_Lo),e(o1,uLo),e(Q,bLo),e(Q,r1),e(r1,Uce),e(Uce,vLo),e(r1,FLo),e(r1,$D),e($D,TLo),e(r1,MLo),e(Q,ELo),e(Q,t1),e(t1,Jce),e(Jce,CLo),e(t1,wLo),e(t1,kD),e(kD,ALo),e(t1,yLo),e(Q,LLo),e(Q,a1),e(a1,Yce),e(Yce,xLo),e(a1,$Lo),e(a1,SD),e(SD,kLo),e(a1,SLo),e(Q,RLo),e(Q,n1),e(n1,Kce),e(Kce,PLo),e(n1,BLo),e(n1,RD),e(RD,ILo),e(n1,NLo),e(Q,qLo),e(Q,s1),e(s1,Zce),e(Zce,jLo),e(s1,DLo),e(s1,PD),e(PD,GLo),e(s1,OLo),e(Q,VLo),e(Q,l1),e(l1,efe),e(efe,XLo),e(l1,zLo),e(l1,BD),e(BD,WLo),e(l1,QLo),e(Q,HLo),e(Q,i1),e(i1,ofe),e(ofe,ULo),e(i1,JLo),e(i1,ID),e(ID,YLo),e(i1,KLo),e(Q,ZLo),e(Q,d1),e(d1,rfe),e(rfe,e8o),e(d1,o8o),e(d1,ND),e(ND,r8o),e(d1,t8o),e(Q,a8o),e(Q,c1),e(c1,tfe),e(tfe,n8o),e(c1,s8o),e(c1,qD),e(qD,l8o),e(c1,i8o),e(Q,d8o),e(Q,f1),e(f1,afe),e(afe,c8o),e(f1,f8o),e(f1,jD),e(jD,m8o),e(f1,g8o),e(Q,h8o),e(Q,m1),e(m1,nfe),e(nfe,p8o),e(m1,_8o),e(m1,DD),e(DD,u8o),e(m1,b8o),e(Q,v8o),e(Q,g1),e(g1,sfe),e(sfe,F8o),e(g1,T8o),e(g1,GD),e(GD,M8o),e(g1,E8o),e(Q,C8o),e(Q,h1),e(h1,lfe),e(lfe,w8o),e(h1,A8o),e(h1,OD),e(OD,y8o),e(h1,L8o),e(Q,x8o),e(Q,p1),e(p1,ife),e(ife,$8o),e(p1,k8o),e(p1,VD),e(VD,S8o),e(p1,R8o),e(Q,P8o),e(Q,_1),e(_1,dfe),e(dfe,B8o),e(_1,I8o),e(_1,XD),e(XD,N8o),e(_1,q8o),e(Q,j8o),e(Q,u1),e(u1,cfe),e(cfe,D8o),e(u1,G8o),e(u1,zD),e(zD,O8o),e(u1,V8o),e(Q,X8o),e(Q,b1),e(b1,ffe),e(ffe,z8o),e(b1,W8o),e(b1,WD),e(WD,Q8o),e(b1,H8o),e(Q,U8o),e(Q,v1),e(v1,mfe),e(mfe,J8o),e(v1,Y8o),e(v1,gfe),e(gfe,K8o),e(v1,Z8o),e(Q,e9o),e(Q,F1),e(F1,hfe),e(hfe,o9o),e(F1,r9o),e(F1,QD),e(QD,t9o),e(F1,a9o),e(Q,n9o),e(Q,T1),e(T1,pfe),e(pfe,s9o),e(T1,l9o),e(T1,HD),e(HD,i9o),e(T1,d9o),e(Q,c9o),e(Q,M1),e(M1,_fe),e(_fe,f9o),e(M1,m9o),e(M1,UD),e(UD,g9o),e(M1,h9o),e(Q,p9o),e(Q,E1),e(E1,ufe),e(ufe,_9o),e(E1,u9o),e(E1,JD),e(JD,b9o),e(E1,v9o),e(Ze,F9o),e(Ze,C1),e(C1,T9o),e(C1,bfe),e(bfe,M9o),e(C1,E9o),e(C1,vfe),e(vfe,C9o),e(Ze,w9o),M(w1,Ze,null),b(f,jqe,u),b(f,Ni,u),e(Ni,A1),e(A1,Ffe),M(Cy,Ffe,null),e(Ni,A9o),e(Ni,Tfe),e(Tfe,y9o),b(f,Dqe,u),b(f,So,u),M(wy,So,null),e(So,L9o),e(So,qi),e(qi,x9o),e(qi,YD),e(YD,$9o),e(qi,k9o),e(qi,KD),e(KD,S9o),e(qi,R9o),e(So,P9o),e(So,Ay),e(Ay,B9o),e(Ay,Mfe),e(Mfe,I9o),e(Ay,N9o),e(So,q9o),e(So,lt),M(yy,lt,null),e(lt,j9o),e(lt,Efe),e(Efe,D9o),e(lt,G9o),e(lt,ji),e(ji,O9o),e(ji,Cfe),e(Cfe,V9o),e(ji,X9o),e(ji,ZD),e(ZD,z9o),e(ji,W9o),e(lt,Q9o),M(y1,lt,null),e(So,H9o),e(So,eo),M(Ly,eo,null),e(eo,U9o),e(eo,wfe),e(wfe,J9o),e(eo,Y9o),e(eo,Sa),e(Sa,K9o),e(Sa,Afe),e(Afe,Z9o),e(Sa,exo),e(Sa,yfe),e(yfe,oxo),e(Sa,rxo),e(Sa,Lfe),e(Lfe,txo),e(Sa,axo),e(eo,nxo),e(eo,_e),e(_e,L1),e(L1,xfe),e(xfe,sxo),e(L1,lxo),e(L1,eG),e(eG,ixo),e(L1,dxo),e(_e,cxo),e(_e,x1),e(x1,$fe),e($fe,fxo),e(x1,mxo),e(x1,oG),e(oG,gxo),e(x1,hxo),e(_e,pxo),e(_e,$1),e($1,kfe),e(kfe,_xo),e($1,uxo),e($1,rG),e(rG,bxo),e($1,vxo),e(_e,Fxo),e(_e,k1),e(k1,Sfe),e(Sfe,Txo),e(k1,Mxo),e(k1,tG),e(tG,Exo),e(k1,Cxo),e(_e,wxo),e(_e,S1),e(S1,Rfe),e(Rfe,Axo),e(S1,yxo),e(S1,aG),e(aG,Lxo),e(S1,xxo),e(_e,$xo),e(_e,R1),e(R1,Pfe),e(Pfe,kxo),e(R1,Sxo),e(R1,nG),e(nG,Rxo),e(R1,Pxo),e(_e,Bxo),e(_e,P1),e(P1,Bfe),e(Bfe,Ixo),e(P1,Nxo),e(P1,sG),e(sG,qxo),e(P1,jxo),e(_e,Dxo),e(_e,B1),e(B1,Ife),e(Ife,Gxo),e(B1,Oxo),e(B1,lG),e(lG,Vxo),e(B1,Xxo),e(_e,zxo),e(_e,I1),e(I1,Nfe),e(Nfe,Wxo),e(I1,Qxo),e(I1,iG),e(iG,Hxo),e(I1,Uxo),e(_e,Jxo),e(_e,N1),e(N1,qfe),e(qfe,Yxo),e(N1,Kxo),e(N1,dG),e(dG,Zxo),e(N1,e$o),e(_e,o$o),e(_e,q1),e(q1,jfe),e(jfe,r$o),e(q1,t$o),e(q1,cG),e(cG,a$o),e(q1,n$o),e(_e,s$o),e(_e,j1),e(j1,Dfe),e(Dfe,l$o),e(j1,i$o),e(j1,fG),e(fG,d$o),e(j1,c$o),e(_e,f$o),e(_e,D1),e(D1,Gfe),e(Gfe,m$o),e(D1,g$o),e(D1,mG),e(mG,h$o),e(D1,p$o),e(_e,_$o),e(_e,G1),e(G1,Ofe),e(Ofe,u$o),e(G1,b$o),e(G1,gG),e(gG,v$o),e(G1,F$o),e(_e,T$o),e(_e,O1),e(O1,Vfe),e(Vfe,M$o),e(O1,E$o),e(O1,hG),e(hG,C$o),e(O1,w$o),e(_e,A$o),e(_e,V1),e(V1,Xfe),e(Xfe,y$o),e(V1,L$o),e(V1,pG),e(pG,x$o),e(V1,$$o),e(eo,k$o),e(eo,X1),e(X1,S$o),e(X1,zfe),e(zfe,R$o),e(X1,P$o),e(X1,Wfe),e(Wfe,B$o),e(eo,I$o),M(z1,eo,null),b(f,Gqe,u),b(f,Di,u),e(Di,W1),e(W1,Qfe),M(xy,Qfe,null),e(Di,N$o),e(Di,Hfe),e(Hfe,q$o),b(f,Oqe,u),b(f,Ro,u),M($y,Ro,null),e(Ro,j$o),e(Ro,Gi),e(Gi,D$o),e(Gi,_G),e(_G,G$o),e(Gi,O$o),e(Gi,uG),e(uG,V$o),e(Gi,X$o),e(Ro,z$o),e(Ro,ky),e(ky,W$o),e(ky,Ufe),e(Ufe,Q$o),e(ky,H$o),e(Ro,U$o),e(Ro,it),M(Sy,it,null),e(it,J$o),e(it,Jfe),e(Jfe,Y$o),e(it,K$o),e(it,Oi),e(Oi,Z$o),e(Oi,Yfe),e(Yfe,eko),e(Oi,oko),e(Oi,bG),e(bG,rko),e(Oi,tko),e(it,ako),M(Q1,it,null),e(Ro,nko),e(Ro,oo),M(Ry,oo,null),e(oo,sko),e(oo,Kfe),e(Kfe,lko),e(oo,iko),e(oo,Ra),e(Ra,dko),e(Ra,Zfe),e(Zfe,cko),e(Ra,fko),e(Ra,eme),e(eme,mko),e(Ra,gko),e(Ra,ome),e(ome,hko),e(Ra,pko),e(oo,_ko),e(oo,N),e(N,H1),e(H1,rme),e(rme,uko),e(H1,bko),e(H1,vG),e(vG,vko),e(H1,Fko),e(N,Tko),e(N,U1),e(U1,tme),e(tme,Mko),e(U1,Eko),e(U1,FG),e(FG,Cko),e(U1,wko),e(N,Ako),e(N,J1),e(J1,ame),e(ame,yko),e(J1,Lko),e(J1,TG),e(TG,xko),e(J1,$ko),e(N,kko),e(N,Y1),e(Y1,nme),e(nme,Sko),e(Y1,Rko),e(Y1,MG),e(MG,Pko),e(Y1,Bko),e(N,Iko),e(N,K1),e(K1,sme),e(sme,Nko),e(K1,qko),e(K1,EG),e(EG,jko),e(K1,Dko),e(N,Gko),e(N,Z1),e(Z1,lme),e(lme,Oko),e(Z1,Vko),e(Z1,CG),e(CG,Xko),e(Z1,zko),e(N,Wko),e(N,e7),e(e7,ime),e(ime,Qko),e(e7,Hko),e(e7,wG),e(wG,Uko),e(e7,Jko),e(N,Yko),e(N,o7),e(o7,dme),e(dme,Kko),e(o7,Zko),e(o7,AG),e(AG,eSo),e(o7,oSo),e(N,rSo),e(N,r7),e(r7,cme),e(cme,tSo),e(r7,aSo),e(r7,yG),e(yG,nSo),e(r7,sSo),e(N,lSo),e(N,t7),e(t7,fme),e(fme,iSo),e(t7,dSo),e(t7,LG),e(LG,cSo),e(t7,fSo),e(N,mSo),e(N,a7),e(a7,mme),e(mme,gSo),e(a7,hSo),e(a7,xG),e(xG,pSo),e(a7,_So),e(N,uSo),e(N,n7),e(n7,gme),e(gme,bSo),e(n7,vSo),e(n7,$G),e($G,FSo),e(n7,TSo),e(N,MSo),e(N,s7),e(s7,hme),e(hme,ESo),e(s7,CSo),e(s7,kG),e(kG,wSo),e(s7,ASo),e(N,ySo),e(N,l7),e(l7,pme),e(pme,LSo),e(l7,xSo),e(l7,SG),e(SG,$So),e(l7,kSo),e(N,SSo),e(N,i7),e(i7,_me),e(_me,RSo),e(i7,PSo),e(i7,RG),e(RG,BSo),e(i7,ISo),e(N,NSo),e(N,d7),e(d7,ume),e(ume,qSo),e(d7,jSo),e(d7,PG),e(PG,DSo),e(d7,GSo),e(N,OSo),e(N,c7),e(c7,bme),e(bme,VSo),e(c7,XSo),e(c7,BG),e(BG,zSo),e(c7,WSo),e(N,QSo),e(N,f7),e(f7,vme),e(vme,HSo),e(f7,USo),e(f7,IG),e(IG,JSo),e(f7,YSo),e(N,KSo),e(N,m7),e(m7,Fme),e(Fme,ZSo),e(m7,eRo),e(m7,NG),e(NG,oRo),e(m7,rRo),e(N,tRo),e(N,g7),e(g7,Tme),e(Tme,aRo),e(g7,nRo),e(g7,qG),e(qG,sRo),e(g7,lRo),e(N,iRo),e(N,h7),e(h7,Mme),e(Mme,dRo),e(h7,cRo),e(h7,jG),e(jG,fRo),e(h7,mRo),e(N,gRo),e(N,p7),e(p7,Eme),e(Eme,hRo),e(p7,pRo),e(p7,DG),e(DG,_Ro),e(p7,uRo),e(N,bRo),e(N,_7),e(_7,Cme),e(Cme,vRo),e(_7,FRo),e(_7,GG),e(GG,TRo),e(_7,MRo),e(N,ERo),e(N,u7),e(u7,wme),e(wme,CRo),e(u7,wRo),e(u7,OG),e(OG,ARo),e(u7,yRo),e(N,LRo),e(N,b7),e(b7,Ame),e(Ame,xRo),e(b7,$Ro),e(b7,VG),e(VG,kRo),e(b7,SRo),e(N,RRo),e(N,v7),e(v7,yme),e(yme,PRo),e(v7,BRo),e(v7,XG),e(XG,IRo),e(v7,NRo),e(N,qRo),e(N,F7),e(F7,Lme),e(Lme,jRo),e(F7,DRo),e(F7,zG),e(zG,GRo),e(F7,ORo),e(N,VRo),e(N,T7),e(T7,xme),e(xme,XRo),e(T7,zRo),e(T7,WG),e(WG,WRo),e(T7,QRo),e(N,HRo),e(N,M7),e(M7,$me),e($me,URo),e(M7,JRo),e(M7,QG),e(QG,YRo),e(M7,KRo),e(N,ZRo),e(N,E7),e(E7,kme),e(kme,ePo),e(E7,oPo),e(E7,HG),e(HG,rPo),e(E7,tPo),e(N,aPo),e(N,C7),e(C7,Sme),e(Sme,nPo),e(C7,sPo),e(C7,UG),e(UG,lPo),e(C7,iPo),e(N,dPo),e(N,w7),e(w7,Rme),e(Rme,cPo),e(w7,fPo),e(w7,JG),e(JG,mPo),e(w7,gPo),e(N,hPo),e(N,A7),e(A7,Pme),e(Pme,pPo),e(A7,_Po),e(A7,YG),e(YG,uPo),e(A7,bPo),e(N,vPo),e(N,y7),e(y7,Bme),e(Bme,FPo),e(y7,TPo),e(y7,KG),e(KG,MPo),e(y7,EPo),e(N,CPo),e(N,L7),e(L7,Ime),e(Ime,wPo),e(L7,APo),e(L7,ZG),e(ZG,yPo),e(L7,LPo),e(N,xPo),e(N,x7),e(x7,Nme),e(Nme,$Po),e(x7,kPo),e(x7,eO),e(eO,SPo),e(x7,RPo),e(N,PPo),e(N,$7),e($7,qme),e(qme,BPo),e($7,IPo),e($7,oO),e(oO,NPo),e($7,qPo),e(N,jPo),e(N,k7),e(k7,jme),e(jme,DPo),e(k7,GPo),e(k7,rO),e(rO,OPo),e(k7,VPo),e(N,XPo),e(N,S7),e(S7,Dme),e(Dme,zPo),e(S7,WPo),e(S7,tO),e(tO,QPo),e(S7,HPo),e(N,UPo),e(N,R7),e(R7,Gme),e(Gme,JPo),e(R7,YPo),e(R7,aO),e(aO,KPo),e(R7,ZPo),e(N,eBo),e(N,P7),e(P7,Ome),e(Ome,oBo),e(P7,rBo),e(P7,nO),e(nO,tBo),e(P7,aBo),e(N,nBo),e(N,B7),e(B7,Vme),e(Vme,sBo),e(B7,lBo),e(B7,sO),e(sO,iBo),e(B7,dBo),e(N,cBo),e(N,I7),e(I7,Xme),e(Xme,fBo),e(I7,mBo),e(I7,lO),e(lO,gBo),e(I7,hBo),e(N,pBo),e(N,N7),e(N7,zme),e(zme,_Bo),e(N7,uBo),e(N7,iO),e(iO,bBo),e(N7,vBo),e(N,FBo),e(N,q7),e(q7,Wme),e(Wme,TBo),e(q7,MBo),e(q7,dO),e(dO,EBo),e(q7,CBo),e(N,wBo),e(N,j7),e(j7,Qme),e(Qme,ABo),e(j7,yBo),e(j7,cO),e(cO,LBo),e(j7,xBo),e(N,$Bo),e(N,D7),e(D7,Hme),e(Hme,kBo),e(D7,SBo),e(D7,fO),e(fO,RBo),e(D7,PBo),e(oo,BBo),e(oo,G7),e(G7,IBo),e(G7,Ume),e(Ume,NBo),e(G7,qBo),e(G7,Jme),e(Jme,jBo),e(oo,DBo),M(O7,oo,null),b(f,Vqe,u),b(f,Vi,u),e(Vi,V7),e(V7,Yme),M(Py,Yme,null),e(Vi,GBo),e(Vi,Kme),e(Kme,OBo),b(f,Xqe,u),b(f,Po,u),M(By,Po,null),e(Po,VBo),e(Po,Xi),e(Xi,XBo),e(Xi,mO),e(mO,zBo),e(Xi,WBo),e(Xi,gO),e(gO,QBo),e(Xi,HBo),e(Po,UBo),e(Po,Iy),e(Iy,JBo),e(Iy,Zme),e(Zme,YBo),e(Iy,KBo),e(Po,ZBo),e(Po,dt),M(Ny,dt,null),e(dt,eIo),e(dt,ege),e(ege,oIo),e(dt,rIo),e(dt,zi),e(zi,tIo),e(zi,oge),e(oge,aIo),e(zi,nIo),e(zi,hO),e(hO,sIo),e(zi,lIo),e(dt,iIo),M(X7,dt,null),e(Po,dIo),e(Po,ro),M(qy,ro,null),e(ro,cIo),e(ro,rge),e(rge,fIo),e(ro,mIo),e(ro,Pa),e(Pa,gIo),e(Pa,tge),e(tge,hIo),e(Pa,pIo),e(Pa,age),e(age,_Io),e(Pa,uIo),e(Pa,nge),e(nge,bIo),e(Pa,vIo),e(ro,FIo),e(ro,K),e(K,z7),e(z7,sge),e(sge,TIo),e(z7,MIo),e(z7,pO),e(pO,EIo),e(z7,CIo),e(K,wIo),e(K,W7),e(W7,lge),e(lge,AIo),e(W7,yIo),e(W7,_O),e(_O,LIo),e(W7,xIo),e(K,$Io),e(K,Q7),e(Q7,ige),e(ige,kIo),e(Q7,SIo),e(Q7,uO),e(uO,RIo),e(Q7,PIo),e(K,BIo),e(K,H7),e(H7,dge),e(dge,IIo),e(H7,NIo),e(H7,bO),e(bO,qIo),e(H7,jIo),e(K,DIo),e(K,U7),e(U7,cge),e(cge,GIo),e(U7,OIo),e(U7,vO),e(vO,VIo),e(U7,XIo),e(K,zIo),e(K,J7),e(J7,fge),e(fge,WIo),e(J7,QIo),e(J7,FO),e(FO,HIo),e(J7,UIo),e(K,JIo),e(K,Y7),e(Y7,mge),e(mge,YIo),e(Y7,KIo),e(Y7,TO),e(TO,ZIo),e(Y7,eNo),e(K,oNo),e(K,K7),e(K7,gge),e(gge,rNo),e(K7,tNo),e(K7,MO),e(MO,aNo),e(K7,nNo),e(K,sNo),e(K,Z7),e(Z7,hge),e(hge,lNo),e(Z7,iNo),e(Z7,EO),e(EO,dNo),e(Z7,cNo),e(K,fNo),e(K,eb),e(eb,pge),e(pge,mNo),e(eb,gNo),e(eb,CO),e(CO,hNo),e(eb,pNo),e(K,_No),e(K,ob),e(ob,_ge),e(_ge,uNo),e(ob,bNo),e(ob,wO),e(wO,vNo),e(ob,FNo),e(K,TNo),e(K,rb),e(rb,uge),e(uge,MNo),e(rb,ENo),e(rb,AO),e(AO,CNo),e(rb,wNo),e(K,ANo),e(K,tb),e(tb,bge),e(bge,yNo),e(tb,LNo),e(tb,yO),e(yO,xNo),e(tb,$No),e(K,kNo),e(K,ab),e(ab,vge),e(vge,SNo),e(ab,RNo),e(ab,LO),e(LO,PNo),e(ab,BNo),e(K,INo),e(K,nb),e(nb,Fge),e(Fge,NNo),e(nb,qNo),e(nb,xO),e(xO,jNo),e(nb,DNo),e(K,GNo),e(K,sb),e(sb,Tge),e(Tge,ONo),e(sb,VNo),e(sb,$O),e($O,XNo),e(sb,zNo),e(K,WNo),e(K,lb),e(lb,Mge),e(Mge,QNo),e(lb,HNo),e(lb,kO),e(kO,UNo),e(lb,JNo),e(K,YNo),e(K,ib),e(ib,Ege),e(Ege,KNo),e(ib,ZNo),e(ib,SO),e(SO,eqo),e(ib,oqo),e(K,rqo),e(K,db),e(db,Cge),e(Cge,tqo),e(db,aqo),e(db,RO),e(RO,nqo),e(db,sqo),e(K,lqo),e(K,cb),e(cb,wge),e(wge,iqo),e(cb,dqo),e(cb,PO),e(PO,cqo),e(cb,fqo),e(K,mqo),e(K,fb),e(fb,Age),e(Age,gqo),e(fb,hqo),e(fb,BO),e(BO,pqo),e(fb,_qo),e(K,uqo),e(K,mb),e(mb,yge),e(yge,bqo),e(mb,vqo),e(mb,IO),e(IO,Fqo),e(mb,Tqo),e(K,Mqo),e(K,gb),e(gb,Lge),e(Lge,Eqo),e(gb,Cqo),e(gb,NO),e(NO,wqo),e(gb,Aqo),e(K,yqo),e(K,hb),e(hb,xge),e(xge,Lqo),e(hb,xqo),e(hb,qO),e(qO,$qo),e(hb,kqo),e(K,Sqo),e(K,pb),e(pb,$ge),e($ge,Rqo),e(pb,Pqo),e(pb,jO),e(jO,Bqo),e(pb,Iqo),e(K,Nqo),e(K,_b),e(_b,kge),e(kge,qqo),e(_b,jqo),e(_b,DO),e(DO,Dqo),e(_b,Gqo),e(K,Oqo),e(K,ub),e(ub,Sge),e(Sge,Vqo),e(ub,Xqo),e(ub,GO),e(GO,zqo),e(ub,Wqo),e(K,Qqo),e(K,bb),e(bb,Rge),e(Rge,Hqo),e(bb,Uqo),e(bb,OO),e(OO,Jqo),e(bb,Yqo),e(K,Kqo),e(K,vb),e(vb,Pge),e(Pge,Zqo),e(vb,ejo),e(vb,VO),e(VO,ojo),e(vb,rjo),e(ro,tjo),e(ro,Fb),e(Fb,ajo),e(Fb,Bge),e(Bge,njo),e(Fb,sjo),e(Fb,Ige),e(Ige,ljo),e(ro,ijo),M(Tb,ro,null),b(f,zqe,u),b(f,Wi,u),e(Wi,Mb),e(Mb,Nge),M(jy,Nge,null),e(Wi,djo),e(Wi,qge),e(qge,cjo),b(f,Wqe,u),b(f,Bo,u),M(Dy,Bo,null),e(Bo,fjo),e(Bo,Qi),e(Qi,mjo),e(Qi,XO),e(XO,gjo),e(Qi,hjo),e(Qi,zO),e(zO,pjo),e(Qi,_jo),e(Bo,ujo),e(Bo,Gy),e(Gy,bjo),e(Gy,jge),e(jge,vjo),e(Gy,Fjo),e(Bo,Tjo),e(Bo,ct),M(Oy,ct,null),e(ct,Mjo),e(ct,Dge),e(Dge,Ejo),e(ct,Cjo),e(ct,Hi),e(Hi,wjo),e(Hi,Gge),e(Gge,Ajo),e(Hi,yjo),e(Hi,WO),e(WO,Ljo),e(Hi,xjo),e(ct,$jo),M(Eb,ct,null),e(Bo,kjo),e(Bo,to),M(Vy,to,null),e(to,Sjo),e(to,Oge),e(Oge,Rjo),e(to,Pjo),e(to,Ba),e(Ba,Bjo),e(Ba,Vge),e(Vge,Ijo),e(Ba,Njo),e(Ba,Xge),e(Xge,qjo),e(Ba,jjo),e(Ba,zge),e(zge,Djo),e(Ba,Gjo),e(to,Ojo),e(to,Yr),e(Yr,Cb),e(Cb,Wge),e(Wge,Vjo),e(Cb,Xjo),e(Cb,QO),e(QO,zjo),e(Cb,Wjo),e(Yr,Qjo),e(Yr,wb),e(wb,Qge),e(Qge,Hjo),e(wb,Ujo),e(wb,HO),e(HO,Jjo),e(wb,Yjo),e(Yr,Kjo),e(Yr,Ab),e(Ab,Hge),e(Hge,Zjo),e(Ab,eDo),e(Ab,UO),e(UO,oDo),e(Ab,rDo),e(Yr,tDo),e(Yr,yb),e(yb,Uge),e(Uge,aDo),e(yb,nDo),e(yb,JO),e(JO,sDo),e(yb,lDo),e(Yr,iDo),e(Yr,Lb),e(Lb,Jge),e(Jge,dDo),e(Lb,cDo),e(Lb,YO),e(YO,fDo),e(Lb,mDo),e(to,gDo),e(to,xb),e(xb,hDo),e(xb,Yge),e(Yge,pDo),e(xb,_Do),e(xb,Kge),e(Kge,uDo),e(to,bDo),M($b,to,null),b(f,Qqe,u),b(f,Ui,u),e(Ui,kb),e(kb,Zge),M(Xy,Zge,null),e(Ui,vDo),e(Ui,ehe),e(ehe,FDo),b(f,Hqe,u),b(f,Io,u),M(zy,Io,null),e(Io,TDo),e(Io,Ji),e(Ji,MDo),e(Ji,KO),e(KO,EDo),e(Ji,CDo),e(Ji,ZO),e(ZO,wDo),e(Ji,ADo),e(Io,yDo),e(Io,Wy),e(Wy,LDo),e(Wy,ohe),e(ohe,xDo),e(Wy,$Do),e(Io,kDo),e(Io,ft),M(Qy,ft,null),e(ft,SDo),e(ft,rhe),e(rhe,RDo),e(ft,PDo),e(ft,Yi),e(Yi,BDo),e(Yi,the),e(the,IDo),e(Yi,NDo),e(Yi,eV),e(eV,qDo),e(Yi,jDo),e(ft,DDo),M(Sb,ft,null),e(Io,GDo),e(Io,ao),M(Hy,ao,null),e(ao,ODo),e(ao,ahe),e(ahe,VDo),e(ao,XDo),e(ao,Ia),e(Ia,zDo),e(Ia,nhe),e(nhe,WDo),e(Ia,QDo),e(Ia,she),e(she,HDo),e(Ia,UDo),e(Ia,lhe),e(lhe,JDo),e(Ia,YDo),e(ao,KDo),e(ao,H),e(H,Rb),e(Rb,ihe),e(ihe,ZDo),e(Rb,eGo),e(Rb,oV),e(oV,oGo),e(Rb,rGo),e(H,tGo),e(H,Pb),e(Pb,dhe),e(dhe,aGo),e(Pb,nGo),e(Pb,rV),e(rV,sGo),e(Pb,lGo),e(H,iGo),e(H,Bb),e(Bb,che),e(che,dGo),e(Bb,cGo),e(Bb,tV),e(tV,fGo),e(Bb,mGo),e(H,gGo),e(H,Ib),e(Ib,fhe),e(fhe,hGo),e(Ib,pGo),e(Ib,aV),e(aV,_Go),e(Ib,uGo),e(H,bGo),e(H,Nb),e(Nb,mhe),e(mhe,vGo),e(Nb,FGo),e(Nb,nV),e(nV,TGo),e(Nb,MGo),e(H,EGo),e(H,qb),e(qb,ghe),e(ghe,CGo),e(qb,wGo),e(qb,sV),e(sV,AGo),e(qb,yGo),e(H,LGo),e(H,jb),e(jb,hhe),e(hhe,xGo),e(jb,$Go),e(jb,lV),e(lV,kGo),e(jb,SGo),e(H,RGo),e(H,Db),e(Db,phe),e(phe,PGo),e(Db,BGo),e(Db,iV),e(iV,IGo),e(Db,NGo),e(H,qGo),e(H,Gb),e(Gb,_he),e(_he,jGo),e(Gb,DGo),e(Gb,dV),e(dV,GGo),e(Gb,OGo),e(H,VGo),e(H,Ob),e(Ob,uhe),e(uhe,XGo),e(Ob,zGo),e(Ob,cV),e(cV,WGo),e(Ob,QGo),e(H,HGo),e(H,Vb),e(Vb,bhe),e(bhe,UGo),e(Vb,JGo),e(Vb,fV),e(fV,YGo),e(Vb,KGo),e(H,ZGo),e(H,Xb),e(Xb,vhe),e(vhe,eOo),e(Xb,oOo),e(Xb,mV),e(mV,rOo),e(Xb,tOo),e(H,aOo),e(H,zb),e(zb,Fhe),e(Fhe,nOo),e(zb,sOo),e(zb,gV),e(gV,lOo),e(zb,iOo),e(H,dOo),e(H,Wb),e(Wb,The),e(The,cOo),e(Wb,fOo),e(Wb,hV),e(hV,mOo),e(Wb,gOo),e(H,hOo),e(H,Qb),e(Qb,Mhe),e(Mhe,pOo),e(Qb,_Oo),e(Qb,pV),e(pV,uOo),e(Qb,bOo),e(H,vOo),e(H,Hb),e(Hb,Ehe),e(Ehe,FOo),e(Hb,TOo),e(Hb,_V),e(_V,MOo),e(Hb,EOo),e(H,COo),e(H,Ub),e(Ub,Che),e(Che,wOo),e(Ub,AOo),e(Ub,uV),e(uV,yOo),e(Ub,LOo),e(H,xOo),e(H,Jb),e(Jb,whe),e(whe,$Oo),e(Jb,kOo),e(Jb,bV),e(bV,SOo),e(Jb,ROo),e(H,POo),e(H,Yb),e(Yb,Ahe),e(Ahe,BOo),e(Yb,IOo),e(Yb,vV),e(vV,NOo),e(Yb,qOo),e(H,jOo),e(H,Kb),e(Kb,yhe),e(yhe,DOo),e(Kb,GOo),e(Kb,FV),e(FV,OOo),e(Kb,VOo),e(H,XOo),e(H,Zb),e(Zb,Lhe),e(Lhe,zOo),e(Zb,WOo),e(Zb,TV),e(TV,QOo),e(Zb,HOo),e(H,UOo),e(H,e2),e(e2,xhe),e(xhe,JOo),e(e2,YOo),e(e2,MV),e(MV,KOo),e(e2,ZOo),e(H,eVo),e(H,o2),e(o2,$he),e($he,oVo),e(o2,rVo),e(o2,EV),e(EV,tVo),e(o2,aVo),e(H,nVo),e(H,r2),e(r2,khe),e(khe,sVo),e(r2,lVo),e(r2,CV),e(CV,iVo),e(r2,dVo),e(H,cVo),e(H,t2),e(t2,She),e(She,fVo),e(t2,mVo),e(t2,wV),e(wV,gVo),e(t2,hVo),e(H,pVo),e(H,a2),e(a2,Rhe),e(Rhe,_Vo),e(a2,uVo),e(a2,AV),e(AV,bVo),e(a2,vVo),e(H,FVo),e(H,n2),e(n2,Phe),e(Phe,TVo),e(n2,MVo),e(n2,yV),e(yV,EVo),e(n2,CVo),e(H,wVo),e(H,s2),e(s2,Bhe),e(Bhe,AVo),e(s2,yVo),e(s2,LV),e(LV,LVo),e(s2,xVo),e(H,$Vo),e(H,l2),e(l2,Ihe),e(Ihe,kVo),e(l2,SVo),e(l2,xV),e(xV,RVo),e(l2,PVo),e(H,BVo),e(H,i2),e(i2,Nhe),e(Nhe,IVo),e(i2,NVo),e(i2,$V),e($V,qVo),e(i2,jVo),e(H,DVo),e(H,d2),e(d2,qhe),e(qhe,GVo),e(d2,OVo),e(d2,kV),e(kV,VVo),e(d2,XVo),e(H,zVo),e(H,c2),e(c2,jhe),e(jhe,WVo),e(c2,QVo),e(c2,SV),e(SV,HVo),e(c2,UVo),e(H,JVo),e(H,f2),e(f2,Dhe),e(Dhe,YVo),e(f2,KVo),e(f2,RV),e(RV,ZVo),e(f2,eXo),e(H,oXo),e(H,m2),e(m2,Ghe),e(Ghe,rXo),e(m2,tXo),e(m2,PV),e(PV,aXo),e(m2,nXo),e(ao,sXo),e(ao,g2),e(g2,lXo),e(g2,Ohe),e(Ohe,iXo),e(g2,dXo),e(g2,Vhe),e(Vhe,cXo),e(ao,fXo),M(h2,ao,null),b(f,Uqe,u),b(f,Ki,u),e(Ki,p2),e(p2,Xhe),M(Uy,Xhe,null),e(Ki,mXo),e(Ki,zhe),e(zhe,gXo),b(f,Jqe,u),b(f,No,u),M(Jy,No,null),e(No,hXo),e(No,Zi),e(Zi,pXo),e(Zi,BV),e(BV,_Xo),e(Zi,uXo),e(Zi,IV),e(IV,bXo),e(Zi,vXo),e(No,FXo),e(No,Yy),e(Yy,TXo),e(Yy,Whe),e(Whe,MXo),e(Yy,EXo),e(No,CXo),e(No,mt),M(Ky,mt,null),e(mt,wXo),e(mt,Qhe),e(Qhe,AXo),e(mt,yXo),e(mt,ed),e(ed,LXo),e(ed,Hhe),e(Hhe,xXo),e(ed,$Xo),e(ed,NV),e(NV,kXo),e(ed,SXo),e(mt,RXo),M(_2,mt,null),e(No,PXo),e(No,no),M(Zy,no,null),e(no,BXo),e(no,Uhe),e(Uhe,IXo),e(no,NXo),e(no,Na),e(Na,qXo),e(Na,Jhe),e(Jhe,jXo),e(Na,DXo),e(Na,Yhe),e(Yhe,GXo),e(Na,OXo),e(Na,Khe),e(Khe,VXo),e(Na,XXo),e(no,zXo),e(no,V),e(V,u2),e(u2,Zhe),e(Zhe,WXo),e(u2,QXo),e(u2,qV),e(qV,HXo),e(u2,UXo),e(V,JXo),e(V,b2),e(b2,epe),e(epe,YXo),e(b2,KXo),e(b2,jV),e(jV,ZXo),e(b2,ezo),e(V,ozo),e(V,v2),e(v2,ope),e(ope,rzo),e(v2,tzo),e(v2,DV),e(DV,azo),e(v2,nzo),e(V,szo),e(V,F2),e(F2,rpe),e(rpe,lzo),e(F2,izo),e(F2,GV),e(GV,dzo),e(F2,czo),e(V,fzo),e(V,T2),e(T2,tpe),e(tpe,mzo),e(T2,gzo),e(T2,OV),e(OV,hzo),e(T2,pzo),e(V,_zo),e(V,M2),e(M2,ape),e(ape,uzo),e(M2,bzo),e(M2,VV),e(VV,vzo),e(M2,Fzo),e(V,Tzo),e(V,E2),e(E2,npe),e(npe,Mzo),e(E2,Ezo),e(E2,XV),e(XV,Czo),e(E2,wzo),e(V,Azo),e(V,C2),e(C2,spe),e(spe,yzo),e(C2,Lzo),e(C2,zV),e(zV,xzo),e(C2,$zo),e(V,kzo),e(V,w2),e(w2,lpe),e(lpe,Szo),e(w2,Rzo),e(w2,WV),e(WV,Pzo),e(w2,Bzo),e(V,Izo),e(V,A2),e(A2,ipe),e(ipe,Nzo),e(A2,qzo),e(A2,QV),e(QV,jzo),e(A2,Dzo),e(V,Gzo),e(V,y2),e(y2,dpe),e(dpe,Ozo),e(y2,Vzo),e(y2,HV),e(HV,Xzo),e(y2,zzo),e(V,Wzo),e(V,L2),e(L2,cpe),e(cpe,Qzo),e(L2,Hzo),e(L2,UV),e(UV,Uzo),e(L2,Jzo),e(V,Yzo),e(V,x2),e(x2,fpe),e(fpe,Kzo),e(x2,Zzo),e(x2,JV),e(JV,eWo),e(x2,oWo),e(V,rWo),e(V,$2),e($2,mpe),e(mpe,tWo),e($2,aWo),e($2,YV),e(YV,nWo),e($2,sWo),e(V,lWo),e(V,k2),e(k2,gpe),e(gpe,iWo),e(k2,dWo),e(k2,KV),e(KV,cWo),e(k2,fWo),e(V,mWo),e(V,S2),e(S2,hpe),e(hpe,gWo),e(S2,hWo),e(S2,ZV),e(ZV,pWo),e(S2,_Wo),e(V,uWo),e(V,R2),e(R2,ppe),e(ppe,bWo),e(R2,vWo),e(R2,eX),e(eX,FWo),e(R2,TWo),e(V,MWo),e(V,P2),e(P2,_pe),e(_pe,EWo),e(P2,CWo),e(P2,oX),e(oX,wWo),e(P2,AWo),e(V,yWo),e(V,B2),e(B2,upe),e(upe,LWo),e(B2,xWo),e(B2,rX),e(rX,$Wo),e(B2,kWo),e(V,SWo),e(V,I2),e(I2,bpe),e(bpe,RWo),e(I2,PWo),e(I2,tX),e(tX,BWo),e(I2,IWo),e(V,NWo),e(V,N2),e(N2,vpe),e(vpe,qWo),e(N2,jWo),e(N2,aX),e(aX,DWo),e(N2,GWo),e(V,OWo),e(V,q2),e(q2,Fpe),e(Fpe,VWo),e(q2,XWo),e(q2,nX),e(nX,zWo),e(q2,WWo),e(V,QWo),e(V,j2),e(j2,Tpe),e(Tpe,HWo),e(j2,UWo),e(j2,sX),e(sX,JWo),e(j2,YWo),e(V,KWo),e(V,D2),e(D2,Mpe),e(Mpe,ZWo),e(D2,eQo),e(D2,lX),e(lX,oQo),e(D2,rQo),e(V,tQo),e(V,G2),e(G2,Epe),e(Epe,aQo),e(G2,nQo),e(G2,iX),e(iX,sQo),e(G2,lQo),e(V,iQo),e(V,O2),e(O2,Cpe),e(Cpe,dQo),e(O2,cQo),e(O2,dX),e(dX,fQo),e(O2,mQo),e(V,gQo),e(V,V2),e(V2,wpe),e(wpe,hQo),e(V2,pQo),e(V2,cX),e(cX,_Qo),e(V2,uQo),e(V,bQo),e(V,X2),e(X2,Ape),e(Ape,vQo),e(X2,FQo),e(X2,fX),e(fX,TQo),e(X2,MQo),e(V,EQo),e(V,z2),e(z2,ype),e(ype,CQo),e(z2,wQo),e(z2,mX),e(mX,AQo),e(z2,yQo),e(V,LQo),e(V,W2),e(W2,Lpe),e(Lpe,xQo),e(W2,$Qo),e(W2,gX),e(gX,kQo),e(W2,SQo),e(V,RQo),e(V,Q2),e(Q2,xpe),e(xpe,PQo),e(Q2,BQo),e(Q2,hX),e(hX,IQo),e(Q2,NQo),e(V,qQo),e(V,H2),e(H2,$pe),e($pe,jQo),e(H2,DQo),e(H2,pX),e(pX,GQo),e(H2,OQo),e(V,VQo),e(V,U2),e(U2,kpe),e(kpe,XQo),e(U2,zQo),e(U2,_X),e(_X,WQo),e(U2,QQo),e(V,HQo),e(V,J2),e(J2,Spe),e(Spe,UQo),e(J2,JQo),e(J2,uX),e(uX,YQo),e(J2,KQo),e(V,ZQo),e(V,Y2),e(Y2,Rpe),e(Rpe,eHo),e(Y2,oHo),e(Y2,bX),e(bX,rHo),e(Y2,tHo),e(V,aHo),e(V,K2),e(K2,Ppe),e(Ppe,nHo),e(K2,sHo),e(K2,vX),e(vX,lHo),e(K2,iHo),e(V,dHo),e(V,Z2),e(Z2,Bpe),e(Bpe,cHo),e(Z2,fHo),e(Z2,FX),e(FX,mHo),e(Z2,gHo),e(V,hHo),e(V,ev),e(ev,Ipe),e(Ipe,pHo),e(ev,_Ho),e(ev,TX),e(TX,uHo),e(ev,bHo),e(V,vHo),e(V,ov),e(ov,Npe),e(Npe,FHo),e(ov,THo),e(ov,MX),e(MX,MHo),e(ov,EHo),e(V,CHo),e(V,rv),e(rv,qpe),e(qpe,wHo),e(rv,AHo),e(rv,EX),e(EX,yHo),e(rv,LHo),e(no,xHo),e(no,tv),e(tv,$Ho),e(tv,jpe),e(jpe,kHo),e(tv,SHo),e(tv,Dpe),e(Dpe,RHo),e(no,PHo),M(av,no,null),b(f,Yqe,u),b(f,od,u),e(od,nv),e(nv,Gpe),M(eL,Gpe,null),e(od,BHo),e(od,Ope),e(Ope,IHo),b(f,Kqe,u),b(f,qo,u),M(oL,qo,null),e(qo,NHo),e(qo,rd),e(rd,qHo),e(rd,CX),e(CX,jHo),e(rd,DHo),e(rd,wX),e(wX,GHo),e(rd,OHo),e(qo,VHo),e(qo,rL),e(rL,XHo),e(rL,Vpe),e(Vpe,zHo),e(rL,WHo),e(qo,QHo),e(qo,gt),M(tL,gt,null),e(gt,HHo),e(gt,Xpe),e(Xpe,UHo),e(gt,JHo),e(gt,td),e(td,YHo),e(td,zpe),e(zpe,KHo),e(td,ZHo),e(td,AX),e(AX,eUo),e(td,oUo),e(gt,rUo),M(sv,gt,null),e(qo,tUo),e(qo,so),M(aL,so,null),e(so,aUo),e(so,Wpe),e(Wpe,nUo),e(so,sUo),e(so,qa),e(qa,lUo),e(qa,Qpe),e(Qpe,iUo),e(qa,dUo),e(qa,Hpe),e(Hpe,cUo),e(qa,fUo),e(qa,Upe),e(Upe,mUo),e(qa,gUo),e(so,hUo),e(so,Jpe),e(Jpe,lv),e(lv,Ype),e(Ype,pUo),e(lv,_Uo),e(lv,yX),e(yX,uUo),e(lv,bUo),e(so,vUo),e(so,iv),e(iv,FUo),e(iv,Kpe),e(Kpe,TUo),e(iv,MUo),e(iv,Zpe),e(Zpe,EUo),e(so,CUo),M(dv,so,null),b(f,Zqe,u),b(f,ad,u),e(ad,cv),e(cv,e_e),M(nL,e_e,null),e(ad,wUo),e(ad,o_e),e(o_e,AUo),b(f,eje,u),b(f,jo,u),M(sL,jo,null),e(jo,yUo),e(jo,nd),e(nd,LUo),e(nd,LX),e(LX,xUo),e(nd,$Uo),e(nd,xX),e(xX,kUo),e(nd,SUo),e(jo,RUo),e(jo,lL),e(lL,PUo),e(lL,r_e),e(r_e,BUo),e(lL,IUo),e(jo,NUo),e(jo,ht),M(iL,ht,null),e(ht,qUo),e(ht,t_e),e(t_e,jUo),e(ht,DUo),e(ht,sd),e(sd,GUo),e(sd,a_e),e(a_e,OUo),e(sd,VUo),e(sd,$X),e($X,XUo),e(sd,zUo),e(ht,WUo),M(fv,ht,null),e(jo,QUo),e(jo,lo),M(dL,lo,null),e(lo,HUo),e(lo,n_e),e(n_e,UUo),e(lo,JUo),e(lo,ja),e(ja,YUo),e(ja,s_e),e(s_e,KUo),e(ja,ZUo),e(ja,l_e),e(l_e,eJo),e(ja,oJo),e(ja,i_e),e(i_e,rJo),e(ja,tJo),e(lo,aJo),e(lo,Fe),e(Fe,mv),e(mv,d_e),e(d_e,nJo),e(mv,sJo),e(mv,kX),e(kX,lJo),e(mv,iJo),e(Fe,dJo),e(Fe,gv),e(gv,c_e),e(c_e,cJo),e(gv,fJo),e(gv,SX),e(SX,mJo),e(gv,gJo),e(Fe,hJo),e(Fe,hv),e(hv,f_e),e(f_e,pJo),e(hv,_Jo),e(hv,RX),e(RX,uJo),e(hv,bJo),e(Fe,vJo),e(Fe,pv),e(pv,m_e),e(m_e,FJo),e(pv,TJo),e(pv,PX),e(PX,MJo),e(pv,EJo),e(Fe,CJo),e(Fe,Bs),e(Bs,g_e),e(g_e,wJo),e(Bs,AJo),e(Bs,BX),e(BX,yJo),e(Bs,LJo),e(Bs,IX),e(IX,xJo),e(Bs,$Jo),e(Fe,kJo),e(Fe,_v),e(_v,h_e),e(h_e,SJo),e(_v,RJo),e(_v,NX),e(NX,PJo),e(_v,BJo),e(Fe,IJo),e(Fe,pt),e(pt,p_e),e(p_e,NJo),e(pt,qJo),e(pt,qX),e(qX,jJo),e(pt,DJo),e(pt,jX),e(jX,GJo),e(pt,OJo),e(pt,DX),e(DX,VJo),e(pt,XJo),e(Fe,zJo),e(Fe,uv),e(uv,__e),e(__e,WJo),e(uv,QJo),e(uv,GX),e(GX,HJo),e(uv,UJo),e(Fe,JJo),e(Fe,bv),e(bv,u_e),e(u_e,YJo),e(bv,KJo),e(bv,OX),e(OX,ZJo),e(bv,eYo),e(Fe,oYo),e(Fe,vv),e(vv,b_e),e(b_e,rYo),e(vv,tYo),e(vv,VX),e(VX,aYo),e(vv,nYo),e(Fe,sYo),e(Fe,Fv),e(Fv,v_e),e(v_e,lYo),e(Fv,iYo),e(Fv,XX),e(XX,dYo),e(Fv,cYo),e(Fe,fYo),e(Fe,Tv),e(Tv,F_e),e(F_e,mYo),e(Tv,gYo),e(Tv,zX),e(zX,hYo),e(Tv,pYo),e(Fe,_Yo),e(Fe,Mv),e(Mv,T_e),e(T_e,uYo),e(Mv,bYo),e(Mv,WX),e(WX,vYo),e(Mv,FYo),e(Fe,TYo),e(Fe,Ev),e(Ev,M_e),e(M_e,MYo),e(Ev,EYo),e(Ev,QX),e(QX,CYo),e(Ev,wYo),e(lo,AYo),e(lo,Cv),e(Cv,yYo),e(Cv,E_e),e(E_e,LYo),e(Cv,xYo),e(Cv,C_e),e(C_e,$Yo),e(lo,kYo),M(wv,lo,null),b(f,oje,u),b(f,ld,u),e(ld,Av),e(Av,w_e),M(cL,w_e,null),e(ld,SYo),e(ld,A_e),e(A_e,RYo),b(f,rje,u),b(f,Do,u),M(fL,Do,null),e(Do,PYo),e(Do,id),e(id,BYo),e(id,HX),e(HX,IYo),e(id,NYo),e(id,UX),e(UX,qYo),e(id,jYo),e(Do,DYo),e(Do,mL),e(mL,GYo),e(mL,y_e),e(y_e,OYo),e(mL,VYo),e(Do,XYo),e(Do,_t),M(gL,_t,null),e(_t,zYo),e(_t,L_e),e(L_e,WYo),e(_t,QYo),e(_t,dd),e(dd,HYo),e(dd,x_e),e(x_e,UYo),e(dd,JYo),e(dd,JX),e(JX,YYo),e(dd,KYo),e(_t,ZYo),M(yv,_t,null),e(Do,eKo),e(Do,io),M(hL,io,null),e(io,oKo),e(io,$_e),e($_e,rKo),e(io,tKo),e(io,Da),e(Da,aKo),e(Da,k_e),e(k_e,nKo),e(Da,sKo),e(Da,S_e),e(S_e,lKo),e(Da,iKo),e(Da,R_e),e(R_e,dKo),e(Da,cKo),e(io,fKo),e(io,P_e),e(P_e,Lv),e(Lv,B_e),e(B_e,mKo),e(Lv,gKo),e(Lv,YX),e(YX,hKo),e(Lv,pKo),e(io,_Ko),e(io,xv),e(xv,uKo),e(xv,I_e),e(I_e,bKo),e(xv,vKo),e(xv,N_e),e(N_e,FKo),e(io,TKo),M($v,io,null),b(f,tje,u),b(f,cd,u),e(cd,kv),e(kv,q_e),M(pL,q_e,null),e(cd,MKo),e(cd,j_e),e(j_e,EKo),b(f,aje,u),b(f,Go,u),M(_L,Go,null),e(Go,CKo),e(Go,fd),e(fd,wKo),e(fd,KX),e(KX,AKo),e(fd,yKo),e(fd,ZX),e(ZX,LKo),e(fd,xKo),e(Go,$Ko),e(Go,uL),e(uL,kKo),e(uL,D_e),e(D_e,SKo),e(uL,RKo),e(Go,PKo),e(Go,ut),M(bL,ut,null),e(ut,BKo),e(ut,G_e),e(G_e,IKo),e(ut,NKo),e(ut,md),e(md,qKo),e(md,O_e),e(O_e,jKo),e(md,DKo),e(md,ez),e(ez,GKo),e(md,OKo),e(ut,VKo),M(Sv,ut,null),e(Go,XKo),e(Go,co),M(vL,co,null),e(co,zKo),e(co,V_e),e(V_e,WKo),e(co,QKo),e(co,Ga),e(Ga,HKo),e(Ga,X_e),e(X_e,UKo),e(Ga,JKo),e(Ga,z_e),e(z_e,YKo),e(Ga,KKo),e(Ga,W_e),e(W_e,ZKo),e(Ga,eZo),e(co,oZo),e(co,ke),e(ke,Rv),e(Rv,Q_e),e(Q_e,rZo),e(Rv,tZo),e(Rv,oz),e(oz,aZo),e(Rv,nZo),e(ke,sZo),e(ke,Pv),e(Pv,H_e),e(H_e,lZo),e(Pv,iZo),e(Pv,rz),e(rz,dZo),e(Pv,cZo),e(ke,fZo),e(ke,Bv),e(Bv,U_e),e(U_e,mZo),e(Bv,gZo),e(Bv,tz),e(tz,hZo),e(Bv,pZo),e(ke,_Zo),e(ke,Iv),e(Iv,J_e),e(J_e,uZo),e(Iv,bZo),e(Iv,az),e(az,vZo),e(Iv,FZo),e(ke,TZo),e(ke,Nv),e(Nv,Y_e),e(Y_e,MZo),e(Nv,EZo),e(Nv,nz),e(nz,CZo),e(Nv,wZo),e(ke,AZo),e(ke,qv),e(qv,K_e),e(K_e,yZo),e(qv,LZo),e(qv,sz),e(sz,xZo),e(qv,$Zo),e(ke,kZo),e(ke,jv),e(jv,Z_e),e(Z_e,SZo),e(jv,RZo),e(jv,lz),e(lz,PZo),e(jv,BZo),e(ke,IZo),e(ke,Dv),e(Dv,eue),e(eue,NZo),e(Dv,qZo),e(Dv,iz),e(iz,jZo),e(Dv,DZo),e(ke,GZo),e(ke,Gv),e(Gv,oue),e(oue,OZo),e(Gv,VZo),e(Gv,dz),e(dz,XZo),e(Gv,zZo),e(co,WZo),e(co,Ov),e(Ov,QZo),e(Ov,rue),e(rue,HZo),e(Ov,UZo),e(Ov,tue),e(tue,JZo),e(co,YZo),M(Vv,co,null),b(f,nje,u),b(f,gd,u),e(gd,Xv),e(Xv,aue),M(FL,aue,null),e(gd,KZo),e(gd,nue),e(nue,ZZo),b(f,sje,u),b(f,Oo,u),M(TL,Oo,null),e(Oo,eer),e(Oo,hd),e(hd,oer),e(hd,cz),e(cz,rer),e(hd,ter),e(hd,fz),e(fz,aer),e(hd,ner),e(Oo,ser),e(Oo,ML),e(ML,ler),e(ML,sue),e(sue,ier),e(ML,der),e(Oo,cer),e(Oo,bt),M(EL,bt,null),e(bt,fer),e(bt,lue),e(lue,mer),e(bt,ger),e(bt,pd),e(pd,her),e(pd,iue),e(iue,per),e(pd,_er),e(pd,mz),e(mz,uer),e(pd,ber),e(bt,ver),M(zv,bt,null),e(Oo,Fer),e(Oo,fo),M(CL,fo,null),e(fo,Ter),e(fo,due),e(due,Mer),e(fo,Eer),e(fo,Oa),e(Oa,Cer),e(Oa,cue),e(cue,wer),e(Oa,Aer),e(Oa,fue),e(fue,yer),e(Oa,Ler),e(Oa,mue),e(mue,xer),e(Oa,$er),e(fo,ker),e(fo,Kr),e(Kr,Wv),e(Wv,gue),e(gue,Ser),e(Wv,Rer),e(Wv,gz),e(gz,Per),e(Wv,Ber),e(Kr,Ier),e(Kr,Qv),e(Qv,hue),e(hue,Ner),e(Qv,qer),e(Qv,hz),e(hz,jer),e(Qv,Der),e(Kr,Ger),e(Kr,Hv),e(Hv,pue),e(pue,Oer),e(Hv,Ver),e(Hv,pz),e(pz,Xer),e(Hv,zer),e(Kr,Wer),e(Kr,Uv),e(Uv,_ue),e(_ue,Qer),e(Uv,Her),e(Uv,_z),e(_z,Uer),e(Uv,Jer),e(Kr,Yer),e(Kr,Jv),e(Jv,uue),e(uue,Ker),e(Jv,Zer),e(Jv,uz),e(uz,eor),e(Jv,oor),e(fo,ror),e(fo,Yv),e(Yv,tor),e(Yv,bue),e(bue,aor),e(Yv,nor),e(Yv,vue),e(vue,sor),e(fo,lor),M(Kv,fo,null),b(f,lje,u),b(f,_d,u),e(_d,Zv),e(Zv,Fue),M(wL,Fue,null),e(_d,ior),e(_d,Tue),e(Tue,dor),b(f,ije,u),b(f,Vo,u),M(AL,Vo,null),e(Vo,cor),e(Vo,ud),e(ud,mor),e(ud,bz),e(bz,gor),e(ud,hor),e(ud,vz),e(vz,por),e(ud,_or),e(Vo,uor),e(Vo,yL),e(yL,bor),e(yL,Mue),e(Mue,vor),e(yL,For),e(Vo,Tor),e(Vo,vt),M(LL,vt,null),e(vt,Mor),e(vt,Eue),e(Eue,Eor),e(vt,Cor),e(vt,bd),e(bd,wor),e(bd,Cue),e(Cue,Aor),e(bd,yor),e(bd,Fz),e(Fz,Lor),e(bd,xor),e(vt,$or),M(eF,vt,null),e(Vo,kor),e(Vo,mo),M(xL,mo,null),e(mo,Sor),e(mo,wue),e(wue,Ror),e(mo,Por),e(mo,Va),e(Va,Bor),e(Va,Aue),e(Aue,Ior),e(Va,Nor),e(Va,yue),e(yue,qor),e(Va,jor),e(Va,Lue),e(Lue,Dor),e(Va,Gor),e(mo,Oor),e(mo,Se),e(Se,oF),e(oF,xue),e(xue,Vor),e(oF,Xor),e(oF,Tz),e(Tz,zor),e(oF,Wor),e(Se,Qor),e(Se,rF),e(rF,$ue),e($ue,Hor),e(rF,Uor),e(rF,Mz),e(Mz,Jor),e(rF,Yor),e(Se,Kor),e(Se,tF),e(tF,kue),e(kue,Zor),e(tF,err),e(tF,Ez),e(Ez,orr),e(tF,rrr),e(Se,trr),e(Se,aF),e(aF,Sue),e(Sue,arr),e(aF,nrr),e(aF,Cz),e(Cz,srr),e(aF,lrr),e(Se,irr),e(Se,nF),e(nF,Rue),e(Rue,drr),e(nF,crr),e(nF,wz),e(wz,frr),e(nF,mrr),e(Se,grr),e(Se,sF),e(sF,Pue),e(Pue,hrr),e(sF,prr),e(sF,Az),e(Az,_rr),e(sF,urr),e(Se,brr),e(Se,lF),e(lF,Bue),e(Bue,vrr),e(lF,Frr),e(lF,yz),e(yz,Trr),e(lF,Mrr),e(Se,Err),e(Se,iF),e(iF,Iue),e(Iue,Crr),e(iF,wrr),e(iF,Lz),e(Lz,Arr),e(iF,yrr),e(Se,Lrr),e(Se,dF),e(dF,Nue),e(Nue,xrr),e(dF,$rr),e(dF,xz),e(xz,krr),e(dF,Srr),e(mo,Rrr),e(mo,cF),e(cF,Prr),e(cF,que),e(que,Brr),e(cF,Irr),e(cF,jue),e(jue,Nrr),e(mo,qrr),M(fF,mo,null),b(f,dje,u),b(f,vd,u),e(vd,mF),e(mF,Due),M($L,Due,null),e(vd,jrr),e(vd,Gue),e(Gue,Drr),b(f,cje,u),b(f,Xo,u),M(kL,Xo,null),e(Xo,Grr),e(Xo,Fd),e(Fd,Orr),e(Fd,$z),e($z,Vrr),e(Fd,Xrr),e(Fd,kz),e(kz,zrr),e(Fd,Wrr),e(Xo,Qrr),e(Xo,SL),e(SL,Hrr),e(SL,Oue),e(Oue,Urr),e(SL,Jrr),e(Xo,Yrr),e(Xo,Ft),M(RL,Ft,null),e(Ft,Krr),e(Ft,Vue),e(Vue,Zrr),e(Ft,etr),e(Ft,Td),e(Td,otr),e(Td,Xue),e(Xue,rtr),e(Td,ttr),e(Td,Sz),e(Sz,atr),e(Td,ntr),e(Ft,str),M(gF,Ft,null),e(Xo,ltr),e(Xo,go),M(PL,go,null),e(go,itr),e(go,zue),e(zue,dtr),e(go,ctr),e(go,Xa),e(Xa,ftr),e(Xa,Wue),e(Wue,mtr),e(Xa,gtr),e(Xa,Que),e(Que,htr),e(Xa,ptr),e(Xa,Hue),e(Hue,_tr),e(Xa,utr),e(go,btr),e(go,BL),e(BL,hF),e(hF,Uue),e(Uue,vtr),e(hF,Ftr),e(hF,Rz),e(Rz,Ttr),e(hF,Mtr),e(BL,Etr),e(BL,pF),e(pF,Jue),e(Jue,Ctr),e(pF,wtr),e(pF,Pz),e(Pz,Atr),e(pF,ytr),e(go,Ltr),e(go,_F),e(_F,xtr),e(_F,Yue),e(Yue,$tr),e(_F,ktr),e(_F,Kue),e(Kue,Str),e(go,Rtr),M(uF,go,null),b(f,fje,u),b(f,Md,u),e(Md,bF),e(bF,Zue),M(IL,Zue,null),e(Md,Ptr),e(Md,e4e),e(e4e,Btr),b(f,mje,u),b(f,zo,u),M(NL,zo,null),e(zo,Itr),e(zo,Ed),e(Ed,Ntr),e(Ed,Bz),e(Bz,qtr),e(Ed,jtr),e(Ed,Iz),e(Iz,Dtr),e(Ed,Gtr),e(zo,Otr),e(zo,qL),e(qL,Vtr),e(qL,o4e),e(o4e,Xtr),e(qL,ztr),e(zo,Wtr),e(zo,Tt),M(jL,Tt,null),e(Tt,Qtr),e(Tt,r4e),e(r4e,Htr),e(Tt,Utr),e(Tt,Cd),e(Cd,Jtr),e(Cd,t4e),e(t4e,Ytr),e(Cd,Ktr),e(Cd,Nz),e(Nz,Ztr),e(Cd,ear),e(Tt,oar),M(vF,Tt,null),e(zo,rar),e(zo,ho),M(DL,ho,null),e(ho,tar),e(ho,a4e),e(a4e,aar),e(ho,nar),e(ho,za),e(za,sar),e(za,n4e),e(n4e,lar),e(za,iar),e(za,s4e),e(s4e,dar),e(za,car),e(za,l4e),e(l4e,far),e(za,mar),e(ho,gar),e(ho,Zr),e(Zr,FF),e(FF,i4e),e(i4e,har),e(FF,par),e(FF,qz),e(qz,_ar),e(FF,uar),e(Zr,bar),e(Zr,TF),e(TF,d4e),e(d4e,Far),e(TF,Tar),e(TF,jz),e(jz,Mar),e(TF,Ear),e(Zr,Car),e(Zr,MF),e(MF,c4e),e(c4e,war),e(MF,Aar),e(MF,Dz),e(Dz,yar),e(MF,Lar),e(Zr,xar),e(Zr,EF),e(EF,f4e),e(f4e,$ar),e(EF,kar),e(EF,Gz),e(Gz,Sar),e(EF,Rar),e(Zr,Par),e(Zr,CF),e(CF,m4e),e(m4e,Bar),e(CF,Iar),e(CF,Oz),e(Oz,Nar),e(CF,qar),e(ho,jar),e(ho,wF),e(wF,Dar),e(wF,g4e),e(g4e,Gar),e(wF,Oar),e(wF,h4e),e(h4e,Var),e(ho,Xar),M(AF,ho,null),b(f,gje,u),b(f,wd,u),e(wd,yF),e(yF,p4e),M(GL,p4e,null),e(wd,zar),e(wd,_4e),e(_4e,War),b(f,hje,u),b(f,Wo,u),M(OL,Wo,null),e(Wo,Qar),e(Wo,Ad),e(Ad,Har),e(Ad,Vz),e(Vz,Uar),e(Ad,Jar),e(Ad,Xz),e(Xz,Yar),e(Ad,Kar),e(Wo,Zar),e(Wo,VL),e(VL,enr),e(VL,u4e),e(u4e,onr),e(VL,rnr),e(Wo,tnr),e(Wo,Mt),M(XL,Mt,null),e(Mt,anr),e(Mt,b4e),e(b4e,nnr),e(Mt,snr),e(Mt,yd),e(yd,lnr),e(yd,v4e),e(v4e,inr),e(yd,dnr),e(yd,zz),e(zz,cnr),e(yd,fnr),e(Mt,mnr),M(LF,Mt,null),e(Wo,gnr),e(Wo,po),M(zL,po,null),e(po,hnr),e(po,F4e),e(F4e,pnr),e(po,_nr),e(po,Wa),e(Wa,unr),e(Wa,T4e),e(T4e,bnr),e(Wa,vnr),e(Wa,M4e),e(M4e,Fnr),e(Wa,Tnr),e(Wa,E4e),e(E4e,Mnr),e(Wa,Enr),e(po,Cnr),e(po,Ld),e(Ld,xF),e(xF,C4e),e(C4e,wnr),e(xF,Anr),e(xF,Wz),e(Wz,ynr),e(xF,Lnr),e(Ld,xnr),e(Ld,$F),e($F,w4e),e(w4e,$nr),e($F,knr),e($F,Qz),e(Qz,Snr),e($F,Rnr),e(Ld,Pnr),e(Ld,kF),e(kF,A4e),e(A4e,Bnr),e(kF,Inr),e(kF,Hz),e(Hz,Nnr),e(kF,qnr),e(po,jnr),e(po,SF),e(SF,Dnr),e(SF,y4e),e(y4e,Gnr),e(SF,Onr),e(SF,L4e),e(L4e,Vnr),e(po,Xnr),M(RF,po,null),b(f,pje,u),b(f,xd,u),e(xd,PF),e(PF,x4e),M(WL,x4e,null),e(xd,znr),e(xd,$4e),e($4e,Wnr),b(f,_je,u),b(f,Qo,u),M(QL,Qo,null),e(Qo,Qnr),e(Qo,$d),e($d,Hnr),e($d,Uz),e(Uz,Unr),e($d,Jnr),e($d,Jz),e(Jz,Ynr),e($d,Knr),e(Qo,Znr),e(Qo,HL),e(HL,esr),e(HL,k4e),e(k4e,osr),e(HL,rsr),e(Qo,tsr),e(Qo,Et),M(UL,Et,null),e(Et,asr),e(Et,S4e),e(S4e,nsr),e(Et,ssr),e(Et,kd),e(kd,lsr),e(kd,R4e),e(R4e,isr),e(kd,dsr),e(kd,Yz),e(Yz,csr),e(kd,fsr),e(Et,msr),M(BF,Et,null),e(Qo,gsr),e(Qo,_o),M(JL,_o,null),e(_o,hsr),e(_o,P4e),e(P4e,psr),e(_o,_sr),e(_o,Qa),e(Qa,usr),e(Qa,B4e),e(B4e,bsr),e(Qa,vsr),e(Qa,I4e),e(I4e,Fsr),e(Qa,Tsr),e(Qa,N4e),e(N4e,Msr),e(Qa,Esr),e(_o,Csr),e(_o,YL),e(YL,IF),e(IF,q4e),e(q4e,wsr),e(IF,Asr),e(IF,Kz),e(Kz,ysr),e(IF,Lsr),e(YL,xsr),e(YL,NF),e(NF,j4e),e(j4e,$sr),e(NF,ksr),e(NF,Zz),e(Zz,Ssr),e(NF,Rsr),e(_o,Psr),e(_o,qF),e(qF,Bsr),e(qF,D4e),e(D4e,Isr),e(qF,Nsr),e(qF,G4e),e(G4e,qsr),e(_o,jsr),M(jF,_o,null),b(f,uje,u),b(f,Sd,u),e(Sd,DF),e(DF,O4e),M(KL,O4e,null),e(Sd,Dsr),e(Sd,V4e),e(V4e,Gsr),b(f,bje,u),b(f,Ho,u),M(ZL,Ho,null),e(Ho,Osr),e(Ho,Rd),e(Rd,Vsr),e(Rd,eW),e(eW,Xsr),e(Rd,zsr),e(Rd,oW),e(oW,Wsr),e(Rd,Qsr),e(Ho,Hsr),e(Ho,e8),e(e8,Usr),e(e8,X4e),e(X4e,Jsr),e(e8,Ysr),e(Ho,Ksr),e(Ho,Ct),M(o8,Ct,null),e(Ct,Zsr),e(Ct,z4e),e(z4e,elr),e(Ct,olr),e(Ct,Pd),e(Pd,rlr),e(Pd,W4e),e(W4e,tlr),e(Pd,alr),e(Pd,rW),e(rW,nlr),e(Pd,slr),e(Ct,llr),M(GF,Ct,null),e(Ho,ilr),e(Ho,uo),M(r8,uo,null),e(uo,dlr),e(uo,Q4e),e(Q4e,clr),e(uo,flr),e(uo,Ha),e(Ha,mlr),e(Ha,H4e),e(H4e,glr),e(Ha,hlr),e(Ha,U4e),e(U4e,plr),e(Ha,_lr),e(Ha,J4e),e(J4e,ulr),e(Ha,blr),e(uo,vlr),e(uo,Y4e),e(Y4e,OF),e(OF,K4e),e(K4e,Flr),e(OF,Tlr),e(OF,tW),e(tW,Mlr),e(OF,Elr),e(uo,Clr),e(uo,VF),e(VF,wlr),e(VF,Z4e),e(Z4e,Alr),e(VF,ylr),e(VF,e1e),e(e1e,Llr),e(uo,xlr),M(XF,uo,null),b(f,vje,u),b(f,Bd,u),e(Bd,zF),e(zF,o1e),M(t8,o1e,null),e(Bd,$lr),e(Bd,r1e),e(r1e,klr),b(f,Fje,u),b(f,Uo,u),M(a8,Uo,null),e(Uo,Slr),e(Uo,Id),e(Id,Rlr),e(Id,aW),e(aW,Plr),e(Id,Blr),e(Id,nW),e(nW,Ilr),e(Id,Nlr),e(Uo,qlr),e(Uo,n8),e(n8,jlr),e(n8,t1e),e(t1e,Dlr),e(n8,Glr),e(Uo,Olr),e(Uo,wt),M(s8,wt,null),e(wt,Vlr),e(wt,a1e),e(a1e,Xlr),e(wt,zlr),e(wt,Nd),e(Nd,Wlr),e(Nd,n1e),e(n1e,Qlr),e(Nd,Hlr),e(Nd,sW),e(sW,Ulr),e(Nd,Jlr),e(wt,Ylr),M(WF,wt,null),e(Uo,Klr),e(Uo,bo),M(l8,bo,null),e(bo,Zlr),e(bo,s1e),e(s1e,eir),e(bo,oir),e(bo,Ua),e(Ua,rir),e(Ua,l1e),e(l1e,tir),e(Ua,air),e(Ua,i1e),e(i1e,nir),e(Ua,sir),e(Ua,d1e),e(d1e,lir),e(Ua,iir),e(bo,dir),e(bo,Ja),e(Ja,QF),e(QF,c1e),e(c1e,cir),e(QF,fir),e(QF,lW),e(lW,mir),e(QF,gir),e(Ja,hir),e(Ja,HF),e(HF,f1e),e(f1e,pir),e(HF,_ir),e(HF,iW),e(iW,uir),e(HF,bir),e(Ja,vir),e(Ja,UF),e(UF,m1e),e(m1e,Fir),e(UF,Tir),e(UF,dW),e(dW,Mir),e(UF,Eir),e(Ja,Cir),e(Ja,JF),e(JF,g1e),e(g1e,wir),e(JF,Air),e(JF,cW),e(cW,yir),e(JF,Lir),e(bo,xir),e(bo,YF),e(YF,$ir),e(YF,h1e),e(h1e,kir),e(YF,Sir),e(YF,p1e),e(p1e,Rir),e(bo,Pir),M(KF,bo,null),b(f,Tje,u),b(f,qd,u),e(qd,ZF),e(ZF,_1e),M(i8,_1e,null),e(qd,Bir),e(qd,u1e),e(u1e,Iir),b(f,Mje,u),b(f,Jo,u),M(d8,Jo,null),e(Jo,Nir),e(Jo,jd),e(jd,qir),e(jd,fW),e(fW,jir),e(jd,Dir),e(jd,mW),e(mW,Gir),e(jd,Oir),e(Jo,Vir),e(Jo,c8),e(c8,Xir),e(c8,b1e),e(b1e,zir),e(c8,Wir),e(Jo,Qir),e(Jo,At),M(f8,At,null),e(At,Hir),e(At,v1e),e(v1e,Uir),e(At,Jir),e(At,Dd),e(Dd,Yir),e(Dd,F1e),e(F1e,Kir),e(Dd,Zir),e(Dd,gW),e(gW,edr),e(Dd,odr),e(At,rdr),M(eT,At,null),e(Jo,tdr),e(Jo,vo),M(m8,vo,null),e(vo,adr),e(vo,T1e),e(T1e,ndr),e(vo,sdr),e(vo,Ya),e(Ya,ldr),e(Ya,M1e),e(M1e,idr),e(Ya,ddr),e(Ya,E1e),e(E1e,cdr),e(Ya,fdr),e(Ya,C1e),e(C1e,mdr),e(Ya,gdr),e(vo,hdr),e(vo,w1e),e(w1e,oT),e(oT,A1e),e(A1e,pdr),e(oT,_dr),e(oT,hW),e(hW,udr),e(oT,bdr),e(vo,vdr),e(vo,rT),e(rT,Fdr),e(rT,y1e),e(y1e,Tdr),e(rT,Mdr),e(rT,L1e),e(L1e,Edr),e(vo,Cdr),M(tT,vo,null),b(f,Eje,u),b(f,Gd,u),e(Gd,aT),e(aT,x1e),M(g8,x1e,null),e(Gd,wdr),e(Gd,$1e),e($1e,Adr),b(f,Cje,u),b(f,Yo,u),M(h8,Yo,null),e(Yo,ydr),e(Yo,Od),e(Od,Ldr),e(Od,pW),e(pW,xdr),e(Od,$dr),e(Od,_W),e(_W,kdr),e(Od,Sdr),e(Yo,Rdr),e(Yo,p8),e(p8,Pdr),e(p8,k1e),e(k1e,Bdr),e(p8,Idr),e(Yo,Ndr),e(Yo,yt),M(_8,yt,null),e(yt,qdr),e(yt,S1e),e(S1e,jdr),e(yt,Ddr),e(yt,Vd),e(Vd,Gdr),e(Vd,R1e),e(R1e,Odr),e(Vd,Vdr),e(Vd,uW),e(uW,Xdr),e(Vd,zdr),e(yt,Wdr),M(nT,yt,null),e(Yo,Qdr),e(Yo,wr),M(u8,wr,null),e(wr,Hdr),e(wr,P1e),e(P1e,Udr),e(wr,Jdr),e(wr,Ka),e(Ka,Ydr),e(Ka,B1e),e(B1e,Kdr),e(Ka,Zdr),e(Ka,I1e),e(I1e,ecr),e(Ka,ocr),e(Ka,N1e),e(N1e,rcr),e(Ka,tcr),e(wr,acr),e(wr,q),e(q,sT),e(sT,q1e),e(q1e,ncr),e(sT,scr),e(sT,bW),e(bW,lcr),e(sT,icr),e(q,dcr),e(q,lT),e(lT,j1e),e(j1e,ccr),e(lT,fcr),e(lT,vW),e(vW,mcr),e(lT,gcr),e(q,hcr),e(q,iT),e(iT,D1e),e(D1e,pcr),e(iT,_cr),e(iT,FW),e(FW,ucr),e(iT,bcr),e(q,vcr),e(q,dT),e(dT,G1e),e(G1e,Fcr),e(dT,Tcr),e(dT,TW),e(TW,Mcr),e(dT,Ecr),e(q,Ccr),e(q,cT),e(cT,O1e),e(O1e,wcr),e(cT,Acr),e(cT,MW),e(MW,ycr),e(cT,Lcr),e(q,xcr),e(q,fT),e(fT,V1e),e(V1e,$cr),e(fT,kcr),e(fT,EW),e(EW,Scr),e(fT,Rcr),e(q,Pcr),e(q,mT),e(mT,X1e),e(X1e,Bcr),e(mT,Icr),e(mT,CW),e(CW,Ncr),e(mT,qcr),e(q,jcr),e(q,gT),e(gT,z1e),e(z1e,Dcr),e(gT,Gcr),e(gT,wW),e(wW,Ocr),e(gT,Vcr),e(q,Xcr),e(q,hT),e(hT,W1e),e(W1e,zcr),e(hT,Wcr),e(hT,AW),e(AW,Qcr),e(hT,Hcr),e(q,Ucr),e(q,pT),e(pT,Q1e),e(Q1e,Jcr),e(pT,Ycr),e(pT,yW),e(yW,Kcr),e(pT,Zcr),e(q,efr),e(q,_T),e(_T,H1e),e(H1e,ofr),e(_T,rfr),e(_T,LW),e(LW,tfr),e(_T,afr),e(q,nfr),e(q,uT),e(uT,U1e),e(U1e,sfr),e(uT,lfr),e(uT,xW),e(xW,ifr),e(uT,dfr),e(q,cfr),e(q,bT),e(bT,J1e),e(J1e,ffr),e(bT,mfr),e(bT,$W),e($W,gfr),e(bT,hfr),e(q,pfr),e(q,vT),e(vT,Y1e),e(Y1e,_fr),e(vT,ufr),e(vT,kW),e(kW,bfr),e(vT,vfr),e(q,Ffr),e(q,FT),e(FT,K1e),e(K1e,Tfr),e(FT,Mfr),e(FT,SW),e(SW,Efr),e(FT,Cfr),e(q,wfr),e(q,TT),e(TT,Z1e),e(Z1e,Afr),e(TT,yfr),e(TT,RW),e(RW,Lfr),e(TT,xfr),e(q,$fr),e(q,MT),e(MT,e7e),e(e7e,kfr),e(MT,Sfr),e(MT,PW),e(PW,Rfr),e(MT,Pfr),e(q,Bfr),e(q,Is),e(Is,o7e),e(o7e,Ifr),e(Is,Nfr),e(Is,BW),e(BW,qfr),e(Is,jfr),e(Is,IW),e(IW,Dfr),e(Is,Gfr),e(q,Ofr),e(q,ET),e(ET,r7e),e(r7e,Vfr),e(ET,Xfr),e(ET,NW),e(NW,zfr),e(ET,Wfr),e(q,Qfr),e(q,CT),e(CT,t7e),e(t7e,Hfr),e(CT,Ufr),e(CT,qW),e(qW,Jfr),e(CT,Yfr),e(q,Kfr),e(q,wT),e(wT,a7e),e(a7e,Zfr),e(wT,emr),e(wT,jW),e(jW,omr),e(wT,rmr),e(q,tmr),e(q,AT),e(AT,n7e),e(n7e,amr),e(AT,nmr),e(AT,DW),e(DW,smr),e(AT,lmr),e(q,imr),e(q,yT),e(yT,s7e),e(s7e,dmr),e(yT,cmr),e(yT,GW),e(GW,fmr),e(yT,mmr),e(q,gmr),e(q,LT),e(LT,l7e),e(l7e,hmr),e(LT,pmr),e(LT,OW),e(OW,_mr),e(LT,umr),e(q,bmr),e(q,xT),e(xT,i7e),e(i7e,vmr),e(xT,Fmr),e(xT,VW),e(VW,Tmr),e(xT,Mmr),e(q,Emr),e(q,$T),e($T,d7e),e(d7e,Cmr),e($T,wmr),e($T,XW),e(XW,Amr),e($T,ymr),e(q,Lmr),e(q,kT),e(kT,c7e),e(c7e,xmr),e(kT,$mr),e(kT,zW),e(zW,kmr),e(kT,Smr),e(q,Rmr),e(q,ST),e(ST,f7e),e(f7e,Pmr),e(ST,Bmr),e(ST,WW),e(WW,Imr),e(ST,Nmr),e(q,qmr),e(q,RT),e(RT,m7e),e(m7e,jmr),e(RT,Dmr),e(RT,QW),e(QW,Gmr),e(RT,Omr),e(q,Vmr),e(q,PT),e(PT,g7e),e(g7e,Xmr),e(PT,zmr),e(PT,HW),e(HW,Wmr),e(PT,Qmr),e(q,Hmr),e(q,BT),e(BT,h7e),e(h7e,Umr),e(BT,Jmr),e(BT,UW),e(UW,Ymr),e(BT,Kmr),e(q,Zmr),e(q,IT),e(IT,p7e),e(p7e,egr),e(IT,ogr),e(IT,JW),e(JW,rgr),e(IT,tgr),e(q,agr),e(q,NT),e(NT,_7e),e(_7e,ngr),e(NT,sgr),e(NT,YW),e(YW,lgr),e(NT,igr),e(q,dgr),e(q,qT),e(qT,u7e),e(u7e,cgr),e(qT,fgr),e(qT,KW),e(KW,mgr),e(qT,ggr),e(q,hgr),e(q,jT),e(jT,b7e),e(b7e,pgr),e(jT,_gr),e(jT,ZW),e(ZW,ugr),e(jT,bgr),e(q,vgr),e(q,DT),e(DT,v7e),e(v7e,Fgr),e(DT,Tgr),e(DT,eQ),e(eQ,Mgr),e(DT,Egr),e(q,Cgr),e(q,GT),e(GT,F7e),e(F7e,wgr),e(GT,Agr),e(GT,oQ),e(oQ,ygr),e(GT,Lgr),e(q,xgr),e(q,OT),e(OT,T7e),e(T7e,$gr),e(OT,kgr),e(OT,rQ),e(rQ,Sgr),e(OT,Rgr),e(q,Pgr),e(q,VT),e(VT,M7e),e(M7e,Bgr),e(VT,Igr),e(VT,tQ),e(tQ,Ngr),e(VT,qgr),e(q,jgr),e(q,XT),e(XT,E7e),e(E7e,Dgr),e(XT,Ggr),e(XT,aQ),e(aQ,Ogr),e(XT,Vgr),e(q,Xgr),e(q,zT),e(zT,C7e),e(C7e,zgr),e(zT,Wgr),e(zT,nQ),e(nQ,Qgr),e(zT,Hgr),e(q,Ugr),e(q,WT),e(WT,w7e),e(w7e,Jgr),e(WT,Ygr),e(WT,sQ),e(sQ,Kgr),e(WT,Zgr),e(q,ehr),e(q,QT),e(QT,A7e),e(A7e,ohr),e(QT,rhr),e(QT,lQ),e(lQ,thr),e(QT,ahr),e(q,nhr),e(q,HT),e(HT,y7e),e(y7e,shr),e(HT,lhr),e(HT,iQ),e(iQ,ihr),e(HT,dhr),e(q,chr),e(q,UT),e(UT,L7e),e(L7e,fhr),e(UT,mhr),e(UT,dQ),e(dQ,ghr),e(UT,hhr),e(q,phr),e(q,JT),e(JT,x7e),e(x7e,_hr),e(JT,uhr),e(JT,cQ),e(cQ,bhr),e(JT,vhr),e(wr,Fhr),M(YT,wr,null),b(f,wje,u),b(f,Xd,u),e(Xd,KT),e(KT,$7e),M(b8,$7e,null),e(Xd,Thr),e(Xd,k7e),e(k7e,Mhr),b(f,Aje,u),b(f,Ko,u),M(v8,Ko,null),e(Ko,Ehr),e(Ko,zd),e(zd,Chr),e(zd,fQ),e(fQ,whr),e(zd,Ahr),e(zd,mQ),e(mQ,yhr),e(zd,Lhr),e(Ko,xhr),e(Ko,F8),e(F8,$hr),e(F8,S7e),e(S7e,khr),e(F8,Shr),e(Ko,Rhr),e(Ko,Lt),M(T8,Lt,null),e(Lt,Phr),e(Lt,R7e),e(R7e,Bhr),e(Lt,Ihr),e(Lt,Wd),e(Wd,Nhr),e(Wd,P7e),e(P7e,qhr),e(Wd,jhr),e(Wd,gQ),e(gQ,Dhr),e(Wd,Ghr),e(Lt,Ohr),M(ZT,Lt,null),e(Ko,Vhr),e(Ko,Ar),M(M8,Ar,null),e(Ar,Xhr),e(Ar,B7e),e(B7e,zhr),e(Ar,Whr),e(Ar,Za),e(Za,Qhr),e(Za,I7e),e(I7e,Hhr),e(Za,Uhr),e(Za,N7e),e(N7e,Jhr),e(Za,Yhr),e(Za,q7e),e(q7e,Khr),e(Za,Zhr),e(Ar,epr),e(Ar,se),e(se,eM),e(eM,j7e),e(j7e,opr),e(eM,rpr),e(eM,hQ),e(hQ,tpr),e(eM,apr),e(se,npr),e(se,oM),e(oM,D7e),e(D7e,spr),e(oM,lpr),e(oM,pQ),e(pQ,ipr),e(oM,dpr),e(se,cpr),e(se,rM),e(rM,G7e),e(G7e,fpr),e(rM,mpr),e(rM,_Q),e(_Q,gpr),e(rM,hpr),e(se,ppr),e(se,tM),e(tM,O7e),e(O7e,_pr),e(tM,upr),e(tM,uQ),e(uQ,bpr),e(tM,vpr),e(se,Fpr),e(se,aM),e(aM,V7e),e(V7e,Tpr),e(aM,Mpr),e(aM,bQ),e(bQ,Epr),e(aM,Cpr),e(se,wpr),e(se,nM),e(nM,X7e),e(X7e,Apr),e(nM,ypr),e(nM,vQ),e(vQ,Lpr),e(nM,xpr),e(se,$pr),e(se,sM),e(sM,z7e),e(z7e,kpr),e(sM,Spr),e(sM,FQ),e(FQ,Rpr),e(sM,Ppr),e(se,Bpr),e(se,lM),e(lM,W7e),e(W7e,Ipr),e(lM,Npr),e(lM,TQ),e(TQ,qpr),e(lM,jpr),e(se,Dpr),e(se,iM),e(iM,Q7e),e(Q7e,Gpr),e(iM,Opr),e(iM,MQ),e(MQ,Vpr),e(iM,Xpr),e(se,zpr),e(se,dM),e(dM,H7e),e(H7e,Wpr),e(dM,Qpr),e(dM,EQ),e(EQ,Hpr),e(dM,Upr),e(se,Jpr),e(se,cM),e(cM,U7e),e(U7e,Ypr),e(cM,Kpr),e(cM,CQ),e(CQ,Zpr),e(cM,e_r),e(se,o_r),e(se,fM),e(fM,J7e),e(J7e,r_r),e(fM,t_r),e(fM,wQ),e(wQ,a_r),e(fM,n_r),e(se,s_r),e(se,mM),e(mM,Y7e),e(Y7e,l_r),e(mM,i_r),e(mM,AQ),e(AQ,d_r),e(mM,c_r),e(se,f_r),e(se,gM),e(gM,K7e),e(K7e,m_r),e(gM,g_r),e(gM,yQ),e(yQ,h_r),e(gM,p_r),e(se,__r),e(se,hM),e(hM,Z7e),e(Z7e,u_r),e(hM,b_r),e(hM,LQ),e(LQ,v_r),e(hM,F_r),e(se,T_r),e(se,pM),e(pM,ebe),e(ebe,M_r),e(pM,E_r),e(pM,xQ),e(xQ,C_r),e(pM,w_r),e(se,A_r),e(se,_M),e(_M,obe),e(obe,y_r),e(_M,L_r),e(_M,$Q),e($Q,x_r),e(_M,$_r),e(se,k_r),e(se,uM),e(uM,rbe),e(rbe,S_r),e(uM,R_r),e(uM,kQ),e(kQ,P_r),e(uM,B_r),e(se,I_r),e(se,bM),e(bM,tbe),e(tbe,N_r),e(bM,q_r),e(bM,SQ),e(SQ,j_r),e(bM,D_r),e(se,G_r),e(se,vM),e(vM,abe),e(abe,O_r),e(vM,V_r),e(vM,RQ),e(RQ,X_r),e(vM,z_r),e(se,W_r),e(se,FM),e(FM,nbe),e(nbe,Q_r),e(FM,H_r),e(FM,PQ),e(PQ,U_r),e(FM,J_r),e(se,Y_r),e(se,TM),e(TM,sbe),e(sbe,K_r),e(TM,Z_r),e(TM,BQ),e(BQ,eur),e(TM,our),e(se,rur),e(se,MM),e(MM,lbe),e(lbe,tur),e(MM,aur),e(MM,IQ),e(IQ,nur),e(MM,sur),e(Ar,lur),M(EM,Ar,null),b(f,yje,u),b(f,Qd,u),e(Qd,CM),e(CM,ibe),M(E8,ibe,null),e(Qd,iur),e(Qd,dbe),e(dbe,dur),b(f,Lje,u),b(f,Zo,u),M(C8,Zo,null),e(Zo,cur),e(Zo,Hd),e(Hd,fur),e(Hd,NQ),e(NQ,mur),e(Hd,gur),e(Hd,qQ),e(qQ,hur),e(Hd,pur),e(Zo,_ur),e(Zo,w8),e(w8,uur),e(w8,cbe),e(cbe,bur),e(w8,vur),e(Zo,Fur),e(Zo,xt),M(A8,xt,null),e(xt,Tur),e(xt,fbe),e(fbe,Mur),e(xt,Eur),e(xt,Ud),e(Ud,Cur),e(Ud,mbe),e(mbe,wur),e(Ud,Aur),e(Ud,jQ),e(jQ,yur),e(Ud,Lur),e(xt,xur),M(wM,xt,null),e(Zo,$ur),e(Zo,yr),M(y8,yr,null),e(yr,kur),e(yr,gbe),e(gbe,Sur),e(yr,Rur),e(yr,en),e(en,Pur),e(en,hbe),e(hbe,Bur),e(en,Iur),e(en,pbe),e(pbe,Nur),e(en,qur),e(en,_be),e(_be,jur),e(en,Dur),e(yr,Gur),e(yr,Me),e(Me,AM),e(AM,ube),e(ube,Our),e(AM,Vur),e(AM,DQ),e(DQ,Xur),e(AM,zur),e(Me,Wur),e(Me,yM),e(yM,bbe),e(bbe,Qur),e(yM,Hur),e(yM,GQ),e(GQ,Uur),e(yM,Jur),e(Me,Yur),e(Me,LM),e(LM,vbe),e(vbe,Kur),e(LM,Zur),e(LM,OQ),e(OQ,e4r),e(LM,o4r),e(Me,r4r),e(Me,xM),e(xM,Fbe),e(Fbe,t4r),e(xM,a4r),e(xM,VQ),e(VQ,n4r),e(xM,s4r),e(Me,l4r),e(Me,$M),e($M,Tbe),e(Tbe,i4r),e($M,d4r),e($M,XQ),e(XQ,c4r),e($M,f4r),e(Me,m4r),e(Me,kM),e(kM,Mbe),e(Mbe,g4r),e(kM,h4r),e(kM,zQ),e(zQ,p4r),e(kM,_4r),e(Me,u4r),e(Me,SM),e(SM,Ebe),e(Ebe,b4r),e(SM,v4r),e(SM,WQ),e(WQ,F4r),e(SM,T4r),e(Me,M4r),e(Me,RM),e(RM,Cbe),e(Cbe,E4r),e(RM,C4r),e(RM,QQ),e(QQ,w4r),e(RM,A4r),e(Me,y4r),e(Me,PM),e(PM,wbe),e(wbe,L4r),e(PM,x4r),e(PM,HQ),e(HQ,$4r),e(PM,k4r),e(Me,S4r),e(Me,BM),e(BM,Abe),e(Abe,R4r),e(BM,P4r),e(BM,UQ),e(UQ,B4r),e(BM,I4r),e(Me,N4r),e(Me,IM),e(IM,ybe),e(ybe,q4r),e(IM,j4r),e(IM,JQ),e(JQ,D4r),e(IM,G4r),e(Me,O4r),e(Me,NM),e(NM,Lbe),e(Lbe,V4r),e(NM,X4r),e(NM,YQ),e(YQ,z4r),e(NM,W4r),e(yr,Q4r),M(qM,yr,null),b(f,xje,u),b(f,Jd,u),e(Jd,jM),e(jM,xbe),M(L8,xbe,null),e(Jd,H4r),e(Jd,$be),e($be,U4r),b(f,$je,u),b(f,er,u),M(x8,er,null),e(er,J4r),e(er,Yd),e(Yd,Y4r),e(Yd,KQ),e(KQ,K4r),e(Yd,Z4r),e(Yd,ZQ),e(ZQ,e1r),e(Yd,o1r),e(er,r1r),e(er,$8),e($8,t1r),e($8,kbe),e(kbe,a1r),e($8,n1r),e(er,s1r),e(er,$t),M(k8,$t,null),e($t,l1r),e($t,Sbe),e(Sbe,i1r),e($t,d1r),e($t,Kd),e(Kd,c1r),e(Kd,Rbe),e(Rbe,f1r),e(Kd,m1r),e(Kd,eH),e(eH,g1r),e(Kd,h1r),e($t,p1r),M(DM,$t,null),e(er,_1r),e(er,Lr),M(S8,Lr,null),e(Lr,u1r),e(Lr,Pbe),e(Pbe,b1r),e(Lr,v1r),e(Lr,on),e(on,F1r),e(on,Bbe),e(Bbe,T1r),e(on,M1r),e(on,Ibe),e(Ibe,E1r),e(on,C1r),e(on,Nbe),e(Nbe,w1r),e(on,A1r),e(Lr,y1r),e(Lr,rn),e(rn,GM),e(GM,qbe),e(qbe,L1r),e(GM,x1r),e(GM,oH),e(oH,$1r),e(GM,k1r),e(rn,S1r),e(rn,OM),e(OM,jbe),e(jbe,R1r),e(OM,P1r),e(OM,rH),e(rH,B1r),e(OM,I1r),e(rn,N1r),e(rn,VM),e(VM,Dbe),e(Dbe,q1r),e(VM,j1r),e(VM,tH),e(tH,D1r),e(VM,G1r),e(rn,O1r),e(rn,XM),e(XM,Gbe),e(Gbe,V1r),e(XM,X1r),e(XM,aH),e(aH,z1r),e(XM,W1r),e(Lr,Q1r),M(zM,Lr,null),b(f,kje,u),b(f,Zd,u),e(Zd,WM),e(WM,Obe),M(R8,Obe,null),e(Zd,H1r),e(Zd,Vbe),e(Vbe,U1r),b(f,Sje,u),b(f,or,u),M(P8,or,null),e(or,J1r),e(or,ec),e(ec,Y1r),e(ec,nH),e(nH,K1r),e(ec,Z1r),e(ec,sH),e(sH,e7r),e(ec,o7r),e(or,r7r),e(or,B8),e(B8,t7r),e(B8,Xbe),e(Xbe,a7r),e(B8,n7r),e(or,s7r),e(or,kt),M(I8,kt,null),e(kt,l7r),e(kt,zbe),e(zbe,i7r),e(kt,d7r),e(kt,oc),e(oc,c7r),e(oc,Wbe),e(Wbe,f7r),e(oc,m7r),e(oc,lH),e(lH,g7r),e(oc,h7r),e(kt,p7r),M(QM,kt,null),e(or,_7r),e(or,xr),M(N8,xr,null),e(xr,u7r),e(xr,Qbe),e(Qbe,b7r),e(xr,v7r),e(xr,tn),e(tn,F7r),e(tn,Hbe),e(Hbe,T7r),e(tn,M7r),e(tn,Ube),e(Ube,E7r),e(tn,C7r),e(tn,Jbe),e(Jbe,w7r),e(tn,A7r),e(xr,y7r),e(xr,ie),e(ie,HM),e(HM,Ybe),e(Ybe,L7r),e(HM,x7r),e(HM,iH),e(iH,$7r),e(HM,k7r),e(ie,S7r),e(ie,UM),e(UM,Kbe),e(Kbe,R7r),e(UM,P7r),e(UM,dH),e(dH,B7r),e(UM,I7r),e(ie,N7r),e(ie,JM),e(JM,Zbe),e(Zbe,q7r),e(JM,j7r),e(JM,cH),e(cH,D7r),e(JM,G7r),e(ie,O7r),e(ie,YM),e(YM,e2e),e(e2e,V7r),e(YM,X7r),e(YM,fH),e(fH,z7r),e(YM,W7r),e(ie,Q7r),e(ie,KM),e(KM,o2e),e(o2e,H7r),e(KM,U7r),e(KM,mH),e(mH,J7r),e(KM,Y7r),e(ie,K7r),e(ie,ZM),e(ZM,r2e),e(r2e,Z7r),e(ZM,ebr),e(ZM,gH),e(gH,obr),e(ZM,rbr),e(ie,tbr),e(ie,eE),e(eE,t2e),e(t2e,abr),e(eE,nbr),e(eE,hH),e(hH,sbr),e(eE,lbr),e(ie,ibr),e(ie,oE),e(oE,a2e),e(a2e,dbr),e(oE,cbr),e(oE,pH),e(pH,fbr),e(oE,mbr),e(ie,gbr),e(ie,rE),e(rE,n2e),e(n2e,hbr),e(rE,pbr),e(rE,_H),e(_H,_br),e(rE,ubr),e(ie,bbr),e(ie,tE),e(tE,s2e),e(s2e,vbr),e(tE,Fbr),e(tE,uH),e(uH,Tbr),e(tE,Mbr),e(ie,Ebr),e(ie,aE),e(aE,l2e),e(l2e,Cbr),e(aE,wbr),e(aE,bH),e(bH,Abr),e(aE,ybr),e(ie,Lbr),e(ie,nE),e(nE,i2e),e(i2e,xbr),e(nE,$br),e(nE,vH),e(vH,kbr),e(nE,Sbr),e(ie,Rbr),e(ie,sE),e(sE,d2e),e(d2e,Pbr),e(sE,Bbr),e(sE,FH),e(FH,Ibr),e(sE,Nbr),e(ie,qbr),e(ie,lE),e(lE,c2e),e(c2e,jbr),e(lE,Dbr),e(lE,TH),e(TH,Gbr),e(lE,Obr),e(ie,Vbr),e(ie,iE),e(iE,f2e),e(f2e,Xbr),e(iE,zbr),e(iE,MH),e(MH,Wbr),e(iE,Qbr),e(ie,Hbr),e(ie,dE),e(dE,m2e),e(m2e,Ubr),e(dE,Jbr),e(dE,EH),e(EH,Ybr),e(dE,Kbr),e(ie,Zbr),e(ie,cE),e(cE,g2e),e(g2e,e2r),e(cE,o2r),e(cE,CH),e(CH,r2r),e(cE,t2r),e(ie,a2r),e(ie,fE),e(fE,h2e),e(h2e,n2r),e(fE,s2r),e(fE,wH),e(wH,l2r),e(fE,i2r),e(ie,d2r),e(ie,mE),e(mE,p2e),e(p2e,c2r),e(mE,f2r),e(mE,AH),e(AH,m2r),e(mE,g2r),e(ie,h2r),e(ie,gE),e(gE,_2e),e(_2e,p2r),e(gE,_2r),e(gE,yH),e(yH,u2r),e(gE,b2r),e(xr,v2r),M(hE,xr,null),b(f,Rje,u),b(f,rc,u),e(rc,pE),e(pE,u2e),M(q8,u2e,null),e(rc,F2r),e(rc,b2e),e(b2e,T2r),b(f,Pje,u),b(f,rr,u),M(j8,rr,null),e(rr,M2r),e(rr,tc),e(tc,E2r),e(tc,LH),e(LH,C2r),e(tc,w2r),e(tc,xH),e(xH,A2r),e(tc,y2r),e(rr,L2r),e(rr,D8),e(D8,x2r),e(D8,v2e),e(v2e,$2r),e(D8,k2r),e(rr,S2r),e(rr,St),M(G8,St,null),e(St,R2r),e(St,F2e),e(F2e,P2r),e(St,B2r),e(St,ac),e(ac,I2r),e(ac,T2e),e(T2e,N2r),e(ac,q2r),e(ac,$H),e($H,j2r),e(ac,D2r),e(St,G2r),M(_E,St,null),e(rr,O2r),e(rr,$r),M(O8,$r,null),e($r,V2r),e($r,M2e),e(M2e,X2r),e($r,z2r),e($r,an),e(an,W2r),e(an,E2e),e(E2e,Q2r),e(an,H2r),e(an,C2e),e(C2e,U2r),e(an,J2r),e(an,w2e),e(w2e,Y2r),e(an,K2r),e($r,Z2r),e($r,ye),e(ye,uE),e(uE,A2e),e(A2e,evr),e(uE,ovr),e(uE,kH),e(kH,rvr),e(uE,tvr),e(ye,avr),e(ye,bE),e(bE,y2e),e(y2e,nvr),e(bE,svr),e(bE,SH),e(SH,lvr),e(bE,ivr),e(ye,dvr),e(ye,vE),e(vE,L2e),e(L2e,cvr),e(vE,fvr),e(vE,RH),e(RH,mvr),e(vE,gvr),e(ye,hvr),e(ye,FE),e(FE,x2e),e(x2e,pvr),e(FE,_vr),e(FE,PH),e(PH,uvr),e(FE,bvr),e(ye,vvr),e(ye,TE),e(TE,$2e),e($2e,Fvr),e(TE,Tvr),e(TE,BH),e(BH,Mvr),e(TE,Evr),e(ye,Cvr),e(ye,ME),e(ME,k2e),e(k2e,wvr),e(ME,Avr),e(ME,IH),e(IH,yvr),e(ME,Lvr),e(ye,xvr),e(ye,EE),e(EE,S2e),e(S2e,$vr),e(EE,kvr),e(EE,NH),e(NH,Svr),e(EE,Rvr),e(ye,Pvr),e(ye,CE),e(CE,R2e),e(R2e,Bvr),e(CE,Ivr),e(CE,qH),e(qH,Nvr),e(CE,qvr),e(ye,jvr),e(ye,wE),e(wE,P2e),e(P2e,Dvr),e(wE,Gvr),e(wE,jH),e(jH,Ovr),e(wE,Vvr),e(ye,Xvr),e(ye,AE),e(AE,B2e),e(B2e,zvr),e(AE,Wvr),e(AE,DH),e(DH,Qvr),e(AE,Hvr),e($r,Uvr),M(yE,$r,null),b(f,Bje,u),b(f,nc,u),e(nc,LE),e(LE,I2e),M(V8,I2e,null),e(nc,Jvr),e(nc,N2e),e(N2e,Yvr),b(f,Ije,u),b(f,tr,u),M(X8,tr,null),e(tr,Kvr),e(tr,sc),e(sc,Zvr),e(sc,GH),e(GH,eFr),e(sc,oFr),e(sc,OH),e(OH,rFr),e(sc,tFr),e(tr,aFr),e(tr,z8),e(z8,nFr),e(z8,q2e),e(q2e,sFr),e(z8,lFr),e(tr,iFr),e(tr,Rt),M(W8,Rt,null),e(Rt,dFr),e(Rt,j2e),e(j2e,cFr),e(Rt,fFr),e(Rt,lc),e(lc,mFr),e(lc,D2e),e(D2e,gFr),e(lc,hFr),e(lc,VH),e(VH,pFr),e(lc,_Fr),e(Rt,uFr),M(xE,Rt,null),e(tr,bFr),e(tr,kr),M(Q8,kr,null),e(kr,vFr),e(kr,G2e),e(G2e,FFr),e(kr,TFr),e(kr,nn),e(nn,MFr),e(nn,O2e),e(O2e,EFr),e(nn,CFr),e(nn,V2e),e(V2e,wFr),e(nn,AFr),e(nn,X2e),e(X2e,yFr),e(nn,LFr),e(kr,xFr),e(kr,oe),e(oe,$E),e($E,z2e),e(z2e,$Fr),e($E,kFr),e($E,XH),e(XH,SFr),e($E,RFr),e(oe,PFr),e(oe,kE),e(kE,W2e),e(W2e,BFr),e(kE,IFr),e(kE,zH),e(zH,NFr),e(kE,qFr),e(oe,jFr),e(oe,SE),e(SE,Q2e),e(Q2e,DFr),e(SE,GFr),e(SE,WH),e(WH,OFr),e(SE,VFr),e(oe,XFr),e(oe,RE),e(RE,H2e),e(H2e,zFr),e(RE,WFr),e(RE,QH),e(QH,QFr),e(RE,HFr),e(oe,UFr),e(oe,PE),e(PE,U2e),e(U2e,JFr),e(PE,YFr),e(PE,HH),e(HH,KFr),e(PE,ZFr),e(oe,eTr),e(oe,BE),e(BE,J2e),e(J2e,oTr),e(BE,rTr),e(BE,UH),e(UH,tTr),e(BE,aTr),e(oe,nTr),e(oe,IE),e(IE,Y2e),e(Y2e,sTr),e(IE,lTr),e(IE,JH),e(JH,iTr),e(IE,dTr),e(oe,cTr),e(oe,NE),e(NE,K2e),e(K2e,fTr),e(NE,mTr),e(NE,YH),e(YH,gTr),e(NE,hTr),e(oe,pTr),e(oe,qE),e(qE,Z2e),e(Z2e,_Tr),e(qE,uTr),e(qE,KH),e(KH,bTr),e(qE,vTr),e(oe,FTr),e(oe,jE),e(jE,eve),e(eve,TTr),e(jE,MTr),e(jE,ZH),e(ZH,ETr),e(jE,CTr),e(oe,wTr),e(oe,DE),e(DE,ove),e(ove,ATr),e(DE,yTr),e(DE,eU),e(eU,LTr),e(DE,xTr),e(oe,$Tr),e(oe,GE),e(GE,rve),e(rve,kTr),e(GE,STr),e(GE,oU),e(oU,RTr),e(GE,PTr),e(oe,BTr),e(oe,OE),e(OE,tve),e(tve,ITr),e(OE,NTr),e(OE,rU),e(rU,qTr),e(OE,jTr),e(oe,DTr),e(oe,VE),e(VE,ave),e(ave,GTr),e(VE,OTr),e(VE,tU),e(tU,VTr),e(VE,XTr),e(oe,zTr),e(oe,XE),e(XE,nve),e(nve,WTr),e(XE,QTr),e(XE,aU),e(aU,HTr),e(XE,UTr),e(oe,JTr),e(oe,zE),e(zE,sve),e(sve,YTr),e(zE,KTr),e(zE,nU),e(nU,ZTr),e(zE,eMr),e(oe,oMr),e(oe,WE),e(WE,lve),e(lve,rMr),e(WE,tMr),e(WE,sU),e(sU,aMr),e(WE,nMr),e(oe,sMr),e(oe,QE),e(QE,ive),e(ive,lMr),e(QE,iMr),e(QE,lU),e(lU,dMr),e(QE,cMr),e(oe,fMr),e(oe,HE),e(HE,dve),e(dve,mMr),e(HE,gMr),e(HE,iU),e(iU,hMr),e(HE,pMr),e(oe,_Mr),e(oe,UE),e(UE,cve),e(cve,uMr),e(UE,bMr),e(UE,dU),e(dU,vMr),e(UE,FMr),e(oe,TMr),e(oe,JE),e(JE,fve),e(fve,MMr),e(JE,EMr),e(JE,cU),e(cU,CMr),e(JE,wMr),e(oe,AMr),e(oe,YE),e(YE,mve),e(mve,yMr),e(YE,LMr),e(YE,fU),e(fU,xMr),e(YE,$Mr),e(oe,kMr),e(oe,KE),e(KE,gve),e(gve,SMr),e(KE,RMr),e(KE,mU),e(mU,PMr),e(KE,BMr),e(oe,IMr),e(oe,ZE),e(ZE,hve),e(hve,NMr),e(ZE,qMr),e(ZE,gU),e(gU,jMr),e(ZE,DMr),e(oe,GMr),e(oe,eC),e(eC,pve),e(pve,OMr),e(eC,VMr),e(eC,hU),e(hU,XMr),e(eC,zMr),e(oe,WMr),e(oe,oC),e(oC,_ve),e(_ve,QMr),e(oC,HMr),e(oC,pU),e(pU,UMr),e(oC,JMr),e(kr,YMr),M(rC,kr,null),b(f,Nje,u),b(f,ic,u),e(ic,tC),e(tC,uve),M(H8,uve,null),e(ic,KMr),e(ic,bve),e(bve,ZMr),b(f,qje,u),b(f,ar,u),M(U8,ar,null),e(ar,eEr),e(ar,dc),e(dc,oEr),e(dc,_U),e(_U,rEr),e(dc,tEr),e(dc,uU),e(uU,aEr),e(dc,nEr),e(ar,sEr),e(ar,J8),e(J8,lEr),e(J8,vve),e(vve,iEr),e(J8,dEr),e(ar,cEr),e(ar,Pt),M(Y8,Pt,null),e(Pt,fEr),e(Pt,Fve),e(Fve,mEr),e(Pt,gEr),e(Pt,cc),e(cc,hEr),e(cc,Tve),e(Tve,pEr),e(cc,_Er),e(cc,bU),e(bU,uEr),e(cc,bEr),e(Pt,vEr),M(aC,Pt,null),e(ar,FEr),e(ar,Sr),M(K8,Sr,null),e(Sr,TEr),e(Sr,Mve),e(Mve,MEr),e(Sr,EEr),e(Sr,sn),e(sn,CEr),e(sn,Eve),e(Eve,wEr),e(sn,AEr),e(sn,Cve),e(Cve,yEr),e(sn,LEr),e(sn,wve),e(wve,xEr),e(sn,$Er),e(Sr,kEr),e(Sr,pe),e(pe,nC),e(nC,Ave),e(Ave,SEr),e(nC,REr),e(nC,vU),e(vU,PEr),e(nC,BEr),e(pe,IEr),e(pe,sC),e(sC,yve),e(yve,NEr),e(sC,qEr),e(sC,FU),e(FU,jEr),e(sC,DEr),e(pe,GEr),e(pe,lC),e(lC,Lve),e(Lve,OEr),e(lC,VEr),e(lC,TU),e(TU,XEr),e(lC,zEr),e(pe,WEr),e(pe,iC),e(iC,xve),e(xve,QEr),e(iC,HEr),e(iC,MU),e(MU,UEr),e(iC,JEr),e(pe,YEr),e(pe,dC),e(dC,$ve),e($ve,KEr),e(dC,ZEr),e(dC,EU),e(EU,eCr),e(dC,oCr),e(pe,rCr),e(pe,cC),e(cC,kve),e(kve,tCr),e(cC,aCr),e(cC,CU),e(CU,nCr),e(cC,sCr),e(pe,lCr),e(pe,fC),e(fC,Sve),e(Sve,iCr),e(fC,dCr),e(fC,wU),e(wU,cCr),e(fC,fCr),e(pe,mCr),e(pe,mC),e(mC,Rve),e(Rve,gCr),e(mC,hCr),e(mC,AU),e(AU,pCr),e(mC,_Cr),e(pe,uCr),e(pe,gC),e(gC,Pve),e(Pve,bCr),e(gC,vCr),e(gC,yU),e(yU,FCr),e(gC,TCr),e(pe,MCr),e(pe,hC),e(hC,Bve),e(Bve,ECr),e(hC,CCr),e(hC,LU),e(LU,wCr),e(hC,ACr),e(pe,yCr),e(pe,pC),e(pC,Ive),e(Ive,LCr),e(pC,xCr),e(pC,xU),e(xU,$Cr),e(pC,kCr),e(pe,SCr),e(pe,_C),e(_C,Nve),e(Nve,RCr),e(_C,PCr),e(_C,$U),e($U,BCr),e(_C,ICr),e(pe,NCr),e(pe,uC),e(uC,qve),e(qve,qCr),e(uC,jCr),e(uC,kU),e(kU,DCr),e(uC,GCr),e(pe,OCr),e(pe,bC),e(bC,jve),e(jve,VCr),e(bC,XCr),e(bC,SU),e(SU,zCr),e(bC,WCr),e(pe,QCr),e(pe,vC),e(vC,Dve),e(Dve,HCr),e(vC,UCr),e(vC,RU),e(RU,JCr),e(vC,YCr),e(pe,KCr),e(pe,FC),e(FC,Gve),e(Gve,ZCr),e(FC,e5r),e(FC,PU),e(PU,o5r),e(FC,r5r),e(pe,t5r),e(pe,TC),e(TC,Ove),e(Ove,a5r),e(TC,n5r),e(TC,BU),e(BU,s5r),e(TC,l5r),e(Sr,i5r),M(MC,Sr,null),b(f,jje,u),b(f,fc,u),e(fc,EC),e(EC,Vve),M(Z8,Vve,null),e(fc,d5r),e(fc,Xve),e(Xve,c5r),b(f,Dje,u),b(f,nr,u),M(e9,nr,null),e(nr,f5r),e(nr,mc),e(mc,m5r),e(mc,IU),e(IU,g5r),e(mc,h5r),e(mc,NU),e(NU,p5r),e(mc,_5r),e(nr,u5r),e(nr,o9),e(o9,b5r),e(o9,zve),e(zve,v5r),e(o9,F5r),e(nr,T5r),e(nr,Bt),M(r9,Bt,null),e(Bt,M5r),e(Bt,Wve),e(Wve,E5r),e(Bt,C5r),e(Bt,gc),e(gc,w5r),e(gc,Qve),e(Qve,A5r),e(gc,y5r),e(gc,qU),e(qU,L5r),e(gc,x5r),e(Bt,$5r),M(CC,Bt,null),e(nr,k5r),e(nr,Rr),M(t9,Rr,null),e(Rr,S5r),e(Rr,Hve),e(Hve,R5r),e(Rr,P5r),e(Rr,ln),e(ln,B5r),e(ln,Uve),e(Uve,I5r),e(ln,N5r),e(ln,Jve),e(Jve,q5r),e(ln,j5r),e(ln,Yve),e(Yve,D5r),e(ln,G5r),e(Rr,O5r),e(Rr,a9),e(a9,wC),e(wC,Kve),e(Kve,V5r),e(wC,X5r),e(wC,jU),e(jU,z5r),e(wC,W5r),e(a9,Q5r),e(a9,AC),e(AC,Zve),e(Zve,H5r),e(AC,U5r),e(AC,DU),e(DU,J5r),e(AC,Y5r),e(Rr,K5r),M(yC,Rr,null),b(f,Gje,u),b(f,hc,u),e(hc,LC),e(LC,eFe),M(n9,eFe,null),e(hc,Z5r),e(hc,oFe),e(oFe,e3r),b(f,Oje,u),b(f,sr,u),M(s9,sr,null),e(sr,o3r),e(sr,pc),e(pc,r3r),e(pc,GU),e(GU,t3r),e(pc,a3r),e(pc,OU),e(OU,n3r),e(pc,s3r),e(sr,l3r),e(sr,l9),e(l9,i3r),e(l9,rFe),e(rFe,d3r),e(l9,c3r),e(sr,f3r),e(sr,It),M(i9,It,null),e(It,m3r),e(It,tFe),e(tFe,g3r),e(It,h3r),e(It,_c),e(_c,p3r),e(_c,aFe),e(aFe,_3r),e(_c,u3r),e(_c,VU),e(VU,b3r),e(_c,v3r),e(It,F3r),M(xC,It,null),e(sr,T3r),e(sr,Pr),M(d9,Pr,null),e(Pr,M3r),e(Pr,nFe),e(nFe,E3r),e(Pr,C3r),e(Pr,dn),e(dn,w3r),e(dn,sFe),e(sFe,A3r),e(dn,y3r),e(dn,lFe),e(lFe,L3r),e(dn,x3r),e(dn,iFe),e(iFe,$3r),e(dn,k3r),e(Pr,S3r),e(Pr,dFe),e(dFe,$C),e($C,cFe),e(cFe,R3r),e($C,P3r),e($C,XU),e(XU,B3r),e($C,I3r),e(Pr,N3r),M(kC,Pr,null),b(f,Vje,u),b(f,uc,u),e(uc,SC),e(SC,fFe),M(c9,fFe,null),e(uc,q3r),e(uc,mFe),e(mFe,j3r),b(f,Xje,u),b(f,lr,u),M(f9,lr,null),e(lr,D3r),e(lr,bc),e(bc,G3r),e(bc,zU),e(zU,O3r),e(bc,V3r),e(bc,WU),e(WU,X3r),e(bc,z3r),e(lr,W3r),e(lr,m9),e(m9,Q3r),e(m9,gFe),e(gFe,H3r),e(m9,U3r),e(lr,J3r),e(lr,Nt),M(g9,Nt,null),e(Nt,Y3r),e(Nt,hFe),e(hFe,K3r),e(Nt,Z3r),e(Nt,vc),e(vc,ewr),e(vc,pFe),e(pFe,owr),e(vc,rwr),e(vc,QU),e(QU,twr),e(vc,awr),e(Nt,nwr),M(RC,Nt,null),e(lr,swr),e(lr,Br),M(h9,Br,null),e(Br,lwr),e(Br,_Fe),e(_Fe,iwr),e(Br,dwr),e(Br,cn),e(cn,cwr),e(cn,uFe),e(uFe,fwr),e(cn,mwr),e(cn,bFe),e(bFe,gwr),e(cn,hwr),e(cn,vFe),e(vFe,pwr),e(cn,_wr),e(Br,uwr),e(Br,de),e(de,PC),e(PC,FFe),e(FFe,bwr),e(PC,vwr),e(PC,HU),e(HU,Fwr),e(PC,Twr),e(de,Mwr),e(de,BC),e(BC,TFe),e(TFe,Ewr),e(BC,Cwr),e(BC,UU),e(UU,wwr),e(BC,Awr),e(de,ywr),e(de,IC),e(IC,MFe),e(MFe,Lwr),e(IC,xwr),e(IC,JU),e(JU,$wr),e(IC,kwr),e(de,Swr),e(de,NC),e(NC,EFe),e(EFe,Rwr),e(NC,Pwr),e(NC,YU),e(YU,Bwr),e(NC,Iwr),e(de,Nwr),e(de,qC),e(qC,CFe),e(CFe,qwr),e(qC,jwr),e(qC,KU),e(KU,Dwr),e(qC,Gwr),e(de,Owr),e(de,jC),e(jC,wFe),e(wFe,Vwr),e(jC,Xwr),e(jC,ZU),e(ZU,zwr),e(jC,Wwr),e(de,Qwr),e(de,DC),e(DC,AFe),e(AFe,Hwr),e(DC,Uwr),e(DC,eJ),e(eJ,Jwr),e(DC,Ywr),e(de,Kwr),e(de,GC),e(GC,yFe),e(yFe,Zwr),e(GC,e0r),e(GC,oJ),e(oJ,o0r),e(GC,r0r),e(de,t0r),e(de,OC),e(OC,LFe),e(LFe,a0r),e(OC,n0r),e(OC,rJ),e(rJ,s0r),e(OC,l0r),e(de,i0r),e(de,VC),e(VC,xFe),e(xFe,d0r),e(VC,c0r),e(VC,tJ),e(tJ,f0r),e(VC,m0r),e(de,g0r),e(de,XC),e(XC,$Fe),e($Fe,h0r),e(XC,p0r),e(XC,aJ),e(aJ,_0r),e(XC,u0r),e(de,b0r),e(de,zC),e(zC,kFe),e(kFe,v0r),e(zC,F0r),e(zC,nJ),e(nJ,T0r),e(zC,M0r),e(de,E0r),e(de,WC),e(WC,SFe),e(SFe,C0r),e(WC,w0r),e(WC,sJ),e(sJ,A0r),e(WC,y0r),e(de,L0r),e(de,QC),e(QC,RFe),e(RFe,x0r),e(QC,$0r),e(QC,lJ),e(lJ,k0r),e(QC,S0r),e(de,R0r),e(de,HC),e(HC,PFe),e(PFe,P0r),e(HC,B0r),e(HC,iJ),e(iJ,I0r),e(HC,N0r),e(de,q0r),e(de,UC),e(UC,BFe),e(BFe,j0r),e(UC,D0r),e(UC,dJ),e(dJ,G0r),e(UC,O0r),e(de,V0r),e(de,JC),e(JC,IFe),e(IFe,X0r),e(JC,z0r),e(JC,cJ),e(cJ,W0r),e(JC,Q0r),e(de,H0r),e(de,YC),e(YC,NFe),e(NFe,U0r),e(YC,J0r),e(YC,fJ),e(fJ,Y0r),e(YC,K0r),e(de,Z0r),e(de,KC),e(KC,qFe),e(qFe,e6r),e(KC,o6r),e(KC,mJ),e(mJ,r6r),e(KC,t6r),e(de,a6r),e(de,ZC),e(ZC,jFe),e(jFe,n6r),e(ZC,s6r),e(ZC,gJ),e(gJ,l6r),e(ZC,i6r),e(Br,d6r),M(e5,Br,null),b(f,zje,u),b(f,Fc,u),e(Fc,o5),e(o5,DFe),M(p9,DFe,null),e(Fc,c6r),e(Fc,GFe),e(GFe,f6r),b(f,Wje,u),b(f,ir,u),M(_9,ir,null),e(ir,m6r),e(ir,Tc),e(Tc,g6r),e(Tc,hJ),e(hJ,h6r),e(Tc,p6r),e(Tc,pJ),e(pJ,_6r),e(Tc,u6r),e(ir,b6r),e(ir,u9),e(u9,v6r),e(u9,OFe),e(OFe,F6r),e(u9,T6r),e(ir,M6r),e(ir,qt),M(b9,qt,null),e(qt,E6r),e(qt,VFe),e(VFe,C6r),e(qt,w6r),e(qt,Mc),e(Mc,A6r),e(Mc,XFe),e(XFe,y6r),e(Mc,L6r),e(Mc,_J),e(_J,x6r),e(Mc,$6r),e(qt,k6r),M(r5,qt,null),e(ir,S6r),e(ir,Ir),M(v9,Ir,null),e(Ir,R6r),e(Ir,zFe),e(zFe,P6r),e(Ir,B6r),e(Ir,fn),e(fn,I6r),e(fn,WFe),e(WFe,N6r),e(fn,q6r),e(fn,QFe),e(QFe,j6r),e(fn,D6r),e(fn,HFe),e(HFe,G6r),e(fn,O6r),e(Ir,V6r),e(Ir,ce),e(ce,t5),e(t5,UFe),e(UFe,X6r),e(t5,z6r),e(t5,uJ),e(uJ,W6r),e(t5,Q6r),e(ce,H6r),e(ce,a5),e(a5,JFe),e(JFe,U6r),e(a5,J6r),e(a5,bJ),e(bJ,Y6r),e(a5,K6r),e(ce,Z6r),e(ce,n5),e(n5,YFe),e(YFe,eAr),e(n5,oAr),e(n5,vJ),e(vJ,rAr),e(n5,tAr),e(ce,aAr),e(ce,s5),e(s5,KFe),e(KFe,nAr),e(s5,sAr),e(s5,FJ),e(FJ,lAr),e(s5,iAr),e(ce,dAr),e(ce,l5),e(l5,ZFe),e(ZFe,cAr),e(l5,fAr),e(l5,TJ),e(TJ,mAr),e(l5,gAr),e(ce,hAr),e(ce,i5),e(i5,eTe),e(eTe,pAr),e(i5,_Ar),e(i5,MJ),e(MJ,uAr),e(i5,bAr),e(ce,vAr),e(ce,d5),e(d5,oTe),e(oTe,FAr),e(d5,TAr),e(d5,EJ),e(EJ,MAr),e(d5,EAr),e(ce,CAr),e(ce,c5),e(c5,rTe),e(rTe,wAr),e(c5,AAr),e(c5,CJ),e(CJ,yAr),e(c5,LAr),e(ce,xAr),e(ce,f5),e(f5,tTe),e(tTe,$Ar),e(f5,kAr),e(f5,wJ),e(wJ,SAr),e(f5,RAr),e(ce,PAr),e(ce,m5),e(m5,aTe),e(aTe,BAr),e(m5,IAr),e(m5,AJ),e(AJ,NAr),e(m5,qAr),e(ce,jAr),e(ce,g5),e(g5,nTe),e(nTe,DAr),e(g5,GAr),e(g5,yJ),e(yJ,OAr),e(g5,VAr),e(ce,XAr),e(ce,h5),e(h5,sTe),e(sTe,zAr),e(h5,WAr),e(h5,LJ),e(LJ,QAr),e(h5,HAr),e(ce,UAr),e(ce,p5),e(p5,lTe),e(lTe,JAr),e(p5,YAr),e(p5,xJ),e(xJ,KAr),e(p5,ZAr),e(ce,eyr),e(ce,_5),e(_5,iTe),e(iTe,oyr),e(_5,ryr),e(_5,$J),e($J,tyr),e(_5,ayr),e(ce,nyr),e(ce,u5),e(u5,dTe),e(dTe,syr),e(u5,lyr),e(u5,kJ),e(kJ,iyr),e(u5,dyr),e(ce,cyr),e(ce,b5),e(b5,cTe),e(cTe,fyr),e(b5,myr),e(b5,SJ),e(SJ,gyr),e(b5,hyr),e(ce,pyr),e(ce,v5),e(v5,fTe),e(fTe,_yr),e(v5,uyr),e(v5,RJ),e(RJ,byr),e(v5,vyr),e(ce,Fyr),e(ce,F5),e(F5,mTe),e(mTe,Tyr),e(F5,Myr),e(F5,PJ),e(PJ,Eyr),e(F5,Cyr),e(ce,wyr),e(ce,T5),e(T5,gTe),e(gTe,Ayr),e(T5,yyr),e(T5,BJ),e(BJ,Lyr),e(T5,xyr),e(ce,$yr),e(ce,M5),e(M5,hTe),e(hTe,kyr),e(M5,Syr),e(M5,IJ),e(IJ,Ryr),e(M5,Pyr),e(Ir,Byr),M(E5,Ir,null),b(f,Qje,u),b(f,Ec,u),e(Ec,C5),e(C5,pTe),M(F9,pTe,null),e(Ec,Iyr),e(Ec,_Te),e(_Te,Nyr),b(f,Hje,u),b(f,dr,u),M(T9,dr,null),e(dr,qyr),e(dr,Cc),e(Cc,jyr),e(Cc,NJ),e(NJ,Dyr),e(Cc,Gyr),e(Cc,qJ),e(qJ,Oyr),e(Cc,Vyr),e(dr,Xyr),e(dr,M9),e(M9,zyr),e(M9,uTe),e(uTe,Wyr),e(M9,Qyr),e(dr,Hyr),e(dr,jt),M(E9,jt,null),e(jt,Uyr),e(jt,bTe),e(bTe,Jyr),e(jt,Yyr),e(jt,wc),e(wc,Kyr),e(wc,vTe),e(vTe,Zyr),e(wc,eLr),e(wc,jJ),e(jJ,oLr),e(wc,rLr),e(jt,tLr),M(w5,jt,null),e(dr,aLr),e(dr,Nr),M(C9,Nr,null),e(Nr,nLr),e(Nr,FTe),e(FTe,sLr),e(Nr,lLr),e(Nr,mn),e(mn,iLr),e(mn,TTe),e(TTe,dLr),e(mn,cLr),e(mn,MTe),e(MTe,fLr),e(mn,mLr),e(mn,ETe),e(ETe,gLr),e(mn,hLr),e(Nr,pLr),e(Nr,CTe),e(CTe,A5),e(A5,wTe),e(wTe,_Lr),e(A5,uLr),e(A5,DJ),e(DJ,bLr),e(A5,vLr),e(Nr,FLr),M(y5,Nr,null),b(f,Uje,u),b(f,Ac,u),e(Ac,L5),e(L5,ATe),M(w9,ATe,null),e(Ac,TLr),e(Ac,yTe),e(yTe,MLr),b(f,Jje,u),b(f,cr,u),M(A9,cr,null),e(cr,ELr),e(cr,yc),e(yc,CLr),e(yc,GJ),e(GJ,wLr),e(yc,ALr),e(yc,OJ),e(OJ,yLr),e(yc,LLr),e(cr,xLr),e(cr,y9),e(y9,$Lr),e(y9,LTe),e(LTe,kLr),e(y9,SLr),e(cr,RLr),e(cr,Dt),M(L9,Dt,null),e(Dt,PLr),e(Dt,xTe),e(xTe,BLr),e(Dt,ILr),e(Dt,Lc),e(Lc,NLr),e(Lc,$Te),e($Te,qLr),e(Lc,jLr),e(Lc,VJ),e(VJ,DLr),e(Lc,GLr),e(Dt,OLr),M(x5,Dt,null),e(cr,VLr),e(cr,qr),M(x9,qr,null),e(qr,XLr),e(qr,kTe),e(kTe,zLr),e(qr,WLr),e(qr,gn),e(gn,QLr),e(gn,STe),e(STe,HLr),e(gn,ULr),e(gn,RTe),e(RTe,JLr),e(gn,YLr),e(gn,PTe),e(PTe,KLr),e(gn,ZLr),e(qr,e8r),e(qr,BTe),e(BTe,$5),e($5,ITe),e(ITe,o8r),e($5,r8r),e($5,XJ),e(XJ,t8r),e($5,a8r),e(qr,n8r),M(k5,qr,null),b(f,Yje,u),b(f,xc,u),e(xc,S5),e(S5,NTe),M($9,NTe,null),e(xc,s8r),e(xc,qTe),e(qTe,l8r),b(f,Kje,u),b(f,fr,u),M(k9,fr,null),e(fr,i8r),e(fr,$c),e($c,d8r),e($c,zJ),e(zJ,c8r),e($c,f8r),e($c,WJ),e(WJ,m8r),e($c,g8r),e(fr,h8r),e(fr,S9),e(S9,p8r),e(S9,jTe),e(jTe,_8r),e(S9,u8r),e(fr,b8r),e(fr,Gt),M(R9,Gt,null),e(Gt,v8r),e(Gt,DTe),e(DTe,F8r),e(Gt,T8r),e(Gt,kc),e(kc,M8r),e(kc,GTe),e(GTe,E8r),e(kc,C8r),e(kc,QJ),e(QJ,w8r),e(kc,A8r),e(Gt,y8r),M(R5,Gt,null),e(fr,L8r),e(fr,jr),M(P9,jr,null),e(jr,x8r),e(jr,OTe),e(OTe,$8r),e(jr,k8r),e(jr,hn),e(hn,S8r),e(hn,VTe),e(VTe,R8r),e(hn,P8r),e(hn,XTe),e(XTe,B8r),e(hn,I8r),e(hn,zTe),e(zTe,N8r),e(hn,q8r),e(jr,j8r),e(jr,te),e(te,P5),e(P5,WTe),e(WTe,D8r),e(P5,G8r),e(P5,HJ),e(HJ,O8r),e(P5,V8r),e(te,X8r),e(te,B5),e(B5,QTe),e(QTe,z8r),e(B5,W8r),e(B5,UJ),e(UJ,Q8r),e(B5,H8r),e(te,U8r),e(te,I5),e(I5,HTe),e(HTe,J8r),e(I5,Y8r),e(I5,JJ),e(JJ,K8r),e(I5,Z8r),e(te,e9r),e(te,N5),e(N5,UTe),e(UTe,o9r),e(N5,r9r),e(N5,YJ),e(YJ,t9r),e(N5,a9r),e(te,n9r),e(te,q5),e(q5,JTe),e(JTe,s9r),e(q5,l9r),e(q5,KJ),e(KJ,i9r),e(q5,d9r),e(te,c9r),e(te,j5),e(j5,YTe),e(YTe,f9r),e(j5,m9r),e(j5,ZJ),e(ZJ,g9r),e(j5,h9r),e(te,p9r),e(te,D5),e(D5,KTe),e(KTe,_9r),e(D5,u9r),e(D5,eY),e(eY,b9r),e(D5,v9r),e(te,F9r),e(te,G5),e(G5,ZTe),e(ZTe,T9r),e(G5,M9r),e(G5,oY),e(oY,E9r),e(G5,C9r),e(te,w9r),e(te,O5),e(O5,eMe),e(eMe,A9r),e(O5,y9r),e(O5,rY),e(rY,L9r),e(O5,x9r),e(te,$9r),e(te,V5),e(V5,oMe),e(oMe,k9r),e(V5,S9r),e(V5,tY),e(tY,R9r),e(V5,P9r),e(te,B9r),e(te,X5),e(X5,rMe),e(rMe,I9r),e(X5,N9r),e(X5,aY),e(aY,q9r),e(X5,j9r),e(te,D9r),e(te,z5),e(z5,tMe),e(tMe,G9r),e(z5,O9r),e(z5,nY),e(nY,V9r),e(z5,X9r),e(te,z9r),e(te,W5),e(W5,aMe),e(aMe,W9r),e(W5,Q9r),e(W5,sY),e(sY,H9r),e(W5,U9r),e(te,J9r),e(te,Q5),e(Q5,nMe),e(nMe,Y9r),e(Q5,K9r),e(Q5,lY),e(lY,Z9r),e(Q5,exr),e(te,oxr),e(te,H5),e(H5,sMe),e(sMe,rxr),e(H5,txr),e(H5,iY),e(iY,axr),e(H5,nxr),e(te,sxr),e(te,U5),e(U5,lMe),e(lMe,lxr),e(U5,ixr),e(U5,dY),e(dY,dxr),e(U5,cxr),e(te,fxr),e(te,J5),e(J5,iMe),e(iMe,mxr),e(J5,gxr),e(J5,cY),e(cY,hxr),e(J5,pxr),e(te,_xr),e(te,Y5),e(Y5,dMe),e(dMe,uxr),e(Y5,bxr),e(Y5,fY),e(fY,vxr),e(Y5,Fxr),e(te,Txr),e(te,K5),e(K5,cMe),e(cMe,Mxr),e(K5,Exr),e(K5,mY),e(mY,Cxr),e(K5,wxr),e(te,Axr),e(te,Z5),e(Z5,fMe),e(fMe,yxr),e(Z5,Lxr),e(Z5,gY),e(gY,xxr),e(Z5,$xr),e(te,kxr),e(te,e3),e(e3,mMe),e(mMe,Sxr),e(e3,Rxr),e(e3,hY),e(hY,Pxr),e(e3,Bxr),e(te,Ixr),e(te,o3),e(o3,gMe),e(gMe,Nxr),e(o3,qxr),e(o3,pY),e(pY,jxr),e(o3,Dxr),e(te,Gxr),e(te,r3),e(r3,hMe),e(hMe,Oxr),e(r3,Vxr),e(r3,_Y),e(_Y,Xxr),e(r3,zxr),e(te,Wxr),e(te,t3),e(t3,pMe),e(pMe,Qxr),e(t3,Hxr),e(t3,uY),e(uY,Uxr),e(t3,Jxr),e(te,Yxr),e(te,a3),e(a3,_Me),e(_Me,Kxr),e(a3,Zxr),e(a3,bY),e(bY,e$r),e(a3,o$r),e(jr,r$r),M(n3,jr,null),b(f,Zje,u),b(f,Sc,u),e(Sc,s3),e(s3,uMe),M(B9,uMe,null),e(Sc,t$r),e(Sc,bMe),e(bMe,a$r),b(f,eDe,u),b(f,mr,u),M(I9,mr,null),e(mr,n$r),e(mr,Rc),e(Rc,s$r),e(Rc,vY),e(vY,l$r),e(Rc,i$r),e(Rc,FY),e(FY,d$r),e(Rc,c$r),e(mr,f$r),e(mr,N9),e(N9,m$r),e(N9,vMe),e(vMe,g$r),e(N9,h$r),e(mr,p$r),e(mr,Ot),M(q9,Ot,null),e(Ot,_$r),e(Ot,FMe),e(FMe,u$r),e(Ot,b$r),e(Ot,Pc),e(Pc,v$r),e(Pc,TMe),e(TMe,F$r),e(Pc,T$r),e(Pc,TY),e(TY,M$r),e(Pc,E$r),e(Ot,C$r),M(l3,Ot,null),e(mr,w$r),e(mr,Dr),M(j9,Dr,null),e(Dr,A$r),e(Dr,MMe),e(MMe,y$r),e(Dr,L$r),e(Dr,pn),e(pn,x$r),e(pn,EMe),e(EMe,$$r),e(pn,k$r),e(pn,CMe),e(CMe,S$r),e(pn,R$r),e(pn,wMe),e(wMe,P$r),e(pn,B$r),e(Dr,I$r),e(Dr,Re),e(Re,i3),e(i3,AMe),e(AMe,N$r),e(i3,q$r),e(i3,MY),e(MY,j$r),e(i3,D$r),e(Re,G$r),e(Re,d3),e(d3,yMe),e(yMe,O$r),e(d3,V$r),e(d3,EY),e(EY,X$r),e(d3,z$r),e(Re,W$r),e(Re,c3),e(c3,LMe),e(LMe,Q$r),e(c3,H$r),e(c3,CY),e(CY,U$r),e(c3,J$r),e(Re,Y$r),e(Re,f3),e(f3,xMe),e(xMe,K$r),e(f3,Z$r),e(f3,wY),e(wY,ekr),e(f3,okr),e(Re,rkr),e(Re,m3),e(m3,$Me),e($Me,tkr),e(m3,akr),e(m3,AY),e(AY,nkr),e(m3,skr),e(Re,lkr),e(Re,g3),e(g3,kMe),e(kMe,ikr),e(g3,dkr),e(g3,yY),e(yY,ckr),e(g3,fkr),e(Re,mkr),e(Re,h3),e(h3,SMe),e(SMe,gkr),e(h3,hkr),e(h3,LY),e(LY,pkr),e(h3,_kr),e(Re,ukr),e(Re,p3),e(p3,RMe),e(RMe,bkr),e(p3,vkr),e(p3,xY),e(xY,Fkr),e(p3,Tkr),e(Re,Mkr),e(Re,_3),e(_3,PMe),e(PMe,Ekr),e(_3,Ckr),e(_3,$Y),e($Y,wkr),e(_3,Akr),e(Dr,ykr),M(u3,Dr,null),b(f,oDe,u),b(f,Bc,u),e(Bc,b3),e(b3,BMe),M(D9,BMe,null),e(Bc,Lkr),e(Bc,IMe),e(IMe,xkr),b(f,rDe,u),b(f,gr,u),M(G9,gr,null),e(gr,$kr),e(gr,Ic),e(Ic,kkr),e(Ic,kY),e(kY,Skr),e(Ic,Rkr),e(Ic,SY),e(SY,Pkr),e(Ic,Bkr),e(gr,Ikr),e(gr,O9),e(O9,Nkr),e(O9,NMe),e(NMe,qkr),e(O9,jkr),e(gr,Dkr),e(gr,Vt),M(V9,Vt,null),e(Vt,Gkr),e(Vt,qMe),e(qMe,Okr),e(Vt,Vkr),e(Vt,Nc),e(Nc,Xkr),e(Nc,jMe),e(jMe,zkr),e(Nc,Wkr),e(Nc,RY),e(RY,Qkr),e(Nc,Hkr),e(Vt,Ukr),M(v3,Vt,null),e(gr,Jkr),e(gr,Gr),M(X9,Gr,null),e(Gr,Ykr),e(Gr,DMe),e(DMe,Kkr),e(Gr,Zkr),e(Gr,_n),e(_n,eSr),e(_n,GMe),e(GMe,oSr),e(_n,rSr),e(_n,OMe),e(OMe,tSr),e(_n,aSr),e(_n,VMe),e(VMe,nSr),e(_n,sSr),e(Gr,lSr),e(Gr,Ee),e(Ee,F3),e(F3,XMe),e(XMe,iSr),e(F3,dSr),e(F3,PY),e(PY,cSr),e(F3,fSr),e(Ee,mSr),e(Ee,T3),e(T3,zMe),e(zMe,gSr),e(T3,hSr),e(T3,BY),e(BY,pSr),e(T3,_Sr),e(Ee,uSr),e(Ee,M3),e(M3,WMe),e(WMe,bSr),e(M3,vSr),e(M3,IY),e(IY,FSr),e(M3,TSr),e(Ee,MSr),e(Ee,E3),e(E3,QMe),e(QMe,ESr),e(E3,CSr),e(E3,NY),e(NY,wSr),e(E3,ASr),e(Ee,ySr),e(Ee,C3),e(C3,HMe),e(HMe,LSr),e(C3,xSr),e(C3,qY),e(qY,$Sr),e(C3,kSr),e(Ee,SSr),e(Ee,w3),e(w3,UMe),e(UMe,RSr),e(w3,PSr),e(w3,jY),e(jY,BSr),e(w3,ISr),e(Ee,NSr),e(Ee,A3),e(A3,JMe),e(JMe,qSr),e(A3,jSr),e(A3,DY),e(DY,DSr),e(A3,GSr),e(Ee,OSr),e(Ee,y3),e(y3,YMe),e(YMe,VSr),e(y3,XSr),e(y3,GY),e(GY,zSr),e(y3,WSr),e(Ee,QSr),e(Ee,L3),e(L3,KMe),e(KMe,HSr),e(L3,USr),e(L3,OY),e(OY,JSr),e(L3,YSr),e(Ee,KSr),e(Ee,x3),e(x3,ZMe),e(ZMe,ZSr),e(x3,eRr),e(x3,VY),e(VY,oRr),e(x3,rRr),e(Ee,tRr),e(Ee,$3),e($3,eEe),e(eEe,aRr),e($3,nRr),e($3,XY),e(XY,sRr),e($3,lRr),e(Ee,iRr),e(Ee,k3),e(k3,oEe),e(oEe,dRr),e(k3,cRr),e(k3,zY),e(zY,fRr),e(k3,mRr),e(Gr,gRr),M(S3,Gr,null),b(f,tDe,u),b(f,qc,u),e(qc,R3),e(R3,rEe),M(z9,rEe,null),e(qc,hRr),e(qc,tEe),e(tEe,pRr),b(f,aDe,u),b(f,hr,u),M(W9,hr,null),e(hr,_Rr),e(hr,jc),e(jc,uRr),e(jc,WY),e(WY,bRr),e(jc,vRr),e(jc,QY),e(QY,FRr),e(jc,TRr),e(hr,MRr),e(hr,Q9),e(Q9,ERr),e(Q9,aEe),e(aEe,CRr),e(Q9,wRr),e(hr,ARr),e(hr,Xt),M(H9,Xt,null),e(Xt,yRr),e(Xt,nEe),e(nEe,LRr),e(Xt,xRr),e(Xt,Dc),e(Dc,$Rr),e(Dc,sEe),e(sEe,kRr),e(Dc,SRr),e(Dc,HY),e(HY,RRr),e(Dc,PRr),e(Xt,BRr),M(P3,Xt,null),e(hr,IRr),e(hr,Or),M(U9,Or,null),e(Or,NRr),e(Or,lEe),e(lEe,qRr),e(Or,jRr),e(Or,un),e(un,DRr),e(un,iEe),e(iEe,GRr),e(un,ORr),e(un,dEe),e(dEe,VRr),e(un,XRr),e(un,cEe),e(cEe,zRr),e(un,WRr),e(Or,QRr),e(Or,Le),e(Le,B3),e(B3,fEe),e(fEe,HRr),e(B3,URr),e(B3,UY),e(UY,JRr),e(B3,YRr),e(Le,KRr),e(Le,I3),e(I3,mEe),e(mEe,ZRr),e(I3,ePr),e(I3,JY),e(JY,oPr),e(I3,rPr),e(Le,tPr),e(Le,N3),e(N3,gEe),e(gEe,aPr),e(N3,nPr),e(N3,YY),e(YY,sPr),e(N3,lPr),e(Le,iPr),e(Le,q3),e(q3,hEe),e(hEe,dPr),e(q3,cPr),e(q3,KY),e(KY,fPr),e(q3,mPr),e(Le,gPr),e(Le,j3),e(j3,pEe),e(pEe,hPr),e(j3,pPr),e(j3,ZY),e(ZY,_Pr),e(j3,uPr),e(Le,bPr),e(Le,D3),e(D3,_Ee),e(_Ee,vPr),e(D3,FPr),e(D3,eK),e(eK,TPr),e(D3,MPr),e(Le,EPr),e(Le,G3),e(G3,uEe),e(uEe,CPr),e(G3,wPr),e(G3,oK),e(oK,APr),e(G3,yPr),e(Le,LPr),e(Le,O3),e(O3,bEe),e(bEe,xPr),e(O3,$Pr),e(O3,rK),e(rK,kPr),e(O3,SPr),e(Le,RPr),e(Le,V3),e(V3,vEe),e(vEe,PPr),e(V3,BPr),e(V3,tK),e(tK,IPr),e(V3,NPr),e(Le,qPr),e(Le,X3),e(X3,FEe),e(FEe,jPr),e(X3,DPr),e(X3,aK),e(aK,GPr),e(X3,OPr),e(Or,VPr),M(z3,Or,null),b(f,nDe,u),b(f,Gc,u),e(Gc,W3),e(W3,TEe),M(J9,TEe,null),e(Gc,XPr),e(Gc,MEe),e(MEe,zPr),b(f,sDe,u),b(f,pr,u),M(Y9,pr,null),e(pr,WPr),e(pr,Oc),e(Oc,QPr),e(Oc,nK),e(nK,HPr),e(Oc,UPr),e(Oc,sK),e(sK,JPr),e(Oc,YPr),e(pr,KPr),e(pr,K9),e(K9,ZPr),e(K9,EEe),e(EEe,eBr),e(K9,oBr),e(pr,rBr),e(pr,zt),M(Z9,zt,null),e(zt,tBr),e(zt,CEe),e(CEe,aBr),e(zt,nBr),e(zt,Vc),e(Vc,sBr),e(Vc,wEe),e(wEe,lBr),e(Vc,iBr),e(Vc,lK),e(lK,dBr),e(Vc,cBr),e(zt,fBr),M(Q3,zt,null),e(pr,mBr),e(pr,Vr),M(ex,Vr,null),e(Vr,gBr),e(Vr,AEe),e(AEe,hBr),e(Vr,pBr),e(Vr,bn),e(bn,_Br),e(bn,yEe),e(yEe,uBr),e(bn,bBr),e(bn,LEe),e(LEe,vBr),e(bn,FBr),e(bn,xEe),e(xEe,TBr),e(bn,MBr),e(Vr,EBr),e(Vr,Pe),e(Pe,H3),e(H3,$Ee),e($Ee,CBr),e(H3,wBr),e(H3,iK),e(iK,ABr),e(H3,yBr),e(Pe,LBr),e(Pe,U3),e(U3,kEe),e(kEe,xBr),e(U3,$Br),e(U3,dK),e(dK,kBr),e(U3,SBr),e(Pe,RBr),e(Pe,J3),e(J3,SEe),e(SEe,PBr),e(J3,BBr),e(J3,cK),e(cK,IBr),e(J3,NBr),e(Pe,qBr),e(Pe,Y3),e(Y3,REe),e(REe,jBr),e(Y3,DBr),e(Y3,fK),e(fK,GBr),e(Y3,OBr),e(Pe,VBr),e(Pe,K3),e(K3,PEe),e(PEe,XBr),e(K3,zBr),e(K3,mK),e(mK,WBr),e(K3,QBr),e(Pe,HBr),e(Pe,Z3),e(Z3,BEe),e(BEe,UBr),e(Z3,JBr),e(Z3,gK),e(gK,YBr),e(Z3,KBr),e(Pe,ZBr),e(Pe,ew),e(ew,IEe),e(IEe,eIr),e(ew,oIr),e(ew,hK),e(hK,rIr),e(ew,tIr),e(Pe,aIr),e(Pe,ow),e(ow,NEe),e(NEe,nIr),e(ow,sIr),e(ow,pK),e(pK,lIr),e(ow,iIr),e(Pe,dIr),e(Pe,rw),e(rw,qEe),e(qEe,cIr),e(rw,fIr),e(rw,_K),e(_K,mIr),e(rw,gIr),e(Vr,hIr),M(tw,Vr,null),b(f,lDe,u),b(f,Xc,u),e(Xc,aw),e(aw,jEe),M(ox,jEe,null),e(Xc,pIr),e(Xc,DEe),e(DEe,_Ir),b(f,iDe,u),b(f,_r,u),M(rx,_r,null),e(_r,uIr),e(_r,zc),e(zc,bIr),e(zc,uK),e(uK,vIr),e(zc,FIr),e(zc,bK),e(bK,TIr),e(zc,MIr),e(_r,EIr),e(_r,tx),e(tx,CIr),e(tx,GEe),e(GEe,wIr),e(tx,AIr),e(_r,yIr),e(_r,Wt),M(ax,Wt,null),e(Wt,LIr),e(Wt,OEe),e(OEe,xIr),e(Wt,$Ir),e(Wt,Wc),e(Wc,kIr),e(Wc,VEe),e(VEe,SIr),e(Wc,RIr),e(Wc,vK),e(vK,PIr),e(Wc,BIr),e(Wt,IIr),M(nw,Wt,null),e(_r,NIr),e(_r,Xr),M(nx,Xr,null),e(Xr,qIr),e(Xr,XEe),e(XEe,jIr),e(Xr,DIr),e(Xr,vn),e(vn,GIr),e(vn,zEe),e(zEe,OIr),e(vn,VIr),e(vn,WEe),e(WEe,XIr),e(vn,zIr),e(vn,QEe),e(QEe,WIr),e(vn,QIr),e(Xr,HIr),e(Xr,xe),e(xe,sw),e(sw,HEe),e(HEe,UIr),e(sw,JIr),e(sw,FK),e(FK,YIr),e(sw,KIr),e(xe,ZIr),e(xe,lw),e(lw,UEe),e(UEe,eNr),e(lw,oNr),e(lw,TK),e(TK,rNr),e(lw,tNr),e(xe,aNr),e(xe,iw),e(iw,JEe),e(JEe,nNr),e(iw,sNr),e(iw,MK),e(MK,lNr),e(iw,iNr),e(xe,dNr),e(xe,dw),e(dw,YEe),e(YEe,cNr),e(dw,fNr),e(dw,EK),e(EK,mNr),e(dw,gNr),e(xe,hNr),e(xe,cw),e(cw,KEe),e(KEe,pNr),e(cw,_Nr),e(cw,CK),e(CK,uNr),e(cw,bNr),e(xe,vNr),e(xe,fw),e(fw,ZEe),e(ZEe,FNr),e(fw,TNr),e(fw,wK),e(wK,MNr),e(fw,ENr),e(xe,CNr),e(xe,mw),e(mw,eCe),e(eCe,wNr),e(mw,ANr),e(mw,AK),e(AK,yNr),e(mw,LNr),e(xe,xNr),e(xe,gw),e(gw,oCe),e(oCe,$Nr),e(gw,kNr),e(gw,yK),e(yK,SNr),e(gw,RNr),e(xe,PNr),e(xe,hw),e(hw,rCe),e(rCe,BNr),e(hw,INr),e(hw,LK),e(LK,NNr),e(hw,qNr),e(xe,jNr),e(xe,pw),e(pw,tCe),e(tCe,DNr),e(pw,GNr),e(pw,xK),e(xK,ONr),e(pw,VNr),e(Xr,XNr),M(_w,Xr,null),b(f,dDe,u),b(f,Qc,u),e(Qc,uw),e(uw,aCe),M(sx,aCe,null),e(Qc,zNr),e(Qc,nCe),e(nCe,WNr),b(f,cDe,u),b(f,ur,u),M(lx,ur,null),e(ur,QNr),e(ur,Hc),e(Hc,HNr),e(Hc,$K),e($K,UNr),e(Hc,JNr),e(Hc,kK),e(kK,YNr),e(Hc,KNr),e(ur,ZNr),e(ur,ix),e(ix,eqr),e(ix,sCe),e(sCe,oqr),e(ix,rqr),e(ur,tqr),e(ur,Qt),M(dx,Qt,null),e(Qt,aqr),e(Qt,lCe),e(lCe,nqr),e(Qt,sqr),e(Qt,Uc),e(Uc,lqr),e(Uc,iCe),e(iCe,iqr),e(Uc,dqr),e(Uc,SK),e(SK,cqr),e(Uc,fqr),e(Qt,mqr),M(bw,Qt,null),e(ur,gqr),e(ur,zr),M(cx,zr,null),e(zr,hqr),e(zr,dCe),e(dCe,pqr),e(zr,_qr),e(zr,Fn),e(Fn,uqr),e(Fn,cCe),e(cCe,bqr),e(Fn,vqr),e(Fn,fCe),e(fCe,Fqr),e(Fn,Tqr),e(Fn,mCe),e(mCe,Mqr),e(Fn,Eqr),e(zr,Cqr),e(zr,$e),e($e,vw),e(vw,gCe),e(gCe,wqr),e(vw,Aqr),e(vw,RK),e(RK,yqr),e(vw,Lqr),e($e,xqr),e($e,Fw),e(Fw,hCe),e(hCe,$qr),e(Fw,kqr),e(Fw,PK),e(PK,Sqr),e(Fw,Rqr),e($e,Pqr),e($e,Tw),e(Tw,pCe),e(pCe,Bqr),e(Tw,Iqr),e(Tw,BK),e(BK,Nqr),e(Tw,qqr),e($e,jqr),e($e,Mw),e(Mw,_Ce),e(_Ce,Dqr),e(Mw,Gqr),e(Mw,IK),e(IK,Oqr),e(Mw,Vqr),e($e,Xqr),e($e,Ew),e(Ew,uCe),e(uCe,zqr),e(Ew,Wqr),e(Ew,NK),e(NK,Qqr),e(Ew,Hqr),e($e,Uqr),e($e,Cw),e(Cw,bCe),e(bCe,Jqr),e(Cw,Yqr),e(Cw,qK),e(qK,Kqr),e(Cw,Zqr),e($e,ejr),e($e,ww),e(ww,vCe),e(vCe,ojr),e(ww,rjr),e(ww,jK),e(jK,tjr),e(ww,ajr),e($e,njr),e($e,Aw),e(Aw,FCe),e(FCe,sjr),e(Aw,ljr),e(Aw,DK),e(DK,ijr),e(Aw,djr),e($e,cjr),e($e,yw),e(yw,TCe),e(TCe,fjr),e(yw,mjr),e(yw,GK),e(GK,gjr),e(yw,hjr),e($e,pjr),e($e,Lw),e(Lw,MCe),e(MCe,_jr),e(Lw,ujr),e(Lw,OK),e(OK,bjr),e(Lw,vjr),e(zr,Fjr),M(xw,zr,null),b(f,fDe,u),b(f,Jc,u),e(Jc,$w),e($w,ECe),M(fx,ECe,null),e(Jc,Tjr),e(Jc,CCe),e(CCe,Mjr),b(f,mDe,u),b(f,br,u),M(mx,br,null),e(br,Ejr),e(br,Yc),e(Yc,Cjr),e(Yc,VK),e(VK,wjr),e(Yc,Ajr),e(Yc,XK),e(XK,yjr),e(Yc,Ljr),e(br,xjr),e(br,gx),e(gx,$jr),e(gx,wCe),e(wCe,kjr),e(gx,Sjr),e(br,Rjr),e(br,Ht),M(hx,Ht,null),e(Ht,Pjr),e(Ht,ACe),e(ACe,Bjr),e(Ht,Ijr),e(Ht,Kc),e(Kc,Njr),e(Kc,yCe),e(yCe,qjr),e(Kc,jjr),e(Kc,zK),e(zK,Djr),e(Kc,Gjr),e(Ht,Ojr),M(kw,Ht,null),e(br,Vjr),e(br,Wr),M(px,Wr,null),e(Wr,Xjr),e(Wr,LCe),e(LCe,zjr),e(Wr,Wjr),e(Wr,Tn),e(Tn,Qjr),e(Tn,xCe),e(xCe,Hjr),e(Tn,Ujr),e(Tn,$Ce),e($Ce,Jjr),e(Tn,Yjr),e(Tn,kCe),e(kCe,Kjr),e(Tn,Zjr),e(Wr,eDr),e(Wr,De),e(De,Sw),e(Sw,SCe),e(SCe,oDr),e(Sw,rDr),e(Sw,WK),e(WK,tDr),e(Sw,aDr),e(De,nDr),e(De,Rw),e(Rw,RCe),e(RCe,sDr),e(Rw,lDr),e(Rw,QK),e(QK,iDr),e(Rw,dDr),e(De,cDr),e(De,Pw),e(Pw,PCe),e(PCe,fDr),e(Pw,mDr),e(Pw,HK),e(HK,gDr),e(Pw,hDr),e(De,pDr),e(De,Bw),e(Bw,BCe),e(BCe,_Dr),e(Bw,uDr),e(Bw,UK),e(UK,bDr),e(Bw,vDr),e(De,FDr),e(De,Iw),e(Iw,ICe),e(ICe,TDr),e(Iw,MDr),e(Iw,JK),e(JK,EDr),e(Iw,CDr),e(De,wDr),e(De,Nw),e(Nw,NCe),e(NCe,ADr),e(Nw,yDr),e(Nw,YK),e(YK,LDr),e(Nw,xDr),e(De,$Dr),e(De,qw),e(qw,qCe),e(qCe,kDr),e(qw,SDr),e(qw,KK),e(KK,RDr),e(qw,PDr),e(De,BDr),e(De,jw),e(jw,jCe),e(jCe,IDr),e(jw,NDr),e(jw,ZK),e(ZK,qDr),e(jw,jDr),e(Wr,DDr),M(Dw,Wr,null),b(f,gDe,u),b(f,Zc,u),e(Zc,Gw),e(Gw,DCe),M(_x,DCe,null),e(Zc,GDr),e(Zc,GCe),e(GCe,ODr),b(f,hDe,u),b(f,vr,u),M(ux,vr,null),e(vr,VDr),e(vr,ef),e(ef,XDr),e(ef,eZ),e(eZ,zDr),e(ef,WDr),e(ef,oZ),e(oZ,QDr),e(ef,HDr),e(vr,UDr),e(vr,bx),e(bx,JDr),e(bx,OCe),e(OCe,YDr),e(bx,KDr),e(vr,ZDr),e(vr,Ut),M(vx,Ut,null),e(Ut,eGr),e(Ut,VCe),e(VCe,oGr),e(Ut,rGr),e(Ut,of),e(of,tGr),e(of,XCe),e(XCe,aGr),e(of,nGr),e(of,rZ),e(rZ,sGr),e(of,lGr),e(Ut,iGr),M(Ow,Ut,null),e(vr,dGr),e(vr,Qr),M(Fx,Qr,null),e(Qr,cGr),e(Qr,zCe),e(zCe,fGr),e(Qr,mGr),e(Qr,Mn),e(Mn,gGr),e(Mn,WCe),e(WCe,hGr),e(Mn,pGr),e(Mn,QCe),e(QCe,_Gr),e(Mn,uGr),e(Mn,HCe),e(HCe,bGr),e(Mn,vGr),e(Qr,FGr),e(Qr,Ge),e(Ge,Vw),e(Vw,UCe),e(UCe,TGr),e(Vw,MGr),e(Vw,tZ),e(tZ,EGr),e(Vw,CGr),e(Ge,wGr),e(Ge,Xw),e(Xw,JCe),e(JCe,AGr),e(Xw,yGr),e(Xw,aZ),e(aZ,LGr),e(Xw,xGr),e(Ge,$Gr),e(Ge,zw),e(zw,YCe),e(YCe,kGr),e(zw,SGr),e(zw,nZ),e(nZ,RGr),e(zw,PGr),e(Ge,BGr),e(Ge,Ww),e(Ww,KCe),e(KCe,IGr),e(Ww,NGr),e(Ww,sZ),e(sZ,qGr),e(Ww,jGr),e(Ge,DGr),e(Ge,Qw),e(Qw,ZCe),e(ZCe,GGr),e(Qw,OGr),e(Qw,lZ),e(lZ,VGr),e(Qw,XGr),e(Ge,zGr),e(Ge,Hw),e(Hw,e5e),e(e5e,WGr),e(Hw,QGr),e(Hw,iZ),e(iZ,HGr),e(Hw,UGr),e(Ge,JGr),e(Ge,Uw),e(Uw,o5e),e(o5e,YGr),e(Uw,KGr),e(Uw,dZ),e(dZ,ZGr),e(Uw,eOr),e(Ge,oOr),e(Ge,Jw),e(Jw,r5e),e(r5e,rOr),e(Jw,tOr),e(Jw,cZ),e(cZ,aOr),e(Jw,nOr),e(Qr,sOr),M(Yw,Qr,null),b(f,pDe,u),b(f,rf,u),e(rf,Kw),e(Kw,t5e),M(Tx,t5e,null),e(rf,lOr),e(rf,a5e),e(a5e,iOr),b(f,_De,u),b(f,Fr,u),M(Mx,Fr,null),e(Fr,dOr),e(Fr,tf),e(tf,cOr),e(tf,fZ),e(fZ,fOr),e(tf,mOr),e(tf,mZ),e(mZ,gOr),e(tf,hOr),e(Fr,pOr),e(Fr,Ex),e(Ex,_Or),e(Ex,n5e),e(n5e,uOr),e(Ex,bOr),e(Fr,vOr),e(Fr,Jt),M(Cx,Jt,null),e(Jt,FOr),e(Jt,s5e),e(s5e,TOr),e(Jt,MOr),e(Jt,af),e(af,EOr),e(af,l5e),e(l5e,COr),e(af,wOr),e(af,gZ),e(gZ,AOr),e(af,yOr),e(Jt,LOr),M(Zw,Jt,null),e(Fr,xOr),e(Fr,Hr),M(wx,Hr,null),e(Hr,$Or),e(Hr,i5e),e(i5e,kOr),e(Hr,SOr),e(Hr,En),e(En,ROr),e(En,d5e),e(d5e,POr),e(En,BOr),e(En,c5e),e(c5e,IOr),e(En,NOr),e(En,f5e),e(f5e,qOr),e(En,jOr),e(Hr,DOr),e(Hr,m5e),e(m5e,e0),e(e0,g5e),e(g5e,GOr),e(e0,OOr),e(e0,hZ),e(hZ,VOr),e(e0,XOr),e(Hr,zOr),M(o0,Hr,null),b(f,uDe,u),b(f,nf,u),e(nf,r0),e(r0,h5e),M(Ax,h5e,null),e(nf,WOr),e(nf,p5e),e(p5e,QOr),b(f,bDe,u),b(f,Tr,u),M(yx,Tr,null),e(Tr,HOr),e(Tr,sf),e(sf,UOr),e(sf,pZ),e(pZ,JOr),e(sf,YOr),e(sf,_Z),e(_Z,KOr),e(sf,ZOr),e(Tr,eVr),e(Tr,Lx),e(Lx,oVr),e(Lx,_5e),e(_5e,rVr),e(Lx,tVr),e(Tr,aVr),e(Tr,Yt),M(xx,Yt,null),e(Yt,nVr),e(Yt,u5e),e(u5e,sVr),e(Yt,lVr),e(Yt,lf),e(lf,iVr),e(lf,b5e),e(b5e,dVr),e(lf,cVr),e(lf,uZ),e(uZ,fVr),e(lf,mVr),e(Yt,gVr),M(t0,Yt,null),e(Tr,hVr),e(Tr,Ur),M($x,Ur,null),e(Ur,pVr),e(Ur,v5e),e(v5e,_Vr),e(Ur,uVr),e(Ur,Cn),e(Cn,bVr),e(Cn,F5e),e(F5e,vVr),e(Cn,FVr),e(Cn,T5e),e(T5e,TVr),e(Cn,MVr),e(Cn,M5e),e(M5e,EVr),e(Cn,CVr),e(Ur,wVr),e(Ur,kx),e(kx,a0),e(a0,E5e),e(E5e,AVr),e(a0,yVr),e(a0,bZ),e(bZ,LVr),e(a0,xVr),e(kx,$Vr),e(kx,n0),e(n0,C5e),e(C5e,kVr),e(n0,SVr),e(n0,vZ),e(vZ,RVr),e(n0,PVr),e(Ur,BVr),M(s0,Ur,null),b(f,vDe,u),b(f,df,u),e(df,l0),e(l0,w5e),M(Sx,w5e,null),e(df,IVr),e(df,A5e),e(A5e,NVr),b(f,FDe,u),b(f,Mr,u),M(Rx,Mr,null),e(Mr,qVr),e(Mr,cf),e(cf,jVr),e(cf,FZ),e(FZ,DVr),e(cf,GVr),e(cf,TZ),e(TZ,OVr),e(cf,VVr),e(Mr,XVr),e(Mr,Px),e(Px,zVr),e(Px,y5e),e(y5e,WVr),e(Px,QVr),e(Mr,HVr),e(Mr,Kt),M(Bx,Kt,null),e(Kt,UVr),e(Kt,L5e),e(L5e,JVr),e(Kt,YVr),e(Kt,ff),e(ff,KVr),e(ff,x5e),e(x5e,ZVr),e(ff,eXr),e(ff,MZ),e(MZ,oXr),e(ff,rXr),e(Kt,tXr),M(i0,Kt,null),e(Mr,aXr),e(Mr,Jr),M(Ix,Jr,null),e(Jr,nXr),e(Jr,$5e),e($5e,sXr),e(Jr,lXr),e(Jr,wn),e(wn,iXr),e(wn,k5e),e(k5e,dXr),e(wn,cXr),e(wn,S5e),e(S5e,fXr),e(wn,mXr),e(wn,R5e),e(R5e,gXr),e(wn,hXr),e(Jr,pXr),e(Jr,P5e),e(P5e,d0),e(d0,B5e),e(B5e,_Xr),e(d0,uXr),e(d0,EZ),e(EZ,bXr),e(d0,vXr),e(Jr,FXr),M(c0,Jr,null),TDe=!0},p(f,[u]){const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),Ff.$set(Nx);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),Cg.$set(I5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),sh.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),qh.$set(q5e);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),jh.$set(qx);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),np.$set(j5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),sp.$set(An);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),dp.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),nu.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),lu.$set(O5e);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),Ku.$set(jx);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),e4.$set(V5e);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),D4.$set(Dx);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),O4.$set(X5e);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),w1.$set(Gx);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),y1.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),z1.$set(W5e);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),Q1.$set(Q5e);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),O7.$set(mf);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),X7.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),Tb.$set(U5e);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),Eb.$set(J5e);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),$b.$set(Ox);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),Sb.$set(Y5e);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),h2.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),_2.$set(Z5e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),av.$set(et);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),sv.$set(Vx);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),dv.$set(e3e);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),fv.$set(Xx);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),wv.$set(o3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),yv.$set(ot);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),$v.$set(r3e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Sv.$set(gf);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),Vv.$set(t3e);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),zv.$set(a3e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Kv.$set(y);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),eF.$set(f0);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),fF.$set(n3e);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),gF.$set(s3e);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),uF.$set(m0);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),vF.$set(l3e);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),AF.$set(i3e);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),LF.$set(g0);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),RF.$set(d3e);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),BF.$set(c3e);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),jF.$set(h0);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),GF.$set(f3e);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),XF.$set(m3e);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),WF.$set(p0);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),KF.$set(g3e);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),eT.$set(h3e);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),tT.$set(_0);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),nT.$set(p3e);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),YT.$set(_3e);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),ZT.$set(u0);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),EM.$set(u3e);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),wM.$set(b3e);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),qM.$set(b0);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),DM.$set(v3e);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),zM.$set(F3e);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),QM.$set(v0);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),hE.$set(T3e);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),_E.$set(M3e);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),yE.$set(F0);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),xE.$set(E3e);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),rC.$set(C3e);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),aC.$set(T0);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),MC.$set(w3e);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),CC.$set(A3e);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),yC.$set(M0);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),xC.$set(y3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),kC.$set(L3e);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),RC.$set(E0);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),e5.$set(x3e);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),r5.$set($3e);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),E5.$set(C0);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),w5.$set(k3e);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),y5.$set(S3e);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),x5.$set(w0);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),k5.$set(R3e);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),R5.$set(P3e);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),n3.$set(A0);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),l3.$set(B3e);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),u3.$set(I3e);const y0={};u&2&&(y0.$$scope={dirty:u,ctx:f}),v3.$set(y0);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),S3.$set(N3e);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),P3.$set(q3e);const L0={};u&2&&(L0.$$scope={dirty:u,ctx:f}),z3.$set(L0);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),Q3.$set(j3e);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),tw.$set(D3e);const x0={};u&2&&(x0.$$scope={dirty:u,ctx:f}),nw.$set(x0);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),_w.$set(G3e);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),bw.$set(O3e);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),xw.$set($0);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),kw.$set(V3e);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),Dw.$set(X3e);const k0={};u&2&&(k0.$$scope={dirty:u,ctx:f}),Ow.$set(k0);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),Yw.$set(z3e);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),Zw.$set(W3e);const S0={};u&2&&(S0.$$scope={dirty:u,ctx:f}),o0.$set(S0);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),t0.$set(Q3e);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),s0.$set(H3e);const R0={};u&2&&(R0.$$scope={dirty:u,ctx:f}),i0.$set(R0);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),c0.$set(U3e)},i(f){TDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(Ff.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(qA.$$.fragment,f),E(Cg.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(XA.$$.fragment,f),E(sh.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(JA.$$.fragment,f),E(qh.$$.fragment,f),E(jh.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ry.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(dp.$$.fragment,f),E(iy.$$.fragment,f),E(nu.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(lu.$$.fragment,f),E(gy.$$.fragment,f),E(Ku.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(e4.$$.fragment,f),E(by.$$.fragment,f),E(D4.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(O4.$$.fragment,f),E(Ey.$$.fragment,f),E(w1.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(y1.$$.fragment,f),E(Ly.$$.fragment,f),E(z1.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Q1.$$.fragment,f),E(Ry.$$.fragment,f),E(O7.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(X7.$$.fragment,f),E(qy.$$.fragment,f),E(Tb.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(Eb.$$.fragment,f),E(Vy.$$.fragment,f),E($b.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Sb.$$.fragment,f),E(Hy.$$.fragment,f),E(h2.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(_2.$$.fragment,f),E(Zy.$$.fragment,f),E(av.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(sv.$$.fragment,f),E(aL.$$.fragment,f),E(dv.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(fv.$$.fragment,f),E(dL.$$.fragment,f),E(wv.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(yv.$$.fragment,f),E(hL.$$.fragment,f),E($v.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(Sv.$$.fragment,f),E(vL.$$.fragment,f),E(Vv.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(zv.$$.fragment,f),E(CL.$$.fragment,f),E(Kv.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(eF.$$.fragment,f),E(xL.$$.fragment,f),E(fF.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(gF.$$.fragment,f),E(PL.$$.fragment,f),E(uF.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(vF.$$.fragment,f),E(DL.$$.fragment,f),E(AF.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(LF.$$.fragment,f),E(zL.$$.fragment,f),E(RF.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(BF.$$.fragment,f),E(JL.$$.fragment,f),E(jF.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(GF.$$.fragment,f),E(r8.$$.fragment,f),E(XF.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(WF.$$.fragment,f),E(l8.$$.fragment,f),E(KF.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(eT.$$.fragment,f),E(m8.$$.fragment,f),E(tT.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(nT.$$.fragment,f),E(u8.$$.fragment,f),E(YT.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(ZT.$$.fragment,f),E(M8.$$.fragment,f),E(EM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(wM.$$.fragment,f),E(y8.$$.fragment,f),E(qM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(DM.$$.fragment,f),E(S8.$$.fragment,f),E(zM.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(QM.$$.fragment,f),E(N8.$$.fragment,f),E(hE.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(_E.$$.fragment,f),E(O8.$$.fragment,f),E(yE.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(xE.$$.fragment,f),E(Q8.$$.fragment,f),E(rC.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(aC.$$.fragment,f),E(K8.$$.fragment,f),E(MC.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(CC.$$.fragment,f),E(t9.$$.fragment,f),E(yC.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(xC.$$.fragment,f),E(d9.$$.fragment,f),E(kC.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(RC.$$.fragment,f),E(h9.$$.fragment,f),E(e5.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(r5.$$.fragment,f),E(v9.$$.fragment,f),E(E5.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(w5.$$.fragment,f),E(C9.$$.fragment,f),E(y5.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x5.$$.fragment,f),E(x9.$$.fragment,f),E(k5.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(R5.$$.fragment,f),E(P9.$$.fragment,f),E(n3.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(l3.$$.fragment,f),E(j9.$$.fragment,f),E(u3.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(v3.$$.fragment,f),E(X9.$$.fragment,f),E(S3.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(P3.$$.fragment,f),E(U9.$$.fragment,f),E(z3.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(Q3.$$.fragment,f),E(ex.$$.fragment,f),E(tw.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(nw.$$.fragment,f),E(nx.$$.fragment,f),E(_w.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(bw.$$.fragment,f),E(cx.$$.fragment,f),E(xw.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(kw.$$.fragment,f),E(px.$$.fragment,f),E(Dw.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(Ow.$$.fragment,f),E(Fx.$$.fragment,f),E(Yw.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(Zw.$$.fragment,f),E(wx.$$.fragment,f),E(o0.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(t0.$$.fragment,f),E($x.$$.fragment,f),E(s0.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(i0.$$.fragment,f),E(Ix.$$.fragment,f),E(c0.$$.fragment,f),TDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(Ff.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(qA.$$.fragment,f),C(Cg.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(XA.$$.fragment,f),C(sh.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(JA.$$.fragment,f),C(qh.$$.fragment,f),C(jh.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ry.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(dp.$$.fragment,f),C(iy.$$.fragment,f),C(nu.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(lu.$$.fragment,f),C(gy.$$.fragment,f),C(Ku.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(e4.$$.fragment,f),C(by.$$.fragment,f),C(D4.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(O4.$$.fragment,f),C(Ey.$$.fragment,f),C(w1.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(y1.$$.fragment,f),C(Ly.$$.fragment,f),C(z1.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Q1.$$.fragment,f),C(Ry.$$.fragment,f),C(O7.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(X7.$$.fragment,f),C(qy.$$.fragment,f),C(Tb.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(Eb.$$.fragment,f),C(Vy.$$.fragment,f),C($b.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Sb.$$.fragment,f),C(Hy.$$.fragment,f),C(h2.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(_2.$$.fragment,f),C(Zy.$$.fragment,f),C(av.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(sv.$$.fragment,f),C(aL.$$.fragment,f),C(dv.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(fv.$$.fragment,f),C(dL.$$.fragment,f),C(wv.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(yv.$$.fragment,f),C(hL.$$.fragment,f),C($v.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(Sv.$$.fragment,f),C(vL.$$.fragment,f),C(Vv.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(zv.$$.fragment,f),C(CL.$$.fragment,f),C(Kv.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(eF.$$.fragment,f),C(xL.$$.fragment,f),C(fF.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(gF.$$.fragment,f),C(PL.$$.fragment,f),C(uF.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(vF.$$.fragment,f),C(DL.$$.fragment,f),C(AF.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(LF.$$.fragment,f),C(zL.$$.fragment,f),C(RF.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(BF.$$.fragment,f),C(JL.$$.fragment,f),C(jF.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(GF.$$.fragment,f),C(r8.$$.fragment,f),C(XF.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(WF.$$.fragment,f),C(l8.$$.fragment,f),C(KF.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(eT.$$.fragment,f),C(m8.$$.fragment,f),C(tT.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(nT.$$.fragment,f),C(u8.$$.fragment,f),C(YT.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(ZT.$$.fragment,f),C(M8.$$.fragment,f),C(EM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(wM.$$.fragment,f),C(y8.$$.fragment,f),C(qM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(DM.$$.fragment,f),C(S8.$$.fragment,f),C(zM.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(QM.$$.fragment,f),C(N8.$$.fragment,f),C(hE.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(_E.$$.fragment,f),C(O8.$$.fragment,f),C(yE.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(xE.$$.fragment,f),C(Q8.$$.fragment,f),C(rC.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(aC.$$.fragment,f),C(K8.$$.fragment,f),C(MC.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(CC.$$.fragment,f),C(t9.$$.fragment,f),C(yC.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(xC.$$.fragment,f),C(d9.$$.fragment,f),C(kC.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(RC.$$.fragment,f),C(h9.$$.fragment,f),C(e5.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(r5.$$.fragment,f),C(v9.$$.fragment,f),C(E5.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(w5.$$.fragment,f),C(C9.$$.fragment,f),C(y5.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x5.$$.fragment,f),C(x9.$$.fragment,f),C(k5.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(R5.$$.fragment,f),C(P9.$$.fragment,f),C(n3.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(l3.$$.fragment,f),C(j9.$$.fragment,f),C(u3.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(v3.$$.fragment,f),C(X9.$$.fragment,f),C(S3.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(P3.$$.fragment,f),C(U9.$$.fragment,f),C(z3.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(Q3.$$.fragment,f),C(ex.$$.fragment,f),C(tw.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(nw.$$.fragment,f),C(nx.$$.fragment,f),C(_w.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(bw.$$.fragment,f),C(cx.$$.fragment,f),C(xw.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(kw.$$.fragment,f),C(px.$$.fragment,f),C(Dw.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(Ow.$$.fragment,f),C(Fx.$$.fragment,f),C(Yw.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(Zw.$$.fragment,f),C(wx.$$.fragment,f),C(o0.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(t0.$$.fragment,f),C($x.$$.fragment,f),C(s0.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(i0.$$.fragment,f),C(Ix.$$.fragment,f),C(c0.$$.fragment,f),TDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(bqe),f&&t(bi),w(SA),f&&t(vqe),f&&t(kn),f&&t(Fqe),w(RA,f),f&&t(Tqe),f&&t(ok),f&&t(Mqe),w(Ff,f),f&&t(Eqe),f&&t(vi),w(PA),f&&t(Cqe),f&&t(Co),w(BA),w(qA),w(Cg),w(jA),f&&t(wqe),f&&t(Ti),w(DA),f&&t(Aqe),f&&t(wo),w(GA),w(XA),w(sh),w(zA),f&&t(yqe),f&&t(Mi),w(WA),f&&t(Lqe),f&&t(Ao),w(QA),w(JA),w(qh),w(jh),w(YA),f&&t(xqe),f&&t(Ei),w(KA),f&&t($qe),f&&t(yo),w(ZA),w(ry),w(np),w(sp),w(ty),f&&t(kqe),f&&t(wi),w(ay),f&&t(Sqe),f&&t(Lo),w(ny),w(ly),w(dp),w(iy),w(nu),f&&t(Rqe),f&&t(Li),w(dy),f&&t(Pqe),f&&t(xo),w(cy),w(my),w(lu),w(gy),w(Ku),f&&t(Bqe),f&&t(ki),w(hy),f&&t(Iqe),f&&t($o),w(py),w(uy),w(e4),w(by),w(D4),f&&t(Nqe),f&&t(Pi),w(vy),f&&t(qqe),f&&t(ko),w(Fy),w(My),w(O4),w(Ey),w(w1),f&&t(jqe),f&&t(Ni),w(Cy),f&&t(Dqe),f&&t(So),w(wy),w(yy),w(y1),w(Ly),w(z1),f&&t(Gqe),f&&t(Di),w(xy),f&&t(Oqe),f&&t(Ro),w($y),w(Sy),w(Q1),w(Ry),w(O7),f&&t(Vqe),f&&t(Vi),w(Py),f&&t(Xqe),f&&t(Po),w(By),w(Ny),w(X7),w(qy),w(Tb),f&&t(zqe),f&&t(Wi),w(jy),f&&t(Wqe),f&&t(Bo),w(Dy),w(Oy),w(Eb),w(Vy),w($b),f&&t(Qqe),f&&t(Ui),w(Xy),f&&t(Hqe),f&&t(Io),w(zy),w(Qy),w(Sb),w(Hy),w(h2),f&&t(Uqe),f&&t(Ki),w(Uy),f&&t(Jqe),f&&t(No),w(Jy),w(Ky),w(_2),w(Zy),w(av),f&&t(Yqe),f&&t(od),w(eL),f&&t(Kqe),f&&t(qo),w(oL),w(tL),w(sv),w(aL),w(dv),f&&t(Zqe),f&&t(ad),w(nL),f&&t(eje),f&&t(jo),w(sL),w(iL),w(fv),w(dL),w(wv),f&&t(oje),f&&t(ld),w(cL),f&&t(rje),f&&t(Do),w(fL),w(gL),w(yv),w(hL),w($v),f&&t(tje),f&&t(cd),w(pL),f&&t(aje),f&&t(Go),w(_L),w(bL),w(Sv),w(vL),w(Vv),f&&t(nje),f&&t(gd),w(FL),f&&t(sje),f&&t(Oo),w(TL),w(EL),w(zv),w(CL),w(Kv),f&&t(lje),f&&t(_d),w(wL),f&&t(ije),f&&t(Vo),w(AL),w(LL),w(eF),w(xL),w(fF),f&&t(dje),f&&t(vd),w($L),f&&t(cje),f&&t(Xo),w(kL),w(RL),w(gF),w(PL),w(uF),f&&t(fje),f&&t(Md),w(IL),f&&t(mje),f&&t(zo),w(NL),w(jL),w(vF),w(DL),w(AF),f&&t(gje),f&&t(wd),w(GL),f&&t(hje),f&&t(Wo),w(OL),w(XL),w(LF),w(zL),w(RF),f&&t(pje),f&&t(xd),w(WL),f&&t(_je),f&&t(Qo),w(QL),w(UL),w(BF),w(JL),w(jF),f&&t(uje),f&&t(Sd),w(KL),f&&t(bje),f&&t(Ho),w(ZL),w(o8),w(GF),w(r8),w(XF),f&&t(vje),f&&t(Bd),w(t8),f&&t(Fje),f&&t(Uo),w(a8),w(s8),w(WF),w(l8),w(KF),f&&t(Tje),f&&t(qd),w(i8),f&&t(Mje),f&&t(Jo),w(d8),w(f8),w(eT),w(m8),w(tT),f&&t(Eje),f&&t(Gd),w(g8),f&&t(Cje),f&&t(Yo),w(h8),w(_8),w(nT),w(u8),w(YT),f&&t(wje),f&&t(Xd),w(b8),f&&t(Aje),f&&t(Ko),w(v8),w(T8),w(ZT),w(M8),w(EM),f&&t(yje),f&&t(Qd),w(E8),f&&t(Lje),f&&t(Zo),w(C8),w(A8),w(wM),w(y8),w(qM),f&&t(xje),f&&t(Jd),w(L8),f&&t($je),f&&t(er),w(x8),w(k8),w(DM),w(S8),w(zM),f&&t(kje),f&&t(Zd),w(R8),f&&t(Sje),f&&t(or),w(P8),w(I8),w(QM),w(N8),w(hE),f&&t(Rje),f&&t(rc),w(q8),f&&t(Pje),f&&t(rr),w(j8),w(G8),w(_E),w(O8),w(yE),f&&t(Bje),f&&t(nc),w(V8),f&&t(Ije),f&&t(tr),w(X8),w(W8),w(xE),w(Q8),w(rC),f&&t(Nje),f&&t(ic),w(H8),f&&t(qje),f&&t(ar),w(U8),w(Y8),w(aC),w(K8),w(MC),f&&t(jje),f&&t(fc),w(Z8),f&&t(Dje),f&&t(nr),w(e9),w(r9),w(CC),w(t9),w(yC),f&&t(Gje),f&&t(hc),w(n9),f&&t(Oje),f&&t(sr),w(s9),w(i9),w(xC),w(d9),w(kC),f&&t(Vje),f&&t(uc),w(c9),f&&t(Xje),f&&t(lr),w(f9),w(g9),w(RC),w(h9),w(e5),f&&t(zje),f&&t(Fc),w(p9),f&&t(Wje),f&&t(ir),w(_9),w(b9),w(r5),w(v9),w(E5),f&&t(Qje),f&&t(Ec),w(F9),f&&t(Hje),f&&t(dr),w(T9),w(E9),w(w5),w(C9),w(y5),f&&t(Uje),f&&t(Ac),w(w9),f&&t(Jje),f&&t(cr),w(A9),w(L9),w(x5),w(x9),w(k5),f&&t(Yje),f&&t(xc),w($9),f&&t(Kje),f&&t(fr),w(k9),w(R9),w(R5),w(P9),w(n3),f&&t(Zje),f&&t(Sc),w(B9),f&&t(eDe),f&&t(mr),w(I9),w(q9),w(l3),w(j9),w(u3),f&&t(oDe),f&&t(Bc),w(D9),f&&t(rDe),f&&t(gr),w(G9),w(V9),w(v3),w(X9),w(S3),f&&t(tDe),f&&t(qc),w(z9),f&&t(aDe),f&&t(hr),w(W9),w(H9),w(P3),w(U9),w(z3),f&&t(nDe),f&&t(Gc),w(J9),f&&t(sDe),f&&t(pr),w(Y9),w(Z9),w(Q3),w(ex),w(tw),f&&t(lDe),f&&t(Xc),w(ox),f&&t(iDe),f&&t(_r),w(rx),w(ax),w(nw),w(nx),w(_w),f&&t(dDe),f&&t(Qc),w(sx),f&&t(cDe),f&&t(ur),w(lx),w(dx),w(bw),w(cx),w(xw),f&&t(fDe),f&&t(Jc),w(fx),f&&t(mDe),f&&t(br),w(mx),w(hx),w(kw),w(px),w(Dw),f&&t(gDe),f&&t(Zc),w(_x),f&&t(hDe),f&&t(vr),w(ux),w(vx),w(Ow),w(Fx),w(Yw),f&&t(pDe),f&&t(rf),w(Tx),f&&t(_De),f&&t(Fr),w(Mx),w(Cx),w(Zw),w(wx),w(o0),f&&t(uDe),f&&t(nf),w(Ax),f&&t(bDe),f&&t(Tr),w(yx),w(xx),w(t0),w($x),w(s0),f&&t(vDe),f&&t(df),w(Sx),f&&t(FDe),f&&t(Mr),w(Rx),w(Bx),w(i0),w(Ix),w(c0)}}}const cRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fRt(L){return fkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bRt extends lkt{constructor(g){super();ikt(this,g,fRt,dRt,dkt,{})}}export{bRt as default,cRt as metadata};
