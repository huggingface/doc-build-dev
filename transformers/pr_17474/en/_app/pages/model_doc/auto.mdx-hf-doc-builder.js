import{S as rRt,i as tRt,s as aRt,e as a,k as l,w as F,t as o,M as nRt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as sRt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Yzr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function lRt(y){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,N6,uf,De,We,pi,Ln,q6,yn,xn,j6,_i,$n,D6,ui,bf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),N6=o(")."),uf=l(),De=a("p"),We=o("Likewise, if your "),pi=a("code"),Ln=o("NewModel"),q6=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),j6=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),D6=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var sk=s(p);m=r(sk,"NewModelConfig"),sk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var lk=s(mi);_f=r(lk,"model_type"),lk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var ik=s(gi);hi=r(ik,'"new-model"'),ik.forEach(t),N6=r(Ae,")."),Ae.forEach(t),uf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var wa=s(pi);Ln=r(wa,"NewModel"),wa.forEach(t),q6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var dk=s(yn);xn=r(dk,"PreTrainedModel"),dk.forEach(t),j6=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),D6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var ck=s(ui);bf=r(ck,"NewModelConfig"),ck.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,rt),e(g,gi),e(gi,hi),e(g,N6),b(Qe,uf,Ae),b(Qe,De,Ae),e(De,We),e(De,pi),e(pi,Ln),e(De,q6),e(De,yn),e(yn,xn),e(De,j6),e(De,_i),e(_i,$n),e(De,D6),e(De,ui),e(ui,bf),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(De)}}}function iRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function fRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(y){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function gRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function APt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Pt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZPt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tBt(y){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aBt(y){let g,v,p,m,_,d,h,Mo,mi,_f,rt,gi,hi,N6,uf,De,We,pi,Ln,q6,yn,xn,j6,_i,$n,D6,ui,bf,Ca,Qe,Ae,sk,bi,lk,ik,Eo,wa,dk,vf,ck,mVe,oje,vi,Ff,Ioe,G6,gVe,Noe,hVe,rje,kn,pVe,qoe,_Ve,uVe,joe,bVe,vVe,tje,O6,aje,fk,FVe,nje,Tf,sje,Fi,Mf,Doe,V6,TVe,Goe,MVe,lje,Co,X6,EVe,z6,CVe,mk,wVe,AVe,LVe,W6,yVe,Ooe,xVe,$Ve,kVe,Er,Q6,SVe,Voe,RVe,PVe,Ti,BVe,Xoe,IVe,NVe,zoe,qVe,jVe,DVe,A,Ef,Woe,GVe,OVe,gk,VVe,XVe,zVe,Cf,Qoe,WVe,QVe,hk,HVe,UVe,JVe,wf,Hoe,YVe,KVe,pk,ZVe,eXe,oXe,Af,Uoe,rXe,tXe,_k,aXe,nXe,sXe,Lf,Joe,lXe,iXe,uk,dXe,cXe,fXe,yf,Yoe,mXe,gXe,bk,hXe,pXe,_Xe,xf,Koe,uXe,bXe,vk,vXe,FXe,TXe,$f,Zoe,MXe,EXe,Fk,CXe,wXe,AXe,kf,ere,LXe,yXe,Tk,xXe,$Xe,kXe,Sf,ore,SXe,RXe,Mk,PXe,BXe,IXe,Rf,rre,NXe,qXe,Ek,jXe,DXe,GXe,Pf,tre,OXe,VXe,Ck,XXe,zXe,WXe,Bf,are,QXe,HXe,wk,UXe,JXe,YXe,If,nre,KXe,ZXe,Ak,eze,oze,rze,Nf,sre,tze,aze,Lk,nze,sze,lze,qf,lre,ize,dze,yk,cze,fze,mze,jf,ire,gze,hze,xk,pze,_ze,uze,Df,dre,bze,vze,$k,Fze,Tze,Mze,Gf,cre,Eze,Cze,kk,wze,Aze,Lze,Of,fre,yze,xze,Sk,$ze,kze,Sze,Vf,mre,Rze,Pze,Rk,Bze,Ize,Nze,Xf,gre,qze,jze,Pk,Dze,Gze,Oze,zf,hre,Vze,Xze,Bk,zze,Wze,Qze,Wf,pre,Hze,Uze,Ik,Jze,Yze,Kze,Qf,_re,Zze,eWe,Nk,oWe,rWe,tWe,Hf,ure,aWe,nWe,qk,sWe,lWe,iWe,Uf,bre,dWe,cWe,jk,fWe,mWe,gWe,Jf,vre,hWe,pWe,Dk,_We,uWe,bWe,Yf,Fre,vWe,FWe,Gk,TWe,MWe,EWe,Kf,Tre,CWe,wWe,Ok,AWe,LWe,yWe,Zf,Mre,xWe,$We,Vk,kWe,SWe,RWe,em,Ere,PWe,BWe,Xk,IWe,NWe,qWe,om,Cre,jWe,DWe,zk,GWe,OWe,VWe,rm,wre,XWe,zWe,Wk,WWe,QWe,HWe,tm,Are,UWe,JWe,Qk,YWe,KWe,ZWe,am,Lre,eQe,oQe,Hk,rQe,tQe,aQe,nm,yre,nQe,sQe,Uk,lQe,iQe,dQe,sm,xre,cQe,fQe,Jk,mQe,gQe,hQe,lm,$re,pQe,_Qe,Yk,uQe,bQe,vQe,im,kre,FQe,TQe,Kk,MQe,EQe,CQe,dm,Sre,wQe,AQe,Zk,LQe,yQe,xQe,cm,Rre,$Qe,kQe,eS,SQe,RQe,PQe,fm,Pre,BQe,IQe,oS,NQe,qQe,jQe,mm,Bre,DQe,GQe,rS,OQe,VQe,XQe,gm,Ire,zQe,WQe,tS,QQe,HQe,UQe,hm,Nre,JQe,YQe,aS,KQe,ZQe,eHe,pm,qre,oHe,rHe,nS,tHe,aHe,nHe,_m,jre,sHe,lHe,sS,iHe,dHe,cHe,um,Dre,fHe,mHe,lS,gHe,hHe,pHe,bm,Gre,_He,uHe,iS,bHe,vHe,FHe,vm,Ore,THe,MHe,dS,EHe,CHe,wHe,Fm,Vre,AHe,LHe,cS,yHe,xHe,$He,Tm,Xre,kHe,SHe,fS,RHe,PHe,BHe,Mm,zre,IHe,NHe,mS,qHe,jHe,DHe,Em,Wre,GHe,OHe,gS,VHe,XHe,zHe,Cm,Qre,WHe,QHe,hS,HHe,UHe,JHe,wm,Hre,YHe,KHe,pS,ZHe,eUe,oUe,Am,Ure,rUe,tUe,_S,aUe,nUe,sUe,Lm,Jre,lUe,iUe,uS,dUe,cUe,fUe,ym,Yre,mUe,gUe,bS,hUe,pUe,_Ue,xm,Kre,uUe,bUe,vS,vUe,FUe,TUe,$m,Zre,MUe,EUe,FS,CUe,wUe,AUe,km,ete,LUe,yUe,TS,xUe,$Ue,kUe,Sm,ote,SUe,RUe,MS,PUe,BUe,IUe,Rm,rte,NUe,qUe,ES,jUe,DUe,GUe,Pm,tte,OUe,VUe,CS,XUe,zUe,WUe,Bm,ate,QUe,HUe,wS,UUe,JUe,YUe,Im,nte,KUe,ZUe,AS,eJe,oJe,rJe,Nm,ste,tJe,aJe,LS,nJe,sJe,lJe,qm,lte,iJe,dJe,yS,cJe,fJe,mJe,jm,ite,gJe,hJe,xS,pJe,_Je,uJe,Dm,dte,bJe,vJe,$S,FJe,TJe,MJe,Gm,cte,EJe,CJe,kS,wJe,AJe,LJe,Om,fte,yJe,xJe,SS,$Je,kJe,SJe,Vm,mte,RJe,PJe,RS,BJe,IJe,NJe,Xm,gte,qJe,jJe,PS,DJe,GJe,OJe,zm,hte,VJe,XJe,BS,zJe,WJe,QJe,Wm,pte,HJe,UJe,IS,JJe,YJe,KJe,Qm,_te,ZJe,eYe,NS,oYe,rYe,tYe,Hm,ute,aYe,nYe,qS,sYe,lYe,iYe,Um,bte,dYe,cYe,jS,fYe,mYe,gYe,Jm,vte,hYe,pYe,DS,_Ye,uYe,bYe,Ym,Fte,vYe,FYe,GS,TYe,MYe,EYe,Km,Tte,CYe,wYe,OS,AYe,LYe,yYe,Zm,Mte,xYe,$Ye,VS,kYe,SYe,RYe,eg,Ete,PYe,BYe,XS,IYe,NYe,qYe,og,Cte,jYe,DYe,zS,GYe,OYe,VYe,rg,wte,XYe,zYe,WS,WYe,QYe,HYe,tg,Ate,UYe,JYe,QS,YYe,KYe,ZYe,ag,Lte,eKe,oKe,HS,rKe,tKe,aKe,ng,yte,nKe,sKe,US,lKe,iKe,dKe,sg,xte,cKe,fKe,JS,mKe,gKe,hKe,lg,$te,pKe,_Ke,YS,uKe,bKe,vKe,ig,kte,FKe,TKe,KS,MKe,EKe,CKe,dg,Ste,wKe,AKe,ZS,LKe,yKe,xKe,cg,Rte,$Ke,kKe,eR,SKe,RKe,PKe,fg,Pte,BKe,IKe,oR,NKe,qKe,jKe,mg,Bte,DKe,GKe,rR,OKe,VKe,XKe,gg,Ite,zKe,WKe,tR,QKe,HKe,UKe,hg,Nte,JKe,YKe,aR,KKe,ZKe,eZe,pg,qte,oZe,rZe,nR,tZe,aZe,nZe,_g,jte,sZe,lZe,sR,iZe,dZe,cZe,ug,Dte,fZe,mZe,lR,gZe,hZe,pZe,bg,Gte,_Ze,uZe,iR,bZe,vZe,FZe,vg,Ote,TZe,MZe,dR,EZe,CZe,wZe,Fg,Vte,AZe,LZe,cR,yZe,xZe,$Ze,Tg,Xte,kZe,SZe,fR,RZe,PZe,BZe,Mg,zte,IZe,NZe,mR,qZe,jZe,DZe,Eg,Wte,GZe,OZe,gR,VZe,XZe,zZe,Cg,Qte,WZe,QZe,hR,HZe,UZe,JZe,wg,Hte,YZe,KZe,pR,ZZe,eeo,oeo,Ag,reo,Lg,H6,teo,Ute,aeo,ije,Mi,yg,Jte,U6,neo,Yte,seo,dje,wo,J6,leo,Y6,ieo,_R,deo,ceo,feo,K6,meo,Kte,geo,heo,peo,Cr,Z6,_eo,Zte,ueo,beo,Aa,veo,eae,Feo,Teo,oae,Meo,Eeo,rae,Ceo,weo,Aeo,k,Sn,tae,Leo,yeo,uR,xeo,$eo,bR,keo,Seo,Reo,Rn,aae,Peo,Beo,vR,Ieo,Neo,FR,qeo,jeo,Deo,Pn,nae,Geo,Oeo,TR,Veo,Xeo,MR,zeo,Weo,Qeo,xg,sae,Heo,Ueo,ER,Jeo,Yeo,Keo,Bn,lae,Zeo,eoo,CR,ooo,roo,wR,too,aoo,noo,$g,iae,soo,loo,AR,ioo,doo,coo,kg,dae,foo,moo,LR,goo,hoo,poo,Sg,cae,_oo,uoo,yR,boo,voo,Foo,In,fae,Too,Moo,xR,Eoo,Coo,$R,woo,Aoo,Loo,Nn,mae,yoo,xoo,kR,$oo,koo,SR,Soo,Roo,Poo,qn,gae,Boo,Ioo,RR,Noo,qoo,PR,joo,Doo,Goo,Rg,hae,Ooo,Voo,BR,Xoo,zoo,Woo,Pg,pae,Qoo,Hoo,IR,Uoo,Joo,Yoo,Bg,_ae,Koo,Zoo,NR,ero,oro,rro,jn,uae,tro,aro,qR,nro,sro,jR,lro,iro,dro,Ig,bae,cro,fro,DR,mro,gro,hro,Dn,vae,pro,_ro,GR,uro,bro,OR,vro,Fro,Tro,Gn,Fae,Mro,Ero,VR,Cro,wro,XR,Aro,Lro,yro,On,Tae,xro,$ro,zR,kro,Sro,WR,Rro,Pro,Bro,Ng,Mae,Iro,Nro,QR,qro,jro,Dro,Vn,Eae,Gro,Oro,HR,Vro,Xro,UR,zro,Wro,Qro,Xn,Cae,Hro,Uro,JR,Jro,Yro,YR,Kro,Zro,eto,zn,wae,oto,rto,KR,tto,ato,ZR,nto,sto,lto,Wn,Aae,ito,dto,eP,cto,fto,oP,mto,gto,hto,Qn,Lae,pto,_to,rP,uto,bto,tP,vto,Fto,Tto,Hn,yae,Mto,Eto,aP,Cto,wto,nP,Ato,Lto,yto,qg,xae,xto,$to,sP,kto,Sto,Rto,Un,$ae,Pto,Bto,lP,Ito,Nto,iP,qto,jto,Dto,jg,kae,Gto,Oto,dP,Vto,Xto,zto,Jn,Sae,Wto,Qto,cP,Hto,Uto,fP,Jto,Yto,Kto,Yn,Rae,Zto,eao,mP,oao,rao,gP,tao,aao,nao,Kn,Pae,sao,lao,hP,iao,dao,pP,cao,fao,mao,Dg,Bae,gao,hao,_P,pao,_ao,uao,Zn,Iae,bao,vao,uP,Fao,Tao,bP,Mao,Eao,Cao,es,Nae,wao,Aao,vP,Lao,yao,FP,xao,$ao,kao,Gg,qae,Sao,Rao,TP,Pao,Bao,Iao,os,jae,Nao,qao,MP,jao,Dao,EP,Gao,Oao,Vao,rs,Dae,Xao,zao,CP,Wao,Qao,wP,Hao,Uao,Jao,ts,Gae,Yao,Kao,AP,Zao,eno,LP,ono,rno,tno,as,Oae,ano,nno,yP,sno,lno,xP,ino,dno,cno,ns,Vae,fno,mno,$P,gno,hno,kP,pno,_no,uno,ss,Xae,bno,vno,SP,Fno,Tno,RP,Mno,Eno,Cno,ls,zae,wno,Ano,PP,Lno,yno,BP,xno,$no,kno,Og,Wae,Sno,Rno,IP,Pno,Bno,Ino,is,Qae,Nno,qno,NP,jno,Dno,qP,Gno,Ono,Vno,Vg,Hae,Xno,zno,jP,Wno,Qno,Hno,Xg,Uae,Uno,Jno,DP,Yno,Kno,Zno,ds,Jae,eso,oso,GP,rso,tso,OP,aso,nso,sso,cs,Yae,lso,iso,VP,dso,cso,XP,fso,mso,gso,fs,Kae,hso,pso,zP,_so,uso,WP,bso,vso,Fso,zg,Zae,Tso,Mso,QP,Eso,Cso,wso,ms,ene,Aso,Lso,HP,yso,xso,UP,$so,kso,Sso,gs,one,Rso,Pso,JP,Bso,Iso,YP,Nso,qso,jso,hs,rne,Dso,Gso,KP,Oso,Vso,ZP,Xso,zso,Wso,ps,tne,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,_s,ane,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,Wg,nne,llo,ilo,aB,dlo,clo,flo,us,sne,mlo,glo,nB,hlo,plo,sB,_lo,ulo,blo,Qg,lne,vlo,Flo,lB,Tlo,Mlo,Elo,Hg,ine,Clo,wlo,iB,Alo,Llo,ylo,Ug,dne,xlo,$lo,dB,klo,Slo,Rlo,Jg,cne,Plo,Blo,cB,Ilo,Nlo,qlo,bs,fne,jlo,Dlo,fB,Glo,Olo,mB,Vlo,Xlo,zlo,Yg,mne,Wlo,Qlo,gB,Hlo,Ulo,Jlo,vs,gne,Ylo,Klo,hB,Zlo,eio,pB,oio,rio,tio,Fs,hne,aio,nio,_B,sio,lio,uB,iio,dio,cio,Ts,pne,fio,mio,bB,gio,hio,vB,pio,_io,uio,Ms,_ne,bio,vio,FB,Fio,Tio,TB,Mio,Eio,Cio,Es,une,wio,Aio,MB,Lio,yio,EB,xio,$io,kio,Cs,bne,Sio,Rio,CB,Pio,Bio,wB,Iio,Nio,qio,Kg,vne,jio,Dio,AB,Gio,Oio,Vio,Zg,Fne,Xio,zio,LB,Wio,Qio,Hio,ws,Tne,Uio,Jio,yB,Yio,Kio,xB,Zio,edo,odo,As,Mne,rdo,tdo,$B,ado,ndo,kB,sdo,ldo,ido,Ls,Ene,ddo,cdo,SB,fdo,mdo,RB,gdo,hdo,pdo,eh,Cne,_do,udo,PB,bdo,vdo,Fdo,oh,wne,Tdo,Mdo,BB,Edo,Cdo,wdo,rh,Ane,Ado,Ldo,IB,ydo,xdo,$do,ys,Lne,kdo,Sdo,NB,Rdo,Pdo,qB,Bdo,Ido,Ndo,th,yne,qdo,jdo,jB,Ddo,Gdo,Odo,ah,xne,Vdo,Xdo,DB,zdo,Wdo,Qdo,nh,$ne,Hdo,Udo,GB,Jdo,Ydo,Kdo,xs,kne,Zdo,eco,OB,oco,rco,VB,tco,aco,nco,sh,Sne,sco,lco,XB,ico,dco,cco,lh,Rne,fco,mco,zB,gco,hco,pco,$s,Pne,_co,uco,WB,bco,vco,QB,Fco,Tco,Mco,ks,Bne,Eco,Cco,HB,wco,Aco,UB,Lco,yco,xco,Ss,Ine,$co,kco,JB,Sco,Rco,YB,Pco,Bco,Ico,Rs,Nne,Nco,qco,KB,jco,Dco,ZB,Gco,Oco,Vco,ih,Xco,dh,eL,zco,qne,Wco,cje,Ei,ch,jne,oL,Qco,Dne,Hco,fje,Ao,rL,Uco,tL,Jco,eI,Yco,Kco,Zco,aL,efo,Gne,ofo,rfo,tfo,He,nL,afo,One,nfo,sfo,La,lfo,Vne,ifo,dfo,Xne,cfo,ffo,zne,mfo,gfo,hfo,Y,fh,Wne,pfo,_fo,oI,ufo,bfo,vfo,mh,Qne,Ffo,Tfo,rI,Mfo,Efo,Cfo,gh,Hne,wfo,Afo,tI,Lfo,yfo,xfo,hh,Une,$fo,kfo,aI,Sfo,Rfo,Pfo,ph,Jne,Bfo,Ifo,nI,Nfo,qfo,jfo,_h,Yne,Dfo,Gfo,sI,Ofo,Vfo,Xfo,uh,Kne,zfo,Wfo,lI,Qfo,Hfo,Ufo,bh,Zne,Jfo,Yfo,iI,Kfo,Zfo,emo,vh,ese,omo,rmo,dI,tmo,amo,nmo,Fh,ose,smo,lmo,cI,imo,dmo,cmo,Th,rse,fmo,mmo,fI,gmo,hmo,pmo,Mh,tse,_mo,umo,mI,bmo,vmo,Fmo,Eh,ase,Tmo,Mmo,gI,Emo,Cmo,wmo,Ch,nse,Amo,Lmo,hI,ymo,xmo,$mo,wh,sse,kmo,Smo,pI,Rmo,Pmo,Bmo,Ah,lse,Imo,Nmo,_I,qmo,jmo,Dmo,Lh,ise,Gmo,Omo,uI,Vmo,Xmo,zmo,yh,dse,Wmo,Qmo,bI,Hmo,Umo,Jmo,xh,cse,Ymo,Kmo,vI,Zmo,ego,ogo,$h,fse,rgo,tgo,FI,ago,ngo,sgo,kh,mse,lgo,igo,TI,dgo,cgo,fgo,Sh,gse,mgo,ggo,MI,hgo,pgo,_go,Rh,hse,ugo,bgo,EI,vgo,Fgo,Tgo,Ph,pse,Mgo,Ego,CI,Cgo,wgo,Ago,Bh,_se,Lgo,ygo,wI,xgo,$go,kgo,Ih,use,Sgo,Rgo,AI,Pgo,Bgo,Igo,Nh,bse,Ngo,qgo,LI,jgo,Dgo,Ggo,qh,vse,Ogo,Vgo,yI,Xgo,zgo,Wgo,jh,Fse,Qgo,Hgo,xI,Ugo,Jgo,Ygo,Dh,Tse,Kgo,Zgo,$I,eho,oho,rho,Gh,tho,Oh,aho,Vh,sL,nho,Mse,sho,mje,Ci,Xh,Ese,lL,lho,Cse,iho,gje,Lo,iL,dho,dL,cho,kI,fho,mho,gho,cL,hho,wse,pho,_ho,uho,Ue,fL,bho,Ase,vho,Fho,wi,Tho,Lse,Mho,Eho,yse,Cho,who,Aho,he,zh,xse,Lho,yho,SI,xho,$ho,kho,Wh,$se,Sho,Rho,kse,Pho,Bho,Iho,Qh,Sse,Nho,qho,RI,jho,Dho,Gho,Hh,Rse,Oho,Vho,PI,Xho,zho,Who,Uh,Pse,Qho,Hho,BI,Uho,Jho,Yho,Jh,Bse,Kho,Zho,II,epo,opo,rpo,Yh,Ise,tpo,apo,NI,npo,spo,lpo,Kh,Nse,ipo,dpo,qI,cpo,fpo,mpo,Zh,qse,gpo,hpo,jI,ppo,_po,upo,ep,jse,bpo,vpo,DI,Fpo,Tpo,Mpo,op,Dse,Epo,Cpo,GI,wpo,Apo,Lpo,rp,Gse,ypo,xpo,OI,$po,kpo,Spo,tp,Ose,Rpo,Ppo,VI,Bpo,Ipo,Npo,ap,Vse,qpo,jpo,XI,Dpo,Gpo,Opo,np,Xse,Vpo,Xpo,zI,zpo,Wpo,Qpo,sp,zse,Hpo,Upo,WI,Jpo,Ypo,Kpo,lp,Wse,Zpo,e_o,QI,o_o,r_o,t_o,ip,a_o,dp,n_o,cp,mL,s_o,Qse,l_o,hje,Ai,fp,Hse,gL,i_o,Use,d_o,pje,yo,hL,c_o,Li,f_o,HI,m_o,g_o,UI,h_o,p_o,__o,pL,u_o,Jse,b_o,v_o,F_o,tt,_L,T_o,Yse,M_o,E_o,yi,C_o,Kse,w_o,A_o,JI,L_o,y_o,x_o,mp,$_o,Je,uL,k_o,Zse,S_o,R_o,ya,P_o,ele,B_o,I_o,ole,N_o,q_o,rle,j_o,D_o,G_o,x,gp,tle,O_o,V_o,YI,X_o,z_o,W_o,hp,ale,Q_o,H_o,KI,U_o,J_o,Y_o,pp,nle,K_o,Z_o,ZI,euo,ouo,ruo,_p,sle,tuo,auo,eN,nuo,suo,luo,up,lle,iuo,duo,oN,cuo,fuo,muo,bp,ile,guo,huo,rN,puo,_uo,uuo,vp,dle,buo,vuo,tN,Fuo,Tuo,Muo,Fp,cle,Euo,Cuo,aN,wuo,Auo,Luo,Tp,fle,yuo,xuo,nN,$uo,kuo,Suo,Mp,mle,Ruo,Puo,sN,Buo,Iuo,Nuo,Ep,gle,quo,juo,lN,Duo,Guo,Ouo,Cp,hle,Vuo,Xuo,iN,zuo,Wuo,Quo,wp,ple,Huo,Uuo,dN,Juo,Yuo,Kuo,Ap,_le,Zuo,e4o,cN,o4o,r4o,t4o,Lp,ule,a4o,n4o,fN,s4o,l4o,i4o,yp,ble,d4o,c4o,mN,f4o,m4o,g4o,xp,vle,h4o,p4o,gN,_4o,u4o,b4o,$p,Fle,v4o,F4o,hN,T4o,M4o,E4o,kp,Tle,C4o,w4o,pN,A4o,L4o,y4o,Sp,Mle,x4o,$4o,_N,k4o,S4o,R4o,Rp,Ele,P4o,B4o,uN,I4o,N4o,q4o,Pp,Cle,j4o,D4o,bN,G4o,O4o,V4o,Bp,wle,X4o,z4o,vN,W4o,Q4o,H4o,Ip,Ale,U4o,J4o,FN,Y4o,K4o,Z4o,Np,Lle,e1o,o1o,TN,r1o,t1o,a1o,qp,yle,n1o,s1o,MN,l1o,i1o,d1o,jp,xle,c1o,f1o,EN,m1o,g1o,h1o,Dp,$le,p1o,_1o,CN,u1o,b1o,v1o,Gp,kle,F1o,T1o,wN,M1o,E1o,C1o,Op,Sle,w1o,A1o,AN,L1o,y1o,x1o,Vp,Rle,$1o,k1o,LN,S1o,R1o,P1o,Xp,Ple,B1o,I1o,yN,N1o,q1o,j1o,zp,Ble,D1o,G1o,xN,O1o,V1o,X1o,Ps,Ile,z1o,W1o,$N,Q1o,H1o,kN,U1o,J1o,Y1o,Wp,Nle,K1o,Z1o,SN,e7o,o7o,r7o,Qp,qle,t7o,a7o,RN,n7o,s7o,l7o,Hp,jle,i7o,d7o,PN,c7o,f7o,m7o,Up,Dle,g7o,h7o,BN,p7o,_7o,u7o,Jp,Gle,b7o,v7o,IN,F7o,T7o,M7o,Yp,Ole,E7o,C7o,NN,w7o,A7o,L7o,Kp,Vle,y7o,x7o,qN,$7o,k7o,S7o,Zp,Xle,R7o,P7o,jN,B7o,I7o,N7o,e_,zle,q7o,j7o,DN,D7o,G7o,O7o,o_,Wle,V7o,X7o,GN,z7o,W7o,Q7o,r_,Qle,H7o,U7o,ON,J7o,Y7o,K7o,t_,Hle,Z7o,ebo,VN,obo,rbo,tbo,a_,Ule,abo,nbo,XN,sbo,lbo,ibo,n_,Jle,dbo,cbo,zN,fbo,mbo,gbo,s_,Yle,hbo,pbo,WN,_bo,ubo,bbo,l_,Kle,vbo,Fbo,QN,Tbo,Mbo,Ebo,i_,Zle,Cbo,wbo,HN,Abo,Lbo,ybo,d_,eie,xbo,$bo,UN,kbo,Sbo,Rbo,c_,oie,Pbo,Bbo,JN,Ibo,Nbo,qbo,f_,rie,jbo,Dbo,YN,Gbo,Obo,Vbo,m_,tie,Xbo,zbo,KN,Wbo,Qbo,Hbo,g_,aie,Ubo,Jbo,ZN,Ybo,Kbo,Zbo,h_,nie,e2o,o2o,eq,r2o,t2o,a2o,p_,sie,n2o,s2o,oq,l2o,i2o,d2o,__,lie,c2o,f2o,rq,m2o,g2o,h2o,u_,iie,p2o,_2o,tq,u2o,b2o,v2o,b_,die,F2o,T2o,aq,M2o,E2o,C2o,v_,cie,w2o,A2o,nq,L2o,y2o,x2o,F_,fie,$2o,k2o,sq,S2o,R2o,P2o,T_,mie,B2o,I2o,lq,N2o,q2o,j2o,M_,gie,D2o,G2o,iq,O2o,V2o,X2o,E_,hie,z2o,W2o,dq,Q2o,H2o,U2o,C_,pie,J2o,Y2o,cq,K2o,Z2o,evo,w_,_ie,ovo,rvo,fq,tvo,avo,nvo,A_,uie,svo,lvo,mq,ivo,dvo,cvo,L_,bie,fvo,mvo,gq,gvo,hvo,pvo,y_,vie,_vo,uvo,hq,bvo,vvo,Fvo,x_,Fie,Tvo,Mvo,pq,Evo,Cvo,wvo,$_,Tie,Avo,Lvo,_q,yvo,xvo,$vo,k_,Mie,kvo,Svo,uq,Rvo,Pvo,Bvo,S_,Eie,Ivo,Nvo,bq,qvo,jvo,Dvo,R_,Cie,Gvo,Ovo,vq,Vvo,Xvo,zvo,P_,wie,Wvo,Qvo,Fq,Hvo,Uvo,Jvo,B_,Aie,Yvo,Kvo,Tq,Zvo,eFo,oFo,I_,Lie,rFo,tFo,Mq,aFo,nFo,sFo,N_,yie,lFo,iFo,Eq,dFo,cFo,fFo,q_,xie,mFo,gFo,Cq,hFo,pFo,_Fo,j_,$ie,uFo,bFo,wq,vFo,FFo,TFo,D_,kie,MFo,EFo,Aq,CFo,wFo,AFo,G_,Sie,LFo,yFo,Lq,xFo,$Fo,kFo,O_,Rie,SFo,RFo,yq,PFo,BFo,IFo,V_,Pie,NFo,qFo,xq,jFo,DFo,GFo,X_,Bie,OFo,VFo,$q,XFo,zFo,WFo,z_,Iie,QFo,HFo,kq,UFo,JFo,YFo,W_,Nie,KFo,ZFo,Sq,eTo,oTo,rTo,Q_,qie,tTo,aTo,Rq,nTo,sTo,lTo,H_,jie,iTo,dTo,Pq,cTo,fTo,mTo,U_,Die,gTo,hTo,Bq,pTo,_To,uTo,J_,Gie,bTo,vTo,Iq,FTo,TTo,MTo,Y_,Oie,ETo,CTo,Nq,wTo,ATo,LTo,K_,Vie,yTo,xTo,qq,$To,kTo,STo,Z_,Xie,RTo,PTo,jq,BTo,ITo,NTo,eu,zie,qTo,jTo,Dq,DTo,GTo,OTo,ou,Wie,VTo,XTo,Gq,zTo,WTo,QTo,ru,Qie,HTo,UTo,Oq,JTo,YTo,KTo,tu,Hie,ZTo,eMo,Vq,oMo,rMo,tMo,au,Uie,aMo,nMo,Xq,sMo,lMo,iMo,nu,Jie,dMo,cMo,zq,fMo,mMo,gMo,su,Yie,hMo,pMo,Wq,_Mo,uMo,bMo,lu,Kie,vMo,FMo,Qq,TMo,MMo,EMo,iu,CMo,Zie,wMo,AMo,ede,LMo,yMo,du,_je,xi,cu,ode,bL,xMo,rde,$Mo,uje,xo,vL,kMo,$i,SMo,Hq,RMo,PMo,Uq,BMo,IMo,NMo,FL,qMo,tde,jMo,DMo,GMo,at,TL,OMo,ade,VMo,XMo,ki,zMo,nde,WMo,QMo,Jq,HMo,UMo,JMo,fu,YMo,Ye,ML,KMo,sde,ZMo,eEo,xa,oEo,lde,rEo,tEo,ide,aEo,nEo,dde,sEo,lEo,iEo,G,mu,cde,dEo,cEo,Yq,fEo,mEo,gEo,gu,fde,hEo,pEo,Kq,_Eo,uEo,bEo,hu,mde,vEo,FEo,Zq,TEo,MEo,EEo,pu,gde,CEo,wEo,ej,AEo,LEo,yEo,_u,hde,xEo,$Eo,oj,kEo,SEo,REo,uu,pde,PEo,BEo,rj,IEo,NEo,qEo,bu,_de,jEo,DEo,tj,GEo,OEo,VEo,vu,ude,XEo,zEo,aj,WEo,QEo,HEo,Fu,bde,UEo,JEo,nj,YEo,KEo,ZEo,Tu,vde,eCo,oCo,sj,rCo,tCo,aCo,Mu,Fde,nCo,sCo,lj,lCo,iCo,dCo,Eu,Tde,cCo,fCo,ij,mCo,gCo,hCo,Cu,Mde,pCo,_Co,dj,uCo,bCo,vCo,wu,Ede,FCo,TCo,cj,MCo,ECo,CCo,Au,Cde,wCo,ACo,fj,LCo,yCo,xCo,Lu,wde,$Co,kCo,mj,SCo,RCo,PCo,yu,Ade,BCo,ICo,gj,NCo,qCo,jCo,xu,Lde,DCo,GCo,hj,OCo,VCo,XCo,$u,yde,zCo,WCo,pj,QCo,HCo,UCo,ku,xde,JCo,YCo,_j,KCo,ZCo,e5o,Su,$de,o5o,r5o,uj,t5o,a5o,n5o,Ru,kde,s5o,l5o,bj,i5o,d5o,c5o,Pu,Sde,f5o,m5o,vj,g5o,h5o,p5o,Bu,Rde,_5o,u5o,Fj,b5o,v5o,F5o,Iu,Pde,T5o,M5o,Tj,E5o,C5o,w5o,Nu,Bde,A5o,L5o,Mj,y5o,x5o,$5o,qu,Ide,k5o,S5o,Ej,R5o,P5o,B5o,ju,Nde,I5o,N5o,Cj,q5o,j5o,D5o,Du,qde,G5o,O5o,wj,V5o,X5o,z5o,Gu,jde,W5o,Q5o,Aj,H5o,U5o,J5o,Ou,Dde,Y5o,K5o,Lj,Z5o,e3o,o3o,Vu,Gde,r3o,t3o,yj,a3o,n3o,s3o,Xu,Ode,l3o,i3o,xj,d3o,c3o,f3o,zu,Vde,m3o,g3o,$j,h3o,p3o,_3o,Wu,Xde,u3o,b3o,kj,v3o,F3o,T3o,Qu,zde,M3o,E3o,Sj,C3o,w3o,A3o,Hu,Wde,L3o,y3o,Rj,x3o,$3o,k3o,Uu,Qde,S3o,R3o,Pj,P3o,B3o,I3o,Ju,Hde,N3o,q3o,Bj,j3o,D3o,G3o,Yu,Ude,O3o,V3o,Ij,X3o,z3o,W3o,Ku,Jde,Q3o,H3o,Nj,U3o,J3o,Y3o,Zu,Yde,K3o,Z3o,qj,e0o,o0o,r0o,e4,Kde,t0o,a0o,jj,n0o,s0o,l0o,o4,i0o,Zde,d0o,c0o,ece,f0o,m0o,r4,bje,Si,t4,oce,EL,g0o,rce,h0o,vje,$o,CL,p0o,Ri,_0o,Dj,u0o,b0o,Gj,v0o,F0o,T0o,wL,M0o,tce,E0o,C0o,w0o,nt,AL,A0o,ace,L0o,y0o,Pi,x0o,nce,$0o,k0o,Oj,S0o,R0o,P0o,a4,B0o,Ke,LL,I0o,sce,N0o,q0o,$a,j0o,lce,D0o,G0o,ice,O0o,V0o,dce,X0o,z0o,W0o,z,n4,cce,Q0o,H0o,Vj,U0o,J0o,Y0o,s4,fce,K0o,Z0o,Xj,ewo,owo,rwo,l4,mce,two,awo,zj,nwo,swo,lwo,i4,gce,iwo,dwo,Wj,cwo,fwo,mwo,d4,hce,gwo,hwo,Qj,pwo,_wo,uwo,c4,pce,bwo,vwo,Hj,Fwo,Two,Mwo,f4,_ce,Ewo,Cwo,Uj,wwo,Awo,Lwo,m4,uce,ywo,xwo,Jj,$wo,kwo,Swo,g4,bce,Rwo,Pwo,Yj,Bwo,Iwo,Nwo,h4,vce,qwo,jwo,Kj,Dwo,Gwo,Owo,p4,Fce,Vwo,Xwo,Zj,zwo,Wwo,Qwo,_4,Tce,Hwo,Uwo,eD,Jwo,Ywo,Kwo,u4,Mce,Zwo,eAo,oD,oAo,rAo,tAo,b4,Ece,aAo,nAo,rD,sAo,lAo,iAo,v4,Cce,dAo,cAo,tD,fAo,mAo,gAo,F4,wce,hAo,pAo,aD,_Ao,uAo,bAo,T4,Ace,vAo,FAo,nD,TAo,MAo,EAo,M4,Lce,CAo,wAo,sD,AAo,LAo,yAo,E4,yce,xAo,$Ao,lD,kAo,SAo,RAo,C4,xce,PAo,BAo,iD,IAo,NAo,qAo,w4,$ce,jAo,DAo,dD,GAo,OAo,VAo,A4,kce,XAo,zAo,cD,WAo,QAo,HAo,L4,Sce,UAo,JAo,fD,YAo,KAo,ZAo,y4,Rce,e6o,o6o,mD,r6o,t6o,a6o,x4,Pce,n6o,s6o,gD,l6o,i6o,d6o,$4,Bce,c6o,f6o,hD,m6o,g6o,h6o,k4,Ice,p6o,_6o,pD,u6o,b6o,v6o,S4,Nce,F6o,T6o,_D,M6o,E6o,C6o,R4,qce,w6o,A6o,uD,L6o,y6o,x6o,P4,jce,$6o,k6o,bD,S6o,R6o,P6o,B4,Dce,B6o,I6o,vD,N6o,q6o,j6o,I4,Gce,D6o,G6o,FD,O6o,V6o,X6o,N4,Oce,z6o,W6o,TD,Q6o,H6o,U6o,q4,Vce,J6o,Y6o,MD,K6o,Z6o,eLo,j4,Xce,oLo,rLo,ED,tLo,aLo,nLo,D4,zce,sLo,lLo,CD,iLo,dLo,cLo,G4,Wce,fLo,mLo,wD,gLo,hLo,pLo,O4,Qce,_Lo,uLo,AD,bLo,vLo,FLo,V4,TLo,Hce,MLo,ELo,Uce,CLo,wLo,X4,Fje,Bi,z4,Jce,yL,ALo,Yce,LLo,Tje,ko,xL,yLo,Ii,xLo,LD,$Lo,kLo,yD,SLo,RLo,PLo,$L,BLo,Kce,ILo,NLo,qLo,st,kL,jLo,Zce,DLo,GLo,Ni,OLo,efe,VLo,XLo,xD,zLo,WLo,QLo,W4,HLo,Ze,SL,ULo,ofe,JLo,YLo,ka,KLo,rfe,ZLo,eyo,tfe,oyo,ryo,afe,tyo,ayo,nyo,Q,Q4,nfe,syo,lyo,$D,iyo,dyo,cyo,H4,sfe,fyo,myo,kD,gyo,hyo,pyo,U4,lfe,_yo,uyo,SD,byo,vyo,Fyo,J4,ife,Tyo,Myo,RD,Eyo,Cyo,wyo,Y4,dfe,Ayo,Lyo,PD,yyo,xyo,$yo,K4,cfe,kyo,Syo,BD,Ryo,Pyo,Byo,Z4,ffe,Iyo,Nyo,ID,qyo,jyo,Dyo,e1,mfe,Gyo,Oyo,ND,Vyo,Xyo,zyo,o1,gfe,Wyo,Qyo,qD,Hyo,Uyo,Jyo,r1,hfe,Yyo,Kyo,jD,Zyo,e8o,o8o,t1,pfe,r8o,t8o,DD,a8o,n8o,s8o,a1,_fe,l8o,i8o,GD,d8o,c8o,f8o,n1,ufe,m8o,g8o,OD,h8o,p8o,_8o,s1,bfe,u8o,b8o,VD,v8o,F8o,T8o,l1,vfe,M8o,E8o,XD,C8o,w8o,A8o,i1,Ffe,L8o,y8o,zD,x8o,$8o,k8o,d1,Tfe,S8o,R8o,WD,P8o,B8o,I8o,c1,Mfe,N8o,q8o,QD,j8o,D8o,G8o,f1,Efe,O8o,V8o,HD,X8o,z8o,W8o,m1,Cfe,Q8o,H8o,UD,U8o,J8o,Y8o,g1,wfe,K8o,Z8o,JD,e9o,o9o,r9o,h1,Afe,t9o,a9o,YD,n9o,s9o,l9o,p1,Lfe,i9o,d9o,KD,c9o,f9o,m9o,_1,yfe,g9o,h9o,ZD,p9o,_9o,u9o,u1,xfe,b9o,v9o,eG,F9o,T9o,M9o,b1,$fe,E9o,C9o,oG,w9o,A9o,L9o,v1,kfe,y9o,x9o,rG,$9o,k9o,S9o,F1,Sfe,R9o,P9o,tG,B9o,I9o,N9o,T1,Rfe,q9o,j9o,aG,D9o,G9o,O9o,M1,Pfe,V9o,X9o,nG,z9o,W9o,Q9o,E1,Bfe,H9o,U9o,sG,J9o,Y9o,K9o,C1,Ife,Z9o,exo,Nfe,oxo,rxo,txo,w1,qfe,axo,nxo,lG,sxo,lxo,ixo,A1,jfe,dxo,cxo,iG,fxo,mxo,gxo,L1,Dfe,hxo,pxo,dG,_xo,uxo,bxo,y1,Gfe,vxo,Fxo,cG,Txo,Mxo,Exo,x1,Cxo,Ofe,wxo,Axo,Vfe,Lxo,yxo,$1,Mje,qi,k1,Xfe,RL,xxo,zfe,$xo,Eje,So,PL,kxo,ji,Sxo,fG,Rxo,Pxo,mG,Bxo,Ixo,Nxo,BL,qxo,Wfe,jxo,Dxo,Gxo,lt,IL,Oxo,Qfe,Vxo,Xxo,Di,zxo,Hfe,Wxo,Qxo,gG,Hxo,Uxo,Jxo,S1,Yxo,eo,NL,Kxo,Ufe,Zxo,e$o,Sa,o$o,Jfe,r$o,t$o,Yfe,a$o,n$o,Kfe,s$o,l$o,i$o,_e,R1,Zfe,d$o,c$o,hG,f$o,m$o,g$o,P1,eme,h$o,p$o,pG,_$o,u$o,b$o,B1,ome,v$o,F$o,_G,T$o,M$o,E$o,I1,rme,C$o,w$o,uG,A$o,L$o,y$o,N1,tme,x$o,$$o,bG,k$o,S$o,R$o,q1,ame,P$o,B$o,vG,I$o,N$o,q$o,j1,nme,j$o,D$o,FG,G$o,O$o,V$o,D1,sme,X$o,z$o,TG,W$o,Q$o,H$o,G1,lme,U$o,J$o,MG,Y$o,K$o,Z$o,O1,ime,eko,oko,EG,rko,tko,ako,V1,dme,nko,sko,CG,lko,iko,dko,X1,cme,cko,fko,wG,mko,gko,hko,z1,fme,pko,_ko,AG,uko,bko,vko,W1,mme,Fko,Tko,LG,Mko,Eko,Cko,Q1,gme,wko,Ako,yG,Lko,yko,xko,H1,hme,$ko,kko,xG,Sko,Rko,Pko,U1,Bko,pme,Iko,Nko,_me,qko,jko,J1,Cje,Gi,Y1,ume,qL,Dko,bme,Gko,wje,Ro,jL,Oko,Oi,Vko,$G,Xko,zko,kG,Wko,Qko,Hko,DL,Uko,vme,Jko,Yko,Kko,it,GL,Zko,Fme,eSo,oSo,Vi,rSo,Tme,tSo,aSo,SG,nSo,sSo,lSo,K1,iSo,oo,OL,dSo,Mme,cSo,fSo,Ra,mSo,Eme,gSo,hSo,Cme,pSo,_So,wme,uSo,bSo,vSo,N,Z1,Ame,FSo,TSo,RG,MSo,ESo,CSo,e7,Lme,wSo,ASo,PG,LSo,ySo,xSo,o7,yme,$So,kSo,BG,SSo,RSo,PSo,r7,xme,BSo,ISo,IG,NSo,qSo,jSo,t7,$me,DSo,GSo,NG,OSo,VSo,XSo,a7,kme,zSo,WSo,qG,QSo,HSo,USo,n7,Sme,JSo,YSo,jG,KSo,ZSo,eRo,s7,Rme,oRo,rRo,DG,tRo,aRo,nRo,l7,Pme,sRo,lRo,GG,iRo,dRo,cRo,i7,Bme,fRo,mRo,OG,gRo,hRo,pRo,d7,Ime,_Ro,uRo,VG,bRo,vRo,FRo,c7,Nme,TRo,MRo,XG,ERo,CRo,wRo,f7,qme,ARo,LRo,zG,yRo,xRo,$Ro,m7,jme,kRo,SRo,WG,RRo,PRo,BRo,g7,Dme,IRo,NRo,QG,qRo,jRo,DRo,h7,Gme,GRo,ORo,HG,VRo,XRo,zRo,p7,Ome,WRo,QRo,UG,HRo,URo,JRo,_7,Vme,YRo,KRo,JG,ZRo,ePo,oPo,u7,Xme,rPo,tPo,YG,aPo,nPo,sPo,b7,zme,lPo,iPo,KG,dPo,cPo,fPo,v7,Wme,mPo,gPo,ZG,hPo,pPo,_Po,F7,Qme,uPo,bPo,eO,vPo,FPo,TPo,T7,Hme,MPo,EPo,oO,CPo,wPo,APo,M7,Ume,LPo,yPo,rO,xPo,$Po,kPo,E7,Jme,SPo,RPo,tO,PPo,BPo,IPo,C7,Yme,NPo,qPo,aO,jPo,DPo,GPo,w7,Kme,OPo,VPo,nO,XPo,zPo,WPo,A7,Zme,QPo,HPo,sO,UPo,JPo,YPo,L7,ege,KPo,ZPo,lO,eBo,oBo,rBo,y7,oge,tBo,aBo,iO,nBo,sBo,lBo,x7,rge,iBo,dBo,dO,cBo,fBo,mBo,$7,tge,gBo,hBo,cO,pBo,_Bo,uBo,k7,age,bBo,vBo,fO,FBo,TBo,MBo,S7,nge,EBo,CBo,mO,wBo,ABo,LBo,R7,sge,yBo,xBo,gO,$Bo,kBo,SBo,P7,lge,RBo,PBo,hO,BBo,IBo,NBo,B7,ige,qBo,jBo,pO,DBo,GBo,OBo,I7,dge,VBo,XBo,_O,zBo,WBo,QBo,N7,cge,HBo,UBo,uO,JBo,YBo,KBo,q7,fge,ZBo,eIo,bO,oIo,rIo,tIo,j7,mge,aIo,nIo,vO,sIo,lIo,iIo,D7,gge,dIo,cIo,FO,fIo,mIo,gIo,G7,hge,hIo,pIo,TO,_Io,uIo,bIo,O7,pge,vIo,FIo,MO,TIo,MIo,EIo,V7,_ge,CIo,wIo,EO,AIo,LIo,yIo,X7,uge,xIo,$Io,CO,kIo,SIo,RIo,z7,bge,PIo,BIo,wO,IIo,NIo,qIo,W7,jIo,vge,DIo,GIo,Fge,OIo,VIo,Q7,Aje,Xi,H7,Tge,VL,XIo,Mge,zIo,Lje,Po,XL,WIo,zi,QIo,AO,HIo,UIo,LO,JIo,YIo,KIo,zL,ZIo,Ege,eNo,oNo,rNo,dt,WL,tNo,Cge,aNo,nNo,Wi,sNo,wge,lNo,iNo,yO,dNo,cNo,fNo,U7,mNo,ro,QL,gNo,Age,hNo,pNo,Pa,_No,Lge,uNo,bNo,yge,vNo,FNo,xge,TNo,MNo,ENo,K,J7,$ge,CNo,wNo,xO,ANo,LNo,yNo,Y7,kge,xNo,$No,$O,kNo,SNo,RNo,K7,Sge,PNo,BNo,kO,INo,NNo,qNo,Z7,Rge,jNo,DNo,SO,GNo,ONo,VNo,eb,Pge,XNo,zNo,RO,WNo,QNo,HNo,ob,Bge,UNo,JNo,PO,YNo,KNo,ZNo,rb,Ige,eqo,oqo,BO,rqo,tqo,aqo,tb,Nge,nqo,sqo,IO,lqo,iqo,dqo,ab,qge,cqo,fqo,NO,mqo,gqo,hqo,nb,jge,pqo,_qo,qO,uqo,bqo,vqo,sb,Dge,Fqo,Tqo,jO,Mqo,Eqo,Cqo,lb,Gge,wqo,Aqo,DO,Lqo,yqo,xqo,ib,Oge,$qo,kqo,GO,Sqo,Rqo,Pqo,db,Vge,Bqo,Iqo,OO,Nqo,qqo,jqo,cb,Xge,Dqo,Gqo,VO,Oqo,Vqo,Xqo,fb,zge,zqo,Wqo,XO,Qqo,Hqo,Uqo,mb,Wge,Jqo,Yqo,zO,Kqo,Zqo,ejo,gb,Qge,ojo,rjo,WO,tjo,ajo,njo,hb,Hge,sjo,ljo,QO,ijo,djo,cjo,pb,Uge,fjo,mjo,HO,gjo,hjo,pjo,_b,Jge,_jo,ujo,UO,bjo,vjo,Fjo,ub,Yge,Tjo,Mjo,JO,Ejo,Cjo,wjo,bb,Kge,Ajo,Ljo,YO,yjo,xjo,$jo,vb,Zge,kjo,Sjo,KO,Rjo,Pjo,Bjo,Fb,ehe,Ijo,Njo,ZO,qjo,jjo,Djo,Tb,ohe,Gjo,Ojo,eV,Vjo,Xjo,zjo,Mb,rhe,Wjo,Qjo,oV,Hjo,Ujo,Jjo,Eb,the,Yjo,Kjo,rV,Zjo,eDo,oDo,Cb,ahe,rDo,tDo,tV,aDo,nDo,sDo,wb,lDo,nhe,iDo,dDo,she,cDo,fDo,Ab,yje,Qi,Lb,lhe,HL,mDo,ihe,gDo,xje,Bo,UL,hDo,Hi,pDo,aV,_Do,uDo,nV,bDo,vDo,FDo,JL,TDo,dhe,MDo,EDo,CDo,ct,YL,wDo,che,ADo,LDo,Ui,yDo,fhe,xDo,$Do,sV,kDo,SDo,RDo,yb,PDo,to,KL,BDo,mhe,IDo,NDo,Ba,qDo,ghe,jDo,DDo,hhe,GDo,ODo,phe,VDo,XDo,zDo,Yr,xb,_he,WDo,QDo,lV,HDo,UDo,JDo,$b,uhe,YDo,KDo,iV,ZDo,eGo,oGo,kb,bhe,rGo,tGo,dV,aGo,nGo,sGo,Sb,vhe,lGo,iGo,cV,dGo,cGo,fGo,Rb,Fhe,mGo,gGo,fV,hGo,pGo,_Go,Pb,uGo,The,bGo,vGo,Mhe,FGo,TGo,Bb,$je,Ji,Ib,Ehe,ZL,MGo,Che,EGo,kje,Io,ey,CGo,Yi,wGo,mV,AGo,LGo,gV,yGo,xGo,$Go,oy,kGo,whe,SGo,RGo,PGo,ft,ry,BGo,Ahe,IGo,NGo,Ki,qGo,Lhe,jGo,DGo,hV,GGo,OGo,VGo,Nb,XGo,ao,ty,zGo,yhe,WGo,QGo,Ia,HGo,xhe,UGo,JGo,$he,YGo,KGo,khe,ZGo,eOo,oOo,U,qb,She,rOo,tOo,pV,aOo,nOo,sOo,jb,Rhe,lOo,iOo,_V,dOo,cOo,fOo,Db,Phe,mOo,gOo,uV,hOo,pOo,_Oo,Gb,Bhe,uOo,bOo,bV,vOo,FOo,TOo,Ob,Ihe,MOo,EOo,vV,COo,wOo,AOo,Vb,Nhe,LOo,yOo,FV,xOo,$Oo,kOo,Xb,qhe,SOo,ROo,TV,POo,BOo,IOo,zb,jhe,NOo,qOo,MV,jOo,DOo,GOo,Wb,Dhe,OOo,VOo,EV,XOo,zOo,WOo,Qb,Ghe,QOo,HOo,CV,UOo,JOo,YOo,Hb,Ohe,KOo,ZOo,wV,eVo,oVo,rVo,Ub,Vhe,tVo,aVo,AV,nVo,sVo,lVo,Jb,Xhe,iVo,dVo,LV,cVo,fVo,mVo,Yb,zhe,gVo,hVo,yV,pVo,_Vo,uVo,Kb,Whe,bVo,vVo,xV,FVo,TVo,MVo,Zb,Qhe,EVo,CVo,$V,wVo,AVo,LVo,e2,Hhe,yVo,xVo,kV,$Vo,kVo,SVo,o2,Uhe,RVo,PVo,SV,BVo,IVo,NVo,r2,Jhe,qVo,jVo,RV,DVo,GVo,OVo,t2,Yhe,VVo,XVo,PV,zVo,WVo,QVo,a2,Khe,HVo,UVo,BV,JVo,YVo,KVo,n2,Zhe,ZVo,eXo,IV,oXo,rXo,tXo,s2,epe,aXo,nXo,NV,sXo,lXo,iXo,l2,ope,dXo,cXo,qV,fXo,mXo,gXo,i2,rpe,hXo,pXo,jV,_Xo,uXo,bXo,d2,tpe,vXo,FXo,DV,TXo,MXo,EXo,c2,ape,CXo,wXo,GV,AXo,LXo,yXo,f2,npe,xXo,$Xo,OV,kXo,SXo,RXo,m2,spe,PXo,BXo,VV,IXo,NXo,qXo,g2,lpe,jXo,DXo,XV,GXo,OXo,VXo,h2,ipe,XXo,zXo,zV,WXo,QXo,HXo,p2,dpe,UXo,JXo,WV,YXo,KXo,ZXo,_2,cpe,ezo,ozo,QV,rzo,tzo,azo,u2,fpe,nzo,szo,HV,lzo,izo,dzo,b2,czo,mpe,fzo,mzo,gpe,gzo,hzo,v2,Sje,Zi,F2,hpe,ay,pzo,ppe,_zo,Rje,No,ny,uzo,ed,bzo,UV,vzo,Fzo,JV,Tzo,Mzo,Ezo,sy,Czo,_pe,wzo,Azo,Lzo,mt,ly,yzo,upe,xzo,$zo,od,kzo,bpe,Szo,Rzo,YV,Pzo,Bzo,Izo,T2,Nzo,no,iy,qzo,vpe,jzo,Dzo,Na,Gzo,Fpe,Ozo,Vzo,Tpe,Xzo,zzo,Mpe,Wzo,Qzo,Hzo,V,M2,Epe,Uzo,Jzo,KV,Yzo,Kzo,Zzo,E2,Cpe,eWo,oWo,ZV,rWo,tWo,aWo,C2,wpe,nWo,sWo,eX,lWo,iWo,dWo,w2,Ape,cWo,fWo,oX,mWo,gWo,hWo,A2,Lpe,pWo,_Wo,rX,uWo,bWo,vWo,L2,ype,FWo,TWo,tX,MWo,EWo,CWo,y2,xpe,wWo,AWo,aX,LWo,yWo,xWo,x2,$pe,$Wo,kWo,nX,SWo,RWo,PWo,$2,kpe,BWo,IWo,sX,NWo,qWo,jWo,k2,Spe,DWo,GWo,lX,OWo,VWo,XWo,S2,Rpe,zWo,WWo,iX,QWo,HWo,UWo,R2,Ppe,JWo,YWo,dX,KWo,ZWo,eQo,P2,Bpe,oQo,rQo,cX,tQo,aQo,nQo,B2,Ipe,sQo,lQo,fX,iQo,dQo,cQo,I2,Npe,fQo,mQo,mX,gQo,hQo,pQo,N2,qpe,_Qo,uQo,gX,bQo,vQo,FQo,q2,jpe,TQo,MQo,hX,EQo,CQo,wQo,j2,Dpe,AQo,LQo,pX,yQo,xQo,$Qo,D2,Gpe,kQo,SQo,_X,RQo,PQo,BQo,G2,Ope,IQo,NQo,uX,qQo,jQo,DQo,O2,Vpe,GQo,OQo,bX,VQo,XQo,zQo,V2,Xpe,WQo,QQo,vX,HQo,UQo,JQo,X2,zpe,YQo,KQo,FX,ZQo,eHo,oHo,z2,Wpe,rHo,tHo,TX,aHo,nHo,sHo,W2,Qpe,lHo,iHo,MX,dHo,cHo,fHo,Q2,Hpe,mHo,gHo,EX,hHo,pHo,_Ho,H2,Upe,uHo,bHo,CX,vHo,FHo,THo,U2,Jpe,MHo,EHo,wX,CHo,wHo,AHo,J2,Ype,LHo,yHo,AX,xHo,$Ho,kHo,Y2,Kpe,SHo,RHo,LX,PHo,BHo,IHo,K2,Zpe,NHo,qHo,yX,jHo,DHo,GHo,Z2,e_e,OHo,VHo,xX,XHo,zHo,WHo,ev,o_e,QHo,HHo,$X,UHo,JHo,YHo,ov,r_e,KHo,ZHo,kX,eUo,oUo,rUo,rv,t_e,tUo,aUo,SX,nUo,sUo,lUo,tv,a_e,iUo,dUo,RX,cUo,fUo,mUo,av,n_e,gUo,hUo,PX,pUo,_Uo,uUo,nv,s_e,bUo,vUo,BX,FUo,TUo,MUo,sv,l_e,EUo,CUo,IX,wUo,AUo,LUo,lv,i_e,yUo,xUo,NX,$Uo,kUo,SUo,iv,RUo,d_e,PUo,BUo,c_e,IUo,NUo,dv,Pje,rd,cv,f_e,dy,qUo,m_e,jUo,Bje,qo,cy,DUo,td,GUo,qX,OUo,VUo,jX,XUo,zUo,WUo,fy,QUo,g_e,HUo,UUo,JUo,gt,my,YUo,h_e,KUo,ZUo,ad,eJo,p_e,oJo,rJo,DX,tJo,aJo,nJo,fv,sJo,so,gy,lJo,__e,iJo,dJo,qa,cJo,u_e,fJo,mJo,b_e,gJo,hJo,v_e,pJo,_Jo,uJo,F_e,mv,T_e,bJo,vJo,GX,FJo,TJo,MJo,gv,EJo,M_e,CJo,wJo,E_e,AJo,LJo,hv,Ije,nd,pv,C_e,hy,yJo,w_e,xJo,Nje,jo,py,$Jo,sd,kJo,OX,SJo,RJo,VX,PJo,BJo,IJo,_y,NJo,A_e,qJo,jJo,DJo,ht,uy,GJo,L_e,OJo,VJo,ld,XJo,y_e,zJo,WJo,XX,QJo,HJo,UJo,_v,JJo,lo,by,YJo,x_e,KJo,ZJo,ja,eYo,$_e,oYo,rYo,k_e,tYo,aYo,S_e,nYo,sYo,lYo,ve,uv,R_e,iYo,dYo,zX,cYo,fYo,mYo,bv,P_e,gYo,hYo,WX,pYo,_Yo,uYo,vv,B_e,bYo,vYo,QX,FYo,TYo,MYo,Fv,I_e,EYo,CYo,HX,wYo,AYo,LYo,Bs,N_e,yYo,xYo,UX,$Yo,kYo,JX,SYo,RYo,PYo,Tv,q_e,BYo,IYo,YX,NYo,qYo,jYo,Is,j_e,DYo,GYo,KX,OYo,VYo,ZX,XYo,zYo,WYo,pt,D_e,QYo,HYo,ez,UYo,JYo,oz,YYo,KYo,rz,ZYo,eKo,oKo,Mv,G_e,rKo,tKo,tz,aKo,nKo,sKo,Ev,O_e,lKo,iKo,az,dKo,cKo,fKo,Cv,V_e,mKo,gKo,nz,hKo,pKo,_Ko,wv,X_e,uKo,bKo,sz,vKo,FKo,TKo,Av,z_e,MKo,EKo,lz,CKo,wKo,AKo,Lv,W_e,LKo,yKo,iz,xKo,$Ko,kKo,yv,Q_e,SKo,RKo,dz,PKo,BKo,IKo,xv,NKo,H_e,qKo,jKo,U_e,DKo,GKo,$v,qje,id,kv,J_e,vy,OKo,Y_e,VKo,jje,Do,Fy,XKo,dd,zKo,cz,WKo,QKo,fz,HKo,UKo,JKo,Ty,YKo,K_e,KKo,ZKo,eZo,_t,My,oZo,Z_e,rZo,tZo,cd,aZo,eue,nZo,sZo,mz,lZo,iZo,dZo,Sv,cZo,io,Ey,fZo,oue,mZo,gZo,Da,hZo,rue,pZo,_Zo,tue,uZo,bZo,aue,vZo,FZo,TZo,nue,Rv,sue,MZo,EZo,gz,CZo,wZo,AZo,Pv,LZo,lue,yZo,xZo,iue,$Zo,kZo,Bv,Dje,fd,Iv,due,Cy,SZo,cue,RZo,Gje,Go,wy,PZo,md,BZo,hz,IZo,NZo,pz,qZo,jZo,DZo,Ay,GZo,fue,OZo,VZo,XZo,ut,Ly,zZo,mue,WZo,QZo,gd,HZo,gue,UZo,JZo,_z,YZo,KZo,ZZo,Nv,eer,co,yy,oer,hue,rer,ter,Ga,aer,pue,ner,ser,_ue,ler,ier,uue,der,cer,fer,Se,qv,bue,mer,ger,uz,her,per,_er,jv,vue,uer,ber,bz,ver,Fer,Ter,Dv,Fue,Mer,Eer,vz,Cer,wer,Aer,Gv,Tue,Ler,yer,Fz,xer,$er,ker,Ov,Mue,Ser,Rer,Tz,Per,Ber,Ier,Vv,Eue,Ner,qer,Mz,jer,Der,Ger,Xv,Cue,Oer,Ver,Ez,Xer,zer,Wer,zv,wue,Qer,Her,Cz,Uer,Jer,Yer,Wv,Aue,Ker,Zer,wz,eor,oor,ror,Qv,tor,Lue,aor,nor,yue,sor,lor,Hv,Oje,hd,Uv,xue,xy,ior,$ue,dor,Vje,Oo,$y,cor,pd,mor,Az,gor,hor,Lz,por,_or,uor,ky,bor,kue,vor,For,Tor,bt,Sy,Mor,Sue,Eor,Cor,_d,wor,Rue,Aor,Lor,yz,yor,xor,$or,Jv,kor,fo,Ry,Sor,Pue,Ror,Por,Oa,Bor,Bue,Ior,Nor,Iue,qor,jor,Nue,Dor,Gor,Oor,Kr,Yv,que,Vor,Xor,xz,zor,Wor,Qor,Kv,jue,Hor,Uor,$z,Jor,Yor,Kor,Zv,Due,Zor,err,kz,orr,rrr,trr,eF,Gue,arr,nrr,Sz,srr,lrr,irr,oF,Oue,drr,crr,Rz,frr,mrr,grr,rF,hrr,Vue,prr,_rr,Xue,urr,brr,tF,Xje,ud,aF,zue,Py,vrr,Wue,Frr,zje,Vo,By,Trr,bd,Mrr,Pz,Err,Crr,Bz,wrr,Arr,Lrr,Iy,yrr,Que,xrr,$rr,krr,vt,Ny,Srr,Hue,Rrr,Prr,vd,Brr,Uue,Irr,Nrr,Iz,qrr,jrr,Drr,nF,Grr,mo,qy,Orr,Jue,Vrr,Xrr,Va,zrr,Yue,Wrr,Qrr,Kue,Hrr,Urr,Zue,Jrr,Yrr,Krr,Re,sF,e4e,Zrr,etr,Nz,otr,rtr,ttr,lF,o4e,atr,ntr,qz,str,ltr,itr,iF,r4e,dtr,ctr,jz,ftr,mtr,gtr,dF,t4e,htr,ptr,Dz,_tr,utr,btr,cF,a4e,vtr,Ftr,Gz,Ttr,Mtr,Etr,fF,n4e,Ctr,wtr,Oz,Atr,Ltr,ytr,mF,s4e,xtr,$tr,Vz,ktr,Str,Rtr,gF,l4e,Ptr,Btr,Xz,Itr,Ntr,qtr,hF,i4e,jtr,Dtr,zz,Gtr,Otr,Vtr,pF,Xtr,d4e,ztr,Wtr,c4e,Qtr,Htr,_F,Wje,Fd,uF,f4e,jy,Utr,m4e,Jtr,Qje,Xo,Dy,Ytr,Td,Ktr,Wz,Ztr,ear,Qz,oar,rar,tar,Gy,aar,g4e,nar,sar,lar,Ft,Oy,iar,h4e,dar,car,Md,far,p4e,mar,gar,Hz,har,par,_ar,bF,uar,go,Vy,bar,_4e,Far,Tar,Xa,Mar,u4e,Ear,Car,b4e,war,Aar,v4e,Lar,yar,xar,Xy,vF,F4e,$ar,kar,Uz,Sar,Rar,Par,FF,T4e,Bar,Iar,Jz,Nar,qar,jar,TF,Dar,M4e,Gar,Oar,E4e,Var,Xar,MF,Hje,Ed,EF,C4e,zy,zar,w4e,War,Uje,zo,Wy,Qar,Cd,Har,Yz,Uar,Jar,Kz,Yar,Kar,Zar,Qy,enr,A4e,onr,rnr,tnr,Tt,Hy,anr,L4e,nnr,snr,wd,lnr,y4e,inr,dnr,Zz,cnr,fnr,mnr,CF,gnr,ho,Uy,hnr,x4e,pnr,_nr,za,unr,$4e,bnr,vnr,k4e,Fnr,Tnr,S4e,Mnr,Enr,Cnr,Zr,wF,R4e,wnr,Anr,eW,Lnr,ynr,xnr,AF,P4e,$nr,knr,oW,Snr,Rnr,Pnr,LF,B4e,Bnr,Inr,rW,Nnr,qnr,jnr,yF,I4e,Dnr,Gnr,tW,Onr,Vnr,Xnr,xF,N4e,znr,Wnr,aW,Qnr,Hnr,Unr,$F,Jnr,q4e,Ynr,Knr,j4e,Znr,esr,kF,Jje,Ad,SF,D4e,Jy,osr,G4e,rsr,Yje,Wo,Yy,tsr,Ld,asr,nW,nsr,ssr,sW,lsr,isr,dsr,Ky,csr,O4e,fsr,msr,gsr,Mt,Zy,hsr,V4e,psr,_sr,yd,usr,X4e,bsr,vsr,lW,Fsr,Tsr,Msr,RF,Esr,po,e8,Csr,z4e,wsr,Asr,Wa,Lsr,W4e,ysr,xsr,Q4e,$sr,ksr,H4e,Ssr,Rsr,Psr,xd,PF,U4e,Bsr,Isr,iW,Nsr,qsr,jsr,BF,J4e,Dsr,Gsr,dW,Osr,Vsr,Xsr,IF,Y4e,zsr,Wsr,cW,Qsr,Hsr,Usr,NF,Jsr,K4e,Ysr,Ksr,Z4e,Zsr,elr,qF,Kje,$d,jF,e1e,o8,olr,o1e,rlr,Zje,Qo,r8,tlr,kd,alr,fW,nlr,slr,mW,llr,ilr,dlr,t8,clr,r1e,flr,mlr,glr,Et,a8,hlr,t1e,plr,_lr,Sd,ulr,a1e,blr,vlr,gW,Flr,Tlr,Mlr,DF,Elr,_o,n8,Clr,n1e,wlr,Alr,Qa,Llr,s1e,ylr,xlr,l1e,$lr,klr,i1e,Slr,Rlr,Plr,s8,GF,d1e,Blr,Ilr,hW,Nlr,qlr,jlr,OF,c1e,Dlr,Glr,pW,Olr,Vlr,Xlr,VF,zlr,f1e,Wlr,Qlr,m1e,Hlr,Ulr,XF,eDe,Rd,zF,g1e,l8,Jlr,h1e,Ylr,oDe,Ho,i8,Klr,Pd,Zlr,_W,eir,oir,uW,rir,tir,air,d8,nir,p1e,sir,lir,iir,Ct,c8,dir,_1e,cir,fir,Bd,mir,u1e,gir,hir,bW,pir,_ir,uir,WF,bir,uo,f8,vir,b1e,Fir,Tir,Ha,Mir,v1e,Eir,Cir,F1e,wir,Air,T1e,Lir,yir,xir,M1e,QF,E1e,$ir,kir,vW,Sir,Rir,Pir,HF,Bir,C1e,Iir,Nir,w1e,qir,jir,UF,rDe,Id,JF,A1e,m8,Dir,L1e,Gir,tDe,Uo,g8,Oir,Nd,Vir,FW,Xir,zir,TW,Wir,Qir,Hir,h8,Uir,y1e,Jir,Yir,Kir,wt,p8,Zir,x1e,edr,odr,qd,rdr,$1e,tdr,adr,MW,ndr,sdr,ldr,YF,idr,bo,_8,ddr,k1e,cdr,fdr,Ua,mdr,S1e,gdr,hdr,R1e,pdr,_dr,P1e,udr,bdr,vdr,Ja,KF,B1e,Fdr,Tdr,EW,Mdr,Edr,Cdr,ZF,I1e,wdr,Adr,CW,Ldr,ydr,xdr,eT,N1e,$dr,kdr,wW,Sdr,Rdr,Pdr,oT,q1e,Bdr,Idr,AW,Ndr,qdr,jdr,rT,Ddr,j1e,Gdr,Odr,D1e,Vdr,Xdr,tT,aDe,jd,aT,G1e,u8,zdr,O1e,Wdr,nDe,Jo,b8,Qdr,Dd,Hdr,LW,Udr,Jdr,yW,Ydr,Kdr,Zdr,v8,ecr,V1e,ocr,rcr,tcr,At,F8,acr,X1e,ncr,scr,Gd,lcr,z1e,icr,dcr,xW,ccr,fcr,mcr,nT,gcr,vo,T8,hcr,W1e,pcr,_cr,Ya,ucr,Q1e,bcr,vcr,H1e,Fcr,Tcr,U1e,Mcr,Ecr,Ccr,J1e,sT,Y1e,wcr,Acr,$W,Lcr,ycr,xcr,lT,$cr,K1e,kcr,Scr,Z1e,Rcr,Pcr,iT,sDe,Od,dT,e7e,M8,Bcr,o7e,Icr,lDe,Yo,E8,Ncr,Vd,qcr,kW,jcr,Dcr,SW,Gcr,Ocr,Vcr,C8,Xcr,r7e,zcr,Wcr,Qcr,Lt,w8,Hcr,t7e,Ucr,Jcr,Xd,Ycr,a7e,Kcr,Zcr,RW,efr,ofr,rfr,cT,tfr,wr,A8,afr,n7e,nfr,sfr,Ka,lfr,s7e,ifr,dfr,l7e,cfr,ffr,i7e,mfr,gfr,hfr,q,fT,d7e,pfr,_fr,PW,ufr,bfr,vfr,mT,c7e,Ffr,Tfr,BW,Mfr,Efr,Cfr,gT,f7e,wfr,Afr,IW,Lfr,yfr,xfr,hT,m7e,$fr,kfr,NW,Sfr,Rfr,Pfr,pT,g7e,Bfr,Ifr,qW,Nfr,qfr,jfr,_T,h7e,Dfr,Gfr,jW,Ofr,Vfr,Xfr,uT,p7e,zfr,Wfr,DW,Qfr,Hfr,Ufr,bT,_7e,Jfr,Yfr,GW,Kfr,Zfr,emr,vT,u7e,omr,rmr,OW,tmr,amr,nmr,FT,b7e,smr,lmr,VW,imr,dmr,cmr,TT,v7e,fmr,mmr,XW,gmr,hmr,pmr,MT,F7e,_mr,umr,zW,bmr,vmr,Fmr,ET,T7e,Tmr,Mmr,WW,Emr,Cmr,wmr,CT,M7e,Amr,Lmr,QW,ymr,xmr,$mr,wT,E7e,kmr,Smr,HW,Rmr,Pmr,Bmr,AT,C7e,Imr,Nmr,UW,qmr,jmr,Dmr,LT,w7e,Gmr,Omr,JW,Vmr,Xmr,zmr,Ns,A7e,Wmr,Qmr,YW,Hmr,Umr,KW,Jmr,Ymr,Kmr,yT,L7e,Zmr,egr,ZW,ogr,rgr,tgr,xT,y7e,agr,ngr,eQ,sgr,lgr,igr,$T,x7e,dgr,cgr,oQ,fgr,mgr,ggr,kT,$7e,hgr,pgr,rQ,_gr,ugr,bgr,ST,k7e,vgr,Fgr,tQ,Tgr,Mgr,Egr,RT,S7e,Cgr,wgr,aQ,Agr,Lgr,ygr,PT,R7e,xgr,$gr,nQ,kgr,Sgr,Rgr,BT,P7e,Pgr,Bgr,sQ,Igr,Ngr,qgr,IT,B7e,jgr,Dgr,lQ,Ggr,Ogr,Vgr,NT,I7e,Xgr,zgr,iQ,Wgr,Qgr,Hgr,qT,N7e,Ugr,Jgr,dQ,Ygr,Kgr,Zgr,jT,q7e,ehr,ohr,cQ,rhr,thr,ahr,DT,j7e,nhr,shr,fQ,lhr,ihr,dhr,GT,D7e,chr,fhr,mQ,mhr,ghr,hhr,OT,G7e,phr,_hr,gQ,uhr,bhr,vhr,VT,O7e,Fhr,Thr,hQ,Mhr,Ehr,Chr,XT,V7e,whr,Ahr,pQ,Lhr,yhr,xhr,zT,X7e,$hr,khr,_Q,Shr,Rhr,Phr,WT,z7e,Bhr,Ihr,uQ,Nhr,qhr,jhr,QT,W7e,Dhr,Ghr,bQ,Ohr,Vhr,Xhr,HT,Q7e,zhr,Whr,vQ,Qhr,Hhr,Uhr,UT,H7e,Jhr,Yhr,FQ,Khr,Zhr,epr,JT,U7e,opr,rpr,TQ,tpr,apr,npr,YT,J7e,spr,lpr,MQ,ipr,dpr,cpr,KT,Y7e,fpr,mpr,EQ,gpr,hpr,ppr,ZT,K7e,_pr,upr,CQ,bpr,vpr,Fpr,eM,Z7e,Tpr,Mpr,wQ,Epr,Cpr,wpr,oM,ebe,Apr,Lpr,AQ,ypr,xpr,$pr,rM,obe,kpr,Spr,LQ,Rpr,Ppr,Bpr,tM,iDe,zd,aM,rbe,L8,Ipr,tbe,Npr,dDe,Ko,y8,qpr,Wd,jpr,yQ,Dpr,Gpr,xQ,Opr,Vpr,Xpr,x8,zpr,abe,Wpr,Qpr,Hpr,yt,$8,Upr,nbe,Jpr,Ypr,Qd,Kpr,sbe,Zpr,e_r,$Q,o_r,r_r,t_r,nM,a_r,Ar,k8,n_r,lbe,s_r,l_r,Za,i_r,ibe,d_r,c_r,dbe,f_r,m_r,cbe,g_r,h_r,p_r,se,sM,fbe,__r,u_r,kQ,b_r,v_r,F_r,lM,mbe,T_r,M_r,SQ,E_r,C_r,w_r,iM,gbe,A_r,L_r,RQ,y_r,x_r,$_r,dM,hbe,k_r,S_r,PQ,R_r,P_r,B_r,cM,pbe,I_r,N_r,BQ,q_r,j_r,D_r,fM,_be,G_r,O_r,IQ,V_r,X_r,z_r,mM,ube,W_r,Q_r,NQ,H_r,U_r,J_r,gM,bbe,Y_r,K_r,qQ,Z_r,eur,our,hM,vbe,rur,tur,jQ,aur,nur,sur,pM,Fbe,lur,iur,DQ,dur,cur,fur,_M,Tbe,mur,gur,GQ,hur,pur,_ur,uM,Mbe,uur,bur,OQ,vur,Fur,Tur,bM,Ebe,Mur,Eur,VQ,Cur,wur,Aur,vM,Cbe,Lur,yur,XQ,xur,$ur,kur,FM,wbe,Sur,Rur,zQ,Pur,Bur,Iur,TM,Abe,Nur,qur,WQ,jur,Dur,Gur,MM,Lbe,Our,Vur,QQ,Xur,zur,Wur,EM,ybe,Qur,Hur,HQ,Uur,Jur,Yur,CM,xbe,Kur,Zur,UQ,e4r,o4r,r4r,wM,$be,t4r,a4r,JQ,n4r,s4r,l4r,AM,kbe,i4r,d4r,YQ,c4r,f4r,m4r,LM,Sbe,g4r,h4r,KQ,p4r,_4r,u4r,yM,Rbe,b4r,v4r,ZQ,F4r,T4r,M4r,xM,cDe,Hd,$M,Pbe,S8,E4r,Bbe,C4r,fDe,Zo,R8,w4r,Ud,A4r,eH,L4r,y4r,oH,x4r,$4r,k4r,P8,S4r,Ibe,R4r,P4r,B4r,xt,B8,I4r,Nbe,N4r,q4r,Jd,j4r,qbe,D4r,G4r,rH,O4r,V4r,X4r,kM,z4r,Lr,I8,W4r,jbe,Q4r,H4r,en,U4r,Dbe,J4r,Y4r,Gbe,K4r,Z4r,Obe,e1r,o1r,r1r,Me,SM,Vbe,t1r,a1r,tH,n1r,s1r,l1r,RM,Xbe,i1r,d1r,aH,c1r,f1r,m1r,PM,zbe,g1r,h1r,nH,p1r,_1r,u1r,BM,Wbe,b1r,v1r,sH,F1r,T1r,M1r,IM,Qbe,E1r,C1r,lH,w1r,A1r,L1r,NM,Hbe,y1r,x1r,iH,$1r,k1r,S1r,qM,Ube,R1r,P1r,dH,B1r,I1r,N1r,jM,Jbe,q1r,j1r,cH,D1r,G1r,O1r,DM,Ybe,V1r,X1r,fH,z1r,W1r,Q1r,GM,Kbe,H1r,U1r,mH,J1r,Y1r,K1r,OM,Zbe,Z1r,e7r,gH,o7r,r7r,t7r,VM,e2e,a7r,n7r,hH,s7r,l7r,i7r,XM,o2e,d7r,c7r,pH,f7r,m7r,g7r,zM,mDe,Yd,WM,r2e,N8,h7r,t2e,p7r,gDe,er,q8,_7r,Kd,u7r,_H,b7r,v7r,uH,F7r,T7r,M7r,j8,E7r,a2e,C7r,w7r,A7r,$t,D8,L7r,n2e,y7r,x7r,Zd,$7r,s2e,k7r,S7r,bH,R7r,P7r,B7r,QM,I7r,yr,G8,N7r,l2e,q7r,j7r,on,D7r,i2e,G7r,O7r,d2e,V7r,X7r,c2e,z7r,W7r,Q7r,rn,HM,f2e,H7r,U7r,vH,J7r,Y7r,K7r,UM,m2e,Z7r,ebr,FH,obr,rbr,tbr,JM,g2e,abr,nbr,TH,sbr,lbr,ibr,YM,h2e,dbr,cbr,MH,fbr,mbr,gbr,KM,hDe,ec,ZM,p2e,O8,hbr,_2e,pbr,pDe,or,V8,_br,oc,ubr,EH,bbr,vbr,CH,Fbr,Tbr,Mbr,X8,Ebr,u2e,Cbr,wbr,Abr,kt,z8,Lbr,b2e,ybr,xbr,rc,$br,v2e,kbr,Sbr,wH,Rbr,Pbr,Bbr,eE,Ibr,xr,W8,Nbr,F2e,qbr,jbr,tn,Dbr,T2e,Gbr,Obr,M2e,Vbr,Xbr,E2e,zbr,Wbr,Qbr,ie,oE,C2e,Hbr,Ubr,AH,Jbr,Ybr,Kbr,rE,w2e,Zbr,e2r,LH,o2r,r2r,t2r,tE,A2e,a2r,n2r,yH,s2r,l2r,i2r,aE,L2e,d2r,c2r,xH,f2r,m2r,g2r,nE,y2e,h2r,p2r,$H,_2r,u2r,b2r,sE,x2e,v2r,F2r,kH,T2r,M2r,E2r,lE,$2e,C2r,w2r,SH,A2r,L2r,y2r,iE,k2e,x2r,$2r,RH,k2r,S2r,R2r,dE,S2e,P2r,B2r,PH,I2r,N2r,q2r,cE,R2e,j2r,D2r,BH,G2r,O2r,V2r,fE,P2e,X2r,z2r,IH,W2r,Q2r,H2r,mE,B2e,U2r,J2r,NH,Y2r,K2r,Z2r,gE,I2e,evr,ovr,qH,rvr,tvr,avr,hE,N2e,nvr,svr,jH,lvr,ivr,dvr,pE,q2e,cvr,fvr,DH,mvr,gvr,hvr,_E,j2e,pvr,_vr,GH,uvr,bvr,vvr,uE,D2e,Fvr,Tvr,OH,Mvr,Evr,Cvr,bE,G2e,wvr,Avr,VH,Lvr,yvr,xvr,vE,O2e,$vr,kvr,XH,Svr,Rvr,Pvr,FE,V2e,Bvr,Ivr,zH,Nvr,qvr,jvr,TE,_De,tc,ME,X2e,Q8,Dvr,z2e,Gvr,uDe,rr,H8,Ovr,ac,Vvr,WH,Xvr,zvr,QH,Wvr,Qvr,Hvr,U8,Uvr,W2e,Jvr,Yvr,Kvr,St,J8,Zvr,Q2e,eFr,oFr,nc,rFr,H2e,tFr,aFr,HH,nFr,sFr,lFr,EE,iFr,$r,Y8,dFr,U2e,cFr,fFr,an,mFr,J2e,gFr,hFr,Y2e,pFr,_Fr,K2e,uFr,bFr,vFr,Le,CE,Z2e,FFr,TFr,UH,MFr,EFr,CFr,wE,eve,wFr,AFr,JH,LFr,yFr,xFr,AE,ove,$Fr,kFr,YH,SFr,RFr,PFr,LE,rve,BFr,IFr,KH,NFr,qFr,jFr,yE,tve,DFr,GFr,ZH,OFr,VFr,XFr,xE,ave,zFr,WFr,eU,QFr,HFr,UFr,$E,nve,JFr,YFr,oU,KFr,ZFr,eTr,kE,sve,oTr,rTr,rU,tTr,aTr,nTr,SE,lve,sTr,lTr,tU,iTr,dTr,cTr,RE,ive,fTr,mTr,aU,gTr,hTr,pTr,PE,bDe,sc,BE,dve,K8,_Tr,cve,uTr,vDe,tr,Z8,bTr,lc,vTr,nU,FTr,TTr,sU,MTr,ETr,CTr,e9,wTr,fve,ATr,LTr,yTr,Rt,o9,xTr,mve,$Tr,kTr,ic,STr,gve,RTr,PTr,lU,BTr,ITr,NTr,IE,qTr,kr,r9,jTr,hve,DTr,GTr,nn,OTr,pve,VTr,XTr,_ve,zTr,WTr,uve,QTr,HTr,UTr,oe,NE,bve,JTr,YTr,iU,KTr,ZTr,eMr,qE,vve,oMr,rMr,dU,tMr,aMr,nMr,jE,Fve,sMr,lMr,cU,iMr,dMr,cMr,DE,Tve,fMr,mMr,fU,gMr,hMr,pMr,GE,Mve,_Mr,uMr,mU,bMr,vMr,FMr,OE,Eve,TMr,MMr,gU,EMr,CMr,wMr,VE,Cve,AMr,LMr,hU,yMr,xMr,$Mr,XE,wve,kMr,SMr,pU,RMr,PMr,BMr,zE,Ave,IMr,NMr,_U,qMr,jMr,DMr,WE,Lve,GMr,OMr,uU,VMr,XMr,zMr,QE,yve,WMr,QMr,bU,HMr,UMr,JMr,HE,xve,YMr,KMr,vU,ZMr,eEr,oEr,UE,$ve,rEr,tEr,FU,aEr,nEr,sEr,JE,kve,lEr,iEr,TU,dEr,cEr,fEr,YE,Sve,mEr,gEr,MU,hEr,pEr,_Er,KE,Rve,uEr,bEr,EU,vEr,FEr,TEr,ZE,Pve,MEr,EEr,CU,CEr,wEr,AEr,eC,Bve,LEr,yEr,wU,xEr,$Er,kEr,oC,Ive,SEr,REr,AU,PEr,BEr,IEr,rC,Nve,NEr,qEr,LU,jEr,DEr,GEr,tC,qve,OEr,VEr,yU,XEr,zEr,WEr,aC,jve,QEr,HEr,xU,UEr,JEr,YEr,nC,Dve,KEr,ZEr,$U,eCr,oCr,rCr,sC,Gve,tCr,aCr,kU,nCr,sCr,lCr,lC,Ove,iCr,dCr,SU,cCr,fCr,mCr,iC,Vve,gCr,hCr,RU,pCr,_Cr,uCr,dC,FDe,dc,cC,Xve,t9,bCr,zve,vCr,TDe,ar,a9,FCr,cc,TCr,PU,MCr,ECr,BU,CCr,wCr,ACr,n9,LCr,Wve,yCr,xCr,$Cr,Pt,s9,kCr,Qve,SCr,RCr,fc,PCr,Hve,BCr,ICr,IU,NCr,qCr,jCr,fC,DCr,Sr,l9,GCr,Uve,OCr,VCr,sn,XCr,Jve,zCr,WCr,Yve,QCr,HCr,Kve,UCr,JCr,YCr,pe,mC,Zve,KCr,ZCr,NU,e5r,o5r,r5r,gC,eFe,t5r,a5r,qU,n5r,s5r,l5r,hC,oFe,i5r,d5r,jU,c5r,f5r,m5r,pC,rFe,g5r,h5r,DU,p5r,_5r,u5r,_C,tFe,b5r,v5r,GU,F5r,T5r,M5r,uC,aFe,E5r,C5r,OU,w5r,A5r,L5r,bC,nFe,y5r,x5r,VU,$5r,k5r,S5r,vC,sFe,R5r,P5r,XU,B5r,I5r,N5r,FC,lFe,q5r,j5r,zU,D5r,G5r,O5r,TC,iFe,V5r,X5r,WU,z5r,W5r,Q5r,MC,dFe,H5r,U5r,QU,J5r,Y5r,K5r,EC,cFe,Z5r,e3r,HU,o3r,r3r,t3r,CC,fFe,a3r,n3r,UU,s3r,l3r,i3r,wC,mFe,d3r,c3r,JU,f3r,m3r,g3r,AC,gFe,h3r,p3r,YU,_3r,u3r,b3r,LC,hFe,v3r,F3r,KU,T3r,M3r,E3r,yC,pFe,C3r,w3r,ZU,A3r,L3r,y3r,xC,MDe,mc,$C,_Fe,i9,x3r,uFe,$3r,EDe,nr,d9,k3r,gc,S3r,eJ,R3r,P3r,oJ,B3r,I3r,N3r,c9,q3r,bFe,j3r,D3r,G3r,Bt,f9,O3r,vFe,V3r,X3r,hc,z3r,FFe,W3r,Q3r,rJ,H3r,U3r,J3r,kC,Y3r,Rr,m9,K3r,TFe,Z3r,e0r,ln,o0r,MFe,r0r,t0r,EFe,a0r,n0r,CFe,s0r,l0r,i0r,g9,SC,wFe,d0r,c0r,tJ,f0r,m0r,g0r,RC,AFe,h0r,p0r,aJ,_0r,u0r,b0r,PC,CDe,pc,BC,LFe,h9,v0r,yFe,F0r,wDe,sr,p9,T0r,_c,M0r,nJ,E0r,C0r,sJ,w0r,A0r,L0r,_9,y0r,xFe,x0r,$0r,k0r,It,u9,S0r,$Fe,R0r,P0r,uc,B0r,kFe,I0r,N0r,lJ,q0r,j0r,D0r,IC,G0r,Pr,b9,O0r,SFe,V0r,X0r,dn,z0r,RFe,W0r,Q0r,PFe,H0r,U0r,BFe,J0r,Y0r,K0r,IFe,NC,NFe,Z0r,ewr,iJ,owr,rwr,twr,qC,ADe,bc,jC,qFe,v9,awr,jFe,nwr,LDe,lr,F9,swr,vc,lwr,dJ,iwr,dwr,cJ,cwr,fwr,mwr,T9,gwr,DFe,hwr,pwr,_wr,Nt,M9,uwr,GFe,bwr,vwr,Fc,Fwr,OFe,Twr,Mwr,fJ,Ewr,Cwr,wwr,DC,Awr,Br,E9,Lwr,VFe,ywr,xwr,cn,$wr,XFe,kwr,Swr,zFe,Rwr,Pwr,WFe,Bwr,Iwr,Nwr,de,GC,QFe,qwr,jwr,mJ,Dwr,Gwr,Owr,OC,HFe,Vwr,Xwr,gJ,zwr,Wwr,Qwr,VC,UFe,Hwr,Uwr,hJ,Jwr,Ywr,Kwr,XC,JFe,Zwr,eAr,pJ,oAr,rAr,tAr,zC,YFe,aAr,nAr,_J,sAr,lAr,iAr,WC,KFe,dAr,cAr,uJ,fAr,mAr,gAr,QC,ZFe,hAr,pAr,bJ,_Ar,uAr,bAr,HC,eTe,vAr,FAr,vJ,TAr,MAr,EAr,UC,oTe,CAr,wAr,FJ,AAr,LAr,yAr,JC,rTe,xAr,$Ar,TJ,kAr,SAr,RAr,YC,tTe,PAr,BAr,MJ,IAr,NAr,qAr,KC,aTe,jAr,DAr,EJ,GAr,OAr,VAr,ZC,nTe,XAr,zAr,CJ,WAr,QAr,HAr,e5,sTe,UAr,JAr,wJ,YAr,KAr,ZAr,o5,lTe,e6r,o6r,AJ,r6r,t6r,a6r,r5,iTe,n6r,s6r,LJ,l6r,i6r,d6r,t5,dTe,c6r,f6r,yJ,m6r,g6r,h6r,a5,cTe,p6r,_6r,xJ,u6r,b6r,v6r,n5,fTe,F6r,T6r,$J,M6r,E6r,C6r,s5,mTe,w6r,A6r,kJ,L6r,y6r,x6r,l5,yDe,Tc,i5,gTe,C9,$6r,hTe,k6r,xDe,ir,w9,S6r,Mc,R6r,SJ,P6r,B6r,RJ,I6r,N6r,q6r,A9,j6r,pTe,D6r,G6r,O6r,qt,L9,V6r,_Te,X6r,z6r,Ec,W6r,uTe,Q6r,H6r,PJ,U6r,J6r,Y6r,d5,K6r,Ir,y9,Z6r,bTe,eLr,oLr,fn,rLr,vTe,tLr,aLr,FTe,nLr,sLr,TTe,lLr,iLr,dLr,ce,c5,MTe,cLr,fLr,BJ,mLr,gLr,hLr,f5,ETe,pLr,_Lr,IJ,uLr,bLr,vLr,m5,CTe,FLr,TLr,NJ,MLr,ELr,CLr,g5,wTe,wLr,ALr,qJ,LLr,yLr,xLr,h5,ATe,$Lr,kLr,jJ,SLr,RLr,PLr,p5,LTe,BLr,ILr,DJ,NLr,qLr,jLr,_5,yTe,DLr,GLr,GJ,OLr,VLr,XLr,u5,xTe,zLr,WLr,OJ,QLr,HLr,ULr,b5,$Te,JLr,YLr,VJ,KLr,ZLr,eyr,v5,kTe,oyr,ryr,XJ,tyr,ayr,nyr,F5,STe,syr,lyr,zJ,iyr,dyr,cyr,T5,RTe,fyr,myr,WJ,gyr,hyr,pyr,M5,PTe,_yr,uyr,QJ,byr,vyr,Fyr,E5,BTe,Tyr,Myr,HJ,Eyr,Cyr,wyr,C5,ITe,Ayr,Lyr,UJ,yyr,xyr,$yr,w5,NTe,kyr,Syr,JJ,Ryr,Pyr,Byr,A5,qTe,Iyr,Nyr,YJ,qyr,jyr,Dyr,L5,jTe,Gyr,Oyr,KJ,Vyr,Xyr,zyr,y5,DTe,Wyr,Qyr,ZJ,Hyr,Uyr,Jyr,x5,GTe,Yyr,Kyr,eY,Zyr,e8r,o8r,$5,$De,Cc,k5,OTe,x9,r8r,VTe,t8r,kDe,dr,$9,a8r,wc,n8r,oY,s8r,l8r,rY,i8r,d8r,c8r,k9,f8r,XTe,m8r,g8r,h8r,jt,S9,p8r,zTe,_8r,u8r,Ac,b8r,WTe,v8r,F8r,tY,T8r,M8r,E8r,S5,C8r,Nr,R9,w8r,QTe,A8r,L8r,mn,y8r,HTe,x8r,$8r,UTe,k8r,S8r,JTe,R8r,P8r,B8r,YTe,R5,KTe,I8r,N8r,aY,q8r,j8r,D8r,P5,SDe,Lc,B5,ZTe,P9,G8r,eMe,O8r,RDe,cr,B9,V8r,yc,X8r,nY,z8r,W8r,sY,Q8r,H8r,U8r,I9,J8r,oMe,Y8r,K8r,Z8r,Dt,N9,e9r,rMe,o9r,r9r,xc,t9r,tMe,a9r,n9r,lY,s9r,l9r,i9r,I5,d9r,qr,q9,c9r,aMe,f9r,m9r,gn,g9r,nMe,h9r,p9r,sMe,_9r,u9r,lMe,b9r,v9r,F9r,iMe,N5,dMe,T9r,M9r,iY,E9r,C9r,w9r,q5,PDe,$c,j5,cMe,j9,A9r,fMe,L9r,BDe,fr,D9,y9r,kc,x9r,dY,$9r,k9r,cY,S9r,R9r,P9r,G9,B9r,mMe,I9r,N9r,q9r,Gt,O9,j9r,gMe,D9r,G9r,Sc,O9r,hMe,V9r,X9r,fY,z9r,W9r,Q9r,D5,H9r,jr,V9,U9r,pMe,J9r,Y9r,hn,K9r,_Me,Z9r,exr,uMe,oxr,rxr,bMe,txr,axr,nxr,re,G5,vMe,sxr,lxr,mY,ixr,dxr,cxr,O5,FMe,fxr,mxr,gY,gxr,hxr,pxr,V5,TMe,_xr,uxr,hY,bxr,vxr,Fxr,X5,MMe,Txr,Mxr,pY,Exr,Cxr,wxr,z5,EMe,Axr,Lxr,_Y,yxr,xxr,$xr,W5,CMe,kxr,Sxr,uY,Rxr,Pxr,Bxr,Q5,wMe,Ixr,Nxr,bY,qxr,jxr,Dxr,H5,AMe,Gxr,Oxr,vY,Vxr,Xxr,zxr,U5,LMe,Wxr,Qxr,FY,Hxr,Uxr,Jxr,J5,yMe,Yxr,Kxr,TY,Zxr,e$r,o$r,Y5,xMe,r$r,t$r,MY,a$r,n$r,s$r,K5,$Me,l$r,i$r,EY,d$r,c$r,f$r,Z5,kMe,m$r,g$r,CY,h$r,p$r,_$r,e3,SMe,u$r,b$r,wY,v$r,F$r,T$r,o3,RMe,M$r,E$r,AY,C$r,w$r,A$r,r3,PMe,L$r,y$r,LY,x$r,$$r,k$r,t3,BMe,S$r,R$r,yY,P$r,B$r,I$r,a3,IMe,N$r,q$r,xY,j$r,D$r,G$r,n3,NMe,O$r,V$r,$Y,X$r,z$r,W$r,s3,qMe,Q$r,H$r,kY,U$r,J$r,Y$r,l3,jMe,K$r,Z$r,SY,ekr,okr,rkr,i3,DMe,tkr,akr,RY,nkr,skr,lkr,d3,GMe,ikr,dkr,PY,ckr,fkr,mkr,c3,OMe,gkr,hkr,BY,pkr,_kr,ukr,f3,VMe,bkr,vkr,IY,Fkr,Tkr,Mkr,m3,XMe,Ekr,Ckr,NY,wkr,Akr,Lkr,g3,IDe,Rc,h3,zMe,X9,ykr,WMe,xkr,NDe,mr,z9,$kr,Pc,kkr,qY,Skr,Rkr,jY,Pkr,Bkr,Ikr,W9,Nkr,QMe,qkr,jkr,Dkr,Ot,Q9,Gkr,HMe,Okr,Vkr,Bc,Xkr,UMe,zkr,Wkr,DY,Qkr,Hkr,Ukr,p3,Jkr,Dr,H9,Ykr,JMe,Kkr,Zkr,pn,eSr,YMe,oSr,rSr,KMe,tSr,aSr,ZMe,nSr,sSr,lSr,ye,_3,eEe,iSr,dSr,GY,cSr,fSr,mSr,u3,oEe,gSr,hSr,OY,pSr,_Sr,uSr,b3,rEe,bSr,vSr,VY,FSr,TSr,MSr,v3,tEe,ESr,CSr,XY,wSr,ASr,LSr,F3,aEe,ySr,xSr,zY,$Sr,kSr,SSr,T3,nEe,RSr,PSr,WY,BSr,ISr,NSr,M3,sEe,qSr,jSr,QY,DSr,GSr,OSr,E3,lEe,VSr,XSr,HY,zSr,WSr,QSr,C3,iEe,HSr,USr,UY,JSr,YSr,KSr,w3,dEe,ZSr,eRr,JY,oRr,rRr,tRr,A3,qDe,Ic,L3,cEe,U9,aRr,fEe,nRr,jDe,gr,J9,sRr,Nc,lRr,YY,iRr,dRr,KY,cRr,fRr,mRr,Y9,gRr,mEe,hRr,pRr,_Rr,Vt,K9,uRr,gEe,bRr,vRr,qc,FRr,hEe,TRr,MRr,ZY,ERr,CRr,wRr,y3,ARr,Gr,Z9,LRr,pEe,yRr,xRr,_n,$Rr,_Ee,kRr,SRr,uEe,RRr,PRr,bEe,BRr,IRr,NRr,Ee,x3,vEe,qRr,jRr,eK,DRr,GRr,ORr,$3,FEe,VRr,XRr,oK,zRr,WRr,QRr,k3,TEe,HRr,URr,rK,JRr,YRr,KRr,S3,MEe,ZRr,ePr,tK,oPr,rPr,tPr,R3,EEe,aPr,nPr,aK,sPr,lPr,iPr,P3,CEe,dPr,cPr,nK,fPr,mPr,gPr,B3,wEe,hPr,pPr,sK,_Pr,uPr,bPr,I3,AEe,vPr,FPr,lK,TPr,MPr,EPr,N3,LEe,CPr,wPr,iK,APr,LPr,yPr,q3,yEe,xPr,$Pr,dK,kPr,SPr,RPr,j3,xEe,PPr,BPr,cK,IPr,NPr,qPr,D3,$Ee,jPr,DPr,fK,GPr,OPr,VPr,G3,DDe,jc,O3,kEe,ex,XPr,SEe,zPr,GDe,hr,ox,WPr,Dc,QPr,mK,HPr,UPr,gK,JPr,YPr,KPr,rx,ZPr,REe,eBr,oBr,rBr,Xt,tx,tBr,PEe,aBr,nBr,Gc,sBr,BEe,lBr,iBr,hK,dBr,cBr,fBr,V3,mBr,Or,ax,gBr,IEe,hBr,pBr,un,_Br,NEe,uBr,bBr,qEe,vBr,FBr,jEe,TBr,MBr,EBr,xe,X3,DEe,CBr,wBr,pK,ABr,LBr,yBr,z3,GEe,xBr,$Br,_K,kBr,SBr,RBr,W3,OEe,PBr,BBr,uK,IBr,NBr,qBr,Q3,VEe,jBr,DBr,bK,GBr,OBr,VBr,H3,XEe,XBr,zBr,vK,WBr,QBr,HBr,U3,zEe,UBr,JBr,FK,YBr,KBr,ZBr,J3,WEe,eIr,oIr,TK,rIr,tIr,aIr,Y3,QEe,nIr,sIr,MK,lIr,iIr,dIr,K3,HEe,cIr,fIr,EK,mIr,gIr,hIr,Z3,UEe,pIr,_Ir,CK,uIr,bIr,vIr,e0,ODe,Oc,o0,JEe,nx,FIr,YEe,TIr,VDe,pr,sx,MIr,Vc,EIr,wK,CIr,wIr,AK,AIr,LIr,yIr,lx,xIr,KEe,$Ir,kIr,SIr,zt,ix,RIr,ZEe,PIr,BIr,Xc,IIr,eCe,NIr,qIr,LK,jIr,DIr,GIr,r0,OIr,Vr,dx,VIr,oCe,XIr,zIr,bn,WIr,rCe,QIr,HIr,tCe,UIr,JIr,aCe,YIr,KIr,ZIr,Pe,t0,nCe,eNr,oNr,yK,rNr,tNr,aNr,a0,sCe,nNr,sNr,xK,lNr,iNr,dNr,n0,lCe,cNr,fNr,$K,mNr,gNr,hNr,s0,iCe,pNr,_Nr,kK,uNr,bNr,vNr,l0,dCe,FNr,TNr,SK,MNr,ENr,CNr,i0,cCe,wNr,ANr,RK,LNr,yNr,xNr,d0,fCe,$Nr,kNr,PK,SNr,RNr,PNr,c0,mCe,BNr,INr,BK,NNr,qNr,jNr,f0,gCe,DNr,GNr,IK,ONr,VNr,XNr,m0,XDe,zc,g0,hCe,cx,zNr,pCe,WNr,zDe,_r,fx,QNr,Wc,HNr,NK,UNr,JNr,qK,YNr,KNr,ZNr,mx,eqr,_Ce,oqr,rqr,tqr,Wt,gx,aqr,uCe,nqr,sqr,Qc,lqr,bCe,iqr,dqr,jK,cqr,fqr,mqr,h0,gqr,Xr,hx,hqr,vCe,pqr,_qr,vn,uqr,FCe,bqr,vqr,TCe,Fqr,Tqr,MCe,Mqr,Eqr,Cqr,$e,p0,ECe,wqr,Aqr,DK,Lqr,yqr,xqr,_0,CCe,$qr,kqr,GK,Sqr,Rqr,Pqr,u0,wCe,Bqr,Iqr,OK,Nqr,qqr,jqr,b0,ACe,Dqr,Gqr,VK,Oqr,Vqr,Xqr,v0,LCe,zqr,Wqr,XK,Qqr,Hqr,Uqr,F0,yCe,Jqr,Yqr,zK,Kqr,Zqr,ejr,T0,xCe,ojr,rjr,WK,tjr,ajr,njr,M0,$Ce,sjr,ljr,QK,ijr,djr,cjr,E0,kCe,fjr,mjr,HK,gjr,hjr,pjr,C0,SCe,_jr,ujr,UK,bjr,vjr,Fjr,w0,WDe,Hc,A0,RCe,px,Tjr,PCe,Mjr,QDe,ur,_x,Ejr,Uc,Cjr,JK,wjr,Ajr,YK,Ljr,yjr,xjr,ux,$jr,BCe,kjr,Sjr,Rjr,Qt,bx,Pjr,ICe,Bjr,Ijr,Jc,Njr,NCe,qjr,jjr,KK,Djr,Gjr,Ojr,L0,Vjr,zr,vx,Xjr,qCe,zjr,Wjr,Fn,Qjr,jCe,Hjr,Ujr,DCe,Jjr,Yjr,GCe,Kjr,Zjr,eDr,ke,y0,OCe,oDr,rDr,ZK,tDr,aDr,nDr,x0,VCe,sDr,lDr,eZ,iDr,dDr,cDr,$0,XCe,fDr,mDr,oZ,gDr,hDr,pDr,k0,zCe,_Dr,uDr,rZ,bDr,vDr,FDr,S0,WCe,TDr,MDr,tZ,EDr,CDr,wDr,R0,QCe,ADr,LDr,aZ,yDr,xDr,$Dr,P0,HCe,kDr,SDr,nZ,RDr,PDr,BDr,B0,UCe,IDr,NDr,sZ,qDr,jDr,DDr,I0,JCe,GDr,ODr,lZ,VDr,XDr,zDr,N0,YCe,WDr,QDr,iZ,HDr,UDr,JDr,q0,HDe,Yc,j0,KCe,Fx,YDr,ZCe,KDr,UDe,br,Tx,ZDr,Kc,eGr,dZ,oGr,rGr,cZ,tGr,aGr,nGr,Mx,sGr,e5e,lGr,iGr,dGr,Ht,Ex,cGr,o5e,fGr,mGr,Zc,gGr,r5e,hGr,pGr,fZ,_Gr,uGr,bGr,D0,vGr,Wr,Cx,FGr,t5e,TGr,MGr,Tn,EGr,a5e,CGr,wGr,n5e,AGr,LGr,s5e,yGr,xGr,$Gr,Ge,G0,l5e,kGr,SGr,mZ,RGr,PGr,BGr,O0,i5e,IGr,NGr,gZ,qGr,jGr,DGr,V0,d5e,GGr,OGr,hZ,VGr,XGr,zGr,X0,c5e,WGr,QGr,pZ,HGr,UGr,JGr,z0,f5e,YGr,KGr,_Z,ZGr,eOr,oOr,W0,m5e,rOr,tOr,uZ,aOr,nOr,sOr,Q0,g5e,lOr,iOr,bZ,dOr,cOr,fOr,H0,h5e,mOr,gOr,vZ,hOr,pOr,_Or,U0,JDe,ef,J0,p5e,wx,uOr,_5e,bOr,YDe,vr,Ax,vOr,of,FOr,FZ,TOr,MOr,TZ,EOr,COr,wOr,Lx,AOr,u5e,LOr,yOr,xOr,Ut,yx,$Or,b5e,kOr,SOr,rf,ROr,v5e,POr,BOr,MZ,IOr,NOr,qOr,Y0,jOr,Qr,xx,DOr,F5e,GOr,OOr,Mn,VOr,T5e,XOr,zOr,M5e,WOr,QOr,E5e,HOr,UOr,JOr,Oe,K0,C5e,YOr,KOr,EZ,ZOr,eVr,oVr,Z0,w5e,rVr,tVr,CZ,aVr,nVr,sVr,ew,A5e,lVr,iVr,wZ,dVr,cVr,fVr,ow,L5e,mVr,gVr,AZ,hVr,pVr,_Vr,rw,y5e,uVr,bVr,LZ,vVr,FVr,TVr,tw,x5e,MVr,EVr,yZ,CVr,wVr,AVr,aw,$5e,LVr,yVr,xZ,xVr,$Vr,kVr,nw,k5e,SVr,RVr,$Z,PVr,BVr,IVr,sw,KDe,tf,lw,S5e,$x,NVr,R5e,qVr,ZDe,Fr,kx,jVr,af,DVr,kZ,GVr,OVr,SZ,VVr,XVr,zVr,Sx,WVr,P5e,QVr,HVr,UVr,Jt,Rx,JVr,B5e,YVr,KVr,nf,ZVr,I5e,eXr,oXr,RZ,rXr,tXr,aXr,iw,nXr,Hr,Px,sXr,N5e,lXr,iXr,En,dXr,q5e,cXr,fXr,j5e,mXr,gXr,D5e,hXr,pXr,_Xr,G5e,dw,O5e,uXr,bXr,PZ,vXr,FXr,TXr,cw,eGe,sf,fw,V5e,Bx,MXr,X5e,EXr,oGe,Tr,Ix,CXr,lf,wXr,BZ,AXr,LXr,IZ,yXr,xXr,$Xr,Nx,kXr,z5e,SXr,RXr,PXr,Yt,qx,BXr,W5e,IXr,NXr,df,qXr,Q5e,jXr,DXr,NZ,GXr,OXr,VXr,mw,XXr,Ur,jx,zXr,H5e,WXr,QXr,Cn,HXr,U5e,UXr,JXr,J5e,YXr,KXr,Y5e,ZXr,ezr,ozr,Dx,gw,K5e,rzr,tzr,qZ,azr,nzr,szr,hw,Z5e,lzr,izr,jZ,dzr,czr,fzr,pw,rGe,cf,_w,e3e,Gx,mzr,o3e,gzr,tGe,Mr,Ox,hzr,ff,pzr,DZ,_zr,uzr,GZ,bzr,vzr,Fzr,Vx,Tzr,r3e,Mzr,Ezr,Czr,Kt,Xx,wzr,t3e,Azr,Lzr,mf,yzr,a3e,xzr,$zr,OZ,kzr,Szr,Rzr,uw,Pzr,Jr,zx,Bzr,n3e,Izr,Nzr,wn,qzr,s3e,jzr,Dzr,l3e,Gzr,Ozr,i3e,Vzr,Xzr,zzr,d3e,bw,c3e,Wzr,Qzr,VZ,Hzr,Uzr,Jzr,vw,aGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),G6=new te({}),O6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new Yzr({props:{warning:!0,$$slots:{default:[lRt]},$$scope:{ctx:y}}}),V6=new te({}),X6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L588"}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L611"}}),Ag=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:y}}}),H6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/configuration_auto.py#L734"}}),U6=new te({}),J6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L391"}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17474/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L405"}}),ih=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[dRt]},$$scope:{ctx:y}}}),eL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/tokenization_auto.py#L604"}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17474/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),Gh=new Yzr({props:{$$slots:{default:[cRt]},$$scope:{ctx:y}}}),Oh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[fRt]},$$scope:{ctx:y}}}),sL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),lL=new te({}),iL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L88"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L102"}}),ip=new Yzr({props:{$$slots:{default:[mRt]},$$scope:{ctx:y}}}),dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[gRt]},$$scope:{ctx:y}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/processing_auto.py#L255"}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L742"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),mp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[hRt]},$$scope:{ctx:y}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),du=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[pRt]},$$scope:{ctx:y}}}),bL=new te({}),vL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L749"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),fu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[_Rt]},$$scope:{ctx:y}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[uRt]},$$scope:{ctx:y}}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L764"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[bRt]},$$scope:{ctx:y}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vRt]},$$scope:{ctx:y}}}),yL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L771"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[FRt]},$$scope:{ctx:y}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[TRt]},$$scope:{ctx:y}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L778"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[MRt]},$$scope:{ctx:y}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ERt]},$$scope:{ctx:y}}}),qL=new te({}),jL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L787"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[CRt]},$$scope:{ctx:y}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wRt]},$$scope:{ctx:y}}}),VL=new te({}),XL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L821"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[ARt]},$$scope:{ctx:y}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:y}}}),HL=new te({}),UL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L828"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:y}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xRt]},$$scope:{ctx:y}}}),ZL=new te({}),ey=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L814"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Nb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[$Rt]},$$scope:{ctx:y}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kRt]},$$scope:{ctx:y}}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L796"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SRt]},$$scope:{ctx:y}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RRt]},$$scope:{ctx:y}}}),dy=new te({}),cy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L803"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[PRt]},$$scope:{ctx:y}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[BRt]},$$scope:{ctx:y}}}),hy=new te({}),py=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L837"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[IRt]},$$scope:{ctx:y}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NRt]},$$scope:{ctx:y}}}),vy=new te({}),Fy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L876"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[qRt]},$$scope:{ctx:y}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jRt]},$$scope:{ctx:y}}}),Cy=new te({}),wy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L883"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[DRt]},$$scope:{ctx:y}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[GRt]},$$scope:{ctx:y}}}),xy=new te({}),$y=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L906"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ORt]},$$scope:{ctx:y}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[VRt]},$$scope:{ctx:y}}}),Py=new te({}),By=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L890"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[XRt]},$$scope:{ctx:y}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[zRt]},$$scope:{ctx:y}}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L897"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WRt]},$$scope:{ctx:y}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QRt]},$$scope:{ctx:y}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L915"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[HRt]},$$scope:{ctx:y}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[URt]},$$scope:{ctx:y}}}),Jy=new te({}),Yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L922"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[JRt]},$$scope:{ctx:y}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[YRt]},$$scope:{ctx:y}}}),o8=new te({}),r8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L869"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[KRt]},$$scope:{ctx:y}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ZRt]},$$scope:{ctx:y}}}),l8=new te({}),i8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L844"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ePt]},$$scope:{ctx:y}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[oPt]},$$scope:{ctx:y}}}),m8=new te({}),g8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L851"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[rPt]},$$scope:{ctx:y}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:y}}}),u8=new te({}),b8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_auto.py#L860"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[aPt]},$$scope:{ctx:y}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:y}}}),M8=new te({}),E8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[sPt]},$$scope:{ctx:y}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:y}}}),L8=new te({}),y8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:y}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:y}}}),S8=new te({}),R8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[cPt]},$$scope:{ctx:y}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[fPt]},$$scope:{ctx:y}}}),N8=new te({}),q8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[mPt]},$$scope:{ctx:y}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[gPt]},$$scope:{ctx:y}}}),O8=new te({}),V8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[hPt]},$$scope:{ctx:y}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pPt]},$$scope:{ctx:y}}}),Q8=new te({}),H8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_Pt]},$$scope:{ctx:y}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uPt]},$$scope:{ctx:y}}}),K8=new te({}),Z8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[bPt]},$$scope:{ctx:y}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vPt]},$$scope:{ctx:y}}}),t9=new te({}),a9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[FPt]},$$scope:{ctx:y}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:y}}}),i9=new te({}),d9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[MPt]},$$scope:{ctx:y}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:y}}}),h9=new te({}),p9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[CPt]},$$scope:{ctx:y}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:y}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:y}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:y}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:y}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:y}}}),x9=new te({}),$9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:y}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:y}}}),P9=new te({}),B9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:y}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:y}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:y}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:y}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:y}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:y}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:y}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:y}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:y}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:y}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:y}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:y}}}),cx=new te({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:y}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:y}}}),px=new te({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:y}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:y}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:y}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:y}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:y}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:y}}}),$x=new te({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:y}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:y}}}),Bx=new te({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:y}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:y}}}),Gx=new te({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:y}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17474/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17474/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17474/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),N6=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),pi=o("Instantiating one of "),Ln=a("a"),q6=o("AutoConfig"),yn=o(", "),xn=a("a"),j6=o("AutoModel"),_i=o(`, and
`),$n=a("a"),D6=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),sk=o("will create a model that is an instance of "),bi=a("a"),lk=o("BertModel"),ik=o("."),Eo=l(),wa=a("p"),dk=o("There is one class of "),vf=a("code"),ck=o("AutoModel"),mVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),oje=l(),vi=a("h2"),Ff=a("a"),Ioe=a("span"),F(G6.$$.fragment),gVe=l(),Noe=a("span"),hVe=o("Extending the Auto Classes"),rje=l(),kn=a("p"),pVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qoe=a("code"),_Ve=o("NewModel"),uVe=o(", make sure you have a "),joe=a("code"),bVe=o("NewModelConfig"),vVe=o(` then you can add those to the auto
classes like this:`),tje=l(),F(O6.$$.fragment),aje=l(),fk=a("p"),FVe=o("You will then be able to use the auto classes like you would usually do!"),nje=l(),F(Tf.$$.fragment),sje=l(),Fi=a("h2"),Mf=a("a"),Doe=a("span"),F(V6.$$.fragment),TVe=l(),Goe=a("span"),MVe=o("AutoConfig"),lje=l(),Co=a("div"),F(X6.$$.fragment),EVe=l(),z6=a("p"),CVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mk=a("a"),wVe=o("from_pretrained()"),AVe=o(" class method."),LVe=l(),W6=a("p"),yVe=o("This class cannot be instantiated directly using "),Ooe=a("code"),xVe=o("__init__()"),$Ve=o(" (throws an error)."),kVe=l(),Er=a("div"),F(Q6.$$.fragment),SVe=l(),Voe=a("p"),RVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PVe=l(),Ti=a("p"),BVe=o("The configuration class to instantiate is selected based on the "),Xoe=a("code"),IVe=o("model_type"),NVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zoe=a("code"),qVe=o("pretrained_model_name_or_path"),jVe=o(":"),DVe=l(),A=a("ul"),Ef=a("li"),Woe=a("strong"),GVe=o("albert"),OVe=o(" \u2014 "),gk=a("a"),VVe=o("AlbertConfig"),XVe=o(" (ALBERT model)"),zVe=l(),Cf=a("li"),Qoe=a("strong"),WVe=o("bart"),QVe=o(" \u2014 "),hk=a("a"),HVe=o("BartConfig"),UVe=o(" (BART model)"),JVe=l(),wf=a("li"),Hoe=a("strong"),YVe=o("beit"),KVe=o(" \u2014 "),pk=a("a"),ZVe=o("BeitConfig"),eXe=o(" (BEiT model)"),oXe=l(),Af=a("li"),Uoe=a("strong"),rXe=o("bert"),tXe=o(" \u2014 "),_k=a("a"),aXe=o("BertConfig"),nXe=o(" (BERT model)"),sXe=l(),Lf=a("li"),Joe=a("strong"),lXe=o("bert-generation"),iXe=o(" \u2014 "),uk=a("a"),dXe=o("BertGenerationConfig"),cXe=o(" (Bert Generation model)"),fXe=l(),yf=a("li"),Yoe=a("strong"),mXe=o("big_bird"),gXe=o(" \u2014 "),bk=a("a"),hXe=o("BigBirdConfig"),pXe=o(" (BigBird model)"),_Xe=l(),xf=a("li"),Koe=a("strong"),uXe=o("bigbird_pegasus"),bXe=o(" \u2014 "),vk=a("a"),vXe=o("BigBirdPegasusConfig"),FXe=o(" (BigBird-Pegasus model)"),TXe=l(),$f=a("li"),Zoe=a("strong"),MXe=o("blenderbot"),EXe=o(" \u2014 "),Fk=a("a"),CXe=o("BlenderbotConfig"),wXe=o(" (Blenderbot model)"),AXe=l(),kf=a("li"),ere=a("strong"),LXe=o("blenderbot-small"),yXe=o(" \u2014 "),Tk=a("a"),xXe=o("BlenderbotSmallConfig"),$Xe=o(" (BlenderbotSmall model)"),kXe=l(),Sf=a("li"),ore=a("strong"),SXe=o("bloom"),RXe=o(" \u2014 "),Mk=a("a"),PXe=o("BloomConfig"),BXe=o(" (BLOOM model)"),IXe=l(),Rf=a("li"),rre=a("strong"),NXe=o("camembert"),qXe=o(" \u2014 "),Ek=a("a"),jXe=o("CamembertConfig"),DXe=o(" (CamemBERT model)"),GXe=l(),Pf=a("li"),tre=a("strong"),OXe=o("canine"),VXe=o(" \u2014 "),Ck=a("a"),XXe=o("CanineConfig"),zXe=o(" (CANINE model)"),WXe=l(),Bf=a("li"),are=a("strong"),QXe=o("clip"),HXe=o(" \u2014 "),wk=a("a"),UXe=o("CLIPConfig"),JXe=o(" (CLIP model)"),YXe=l(),If=a("li"),nre=a("strong"),KXe=o("convbert"),ZXe=o(" \u2014 "),Ak=a("a"),eze=o("ConvBertConfig"),oze=o(" (ConvBERT model)"),rze=l(),Nf=a("li"),sre=a("strong"),tze=o("convnext"),aze=o(" \u2014 "),Lk=a("a"),nze=o("ConvNextConfig"),sze=o(" (ConvNeXT model)"),lze=l(),qf=a("li"),lre=a("strong"),ize=o("ctrl"),dze=o(" \u2014 "),yk=a("a"),cze=o("CTRLConfig"),fze=o(" (CTRL model)"),mze=l(),jf=a("li"),ire=a("strong"),gze=o("cvt"),hze=o(" \u2014 "),xk=a("a"),pze=o("CvtConfig"),_ze=o(" (CvT model)"),uze=l(),Df=a("li"),dre=a("strong"),bze=o("data2vec-audio"),vze=o(" \u2014 "),$k=a("a"),Fze=o("Data2VecAudioConfig"),Tze=o(" (Data2VecAudio model)"),Mze=l(),Gf=a("li"),cre=a("strong"),Eze=o("data2vec-text"),Cze=o(" \u2014 "),kk=a("a"),wze=o("Data2VecTextConfig"),Aze=o(" (Data2VecText model)"),Lze=l(),Of=a("li"),fre=a("strong"),yze=o("data2vec-vision"),xze=o(" \u2014 "),Sk=a("a"),$ze=o("Data2VecVisionConfig"),kze=o(" (Data2VecVision model)"),Sze=l(),Vf=a("li"),mre=a("strong"),Rze=o("deberta"),Pze=o(" \u2014 "),Rk=a("a"),Bze=o("DebertaConfig"),Ize=o(" (DeBERTa model)"),Nze=l(),Xf=a("li"),gre=a("strong"),qze=o("deberta-v2"),jze=o(" \u2014 "),Pk=a("a"),Dze=o("DebertaV2Config"),Gze=o(" (DeBERTa-v2 model)"),Oze=l(),zf=a("li"),hre=a("strong"),Vze=o("decision_transformer"),Xze=o(" \u2014 "),Bk=a("a"),zze=o("DecisionTransformerConfig"),Wze=o(" (Decision Transformer model)"),Qze=l(),Wf=a("li"),pre=a("strong"),Hze=o("deit"),Uze=o(" \u2014 "),Ik=a("a"),Jze=o("DeiTConfig"),Yze=o(" (DeiT model)"),Kze=l(),Qf=a("li"),_re=a("strong"),Zze=o("detr"),eWe=o(" \u2014 "),Nk=a("a"),oWe=o("DetrConfig"),rWe=o(" (DETR model)"),tWe=l(),Hf=a("li"),ure=a("strong"),aWe=o("distilbert"),nWe=o(" \u2014 "),qk=a("a"),sWe=o("DistilBertConfig"),lWe=o(" (DistilBERT model)"),iWe=l(),Uf=a("li"),bre=a("strong"),dWe=o("dpr"),cWe=o(" \u2014 "),jk=a("a"),fWe=o("DPRConfig"),mWe=o(" (DPR model)"),gWe=l(),Jf=a("li"),vre=a("strong"),hWe=o("dpt"),pWe=o(" \u2014 "),Dk=a("a"),_We=o("DPTConfig"),uWe=o(" (DPT model)"),bWe=l(),Yf=a("li"),Fre=a("strong"),vWe=o("electra"),FWe=o(" \u2014 "),Gk=a("a"),TWe=o("ElectraConfig"),MWe=o(" (ELECTRA model)"),EWe=l(),Kf=a("li"),Tre=a("strong"),CWe=o("encoder-decoder"),wWe=o(" \u2014 "),Ok=a("a"),AWe=o("EncoderDecoderConfig"),LWe=o(" (Encoder decoder model)"),yWe=l(),Zf=a("li"),Mre=a("strong"),xWe=o("flaubert"),$We=o(" \u2014 "),Vk=a("a"),kWe=o("FlaubertConfig"),SWe=o(" (FlauBERT model)"),RWe=l(),em=a("li"),Ere=a("strong"),PWe=o("flava"),BWe=o(" \u2014 "),Xk=a("a"),IWe=o("FlavaConfig"),NWe=o(" (FLAVA model)"),qWe=l(),om=a("li"),Cre=a("strong"),jWe=o("fnet"),DWe=o(" \u2014 "),zk=a("a"),GWe=o("FNetConfig"),OWe=o(" (FNet model)"),VWe=l(),rm=a("li"),wre=a("strong"),XWe=o("fsmt"),zWe=o(" \u2014 "),Wk=a("a"),WWe=o("FSMTConfig"),QWe=o(" (FairSeq Machine-Translation model)"),HWe=l(),tm=a("li"),Are=a("strong"),UWe=o("funnel"),JWe=o(" \u2014 "),Qk=a("a"),YWe=o("FunnelConfig"),KWe=o(" (Funnel Transformer model)"),ZWe=l(),am=a("li"),Lre=a("strong"),eQe=o("glpn"),oQe=o(" \u2014 "),Hk=a("a"),rQe=o("GLPNConfig"),tQe=o(" (GLPN model)"),aQe=l(),nm=a("li"),yre=a("strong"),nQe=o("gpt2"),sQe=o(" \u2014 "),Uk=a("a"),lQe=o("GPT2Config"),iQe=o(" (OpenAI GPT-2 model)"),dQe=l(),sm=a("li"),xre=a("strong"),cQe=o("gpt_neo"),fQe=o(" \u2014 "),Jk=a("a"),mQe=o("GPTNeoConfig"),gQe=o(" (GPT Neo model)"),hQe=l(),lm=a("li"),$re=a("strong"),pQe=o("gpt_neox"),_Qe=o(" \u2014 "),Yk=a("a"),uQe=o("GPTNeoXConfig"),bQe=o(" (GPT NeoX model)"),vQe=l(),im=a("li"),kre=a("strong"),FQe=o("gptj"),TQe=o(" \u2014 "),Kk=a("a"),MQe=o("GPTJConfig"),EQe=o(" (GPT-J model)"),CQe=l(),dm=a("li"),Sre=a("strong"),wQe=o("hubert"),AQe=o(" \u2014 "),Zk=a("a"),LQe=o("HubertConfig"),yQe=o(" (Hubert model)"),xQe=l(),cm=a("li"),Rre=a("strong"),$Qe=o("ibert"),kQe=o(" \u2014 "),eS=a("a"),SQe=o("IBertConfig"),RQe=o(" (I-BERT model)"),PQe=l(),fm=a("li"),Pre=a("strong"),BQe=o("imagegpt"),IQe=o(" \u2014 "),oS=a("a"),NQe=o("ImageGPTConfig"),qQe=o(" (ImageGPT model)"),jQe=l(),mm=a("li"),Bre=a("strong"),DQe=o("layoutlm"),GQe=o(" \u2014 "),rS=a("a"),OQe=o("LayoutLMConfig"),VQe=o(" (LayoutLM model)"),XQe=l(),gm=a("li"),Ire=a("strong"),zQe=o("layoutlmv2"),WQe=o(" \u2014 "),tS=a("a"),QQe=o("LayoutLMv2Config"),HQe=o(" (LayoutLMv2 model)"),UQe=l(),hm=a("li"),Nre=a("strong"),JQe=o("layoutlmv3"),YQe=o(" \u2014 "),aS=a("a"),KQe=o("LayoutLMv3Config"),ZQe=o(" (LayoutLMv3 model)"),eHe=l(),pm=a("li"),qre=a("strong"),oHe=o("led"),rHe=o(" \u2014 "),nS=a("a"),tHe=o("LEDConfig"),aHe=o(" (LED model)"),nHe=l(),_m=a("li"),jre=a("strong"),sHe=o("levit"),lHe=o(" \u2014 "),sS=a("a"),iHe=o("LevitConfig"),dHe=o(" (LeViT model)"),cHe=l(),um=a("li"),Dre=a("strong"),fHe=o("longformer"),mHe=o(" \u2014 "),lS=a("a"),gHe=o("LongformerConfig"),hHe=o(" (Longformer model)"),pHe=l(),bm=a("li"),Gre=a("strong"),_He=o("luke"),uHe=o(" \u2014 "),iS=a("a"),bHe=o("LukeConfig"),vHe=o(" (LUKE model)"),FHe=l(),vm=a("li"),Ore=a("strong"),THe=o("lxmert"),MHe=o(" \u2014 "),dS=a("a"),EHe=o("LxmertConfig"),CHe=o(" (LXMERT model)"),wHe=l(),Fm=a("li"),Vre=a("strong"),AHe=o("m2m_100"),LHe=o(" \u2014 "),cS=a("a"),yHe=o("M2M100Config"),xHe=o(" (M2M100 model)"),$He=l(),Tm=a("li"),Xre=a("strong"),kHe=o("marian"),SHe=o(" \u2014 "),fS=a("a"),RHe=o("MarianConfig"),PHe=o(" (Marian model)"),BHe=l(),Mm=a("li"),zre=a("strong"),IHe=o("maskformer"),NHe=o(" \u2014 "),mS=a("a"),qHe=o("MaskFormerConfig"),jHe=o(" (MaskFormer model)"),DHe=l(),Em=a("li"),Wre=a("strong"),GHe=o("mbart"),OHe=o(" \u2014 "),gS=a("a"),VHe=o("MBartConfig"),XHe=o(" (mBART model)"),zHe=l(),Cm=a("li"),Qre=a("strong"),WHe=o("megatron-bert"),QHe=o(" \u2014 "),hS=a("a"),HHe=o("MegatronBertConfig"),UHe=o(" (Megatron-BERT model)"),JHe=l(),wm=a("li"),Hre=a("strong"),YHe=o("mobilebert"),KHe=o(" \u2014 "),pS=a("a"),ZHe=o("MobileBertConfig"),eUe=o(" (MobileBERT model)"),oUe=l(),Am=a("li"),Ure=a("strong"),rUe=o("mpnet"),tUe=o(" \u2014 "),_S=a("a"),aUe=o("MPNetConfig"),nUe=o(" (MPNet model)"),sUe=l(),Lm=a("li"),Jre=a("strong"),lUe=o("mt5"),iUe=o(" \u2014 "),uS=a("a"),dUe=o("MT5Config"),cUe=o(" (MT5 model)"),fUe=l(),ym=a("li"),Yre=a("strong"),mUe=o("nystromformer"),gUe=o(" \u2014 "),bS=a("a"),hUe=o("NystromformerConfig"),pUe=o(" (Nystr\xF6mformer model)"),_Ue=l(),xm=a("li"),Kre=a("strong"),uUe=o("openai-gpt"),bUe=o(" \u2014 "),vS=a("a"),vUe=o("OpenAIGPTConfig"),FUe=o(" (OpenAI GPT model)"),TUe=l(),$m=a("li"),Zre=a("strong"),MUe=o("opt"),EUe=o(" \u2014 "),FS=a("a"),CUe=o("OPTConfig"),wUe=o(" (OPT model)"),AUe=l(),km=a("li"),ete=a("strong"),LUe=o("pegasus"),yUe=o(" \u2014 "),TS=a("a"),xUe=o("PegasusConfig"),$Ue=o(" (Pegasus model)"),kUe=l(),Sm=a("li"),ote=a("strong"),SUe=o("perceiver"),RUe=o(" \u2014 "),MS=a("a"),PUe=o("PerceiverConfig"),BUe=o(" (Perceiver model)"),IUe=l(),Rm=a("li"),rte=a("strong"),NUe=o("plbart"),qUe=o(" \u2014 "),ES=a("a"),jUe=o("PLBartConfig"),DUe=o(" (PLBart model)"),GUe=l(),Pm=a("li"),tte=a("strong"),OUe=o("poolformer"),VUe=o(" \u2014 "),CS=a("a"),XUe=o("PoolFormerConfig"),zUe=o(" (PoolFormer model)"),WUe=l(),Bm=a("li"),ate=a("strong"),QUe=o("prophetnet"),HUe=o(" \u2014 "),wS=a("a"),UUe=o("ProphetNetConfig"),JUe=o(" (ProphetNet model)"),YUe=l(),Im=a("li"),nte=a("strong"),KUe=o("qdqbert"),ZUe=o(" \u2014 "),AS=a("a"),eJe=o("QDQBertConfig"),oJe=o(" (QDQBert model)"),rJe=l(),Nm=a("li"),ste=a("strong"),tJe=o("rag"),aJe=o(" \u2014 "),LS=a("a"),nJe=o("RagConfig"),sJe=o(" (RAG model)"),lJe=l(),qm=a("li"),lte=a("strong"),iJe=o("realm"),dJe=o(" \u2014 "),yS=a("a"),cJe=o("RealmConfig"),fJe=o(" (REALM model)"),mJe=l(),jm=a("li"),ite=a("strong"),gJe=o("reformer"),hJe=o(" \u2014 "),xS=a("a"),pJe=o("ReformerConfig"),_Je=o(" (Reformer model)"),uJe=l(),Dm=a("li"),dte=a("strong"),bJe=o("regnet"),vJe=o(" \u2014 "),$S=a("a"),FJe=o("RegNetConfig"),TJe=o(" (RegNet model)"),MJe=l(),Gm=a("li"),cte=a("strong"),EJe=o("rembert"),CJe=o(" \u2014 "),kS=a("a"),wJe=o("RemBertConfig"),AJe=o(" (RemBERT model)"),LJe=l(),Om=a("li"),fte=a("strong"),yJe=o("resnet"),xJe=o(" \u2014 "),SS=a("a"),$Je=o("ResNetConfig"),kJe=o(" (ResNet model)"),SJe=l(),Vm=a("li"),mte=a("strong"),RJe=o("retribert"),PJe=o(" \u2014 "),RS=a("a"),BJe=o("RetriBertConfig"),IJe=o(" (RetriBERT model)"),NJe=l(),Xm=a("li"),gte=a("strong"),qJe=o("roberta"),jJe=o(" \u2014 "),PS=a("a"),DJe=o("RobertaConfig"),GJe=o(" (RoBERTa model)"),OJe=l(),zm=a("li"),hte=a("strong"),VJe=o("roformer"),XJe=o(" \u2014 "),BS=a("a"),zJe=o("RoFormerConfig"),WJe=o(" (RoFormer model)"),QJe=l(),Wm=a("li"),pte=a("strong"),HJe=o("segformer"),UJe=o(" \u2014 "),IS=a("a"),JJe=o("SegformerConfig"),YJe=o(" (SegFormer model)"),KJe=l(),Qm=a("li"),_te=a("strong"),ZJe=o("sew"),eYe=o(" \u2014 "),NS=a("a"),oYe=o("SEWConfig"),rYe=o(" (SEW model)"),tYe=l(),Hm=a("li"),ute=a("strong"),aYe=o("sew-d"),nYe=o(" \u2014 "),qS=a("a"),sYe=o("SEWDConfig"),lYe=o(" (SEW-D model)"),iYe=l(),Um=a("li"),bte=a("strong"),dYe=o("speech-encoder-decoder"),cYe=o(" \u2014 "),jS=a("a"),fYe=o("SpeechEncoderDecoderConfig"),mYe=o(" (Speech Encoder decoder model)"),gYe=l(),Jm=a("li"),vte=a("strong"),hYe=o("speech_to_text"),pYe=o(" \u2014 "),DS=a("a"),_Ye=o("Speech2TextConfig"),uYe=o(" (Speech2Text model)"),bYe=l(),Ym=a("li"),Fte=a("strong"),vYe=o("speech_to_text_2"),FYe=o(" \u2014 "),GS=a("a"),TYe=o("Speech2Text2Config"),MYe=o(" (Speech2Text2 model)"),EYe=l(),Km=a("li"),Tte=a("strong"),CYe=o("splinter"),wYe=o(" \u2014 "),OS=a("a"),AYe=o("SplinterConfig"),LYe=o(" (Splinter model)"),yYe=l(),Zm=a("li"),Mte=a("strong"),xYe=o("squeezebert"),$Ye=o(" \u2014 "),VS=a("a"),kYe=o("SqueezeBertConfig"),SYe=o(" (SqueezeBERT model)"),RYe=l(),eg=a("li"),Ete=a("strong"),PYe=o("swin"),BYe=o(" \u2014 "),XS=a("a"),IYe=o("SwinConfig"),NYe=o(" (Swin Transformer model)"),qYe=l(),og=a("li"),Cte=a("strong"),jYe=o("t5"),DYe=o(" \u2014 "),zS=a("a"),GYe=o("T5Config"),OYe=o(" (T5 model)"),VYe=l(),rg=a("li"),wte=a("strong"),XYe=o("tapas"),zYe=o(" \u2014 "),WS=a("a"),WYe=o("TapasConfig"),QYe=o(" (TAPAS model)"),HYe=l(),tg=a("li"),Ate=a("strong"),UYe=o("trajectory_transformer"),JYe=o(" \u2014 "),QS=a("a"),YYe=o("TrajectoryTransformerConfig"),KYe=o(" (Trajectory Transformer model)"),ZYe=l(),ag=a("li"),Lte=a("strong"),eKe=o("transfo-xl"),oKe=o(" \u2014 "),HS=a("a"),rKe=o("TransfoXLConfig"),tKe=o(" (Transformer-XL model)"),aKe=l(),ng=a("li"),yte=a("strong"),nKe=o("trocr"),sKe=o(" \u2014 "),US=a("a"),lKe=o("TrOCRConfig"),iKe=o(" (TrOCR model)"),dKe=l(),sg=a("li"),xte=a("strong"),cKe=o("unispeech"),fKe=o(" \u2014 "),JS=a("a"),mKe=o("UniSpeechConfig"),gKe=o(" (UniSpeech model)"),hKe=l(),lg=a("li"),$te=a("strong"),pKe=o("unispeech-sat"),_Ke=o(" \u2014 "),YS=a("a"),uKe=o("UniSpeechSatConfig"),bKe=o(" (UniSpeechSat model)"),vKe=l(),ig=a("li"),kte=a("strong"),FKe=o("van"),TKe=o(" \u2014 "),KS=a("a"),MKe=o("VanConfig"),EKe=o(" (VAN model)"),CKe=l(),dg=a("li"),Ste=a("strong"),wKe=o("vilt"),AKe=o(" \u2014 "),ZS=a("a"),LKe=o("ViltConfig"),yKe=o(" (ViLT model)"),xKe=l(),cg=a("li"),Rte=a("strong"),$Ke=o("vision-encoder-decoder"),kKe=o(" \u2014 "),eR=a("a"),SKe=o("VisionEncoderDecoderConfig"),RKe=o(" (Vision Encoder decoder model)"),PKe=l(),fg=a("li"),Pte=a("strong"),BKe=o("vision-text-dual-encoder"),IKe=o(" \u2014 "),oR=a("a"),NKe=o("VisionTextDualEncoderConfig"),qKe=o(" (VisionTextDualEncoder model)"),jKe=l(),mg=a("li"),Bte=a("strong"),DKe=o("visual_bert"),GKe=o(" \u2014 "),rR=a("a"),OKe=o("VisualBertConfig"),VKe=o(" (VisualBERT model)"),XKe=l(),gg=a("li"),Ite=a("strong"),zKe=o("vit"),WKe=o(" \u2014 "),tR=a("a"),QKe=o("ViTConfig"),HKe=o(" (ViT model)"),UKe=l(),hg=a("li"),Nte=a("strong"),JKe=o("vit_mae"),YKe=o(" \u2014 "),aR=a("a"),KKe=o("ViTMAEConfig"),ZKe=o(" (ViTMAE model)"),eZe=l(),pg=a("li"),qte=a("strong"),oZe=o("wav2vec2"),rZe=o(" \u2014 "),nR=a("a"),tZe=o("Wav2Vec2Config"),aZe=o(" (Wav2Vec2 model)"),nZe=l(),_g=a("li"),jte=a("strong"),sZe=o("wav2vec2-conformer"),lZe=o(" \u2014 "),sR=a("a"),iZe=o("Wav2Vec2ConformerConfig"),dZe=o(" (Wav2Vec2-Conformer model)"),cZe=l(),ug=a("li"),Dte=a("strong"),fZe=o("wavlm"),mZe=o(" \u2014 "),lR=a("a"),gZe=o("WavLMConfig"),hZe=o(" (WavLM model)"),pZe=l(),bg=a("li"),Gte=a("strong"),_Ze=o("xglm"),uZe=o(" \u2014 "),iR=a("a"),bZe=o("XGLMConfig"),vZe=o(" (XGLM model)"),FZe=l(),vg=a("li"),Ote=a("strong"),TZe=o("xlm"),MZe=o(" \u2014 "),dR=a("a"),EZe=o("XLMConfig"),CZe=o(" (XLM model)"),wZe=l(),Fg=a("li"),Vte=a("strong"),AZe=o("xlm-prophetnet"),LZe=o(" \u2014 "),cR=a("a"),yZe=o("XLMProphetNetConfig"),xZe=o(" (XLM-ProphetNet model)"),$Ze=l(),Tg=a("li"),Xte=a("strong"),kZe=o("xlm-roberta"),SZe=o(" \u2014 "),fR=a("a"),RZe=o("XLMRobertaConfig"),PZe=o(" (XLM-RoBERTa model)"),BZe=l(),Mg=a("li"),zte=a("strong"),IZe=o("xlm-roberta-xl"),NZe=o(" \u2014 "),mR=a("a"),qZe=o("XLMRobertaXLConfig"),jZe=o(" (XLM-RoBERTa-XL model)"),DZe=l(),Eg=a("li"),Wte=a("strong"),GZe=o("xlnet"),OZe=o(" \u2014 "),gR=a("a"),VZe=o("XLNetConfig"),XZe=o(" (XLNet model)"),zZe=l(),Cg=a("li"),Qte=a("strong"),WZe=o("yolos"),QZe=o(" \u2014 "),hR=a("a"),HZe=o("YolosConfig"),UZe=o(" (YOLOS model)"),JZe=l(),wg=a("li"),Hte=a("strong"),YZe=o("yoso"),KZe=o(" \u2014 "),pR=a("a"),ZZe=o("YosoConfig"),eeo=o(" (YOSO model)"),oeo=l(),F(Ag.$$.fragment),reo=l(),Lg=a("div"),F(H6.$$.fragment),teo=l(),Ute=a("p"),aeo=o("Register a new configuration for this class."),ije=l(),Mi=a("h2"),yg=a("a"),Jte=a("span"),F(U6.$$.fragment),neo=l(),Yte=a("span"),seo=o("AutoTokenizer"),dje=l(),wo=a("div"),F(J6.$$.fragment),leo=l(),Y6=a("p"),ieo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_R=a("a"),deo=o("AutoTokenizer.from_pretrained()"),ceo=o(" class method."),feo=l(),K6=a("p"),meo=o("This class cannot be instantiated directly using "),Kte=a("code"),geo=o("__init__()"),heo=o(" (throws an error)."),peo=l(),Cr=a("div"),F(Z6.$$.fragment),_eo=l(),Zte=a("p"),ueo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),beo=l(),Aa=a("p"),veo=o("The tokenizer class to instantiate is selected based on the "),eae=a("code"),Feo=o("model_type"),Teo=o(` property of the config object (either
passed as an argument or loaded from `),oae=a("code"),Meo=o("pretrained_model_name_or_path"),Eeo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=a("code"),Ceo=o("pretrained_model_name_or_path"),weo=o(":"),Aeo=l(),k=a("ul"),Sn=a("li"),tae=a("strong"),Leo=o("albert"),yeo=o(" \u2014 "),uR=a("a"),xeo=o("AlbertTokenizer"),$eo=o(" or "),bR=a("a"),keo=o("AlbertTokenizerFast"),Seo=o(" (ALBERT model)"),Reo=l(),Rn=a("li"),aae=a("strong"),Peo=o("bart"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("BartTokenizer"),Neo=o(" or "),FR=a("a"),qeo=o("BartTokenizerFast"),jeo=o(" (BART model)"),Deo=l(),Pn=a("li"),nae=a("strong"),Geo=o("barthez"),Oeo=o(" \u2014 "),TR=a("a"),Veo=o("BarthezTokenizer"),Xeo=o(" or "),MR=a("a"),zeo=o("BarthezTokenizerFast"),Weo=o(" (BARThez model)"),Qeo=l(),xg=a("li"),sae=a("strong"),Heo=o("bartpho"),Ueo=o(" \u2014 "),ER=a("a"),Jeo=o("BartphoTokenizer"),Yeo=o(" (BARTpho model)"),Keo=l(),Bn=a("li"),lae=a("strong"),Zeo=o("bert"),eoo=o(" \u2014 "),CR=a("a"),ooo=o("BertTokenizer"),roo=o(" or "),wR=a("a"),too=o("BertTokenizerFast"),aoo=o(" (BERT model)"),noo=l(),$g=a("li"),iae=a("strong"),soo=o("bert-generation"),loo=o(" \u2014 "),AR=a("a"),ioo=o("BertGenerationTokenizer"),doo=o(" (Bert Generation model)"),coo=l(),kg=a("li"),dae=a("strong"),foo=o("bert-japanese"),moo=o(" \u2014 "),LR=a("a"),goo=o("BertJapaneseTokenizer"),hoo=o(" (BertJapanese model)"),poo=l(),Sg=a("li"),cae=a("strong"),_oo=o("bertweet"),uoo=o(" \u2014 "),yR=a("a"),boo=o("BertweetTokenizer"),voo=o(" (BERTweet model)"),Foo=l(),In=a("li"),fae=a("strong"),Too=o("big_bird"),Moo=o(" \u2014 "),xR=a("a"),Eoo=o("BigBirdTokenizer"),Coo=o(" or "),$R=a("a"),woo=o("BigBirdTokenizerFast"),Aoo=o(" (BigBird model)"),Loo=l(),Nn=a("li"),mae=a("strong"),yoo=o("bigbird_pegasus"),xoo=o(" \u2014 "),kR=a("a"),$oo=o("PegasusTokenizer"),koo=o(" or "),SR=a("a"),Soo=o("PegasusTokenizerFast"),Roo=o(" (BigBird-Pegasus model)"),Poo=l(),qn=a("li"),gae=a("strong"),Boo=o("blenderbot"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("BlenderbotTokenizer"),qoo=o(" or "),PR=a("a"),joo=o("BlenderbotTokenizerFast"),Doo=o(" (Blenderbot model)"),Goo=l(),Rg=a("li"),hae=a("strong"),Ooo=o("blenderbot-small"),Voo=o(" \u2014 "),BR=a("a"),Xoo=o("BlenderbotSmallTokenizer"),zoo=o(" (BlenderbotSmall model)"),Woo=l(),Pg=a("li"),pae=a("strong"),Qoo=o("bloom"),Hoo=o(" \u2014 "),IR=a("a"),Uoo=o("BloomTokenizerFast"),Joo=o(" (BLOOM model)"),Yoo=l(),Bg=a("li"),_ae=a("strong"),Koo=o("byt5"),Zoo=o(" \u2014 "),NR=a("a"),ero=o("ByT5Tokenizer"),oro=o(" (ByT5 model)"),rro=l(),jn=a("li"),uae=a("strong"),tro=o("camembert"),aro=o(" \u2014 "),qR=a("a"),nro=o("CamembertTokenizer"),sro=o(" or "),jR=a("a"),lro=o("CamembertTokenizerFast"),iro=o(" (CamemBERT model)"),dro=l(),Ig=a("li"),bae=a("strong"),cro=o("canine"),fro=o(" \u2014 "),DR=a("a"),mro=o("CanineTokenizer"),gro=o(" (CANINE model)"),hro=l(),Dn=a("li"),vae=a("strong"),pro=o("clip"),_ro=o(" \u2014 "),GR=a("a"),uro=o("CLIPTokenizer"),bro=o(" or "),OR=a("a"),vro=o("CLIPTokenizerFast"),Fro=o(" (CLIP model)"),Tro=l(),Gn=a("li"),Fae=a("strong"),Mro=o("convbert"),Ero=o(" \u2014 "),VR=a("a"),Cro=o("ConvBertTokenizer"),wro=o(" or "),XR=a("a"),Aro=o("ConvBertTokenizerFast"),Lro=o(" (ConvBERT model)"),yro=l(),On=a("li"),Tae=a("strong"),xro=o("cpm"),$ro=o(" \u2014 "),zR=a("a"),kro=o("CpmTokenizer"),Sro=o(" or "),WR=a("a"),Rro=o("CpmTokenizerFast"),Pro=o(" (CPM model)"),Bro=l(),Ng=a("li"),Mae=a("strong"),Iro=o("ctrl"),Nro=o(" \u2014 "),QR=a("a"),qro=o("CTRLTokenizer"),jro=o(" (CTRL model)"),Dro=l(),Vn=a("li"),Eae=a("strong"),Gro=o("data2vec-text"),Oro=o(" \u2014 "),HR=a("a"),Vro=o("RobertaTokenizer"),Xro=o(" or "),UR=a("a"),zro=o("RobertaTokenizerFast"),Wro=o(" (Data2VecText model)"),Qro=l(),Xn=a("li"),Cae=a("strong"),Hro=o("deberta"),Uro=o(" \u2014 "),JR=a("a"),Jro=o("DebertaTokenizer"),Yro=o(" or "),YR=a("a"),Kro=o("DebertaTokenizerFast"),Zro=o(" (DeBERTa model)"),eto=l(),zn=a("li"),wae=a("strong"),oto=o("deberta-v2"),rto=o(" \u2014 "),KR=a("a"),tto=o("DebertaV2Tokenizer"),ato=o(" or "),ZR=a("a"),nto=o("DebertaV2TokenizerFast"),sto=o(" (DeBERTa-v2 model)"),lto=l(),Wn=a("li"),Aae=a("strong"),ito=o("distilbert"),dto=o(" \u2014 "),eP=a("a"),cto=o("DistilBertTokenizer"),fto=o(" or "),oP=a("a"),mto=o("DistilBertTokenizerFast"),gto=o(" (DistilBERT model)"),hto=l(),Qn=a("li"),Lae=a("strong"),pto=o("dpr"),_to=o(" \u2014 "),rP=a("a"),uto=o("DPRQuestionEncoderTokenizer"),bto=o(" or "),tP=a("a"),vto=o("DPRQuestionEncoderTokenizerFast"),Fto=o(" (DPR model)"),Tto=l(),Hn=a("li"),yae=a("strong"),Mto=o("electra"),Eto=o(" \u2014 "),aP=a("a"),Cto=o("ElectraTokenizer"),wto=o(" or "),nP=a("a"),Ato=o("ElectraTokenizerFast"),Lto=o(" (ELECTRA model)"),yto=l(),qg=a("li"),xae=a("strong"),xto=o("flaubert"),$to=o(" \u2014 "),sP=a("a"),kto=o("FlaubertTokenizer"),Sto=o(" (FlauBERT model)"),Rto=l(),Un=a("li"),$ae=a("strong"),Pto=o("fnet"),Bto=o(" \u2014 "),lP=a("a"),Ito=o("FNetTokenizer"),Nto=o(" or "),iP=a("a"),qto=o("FNetTokenizerFast"),jto=o(" (FNet model)"),Dto=l(),jg=a("li"),kae=a("strong"),Gto=o("fsmt"),Oto=o(" \u2014 "),dP=a("a"),Vto=o("FSMTTokenizer"),Xto=o(" (FairSeq Machine-Translation model)"),zto=l(),Jn=a("li"),Sae=a("strong"),Wto=o("funnel"),Qto=o(" \u2014 "),cP=a("a"),Hto=o("FunnelTokenizer"),Uto=o(" or "),fP=a("a"),Jto=o("FunnelTokenizerFast"),Yto=o(" (Funnel Transformer model)"),Kto=l(),Yn=a("li"),Rae=a("strong"),Zto=o("gpt2"),eao=o(" \u2014 "),mP=a("a"),oao=o("GPT2Tokenizer"),rao=o(" or "),gP=a("a"),tao=o("GPT2TokenizerFast"),aao=o(" (OpenAI GPT-2 model)"),nao=l(),Kn=a("li"),Pae=a("strong"),sao=o("gpt_neo"),lao=o(" \u2014 "),hP=a("a"),iao=o("GPT2Tokenizer"),dao=o(" or "),pP=a("a"),cao=o("GPT2TokenizerFast"),fao=o(" (GPT Neo model)"),mao=l(),Dg=a("li"),Bae=a("strong"),gao=o("gpt_neox"),hao=o(" \u2014 "),_P=a("a"),pao=o("GPTNeoXTokenizerFast"),_ao=o(" (GPT NeoX model)"),uao=l(),Zn=a("li"),Iae=a("strong"),bao=o("gptj"),vao=o(" \u2014 "),uP=a("a"),Fao=o("GPT2Tokenizer"),Tao=o(" or "),bP=a("a"),Mao=o("GPT2TokenizerFast"),Eao=o(" (GPT-J model)"),Cao=l(),es=a("li"),Nae=a("strong"),wao=o("herbert"),Aao=o(" \u2014 "),vP=a("a"),Lao=o("HerbertTokenizer"),yao=o(" or "),FP=a("a"),xao=o("HerbertTokenizerFast"),$ao=o(" (HerBERT model)"),kao=l(),Gg=a("li"),qae=a("strong"),Sao=o("hubert"),Rao=o(" \u2014 "),TP=a("a"),Pao=o("Wav2Vec2CTCTokenizer"),Bao=o(" (Hubert model)"),Iao=l(),os=a("li"),jae=a("strong"),Nao=o("ibert"),qao=o(" \u2014 "),MP=a("a"),jao=o("RobertaTokenizer"),Dao=o(" or "),EP=a("a"),Gao=o("RobertaTokenizerFast"),Oao=o(" (I-BERT model)"),Vao=l(),rs=a("li"),Dae=a("strong"),Xao=o("layoutlm"),zao=o(" \u2014 "),CP=a("a"),Wao=o("LayoutLMTokenizer"),Qao=o(" or "),wP=a("a"),Hao=o("LayoutLMTokenizerFast"),Uao=o(" (LayoutLM model)"),Jao=l(),ts=a("li"),Gae=a("strong"),Yao=o("layoutlmv2"),Kao=o(" \u2014 "),AP=a("a"),Zao=o("LayoutLMv2Tokenizer"),eno=o(" or "),LP=a("a"),ono=o("LayoutLMv2TokenizerFast"),rno=o(" (LayoutLMv2 model)"),tno=l(),as=a("li"),Oae=a("strong"),ano=o("layoutlmv3"),nno=o(" \u2014 "),yP=a("a"),sno=o("LayoutLMv3Tokenizer"),lno=o(" or "),xP=a("a"),ino=o("LayoutLMv3TokenizerFast"),dno=o(" (LayoutLMv3 model)"),cno=l(),ns=a("li"),Vae=a("strong"),fno=o("layoutxlm"),mno=o(" \u2014 "),$P=a("a"),gno=o("LayoutXLMTokenizer"),hno=o(" or "),kP=a("a"),pno=o("LayoutXLMTokenizerFast"),_no=o(" (LayoutXLM model)"),uno=l(),ss=a("li"),Xae=a("strong"),bno=o("led"),vno=o(" \u2014 "),SP=a("a"),Fno=o("LEDTokenizer"),Tno=o(" or "),RP=a("a"),Mno=o("LEDTokenizerFast"),Eno=o(" (LED model)"),Cno=l(),ls=a("li"),zae=a("strong"),wno=o("longformer"),Ano=o(" \u2014 "),PP=a("a"),Lno=o("LongformerTokenizer"),yno=o(" or "),BP=a("a"),xno=o("LongformerTokenizerFast"),$no=o(" (Longformer model)"),kno=l(),Og=a("li"),Wae=a("strong"),Sno=o("luke"),Rno=o(" \u2014 "),IP=a("a"),Pno=o("LukeTokenizer"),Bno=o(" (LUKE model)"),Ino=l(),is=a("li"),Qae=a("strong"),Nno=o("lxmert"),qno=o(" \u2014 "),NP=a("a"),jno=o("LxmertTokenizer"),Dno=o(" or "),qP=a("a"),Gno=o("LxmertTokenizerFast"),Ono=o(" (LXMERT model)"),Vno=l(),Vg=a("li"),Hae=a("strong"),Xno=o("m2m_100"),zno=o(" \u2014 "),jP=a("a"),Wno=o("M2M100Tokenizer"),Qno=o(" (M2M100 model)"),Hno=l(),Xg=a("li"),Uae=a("strong"),Uno=o("marian"),Jno=o(" \u2014 "),DP=a("a"),Yno=o("MarianTokenizer"),Kno=o(" (Marian model)"),Zno=l(),ds=a("li"),Jae=a("strong"),eso=o("mbart"),oso=o(" \u2014 "),GP=a("a"),rso=o("MBartTokenizer"),tso=o(" or "),OP=a("a"),aso=o("MBartTokenizerFast"),nso=o(" (mBART model)"),sso=l(),cs=a("li"),Yae=a("strong"),lso=o("mbart50"),iso=o(" \u2014 "),VP=a("a"),dso=o("MBart50Tokenizer"),cso=o(" or "),XP=a("a"),fso=o("MBart50TokenizerFast"),mso=o(" (mBART-50 model)"),gso=l(),fs=a("li"),Kae=a("strong"),hso=o("megatron-bert"),pso=o(" \u2014 "),zP=a("a"),_so=o("BertTokenizer"),uso=o(" or "),WP=a("a"),bso=o("BertTokenizerFast"),vso=o(" (Megatron-BERT model)"),Fso=l(),zg=a("li"),Zae=a("strong"),Tso=o("mluke"),Mso=o(" \u2014 "),QP=a("a"),Eso=o("MLukeTokenizer"),Cso=o(" (mLUKE model)"),wso=l(),ms=a("li"),ene=a("strong"),Aso=o("mobilebert"),Lso=o(" \u2014 "),HP=a("a"),yso=o("MobileBertTokenizer"),xso=o(" or "),UP=a("a"),$so=o("MobileBertTokenizerFast"),kso=o(" (MobileBERT model)"),Sso=l(),gs=a("li"),one=a("strong"),Rso=o("mpnet"),Pso=o(" \u2014 "),JP=a("a"),Bso=o("MPNetTokenizer"),Iso=o(" or "),YP=a("a"),Nso=o("MPNetTokenizerFast"),qso=o(" (MPNet model)"),jso=l(),hs=a("li"),rne=a("strong"),Dso=o("mt5"),Gso=o(" \u2014 "),KP=a("a"),Oso=o("MT5Tokenizer"),Vso=o(" or "),ZP=a("a"),Xso=o("MT5TokenizerFast"),zso=o(" (MT5 model)"),Wso=l(),ps=a("li"),tne=a("strong"),Qso=o("nystromformer"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("AlbertTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("AlbertTokenizerFast"),Kso=o(" (Nystr\xF6mformer model)"),Zso=l(),_s=a("li"),ane=a("strong"),elo=o("openai-gpt"),olo=o(" \u2014 "),rB=a("a"),rlo=o("OpenAIGPTTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("OpenAIGPTTokenizerFast"),nlo=o(" (OpenAI GPT model)"),slo=l(),Wg=a("li"),nne=a("strong"),llo=o("opt"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("GPT2Tokenizer"),clo=o(" (OPT model)"),flo=l(),us=a("li"),sne=a("strong"),mlo=o("pegasus"),glo=o(" \u2014 "),nB=a("a"),hlo=o("PegasusTokenizer"),plo=o(" or "),sB=a("a"),_lo=o("PegasusTokenizerFast"),ulo=o(" (Pegasus model)"),blo=l(),Qg=a("li"),lne=a("strong"),vlo=o("perceiver"),Flo=o(" \u2014 "),lB=a("a"),Tlo=o("PerceiverTokenizer"),Mlo=o(" (Perceiver model)"),Elo=l(),Hg=a("li"),ine=a("strong"),Clo=o("phobert"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("PhobertTokenizer"),Llo=o(" (PhoBERT model)"),ylo=l(),Ug=a("li"),dne=a("strong"),xlo=o("plbart"),$lo=o(" \u2014 "),dB=a("a"),klo=o("PLBartTokenizer"),Slo=o(" (PLBart model)"),Rlo=l(),Jg=a("li"),cne=a("strong"),Plo=o("prophetnet"),Blo=o(" \u2014 "),cB=a("a"),Ilo=o("ProphetNetTokenizer"),Nlo=o(" (ProphetNet model)"),qlo=l(),bs=a("li"),fne=a("strong"),jlo=o("qdqbert"),Dlo=o(" \u2014 "),fB=a("a"),Glo=o("BertTokenizer"),Olo=o(" or "),mB=a("a"),Vlo=o("BertTokenizerFast"),Xlo=o(" (QDQBert model)"),zlo=l(),Yg=a("li"),mne=a("strong"),Wlo=o("rag"),Qlo=o(" \u2014 "),gB=a("a"),Hlo=o("RagTokenizer"),Ulo=o(" (RAG model)"),Jlo=l(),vs=a("li"),gne=a("strong"),Ylo=o("realm"),Klo=o(" \u2014 "),hB=a("a"),Zlo=o("RealmTokenizer"),eio=o(" or "),pB=a("a"),oio=o("RealmTokenizerFast"),rio=o(" (REALM model)"),tio=l(),Fs=a("li"),hne=a("strong"),aio=o("reformer"),nio=o(" \u2014 "),_B=a("a"),sio=o("ReformerTokenizer"),lio=o(" or "),uB=a("a"),iio=o("ReformerTokenizerFast"),dio=o(" (Reformer model)"),cio=l(),Ts=a("li"),pne=a("strong"),fio=o("rembert"),mio=o(" \u2014 "),bB=a("a"),gio=o("RemBertTokenizer"),hio=o(" or "),vB=a("a"),pio=o("RemBertTokenizerFast"),_io=o(" (RemBERT model)"),uio=l(),Ms=a("li"),_ne=a("strong"),bio=o("retribert"),vio=o(" \u2014 "),FB=a("a"),Fio=o("RetriBertTokenizer"),Tio=o(" or "),TB=a("a"),Mio=o("RetriBertTokenizerFast"),Eio=o(" (RetriBERT model)"),Cio=l(),Es=a("li"),une=a("strong"),wio=o("roberta"),Aio=o(" \u2014 "),MB=a("a"),Lio=o("RobertaTokenizer"),yio=o(" or "),EB=a("a"),xio=o("RobertaTokenizerFast"),$io=o(" (RoBERTa model)"),kio=l(),Cs=a("li"),bne=a("strong"),Sio=o("roformer"),Rio=o(" \u2014 "),CB=a("a"),Pio=o("RoFormerTokenizer"),Bio=o(" or "),wB=a("a"),Iio=o("RoFormerTokenizerFast"),Nio=o(" (RoFormer model)"),qio=l(),Kg=a("li"),vne=a("strong"),jio=o("speech_to_text"),Dio=o(" \u2014 "),AB=a("a"),Gio=o("Speech2TextTokenizer"),Oio=o(" (Speech2Text model)"),Vio=l(),Zg=a("li"),Fne=a("strong"),Xio=o("speech_to_text_2"),zio=o(" \u2014 "),LB=a("a"),Wio=o("Speech2Text2Tokenizer"),Qio=o(" (Speech2Text2 model)"),Hio=l(),ws=a("li"),Tne=a("strong"),Uio=o("splinter"),Jio=o(" \u2014 "),yB=a("a"),Yio=o("SplinterTokenizer"),Kio=o(" or "),xB=a("a"),Zio=o("SplinterTokenizerFast"),edo=o(" (Splinter model)"),odo=l(),As=a("li"),Mne=a("strong"),rdo=o("squeezebert"),tdo=o(" \u2014 "),$B=a("a"),ado=o("SqueezeBertTokenizer"),ndo=o(" or "),kB=a("a"),sdo=o("SqueezeBertTokenizerFast"),ldo=o(" (SqueezeBERT model)"),ido=l(),Ls=a("li"),Ene=a("strong"),ddo=o("t5"),cdo=o(" \u2014 "),SB=a("a"),fdo=o("T5Tokenizer"),mdo=o(" or "),RB=a("a"),gdo=o("T5TokenizerFast"),hdo=o(" (T5 model)"),pdo=l(),eh=a("li"),Cne=a("strong"),_do=o("tapas"),udo=o(" \u2014 "),PB=a("a"),bdo=o("TapasTokenizer"),vdo=o(" (TAPAS model)"),Fdo=l(),oh=a("li"),wne=a("strong"),Tdo=o("tapex"),Mdo=o(" \u2014 "),BB=a("a"),Edo=o("TapexTokenizer"),Cdo=o(" (TAPEX model)"),wdo=l(),rh=a("li"),Ane=a("strong"),Ado=o("transfo-xl"),Ldo=o(" \u2014 "),IB=a("a"),ydo=o("TransfoXLTokenizer"),xdo=o(" (Transformer-XL model)"),$do=l(),ys=a("li"),Lne=a("strong"),kdo=o("visual_bert"),Sdo=o(" \u2014 "),NB=a("a"),Rdo=o("BertTokenizer"),Pdo=o(" or "),qB=a("a"),Bdo=o("BertTokenizerFast"),Ido=o(" (VisualBERT model)"),Ndo=l(),th=a("li"),yne=a("strong"),qdo=o("wav2vec2"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("Wav2Vec2CTCTokenizer"),Gdo=o(" (Wav2Vec2 model)"),Odo=l(),ah=a("li"),xne=a("strong"),Vdo=o("wav2vec2-conformer"),Xdo=o(" \u2014 "),DB=a("a"),zdo=o("Wav2Vec2CTCTokenizer"),Wdo=o(" (Wav2Vec2-Conformer model)"),Qdo=l(),nh=a("li"),$ne=a("strong"),Hdo=o("wav2vec2_phoneme"),Udo=o(" \u2014 "),GB=a("a"),Jdo=o("Wav2Vec2PhonemeCTCTokenizer"),Ydo=o(" (Wav2Vec2Phoneme model)"),Kdo=l(),xs=a("li"),kne=a("strong"),Zdo=o("xglm"),eco=o(" \u2014 "),OB=a("a"),oco=o("XGLMTokenizer"),rco=o(" or "),VB=a("a"),tco=o("XGLMTokenizerFast"),aco=o(" (XGLM model)"),nco=l(),sh=a("li"),Sne=a("strong"),sco=o("xlm"),lco=o(" \u2014 "),XB=a("a"),ico=o("XLMTokenizer"),dco=o(" (XLM model)"),cco=l(),lh=a("li"),Rne=a("strong"),fco=o("xlm-prophetnet"),mco=o(" \u2014 "),zB=a("a"),gco=o("XLMProphetNetTokenizer"),hco=o(" (XLM-ProphetNet model)"),pco=l(),$s=a("li"),Pne=a("strong"),_co=o("xlm-roberta"),uco=o(" \u2014 "),WB=a("a"),bco=o("XLMRobertaTokenizer"),vco=o(" or "),QB=a("a"),Fco=o("XLMRobertaTokenizerFast"),Tco=o(" (XLM-RoBERTa model)"),Mco=l(),ks=a("li"),Bne=a("strong"),Eco=o("xlm-roberta-xl"),Cco=o(" \u2014 "),HB=a("a"),wco=o("RobertaTokenizer"),Aco=o(" or "),UB=a("a"),Lco=o("RobertaTokenizerFast"),yco=o(" (XLM-RoBERTa-XL model)"),xco=l(),Ss=a("li"),Ine=a("strong"),$co=o("xlnet"),kco=o(" \u2014 "),JB=a("a"),Sco=o("XLNetTokenizer"),Rco=o(" or "),YB=a("a"),Pco=o("XLNetTokenizerFast"),Bco=o(" (XLNet model)"),Ico=l(),Rs=a("li"),Nne=a("strong"),Nco=o("yoso"),qco=o(" \u2014 "),KB=a("a"),jco=o("AlbertTokenizer"),Dco=o(" or "),ZB=a("a"),Gco=o("AlbertTokenizerFast"),Oco=o(" (YOSO model)"),Vco=l(),F(ih.$$.fragment),Xco=l(),dh=a("div"),F(eL.$$.fragment),zco=l(),qne=a("p"),Wco=o("Register a new tokenizer in this mapping."),cje=l(),Ei=a("h2"),ch=a("a"),jne=a("span"),F(oL.$$.fragment),Qco=l(),Dne=a("span"),Hco=o("AutoFeatureExtractor"),fje=l(),Ao=a("div"),F(rL.$$.fragment),Uco=l(),tL=a("p"),Jco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eI=a("a"),Yco=o("AutoFeatureExtractor.from_pretrained()"),Kco=o(" class method."),Zco=l(),aL=a("p"),efo=o("This class cannot be instantiated directly using "),Gne=a("code"),ofo=o("__init__()"),rfo=o(" (throws an error)."),tfo=l(),He=a("div"),F(nL.$$.fragment),afo=l(),One=a("p"),nfo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),sfo=l(),La=a("p"),lfo=o("The feature extractor class to instantiate is selected based on the "),Vne=a("code"),ifo=o("model_type"),dfo=o(` property of the config object
(either passed as an argument or loaded from `),Xne=a("code"),cfo=o("pretrained_model_name_or_path"),ffo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zne=a("code"),mfo=o("pretrained_model_name_or_path"),gfo=o(":"),hfo=l(),Y=a("ul"),fh=a("li"),Wne=a("strong"),pfo=o("beit"),_fo=o(" \u2014 "),oI=a("a"),ufo=o("BeitFeatureExtractor"),bfo=o(" (BEiT model)"),vfo=l(),mh=a("li"),Qne=a("strong"),Ffo=o("clip"),Tfo=o(" \u2014 "),rI=a("a"),Mfo=o("CLIPFeatureExtractor"),Efo=o(" (CLIP model)"),Cfo=l(),gh=a("li"),Hne=a("strong"),wfo=o("convnext"),Afo=o(" \u2014 "),tI=a("a"),Lfo=o("ConvNextFeatureExtractor"),yfo=o(" (ConvNeXT model)"),xfo=l(),hh=a("li"),Une=a("strong"),$fo=o("cvt"),kfo=o(" \u2014 "),aI=a("a"),Sfo=o("ConvNextFeatureExtractor"),Rfo=o(" (CvT model)"),Pfo=l(),ph=a("li"),Jne=a("strong"),Bfo=o("data2vec-audio"),Ifo=o(" \u2014 "),nI=a("a"),Nfo=o("Wav2Vec2FeatureExtractor"),qfo=o(" (Data2VecAudio model)"),jfo=l(),_h=a("li"),Yne=a("strong"),Dfo=o("data2vec-vision"),Gfo=o(" \u2014 "),sI=a("a"),Ofo=o("BeitFeatureExtractor"),Vfo=o(" (Data2VecVision model)"),Xfo=l(),uh=a("li"),Kne=a("strong"),zfo=o("deit"),Wfo=o(" \u2014 "),lI=a("a"),Qfo=o("DeiTFeatureExtractor"),Hfo=o(" (DeiT model)"),Ufo=l(),bh=a("li"),Zne=a("strong"),Jfo=o("detr"),Yfo=o(" \u2014 "),iI=a("a"),Kfo=o("DetrFeatureExtractor"),Zfo=o(" (DETR model)"),emo=l(),vh=a("li"),ese=a("strong"),omo=o("dpt"),rmo=o(" \u2014 "),dI=a("a"),tmo=o("DPTFeatureExtractor"),amo=o(" (DPT model)"),nmo=l(),Fh=a("li"),ose=a("strong"),smo=o("flava"),lmo=o(" \u2014 "),cI=a("a"),imo=o("FlavaFeatureExtractor"),dmo=o(" (FLAVA model)"),cmo=l(),Th=a("li"),rse=a("strong"),fmo=o("glpn"),mmo=o(" \u2014 "),fI=a("a"),gmo=o("GLPNFeatureExtractor"),hmo=o(" (GLPN model)"),pmo=l(),Mh=a("li"),tse=a("strong"),_mo=o("hubert"),umo=o(" \u2014 "),mI=a("a"),bmo=o("Wav2Vec2FeatureExtractor"),vmo=o(" (Hubert model)"),Fmo=l(),Eh=a("li"),ase=a("strong"),Tmo=o("imagegpt"),Mmo=o(" \u2014 "),gI=a("a"),Emo=o("ImageGPTFeatureExtractor"),Cmo=o(" (ImageGPT model)"),wmo=l(),Ch=a("li"),nse=a("strong"),Amo=o("layoutlmv2"),Lmo=o(" \u2014 "),hI=a("a"),ymo=o("LayoutLMv2FeatureExtractor"),xmo=o(" (LayoutLMv2 model)"),$mo=l(),wh=a("li"),sse=a("strong"),kmo=o("layoutlmv3"),Smo=o(" \u2014 "),pI=a("a"),Rmo=o("LayoutLMv3FeatureExtractor"),Pmo=o(" (LayoutLMv3 model)"),Bmo=l(),Ah=a("li"),lse=a("strong"),Imo=o("levit"),Nmo=o(" \u2014 "),_I=a("a"),qmo=o("LevitFeatureExtractor"),jmo=o(" (LeViT model)"),Dmo=l(),Lh=a("li"),ise=a("strong"),Gmo=o("maskformer"),Omo=o(" \u2014 "),uI=a("a"),Vmo=o("MaskFormerFeatureExtractor"),Xmo=o(" (MaskFormer model)"),zmo=l(),yh=a("li"),dse=a("strong"),Wmo=o("perceiver"),Qmo=o(" \u2014 "),bI=a("a"),Hmo=o("PerceiverFeatureExtractor"),Umo=o(" (Perceiver model)"),Jmo=l(),xh=a("li"),cse=a("strong"),Ymo=o("poolformer"),Kmo=o(" \u2014 "),vI=a("a"),Zmo=o("PoolFormerFeatureExtractor"),ego=o(" (PoolFormer model)"),ogo=l(),$h=a("li"),fse=a("strong"),rgo=o("regnet"),tgo=o(" \u2014 "),FI=a("a"),ago=o("ConvNextFeatureExtractor"),ngo=o(" (RegNet model)"),sgo=l(),kh=a("li"),mse=a("strong"),lgo=o("resnet"),igo=o(" \u2014 "),TI=a("a"),dgo=o("ConvNextFeatureExtractor"),cgo=o(" (ResNet model)"),fgo=l(),Sh=a("li"),gse=a("strong"),mgo=o("segformer"),ggo=o(" \u2014 "),MI=a("a"),hgo=o("SegformerFeatureExtractor"),pgo=o(" (SegFormer model)"),_go=l(),Rh=a("li"),hse=a("strong"),ugo=o("speech_to_text"),bgo=o(" \u2014 "),EI=a("a"),vgo=o("Speech2TextFeatureExtractor"),Fgo=o(" (Speech2Text model)"),Tgo=l(),Ph=a("li"),pse=a("strong"),Mgo=o("swin"),Ego=o(" \u2014 "),CI=a("a"),Cgo=o("ViTFeatureExtractor"),wgo=o(" (Swin Transformer model)"),Ago=l(),Bh=a("li"),_se=a("strong"),Lgo=o("van"),ygo=o(" \u2014 "),wI=a("a"),xgo=o("ConvNextFeatureExtractor"),$go=o(" (VAN model)"),kgo=l(),Ih=a("li"),use=a("strong"),Sgo=o("vit"),Rgo=o(" \u2014 "),AI=a("a"),Pgo=o("ViTFeatureExtractor"),Bgo=o(" (ViT model)"),Igo=l(),Nh=a("li"),bse=a("strong"),Ngo=o("vit_mae"),qgo=o(" \u2014 "),LI=a("a"),jgo=o("ViTFeatureExtractor"),Dgo=o(" (ViTMAE model)"),Ggo=l(),qh=a("li"),vse=a("strong"),Ogo=o("wav2vec2"),Vgo=o(" \u2014 "),yI=a("a"),Xgo=o("Wav2Vec2FeatureExtractor"),zgo=o(" (Wav2Vec2 model)"),Wgo=l(),jh=a("li"),Fse=a("strong"),Qgo=o("wav2vec2-conformer"),Hgo=o(" \u2014 "),xI=a("a"),Ugo=o("Wav2Vec2FeatureExtractor"),Jgo=o(" (Wav2Vec2-Conformer model)"),Ygo=l(),Dh=a("li"),Tse=a("strong"),Kgo=o("yolos"),Zgo=o(" \u2014 "),$I=a("a"),eho=o("YolosFeatureExtractor"),oho=o(" (YOLOS model)"),rho=l(),F(Gh.$$.fragment),tho=l(),F(Oh.$$.fragment),aho=l(),Vh=a("div"),F(sL.$$.fragment),nho=l(),Mse=a("p"),sho=o("Register a new feature extractor for this class."),mje=l(),Ci=a("h2"),Xh=a("a"),Ese=a("span"),F(lL.$$.fragment),lho=l(),Cse=a("span"),iho=o("AutoProcessor"),gje=l(),Lo=a("div"),F(iL.$$.fragment),dho=l(),dL=a("p"),cho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kI=a("a"),fho=o("AutoProcessor.from_pretrained()"),mho=o(" class method."),gho=l(),cL=a("p"),hho=o("This class cannot be instantiated directly using "),wse=a("code"),pho=o("__init__()"),_ho=o(" (throws an error)."),uho=l(),Ue=a("div"),F(fL.$$.fragment),bho=l(),Ase=a("p"),vho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fho=l(),wi=a("p"),Tho=o("The processor class to instantiate is selected based on the "),Lse=a("code"),Mho=o("model_type"),Eho=o(` property of the config object (either
passed as an argument or loaded from `),yse=a("code"),Cho=o("pretrained_model_name_or_path"),who=o(" if possible):"),Aho=l(),he=a("ul"),zh=a("li"),xse=a("strong"),Lho=o("clip"),yho=o(" \u2014 "),SI=a("a"),xho=o("CLIPProcessor"),$ho=o(" (CLIP model)"),kho=l(),Wh=a("li"),$se=a("strong"),Sho=o("flava"),Rho=o(" \u2014 "),kse=a("code"),Pho=o("FLAVAProcessor"),Bho=o(" (FLAVA model)"),Iho=l(),Qh=a("li"),Sse=a("strong"),Nho=o("layoutlmv2"),qho=o(" \u2014 "),RI=a("a"),jho=o("LayoutLMv2Processor"),Dho=o(" (LayoutLMv2 model)"),Gho=l(),Hh=a("li"),Rse=a("strong"),Oho=o("layoutlmv3"),Vho=o(" \u2014 "),PI=a("a"),Xho=o("LayoutLMv3Processor"),zho=o(" (LayoutLMv3 model)"),Who=l(),Uh=a("li"),Pse=a("strong"),Qho=o("layoutxlm"),Hho=o(" \u2014 "),BI=a("a"),Uho=o("LayoutXLMProcessor"),Jho=o(" (LayoutXLM model)"),Yho=l(),Jh=a("li"),Bse=a("strong"),Kho=o("sew"),Zho=o(" \u2014 "),II=a("a"),epo=o("Wav2Vec2Processor"),opo=o(" (SEW model)"),rpo=l(),Yh=a("li"),Ise=a("strong"),tpo=o("sew-d"),apo=o(" \u2014 "),NI=a("a"),npo=o("Wav2Vec2Processor"),spo=o(" (SEW-D model)"),lpo=l(),Kh=a("li"),Nse=a("strong"),ipo=o("speech_to_text"),dpo=o(" \u2014 "),qI=a("a"),cpo=o("Speech2TextProcessor"),fpo=o(" (Speech2Text model)"),mpo=l(),Zh=a("li"),qse=a("strong"),gpo=o("speech_to_text_2"),hpo=o(" \u2014 "),jI=a("a"),ppo=o("Speech2Text2Processor"),_po=o(" (Speech2Text2 model)"),upo=l(),ep=a("li"),jse=a("strong"),bpo=o("trocr"),vpo=o(" \u2014 "),DI=a("a"),Fpo=o("TrOCRProcessor"),Tpo=o(" (TrOCR model)"),Mpo=l(),op=a("li"),Dse=a("strong"),Epo=o("unispeech"),Cpo=o(" \u2014 "),GI=a("a"),wpo=o("Wav2Vec2Processor"),Apo=o(" (UniSpeech model)"),Lpo=l(),rp=a("li"),Gse=a("strong"),ypo=o("unispeech-sat"),xpo=o(" \u2014 "),OI=a("a"),$po=o("Wav2Vec2Processor"),kpo=o(" (UniSpeechSat model)"),Spo=l(),tp=a("li"),Ose=a("strong"),Rpo=o("vilt"),Ppo=o(" \u2014 "),VI=a("a"),Bpo=o("ViltProcessor"),Ipo=o(" (ViLT model)"),Npo=l(),ap=a("li"),Vse=a("strong"),qpo=o("vision-text-dual-encoder"),jpo=o(" \u2014 "),XI=a("a"),Dpo=o("VisionTextDualEncoderProcessor"),Gpo=o(" (VisionTextDualEncoder model)"),Opo=l(),np=a("li"),Xse=a("strong"),Vpo=o("wav2vec2"),Xpo=o(" \u2014 "),zI=a("a"),zpo=o("Wav2Vec2Processor"),Wpo=o(" (Wav2Vec2 model)"),Qpo=l(),sp=a("li"),zse=a("strong"),Hpo=o("wav2vec2-conformer"),Upo=o(" \u2014 "),WI=a("a"),Jpo=o("Wav2Vec2Processor"),Ypo=o(" (Wav2Vec2-Conformer model)"),Kpo=l(),lp=a("li"),Wse=a("strong"),Zpo=o("wavlm"),e_o=o(" \u2014 "),QI=a("a"),o_o=o("Wav2Vec2Processor"),r_o=o(" (WavLM model)"),t_o=l(),F(ip.$$.fragment),a_o=l(),F(dp.$$.fragment),n_o=l(),cp=a("div"),F(mL.$$.fragment),s_o=l(),Qse=a("p"),l_o=o("Register a new processor for this class."),hje=l(),Ai=a("h2"),fp=a("a"),Hse=a("span"),F(gL.$$.fragment),i_o=l(),Use=a("span"),d_o=o("AutoModel"),pje=l(),yo=a("div"),F(hL.$$.fragment),c_o=l(),Li=a("p"),f_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HI=a("a"),m_o=o("from_pretrained()"),g_o=o(" class method or the "),UI=a("a"),h_o=o("from_config()"),p_o=o(` class
method.`),__o=l(),pL=a("p"),u_o=o("This class cannot be instantiated directly using "),Jse=a("code"),b_o=o("__init__()"),v_o=o(" (throws an error)."),F_o=l(),tt=a("div"),F(_L.$$.fragment),T_o=l(),Yse=a("p"),M_o=o("Instantiates one of the base model classes of the library from a configuration."),E_o=l(),yi=a("p"),C_o=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),w_o=o("not"),A_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JI=a("a"),L_o=o("from_pretrained()"),y_o=o(" to load the model weights."),x_o=l(),F(mp.$$.fragment),$_o=l(),Je=a("div"),F(uL.$$.fragment),k_o=l(),Zse=a("p"),S_o=o("Instantiate one of the base model classes of the library from a pretrained model."),R_o=l(),ya=a("p"),P_o=o("The model class to instantiate is selected based on the "),ele=a("code"),B_o=o("model_type"),I_o=o(` property of the config object (either
passed as an argument or loaded from `),ole=a("code"),N_o=o("pretrained_model_name_or_path"),q_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=a("code"),j_o=o("pretrained_model_name_or_path"),D_o=o(":"),G_o=l(),x=a("ul"),gp=a("li"),tle=a("strong"),O_o=o("albert"),V_o=o(" \u2014 "),YI=a("a"),X_o=o("AlbertModel"),z_o=o(" (ALBERT model)"),W_o=l(),hp=a("li"),ale=a("strong"),Q_o=o("bart"),H_o=o(" \u2014 "),KI=a("a"),U_o=o("BartModel"),J_o=o(" (BART model)"),Y_o=l(),pp=a("li"),nle=a("strong"),K_o=o("beit"),Z_o=o(" \u2014 "),ZI=a("a"),euo=o("BeitModel"),ouo=o(" (BEiT model)"),ruo=l(),_p=a("li"),sle=a("strong"),tuo=o("bert"),auo=o(" \u2014 "),eN=a("a"),nuo=o("BertModel"),suo=o(" (BERT model)"),luo=l(),up=a("li"),lle=a("strong"),iuo=o("bert-generation"),duo=o(" \u2014 "),oN=a("a"),cuo=o("BertGenerationEncoder"),fuo=o(" (Bert Generation model)"),muo=l(),bp=a("li"),ile=a("strong"),guo=o("big_bird"),huo=o(" \u2014 "),rN=a("a"),puo=o("BigBirdModel"),_uo=o(" (BigBird model)"),uuo=l(),vp=a("li"),dle=a("strong"),buo=o("bigbird_pegasus"),vuo=o(" \u2014 "),tN=a("a"),Fuo=o("BigBirdPegasusModel"),Tuo=o(" (BigBird-Pegasus model)"),Muo=l(),Fp=a("li"),cle=a("strong"),Euo=o("blenderbot"),Cuo=o(" \u2014 "),aN=a("a"),wuo=o("BlenderbotModel"),Auo=o(" (Blenderbot model)"),Luo=l(),Tp=a("li"),fle=a("strong"),yuo=o("blenderbot-small"),xuo=o(" \u2014 "),nN=a("a"),$uo=o("BlenderbotSmallModel"),kuo=o(" (BlenderbotSmall model)"),Suo=l(),Mp=a("li"),mle=a("strong"),Ruo=o("bloom"),Puo=o(" \u2014 "),sN=a("a"),Buo=o("BloomModel"),Iuo=o(" (BLOOM model)"),Nuo=l(),Ep=a("li"),gle=a("strong"),quo=o("camembert"),juo=o(" \u2014 "),lN=a("a"),Duo=o("CamembertModel"),Guo=o(" (CamemBERT model)"),Ouo=l(),Cp=a("li"),hle=a("strong"),Vuo=o("canine"),Xuo=o(" \u2014 "),iN=a("a"),zuo=o("CanineModel"),Wuo=o(" (CANINE model)"),Quo=l(),wp=a("li"),ple=a("strong"),Huo=o("clip"),Uuo=o(" \u2014 "),dN=a("a"),Juo=o("CLIPModel"),Yuo=o(" (CLIP model)"),Kuo=l(),Ap=a("li"),_le=a("strong"),Zuo=o("convbert"),e4o=o(" \u2014 "),cN=a("a"),o4o=o("ConvBertModel"),r4o=o(" (ConvBERT model)"),t4o=l(),Lp=a("li"),ule=a("strong"),a4o=o("convnext"),n4o=o(" \u2014 "),fN=a("a"),s4o=o("ConvNextModel"),l4o=o(" (ConvNeXT model)"),i4o=l(),yp=a("li"),ble=a("strong"),d4o=o("ctrl"),c4o=o(" \u2014 "),mN=a("a"),f4o=o("CTRLModel"),m4o=o(" (CTRL model)"),g4o=l(),xp=a("li"),vle=a("strong"),h4o=o("cvt"),p4o=o(" \u2014 "),gN=a("a"),_4o=o("CvtModel"),u4o=o(" (CvT model)"),b4o=l(),$p=a("li"),Fle=a("strong"),v4o=o("data2vec-audio"),F4o=o(" \u2014 "),hN=a("a"),T4o=o("Data2VecAudioModel"),M4o=o(" (Data2VecAudio model)"),E4o=l(),kp=a("li"),Tle=a("strong"),C4o=o("data2vec-text"),w4o=o(" \u2014 "),pN=a("a"),A4o=o("Data2VecTextModel"),L4o=o(" (Data2VecText model)"),y4o=l(),Sp=a("li"),Mle=a("strong"),x4o=o("data2vec-vision"),$4o=o(" \u2014 "),_N=a("a"),k4o=o("Data2VecVisionModel"),S4o=o(" (Data2VecVision model)"),R4o=l(),Rp=a("li"),Ele=a("strong"),P4o=o("deberta"),B4o=o(" \u2014 "),uN=a("a"),I4o=o("DebertaModel"),N4o=o(" (DeBERTa model)"),q4o=l(),Pp=a("li"),Cle=a("strong"),j4o=o("deberta-v2"),D4o=o(" \u2014 "),bN=a("a"),G4o=o("DebertaV2Model"),O4o=o(" (DeBERTa-v2 model)"),V4o=l(),Bp=a("li"),wle=a("strong"),X4o=o("decision_transformer"),z4o=o(" \u2014 "),vN=a("a"),W4o=o("DecisionTransformerModel"),Q4o=o(" (Decision Transformer model)"),H4o=l(),Ip=a("li"),Ale=a("strong"),U4o=o("deit"),J4o=o(" \u2014 "),FN=a("a"),Y4o=o("DeiTModel"),K4o=o(" (DeiT model)"),Z4o=l(),Np=a("li"),Lle=a("strong"),e1o=o("detr"),o1o=o(" \u2014 "),TN=a("a"),r1o=o("DetrModel"),t1o=o(" (DETR model)"),a1o=l(),qp=a("li"),yle=a("strong"),n1o=o("distilbert"),s1o=o(" \u2014 "),MN=a("a"),l1o=o("DistilBertModel"),i1o=o(" (DistilBERT model)"),d1o=l(),jp=a("li"),xle=a("strong"),c1o=o("dpr"),f1o=o(" \u2014 "),EN=a("a"),m1o=o("DPRQuestionEncoder"),g1o=o(" (DPR model)"),h1o=l(),Dp=a("li"),$le=a("strong"),p1o=o("dpt"),_1o=o(" \u2014 "),CN=a("a"),u1o=o("DPTModel"),b1o=o(" (DPT model)"),v1o=l(),Gp=a("li"),kle=a("strong"),F1o=o("electra"),T1o=o(" \u2014 "),wN=a("a"),M1o=o("ElectraModel"),E1o=o(" (ELECTRA model)"),C1o=l(),Op=a("li"),Sle=a("strong"),w1o=o("flaubert"),A1o=o(" \u2014 "),AN=a("a"),L1o=o("FlaubertModel"),y1o=o(" (FlauBERT model)"),x1o=l(),Vp=a("li"),Rle=a("strong"),$1o=o("flava"),k1o=o(" \u2014 "),LN=a("a"),S1o=o("FlavaModel"),R1o=o(" (FLAVA model)"),P1o=l(),Xp=a("li"),Ple=a("strong"),B1o=o("fnet"),I1o=o(" \u2014 "),yN=a("a"),N1o=o("FNetModel"),q1o=o(" (FNet model)"),j1o=l(),zp=a("li"),Ble=a("strong"),D1o=o("fsmt"),G1o=o(" \u2014 "),xN=a("a"),O1o=o("FSMTModel"),V1o=o(" (FairSeq Machine-Translation model)"),X1o=l(),Ps=a("li"),Ile=a("strong"),z1o=o("funnel"),W1o=o(" \u2014 "),$N=a("a"),Q1o=o("FunnelModel"),H1o=o(" or "),kN=a("a"),U1o=o("FunnelBaseModel"),J1o=o(" (Funnel Transformer model)"),Y1o=l(),Wp=a("li"),Nle=a("strong"),K1o=o("glpn"),Z1o=o(" \u2014 "),SN=a("a"),e7o=o("GLPNModel"),o7o=o(" (GLPN model)"),r7o=l(),Qp=a("li"),qle=a("strong"),t7o=o("gpt2"),a7o=o(" \u2014 "),RN=a("a"),n7o=o("GPT2Model"),s7o=o(" (OpenAI GPT-2 model)"),l7o=l(),Hp=a("li"),jle=a("strong"),i7o=o("gpt_neo"),d7o=o(" \u2014 "),PN=a("a"),c7o=o("GPTNeoModel"),f7o=o(" (GPT Neo model)"),m7o=l(),Up=a("li"),Dle=a("strong"),g7o=o("gpt_neox"),h7o=o(" \u2014 "),BN=a("a"),p7o=o("GPTNeoXModel"),_7o=o(" (GPT NeoX model)"),u7o=l(),Jp=a("li"),Gle=a("strong"),b7o=o("gptj"),v7o=o(" \u2014 "),IN=a("a"),F7o=o("GPTJModel"),T7o=o(" (GPT-J model)"),M7o=l(),Yp=a("li"),Ole=a("strong"),E7o=o("hubert"),C7o=o(" \u2014 "),NN=a("a"),w7o=o("HubertModel"),A7o=o(" (Hubert model)"),L7o=l(),Kp=a("li"),Vle=a("strong"),y7o=o("ibert"),x7o=o(" \u2014 "),qN=a("a"),$7o=o("IBertModel"),k7o=o(" (I-BERT model)"),S7o=l(),Zp=a("li"),Xle=a("strong"),R7o=o("imagegpt"),P7o=o(" \u2014 "),jN=a("a"),B7o=o("ImageGPTModel"),I7o=o(" (ImageGPT model)"),N7o=l(),e_=a("li"),zle=a("strong"),q7o=o("layoutlm"),j7o=o(" \u2014 "),DN=a("a"),D7o=o("LayoutLMModel"),G7o=o(" (LayoutLM model)"),O7o=l(),o_=a("li"),Wle=a("strong"),V7o=o("layoutlmv2"),X7o=o(" \u2014 "),GN=a("a"),z7o=o("LayoutLMv2Model"),W7o=o(" (LayoutLMv2 model)"),Q7o=l(),r_=a("li"),Qle=a("strong"),H7o=o("layoutlmv3"),U7o=o(" \u2014 "),ON=a("a"),J7o=o("LayoutLMv3Model"),Y7o=o(" (LayoutLMv3 model)"),K7o=l(),t_=a("li"),Hle=a("strong"),Z7o=o("led"),ebo=o(" \u2014 "),VN=a("a"),obo=o("LEDModel"),rbo=o(" (LED model)"),tbo=l(),a_=a("li"),Ule=a("strong"),abo=o("levit"),nbo=o(" \u2014 "),XN=a("a"),sbo=o("LevitModel"),lbo=o(" (LeViT model)"),ibo=l(),n_=a("li"),Jle=a("strong"),dbo=o("longformer"),cbo=o(" \u2014 "),zN=a("a"),fbo=o("LongformerModel"),mbo=o(" (Longformer model)"),gbo=l(),s_=a("li"),Yle=a("strong"),hbo=o("luke"),pbo=o(" \u2014 "),WN=a("a"),_bo=o("LukeModel"),ubo=o(" (LUKE model)"),bbo=l(),l_=a("li"),Kle=a("strong"),vbo=o("lxmert"),Fbo=o(" \u2014 "),QN=a("a"),Tbo=o("LxmertModel"),Mbo=o(" (LXMERT model)"),Ebo=l(),i_=a("li"),Zle=a("strong"),Cbo=o("m2m_100"),wbo=o(" \u2014 "),HN=a("a"),Abo=o("M2M100Model"),Lbo=o(" (M2M100 model)"),ybo=l(),d_=a("li"),eie=a("strong"),xbo=o("marian"),$bo=o(" \u2014 "),UN=a("a"),kbo=o("MarianModel"),Sbo=o(" (Marian model)"),Rbo=l(),c_=a("li"),oie=a("strong"),Pbo=o("maskformer"),Bbo=o(" \u2014 "),JN=a("a"),Ibo=o("MaskFormerModel"),Nbo=o(" (MaskFormer model)"),qbo=l(),f_=a("li"),rie=a("strong"),jbo=o("mbart"),Dbo=o(" \u2014 "),YN=a("a"),Gbo=o("MBartModel"),Obo=o(" (mBART model)"),Vbo=l(),m_=a("li"),tie=a("strong"),Xbo=o("megatron-bert"),zbo=o(" \u2014 "),KN=a("a"),Wbo=o("MegatronBertModel"),Qbo=o(" (Megatron-BERT model)"),Hbo=l(),g_=a("li"),aie=a("strong"),Ubo=o("mobilebert"),Jbo=o(" \u2014 "),ZN=a("a"),Ybo=o("MobileBertModel"),Kbo=o(" (MobileBERT model)"),Zbo=l(),h_=a("li"),nie=a("strong"),e2o=o("mpnet"),o2o=o(" \u2014 "),eq=a("a"),r2o=o("MPNetModel"),t2o=o(" (MPNet model)"),a2o=l(),p_=a("li"),sie=a("strong"),n2o=o("mt5"),s2o=o(" \u2014 "),oq=a("a"),l2o=o("MT5Model"),i2o=o(" (MT5 model)"),d2o=l(),__=a("li"),lie=a("strong"),c2o=o("nystromformer"),f2o=o(" \u2014 "),rq=a("a"),m2o=o("NystromformerModel"),g2o=o(" (Nystr\xF6mformer model)"),h2o=l(),u_=a("li"),iie=a("strong"),p2o=o("openai-gpt"),_2o=o(" \u2014 "),tq=a("a"),u2o=o("OpenAIGPTModel"),b2o=o(" (OpenAI GPT model)"),v2o=l(),b_=a("li"),die=a("strong"),F2o=o("opt"),T2o=o(" \u2014 "),aq=a("a"),M2o=o("OPTModel"),E2o=o(" (OPT model)"),C2o=l(),v_=a("li"),cie=a("strong"),w2o=o("pegasus"),A2o=o(" \u2014 "),nq=a("a"),L2o=o("PegasusModel"),y2o=o(" (Pegasus model)"),x2o=l(),F_=a("li"),fie=a("strong"),$2o=o("perceiver"),k2o=o(" \u2014 "),sq=a("a"),S2o=o("PerceiverModel"),R2o=o(" (Perceiver model)"),P2o=l(),T_=a("li"),mie=a("strong"),B2o=o("plbart"),I2o=o(" \u2014 "),lq=a("a"),N2o=o("PLBartModel"),q2o=o(" (PLBart model)"),j2o=l(),M_=a("li"),gie=a("strong"),D2o=o("poolformer"),G2o=o(" \u2014 "),iq=a("a"),O2o=o("PoolFormerModel"),V2o=o(" (PoolFormer model)"),X2o=l(),E_=a("li"),hie=a("strong"),z2o=o("prophetnet"),W2o=o(" \u2014 "),dq=a("a"),Q2o=o("ProphetNetModel"),H2o=o(" (ProphetNet model)"),U2o=l(),C_=a("li"),pie=a("strong"),J2o=o("qdqbert"),Y2o=o(" \u2014 "),cq=a("a"),K2o=o("QDQBertModel"),Z2o=o(" (QDQBert model)"),evo=l(),w_=a("li"),_ie=a("strong"),ovo=o("reformer"),rvo=o(" \u2014 "),fq=a("a"),tvo=o("ReformerModel"),avo=o(" (Reformer model)"),nvo=l(),A_=a("li"),uie=a("strong"),svo=o("regnet"),lvo=o(" \u2014 "),mq=a("a"),ivo=o("RegNetModel"),dvo=o(" (RegNet model)"),cvo=l(),L_=a("li"),bie=a("strong"),fvo=o("rembert"),mvo=o(" \u2014 "),gq=a("a"),gvo=o("RemBertModel"),hvo=o(" (RemBERT model)"),pvo=l(),y_=a("li"),vie=a("strong"),_vo=o("resnet"),uvo=o(" \u2014 "),hq=a("a"),bvo=o("ResNetModel"),vvo=o(" (ResNet model)"),Fvo=l(),x_=a("li"),Fie=a("strong"),Tvo=o("retribert"),Mvo=o(" \u2014 "),pq=a("a"),Evo=o("RetriBertModel"),Cvo=o(" (RetriBERT model)"),wvo=l(),$_=a("li"),Tie=a("strong"),Avo=o("roberta"),Lvo=o(" \u2014 "),_q=a("a"),yvo=o("RobertaModel"),xvo=o(" (RoBERTa model)"),$vo=l(),k_=a("li"),Mie=a("strong"),kvo=o("roformer"),Svo=o(" \u2014 "),uq=a("a"),Rvo=o("RoFormerModel"),Pvo=o(" (RoFormer model)"),Bvo=l(),S_=a("li"),Eie=a("strong"),Ivo=o("segformer"),Nvo=o(" \u2014 "),bq=a("a"),qvo=o("SegformerModel"),jvo=o(" (SegFormer model)"),Dvo=l(),R_=a("li"),Cie=a("strong"),Gvo=o("sew"),Ovo=o(" \u2014 "),vq=a("a"),Vvo=o("SEWModel"),Xvo=o(" (SEW model)"),zvo=l(),P_=a("li"),wie=a("strong"),Wvo=o("sew-d"),Qvo=o(" \u2014 "),Fq=a("a"),Hvo=o("SEWDModel"),Uvo=o(" (SEW-D model)"),Jvo=l(),B_=a("li"),Aie=a("strong"),Yvo=o("speech_to_text"),Kvo=o(" \u2014 "),Tq=a("a"),Zvo=o("Speech2TextModel"),eFo=o(" (Speech2Text model)"),oFo=l(),I_=a("li"),Lie=a("strong"),rFo=o("splinter"),tFo=o(" \u2014 "),Mq=a("a"),aFo=o("SplinterModel"),nFo=o(" (Splinter model)"),sFo=l(),N_=a("li"),yie=a("strong"),lFo=o("squeezebert"),iFo=o(" \u2014 "),Eq=a("a"),dFo=o("SqueezeBertModel"),cFo=o(" (SqueezeBERT model)"),fFo=l(),q_=a("li"),xie=a("strong"),mFo=o("swin"),gFo=o(" \u2014 "),Cq=a("a"),hFo=o("SwinModel"),pFo=o(" (Swin Transformer model)"),_Fo=l(),j_=a("li"),$ie=a("strong"),uFo=o("t5"),bFo=o(" \u2014 "),wq=a("a"),vFo=o("T5Model"),FFo=o(" (T5 model)"),TFo=l(),D_=a("li"),kie=a("strong"),MFo=o("tapas"),EFo=o(" \u2014 "),Aq=a("a"),CFo=o("TapasModel"),wFo=o(" (TAPAS model)"),AFo=l(),G_=a("li"),Sie=a("strong"),LFo=o("trajectory_transformer"),yFo=o(" \u2014 "),Lq=a("a"),xFo=o("TrajectoryTransformerModel"),$Fo=o(" (Trajectory Transformer model)"),kFo=l(),O_=a("li"),Rie=a("strong"),SFo=o("transfo-xl"),RFo=o(" \u2014 "),yq=a("a"),PFo=o("TransfoXLModel"),BFo=o(" (Transformer-XL model)"),IFo=l(),V_=a("li"),Pie=a("strong"),NFo=o("unispeech"),qFo=o(" \u2014 "),xq=a("a"),jFo=o("UniSpeechModel"),DFo=o(" (UniSpeech model)"),GFo=l(),X_=a("li"),Bie=a("strong"),OFo=o("unispeech-sat"),VFo=o(" \u2014 "),$q=a("a"),XFo=o("UniSpeechSatModel"),zFo=o(" (UniSpeechSat model)"),WFo=l(),z_=a("li"),Iie=a("strong"),QFo=o("van"),HFo=o(" \u2014 "),kq=a("a"),UFo=o("VanModel"),JFo=o(" (VAN model)"),YFo=l(),W_=a("li"),Nie=a("strong"),KFo=o("vilt"),ZFo=o(" \u2014 "),Sq=a("a"),eTo=o("ViltModel"),oTo=o(" (ViLT model)"),rTo=l(),Q_=a("li"),qie=a("strong"),tTo=o("vision-text-dual-encoder"),aTo=o(" \u2014 "),Rq=a("a"),nTo=o("VisionTextDualEncoderModel"),sTo=o(" (VisionTextDualEncoder model)"),lTo=l(),H_=a("li"),jie=a("strong"),iTo=o("visual_bert"),dTo=o(" \u2014 "),Pq=a("a"),cTo=o("VisualBertModel"),fTo=o(" (VisualBERT model)"),mTo=l(),U_=a("li"),Die=a("strong"),gTo=o("vit"),hTo=o(" \u2014 "),Bq=a("a"),pTo=o("ViTModel"),_To=o(" (ViT model)"),uTo=l(),J_=a("li"),Gie=a("strong"),bTo=o("vit_mae"),vTo=o(" \u2014 "),Iq=a("a"),FTo=o("ViTMAEModel"),TTo=o(" (ViTMAE model)"),MTo=l(),Y_=a("li"),Oie=a("strong"),ETo=o("wav2vec2"),CTo=o(" \u2014 "),Nq=a("a"),wTo=o("Wav2Vec2Model"),ATo=o(" (Wav2Vec2 model)"),LTo=l(),K_=a("li"),Vie=a("strong"),yTo=o("wav2vec2-conformer"),xTo=o(" \u2014 "),qq=a("a"),$To=o("Wav2Vec2ConformerModel"),kTo=o(" (Wav2Vec2-Conformer model)"),STo=l(),Z_=a("li"),Xie=a("strong"),RTo=o("wavlm"),PTo=o(" \u2014 "),jq=a("a"),BTo=o("WavLMModel"),ITo=o(" (WavLM model)"),NTo=l(),eu=a("li"),zie=a("strong"),qTo=o("xglm"),jTo=o(" \u2014 "),Dq=a("a"),DTo=o("XGLMModel"),GTo=o(" (XGLM model)"),OTo=l(),ou=a("li"),Wie=a("strong"),VTo=o("xlm"),XTo=o(" \u2014 "),Gq=a("a"),zTo=o("XLMModel"),WTo=o(" (XLM model)"),QTo=l(),ru=a("li"),Qie=a("strong"),HTo=o("xlm-prophetnet"),UTo=o(" \u2014 "),Oq=a("a"),JTo=o("XLMProphetNetModel"),YTo=o(" (XLM-ProphetNet model)"),KTo=l(),tu=a("li"),Hie=a("strong"),ZTo=o("xlm-roberta"),eMo=o(" \u2014 "),Vq=a("a"),oMo=o("XLMRobertaModel"),rMo=o(" (XLM-RoBERTa model)"),tMo=l(),au=a("li"),Uie=a("strong"),aMo=o("xlm-roberta-xl"),nMo=o(" \u2014 "),Xq=a("a"),sMo=o("XLMRobertaXLModel"),lMo=o(" (XLM-RoBERTa-XL model)"),iMo=l(),nu=a("li"),Jie=a("strong"),dMo=o("xlnet"),cMo=o(" \u2014 "),zq=a("a"),fMo=o("XLNetModel"),mMo=o(" (XLNet model)"),gMo=l(),su=a("li"),Yie=a("strong"),hMo=o("yolos"),pMo=o(" \u2014 "),Wq=a("a"),_Mo=o("YolosModel"),uMo=o(" (YOLOS model)"),bMo=l(),lu=a("li"),Kie=a("strong"),vMo=o("yoso"),FMo=o(" \u2014 "),Qq=a("a"),TMo=o("YosoModel"),MMo=o(" (YOSO model)"),EMo=l(),iu=a("p"),CMo=o("The model is set in evaluation mode by default using "),Zie=a("code"),wMo=o("model.eval()"),AMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=a("code"),LMo=o("model.train()"),yMo=l(),F(du.$$.fragment),_je=l(),xi=a("h2"),cu=a("a"),ode=a("span"),F(bL.$$.fragment),xMo=l(),rde=a("span"),$Mo=o("AutoModelForPreTraining"),uje=l(),xo=a("div"),F(vL.$$.fragment),kMo=l(),$i=a("p"),SMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hq=a("a"),RMo=o("from_pretrained()"),PMo=o(" class method or the "),Uq=a("a"),BMo=o("from_config()"),IMo=o(` class
method.`),NMo=l(),FL=a("p"),qMo=o("This class cannot be instantiated directly using "),tde=a("code"),jMo=o("__init__()"),DMo=o(" (throws an error)."),GMo=l(),at=a("div"),F(TL.$$.fragment),OMo=l(),ade=a("p"),VMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XMo=l(),ki=a("p"),zMo=o(`Note:
Loading a model from its configuration file does `),nde=a("strong"),WMo=o("not"),QMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=a("a"),HMo=o("from_pretrained()"),UMo=o(" to load the model weights."),JMo=l(),F(fu.$$.fragment),YMo=l(),Ye=a("div"),F(ML.$$.fragment),KMo=l(),sde=a("p"),ZMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eEo=l(),xa=a("p"),oEo=o("The model class to instantiate is selected based on the "),lde=a("code"),rEo=o("model_type"),tEo=o(` property of the config object (either
passed as an argument or loaded from `),ide=a("code"),aEo=o("pretrained_model_name_or_path"),nEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=a("code"),sEo=o("pretrained_model_name_or_path"),lEo=o(":"),iEo=l(),G=a("ul"),mu=a("li"),cde=a("strong"),dEo=o("albert"),cEo=o(" \u2014 "),Yq=a("a"),fEo=o("AlbertForPreTraining"),mEo=o(" (ALBERT model)"),gEo=l(),gu=a("li"),fde=a("strong"),hEo=o("bart"),pEo=o(" \u2014 "),Kq=a("a"),_Eo=o("BartForConditionalGeneration"),uEo=o(" (BART model)"),bEo=l(),hu=a("li"),mde=a("strong"),vEo=o("bert"),FEo=o(" \u2014 "),Zq=a("a"),TEo=o("BertForPreTraining"),MEo=o(" (BERT model)"),EEo=l(),pu=a("li"),gde=a("strong"),CEo=o("big_bird"),wEo=o(" \u2014 "),ej=a("a"),AEo=o("BigBirdForPreTraining"),LEo=o(" (BigBird model)"),yEo=l(),_u=a("li"),hde=a("strong"),xEo=o("bloom"),$Eo=o(" \u2014 "),oj=a("a"),kEo=o("BloomForCausalLM"),SEo=o(" (BLOOM model)"),REo=l(),uu=a("li"),pde=a("strong"),PEo=o("camembert"),BEo=o(" \u2014 "),rj=a("a"),IEo=o("CamembertForMaskedLM"),NEo=o(" (CamemBERT model)"),qEo=l(),bu=a("li"),_de=a("strong"),jEo=o("ctrl"),DEo=o(" \u2014 "),tj=a("a"),GEo=o("CTRLLMHeadModel"),OEo=o(" (CTRL model)"),VEo=l(),vu=a("li"),ude=a("strong"),XEo=o("data2vec-text"),zEo=o(" \u2014 "),aj=a("a"),WEo=o("Data2VecTextForMaskedLM"),QEo=o(" (Data2VecText model)"),HEo=l(),Fu=a("li"),bde=a("strong"),UEo=o("deberta"),JEo=o(" \u2014 "),nj=a("a"),YEo=o("DebertaForMaskedLM"),KEo=o(" (DeBERTa model)"),ZEo=l(),Tu=a("li"),vde=a("strong"),eCo=o("deberta-v2"),oCo=o(" \u2014 "),sj=a("a"),rCo=o("DebertaV2ForMaskedLM"),tCo=o(" (DeBERTa-v2 model)"),aCo=l(),Mu=a("li"),Fde=a("strong"),nCo=o("distilbert"),sCo=o(" \u2014 "),lj=a("a"),lCo=o("DistilBertForMaskedLM"),iCo=o(" (DistilBERT model)"),dCo=l(),Eu=a("li"),Tde=a("strong"),cCo=o("electra"),fCo=o(" \u2014 "),ij=a("a"),mCo=o("ElectraForPreTraining"),gCo=o(" (ELECTRA model)"),hCo=l(),Cu=a("li"),Mde=a("strong"),pCo=o("flaubert"),_Co=o(" \u2014 "),dj=a("a"),uCo=o("FlaubertWithLMHeadModel"),bCo=o(" (FlauBERT model)"),vCo=l(),wu=a("li"),Ede=a("strong"),FCo=o("flava"),TCo=o(" \u2014 "),cj=a("a"),MCo=o("FlavaForPreTraining"),ECo=o(" (FLAVA model)"),CCo=l(),Au=a("li"),Cde=a("strong"),wCo=o("fnet"),ACo=o(" \u2014 "),fj=a("a"),LCo=o("FNetForPreTraining"),yCo=o(" (FNet model)"),xCo=l(),Lu=a("li"),wde=a("strong"),$Co=o("fsmt"),kCo=o(" \u2014 "),mj=a("a"),SCo=o("FSMTForConditionalGeneration"),RCo=o(" (FairSeq Machine-Translation model)"),PCo=l(),yu=a("li"),Ade=a("strong"),BCo=o("funnel"),ICo=o(" \u2014 "),gj=a("a"),NCo=o("FunnelForPreTraining"),qCo=o(" (Funnel Transformer model)"),jCo=l(),xu=a("li"),Lde=a("strong"),DCo=o("gpt2"),GCo=o(" \u2014 "),hj=a("a"),OCo=o("GPT2LMHeadModel"),VCo=o(" (OpenAI GPT-2 model)"),XCo=l(),$u=a("li"),yde=a("strong"),zCo=o("ibert"),WCo=o(" \u2014 "),pj=a("a"),QCo=o("IBertForMaskedLM"),HCo=o(" (I-BERT model)"),UCo=l(),ku=a("li"),xde=a("strong"),JCo=o("layoutlm"),YCo=o(" \u2014 "),_j=a("a"),KCo=o("LayoutLMForMaskedLM"),ZCo=o(" (LayoutLM model)"),e5o=l(),Su=a("li"),$de=a("strong"),o5o=o("longformer"),r5o=o(" \u2014 "),uj=a("a"),t5o=o("LongformerForMaskedLM"),a5o=o(" (Longformer model)"),n5o=l(),Ru=a("li"),kde=a("strong"),s5o=o("lxmert"),l5o=o(" \u2014 "),bj=a("a"),i5o=o("LxmertForPreTraining"),d5o=o(" (LXMERT model)"),c5o=l(),Pu=a("li"),Sde=a("strong"),f5o=o("megatron-bert"),m5o=o(" \u2014 "),vj=a("a"),g5o=o("MegatronBertForPreTraining"),h5o=o(" (Megatron-BERT model)"),p5o=l(),Bu=a("li"),Rde=a("strong"),_5o=o("mobilebert"),u5o=o(" \u2014 "),Fj=a("a"),b5o=o("MobileBertForPreTraining"),v5o=o(" (MobileBERT model)"),F5o=l(),Iu=a("li"),Pde=a("strong"),T5o=o("mpnet"),M5o=o(" \u2014 "),Tj=a("a"),E5o=o("MPNetForMaskedLM"),C5o=o(" (MPNet model)"),w5o=l(),Nu=a("li"),Bde=a("strong"),A5o=o("openai-gpt"),L5o=o(" \u2014 "),Mj=a("a"),y5o=o("OpenAIGPTLMHeadModel"),x5o=o(" (OpenAI GPT model)"),$5o=l(),qu=a("li"),Ide=a("strong"),k5o=o("retribert"),S5o=o(" \u2014 "),Ej=a("a"),R5o=o("RetriBertModel"),P5o=o(" (RetriBERT model)"),B5o=l(),ju=a("li"),Nde=a("strong"),I5o=o("roberta"),N5o=o(" \u2014 "),Cj=a("a"),q5o=o("RobertaForMaskedLM"),j5o=o(" (RoBERTa model)"),D5o=l(),Du=a("li"),qde=a("strong"),G5o=o("splinter"),O5o=o(" \u2014 "),wj=a("a"),V5o=o("SplinterForPreTraining"),X5o=o(" (Splinter model)"),z5o=l(),Gu=a("li"),jde=a("strong"),W5o=o("squeezebert"),Q5o=o(" \u2014 "),Aj=a("a"),H5o=o("SqueezeBertForMaskedLM"),U5o=o(" (SqueezeBERT model)"),J5o=l(),Ou=a("li"),Dde=a("strong"),Y5o=o("t5"),K5o=o(" \u2014 "),Lj=a("a"),Z5o=o("T5ForConditionalGeneration"),e3o=o(" (T5 model)"),o3o=l(),Vu=a("li"),Gde=a("strong"),r3o=o("tapas"),t3o=o(" \u2014 "),yj=a("a"),a3o=o("TapasForMaskedLM"),n3o=o(" (TAPAS model)"),s3o=l(),Xu=a("li"),Ode=a("strong"),l3o=o("transfo-xl"),i3o=o(" \u2014 "),xj=a("a"),d3o=o("TransfoXLLMHeadModel"),c3o=o(" (Transformer-XL model)"),f3o=l(),zu=a("li"),Vde=a("strong"),m3o=o("unispeech"),g3o=o(" \u2014 "),$j=a("a"),h3o=o("UniSpeechForPreTraining"),p3o=o(" (UniSpeech model)"),_3o=l(),Wu=a("li"),Xde=a("strong"),u3o=o("unispeech-sat"),b3o=o(" \u2014 "),kj=a("a"),v3o=o("UniSpeechSatForPreTraining"),F3o=o(" (UniSpeechSat model)"),T3o=l(),Qu=a("li"),zde=a("strong"),M3o=o("visual_bert"),E3o=o(" \u2014 "),Sj=a("a"),C3o=o("VisualBertForPreTraining"),w3o=o(" (VisualBERT model)"),A3o=l(),Hu=a("li"),Wde=a("strong"),L3o=o("vit_mae"),y3o=o(" \u2014 "),Rj=a("a"),x3o=o("ViTMAEForPreTraining"),$3o=o(" (ViTMAE model)"),k3o=l(),Uu=a("li"),Qde=a("strong"),S3o=o("wav2vec2"),R3o=o(" \u2014 "),Pj=a("a"),P3o=o("Wav2Vec2ForPreTraining"),B3o=o(" (Wav2Vec2 model)"),I3o=l(),Ju=a("li"),Hde=a("strong"),N3o=o("wav2vec2-conformer"),q3o=o(" \u2014 "),Bj=a("a"),j3o=o("Wav2Vec2ConformerForPreTraining"),D3o=o(" (Wav2Vec2-Conformer model)"),G3o=l(),Yu=a("li"),Ude=a("strong"),O3o=o("xlm"),V3o=o(" \u2014 "),Ij=a("a"),X3o=o("XLMWithLMHeadModel"),z3o=o(" (XLM model)"),W3o=l(),Ku=a("li"),Jde=a("strong"),Q3o=o("xlm-roberta"),H3o=o(" \u2014 "),Nj=a("a"),U3o=o("XLMRobertaForMaskedLM"),J3o=o(" (XLM-RoBERTa model)"),Y3o=l(),Zu=a("li"),Yde=a("strong"),K3o=o("xlm-roberta-xl"),Z3o=o(" \u2014 "),qj=a("a"),e0o=o("XLMRobertaXLForMaskedLM"),o0o=o(" (XLM-RoBERTa-XL model)"),r0o=l(),e4=a("li"),Kde=a("strong"),t0o=o("xlnet"),a0o=o(" \u2014 "),jj=a("a"),n0o=o("XLNetLMHeadModel"),s0o=o(" (XLNet model)"),l0o=l(),o4=a("p"),i0o=o("The model is set in evaluation mode by default using "),Zde=a("code"),d0o=o("model.eval()"),c0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),f0o=o("model.train()"),m0o=l(),F(r4.$$.fragment),bje=l(),Si=a("h2"),t4=a("a"),oce=a("span"),F(EL.$$.fragment),g0o=l(),rce=a("span"),h0o=o("AutoModelForCausalLM"),vje=l(),$o=a("div"),F(CL.$$.fragment),p0o=l(),Ri=a("p"),_0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dj=a("a"),u0o=o("from_pretrained()"),b0o=o(" class method or the "),Gj=a("a"),v0o=o("from_config()"),F0o=o(` class
method.`),T0o=l(),wL=a("p"),M0o=o("This class cannot be instantiated directly using "),tce=a("code"),E0o=o("__init__()"),C0o=o(" (throws an error)."),w0o=l(),nt=a("div"),F(AL.$$.fragment),A0o=l(),ace=a("p"),L0o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y0o=l(),Pi=a("p"),x0o=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),$0o=o("not"),k0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=a("a"),S0o=o("from_pretrained()"),R0o=o(" to load the model weights."),P0o=l(),F(a4.$$.fragment),B0o=l(),Ke=a("div"),F(LL.$$.fragment),I0o=l(),sce=a("p"),N0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),q0o=l(),$a=a("p"),j0o=o("The model class to instantiate is selected based on the "),lce=a("code"),D0o=o("model_type"),G0o=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),O0o=o("pretrained_model_name_or_path"),V0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),X0o=o("pretrained_model_name_or_path"),z0o=o(":"),W0o=l(),z=a("ul"),n4=a("li"),cce=a("strong"),Q0o=o("bart"),H0o=o(" \u2014 "),Vj=a("a"),U0o=o("BartForCausalLM"),J0o=o(" (BART model)"),Y0o=l(),s4=a("li"),fce=a("strong"),K0o=o("bert"),Z0o=o(" \u2014 "),Xj=a("a"),ewo=o("BertLMHeadModel"),owo=o(" (BERT model)"),rwo=l(),l4=a("li"),mce=a("strong"),two=o("bert-generation"),awo=o(" \u2014 "),zj=a("a"),nwo=o("BertGenerationDecoder"),swo=o(" (Bert Generation model)"),lwo=l(),i4=a("li"),gce=a("strong"),iwo=o("big_bird"),dwo=o(" \u2014 "),Wj=a("a"),cwo=o("BigBirdForCausalLM"),fwo=o(" (BigBird model)"),mwo=l(),d4=a("li"),hce=a("strong"),gwo=o("bigbird_pegasus"),hwo=o(" \u2014 "),Qj=a("a"),pwo=o("BigBirdPegasusForCausalLM"),_wo=o(" (BigBird-Pegasus model)"),uwo=l(),c4=a("li"),pce=a("strong"),bwo=o("blenderbot"),vwo=o(" \u2014 "),Hj=a("a"),Fwo=o("BlenderbotForCausalLM"),Two=o(" (Blenderbot model)"),Mwo=l(),f4=a("li"),_ce=a("strong"),Ewo=o("blenderbot-small"),Cwo=o(" \u2014 "),Uj=a("a"),wwo=o("BlenderbotSmallForCausalLM"),Awo=o(" (BlenderbotSmall model)"),Lwo=l(),m4=a("li"),uce=a("strong"),ywo=o("bloom"),xwo=o(" \u2014 "),Jj=a("a"),$wo=o("BloomForCausalLM"),kwo=o(" (BLOOM model)"),Swo=l(),g4=a("li"),bce=a("strong"),Rwo=o("camembert"),Pwo=o(" \u2014 "),Yj=a("a"),Bwo=o("CamembertForCausalLM"),Iwo=o(" (CamemBERT model)"),Nwo=l(),h4=a("li"),vce=a("strong"),qwo=o("ctrl"),jwo=o(" \u2014 "),Kj=a("a"),Dwo=o("CTRLLMHeadModel"),Gwo=o(" (CTRL model)"),Owo=l(),p4=a("li"),Fce=a("strong"),Vwo=o("data2vec-text"),Xwo=o(" \u2014 "),Zj=a("a"),zwo=o("Data2VecTextForCausalLM"),Wwo=o(" (Data2VecText model)"),Qwo=l(),_4=a("li"),Tce=a("strong"),Hwo=o("electra"),Uwo=o(" \u2014 "),eD=a("a"),Jwo=o("ElectraForCausalLM"),Ywo=o(" (ELECTRA model)"),Kwo=l(),u4=a("li"),Mce=a("strong"),Zwo=o("gpt2"),eAo=o(" \u2014 "),oD=a("a"),oAo=o("GPT2LMHeadModel"),rAo=o(" (OpenAI GPT-2 model)"),tAo=l(),b4=a("li"),Ece=a("strong"),aAo=o("gpt_neo"),nAo=o(" \u2014 "),rD=a("a"),sAo=o("GPTNeoForCausalLM"),lAo=o(" (GPT Neo model)"),iAo=l(),v4=a("li"),Cce=a("strong"),dAo=o("gpt_neox"),cAo=o(" \u2014 "),tD=a("a"),fAo=o("GPTNeoXForCausalLM"),mAo=o(" (GPT NeoX model)"),gAo=l(),F4=a("li"),wce=a("strong"),hAo=o("gptj"),pAo=o(" \u2014 "),aD=a("a"),_Ao=o("GPTJForCausalLM"),uAo=o(" (GPT-J model)"),bAo=l(),T4=a("li"),Ace=a("strong"),vAo=o("marian"),FAo=o(" \u2014 "),nD=a("a"),TAo=o("MarianForCausalLM"),MAo=o(" (Marian model)"),EAo=l(),M4=a("li"),Lce=a("strong"),CAo=o("mbart"),wAo=o(" \u2014 "),sD=a("a"),AAo=o("MBartForCausalLM"),LAo=o(" (mBART model)"),yAo=l(),E4=a("li"),yce=a("strong"),xAo=o("megatron-bert"),$Ao=o(" \u2014 "),lD=a("a"),kAo=o("MegatronBertForCausalLM"),SAo=o(" (Megatron-BERT model)"),RAo=l(),C4=a("li"),xce=a("strong"),PAo=o("openai-gpt"),BAo=o(" \u2014 "),iD=a("a"),IAo=o("OpenAIGPTLMHeadModel"),NAo=o(" (OpenAI GPT model)"),qAo=l(),w4=a("li"),$ce=a("strong"),jAo=o("opt"),DAo=o(" \u2014 "),dD=a("a"),GAo=o("OPTForCausalLM"),OAo=o(" (OPT model)"),VAo=l(),A4=a("li"),kce=a("strong"),XAo=o("pegasus"),zAo=o(" \u2014 "),cD=a("a"),WAo=o("PegasusForCausalLM"),QAo=o(" (Pegasus model)"),HAo=l(),L4=a("li"),Sce=a("strong"),UAo=o("plbart"),JAo=o(" \u2014 "),fD=a("a"),YAo=o("PLBartForCausalLM"),KAo=o(" (PLBart model)"),ZAo=l(),y4=a("li"),Rce=a("strong"),e6o=o("prophetnet"),o6o=o(" \u2014 "),mD=a("a"),r6o=o("ProphetNetForCausalLM"),t6o=o(" (ProphetNet model)"),a6o=l(),x4=a("li"),Pce=a("strong"),n6o=o("qdqbert"),s6o=o(" \u2014 "),gD=a("a"),l6o=o("QDQBertLMHeadModel"),i6o=o(" (QDQBert model)"),d6o=l(),$4=a("li"),Bce=a("strong"),c6o=o("reformer"),f6o=o(" \u2014 "),hD=a("a"),m6o=o("ReformerModelWithLMHead"),g6o=o(" (Reformer model)"),h6o=l(),k4=a("li"),Ice=a("strong"),p6o=o("rembert"),_6o=o(" \u2014 "),pD=a("a"),u6o=o("RemBertForCausalLM"),b6o=o(" (RemBERT model)"),v6o=l(),S4=a("li"),Nce=a("strong"),F6o=o("roberta"),T6o=o(" \u2014 "),_D=a("a"),M6o=o("RobertaForCausalLM"),E6o=o(" (RoBERTa model)"),C6o=l(),R4=a("li"),qce=a("strong"),w6o=o("roformer"),A6o=o(" \u2014 "),uD=a("a"),L6o=o("RoFormerForCausalLM"),y6o=o(" (RoFormer model)"),x6o=l(),P4=a("li"),jce=a("strong"),$6o=o("speech_to_text_2"),k6o=o(" \u2014 "),bD=a("a"),S6o=o("Speech2Text2ForCausalLM"),R6o=o(" (Speech2Text2 model)"),P6o=l(),B4=a("li"),Dce=a("strong"),B6o=o("transfo-xl"),I6o=o(" \u2014 "),vD=a("a"),N6o=o("TransfoXLLMHeadModel"),q6o=o(" (Transformer-XL model)"),j6o=l(),I4=a("li"),Gce=a("strong"),D6o=o("trocr"),G6o=o(" \u2014 "),FD=a("a"),O6o=o("TrOCRForCausalLM"),V6o=o(" (TrOCR model)"),X6o=l(),N4=a("li"),Oce=a("strong"),z6o=o("xglm"),W6o=o(" \u2014 "),TD=a("a"),Q6o=o("XGLMForCausalLM"),H6o=o(" (XGLM model)"),U6o=l(),q4=a("li"),Vce=a("strong"),J6o=o("xlm"),Y6o=o(" \u2014 "),MD=a("a"),K6o=o("XLMWithLMHeadModel"),Z6o=o(" (XLM model)"),eLo=l(),j4=a("li"),Xce=a("strong"),oLo=o("xlm-prophetnet"),rLo=o(" \u2014 "),ED=a("a"),tLo=o("XLMProphetNetForCausalLM"),aLo=o(" (XLM-ProphetNet model)"),nLo=l(),D4=a("li"),zce=a("strong"),sLo=o("xlm-roberta"),lLo=o(" \u2014 "),CD=a("a"),iLo=o("XLMRobertaForCausalLM"),dLo=o(" (XLM-RoBERTa model)"),cLo=l(),G4=a("li"),Wce=a("strong"),fLo=o("xlm-roberta-xl"),mLo=o(" \u2014 "),wD=a("a"),gLo=o("XLMRobertaXLForCausalLM"),hLo=o(" (XLM-RoBERTa-XL model)"),pLo=l(),O4=a("li"),Qce=a("strong"),_Lo=o("xlnet"),uLo=o(" \u2014 "),AD=a("a"),bLo=o("XLNetLMHeadModel"),vLo=o(" (XLNet model)"),FLo=l(),V4=a("p"),TLo=o("The model is set in evaluation mode by default using "),Hce=a("code"),MLo=o("model.eval()"),ELo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=a("code"),CLo=o("model.train()"),wLo=l(),F(X4.$$.fragment),Fje=l(),Bi=a("h2"),z4=a("a"),Jce=a("span"),F(yL.$$.fragment),ALo=l(),Yce=a("span"),LLo=o("AutoModelForMaskedLM"),Tje=l(),ko=a("div"),F(xL.$$.fragment),yLo=l(),Ii=a("p"),xLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LD=a("a"),$Lo=o("from_pretrained()"),kLo=o(" class method or the "),yD=a("a"),SLo=o("from_config()"),RLo=o(` class
method.`),PLo=l(),$L=a("p"),BLo=o("This class cannot be instantiated directly using "),Kce=a("code"),ILo=o("__init__()"),NLo=o(" (throws an error)."),qLo=l(),st=a("div"),F(kL.$$.fragment),jLo=l(),Zce=a("p"),DLo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GLo=l(),Ni=a("p"),OLo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),VLo=o("not"),XLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=a("a"),zLo=o("from_pretrained()"),WLo=o(" to load the model weights."),QLo=l(),F(W4.$$.fragment),HLo=l(),Ze=a("div"),F(SL.$$.fragment),ULo=l(),ofe=a("p"),JLo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YLo=l(),ka=a("p"),KLo=o("The model class to instantiate is selected based on the "),rfe=a("code"),ZLo=o("model_type"),eyo=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),oyo=o("pretrained_model_name_or_path"),ryo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),tyo=o("pretrained_model_name_or_path"),ayo=o(":"),nyo=l(),Q=a("ul"),Q4=a("li"),nfe=a("strong"),syo=o("albert"),lyo=o(" \u2014 "),$D=a("a"),iyo=o("AlbertForMaskedLM"),dyo=o(" (ALBERT model)"),cyo=l(),H4=a("li"),sfe=a("strong"),fyo=o("bart"),myo=o(" \u2014 "),kD=a("a"),gyo=o("BartForConditionalGeneration"),hyo=o(" (BART model)"),pyo=l(),U4=a("li"),lfe=a("strong"),_yo=o("bert"),uyo=o(" \u2014 "),SD=a("a"),byo=o("BertForMaskedLM"),vyo=o(" (BERT model)"),Fyo=l(),J4=a("li"),ife=a("strong"),Tyo=o("big_bird"),Myo=o(" \u2014 "),RD=a("a"),Eyo=o("BigBirdForMaskedLM"),Cyo=o(" (BigBird model)"),wyo=l(),Y4=a("li"),dfe=a("strong"),Ayo=o("camembert"),Lyo=o(" \u2014 "),PD=a("a"),yyo=o("CamembertForMaskedLM"),xyo=o(" (CamemBERT model)"),$yo=l(),K4=a("li"),cfe=a("strong"),kyo=o("convbert"),Syo=o(" \u2014 "),BD=a("a"),Ryo=o("ConvBertForMaskedLM"),Pyo=o(" (ConvBERT model)"),Byo=l(),Z4=a("li"),ffe=a("strong"),Iyo=o("data2vec-text"),Nyo=o(" \u2014 "),ID=a("a"),qyo=o("Data2VecTextForMaskedLM"),jyo=o(" (Data2VecText model)"),Dyo=l(),e1=a("li"),mfe=a("strong"),Gyo=o("deberta"),Oyo=o(" \u2014 "),ND=a("a"),Vyo=o("DebertaForMaskedLM"),Xyo=o(" (DeBERTa model)"),zyo=l(),o1=a("li"),gfe=a("strong"),Wyo=o("deberta-v2"),Qyo=o(" \u2014 "),qD=a("a"),Hyo=o("DebertaV2ForMaskedLM"),Uyo=o(" (DeBERTa-v2 model)"),Jyo=l(),r1=a("li"),hfe=a("strong"),Yyo=o("distilbert"),Kyo=o(" \u2014 "),jD=a("a"),Zyo=o("DistilBertForMaskedLM"),e8o=o(" (DistilBERT model)"),o8o=l(),t1=a("li"),pfe=a("strong"),r8o=o("electra"),t8o=o(" \u2014 "),DD=a("a"),a8o=o("ElectraForMaskedLM"),n8o=o(" (ELECTRA model)"),s8o=l(),a1=a("li"),_fe=a("strong"),l8o=o("flaubert"),i8o=o(" \u2014 "),GD=a("a"),d8o=o("FlaubertWithLMHeadModel"),c8o=o(" (FlauBERT model)"),f8o=l(),n1=a("li"),ufe=a("strong"),m8o=o("fnet"),g8o=o(" \u2014 "),OD=a("a"),h8o=o("FNetForMaskedLM"),p8o=o(" (FNet model)"),_8o=l(),s1=a("li"),bfe=a("strong"),u8o=o("funnel"),b8o=o(" \u2014 "),VD=a("a"),v8o=o("FunnelForMaskedLM"),F8o=o(" (Funnel Transformer model)"),T8o=l(),l1=a("li"),vfe=a("strong"),M8o=o("ibert"),E8o=o(" \u2014 "),XD=a("a"),C8o=o("IBertForMaskedLM"),w8o=o(" (I-BERT model)"),A8o=l(),i1=a("li"),Ffe=a("strong"),L8o=o("layoutlm"),y8o=o(" \u2014 "),zD=a("a"),x8o=o("LayoutLMForMaskedLM"),$8o=o(" (LayoutLM model)"),k8o=l(),d1=a("li"),Tfe=a("strong"),S8o=o("longformer"),R8o=o(" \u2014 "),WD=a("a"),P8o=o("LongformerForMaskedLM"),B8o=o(" (Longformer model)"),I8o=l(),c1=a("li"),Mfe=a("strong"),N8o=o("luke"),q8o=o(" \u2014 "),QD=a("a"),j8o=o("LukeForMaskedLM"),D8o=o(" (LUKE model)"),G8o=l(),f1=a("li"),Efe=a("strong"),O8o=o("mbart"),V8o=o(" \u2014 "),HD=a("a"),X8o=o("MBartForConditionalGeneration"),z8o=o(" (mBART model)"),W8o=l(),m1=a("li"),Cfe=a("strong"),Q8o=o("megatron-bert"),H8o=o(" \u2014 "),UD=a("a"),U8o=o("MegatronBertForMaskedLM"),J8o=o(" (Megatron-BERT model)"),Y8o=l(),g1=a("li"),wfe=a("strong"),K8o=o("mobilebert"),Z8o=o(" \u2014 "),JD=a("a"),e9o=o("MobileBertForMaskedLM"),o9o=o(" (MobileBERT model)"),r9o=l(),h1=a("li"),Afe=a("strong"),t9o=o("mpnet"),a9o=o(" \u2014 "),YD=a("a"),n9o=o("MPNetForMaskedLM"),s9o=o(" (MPNet model)"),l9o=l(),p1=a("li"),Lfe=a("strong"),i9o=o("nystromformer"),d9o=o(" \u2014 "),KD=a("a"),c9o=o("NystromformerForMaskedLM"),f9o=o(" (Nystr\xF6mformer model)"),m9o=l(),_1=a("li"),yfe=a("strong"),g9o=o("perceiver"),h9o=o(" \u2014 "),ZD=a("a"),p9o=o("PerceiverForMaskedLM"),_9o=o(" (Perceiver model)"),u9o=l(),u1=a("li"),xfe=a("strong"),b9o=o("qdqbert"),v9o=o(" \u2014 "),eG=a("a"),F9o=o("QDQBertForMaskedLM"),T9o=o(" (QDQBert model)"),M9o=l(),b1=a("li"),$fe=a("strong"),E9o=o("reformer"),C9o=o(" \u2014 "),oG=a("a"),w9o=o("ReformerForMaskedLM"),A9o=o(" (Reformer model)"),L9o=l(),v1=a("li"),kfe=a("strong"),y9o=o("rembert"),x9o=o(" \u2014 "),rG=a("a"),$9o=o("RemBertForMaskedLM"),k9o=o(" (RemBERT model)"),S9o=l(),F1=a("li"),Sfe=a("strong"),R9o=o("roberta"),P9o=o(" \u2014 "),tG=a("a"),B9o=o("RobertaForMaskedLM"),I9o=o(" (RoBERTa model)"),N9o=l(),T1=a("li"),Rfe=a("strong"),q9o=o("roformer"),j9o=o(" \u2014 "),aG=a("a"),D9o=o("RoFormerForMaskedLM"),G9o=o(" (RoFormer model)"),O9o=l(),M1=a("li"),Pfe=a("strong"),V9o=o("squeezebert"),X9o=o(" \u2014 "),nG=a("a"),z9o=o("SqueezeBertForMaskedLM"),W9o=o(" (SqueezeBERT model)"),Q9o=l(),E1=a("li"),Bfe=a("strong"),H9o=o("tapas"),U9o=o(" \u2014 "),sG=a("a"),J9o=o("TapasForMaskedLM"),Y9o=o(" (TAPAS model)"),K9o=l(),C1=a("li"),Ife=a("strong"),Z9o=o("wav2vec2"),exo=o(" \u2014 "),Nfe=a("code"),oxo=o("Wav2Vec2ForMaskedLM"),rxo=o(" (Wav2Vec2 model)"),txo=l(),w1=a("li"),qfe=a("strong"),axo=o("xlm"),nxo=o(" \u2014 "),lG=a("a"),sxo=o("XLMWithLMHeadModel"),lxo=o(" (XLM model)"),ixo=l(),A1=a("li"),jfe=a("strong"),dxo=o("xlm-roberta"),cxo=o(" \u2014 "),iG=a("a"),fxo=o("XLMRobertaForMaskedLM"),mxo=o(" (XLM-RoBERTa model)"),gxo=l(),L1=a("li"),Dfe=a("strong"),hxo=o("xlm-roberta-xl"),pxo=o(" \u2014 "),dG=a("a"),_xo=o("XLMRobertaXLForMaskedLM"),uxo=o(" (XLM-RoBERTa-XL model)"),bxo=l(),y1=a("li"),Gfe=a("strong"),vxo=o("yoso"),Fxo=o(" \u2014 "),cG=a("a"),Txo=o("YosoForMaskedLM"),Mxo=o(" (YOSO model)"),Exo=l(),x1=a("p"),Cxo=o("The model is set in evaluation mode by default using "),Ofe=a("code"),wxo=o("model.eval()"),Axo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=a("code"),Lxo=o("model.train()"),yxo=l(),F($1.$$.fragment),Mje=l(),qi=a("h2"),k1=a("a"),Xfe=a("span"),F(RL.$$.fragment),xxo=l(),zfe=a("span"),$xo=o("AutoModelForSeq2SeqLM"),Eje=l(),So=a("div"),F(PL.$$.fragment),kxo=l(),ji=a("p"),Sxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fG=a("a"),Rxo=o("from_pretrained()"),Pxo=o(" class method or the "),mG=a("a"),Bxo=o("from_config()"),Ixo=o(` class
method.`),Nxo=l(),BL=a("p"),qxo=o("This class cannot be instantiated directly using "),Wfe=a("code"),jxo=o("__init__()"),Dxo=o(" (throws an error)."),Gxo=l(),lt=a("div"),F(IL.$$.fragment),Oxo=l(),Qfe=a("p"),Vxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xxo=l(),Di=a("p"),zxo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),Wxo=o("not"),Qxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),Hxo=o("from_pretrained()"),Uxo=o(" to load the model weights."),Jxo=l(),F(S1.$$.fragment),Yxo=l(),eo=a("div"),F(NL.$$.fragment),Kxo=l(),Ufe=a("p"),Zxo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e$o=l(),Sa=a("p"),o$o=o("The model class to instantiate is selected based on the "),Jfe=a("code"),r$o=o("model_type"),t$o=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),a$o=o("pretrained_model_name_or_path"),n$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),s$o=o("pretrained_model_name_or_path"),l$o=o(":"),i$o=l(),_e=a("ul"),R1=a("li"),Zfe=a("strong"),d$o=o("bart"),c$o=o(" \u2014 "),hG=a("a"),f$o=o("BartForConditionalGeneration"),m$o=o(" (BART model)"),g$o=l(),P1=a("li"),eme=a("strong"),h$o=o("bigbird_pegasus"),p$o=o(" \u2014 "),pG=a("a"),_$o=o("BigBirdPegasusForConditionalGeneration"),u$o=o(" (BigBird-Pegasus model)"),b$o=l(),B1=a("li"),ome=a("strong"),v$o=o("blenderbot"),F$o=o(" \u2014 "),_G=a("a"),T$o=o("BlenderbotForConditionalGeneration"),M$o=o(" (Blenderbot model)"),E$o=l(),I1=a("li"),rme=a("strong"),C$o=o("blenderbot-small"),w$o=o(" \u2014 "),uG=a("a"),A$o=o("BlenderbotSmallForConditionalGeneration"),L$o=o(" (BlenderbotSmall model)"),y$o=l(),N1=a("li"),tme=a("strong"),x$o=o("encoder-decoder"),$$o=o(" \u2014 "),bG=a("a"),k$o=o("EncoderDecoderModel"),S$o=o(" (Encoder decoder model)"),R$o=l(),q1=a("li"),ame=a("strong"),P$o=o("fsmt"),B$o=o(" \u2014 "),vG=a("a"),I$o=o("FSMTForConditionalGeneration"),N$o=o(" (FairSeq Machine-Translation model)"),q$o=l(),j1=a("li"),nme=a("strong"),j$o=o("led"),D$o=o(" \u2014 "),FG=a("a"),G$o=o("LEDForConditionalGeneration"),O$o=o(" (LED model)"),V$o=l(),D1=a("li"),sme=a("strong"),X$o=o("m2m_100"),z$o=o(" \u2014 "),TG=a("a"),W$o=o("M2M100ForConditionalGeneration"),Q$o=o(" (M2M100 model)"),H$o=l(),G1=a("li"),lme=a("strong"),U$o=o("marian"),J$o=o(" \u2014 "),MG=a("a"),Y$o=o("MarianMTModel"),K$o=o(" (Marian model)"),Z$o=l(),O1=a("li"),ime=a("strong"),eko=o("mbart"),oko=o(" \u2014 "),EG=a("a"),rko=o("MBartForConditionalGeneration"),tko=o(" (mBART model)"),ako=l(),V1=a("li"),dme=a("strong"),nko=o("mt5"),sko=o(" \u2014 "),CG=a("a"),lko=o("MT5ForConditionalGeneration"),iko=o(" (MT5 model)"),dko=l(),X1=a("li"),cme=a("strong"),cko=o("pegasus"),fko=o(" \u2014 "),wG=a("a"),mko=o("PegasusForConditionalGeneration"),gko=o(" (Pegasus model)"),hko=l(),z1=a("li"),fme=a("strong"),pko=o("plbart"),_ko=o(" \u2014 "),AG=a("a"),uko=o("PLBartForConditionalGeneration"),bko=o(" (PLBart model)"),vko=l(),W1=a("li"),mme=a("strong"),Fko=o("prophetnet"),Tko=o(" \u2014 "),LG=a("a"),Mko=o("ProphetNetForConditionalGeneration"),Eko=o(" (ProphetNet model)"),Cko=l(),Q1=a("li"),gme=a("strong"),wko=o("t5"),Ako=o(" \u2014 "),yG=a("a"),Lko=o("T5ForConditionalGeneration"),yko=o(" (T5 model)"),xko=l(),H1=a("li"),hme=a("strong"),$ko=o("xlm-prophetnet"),kko=o(" \u2014 "),xG=a("a"),Sko=o("XLMProphetNetForConditionalGeneration"),Rko=o(" (XLM-ProphetNet model)"),Pko=l(),U1=a("p"),Bko=o("The model is set in evaluation mode by default using "),pme=a("code"),Iko=o("model.eval()"),Nko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),qko=o("model.train()"),jko=l(),F(J1.$$.fragment),Cje=l(),Gi=a("h2"),Y1=a("a"),ume=a("span"),F(qL.$$.fragment),Dko=l(),bme=a("span"),Gko=o("AutoModelForSequenceClassification"),wje=l(),Ro=a("div"),F(jL.$$.fragment),Oko=l(),Oi=a("p"),Vko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$G=a("a"),Xko=o("from_pretrained()"),zko=o(" class method or the "),kG=a("a"),Wko=o("from_config()"),Qko=o(` class
method.`),Hko=l(),DL=a("p"),Uko=o("This class cannot be instantiated directly using "),vme=a("code"),Jko=o("__init__()"),Yko=o(" (throws an error)."),Kko=l(),it=a("div"),F(GL.$$.fragment),Zko=l(),Fme=a("p"),eSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oSo=l(),Vi=a("p"),rSo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),tSo=o("not"),aSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),nSo=o("from_pretrained()"),sSo=o(" to load the model weights."),lSo=l(),F(K1.$$.fragment),iSo=l(),oo=a("div"),F(OL.$$.fragment),dSo=l(),Mme=a("p"),cSo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fSo=l(),Ra=a("p"),mSo=o("The model class to instantiate is selected based on the "),Eme=a("code"),gSo=o("model_type"),hSo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),pSo=o("pretrained_model_name_or_path"),_So=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),uSo=o("pretrained_model_name_or_path"),bSo=o(":"),vSo=l(),N=a("ul"),Z1=a("li"),Ame=a("strong"),FSo=o("albert"),TSo=o(" \u2014 "),RG=a("a"),MSo=o("AlbertForSequenceClassification"),ESo=o(" (ALBERT model)"),CSo=l(),e7=a("li"),Lme=a("strong"),wSo=o("bart"),ASo=o(" \u2014 "),PG=a("a"),LSo=o("BartForSequenceClassification"),ySo=o(" (BART model)"),xSo=l(),o7=a("li"),yme=a("strong"),$So=o("bert"),kSo=o(" \u2014 "),BG=a("a"),SSo=o("BertForSequenceClassification"),RSo=o(" (BERT model)"),PSo=l(),r7=a("li"),xme=a("strong"),BSo=o("big_bird"),ISo=o(" \u2014 "),IG=a("a"),NSo=o("BigBirdForSequenceClassification"),qSo=o(" (BigBird model)"),jSo=l(),t7=a("li"),$me=a("strong"),DSo=o("bigbird_pegasus"),GSo=o(" \u2014 "),NG=a("a"),OSo=o("BigBirdPegasusForSequenceClassification"),VSo=o(" (BigBird-Pegasus model)"),XSo=l(),a7=a("li"),kme=a("strong"),zSo=o("camembert"),WSo=o(" \u2014 "),qG=a("a"),QSo=o("CamembertForSequenceClassification"),HSo=o(" (CamemBERT model)"),USo=l(),n7=a("li"),Sme=a("strong"),JSo=o("canine"),YSo=o(" \u2014 "),jG=a("a"),KSo=o("CanineForSequenceClassification"),ZSo=o(" (CANINE model)"),eRo=l(),s7=a("li"),Rme=a("strong"),oRo=o("convbert"),rRo=o(" \u2014 "),DG=a("a"),tRo=o("ConvBertForSequenceClassification"),aRo=o(" (ConvBERT model)"),nRo=l(),l7=a("li"),Pme=a("strong"),sRo=o("ctrl"),lRo=o(" \u2014 "),GG=a("a"),iRo=o("CTRLForSequenceClassification"),dRo=o(" (CTRL model)"),cRo=l(),i7=a("li"),Bme=a("strong"),fRo=o("data2vec-text"),mRo=o(" \u2014 "),OG=a("a"),gRo=o("Data2VecTextForSequenceClassification"),hRo=o(" (Data2VecText model)"),pRo=l(),d7=a("li"),Ime=a("strong"),_Ro=o("deberta"),uRo=o(" \u2014 "),VG=a("a"),bRo=o("DebertaForSequenceClassification"),vRo=o(" (DeBERTa model)"),FRo=l(),c7=a("li"),Nme=a("strong"),TRo=o("deberta-v2"),MRo=o(" \u2014 "),XG=a("a"),ERo=o("DebertaV2ForSequenceClassification"),CRo=o(" (DeBERTa-v2 model)"),wRo=l(),f7=a("li"),qme=a("strong"),ARo=o("distilbert"),LRo=o(" \u2014 "),zG=a("a"),yRo=o("DistilBertForSequenceClassification"),xRo=o(" (DistilBERT model)"),$Ro=l(),m7=a("li"),jme=a("strong"),kRo=o("electra"),SRo=o(" \u2014 "),WG=a("a"),RRo=o("ElectraForSequenceClassification"),PRo=o(" (ELECTRA model)"),BRo=l(),g7=a("li"),Dme=a("strong"),IRo=o("flaubert"),NRo=o(" \u2014 "),QG=a("a"),qRo=o("FlaubertForSequenceClassification"),jRo=o(" (FlauBERT model)"),DRo=l(),h7=a("li"),Gme=a("strong"),GRo=o("fnet"),ORo=o(" \u2014 "),HG=a("a"),VRo=o("FNetForSequenceClassification"),XRo=o(" (FNet model)"),zRo=l(),p7=a("li"),Ome=a("strong"),WRo=o("funnel"),QRo=o(" \u2014 "),UG=a("a"),HRo=o("FunnelForSequenceClassification"),URo=o(" (Funnel Transformer model)"),JRo=l(),_7=a("li"),Vme=a("strong"),YRo=o("gpt2"),KRo=o(" \u2014 "),JG=a("a"),ZRo=o("GPT2ForSequenceClassification"),ePo=o(" (OpenAI GPT-2 model)"),oPo=l(),u7=a("li"),Xme=a("strong"),rPo=o("gpt_neo"),tPo=o(" \u2014 "),YG=a("a"),aPo=o("GPTNeoForSequenceClassification"),nPo=o(" (GPT Neo model)"),sPo=l(),b7=a("li"),zme=a("strong"),lPo=o("gptj"),iPo=o(" \u2014 "),KG=a("a"),dPo=o("GPTJForSequenceClassification"),cPo=o(" (GPT-J model)"),fPo=l(),v7=a("li"),Wme=a("strong"),mPo=o("ibert"),gPo=o(" \u2014 "),ZG=a("a"),hPo=o("IBertForSequenceClassification"),pPo=o(" (I-BERT model)"),_Po=l(),F7=a("li"),Qme=a("strong"),uPo=o("layoutlm"),bPo=o(" \u2014 "),eO=a("a"),vPo=o("LayoutLMForSequenceClassification"),FPo=o(" (LayoutLM model)"),TPo=l(),T7=a("li"),Hme=a("strong"),MPo=o("layoutlmv2"),EPo=o(" \u2014 "),oO=a("a"),CPo=o("LayoutLMv2ForSequenceClassification"),wPo=o(" (LayoutLMv2 model)"),APo=l(),M7=a("li"),Ume=a("strong"),LPo=o("layoutlmv3"),yPo=o(" \u2014 "),rO=a("a"),xPo=o("LayoutLMv3ForSequenceClassification"),$Po=o(" (LayoutLMv3 model)"),kPo=l(),E7=a("li"),Jme=a("strong"),SPo=o("led"),RPo=o(" \u2014 "),tO=a("a"),PPo=o("LEDForSequenceClassification"),BPo=o(" (LED model)"),IPo=l(),C7=a("li"),Yme=a("strong"),NPo=o("longformer"),qPo=o(" \u2014 "),aO=a("a"),jPo=o("LongformerForSequenceClassification"),DPo=o(" (Longformer model)"),GPo=l(),w7=a("li"),Kme=a("strong"),OPo=o("mbart"),VPo=o(" \u2014 "),nO=a("a"),XPo=o("MBartForSequenceClassification"),zPo=o(" (mBART model)"),WPo=l(),A7=a("li"),Zme=a("strong"),QPo=o("megatron-bert"),HPo=o(" \u2014 "),sO=a("a"),UPo=o("MegatronBertForSequenceClassification"),JPo=o(" (Megatron-BERT model)"),YPo=l(),L7=a("li"),ege=a("strong"),KPo=o("mobilebert"),ZPo=o(" \u2014 "),lO=a("a"),eBo=o("MobileBertForSequenceClassification"),oBo=o(" (MobileBERT model)"),rBo=l(),y7=a("li"),oge=a("strong"),tBo=o("mpnet"),aBo=o(" \u2014 "),iO=a("a"),nBo=o("MPNetForSequenceClassification"),sBo=o(" (MPNet model)"),lBo=l(),x7=a("li"),rge=a("strong"),iBo=o("nystromformer"),dBo=o(" \u2014 "),dO=a("a"),cBo=o("NystromformerForSequenceClassification"),fBo=o(" (Nystr\xF6mformer model)"),mBo=l(),$7=a("li"),tge=a("strong"),gBo=o("openai-gpt"),hBo=o(" \u2014 "),cO=a("a"),pBo=o("OpenAIGPTForSequenceClassification"),_Bo=o(" (OpenAI GPT model)"),uBo=l(),k7=a("li"),age=a("strong"),bBo=o("perceiver"),vBo=o(" \u2014 "),fO=a("a"),FBo=o("PerceiverForSequenceClassification"),TBo=o(" (Perceiver model)"),MBo=l(),S7=a("li"),nge=a("strong"),EBo=o("plbart"),CBo=o(" \u2014 "),mO=a("a"),wBo=o("PLBartForSequenceClassification"),ABo=o(" (PLBart model)"),LBo=l(),R7=a("li"),sge=a("strong"),yBo=o("qdqbert"),xBo=o(" \u2014 "),gO=a("a"),$Bo=o("QDQBertForSequenceClassification"),kBo=o(" (QDQBert model)"),SBo=l(),P7=a("li"),lge=a("strong"),RBo=o("reformer"),PBo=o(" \u2014 "),hO=a("a"),BBo=o("ReformerForSequenceClassification"),IBo=o(" (Reformer model)"),NBo=l(),B7=a("li"),ige=a("strong"),qBo=o("rembert"),jBo=o(" \u2014 "),pO=a("a"),DBo=o("RemBertForSequenceClassification"),GBo=o(" (RemBERT model)"),OBo=l(),I7=a("li"),dge=a("strong"),VBo=o("roberta"),XBo=o(" \u2014 "),_O=a("a"),zBo=o("RobertaForSequenceClassification"),WBo=o(" (RoBERTa model)"),QBo=l(),N7=a("li"),cge=a("strong"),HBo=o("roformer"),UBo=o(" \u2014 "),uO=a("a"),JBo=o("RoFormerForSequenceClassification"),YBo=o(" (RoFormer model)"),KBo=l(),q7=a("li"),fge=a("strong"),ZBo=o("squeezebert"),eIo=o(" \u2014 "),bO=a("a"),oIo=o("SqueezeBertForSequenceClassification"),rIo=o(" (SqueezeBERT model)"),tIo=l(),j7=a("li"),mge=a("strong"),aIo=o("tapas"),nIo=o(" \u2014 "),vO=a("a"),sIo=o("TapasForSequenceClassification"),lIo=o(" (TAPAS model)"),iIo=l(),D7=a("li"),gge=a("strong"),dIo=o("transfo-xl"),cIo=o(" \u2014 "),FO=a("a"),fIo=o("TransfoXLForSequenceClassification"),mIo=o(" (Transformer-XL model)"),gIo=l(),G7=a("li"),hge=a("strong"),hIo=o("xlm"),pIo=o(" \u2014 "),TO=a("a"),_Io=o("XLMForSequenceClassification"),uIo=o(" (XLM model)"),bIo=l(),O7=a("li"),pge=a("strong"),vIo=o("xlm-roberta"),FIo=o(" \u2014 "),MO=a("a"),TIo=o("XLMRobertaForSequenceClassification"),MIo=o(" (XLM-RoBERTa model)"),EIo=l(),V7=a("li"),_ge=a("strong"),CIo=o("xlm-roberta-xl"),wIo=o(" \u2014 "),EO=a("a"),AIo=o("XLMRobertaXLForSequenceClassification"),LIo=o(" (XLM-RoBERTa-XL model)"),yIo=l(),X7=a("li"),uge=a("strong"),xIo=o("xlnet"),$Io=o(" \u2014 "),CO=a("a"),kIo=o("XLNetForSequenceClassification"),SIo=o(" (XLNet model)"),RIo=l(),z7=a("li"),bge=a("strong"),PIo=o("yoso"),BIo=o(" \u2014 "),wO=a("a"),IIo=o("YosoForSequenceClassification"),NIo=o(" (YOSO model)"),qIo=l(),W7=a("p"),jIo=o("The model is set in evaluation mode by default using "),vge=a("code"),DIo=o("model.eval()"),GIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=a("code"),OIo=o("model.train()"),VIo=l(),F(Q7.$$.fragment),Aje=l(),Xi=a("h2"),H7=a("a"),Tge=a("span"),F(VL.$$.fragment),XIo=l(),Mge=a("span"),zIo=o("AutoModelForMultipleChoice"),Lje=l(),Po=a("div"),F(XL.$$.fragment),WIo=l(),zi=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AO=a("a"),HIo=o("from_pretrained()"),UIo=o(" class method or the "),LO=a("a"),JIo=o("from_config()"),YIo=o(` class
method.`),KIo=l(),zL=a("p"),ZIo=o("This class cannot be instantiated directly using "),Ege=a("code"),eNo=o("__init__()"),oNo=o(" (throws an error)."),rNo=l(),dt=a("div"),F(WL.$$.fragment),tNo=l(),Cge=a("p"),aNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nNo=l(),Wi=a("p"),sNo=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),lNo=o("not"),iNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),dNo=o("from_pretrained()"),cNo=o(" to load the model weights."),fNo=l(),F(U7.$$.fragment),mNo=l(),ro=a("div"),F(QL.$$.fragment),gNo=l(),Age=a("p"),hNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pNo=l(),Pa=a("p"),_No=o("The model class to instantiate is selected based on the "),Lge=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),yge=a("code"),vNo=o("pretrained_model_name_or_path"),FNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),TNo=o("pretrained_model_name_or_path"),MNo=o(":"),ENo=l(),K=a("ul"),J7=a("li"),$ge=a("strong"),CNo=o("albert"),wNo=o(" \u2014 "),xO=a("a"),ANo=o("AlbertForMultipleChoice"),LNo=o(" (ALBERT model)"),yNo=l(),Y7=a("li"),kge=a("strong"),xNo=o("bert"),$No=o(" \u2014 "),$O=a("a"),kNo=o("BertForMultipleChoice"),SNo=o(" (BERT model)"),RNo=l(),K7=a("li"),Sge=a("strong"),PNo=o("big_bird"),BNo=o(" \u2014 "),kO=a("a"),INo=o("BigBirdForMultipleChoice"),NNo=o(" (BigBird model)"),qNo=l(),Z7=a("li"),Rge=a("strong"),jNo=o("camembert"),DNo=o(" \u2014 "),SO=a("a"),GNo=o("CamembertForMultipleChoice"),ONo=o(" (CamemBERT model)"),VNo=l(),eb=a("li"),Pge=a("strong"),XNo=o("canine"),zNo=o(" \u2014 "),RO=a("a"),WNo=o("CanineForMultipleChoice"),QNo=o(" (CANINE model)"),HNo=l(),ob=a("li"),Bge=a("strong"),UNo=o("convbert"),JNo=o(" \u2014 "),PO=a("a"),YNo=o("ConvBertForMultipleChoice"),KNo=o(" (ConvBERT model)"),ZNo=l(),rb=a("li"),Ige=a("strong"),eqo=o("data2vec-text"),oqo=o(" \u2014 "),BO=a("a"),rqo=o("Data2VecTextForMultipleChoice"),tqo=o(" (Data2VecText model)"),aqo=l(),tb=a("li"),Nge=a("strong"),nqo=o("deberta-v2"),sqo=o(" \u2014 "),IO=a("a"),lqo=o("DebertaV2ForMultipleChoice"),iqo=o(" (DeBERTa-v2 model)"),dqo=l(),ab=a("li"),qge=a("strong"),cqo=o("distilbert"),fqo=o(" \u2014 "),NO=a("a"),mqo=o("DistilBertForMultipleChoice"),gqo=o(" (DistilBERT model)"),hqo=l(),nb=a("li"),jge=a("strong"),pqo=o("electra"),_qo=o(" \u2014 "),qO=a("a"),uqo=o("ElectraForMultipleChoice"),bqo=o(" (ELECTRA model)"),vqo=l(),sb=a("li"),Dge=a("strong"),Fqo=o("flaubert"),Tqo=o(" \u2014 "),jO=a("a"),Mqo=o("FlaubertForMultipleChoice"),Eqo=o(" (FlauBERT model)"),Cqo=l(),lb=a("li"),Gge=a("strong"),wqo=o("fnet"),Aqo=o(" \u2014 "),DO=a("a"),Lqo=o("FNetForMultipleChoice"),yqo=o(" (FNet model)"),xqo=l(),ib=a("li"),Oge=a("strong"),$qo=o("funnel"),kqo=o(" \u2014 "),GO=a("a"),Sqo=o("FunnelForMultipleChoice"),Rqo=o(" (Funnel Transformer model)"),Pqo=l(),db=a("li"),Vge=a("strong"),Bqo=o("ibert"),Iqo=o(" \u2014 "),OO=a("a"),Nqo=o("IBertForMultipleChoice"),qqo=o(" (I-BERT model)"),jqo=l(),cb=a("li"),Xge=a("strong"),Dqo=o("longformer"),Gqo=o(" \u2014 "),VO=a("a"),Oqo=o("LongformerForMultipleChoice"),Vqo=o(" (Longformer model)"),Xqo=l(),fb=a("li"),zge=a("strong"),zqo=o("megatron-bert"),Wqo=o(" \u2014 "),XO=a("a"),Qqo=o("MegatronBertForMultipleChoice"),Hqo=o(" (Megatron-BERT model)"),Uqo=l(),mb=a("li"),Wge=a("strong"),Jqo=o("mobilebert"),Yqo=o(" \u2014 "),zO=a("a"),Kqo=o("MobileBertForMultipleChoice"),Zqo=o(" (MobileBERT model)"),ejo=l(),gb=a("li"),Qge=a("strong"),ojo=o("mpnet"),rjo=o(" \u2014 "),WO=a("a"),tjo=o("MPNetForMultipleChoice"),ajo=o(" (MPNet model)"),njo=l(),hb=a("li"),Hge=a("strong"),sjo=o("nystromformer"),ljo=o(" \u2014 "),QO=a("a"),ijo=o("NystromformerForMultipleChoice"),djo=o(" (Nystr\xF6mformer model)"),cjo=l(),pb=a("li"),Uge=a("strong"),fjo=o("qdqbert"),mjo=o(" \u2014 "),HO=a("a"),gjo=o("QDQBertForMultipleChoice"),hjo=o(" (QDQBert model)"),pjo=l(),_b=a("li"),Jge=a("strong"),_jo=o("rembert"),ujo=o(" \u2014 "),UO=a("a"),bjo=o("RemBertForMultipleChoice"),vjo=o(" (RemBERT model)"),Fjo=l(),ub=a("li"),Yge=a("strong"),Tjo=o("roberta"),Mjo=o(" \u2014 "),JO=a("a"),Ejo=o("RobertaForMultipleChoice"),Cjo=o(" (RoBERTa model)"),wjo=l(),bb=a("li"),Kge=a("strong"),Ajo=o("roformer"),Ljo=o(" \u2014 "),YO=a("a"),yjo=o("RoFormerForMultipleChoice"),xjo=o(" (RoFormer model)"),$jo=l(),vb=a("li"),Zge=a("strong"),kjo=o("squeezebert"),Sjo=o(" \u2014 "),KO=a("a"),Rjo=o("SqueezeBertForMultipleChoice"),Pjo=o(" (SqueezeBERT model)"),Bjo=l(),Fb=a("li"),ehe=a("strong"),Ijo=o("xlm"),Njo=o(" \u2014 "),ZO=a("a"),qjo=o("XLMForMultipleChoice"),jjo=o(" (XLM model)"),Djo=l(),Tb=a("li"),ohe=a("strong"),Gjo=o("xlm-roberta"),Ojo=o(" \u2014 "),eV=a("a"),Vjo=o("XLMRobertaForMultipleChoice"),Xjo=o(" (XLM-RoBERTa model)"),zjo=l(),Mb=a("li"),rhe=a("strong"),Wjo=o("xlm-roberta-xl"),Qjo=o(" \u2014 "),oV=a("a"),Hjo=o("XLMRobertaXLForMultipleChoice"),Ujo=o(" (XLM-RoBERTa-XL model)"),Jjo=l(),Eb=a("li"),the=a("strong"),Yjo=o("xlnet"),Kjo=o(" \u2014 "),rV=a("a"),Zjo=o("XLNetForMultipleChoice"),eDo=o(" (XLNet model)"),oDo=l(),Cb=a("li"),ahe=a("strong"),rDo=o("yoso"),tDo=o(" \u2014 "),tV=a("a"),aDo=o("YosoForMultipleChoice"),nDo=o(" (YOSO model)"),sDo=l(),wb=a("p"),lDo=o("The model is set in evaluation mode by default using "),nhe=a("code"),iDo=o("model.eval()"),dDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),cDo=o("model.train()"),fDo=l(),F(Ab.$$.fragment),yje=l(),Qi=a("h2"),Lb=a("a"),lhe=a("span"),F(HL.$$.fragment),mDo=l(),ihe=a("span"),gDo=o("AutoModelForNextSentencePrediction"),xje=l(),Bo=a("div"),F(UL.$$.fragment),hDo=l(),Hi=a("p"),pDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aV=a("a"),_Do=o("from_pretrained()"),uDo=o(" class method or the "),nV=a("a"),bDo=o("from_config()"),vDo=o(` class
method.`),FDo=l(),JL=a("p"),TDo=o("This class cannot be instantiated directly using "),dhe=a("code"),MDo=o("__init__()"),EDo=o(" (throws an error)."),CDo=l(),ct=a("div"),F(YL.$$.fragment),wDo=l(),che=a("p"),ADo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LDo=l(),Ui=a("p"),yDo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),xDo=o("not"),$Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),kDo=o("from_pretrained()"),SDo=o(" to load the model weights."),RDo=l(),F(yb.$$.fragment),PDo=l(),to=a("div"),F(KL.$$.fragment),BDo=l(),mhe=a("p"),IDo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NDo=l(),Ba=a("p"),qDo=o("The model class to instantiate is selected based on the "),ghe=a("code"),jDo=o("model_type"),DDo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),VDo=o("pretrained_model_name_or_path"),XDo=o(":"),zDo=l(),Yr=a("ul"),xb=a("li"),_he=a("strong"),WDo=o("bert"),QDo=o(" \u2014 "),lV=a("a"),HDo=o("BertForNextSentencePrediction"),UDo=o(" (BERT model)"),JDo=l(),$b=a("li"),uhe=a("strong"),YDo=o("fnet"),KDo=o(" \u2014 "),iV=a("a"),ZDo=o("FNetForNextSentencePrediction"),eGo=o(" (FNet model)"),oGo=l(),kb=a("li"),bhe=a("strong"),rGo=o("megatron-bert"),tGo=o(" \u2014 "),dV=a("a"),aGo=o("MegatronBertForNextSentencePrediction"),nGo=o(" (Megatron-BERT model)"),sGo=l(),Sb=a("li"),vhe=a("strong"),lGo=o("mobilebert"),iGo=o(" \u2014 "),cV=a("a"),dGo=o("MobileBertForNextSentencePrediction"),cGo=o(" (MobileBERT model)"),fGo=l(),Rb=a("li"),Fhe=a("strong"),mGo=o("qdqbert"),gGo=o(" \u2014 "),fV=a("a"),hGo=o("QDQBertForNextSentencePrediction"),pGo=o(" (QDQBert model)"),_Go=l(),Pb=a("p"),uGo=o("The model is set in evaluation mode by default using "),The=a("code"),bGo=o("model.eval()"),vGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),FGo=o("model.train()"),TGo=l(),F(Bb.$$.fragment),$je=l(),Ji=a("h2"),Ib=a("a"),Ehe=a("span"),F(ZL.$$.fragment),MGo=l(),Che=a("span"),EGo=o("AutoModelForTokenClassification"),kje=l(),Io=a("div"),F(ey.$$.fragment),CGo=l(),Yi=a("p"),wGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mV=a("a"),AGo=o("from_pretrained()"),LGo=o(" class method or the "),gV=a("a"),yGo=o("from_config()"),xGo=o(` class
method.`),$Go=l(),oy=a("p"),kGo=o("This class cannot be instantiated directly using "),whe=a("code"),SGo=o("__init__()"),RGo=o(" (throws an error)."),PGo=l(),ft=a("div"),F(ry.$$.fragment),BGo=l(),Ahe=a("p"),IGo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NGo=l(),Ki=a("p"),qGo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),jGo=o("not"),DGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=a("a"),GGo=o("from_pretrained()"),OGo=o(" to load the model weights."),VGo=l(),F(Nb.$$.fragment),XGo=l(),ao=a("div"),F(ty.$$.fragment),zGo=l(),yhe=a("p"),WGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QGo=l(),Ia=a("p"),HGo=o("The model class to instantiate is selected based on the "),xhe=a("code"),UGo=o("model_type"),JGo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),YGo=o("pretrained_model_name_or_path"),KGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),ZGo=o("pretrained_model_name_or_path"),eOo=o(":"),oOo=l(),U=a("ul"),qb=a("li"),She=a("strong"),rOo=o("albert"),tOo=o(" \u2014 "),pV=a("a"),aOo=o("AlbertForTokenClassification"),nOo=o(" (ALBERT model)"),sOo=l(),jb=a("li"),Rhe=a("strong"),lOo=o("bert"),iOo=o(" \u2014 "),_V=a("a"),dOo=o("BertForTokenClassification"),cOo=o(" (BERT model)"),fOo=l(),Db=a("li"),Phe=a("strong"),mOo=o("big_bird"),gOo=o(" \u2014 "),uV=a("a"),hOo=o("BigBirdForTokenClassification"),pOo=o(" (BigBird model)"),_Oo=l(),Gb=a("li"),Bhe=a("strong"),uOo=o("camembert"),bOo=o(" \u2014 "),bV=a("a"),vOo=o("CamembertForTokenClassification"),FOo=o(" (CamemBERT model)"),TOo=l(),Ob=a("li"),Ihe=a("strong"),MOo=o("canine"),EOo=o(" \u2014 "),vV=a("a"),COo=o("CanineForTokenClassification"),wOo=o(" (CANINE model)"),AOo=l(),Vb=a("li"),Nhe=a("strong"),LOo=o("convbert"),yOo=o(" \u2014 "),FV=a("a"),xOo=o("ConvBertForTokenClassification"),$Oo=o(" (ConvBERT model)"),kOo=l(),Xb=a("li"),qhe=a("strong"),SOo=o("data2vec-text"),ROo=o(" \u2014 "),TV=a("a"),POo=o("Data2VecTextForTokenClassification"),BOo=o(" (Data2VecText model)"),IOo=l(),zb=a("li"),jhe=a("strong"),NOo=o("deberta"),qOo=o(" \u2014 "),MV=a("a"),jOo=o("DebertaForTokenClassification"),DOo=o(" (DeBERTa model)"),GOo=l(),Wb=a("li"),Dhe=a("strong"),OOo=o("deberta-v2"),VOo=o(" \u2014 "),EV=a("a"),XOo=o("DebertaV2ForTokenClassification"),zOo=o(" (DeBERTa-v2 model)"),WOo=l(),Qb=a("li"),Ghe=a("strong"),QOo=o("distilbert"),HOo=o(" \u2014 "),CV=a("a"),UOo=o("DistilBertForTokenClassification"),JOo=o(" (DistilBERT model)"),YOo=l(),Hb=a("li"),Ohe=a("strong"),KOo=o("electra"),ZOo=o(" \u2014 "),wV=a("a"),eVo=o("ElectraForTokenClassification"),oVo=o(" (ELECTRA model)"),rVo=l(),Ub=a("li"),Vhe=a("strong"),tVo=o("flaubert"),aVo=o(" \u2014 "),AV=a("a"),nVo=o("FlaubertForTokenClassification"),sVo=o(" (FlauBERT model)"),lVo=l(),Jb=a("li"),Xhe=a("strong"),iVo=o("fnet"),dVo=o(" \u2014 "),LV=a("a"),cVo=o("FNetForTokenClassification"),fVo=o(" (FNet model)"),mVo=l(),Yb=a("li"),zhe=a("strong"),gVo=o("funnel"),hVo=o(" \u2014 "),yV=a("a"),pVo=o("FunnelForTokenClassification"),_Vo=o(" (Funnel Transformer model)"),uVo=l(),Kb=a("li"),Whe=a("strong"),bVo=o("gpt2"),vVo=o(" \u2014 "),xV=a("a"),FVo=o("GPT2ForTokenClassification"),TVo=o(" (OpenAI GPT-2 model)"),MVo=l(),Zb=a("li"),Qhe=a("strong"),EVo=o("ibert"),CVo=o(" \u2014 "),$V=a("a"),wVo=o("IBertForTokenClassification"),AVo=o(" (I-BERT model)"),LVo=l(),e2=a("li"),Hhe=a("strong"),yVo=o("layoutlm"),xVo=o(" \u2014 "),kV=a("a"),$Vo=o("LayoutLMForTokenClassification"),kVo=o(" (LayoutLM model)"),SVo=l(),o2=a("li"),Uhe=a("strong"),RVo=o("layoutlmv2"),PVo=o(" \u2014 "),SV=a("a"),BVo=o("LayoutLMv2ForTokenClassification"),IVo=o(" (LayoutLMv2 model)"),NVo=l(),r2=a("li"),Jhe=a("strong"),qVo=o("layoutlmv3"),jVo=o(" \u2014 "),RV=a("a"),DVo=o("LayoutLMv3ForTokenClassification"),GVo=o(" (LayoutLMv3 model)"),OVo=l(),t2=a("li"),Yhe=a("strong"),VVo=o("longformer"),XVo=o(" \u2014 "),PV=a("a"),zVo=o("LongformerForTokenClassification"),WVo=o(" (Longformer model)"),QVo=l(),a2=a("li"),Khe=a("strong"),HVo=o("megatron-bert"),UVo=o(" \u2014 "),BV=a("a"),JVo=o("MegatronBertForTokenClassification"),YVo=o(" (Megatron-BERT model)"),KVo=l(),n2=a("li"),Zhe=a("strong"),ZVo=o("mobilebert"),eXo=o(" \u2014 "),IV=a("a"),oXo=o("MobileBertForTokenClassification"),rXo=o(" (MobileBERT model)"),tXo=l(),s2=a("li"),epe=a("strong"),aXo=o("mpnet"),nXo=o(" \u2014 "),NV=a("a"),sXo=o("MPNetForTokenClassification"),lXo=o(" (MPNet model)"),iXo=l(),l2=a("li"),ope=a("strong"),dXo=o("nystromformer"),cXo=o(" \u2014 "),qV=a("a"),fXo=o("NystromformerForTokenClassification"),mXo=o(" (Nystr\xF6mformer model)"),gXo=l(),i2=a("li"),rpe=a("strong"),hXo=o("qdqbert"),pXo=o(" \u2014 "),jV=a("a"),_Xo=o("QDQBertForTokenClassification"),uXo=o(" (QDQBert model)"),bXo=l(),d2=a("li"),tpe=a("strong"),vXo=o("rembert"),FXo=o(" \u2014 "),DV=a("a"),TXo=o("RemBertForTokenClassification"),MXo=o(" (RemBERT model)"),EXo=l(),c2=a("li"),ape=a("strong"),CXo=o("roberta"),wXo=o(" \u2014 "),GV=a("a"),AXo=o("RobertaForTokenClassification"),LXo=o(" (RoBERTa model)"),yXo=l(),f2=a("li"),npe=a("strong"),xXo=o("roformer"),$Xo=o(" \u2014 "),OV=a("a"),kXo=o("RoFormerForTokenClassification"),SXo=o(" (RoFormer model)"),RXo=l(),m2=a("li"),spe=a("strong"),PXo=o("squeezebert"),BXo=o(" \u2014 "),VV=a("a"),IXo=o("SqueezeBertForTokenClassification"),NXo=o(" (SqueezeBERT model)"),qXo=l(),g2=a("li"),lpe=a("strong"),jXo=o("xlm"),DXo=o(" \u2014 "),XV=a("a"),GXo=o("XLMForTokenClassification"),OXo=o(" (XLM model)"),VXo=l(),h2=a("li"),ipe=a("strong"),XXo=o("xlm-roberta"),zXo=o(" \u2014 "),zV=a("a"),WXo=o("XLMRobertaForTokenClassification"),QXo=o(" (XLM-RoBERTa model)"),HXo=l(),p2=a("li"),dpe=a("strong"),UXo=o("xlm-roberta-xl"),JXo=o(" \u2014 "),WV=a("a"),YXo=o("XLMRobertaXLForTokenClassification"),KXo=o(" (XLM-RoBERTa-XL model)"),ZXo=l(),_2=a("li"),cpe=a("strong"),ezo=o("xlnet"),ozo=o(" \u2014 "),QV=a("a"),rzo=o("XLNetForTokenClassification"),tzo=o(" (XLNet model)"),azo=l(),u2=a("li"),fpe=a("strong"),nzo=o("yoso"),szo=o(" \u2014 "),HV=a("a"),lzo=o("YosoForTokenClassification"),izo=o(" (YOSO model)"),dzo=l(),b2=a("p"),czo=o("The model is set in evaluation mode by default using "),mpe=a("code"),fzo=o("model.eval()"),mzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),gzo=o("model.train()"),hzo=l(),F(v2.$$.fragment),Sje=l(),Zi=a("h2"),F2=a("a"),hpe=a("span"),F(ay.$$.fragment),pzo=l(),ppe=a("span"),_zo=o("AutoModelForQuestionAnswering"),Rje=l(),No=a("div"),F(ny.$$.fragment),uzo=l(),ed=a("p"),bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UV=a("a"),vzo=o("from_pretrained()"),Fzo=o(" class method or the "),JV=a("a"),Tzo=o("from_config()"),Mzo=o(` class
method.`),Ezo=l(),sy=a("p"),Czo=o("This class cannot be instantiated directly using "),_pe=a("code"),wzo=o("__init__()"),Azo=o(" (throws an error)."),Lzo=l(),mt=a("div"),F(ly.$$.fragment),yzo=l(),upe=a("p"),xzo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$zo=l(),od=a("p"),kzo=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),Szo=o("not"),Rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),Pzo=o("from_pretrained()"),Bzo=o(" to load the model weights."),Izo=l(),F(T2.$$.fragment),Nzo=l(),no=a("div"),F(iy.$$.fragment),qzo=l(),vpe=a("p"),jzo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dzo=l(),Na=a("p"),Gzo=o("The model class to instantiate is selected based on the "),Fpe=a("code"),Ozo=o("model_type"),Vzo=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),Xzo=o("pretrained_model_name_or_path"),zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),Wzo=o("pretrained_model_name_or_path"),Qzo=o(":"),Hzo=l(),V=a("ul"),M2=a("li"),Epe=a("strong"),Uzo=o("albert"),Jzo=o(" \u2014 "),KV=a("a"),Yzo=o("AlbertForQuestionAnswering"),Kzo=o(" (ALBERT model)"),Zzo=l(),E2=a("li"),Cpe=a("strong"),eWo=o("bart"),oWo=o(" \u2014 "),ZV=a("a"),rWo=o("BartForQuestionAnswering"),tWo=o(" (BART model)"),aWo=l(),C2=a("li"),wpe=a("strong"),nWo=o("bert"),sWo=o(" \u2014 "),eX=a("a"),lWo=o("BertForQuestionAnswering"),iWo=o(" (BERT model)"),dWo=l(),w2=a("li"),Ape=a("strong"),cWo=o("big_bird"),fWo=o(" \u2014 "),oX=a("a"),mWo=o("BigBirdForQuestionAnswering"),gWo=o(" (BigBird model)"),hWo=l(),A2=a("li"),Lpe=a("strong"),pWo=o("bigbird_pegasus"),_Wo=o(" \u2014 "),rX=a("a"),uWo=o("BigBirdPegasusForQuestionAnswering"),bWo=o(" (BigBird-Pegasus model)"),vWo=l(),L2=a("li"),ype=a("strong"),FWo=o("camembert"),TWo=o(" \u2014 "),tX=a("a"),MWo=o("CamembertForQuestionAnswering"),EWo=o(" (CamemBERT model)"),CWo=l(),y2=a("li"),xpe=a("strong"),wWo=o("canine"),AWo=o(" \u2014 "),aX=a("a"),LWo=o("CanineForQuestionAnswering"),yWo=o(" (CANINE model)"),xWo=l(),x2=a("li"),$pe=a("strong"),$Wo=o("convbert"),kWo=o(" \u2014 "),nX=a("a"),SWo=o("ConvBertForQuestionAnswering"),RWo=o(" (ConvBERT model)"),PWo=l(),$2=a("li"),kpe=a("strong"),BWo=o("data2vec-text"),IWo=o(" \u2014 "),sX=a("a"),NWo=o("Data2VecTextForQuestionAnswering"),qWo=o(" (Data2VecText model)"),jWo=l(),k2=a("li"),Spe=a("strong"),DWo=o("deberta"),GWo=o(" \u2014 "),lX=a("a"),OWo=o("DebertaForQuestionAnswering"),VWo=o(" (DeBERTa model)"),XWo=l(),S2=a("li"),Rpe=a("strong"),zWo=o("deberta-v2"),WWo=o(" \u2014 "),iX=a("a"),QWo=o("DebertaV2ForQuestionAnswering"),HWo=o(" (DeBERTa-v2 model)"),UWo=l(),R2=a("li"),Ppe=a("strong"),JWo=o("distilbert"),YWo=o(" \u2014 "),dX=a("a"),KWo=o("DistilBertForQuestionAnswering"),ZWo=o(" (DistilBERT model)"),eQo=l(),P2=a("li"),Bpe=a("strong"),oQo=o("electra"),rQo=o(" \u2014 "),cX=a("a"),tQo=o("ElectraForQuestionAnswering"),aQo=o(" (ELECTRA model)"),nQo=l(),B2=a("li"),Ipe=a("strong"),sQo=o("flaubert"),lQo=o(" \u2014 "),fX=a("a"),iQo=o("FlaubertForQuestionAnsweringSimple"),dQo=o(" (FlauBERT model)"),cQo=l(),I2=a("li"),Npe=a("strong"),fQo=o("fnet"),mQo=o(" \u2014 "),mX=a("a"),gQo=o("FNetForQuestionAnswering"),hQo=o(" (FNet model)"),pQo=l(),N2=a("li"),qpe=a("strong"),_Qo=o("funnel"),uQo=o(" \u2014 "),gX=a("a"),bQo=o("FunnelForQuestionAnswering"),vQo=o(" (Funnel Transformer model)"),FQo=l(),q2=a("li"),jpe=a("strong"),TQo=o("gptj"),MQo=o(" \u2014 "),hX=a("a"),EQo=o("GPTJForQuestionAnswering"),CQo=o(" (GPT-J model)"),wQo=l(),j2=a("li"),Dpe=a("strong"),AQo=o("ibert"),LQo=o(" \u2014 "),pX=a("a"),yQo=o("IBertForQuestionAnswering"),xQo=o(" (I-BERT model)"),$Qo=l(),D2=a("li"),Gpe=a("strong"),kQo=o("layoutlmv2"),SQo=o(" \u2014 "),_X=a("a"),RQo=o("LayoutLMv2ForQuestionAnswering"),PQo=o(" (LayoutLMv2 model)"),BQo=l(),G2=a("li"),Ope=a("strong"),IQo=o("layoutlmv3"),NQo=o(" \u2014 "),uX=a("a"),qQo=o("LayoutLMv3ForQuestionAnswering"),jQo=o(" (LayoutLMv3 model)"),DQo=l(),O2=a("li"),Vpe=a("strong"),GQo=o("led"),OQo=o(" \u2014 "),bX=a("a"),VQo=o("LEDForQuestionAnswering"),XQo=o(" (LED model)"),zQo=l(),V2=a("li"),Xpe=a("strong"),WQo=o("longformer"),QQo=o(" \u2014 "),vX=a("a"),HQo=o("LongformerForQuestionAnswering"),UQo=o(" (Longformer model)"),JQo=l(),X2=a("li"),zpe=a("strong"),YQo=o("lxmert"),KQo=o(" \u2014 "),FX=a("a"),ZQo=o("LxmertForQuestionAnswering"),eHo=o(" (LXMERT model)"),oHo=l(),z2=a("li"),Wpe=a("strong"),rHo=o("mbart"),tHo=o(" \u2014 "),TX=a("a"),aHo=o("MBartForQuestionAnswering"),nHo=o(" (mBART model)"),sHo=l(),W2=a("li"),Qpe=a("strong"),lHo=o("megatron-bert"),iHo=o(" \u2014 "),MX=a("a"),dHo=o("MegatronBertForQuestionAnswering"),cHo=o(" (Megatron-BERT model)"),fHo=l(),Q2=a("li"),Hpe=a("strong"),mHo=o("mobilebert"),gHo=o(" \u2014 "),EX=a("a"),hHo=o("MobileBertForQuestionAnswering"),pHo=o(" (MobileBERT model)"),_Ho=l(),H2=a("li"),Upe=a("strong"),uHo=o("mpnet"),bHo=o(" \u2014 "),CX=a("a"),vHo=o("MPNetForQuestionAnswering"),FHo=o(" (MPNet model)"),THo=l(),U2=a("li"),Jpe=a("strong"),MHo=o("nystromformer"),EHo=o(" \u2014 "),wX=a("a"),CHo=o("NystromformerForQuestionAnswering"),wHo=o(" (Nystr\xF6mformer model)"),AHo=l(),J2=a("li"),Ype=a("strong"),LHo=o("qdqbert"),yHo=o(" \u2014 "),AX=a("a"),xHo=o("QDQBertForQuestionAnswering"),$Ho=o(" (QDQBert model)"),kHo=l(),Y2=a("li"),Kpe=a("strong"),SHo=o("reformer"),RHo=o(" \u2014 "),LX=a("a"),PHo=o("ReformerForQuestionAnswering"),BHo=o(" (Reformer model)"),IHo=l(),K2=a("li"),Zpe=a("strong"),NHo=o("rembert"),qHo=o(" \u2014 "),yX=a("a"),jHo=o("RemBertForQuestionAnswering"),DHo=o(" (RemBERT model)"),GHo=l(),Z2=a("li"),e_e=a("strong"),OHo=o("roberta"),VHo=o(" \u2014 "),xX=a("a"),XHo=o("RobertaForQuestionAnswering"),zHo=o(" (RoBERTa model)"),WHo=l(),ev=a("li"),o_e=a("strong"),QHo=o("roformer"),HHo=o(" \u2014 "),$X=a("a"),UHo=o("RoFormerForQuestionAnswering"),JHo=o(" (RoFormer model)"),YHo=l(),ov=a("li"),r_e=a("strong"),KHo=o("splinter"),ZHo=o(" \u2014 "),kX=a("a"),eUo=o("SplinterForQuestionAnswering"),oUo=o(" (Splinter model)"),rUo=l(),rv=a("li"),t_e=a("strong"),tUo=o("squeezebert"),aUo=o(" \u2014 "),SX=a("a"),nUo=o("SqueezeBertForQuestionAnswering"),sUo=o(" (SqueezeBERT model)"),lUo=l(),tv=a("li"),a_e=a("strong"),iUo=o("xlm"),dUo=o(" \u2014 "),RX=a("a"),cUo=o("XLMForQuestionAnsweringSimple"),fUo=o(" (XLM model)"),mUo=l(),av=a("li"),n_e=a("strong"),gUo=o("xlm-roberta"),hUo=o(" \u2014 "),PX=a("a"),pUo=o("XLMRobertaForQuestionAnswering"),_Uo=o(" (XLM-RoBERTa model)"),uUo=l(),nv=a("li"),s_e=a("strong"),bUo=o("xlm-roberta-xl"),vUo=o(" \u2014 "),BX=a("a"),FUo=o("XLMRobertaXLForQuestionAnswering"),TUo=o(" (XLM-RoBERTa-XL model)"),MUo=l(),sv=a("li"),l_e=a("strong"),EUo=o("xlnet"),CUo=o(" \u2014 "),IX=a("a"),wUo=o("XLNetForQuestionAnsweringSimple"),AUo=o(" (XLNet model)"),LUo=l(),lv=a("li"),i_e=a("strong"),yUo=o("yoso"),xUo=o(" \u2014 "),NX=a("a"),$Uo=o("YosoForQuestionAnswering"),kUo=o(" (YOSO model)"),SUo=l(),iv=a("p"),RUo=o("The model is set in evaluation mode by default using "),d_e=a("code"),PUo=o("model.eval()"),BUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=a("code"),IUo=o("model.train()"),NUo=l(),F(dv.$$.fragment),Pje=l(),rd=a("h2"),cv=a("a"),f_e=a("span"),F(dy.$$.fragment),qUo=l(),m_e=a("span"),jUo=o("AutoModelForTableQuestionAnswering"),Bje=l(),qo=a("div"),F(cy.$$.fragment),DUo=l(),td=a("p"),GUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qX=a("a"),OUo=o("from_pretrained()"),VUo=o(" class method or the "),jX=a("a"),XUo=o("from_config()"),zUo=o(` class
method.`),WUo=l(),fy=a("p"),QUo=o("This class cannot be instantiated directly using "),g_e=a("code"),HUo=o("__init__()"),UUo=o(" (throws an error)."),JUo=l(),gt=a("div"),F(my.$$.fragment),YUo=l(),h_e=a("p"),KUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZUo=l(),ad=a("p"),eJo=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),oJo=o("not"),rJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),tJo=o("from_pretrained()"),aJo=o(" to load the model weights."),nJo=l(),F(fv.$$.fragment),sJo=l(),so=a("div"),F(gy.$$.fragment),lJo=l(),__e=a("p"),iJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dJo=l(),qa=a("p"),cJo=o("The model class to instantiate is selected based on the "),u_e=a("code"),fJo=o("model_type"),mJo=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),gJo=o("pretrained_model_name_or_path"),hJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),pJo=o("pretrained_model_name_or_path"),_Jo=o(":"),uJo=l(),F_e=a("ul"),mv=a("li"),T_e=a("strong"),bJo=o("tapas"),vJo=o(" \u2014 "),GX=a("a"),FJo=o("TapasForQuestionAnswering"),TJo=o(" (TAPAS model)"),MJo=l(),gv=a("p"),EJo=o("The model is set in evaluation mode by default using "),M_e=a("code"),CJo=o("model.eval()"),wJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),AJo=o("model.train()"),LJo=l(),F(hv.$$.fragment),Ije=l(),nd=a("h2"),pv=a("a"),C_e=a("span"),F(hy.$$.fragment),yJo=l(),w_e=a("span"),xJo=o("AutoModelForImageClassification"),Nje=l(),jo=a("div"),F(py.$$.fragment),$Jo=l(),sd=a("p"),kJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OX=a("a"),SJo=o("from_pretrained()"),RJo=o(" class method or the "),VX=a("a"),PJo=o("from_config()"),BJo=o(` class
method.`),IJo=l(),_y=a("p"),NJo=o("This class cannot be instantiated directly using "),A_e=a("code"),qJo=o("__init__()"),jJo=o(" (throws an error)."),DJo=l(),ht=a("div"),F(uy.$$.fragment),GJo=l(),L_e=a("p"),OJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VJo=l(),ld=a("p"),XJo=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),zJo=o("not"),WJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),QJo=o("from_pretrained()"),HJo=o(" to load the model weights."),UJo=l(),F(_v.$$.fragment),JJo=l(),lo=a("div"),F(by.$$.fragment),YJo=l(),x_e=a("p"),KJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZJo=l(),ja=a("p"),eYo=o("The model class to instantiate is selected based on the "),$_e=a("code"),oYo=o("model_type"),rYo=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(":"),lYo=l(),ve=a("ul"),uv=a("li"),R_e=a("strong"),iYo=o("beit"),dYo=o(" \u2014 "),zX=a("a"),cYo=o("BeitForImageClassification"),fYo=o(" (BEiT model)"),mYo=l(),bv=a("li"),P_e=a("strong"),gYo=o("convnext"),hYo=o(" \u2014 "),WX=a("a"),pYo=o("ConvNextForImageClassification"),_Yo=o(" (ConvNeXT model)"),uYo=l(),vv=a("li"),B_e=a("strong"),bYo=o("cvt"),vYo=o(" \u2014 "),QX=a("a"),FYo=o("CvtForImageClassification"),TYo=o(" (CvT model)"),MYo=l(),Fv=a("li"),I_e=a("strong"),EYo=o("data2vec-vision"),CYo=o(" \u2014 "),HX=a("a"),wYo=o("Data2VecVisionForImageClassification"),AYo=o(" (Data2VecVision model)"),LYo=l(),Bs=a("li"),N_e=a("strong"),yYo=o("deit"),xYo=o(" \u2014 "),UX=a("a"),$Yo=o("DeiTForImageClassification"),kYo=o(" or "),JX=a("a"),SYo=o("DeiTForImageClassificationWithTeacher"),RYo=o(" (DeiT model)"),PYo=l(),Tv=a("li"),q_e=a("strong"),BYo=o("imagegpt"),IYo=o(" \u2014 "),YX=a("a"),NYo=o("ImageGPTForImageClassification"),qYo=o(" (ImageGPT model)"),jYo=l(),Is=a("li"),j_e=a("strong"),DYo=o("levit"),GYo=o(" \u2014 "),KX=a("a"),OYo=o("LevitForImageClassification"),VYo=o(" or "),ZX=a("a"),XYo=o("LevitForImageClassificationWithTeacher"),zYo=o(" (LeViT model)"),WYo=l(),pt=a("li"),D_e=a("strong"),QYo=o("perceiver"),HYo=o(" \u2014 "),ez=a("a"),UYo=o("PerceiverForImageClassificationLearned"),JYo=o(" or "),oz=a("a"),YYo=o("PerceiverForImageClassificationFourier"),KYo=o(" or "),rz=a("a"),ZYo=o("PerceiverForImageClassificationConvProcessing"),eKo=o(" (Perceiver model)"),oKo=l(),Mv=a("li"),G_e=a("strong"),rKo=o("poolformer"),tKo=o(" \u2014 "),tz=a("a"),aKo=o("PoolFormerForImageClassification"),nKo=o(" (PoolFormer model)"),sKo=l(),Ev=a("li"),O_e=a("strong"),lKo=o("regnet"),iKo=o(" \u2014 "),az=a("a"),dKo=o("RegNetForImageClassification"),cKo=o(" (RegNet model)"),fKo=l(),Cv=a("li"),V_e=a("strong"),mKo=o("resnet"),gKo=o(" \u2014 "),nz=a("a"),hKo=o("ResNetForImageClassification"),pKo=o(" (ResNet model)"),_Ko=l(),wv=a("li"),X_e=a("strong"),uKo=o("segformer"),bKo=o(" \u2014 "),sz=a("a"),vKo=o("SegformerForImageClassification"),FKo=o(" (SegFormer model)"),TKo=l(),Av=a("li"),z_e=a("strong"),MKo=o("swin"),EKo=o(" \u2014 "),lz=a("a"),CKo=o("SwinForImageClassification"),wKo=o(" (Swin Transformer model)"),AKo=l(),Lv=a("li"),W_e=a("strong"),LKo=o("van"),yKo=o(" \u2014 "),iz=a("a"),xKo=o("VanForImageClassification"),$Ko=o(" (VAN model)"),kKo=l(),yv=a("li"),Q_e=a("strong"),SKo=o("vit"),RKo=o(" \u2014 "),dz=a("a"),PKo=o("ViTForImageClassification"),BKo=o(" (ViT model)"),IKo=l(),xv=a("p"),NKo=o("The model is set in evaluation mode by default using "),H_e=a("code"),qKo=o("model.eval()"),jKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),DKo=o("model.train()"),GKo=l(),F($v.$$.fragment),qje=l(),id=a("h2"),kv=a("a"),J_e=a("span"),F(vy.$$.fragment),OKo=l(),Y_e=a("span"),VKo=o("AutoModelForVision2Seq"),jje=l(),Do=a("div"),F(Fy.$$.fragment),XKo=l(),dd=a("p"),zKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cz=a("a"),WKo=o("from_pretrained()"),QKo=o(" class method or the "),fz=a("a"),HKo=o("from_config()"),UKo=o(` class
method.`),JKo=l(),Ty=a("p"),YKo=o("This class cannot be instantiated directly using "),K_e=a("code"),KKo=o("__init__()"),ZKo=o(" (throws an error)."),eZo=l(),_t=a("div"),F(My.$$.fragment),oZo=l(),Z_e=a("p"),rZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tZo=l(),cd=a("p"),aZo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),nZo=o("not"),sZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),lZo=o("from_pretrained()"),iZo=o(" to load the model weights."),dZo=l(),F(Sv.$$.fragment),cZo=l(),io=a("div"),F(Ey.$$.fragment),fZo=l(),oue=a("p"),mZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gZo=l(),Da=a("p"),hZo=o("The model class to instantiate is selected based on the "),rue=a("code"),pZo=o("model_type"),_Zo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),uZo=o("pretrained_model_name_or_path"),bZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(":"),TZo=l(),nue=a("ul"),Rv=a("li"),sue=a("strong"),MZo=o("vision-encoder-decoder"),EZo=o(" \u2014 "),gz=a("a"),CZo=o("VisionEncoderDecoderModel"),wZo=o(" (Vision Encoder decoder model)"),AZo=l(),Pv=a("p"),LZo=o("The model is set in evaluation mode by default using "),lue=a("code"),yZo=o("model.eval()"),xZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),$Zo=o("model.train()"),kZo=l(),F(Bv.$$.fragment),Dje=l(),fd=a("h2"),Iv=a("a"),due=a("span"),F(Cy.$$.fragment),SZo=l(),cue=a("span"),RZo=o("AutoModelForAudioClassification"),Gje=l(),Go=a("div"),F(wy.$$.fragment),PZo=l(),md=a("p"),BZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hz=a("a"),IZo=o("from_pretrained()"),NZo=o(" class method or the "),pz=a("a"),qZo=o("from_config()"),jZo=o(` class
method.`),DZo=l(),Ay=a("p"),GZo=o("This class cannot be instantiated directly using "),fue=a("code"),OZo=o("__init__()"),VZo=o(" (throws an error)."),XZo=l(),ut=a("div"),F(Ly.$$.fragment),zZo=l(),mue=a("p"),WZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QZo=l(),gd=a("p"),HZo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),UZo=o("not"),JZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),YZo=o("from_pretrained()"),KZo=o(" to load the model weights."),ZZo=l(),F(Nv.$$.fragment),eer=l(),co=a("div"),F(yy.$$.fragment),oer=l(),hue=a("p"),rer=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ter=l(),Ga=a("p"),aer=o("The model class to instantiate is selected based on the "),pue=a("code"),ner=o("model_type"),ser=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),der=o("pretrained_model_name_or_path"),cer=o(":"),fer=l(),Se=a("ul"),qv=a("li"),bue=a("strong"),mer=o("data2vec-audio"),ger=o(" \u2014 "),uz=a("a"),her=o("Data2VecAudioForSequenceClassification"),per=o(" (Data2VecAudio model)"),_er=l(),jv=a("li"),vue=a("strong"),uer=o("hubert"),ber=o(" \u2014 "),bz=a("a"),ver=o("HubertForSequenceClassification"),Fer=o(" (Hubert model)"),Ter=l(),Dv=a("li"),Fue=a("strong"),Mer=o("sew"),Eer=o(" \u2014 "),vz=a("a"),Cer=o("SEWForSequenceClassification"),wer=o(" (SEW model)"),Aer=l(),Gv=a("li"),Tue=a("strong"),Ler=o("sew-d"),yer=o(" \u2014 "),Fz=a("a"),xer=o("SEWDForSequenceClassification"),$er=o(" (SEW-D model)"),ker=l(),Ov=a("li"),Mue=a("strong"),Ser=o("unispeech"),Rer=o(" \u2014 "),Tz=a("a"),Per=o("UniSpeechForSequenceClassification"),Ber=o(" (UniSpeech model)"),Ier=l(),Vv=a("li"),Eue=a("strong"),Ner=o("unispeech-sat"),qer=o(" \u2014 "),Mz=a("a"),jer=o("UniSpeechSatForSequenceClassification"),Der=o(" (UniSpeechSat model)"),Ger=l(),Xv=a("li"),Cue=a("strong"),Oer=o("wav2vec2"),Ver=o(" \u2014 "),Ez=a("a"),Xer=o("Wav2Vec2ForSequenceClassification"),zer=o(" (Wav2Vec2 model)"),Wer=l(),zv=a("li"),wue=a("strong"),Qer=o("wav2vec2-conformer"),Her=o(" \u2014 "),Cz=a("a"),Uer=o("Wav2Vec2ConformerForSequenceClassification"),Jer=o(" (Wav2Vec2-Conformer model)"),Yer=l(),Wv=a("li"),Aue=a("strong"),Ker=o("wavlm"),Zer=o(" \u2014 "),wz=a("a"),eor=o("WavLMForSequenceClassification"),oor=o(" (WavLM model)"),ror=l(),Qv=a("p"),tor=o("The model is set in evaluation mode by default using "),Lue=a("code"),aor=o("model.eval()"),nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),sor=o("model.train()"),lor=l(),F(Hv.$$.fragment),Oje=l(),hd=a("h2"),Uv=a("a"),xue=a("span"),F(xy.$$.fragment),ior=l(),$ue=a("span"),dor=o("AutoModelForAudioFrameClassification"),Vje=l(),Oo=a("div"),F($y.$$.fragment),cor=l(),pd=a("p"),mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Az=a("a"),gor=o("from_pretrained()"),hor=o(" class method or the "),Lz=a("a"),por=o("from_config()"),_or=o(` class
method.`),uor=l(),ky=a("p"),bor=o("This class cannot be instantiated directly using "),kue=a("code"),vor=o("__init__()"),For=o(" (throws an error)."),Tor=l(),bt=a("div"),F(Sy.$$.fragment),Mor=l(),Sue=a("p"),Eor=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Cor=l(),_d=a("p"),wor=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),Aor=o("not"),Lor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),yor=o("from_pretrained()"),xor=o(" to load the model weights."),$or=l(),F(Jv.$$.fragment),kor=l(),fo=a("div"),F(Ry.$$.fragment),Sor=l(),Pue=a("p"),Ror=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Por=l(),Oa=a("p"),Bor=o("The model class to instantiate is selected based on the "),Bue=a("code"),Ior=o("model_type"),Nor=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),qor=o("pretrained_model_name_or_path"),jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(":"),Oor=l(),Kr=a("ul"),Yv=a("li"),que=a("strong"),Vor=o("data2vec-audio"),Xor=o(" \u2014 "),xz=a("a"),zor=o("Data2VecAudioForAudioFrameClassification"),Wor=o(" (Data2VecAudio model)"),Qor=l(),Kv=a("li"),jue=a("strong"),Hor=o("unispeech-sat"),Uor=o(" \u2014 "),$z=a("a"),Jor=o("UniSpeechSatForAudioFrameClassification"),Yor=o(" (UniSpeechSat model)"),Kor=l(),Zv=a("li"),Due=a("strong"),Zor=o("wav2vec2"),err=o(" \u2014 "),kz=a("a"),orr=o("Wav2Vec2ForAudioFrameClassification"),rrr=o(" (Wav2Vec2 model)"),trr=l(),eF=a("li"),Gue=a("strong"),arr=o("wav2vec2-conformer"),nrr=o(" \u2014 "),Sz=a("a"),srr=o("Wav2Vec2ConformerForAudioFrameClassification"),lrr=o(" (Wav2Vec2-Conformer model)"),irr=l(),oF=a("li"),Oue=a("strong"),drr=o("wavlm"),crr=o(" \u2014 "),Rz=a("a"),frr=o("WavLMForAudioFrameClassification"),mrr=o(" (WavLM model)"),grr=l(),rF=a("p"),hrr=o("The model is set in evaluation mode by default using "),Vue=a("code"),prr=o("model.eval()"),_rr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),urr=o("model.train()"),brr=l(),F(tF.$$.fragment),Xje=l(),ud=a("h2"),aF=a("a"),zue=a("span"),F(Py.$$.fragment),vrr=l(),Wue=a("span"),Frr=o("AutoModelForCTC"),zje=l(),Vo=a("div"),F(By.$$.fragment),Trr=l(),bd=a("p"),Mrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Pz=a("a"),Err=o("from_pretrained()"),Crr=o(" class method or the "),Bz=a("a"),wrr=o("from_config()"),Arr=o(` class
method.`),Lrr=l(),Iy=a("p"),yrr=o("This class cannot be instantiated directly using "),Que=a("code"),xrr=o("__init__()"),$rr=o(" (throws an error)."),krr=l(),vt=a("div"),F(Ny.$$.fragment),Srr=l(),Hue=a("p"),Rrr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Prr=l(),vd=a("p"),Brr=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),Irr=o("not"),Nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),qrr=o("from_pretrained()"),jrr=o(" to load the model weights."),Drr=l(),F(nF.$$.fragment),Grr=l(),mo=a("div"),F(qy.$$.fragment),Orr=l(),Jue=a("p"),Vrr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Xrr=l(),Va=a("p"),zrr=o("The model class to instantiate is selected based on the "),Yue=a("code"),Wrr=o("model_type"),Qrr=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(":"),Krr=l(),Re=a("ul"),sF=a("li"),e4e=a("strong"),Zrr=o("data2vec-audio"),etr=o(" \u2014 "),Nz=a("a"),otr=o("Data2VecAudioForCTC"),rtr=o(" (Data2VecAudio model)"),ttr=l(),lF=a("li"),o4e=a("strong"),atr=o("hubert"),ntr=o(" \u2014 "),qz=a("a"),str=o("HubertForCTC"),ltr=o(" (Hubert model)"),itr=l(),iF=a("li"),r4e=a("strong"),dtr=o("sew"),ctr=o(" \u2014 "),jz=a("a"),ftr=o("SEWForCTC"),mtr=o(" (SEW model)"),gtr=l(),dF=a("li"),t4e=a("strong"),htr=o("sew-d"),ptr=o(" \u2014 "),Dz=a("a"),_tr=o("SEWDForCTC"),utr=o(" (SEW-D model)"),btr=l(),cF=a("li"),a4e=a("strong"),vtr=o("unispeech"),Ftr=o(" \u2014 "),Gz=a("a"),Ttr=o("UniSpeechForCTC"),Mtr=o(" (UniSpeech model)"),Etr=l(),fF=a("li"),n4e=a("strong"),Ctr=o("unispeech-sat"),wtr=o(" \u2014 "),Oz=a("a"),Atr=o("UniSpeechSatForCTC"),Ltr=o(" (UniSpeechSat model)"),ytr=l(),mF=a("li"),s4e=a("strong"),xtr=o("wav2vec2"),$tr=o(" \u2014 "),Vz=a("a"),ktr=o("Wav2Vec2ForCTC"),Str=o(" (Wav2Vec2 model)"),Rtr=l(),gF=a("li"),l4e=a("strong"),Ptr=o("wav2vec2-conformer"),Btr=o(" \u2014 "),Xz=a("a"),Itr=o("Wav2Vec2ConformerForCTC"),Ntr=o(" (Wav2Vec2-Conformer model)"),qtr=l(),hF=a("li"),i4e=a("strong"),jtr=o("wavlm"),Dtr=o(" \u2014 "),zz=a("a"),Gtr=o("WavLMForCTC"),Otr=o(" (WavLM model)"),Vtr=l(),pF=a("p"),Xtr=o("The model is set in evaluation mode by default using "),d4e=a("code"),ztr=o("model.eval()"),Wtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c4e=a("code"),Qtr=o("model.train()"),Htr=l(),F(_F.$$.fragment),Wje=l(),Fd=a("h2"),uF=a("a"),f4e=a("span"),F(jy.$$.fragment),Utr=l(),m4e=a("span"),Jtr=o("AutoModelForSpeechSeq2Seq"),Qje=l(),Xo=a("div"),F(Dy.$$.fragment),Ytr=l(),Td=a("p"),Ktr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wz=a("a"),Ztr=o("from_pretrained()"),ear=o(" class method or the "),Qz=a("a"),oar=o("from_config()"),rar=o(` class
method.`),tar=l(),Gy=a("p"),aar=o("This class cannot be instantiated directly using "),g4e=a("code"),nar=o("__init__()"),sar=o(" (throws an error)."),lar=l(),Ft=a("div"),F(Oy.$$.fragment),iar=l(),h4e=a("p"),dar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),car=l(),Md=a("p"),far=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),mar=o("not"),gar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),har=o("from_pretrained()"),par=o(" to load the model weights."),_ar=l(),F(bF.$$.fragment),uar=l(),go=a("div"),F(Vy.$$.fragment),bar=l(),_4e=a("p"),Far=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Tar=l(),Xa=a("p"),Mar=o("The model class to instantiate is selected based on the "),u4e=a("code"),Ear=o("model_type"),Car=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),war=o("pretrained_model_name_or_path"),Aar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),Lar=o("pretrained_model_name_or_path"),yar=o(":"),xar=l(),Xy=a("ul"),vF=a("li"),F4e=a("strong"),$ar=o("speech-encoder-decoder"),kar=o(" \u2014 "),Uz=a("a"),Sar=o("SpeechEncoderDecoderModel"),Rar=o(" (Speech Encoder decoder model)"),Par=l(),FF=a("li"),T4e=a("strong"),Bar=o("speech_to_text"),Iar=o(" \u2014 "),Jz=a("a"),Nar=o("Speech2TextForConditionalGeneration"),qar=o(" (Speech2Text model)"),jar=l(),TF=a("p"),Dar=o("The model is set in evaluation mode by default using "),M4e=a("code"),Gar=o("model.eval()"),Oar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E4e=a("code"),Var=o("model.train()"),Xar=l(),F(MF.$$.fragment),Hje=l(),Ed=a("h2"),EF=a("a"),C4e=a("span"),F(zy.$$.fragment),zar=l(),w4e=a("span"),War=o("AutoModelForAudioXVector"),Uje=l(),zo=a("div"),F(Wy.$$.fragment),Qar=l(),Cd=a("p"),Har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Yz=a("a"),Uar=o("from_pretrained()"),Jar=o(" class method or the "),Kz=a("a"),Yar=o("from_config()"),Kar=o(` class
method.`),Zar=l(),Qy=a("p"),enr=o("This class cannot be instantiated directly using "),A4e=a("code"),onr=o("__init__()"),rnr=o(" (throws an error)."),tnr=l(),Tt=a("div"),F(Hy.$$.fragment),anr=l(),L4e=a("p"),nnr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),snr=l(),wd=a("p"),lnr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),inr=o("not"),dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),cnr=o("from_pretrained()"),fnr=o(" to load the model weights."),mnr=l(),F(CF.$$.fragment),gnr=l(),ho=a("div"),F(Uy.$$.fragment),hnr=l(),x4e=a("p"),pnr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_nr=l(),za=a("p"),unr=o("The model class to instantiate is selected based on the "),$4e=a("code"),bnr=o("model_type"),vnr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),Fnr=o("pretrained_model_name_or_path"),Tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),Mnr=o("pretrained_model_name_or_path"),Enr=o(":"),Cnr=l(),Zr=a("ul"),wF=a("li"),R4e=a("strong"),wnr=o("data2vec-audio"),Anr=o(" \u2014 "),eW=a("a"),Lnr=o("Data2VecAudioForXVector"),ynr=o(" (Data2VecAudio model)"),xnr=l(),AF=a("li"),P4e=a("strong"),$nr=o("unispeech-sat"),knr=o(" \u2014 "),oW=a("a"),Snr=o("UniSpeechSatForXVector"),Rnr=o(" (UniSpeechSat model)"),Pnr=l(),LF=a("li"),B4e=a("strong"),Bnr=o("wav2vec2"),Inr=o(" \u2014 "),rW=a("a"),Nnr=o("Wav2Vec2ForXVector"),qnr=o(" (Wav2Vec2 model)"),jnr=l(),yF=a("li"),I4e=a("strong"),Dnr=o("wav2vec2-conformer"),Gnr=o(" \u2014 "),tW=a("a"),Onr=o("Wav2Vec2ConformerForXVector"),Vnr=o(" (Wav2Vec2-Conformer model)"),Xnr=l(),xF=a("li"),N4e=a("strong"),znr=o("wavlm"),Wnr=o(" \u2014 "),aW=a("a"),Qnr=o("WavLMForXVector"),Hnr=o(" (WavLM model)"),Unr=l(),$F=a("p"),Jnr=o("The model is set in evaluation mode by default using "),q4e=a("code"),Ynr=o("model.eval()"),Knr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j4e=a("code"),Znr=o("model.train()"),esr=l(),F(kF.$$.fragment),Jje=l(),Ad=a("h2"),SF=a("a"),D4e=a("span"),F(Jy.$$.fragment),osr=l(),G4e=a("span"),rsr=o("AutoModelForMaskedImageModeling"),Yje=l(),Wo=a("div"),F(Yy.$$.fragment),tsr=l(),Ld=a("p"),asr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nW=a("a"),nsr=o("from_pretrained()"),ssr=o(" class method or the "),sW=a("a"),lsr=o("from_config()"),isr=o(` class
method.`),dsr=l(),Ky=a("p"),csr=o("This class cannot be instantiated directly using "),O4e=a("code"),fsr=o("__init__()"),msr=o(" (throws an error)."),gsr=l(),Mt=a("div"),F(Zy.$$.fragment),hsr=l(),V4e=a("p"),psr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_sr=l(),yd=a("p"),usr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),bsr=o("not"),vsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Fsr=o("from_pretrained()"),Tsr=o(" to load the model weights."),Msr=l(),F(RF.$$.fragment),Esr=l(),po=a("div"),F(e8.$$.fragment),Csr=l(),z4e=a("p"),wsr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Asr=l(),Wa=a("p"),Lsr=o("The model class to instantiate is selected based on the "),W4e=a("code"),ysr=o("model_type"),xsr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),$sr=o("pretrained_model_name_or_path"),ksr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),Ssr=o("pretrained_model_name_or_path"),Rsr=o(":"),Psr=l(),xd=a("ul"),PF=a("li"),U4e=a("strong"),Bsr=o("deit"),Isr=o(" \u2014 "),iW=a("a"),Nsr=o("DeiTForMaskedImageModeling"),qsr=o(" (DeiT model)"),jsr=l(),BF=a("li"),J4e=a("strong"),Dsr=o("swin"),Gsr=o(" \u2014 "),dW=a("a"),Osr=o("SwinForMaskedImageModeling"),Vsr=o(" (Swin Transformer model)"),Xsr=l(),IF=a("li"),Y4e=a("strong"),zsr=o("vit"),Wsr=o(" \u2014 "),cW=a("a"),Qsr=o("ViTForMaskedImageModeling"),Hsr=o(" (ViT model)"),Usr=l(),NF=a("p"),Jsr=o("The model is set in evaluation mode by default using "),K4e=a("code"),Ysr=o("model.eval()"),Ksr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z4e=a("code"),Zsr=o("model.train()"),elr=l(),F(qF.$$.fragment),Kje=l(),$d=a("h2"),jF=a("a"),e1e=a("span"),F(o8.$$.fragment),olr=l(),o1e=a("span"),rlr=o("AutoModelForObjectDetection"),Zje=l(),Qo=a("div"),F(r8.$$.fragment),tlr=l(),kd=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fW=a("a"),nlr=o("from_pretrained()"),slr=o(" class method or the "),mW=a("a"),llr=o("from_config()"),ilr=o(` class
method.`),dlr=l(),t8=a("p"),clr=o("This class cannot be instantiated directly using "),r1e=a("code"),flr=o("__init__()"),mlr=o(" (throws an error)."),glr=l(),Et=a("div"),F(a8.$$.fragment),hlr=l(),t1e=a("p"),plr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_lr=l(),Sd=a("p"),ulr=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),Flr=o("from_pretrained()"),Tlr=o(" to load the model weights."),Mlr=l(),F(DF.$$.fragment),Elr=l(),_o=a("div"),F(n8.$$.fragment),Clr=l(),n1e=a("p"),wlr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Alr=l(),Qa=a("p"),Llr=o("The model class to instantiate is selected based on the "),s1e=a("code"),ylr=o("model_type"),xlr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),Slr=o("pretrained_model_name_or_path"),Rlr=o(":"),Plr=l(),s8=a("ul"),GF=a("li"),d1e=a("strong"),Blr=o("detr"),Ilr=o(" \u2014 "),hW=a("a"),Nlr=o("DetrForObjectDetection"),qlr=o(" (DETR model)"),jlr=l(),OF=a("li"),c1e=a("strong"),Dlr=o("yolos"),Glr=o(" \u2014 "),pW=a("a"),Olr=o("YolosForObjectDetection"),Vlr=o(" (YOLOS model)"),Xlr=l(),VF=a("p"),zlr=o("The model is set in evaluation mode by default using "),f1e=a("code"),Wlr=o("model.eval()"),Qlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=a("code"),Hlr=o("model.train()"),Ulr=l(),F(XF.$$.fragment),eDe=l(),Rd=a("h2"),zF=a("a"),g1e=a("span"),F(l8.$$.fragment),Jlr=l(),h1e=a("span"),Ylr=o("AutoModelForImageSegmentation"),oDe=l(),Ho=a("div"),F(i8.$$.fragment),Klr=l(),Pd=a("p"),Zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_W=a("a"),eir=o("from_pretrained()"),oir=o(" class method or the "),uW=a("a"),rir=o("from_config()"),tir=o(` class
method.`),air=l(),d8=a("p"),nir=o("This class cannot be instantiated directly using "),p1e=a("code"),sir=o("__init__()"),lir=o(" (throws an error)."),iir=l(),Ct=a("div"),F(c8.$$.fragment),dir=l(),_1e=a("p"),cir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fir=l(),Bd=a("p"),mir=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),gir=o("not"),hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),pir=o("from_pretrained()"),_ir=o(" to load the model weights."),uir=l(),F(WF.$$.fragment),bir=l(),uo=a("div"),F(f8.$$.fragment),vir=l(),b1e=a("p"),Fir=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tir=l(),Ha=a("p"),Mir=o("The model class to instantiate is selected based on the "),v1e=a("code"),Eir=o("model_type"),Cir=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),wir=o("pretrained_model_name_or_path"),Air=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),Lir=o("pretrained_model_name_or_path"),yir=o(":"),xir=l(),M1e=a("ul"),QF=a("li"),E1e=a("strong"),$ir=o("detr"),kir=o(" \u2014 "),vW=a("a"),Sir=o("DetrForSegmentation"),Rir=o(" (DETR model)"),Pir=l(),HF=a("p"),Bir=o("The model is set in evaluation mode by default using "),C1e=a("code"),Iir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=a("code"),qir=o("model.train()"),jir=l(),F(UF.$$.fragment),rDe=l(),Id=a("h2"),JF=a("a"),A1e=a("span"),F(m8.$$.fragment),Dir=l(),L1e=a("span"),Gir=o("AutoModelForSemanticSegmentation"),tDe=l(),Uo=a("div"),F(g8.$$.fragment),Oir=l(),Nd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),TW=a("a"),Wir=o("from_config()"),Qir=o(` class
method.`),Hir=l(),h8=a("p"),Uir=o("This class cannot be instantiated directly using "),y1e=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),wt=a("div"),F(p8.$$.fragment),Zir=l(),x1e=a("p"),edr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),odr=l(),qd=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(YF.$$.fragment),idr=l(),bo=a("div"),F(_8.$$.fragment),ddr=l(),k1e=a("p"),cdr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fdr=l(),Ua=a("p"),mdr=o("The model class to instantiate is selected based on the "),S1e=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),Ja=a("ul"),KF=a("li"),B1e=a("strong"),Fdr=o("beit"),Tdr=o(" \u2014 "),EW=a("a"),Mdr=o("BeitForSemanticSegmentation"),Edr=o(" (BEiT model)"),Cdr=l(),ZF=a("li"),I1e=a("strong"),wdr=o("data2vec-vision"),Adr=o(" \u2014 "),CW=a("a"),Ldr=o("Data2VecVisionForSemanticSegmentation"),ydr=o(" (Data2VecVision model)"),xdr=l(),eT=a("li"),N1e=a("strong"),$dr=o("dpt"),kdr=o(" \u2014 "),wW=a("a"),Sdr=o("DPTForSemanticSegmentation"),Rdr=o(" (DPT model)"),Pdr=l(),oT=a("li"),q1e=a("strong"),Bdr=o("segformer"),Idr=o(" \u2014 "),AW=a("a"),Ndr=o("SegformerForSemanticSegmentation"),qdr=o(" (SegFormer model)"),jdr=l(),rT=a("p"),Ddr=o("The model is set in evaluation mode by default using "),j1e=a("code"),Gdr=o("model.eval()"),Odr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=a("code"),Vdr=o("model.train()"),Xdr=l(),F(tT.$$.fragment),aDe=l(),jd=a("h2"),aT=a("a"),G1e=a("span"),F(u8.$$.fragment),zdr=l(),O1e=a("span"),Wdr=o("AutoModelForInstanceSegmentation"),nDe=l(),Jo=a("div"),F(b8.$$.fragment),Qdr=l(),Dd=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),LW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" class method or the "),yW=a("a"),Ydr=o("from_config()"),Kdr=o(` class
method.`),Zdr=l(),v8=a("p"),ecr=o("This class cannot be instantiated directly using "),V1e=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),At=a("div"),F(F8.$$.fragment),acr=l(),X1e=a("p"),ncr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),scr=l(),Gd=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),ccr=o("from_pretrained()"),fcr=o(" to load the model weights."),mcr=l(),F(nT.$$.fragment),gcr=l(),vo=a("div"),F(T8.$$.fragment),hcr=l(),W1e=a("p"),pcr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_cr=l(),Ya=a("p"),ucr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),bcr=o("model_type"),vcr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),Mcr=o("pretrained_model_name_or_path"),Ecr=o(":"),Ccr=l(),J1e=a("ul"),sT=a("li"),Y1e=a("strong"),wcr=o("maskformer"),Acr=o(" \u2014 "),$W=a("a"),Lcr=o("MaskFormerForInstanceSegmentation"),ycr=o(" (MaskFormer model)"),xcr=l(),lT=a("p"),$cr=o("The model is set in evaluation mode by default using "),K1e=a("code"),kcr=o("model.eval()"),Scr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=a("code"),Rcr=o("model.train()"),Pcr=l(),F(iT.$$.fragment),sDe=l(),Od=a("h2"),dT=a("a"),e7e=a("span"),F(M8.$$.fragment),Bcr=l(),o7e=a("span"),Icr=o("TFAutoModel"),lDe=l(),Yo=a("div"),F(E8.$$.fragment),Ncr=l(),Vd=a("p"),qcr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kW=a("a"),jcr=o("from_pretrained()"),Dcr=o(" class method or the "),SW=a("a"),Gcr=o("from_config()"),Ocr=o(` class
method.`),Vcr=l(),C8=a("p"),Xcr=o("This class cannot be instantiated directly using "),r7e=a("code"),zcr=o("__init__()"),Wcr=o(" (throws an error)."),Qcr=l(),Lt=a("div"),F(w8.$$.fragment),Hcr=l(),t7e=a("p"),Ucr=o("Instantiates one of the base model classes of the library from a configuration."),Jcr=l(),Xd=a("p"),Ycr=o(`Note:
Loading a model from its configuration file does `),a7e=a("strong"),Kcr=o("not"),Zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),efr=o("from_pretrained()"),ofr=o(" to load the model weights."),rfr=l(),F(cT.$$.fragment),tfr=l(),wr=a("div"),F(A8.$$.fragment),afr=l(),n7e=a("p"),nfr=o("Instantiate one of the base model classes of the library from a pretrained model."),sfr=l(),Ka=a("p"),lfr=o("The model class to instantiate is selected based on the "),s7e=a("code"),ifr=o("model_type"),dfr=o(` property of the config object (either
passed as an argument or loaded from `),l7e=a("code"),cfr=o("pretrained_model_name_or_path"),ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(":"),hfr=l(),q=a("ul"),fT=a("li"),d7e=a("strong"),pfr=o("albert"),_fr=o(" \u2014 "),PW=a("a"),ufr=o("TFAlbertModel"),bfr=o(" (ALBERT model)"),vfr=l(),mT=a("li"),c7e=a("strong"),Ffr=o("bart"),Tfr=o(" \u2014 "),BW=a("a"),Mfr=o("TFBartModel"),Efr=o(" (BART model)"),Cfr=l(),gT=a("li"),f7e=a("strong"),wfr=o("bert"),Afr=o(" \u2014 "),IW=a("a"),Lfr=o("TFBertModel"),yfr=o(" (BERT model)"),xfr=l(),hT=a("li"),m7e=a("strong"),$fr=o("blenderbot"),kfr=o(" \u2014 "),NW=a("a"),Sfr=o("TFBlenderbotModel"),Rfr=o(" (Blenderbot model)"),Pfr=l(),pT=a("li"),g7e=a("strong"),Bfr=o("blenderbot-small"),Ifr=o(" \u2014 "),qW=a("a"),Nfr=o("TFBlenderbotSmallModel"),qfr=o(" (BlenderbotSmall model)"),jfr=l(),_T=a("li"),h7e=a("strong"),Dfr=o("camembert"),Gfr=o(" \u2014 "),jW=a("a"),Ofr=o("TFCamembertModel"),Vfr=o(" (CamemBERT model)"),Xfr=l(),uT=a("li"),p7e=a("strong"),zfr=o("clip"),Wfr=o(" \u2014 "),DW=a("a"),Qfr=o("TFCLIPModel"),Hfr=o(" (CLIP model)"),Ufr=l(),bT=a("li"),_7e=a("strong"),Jfr=o("convbert"),Yfr=o(" \u2014 "),GW=a("a"),Kfr=o("TFConvBertModel"),Zfr=o(" (ConvBERT model)"),emr=l(),vT=a("li"),u7e=a("strong"),omr=o("convnext"),rmr=o(" \u2014 "),OW=a("a"),tmr=o("TFConvNextModel"),amr=o(" (ConvNeXT model)"),nmr=l(),FT=a("li"),b7e=a("strong"),smr=o("ctrl"),lmr=o(" \u2014 "),VW=a("a"),imr=o("TFCTRLModel"),dmr=o(" (CTRL model)"),cmr=l(),TT=a("li"),v7e=a("strong"),fmr=o("data2vec-vision"),mmr=o(" \u2014 "),XW=a("a"),gmr=o("TFData2VecVisionModel"),hmr=o(" (Data2VecVision model)"),pmr=l(),MT=a("li"),F7e=a("strong"),_mr=o("deberta"),umr=o(" \u2014 "),zW=a("a"),bmr=o("TFDebertaModel"),vmr=o(" (DeBERTa model)"),Fmr=l(),ET=a("li"),T7e=a("strong"),Tmr=o("deberta-v2"),Mmr=o(" \u2014 "),WW=a("a"),Emr=o("TFDebertaV2Model"),Cmr=o(" (DeBERTa-v2 model)"),wmr=l(),CT=a("li"),M7e=a("strong"),Amr=o("distilbert"),Lmr=o(" \u2014 "),QW=a("a"),ymr=o("TFDistilBertModel"),xmr=o(" (DistilBERT model)"),$mr=l(),wT=a("li"),E7e=a("strong"),kmr=o("dpr"),Smr=o(" \u2014 "),HW=a("a"),Rmr=o("TFDPRQuestionEncoder"),Pmr=o(" (DPR model)"),Bmr=l(),AT=a("li"),C7e=a("strong"),Imr=o("electra"),Nmr=o(" \u2014 "),UW=a("a"),qmr=o("TFElectraModel"),jmr=o(" (ELECTRA model)"),Dmr=l(),LT=a("li"),w7e=a("strong"),Gmr=o("flaubert"),Omr=o(" \u2014 "),JW=a("a"),Vmr=o("TFFlaubertModel"),Xmr=o(" (FlauBERT model)"),zmr=l(),Ns=a("li"),A7e=a("strong"),Wmr=o("funnel"),Qmr=o(" \u2014 "),YW=a("a"),Hmr=o("TFFunnelModel"),Umr=o(" or "),KW=a("a"),Jmr=o("TFFunnelBaseModel"),Ymr=o(" (Funnel Transformer model)"),Kmr=l(),yT=a("li"),L7e=a("strong"),Zmr=o("gpt2"),egr=o(" \u2014 "),ZW=a("a"),ogr=o("TFGPT2Model"),rgr=o(" (OpenAI GPT-2 model)"),tgr=l(),xT=a("li"),y7e=a("strong"),agr=o("gptj"),ngr=o(" \u2014 "),eQ=a("a"),sgr=o("TFGPTJModel"),lgr=o(" (GPT-J model)"),igr=l(),$T=a("li"),x7e=a("strong"),dgr=o("hubert"),cgr=o(" \u2014 "),oQ=a("a"),fgr=o("TFHubertModel"),mgr=o(" (Hubert model)"),ggr=l(),kT=a("li"),$7e=a("strong"),hgr=o("layoutlm"),pgr=o(" \u2014 "),rQ=a("a"),_gr=o("TFLayoutLMModel"),ugr=o(" (LayoutLM model)"),bgr=l(),ST=a("li"),k7e=a("strong"),vgr=o("led"),Fgr=o(" \u2014 "),tQ=a("a"),Tgr=o("TFLEDModel"),Mgr=o(" (LED model)"),Egr=l(),RT=a("li"),S7e=a("strong"),Cgr=o("longformer"),wgr=o(" \u2014 "),aQ=a("a"),Agr=o("TFLongformerModel"),Lgr=o(" (Longformer model)"),ygr=l(),PT=a("li"),R7e=a("strong"),xgr=o("lxmert"),$gr=o(" \u2014 "),nQ=a("a"),kgr=o("TFLxmertModel"),Sgr=o(" (LXMERT model)"),Rgr=l(),BT=a("li"),P7e=a("strong"),Pgr=o("marian"),Bgr=o(" \u2014 "),sQ=a("a"),Igr=o("TFMarianModel"),Ngr=o(" (Marian model)"),qgr=l(),IT=a("li"),B7e=a("strong"),jgr=o("mbart"),Dgr=o(" \u2014 "),lQ=a("a"),Ggr=o("TFMBartModel"),Ogr=o(" (mBART model)"),Vgr=l(),NT=a("li"),I7e=a("strong"),Xgr=o("mobilebert"),zgr=o(" \u2014 "),iQ=a("a"),Wgr=o("TFMobileBertModel"),Qgr=o(" (MobileBERT model)"),Hgr=l(),qT=a("li"),N7e=a("strong"),Ugr=o("mpnet"),Jgr=o(" \u2014 "),dQ=a("a"),Ygr=o("TFMPNetModel"),Kgr=o(" (MPNet model)"),Zgr=l(),jT=a("li"),q7e=a("strong"),ehr=o("mt5"),ohr=o(" \u2014 "),cQ=a("a"),rhr=o("TFMT5Model"),thr=o(" (MT5 model)"),ahr=l(),DT=a("li"),j7e=a("strong"),nhr=o("openai-gpt"),shr=o(" \u2014 "),fQ=a("a"),lhr=o("TFOpenAIGPTModel"),ihr=o(" (OpenAI GPT model)"),dhr=l(),GT=a("li"),D7e=a("strong"),chr=o("opt"),fhr=o(" \u2014 "),mQ=a("a"),mhr=o("TFOPTModel"),ghr=o(" (OPT model)"),hhr=l(),OT=a("li"),G7e=a("strong"),phr=o("pegasus"),_hr=o(" \u2014 "),gQ=a("a"),uhr=o("TFPegasusModel"),bhr=o(" (Pegasus model)"),vhr=l(),VT=a("li"),O7e=a("strong"),Fhr=o("rembert"),Thr=o(" \u2014 "),hQ=a("a"),Mhr=o("TFRemBertModel"),Ehr=o(" (RemBERT model)"),Chr=l(),XT=a("li"),V7e=a("strong"),whr=o("roberta"),Ahr=o(" \u2014 "),pQ=a("a"),Lhr=o("TFRobertaModel"),yhr=o(" (RoBERTa model)"),xhr=l(),zT=a("li"),X7e=a("strong"),$hr=o("roformer"),khr=o(" \u2014 "),_Q=a("a"),Shr=o("TFRoFormerModel"),Rhr=o(" (RoFormer model)"),Phr=l(),WT=a("li"),z7e=a("strong"),Bhr=o("speech_to_text"),Ihr=o(" \u2014 "),uQ=a("a"),Nhr=o("TFSpeech2TextModel"),qhr=o(" (Speech2Text model)"),jhr=l(),QT=a("li"),W7e=a("strong"),Dhr=o("swin"),Ghr=o(" \u2014 "),bQ=a("a"),Ohr=o("TFSwinModel"),Vhr=o(" (Swin Transformer model)"),Xhr=l(),HT=a("li"),Q7e=a("strong"),zhr=o("t5"),Whr=o(" \u2014 "),vQ=a("a"),Qhr=o("TFT5Model"),Hhr=o(" (T5 model)"),Uhr=l(),UT=a("li"),H7e=a("strong"),Jhr=o("tapas"),Yhr=o(" \u2014 "),FQ=a("a"),Khr=o("TFTapasModel"),Zhr=o(" (TAPAS model)"),epr=l(),JT=a("li"),U7e=a("strong"),opr=o("transfo-xl"),rpr=o(" \u2014 "),TQ=a("a"),tpr=o("TFTransfoXLModel"),apr=o(" (Transformer-XL model)"),npr=l(),YT=a("li"),J7e=a("strong"),spr=o("vit"),lpr=o(" \u2014 "),MQ=a("a"),ipr=o("TFViTModel"),dpr=o(" (ViT model)"),cpr=l(),KT=a("li"),Y7e=a("strong"),fpr=o("vit_mae"),mpr=o(" \u2014 "),EQ=a("a"),gpr=o("TFViTMAEModel"),hpr=o(" (ViTMAE model)"),ppr=l(),ZT=a("li"),K7e=a("strong"),_pr=o("wav2vec2"),upr=o(" \u2014 "),CQ=a("a"),bpr=o("TFWav2Vec2Model"),vpr=o(" (Wav2Vec2 model)"),Fpr=l(),eM=a("li"),Z7e=a("strong"),Tpr=o("xlm"),Mpr=o(" \u2014 "),wQ=a("a"),Epr=o("TFXLMModel"),Cpr=o(" (XLM model)"),wpr=l(),oM=a("li"),ebe=a("strong"),Apr=o("xlm-roberta"),Lpr=o(" \u2014 "),AQ=a("a"),ypr=o("TFXLMRobertaModel"),xpr=o(" (XLM-RoBERTa model)"),$pr=l(),rM=a("li"),obe=a("strong"),kpr=o("xlnet"),Spr=o(" \u2014 "),LQ=a("a"),Rpr=o("TFXLNetModel"),Ppr=o(" (XLNet model)"),Bpr=l(),F(tM.$$.fragment),iDe=l(),zd=a("h2"),aM=a("a"),rbe=a("span"),F(L8.$$.fragment),Ipr=l(),tbe=a("span"),Npr=o("TFAutoModelForPreTraining"),dDe=l(),Ko=a("div"),F(y8.$$.fragment),qpr=l(),Wd=a("p"),jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yQ=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" class method or the "),xQ=a("a"),Opr=o("from_config()"),Vpr=o(` class
method.`),Xpr=l(),x8=a("p"),zpr=o("This class cannot be instantiated directly using "),abe=a("code"),Wpr=o("__init__()"),Qpr=o(" (throws an error)."),Hpr=l(),yt=a("div"),F($8.$$.fragment),Upr=l(),nbe=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ypr=l(),Qd=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),Zpr=o("not"),e_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),o_r=o("from_pretrained()"),r_r=o(" to load the model weights."),t_r=l(),F(nM.$$.fragment),a_r=l(),Ar=a("div"),F(k8.$$.fragment),n_r=l(),lbe=a("p"),s_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l_r=l(),Za=a("p"),i_r=o("The model class to instantiate is selected based on the "),ibe=a("code"),d_r=o("model_type"),c_r=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),f_r=o("pretrained_model_name_or_path"),m_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(":"),p_r=l(),se=a("ul"),sM=a("li"),fbe=a("strong"),__r=o("albert"),u_r=o(" \u2014 "),kQ=a("a"),b_r=o("TFAlbertForPreTraining"),v_r=o(" (ALBERT model)"),F_r=l(),lM=a("li"),mbe=a("strong"),T_r=o("bart"),M_r=o(" \u2014 "),SQ=a("a"),E_r=o("TFBartForConditionalGeneration"),C_r=o(" (BART model)"),w_r=l(),iM=a("li"),gbe=a("strong"),A_r=o("bert"),L_r=o(" \u2014 "),RQ=a("a"),y_r=o("TFBertForPreTraining"),x_r=o(" (BERT model)"),$_r=l(),dM=a("li"),hbe=a("strong"),k_r=o("camembert"),S_r=o(" \u2014 "),PQ=a("a"),R_r=o("TFCamembertForMaskedLM"),P_r=o(" (CamemBERT model)"),B_r=l(),cM=a("li"),pbe=a("strong"),I_r=o("ctrl"),N_r=o(" \u2014 "),BQ=a("a"),q_r=o("TFCTRLLMHeadModel"),j_r=o(" (CTRL model)"),D_r=l(),fM=a("li"),_be=a("strong"),G_r=o("distilbert"),O_r=o(" \u2014 "),IQ=a("a"),V_r=o("TFDistilBertForMaskedLM"),X_r=o(" (DistilBERT model)"),z_r=l(),mM=a("li"),ube=a("strong"),W_r=o("electra"),Q_r=o(" \u2014 "),NQ=a("a"),H_r=o("TFElectraForPreTraining"),U_r=o(" (ELECTRA model)"),J_r=l(),gM=a("li"),bbe=a("strong"),Y_r=o("flaubert"),K_r=o(" \u2014 "),qQ=a("a"),Z_r=o("TFFlaubertWithLMHeadModel"),eur=o(" (FlauBERT model)"),our=l(),hM=a("li"),vbe=a("strong"),rur=o("funnel"),tur=o(" \u2014 "),jQ=a("a"),aur=o("TFFunnelForPreTraining"),nur=o(" (Funnel Transformer model)"),sur=l(),pM=a("li"),Fbe=a("strong"),lur=o("gpt2"),iur=o(" \u2014 "),DQ=a("a"),dur=o("TFGPT2LMHeadModel"),cur=o(" (OpenAI GPT-2 model)"),fur=l(),_M=a("li"),Tbe=a("strong"),mur=o("layoutlm"),gur=o(" \u2014 "),GQ=a("a"),hur=o("TFLayoutLMForMaskedLM"),pur=o(" (LayoutLM model)"),_ur=l(),uM=a("li"),Mbe=a("strong"),uur=o("lxmert"),bur=o(" \u2014 "),OQ=a("a"),vur=o("TFLxmertForPreTraining"),Fur=o(" (LXMERT model)"),Tur=l(),bM=a("li"),Ebe=a("strong"),Mur=o("mobilebert"),Eur=o(" \u2014 "),VQ=a("a"),Cur=o("TFMobileBertForPreTraining"),wur=o(" (MobileBERT model)"),Aur=l(),vM=a("li"),Cbe=a("strong"),Lur=o("mpnet"),yur=o(" \u2014 "),XQ=a("a"),xur=o("TFMPNetForMaskedLM"),$ur=o(" (MPNet model)"),kur=l(),FM=a("li"),wbe=a("strong"),Sur=o("openai-gpt"),Rur=o(" \u2014 "),zQ=a("a"),Pur=o("TFOpenAIGPTLMHeadModel"),Bur=o(" (OpenAI GPT model)"),Iur=l(),TM=a("li"),Abe=a("strong"),Nur=o("roberta"),qur=o(" \u2014 "),WQ=a("a"),jur=o("TFRobertaForMaskedLM"),Dur=o(" (RoBERTa model)"),Gur=l(),MM=a("li"),Lbe=a("strong"),Our=o("t5"),Vur=o(" \u2014 "),QQ=a("a"),Xur=o("TFT5ForConditionalGeneration"),zur=o(" (T5 model)"),Wur=l(),EM=a("li"),ybe=a("strong"),Qur=o("tapas"),Hur=o(" \u2014 "),HQ=a("a"),Uur=o("TFTapasForMaskedLM"),Jur=o(" (TAPAS model)"),Yur=l(),CM=a("li"),xbe=a("strong"),Kur=o("transfo-xl"),Zur=o(" \u2014 "),UQ=a("a"),e4r=o("TFTransfoXLLMHeadModel"),o4r=o(" (Transformer-XL model)"),r4r=l(),wM=a("li"),$be=a("strong"),t4r=o("vit_mae"),a4r=o(" \u2014 "),JQ=a("a"),n4r=o("TFViTMAEForPreTraining"),s4r=o(" (ViTMAE model)"),l4r=l(),AM=a("li"),kbe=a("strong"),i4r=o("xlm"),d4r=o(" \u2014 "),YQ=a("a"),c4r=o("TFXLMWithLMHeadModel"),f4r=o(" (XLM model)"),m4r=l(),LM=a("li"),Sbe=a("strong"),g4r=o("xlm-roberta"),h4r=o(" \u2014 "),KQ=a("a"),p4r=o("TFXLMRobertaForMaskedLM"),_4r=o(" (XLM-RoBERTa model)"),u4r=l(),yM=a("li"),Rbe=a("strong"),b4r=o("xlnet"),v4r=o(" \u2014 "),ZQ=a("a"),F4r=o("TFXLNetLMHeadModel"),T4r=o(" (XLNet model)"),M4r=l(),F(xM.$$.fragment),cDe=l(),Hd=a("h2"),$M=a("a"),Pbe=a("span"),F(S8.$$.fragment),E4r=l(),Bbe=a("span"),C4r=o("TFAutoModelForCausalLM"),fDe=l(),Zo=a("div"),F(R8.$$.fragment),w4r=l(),Ud=a("p"),A4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eH=a("a"),L4r=o("from_pretrained()"),y4r=o(" class method or the "),oH=a("a"),x4r=o("from_config()"),$4r=o(` class
method.`),k4r=l(),P8=a("p"),S4r=o("This class cannot be instantiated directly using "),Ibe=a("code"),R4r=o("__init__()"),P4r=o(" (throws an error)."),B4r=l(),xt=a("div"),F(B8.$$.fragment),I4r=l(),Nbe=a("p"),N4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),q4r=l(),Jd=a("p"),j4r=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),D4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),O4r=o("from_pretrained()"),V4r=o(" to load the model weights."),X4r=l(),F(kM.$$.fragment),z4r=l(),Lr=a("div"),F(I8.$$.fragment),W4r=l(),jbe=a("p"),Q4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H4r=l(),en=a("p"),U4r=o("The model class to instantiate is selected based on the "),Dbe=a("code"),J4r=o("model_type"),Y4r=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),e1r=o("pretrained_model_name_or_path"),o1r=o(":"),r1r=l(),Me=a("ul"),SM=a("li"),Vbe=a("strong"),t1r=o("bert"),a1r=o(" \u2014 "),tH=a("a"),n1r=o("TFBertLMHeadModel"),s1r=o(" (BERT model)"),l1r=l(),RM=a("li"),Xbe=a("strong"),i1r=o("camembert"),d1r=o(" \u2014 "),aH=a("a"),c1r=o("TFCamembertForCausalLM"),f1r=o(" (CamemBERT model)"),m1r=l(),PM=a("li"),zbe=a("strong"),g1r=o("ctrl"),h1r=o(" \u2014 "),nH=a("a"),p1r=o("TFCTRLLMHeadModel"),_1r=o(" (CTRL model)"),u1r=l(),BM=a("li"),Wbe=a("strong"),b1r=o("gpt2"),v1r=o(" \u2014 "),sH=a("a"),F1r=o("TFGPT2LMHeadModel"),T1r=o(" (OpenAI GPT-2 model)"),M1r=l(),IM=a("li"),Qbe=a("strong"),E1r=o("gptj"),C1r=o(" \u2014 "),lH=a("a"),w1r=o("TFGPTJForCausalLM"),A1r=o(" (GPT-J model)"),L1r=l(),NM=a("li"),Hbe=a("strong"),y1r=o("openai-gpt"),x1r=o(" \u2014 "),iH=a("a"),$1r=o("TFOpenAIGPTLMHeadModel"),k1r=o(" (OpenAI GPT model)"),S1r=l(),qM=a("li"),Ube=a("strong"),R1r=o("opt"),P1r=o(" \u2014 "),dH=a("a"),B1r=o("TFOPTForCausalLM"),I1r=o(" (OPT model)"),N1r=l(),jM=a("li"),Jbe=a("strong"),q1r=o("rembert"),j1r=o(" \u2014 "),cH=a("a"),D1r=o("TFRemBertForCausalLM"),G1r=o(" (RemBERT model)"),O1r=l(),DM=a("li"),Ybe=a("strong"),V1r=o("roberta"),X1r=o(" \u2014 "),fH=a("a"),z1r=o("TFRobertaForCausalLM"),W1r=o(" (RoBERTa model)"),Q1r=l(),GM=a("li"),Kbe=a("strong"),H1r=o("roformer"),U1r=o(" \u2014 "),mH=a("a"),J1r=o("TFRoFormerForCausalLM"),Y1r=o(" (RoFormer model)"),K1r=l(),OM=a("li"),Zbe=a("strong"),Z1r=o("transfo-xl"),e7r=o(" \u2014 "),gH=a("a"),o7r=o("TFTransfoXLLMHeadModel"),r7r=o(" (Transformer-XL model)"),t7r=l(),VM=a("li"),e2e=a("strong"),a7r=o("xlm"),n7r=o(" \u2014 "),hH=a("a"),s7r=o("TFXLMWithLMHeadModel"),l7r=o(" (XLM model)"),i7r=l(),XM=a("li"),o2e=a("strong"),d7r=o("xlnet"),c7r=o(" \u2014 "),pH=a("a"),f7r=o("TFXLNetLMHeadModel"),m7r=o(" (XLNet model)"),g7r=l(),F(zM.$$.fragment),mDe=l(),Yd=a("h2"),WM=a("a"),r2e=a("span"),F(N8.$$.fragment),h7r=l(),t2e=a("span"),p7r=o("TFAutoModelForImageClassification"),gDe=l(),er=a("div"),F(q8.$$.fragment),_7r=l(),Kd=a("p"),u7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_H=a("a"),b7r=o("from_pretrained()"),v7r=o(" class method or the "),uH=a("a"),F7r=o("from_config()"),T7r=o(` class
method.`),M7r=l(),j8=a("p"),E7r=o("This class cannot be instantiated directly using "),a2e=a("code"),C7r=o("__init__()"),w7r=o(" (throws an error)."),A7r=l(),$t=a("div"),F(D8.$$.fragment),L7r=l(),n2e=a("p"),y7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x7r=l(),Zd=a("p"),$7r=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),k7r=o("not"),S7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),R7r=o("from_pretrained()"),P7r=o(" to load the model weights."),B7r=l(),F(QM.$$.fragment),I7r=l(),yr=a("div"),F(G8.$$.fragment),N7r=l(),l2e=a("p"),q7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j7r=l(),on=a("p"),D7r=o("The model class to instantiate is selected based on the "),i2e=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(":"),Q7r=l(),rn=a("ul"),HM=a("li"),f2e=a("strong"),H7r=o("convnext"),U7r=o(" \u2014 "),vH=a("a"),J7r=o("TFConvNextForImageClassification"),Y7r=o(" (ConvNeXT model)"),K7r=l(),UM=a("li"),m2e=a("strong"),Z7r=o("data2vec-vision"),ebr=o(" \u2014 "),FH=a("a"),obr=o("TFData2VecVisionForImageClassification"),rbr=o(" (Data2VecVision model)"),tbr=l(),JM=a("li"),g2e=a("strong"),abr=o("swin"),nbr=o(" \u2014 "),TH=a("a"),sbr=o("TFSwinForImageClassification"),lbr=o(" (Swin Transformer model)"),ibr=l(),YM=a("li"),h2e=a("strong"),dbr=o("vit"),cbr=o(" \u2014 "),MH=a("a"),fbr=o("TFViTForImageClassification"),mbr=o(" (ViT model)"),gbr=l(),F(KM.$$.fragment),hDe=l(),ec=a("h2"),ZM=a("a"),p2e=a("span"),F(O8.$$.fragment),hbr=l(),_2e=a("span"),pbr=o("TFAutoModelForMaskedLM"),pDe=l(),or=a("div"),F(V8.$$.fragment),_br=l(),oc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EH=a("a"),bbr=o("from_pretrained()"),vbr=o(" class method or the "),CH=a("a"),Fbr=o("from_config()"),Tbr=o(` class
method.`),Mbr=l(),X8=a("p"),Ebr=o("This class cannot be instantiated directly using "),u2e=a("code"),Cbr=o("__init__()"),wbr=o(" (throws an error)."),Abr=l(),kt=a("div"),F(z8.$$.fragment),Lbr=l(),b2e=a("p"),ybr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xbr=l(),rc=a("p"),$br=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),kbr=o("not"),Sbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" to load the model weights."),Bbr=l(),F(eE.$$.fragment),Ibr=l(),xr=a("div"),F(W8.$$.fragment),Nbr=l(),F2e=a("p"),qbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jbr=l(),tn=a("p"),Dbr=o("The model class to instantiate is selected based on the "),T2e=a("code"),Gbr=o("model_type"),Obr=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),Vbr=o("pretrained_model_name_or_path"),Xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),zbr=o("pretrained_model_name_or_path"),Wbr=o(":"),Qbr=l(),ie=a("ul"),oE=a("li"),C2e=a("strong"),Hbr=o("albert"),Ubr=o(" \u2014 "),AH=a("a"),Jbr=o("TFAlbertForMaskedLM"),Ybr=o(" (ALBERT model)"),Kbr=l(),rE=a("li"),w2e=a("strong"),Zbr=o("bert"),e2r=o(" \u2014 "),LH=a("a"),o2r=o("TFBertForMaskedLM"),r2r=o(" (BERT model)"),t2r=l(),tE=a("li"),A2e=a("strong"),a2r=o("camembert"),n2r=o(" \u2014 "),yH=a("a"),s2r=o("TFCamembertForMaskedLM"),l2r=o(" (CamemBERT model)"),i2r=l(),aE=a("li"),L2e=a("strong"),d2r=o("convbert"),c2r=o(" \u2014 "),xH=a("a"),f2r=o("TFConvBertForMaskedLM"),m2r=o(" (ConvBERT model)"),g2r=l(),nE=a("li"),y2e=a("strong"),h2r=o("deberta"),p2r=o(" \u2014 "),$H=a("a"),_2r=o("TFDebertaForMaskedLM"),u2r=o(" (DeBERTa model)"),b2r=l(),sE=a("li"),x2e=a("strong"),v2r=o("deberta-v2"),F2r=o(" \u2014 "),kH=a("a"),T2r=o("TFDebertaV2ForMaskedLM"),M2r=o(" (DeBERTa-v2 model)"),E2r=l(),lE=a("li"),$2e=a("strong"),C2r=o("distilbert"),w2r=o(" \u2014 "),SH=a("a"),A2r=o("TFDistilBertForMaskedLM"),L2r=o(" (DistilBERT model)"),y2r=l(),iE=a("li"),k2e=a("strong"),x2r=o("electra"),$2r=o(" \u2014 "),RH=a("a"),k2r=o("TFElectraForMaskedLM"),S2r=o(" (ELECTRA model)"),R2r=l(),dE=a("li"),S2e=a("strong"),P2r=o("flaubert"),B2r=o(" \u2014 "),PH=a("a"),I2r=o("TFFlaubertWithLMHeadModel"),N2r=o(" (FlauBERT model)"),q2r=l(),cE=a("li"),R2e=a("strong"),j2r=o("funnel"),D2r=o(" \u2014 "),BH=a("a"),G2r=o("TFFunnelForMaskedLM"),O2r=o(" (Funnel Transformer model)"),V2r=l(),fE=a("li"),P2e=a("strong"),X2r=o("layoutlm"),z2r=o(" \u2014 "),IH=a("a"),W2r=o("TFLayoutLMForMaskedLM"),Q2r=o(" (LayoutLM model)"),H2r=l(),mE=a("li"),B2e=a("strong"),U2r=o("longformer"),J2r=o(" \u2014 "),NH=a("a"),Y2r=o("TFLongformerForMaskedLM"),K2r=o(" (Longformer model)"),Z2r=l(),gE=a("li"),I2e=a("strong"),evr=o("mobilebert"),ovr=o(" \u2014 "),qH=a("a"),rvr=o("TFMobileBertForMaskedLM"),tvr=o(" (MobileBERT model)"),avr=l(),hE=a("li"),N2e=a("strong"),nvr=o("mpnet"),svr=o(" \u2014 "),jH=a("a"),lvr=o("TFMPNetForMaskedLM"),ivr=o(" (MPNet model)"),dvr=l(),pE=a("li"),q2e=a("strong"),cvr=o("rembert"),fvr=o(" \u2014 "),DH=a("a"),mvr=o("TFRemBertForMaskedLM"),gvr=o(" (RemBERT model)"),hvr=l(),_E=a("li"),j2e=a("strong"),pvr=o("roberta"),_vr=o(" \u2014 "),GH=a("a"),uvr=o("TFRobertaForMaskedLM"),bvr=o(" (RoBERTa model)"),vvr=l(),uE=a("li"),D2e=a("strong"),Fvr=o("roformer"),Tvr=o(" \u2014 "),OH=a("a"),Mvr=o("TFRoFormerForMaskedLM"),Evr=o(" (RoFormer model)"),Cvr=l(),bE=a("li"),G2e=a("strong"),wvr=o("tapas"),Avr=o(" \u2014 "),VH=a("a"),Lvr=o("TFTapasForMaskedLM"),yvr=o(" (TAPAS model)"),xvr=l(),vE=a("li"),O2e=a("strong"),$vr=o("xlm"),kvr=o(" \u2014 "),XH=a("a"),Svr=o("TFXLMWithLMHeadModel"),Rvr=o(" (XLM model)"),Pvr=l(),FE=a("li"),V2e=a("strong"),Bvr=o("xlm-roberta"),Ivr=o(" \u2014 "),zH=a("a"),Nvr=o("TFXLMRobertaForMaskedLM"),qvr=o(" (XLM-RoBERTa model)"),jvr=l(),F(TE.$$.fragment),_De=l(),tc=a("h2"),ME=a("a"),X2e=a("span"),F(Q8.$$.fragment),Dvr=l(),z2e=a("span"),Gvr=o("TFAutoModelForSeq2SeqLM"),uDe=l(),rr=a("div"),F(H8.$$.fragment),Ovr=l(),ac=a("p"),Vvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WH=a("a"),Xvr=o("from_pretrained()"),zvr=o(" class method or the "),QH=a("a"),Wvr=o("from_config()"),Qvr=o(` class
method.`),Hvr=l(),U8=a("p"),Uvr=o("This class cannot be instantiated directly using "),W2e=a("code"),Jvr=o("__init__()"),Yvr=o(" (throws an error)."),Kvr=l(),St=a("div"),F(J8.$$.fragment),Zvr=l(),Q2e=a("p"),eFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oFr=l(),nc=a("p"),rFr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),tFr=o("not"),aFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),nFr=o("from_pretrained()"),sFr=o(" to load the model weights."),lFr=l(),F(EE.$$.fragment),iFr=l(),$r=a("div"),F(Y8.$$.fragment),dFr=l(),U2e=a("p"),cFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fFr=l(),an=a("p"),mFr=o("The model class to instantiate is selected based on the "),J2e=a("code"),gFr=o("model_type"),hFr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),uFr=o("pretrained_model_name_or_path"),bFr=o(":"),vFr=l(),Le=a("ul"),CE=a("li"),Z2e=a("strong"),FFr=o("bart"),TFr=o(" \u2014 "),UH=a("a"),MFr=o("TFBartForConditionalGeneration"),EFr=o(" (BART model)"),CFr=l(),wE=a("li"),eve=a("strong"),wFr=o("blenderbot"),AFr=o(" \u2014 "),JH=a("a"),LFr=o("TFBlenderbotForConditionalGeneration"),yFr=o(" (Blenderbot model)"),xFr=l(),AE=a("li"),ove=a("strong"),$Fr=o("blenderbot-small"),kFr=o(" \u2014 "),YH=a("a"),SFr=o("TFBlenderbotSmallForConditionalGeneration"),RFr=o(" (BlenderbotSmall model)"),PFr=l(),LE=a("li"),rve=a("strong"),BFr=o("encoder-decoder"),IFr=o(" \u2014 "),KH=a("a"),NFr=o("TFEncoderDecoderModel"),qFr=o(" (Encoder decoder model)"),jFr=l(),yE=a("li"),tve=a("strong"),DFr=o("led"),GFr=o(" \u2014 "),ZH=a("a"),OFr=o("TFLEDForConditionalGeneration"),VFr=o(" (LED model)"),XFr=l(),xE=a("li"),ave=a("strong"),zFr=o("marian"),WFr=o(" \u2014 "),eU=a("a"),QFr=o("TFMarianMTModel"),HFr=o(" (Marian model)"),UFr=l(),$E=a("li"),nve=a("strong"),JFr=o("mbart"),YFr=o(" \u2014 "),oU=a("a"),KFr=o("TFMBartForConditionalGeneration"),ZFr=o(" (mBART model)"),eTr=l(),kE=a("li"),sve=a("strong"),oTr=o("mt5"),rTr=o(" \u2014 "),rU=a("a"),tTr=o("TFMT5ForConditionalGeneration"),aTr=o(" (MT5 model)"),nTr=l(),SE=a("li"),lve=a("strong"),sTr=o("pegasus"),lTr=o(" \u2014 "),tU=a("a"),iTr=o("TFPegasusForConditionalGeneration"),dTr=o(" (Pegasus model)"),cTr=l(),RE=a("li"),ive=a("strong"),fTr=o("t5"),mTr=o(" \u2014 "),aU=a("a"),gTr=o("TFT5ForConditionalGeneration"),hTr=o(" (T5 model)"),pTr=l(),F(PE.$$.fragment),bDe=l(),sc=a("h2"),BE=a("a"),dve=a("span"),F(K8.$$.fragment),_Tr=l(),cve=a("span"),uTr=o("TFAutoModelForSequenceClassification"),vDe=l(),tr=a("div"),F(Z8.$$.fragment),bTr=l(),lc=a("p"),vTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nU=a("a"),FTr=o("from_pretrained()"),TTr=o(" class method or the "),sU=a("a"),MTr=o("from_config()"),ETr=o(` class
method.`),CTr=l(),e9=a("p"),wTr=o("This class cannot be instantiated directly using "),fve=a("code"),ATr=o("__init__()"),LTr=o(" (throws an error)."),yTr=l(),Rt=a("div"),F(o9.$$.fragment),xTr=l(),mve=a("p"),$Tr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kTr=l(),ic=a("p"),STr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),RTr=o("not"),PTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),BTr=o("from_pretrained()"),ITr=o(" to load the model weights."),NTr=l(),F(IE.$$.fragment),qTr=l(),kr=a("div"),F(r9.$$.fragment),jTr=l(),hve=a("p"),DTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GTr=l(),nn=a("p"),OTr=o("The model class to instantiate is selected based on the "),pve=a("code"),VTr=o("model_type"),XTr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),zTr=o("pretrained_model_name_or_path"),WTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),QTr=o("pretrained_model_name_or_path"),HTr=o(":"),UTr=l(),oe=a("ul"),NE=a("li"),bve=a("strong"),JTr=o("albert"),YTr=o(" \u2014 "),iU=a("a"),KTr=o("TFAlbertForSequenceClassification"),ZTr=o(" (ALBERT model)"),eMr=l(),qE=a("li"),vve=a("strong"),oMr=o("bert"),rMr=o(" \u2014 "),dU=a("a"),tMr=o("TFBertForSequenceClassification"),aMr=o(" (BERT model)"),nMr=l(),jE=a("li"),Fve=a("strong"),sMr=o("camembert"),lMr=o(" \u2014 "),cU=a("a"),iMr=o("TFCamembertForSequenceClassification"),dMr=o(" (CamemBERT model)"),cMr=l(),DE=a("li"),Tve=a("strong"),fMr=o("convbert"),mMr=o(" \u2014 "),fU=a("a"),gMr=o("TFConvBertForSequenceClassification"),hMr=o(" (ConvBERT model)"),pMr=l(),GE=a("li"),Mve=a("strong"),_Mr=o("ctrl"),uMr=o(" \u2014 "),mU=a("a"),bMr=o("TFCTRLForSequenceClassification"),vMr=o(" (CTRL model)"),FMr=l(),OE=a("li"),Eve=a("strong"),TMr=o("deberta"),MMr=o(" \u2014 "),gU=a("a"),EMr=o("TFDebertaForSequenceClassification"),CMr=o(" (DeBERTa model)"),wMr=l(),VE=a("li"),Cve=a("strong"),AMr=o("deberta-v2"),LMr=o(" \u2014 "),hU=a("a"),yMr=o("TFDebertaV2ForSequenceClassification"),xMr=o(" (DeBERTa-v2 model)"),$Mr=l(),XE=a("li"),wve=a("strong"),kMr=o("distilbert"),SMr=o(" \u2014 "),pU=a("a"),RMr=o("TFDistilBertForSequenceClassification"),PMr=o(" (DistilBERT model)"),BMr=l(),zE=a("li"),Ave=a("strong"),IMr=o("electra"),NMr=o(" \u2014 "),_U=a("a"),qMr=o("TFElectraForSequenceClassification"),jMr=o(" (ELECTRA model)"),DMr=l(),WE=a("li"),Lve=a("strong"),GMr=o("flaubert"),OMr=o(" \u2014 "),uU=a("a"),VMr=o("TFFlaubertForSequenceClassification"),XMr=o(" (FlauBERT model)"),zMr=l(),QE=a("li"),yve=a("strong"),WMr=o("funnel"),QMr=o(" \u2014 "),bU=a("a"),HMr=o("TFFunnelForSequenceClassification"),UMr=o(" (Funnel Transformer model)"),JMr=l(),HE=a("li"),xve=a("strong"),YMr=o("gpt2"),KMr=o(" \u2014 "),vU=a("a"),ZMr=o("TFGPT2ForSequenceClassification"),eEr=o(" (OpenAI GPT-2 model)"),oEr=l(),UE=a("li"),$ve=a("strong"),rEr=o("gptj"),tEr=o(" \u2014 "),FU=a("a"),aEr=o("TFGPTJForSequenceClassification"),nEr=o(" (GPT-J model)"),sEr=l(),JE=a("li"),kve=a("strong"),lEr=o("layoutlm"),iEr=o(" \u2014 "),TU=a("a"),dEr=o("TFLayoutLMForSequenceClassification"),cEr=o(" (LayoutLM model)"),fEr=l(),YE=a("li"),Sve=a("strong"),mEr=o("longformer"),gEr=o(" \u2014 "),MU=a("a"),hEr=o("TFLongformerForSequenceClassification"),pEr=o(" (Longformer model)"),_Er=l(),KE=a("li"),Rve=a("strong"),uEr=o("mobilebert"),bEr=o(" \u2014 "),EU=a("a"),vEr=o("TFMobileBertForSequenceClassification"),FEr=o(" (MobileBERT model)"),TEr=l(),ZE=a("li"),Pve=a("strong"),MEr=o("mpnet"),EEr=o(" \u2014 "),CU=a("a"),CEr=o("TFMPNetForSequenceClassification"),wEr=o(" (MPNet model)"),AEr=l(),eC=a("li"),Bve=a("strong"),LEr=o("openai-gpt"),yEr=o(" \u2014 "),wU=a("a"),xEr=o("TFOpenAIGPTForSequenceClassification"),$Er=o(" (OpenAI GPT model)"),kEr=l(),oC=a("li"),Ive=a("strong"),SEr=o("rembert"),REr=o(" \u2014 "),AU=a("a"),PEr=o("TFRemBertForSequenceClassification"),BEr=o(" (RemBERT model)"),IEr=l(),rC=a("li"),Nve=a("strong"),NEr=o("roberta"),qEr=o(" \u2014 "),LU=a("a"),jEr=o("TFRobertaForSequenceClassification"),DEr=o(" (RoBERTa model)"),GEr=l(),tC=a("li"),qve=a("strong"),OEr=o("roformer"),VEr=o(" \u2014 "),yU=a("a"),XEr=o("TFRoFormerForSequenceClassification"),zEr=o(" (RoFormer model)"),WEr=l(),aC=a("li"),jve=a("strong"),QEr=o("tapas"),HEr=o(" \u2014 "),xU=a("a"),UEr=o("TFTapasForSequenceClassification"),JEr=o(" (TAPAS model)"),YEr=l(),nC=a("li"),Dve=a("strong"),KEr=o("transfo-xl"),ZEr=o(" \u2014 "),$U=a("a"),eCr=o("TFTransfoXLForSequenceClassification"),oCr=o(" (Transformer-XL model)"),rCr=l(),sC=a("li"),Gve=a("strong"),tCr=o("xlm"),aCr=o(" \u2014 "),kU=a("a"),nCr=o("TFXLMForSequenceClassification"),sCr=o(" (XLM model)"),lCr=l(),lC=a("li"),Ove=a("strong"),iCr=o("xlm-roberta"),dCr=o(" \u2014 "),SU=a("a"),cCr=o("TFXLMRobertaForSequenceClassification"),fCr=o(" (XLM-RoBERTa model)"),mCr=l(),iC=a("li"),Vve=a("strong"),gCr=o("xlnet"),hCr=o(" \u2014 "),RU=a("a"),pCr=o("TFXLNetForSequenceClassification"),_Cr=o(" (XLNet model)"),uCr=l(),F(dC.$$.fragment),FDe=l(),dc=a("h2"),cC=a("a"),Xve=a("span"),F(t9.$$.fragment),bCr=l(),zve=a("span"),vCr=o("TFAutoModelForMultipleChoice"),TDe=l(),ar=a("div"),F(a9.$$.fragment),FCr=l(),cc=a("p"),TCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PU=a("a"),MCr=o("from_pretrained()"),ECr=o(" class method or the "),BU=a("a"),CCr=o("from_config()"),wCr=o(` class
method.`),ACr=l(),n9=a("p"),LCr=o("This class cannot be instantiated directly using "),Wve=a("code"),yCr=o("__init__()"),xCr=o(" (throws an error)."),$Cr=l(),Pt=a("div"),F(s9.$$.fragment),kCr=l(),Qve=a("p"),SCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RCr=l(),fc=a("p"),PCr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),BCr=o("not"),ICr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),NCr=o("from_pretrained()"),qCr=o(" to load the model weights."),jCr=l(),F(fC.$$.fragment),DCr=l(),Sr=a("div"),F(l9.$$.fragment),GCr=l(),Uve=a("p"),OCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VCr=l(),sn=a("p"),XCr=o("The model class to instantiate is selected based on the "),Jve=a("code"),zCr=o("model_type"),WCr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),QCr=o("pretrained_model_name_or_path"),HCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(":"),YCr=l(),pe=a("ul"),mC=a("li"),Zve=a("strong"),KCr=o("albert"),ZCr=o(" \u2014 "),NU=a("a"),e5r=o("TFAlbertForMultipleChoice"),o5r=o(" (ALBERT model)"),r5r=l(),gC=a("li"),eFe=a("strong"),t5r=o("bert"),a5r=o(" \u2014 "),qU=a("a"),n5r=o("TFBertForMultipleChoice"),s5r=o(" (BERT model)"),l5r=l(),hC=a("li"),oFe=a("strong"),i5r=o("camembert"),d5r=o(" \u2014 "),jU=a("a"),c5r=o("TFCamembertForMultipleChoice"),f5r=o(" (CamemBERT model)"),m5r=l(),pC=a("li"),rFe=a("strong"),g5r=o("convbert"),h5r=o(" \u2014 "),DU=a("a"),p5r=o("TFConvBertForMultipleChoice"),_5r=o(" (ConvBERT model)"),u5r=l(),_C=a("li"),tFe=a("strong"),b5r=o("distilbert"),v5r=o(" \u2014 "),GU=a("a"),F5r=o("TFDistilBertForMultipleChoice"),T5r=o(" (DistilBERT model)"),M5r=l(),uC=a("li"),aFe=a("strong"),E5r=o("electra"),C5r=o(" \u2014 "),OU=a("a"),w5r=o("TFElectraForMultipleChoice"),A5r=o(" (ELECTRA model)"),L5r=l(),bC=a("li"),nFe=a("strong"),y5r=o("flaubert"),x5r=o(" \u2014 "),VU=a("a"),$5r=o("TFFlaubertForMultipleChoice"),k5r=o(" (FlauBERT model)"),S5r=l(),vC=a("li"),sFe=a("strong"),R5r=o("funnel"),P5r=o(" \u2014 "),XU=a("a"),B5r=o("TFFunnelForMultipleChoice"),I5r=o(" (Funnel Transformer model)"),N5r=l(),FC=a("li"),lFe=a("strong"),q5r=o("longformer"),j5r=o(" \u2014 "),zU=a("a"),D5r=o("TFLongformerForMultipleChoice"),G5r=o(" (Longformer model)"),O5r=l(),TC=a("li"),iFe=a("strong"),V5r=o("mobilebert"),X5r=o(" \u2014 "),WU=a("a"),z5r=o("TFMobileBertForMultipleChoice"),W5r=o(" (MobileBERT model)"),Q5r=l(),MC=a("li"),dFe=a("strong"),H5r=o("mpnet"),U5r=o(" \u2014 "),QU=a("a"),J5r=o("TFMPNetForMultipleChoice"),Y5r=o(" (MPNet model)"),K5r=l(),EC=a("li"),cFe=a("strong"),Z5r=o("rembert"),e3r=o(" \u2014 "),HU=a("a"),o3r=o("TFRemBertForMultipleChoice"),r3r=o(" (RemBERT model)"),t3r=l(),CC=a("li"),fFe=a("strong"),a3r=o("roberta"),n3r=o(" \u2014 "),UU=a("a"),s3r=o("TFRobertaForMultipleChoice"),l3r=o(" (RoBERTa model)"),i3r=l(),wC=a("li"),mFe=a("strong"),d3r=o("roformer"),c3r=o(" \u2014 "),JU=a("a"),f3r=o("TFRoFormerForMultipleChoice"),m3r=o(" (RoFormer model)"),g3r=l(),AC=a("li"),gFe=a("strong"),h3r=o("xlm"),p3r=o(" \u2014 "),YU=a("a"),_3r=o("TFXLMForMultipleChoice"),u3r=o(" (XLM model)"),b3r=l(),LC=a("li"),hFe=a("strong"),v3r=o("xlm-roberta"),F3r=o(" \u2014 "),KU=a("a"),T3r=o("TFXLMRobertaForMultipleChoice"),M3r=o(" (XLM-RoBERTa model)"),E3r=l(),yC=a("li"),pFe=a("strong"),C3r=o("xlnet"),w3r=o(" \u2014 "),ZU=a("a"),A3r=o("TFXLNetForMultipleChoice"),L3r=o(" (XLNet model)"),y3r=l(),F(xC.$$.fragment),MDe=l(),mc=a("h2"),$C=a("a"),_Fe=a("span"),F(i9.$$.fragment),x3r=l(),uFe=a("span"),$3r=o("TFAutoModelForNextSentencePrediction"),EDe=l(),nr=a("div"),F(d9.$$.fragment),k3r=l(),gc=a("p"),S3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=a("a"),R3r=o("from_pretrained()"),P3r=o(" class method or the "),oJ=a("a"),B3r=o("from_config()"),I3r=o(` class
method.`),N3r=l(),c9=a("p"),q3r=o("This class cannot be instantiated directly using "),bFe=a("code"),j3r=o("__init__()"),D3r=o(" (throws an error)."),G3r=l(),Bt=a("div"),F(f9.$$.fragment),O3r=l(),vFe=a("p"),V3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X3r=l(),hc=a("p"),z3r=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),W3r=o("not"),Q3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),H3r=o("from_pretrained()"),U3r=o(" to load the model weights."),J3r=l(),F(kC.$$.fragment),Y3r=l(),Rr=a("div"),F(m9.$$.fragment),K3r=l(),TFe=a("p"),Z3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),e0r=l(),ln=a("p"),o0r=o("The model class to instantiate is selected based on the "),MFe=a("code"),r0r=o("model_type"),t0r=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),s0r=o("pretrained_model_name_or_path"),l0r=o(":"),i0r=l(),g9=a("ul"),SC=a("li"),wFe=a("strong"),d0r=o("bert"),c0r=o(" \u2014 "),tJ=a("a"),f0r=o("TFBertForNextSentencePrediction"),m0r=o(" (BERT model)"),g0r=l(),RC=a("li"),AFe=a("strong"),h0r=o("mobilebert"),p0r=o(" \u2014 "),aJ=a("a"),_0r=o("TFMobileBertForNextSentencePrediction"),u0r=o(" (MobileBERT model)"),b0r=l(),F(PC.$$.fragment),CDe=l(),pc=a("h2"),BC=a("a"),LFe=a("span"),F(h9.$$.fragment),v0r=l(),yFe=a("span"),F0r=o("TFAutoModelForTableQuestionAnswering"),wDe=l(),sr=a("div"),F(p9.$$.fragment),T0r=l(),_c=a("p"),M0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nJ=a("a"),E0r=o("from_pretrained()"),C0r=o(" class method or the "),sJ=a("a"),w0r=o("from_config()"),A0r=o(` class
method.`),L0r=l(),_9=a("p"),y0r=o("This class cannot be instantiated directly using "),xFe=a("code"),x0r=o("__init__()"),$0r=o(" (throws an error)."),k0r=l(),It=a("div"),F(u9.$$.fragment),S0r=l(),$Fe=a("p"),R0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P0r=l(),uc=a("p"),B0r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),I0r=o("not"),N0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),q0r=o("from_pretrained()"),j0r=o(" to load the model weights."),D0r=l(),F(IC.$$.fragment),G0r=l(),Pr=a("div"),F(b9.$$.fragment),O0r=l(),SFe=a("p"),V0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X0r=l(),dn=a("p"),z0r=o("The model class to instantiate is selected based on the "),RFe=a("code"),W0r=o("model_type"),Q0r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(":"),K0r=l(),IFe=a("ul"),NC=a("li"),NFe=a("strong"),Z0r=o("tapas"),ewr=o(" \u2014 "),iJ=a("a"),owr=o("TFTapasForQuestionAnswering"),rwr=o(" (TAPAS model)"),twr=l(),F(qC.$$.fragment),ADe=l(),bc=a("h2"),jC=a("a"),qFe=a("span"),F(v9.$$.fragment),awr=l(),jFe=a("span"),nwr=o("TFAutoModelForTokenClassification"),LDe=l(),lr=a("div"),F(F9.$$.fragment),swr=l(),vc=a("p"),lwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dJ=a("a"),iwr=o("from_pretrained()"),dwr=o(" class method or the "),cJ=a("a"),cwr=o("from_config()"),fwr=o(` class
method.`),mwr=l(),T9=a("p"),gwr=o("This class cannot be instantiated directly using "),DFe=a("code"),hwr=o("__init__()"),pwr=o(" (throws an error)."),_wr=l(),Nt=a("div"),F(M9.$$.fragment),uwr=l(),GFe=a("p"),bwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vwr=l(),Fc=a("p"),Fwr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),Twr=o("not"),Mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" to load the model weights."),wwr=l(),F(DC.$$.fragment),Awr=l(),Br=a("div"),F(E9.$$.fragment),Lwr=l(),VFe=a("p"),ywr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xwr=l(),cn=a("p"),$wr=o("The model class to instantiate is selected based on the "),XFe=a("code"),kwr=o("model_type"),Swr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),Rwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),Bwr=o("pretrained_model_name_or_path"),Iwr=o(":"),Nwr=l(),de=a("ul"),GC=a("li"),QFe=a("strong"),qwr=o("albert"),jwr=o(" \u2014 "),mJ=a("a"),Dwr=o("TFAlbertForTokenClassification"),Gwr=o(" (ALBERT model)"),Owr=l(),OC=a("li"),HFe=a("strong"),Vwr=o("bert"),Xwr=o(" \u2014 "),gJ=a("a"),zwr=o("TFBertForTokenClassification"),Wwr=o(" (BERT model)"),Qwr=l(),VC=a("li"),UFe=a("strong"),Hwr=o("camembert"),Uwr=o(" \u2014 "),hJ=a("a"),Jwr=o("TFCamembertForTokenClassification"),Ywr=o(" (CamemBERT model)"),Kwr=l(),XC=a("li"),JFe=a("strong"),Zwr=o("convbert"),eAr=o(" \u2014 "),pJ=a("a"),oAr=o("TFConvBertForTokenClassification"),rAr=o(" (ConvBERT model)"),tAr=l(),zC=a("li"),YFe=a("strong"),aAr=o("deberta"),nAr=o(" \u2014 "),_J=a("a"),sAr=o("TFDebertaForTokenClassification"),lAr=o(" (DeBERTa model)"),iAr=l(),WC=a("li"),KFe=a("strong"),dAr=o("deberta-v2"),cAr=o(" \u2014 "),uJ=a("a"),fAr=o("TFDebertaV2ForTokenClassification"),mAr=o(" (DeBERTa-v2 model)"),gAr=l(),QC=a("li"),ZFe=a("strong"),hAr=o("distilbert"),pAr=o(" \u2014 "),bJ=a("a"),_Ar=o("TFDistilBertForTokenClassification"),uAr=o(" (DistilBERT model)"),bAr=l(),HC=a("li"),eTe=a("strong"),vAr=o("electra"),FAr=o(" \u2014 "),vJ=a("a"),TAr=o("TFElectraForTokenClassification"),MAr=o(" (ELECTRA model)"),EAr=l(),UC=a("li"),oTe=a("strong"),CAr=o("flaubert"),wAr=o(" \u2014 "),FJ=a("a"),AAr=o("TFFlaubertForTokenClassification"),LAr=o(" (FlauBERT model)"),yAr=l(),JC=a("li"),rTe=a("strong"),xAr=o("funnel"),$Ar=o(" \u2014 "),TJ=a("a"),kAr=o("TFFunnelForTokenClassification"),SAr=o(" (Funnel Transformer model)"),RAr=l(),YC=a("li"),tTe=a("strong"),PAr=o("layoutlm"),BAr=o(" \u2014 "),MJ=a("a"),IAr=o("TFLayoutLMForTokenClassification"),NAr=o(" (LayoutLM model)"),qAr=l(),KC=a("li"),aTe=a("strong"),jAr=o("longformer"),DAr=o(" \u2014 "),EJ=a("a"),GAr=o("TFLongformerForTokenClassification"),OAr=o(" (Longformer model)"),VAr=l(),ZC=a("li"),nTe=a("strong"),XAr=o("mobilebert"),zAr=o(" \u2014 "),CJ=a("a"),WAr=o("TFMobileBertForTokenClassification"),QAr=o(" (MobileBERT model)"),HAr=l(),e5=a("li"),sTe=a("strong"),UAr=o("mpnet"),JAr=o(" \u2014 "),wJ=a("a"),YAr=o("TFMPNetForTokenClassification"),KAr=o(" (MPNet model)"),ZAr=l(),o5=a("li"),lTe=a("strong"),e6r=o("rembert"),o6r=o(" \u2014 "),AJ=a("a"),r6r=o("TFRemBertForTokenClassification"),t6r=o(" (RemBERT model)"),a6r=l(),r5=a("li"),iTe=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),LJ=a("a"),l6r=o("TFRobertaForTokenClassification"),i6r=o(" (RoBERTa model)"),d6r=l(),t5=a("li"),dTe=a("strong"),c6r=o("roformer"),f6r=o(" \u2014 "),yJ=a("a"),m6r=o("TFRoFormerForTokenClassification"),g6r=o(" (RoFormer model)"),h6r=l(),a5=a("li"),cTe=a("strong"),p6r=o("xlm"),_6r=o(" \u2014 "),xJ=a("a"),u6r=o("TFXLMForTokenClassification"),b6r=o(" (XLM model)"),v6r=l(),n5=a("li"),fTe=a("strong"),F6r=o("xlm-roberta"),T6r=o(" \u2014 "),$J=a("a"),M6r=o("TFXLMRobertaForTokenClassification"),E6r=o(" (XLM-RoBERTa model)"),C6r=l(),s5=a("li"),mTe=a("strong"),w6r=o("xlnet"),A6r=o(" \u2014 "),kJ=a("a"),L6r=o("TFXLNetForTokenClassification"),y6r=o(" (XLNet model)"),x6r=l(),F(l5.$$.fragment),yDe=l(),Tc=a("h2"),i5=a("a"),gTe=a("span"),F(C9.$$.fragment),$6r=l(),hTe=a("span"),k6r=o("TFAutoModelForQuestionAnswering"),xDe=l(),ir=a("div"),F(w9.$$.fragment),S6r=l(),Mc=a("p"),R6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SJ=a("a"),P6r=o("from_pretrained()"),B6r=o(" class method or the "),RJ=a("a"),I6r=o("from_config()"),N6r=o(` class
method.`),q6r=l(),A9=a("p"),j6r=o("This class cannot be instantiated directly using "),pTe=a("code"),D6r=o("__init__()"),G6r=o(" (throws an error)."),O6r=l(),qt=a("div"),F(L9.$$.fragment),V6r=l(),_Te=a("p"),X6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z6r=l(),Ec=a("p"),W6r=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),Q6r=o("not"),H6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),U6r=o("from_pretrained()"),J6r=o(" to load the model weights."),Y6r=l(),F(d5.$$.fragment),K6r=l(),Ir=a("div"),F(y9.$$.fragment),Z6r=l(),bTe=a("p"),eLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oLr=l(),fn=a("p"),rLr=o("The model class to instantiate is selected based on the "),vTe=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),ce=a("ul"),c5=a("li"),MTe=a("strong"),cLr=o("albert"),fLr=o(" \u2014 "),BJ=a("a"),mLr=o("TFAlbertForQuestionAnswering"),gLr=o(" (ALBERT model)"),hLr=l(),f5=a("li"),ETe=a("strong"),pLr=o("bert"),_Lr=o(" \u2014 "),IJ=a("a"),uLr=o("TFBertForQuestionAnswering"),bLr=o(" (BERT model)"),vLr=l(),m5=a("li"),CTe=a("strong"),FLr=o("camembert"),TLr=o(" \u2014 "),NJ=a("a"),MLr=o("TFCamembertForQuestionAnswering"),ELr=o(" (CamemBERT model)"),CLr=l(),g5=a("li"),wTe=a("strong"),wLr=o("convbert"),ALr=o(" \u2014 "),qJ=a("a"),LLr=o("TFConvBertForQuestionAnswering"),yLr=o(" (ConvBERT model)"),xLr=l(),h5=a("li"),ATe=a("strong"),$Lr=o("deberta"),kLr=o(" \u2014 "),jJ=a("a"),SLr=o("TFDebertaForQuestionAnswering"),RLr=o(" (DeBERTa model)"),PLr=l(),p5=a("li"),LTe=a("strong"),BLr=o("deberta-v2"),ILr=o(" \u2014 "),DJ=a("a"),NLr=o("TFDebertaV2ForQuestionAnswering"),qLr=o(" (DeBERTa-v2 model)"),jLr=l(),_5=a("li"),yTe=a("strong"),DLr=o("distilbert"),GLr=o(" \u2014 "),GJ=a("a"),OLr=o("TFDistilBertForQuestionAnswering"),VLr=o(" (DistilBERT model)"),XLr=l(),u5=a("li"),xTe=a("strong"),zLr=o("electra"),WLr=o(" \u2014 "),OJ=a("a"),QLr=o("TFElectraForQuestionAnswering"),HLr=o(" (ELECTRA model)"),ULr=l(),b5=a("li"),$Te=a("strong"),JLr=o("flaubert"),YLr=o(" \u2014 "),VJ=a("a"),KLr=o("TFFlaubertForQuestionAnsweringSimple"),ZLr=o(" (FlauBERT model)"),eyr=l(),v5=a("li"),kTe=a("strong"),oyr=o("funnel"),ryr=o(" \u2014 "),XJ=a("a"),tyr=o("TFFunnelForQuestionAnswering"),ayr=o(" (Funnel Transformer model)"),nyr=l(),F5=a("li"),STe=a("strong"),syr=o("gptj"),lyr=o(" \u2014 "),zJ=a("a"),iyr=o("TFGPTJForQuestionAnswering"),dyr=o(" (GPT-J model)"),cyr=l(),T5=a("li"),RTe=a("strong"),fyr=o("longformer"),myr=o(" \u2014 "),WJ=a("a"),gyr=o("TFLongformerForQuestionAnswering"),hyr=o(" (Longformer model)"),pyr=l(),M5=a("li"),PTe=a("strong"),_yr=o("mobilebert"),uyr=o(" \u2014 "),QJ=a("a"),byr=o("TFMobileBertForQuestionAnswering"),vyr=o(" (MobileBERT model)"),Fyr=l(),E5=a("li"),BTe=a("strong"),Tyr=o("mpnet"),Myr=o(" \u2014 "),HJ=a("a"),Eyr=o("TFMPNetForQuestionAnswering"),Cyr=o(" (MPNet model)"),wyr=l(),C5=a("li"),ITe=a("strong"),Ayr=o("rembert"),Lyr=o(" \u2014 "),UJ=a("a"),yyr=o("TFRemBertForQuestionAnswering"),xyr=o(" (RemBERT model)"),$yr=l(),w5=a("li"),NTe=a("strong"),kyr=o("roberta"),Syr=o(" \u2014 "),JJ=a("a"),Ryr=o("TFRobertaForQuestionAnswering"),Pyr=o(" (RoBERTa model)"),Byr=l(),A5=a("li"),qTe=a("strong"),Iyr=o("roformer"),Nyr=o(" \u2014 "),YJ=a("a"),qyr=o("TFRoFormerForQuestionAnswering"),jyr=o(" (RoFormer model)"),Dyr=l(),L5=a("li"),jTe=a("strong"),Gyr=o("xlm"),Oyr=o(" \u2014 "),KJ=a("a"),Vyr=o("TFXLMForQuestionAnsweringSimple"),Xyr=o(" (XLM model)"),zyr=l(),y5=a("li"),DTe=a("strong"),Wyr=o("xlm-roberta"),Qyr=o(" \u2014 "),ZJ=a("a"),Hyr=o("TFXLMRobertaForQuestionAnswering"),Uyr=o(" (XLM-RoBERTa model)"),Jyr=l(),x5=a("li"),GTe=a("strong"),Yyr=o("xlnet"),Kyr=o(" \u2014 "),eY=a("a"),Zyr=o("TFXLNetForQuestionAnsweringSimple"),e8r=o(" (XLNet model)"),o8r=l(),F($5.$$.fragment),$De=l(),Cc=a("h2"),k5=a("a"),OTe=a("span"),F(x9.$$.fragment),r8r=l(),VTe=a("span"),t8r=o("TFAutoModelForVision2Seq"),kDe=l(),dr=a("div"),F($9.$$.fragment),a8r=l(),wc=a("p"),n8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oY=a("a"),s8r=o("from_pretrained()"),l8r=o(" class method or the "),rY=a("a"),i8r=o("from_config()"),d8r=o(` class
method.`),c8r=l(),k9=a("p"),f8r=o("This class cannot be instantiated directly using "),XTe=a("code"),m8r=o("__init__()"),g8r=o(" (throws an error)."),h8r=l(),jt=a("div"),F(S9.$$.fragment),p8r=l(),zTe=a("p"),_8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),u8r=l(),Ac=a("p"),b8r=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),v8r=o("not"),F8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),T8r=o("from_pretrained()"),M8r=o(" to load the model weights."),E8r=l(),F(S5.$$.fragment),C8r=l(),Nr=a("div"),F(R9.$$.fragment),w8r=l(),QTe=a("p"),A8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L8r=l(),mn=a("p"),y8r=o("The model class to instantiate is selected based on the "),HTe=a("code"),x8r=o("model_type"),$8r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),R8r=o("pretrained_model_name_or_path"),P8r=o(":"),B8r=l(),YTe=a("ul"),R5=a("li"),KTe=a("strong"),I8r=o("vision-encoder-decoder"),N8r=o(" \u2014 "),aY=a("a"),q8r=o("TFVisionEncoderDecoderModel"),j8r=o(" (Vision Encoder decoder model)"),D8r=l(),F(P5.$$.fragment),SDe=l(),Lc=a("h2"),B5=a("a"),ZTe=a("span"),F(P9.$$.fragment),G8r=l(),eMe=a("span"),O8r=o("TFAutoModelForSpeechSeq2Seq"),RDe=l(),cr=a("div"),F(B9.$$.fragment),V8r=l(),yc=a("p"),X8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nY=a("a"),z8r=o("from_pretrained()"),W8r=o(" class method or the "),sY=a("a"),Q8r=o("from_config()"),H8r=o(` class
method.`),U8r=l(),I9=a("p"),J8r=o("This class cannot be instantiated directly using "),oMe=a("code"),Y8r=o("__init__()"),K8r=o(" (throws an error)."),Z8r=l(),Dt=a("div"),F(N9.$$.fragment),e9r=l(),rMe=a("p"),o9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),r9r=l(),xc=a("p"),t9r=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),a9r=o("not"),n9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),s9r=o("from_pretrained()"),l9r=o(" to load the model weights."),i9r=l(),F(I5.$$.fragment),d9r=l(),qr=a("div"),F(q9.$$.fragment),c9r=l(),aMe=a("p"),f9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m9r=l(),gn=a("p"),g9r=o("The model class to instantiate is selected based on the "),nMe=a("code"),h9r=o("model_type"),p9r=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),_9r=o("pretrained_model_name_or_path"),u9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(":"),F9r=l(),iMe=a("ul"),N5=a("li"),dMe=a("strong"),T9r=o("speech_to_text"),M9r=o(" \u2014 "),iY=a("a"),E9r=o("TFSpeech2TextForConditionalGeneration"),C9r=o(" (Speech2Text model)"),w9r=l(),F(q5.$$.fragment),PDe=l(),$c=a("h2"),j5=a("a"),cMe=a("span"),F(j9.$$.fragment),A9r=l(),fMe=a("span"),L9r=o("FlaxAutoModel"),BDe=l(),fr=a("div"),F(D9.$$.fragment),y9r=l(),kc=a("p"),x9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=a("a"),$9r=o("from_pretrained()"),k9r=o(" class method or the "),cY=a("a"),S9r=o("from_config()"),R9r=o(` class
method.`),P9r=l(),G9=a("p"),B9r=o("This class cannot be instantiated directly using "),mMe=a("code"),I9r=o("__init__()"),N9r=o(" (throws an error)."),q9r=l(),Gt=a("div"),F(O9.$$.fragment),j9r=l(),gMe=a("p"),D9r=o("Instantiates one of the base model classes of the library from a configuration."),G9r=l(),Sc=a("p"),O9r=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),V9r=o("not"),X9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),z9r=o("from_pretrained()"),W9r=o(" to load the model weights."),Q9r=l(),F(D5.$$.fragment),H9r=l(),jr=a("div"),F(V9.$$.fragment),U9r=l(),pMe=a("p"),J9r=o("Instantiate one of the base model classes of the library from a pretrained model."),Y9r=l(),hn=a("p"),K9r=o("The model class to instantiate is selected based on the "),_Me=a("code"),Z9r=o("model_type"),exr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),oxr=o("pretrained_model_name_or_path"),rxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),txr=o("pretrained_model_name_or_path"),axr=o(":"),nxr=l(),re=a("ul"),G5=a("li"),vMe=a("strong"),sxr=o("albert"),lxr=o(" \u2014 "),mY=a("a"),ixr=o("FlaxAlbertModel"),dxr=o(" (ALBERT model)"),cxr=l(),O5=a("li"),FMe=a("strong"),fxr=o("bart"),mxr=o(" \u2014 "),gY=a("a"),gxr=o("FlaxBartModel"),hxr=o(" (BART model)"),pxr=l(),V5=a("li"),TMe=a("strong"),_xr=o("beit"),uxr=o(" \u2014 "),hY=a("a"),bxr=o("FlaxBeitModel"),vxr=o(" (BEiT model)"),Fxr=l(),X5=a("li"),MMe=a("strong"),Txr=o("bert"),Mxr=o(" \u2014 "),pY=a("a"),Exr=o("FlaxBertModel"),Cxr=o(" (BERT model)"),wxr=l(),z5=a("li"),EMe=a("strong"),Axr=o("big_bird"),Lxr=o(" \u2014 "),_Y=a("a"),yxr=o("FlaxBigBirdModel"),xxr=o(" (BigBird model)"),$xr=l(),W5=a("li"),CMe=a("strong"),kxr=o("blenderbot"),Sxr=o(" \u2014 "),uY=a("a"),Rxr=o("FlaxBlenderbotModel"),Pxr=o(" (Blenderbot model)"),Bxr=l(),Q5=a("li"),wMe=a("strong"),Ixr=o("blenderbot-small"),Nxr=o(" \u2014 "),bY=a("a"),qxr=o("FlaxBlenderbotSmallModel"),jxr=o(" (BlenderbotSmall model)"),Dxr=l(),H5=a("li"),AMe=a("strong"),Gxr=o("clip"),Oxr=o(" \u2014 "),vY=a("a"),Vxr=o("FlaxCLIPModel"),Xxr=o(" (CLIP model)"),zxr=l(),U5=a("li"),LMe=a("strong"),Wxr=o("distilbert"),Qxr=o(" \u2014 "),FY=a("a"),Hxr=o("FlaxDistilBertModel"),Uxr=o(" (DistilBERT model)"),Jxr=l(),J5=a("li"),yMe=a("strong"),Yxr=o("electra"),Kxr=o(" \u2014 "),TY=a("a"),Zxr=o("FlaxElectraModel"),e$r=o(" (ELECTRA model)"),o$r=l(),Y5=a("li"),xMe=a("strong"),r$r=o("gpt2"),t$r=o(" \u2014 "),MY=a("a"),a$r=o("FlaxGPT2Model"),n$r=o(" (OpenAI GPT-2 model)"),s$r=l(),K5=a("li"),$Me=a("strong"),l$r=o("gpt_neo"),i$r=o(" \u2014 "),EY=a("a"),d$r=o("FlaxGPTNeoModel"),c$r=o(" (GPT Neo model)"),f$r=l(),Z5=a("li"),kMe=a("strong"),m$r=o("gptj"),g$r=o(" \u2014 "),CY=a("a"),h$r=o("FlaxGPTJModel"),p$r=o(" (GPT-J model)"),_$r=l(),e3=a("li"),SMe=a("strong"),u$r=o("marian"),b$r=o(" \u2014 "),wY=a("a"),v$r=o("FlaxMarianModel"),F$r=o(" (Marian model)"),T$r=l(),o3=a("li"),RMe=a("strong"),M$r=o("mbart"),E$r=o(" \u2014 "),AY=a("a"),C$r=o("FlaxMBartModel"),w$r=o(" (mBART model)"),A$r=l(),r3=a("li"),PMe=a("strong"),L$r=o("mt5"),y$r=o(" \u2014 "),LY=a("a"),x$r=o("FlaxMT5Model"),$$r=o(" (MT5 model)"),k$r=l(),t3=a("li"),BMe=a("strong"),S$r=o("opt"),R$r=o(" \u2014 "),yY=a("a"),P$r=o("FlaxOPTModel"),B$r=o(" (OPT model)"),I$r=l(),a3=a("li"),IMe=a("strong"),N$r=o("pegasus"),q$r=o(" \u2014 "),xY=a("a"),j$r=o("FlaxPegasusModel"),D$r=o(" (Pegasus model)"),G$r=l(),n3=a("li"),NMe=a("strong"),O$r=o("roberta"),V$r=o(" \u2014 "),$Y=a("a"),X$r=o("FlaxRobertaModel"),z$r=o(" (RoBERTa model)"),W$r=l(),s3=a("li"),qMe=a("strong"),Q$r=o("roformer"),H$r=o(" \u2014 "),kY=a("a"),U$r=o("FlaxRoFormerModel"),J$r=o(" (RoFormer model)"),Y$r=l(),l3=a("li"),jMe=a("strong"),K$r=o("t5"),Z$r=o(" \u2014 "),SY=a("a"),ekr=o("FlaxT5Model"),okr=o(" (T5 model)"),rkr=l(),i3=a("li"),DMe=a("strong"),tkr=o("vision-text-dual-encoder"),akr=o(" \u2014 "),RY=a("a"),nkr=o("FlaxVisionTextDualEncoderModel"),skr=o(" (VisionTextDualEncoder model)"),lkr=l(),d3=a("li"),GMe=a("strong"),ikr=o("vit"),dkr=o(" \u2014 "),PY=a("a"),ckr=o("FlaxViTModel"),fkr=o(" (ViT model)"),mkr=l(),c3=a("li"),OMe=a("strong"),gkr=o("wav2vec2"),hkr=o(" \u2014 "),BY=a("a"),pkr=o("FlaxWav2Vec2Model"),_kr=o(" (Wav2Vec2 model)"),ukr=l(),f3=a("li"),VMe=a("strong"),bkr=o("xglm"),vkr=o(" \u2014 "),IY=a("a"),Fkr=o("FlaxXGLMModel"),Tkr=o(" (XGLM model)"),Mkr=l(),m3=a("li"),XMe=a("strong"),Ekr=o("xlm-roberta"),Ckr=o(" \u2014 "),NY=a("a"),wkr=o("FlaxXLMRobertaModel"),Akr=o(" (XLM-RoBERTa model)"),Lkr=l(),F(g3.$$.fragment),IDe=l(),Rc=a("h2"),h3=a("a"),zMe=a("span"),F(X9.$$.fragment),ykr=l(),WMe=a("span"),xkr=o("FlaxAutoModelForCausalLM"),NDe=l(),mr=a("div"),F(z9.$$.fragment),$kr=l(),Pc=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qY=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),jY=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),W9=a("p"),Nkr=o("This class cannot be instantiated directly using "),QMe=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Ot=a("div"),F(Q9.$$.fragment),Gkr=l(),HMe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vkr=l(),Bc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),Qkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(p3.$$.fragment),Jkr=l(),Dr=a("div"),F(H9.$$.fragment),Ykr=l(),JMe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zkr=l(),pn=a("p"),eSr=o("The model class to instantiate is selected based on the "),YMe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),ye=a("ul"),_3=a("li"),eEe=a("strong"),iSr=o("bart"),dSr=o(" \u2014 "),GY=a("a"),cSr=o("FlaxBartForCausalLM"),fSr=o(" (BART model)"),mSr=l(),u3=a("li"),oEe=a("strong"),gSr=o("bert"),hSr=o(" \u2014 "),OY=a("a"),pSr=o("FlaxBertForCausalLM"),_Sr=o(" (BERT model)"),uSr=l(),b3=a("li"),rEe=a("strong"),bSr=o("big_bird"),vSr=o(" \u2014 "),VY=a("a"),FSr=o("FlaxBigBirdForCausalLM"),TSr=o(" (BigBird model)"),MSr=l(),v3=a("li"),tEe=a("strong"),ESr=o("electra"),CSr=o(" \u2014 "),XY=a("a"),wSr=o("FlaxElectraForCausalLM"),ASr=o(" (ELECTRA model)"),LSr=l(),F3=a("li"),aEe=a("strong"),ySr=o("gpt2"),xSr=o(" \u2014 "),zY=a("a"),$Sr=o("FlaxGPT2LMHeadModel"),kSr=o(" (OpenAI GPT-2 model)"),SSr=l(),T3=a("li"),nEe=a("strong"),RSr=o("gpt_neo"),PSr=o(" \u2014 "),WY=a("a"),BSr=o("FlaxGPTNeoForCausalLM"),ISr=o(" (GPT Neo model)"),NSr=l(),M3=a("li"),sEe=a("strong"),qSr=o("gptj"),jSr=o(" \u2014 "),QY=a("a"),DSr=o("FlaxGPTJForCausalLM"),GSr=o(" (GPT-J model)"),OSr=l(),E3=a("li"),lEe=a("strong"),VSr=o("opt"),XSr=o(" \u2014 "),HY=a("a"),zSr=o("FlaxOPTForCausalLM"),WSr=o(" (OPT model)"),QSr=l(),C3=a("li"),iEe=a("strong"),HSr=o("roberta"),USr=o(" \u2014 "),UY=a("a"),JSr=o("FlaxRobertaForCausalLM"),YSr=o(" (RoBERTa model)"),KSr=l(),w3=a("li"),dEe=a("strong"),ZSr=o("xglm"),eRr=o(" \u2014 "),JY=a("a"),oRr=o("FlaxXGLMForCausalLM"),rRr=o(" (XGLM model)"),tRr=l(),F(A3.$$.fragment),qDe=l(),Ic=a("h2"),L3=a("a"),cEe=a("span"),F(U9.$$.fragment),aRr=l(),fEe=a("span"),nRr=o("FlaxAutoModelForPreTraining"),jDe=l(),gr=a("div"),F(J9.$$.fragment),sRr=l(),Nc=a("p"),lRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YY=a("a"),iRr=o("from_pretrained()"),dRr=o(" class method or the "),KY=a("a"),cRr=o("from_config()"),fRr=o(` class
method.`),mRr=l(),Y9=a("p"),gRr=o("This class cannot be instantiated directly using "),mEe=a("code"),hRr=o("__init__()"),pRr=o(" (throws an error)."),_Rr=l(),Vt=a("div"),F(K9.$$.fragment),uRr=l(),gEe=a("p"),bRr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vRr=l(),qc=a("p"),FRr=o(`Note:
Loading a model from its configuration file does `),hEe=a("strong"),TRr=o("not"),MRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),ERr=o("from_pretrained()"),CRr=o(" to load the model weights."),wRr=l(),F(y3.$$.fragment),ARr=l(),Gr=a("div"),F(Z9.$$.fragment),LRr=l(),pEe=a("p"),yRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xRr=l(),_n=a("p"),$Rr=o("The model class to instantiate is selected based on the "),_Ee=a("code"),kRr=o("model_type"),SRr=o(` property of the config object (either
passed as an argument or loaded from `),uEe=a("code"),RRr=o("pretrained_model_name_or_path"),PRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=a("code"),BRr=o("pretrained_model_name_or_path"),IRr=o(":"),NRr=l(),Ee=a("ul"),x3=a("li"),vEe=a("strong"),qRr=o("albert"),jRr=o(" \u2014 "),eK=a("a"),DRr=o("FlaxAlbertForPreTraining"),GRr=o(" (ALBERT model)"),ORr=l(),$3=a("li"),FEe=a("strong"),VRr=o("bart"),XRr=o(" \u2014 "),oK=a("a"),zRr=o("FlaxBartForConditionalGeneration"),WRr=o(" (BART model)"),QRr=l(),k3=a("li"),TEe=a("strong"),HRr=o("bert"),URr=o(" \u2014 "),rK=a("a"),JRr=o("FlaxBertForPreTraining"),YRr=o(" (BERT model)"),KRr=l(),S3=a("li"),MEe=a("strong"),ZRr=o("big_bird"),ePr=o(" \u2014 "),tK=a("a"),oPr=o("FlaxBigBirdForPreTraining"),rPr=o(" (BigBird model)"),tPr=l(),R3=a("li"),EEe=a("strong"),aPr=o("electra"),nPr=o(" \u2014 "),aK=a("a"),sPr=o("FlaxElectraForPreTraining"),lPr=o(" (ELECTRA model)"),iPr=l(),P3=a("li"),CEe=a("strong"),dPr=o("mbart"),cPr=o(" \u2014 "),nK=a("a"),fPr=o("FlaxMBartForConditionalGeneration"),mPr=o(" (mBART model)"),gPr=l(),B3=a("li"),wEe=a("strong"),hPr=o("mt5"),pPr=o(" \u2014 "),sK=a("a"),_Pr=o("FlaxMT5ForConditionalGeneration"),uPr=o(" (MT5 model)"),bPr=l(),I3=a("li"),AEe=a("strong"),vPr=o("roberta"),FPr=o(" \u2014 "),lK=a("a"),TPr=o("FlaxRobertaForMaskedLM"),MPr=o(" (RoBERTa model)"),EPr=l(),N3=a("li"),LEe=a("strong"),CPr=o("roformer"),wPr=o(" \u2014 "),iK=a("a"),APr=o("FlaxRoFormerForMaskedLM"),LPr=o(" (RoFormer model)"),yPr=l(),q3=a("li"),yEe=a("strong"),xPr=o("t5"),$Pr=o(" \u2014 "),dK=a("a"),kPr=o("FlaxT5ForConditionalGeneration"),SPr=o(" (T5 model)"),RPr=l(),j3=a("li"),xEe=a("strong"),PPr=o("wav2vec2"),BPr=o(" \u2014 "),cK=a("a"),IPr=o("FlaxWav2Vec2ForPreTraining"),NPr=o(" (Wav2Vec2 model)"),qPr=l(),D3=a("li"),$Ee=a("strong"),jPr=o("xlm-roberta"),DPr=o(" \u2014 "),fK=a("a"),GPr=o("FlaxXLMRobertaForMaskedLM"),OPr=o(" (XLM-RoBERTa model)"),VPr=l(),F(G3.$$.fragment),DDe=l(),jc=a("h2"),O3=a("a"),kEe=a("span"),F(ex.$$.fragment),XPr=l(),SEe=a("span"),zPr=o("FlaxAutoModelForMaskedLM"),GDe=l(),hr=a("div"),F(ox.$$.fragment),WPr=l(),Dc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mK=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),gK=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),rx=a("p"),ZPr=o("This class cannot be instantiated directly using "),REe=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),Xt=a("div"),F(tx.$$.fragment),tBr=l(),PEe=a("p"),aBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nBr=l(),Gc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),BEe=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),fBr=l(),F(V3.$$.fragment),mBr=l(),Or=a("div"),F(ax.$$.fragment),gBr=l(),IEe=a("p"),hBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pBr=l(),un=a("p"),_Br=o("The model class to instantiate is selected based on the "),NEe=a("code"),uBr=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),qEe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),xe=a("ul"),X3=a("li"),DEe=a("strong"),CBr=o("albert"),wBr=o(" \u2014 "),pK=a("a"),ABr=o("FlaxAlbertForMaskedLM"),LBr=o(" (ALBERT model)"),yBr=l(),z3=a("li"),GEe=a("strong"),xBr=o("bart"),$Br=o(" \u2014 "),_K=a("a"),kBr=o("FlaxBartForConditionalGeneration"),SBr=o(" (BART model)"),RBr=l(),W3=a("li"),OEe=a("strong"),PBr=o("bert"),BBr=o(" \u2014 "),uK=a("a"),IBr=o("FlaxBertForMaskedLM"),NBr=o(" (BERT model)"),qBr=l(),Q3=a("li"),VEe=a("strong"),jBr=o("big_bird"),DBr=o(" \u2014 "),bK=a("a"),GBr=o("FlaxBigBirdForMaskedLM"),OBr=o(" (BigBird model)"),VBr=l(),H3=a("li"),XEe=a("strong"),XBr=o("distilbert"),zBr=o(" \u2014 "),vK=a("a"),WBr=o("FlaxDistilBertForMaskedLM"),QBr=o(" (DistilBERT model)"),HBr=l(),U3=a("li"),zEe=a("strong"),UBr=o("electra"),JBr=o(" \u2014 "),FK=a("a"),YBr=o("FlaxElectraForMaskedLM"),KBr=o(" (ELECTRA model)"),ZBr=l(),J3=a("li"),WEe=a("strong"),eIr=o("mbart"),oIr=o(" \u2014 "),TK=a("a"),rIr=o("FlaxMBartForConditionalGeneration"),tIr=o(" (mBART model)"),aIr=l(),Y3=a("li"),QEe=a("strong"),nIr=o("roberta"),sIr=o(" \u2014 "),MK=a("a"),lIr=o("FlaxRobertaForMaskedLM"),iIr=o(" (RoBERTa model)"),dIr=l(),K3=a("li"),HEe=a("strong"),cIr=o("roformer"),fIr=o(" \u2014 "),EK=a("a"),mIr=o("FlaxRoFormerForMaskedLM"),gIr=o(" (RoFormer model)"),hIr=l(),Z3=a("li"),UEe=a("strong"),pIr=o("xlm-roberta"),_Ir=o(" \u2014 "),CK=a("a"),uIr=o("FlaxXLMRobertaForMaskedLM"),bIr=o(" (XLM-RoBERTa model)"),vIr=l(),F(e0.$$.fragment),ODe=l(),Oc=a("h2"),o0=a("a"),JEe=a("span"),F(nx.$$.fragment),FIr=l(),YEe=a("span"),TIr=o("FlaxAutoModelForSeq2SeqLM"),VDe=l(),pr=a("div"),F(sx.$$.fragment),MIr=l(),Vc=a("p"),EIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wK=a("a"),CIr=o("from_pretrained()"),wIr=o(" class method or the "),AK=a("a"),AIr=o("from_config()"),LIr=o(` class
method.`),yIr=l(),lx=a("p"),xIr=o("This class cannot be instantiated directly using "),KEe=a("code"),$Ir=o("__init__()"),kIr=o(" (throws an error)."),SIr=l(),zt=a("div"),F(ix.$$.fragment),RIr=l(),ZEe=a("p"),PIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BIr=l(),Xc=a("p"),IIr=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),NIr=o("not"),qIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),jIr=o("from_pretrained()"),DIr=o(" to load the model weights."),GIr=l(),F(r0.$$.fragment),OIr=l(),Vr=a("div"),F(dx.$$.fragment),VIr=l(),oCe=a("p"),XIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zIr=l(),bn=a("p"),WIr=o("The model class to instantiate is selected based on the "),rCe=a("code"),QIr=o("model_type"),HIr=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),YIr=o("pretrained_model_name_or_path"),KIr=o(":"),ZIr=l(),Pe=a("ul"),t0=a("li"),nCe=a("strong"),eNr=o("bart"),oNr=o(" \u2014 "),yK=a("a"),rNr=o("FlaxBartForConditionalGeneration"),tNr=o(" (BART model)"),aNr=l(),a0=a("li"),sCe=a("strong"),nNr=o("blenderbot"),sNr=o(" \u2014 "),xK=a("a"),lNr=o("FlaxBlenderbotForConditionalGeneration"),iNr=o(" (Blenderbot model)"),dNr=l(),n0=a("li"),lCe=a("strong"),cNr=o("blenderbot-small"),fNr=o(" \u2014 "),$K=a("a"),mNr=o("FlaxBlenderbotSmallForConditionalGeneration"),gNr=o(" (BlenderbotSmall model)"),hNr=l(),s0=a("li"),iCe=a("strong"),pNr=o("encoder-decoder"),_Nr=o(" \u2014 "),kK=a("a"),uNr=o("FlaxEncoderDecoderModel"),bNr=o(" (Encoder decoder model)"),vNr=l(),l0=a("li"),dCe=a("strong"),FNr=o("marian"),TNr=o(" \u2014 "),SK=a("a"),MNr=o("FlaxMarianMTModel"),ENr=o(" (Marian model)"),CNr=l(),i0=a("li"),cCe=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),RK=a("a"),LNr=o("FlaxMBartForConditionalGeneration"),yNr=o(" (mBART model)"),xNr=l(),d0=a("li"),fCe=a("strong"),$Nr=o("mt5"),kNr=o(" \u2014 "),PK=a("a"),SNr=o("FlaxMT5ForConditionalGeneration"),RNr=o(" (MT5 model)"),PNr=l(),c0=a("li"),mCe=a("strong"),BNr=o("pegasus"),INr=o(" \u2014 "),BK=a("a"),NNr=o("FlaxPegasusForConditionalGeneration"),qNr=o(" (Pegasus model)"),jNr=l(),f0=a("li"),gCe=a("strong"),DNr=o("t5"),GNr=o(" \u2014 "),IK=a("a"),ONr=o("FlaxT5ForConditionalGeneration"),VNr=o(" (T5 model)"),XNr=l(),F(m0.$$.fragment),XDe=l(),zc=a("h2"),g0=a("a"),hCe=a("span"),F(cx.$$.fragment),zNr=l(),pCe=a("span"),WNr=o("FlaxAutoModelForSequenceClassification"),zDe=l(),_r=a("div"),F(fx.$$.fragment),QNr=l(),Wc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NK=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),qK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),mx=a("p"),eqr=o("This class cannot be instantiated directly using "),_Ce=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Wt=a("div"),F(gx.$$.fragment),aqr=l(),uCe=a("p"),nqr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sqr=l(),Qc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(h0.$$.fragment),gqr=l(),Xr=a("div"),F(hx.$$.fragment),hqr=l(),vCe=a("p"),pqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_qr=l(),vn=a("p"),uqr=o("The model class to instantiate is selected based on the "),FCe=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),$e=a("ul"),p0=a("li"),ECe=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),DK=a("a"),Lqr=o("FlaxAlbertForSequenceClassification"),yqr=o(" (ALBERT model)"),xqr=l(),_0=a("li"),CCe=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),GK=a("a"),Sqr=o("FlaxBartForSequenceClassification"),Rqr=o(" (BART model)"),Pqr=l(),u0=a("li"),wCe=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),OK=a("a"),Nqr=o("FlaxBertForSequenceClassification"),qqr=o(" (BERT model)"),jqr=l(),b0=a("li"),ACe=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),VK=a("a"),Oqr=o("FlaxBigBirdForSequenceClassification"),Vqr=o(" (BigBird model)"),Xqr=l(),v0=a("li"),LCe=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),XK=a("a"),Qqr=o("FlaxDistilBertForSequenceClassification"),Hqr=o(" (DistilBERT model)"),Uqr=l(),F0=a("li"),yCe=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),zK=a("a"),Kqr=o("FlaxElectraForSequenceClassification"),Zqr=o(" (ELECTRA model)"),ejr=l(),T0=a("li"),xCe=a("strong"),ojr=o("mbart"),rjr=o(" \u2014 "),WK=a("a"),tjr=o("FlaxMBartForSequenceClassification"),ajr=o(" (mBART model)"),njr=l(),M0=a("li"),$Ce=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),QK=a("a"),ijr=o("FlaxRobertaForSequenceClassification"),djr=o(" (RoBERTa model)"),cjr=l(),E0=a("li"),kCe=a("strong"),fjr=o("roformer"),mjr=o(" \u2014 "),HK=a("a"),gjr=o("FlaxRoFormerForSequenceClassification"),hjr=o(" (RoFormer model)"),pjr=l(),C0=a("li"),SCe=a("strong"),_jr=o("xlm-roberta"),ujr=o(" \u2014 "),UK=a("a"),bjr=o("FlaxXLMRobertaForSequenceClassification"),vjr=o(" (XLM-RoBERTa model)"),Fjr=l(),F(w0.$$.fragment),WDe=l(),Hc=a("h2"),A0=a("a"),RCe=a("span"),F(px.$$.fragment),Tjr=l(),PCe=a("span"),Mjr=o("FlaxAutoModelForQuestionAnswering"),QDe=l(),ur=a("div"),F(_x.$$.fragment),Ejr=l(),Uc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),YK=a("a"),Ljr=o("from_config()"),yjr=o(` class
method.`),xjr=l(),ux=a("p"),$jr=o("This class cannot be instantiated directly using "),BCe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Qt=a("div"),F(bx.$$.fragment),Pjr=l(),ICe=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ijr=l(),Jc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),NCe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(L0.$$.fragment),Vjr=l(),zr=a("div"),F(vx.$$.fragment),Xjr=l(),qCe=a("p"),zjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wjr=l(),Fn=a("p"),Qjr=o("The model class to instantiate is selected based on the "),jCe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),DCe=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),ke=a("ul"),y0=a("li"),OCe=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),ZK=a("a"),tDr=o("FlaxAlbertForQuestionAnswering"),aDr=o(" (ALBERT model)"),nDr=l(),x0=a("li"),VCe=a("strong"),sDr=o("bart"),lDr=o(" \u2014 "),eZ=a("a"),iDr=o("FlaxBartForQuestionAnswering"),dDr=o(" (BART model)"),cDr=l(),$0=a("li"),XCe=a("strong"),fDr=o("bert"),mDr=o(" \u2014 "),oZ=a("a"),gDr=o("FlaxBertForQuestionAnswering"),hDr=o(" (BERT model)"),pDr=l(),k0=a("li"),zCe=a("strong"),_Dr=o("big_bird"),uDr=o(" \u2014 "),rZ=a("a"),bDr=o("FlaxBigBirdForQuestionAnswering"),vDr=o(" (BigBird model)"),FDr=l(),S0=a("li"),WCe=a("strong"),TDr=o("distilbert"),MDr=o(" \u2014 "),tZ=a("a"),EDr=o("FlaxDistilBertForQuestionAnswering"),CDr=o(" (DistilBERT model)"),wDr=l(),R0=a("li"),QCe=a("strong"),ADr=o("electra"),LDr=o(" \u2014 "),aZ=a("a"),yDr=o("FlaxElectraForQuestionAnswering"),xDr=o(" (ELECTRA model)"),$Dr=l(),P0=a("li"),HCe=a("strong"),kDr=o("mbart"),SDr=o(" \u2014 "),nZ=a("a"),RDr=o("FlaxMBartForQuestionAnswering"),PDr=o(" (mBART model)"),BDr=l(),B0=a("li"),UCe=a("strong"),IDr=o("roberta"),NDr=o(" \u2014 "),sZ=a("a"),qDr=o("FlaxRobertaForQuestionAnswering"),jDr=o(" (RoBERTa model)"),DDr=l(),I0=a("li"),JCe=a("strong"),GDr=o("roformer"),ODr=o(" \u2014 "),lZ=a("a"),VDr=o("FlaxRoFormerForQuestionAnswering"),XDr=o(" (RoFormer model)"),zDr=l(),N0=a("li"),YCe=a("strong"),WDr=o("xlm-roberta"),QDr=o(" \u2014 "),iZ=a("a"),HDr=o("FlaxXLMRobertaForQuestionAnswering"),UDr=o(" (XLM-RoBERTa model)"),JDr=l(),F(q0.$$.fragment),HDe=l(),Yc=a("h2"),j0=a("a"),KCe=a("span"),F(Fx.$$.fragment),YDr=l(),ZCe=a("span"),KDr=o("FlaxAutoModelForTokenClassification"),UDe=l(),br=a("div"),F(Tx.$$.fragment),ZDr=l(),Kc=a("p"),eGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dZ=a("a"),oGr=o("from_pretrained()"),rGr=o(" class method or the "),cZ=a("a"),tGr=o("from_config()"),aGr=o(` class
method.`),nGr=l(),Mx=a("p"),sGr=o("This class cannot be instantiated directly using "),e5e=a("code"),lGr=o("__init__()"),iGr=o(" (throws an error)."),dGr=l(),Ht=a("div"),F(Ex.$$.fragment),cGr=l(),o5e=a("p"),fGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mGr=l(),Zc=a("p"),gGr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),hGr=o("not"),pGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),_Gr=o("from_pretrained()"),uGr=o(" to load the model weights."),bGr=l(),F(D0.$$.fragment),vGr=l(),Wr=a("div"),F(Cx.$$.fragment),FGr=l(),t5e=a("p"),TGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MGr=l(),Tn=a("p"),EGr=o("The model class to instantiate is selected based on the "),a5e=a("code"),CGr=o("model_type"),wGr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),AGr=o("pretrained_model_name_or_path"),LGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),yGr=o("pretrained_model_name_or_path"),xGr=o(":"),$Gr=l(),Ge=a("ul"),G0=a("li"),l5e=a("strong"),kGr=o("albert"),SGr=o(" \u2014 "),mZ=a("a"),RGr=o("FlaxAlbertForTokenClassification"),PGr=o(" (ALBERT model)"),BGr=l(),O0=a("li"),i5e=a("strong"),IGr=o("bert"),NGr=o(" \u2014 "),gZ=a("a"),qGr=o("FlaxBertForTokenClassification"),jGr=o(" (BERT model)"),DGr=l(),V0=a("li"),d5e=a("strong"),GGr=o("big_bird"),OGr=o(" \u2014 "),hZ=a("a"),VGr=o("FlaxBigBirdForTokenClassification"),XGr=o(" (BigBird model)"),zGr=l(),X0=a("li"),c5e=a("strong"),WGr=o("distilbert"),QGr=o(" \u2014 "),pZ=a("a"),HGr=o("FlaxDistilBertForTokenClassification"),UGr=o(" (DistilBERT model)"),JGr=l(),z0=a("li"),f5e=a("strong"),YGr=o("electra"),KGr=o(" \u2014 "),_Z=a("a"),ZGr=o("FlaxElectraForTokenClassification"),eOr=o(" (ELECTRA model)"),oOr=l(),W0=a("li"),m5e=a("strong"),rOr=o("roberta"),tOr=o(" \u2014 "),uZ=a("a"),aOr=o("FlaxRobertaForTokenClassification"),nOr=o(" (RoBERTa model)"),sOr=l(),Q0=a("li"),g5e=a("strong"),lOr=o("roformer"),iOr=o(" \u2014 "),bZ=a("a"),dOr=o("FlaxRoFormerForTokenClassification"),cOr=o(" (RoFormer model)"),fOr=l(),H0=a("li"),h5e=a("strong"),mOr=o("xlm-roberta"),gOr=o(" \u2014 "),vZ=a("a"),hOr=o("FlaxXLMRobertaForTokenClassification"),pOr=o(" (XLM-RoBERTa model)"),_Or=l(),F(U0.$$.fragment),JDe=l(),ef=a("h2"),J0=a("a"),p5e=a("span"),F(wx.$$.fragment),uOr=l(),_5e=a("span"),bOr=o("FlaxAutoModelForMultipleChoice"),YDe=l(),vr=a("div"),F(Ax.$$.fragment),vOr=l(),of=a("p"),FOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FZ=a("a"),TOr=o("from_pretrained()"),MOr=o(" class method or the "),TZ=a("a"),EOr=o("from_config()"),COr=o(` class
method.`),wOr=l(),Lx=a("p"),AOr=o("This class cannot be instantiated directly using "),u5e=a("code"),LOr=o("__init__()"),yOr=o(" (throws an error)."),xOr=l(),Ut=a("div"),F(yx.$$.fragment),$Or=l(),b5e=a("p"),kOr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SOr=l(),rf=a("p"),ROr=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),POr=o("not"),BOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),IOr=o("from_pretrained()"),NOr=o(" to load the model weights."),qOr=l(),F(Y0.$$.fragment),jOr=l(),Qr=a("div"),F(xx.$$.fragment),DOr=l(),F5e=a("p"),GOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),OOr=l(),Mn=a("p"),VOr=o("The model class to instantiate is selected based on the "),T5e=a("code"),XOr=o("model_type"),zOr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),WOr=o("pretrained_model_name_or_path"),QOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(":"),JOr=l(),Oe=a("ul"),K0=a("li"),C5e=a("strong"),YOr=o("albert"),KOr=o(" \u2014 "),EZ=a("a"),ZOr=o("FlaxAlbertForMultipleChoice"),eVr=o(" (ALBERT model)"),oVr=l(),Z0=a("li"),w5e=a("strong"),rVr=o("bert"),tVr=o(" \u2014 "),CZ=a("a"),aVr=o("FlaxBertForMultipleChoice"),nVr=o(" (BERT model)"),sVr=l(),ew=a("li"),A5e=a("strong"),lVr=o("big_bird"),iVr=o(" \u2014 "),wZ=a("a"),dVr=o("FlaxBigBirdForMultipleChoice"),cVr=o(" (BigBird model)"),fVr=l(),ow=a("li"),L5e=a("strong"),mVr=o("distilbert"),gVr=o(" \u2014 "),AZ=a("a"),hVr=o("FlaxDistilBertForMultipleChoice"),pVr=o(" (DistilBERT model)"),_Vr=l(),rw=a("li"),y5e=a("strong"),uVr=o("electra"),bVr=o(" \u2014 "),LZ=a("a"),vVr=o("FlaxElectraForMultipleChoice"),FVr=o(" (ELECTRA model)"),TVr=l(),tw=a("li"),x5e=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),yZ=a("a"),CVr=o("FlaxRobertaForMultipleChoice"),wVr=o(" (RoBERTa model)"),AVr=l(),aw=a("li"),$5e=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),xZ=a("a"),xVr=o("FlaxRoFormerForMultipleChoice"),$Vr=o(" (RoFormer model)"),kVr=l(),nw=a("li"),k5e=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),$Z=a("a"),PVr=o("FlaxXLMRobertaForMultipleChoice"),BVr=o(" (XLM-RoBERTa model)"),IVr=l(),F(sw.$$.fragment),KDe=l(),tf=a("h2"),lw=a("a"),S5e=a("span"),F($x.$$.fragment),NVr=l(),R5e=a("span"),qVr=o("FlaxAutoModelForNextSentencePrediction"),ZDe=l(),Fr=a("div"),F(kx.$$.fragment),jVr=l(),af=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),SZ=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),Sx=a("p"),WVr=o("This class cannot be instantiated directly using "),P5e=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Jt=a("div"),F(Rx.$$.fragment),JVr=l(),B5e=a("p"),YVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KVr=l(),nf=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(iw.$$.fragment),nXr=l(),Hr=a("div"),F(Px.$$.fragment),sXr=l(),N5e=a("p"),lXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iXr=l(),En=a("p"),dXr=o("The model class to instantiate is selected based on the "),q5e=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),j5e=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),_Xr=l(),G5e=a("ul"),dw=a("li"),O5e=a("strong"),uXr=o("bert"),bXr=o(" \u2014 "),PZ=a("a"),vXr=o("FlaxBertForNextSentencePrediction"),FXr=o(" (BERT model)"),TXr=l(),F(cw.$$.fragment),eGe=l(),sf=a("h2"),fw=a("a"),V5e=a("span"),F(Bx.$$.fragment),MXr=l(),X5e=a("span"),EXr=o("FlaxAutoModelForImageClassification"),oGe=l(),Tr=a("div"),F(Ix.$$.fragment),CXr=l(),lf=a("p"),wXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BZ=a("a"),AXr=o("from_pretrained()"),LXr=o(" class method or the "),IZ=a("a"),yXr=o("from_config()"),xXr=o(` class
method.`),$Xr=l(),Nx=a("p"),kXr=o("This class cannot be instantiated directly using "),z5e=a("code"),SXr=o("__init__()"),RXr=o(" (throws an error)."),PXr=l(),Yt=a("div"),F(qx.$$.fragment),BXr=l(),W5e=a("p"),IXr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NXr=l(),df=a("p"),qXr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),jXr=o("not"),DXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("a"),GXr=o("from_pretrained()"),OXr=o(" to load the model weights."),VXr=l(),F(mw.$$.fragment),XXr=l(),Ur=a("div"),F(jx.$$.fragment),zXr=l(),H5e=a("p"),WXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QXr=l(),Cn=a("p"),HXr=o("The model class to instantiate is selected based on the "),U5e=a("code"),UXr=o("model_type"),JXr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),YXr=o("pretrained_model_name_or_path"),KXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),ZXr=o("pretrained_model_name_or_path"),ezr=o(":"),ozr=l(),Dx=a("ul"),gw=a("li"),K5e=a("strong"),rzr=o("beit"),tzr=o(" \u2014 "),qZ=a("a"),azr=o("FlaxBeitForImageClassification"),nzr=o(" (BEiT model)"),szr=l(),hw=a("li"),Z5e=a("strong"),lzr=o("vit"),izr=o(" \u2014 "),jZ=a("a"),dzr=o("FlaxViTForImageClassification"),czr=o(" (ViT model)"),fzr=l(),F(pw.$$.fragment),rGe=l(),cf=a("h2"),_w=a("a"),e3e=a("span"),F(Gx.$$.fragment),mzr=l(),o3e=a("span"),gzr=o("FlaxAutoModelForVision2Seq"),tGe=l(),Mr=a("div"),F(Ox.$$.fragment),hzr=l(),ff=a("p"),pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=a("a"),_zr=o("from_pretrained()"),uzr=o(" class method or the "),GZ=a("a"),bzr=o("from_config()"),vzr=o(` class
method.`),Fzr=l(),Vx=a("p"),Tzr=o("This class cannot be instantiated directly using "),r3e=a("code"),Mzr=o("__init__()"),Ezr=o(" (throws an error)."),Czr=l(),Kt=a("div"),F(Xx.$$.fragment),wzr=l(),t3e=a("p"),Azr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lzr=l(),mf=a("p"),yzr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),xzr=o("not"),$zr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),kzr=o("from_pretrained()"),Szr=o(" to load the model weights."),Rzr=l(),F(uw.$$.fragment),Pzr=l(),Jr=a("div"),F(zx.$$.fragment),Bzr=l(),n3e=a("p"),Izr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nzr=l(),wn=a("p"),qzr=o("The model class to instantiate is selected based on the "),s3e=a("code"),jzr=o("model_type"),Dzr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),Vzr=o("pretrained_model_name_or_path"),Xzr=o(":"),zzr=l(),d3e=a("ul"),bw=a("li"),c3e=a("strong"),Wzr=o("vision-encoder-decoder"),Qzr=o(" \u2014 "),VZ=a("a"),Hzr=o("FlaxVisionEncoderDecoderModel"),Uzr=o(" (Vision Encoder decoder model)"),Jzr=l(),F(vw.$$.fragment),this.h()},l(f){const u=nRt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Wx=s(p);m=n(Wx,"A",{id:!0,class:!0,href:!0});var f3e=s(m);_=n(f3e,"SPAN",{});var m3e=s(_);T(d.$$.fragment,m3e),m3e.forEach(t),f3e.forEach(t),h=i(Wx),Mo=n(Wx,"SPAN",{});var g3e=s(Mo);mi=r(g3e,"Auto Classes"),g3e.forEach(t),Wx.forEach(t),_f=i(f),rt=n(f,"P",{});var Qx=s(rt);gi=r(Qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Qx,"CODE",{});var h3e=s(hi);N6=r(h3e,"from_pretrained()"),h3e.forEach(t),uf=r(Qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Qx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var p3e=s(Ln);q6=r(p3e,"AutoConfig"),p3e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var _3e=s(xn);j6=r(_3e,"AutoModel"),_3e.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var u3e=s($n);D6=r(u3e,"AutoTokenizer"),u3e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Hx=s(Ae);sk=r(Hx,"will create a model that is an instance of "),bi=n(Hx,"A",{href:!0});var b3e=s(bi);lk=r(b3e,"BertModel"),b3e.forEach(t),ik=r(Hx,"."),Hx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ux=s(wa);dk=r(Ux,"There is one class of "),vf=n(Ux,"CODE",{});var v3e=s(vf);ck=r(v3e,"AutoModel"),v3e.forEach(t),mVe=r(Ux," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ux.forEach(t),oje=i(f),vi=n(f,"H2",{class:!0});var Jx=s(vi);Ff=n(Jx,"A",{id:!0,class:!0,href:!0});var F3e=s(Ff);Ioe=n(F3e,"SPAN",{});var T3e=s(Ioe);T(G6.$$.fragment,T3e),T3e.forEach(t),F3e.forEach(t),gVe=i(Jx),Noe=n(Jx,"SPAN",{});var M3e=s(Noe);hVe=r(M3e,"Extending the Auto Classes"),M3e.forEach(t),Jx.forEach(t),rje=i(f),kn=n(f,"P",{});var gf=s(kn);pVe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qoe=n(gf,"CODE",{});var E3e=s(qoe);_Ve=r(E3e,"NewModel"),E3e.forEach(t),uVe=r(gf,", make sure you have a "),joe=n(gf,"CODE",{});var C3e=s(joe);bVe=r(C3e,"NewModelConfig"),C3e.forEach(t),vVe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),tje=i(f),T(O6.$$.fragment,f),aje=i(f),fk=n(f,"P",{});var w3e=s(fk);FVe=r(w3e,"You will then be able to use the auto classes like you would usually do!"),w3e.forEach(t),nje=i(f),T(Tf.$$.fragment,f),sje=i(f),Fi=n(f,"H2",{class:!0});var Yx=s(Fi);Mf=n(Yx,"A",{id:!0,class:!0,href:!0});var A3e=s(Mf);Doe=n(A3e,"SPAN",{});var L3e=s(Doe);T(V6.$$.fragment,L3e),L3e.forEach(t),A3e.forEach(t),TVe=i(Yx),Goe=n(Yx,"SPAN",{});var y3e=s(Goe);MVe=r(y3e,"AutoConfig"),y3e.forEach(t),Yx.forEach(t),lje=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(X6.$$.fragment,et),EVe=i(et),z6=n(et,"P",{});var Kx=s(z6);CVe=r(Kx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mk=n(Kx,"A",{href:!0});var x3e=s(mk);wVe=r(x3e,"from_pretrained()"),x3e.forEach(t),AVe=r(Kx," class method."),Kx.forEach(t),LVe=i(et),W6=n(et,"P",{});var Zx=s(W6);yVe=r(Zx,"This class cannot be instantiated directly using "),Ooe=n(Zx,"CODE",{});var $3e=s(Ooe);xVe=r($3e,"__init__()"),$3e.forEach(t),$Ve=r(Zx," (throws an error)."),Zx.forEach(t),kVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Q6.$$.fragment,ot),SVe=i(ot),Voe=n(ot,"P",{});var k3e=s(Voe);RVe=r(k3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),k3e.forEach(t),PVe=i(ot),Ti=n(ot,"P",{});var hf=s(Ti);BVe=r(hf,"The configuration class to instantiate is selected based on the "),Xoe=n(hf,"CODE",{});var S3e=s(Xoe);IVe=r(S3e,"model_type"),S3e.forEach(t),NVe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zoe=n(hf,"CODE",{});var R3e=s(zoe);qVe=r(R3e,"pretrained_model_name_or_path"),R3e.forEach(t),jVe=r(hf,":"),hf.forEach(t),DVe=i(ot),A=n(ot,"UL",{});var L=s(A);Ef=n(L,"LI",{});var Fw=s(Ef);Woe=n(Fw,"STRONG",{});var P3e=s(Woe);GVe=r(P3e,"albert"),P3e.forEach(t),OVe=r(Fw," \u2014 "),gk=n(Fw,"A",{href:!0});var B3e=s(gk);VVe=r(B3e,"AlbertConfig"),B3e.forEach(t),XVe=r(Fw," (ALBERT model)"),Fw.forEach(t),zVe=i(L),Cf=n(L,"LI",{});var Tw=s(Cf);Qoe=n(Tw,"STRONG",{});var I3e=s(Qoe);WVe=r(I3e,"bart"),I3e.forEach(t),QVe=r(Tw," \u2014 "),hk=n(Tw,"A",{href:!0});var N3e=s(hk);HVe=r(N3e,"BartConfig"),N3e.forEach(t),UVe=r(Tw," (BART model)"),Tw.forEach(t),JVe=i(L),wf=n(L,"LI",{});var Mw=s(wf);Hoe=n(Mw,"STRONG",{});var q3e=s(Hoe);YVe=r(q3e,"beit"),q3e.forEach(t),KVe=r(Mw," \u2014 "),pk=n(Mw,"A",{href:!0});var j3e=s(pk);ZVe=r(j3e,"BeitConfig"),j3e.forEach(t),eXe=r(Mw," (BEiT model)"),Mw.forEach(t),oXe=i(L),Af=n(L,"LI",{});var Ew=s(Af);Uoe=n(Ew,"STRONG",{});var D3e=s(Uoe);rXe=r(D3e,"bert"),D3e.forEach(t),tXe=r(Ew," \u2014 "),_k=n(Ew,"A",{href:!0});var G3e=s(_k);aXe=r(G3e,"BertConfig"),G3e.forEach(t),nXe=r(Ew," (BERT model)"),Ew.forEach(t),sXe=i(L),Lf=n(L,"LI",{});var Cw=s(Lf);Joe=n(Cw,"STRONG",{});var O3e=s(Joe);lXe=r(O3e,"bert-generation"),O3e.forEach(t),iXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var V3e=s(uk);dXe=r(V3e,"BertGenerationConfig"),V3e.forEach(t),cXe=r(Cw," (Bert Generation model)"),Cw.forEach(t),fXe=i(L),yf=n(L,"LI",{});var ww=s(yf);Yoe=n(ww,"STRONG",{});var X3e=s(Yoe);mXe=r(X3e,"big_bird"),X3e.forEach(t),gXe=r(ww," \u2014 "),bk=n(ww,"A",{href:!0});var z3e=s(bk);hXe=r(z3e,"BigBirdConfig"),z3e.forEach(t),pXe=r(ww," (BigBird model)"),ww.forEach(t),_Xe=i(L),xf=n(L,"LI",{});var Aw=s(xf);Koe=n(Aw,"STRONG",{});var W3e=s(Koe);uXe=r(W3e,"bigbird_pegasus"),W3e.forEach(t),bXe=r(Aw," \u2014 "),vk=n(Aw,"A",{href:!0});var Q3e=s(vk);vXe=r(Q3e,"BigBirdPegasusConfig"),Q3e.forEach(t),FXe=r(Aw," (BigBird-Pegasus model)"),Aw.forEach(t),TXe=i(L),$f=n(L,"LI",{});var Lw=s($f);Zoe=n(Lw,"STRONG",{});var H3e=s(Zoe);MXe=r(H3e,"blenderbot"),H3e.forEach(t),EXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var U3e=s(Fk);CXe=r(U3e,"BlenderbotConfig"),U3e.forEach(t),wXe=r(Lw," (Blenderbot model)"),Lw.forEach(t),AXe=i(L),kf=n(L,"LI",{});var yw=s(kf);ere=n(yw,"STRONG",{});var J3e=s(ere);LXe=r(J3e,"blenderbot-small"),J3e.forEach(t),yXe=r(yw," \u2014 "),Tk=n(yw,"A",{href:!0});var Y3e=s(Tk);xXe=r(Y3e,"BlenderbotSmallConfig"),Y3e.forEach(t),$Xe=r(yw," (BlenderbotSmall model)"),yw.forEach(t),kXe=i(L),Sf=n(L,"LI",{});var xw=s(Sf);ore=n(xw,"STRONG",{});var K3e=s(ore);SXe=r(K3e,"bloom"),K3e.forEach(t),RXe=r(xw," \u2014 "),Mk=n(xw,"A",{href:!0});var Z3e=s(Mk);PXe=r(Z3e,"BloomConfig"),Z3e.forEach(t),BXe=r(xw," (BLOOM model)"),xw.forEach(t),IXe=i(L),Rf=n(L,"LI",{});var $w=s(Rf);rre=n($w,"STRONG",{});var e0e=s(rre);NXe=r(e0e,"camembert"),e0e.forEach(t),qXe=r($w," \u2014 "),Ek=n($w,"A",{href:!0});var o0e=s(Ek);jXe=r(o0e,"CamembertConfig"),o0e.forEach(t),DXe=r($w," (CamemBERT model)"),$w.forEach(t),GXe=i(L),Pf=n(L,"LI",{});var kw=s(Pf);tre=n(kw,"STRONG",{});var r0e=s(tre);OXe=r(r0e,"canine"),r0e.forEach(t),VXe=r(kw," \u2014 "),Ck=n(kw,"A",{href:!0});var t0e=s(Ck);XXe=r(t0e,"CanineConfig"),t0e.forEach(t),zXe=r(kw," (CANINE model)"),kw.forEach(t),WXe=i(L),Bf=n(L,"LI",{});var Sw=s(Bf);are=n(Sw,"STRONG",{});var a0e=s(are);QXe=r(a0e,"clip"),a0e.forEach(t),HXe=r(Sw," \u2014 "),wk=n(Sw,"A",{href:!0});var n0e=s(wk);UXe=r(n0e,"CLIPConfig"),n0e.forEach(t),JXe=r(Sw," (CLIP model)"),Sw.forEach(t),YXe=i(L),If=n(L,"LI",{});var Rw=s(If);nre=n(Rw,"STRONG",{});var s0e=s(nre);KXe=r(s0e,"convbert"),s0e.forEach(t),ZXe=r(Rw," \u2014 "),Ak=n(Rw,"A",{href:!0});var l0e=s(Ak);eze=r(l0e,"ConvBertConfig"),l0e.forEach(t),oze=r(Rw," (ConvBERT model)"),Rw.forEach(t),rze=i(L),Nf=n(L,"LI",{});var Pw=s(Nf);sre=n(Pw,"STRONG",{});var i0e=s(sre);tze=r(i0e,"convnext"),i0e.forEach(t),aze=r(Pw," \u2014 "),Lk=n(Pw,"A",{href:!0});var d0e=s(Lk);nze=r(d0e,"ConvNextConfig"),d0e.forEach(t),sze=r(Pw," (ConvNeXT model)"),Pw.forEach(t),lze=i(L),qf=n(L,"LI",{});var Bw=s(qf);lre=n(Bw,"STRONG",{});var c0e=s(lre);ize=r(c0e,"ctrl"),c0e.forEach(t),dze=r(Bw," \u2014 "),yk=n(Bw,"A",{href:!0});var f0e=s(yk);cze=r(f0e,"CTRLConfig"),f0e.forEach(t),fze=r(Bw," (CTRL model)"),Bw.forEach(t),mze=i(L),jf=n(L,"LI",{});var Iw=s(jf);ire=n(Iw,"STRONG",{});var m0e=s(ire);gze=r(m0e,"cvt"),m0e.forEach(t),hze=r(Iw," \u2014 "),xk=n(Iw,"A",{href:!0});var g0e=s(xk);pze=r(g0e,"CvtConfig"),g0e.forEach(t),_ze=r(Iw," (CvT model)"),Iw.forEach(t),uze=i(L),Df=n(L,"LI",{});var Nw=s(Df);dre=n(Nw,"STRONG",{});var h0e=s(dre);bze=r(h0e,"data2vec-audio"),h0e.forEach(t),vze=r(Nw," \u2014 "),$k=n(Nw,"A",{href:!0});var p0e=s($k);Fze=r(p0e,"Data2VecAudioConfig"),p0e.forEach(t),Tze=r(Nw," (Data2VecAudio model)"),Nw.forEach(t),Mze=i(L),Gf=n(L,"LI",{});var qw=s(Gf);cre=n(qw,"STRONG",{});var _0e=s(cre);Eze=r(_0e,"data2vec-text"),_0e.forEach(t),Cze=r(qw," \u2014 "),kk=n(qw,"A",{href:!0});var u0e=s(kk);wze=r(u0e,"Data2VecTextConfig"),u0e.forEach(t),Aze=r(qw," (Data2VecText model)"),qw.forEach(t),Lze=i(L),Of=n(L,"LI",{});var jw=s(Of);fre=n(jw,"STRONG",{});var b0e=s(fre);yze=r(b0e,"data2vec-vision"),b0e.forEach(t),xze=r(jw," \u2014 "),Sk=n(jw,"A",{href:!0});var v0e=s(Sk);$ze=r(v0e,"Data2VecVisionConfig"),v0e.forEach(t),kze=r(jw," (Data2VecVision model)"),jw.forEach(t),Sze=i(L),Vf=n(L,"LI",{});var Dw=s(Vf);mre=n(Dw,"STRONG",{});var F0e=s(mre);Rze=r(F0e,"deberta"),F0e.forEach(t),Pze=r(Dw," \u2014 "),Rk=n(Dw,"A",{href:!0});var T0e=s(Rk);Bze=r(T0e,"DebertaConfig"),T0e.forEach(t),Ize=r(Dw," (DeBERTa model)"),Dw.forEach(t),Nze=i(L),Xf=n(L,"LI",{});var Gw=s(Xf);gre=n(Gw,"STRONG",{});var M0e=s(gre);qze=r(M0e,"deberta-v2"),M0e.forEach(t),jze=r(Gw," \u2014 "),Pk=n(Gw,"A",{href:!0});var E0e=s(Pk);Dze=r(E0e,"DebertaV2Config"),E0e.forEach(t),Gze=r(Gw," (DeBERTa-v2 model)"),Gw.forEach(t),Oze=i(L),zf=n(L,"LI",{});var Ow=s(zf);hre=n(Ow,"STRONG",{});var C0e=s(hre);Vze=r(C0e,"decision_transformer"),C0e.forEach(t),Xze=r(Ow," \u2014 "),Bk=n(Ow,"A",{href:!0});var Kzr=s(Bk);zze=r(Kzr,"DecisionTransformerConfig"),Kzr.forEach(t),Wze=r(Ow," (Decision Transformer model)"),Ow.forEach(t),Qze=i(L),Wf=n(L,"LI",{});var w0e=s(Wf);pre=n(w0e,"STRONG",{});var Zzr=s(pre);Hze=r(Zzr,"deit"),Zzr.forEach(t),Uze=r(w0e," \u2014 "),Ik=n(w0e,"A",{href:!0});var eWr=s(Ik);Jze=r(eWr,"DeiTConfig"),eWr.forEach(t),Yze=r(w0e," (DeiT model)"),w0e.forEach(t),Kze=i(L),Qf=n(L,"LI",{});var A0e=s(Qf);_re=n(A0e,"STRONG",{});var oWr=s(_re);Zze=r(oWr,"detr"),oWr.forEach(t),eWe=r(A0e," \u2014 "),Nk=n(A0e,"A",{href:!0});var rWr=s(Nk);oWe=r(rWr,"DetrConfig"),rWr.forEach(t),rWe=r(A0e," (DETR model)"),A0e.forEach(t),tWe=i(L),Hf=n(L,"LI",{});var L0e=s(Hf);ure=n(L0e,"STRONG",{});var tWr=s(ure);aWe=r(tWr,"distilbert"),tWr.forEach(t),nWe=r(L0e," \u2014 "),qk=n(L0e,"A",{href:!0});var aWr=s(qk);sWe=r(aWr,"DistilBertConfig"),aWr.forEach(t),lWe=r(L0e," (DistilBERT model)"),L0e.forEach(t),iWe=i(L),Uf=n(L,"LI",{});var y0e=s(Uf);bre=n(y0e,"STRONG",{});var nWr=s(bre);dWe=r(nWr,"dpr"),nWr.forEach(t),cWe=r(y0e," \u2014 "),jk=n(y0e,"A",{href:!0});var sWr=s(jk);fWe=r(sWr,"DPRConfig"),sWr.forEach(t),mWe=r(y0e," (DPR model)"),y0e.forEach(t),gWe=i(L),Jf=n(L,"LI",{});var x0e=s(Jf);vre=n(x0e,"STRONG",{});var lWr=s(vre);hWe=r(lWr,"dpt"),lWr.forEach(t),pWe=r(x0e," \u2014 "),Dk=n(x0e,"A",{href:!0});var iWr=s(Dk);_We=r(iWr,"DPTConfig"),iWr.forEach(t),uWe=r(x0e," (DPT model)"),x0e.forEach(t),bWe=i(L),Yf=n(L,"LI",{});var $0e=s(Yf);Fre=n($0e,"STRONG",{});var dWr=s(Fre);vWe=r(dWr,"electra"),dWr.forEach(t),FWe=r($0e," \u2014 "),Gk=n($0e,"A",{href:!0});var cWr=s(Gk);TWe=r(cWr,"ElectraConfig"),cWr.forEach(t),MWe=r($0e," (ELECTRA model)"),$0e.forEach(t),EWe=i(L),Kf=n(L,"LI",{});var k0e=s(Kf);Tre=n(k0e,"STRONG",{});var fWr=s(Tre);CWe=r(fWr,"encoder-decoder"),fWr.forEach(t),wWe=r(k0e," \u2014 "),Ok=n(k0e,"A",{href:!0});var mWr=s(Ok);AWe=r(mWr,"EncoderDecoderConfig"),mWr.forEach(t),LWe=r(k0e," (Encoder decoder model)"),k0e.forEach(t),yWe=i(L),Zf=n(L,"LI",{});var S0e=s(Zf);Mre=n(S0e,"STRONG",{});var gWr=s(Mre);xWe=r(gWr,"flaubert"),gWr.forEach(t),$We=r(S0e," \u2014 "),Vk=n(S0e,"A",{href:!0});var hWr=s(Vk);kWe=r(hWr,"FlaubertConfig"),hWr.forEach(t),SWe=r(S0e," (FlauBERT model)"),S0e.forEach(t),RWe=i(L),em=n(L,"LI",{});var R0e=s(em);Ere=n(R0e,"STRONG",{});var pWr=s(Ere);PWe=r(pWr,"flava"),pWr.forEach(t),BWe=r(R0e," \u2014 "),Xk=n(R0e,"A",{href:!0});var _Wr=s(Xk);IWe=r(_Wr,"FlavaConfig"),_Wr.forEach(t),NWe=r(R0e," (FLAVA model)"),R0e.forEach(t),qWe=i(L),om=n(L,"LI",{});var P0e=s(om);Cre=n(P0e,"STRONG",{});var uWr=s(Cre);jWe=r(uWr,"fnet"),uWr.forEach(t),DWe=r(P0e," \u2014 "),zk=n(P0e,"A",{href:!0});var bWr=s(zk);GWe=r(bWr,"FNetConfig"),bWr.forEach(t),OWe=r(P0e," (FNet model)"),P0e.forEach(t),VWe=i(L),rm=n(L,"LI",{});var B0e=s(rm);wre=n(B0e,"STRONG",{});var vWr=s(wre);XWe=r(vWr,"fsmt"),vWr.forEach(t),zWe=r(B0e," \u2014 "),Wk=n(B0e,"A",{href:!0});var FWr=s(Wk);WWe=r(FWr,"FSMTConfig"),FWr.forEach(t),QWe=r(B0e," (FairSeq Machine-Translation model)"),B0e.forEach(t),HWe=i(L),tm=n(L,"LI",{});var I0e=s(tm);Are=n(I0e,"STRONG",{});var TWr=s(Are);UWe=r(TWr,"funnel"),TWr.forEach(t),JWe=r(I0e," \u2014 "),Qk=n(I0e,"A",{href:!0});var MWr=s(Qk);YWe=r(MWr,"FunnelConfig"),MWr.forEach(t),KWe=r(I0e," (Funnel Transformer model)"),I0e.forEach(t),ZWe=i(L),am=n(L,"LI",{});var N0e=s(am);Lre=n(N0e,"STRONG",{});var EWr=s(Lre);eQe=r(EWr,"glpn"),EWr.forEach(t),oQe=r(N0e," \u2014 "),Hk=n(N0e,"A",{href:!0});var CWr=s(Hk);rQe=r(CWr,"GLPNConfig"),CWr.forEach(t),tQe=r(N0e," (GLPN model)"),N0e.forEach(t),aQe=i(L),nm=n(L,"LI",{});var q0e=s(nm);yre=n(q0e,"STRONG",{});var wWr=s(yre);nQe=r(wWr,"gpt2"),wWr.forEach(t),sQe=r(q0e," \u2014 "),Uk=n(q0e,"A",{href:!0});var AWr=s(Uk);lQe=r(AWr,"GPT2Config"),AWr.forEach(t),iQe=r(q0e," (OpenAI GPT-2 model)"),q0e.forEach(t),dQe=i(L),sm=n(L,"LI",{});var j0e=s(sm);xre=n(j0e,"STRONG",{});var LWr=s(xre);cQe=r(LWr,"gpt_neo"),LWr.forEach(t),fQe=r(j0e," \u2014 "),Jk=n(j0e,"A",{href:!0});var yWr=s(Jk);mQe=r(yWr,"GPTNeoConfig"),yWr.forEach(t),gQe=r(j0e," (GPT Neo model)"),j0e.forEach(t),hQe=i(L),lm=n(L,"LI",{});var D0e=s(lm);$re=n(D0e,"STRONG",{});var xWr=s($re);pQe=r(xWr,"gpt_neox"),xWr.forEach(t),_Qe=r(D0e," \u2014 "),Yk=n(D0e,"A",{href:!0});var $Wr=s(Yk);uQe=r($Wr,"GPTNeoXConfig"),$Wr.forEach(t),bQe=r(D0e," (GPT NeoX model)"),D0e.forEach(t),vQe=i(L),im=n(L,"LI",{});var G0e=s(im);kre=n(G0e,"STRONG",{});var kWr=s(kre);FQe=r(kWr,"gptj"),kWr.forEach(t),TQe=r(G0e," \u2014 "),Kk=n(G0e,"A",{href:!0});var SWr=s(Kk);MQe=r(SWr,"GPTJConfig"),SWr.forEach(t),EQe=r(G0e," (GPT-J model)"),G0e.forEach(t),CQe=i(L),dm=n(L,"LI",{});var O0e=s(dm);Sre=n(O0e,"STRONG",{});var RWr=s(Sre);wQe=r(RWr,"hubert"),RWr.forEach(t),AQe=r(O0e," \u2014 "),Zk=n(O0e,"A",{href:!0});var PWr=s(Zk);LQe=r(PWr,"HubertConfig"),PWr.forEach(t),yQe=r(O0e," (Hubert model)"),O0e.forEach(t),xQe=i(L),cm=n(L,"LI",{});var V0e=s(cm);Rre=n(V0e,"STRONG",{});var BWr=s(Rre);$Qe=r(BWr,"ibert"),BWr.forEach(t),kQe=r(V0e," \u2014 "),eS=n(V0e,"A",{href:!0});var IWr=s(eS);SQe=r(IWr,"IBertConfig"),IWr.forEach(t),RQe=r(V0e," (I-BERT model)"),V0e.forEach(t),PQe=i(L),fm=n(L,"LI",{});var X0e=s(fm);Pre=n(X0e,"STRONG",{});var NWr=s(Pre);BQe=r(NWr,"imagegpt"),NWr.forEach(t),IQe=r(X0e," \u2014 "),oS=n(X0e,"A",{href:!0});var qWr=s(oS);NQe=r(qWr,"ImageGPTConfig"),qWr.forEach(t),qQe=r(X0e," (ImageGPT model)"),X0e.forEach(t),jQe=i(L),mm=n(L,"LI",{});var z0e=s(mm);Bre=n(z0e,"STRONG",{});var jWr=s(Bre);DQe=r(jWr,"layoutlm"),jWr.forEach(t),GQe=r(z0e," \u2014 "),rS=n(z0e,"A",{href:!0});var DWr=s(rS);OQe=r(DWr,"LayoutLMConfig"),DWr.forEach(t),VQe=r(z0e," (LayoutLM model)"),z0e.forEach(t),XQe=i(L),gm=n(L,"LI",{});var W0e=s(gm);Ire=n(W0e,"STRONG",{});var GWr=s(Ire);zQe=r(GWr,"layoutlmv2"),GWr.forEach(t),WQe=r(W0e," \u2014 "),tS=n(W0e,"A",{href:!0});var OWr=s(tS);QQe=r(OWr,"LayoutLMv2Config"),OWr.forEach(t),HQe=r(W0e," (LayoutLMv2 model)"),W0e.forEach(t),UQe=i(L),hm=n(L,"LI",{});var Q0e=s(hm);Nre=n(Q0e,"STRONG",{});var VWr=s(Nre);JQe=r(VWr,"layoutlmv3"),VWr.forEach(t),YQe=r(Q0e," \u2014 "),aS=n(Q0e,"A",{href:!0});var XWr=s(aS);KQe=r(XWr,"LayoutLMv3Config"),XWr.forEach(t),ZQe=r(Q0e," (LayoutLMv3 model)"),Q0e.forEach(t),eHe=i(L),pm=n(L,"LI",{});var H0e=s(pm);qre=n(H0e,"STRONG",{});var zWr=s(qre);oHe=r(zWr,"led"),zWr.forEach(t),rHe=r(H0e," \u2014 "),nS=n(H0e,"A",{href:!0});var WWr=s(nS);tHe=r(WWr,"LEDConfig"),WWr.forEach(t),aHe=r(H0e," (LED model)"),H0e.forEach(t),nHe=i(L),_m=n(L,"LI",{});var U0e=s(_m);jre=n(U0e,"STRONG",{});var QWr=s(jre);sHe=r(QWr,"levit"),QWr.forEach(t),lHe=r(U0e," \u2014 "),sS=n(U0e,"A",{href:!0});var HWr=s(sS);iHe=r(HWr,"LevitConfig"),HWr.forEach(t),dHe=r(U0e," (LeViT model)"),U0e.forEach(t),cHe=i(L),um=n(L,"LI",{});var J0e=s(um);Dre=n(J0e,"STRONG",{});var UWr=s(Dre);fHe=r(UWr,"longformer"),UWr.forEach(t),mHe=r(J0e," \u2014 "),lS=n(J0e,"A",{href:!0});var JWr=s(lS);gHe=r(JWr,"LongformerConfig"),JWr.forEach(t),hHe=r(J0e," (Longformer model)"),J0e.forEach(t),pHe=i(L),bm=n(L,"LI",{});var Y0e=s(bm);Gre=n(Y0e,"STRONG",{});var YWr=s(Gre);_He=r(YWr,"luke"),YWr.forEach(t),uHe=r(Y0e," \u2014 "),iS=n(Y0e,"A",{href:!0});var KWr=s(iS);bHe=r(KWr,"LukeConfig"),KWr.forEach(t),vHe=r(Y0e," (LUKE model)"),Y0e.forEach(t),FHe=i(L),vm=n(L,"LI",{});var K0e=s(vm);Ore=n(K0e,"STRONG",{});var ZWr=s(Ore);THe=r(ZWr,"lxmert"),ZWr.forEach(t),MHe=r(K0e," \u2014 "),dS=n(K0e,"A",{href:!0});var eQr=s(dS);EHe=r(eQr,"LxmertConfig"),eQr.forEach(t),CHe=r(K0e," (LXMERT model)"),K0e.forEach(t),wHe=i(L),Fm=n(L,"LI",{});var Z0e=s(Fm);Vre=n(Z0e,"STRONG",{});var oQr=s(Vre);AHe=r(oQr,"m2m_100"),oQr.forEach(t),LHe=r(Z0e," \u2014 "),cS=n(Z0e,"A",{href:!0});var rQr=s(cS);yHe=r(rQr,"M2M100Config"),rQr.forEach(t),xHe=r(Z0e," (M2M100 model)"),Z0e.forEach(t),$He=i(L),Tm=n(L,"LI",{});var ewe=s(Tm);Xre=n(ewe,"STRONG",{});var tQr=s(Xre);kHe=r(tQr,"marian"),tQr.forEach(t),SHe=r(ewe," \u2014 "),fS=n(ewe,"A",{href:!0});var aQr=s(fS);RHe=r(aQr,"MarianConfig"),aQr.forEach(t),PHe=r(ewe," (Marian model)"),ewe.forEach(t),BHe=i(L),Mm=n(L,"LI",{});var owe=s(Mm);zre=n(owe,"STRONG",{});var nQr=s(zre);IHe=r(nQr,"maskformer"),nQr.forEach(t),NHe=r(owe," \u2014 "),mS=n(owe,"A",{href:!0});var sQr=s(mS);qHe=r(sQr,"MaskFormerConfig"),sQr.forEach(t),jHe=r(owe," (MaskFormer model)"),owe.forEach(t),DHe=i(L),Em=n(L,"LI",{});var rwe=s(Em);Wre=n(rwe,"STRONG",{});var lQr=s(Wre);GHe=r(lQr,"mbart"),lQr.forEach(t),OHe=r(rwe," \u2014 "),gS=n(rwe,"A",{href:!0});var iQr=s(gS);VHe=r(iQr,"MBartConfig"),iQr.forEach(t),XHe=r(rwe," (mBART model)"),rwe.forEach(t),zHe=i(L),Cm=n(L,"LI",{});var twe=s(Cm);Qre=n(twe,"STRONG",{});var dQr=s(Qre);WHe=r(dQr,"megatron-bert"),dQr.forEach(t),QHe=r(twe," \u2014 "),hS=n(twe,"A",{href:!0});var cQr=s(hS);HHe=r(cQr,"MegatronBertConfig"),cQr.forEach(t),UHe=r(twe," (Megatron-BERT model)"),twe.forEach(t),JHe=i(L),wm=n(L,"LI",{});var awe=s(wm);Hre=n(awe,"STRONG",{});var fQr=s(Hre);YHe=r(fQr,"mobilebert"),fQr.forEach(t),KHe=r(awe," \u2014 "),pS=n(awe,"A",{href:!0});var mQr=s(pS);ZHe=r(mQr,"MobileBertConfig"),mQr.forEach(t),eUe=r(awe," (MobileBERT model)"),awe.forEach(t),oUe=i(L),Am=n(L,"LI",{});var nwe=s(Am);Ure=n(nwe,"STRONG",{});var gQr=s(Ure);rUe=r(gQr,"mpnet"),gQr.forEach(t),tUe=r(nwe," \u2014 "),_S=n(nwe,"A",{href:!0});var hQr=s(_S);aUe=r(hQr,"MPNetConfig"),hQr.forEach(t),nUe=r(nwe," (MPNet model)"),nwe.forEach(t),sUe=i(L),Lm=n(L,"LI",{});var swe=s(Lm);Jre=n(swe,"STRONG",{});var pQr=s(Jre);lUe=r(pQr,"mt5"),pQr.forEach(t),iUe=r(swe," \u2014 "),uS=n(swe,"A",{href:!0});var _Qr=s(uS);dUe=r(_Qr,"MT5Config"),_Qr.forEach(t),cUe=r(swe," (MT5 model)"),swe.forEach(t),fUe=i(L),ym=n(L,"LI",{});var lwe=s(ym);Yre=n(lwe,"STRONG",{});var uQr=s(Yre);mUe=r(uQr,"nystromformer"),uQr.forEach(t),gUe=r(lwe," \u2014 "),bS=n(lwe,"A",{href:!0});var bQr=s(bS);hUe=r(bQr,"NystromformerConfig"),bQr.forEach(t),pUe=r(lwe," (Nystr\xF6mformer model)"),lwe.forEach(t),_Ue=i(L),xm=n(L,"LI",{});var iwe=s(xm);Kre=n(iwe,"STRONG",{});var vQr=s(Kre);uUe=r(vQr,"openai-gpt"),vQr.forEach(t),bUe=r(iwe," \u2014 "),vS=n(iwe,"A",{href:!0});var FQr=s(vS);vUe=r(FQr,"OpenAIGPTConfig"),FQr.forEach(t),FUe=r(iwe," (OpenAI GPT model)"),iwe.forEach(t),TUe=i(L),$m=n(L,"LI",{});var dwe=s($m);Zre=n(dwe,"STRONG",{});var TQr=s(Zre);MUe=r(TQr,"opt"),TQr.forEach(t),EUe=r(dwe," \u2014 "),FS=n(dwe,"A",{href:!0});var MQr=s(FS);CUe=r(MQr,"OPTConfig"),MQr.forEach(t),wUe=r(dwe," (OPT model)"),dwe.forEach(t),AUe=i(L),km=n(L,"LI",{});var cwe=s(km);ete=n(cwe,"STRONG",{});var EQr=s(ete);LUe=r(EQr,"pegasus"),EQr.forEach(t),yUe=r(cwe," \u2014 "),TS=n(cwe,"A",{href:!0});var CQr=s(TS);xUe=r(CQr,"PegasusConfig"),CQr.forEach(t),$Ue=r(cwe," (Pegasus model)"),cwe.forEach(t),kUe=i(L),Sm=n(L,"LI",{});var fwe=s(Sm);ote=n(fwe,"STRONG",{});var wQr=s(ote);SUe=r(wQr,"perceiver"),wQr.forEach(t),RUe=r(fwe," \u2014 "),MS=n(fwe,"A",{href:!0});var AQr=s(MS);PUe=r(AQr,"PerceiverConfig"),AQr.forEach(t),BUe=r(fwe," (Perceiver model)"),fwe.forEach(t),IUe=i(L),Rm=n(L,"LI",{});var mwe=s(Rm);rte=n(mwe,"STRONG",{});var LQr=s(rte);NUe=r(LQr,"plbart"),LQr.forEach(t),qUe=r(mwe," \u2014 "),ES=n(mwe,"A",{href:!0});var yQr=s(ES);jUe=r(yQr,"PLBartConfig"),yQr.forEach(t),DUe=r(mwe," (PLBart model)"),mwe.forEach(t),GUe=i(L),Pm=n(L,"LI",{});var gwe=s(Pm);tte=n(gwe,"STRONG",{});var xQr=s(tte);OUe=r(xQr,"poolformer"),xQr.forEach(t),VUe=r(gwe," \u2014 "),CS=n(gwe,"A",{href:!0});var $Qr=s(CS);XUe=r($Qr,"PoolFormerConfig"),$Qr.forEach(t),zUe=r(gwe," (PoolFormer model)"),gwe.forEach(t),WUe=i(L),Bm=n(L,"LI",{});var hwe=s(Bm);ate=n(hwe,"STRONG",{});var kQr=s(ate);QUe=r(kQr,"prophetnet"),kQr.forEach(t),HUe=r(hwe," \u2014 "),wS=n(hwe,"A",{href:!0});var SQr=s(wS);UUe=r(SQr,"ProphetNetConfig"),SQr.forEach(t),JUe=r(hwe," (ProphetNet model)"),hwe.forEach(t),YUe=i(L),Im=n(L,"LI",{});var pwe=s(Im);nte=n(pwe,"STRONG",{});var RQr=s(nte);KUe=r(RQr,"qdqbert"),RQr.forEach(t),ZUe=r(pwe," \u2014 "),AS=n(pwe,"A",{href:!0});var PQr=s(AS);eJe=r(PQr,"QDQBertConfig"),PQr.forEach(t),oJe=r(pwe," (QDQBert model)"),pwe.forEach(t),rJe=i(L),Nm=n(L,"LI",{});var _we=s(Nm);ste=n(_we,"STRONG",{});var BQr=s(ste);tJe=r(BQr,"rag"),BQr.forEach(t),aJe=r(_we," \u2014 "),LS=n(_we,"A",{href:!0});var IQr=s(LS);nJe=r(IQr,"RagConfig"),IQr.forEach(t),sJe=r(_we," (RAG model)"),_we.forEach(t),lJe=i(L),qm=n(L,"LI",{});var uwe=s(qm);lte=n(uwe,"STRONG",{});var NQr=s(lte);iJe=r(NQr,"realm"),NQr.forEach(t),dJe=r(uwe," \u2014 "),yS=n(uwe,"A",{href:!0});var qQr=s(yS);cJe=r(qQr,"RealmConfig"),qQr.forEach(t),fJe=r(uwe," (REALM model)"),uwe.forEach(t),mJe=i(L),jm=n(L,"LI",{});var bwe=s(jm);ite=n(bwe,"STRONG",{});var jQr=s(ite);gJe=r(jQr,"reformer"),jQr.forEach(t),hJe=r(bwe," \u2014 "),xS=n(bwe,"A",{href:!0});var DQr=s(xS);pJe=r(DQr,"ReformerConfig"),DQr.forEach(t),_Je=r(bwe," (Reformer model)"),bwe.forEach(t),uJe=i(L),Dm=n(L,"LI",{});var vwe=s(Dm);dte=n(vwe,"STRONG",{});var GQr=s(dte);bJe=r(GQr,"regnet"),GQr.forEach(t),vJe=r(vwe," \u2014 "),$S=n(vwe,"A",{href:!0});var OQr=s($S);FJe=r(OQr,"RegNetConfig"),OQr.forEach(t),TJe=r(vwe," (RegNet model)"),vwe.forEach(t),MJe=i(L),Gm=n(L,"LI",{});var Fwe=s(Gm);cte=n(Fwe,"STRONG",{});var VQr=s(cte);EJe=r(VQr,"rembert"),VQr.forEach(t),CJe=r(Fwe," \u2014 "),kS=n(Fwe,"A",{href:!0});var XQr=s(kS);wJe=r(XQr,"RemBertConfig"),XQr.forEach(t),AJe=r(Fwe," (RemBERT model)"),Fwe.forEach(t),LJe=i(L),Om=n(L,"LI",{});var Twe=s(Om);fte=n(Twe,"STRONG",{});var zQr=s(fte);yJe=r(zQr,"resnet"),zQr.forEach(t),xJe=r(Twe," \u2014 "),SS=n(Twe,"A",{href:!0});var WQr=s(SS);$Je=r(WQr,"ResNetConfig"),WQr.forEach(t),kJe=r(Twe," (ResNet model)"),Twe.forEach(t),SJe=i(L),Vm=n(L,"LI",{});var Mwe=s(Vm);mte=n(Mwe,"STRONG",{});var QQr=s(mte);RJe=r(QQr,"retribert"),QQr.forEach(t),PJe=r(Mwe," \u2014 "),RS=n(Mwe,"A",{href:!0});var HQr=s(RS);BJe=r(HQr,"RetriBertConfig"),HQr.forEach(t),IJe=r(Mwe," (RetriBERT model)"),Mwe.forEach(t),NJe=i(L),Xm=n(L,"LI",{});var Ewe=s(Xm);gte=n(Ewe,"STRONG",{});var UQr=s(gte);qJe=r(UQr,"roberta"),UQr.forEach(t),jJe=r(Ewe," \u2014 "),PS=n(Ewe,"A",{href:!0});var JQr=s(PS);DJe=r(JQr,"RobertaConfig"),JQr.forEach(t),GJe=r(Ewe," (RoBERTa model)"),Ewe.forEach(t),OJe=i(L),zm=n(L,"LI",{});var Cwe=s(zm);hte=n(Cwe,"STRONG",{});var YQr=s(hte);VJe=r(YQr,"roformer"),YQr.forEach(t),XJe=r(Cwe," \u2014 "),BS=n(Cwe,"A",{href:!0});var KQr=s(BS);zJe=r(KQr,"RoFormerConfig"),KQr.forEach(t),WJe=r(Cwe," (RoFormer model)"),Cwe.forEach(t),QJe=i(L),Wm=n(L,"LI",{});var wwe=s(Wm);pte=n(wwe,"STRONG",{});var ZQr=s(pte);HJe=r(ZQr,"segformer"),ZQr.forEach(t),UJe=r(wwe," \u2014 "),IS=n(wwe,"A",{href:!0});var eHr=s(IS);JJe=r(eHr,"SegformerConfig"),eHr.forEach(t),YJe=r(wwe," (SegFormer model)"),wwe.forEach(t),KJe=i(L),Qm=n(L,"LI",{});var Awe=s(Qm);_te=n(Awe,"STRONG",{});var oHr=s(_te);ZJe=r(oHr,"sew"),oHr.forEach(t),eYe=r(Awe," \u2014 "),NS=n(Awe,"A",{href:!0});var rHr=s(NS);oYe=r(rHr,"SEWConfig"),rHr.forEach(t),rYe=r(Awe," (SEW model)"),Awe.forEach(t),tYe=i(L),Hm=n(L,"LI",{});var Lwe=s(Hm);ute=n(Lwe,"STRONG",{});var tHr=s(ute);aYe=r(tHr,"sew-d"),tHr.forEach(t),nYe=r(Lwe," \u2014 "),qS=n(Lwe,"A",{href:!0});var aHr=s(qS);sYe=r(aHr,"SEWDConfig"),aHr.forEach(t),lYe=r(Lwe," (SEW-D model)"),Lwe.forEach(t),iYe=i(L),Um=n(L,"LI",{});var ywe=s(Um);bte=n(ywe,"STRONG",{});var nHr=s(bte);dYe=r(nHr,"speech-encoder-decoder"),nHr.forEach(t),cYe=r(ywe," \u2014 "),jS=n(ywe,"A",{href:!0});var sHr=s(jS);fYe=r(sHr,"SpeechEncoderDecoderConfig"),sHr.forEach(t),mYe=r(ywe," (Speech Encoder decoder model)"),ywe.forEach(t),gYe=i(L),Jm=n(L,"LI",{});var xwe=s(Jm);vte=n(xwe,"STRONG",{});var lHr=s(vte);hYe=r(lHr,"speech_to_text"),lHr.forEach(t),pYe=r(xwe," \u2014 "),DS=n(xwe,"A",{href:!0});var iHr=s(DS);_Ye=r(iHr,"Speech2TextConfig"),iHr.forEach(t),uYe=r(xwe," (Speech2Text model)"),xwe.forEach(t),bYe=i(L),Ym=n(L,"LI",{});var $we=s(Ym);Fte=n($we,"STRONG",{});var dHr=s(Fte);vYe=r(dHr,"speech_to_text_2"),dHr.forEach(t),FYe=r($we," \u2014 "),GS=n($we,"A",{href:!0});var cHr=s(GS);TYe=r(cHr,"Speech2Text2Config"),cHr.forEach(t),MYe=r($we," (Speech2Text2 model)"),$we.forEach(t),EYe=i(L),Km=n(L,"LI",{});var kwe=s(Km);Tte=n(kwe,"STRONG",{});var fHr=s(Tte);CYe=r(fHr,"splinter"),fHr.forEach(t),wYe=r(kwe," \u2014 "),OS=n(kwe,"A",{href:!0});var mHr=s(OS);AYe=r(mHr,"SplinterConfig"),mHr.forEach(t),LYe=r(kwe," (Splinter model)"),kwe.forEach(t),yYe=i(L),Zm=n(L,"LI",{});var Swe=s(Zm);Mte=n(Swe,"STRONG",{});var gHr=s(Mte);xYe=r(gHr,"squeezebert"),gHr.forEach(t),$Ye=r(Swe," \u2014 "),VS=n(Swe,"A",{href:!0});var hHr=s(VS);kYe=r(hHr,"SqueezeBertConfig"),hHr.forEach(t),SYe=r(Swe," (SqueezeBERT model)"),Swe.forEach(t),RYe=i(L),eg=n(L,"LI",{});var Rwe=s(eg);Ete=n(Rwe,"STRONG",{});var pHr=s(Ete);PYe=r(pHr,"swin"),pHr.forEach(t),BYe=r(Rwe," \u2014 "),XS=n(Rwe,"A",{href:!0});var _Hr=s(XS);IYe=r(_Hr,"SwinConfig"),_Hr.forEach(t),NYe=r(Rwe," (Swin Transformer model)"),Rwe.forEach(t),qYe=i(L),og=n(L,"LI",{});var Pwe=s(og);Cte=n(Pwe,"STRONG",{});var uHr=s(Cte);jYe=r(uHr,"t5"),uHr.forEach(t),DYe=r(Pwe," \u2014 "),zS=n(Pwe,"A",{href:!0});var bHr=s(zS);GYe=r(bHr,"T5Config"),bHr.forEach(t),OYe=r(Pwe," (T5 model)"),Pwe.forEach(t),VYe=i(L),rg=n(L,"LI",{});var Bwe=s(rg);wte=n(Bwe,"STRONG",{});var vHr=s(wte);XYe=r(vHr,"tapas"),vHr.forEach(t),zYe=r(Bwe," \u2014 "),WS=n(Bwe,"A",{href:!0});var FHr=s(WS);WYe=r(FHr,"TapasConfig"),FHr.forEach(t),QYe=r(Bwe," (TAPAS model)"),Bwe.forEach(t),HYe=i(L),tg=n(L,"LI",{});var Iwe=s(tg);Ate=n(Iwe,"STRONG",{});var THr=s(Ate);UYe=r(THr,"trajectory_transformer"),THr.forEach(t),JYe=r(Iwe," \u2014 "),QS=n(Iwe,"A",{href:!0});var MHr=s(QS);YYe=r(MHr,"TrajectoryTransformerConfig"),MHr.forEach(t),KYe=r(Iwe," (Trajectory Transformer model)"),Iwe.forEach(t),ZYe=i(L),ag=n(L,"LI",{});var Nwe=s(ag);Lte=n(Nwe,"STRONG",{});var EHr=s(Lte);eKe=r(EHr,"transfo-xl"),EHr.forEach(t),oKe=r(Nwe," \u2014 "),HS=n(Nwe,"A",{href:!0});var CHr=s(HS);rKe=r(CHr,"TransfoXLConfig"),CHr.forEach(t),tKe=r(Nwe," (Transformer-XL model)"),Nwe.forEach(t),aKe=i(L),ng=n(L,"LI",{});var qwe=s(ng);yte=n(qwe,"STRONG",{});var wHr=s(yte);nKe=r(wHr,"trocr"),wHr.forEach(t),sKe=r(qwe," \u2014 "),US=n(qwe,"A",{href:!0});var AHr=s(US);lKe=r(AHr,"TrOCRConfig"),AHr.forEach(t),iKe=r(qwe," (TrOCR model)"),qwe.forEach(t),dKe=i(L),sg=n(L,"LI",{});var jwe=s(sg);xte=n(jwe,"STRONG",{});var LHr=s(xte);cKe=r(LHr,"unispeech"),LHr.forEach(t),fKe=r(jwe," \u2014 "),JS=n(jwe,"A",{href:!0});var yHr=s(JS);mKe=r(yHr,"UniSpeechConfig"),yHr.forEach(t),gKe=r(jwe," (UniSpeech model)"),jwe.forEach(t),hKe=i(L),lg=n(L,"LI",{});var Dwe=s(lg);$te=n(Dwe,"STRONG",{});var xHr=s($te);pKe=r(xHr,"unispeech-sat"),xHr.forEach(t),_Ke=r(Dwe," \u2014 "),YS=n(Dwe,"A",{href:!0});var $Hr=s(YS);uKe=r($Hr,"UniSpeechSatConfig"),$Hr.forEach(t),bKe=r(Dwe," (UniSpeechSat model)"),Dwe.forEach(t),vKe=i(L),ig=n(L,"LI",{});var Gwe=s(ig);kte=n(Gwe,"STRONG",{});var kHr=s(kte);FKe=r(kHr,"van"),kHr.forEach(t),TKe=r(Gwe," \u2014 "),KS=n(Gwe,"A",{href:!0});var SHr=s(KS);MKe=r(SHr,"VanConfig"),SHr.forEach(t),EKe=r(Gwe," (VAN model)"),Gwe.forEach(t),CKe=i(L),dg=n(L,"LI",{});var Owe=s(dg);Ste=n(Owe,"STRONG",{});var RHr=s(Ste);wKe=r(RHr,"vilt"),RHr.forEach(t),AKe=r(Owe," \u2014 "),ZS=n(Owe,"A",{href:!0});var PHr=s(ZS);LKe=r(PHr,"ViltConfig"),PHr.forEach(t),yKe=r(Owe," (ViLT model)"),Owe.forEach(t),xKe=i(L),cg=n(L,"LI",{});var Vwe=s(cg);Rte=n(Vwe,"STRONG",{});var BHr=s(Rte);$Ke=r(BHr,"vision-encoder-decoder"),BHr.forEach(t),kKe=r(Vwe," \u2014 "),eR=n(Vwe,"A",{href:!0});var IHr=s(eR);SKe=r(IHr,"VisionEncoderDecoderConfig"),IHr.forEach(t),RKe=r(Vwe," (Vision Encoder decoder model)"),Vwe.forEach(t),PKe=i(L),fg=n(L,"LI",{});var Xwe=s(fg);Pte=n(Xwe,"STRONG",{});var NHr=s(Pte);BKe=r(NHr,"vision-text-dual-encoder"),NHr.forEach(t),IKe=r(Xwe," \u2014 "),oR=n(Xwe,"A",{href:!0});var qHr=s(oR);NKe=r(qHr,"VisionTextDualEncoderConfig"),qHr.forEach(t),qKe=r(Xwe," (VisionTextDualEncoder model)"),Xwe.forEach(t),jKe=i(L),mg=n(L,"LI",{});var zwe=s(mg);Bte=n(zwe,"STRONG",{});var jHr=s(Bte);DKe=r(jHr,"visual_bert"),jHr.forEach(t),GKe=r(zwe," \u2014 "),rR=n(zwe,"A",{href:!0});var DHr=s(rR);OKe=r(DHr,"VisualBertConfig"),DHr.forEach(t),VKe=r(zwe," (VisualBERT model)"),zwe.forEach(t),XKe=i(L),gg=n(L,"LI",{});var Wwe=s(gg);Ite=n(Wwe,"STRONG",{});var GHr=s(Ite);zKe=r(GHr,"vit"),GHr.forEach(t),WKe=r(Wwe," \u2014 "),tR=n(Wwe,"A",{href:!0});var OHr=s(tR);QKe=r(OHr,"ViTConfig"),OHr.forEach(t),HKe=r(Wwe," (ViT model)"),Wwe.forEach(t),UKe=i(L),hg=n(L,"LI",{});var Qwe=s(hg);Nte=n(Qwe,"STRONG",{});var VHr=s(Nte);JKe=r(VHr,"vit_mae"),VHr.forEach(t),YKe=r(Qwe," \u2014 "),aR=n(Qwe,"A",{href:!0});var XHr=s(aR);KKe=r(XHr,"ViTMAEConfig"),XHr.forEach(t),ZKe=r(Qwe," (ViTMAE model)"),Qwe.forEach(t),eZe=i(L),pg=n(L,"LI",{});var Hwe=s(pg);qte=n(Hwe,"STRONG",{});var zHr=s(qte);oZe=r(zHr,"wav2vec2"),zHr.forEach(t),rZe=r(Hwe," \u2014 "),nR=n(Hwe,"A",{href:!0});var WHr=s(nR);tZe=r(WHr,"Wav2Vec2Config"),WHr.forEach(t),aZe=r(Hwe," (Wav2Vec2 model)"),Hwe.forEach(t),nZe=i(L),_g=n(L,"LI",{});var Uwe=s(_g);jte=n(Uwe,"STRONG",{});var QHr=s(jte);sZe=r(QHr,"wav2vec2-conformer"),QHr.forEach(t),lZe=r(Uwe," \u2014 "),sR=n(Uwe,"A",{href:!0});var HHr=s(sR);iZe=r(HHr,"Wav2Vec2ConformerConfig"),HHr.forEach(t),dZe=r(Uwe," (Wav2Vec2-Conformer model)"),Uwe.forEach(t),cZe=i(L),ug=n(L,"LI",{});var Jwe=s(ug);Dte=n(Jwe,"STRONG",{});var UHr=s(Dte);fZe=r(UHr,"wavlm"),UHr.forEach(t),mZe=r(Jwe," \u2014 "),lR=n(Jwe,"A",{href:!0});var JHr=s(lR);gZe=r(JHr,"WavLMConfig"),JHr.forEach(t),hZe=r(Jwe," (WavLM model)"),Jwe.forEach(t),pZe=i(L),bg=n(L,"LI",{});var Ywe=s(bg);Gte=n(Ywe,"STRONG",{});var YHr=s(Gte);_Ze=r(YHr,"xglm"),YHr.forEach(t),uZe=r(Ywe," \u2014 "),iR=n(Ywe,"A",{href:!0});var KHr=s(iR);bZe=r(KHr,"XGLMConfig"),KHr.forEach(t),vZe=r(Ywe," (XGLM model)"),Ywe.forEach(t),FZe=i(L),vg=n(L,"LI",{});var Kwe=s(vg);Ote=n(Kwe,"STRONG",{});var ZHr=s(Ote);TZe=r(ZHr,"xlm"),ZHr.forEach(t),MZe=r(Kwe," \u2014 "),dR=n(Kwe,"A",{href:!0});var eUr=s(dR);EZe=r(eUr,"XLMConfig"),eUr.forEach(t),CZe=r(Kwe," (XLM model)"),Kwe.forEach(t),wZe=i(L),Fg=n(L,"LI",{});var Zwe=s(Fg);Vte=n(Zwe,"STRONG",{});var oUr=s(Vte);AZe=r(oUr,"xlm-prophetnet"),oUr.forEach(t),LZe=r(Zwe," \u2014 "),cR=n(Zwe,"A",{href:!0});var rUr=s(cR);yZe=r(rUr,"XLMProphetNetConfig"),rUr.forEach(t),xZe=r(Zwe," (XLM-ProphetNet model)"),Zwe.forEach(t),$Ze=i(L),Tg=n(L,"LI",{});var eAe=s(Tg);Xte=n(eAe,"STRONG",{});var tUr=s(Xte);kZe=r(tUr,"xlm-roberta"),tUr.forEach(t),SZe=r(eAe," \u2014 "),fR=n(eAe,"A",{href:!0});var aUr=s(fR);RZe=r(aUr,"XLMRobertaConfig"),aUr.forEach(t),PZe=r(eAe," (XLM-RoBERTa model)"),eAe.forEach(t),BZe=i(L),Mg=n(L,"LI",{});var oAe=s(Mg);zte=n(oAe,"STRONG",{});var nUr=s(zte);IZe=r(nUr,"xlm-roberta-xl"),nUr.forEach(t),NZe=r(oAe," \u2014 "),mR=n(oAe,"A",{href:!0});var sUr=s(mR);qZe=r(sUr,"XLMRobertaXLConfig"),sUr.forEach(t),jZe=r(oAe," (XLM-RoBERTa-XL model)"),oAe.forEach(t),DZe=i(L),Eg=n(L,"LI",{});var rAe=s(Eg);Wte=n(rAe,"STRONG",{});var lUr=s(Wte);GZe=r(lUr,"xlnet"),lUr.forEach(t),OZe=r(rAe," \u2014 "),gR=n(rAe,"A",{href:!0});var iUr=s(gR);VZe=r(iUr,"XLNetConfig"),iUr.forEach(t),XZe=r(rAe," (XLNet model)"),rAe.forEach(t),zZe=i(L),Cg=n(L,"LI",{});var tAe=s(Cg);Qte=n(tAe,"STRONG",{});var dUr=s(Qte);WZe=r(dUr,"yolos"),dUr.forEach(t),QZe=r(tAe," \u2014 "),hR=n(tAe,"A",{href:!0});var cUr=s(hR);HZe=r(cUr,"YolosConfig"),cUr.forEach(t),UZe=r(tAe," (YOLOS model)"),tAe.forEach(t),JZe=i(L),wg=n(L,"LI",{});var aAe=s(wg);Hte=n(aAe,"STRONG",{});var fUr=s(Hte);YZe=r(fUr,"yoso"),fUr.forEach(t),KZe=r(aAe," \u2014 "),pR=n(aAe,"A",{href:!0});var mUr=s(pR);ZZe=r(mUr,"YosoConfig"),mUr.forEach(t),eeo=r(aAe," (YOSO model)"),aAe.forEach(t),L.forEach(t),oeo=i(ot),T(Ag.$$.fragment,ot),ot.forEach(t),reo=i(et),Lg=n(et,"DIV",{class:!0});var nGe=s(Lg);T(H6.$$.fragment,nGe),teo=i(nGe),Ute=n(nGe,"P",{});var gUr=s(Ute);aeo=r(gUr,"Register a new configuration for this class."),gUr.forEach(t),nGe.forEach(t),et.forEach(t),ije=i(f),Mi=n(f,"H2",{class:!0});var sGe=s(Mi);yg=n(sGe,"A",{id:!0,class:!0,href:!0});var hUr=s(yg);Jte=n(hUr,"SPAN",{});var pUr=s(Jte);T(U6.$$.fragment,pUr),pUr.forEach(t),hUr.forEach(t),neo=i(sGe),Yte=n(sGe,"SPAN",{});var _Ur=s(Yte);seo=r(_Ur,"AutoTokenizer"),_Ur.forEach(t),sGe.forEach(t),dje=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(J6.$$.fragment,qs),leo=i(qs),Y6=n(qs,"P",{});var lGe=s(Y6);ieo=r(lGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_R=n(lGe,"A",{href:!0});var uUr=s(_R);deo=r(uUr,"AutoTokenizer.from_pretrained()"),uUr.forEach(t),ceo=r(lGe," class method."),lGe.forEach(t),feo=i(qs),K6=n(qs,"P",{});var iGe=s(K6);meo=r(iGe,"This class cannot be instantiated directly using "),Kte=n(iGe,"CODE",{});var bUr=s(Kte);geo=r(bUr,"__init__()"),bUr.forEach(t),heo=r(iGe," (throws an error)."),iGe.forEach(t),peo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(Z6.$$.fragment,js),_eo=i(js),Zte=n(js,"P",{});var vUr=s(Zte);ueo=r(vUr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),vUr.forEach(t),beo=i(js),Aa=n(js,"P",{});var Vw=s(Aa);veo=r(Vw,"The tokenizer class to instantiate is selected based on the "),eae=n(Vw,"CODE",{});var FUr=s(eae);Feo=r(FUr,"model_type"),FUr.forEach(t),Teo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),oae=n(Vw,"CODE",{});var TUr=s(oae);Meo=r(TUr,"pretrained_model_name_or_path"),TUr.forEach(t),Eeo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=n(Vw,"CODE",{});var MUr=s(rae);Ceo=r(MUr,"pretrained_model_name_or_path"),MUr.forEach(t),weo=r(Vw,":"),Vw.forEach(t),Aeo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var e$=s(Sn);tae=n(e$,"STRONG",{});var EUr=s(tae);Leo=r(EUr,"albert"),EUr.forEach(t),yeo=r(e$," \u2014 "),uR=n(e$,"A",{href:!0});var CUr=s(uR);xeo=r(CUr,"AlbertTokenizer"),CUr.forEach(t),$eo=r(e$," or "),bR=n(e$,"A",{href:!0});var wUr=s(bR);keo=r(wUr,"AlbertTokenizerFast"),wUr.forEach(t),Seo=r(e$," (ALBERT model)"),e$.forEach(t),Reo=i(S),Rn=n(S,"LI",{});var o$=s(Rn);aae=n(o$,"STRONG",{});var AUr=s(aae);Peo=r(AUr,"bart"),AUr.forEach(t),Beo=r(o$," \u2014 "),vR=n(o$,"A",{href:!0});var LUr=s(vR);Ieo=r(LUr,"BartTokenizer"),LUr.forEach(t),Neo=r(o$," or "),FR=n(o$,"A",{href:!0});var yUr=s(FR);qeo=r(yUr,"BartTokenizerFast"),yUr.forEach(t),jeo=r(o$," (BART model)"),o$.forEach(t),Deo=i(S),Pn=n(S,"LI",{});var r$=s(Pn);nae=n(r$,"STRONG",{});var xUr=s(nae);Geo=r(xUr,"barthez"),xUr.forEach(t),Oeo=r(r$," \u2014 "),TR=n(r$,"A",{href:!0});var $Ur=s(TR);Veo=r($Ur,"BarthezTokenizer"),$Ur.forEach(t),Xeo=r(r$," or "),MR=n(r$,"A",{href:!0});var kUr=s(MR);zeo=r(kUr,"BarthezTokenizerFast"),kUr.forEach(t),Weo=r(r$," (BARThez model)"),r$.forEach(t),Qeo=i(S),xg=n(S,"LI",{});var nAe=s(xg);sae=n(nAe,"STRONG",{});var SUr=s(sae);Heo=r(SUr,"bartpho"),SUr.forEach(t),Ueo=r(nAe," \u2014 "),ER=n(nAe,"A",{href:!0});var RUr=s(ER);Jeo=r(RUr,"BartphoTokenizer"),RUr.forEach(t),Yeo=r(nAe," (BARTpho model)"),nAe.forEach(t),Keo=i(S),Bn=n(S,"LI",{});var t$=s(Bn);lae=n(t$,"STRONG",{});var PUr=s(lae);Zeo=r(PUr,"bert"),PUr.forEach(t),eoo=r(t$," \u2014 "),CR=n(t$,"A",{href:!0});var BUr=s(CR);ooo=r(BUr,"BertTokenizer"),BUr.forEach(t),roo=r(t$," or "),wR=n(t$,"A",{href:!0});var IUr=s(wR);too=r(IUr,"BertTokenizerFast"),IUr.forEach(t),aoo=r(t$," (BERT model)"),t$.forEach(t),noo=i(S),$g=n(S,"LI",{});var sAe=s($g);iae=n(sAe,"STRONG",{});var NUr=s(iae);soo=r(NUr,"bert-generation"),NUr.forEach(t),loo=r(sAe," \u2014 "),AR=n(sAe,"A",{href:!0});var qUr=s(AR);ioo=r(qUr,"BertGenerationTokenizer"),qUr.forEach(t),doo=r(sAe," (Bert Generation model)"),sAe.forEach(t),coo=i(S),kg=n(S,"LI",{});var lAe=s(kg);dae=n(lAe,"STRONG",{});var jUr=s(dae);foo=r(jUr,"bert-japanese"),jUr.forEach(t),moo=r(lAe," \u2014 "),LR=n(lAe,"A",{href:!0});var DUr=s(LR);goo=r(DUr,"BertJapaneseTokenizer"),DUr.forEach(t),hoo=r(lAe," (BertJapanese model)"),lAe.forEach(t),poo=i(S),Sg=n(S,"LI",{});var iAe=s(Sg);cae=n(iAe,"STRONG",{});var GUr=s(cae);_oo=r(GUr,"bertweet"),GUr.forEach(t),uoo=r(iAe," \u2014 "),yR=n(iAe,"A",{href:!0});var OUr=s(yR);boo=r(OUr,"BertweetTokenizer"),OUr.forEach(t),voo=r(iAe," (BERTweet model)"),iAe.forEach(t),Foo=i(S),In=n(S,"LI",{});var a$=s(In);fae=n(a$,"STRONG",{});var VUr=s(fae);Too=r(VUr,"big_bird"),VUr.forEach(t),Moo=r(a$," \u2014 "),xR=n(a$,"A",{href:!0});var XUr=s(xR);Eoo=r(XUr,"BigBirdTokenizer"),XUr.forEach(t),Coo=r(a$," or "),$R=n(a$,"A",{href:!0});var zUr=s($R);woo=r(zUr,"BigBirdTokenizerFast"),zUr.forEach(t),Aoo=r(a$," (BigBird model)"),a$.forEach(t),Loo=i(S),Nn=n(S,"LI",{});var n$=s(Nn);mae=n(n$,"STRONG",{});var WUr=s(mae);yoo=r(WUr,"bigbird_pegasus"),WUr.forEach(t),xoo=r(n$," \u2014 "),kR=n(n$,"A",{href:!0});var QUr=s(kR);$oo=r(QUr,"PegasusTokenizer"),QUr.forEach(t),koo=r(n$," or "),SR=n(n$,"A",{href:!0});var HUr=s(SR);Soo=r(HUr,"PegasusTokenizerFast"),HUr.forEach(t),Roo=r(n$," (BigBird-Pegasus model)"),n$.forEach(t),Poo=i(S),qn=n(S,"LI",{});var s$=s(qn);gae=n(s$,"STRONG",{});var UUr=s(gae);Boo=r(UUr,"blenderbot"),UUr.forEach(t),Ioo=r(s$," \u2014 "),RR=n(s$,"A",{href:!0});var JUr=s(RR);Noo=r(JUr,"BlenderbotTokenizer"),JUr.forEach(t),qoo=r(s$," or "),PR=n(s$,"A",{href:!0});var YUr=s(PR);joo=r(YUr,"BlenderbotTokenizerFast"),YUr.forEach(t),Doo=r(s$," (Blenderbot model)"),s$.forEach(t),Goo=i(S),Rg=n(S,"LI",{});var dAe=s(Rg);hae=n(dAe,"STRONG",{});var KUr=s(hae);Ooo=r(KUr,"blenderbot-small"),KUr.forEach(t),Voo=r(dAe," \u2014 "),BR=n(dAe,"A",{href:!0});var ZUr=s(BR);Xoo=r(ZUr,"BlenderbotSmallTokenizer"),ZUr.forEach(t),zoo=r(dAe," (BlenderbotSmall model)"),dAe.forEach(t),Woo=i(S),Pg=n(S,"LI",{});var cAe=s(Pg);pae=n(cAe,"STRONG",{});var eJr=s(pae);Qoo=r(eJr,"bloom"),eJr.forEach(t),Hoo=r(cAe," \u2014 "),IR=n(cAe,"A",{href:!0});var oJr=s(IR);Uoo=r(oJr,"BloomTokenizerFast"),oJr.forEach(t),Joo=r(cAe," (BLOOM model)"),cAe.forEach(t),Yoo=i(S),Bg=n(S,"LI",{});var fAe=s(Bg);_ae=n(fAe,"STRONG",{});var rJr=s(_ae);Koo=r(rJr,"byt5"),rJr.forEach(t),Zoo=r(fAe," \u2014 "),NR=n(fAe,"A",{href:!0});var tJr=s(NR);ero=r(tJr,"ByT5Tokenizer"),tJr.forEach(t),oro=r(fAe," (ByT5 model)"),fAe.forEach(t),rro=i(S),jn=n(S,"LI",{});var l$=s(jn);uae=n(l$,"STRONG",{});var aJr=s(uae);tro=r(aJr,"camembert"),aJr.forEach(t),aro=r(l$," \u2014 "),qR=n(l$,"A",{href:!0});var nJr=s(qR);nro=r(nJr,"CamembertTokenizer"),nJr.forEach(t),sro=r(l$," or "),jR=n(l$,"A",{href:!0});var sJr=s(jR);lro=r(sJr,"CamembertTokenizerFast"),sJr.forEach(t),iro=r(l$," (CamemBERT model)"),l$.forEach(t),dro=i(S),Ig=n(S,"LI",{});var mAe=s(Ig);bae=n(mAe,"STRONG",{});var lJr=s(bae);cro=r(lJr,"canine"),lJr.forEach(t),fro=r(mAe," \u2014 "),DR=n(mAe,"A",{href:!0});var iJr=s(DR);mro=r(iJr,"CanineTokenizer"),iJr.forEach(t),gro=r(mAe," (CANINE model)"),mAe.forEach(t),hro=i(S),Dn=n(S,"LI",{});var i$=s(Dn);vae=n(i$,"STRONG",{});var dJr=s(vae);pro=r(dJr,"clip"),dJr.forEach(t),_ro=r(i$," \u2014 "),GR=n(i$,"A",{href:!0});var cJr=s(GR);uro=r(cJr,"CLIPTokenizer"),cJr.forEach(t),bro=r(i$," or "),OR=n(i$,"A",{href:!0});var fJr=s(OR);vro=r(fJr,"CLIPTokenizerFast"),fJr.forEach(t),Fro=r(i$," (CLIP model)"),i$.forEach(t),Tro=i(S),Gn=n(S,"LI",{});var d$=s(Gn);Fae=n(d$,"STRONG",{});var mJr=s(Fae);Mro=r(mJr,"convbert"),mJr.forEach(t),Ero=r(d$," \u2014 "),VR=n(d$,"A",{href:!0});var gJr=s(VR);Cro=r(gJr,"ConvBertTokenizer"),gJr.forEach(t),wro=r(d$," or "),XR=n(d$,"A",{href:!0});var hJr=s(XR);Aro=r(hJr,"ConvBertTokenizerFast"),hJr.forEach(t),Lro=r(d$," (ConvBERT model)"),d$.forEach(t),yro=i(S),On=n(S,"LI",{});var c$=s(On);Tae=n(c$,"STRONG",{});var pJr=s(Tae);xro=r(pJr,"cpm"),pJr.forEach(t),$ro=r(c$," \u2014 "),zR=n(c$,"A",{href:!0});var _Jr=s(zR);kro=r(_Jr,"CpmTokenizer"),_Jr.forEach(t),Sro=r(c$," or "),WR=n(c$,"A",{href:!0});var uJr=s(WR);Rro=r(uJr,"CpmTokenizerFast"),uJr.forEach(t),Pro=r(c$," (CPM model)"),c$.forEach(t),Bro=i(S),Ng=n(S,"LI",{});var gAe=s(Ng);Mae=n(gAe,"STRONG",{});var bJr=s(Mae);Iro=r(bJr,"ctrl"),bJr.forEach(t),Nro=r(gAe," \u2014 "),QR=n(gAe,"A",{href:!0});var vJr=s(QR);qro=r(vJr,"CTRLTokenizer"),vJr.forEach(t),jro=r(gAe," (CTRL model)"),gAe.forEach(t),Dro=i(S),Vn=n(S,"LI",{});var f$=s(Vn);Eae=n(f$,"STRONG",{});var FJr=s(Eae);Gro=r(FJr,"data2vec-text"),FJr.forEach(t),Oro=r(f$," \u2014 "),HR=n(f$,"A",{href:!0});var TJr=s(HR);Vro=r(TJr,"RobertaTokenizer"),TJr.forEach(t),Xro=r(f$," or "),UR=n(f$,"A",{href:!0});var MJr=s(UR);zro=r(MJr,"RobertaTokenizerFast"),MJr.forEach(t),Wro=r(f$," (Data2VecText model)"),f$.forEach(t),Qro=i(S),Xn=n(S,"LI",{});var m$=s(Xn);Cae=n(m$,"STRONG",{});var EJr=s(Cae);Hro=r(EJr,"deberta"),EJr.forEach(t),Uro=r(m$," \u2014 "),JR=n(m$,"A",{href:!0});var CJr=s(JR);Jro=r(CJr,"DebertaTokenizer"),CJr.forEach(t),Yro=r(m$," or "),YR=n(m$,"A",{href:!0});var wJr=s(YR);Kro=r(wJr,"DebertaTokenizerFast"),wJr.forEach(t),Zro=r(m$," (DeBERTa model)"),m$.forEach(t),eto=i(S),zn=n(S,"LI",{});var g$=s(zn);wae=n(g$,"STRONG",{});var AJr=s(wae);oto=r(AJr,"deberta-v2"),AJr.forEach(t),rto=r(g$," \u2014 "),KR=n(g$,"A",{href:!0});var LJr=s(KR);tto=r(LJr,"DebertaV2Tokenizer"),LJr.forEach(t),ato=r(g$," or "),ZR=n(g$,"A",{href:!0});var yJr=s(ZR);nto=r(yJr,"DebertaV2TokenizerFast"),yJr.forEach(t),sto=r(g$," (DeBERTa-v2 model)"),g$.forEach(t),lto=i(S),Wn=n(S,"LI",{});var h$=s(Wn);Aae=n(h$,"STRONG",{});var xJr=s(Aae);ito=r(xJr,"distilbert"),xJr.forEach(t),dto=r(h$," \u2014 "),eP=n(h$,"A",{href:!0});var $Jr=s(eP);cto=r($Jr,"DistilBertTokenizer"),$Jr.forEach(t),fto=r(h$," or "),oP=n(h$,"A",{href:!0});var kJr=s(oP);mto=r(kJr,"DistilBertTokenizerFast"),kJr.forEach(t),gto=r(h$," (DistilBERT model)"),h$.forEach(t),hto=i(S),Qn=n(S,"LI",{});var p$=s(Qn);Lae=n(p$,"STRONG",{});var SJr=s(Lae);pto=r(SJr,"dpr"),SJr.forEach(t),_to=r(p$," \u2014 "),rP=n(p$,"A",{href:!0});var RJr=s(rP);uto=r(RJr,"DPRQuestionEncoderTokenizer"),RJr.forEach(t),bto=r(p$," or "),tP=n(p$,"A",{href:!0});var PJr=s(tP);vto=r(PJr,"DPRQuestionEncoderTokenizerFast"),PJr.forEach(t),Fto=r(p$," (DPR model)"),p$.forEach(t),Tto=i(S),Hn=n(S,"LI",{});var _$=s(Hn);yae=n(_$,"STRONG",{});var BJr=s(yae);Mto=r(BJr,"electra"),BJr.forEach(t),Eto=r(_$," \u2014 "),aP=n(_$,"A",{href:!0});var IJr=s(aP);Cto=r(IJr,"ElectraTokenizer"),IJr.forEach(t),wto=r(_$," or "),nP=n(_$,"A",{href:!0});var NJr=s(nP);Ato=r(NJr,"ElectraTokenizerFast"),NJr.forEach(t),Lto=r(_$," (ELECTRA model)"),_$.forEach(t),yto=i(S),qg=n(S,"LI",{});var hAe=s(qg);xae=n(hAe,"STRONG",{});var qJr=s(xae);xto=r(qJr,"flaubert"),qJr.forEach(t),$to=r(hAe," \u2014 "),sP=n(hAe,"A",{href:!0});var jJr=s(sP);kto=r(jJr,"FlaubertTokenizer"),jJr.forEach(t),Sto=r(hAe," (FlauBERT model)"),hAe.forEach(t),Rto=i(S),Un=n(S,"LI",{});var u$=s(Un);$ae=n(u$,"STRONG",{});var DJr=s($ae);Pto=r(DJr,"fnet"),DJr.forEach(t),Bto=r(u$," \u2014 "),lP=n(u$,"A",{href:!0});var GJr=s(lP);Ito=r(GJr,"FNetTokenizer"),GJr.forEach(t),Nto=r(u$," or "),iP=n(u$,"A",{href:!0});var OJr=s(iP);qto=r(OJr,"FNetTokenizerFast"),OJr.forEach(t),jto=r(u$," (FNet model)"),u$.forEach(t),Dto=i(S),jg=n(S,"LI",{});var pAe=s(jg);kae=n(pAe,"STRONG",{});var VJr=s(kae);Gto=r(VJr,"fsmt"),VJr.forEach(t),Oto=r(pAe," \u2014 "),dP=n(pAe,"A",{href:!0});var XJr=s(dP);Vto=r(XJr,"FSMTTokenizer"),XJr.forEach(t),Xto=r(pAe," (FairSeq Machine-Translation model)"),pAe.forEach(t),zto=i(S),Jn=n(S,"LI",{});var b$=s(Jn);Sae=n(b$,"STRONG",{});var zJr=s(Sae);Wto=r(zJr,"funnel"),zJr.forEach(t),Qto=r(b$," \u2014 "),cP=n(b$,"A",{href:!0});var WJr=s(cP);Hto=r(WJr,"FunnelTokenizer"),WJr.forEach(t),Uto=r(b$," or "),fP=n(b$,"A",{href:!0});var QJr=s(fP);Jto=r(QJr,"FunnelTokenizerFast"),QJr.forEach(t),Yto=r(b$," (Funnel Transformer model)"),b$.forEach(t),Kto=i(S),Yn=n(S,"LI",{});var v$=s(Yn);Rae=n(v$,"STRONG",{});var HJr=s(Rae);Zto=r(HJr,"gpt2"),HJr.forEach(t),eao=r(v$," \u2014 "),mP=n(v$,"A",{href:!0});var UJr=s(mP);oao=r(UJr,"GPT2Tokenizer"),UJr.forEach(t),rao=r(v$," or "),gP=n(v$,"A",{href:!0});var JJr=s(gP);tao=r(JJr,"GPT2TokenizerFast"),JJr.forEach(t),aao=r(v$," (OpenAI GPT-2 model)"),v$.forEach(t),nao=i(S),Kn=n(S,"LI",{});var F$=s(Kn);Pae=n(F$,"STRONG",{});var YJr=s(Pae);sao=r(YJr,"gpt_neo"),YJr.forEach(t),lao=r(F$," \u2014 "),hP=n(F$,"A",{href:!0});var KJr=s(hP);iao=r(KJr,"GPT2Tokenizer"),KJr.forEach(t),dao=r(F$," or "),pP=n(F$,"A",{href:!0});var ZJr=s(pP);cao=r(ZJr,"GPT2TokenizerFast"),ZJr.forEach(t),fao=r(F$," (GPT Neo model)"),F$.forEach(t),mao=i(S),Dg=n(S,"LI",{});var _Ae=s(Dg);Bae=n(_Ae,"STRONG",{});var eYr=s(Bae);gao=r(eYr,"gpt_neox"),eYr.forEach(t),hao=r(_Ae," \u2014 "),_P=n(_Ae,"A",{href:!0});var oYr=s(_P);pao=r(oYr,"GPTNeoXTokenizerFast"),oYr.forEach(t),_ao=r(_Ae," (GPT NeoX model)"),_Ae.forEach(t),uao=i(S),Zn=n(S,"LI",{});var T$=s(Zn);Iae=n(T$,"STRONG",{});var rYr=s(Iae);bao=r(rYr,"gptj"),rYr.forEach(t),vao=r(T$," \u2014 "),uP=n(T$,"A",{href:!0});var tYr=s(uP);Fao=r(tYr,"GPT2Tokenizer"),tYr.forEach(t),Tao=r(T$," or "),bP=n(T$,"A",{href:!0});var aYr=s(bP);Mao=r(aYr,"GPT2TokenizerFast"),aYr.forEach(t),Eao=r(T$," (GPT-J model)"),T$.forEach(t),Cao=i(S),es=n(S,"LI",{});var M$=s(es);Nae=n(M$,"STRONG",{});var nYr=s(Nae);wao=r(nYr,"herbert"),nYr.forEach(t),Aao=r(M$," \u2014 "),vP=n(M$,"A",{href:!0});var sYr=s(vP);Lao=r(sYr,"HerbertTokenizer"),sYr.forEach(t),yao=r(M$," or "),FP=n(M$,"A",{href:!0});var lYr=s(FP);xao=r(lYr,"HerbertTokenizerFast"),lYr.forEach(t),$ao=r(M$," (HerBERT model)"),M$.forEach(t),kao=i(S),Gg=n(S,"LI",{});var uAe=s(Gg);qae=n(uAe,"STRONG",{});var iYr=s(qae);Sao=r(iYr,"hubert"),iYr.forEach(t),Rao=r(uAe," \u2014 "),TP=n(uAe,"A",{href:!0});var dYr=s(TP);Pao=r(dYr,"Wav2Vec2CTCTokenizer"),dYr.forEach(t),Bao=r(uAe," (Hubert model)"),uAe.forEach(t),Iao=i(S),os=n(S,"LI",{});var E$=s(os);jae=n(E$,"STRONG",{});var cYr=s(jae);Nao=r(cYr,"ibert"),cYr.forEach(t),qao=r(E$," \u2014 "),MP=n(E$,"A",{href:!0});var fYr=s(MP);jao=r(fYr,"RobertaTokenizer"),fYr.forEach(t),Dao=r(E$," or "),EP=n(E$,"A",{href:!0});var mYr=s(EP);Gao=r(mYr,"RobertaTokenizerFast"),mYr.forEach(t),Oao=r(E$," (I-BERT model)"),E$.forEach(t),Vao=i(S),rs=n(S,"LI",{});var C$=s(rs);Dae=n(C$,"STRONG",{});var gYr=s(Dae);Xao=r(gYr,"layoutlm"),gYr.forEach(t),zao=r(C$," \u2014 "),CP=n(C$,"A",{href:!0});var hYr=s(CP);Wao=r(hYr,"LayoutLMTokenizer"),hYr.forEach(t),Qao=r(C$," or "),wP=n(C$,"A",{href:!0});var pYr=s(wP);Hao=r(pYr,"LayoutLMTokenizerFast"),pYr.forEach(t),Uao=r(C$," (LayoutLM model)"),C$.forEach(t),Jao=i(S),ts=n(S,"LI",{});var w$=s(ts);Gae=n(w$,"STRONG",{});var _Yr=s(Gae);Yao=r(_Yr,"layoutlmv2"),_Yr.forEach(t),Kao=r(w$," \u2014 "),AP=n(w$,"A",{href:!0});var uYr=s(AP);Zao=r(uYr,"LayoutLMv2Tokenizer"),uYr.forEach(t),eno=r(w$," or "),LP=n(w$,"A",{href:!0});var bYr=s(LP);ono=r(bYr,"LayoutLMv2TokenizerFast"),bYr.forEach(t),rno=r(w$," (LayoutLMv2 model)"),w$.forEach(t),tno=i(S),as=n(S,"LI",{});var A$=s(as);Oae=n(A$,"STRONG",{});var vYr=s(Oae);ano=r(vYr,"layoutlmv3"),vYr.forEach(t),nno=r(A$," \u2014 "),yP=n(A$,"A",{href:!0});var FYr=s(yP);sno=r(FYr,"LayoutLMv3Tokenizer"),FYr.forEach(t),lno=r(A$," or "),xP=n(A$,"A",{href:!0});var TYr=s(xP);ino=r(TYr,"LayoutLMv3TokenizerFast"),TYr.forEach(t),dno=r(A$," (LayoutLMv3 model)"),A$.forEach(t),cno=i(S),ns=n(S,"LI",{});var L$=s(ns);Vae=n(L$,"STRONG",{});var MYr=s(Vae);fno=r(MYr,"layoutxlm"),MYr.forEach(t),mno=r(L$," \u2014 "),$P=n(L$,"A",{href:!0});var EYr=s($P);gno=r(EYr,"LayoutXLMTokenizer"),EYr.forEach(t),hno=r(L$," or "),kP=n(L$,"A",{href:!0});var CYr=s(kP);pno=r(CYr,"LayoutXLMTokenizerFast"),CYr.forEach(t),_no=r(L$," (LayoutXLM model)"),L$.forEach(t),uno=i(S),ss=n(S,"LI",{});var y$=s(ss);Xae=n(y$,"STRONG",{});var wYr=s(Xae);bno=r(wYr,"led"),wYr.forEach(t),vno=r(y$," \u2014 "),SP=n(y$,"A",{href:!0});var AYr=s(SP);Fno=r(AYr,"LEDTokenizer"),AYr.forEach(t),Tno=r(y$," or "),RP=n(y$,"A",{href:!0});var LYr=s(RP);Mno=r(LYr,"LEDTokenizerFast"),LYr.forEach(t),Eno=r(y$," (LED model)"),y$.forEach(t),Cno=i(S),ls=n(S,"LI",{});var x$=s(ls);zae=n(x$,"STRONG",{});var yYr=s(zae);wno=r(yYr,"longformer"),yYr.forEach(t),Ano=r(x$," \u2014 "),PP=n(x$,"A",{href:!0});var xYr=s(PP);Lno=r(xYr,"LongformerTokenizer"),xYr.forEach(t),yno=r(x$," or "),BP=n(x$,"A",{href:!0});var $Yr=s(BP);xno=r($Yr,"LongformerTokenizerFast"),$Yr.forEach(t),$no=r(x$," (Longformer model)"),x$.forEach(t),kno=i(S),Og=n(S,"LI",{});var bAe=s(Og);Wae=n(bAe,"STRONG",{});var kYr=s(Wae);Sno=r(kYr,"luke"),kYr.forEach(t),Rno=r(bAe," \u2014 "),IP=n(bAe,"A",{href:!0});var SYr=s(IP);Pno=r(SYr,"LukeTokenizer"),SYr.forEach(t),Bno=r(bAe," (LUKE model)"),bAe.forEach(t),Ino=i(S),is=n(S,"LI",{});var $$=s(is);Qae=n($$,"STRONG",{});var RYr=s(Qae);Nno=r(RYr,"lxmert"),RYr.forEach(t),qno=r($$," \u2014 "),NP=n($$,"A",{href:!0});var PYr=s(NP);jno=r(PYr,"LxmertTokenizer"),PYr.forEach(t),Dno=r($$," or "),qP=n($$,"A",{href:!0});var BYr=s(qP);Gno=r(BYr,"LxmertTokenizerFast"),BYr.forEach(t),Ono=r($$," (LXMERT model)"),$$.forEach(t),Vno=i(S),Vg=n(S,"LI",{});var vAe=s(Vg);Hae=n(vAe,"STRONG",{});var IYr=s(Hae);Xno=r(IYr,"m2m_100"),IYr.forEach(t),zno=r(vAe," \u2014 "),jP=n(vAe,"A",{href:!0});var NYr=s(jP);Wno=r(NYr,"M2M100Tokenizer"),NYr.forEach(t),Qno=r(vAe," (M2M100 model)"),vAe.forEach(t),Hno=i(S),Xg=n(S,"LI",{});var FAe=s(Xg);Uae=n(FAe,"STRONG",{});var qYr=s(Uae);Uno=r(qYr,"marian"),qYr.forEach(t),Jno=r(FAe," \u2014 "),DP=n(FAe,"A",{href:!0});var jYr=s(DP);Yno=r(jYr,"MarianTokenizer"),jYr.forEach(t),Kno=r(FAe," (Marian model)"),FAe.forEach(t),Zno=i(S),ds=n(S,"LI",{});var k$=s(ds);Jae=n(k$,"STRONG",{});var DYr=s(Jae);eso=r(DYr,"mbart"),DYr.forEach(t),oso=r(k$," \u2014 "),GP=n(k$,"A",{href:!0});var GYr=s(GP);rso=r(GYr,"MBartTokenizer"),GYr.forEach(t),tso=r(k$," or "),OP=n(k$,"A",{href:!0});var OYr=s(OP);aso=r(OYr,"MBartTokenizerFast"),OYr.forEach(t),nso=r(k$," (mBART model)"),k$.forEach(t),sso=i(S),cs=n(S,"LI",{});var S$=s(cs);Yae=n(S$,"STRONG",{});var VYr=s(Yae);lso=r(VYr,"mbart50"),VYr.forEach(t),iso=r(S$," \u2014 "),VP=n(S$,"A",{href:!0});var XYr=s(VP);dso=r(XYr,"MBart50Tokenizer"),XYr.forEach(t),cso=r(S$," or "),XP=n(S$,"A",{href:!0});var zYr=s(XP);fso=r(zYr,"MBart50TokenizerFast"),zYr.forEach(t),mso=r(S$," (mBART-50 model)"),S$.forEach(t),gso=i(S),fs=n(S,"LI",{});var R$=s(fs);Kae=n(R$,"STRONG",{});var WYr=s(Kae);hso=r(WYr,"megatron-bert"),WYr.forEach(t),pso=r(R$," \u2014 "),zP=n(R$,"A",{href:!0});var QYr=s(zP);_so=r(QYr,"BertTokenizer"),QYr.forEach(t),uso=r(R$," or "),WP=n(R$,"A",{href:!0});var HYr=s(WP);bso=r(HYr,"BertTokenizerFast"),HYr.forEach(t),vso=r(R$," (Megatron-BERT model)"),R$.forEach(t),Fso=i(S),zg=n(S,"LI",{});var TAe=s(zg);Zae=n(TAe,"STRONG",{});var UYr=s(Zae);Tso=r(UYr,"mluke"),UYr.forEach(t),Mso=r(TAe," \u2014 "),QP=n(TAe,"A",{href:!0});var JYr=s(QP);Eso=r(JYr,"MLukeTokenizer"),JYr.forEach(t),Cso=r(TAe," (mLUKE model)"),TAe.forEach(t),wso=i(S),ms=n(S,"LI",{});var P$=s(ms);ene=n(P$,"STRONG",{});var YYr=s(ene);Aso=r(YYr,"mobilebert"),YYr.forEach(t),Lso=r(P$," \u2014 "),HP=n(P$,"A",{href:!0});var KYr=s(HP);yso=r(KYr,"MobileBertTokenizer"),KYr.forEach(t),xso=r(P$," or "),UP=n(P$,"A",{href:!0});var ZYr=s(UP);$so=r(ZYr,"MobileBertTokenizerFast"),ZYr.forEach(t),kso=r(P$," (MobileBERT model)"),P$.forEach(t),Sso=i(S),gs=n(S,"LI",{});var B$=s(gs);one=n(B$,"STRONG",{});var eKr=s(one);Rso=r(eKr,"mpnet"),eKr.forEach(t),Pso=r(B$," \u2014 "),JP=n(B$,"A",{href:!0});var oKr=s(JP);Bso=r(oKr,"MPNetTokenizer"),oKr.forEach(t),Iso=r(B$," or "),YP=n(B$,"A",{href:!0});var rKr=s(YP);Nso=r(rKr,"MPNetTokenizerFast"),rKr.forEach(t),qso=r(B$," (MPNet model)"),B$.forEach(t),jso=i(S),hs=n(S,"LI",{});var I$=s(hs);rne=n(I$,"STRONG",{});var tKr=s(rne);Dso=r(tKr,"mt5"),tKr.forEach(t),Gso=r(I$," \u2014 "),KP=n(I$,"A",{href:!0});var aKr=s(KP);Oso=r(aKr,"MT5Tokenizer"),aKr.forEach(t),Vso=r(I$," or "),ZP=n(I$,"A",{href:!0});var nKr=s(ZP);Xso=r(nKr,"MT5TokenizerFast"),nKr.forEach(t),zso=r(I$," (MT5 model)"),I$.forEach(t),Wso=i(S),ps=n(S,"LI",{});var N$=s(ps);tne=n(N$,"STRONG",{});var sKr=s(tne);Qso=r(sKr,"nystromformer"),sKr.forEach(t),Hso=r(N$," \u2014 "),eB=n(N$,"A",{href:!0});var lKr=s(eB);Uso=r(lKr,"AlbertTokenizer"),lKr.forEach(t),Jso=r(N$," or "),oB=n(N$,"A",{href:!0});var iKr=s(oB);Yso=r(iKr,"AlbertTokenizerFast"),iKr.forEach(t),Kso=r(N$," (Nystr\xF6mformer model)"),N$.forEach(t),Zso=i(S),_s=n(S,"LI",{});var q$=s(_s);ane=n(q$,"STRONG",{});var dKr=s(ane);elo=r(dKr,"openai-gpt"),dKr.forEach(t),olo=r(q$," \u2014 "),rB=n(q$,"A",{href:!0});var cKr=s(rB);rlo=r(cKr,"OpenAIGPTTokenizer"),cKr.forEach(t),tlo=r(q$," or "),tB=n(q$,"A",{href:!0});var fKr=s(tB);alo=r(fKr,"OpenAIGPTTokenizerFast"),fKr.forEach(t),nlo=r(q$," (OpenAI GPT model)"),q$.forEach(t),slo=i(S),Wg=n(S,"LI",{});var MAe=s(Wg);nne=n(MAe,"STRONG",{});var mKr=s(nne);llo=r(mKr,"opt"),mKr.forEach(t),ilo=r(MAe," \u2014 "),aB=n(MAe,"A",{href:!0});var gKr=s(aB);dlo=r(gKr,"GPT2Tokenizer"),gKr.forEach(t),clo=r(MAe," (OPT model)"),MAe.forEach(t),flo=i(S),us=n(S,"LI",{});var j$=s(us);sne=n(j$,"STRONG",{});var hKr=s(sne);mlo=r(hKr,"pegasus"),hKr.forEach(t),glo=r(j$," \u2014 "),nB=n(j$,"A",{href:!0});var pKr=s(nB);hlo=r(pKr,"PegasusTokenizer"),pKr.forEach(t),plo=r(j$," or "),sB=n(j$,"A",{href:!0});var _Kr=s(sB);_lo=r(_Kr,"PegasusTokenizerFast"),_Kr.forEach(t),ulo=r(j$," (Pegasus model)"),j$.forEach(t),blo=i(S),Qg=n(S,"LI",{});var EAe=s(Qg);lne=n(EAe,"STRONG",{});var uKr=s(lne);vlo=r(uKr,"perceiver"),uKr.forEach(t),Flo=r(EAe," \u2014 "),lB=n(EAe,"A",{href:!0});var bKr=s(lB);Tlo=r(bKr,"PerceiverTokenizer"),bKr.forEach(t),Mlo=r(EAe," (Perceiver model)"),EAe.forEach(t),Elo=i(S),Hg=n(S,"LI",{});var CAe=s(Hg);ine=n(CAe,"STRONG",{});var vKr=s(ine);Clo=r(vKr,"phobert"),vKr.forEach(t),wlo=r(CAe," \u2014 "),iB=n(CAe,"A",{href:!0});var FKr=s(iB);Alo=r(FKr,"PhobertTokenizer"),FKr.forEach(t),Llo=r(CAe," (PhoBERT model)"),CAe.forEach(t),ylo=i(S),Ug=n(S,"LI",{});var wAe=s(Ug);dne=n(wAe,"STRONG",{});var TKr=s(dne);xlo=r(TKr,"plbart"),TKr.forEach(t),$lo=r(wAe," \u2014 "),dB=n(wAe,"A",{href:!0});var MKr=s(dB);klo=r(MKr,"PLBartTokenizer"),MKr.forEach(t),Slo=r(wAe," (PLBart model)"),wAe.forEach(t),Rlo=i(S),Jg=n(S,"LI",{});var AAe=s(Jg);cne=n(AAe,"STRONG",{});var EKr=s(cne);Plo=r(EKr,"prophetnet"),EKr.forEach(t),Blo=r(AAe," \u2014 "),cB=n(AAe,"A",{href:!0});var CKr=s(cB);Ilo=r(CKr,"ProphetNetTokenizer"),CKr.forEach(t),Nlo=r(AAe," (ProphetNet model)"),AAe.forEach(t),qlo=i(S),bs=n(S,"LI",{});var D$=s(bs);fne=n(D$,"STRONG",{});var wKr=s(fne);jlo=r(wKr,"qdqbert"),wKr.forEach(t),Dlo=r(D$," \u2014 "),fB=n(D$,"A",{href:!0});var AKr=s(fB);Glo=r(AKr,"BertTokenizer"),AKr.forEach(t),Olo=r(D$," or "),mB=n(D$,"A",{href:!0});var LKr=s(mB);Vlo=r(LKr,"BertTokenizerFast"),LKr.forEach(t),Xlo=r(D$," (QDQBert model)"),D$.forEach(t),zlo=i(S),Yg=n(S,"LI",{});var LAe=s(Yg);mne=n(LAe,"STRONG",{});var yKr=s(mne);Wlo=r(yKr,"rag"),yKr.forEach(t),Qlo=r(LAe," \u2014 "),gB=n(LAe,"A",{href:!0});var xKr=s(gB);Hlo=r(xKr,"RagTokenizer"),xKr.forEach(t),Ulo=r(LAe," (RAG model)"),LAe.forEach(t),Jlo=i(S),vs=n(S,"LI",{});var G$=s(vs);gne=n(G$,"STRONG",{});var $Kr=s(gne);Ylo=r($Kr,"realm"),$Kr.forEach(t),Klo=r(G$," \u2014 "),hB=n(G$,"A",{href:!0});var kKr=s(hB);Zlo=r(kKr,"RealmTokenizer"),kKr.forEach(t),eio=r(G$," or "),pB=n(G$,"A",{href:!0});var SKr=s(pB);oio=r(SKr,"RealmTokenizerFast"),SKr.forEach(t),rio=r(G$," (REALM model)"),G$.forEach(t),tio=i(S),Fs=n(S,"LI",{});var O$=s(Fs);hne=n(O$,"STRONG",{});var RKr=s(hne);aio=r(RKr,"reformer"),RKr.forEach(t),nio=r(O$," \u2014 "),_B=n(O$,"A",{href:!0});var PKr=s(_B);sio=r(PKr,"ReformerTokenizer"),PKr.forEach(t),lio=r(O$," or "),uB=n(O$,"A",{href:!0});var BKr=s(uB);iio=r(BKr,"ReformerTokenizerFast"),BKr.forEach(t),dio=r(O$," (Reformer model)"),O$.forEach(t),cio=i(S),Ts=n(S,"LI",{});var V$=s(Ts);pne=n(V$,"STRONG",{});var IKr=s(pne);fio=r(IKr,"rembert"),IKr.forEach(t),mio=r(V$," \u2014 "),bB=n(V$,"A",{href:!0});var NKr=s(bB);gio=r(NKr,"RemBertTokenizer"),NKr.forEach(t),hio=r(V$," or "),vB=n(V$,"A",{href:!0});var qKr=s(vB);pio=r(qKr,"RemBertTokenizerFast"),qKr.forEach(t),_io=r(V$," (RemBERT model)"),V$.forEach(t),uio=i(S),Ms=n(S,"LI",{});var X$=s(Ms);_ne=n(X$,"STRONG",{});var jKr=s(_ne);bio=r(jKr,"retribert"),jKr.forEach(t),vio=r(X$," \u2014 "),FB=n(X$,"A",{href:!0});var DKr=s(FB);Fio=r(DKr,"RetriBertTokenizer"),DKr.forEach(t),Tio=r(X$," or "),TB=n(X$,"A",{href:!0});var GKr=s(TB);Mio=r(GKr,"RetriBertTokenizerFast"),GKr.forEach(t),Eio=r(X$," (RetriBERT model)"),X$.forEach(t),Cio=i(S),Es=n(S,"LI",{});var z$=s(Es);une=n(z$,"STRONG",{});var OKr=s(une);wio=r(OKr,"roberta"),OKr.forEach(t),Aio=r(z$," \u2014 "),MB=n(z$,"A",{href:!0});var VKr=s(MB);Lio=r(VKr,"RobertaTokenizer"),VKr.forEach(t),yio=r(z$," or "),EB=n(z$,"A",{href:!0});var XKr=s(EB);xio=r(XKr,"RobertaTokenizerFast"),XKr.forEach(t),$io=r(z$," (RoBERTa model)"),z$.forEach(t),kio=i(S),Cs=n(S,"LI",{});var W$=s(Cs);bne=n(W$,"STRONG",{});var zKr=s(bne);Sio=r(zKr,"roformer"),zKr.forEach(t),Rio=r(W$," \u2014 "),CB=n(W$,"A",{href:!0});var WKr=s(CB);Pio=r(WKr,"RoFormerTokenizer"),WKr.forEach(t),Bio=r(W$," or "),wB=n(W$,"A",{href:!0});var QKr=s(wB);Iio=r(QKr,"RoFormerTokenizerFast"),QKr.forEach(t),Nio=r(W$," (RoFormer model)"),W$.forEach(t),qio=i(S),Kg=n(S,"LI",{});var yAe=s(Kg);vne=n(yAe,"STRONG",{});var HKr=s(vne);jio=r(HKr,"speech_to_text"),HKr.forEach(t),Dio=r(yAe," \u2014 "),AB=n(yAe,"A",{href:!0});var UKr=s(AB);Gio=r(UKr,"Speech2TextTokenizer"),UKr.forEach(t),Oio=r(yAe," (Speech2Text model)"),yAe.forEach(t),Vio=i(S),Zg=n(S,"LI",{});var xAe=s(Zg);Fne=n(xAe,"STRONG",{});var JKr=s(Fne);Xio=r(JKr,"speech_to_text_2"),JKr.forEach(t),zio=r(xAe," \u2014 "),LB=n(xAe,"A",{href:!0});var YKr=s(LB);Wio=r(YKr,"Speech2Text2Tokenizer"),YKr.forEach(t),Qio=r(xAe," (Speech2Text2 model)"),xAe.forEach(t),Hio=i(S),ws=n(S,"LI",{});var Q$=s(ws);Tne=n(Q$,"STRONG",{});var KKr=s(Tne);Uio=r(KKr,"splinter"),KKr.forEach(t),Jio=r(Q$," \u2014 "),yB=n(Q$,"A",{href:!0});var ZKr=s(yB);Yio=r(ZKr,"SplinterTokenizer"),ZKr.forEach(t),Kio=r(Q$," or "),xB=n(Q$,"A",{href:!0});var eZr=s(xB);Zio=r(eZr,"SplinterTokenizerFast"),eZr.forEach(t),edo=r(Q$," (Splinter model)"),Q$.forEach(t),odo=i(S),As=n(S,"LI",{});var H$=s(As);Mne=n(H$,"STRONG",{});var oZr=s(Mne);rdo=r(oZr,"squeezebert"),oZr.forEach(t),tdo=r(H$," \u2014 "),$B=n(H$,"A",{href:!0});var rZr=s($B);ado=r(rZr,"SqueezeBertTokenizer"),rZr.forEach(t),ndo=r(H$," or "),kB=n(H$,"A",{href:!0});var tZr=s(kB);sdo=r(tZr,"SqueezeBertTokenizerFast"),tZr.forEach(t),ldo=r(H$," (SqueezeBERT model)"),H$.forEach(t),ido=i(S),Ls=n(S,"LI",{});var U$=s(Ls);Ene=n(U$,"STRONG",{});var aZr=s(Ene);ddo=r(aZr,"t5"),aZr.forEach(t),cdo=r(U$," \u2014 "),SB=n(U$,"A",{href:!0});var nZr=s(SB);fdo=r(nZr,"T5Tokenizer"),nZr.forEach(t),mdo=r(U$," or "),RB=n(U$,"A",{href:!0});var sZr=s(RB);gdo=r(sZr,"T5TokenizerFast"),sZr.forEach(t),hdo=r(U$," (T5 model)"),U$.forEach(t),pdo=i(S),eh=n(S,"LI",{});var $Ae=s(eh);Cne=n($Ae,"STRONG",{});var lZr=s(Cne);_do=r(lZr,"tapas"),lZr.forEach(t),udo=r($Ae," \u2014 "),PB=n($Ae,"A",{href:!0});var iZr=s(PB);bdo=r(iZr,"TapasTokenizer"),iZr.forEach(t),vdo=r($Ae," (TAPAS model)"),$Ae.forEach(t),Fdo=i(S),oh=n(S,"LI",{});var kAe=s(oh);wne=n(kAe,"STRONG",{});var dZr=s(wne);Tdo=r(dZr,"tapex"),dZr.forEach(t),Mdo=r(kAe," \u2014 "),BB=n(kAe,"A",{href:!0});var cZr=s(BB);Edo=r(cZr,"TapexTokenizer"),cZr.forEach(t),Cdo=r(kAe," (TAPEX model)"),kAe.forEach(t),wdo=i(S),rh=n(S,"LI",{});var SAe=s(rh);Ane=n(SAe,"STRONG",{});var fZr=s(Ane);Ado=r(fZr,"transfo-xl"),fZr.forEach(t),Ldo=r(SAe," \u2014 "),IB=n(SAe,"A",{href:!0});var mZr=s(IB);ydo=r(mZr,"TransfoXLTokenizer"),mZr.forEach(t),xdo=r(SAe," (Transformer-XL model)"),SAe.forEach(t),$do=i(S),ys=n(S,"LI",{});var J$=s(ys);Lne=n(J$,"STRONG",{});var gZr=s(Lne);kdo=r(gZr,"visual_bert"),gZr.forEach(t),Sdo=r(J$," \u2014 "),NB=n(J$,"A",{href:!0});var hZr=s(NB);Rdo=r(hZr,"BertTokenizer"),hZr.forEach(t),Pdo=r(J$," or "),qB=n(J$,"A",{href:!0});var pZr=s(qB);Bdo=r(pZr,"BertTokenizerFast"),pZr.forEach(t),Ido=r(J$," (VisualBERT model)"),J$.forEach(t),Ndo=i(S),th=n(S,"LI",{});var RAe=s(th);yne=n(RAe,"STRONG",{});var _Zr=s(yne);qdo=r(_Zr,"wav2vec2"),_Zr.forEach(t),jdo=r(RAe," \u2014 "),jB=n(RAe,"A",{href:!0});var uZr=s(jB);Ddo=r(uZr,"Wav2Vec2CTCTokenizer"),uZr.forEach(t),Gdo=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),Odo=i(S),ah=n(S,"LI",{});var PAe=s(ah);xne=n(PAe,"STRONG",{});var bZr=s(xne);Vdo=r(bZr,"wav2vec2-conformer"),bZr.forEach(t),Xdo=r(PAe," \u2014 "),DB=n(PAe,"A",{href:!0});var vZr=s(DB);zdo=r(vZr,"Wav2Vec2CTCTokenizer"),vZr.forEach(t),Wdo=r(PAe," (Wav2Vec2-Conformer model)"),PAe.forEach(t),Qdo=i(S),nh=n(S,"LI",{});var BAe=s(nh);$ne=n(BAe,"STRONG",{});var FZr=s($ne);Hdo=r(FZr,"wav2vec2_phoneme"),FZr.forEach(t),Udo=r(BAe," \u2014 "),GB=n(BAe,"A",{href:!0});var TZr=s(GB);Jdo=r(TZr,"Wav2Vec2PhonemeCTCTokenizer"),TZr.forEach(t),Ydo=r(BAe," (Wav2Vec2Phoneme model)"),BAe.forEach(t),Kdo=i(S),xs=n(S,"LI",{});var Y$=s(xs);kne=n(Y$,"STRONG",{});var MZr=s(kne);Zdo=r(MZr,"xglm"),MZr.forEach(t),eco=r(Y$," \u2014 "),OB=n(Y$,"A",{href:!0});var EZr=s(OB);oco=r(EZr,"XGLMTokenizer"),EZr.forEach(t),rco=r(Y$," or "),VB=n(Y$,"A",{href:!0});var CZr=s(VB);tco=r(CZr,"XGLMTokenizerFast"),CZr.forEach(t),aco=r(Y$," (XGLM model)"),Y$.forEach(t),nco=i(S),sh=n(S,"LI",{});var IAe=s(sh);Sne=n(IAe,"STRONG",{});var wZr=s(Sne);sco=r(wZr,"xlm"),wZr.forEach(t),lco=r(IAe," \u2014 "),XB=n(IAe,"A",{href:!0});var AZr=s(XB);ico=r(AZr,"XLMTokenizer"),AZr.forEach(t),dco=r(IAe," (XLM model)"),IAe.forEach(t),cco=i(S),lh=n(S,"LI",{});var NAe=s(lh);Rne=n(NAe,"STRONG",{});var LZr=s(Rne);fco=r(LZr,"xlm-prophetnet"),LZr.forEach(t),mco=r(NAe," \u2014 "),zB=n(NAe,"A",{href:!0});var yZr=s(zB);gco=r(yZr,"XLMProphetNetTokenizer"),yZr.forEach(t),hco=r(NAe," (XLM-ProphetNet model)"),NAe.forEach(t),pco=i(S),$s=n(S,"LI",{});var K$=s($s);Pne=n(K$,"STRONG",{});var xZr=s(Pne);_co=r(xZr,"xlm-roberta"),xZr.forEach(t),uco=r(K$," \u2014 "),WB=n(K$,"A",{href:!0});var $Zr=s(WB);bco=r($Zr,"XLMRobertaTokenizer"),$Zr.forEach(t),vco=r(K$," or "),QB=n(K$,"A",{href:!0});var kZr=s(QB);Fco=r(kZr,"XLMRobertaTokenizerFast"),kZr.forEach(t),Tco=r(K$," (XLM-RoBERTa model)"),K$.forEach(t),Mco=i(S),ks=n(S,"LI",{});var Z$=s(ks);Bne=n(Z$,"STRONG",{});var SZr=s(Bne);Eco=r(SZr,"xlm-roberta-xl"),SZr.forEach(t),Cco=r(Z$," \u2014 "),HB=n(Z$,"A",{href:!0});var RZr=s(HB);wco=r(RZr,"RobertaTokenizer"),RZr.forEach(t),Aco=r(Z$," or "),UB=n(Z$,"A",{href:!0});var PZr=s(UB);Lco=r(PZr,"RobertaTokenizerFast"),PZr.forEach(t),yco=r(Z$," (XLM-RoBERTa-XL model)"),Z$.forEach(t),xco=i(S),Ss=n(S,"LI",{});var ek=s(Ss);Ine=n(ek,"STRONG",{});var BZr=s(Ine);$co=r(BZr,"xlnet"),BZr.forEach(t),kco=r(ek," \u2014 "),JB=n(ek,"A",{href:!0});var IZr=s(JB);Sco=r(IZr,"XLNetTokenizer"),IZr.forEach(t),Rco=r(ek," or "),YB=n(ek,"A",{href:!0});var NZr=s(YB);Pco=r(NZr,"XLNetTokenizerFast"),NZr.forEach(t),Bco=r(ek," (XLNet model)"),ek.forEach(t),Ico=i(S),Rs=n(S,"LI",{});var ok=s(Rs);Nne=n(ok,"STRONG",{});var qZr=s(Nne);Nco=r(qZr,"yoso"),qZr.forEach(t),qco=r(ok," \u2014 "),KB=n(ok,"A",{href:!0});var jZr=s(KB);jco=r(jZr,"AlbertTokenizer"),jZr.forEach(t),Dco=r(ok," or "),ZB=n(ok,"A",{href:!0});var DZr=s(ZB);Gco=r(DZr,"AlbertTokenizerFast"),DZr.forEach(t),Oco=r(ok," (YOSO model)"),ok.forEach(t),S.forEach(t),Vco=i(js),T(ih.$$.fragment,js),js.forEach(t),Xco=i(qs),dh=n(qs,"DIV",{class:!0});var dGe=s(dh);T(eL.$$.fragment,dGe),zco=i(dGe),qne=n(dGe,"P",{});var GZr=s(qne);Wco=r(GZr,"Register a new tokenizer in this mapping."),GZr.forEach(t),dGe.forEach(t),qs.forEach(t),cje=i(f),Ei=n(f,"H2",{class:!0});var cGe=s(Ei);ch=n(cGe,"A",{id:!0,class:!0,href:!0});var OZr=s(ch);jne=n(OZr,"SPAN",{});var VZr=s(jne);T(oL.$$.fragment,VZr),VZr.forEach(t),OZr.forEach(t),Qco=i(cGe),Dne=n(cGe,"SPAN",{});var XZr=s(Dne);Hco=r(XZr,"AutoFeatureExtractor"),XZr.forEach(t),cGe.forEach(t),fje=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(rL.$$.fragment,Ds),Uco=i(Ds),tL=n(Ds,"P",{});var fGe=s(tL);Jco=r(fGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eI=n(fGe,"A",{href:!0});var zZr=s(eI);Yco=r(zZr,"AutoFeatureExtractor.from_pretrained()"),zZr.forEach(t),Kco=r(fGe," class method."),fGe.forEach(t),Zco=i(Ds),aL=n(Ds,"P",{});var mGe=s(aL);efo=r(mGe,"This class cannot be instantiated directly using "),Gne=n(mGe,"CODE",{});var WZr=s(Gne);ofo=r(WZr,"__init__()"),WZr.forEach(t),rfo=r(mGe," (throws an error)."),mGe.forEach(t),tfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(nL.$$.fragment,Zt),afo=i(Zt),One=n(Zt,"P",{});var QZr=s(One);nfo=r(QZr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),QZr.forEach(t),sfo=i(Zt),La=n(Zt,"P",{});var Xw=s(La);lfo=r(Xw,"The feature extractor class to instantiate is selected based on the "),Vne=n(Xw,"CODE",{});var HZr=s(Vne);ifo=r(HZr,"model_type"),HZr.forEach(t),dfo=r(Xw,` property of the config object
(either passed as an argument or loaded from `),Xne=n(Xw,"CODE",{});var UZr=s(Xne);cfo=r(UZr,"pretrained_model_name_or_path"),UZr.forEach(t),ffo=r(Xw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),zne=n(Xw,"CODE",{});var JZr=s(zne);mfo=r(JZr,"pretrained_model_name_or_path"),JZr.forEach(t),gfo=r(Xw,":"),Xw.forEach(t),hfo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);fh=n(Z,"LI",{});var qAe=s(fh);Wne=n(qAe,"STRONG",{});var YZr=s(Wne);pfo=r(YZr,"beit"),YZr.forEach(t),_fo=r(qAe," \u2014 "),oI=n(qAe,"A",{href:!0});var KZr=s(oI);ufo=r(KZr,"BeitFeatureExtractor"),KZr.forEach(t),bfo=r(qAe," (BEiT model)"),qAe.forEach(t),vfo=i(Z),mh=n(Z,"LI",{});var jAe=s(mh);Qne=n(jAe,"STRONG",{});var ZZr=s(Qne);Ffo=r(ZZr,"clip"),ZZr.forEach(t),Tfo=r(jAe," \u2014 "),rI=n(jAe,"A",{href:!0});var eet=s(rI);Mfo=r(eet,"CLIPFeatureExtractor"),eet.forEach(t),Efo=r(jAe," (CLIP model)"),jAe.forEach(t),Cfo=i(Z),gh=n(Z,"LI",{});var DAe=s(gh);Hne=n(DAe,"STRONG",{});var oet=s(Hne);wfo=r(oet,"convnext"),oet.forEach(t),Afo=r(DAe," \u2014 "),tI=n(DAe,"A",{href:!0});var ret=s(tI);Lfo=r(ret,"ConvNextFeatureExtractor"),ret.forEach(t),yfo=r(DAe," (ConvNeXT model)"),DAe.forEach(t),xfo=i(Z),hh=n(Z,"LI",{});var GAe=s(hh);Une=n(GAe,"STRONG",{});var tet=s(Une);$fo=r(tet,"cvt"),tet.forEach(t),kfo=r(GAe," \u2014 "),aI=n(GAe,"A",{href:!0});var aet=s(aI);Sfo=r(aet,"ConvNextFeatureExtractor"),aet.forEach(t),Rfo=r(GAe," (CvT model)"),GAe.forEach(t),Pfo=i(Z),ph=n(Z,"LI",{});var OAe=s(ph);Jne=n(OAe,"STRONG",{});var net=s(Jne);Bfo=r(net,"data2vec-audio"),net.forEach(t),Ifo=r(OAe," \u2014 "),nI=n(OAe,"A",{href:!0});var set=s(nI);Nfo=r(set,"Wav2Vec2FeatureExtractor"),set.forEach(t),qfo=r(OAe," (Data2VecAudio model)"),OAe.forEach(t),jfo=i(Z),_h=n(Z,"LI",{});var VAe=s(_h);Yne=n(VAe,"STRONG",{});var iet=s(Yne);Dfo=r(iet,"data2vec-vision"),iet.forEach(t),Gfo=r(VAe," \u2014 "),sI=n(VAe,"A",{href:!0});var det=s(sI);Ofo=r(det,"BeitFeatureExtractor"),det.forEach(t),Vfo=r(VAe," (Data2VecVision model)"),VAe.forEach(t),Xfo=i(Z),uh=n(Z,"LI",{});var XAe=s(uh);Kne=n(XAe,"STRONG",{});var cet=s(Kne);zfo=r(cet,"deit"),cet.forEach(t),Wfo=r(XAe," \u2014 "),lI=n(XAe,"A",{href:!0});var fet=s(lI);Qfo=r(fet,"DeiTFeatureExtractor"),fet.forEach(t),Hfo=r(XAe," (DeiT model)"),XAe.forEach(t),Ufo=i(Z),bh=n(Z,"LI",{});var zAe=s(bh);Zne=n(zAe,"STRONG",{});var met=s(Zne);Jfo=r(met,"detr"),met.forEach(t),Yfo=r(zAe," \u2014 "),iI=n(zAe,"A",{href:!0});var get=s(iI);Kfo=r(get,"DetrFeatureExtractor"),get.forEach(t),Zfo=r(zAe," (DETR model)"),zAe.forEach(t),emo=i(Z),vh=n(Z,"LI",{});var WAe=s(vh);ese=n(WAe,"STRONG",{});var het=s(ese);omo=r(het,"dpt"),het.forEach(t),rmo=r(WAe," \u2014 "),dI=n(WAe,"A",{href:!0});var pet=s(dI);tmo=r(pet,"DPTFeatureExtractor"),pet.forEach(t),amo=r(WAe," (DPT model)"),WAe.forEach(t),nmo=i(Z),Fh=n(Z,"LI",{});var QAe=s(Fh);ose=n(QAe,"STRONG",{});var _et=s(ose);smo=r(_et,"flava"),_et.forEach(t),lmo=r(QAe," \u2014 "),cI=n(QAe,"A",{href:!0});var uet=s(cI);imo=r(uet,"FlavaFeatureExtractor"),uet.forEach(t),dmo=r(QAe," (FLAVA model)"),QAe.forEach(t),cmo=i(Z),Th=n(Z,"LI",{});var HAe=s(Th);rse=n(HAe,"STRONG",{});var bet=s(rse);fmo=r(bet,"glpn"),bet.forEach(t),mmo=r(HAe," \u2014 "),fI=n(HAe,"A",{href:!0});var vet=s(fI);gmo=r(vet,"GLPNFeatureExtractor"),vet.forEach(t),hmo=r(HAe," (GLPN model)"),HAe.forEach(t),pmo=i(Z),Mh=n(Z,"LI",{});var UAe=s(Mh);tse=n(UAe,"STRONG",{});var Fet=s(tse);_mo=r(Fet,"hubert"),Fet.forEach(t),umo=r(UAe," \u2014 "),mI=n(UAe,"A",{href:!0});var Tet=s(mI);bmo=r(Tet,"Wav2Vec2FeatureExtractor"),Tet.forEach(t),vmo=r(UAe," (Hubert model)"),UAe.forEach(t),Fmo=i(Z),Eh=n(Z,"LI",{});var JAe=s(Eh);ase=n(JAe,"STRONG",{});var Met=s(ase);Tmo=r(Met,"imagegpt"),Met.forEach(t),Mmo=r(JAe," \u2014 "),gI=n(JAe,"A",{href:!0});var Eet=s(gI);Emo=r(Eet,"ImageGPTFeatureExtractor"),Eet.forEach(t),Cmo=r(JAe," (ImageGPT model)"),JAe.forEach(t),wmo=i(Z),Ch=n(Z,"LI",{});var YAe=s(Ch);nse=n(YAe,"STRONG",{});var Cet=s(nse);Amo=r(Cet,"layoutlmv2"),Cet.forEach(t),Lmo=r(YAe," \u2014 "),hI=n(YAe,"A",{href:!0});var wet=s(hI);ymo=r(wet,"LayoutLMv2FeatureExtractor"),wet.forEach(t),xmo=r(YAe," (LayoutLMv2 model)"),YAe.forEach(t),$mo=i(Z),wh=n(Z,"LI",{});var KAe=s(wh);sse=n(KAe,"STRONG",{});var Aet=s(sse);kmo=r(Aet,"layoutlmv3"),Aet.forEach(t),Smo=r(KAe," \u2014 "),pI=n(KAe,"A",{href:!0});var Let=s(pI);Rmo=r(Let,"LayoutLMv3FeatureExtractor"),Let.forEach(t),Pmo=r(KAe," (LayoutLMv3 model)"),KAe.forEach(t),Bmo=i(Z),Ah=n(Z,"LI",{});var ZAe=s(Ah);lse=n(ZAe,"STRONG",{});var yet=s(lse);Imo=r(yet,"levit"),yet.forEach(t),Nmo=r(ZAe," \u2014 "),_I=n(ZAe,"A",{href:!0});var xet=s(_I);qmo=r(xet,"LevitFeatureExtractor"),xet.forEach(t),jmo=r(ZAe," (LeViT model)"),ZAe.forEach(t),Dmo=i(Z),Lh=n(Z,"LI",{});var e6e=s(Lh);ise=n(e6e,"STRONG",{});var $et=s(ise);Gmo=r($et,"maskformer"),$et.forEach(t),Omo=r(e6e," \u2014 "),uI=n(e6e,"A",{href:!0});var ket=s(uI);Vmo=r(ket,"MaskFormerFeatureExtractor"),ket.forEach(t),Xmo=r(e6e," (MaskFormer model)"),e6e.forEach(t),zmo=i(Z),yh=n(Z,"LI",{});var o6e=s(yh);dse=n(o6e,"STRONG",{});var Set=s(dse);Wmo=r(Set,"perceiver"),Set.forEach(t),Qmo=r(o6e," \u2014 "),bI=n(o6e,"A",{href:!0});var Ret=s(bI);Hmo=r(Ret,"PerceiverFeatureExtractor"),Ret.forEach(t),Umo=r(o6e," (Perceiver model)"),o6e.forEach(t),Jmo=i(Z),xh=n(Z,"LI",{});var r6e=s(xh);cse=n(r6e,"STRONG",{});var Pet=s(cse);Ymo=r(Pet,"poolformer"),Pet.forEach(t),Kmo=r(r6e," \u2014 "),vI=n(r6e,"A",{href:!0});var Bet=s(vI);Zmo=r(Bet,"PoolFormerFeatureExtractor"),Bet.forEach(t),ego=r(r6e," (PoolFormer model)"),r6e.forEach(t),ogo=i(Z),$h=n(Z,"LI",{});var t6e=s($h);fse=n(t6e,"STRONG",{});var Iet=s(fse);rgo=r(Iet,"regnet"),Iet.forEach(t),tgo=r(t6e," \u2014 "),FI=n(t6e,"A",{href:!0});var Net=s(FI);ago=r(Net,"ConvNextFeatureExtractor"),Net.forEach(t),ngo=r(t6e," (RegNet model)"),t6e.forEach(t),sgo=i(Z),kh=n(Z,"LI",{});var a6e=s(kh);mse=n(a6e,"STRONG",{});var qet=s(mse);lgo=r(qet,"resnet"),qet.forEach(t),igo=r(a6e," \u2014 "),TI=n(a6e,"A",{href:!0});var jet=s(TI);dgo=r(jet,"ConvNextFeatureExtractor"),jet.forEach(t),cgo=r(a6e," (ResNet model)"),a6e.forEach(t),fgo=i(Z),Sh=n(Z,"LI",{});var n6e=s(Sh);gse=n(n6e,"STRONG",{});var Det=s(gse);mgo=r(Det,"segformer"),Det.forEach(t),ggo=r(n6e," \u2014 "),MI=n(n6e,"A",{href:!0});var Get=s(MI);hgo=r(Get,"SegformerFeatureExtractor"),Get.forEach(t),pgo=r(n6e," (SegFormer model)"),n6e.forEach(t),_go=i(Z),Rh=n(Z,"LI",{});var s6e=s(Rh);hse=n(s6e,"STRONG",{});var Oet=s(hse);ugo=r(Oet,"speech_to_text"),Oet.forEach(t),bgo=r(s6e," \u2014 "),EI=n(s6e,"A",{href:!0});var Vet=s(EI);vgo=r(Vet,"Speech2TextFeatureExtractor"),Vet.forEach(t),Fgo=r(s6e," (Speech2Text model)"),s6e.forEach(t),Tgo=i(Z),Ph=n(Z,"LI",{});var l6e=s(Ph);pse=n(l6e,"STRONG",{});var Xet=s(pse);Mgo=r(Xet,"swin"),Xet.forEach(t),Ego=r(l6e," \u2014 "),CI=n(l6e,"A",{href:!0});var zet=s(CI);Cgo=r(zet,"ViTFeatureExtractor"),zet.forEach(t),wgo=r(l6e," (Swin Transformer model)"),l6e.forEach(t),Ago=i(Z),Bh=n(Z,"LI",{});var i6e=s(Bh);_se=n(i6e,"STRONG",{});var Wet=s(_se);Lgo=r(Wet,"van"),Wet.forEach(t),ygo=r(i6e," \u2014 "),wI=n(i6e,"A",{href:!0});var Qet=s(wI);xgo=r(Qet,"ConvNextFeatureExtractor"),Qet.forEach(t),$go=r(i6e," (VAN model)"),i6e.forEach(t),kgo=i(Z),Ih=n(Z,"LI",{});var d6e=s(Ih);use=n(d6e,"STRONG",{});var Het=s(use);Sgo=r(Het,"vit"),Het.forEach(t),Rgo=r(d6e," \u2014 "),AI=n(d6e,"A",{href:!0});var Uet=s(AI);Pgo=r(Uet,"ViTFeatureExtractor"),Uet.forEach(t),Bgo=r(d6e," (ViT model)"),d6e.forEach(t),Igo=i(Z),Nh=n(Z,"LI",{});var c6e=s(Nh);bse=n(c6e,"STRONG",{});var Jet=s(bse);Ngo=r(Jet,"vit_mae"),Jet.forEach(t),qgo=r(c6e," \u2014 "),LI=n(c6e,"A",{href:!0});var Yet=s(LI);jgo=r(Yet,"ViTFeatureExtractor"),Yet.forEach(t),Dgo=r(c6e," (ViTMAE model)"),c6e.forEach(t),Ggo=i(Z),qh=n(Z,"LI",{});var f6e=s(qh);vse=n(f6e,"STRONG",{});var Ket=s(vse);Ogo=r(Ket,"wav2vec2"),Ket.forEach(t),Vgo=r(f6e," \u2014 "),yI=n(f6e,"A",{href:!0});var Zet=s(yI);Xgo=r(Zet,"Wav2Vec2FeatureExtractor"),Zet.forEach(t),zgo=r(f6e," (Wav2Vec2 model)"),f6e.forEach(t),Wgo=i(Z),jh=n(Z,"LI",{});var m6e=s(jh);Fse=n(m6e,"STRONG",{});var eot=s(Fse);Qgo=r(eot,"wav2vec2-conformer"),eot.forEach(t),Hgo=r(m6e," \u2014 "),xI=n(m6e,"A",{href:!0});var oot=s(xI);Ugo=r(oot,"Wav2Vec2FeatureExtractor"),oot.forEach(t),Jgo=r(m6e," (Wav2Vec2-Conformer model)"),m6e.forEach(t),Ygo=i(Z),Dh=n(Z,"LI",{});var g6e=s(Dh);Tse=n(g6e,"STRONG",{});var rot=s(Tse);Kgo=r(rot,"yolos"),rot.forEach(t),Zgo=r(g6e," \u2014 "),$I=n(g6e,"A",{href:!0});var tot=s($I);eho=r(tot,"YolosFeatureExtractor"),tot.forEach(t),oho=r(g6e," (YOLOS model)"),g6e.forEach(t),Z.forEach(t),rho=i(Zt),T(Gh.$$.fragment,Zt),tho=i(Zt),T(Oh.$$.fragment,Zt),Zt.forEach(t),aho=i(Ds),Vh=n(Ds,"DIV",{class:!0});var gGe=s(Vh);T(sL.$$.fragment,gGe),nho=i(gGe),Mse=n(gGe,"P",{});var aot=s(Mse);sho=r(aot,"Register a new feature extractor for this class."),aot.forEach(t),gGe.forEach(t),Ds.forEach(t),mje=i(f),Ci=n(f,"H2",{class:!0});var hGe=s(Ci);Xh=n(hGe,"A",{id:!0,class:!0,href:!0});var not=s(Xh);Ese=n(not,"SPAN",{});var sot=s(Ese);T(lL.$$.fragment,sot),sot.forEach(t),not.forEach(t),lho=i(hGe),Cse=n(hGe,"SPAN",{});var lot=s(Cse);iho=r(lot,"AutoProcessor"),lot.forEach(t),hGe.forEach(t),gje=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(iL.$$.fragment,Gs),dho=i(Gs),dL=n(Gs,"P",{});var pGe=s(dL);cho=r(pGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kI=n(pGe,"A",{href:!0});var iot=s(kI);fho=r(iot,"AutoProcessor.from_pretrained()"),iot.forEach(t),mho=r(pGe," class method."),pGe.forEach(t),gho=i(Gs),cL=n(Gs,"P",{});var _Ge=s(cL);hho=r(_Ge,"This class cannot be instantiated directly using "),wse=n(_Ge,"CODE",{});var dot=s(wse);pho=r(dot,"__init__()"),dot.forEach(t),_ho=r(_Ge," (throws an error)."),_Ge.forEach(t),uho=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(fL.$$.fragment,ea),bho=i(ea),Ase=n(ea,"P",{});var cot=s(Ase);vho=r(cot,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cot.forEach(t),Fho=i(ea),wi=n(ea,"P",{});var XZ=s(wi);Tho=r(XZ,"The processor class to instantiate is selected based on the "),Lse=n(XZ,"CODE",{});var fot=s(Lse);Mho=r(fot,"model_type"),fot.forEach(t),Eho=r(XZ,` property of the config object (either
passed as an argument or loaded from `),yse=n(XZ,"CODE",{});var mot=s(yse);Cho=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),who=r(XZ," if possible):"),XZ.forEach(t),Aho=i(ea),he=n(ea,"UL",{});var ue=s(he);zh=n(ue,"LI",{});var h6e=s(zh);xse=n(h6e,"STRONG",{});var got=s(xse);Lho=r(got,"clip"),got.forEach(t),yho=r(h6e," \u2014 "),SI=n(h6e,"A",{href:!0});var hot=s(SI);xho=r(hot,"CLIPProcessor"),hot.forEach(t),$ho=r(h6e," (CLIP model)"),h6e.forEach(t),kho=i(ue),Wh=n(ue,"LI",{});var p6e=s(Wh);$se=n(p6e,"STRONG",{});var pot=s($se);Sho=r(pot,"flava"),pot.forEach(t),Rho=r(p6e," \u2014 "),kse=n(p6e,"CODE",{});var _ot=s(kse);Pho=r(_ot,"FLAVAProcessor"),_ot.forEach(t),Bho=r(p6e," (FLAVA model)"),p6e.forEach(t),Iho=i(ue),Qh=n(ue,"LI",{});var _6e=s(Qh);Sse=n(_6e,"STRONG",{});var uot=s(Sse);Nho=r(uot,"layoutlmv2"),uot.forEach(t),qho=r(_6e," \u2014 "),RI=n(_6e,"A",{href:!0});var bot=s(RI);jho=r(bot,"LayoutLMv2Processor"),bot.forEach(t),Dho=r(_6e," (LayoutLMv2 model)"),_6e.forEach(t),Gho=i(ue),Hh=n(ue,"LI",{});var u6e=s(Hh);Rse=n(u6e,"STRONG",{});var vot=s(Rse);Oho=r(vot,"layoutlmv3"),vot.forEach(t),Vho=r(u6e," \u2014 "),PI=n(u6e,"A",{href:!0});var Fot=s(PI);Xho=r(Fot,"LayoutLMv3Processor"),Fot.forEach(t),zho=r(u6e," (LayoutLMv3 model)"),u6e.forEach(t),Who=i(ue),Uh=n(ue,"LI",{});var b6e=s(Uh);Pse=n(b6e,"STRONG",{});var Tot=s(Pse);Qho=r(Tot,"layoutxlm"),Tot.forEach(t),Hho=r(b6e," \u2014 "),BI=n(b6e,"A",{href:!0});var Mot=s(BI);Uho=r(Mot,"LayoutXLMProcessor"),Mot.forEach(t),Jho=r(b6e," (LayoutXLM model)"),b6e.forEach(t),Yho=i(ue),Jh=n(ue,"LI",{});var v6e=s(Jh);Bse=n(v6e,"STRONG",{});var Eot=s(Bse);Kho=r(Eot,"sew"),Eot.forEach(t),Zho=r(v6e," \u2014 "),II=n(v6e,"A",{href:!0});var Cot=s(II);epo=r(Cot,"Wav2Vec2Processor"),Cot.forEach(t),opo=r(v6e," (SEW model)"),v6e.forEach(t),rpo=i(ue),Yh=n(ue,"LI",{});var F6e=s(Yh);Ise=n(F6e,"STRONG",{});var wot=s(Ise);tpo=r(wot,"sew-d"),wot.forEach(t),apo=r(F6e," \u2014 "),NI=n(F6e,"A",{href:!0});var Aot=s(NI);npo=r(Aot,"Wav2Vec2Processor"),Aot.forEach(t),spo=r(F6e," (SEW-D model)"),F6e.forEach(t),lpo=i(ue),Kh=n(ue,"LI",{});var T6e=s(Kh);Nse=n(T6e,"STRONG",{});var Lot=s(Nse);ipo=r(Lot,"speech_to_text"),Lot.forEach(t),dpo=r(T6e," \u2014 "),qI=n(T6e,"A",{href:!0});var yot=s(qI);cpo=r(yot,"Speech2TextProcessor"),yot.forEach(t),fpo=r(T6e," (Speech2Text model)"),T6e.forEach(t),mpo=i(ue),Zh=n(ue,"LI",{});var M6e=s(Zh);qse=n(M6e,"STRONG",{});var xot=s(qse);gpo=r(xot,"speech_to_text_2"),xot.forEach(t),hpo=r(M6e," \u2014 "),jI=n(M6e,"A",{href:!0});var $ot=s(jI);ppo=r($ot,"Speech2Text2Processor"),$ot.forEach(t),_po=r(M6e," (Speech2Text2 model)"),M6e.forEach(t),upo=i(ue),ep=n(ue,"LI",{});var E6e=s(ep);jse=n(E6e,"STRONG",{});var kot=s(jse);bpo=r(kot,"trocr"),kot.forEach(t),vpo=r(E6e," \u2014 "),DI=n(E6e,"A",{href:!0});var Sot=s(DI);Fpo=r(Sot,"TrOCRProcessor"),Sot.forEach(t),Tpo=r(E6e," (TrOCR model)"),E6e.forEach(t),Mpo=i(ue),op=n(ue,"LI",{});var C6e=s(op);Dse=n(C6e,"STRONG",{});var Rot=s(Dse);Epo=r(Rot,"unispeech"),Rot.forEach(t),Cpo=r(C6e," \u2014 "),GI=n(C6e,"A",{href:!0});var Pot=s(GI);wpo=r(Pot,"Wav2Vec2Processor"),Pot.forEach(t),Apo=r(C6e," (UniSpeech model)"),C6e.forEach(t),Lpo=i(ue),rp=n(ue,"LI",{});var w6e=s(rp);Gse=n(w6e,"STRONG",{});var Bot=s(Gse);ypo=r(Bot,"unispeech-sat"),Bot.forEach(t),xpo=r(w6e," \u2014 "),OI=n(w6e,"A",{href:!0});var Iot=s(OI);$po=r(Iot,"Wav2Vec2Processor"),Iot.forEach(t),kpo=r(w6e," (UniSpeechSat model)"),w6e.forEach(t),Spo=i(ue),tp=n(ue,"LI",{});var A6e=s(tp);Ose=n(A6e,"STRONG",{});var Not=s(Ose);Rpo=r(Not,"vilt"),Not.forEach(t),Ppo=r(A6e," \u2014 "),VI=n(A6e,"A",{href:!0});var qot=s(VI);Bpo=r(qot,"ViltProcessor"),qot.forEach(t),Ipo=r(A6e," (ViLT model)"),A6e.forEach(t),Npo=i(ue),ap=n(ue,"LI",{});var L6e=s(ap);Vse=n(L6e,"STRONG",{});var jot=s(Vse);qpo=r(jot,"vision-text-dual-encoder"),jot.forEach(t),jpo=r(L6e," \u2014 "),XI=n(L6e,"A",{href:!0});var Dot=s(XI);Dpo=r(Dot,"VisionTextDualEncoderProcessor"),Dot.forEach(t),Gpo=r(L6e," (VisionTextDualEncoder model)"),L6e.forEach(t),Opo=i(ue),np=n(ue,"LI",{});var y6e=s(np);Xse=n(y6e,"STRONG",{});var Got=s(Xse);Vpo=r(Got,"wav2vec2"),Got.forEach(t),Xpo=r(y6e," \u2014 "),zI=n(y6e,"A",{href:!0});var Oot=s(zI);zpo=r(Oot,"Wav2Vec2Processor"),Oot.forEach(t),Wpo=r(y6e," (Wav2Vec2 model)"),y6e.forEach(t),Qpo=i(ue),sp=n(ue,"LI",{});var x6e=s(sp);zse=n(x6e,"STRONG",{});var Vot=s(zse);Hpo=r(Vot,"wav2vec2-conformer"),Vot.forEach(t),Upo=r(x6e," \u2014 "),WI=n(x6e,"A",{href:!0});var Xot=s(WI);Jpo=r(Xot,"Wav2Vec2Processor"),Xot.forEach(t),Ypo=r(x6e," (Wav2Vec2-Conformer model)"),x6e.forEach(t),Kpo=i(ue),lp=n(ue,"LI",{});var $6e=s(lp);Wse=n($6e,"STRONG",{});var zot=s(Wse);Zpo=r(zot,"wavlm"),zot.forEach(t),e_o=r($6e," \u2014 "),QI=n($6e,"A",{href:!0});var Wot=s(QI);o_o=r(Wot,"Wav2Vec2Processor"),Wot.forEach(t),r_o=r($6e," (WavLM model)"),$6e.forEach(t),ue.forEach(t),t_o=i(ea),T(ip.$$.fragment,ea),a_o=i(ea),T(dp.$$.fragment,ea),ea.forEach(t),n_o=i(Gs),cp=n(Gs,"DIV",{class:!0});var uGe=s(cp);T(mL.$$.fragment,uGe),s_o=i(uGe),Qse=n(uGe,"P",{});var Qot=s(Qse);l_o=r(Qot,"Register a new processor for this class."),Qot.forEach(t),uGe.forEach(t),Gs.forEach(t),hje=i(f),Ai=n(f,"H2",{class:!0});var bGe=s(Ai);fp=n(bGe,"A",{id:!0,class:!0,href:!0});var Hot=s(fp);Hse=n(Hot,"SPAN",{});var Uot=s(Hse);T(gL.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),i_o=i(bGe),Use=n(bGe,"SPAN",{});var Jot=s(Use);d_o=r(Jot,"AutoModel"),Jot.forEach(t),bGe.forEach(t),pje=i(f),yo=n(f,"DIV",{class:!0});var Os=s(yo);T(hL.$$.fragment,Os),c_o=i(Os),Li=n(Os,"P",{});var zZ=s(Li);f_o=r(zZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HI=n(zZ,"A",{href:!0});var Yot=s(HI);m_o=r(Yot,"from_pretrained()"),Yot.forEach(t),g_o=r(zZ," class method or the "),UI=n(zZ,"A",{href:!0});var Kot=s(UI);h_o=r(Kot,"from_config()"),Kot.forEach(t),p_o=r(zZ,` class
method.`),zZ.forEach(t),__o=i(Os),pL=n(Os,"P",{});var vGe=s(pL);u_o=r(vGe,"This class cannot be instantiated directly using "),Jse=n(vGe,"CODE",{});var Zot=s(Jse);b_o=r(Zot,"__init__()"),Zot.forEach(t),v_o=r(vGe," (throws an error)."),vGe.forEach(t),F_o=i(Os),tt=n(Os,"DIV",{class:!0});var zw=s(tt);T(_L.$$.fragment,zw),T_o=i(zw),Yse=n(zw,"P",{});var ert=s(Yse);M_o=r(ert,"Instantiates one of the base model classes of the library from a configuration."),ert.forEach(t),E_o=i(zw),yi=n(zw,"P",{});var WZ=s(yi);C_o=r(WZ,`Note:
Loading a model from its configuration file does `),Kse=n(WZ,"STRONG",{});var ort=s(Kse);w_o=r(ort,"not"),ort.forEach(t),A_o=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JI=n(WZ,"A",{href:!0});var rrt=s(JI);L_o=r(rrt,"from_pretrained()"),rrt.forEach(t),y_o=r(WZ," to load the model weights."),WZ.forEach(t),x_o=i(zw),T(mp.$$.fragment,zw),zw.forEach(t),$_o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(uL.$$.fragment,oa),k_o=i(oa),Zse=n(oa,"P",{});var trt=s(Zse);S_o=r(trt,"Instantiate one of the base model classes of the library from a pretrained model."),trt.forEach(t),R_o=i(oa),ya=n(oa,"P",{});var Ww=s(ya);P_o=r(Ww,"The model class to instantiate is selected based on the "),ele=n(Ww,"CODE",{});var art=s(ele);B_o=r(art,"model_type"),art.forEach(t),I_o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),ole=n(Ww,"CODE",{});var nrt=s(ole);N_o=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),q_o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=n(Ww,"CODE",{});var srt=s(rle);j_o=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),D_o=r(Ww,":"),Ww.forEach(t),G_o=i(oa),x=n(oa,"UL",{});var $=s(x);gp=n($,"LI",{});var k6e=s(gp);tle=n(k6e,"STRONG",{});var lrt=s(tle);O_o=r(lrt,"albert"),lrt.forEach(t),V_o=r(k6e," \u2014 "),YI=n(k6e,"A",{href:!0});var irt=s(YI);X_o=r(irt,"AlbertModel"),irt.forEach(t),z_o=r(k6e," (ALBERT model)"),k6e.forEach(t),W_o=i($),hp=n($,"LI",{});var S6e=s(hp);ale=n(S6e,"STRONG",{});var drt=s(ale);Q_o=r(drt,"bart"),drt.forEach(t),H_o=r(S6e," \u2014 "),KI=n(S6e,"A",{href:!0});var crt=s(KI);U_o=r(crt,"BartModel"),crt.forEach(t),J_o=r(S6e," (BART model)"),S6e.forEach(t),Y_o=i($),pp=n($,"LI",{});var R6e=s(pp);nle=n(R6e,"STRONG",{});var frt=s(nle);K_o=r(frt,"beit"),frt.forEach(t),Z_o=r(R6e," \u2014 "),ZI=n(R6e,"A",{href:!0});var mrt=s(ZI);euo=r(mrt,"BeitModel"),mrt.forEach(t),ouo=r(R6e," (BEiT model)"),R6e.forEach(t),ruo=i($),_p=n($,"LI",{});var P6e=s(_p);sle=n(P6e,"STRONG",{});var grt=s(sle);tuo=r(grt,"bert"),grt.forEach(t),auo=r(P6e," \u2014 "),eN=n(P6e,"A",{href:!0});var hrt=s(eN);nuo=r(hrt,"BertModel"),hrt.forEach(t),suo=r(P6e," (BERT model)"),P6e.forEach(t),luo=i($),up=n($,"LI",{});var B6e=s(up);lle=n(B6e,"STRONG",{});var prt=s(lle);iuo=r(prt,"bert-generation"),prt.forEach(t),duo=r(B6e," \u2014 "),oN=n(B6e,"A",{href:!0});var _rt=s(oN);cuo=r(_rt,"BertGenerationEncoder"),_rt.forEach(t),fuo=r(B6e," (Bert Generation model)"),B6e.forEach(t),muo=i($),bp=n($,"LI",{});var I6e=s(bp);ile=n(I6e,"STRONG",{});var urt=s(ile);guo=r(urt,"big_bird"),urt.forEach(t),huo=r(I6e," \u2014 "),rN=n(I6e,"A",{href:!0});var brt=s(rN);puo=r(brt,"BigBirdModel"),brt.forEach(t),_uo=r(I6e," (BigBird model)"),I6e.forEach(t),uuo=i($),vp=n($,"LI",{});var N6e=s(vp);dle=n(N6e,"STRONG",{});var vrt=s(dle);buo=r(vrt,"bigbird_pegasus"),vrt.forEach(t),vuo=r(N6e," \u2014 "),tN=n(N6e,"A",{href:!0});var Frt=s(tN);Fuo=r(Frt,"BigBirdPegasusModel"),Frt.forEach(t),Tuo=r(N6e," (BigBird-Pegasus model)"),N6e.forEach(t),Muo=i($),Fp=n($,"LI",{});var q6e=s(Fp);cle=n(q6e,"STRONG",{});var Trt=s(cle);Euo=r(Trt,"blenderbot"),Trt.forEach(t),Cuo=r(q6e," \u2014 "),aN=n(q6e,"A",{href:!0});var Mrt=s(aN);wuo=r(Mrt,"BlenderbotModel"),Mrt.forEach(t),Auo=r(q6e," (Blenderbot model)"),q6e.forEach(t),Luo=i($),Tp=n($,"LI",{});var j6e=s(Tp);fle=n(j6e,"STRONG",{});var Ert=s(fle);yuo=r(Ert,"blenderbot-small"),Ert.forEach(t),xuo=r(j6e," \u2014 "),nN=n(j6e,"A",{href:!0});var Crt=s(nN);$uo=r(Crt,"BlenderbotSmallModel"),Crt.forEach(t),kuo=r(j6e," (BlenderbotSmall model)"),j6e.forEach(t),Suo=i($),Mp=n($,"LI",{});var D6e=s(Mp);mle=n(D6e,"STRONG",{});var wrt=s(mle);Ruo=r(wrt,"bloom"),wrt.forEach(t),Puo=r(D6e," \u2014 "),sN=n(D6e,"A",{href:!0});var Art=s(sN);Buo=r(Art,"BloomModel"),Art.forEach(t),Iuo=r(D6e," (BLOOM model)"),D6e.forEach(t),Nuo=i($),Ep=n($,"LI",{});var G6e=s(Ep);gle=n(G6e,"STRONG",{});var Lrt=s(gle);quo=r(Lrt,"camembert"),Lrt.forEach(t),juo=r(G6e," \u2014 "),lN=n(G6e,"A",{href:!0});var yrt=s(lN);Duo=r(yrt,"CamembertModel"),yrt.forEach(t),Guo=r(G6e," (CamemBERT model)"),G6e.forEach(t),Ouo=i($),Cp=n($,"LI",{});var O6e=s(Cp);hle=n(O6e,"STRONG",{});var xrt=s(hle);Vuo=r(xrt,"canine"),xrt.forEach(t),Xuo=r(O6e," \u2014 "),iN=n(O6e,"A",{href:!0});var $rt=s(iN);zuo=r($rt,"CanineModel"),$rt.forEach(t),Wuo=r(O6e," (CANINE model)"),O6e.forEach(t),Quo=i($),wp=n($,"LI",{});var V6e=s(wp);ple=n(V6e,"STRONG",{});var krt=s(ple);Huo=r(krt,"clip"),krt.forEach(t),Uuo=r(V6e," \u2014 "),dN=n(V6e,"A",{href:!0});var Srt=s(dN);Juo=r(Srt,"CLIPModel"),Srt.forEach(t),Yuo=r(V6e," (CLIP model)"),V6e.forEach(t),Kuo=i($),Ap=n($,"LI",{});var X6e=s(Ap);_le=n(X6e,"STRONG",{});var Rrt=s(_le);Zuo=r(Rrt,"convbert"),Rrt.forEach(t),e4o=r(X6e," \u2014 "),cN=n(X6e,"A",{href:!0});var Prt=s(cN);o4o=r(Prt,"ConvBertModel"),Prt.forEach(t),r4o=r(X6e," (ConvBERT model)"),X6e.forEach(t),t4o=i($),Lp=n($,"LI",{});var z6e=s(Lp);ule=n(z6e,"STRONG",{});var Brt=s(ule);a4o=r(Brt,"convnext"),Brt.forEach(t),n4o=r(z6e," \u2014 "),fN=n(z6e,"A",{href:!0});var Irt=s(fN);s4o=r(Irt,"ConvNextModel"),Irt.forEach(t),l4o=r(z6e," (ConvNeXT model)"),z6e.forEach(t),i4o=i($),yp=n($,"LI",{});var W6e=s(yp);ble=n(W6e,"STRONG",{});var Nrt=s(ble);d4o=r(Nrt,"ctrl"),Nrt.forEach(t),c4o=r(W6e," \u2014 "),mN=n(W6e,"A",{href:!0});var qrt=s(mN);f4o=r(qrt,"CTRLModel"),qrt.forEach(t),m4o=r(W6e," (CTRL model)"),W6e.forEach(t),g4o=i($),xp=n($,"LI",{});var Q6e=s(xp);vle=n(Q6e,"STRONG",{});var jrt=s(vle);h4o=r(jrt,"cvt"),jrt.forEach(t),p4o=r(Q6e," \u2014 "),gN=n(Q6e,"A",{href:!0});var Drt=s(gN);_4o=r(Drt,"CvtModel"),Drt.forEach(t),u4o=r(Q6e," (CvT model)"),Q6e.forEach(t),b4o=i($),$p=n($,"LI",{});var H6e=s($p);Fle=n(H6e,"STRONG",{});var Grt=s(Fle);v4o=r(Grt,"data2vec-audio"),Grt.forEach(t),F4o=r(H6e," \u2014 "),hN=n(H6e,"A",{href:!0});var Ort=s(hN);T4o=r(Ort,"Data2VecAudioModel"),Ort.forEach(t),M4o=r(H6e," (Data2VecAudio model)"),H6e.forEach(t),E4o=i($),kp=n($,"LI",{});var U6e=s(kp);Tle=n(U6e,"STRONG",{});var Vrt=s(Tle);C4o=r(Vrt,"data2vec-text"),Vrt.forEach(t),w4o=r(U6e," \u2014 "),pN=n(U6e,"A",{href:!0});var Xrt=s(pN);A4o=r(Xrt,"Data2VecTextModel"),Xrt.forEach(t),L4o=r(U6e," (Data2VecText model)"),U6e.forEach(t),y4o=i($),Sp=n($,"LI",{});var J6e=s(Sp);Mle=n(J6e,"STRONG",{});var zrt=s(Mle);x4o=r(zrt,"data2vec-vision"),zrt.forEach(t),$4o=r(J6e," \u2014 "),_N=n(J6e,"A",{href:!0});var Wrt=s(_N);k4o=r(Wrt,"Data2VecVisionModel"),Wrt.forEach(t),S4o=r(J6e," (Data2VecVision model)"),J6e.forEach(t),R4o=i($),Rp=n($,"LI",{});var Y6e=s(Rp);Ele=n(Y6e,"STRONG",{});var Qrt=s(Ele);P4o=r(Qrt,"deberta"),Qrt.forEach(t),B4o=r(Y6e," \u2014 "),uN=n(Y6e,"A",{href:!0});var Hrt=s(uN);I4o=r(Hrt,"DebertaModel"),Hrt.forEach(t),N4o=r(Y6e," (DeBERTa model)"),Y6e.forEach(t),q4o=i($),Pp=n($,"LI",{});var K6e=s(Pp);Cle=n(K6e,"STRONG",{});var Urt=s(Cle);j4o=r(Urt,"deberta-v2"),Urt.forEach(t),D4o=r(K6e," \u2014 "),bN=n(K6e,"A",{href:!0});var Jrt=s(bN);G4o=r(Jrt,"DebertaV2Model"),Jrt.forEach(t),O4o=r(K6e," (DeBERTa-v2 model)"),K6e.forEach(t),V4o=i($),Bp=n($,"LI",{});var Z6e=s(Bp);wle=n(Z6e,"STRONG",{});var Yrt=s(wle);X4o=r(Yrt,"decision_transformer"),Yrt.forEach(t),z4o=r(Z6e," \u2014 "),vN=n(Z6e,"A",{href:!0});var Krt=s(vN);W4o=r(Krt,"DecisionTransformerModel"),Krt.forEach(t),Q4o=r(Z6e," (Decision Transformer model)"),Z6e.forEach(t),H4o=i($),Ip=n($,"LI",{});var eLe=s(Ip);Ale=n(eLe,"STRONG",{});var Zrt=s(Ale);U4o=r(Zrt,"deit"),Zrt.forEach(t),J4o=r(eLe," \u2014 "),FN=n(eLe,"A",{href:!0});var ett=s(FN);Y4o=r(ett,"DeiTModel"),ett.forEach(t),K4o=r(eLe," (DeiT model)"),eLe.forEach(t),Z4o=i($),Np=n($,"LI",{});var oLe=s(Np);Lle=n(oLe,"STRONG",{});var ott=s(Lle);e1o=r(ott,"detr"),ott.forEach(t),o1o=r(oLe," \u2014 "),TN=n(oLe,"A",{href:!0});var rtt=s(TN);r1o=r(rtt,"DetrModel"),rtt.forEach(t),t1o=r(oLe," (DETR model)"),oLe.forEach(t),a1o=i($),qp=n($,"LI",{});var rLe=s(qp);yle=n(rLe,"STRONG",{});var ttt=s(yle);n1o=r(ttt,"distilbert"),ttt.forEach(t),s1o=r(rLe," \u2014 "),MN=n(rLe,"A",{href:!0});var att=s(MN);l1o=r(att,"DistilBertModel"),att.forEach(t),i1o=r(rLe," (DistilBERT model)"),rLe.forEach(t),d1o=i($),jp=n($,"LI",{});var tLe=s(jp);xle=n(tLe,"STRONG",{});var ntt=s(xle);c1o=r(ntt,"dpr"),ntt.forEach(t),f1o=r(tLe," \u2014 "),EN=n(tLe,"A",{href:!0});var stt=s(EN);m1o=r(stt,"DPRQuestionEncoder"),stt.forEach(t),g1o=r(tLe," (DPR model)"),tLe.forEach(t),h1o=i($),Dp=n($,"LI",{});var aLe=s(Dp);$le=n(aLe,"STRONG",{});var ltt=s($le);p1o=r(ltt,"dpt"),ltt.forEach(t),_1o=r(aLe," \u2014 "),CN=n(aLe,"A",{href:!0});var itt=s(CN);u1o=r(itt,"DPTModel"),itt.forEach(t),b1o=r(aLe," (DPT model)"),aLe.forEach(t),v1o=i($),Gp=n($,"LI",{});var nLe=s(Gp);kle=n(nLe,"STRONG",{});var dtt=s(kle);F1o=r(dtt,"electra"),dtt.forEach(t),T1o=r(nLe," \u2014 "),wN=n(nLe,"A",{href:!0});var ctt=s(wN);M1o=r(ctt,"ElectraModel"),ctt.forEach(t),E1o=r(nLe," (ELECTRA model)"),nLe.forEach(t),C1o=i($),Op=n($,"LI",{});var sLe=s(Op);Sle=n(sLe,"STRONG",{});var ftt=s(Sle);w1o=r(ftt,"flaubert"),ftt.forEach(t),A1o=r(sLe," \u2014 "),AN=n(sLe,"A",{href:!0});var mtt=s(AN);L1o=r(mtt,"FlaubertModel"),mtt.forEach(t),y1o=r(sLe," (FlauBERT model)"),sLe.forEach(t),x1o=i($),Vp=n($,"LI",{});var lLe=s(Vp);Rle=n(lLe,"STRONG",{});var gtt=s(Rle);$1o=r(gtt,"flava"),gtt.forEach(t),k1o=r(lLe," \u2014 "),LN=n(lLe,"A",{href:!0});var htt=s(LN);S1o=r(htt,"FlavaModel"),htt.forEach(t),R1o=r(lLe," (FLAVA model)"),lLe.forEach(t),P1o=i($),Xp=n($,"LI",{});var iLe=s(Xp);Ple=n(iLe,"STRONG",{});var ptt=s(Ple);B1o=r(ptt,"fnet"),ptt.forEach(t),I1o=r(iLe," \u2014 "),yN=n(iLe,"A",{href:!0});var _tt=s(yN);N1o=r(_tt,"FNetModel"),_tt.forEach(t),q1o=r(iLe," (FNet model)"),iLe.forEach(t),j1o=i($),zp=n($,"LI",{});var dLe=s(zp);Ble=n(dLe,"STRONG",{});var utt=s(Ble);D1o=r(utt,"fsmt"),utt.forEach(t),G1o=r(dLe," \u2014 "),xN=n(dLe,"A",{href:!0});var btt=s(xN);O1o=r(btt,"FSMTModel"),btt.forEach(t),V1o=r(dLe," (FairSeq Machine-Translation model)"),dLe.forEach(t),X1o=i($),Ps=n($,"LI",{});var rk=s(Ps);Ile=n(rk,"STRONG",{});var vtt=s(Ile);z1o=r(vtt,"funnel"),vtt.forEach(t),W1o=r(rk," \u2014 "),$N=n(rk,"A",{href:!0});var Ftt=s($N);Q1o=r(Ftt,"FunnelModel"),Ftt.forEach(t),H1o=r(rk," or "),kN=n(rk,"A",{href:!0});var Ttt=s(kN);U1o=r(Ttt,"FunnelBaseModel"),Ttt.forEach(t),J1o=r(rk," (Funnel Transformer model)"),rk.forEach(t),Y1o=i($),Wp=n($,"LI",{});var cLe=s(Wp);Nle=n(cLe,"STRONG",{});var Mtt=s(Nle);K1o=r(Mtt,"glpn"),Mtt.forEach(t),Z1o=r(cLe," \u2014 "),SN=n(cLe,"A",{href:!0});var Ett=s(SN);e7o=r(Ett,"GLPNModel"),Ett.forEach(t),o7o=r(cLe," (GLPN model)"),cLe.forEach(t),r7o=i($),Qp=n($,"LI",{});var fLe=s(Qp);qle=n(fLe,"STRONG",{});var Ctt=s(qle);t7o=r(Ctt,"gpt2"),Ctt.forEach(t),a7o=r(fLe," \u2014 "),RN=n(fLe,"A",{href:!0});var wtt=s(RN);n7o=r(wtt,"GPT2Model"),wtt.forEach(t),s7o=r(fLe," (OpenAI GPT-2 model)"),fLe.forEach(t),l7o=i($),Hp=n($,"LI",{});var mLe=s(Hp);jle=n(mLe,"STRONG",{});var Att=s(jle);i7o=r(Att,"gpt_neo"),Att.forEach(t),d7o=r(mLe," \u2014 "),PN=n(mLe,"A",{href:!0});var Ltt=s(PN);c7o=r(Ltt,"GPTNeoModel"),Ltt.forEach(t),f7o=r(mLe," (GPT Neo model)"),mLe.forEach(t),m7o=i($),Up=n($,"LI",{});var gLe=s(Up);Dle=n(gLe,"STRONG",{});var ytt=s(Dle);g7o=r(ytt,"gpt_neox"),ytt.forEach(t),h7o=r(gLe," \u2014 "),BN=n(gLe,"A",{href:!0});var xtt=s(BN);p7o=r(xtt,"GPTNeoXModel"),xtt.forEach(t),_7o=r(gLe," (GPT NeoX model)"),gLe.forEach(t),u7o=i($),Jp=n($,"LI",{});var hLe=s(Jp);Gle=n(hLe,"STRONG",{});var $tt=s(Gle);b7o=r($tt,"gptj"),$tt.forEach(t),v7o=r(hLe," \u2014 "),IN=n(hLe,"A",{href:!0});var ktt=s(IN);F7o=r(ktt,"GPTJModel"),ktt.forEach(t),T7o=r(hLe," (GPT-J model)"),hLe.forEach(t),M7o=i($),Yp=n($,"LI",{});var pLe=s(Yp);Ole=n(pLe,"STRONG",{});var Stt=s(Ole);E7o=r(Stt,"hubert"),Stt.forEach(t),C7o=r(pLe," \u2014 "),NN=n(pLe,"A",{href:!0});var Rtt=s(NN);w7o=r(Rtt,"HubertModel"),Rtt.forEach(t),A7o=r(pLe," (Hubert model)"),pLe.forEach(t),L7o=i($),Kp=n($,"LI",{});var _Le=s(Kp);Vle=n(_Le,"STRONG",{});var Ptt=s(Vle);y7o=r(Ptt,"ibert"),Ptt.forEach(t),x7o=r(_Le," \u2014 "),qN=n(_Le,"A",{href:!0});var Btt=s(qN);$7o=r(Btt,"IBertModel"),Btt.forEach(t),k7o=r(_Le," (I-BERT model)"),_Le.forEach(t),S7o=i($),Zp=n($,"LI",{});var uLe=s(Zp);Xle=n(uLe,"STRONG",{});var Itt=s(Xle);R7o=r(Itt,"imagegpt"),Itt.forEach(t),P7o=r(uLe," \u2014 "),jN=n(uLe,"A",{href:!0});var Ntt=s(jN);B7o=r(Ntt,"ImageGPTModel"),Ntt.forEach(t),I7o=r(uLe," (ImageGPT model)"),uLe.forEach(t),N7o=i($),e_=n($,"LI",{});var bLe=s(e_);zle=n(bLe,"STRONG",{});var qtt=s(zle);q7o=r(qtt,"layoutlm"),qtt.forEach(t),j7o=r(bLe," \u2014 "),DN=n(bLe,"A",{href:!0});var jtt=s(DN);D7o=r(jtt,"LayoutLMModel"),jtt.forEach(t),G7o=r(bLe," (LayoutLM model)"),bLe.forEach(t),O7o=i($),o_=n($,"LI",{});var vLe=s(o_);Wle=n(vLe,"STRONG",{});var Dtt=s(Wle);V7o=r(Dtt,"layoutlmv2"),Dtt.forEach(t),X7o=r(vLe," \u2014 "),GN=n(vLe,"A",{href:!0});var Gtt=s(GN);z7o=r(Gtt,"LayoutLMv2Model"),Gtt.forEach(t),W7o=r(vLe," (LayoutLMv2 model)"),vLe.forEach(t),Q7o=i($),r_=n($,"LI",{});var FLe=s(r_);Qle=n(FLe,"STRONG",{});var Ott=s(Qle);H7o=r(Ott,"layoutlmv3"),Ott.forEach(t),U7o=r(FLe," \u2014 "),ON=n(FLe,"A",{href:!0});var Vtt=s(ON);J7o=r(Vtt,"LayoutLMv3Model"),Vtt.forEach(t),Y7o=r(FLe," (LayoutLMv3 model)"),FLe.forEach(t),K7o=i($),t_=n($,"LI",{});var TLe=s(t_);Hle=n(TLe,"STRONG",{});var Xtt=s(Hle);Z7o=r(Xtt,"led"),Xtt.forEach(t),ebo=r(TLe," \u2014 "),VN=n(TLe,"A",{href:!0});var ztt=s(VN);obo=r(ztt,"LEDModel"),ztt.forEach(t),rbo=r(TLe," (LED model)"),TLe.forEach(t),tbo=i($),a_=n($,"LI",{});var MLe=s(a_);Ule=n(MLe,"STRONG",{});var Wtt=s(Ule);abo=r(Wtt,"levit"),Wtt.forEach(t),nbo=r(MLe," \u2014 "),XN=n(MLe,"A",{href:!0});var Qtt=s(XN);sbo=r(Qtt,"LevitModel"),Qtt.forEach(t),lbo=r(MLe," (LeViT model)"),MLe.forEach(t),ibo=i($),n_=n($,"LI",{});var ELe=s(n_);Jle=n(ELe,"STRONG",{});var Htt=s(Jle);dbo=r(Htt,"longformer"),Htt.forEach(t),cbo=r(ELe," \u2014 "),zN=n(ELe,"A",{href:!0});var Utt=s(zN);fbo=r(Utt,"LongformerModel"),Utt.forEach(t),mbo=r(ELe," (Longformer model)"),ELe.forEach(t),gbo=i($),s_=n($,"LI",{});var CLe=s(s_);Yle=n(CLe,"STRONG",{});var Jtt=s(Yle);hbo=r(Jtt,"luke"),Jtt.forEach(t),pbo=r(CLe," \u2014 "),WN=n(CLe,"A",{href:!0});var Ytt=s(WN);_bo=r(Ytt,"LukeModel"),Ytt.forEach(t),ubo=r(CLe," (LUKE model)"),CLe.forEach(t),bbo=i($),l_=n($,"LI",{});var wLe=s(l_);Kle=n(wLe,"STRONG",{});var Ktt=s(Kle);vbo=r(Ktt,"lxmert"),Ktt.forEach(t),Fbo=r(wLe," \u2014 "),QN=n(wLe,"A",{href:!0});var Ztt=s(QN);Tbo=r(Ztt,"LxmertModel"),Ztt.forEach(t),Mbo=r(wLe," (LXMERT model)"),wLe.forEach(t),Ebo=i($),i_=n($,"LI",{});var ALe=s(i_);Zle=n(ALe,"STRONG",{});var eat=s(Zle);Cbo=r(eat,"m2m_100"),eat.forEach(t),wbo=r(ALe," \u2014 "),HN=n(ALe,"A",{href:!0});var oat=s(HN);Abo=r(oat,"M2M100Model"),oat.forEach(t),Lbo=r(ALe," (M2M100 model)"),ALe.forEach(t),ybo=i($),d_=n($,"LI",{});var LLe=s(d_);eie=n(LLe,"STRONG",{});var rat=s(eie);xbo=r(rat,"marian"),rat.forEach(t),$bo=r(LLe," \u2014 "),UN=n(LLe,"A",{href:!0});var tat=s(UN);kbo=r(tat,"MarianModel"),tat.forEach(t),Sbo=r(LLe," (Marian model)"),LLe.forEach(t),Rbo=i($),c_=n($,"LI",{});var yLe=s(c_);oie=n(yLe,"STRONG",{});var aat=s(oie);Pbo=r(aat,"maskformer"),aat.forEach(t),Bbo=r(yLe," \u2014 "),JN=n(yLe,"A",{href:!0});var nat=s(JN);Ibo=r(nat,"MaskFormerModel"),nat.forEach(t),Nbo=r(yLe," (MaskFormer model)"),yLe.forEach(t),qbo=i($),f_=n($,"LI",{});var xLe=s(f_);rie=n(xLe,"STRONG",{});var sat=s(rie);jbo=r(sat,"mbart"),sat.forEach(t),Dbo=r(xLe," \u2014 "),YN=n(xLe,"A",{href:!0});var lat=s(YN);Gbo=r(lat,"MBartModel"),lat.forEach(t),Obo=r(xLe," (mBART model)"),xLe.forEach(t),Vbo=i($),m_=n($,"LI",{});var $Le=s(m_);tie=n($Le,"STRONG",{});var iat=s(tie);Xbo=r(iat,"megatron-bert"),iat.forEach(t),zbo=r($Le," \u2014 "),KN=n($Le,"A",{href:!0});var dat=s(KN);Wbo=r(dat,"MegatronBertModel"),dat.forEach(t),Qbo=r($Le," (Megatron-BERT model)"),$Le.forEach(t),Hbo=i($),g_=n($,"LI",{});var kLe=s(g_);aie=n(kLe,"STRONG",{});var cat=s(aie);Ubo=r(cat,"mobilebert"),cat.forEach(t),Jbo=r(kLe," \u2014 "),ZN=n(kLe,"A",{href:!0});var fat=s(ZN);Ybo=r(fat,"MobileBertModel"),fat.forEach(t),Kbo=r(kLe," (MobileBERT model)"),kLe.forEach(t),Zbo=i($),h_=n($,"LI",{});var SLe=s(h_);nie=n(SLe,"STRONG",{});var mat=s(nie);e2o=r(mat,"mpnet"),mat.forEach(t),o2o=r(SLe," \u2014 "),eq=n(SLe,"A",{href:!0});var gat=s(eq);r2o=r(gat,"MPNetModel"),gat.forEach(t),t2o=r(SLe," (MPNet model)"),SLe.forEach(t),a2o=i($),p_=n($,"LI",{});var RLe=s(p_);sie=n(RLe,"STRONG",{});var hat=s(sie);n2o=r(hat,"mt5"),hat.forEach(t),s2o=r(RLe," \u2014 "),oq=n(RLe,"A",{href:!0});var pat=s(oq);l2o=r(pat,"MT5Model"),pat.forEach(t),i2o=r(RLe," (MT5 model)"),RLe.forEach(t),d2o=i($),__=n($,"LI",{});var PLe=s(__);lie=n(PLe,"STRONG",{});var _at=s(lie);c2o=r(_at,"nystromformer"),_at.forEach(t),f2o=r(PLe," \u2014 "),rq=n(PLe,"A",{href:!0});var uat=s(rq);m2o=r(uat,"NystromformerModel"),uat.forEach(t),g2o=r(PLe," (Nystr\xF6mformer model)"),PLe.forEach(t),h2o=i($),u_=n($,"LI",{});var BLe=s(u_);iie=n(BLe,"STRONG",{});var bat=s(iie);p2o=r(bat,"openai-gpt"),bat.forEach(t),_2o=r(BLe," \u2014 "),tq=n(BLe,"A",{href:!0});var vat=s(tq);u2o=r(vat,"OpenAIGPTModel"),vat.forEach(t),b2o=r(BLe," (OpenAI GPT model)"),BLe.forEach(t),v2o=i($),b_=n($,"LI",{});var ILe=s(b_);die=n(ILe,"STRONG",{});var Fat=s(die);F2o=r(Fat,"opt"),Fat.forEach(t),T2o=r(ILe," \u2014 "),aq=n(ILe,"A",{href:!0});var Tat=s(aq);M2o=r(Tat,"OPTModel"),Tat.forEach(t),E2o=r(ILe," (OPT model)"),ILe.forEach(t),C2o=i($),v_=n($,"LI",{});var NLe=s(v_);cie=n(NLe,"STRONG",{});var Mat=s(cie);w2o=r(Mat,"pegasus"),Mat.forEach(t),A2o=r(NLe," \u2014 "),nq=n(NLe,"A",{href:!0});var Eat=s(nq);L2o=r(Eat,"PegasusModel"),Eat.forEach(t),y2o=r(NLe," (Pegasus model)"),NLe.forEach(t),x2o=i($),F_=n($,"LI",{});var qLe=s(F_);fie=n(qLe,"STRONG",{});var Cat=s(fie);$2o=r(Cat,"perceiver"),Cat.forEach(t),k2o=r(qLe," \u2014 "),sq=n(qLe,"A",{href:!0});var wat=s(sq);S2o=r(wat,"PerceiverModel"),wat.forEach(t),R2o=r(qLe," (Perceiver model)"),qLe.forEach(t),P2o=i($),T_=n($,"LI",{});var jLe=s(T_);mie=n(jLe,"STRONG",{});var Aat=s(mie);B2o=r(Aat,"plbart"),Aat.forEach(t),I2o=r(jLe," \u2014 "),lq=n(jLe,"A",{href:!0});var Lat=s(lq);N2o=r(Lat,"PLBartModel"),Lat.forEach(t),q2o=r(jLe," (PLBart model)"),jLe.forEach(t),j2o=i($),M_=n($,"LI",{});var DLe=s(M_);gie=n(DLe,"STRONG",{});var yat=s(gie);D2o=r(yat,"poolformer"),yat.forEach(t),G2o=r(DLe," \u2014 "),iq=n(DLe,"A",{href:!0});var xat=s(iq);O2o=r(xat,"PoolFormerModel"),xat.forEach(t),V2o=r(DLe," (PoolFormer model)"),DLe.forEach(t),X2o=i($),E_=n($,"LI",{});var GLe=s(E_);hie=n(GLe,"STRONG",{});var $at=s(hie);z2o=r($at,"prophetnet"),$at.forEach(t),W2o=r(GLe," \u2014 "),dq=n(GLe,"A",{href:!0});var kat=s(dq);Q2o=r(kat,"ProphetNetModel"),kat.forEach(t),H2o=r(GLe," (ProphetNet model)"),GLe.forEach(t),U2o=i($),C_=n($,"LI",{});var OLe=s(C_);pie=n(OLe,"STRONG",{});var Sat=s(pie);J2o=r(Sat,"qdqbert"),Sat.forEach(t),Y2o=r(OLe," \u2014 "),cq=n(OLe,"A",{href:!0});var Rat=s(cq);K2o=r(Rat,"QDQBertModel"),Rat.forEach(t),Z2o=r(OLe," (QDQBert model)"),OLe.forEach(t),evo=i($),w_=n($,"LI",{});var VLe=s(w_);_ie=n(VLe,"STRONG",{});var Pat=s(_ie);ovo=r(Pat,"reformer"),Pat.forEach(t),rvo=r(VLe," \u2014 "),fq=n(VLe,"A",{href:!0});var Bat=s(fq);tvo=r(Bat,"ReformerModel"),Bat.forEach(t),avo=r(VLe," (Reformer model)"),VLe.forEach(t),nvo=i($),A_=n($,"LI",{});var XLe=s(A_);uie=n(XLe,"STRONG",{});var Iat=s(uie);svo=r(Iat,"regnet"),Iat.forEach(t),lvo=r(XLe," \u2014 "),mq=n(XLe,"A",{href:!0});var Nat=s(mq);ivo=r(Nat,"RegNetModel"),Nat.forEach(t),dvo=r(XLe," (RegNet model)"),XLe.forEach(t),cvo=i($),L_=n($,"LI",{});var zLe=s(L_);bie=n(zLe,"STRONG",{});var qat=s(bie);fvo=r(qat,"rembert"),qat.forEach(t),mvo=r(zLe," \u2014 "),gq=n(zLe,"A",{href:!0});var jat=s(gq);gvo=r(jat,"RemBertModel"),jat.forEach(t),hvo=r(zLe," (RemBERT model)"),zLe.forEach(t),pvo=i($),y_=n($,"LI",{});var WLe=s(y_);vie=n(WLe,"STRONG",{});var Dat=s(vie);_vo=r(Dat,"resnet"),Dat.forEach(t),uvo=r(WLe," \u2014 "),hq=n(WLe,"A",{href:!0});var Gat=s(hq);bvo=r(Gat,"ResNetModel"),Gat.forEach(t),vvo=r(WLe," (ResNet model)"),WLe.forEach(t),Fvo=i($),x_=n($,"LI",{});var QLe=s(x_);Fie=n(QLe,"STRONG",{});var Oat=s(Fie);Tvo=r(Oat,"retribert"),Oat.forEach(t),Mvo=r(QLe," \u2014 "),pq=n(QLe,"A",{href:!0});var Vat=s(pq);Evo=r(Vat,"RetriBertModel"),Vat.forEach(t),Cvo=r(QLe," (RetriBERT model)"),QLe.forEach(t),wvo=i($),$_=n($,"LI",{});var HLe=s($_);Tie=n(HLe,"STRONG",{});var Xat=s(Tie);Avo=r(Xat,"roberta"),Xat.forEach(t),Lvo=r(HLe," \u2014 "),_q=n(HLe,"A",{href:!0});var zat=s(_q);yvo=r(zat,"RobertaModel"),zat.forEach(t),xvo=r(HLe," (RoBERTa model)"),HLe.forEach(t),$vo=i($),k_=n($,"LI",{});var ULe=s(k_);Mie=n(ULe,"STRONG",{});var Wat=s(Mie);kvo=r(Wat,"roformer"),Wat.forEach(t),Svo=r(ULe," \u2014 "),uq=n(ULe,"A",{href:!0});var Qat=s(uq);Rvo=r(Qat,"RoFormerModel"),Qat.forEach(t),Pvo=r(ULe," (RoFormer model)"),ULe.forEach(t),Bvo=i($),S_=n($,"LI",{});var JLe=s(S_);Eie=n(JLe,"STRONG",{});var Hat=s(Eie);Ivo=r(Hat,"segformer"),Hat.forEach(t),Nvo=r(JLe," \u2014 "),bq=n(JLe,"A",{href:!0});var Uat=s(bq);qvo=r(Uat,"SegformerModel"),Uat.forEach(t),jvo=r(JLe," (SegFormer model)"),JLe.forEach(t),Dvo=i($),R_=n($,"LI",{});var YLe=s(R_);Cie=n(YLe,"STRONG",{});var Jat=s(Cie);Gvo=r(Jat,"sew"),Jat.forEach(t),Ovo=r(YLe," \u2014 "),vq=n(YLe,"A",{href:!0});var Yat=s(vq);Vvo=r(Yat,"SEWModel"),Yat.forEach(t),Xvo=r(YLe," (SEW model)"),YLe.forEach(t),zvo=i($),P_=n($,"LI",{});var KLe=s(P_);wie=n(KLe,"STRONG",{});var Kat=s(wie);Wvo=r(Kat,"sew-d"),Kat.forEach(t),Qvo=r(KLe," \u2014 "),Fq=n(KLe,"A",{href:!0});var Zat=s(Fq);Hvo=r(Zat,"SEWDModel"),Zat.forEach(t),Uvo=r(KLe," (SEW-D model)"),KLe.forEach(t),Jvo=i($),B_=n($,"LI",{});var ZLe=s(B_);Aie=n(ZLe,"STRONG",{});var ent=s(Aie);Yvo=r(ent,"speech_to_text"),ent.forEach(t),Kvo=r(ZLe," \u2014 "),Tq=n(ZLe,"A",{href:!0});var ont=s(Tq);Zvo=r(ont,"Speech2TextModel"),ont.forEach(t),eFo=r(ZLe," (Speech2Text model)"),ZLe.forEach(t),oFo=i($),I_=n($,"LI",{});var eye=s(I_);Lie=n(eye,"STRONG",{});var rnt=s(Lie);rFo=r(rnt,"splinter"),rnt.forEach(t),tFo=r(eye," \u2014 "),Mq=n(eye,"A",{href:!0});var tnt=s(Mq);aFo=r(tnt,"SplinterModel"),tnt.forEach(t),nFo=r(eye," (Splinter model)"),eye.forEach(t),sFo=i($),N_=n($,"LI",{});var oye=s(N_);yie=n(oye,"STRONG",{});var ant=s(yie);lFo=r(ant,"squeezebert"),ant.forEach(t),iFo=r(oye," \u2014 "),Eq=n(oye,"A",{href:!0});var nnt=s(Eq);dFo=r(nnt,"SqueezeBertModel"),nnt.forEach(t),cFo=r(oye," (SqueezeBERT model)"),oye.forEach(t),fFo=i($),q_=n($,"LI",{});var rye=s(q_);xie=n(rye,"STRONG",{});var snt=s(xie);mFo=r(snt,"swin"),snt.forEach(t),gFo=r(rye," \u2014 "),Cq=n(rye,"A",{href:!0});var lnt=s(Cq);hFo=r(lnt,"SwinModel"),lnt.forEach(t),pFo=r(rye," (Swin Transformer model)"),rye.forEach(t),_Fo=i($),j_=n($,"LI",{});var tye=s(j_);$ie=n(tye,"STRONG",{});var int=s($ie);uFo=r(int,"t5"),int.forEach(t),bFo=r(tye," \u2014 "),wq=n(tye,"A",{href:!0});var dnt=s(wq);vFo=r(dnt,"T5Model"),dnt.forEach(t),FFo=r(tye," (T5 model)"),tye.forEach(t),TFo=i($),D_=n($,"LI",{});var aye=s(D_);kie=n(aye,"STRONG",{});var cnt=s(kie);MFo=r(cnt,"tapas"),cnt.forEach(t),EFo=r(aye," \u2014 "),Aq=n(aye,"A",{href:!0});var fnt=s(Aq);CFo=r(fnt,"TapasModel"),fnt.forEach(t),wFo=r(aye," (TAPAS model)"),aye.forEach(t),AFo=i($),G_=n($,"LI",{});var nye=s(G_);Sie=n(nye,"STRONG",{});var mnt=s(Sie);LFo=r(mnt,"trajectory_transformer"),mnt.forEach(t),yFo=r(nye," \u2014 "),Lq=n(nye,"A",{href:!0});var gnt=s(Lq);xFo=r(gnt,"TrajectoryTransformerModel"),gnt.forEach(t),$Fo=r(nye," (Trajectory Transformer model)"),nye.forEach(t),kFo=i($),O_=n($,"LI",{});var sye=s(O_);Rie=n(sye,"STRONG",{});var hnt=s(Rie);SFo=r(hnt,"transfo-xl"),hnt.forEach(t),RFo=r(sye," \u2014 "),yq=n(sye,"A",{href:!0});var pnt=s(yq);PFo=r(pnt,"TransfoXLModel"),pnt.forEach(t),BFo=r(sye," (Transformer-XL model)"),sye.forEach(t),IFo=i($),V_=n($,"LI",{});var lye=s(V_);Pie=n(lye,"STRONG",{});var _nt=s(Pie);NFo=r(_nt,"unispeech"),_nt.forEach(t),qFo=r(lye," \u2014 "),xq=n(lye,"A",{href:!0});var unt=s(xq);jFo=r(unt,"UniSpeechModel"),unt.forEach(t),DFo=r(lye," (UniSpeech model)"),lye.forEach(t),GFo=i($),X_=n($,"LI",{});var iye=s(X_);Bie=n(iye,"STRONG",{});var bnt=s(Bie);OFo=r(bnt,"unispeech-sat"),bnt.forEach(t),VFo=r(iye," \u2014 "),$q=n(iye,"A",{href:!0});var vnt=s($q);XFo=r(vnt,"UniSpeechSatModel"),vnt.forEach(t),zFo=r(iye," (UniSpeechSat model)"),iye.forEach(t),WFo=i($),z_=n($,"LI",{});var dye=s(z_);Iie=n(dye,"STRONG",{});var Fnt=s(Iie);QFo=r(Fnt,"van"),Fnt.forEach(t),HFo=r(dye," \u2014 "),kq=n(dye,"A",{href:!0});var Tnt=s(kq);UFo=r(Tnt,"VanModel"),Tnt.forEach(t),JFo=r(dye," (VAN model)"),dye.forEach(t),YFo=i($),W_=n($,"LI",{});var cye=s(W_);Nie=n(cye,"STRONG",{});var Mnt=s(Nie);KFo=r(Mnt,"vilt"),Mnt.forEach(t),ZFo=r(cye," \u2014 "),Sq=n(cye,"A",{href:!0});var Ent=s(Sq);eTo=r(Ent,"ViltModel"),Ent.forEach(t),oTo=r(cye," (ViLT model)"),cye.forEach(t),rTo=i($),Q_=n($,"LI",{});var fye=s(Q_);qie=n(fye,"STRONG",{});var Cnt=s(qie);tTo=r(Cnt,"vision-text-dual-encoder"),Cnt.forEach(t),aTo=r(fye," \u2014 "),Rq=n(fye,"A",{href:!0});var wnt=s(Rq);nTo=r(wnt,"VisionTextDualEncoderModel"),wnt.forEach(t),sTo=r(fye," (VisionTextDualEncoder model)"),fye.forEach(t),lTo=i($),H_=n($,"LI",{});var mye=s(H_);jie=n(mye,"STRONG",{});var Ant=s(jie);iTo=r(Ant,"visual_bert"),Ant.forEach(t),dTo=r(mye," \u2014 "),Pq=n(mye,"A",{href:!0});var Lnt=s(Pq);cTo=r(Lnt,"VisualBertModel"),Lnt.forEach(t),fTo=r(mye," (VisualBERT model)"),mye.forEach(t),mTo=i($),U_=n($,"LI",{});var gye=s(U_);Die=n(gye,"STRONG",{});var ynt=s(Die);gTo=r(ynt,"vit"),ynt.forEach(t),hTo=r(gye," \u2014 "),Bq=n(gye,"A",{href:!0});var xnt=s(Bq);pTo=r(xnt,"ViTModel"),xnt.forEach(t),_To=r(gye," (ViT model)"),gye.forEach(t),uTo=i($),J_=n($,"LI",{});var hye=s(J_);Gie=n(hye,"STRONG",{});var $nt=s(Gie);bTo=r($nt,"vit_mae"),$nt.forEach(t),vTo=r(hye," \u2014 "),Iq=n(hye,"A",{href:!0});var knt=s(Iq);FTo=r(knt,"ViTMAEModel"),knt.forEach(t),TTo=r(hye," (ViTMAE model)"),hye.forEach(t),MTo=i($),Y_=n($,"LI",{});var pye=s(Y_);Oie=n(pye,"STRONG",{});var Snt=s(Oie);ETo=r(Snt,"wav2vec2"),Snt.forEach(t),CTo=r(pye," \u2014 "),Nq=n(pye,"A",{href:!0});var Rnt=s(Nq);wTo=r(Rnt,"Wav2Vec2Model"),Rnt.forEach(t),ATo=r(pye," (Wav2Vec2 model)"),pye.forEach(t),LTo=i($),K_=n($,"LI",{});var _ye=s(K_);Vie=n(_ye,"STRONG",{});var Pnt=s(Vie);yTo=r(Pnt,"wav2vec2-conformer"),Pnt.forEach(t),xTo=r(_ye," \u2014 "),qq=n(_ye,"A",{href:!0});var Bnt=s(qq);$To=r(Bnt,"Wav2Vec2ConformerModel"),Bnt.forEach(t),kTo=r(_ye," (Wav2Vec2-Conformer model)"),_ye.forEach(t),STo=i($),Z_=n($,"LI",{});var uye=s(Z_);Xie=n(uye,"STRONG",{});var Int=s(Xie);RTo=r(Int,"wavlm"),Int.forEach(t),PTo=r(uye," \u2014 "),jq=n(uye,"A",{href:!0});var Nnt=s(jq);BTo=r(Nnt,"WavLMModel"),Nnt.forEach(t),ITo=r(uye," (WavLM model)"),uye.forEach(t),NTo=i($),eu=n($,"LI",{});var bye=s(eu);zie=n(bye,"STRONG",{});var qnt=s(zie);qTo=r(qnt,"xglm"),qnt.forEach(t),jTo=r(bye," \u2014 "),Dq=n(bye,"A",{href:!0});var jnt=s(Dq);DTo=r(jnt,"XGLMModel"),jnt.forEach(t),GTo=r(bye," (XGLM model)"),bye.forEach(t),OTo=i($),ou=n($,"LI",{});var vye=s(ou);Wie=n(vye,"STRONG",{});var Dnt=s(Wie);VTo=r(Dnt,"xlm"),Dnt.forEach(t),XTo=r(vye," \u2014 "),Gq=n(vye,"A",{href:!0});var Gnt=s(Gq);zTo=r(Gnt,"XLMModel"),Gnt.forEach(t),WTo=r(vye," (XLM model)"),vye.forEach(t),QTo=i($),ru=n($,"LI",{});var Fye=s(ru);Qie=n(Fye,"STRONG",{});var Ont=s(Qie);HTo=r(Ont,"xlm-prophetnet"),Ont.forEach(t),UTo=r(Fye," \u2014 "),Oq=n(Fye,"A",{href:!0});var Vnt=s(Oq);JTo=r(Vnt,"XLMProphetNetModel"),Vnt.forEach(t),YTo=r(Fye," (XLM-ProphetNet model)"),Fye.forEach(t),KTo=i($),tu=n($,"LI",{});var Tye=s(tu);Hie=n(Tye,"STRONG",{});var Xnt=s(Hie);ZTo=r(Xnt,"xlm-roberta"),Xnt.forEach(t),eMo=r(Tye," \u2014 "),Vq=n(Tye,"A",{href:!0});var znt=s(Vq);oMo=r(znt,"XLMRobertaModel"),znt.forEach(t),rMo=r(Tye," (XLM-RoBERTa model)"),Tye.forEach(t),tMo=i($),au=n($,"LI",{});var Mye=s(au);Uie=n(Mye,"STRONG",{});var Wnt=s(Uie);aMo=r(Wnt,"xlm-roberta-xl"),Wnt.forEach(t),nMo=r(Mye," \u2014 "),Xq=n(Mye,"A",{href:!0});var Qnt=s(Xq);sMo=r(Qnt,"XLMRobertaXLModel"),Qnt.forEach(t),lMo=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),iMo=i($),nu=n($,"LI",{});var Eye=s(nu);Jie=n(Eye,"STRONG",{});var Hnt=s(Jie);dMo=r(Hnt,"xlnet"),Hnt.forEach(t),cMo=r(Eye," \u2014 "),zq=n(Eye,"A",{href:!0});var Unt=s(zq);fMo=r(Unt,"XLNetModel"),Unt.forEach(t),mMo=r(Eye," (XLNet model)"),Eye.forEach(t),gMo=i($),su=n($,"LI",{});var Cye=s(su);Yie=n(Cye,"STRONG",{});var Jnt=s(Yie);hMo=r(Jnt,"yolos"),Jnt.forEach(t),pMo=r(Cye," \u2014 "),Wq=n(Cye,"A",{href:!0});var Ynt=s(Wq);_Mo=r(Ynt,"YolosModel"),Ynt.forEach(t),uMo=r(Cye," (YOLOS model)"),Cye.forEach(t),bMo=i($),lu=n($,"LI",{});var wye=s(lu);Kie=n(wye,"STRONG",{});var Knt=s(Kie);vMo=r(Knt,"yoso"),Knt.forEach(t),FMo=r(wye," \u2014 "),Qq=n(wye,"A",{href:!0});var Znt=s(Qq);TMo=r(Znt,"YosoModel"),Znt.forEach(t),MMo=r(wye," (YOSO model)"),wye.forEach(t),$.forEach(t),EMo=i(oa),iu=n(oa,"P",{});var Aye=s(iu);CMo=r(Aye,"The model is set in evaluation mode by default using "),Zie=n(Aye,"CODE",{});var est=s(Zie);wMo=r(est,"model.eval()"),est.forEach(t),AMo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=n(Aye,"CODE",{});var ost=s(ede);LMo=r(ost,"model.train()"),ost.forEach(t),Aye.forEach(t),yMo=i(oa),T(du.$$.fragment,oa),oa.forEach(t),Os.forEach(t),_je=i(f),xi=n(f,"H2",{class:!0});var FGe=s(xi);cu=n(FGe,"A",{id:!0,class:!0,href:!0});var rst=s(cu);ode=n(rst,"SPAN",{});var tst=s(ode);T(bL.$$.fragment,tst),tst.forEach(t),rst.forEach(t),xMo=i(FGe),rde=n(FGe,"SPAN",{});var ast=s(rde);$Mo=r(ast,"AutoModelForPreTraining"),ast.forEach(t),FGe.forEach(t),uje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(vL.$$.fragment,Vs),kMo=i(Vs),$i=n(Vs,"P",{});var QZ=s($i);SMo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Hq=n(QZ,"A",{href:!0});var nst=s(Hq);RMo=r(nst,"from_pretrained()"),nst.forEach(t),PMo=r(QZ," class method or the "),Uq=n(QZ,"A",{href:!0});var sst=s(Uq);BMo=r(sst,"from_config()"),sst.forEach(t),IMo=r(QZ,` class
method.`),QZ.forEach(t),NMo=i(Vs),FL=n(Vs,"P",{});var TGe=s(FL);qMo=r(TGe,"This class cannot be instantiated directly using "),tde=n(TGe,"CODE",{});var lst=s(tde);jMo=r(lst,"__init__()"),lst.forEach(t),DMo=r(TGe," (throws an error)."),TGe.forEach(t),GMo=i(Vs),at=n(Vs,"DIV",{class:!0});var Qw=s(at);T(TL.$$.fragment,Qw),OMo=i(Qw),ade=n(Qw,"P",{});var ist=s(ade);VMo=r(ist,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ist.forEach(t),XMo=i(Qw),ki=n(Qw,"P",{});var HZ=s(ki);zMo=r(HZ,`Note:
Loading a model from its configuration file does `),nde=n(HZ,"STRONG",{});var dst=s(nde);WMo=r(dst,"not"),dst.forEach(t),QMo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=n(HZ,"A",{href:!0});var cst=s(Jq);HMo=r(cst,"from_pretrained()"),cst.forEach(t),UMo=r(HZ," to load the model weights."),HZ.forEach(t),JMo=i(Qw),T(fu.$$.fragment,Qw),Qw.forEach(t),YMo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(ML.$$.fragment,ra),KMo=i(ra),sde=n(ra,"P",{});var fst=s(sde);ZMo=r(fst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fst.forEach(t),eEo=i(ra),xa=n(ra,"P",{});var Hw=s(xa);oEo=r(Hw,"The model class to instantiate is selected based on the "),lde=n(Hw,"CODE",{});var mst=s(lde);rEo=r(mst,"model_type"),mst.forEach(t),tEo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),ide=n(Hw,"CODE",{});var gst=s(ide);aEo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),nEo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=n(Hw,"CODE",{});var hst=s(dde);sEo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),lEo=r(Hw,":"),Hw.forEach(t),iEo=i(ra),G=n(ra,"UL",{});var O=s(G);mu=n(O,"LI",{});var Lye=s(mu);cde=n(Lye,"STRONG",{});var pst=s(cde);dEo=r(pst,"albert"),pst.forEach(t),cEo=r(Lye," \u2014 "),Yq=n(Lye,"A",{href:!0});var _st=s(Yq);fEo=r(_st,"AlbertForPreTraining"),_st.forEach(t),mEo=r(Lye," (ALBERT model)"),Lye.forEach(t),gEo=i(O),gu=n(O,"LI",{});var yye=s(gu);fde=n(yye,"STRONG",{});var ust=s(fde);hEo=r(ust,"bart"),ust.forEach(t),pEo=r(yye," \u2014 "),Kq=n(yye,"A",{href:!0});var bst=s(Kq);_Eo=r(bst,"BartForConditionalGeneration"),bst.forEach(t),uEo=r(yye," (BART model)"),yye.forEach(t),bEo=i(O),hu=n(O,"LI",{});var xye=s(hu);mde=n(xye,"STRONG",{});var vst=s(mde);vEo=r(vst,"bert"),vst.forEach(t),FEo=r(xye," \u2014 "),Zq=n(xye,"A",{href:!0});var Fst=s(Zq);TEo=r(Fst,"BertForPreTraining"),Fst.forEach(t),MEo=r(xye," (BERT model)"),xye.forEach(t),EEo=i(O),pu=n(O,"LI",{});var $ye=s(pu);gde=n($ye,"STRONG",{});var Tst=s(gde);CEo=r(Tst,"big_bird"),Tst.forEach(t),wEo=r($ye," \u2014 "),ej=n($ye,"A",{href:!0});var Mst=s(ej);AEo=r(Mst,"BigBirdForPreTraining"),Mst.forEach(t),LEo=r($ye," (BigBird model)"),$ye.forEach(t),yEo=i(O),_u=n(O,"LI",{});var kye=s(_u);hde=n(kye,"STRONG",{});var Est=s(hde);xEo=r(Est,"bloom"),Est.forEach(t),$Eo=r(kye," \u2014 "),oj=n(kye,"A",{href:!0});var Cst=s(oj);kEo=r(Cst,"BloomForCausalLM"),Cst.forEach(t),SEo=r(kye," (BLOOM model)"),kye.forEach(t),REo=i(O),uu=n(O,"LI",{});var Sye=s(uu);pde=n(Sye,"STRONG",{});var wst=s(pde);PEo=r(wst,"camembert"),wst.forEach(t),BEo=r(Sye," \u2014 "),rj=n(Sye,"A",{href:!0});var Ast=s(rj);IEo=r(Ast,"CamembertForMaskedLM"),Ast.forEach(t),NEo=r(Sye," (CamemBERT model)"),Sye.forEach(t),qEo=i(O),bu=n(O,"LI",{});var Rye=s(bu);_de=n(Rye,"STRONG",{});var Lst=s(_de);jEo=r(Lst,"ctrl"),Lst.forEach(t),DEo=r(Rye," \u2014 "),tj=n(Rye,"A",{href:!0});var yst=s(tj);GEo=r(yst,"CTRLLMHeadModel"),yst.forEach(t),OEo=r(Rye," (CTRL model)"),Rye.forEach(t),VEo=i(O),vu=n(O,"LI",{});var Pye=s(vu);ude=n(Pye,"STRONG",{});var xst=s(ude);XEo=r(xst,"data2vec-text"),xst.forEach(t),zEo=r(Pye," \u2014 "),aj=n(Pye,"A",{href:!0});var $st=s(aj);WEo=r($st,"Data2VecTextForMaskedLM"),$st.forEach(t),QEo=r(Pye," (Data2VecText model)"),Pye.forEach(t),HEo=i(O),Fu=n(O,"LI",{});var Bye=s(Fu);bde=n(Bye,"STRONG",{});var kst=s(bde);UEo=r(kst,"deberta"),kst.forEach(t),JEo=r(Bye," \u2014 "),nj=n(Bye,"A",{href:!0});var Sst=s(nj);YEo=r(Sst,"DebertaForMaskedLM"),Sst.forEach(t),KEo=r(Bye," (DeBERTa model)"),Bye.forEach(t),ZEo=i(O),Tu=n(O,"LI",{});var Iye=s(Tu);vde=n(Iye,"STRONG",{});var Rst=s(vde);eCo=r(Rst,"deberta-v2"),Rst.forEach(t),oCo=r(Iye," \u2014 "),sj=n(Iye,"A",{href:!0});var Pst=s(sj);rCo=r(Pst,"DebertaV2ForMaskedLM"),Pst.forEach(t),tCo=r(Iye," (DeBERTa-v2 model)"),Iye.forEach(t),aCo=i(O),Mu=n(O,"LI",{});var Nye=s(Mu);Fde=n(Nye,"STRONG",{});var Bst=s(Fde);nCo=r(Bst,"distilbert"),Bst.forEach(t),sCo=r(Nye," \u2014 "),lj=n(Nye,"A",{href:!0});var Ist=s(lj);lCo=r(Ist,"DistilBertForMaskedLM"),Ist.forEach(t),iCo=r(Nye," (DistilBERT model)"),Nye.forEach(t),dCo=i(O),Eu=n(O,"LI",{});var qye=s(Eu);Tde=n(qye,"STRONG",{});var Nst=s(Tde);cCo=r(Nst,"electra"),Nst.forEach(t),fCo=r(qye," \u2014 "),ij=n(qye,"A",{href:!0});var qst=s(ij);mCo=r(qst,"ElectraForPreTraining"),qst.forEach(t),gCo=r(qye," (ELECTRA model)"),qye.forEach(t),hCo=i(O),Cu=n(O,"LI",{});var jye=s(Cu);Mde=n(jye,"STRONG",{});var jst=s(Mde);pCo=r(jst,"flaubert"),jst.forEach(t),_Co=r(jye," \u2014 "),dj=n(jye,"A",{href:!0});var Dst=s(dj);uCo=r(Dst,"FlaubertWithLMHeadModel"),Dst.forEach(t),bCo=r(jye," (FlauBERT model)"),jye.forEach(t),vCo=i(O),wu=n(O,"LI",{});var Dye=s(wu);Ede=n(Dye,"STRONG",{});var Gst=s(Ede);FCo=r(Gst,"flava"),Gst.forEach(t),TCo=r(Dye," \u2014 "),cj=n(Dye,"A",{href:!0});var Ost=s(cj);MCo=r(Ost,"FlavaForPreTraining"),Ost.forEach(t),ECo=r(Dye," (FLAVA model)"),Dye.forEach(t),CCo=i(O),Au=n(O,"LI",{});var Gye=s(Au);Cde=n(Gye,"STRONG",{});var Vst=s(Cde);wCo=r(Vst,"fnet"),Vst.forEach(t),ACo=r(Gye," \u2014 "),fj=n(Gye,"A",{href:!0});var Xst=s(fj);LCo=r(Xst,"FNetForPreTraining"),Xst.forEach(t),yCo=r(Gye," (FNet model)"),Gye.forEach(t),xCo=i(O),Lu=n(O,"LI",{});var Oye=s(Lu);wde=n(Oye,"STRONG",{});var zst=s(wde);$Co=r(zst,"fsmt"),zst.forEach(t),kCo=r(Oye," \u2014 "),mj=n(Oye,"A",{href:!0});var Wst=s(mj);SCo=r(Wst,"FSMTForConditionalGeneration"),Wst.forEach(t),RCo=r(Oye," (FairSeq Machine-Translation model)"),Oye.forEach(t),PCo=i(O),yu=n(O,"LI",{});var Vye=s(yu);Ade=n(Vye,"STRONG",{});var Qst=s(Ade);BCo=r(Qst,"funnel"),Qst.forEach(t),ICo=r(Vye," \u2014 "),gj=n(Vye,"A",{href:!0});var Hst=s(gj);NCo=r(Hst,"FunnelForPreTraining"),Hst.forEach(t),qCo=r(Vye," (Funnel Transformer model)"),Vye.forEach(t),jCo=i(O),xu=n(O,"LI",{});var Xye=s(xu);Lde=n(Xye,"STRONG",{});var Ust=s(Lde);DCo=r(Ust,"gpt2"),Ust.forEach(t),GCo=r(Xye," \u2014 "),hj=n(Xye,"A",{href:!0});var Jst=s(hj);OCo=r(Jst,"GPT2LMHeadModel"),Jst.forEach(t),VCo=r(Xye," (OpenAI GPT-2 model)"),Xye.forEach(t),XCo=i(O),$u=n(O,"LI",{});var zye=s($u);yde=n(zye,"STRONG",{});var Yst=s(yde);zCo=r(Yst,"ibert"),Yst.forEach(t),WCo=r(zye," \u2014 "),pj=n(zye,"A",{href:!0});var Kst=s(pj);QCo=r(Kst,"IBertForMaskedLM"),Kst.forEach(t),HCo=r(zye," (I-BERT model)"),zye.forEach(t),UCo=i(O),ku=n(O,"LI",{});var Wye=s(ku);xde=n(Wye,"STRONG",{});var Zst=s(xde);JCo=r(Zst,"layoutlm"),Zst.forEach(t),YCo=r(Wye," \u2014 "),_j=n(Wye,"A",{href:!0});var elt=s(_j);KCo=r(elt,"LayoutLMForMaskedLM"),elt.forEach(t),ZCo=r(Wye," (LayoutLM model)"),Wye.forEach(t),e5o=i(O),Su=n(O,"LI",{});var Qye=s(Su);$de=n(Qye,"STRONG",{});var olt=s($de);o5o=r(olt,"longformer"),olt.forEach(t),r5o=r(Qye," \u2014 "),uj=n(Qye,"A",{href:!0});var rlt=s(uj);t5o=r(rlt,"LongformerForMaskedLM"),rlt.forEach(t),a5o=r(Qye," (Longformer model)"),Qye.forEach(t),n5o=i(O),Ru=n(O,"LI",{});var Hye=s(Ru);kde=n(Hye,"STRONG",{});var tlt=s(kde);s5o=r(tlt,"lxmert"),tlt.forEach(t),l5o=r(Hye," \u2014 "),bj=n(Hye,"A",{href:!0});var alt=s(bj);i5o=r(alt,"LxmertForPreTraining"),alt.forEach(t),d5o=r(Hye," (LXMERT model)"),Hye.forEach(t),c5o=i(O),Pu=n(O,"LI",{});var Uye=s(Pu);Sde=n(Uye,"STRONG",{});var nlt=s(Sde);f5o=r(nlt,"megatron-bert"),nlt.forEach(t),m5o=r(Uye," \u2014 "),vj=n(Uye,"A",{href:!0});var slt=s(vj);g5o=r(slt,"MegatronBertForPreTraining"),slt.forEach(t),h5o=r(Uye," (Megatron-BERT model)"),Uye.forEach(t),p5o=i(O),Bu=n(O,"LI",{});var Jye=s(Bu);Rde=n(Jye,"STRONG",{});var llt=s(Rde);_5o=r(llt,"mobilebert"),llt.forEach(t),u5o=r(Jye," \u2014 "),Fj=n(Jye,"A",{href:!0});var ilt=s(Fj);b5o=r(ilt,"MobileBertForPreTraining"),ilt.forEach(t),v5o=r(Jye," (MobileBERT model)"),Jye.forEach(t),F5o=i(O),Iu=n(O,"LI",{});var Yye=s(Iu);Pde=n(Yye,"STRONG",{});var dlt=s(Pde);T5o=r(dlt,"mpnet"),dlt.forEach(t),M5o=r(Yye," \u2014 "),Tj=n(Yye,"A",{href:!0});var clt=s(Tj);E5o=r(clt,"MPNetForMaskedLM"),clt.forEach(t),C5o=r(Yye," (MPNet model)"),Yye.forEach(t),w5o=i(O),Nu=n(O,"LI",{});var Kye=s(Nu);Bde=n(Kye,"STRONG",{});var flt=s(Bde);A5o=r(flt,"openai-gpt"),flt.forEach(t),L5o=r(Kye," \u2014 "),Mj=n(Kye,"A",{href:!0});var mlt=s(Mj);y5o=r(mlt,"OpenAIGPTLMHeadModel"),mlt.forEach(t),x5o=r(Kye," (OpenAI GPT model)"),Kye.forEach(t),$5o=i(O),qu=n(O,"LI",{});var Zye=s(qu);Ide=n(Zye,"STRONG",{});var glt=s(Ide);k5o=r(glt,"retribert"),glt.forEach(t),S5o=r(Zye," \u2014 "),Ej=n(Zye,"A",{href:!0});var hlt=s(Ej);R5o=r(hlt,"RetriBertModel"),hlt.forEach(t),P5o=r(Zye," (RetriBERT model)"),Zye.forEach(t),B5o=i(O),ju=n(O,"LI",{});var e8e=s(ju);Nde=n(e8e,"STRONG",{});var plt=s(Nde);I5o=r(plt,"roberta"),plt.forEach(t),N5o=r(e8e," \u2014 "),Cj=n(e8e,"A",{href:!0});var _lt=s(Cj);q5o=r(_lt,"RobertaForMaskedLM"),_lt.forEach(t),j5o=r(e8e," (RoBERTa model)"),e8e.forEach(t),D5o=i(O),Du=n(O,"LI",{});var o8e=s(Du);qde=n(o8e,"STRONG",{});var ult=s(qde);G5o=r(ult,"splinter"),ult.forEach(t),O5o=r(o8e," \u2014 "),wj=n(o8e,"A",{href:!0});var blt=s(wj);V5o=r(blt,"SplinterForPreTraining"),blt.forEach(t),X5o=r(o8e," (Splinter model)"),o8e.forEach(t),z5o=i(O),Gu=n(O,"LI",{});var r8e=s(Gu);jde=n(r8e,"STRONG",{});var vlt=s(jde);W5o=r(vlt,"squeezebert"),vlt.forEach(t),Q5o=r(r8e," \u2014 "),Aj=n(r8e,"A",{href:!0});var Flt=s(Aj);H5o=r(Flt,"SqueezeBertForMaskedLM"),Flt.forEach(t),U5o=r(r8e," (SqueezeBERT model)"),r8e.forEach(t),J5o=i(O),Ou=n(O,"LI",{});var t8e=s(Ou);Dde=n(t8e,"STRONG",{});var Tlt=s(Dde);Y5o=r(Tlt,"t5"),Tlt.forEach(t),K5o=r(t8e," \u2014 "),Lj=n(t8e,"A",{href:!0});var Mlt=s(Lj);Z5o=r(Mlt,"T5ForConditionalGeneration"),Mlt.forEach(t),e3o=r(t8e," (T5 model)"),t8e.forEach(t),o3o=i(O),Vu=n(O,"LI",{});var a8e=s(Vu);Gde=n(a8e,"STRONG",{});var Elt=s(Gde);r3o=r(Elt,"tapas"),Elt.forEach(t),t3o=r(a8e," \u2014 "),yj=n(a8e,"A",{href:!0});var Clt=s(yj);a3o=r(Clt,"TapasForMaskedLM"),Clt.forEach(t),n3o=r(a8e," (TAPAS model)"),a8e.forEach(t),s3o=i(O),Xu=n(O,"LI",{});var n8e=s(Xu);Ode=n(n8e,"STRONG",{});var wlt=s(Ode);l3o=r(wlt,"transfo-xl"),wlt.forEach(t),i3o=r(n8e," \u2014 "),xj=n(n8e,"A",{href:!0});var Alt=s(xj);d3o=r(Alt,"TransfoXLLMHeadModel"),Alt.forEach(t),c3o=r(n8e," (Transformer-XL model)"),n8e.forEach(t),f3o=i(O),zu=n(O,"LI",{});var s8e=s(zu);Vde=n(s8e,"STRONG",{});var Llt=s(Vde);m3o=r(Llt,"unispeech"),Llt.forEach(t),g3o=r(s8e," \u2014 "),$j=n(s8e,"A",{href:!0});var ylt=s($j);h3o=r(ylt,"UniSpeechForPreTraining"),ylt.forEach(t),p3o=r(s8e," (UniSpeech model)"),s8e.forEach(t),_3o=i(O),Wu=n(O,"LI",{});var l8e=s(Wu);Xde=n(l8e,"STRONG",{});var xlt=s(Xde);u3o=r(xlt,"unispeech-sat"),xlt.forEach(t),b3o=r(l8e," \u2014 "),kj=n(l8e,"A",{href:!0});var $lt=s(kj);v3o=r($lt,"UniSpeechSatForPreTraining"),$lt.forEach(t),F3o=r(l8e," (UniSpeechSat model)"),l8e.forEach(t),T3o=i(O),Qu=n(O,"LI",{});var i8e=s(Qu);zde=n(i8e,"STRONG",{});var klt=s(zde);M3o=r(klt,"visual_bert"),klt.forEach(t),E3o=r(i8e," \u2014 "),Sj=n(i8e,"A",{href:!0});var Slt=s(Sj);C3o=r(Slt,"VisualBertForPreTraining"),Slt.forEach(t),w3o=r(i8e," (VisualBERT model)"),i8e.forEach(t),A3o=i(O),Hu=n(O,"LI",{});var d8e=s(Hu);Wde=n(d8e,"STRONG",{});var Rlt=s(Wde);L3o=r(Rlt,"vit_mae"),Rlt.forEach(t),y3o=r(d8e," \u2014 "),Rj=n(d8e,"A",{href:!0});var Plt=s(Rj);x3o=r(Plt,"ViTMAEForPreTraining"),Plt.forEach(t),$3o=r(d8e," (ViTMAE model)"),d8e.forEach(t),k3o=i(O),Uu=n(O,"LI",{});var c8e=s(Uu);Qde=n(c8e,"STRONG",{});var Blt=s(Qde);S3o=r(Blt,"wav2vec2"),Blt.forEach(t),R3o=r(c8e," \u2014 "),Pj=n(c8e,"A",{href:!0});var Ilt=s(Pj);P3o=r(Ilt,"Wav2Vec2ForPreTraining"),Ilt.forEach(t),B3o=r(c8e," (Wav2Vec2 model)"),c8e.forEach(t),I3o=i(O),Ju=n(O,"LI",{});var f8e=s(Ju);Hde=n(f8e,"STRONG",{});var Nlt=s(Hde);N3o=r(Nlt,"wav2vec2-conformer"),Nlt.forEach(t),q3o=r(f8e," \u2014 "),Bj=n(f8e,"A",{href:!0});var qlt=s(Bj);j3o=r(qlt,"Wav2Vec2ConformerForPreTraining"),qlt.forEach(t),D3o=r(f8e," (Wav2Vec2-Conformer model)"),f8e.forEach(t),G3o=i(O),Yu=n(O,"LI",{});var m8e=s(Yu);Ude=n(m8e,"STRONG",{});var jlt=s(Ude);O3o=r(jlt,"xlm"),jlt.forEach(t),V3o=r(m8e," \u2014 "),Ij=n(m8e,"A",{href:!0});var Dlt=s(Ij);X3o=r(Dlt,"XLMWithLMHeadModel"),Dlt.forEach(t),z3o=r(m8e," (XLM model)"),m8e.forEach(t),W3o=i(O),Ku=n(O,"LI",{});var g8e=s(Ku);Jde=n(g8e,"STRONG",{});var Glt=s(Jde);Q3o=r(Glt,"xlm-roberta"),Glt.forEach(t),H3o=r(g8e," \u2014 "),Nj=n(g8e,"A",{href:!0});var Olt=s(Nj);U3o=r(Olt,"XLMRobertaForMaskedLM"),Olt.forEach(t),J3o=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),Y3o=i(O),Zu=n(O,"LI",{});var h8e=s(Zu);Yde=n(h8e,"STRONG",{});var Vlt=s(Yde);K3o=r(Vlt,"xlm-roberta-xl"),Vlt.forEach(t),Z3o=r(h8e," \u2014 "),qj=n(h8e,"A",{href:!0});var Xlt=s(qj);e0o=r(Xlt,"XLMRobertaXLForMaskedLM"),Xlt.forEach(t),o0o=r(h8e," (XLM-RoBERTa-XL model)"),h8e.forEach(t),r0o=i(O),e4=n(O,"LI",{});var p8e=s(e4);Kde=n(p8e,"STRONG",{});var zlt=s(Kde);t0o=r(zlt,"xlnet"),zlt.forEach(t),a0o=r(p8e," \u2014 "),jj=n(p8e,"A",{href:!0});var Wlt=s(jj);n0o=r(Wlt,"XLNetLMHeadModel"),Wlt.forEach(t),s0o=r(p8e," (XLNet model)"),p8e.forEach(t),O.forEach(t),l0o=i(ra),o4=n(ra,"P",{});var _8e=s(o4);i0o=r(_8e,"The model is set in evaluation mode by default using "),Zde=n(_8e,"CODE",{});var Qlt=s(Zde);d0o=r(Qlt,"model.eval()"),Qlt.forEach(t),c0o=r(_8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(_8e,"CODE",{});var Hlt=s(ece);f0o=r(Hlt,"model.train()"),Hlt.forEach(t),_8e.forEach(t),m0o=i(ra),T(r4.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),bje=i(f),Si=n(f,"H2",{class:!0});var MGe=s(Si);t4=n(MGe,"A",{id:!0,class:!0,href:!0});var Ult=s(t4);oce=n(Ult,"SPAN",{});var Jlt=s(oce);T(EL.$$.fragment,Jlt),Jlt.forEach(t),Ult.forEach(t),g0o=i(MGe),rce=n(MGe,"SPAN",{});var Ylt=s(rce);h0o=r(Ylt,"AutoModelForCausalLM"),Ylt.forEach(t),MGe.forEach(t),vje=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(CL.$$.fragment,Xs),p0o=i(Xs),Ri=n(Xs,"P",{});var UZ=s(Ri);_0o=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dj=n(UZ,"A",{href:!0});var Klt=s(Dj);u0o=r(Klt,"from_pretrained()"),Klt.forEach(t),b0o=r(UZ," class method or the "),Gj=n(UZ,"A",{href:!0});var Zlt=s(Gj);v0o=r(Zlt,"from_config()"),Zlt.forEach(t),F0o=r(UZ,` class
method.`),UZ.forEach(t),T0o=i(Xs),wL=n(Xs,"P",{});var EGe=s(wL);M0o=r(EGe,"This class cannot be instantiated directly using "),tce=n(EGe,"CODE",{});var eit=s(tce);E0o=r(eit,"__init__()"),eit.forEach(t),C0o=r(EGe," (throws an error)."),EGe.forEach(t),w0o=i(Xs),nt=n(Xs,"DIV",{class:!0});var Uw=s(nt);T(AL.$$.fragment,Uw),A0o=i(Uw),ace=n(Uw,"P",{});var oit=s(ace);L0o=r(oit,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oit.forEach(t),y0o=i(Uw),Pi=n(Uw,"P",{});var JZ=s(Pi);x0o=r(JZ,`Note:
Loading a model from its configuration file does `),nce=n(JZ,"STRONG",{});var rit=s(nce);$0o=r(rit,"not"),rit.forEach(t),k0o=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=n(JZ,"A",{href:!0});var tit=s(Oj);S0o=r(tit,"from_pretrained()"),tit.forEach(t),R0o=r(JZ," to load the model weights."),JZ.forEach(t),P0o=i(Uw),T(a4.$$.fragment,Uw),Uw.forEach(t),B0o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(LL.$$.fragment,ta),I0o=i(ta),sce=n(ta,"P",{});var ait=s(sce);N0o=r(ait,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ait.forEach(t),q0o=i(ta),$a=n(ta,"P",{});var Jw=s($a);j0o=r(Jw,"The model class to instantiate is selected based on the "),lce=n(Jw,"CODE",{});var nit=s(lce);D0o=r(nit,"model_type"),nit.forEach(t),G0o=r(Jw,` property of the config object (either
passed as an argument or loaded from `),ice=n(Jw,"CODE",{});var sit=s(ice);O0o=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),V0o=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(Jw,"CODE",{});var lit=s(dce);X0o=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),z0o=r(Jw,":"),Jw.forEach(t),W0o=i(ta),z=n(ta,"UL",{});var W=s(z);n4=n(W,"LI",{});var u8e=s(n4);cce=n(u8e,"STRONG",{});var iit=s(cce);Q0o=r(iit,"bart"),iit.forEach(t),H0o=r(u8e," \u2014 "),Vj=n(u8e,"A",{href:!0});var dit=s(Vj);U0o=r(dit,"BartForCausalLM"),dit.forEach(t),J0o=r(u8e," (BART model)"),u8e.forEach(t),Y0o=i(W),s4=n(W,"LI",{});var b8e=s(s4);fce=n(b8e,"STRONG",{});var cit=s(fce);K0o=r(cit,"bert"),cit.forEach(t),Z0o=r(b8e," \u2014 "),Xj=n(b8e,"A",{href:!0});var fit=s(Xj);ewo=r(fit,"BertLMHeadModel"),fit.forEach(t),owo=r(b8e," (BERT model)"),b8e.forEach(t),rwo=i(W),l4=n(W,"LI",{});var v8e=s(l4);mce=n(v8e,"STRONG",{});var mit=s(mce);two=r(mit,"bert-generation"),mit.forEach(t),awo=r(v8e," \u2014 "),zj=n(v8e,"A",{href:!0});var git=s(zj);nwo=r(git,"BertGenerationDecoder"),git.forEach(t),swo=r(v8e," (Bert Generation model)"),v8e.forEach(t),lwo=i(W),i4=n(W,"LI",{});var F8e=s(i4);gce=n(F8e,"STRONG",{});var hit=s(gce);iwo=r(hit,"big_bird"),hit.forEach(t),dwo=r(F8e," \u2014 "),Wj=n(F8e,"A",{href:!0});var pit=s(Wj);cwo=r(pit,"BigBirdForCausalLM"),pit.forEach(t),fwo=r(F8e," (BigBird model)"),F8e.forEach(t),mwo=i(W),d4=n(W,"LI",{});var T8e=s(d4);hce=n(T8e,"STRONG",{});var _it=s(hce);gwo=r(_it,"bigbird_pegasus"),_it.forEach(t),hwo=r(T8e," \u2014 "),Qj=n(T8e,"A",{href:!0});var uit=s(Qj);pwo=r(uit,"BigBirdPegasusForCausalLM"),uit.forEach(t),_wo=r(T8e," (BigBird-Pegasus model)"),T8e.forEach(t),uwo=i(W),c4=n(W,"LI",{});var M8e=s(c4);pce=n(M8e,"STRONG",{});var bit=s(pce);bwo=r(bit,"blenderbot"),bit.forEach(t),vwo=r(M8e," \u2014 "),Hj=n(M8e,"A",{href:!0});var vit=s(Hj);Fwo=r(vit,"BlenderbotForCausalLM"),vit.forEach(t),Two=r(M8e," (Blenderbot model)"),M8e.forEach(t),Mwo=i(W),f4=n(W,"LI",{});var E8e=s(f4);_ce=n(E8e,"STRONG",{});var Fit=s(_ce);Ewo=r(Fit,"blenderbot-small"),Fit.forEach(t),Cwo=r(E8e," \u2014 "),Uj=n(E8e,"A",{href:!0});var Tit=s(Uj);wwo=r(Tit,"BlenderbotSmallForCausalLM"),Tit.forEach(t),Awo=r(E8e," (BlenderbotSmall model)"),E8e.forEach(t),Lwo=i(W),m4=n(W,"LI",{});var C8e=s(m4);uce=n(C8e,"STRONG",{});var Mit=s(uce);ywo=r(Mit,"bloom"),Mit.forEach(t),xwo=r(C8e," \u2014 "),Jj=n(C8e,"A",{href:!0});var Eit=s(Jj);$wo=r(Eit,"BloomForCausalLM"),Eit.forEach(t),kwo=r(C8e," (BLOOM model)"),C8e.forEach(t),Swo=i(W),g4=n(W,"LI",{});var w8e=s(g4);bce=n(w8e,"STRONG",{});var Cit=s(bce);Rwo=r(Cit,"camembert"),Cit.forEach(t),Pwo=r(w8e," \u2014 "),Yj=n(w8e,"A",{href:!0});var wit=s(Yj);Bwo=r(wit,"CamembertForCausalLM"),wit.forEach(t),Iwo=r(w8e," (CamemBERT model)"),w8e.forEach(t),Nwo=i(W),h4=n(W,"LI",{});var A8e=s(h4);vce=n(A8e,"STRONG",{});var Ait=s(vce);qwo=r(Ait,"ctrl"),Ait.forEach(t),jwo=r(A8e," \u2014 "),Kj=n(A8e,"A",{href:!0});var Lit=s(Kj);Dwo=r(Lit,"CTRLLMHeadModel"),Lit.forEach(t),Gwo=r(A8e," (CTRL model)"),A8e.forEach(t),Owo=i(W),p4=n(W,"LI",{});var L8e=s(p4);Fce=n(L8e,"STRONG",{});var yit=s(Fce);Vwo=r(yit,"data2vec-text"),yit.forEach(t),Xwo=r(L8e," \u2014 "),Zj=n(L8e,"A",{href:!0});var xit=s(Zj);zwo=r(xit,"Data2VecTextForCausalLM"),xit.forEach(t),Wwo=r(L8e," (Data2VecText model)"),L8e.forEach(t),Qwo=i(W),_4=n(W,"LI",{});var y8e=s(_4);Tce=n(y8e,"STRONG",{});var $it=s(Tce);Hwo=r($it,"electra"),$it.forEach(t),Uwo=r(y8e," \u2014 "),eD=n(y8e,"A",{href:!0});var kit=s(eD);Jwo=r(kit,"ElectraForCausalLM"),kit.forEach(t),Ywo=r(y8e," (ELECTRA model)"),y8e.forEach(t),Kwo=i(W),u4=n(W,"LI",{});var x8e=s(u4);Mce=n(x8e,"STRONG",{});var Sit=s(Mce);Zwo=r(Sit,"gpt2"),Sit.forEach(t),eAo=r(x8e," \u2014 "),oD=n(x8e,"A",{href:!0});var Rit=s(oD);oAo=r(Rit,"GPT2LMHeadModel"),Rit.forEach(t),rAo=r(x8e," (OpenAI GPT-2 model)"),x8e.forEach(t),tAo=i(W),b4=n(W,"LI",{});var $8e=s(b4);Ece=n($8e,"STRONG",{});var Pit=s(Ece);aAo=r(Pit,"gpt_neo"),Pit.forEach(t),nAo=r($8e," \u2014 "),rD=n($8e,"A",{href:!0});var Bit=s(rD);sAo=r(Bit,"GPTNeoForCausalLM"),Bit.forEach(t),lAo=r($8e," (GPT Neo model)"),$8e.forEach(t),iAo=i(W),v4=n(W,"LI",{});var k8e=s(v4);Cce=n(k8e,"STRONG",{});var Iit=s(Cce);dAo=r(Iit,"gpt_neox"),Iit.forEach(t),cAo=r(k8e," \u2014 "),tD=n(k8e,"A",{href:!0});var Nit=s(tD);fAo=r(Nit,"GPTNeoXForCausalLM"),Nit.forEach(t),mAo=r(k8e," (GPT NeoX model)"),k8e.forEach(t),gAo=i(W),F4=n(W,"LI",{});var S8e=s(F4);wce=n(S8e,"STRONG",{});var qit=s(wce);hAo=r(qit,"gptj"),qit.forEach(t),pAo=r(S8e," \u2014 "),aD=n(S8e,"A",{href:!0});var jit=s(aD);_Ao=r(jit,"GPTJForCausalLM"),jit.forEach(t),uAo=r(S8e," (GPT-J model)"),S8e.forEach(t),bAo=i(W),T4=n(W,"LI",{});var R8e=s(T4);Ace=n(R8e,"STRONG",{});var Dit=s(Ace);vAo=r(Dit,"marian"),Dit.forEach(t),FAo=r(R8e," \u2014 "),nD=n(R8e,"A",{href:!0});var Git=s(nD);TAo=r(Git,"MarianForCausalLM"),Git.forEach(t),MAo=r(R8e," (Marian model)"),R8e.forEach(t),EAo=i(W),M4=n(W,"LI",{});var P8e=s(M4);Lce=n(P8e,"STRONG",{});var Oit=s(Lce);CAo=r(Oit,"mbart"),Oit.forEach(t),wAo=r(P8e," \u2014 "),sD=n(P8e,"A",{href:!0});var Vit=s(sD);AAo=r(Vit,"MBartForCausalLM"),Vit.forEach(t),LAo=r(P8e," (mBART model)"),P8e.forEach(t),yAo=i(W),E4=n(W,"LI",{});var B8e=s(E4);yce=n(B8e,"STRONG",{});var Xit=s(yce);xAo=r(Xit,"megatron-bert"),Xit.forEach(t),$Ao=r(B8e," \u2014 "),lD=n(B8e,"A",{href:!0});var zit=s(lD);kAo=r(zit,"MegatronBertForCausalLM"),zit.forEach(t),SAo=r(B8e," (Megatron-BERT model)"),B8e.forEach(t),RAo=i(W),C4=n(W,"LI",{});var I8e=s(C4);xce=n(I8e,"STRONG",{});var Wit=s(xce);PAo=r(Wit,"openai-gpt"),Wit.forEach(t),BAo=r(I8e," \u2014 "),iD=n(I8e,"A",{href:!0});var Qit=s(iD);IAo=r(Qit,"OpenAIGPTLMHeadModel"),Qit.forEach(t),NAo=r(I8e," (OpenAI GPT model)"),I8e.forEach(t),qAo=i(W),w4=n(W,"LI",{});var N8e=s(w4);$ce=n(N8e,"STRONG",{});var Hit=s($ce);jAo=r(Hit,"opt"),Hit.forEach(t),DAo=r(N8e," \u2014 "),dD=n(N8e,"A",{href:!0});var Uit=s(dD);GAo=r(Uit,"OPTForCausalLM"),Uit.forEach(t),OAo=r(N8e," (OPT model)"),N8e.forEach(t),VAo=i(W),A4=n(W,"LI",{});var q8e=s(A4);kce=n(q8e,"STRONG",{});var Jit=s(kce);XAo=r(Jit,"pegasus"),Jit.forEach(t),zAo=r(q8e," \u2014 "),cD=n(q8e,"A",{href:!0});var Yit=s(cD);WAo=r(Yit,"PegasusForCausalLM"),Yit.forEach(t),QAo=r(q8e," (Pegasus model)"),q8e.forEach(t),HAo=i(W),L4=n(W,"LI",{});var j8e=s(L4);Sce=n(j8e,"STRONG",{});var Kit=s(Sce);UAo=r(Kit,"plbart"),Kit.forEach(t),JAo=r(j8e," \u2014 "),fD=n(j8e,"A",{href:!0});var Zit=s(fD);YAo=r(Zit,"PLBartForCausalLM"),Zit.forEach(t),KAo=r(j8e," (PLBart model)"),j8e.forEach(t),ZAo=i(W),y4=n(W,"LI",{});var D8e=s(y4);Rce=n(D8e,"STRONG",{});var edt=s(Rce);e6o=r(edt,"prophetnet"),edt.forEach(t),o6o=r(D8e," \u2014 "),mD=n(D8e,"A",{href:!0});var odt=s(mD);r6o=r(odt,"ProphetNetForCausalLM"),odt.forEach(t),t6o=r(D8e," (ProphetNet model)"),D8e.forEach(t),a6o=i(W),x4=n(W,"LI",{});var G8e=s(x4);Pce=n(G8e,"STRONG",{});var rdt=s(Pce);n6o=r(rdt,"qdqbert"),rdt.forEach(t),s6o=r(G8e," \u2014 "),gD=n(G8e,"A",{href:!0});var tdt=s(gD);l6o=r(tdt,"QDQBertLMHeadModel"),tdt.forEach(t),i6o=r(G8e," (QDQBert model)"),G8e.forEach(t),d6o=i(W),$4=n(W,"LI",{});var O8e=s($4);Bce=n(O8e,"STRONG",{});var adt=s(Bce);c6o=r(adt,"reformer"),adt.forEach(t),f6o=r(O8e," \u2014 "),hD=n(O8e,"A",{href:!0});var ndt=s(hD);m6o=r(ndt,"ReformerModelWithLMHead"),ndt.forEach(t),g6o=r(O8e," (Reformer model)"),O8e.forEach(t),h6o=i(W),k4=n(W,"LI",{});var V8e=s(k4);Ice=n(V8e,"STRONG",{});var sdt=s(Ice);p6o=r(sdt,"rembert"),sdt.forEach(t),_6o=r(V8e," \u2014 "),pD=n(V8e,"A",{href:!0});var ldt=s(pD);u6o=r(ldt,"RemBertForCausalLM"),ldt.forEach(t),b6o=r(V8e," (RemBERT model)"),V8e.forEach(t),v6o=i(W),S4=n(W,"LI",{});var X8e=s(S4);Nce=n(X8e,"STRONG",{});var idt=s(Nce);F6o=r(idt,"roberta"),idt.forEach(t),T6o=r(X8e," \u2014 "),_D=n(X8e,"A",{href:!0});var ddt=s(_D);M6o=r(ddt,"RobertaForCausalLM"),ddt.forEach(t),E6o=r(X8e," (RoBERTa model)"),X8e.forEach(t),C6o=i(W),R4=n(W,"LI",{});var z8e=s(R4);qce=n(z8e,"STRONG",{});var cdt=s(qce);w6o=r(cdt,"roformer"),cdt.forEach(t),A6o=r(z8e," \u2014 "),uD=n(z8e,"A",{href:!0});var fdt=s(uD);L6o=r(fdt,"RoFormerForCausalLM"),fdt.forEach(t),y6o=r(z8e," (RoFormer model)"),z8e.forEach(t),x6o=i(W),P4=n(W,"LI",{});var W8e=s(P4);jce=n(W8e,"STRONG",{});var mdt=s(jce);$6o=r(mdt,"speech_to_text_2"),mdt.forEach(t),k6o=r(W8e," \u2014 "),bD=n(W8e,"A",{href:!0});var gdt=s(bD);S6o=r(gdt,"Speech2Text2ForCausalLM"),gdt.forEach(t),R6o=r(W8e," (Speech2Text2 model)"),W8e.forEach(t),P6o=i(W),B4=n(W,"LI",{});var Q8e=s(B4);Dce=n(Q8e,"STRONG",{});var hdt=s(Dce);B6o=r(hdt,"transfo-xl"),hdt.forEach(t),I6o=r(Q8e," \u2014 "),vD=n(Q8e,"A",{href:!0});var pdt=s(vD);N6o=r(pdt,"TransfoXLLMHeadModel"),pdt.forEach(t),q6o=r(Q8e," (Transformer-XL model)"),Q8e.forEach(t),j6o=i(W),I4=n(W,"LI",{});var H8e=s(I4);Gce=n(H8e,"STRONG",{});var _dt=s(Gce);D6o=r(_dt,"trocr"),_dt.forEach(t),G6o=r(H8e," \u2014 "),FD=n(H8e,"A",{href:!0});var udt=s(FD);O6o=r(udt,"TrOCRForCausalLM"),udt.forEach(t),V6o=r(H8e," (TrOCR model)"),H8e.forEach(t),X6o=i(W),N4=n(W,"LI",{});var U8e=s(N4);Oce=n(U8e,"STRONG",{});var bdt=s(Oce);z6o=r(bdt,"xglm"),bdt.forEach(t),W6o=r(U8e," \u2014 "),TD=n(U8e,"A",{href:!0});var vdt=s(TD);Q6o=r(vdt,"XGLMForCausalLM"),vdt.forEach(t),H6o=r(U8e," (XGLM model)"),U8e.forEach(t),U6o=i(W),q4=n(W,"LI",{});var J8e=s(q4);Vce=n(J8e,"STRONG",{});var Fdt=s(Vce);J6o=r(Fdt,"xlm"),Fdt.forEach(t),Y6o=r(J8e," \u2014 "),MD=n(J8e,"A",{href:!0});var Tdt=s(MD);K6o=r(Tdt,"XLMWithLMHeadModel"),Tdt.forEach(t),Z6o=r(J8e," (XLM model)"),J8e.forEach(t),eLo=i(W),j4=n(W,"LI",{});var Y8e=s(j4);Xce=n(Y8e,"STRONG",{});var Mdt=s(Xce);oLo=r(Mdt,"xlm-prophetnet"),Mdt.forEach(t),rLo=r(Y8e," \u2014 "),ED=n(Y8e,"A",{href:!0});var Edt=s(ED);tLo=r(Edt,"XLMProphetNetForCausalLM"),Edt.forEach(t),aLo=r(Y8e," (XLM-ProphetNet model)"),Y8e.forEach(t),nLo=i(W),D4=n(W,"LI",{});var K8e=s(D4);zce=n(K8e,"STRONG",{});var Cdt=s(zce);sLo=r(Cdt,"xlm-roberta"),Cdt.forEach(t),lLo=r(K8e," \u2014 "),CD=n(K8e,"A",{href:!0});var wdt=s(CD);iLo=r(wdt,"XLMRobertaForCausalLM"),wdt.forEach(t),dLo=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),cLo=i(W),G4=n(W,"LI",{});var Z8e=s(G4);Wce=n(Z8e,"STRONG",{});var Adt=s(Wce);fLo=r(Adt,"xlm-roberta-xl"),Adt.forEach(t),mLo=r(Z8e," \u2014 "),wD=n(Z8e,"A",{href:!0});var Ldt=s(wD);gLo=r(Ldt,"XLMRobertaXLForCausalLM"),Ldt.forEach(t),hLo=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),pLo=i(W),O4=n(W,"LI",{});var e9e=s(O4);Qce=n(e9e,"STRONG",{});var ydt=s(Qce);_Lo=r(ydt,"xlnet"),ydt.forEach(t),uLo=r(e9e," \u2014 "),AD=n(e9e,"A",{href:!0});var xdt=s(AD);bLo=r(xdt,"XLNetLMHeadModel"),xdt.forEach(t),vLo=r(e9e," (XLNet model)"),e9e.forEach(t),W.forEach(t),FLo=i(ta),V4=n(ta,"P",{});var o9e=s(V4);TLo=r(o9e,"The model is set in evaluation mode by default using "),Hce=n(o9e,"CODE",{});var $dt=s(Hce);MLo=r($dt,"model.eval()"),$dt.forEach(t),ELo=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=n(o9e,"CODE",{});var kdt=s(Uce);CLo=r(kdt,"model.train()"),kdt.forEach(t),o9e.forEach(t),wLo=i(ta),T(X4.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Fje=i(f),Bi=n(f,"H2",{class:!0});var CGe=s(Bi);z4=n(CGe,"A",{id:!0,class:!0,href:!0});var Sdt=s(z4);Jce=n(Sdt,"SPAN",{});var Rdt=s(Jce);T(yL.$$.fragment,Rdt),Rdt.forEach(t),Sdt.forEach(t),ALo=i(CGe),Yce=n(CGe,"SPAN",{});var Pdt=s(Yce);LLo=r(Pdt,"AutoModelForMaskedLM"),Pdt.forEach(t),CGe.forEach(t),Tje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(xL.$$.fragment,zs),yLo=i(zs),Ii=n(zs,"P",{});var YZ=s(Ii);xLo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LD=n(YZ,"A",{href:!0});var Bdt=s(LD);$Lo=r(Bdt,"from_pretrained()"),Bdt.forEach(t),kLo=r(YZ," class method or the "),yD=n(YZ,"A",{href:!0});var Idt=s(yD);SLo=r(Idt,"from_config()"),Idt.forEach(t),RLo=r(YZ,` class
method.`),YZ.forEach(t),PLo=i(zs),$L=n(zs,"P",{});var wGe=s($L);BLo=r(wGe,"This class cannot be instantiated directly using "),Kce=n(wGe,"CODE",{});var Ndt=s(Kce);ILo=r(Ndt,"__init__()"),Ndt.forEach(t),NLo=r(wGe," (throws an error)."),wGe.forEach(t),qLo=i(zs),st=n(zs,"DIV",{class:!0});var Yw=s(st);T(kL.$$.fragment,Yw),jLo=i(Yw),Zce=n(Yw,"P",{});var qdt=s(Zce);DLo=r(qdt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qdt.forEach(t),GLo=i(Yw),Ni=n(Yw,"P",{});var KZ=s(Ni);OLo=r(KZ,`Note:
Loading a model from its configuration file does `),efe=n(KZ,"STRONG",{});var jdt=s(efe);VLo=r(jdt,"not"),jdt.forEach(t),XLo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=n(KZ,"A",{href:!0});var Ddt=s(xD);zLo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),WLo=r(KZ," to load the model weights."),KZ.forEach(t),QLo=i(Yw),T(W4.$$.fragment,Yw),Yw.forEach(t),HLo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(SL.$$.fragment,aa),ULo=i(aa),ofe=n(aa,"P",{});var Gdt=s(ofe);JLo=r(Gdt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gdt.forEach(t),YLo=i(aa),ka=n(aa,"P",{});var Kw=s(ka);KLo=r(Kw,"The model class to instantiate is selected based on the "),rfe=n(Kw,"CODE",{});var Odt=s(rfe);ZLo=r(Odt,"model_type"),Odt.forEach(t),eyo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),tfe=n(Kw,"CODE",{});var Vdt=s(tfe);oyo=r(Vdt,"pretrained_model_name_or_path"),Vdt.forEach(t),ryo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(Kw,"CODE",{});var Xdt=s(afe);tyo=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),ayo=r(Kw,":"),Kw.forEach(t),nyo=i(aa),Q=n(aa,"UL",{});var H=s(Q);Q4=n(H,"LI",{});var r9e=s(Q4);nfe=n(r9e,"STRONG",{});var zdt=s(nfe);syo=r(zdt,"albert"),zdt.forEach(t),lyo=r(r9e," \u2014 "),$D=n(r9e,"A",{href:!0});var Wdt=s($D);iyo=r(Wdt,"AlbertForMaskedLM"),Wdt.forEach(t),dyo=r(r9e," (ALBERT model)"),r9e.forEach(t),cyo=i(H),H4=n(H,"LI",{});var t9e=s(H4);sfe=n(t9e,"STRONG",{});var Qdt=s(sfe);fyo=r(Qdt,"bart"),Qdt.forEach(t),myo=r(t9e," \u2014 "),kD=n(t9e,"A",{href:!0});var Hdt=s(kD);gyo=r(Hdt,"BartForConditionalGeneration"),Hdt.forEach(t),hyo=r(t9e," (BART model)"),t9e.forEach(t),pyo=i(H),U4=n(H,"LI",{});var a9e=s(U4);lfe=n(a9e,"STRONG",{});var Udt=s(lfe);_yo=r(Udt,"bert"),Udt.forEach(t),uyo=r(a9e," \u2014 "),SD=n(a9e,"A",{href:!0});var Jdt=s(SD);byo=r(Jdt,"BertForMaskedLM"),Jdt.forEach(t),vyo=r(a9e," (BERT model)"),a9e.forEach(t),Fyo=i(H),J4=n(H,"LI",{});var n9e=s(J4);ife=n(n9e,"STRONG",{});var Ydt=s(ife);Tyo=r(Ydt,"big_bird"),Ydt.forEach(t),Myo=r(n9e," \u2014 "),RD=n(n9e,"A",{href:!0});var Kdt=s(RD);Eyo=r(Kdt,"BigBirdForMaskedLM"),Kdt.forEach(t),Cyo=r(n9e," (BigBird model)"),n9e.forEach(t),wyo=i(H),Y4=n(H,"LI",{});var s9e=s(Y4);dfe=n(s9e,"STRONG",{});var Zdt=s(dfe);Ayo=r(Zdt,"camembert"),Zdt.forEach(t),Lyo=r(s9e," \u2014 "),PD=n(s9e,"A",{href:!0});var ect=s(PD);yyo=r(ect,"CamembertForMaskedLM"),ect.forEach(t),xyo=r(s9e," (CamemBERT model)"),s9e.forEach(t),$yo=i(H),K4=n(H,"LI",{});var l9e=s(K4);cfe=n(l9e,"STRONG",{});var oct=s(cfe);kyo=r(oct,"convbert"),oct.forEach(t),Syo=r(l9e," \u2014 "),BD=n(l9e,"A",{href:!0});var rct=s(BD);Ryo=r(rct,"ConvBertForMaskedLM"),rct.forEach(t),Pyo=r(l9e," (ConvBERT model)"),l9e.forEach(t),Byo=i(H),Z4=n(H,"LI",{});var i9e=s(Z4);ffe=n(i9e,"STRONG",{});var tct=s(ffe);Iyo=r(tct,"data2vec-text"),tct.forEach(t),Nyo=r(i9e," \u2014 "),ID=n(i9e,"A",{href:!0});var act=s(ID);qyo=r(act,"Data2VecTextForMaskedLM"),act.forEach(t),jyo=r(i9e," (Data2VecText model)"),i9e.forEach(t),Dyo=i(H),e1=n(H,"LI",{});var d9e=s(e1);mfe=n(d9e,"STRONG",{});var nct=s(mfe);Gyo=r(nct,"deberta"),nct.forEach(t),Oyo=r(d9e," \u2014 "),ND=n(d9e,"A",{href:!0});var sct=s(ND);Vyo=r(sct,"DebertaForMaskedLM"),sct.forEach(t),Xyo=r(d9e," (DeBERTa model)"),d9e.forEach(t),zyo=i(H),o1=n(H,"LI",{});var c9e=s(o1);gfe=n(c9e,"STRONG",{});var lct=s(gfe);Wyo=r(lct,"deberta-v2"),lct.forEach(t),Qyo=r(c9e," \u2014 "),qD=n(c9e,"A",{href:!0});var ict=s(qD);Hyo=r(ict,"DebertaV2ForMaskedLM"),ict.forEach(t),Uyo=r(c9e," (DeBERTa-v2 model)"),c9e.forEach(t),Jyo=i(H),r1=n(H,"LI",{});var f9e=s(r1);hfe=n(f9e,"STRONG",{});var dct=s(hfe);Yyo=r(dct,"distilbert"),dct.forEach(t),Kyo=r(f9e," \u2014 "),jD=n(f9e,"A",{href:!0});var cct=s(jD);Zyo=r(cct,"DistilBertForMaskedLM"),cct.forEach(t),e8o=r(f9e," (DistilBERT model)"),f9e.forEach(t),o8o=i(H),t1=n(H,"LI",{});var m9e=s(t1);pfe=n(m9e,"STRONG",{});var fct=s(pfe);r8o=r(fct,"electra"),fct.forEach(t),t8o=r(m9e," \u2014 "),DD=n(m9e,"A",{href:!0});var mct=s(DD);a8o=r(mct,"ElectraForMaskedLM"),mct.forEach(t),n8o=r(m9e," (ELECTRA model)"),m9e.forEach(t),s8o=i(H),a1=n(H,"LI",{});var g9e=s(a1);_fe=n(g9e,"STRONG",{});var gct=s(_fe);l8o=r(gct,"flaubert"),gct.forEach(t),i8o=r(g9e," \u2014 "),GD=n(g9e,"A",{href:!0});var hct=s(GD);d8o=r(hct,"FlaubertWithLMHeadModel"),hct.forEach(t),c8o=r(g9e," (FlauBERT model)"),g9e.forEach(t),f8o=i(H),n1=n(H,"LI",{});var h9e=s(n1);ufe=n(h9e,"STRONG",{});var pct=s(ufe);m8o=r(pct,"fnet"),pct.forEach(t),g8o=r(h9e," \u2014 "),OD=n(h9e,"A",{href:!0});var _ct=s(OD);h8o=r(_ct,"FNetForMaskedLM"),_ct.forEach(t),p8o=r(h9e," (FNet model)"),h9e.forEach(t),_8o=i(H),s1=n(H,"LI",{});var p9e=s(s1);bfe=n(p9e,"STRONG",{});var uct=s(bfe);u8o=r(uct,"funnel"),uct.forEach(t),b8o=r(p9e," \u2014 "),VD=n(p9e,"A",{href:!0});var bct=s(VD);v8o=r(bct,"FunnelForMaskedLM"),bct.forEach(t),F8o=r(p9e," (Funnel Transformer model)"),p9e.forEach(t),T8o=i(H),l1=n(H,"LI",{});var _9e=s(l1);vfe=n(_9e,"STRONG",{});var vct=s(vfe);M8o=r(vct,"ibert"),vct.forEach(t),E8o=r(_9e," \u2014 "),XD=n(_9e,"A",{href:!0});var Fct=s(XD);C8o=r(Fct,"IBertForMaskedLM"),Fct.forEach(t),w8o=r(_9e," (I-BERT model)"),_9e.forEach(t),A8o=i(H),i1=n(H,"LI",{});var u9e=s(i1);Ffe=n(u9e,"STRONG",{});var Tct=s(Ffe);L8o=r(Tct,"layoutlm"),Tct.forEach(t),y8o=r(u9e," \u2014 "),zD=n(u9e,"A",{href:!0});var Mct=s(zD);x8o=r(Mct,"LayoutLMForMaskedLM"),Mct.forEach(t),$8o=r(u9e," (LayoutLM model)"),u9e.forEach(t),k8o=i(H),d1=n(H,"LI",{});var b9e=s(d1);Tfe=n(b9e,"STRONG",{});var Ect=s(Tfe);S8o=r(Ect,"longformer"),Ect.forEach(t),R8o=r(b9e," \u2014 "),WD=n(b9e,"A",{href:!0});var Cct=s(WD);P8o=r(Cct,"LongformerForMaskedLM"),Cct.forEach(t),B8o=r(b9e," (Longformer model)"),b9e.forEach(t),I8o=i(H),c1=n(H,"LI",{});var v9e=s(c1);Mfe=n(v9e,"STRONG",{});var wct=s(Mfe);N8o=r(wct,"luke"),wct.forEach(t),q8o=r(v9e," \u2014 "),QD=n(v9e,"A",{href:!0});var Act=s(QD);j8o=r(Act,"LukeForMaskedLM"),Act.forEach(t),D8o=r(v9e," (LUKE model)"),v9e.forEach(t),G8o=i(H),f1=n(H,"LI",{});var F9e=s(f1);Efe=n(F9e,"STRONG",{});var Lct=s(Efe);O8o=r(Lct,"mbart"),Lct.forEach(t),V8o=r(F9e," \u2014 "),HD=n(F9e,"A",{href:!0});var yct=s(HD);X8o=r(yct,"MBartForConditionalGeneration"),yct.forEach(t),z8o=r(F9e," (mBART model)"),F9e.forEach(t),W8o=i(H),m1=n(H,"LI",{});var T9e=s(m1);Cfe=n(T9e,"STRONG",{});var xct=s(Cfe);Q8o=r(xct,"megatron-bert"),xct.forEach(t),H8o=r(T9e," \u2014 "),UD=n(T9e,"A",{href:!0});var $ct=s(UD);U8o=r($ct,"MegatronBertForMaskedLM"),$ct.forEach(t),J8o=r(T9e," (Megatron-BERT model)"),T9e.forEach(t),Y8o=i(H),g1=n(H,"LI",{});var M9e=s(g1);wfe=n(M9e,"STRONG",{});var kct=s(wfe);K8o=r(kct,"mobilebert"),kct.forEach(t),Z8o=r(M9e," \u2014 "),JD=n(M9e,"A",{href:!0});var Sct=s(JD);e9o=r(Sct,"MobileBertForMaskedLM"),Sct.forEach(t),o9o=r(M9e," (MobileBERT model)"),M9e.forEach(t),r9o=i(H),h1=n(H,"LI",{});var E9e=s(h1);Afe=n(E9e,"STRONG",{});var Rct=s(Afe);t9o=r(Rct,"mpnet"),Rct.forEach(t),a9o=r(E9e," \u2014 "),YD=n(E9e,"A",{href:!0});var Pct=s(YD);n9o=r(Pct,"MPNetForMaskedLM"),Pct.forEach(t),s9o=r(E9e," (MPNet model)"),E9e.forEach(t),l9o=i(H),p1=n(H,"LI",{});var C9e=s(p1);Lfe=n(C9e,"STRONG",{});var Bct=s(Lfe);i9o=r(Bct,"nystromformer"),Bct.forEach(t),d9o=r(C9e," \u2014 "),KD=n(C9e,"A",{href:!0});var Ict=s(KD);c9o=r(Ict,"NystromformerForMaskedLM"),Ict.forEach(t),f9o=r(C9e," (Nystr\xF6mformer model)"),C9e.forEach(t),m9o=i(H),_1=n(H,"LI",{});var w9e=s(_1);yfe=n(w9e,"STRONG",{});var Nct=s(yfe);g9o=r(Nct,"perceiver"),Nct.forEach(t),h9o=r(w9e," \u2014 "),ZD=n(w9e,"A",{href:!0});var qct=s(ZD);p9o=r(qct,"PerceiverForMaskedLM"),qct.forEach(t),_9o=r(w9e," (Perceiver model)"),w9e.forEach(t),u9o=i(H),u1=n(H,"LI",{});var A9e=s(u1);xfe=n(A9e,"STRONG",{});var jct=s(xfe);b9o=r(jct,"qdqbert"),jct.forEach(t),v9o=r(A9e," \u2014 "),eG=n(A9e,"A",{href:!0});var Dct=s(eG);F9o=r(Dct,"QDQBertForMaskedLM"),Dct.forEach(t),T9o=r(A9e," (QDQBert model)"),A9e.forEach(t),M9o=i(H),b1=n(H,"LI",{});var L9e=s(b1);$fe=n(L9e,"STRONG",{});var Gct=s($fe);E9o=r(Gct,"reformer"),Gct.forEach(t),C9o=r(L9e," \u2014 "),oG=n(L9e,"A",{href:!0});var Oct=s(oG);w9o=r(Oct,"ReformerForMaskedLM"),Oct.forEach(t),A9o=r(L9e," (Reformer model)"),L9e.forEach(t),L9o=i(H),v1=n(H,"LI",{});var y9e=s(v1);kfe=n(y9e,"STRONG",{});var Vct=s(kfe);y9o=r(Vct,"rembert"),Vct.forEach(t),x9o=r(y9e," \u2014 "),rG=n(y9e,"A",{href:!0});var Xct=s(rG);$9o=r(Xct,"RemBertForMaskedLM"),Xct.forEach(t),k9o=r(y9e," (RemBERT model)"),y9e.forEach(t),S9o=i(H),F1=n(H,"LI",{});var x9e=s(F1);Sfe=n(x9e,"STRONG",{});var zct=s(Sfe);R9o=r(zct,"roberta"),zct.forEach(t),P9o=r(x9e," \u2014 "),tG=n(x9e,"A",{href:!0});var Wct=s(tG);B9o=r(Wct,"RobertaForMaskedLM"),Wct.forEach(t),I9o=r(x9e," (RoBERTa model)"),x9e.forEach(t),N9o=i(H),T1=n(H,"LI",{});var $9e=s(T1);Rfe=n($9e,"STRONG",{});var Qct=s(Rfe);q9o=r(Qct,"roformer"),Qct.forEach(t),j9o=r($9e," \u2014 "),aG=n($9e,"A",{href:!0});var Hct=s(aG);D9o=r(Hct,"RoFormerForMaskedLM"),Hct.forEach(t),G9o=r($9e," (RoFormer model)"),$9e.forEach(t),O9o=i(H),M1=n(H,"LI",{});var k9e=s(M1);Pfe=n(k9e,"STRONG",{});var Uct=s(Pfe);V9o=r(Uct,"squeezebert"),Uct.forEach(t),X9o=r(k9e," \u2014 "),nG=n(k9e,"A",{href:!0});var Jct=s(nG);z9o=r(Jct,"SqueezeBertForMaskedLM"),Jct.forEach(t),W9o=r(k9e," (SqueezeBERT model)"),k9e.forEach(t),Q9o=i(H),E1=n(H,"LI",{});var S9e=s(E1);Bfe=n(S9e,"STRONG",{});var Yct=s(Bfe);H9o=r(Yct,"tapas"),Yct.forEach(t),U9o=r(S9e," \u2014 "),sG=n(S9e,"A",{href:!0});var Kct=s(sG);J9o=r(Kct,"TapasForMaskedLM"),Kct.forEach(t),Y9o=r(S9e," (TAPAS model)"),S9e.forEach(t),K9o=i(H),C1=n(H,"LI",{});var R9e=s(C1);Ife=n(R9e,"STRONG",{});var Zct=s(Ife);Z9o=r(Zct,"wav2vec2"),Zct.forEach(t),exo=r(R9e," \u2014 "),Nfe=n(R9e,"CODE",{});var eft=s(Nfe);oxo=r(eft,"Wav2Vec2ForMaskedLM"),eft.forEach(t),rxo=r(R9e," (Wav2Vec2 model)"),R9e.forEach(t),txo=i(H),w1=n(H,"LI",{});var P9e=s(w1);qfe=n(P9e,"STRONG",{});var oft=s(qfe);axo=r(oft,"xlm"),oft.forEach(t),nxo=r(P9e," \u2014 "),lG=n(P9e,"A",{href:!0});var rft=s(lG);sxo=r(rft,"XLMWithLMHeadModel"),rft.forEach(t),lxo=r(P9e," (XLM model)"),P9e.forEach(t),ixo=i(H),A1=n(H,"LI",{});var B9e=s(A1);jfe=n(B9e,"STRONG",{});var tft=s(jfe);dxo=r(tft,"xlm-roberta"),tft.forEach(t),cxo=r(B9e," \u2014 "),iG=n(B9e,"A",{href:!0});var aft=s(iG);fxo=r(aft,"XLMRobertaForMaskedLM"),aft.forEach(t),mxo=r(B9e," (XLM-RoBERTa model)"),B9e.forEach(t),gxo=i(H),L1=n(H,"LI",{});var I9e=s(L1);Dfe=n(I9e,"STRONG",{});var nft=s(Dfe);hxo=r(nft,"xlm-roberta-xl"),nft.forEach(t),pxo=r(I9e," \u2014 "),dG=n(I9e,"A",{href:!0});var sft=s(dG);_xo=r(sft,"XLMRobertaXLForMaskedLM"),sft.forEach(t),uxo=r(I9e," (XLM-RoBERTa-XL model)"),I9e.forEach(t),bxo=i(H),y1=n(H,"LI",{});var N9e=s(y1);Gfe=n(N9e,"STRONG",{});var lft=s(Gfe);vxo=r(lft,"yoso"),lft.forEach(t),Fxo=r(N9e," \u2014 "),cG=n(N9e,"A",{href:!0});var ift=s(cG);Txo=r(ift,"YosoForMaskedLM"),ift.forEach(t),Mxo=r(N9e," (YOSO model)"),N9e.forEach(t),H.forEach(t),Exo=i(aa),x1=n(aa,"P",{});var q9e=s(x1);Cxo=r(q9e,"The model is set in evaluation mode by default using "),Ofe=n(q9e,"CODE",{});var dft=s(Ofe);wxo=r(dft,"model.eval()"),dft.forEach(t),Axo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=n(q9e,"CODE",{});var cft=s(Vfe);Lxo=r(cft,"model.train()"),cft.forEach(t),q9e.forEach(t),yxo=i(aa),T($1.$$.fragment,aa),aa.forEach(t),zs.forEach(t),Mje=i(f),qi=n(f,"H2",{class:!0});var AGe=s(qi);k1=n(AGe,"A",{id:!0,class:!0,href:!0});var fft=s(k1);Xfe=n(fft,"SPAN",{});var mft=s(Xfe);T(RL.$$.fragment,mft),mft.forEach(t),fft.forEach(t),xxo=i(AGe),zfe=n(AGe,"SPAN",{});var gft=s(zfe);$xo=r(gft,"AutoModelForSeq2SeqLM"),gft.forEach(t),AGe.forEach(t),Eje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(PL.$$.fragment,Ws),kxo=i(Ws),ji=n(Ws,"P",{});var ZZ=s(ji);Sxo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fG=n(ZZ,"A",{href:!0});var hft=s(fG);Rxo=r(hft,"from_pretrained()"),hft.forEach(t),Pxo=r(ZZ," class method or the "),mG=n(ZZ,"A",{href:!0});var pft=s(mG);Bxo=r(pft,"from_config()"),pft.forEach(t),Ixo=r(ZZ,` class
method.`),ZZ.forEach(t),Nxo=i(Ws),BL=n(Ws,"P",{});var LGe=s(BL);qxo=r(LGe,"This class cannot be instantiated directly using "),Wfe=n(LGe,"CODE",{});var _ft=s(Wfe);jxo=r(_ft,"__init__()"),_ft.forEach(t),Dxo=r(LGe," (throws an error)."),LGe.forEach(t),Gxo=i(Ws),lt=n(Ws,"DIV",{class:!0});var Zw=s(lt);T(IL.$$.fragment,Zw),Oxo=i(Zw),Qfe=n(Zw,"P",{});var uft=s(Qfe);Vxo=r(uft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uft.forEach(t),Xxo=i(Zw),Di=n(Zw,"P",{});var eee=s(Di);zxo=r(eee,`Note:
Loading a model from its configuration file does `),Hfe=n(eee,"STRONG",{});var bft=s(Hfe);Wxo=r(bft,"not"),bft.forEach(t),Qxo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(eee,"A",{href:!0});var vft=s(gG);Hxo=r(vft,"from_pretrained()"),vft.forEach(t),Uxo=r(eee," to load the model weights."),eee.forEach(t),Jxo=i(Zw),T(S1.$$.fragment,Zw),Zw.forEach(t),Yxo=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(NL.$$.fragment,na),Kxo=i(na),Ufe=n(na,"P",{});var Fft=s(Ufe);Zxo=r(Fft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Fft.forEach(t),e$o=i(na),Sa=n(na,"P",{});var eA=s(Sa);o$o=r(eA,"The model class to instantiate is selected based on the "),Jfe=n(eA,"CODE",{});var Tft=s(Jfe);r$o=r(Tft,"model_type"),Tft.forEach(t),t$o=r(eA,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(eA,"CODE",{});var Mft=s(Yfe);a$o=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),n$o=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(eA,"CODE",{});var Eft=s(Kfe);s$o=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),l$o=r(eA,":"),eA.forEach(t),i$o=i(na),_e=n(na,"UL",{});var Fe=s(_e);R1=n(Fe,"LI",{});var j9e=s(R1);Zfe=n(j9e,"STRONG",{});var Cft=s(Zfe);d$o=r(Cft,"bart"),Cft.forEach(t),c$o=r(j9e," \u2014 "),hG=n(j9e,"A",{href:!0});var wft=s(hG);f$o=r(wft,"BartForConditionalGeneration"),wft.forEach(t),m$o=r(j9e," (BART model)"),j9e.forEach(t),g$o=i(Fe),P1=n(Fe,"LI",{});var D9e=s(P1);eme=n(D9e,"STRONG",{});var Aft=s(eme);h$o=r(Aft,"bigbird_pegasus"),Aft.forEach(t),p$o=r(D9e," \u2014 "),pG=n(D9e,"A",{href:!0});var Lft=s(pG);_$o=r(Lft,"BigBirdPegasusForConditionalGeneration"),Lft.forEach(t),u$o=r(D9e," (BigBird-Pegasus model)"),D9e.forEach(t),b$o=i(Fe),B1=n(Fe,"LI",{});var G9e=s(B1);ome=n(G9e,"STRONG",{});var yft=s(ome);v$o=r(yft,"blenderbot"),yft.forEach(t),F$o=r(G9e," \u2014 "),_G=n(G9e,"A",{href:!0});var xft=s(_G);T$o=r(xft,"BlenderbotForConditionalGeneration"),xft.forEach(t),M$o=r(G9e," (Blenderbot model)"),G9e.forEach(t),E$o=i(Fe),I1=n(Fe,"LI",{});var O9e=s(I1);rme=n(O9e,"STRONG",{});var $ft=s(rme);C$o=r($ft,"blenderbot-small"),$ft.forEach(t),w$o=r(O9e," \u2014 "),uG=n(O9e,"A",{href:!0});var kft=s(uG);A$o=r(kft,"BlenderbotSmallForConditionalGeneration"),kft.forEach(t),L$o=r(O9e," (BlenderbotSmall model)"),O9e.forEach(t),y$o=i(Fe),N1=n(Fe,"LI",{});var V9e=s(N1);tme=n(V9e,"STRONG",{});var Sft=s(tme);x$o=r(Sft,"encoder-decoder"),Sft.forEach(t),$$o=r(V9e," \u2014 "),bG=n(V9e,"A",{href:!0});var Rft=s(bG);k$o=r(Rft,"EncoderDecoderModel"),Rft.forEach(t),S$o=r(V9e," (Encoder decoder model)"),V9e.forEach(t),R$o=i(Fe),q1=n(Fe,"LI",{});var X9e=s(q1);ame=n(X9e,"STRONG",{});var Pft=s(ame);P$o=r(Pft,"fsmt"),Pft.forEach(t),B$o=r(X9e," \u2014 "),vG=n(X9e,"A",{href:!0});var Bft=s(vG);I$o=r(Bft,"FSMTForConditionalGeneration"),Bft.forEach(t),N$o=r(X9e," (FairSeq Machine-Translation model)"),X9e.forEach(t),q$o=i(Fe),j1=n(Fe,"LI",{});var z9e=s(j1);nme=n(z9e,"STRONG",{});var Ift=s(nme);j$o=r(Ift,"led"),Ift.forEach(t),D$o=r(z9e," \u2014 "),FG=n(z9e,"A",{href:!0});var Nft=s(FG);G$o=r(Nft,"LEDForConditionalGeneration"),Nft.forEach(t),O$o=r(z9e," (LED model)"),z9e.forEach(t),V$o=i(Fe),D1=n(Fe,"LI",{});var W9e=s(D1);sme=n(W9e,"STRONG",{});var qft=s(sme);X$o=r(qft,"m2m_100"),qft.forEach(t),z$o=r(W9e," \u2014 "),TG=n(W9e,"A",{href:!0});var jft=s(TG);W$o=r(jft,"M2M100ForConditionalGeneration"),jft.forEach(t),Q$o=r(W9e," (M2M100 model)"),W9e.forEach(t),H$o=i(Fe),G1=n(Fe,"LI",{});var Q9e=s(G1);lme=n(Q9e,"STRONG",{});var Dft=s(lme);U$o=r(Dft,"marian"),Dft.forEach(t),J$o=r(Q9e," \u2014 "),MG=n(Q9e,"A",{href:!0});var Gft=s(MG);Y$o=r(Gft,"MarianMTModel"),Gft.forEach(t),K$o=r(Q9e," (Marian model)"),Q9e.forEach(t),Z$o=i(Fe),O1=n(Fe,"LI",{});var H9e=s(O1);ime=n(H9e,"STRONG",{});var Oft=s(ime);eko=r(Oft,"mbart"),Oft.forEach(t),oko=r(H9e," \u2014 "),EG=n(H9e,"A",{href:!0});var Vft=s(EG);rko=r(Vft,"MBartForConditionalGeneration"),Vft.forEach(t),tko=r(H9e," (mBART model)"),H9e.forEach(t),ako=i(Fe),V1=n(Fe,"LI",{});var U9e=s(V1);dme=n(U9e,"STRONG",{});var Xft=s(dme);nko=r(Xft,"mt5"),Xft.forEach(t),sko=r(U9e," \u2014 "),CG=n(U9e,"A",{href:!0});var zft=s(CG);lko=r(zft,"MT5ForConditionalGeneration"),zft.forEach(t),iko=r(U9e," (MT5 model)"),U9e.forEach(t),dko=i(Fe),X1=n(Fe,"LI",{});var J9e=s(X1);cme=n(J9e,"STRONG",{});var Wft=s(cme);cko=r(Wft,"pegasus"),Wft.forEach(t),fko=r(J9e," \u2014 "),wG=n(J9e,"A",{href:!0});var Qft=s(wG);mko=r(Qft,"PegasusForConditionalGeneration"),Qft.forEach(t),gko=r(J9e," (Pegasus model)"),J9e.forEach(t),hko=i(Fe),z1=n(Fe,"LI",{});var Y9e=s(z1);fme=n(Y9e,"STRONG",{});var Hft=s(fme);pko=r(Hft,"plbart"),Hft.forEach(t),_ko=r(Y9e," \u2014 "),AG=n(Y9e,"A",{href:!0});var Uft=s(AG);uko=r(Uft,"PLBartForConditionalGeneration"),Uft.forEach(t),bko=r(Y9e," (PLBart model)"),Y9e.forEach(t),vko=i(Fe),W1=n(Fe,"LI",{});var K9e=s(W1);mme=n(K9e,"STRONG",{});var Jft=s(mme);Fko=r(Jft,"prophetnet"),Jft.forEach(t),Tko=r(K9e," \u2014 "),LG=n(K9e,"A",{href:!0});var Yft=s(LG);Mko=r(Yft,"ProphetNetForConditionalGeneration"),Yft.forEach(t),Eko=r(K9e," (ProphetNet model)"),K9e.forEach(t),Cko=i(Fe),Q1=n(Fe,"LI",{});var Z9e=s(Q1);gme=n(Z9e,"STRONG",{});var Kft=s(gme);wko=r(Kft,"t5"),Kft.forEach(t),Ako=r(Z9e," \u2014 "),yG=n(Z9e,"A",{href:!0});var Zft=s(yG);Lko=r(Zft,"T5ForConditionalGeneration"),Zft.forEach(t),yko=r(Z9e," (T5 model)"),Z9e.forEach(t),xko=i(Fe),H1=n(Fe,"LI",{});var exe=s(H1);hme=n(exe,"STRONG",{});var emt=s(hme);$ko=r(emt,"xlm-prophetnet"),emt.forEach(t),kko=r(exe," \u2014 "),xG=n(exe,"A",{href:!0});var omt=s(xG);Sko=r(omt,"XLMProphetNetForConditionalGeneration"),omt.forEach(t),Rko=r(exe," (XLM-ProphetNet model)"),exe.forEach(t),Fe.forEach(t),Pko=i(na),U1=n(na,"P",{});var oxe=s(U1);Bko=r(oxe,"The model is set in evaluation mode by default using "),pme=n(oxe,"CODE",{});var rmt=s(pme);Iko=r(rmt,"model.eval()"),rmt.forEach(t),Nko=r(oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(oxe,"CODE",{});var tmt=s(_me);qko=r(tmt,"model.train()"),tmt.forEach(t),oxe.forEach(t),jko=i(na),T(J1.$$.fragment,na),na.forEach(t),Ws.forEach(t),Cje=i(f),Gi=n(f,"H2",{class:!0});var yGe=s(Gi);Y1=n(yGe,"A",{id:!0,class:!0,href:!0});var amt=s(Y1);ume=n(amt,"SPAN",{});var nmt=s(ume);T(qL.$$.fragment,nmt),nmt.forEach(t),amt.forEach(t),Dko=i(yGe),bme=n(yGe,"SPAN",{});var smt=s(bme);Gko=r(smt,"AutoModelForSequenceClassification"),smt.forEach(t),yGe.forEach(t),wje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(jL.$$.fragment,Qs),Oko=i(Qs),Oi=n(Qs,"P",{});var oee=s(Oi);Vko=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$G=n(oee,"A",{href:!0});var lmt=s($G);Xko=r(lmt,"from_pretrained()"),lmt.forEach(t),zko=r(oee," class method or the "),kG=n(oee,"A",{href:!0});var imt=s(kG);Wko=r(imt,"from_config()"),imt.forEach(t),Qko=r(oee,` class
method.`),oee.forEach(t),Hko=i(Qs),DL=n(Qs,"P",{});var xGe=s(DL);Uko=r(xGe,"This class cannot be instantiated directly using "),vme=n(xGe,"CODE",{});var dmt=s(vme);Jko=r(dmt,"__init__()"),dmt.forEach(t),Yko=r(xGe," (throws an error)."),xGe.forEach(t),Kko=i(Qs),it=n(Qs,"DIV",{class:!0});var oA=s(it);T(GL.$$.fragment,oA),Zko=i(oA),Fme=n(oA,"P",{});var cmt=s(Fme);eSo=r(cmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cmt.forEach(t),oSo=i(oA),Vi=n(oA,"P",{});var ree=s(Vi);rSo=r(ree,`Note:
Loading a model from its configuration file does `),Tme=n(ree,"STRONG",{});var fmt=s(Tme);tSo=r(fmt,"not"),fmt.forEach(t),aSo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(ree,"A",{href:!0});var mmt=s(SG);nSo=r(mmt,"from_pretrained()"),mmt.forEach(t),sSo=r(ree," to load the model weights."),ree.forEach(t),lSo=i(oA),T(K1.$$.fragment,oA),oA.forEach(t),iSo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(OL.$$.fragment,sa),dSo=i(sa),Mme=n(sa,"P",{});var gmt=s(Mme);cSo=r(gmt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gmt.forEach(t),fSo=i(sa),Ra=n(sa,"P",{});var rA=s(Ra);mSo=r(rA,"The model class to instantiate is selected based on the "),Eme=n(rA,"CODE",{});var hmt=s(Eme);gSo=r(hmt,"model_type"),hmt.forEach(t),hSo=r(rA,` property of the config object (either
passed as an argument or loaded from `),Cme=n(rA,"CODE",{});var pmt=s(Cme);pSo=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),_So=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(rA,"CODE",{});var _mt=s(wme);uSo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),bSo=r(rA,":"),rA.forEach(t),vSo=i(sa),N=n(sa,"UL",{});var j=s(N);Z1=n(j,"LI",{});var rxe=s(Z1);Ame=n(rxe,"STRONG",{});var umt=s(Ame);FSo=r(umt,"albert"),umt.forEach(t),TSo=r(rxe," \u2014 "),RG=n(rxe,"A",{href:!0});var bmt=s(RG);MSo=r(bmt,"AlbertForSequenceClassification"),bmt.forEach(t),ESo=r(rxe," (ALBERT model)"),rxe.forEach(t),CSo=i(j),e7=n(j,"LI",{});var txe=s(e7);Lme=n(txe,"STRONG",{});var vmt=s(Lme);wSo=r(vmt,"bart"),vmt.forEach(t),ASo=r(txe," \u2014 "),PG=n(txe,"A",{href:!0});var Fmt=s(PG);LSo=r(Fmt,"BartForSequenceClassification"),Fmt.forEach(t),ySo=r(txe," (BART model)"),txe.forEach(t),xSo=i(j),o7=n(j,"LI",{});var axe=s(o7);yme=n(axe,"STRONG",{});var Tmt=s(yme);$So=r(Tmt,"bert"),Tmt.forEach(t),kSo=r(axe," \u2014 "),BG=n(axe,"A",{href:!0});var Mmt=s(BG);SSo=r(Mmt,"BertForSequenceClassification"),Mmt.forEach(t),RSo=r(axe," (BERT model)"),axe.forEach(t),PSo=i(j),r7=n(j,"LI",{});var nxe=s(r7);xme=n(nxe,"STRONG",{});var Emt=s(xme);BSo=r(Emt,"big_bird"),Emt.forEach(t),ISo=r(nxe," \u2014 "),IG=n(nxe,"A",{href:!0});var Cmt=s(IG);NSo=r(Cmt,"BigBirdForSequenceClassification"),Cmt.forEach(t),qSo=r(nxe," (BigBird model)"),nxe.forEach(t),jSo=i(j),t7=n(j,"LI",{});var sxe=s(t7);$me=n(sxe,"STRONG",{});var wmt=s($me);DSo=r(wmt,"bigbird_pegasus"),wmt.forEach(t),GSo=r(sxe," \u2014 "),NG=n(sxe,"A",{href:!0});var Amt=s(NG);OSo=r(Amt,"BigBirdPegasusForSequenceClassification"),Amt.forEach(t),VSo=r(sxe," (BigBird-Pegasus model)"),sxe.forEach(t),XSo=i(j),a7=n(j,"LI",{});var lxe=s(a7);kme=n(lxe,"STRONG",{});var Lmt=s(kme);zSo=r(Lmt,"camembert"),Lmt.forEach(t),WSo=r(lxe," \u2014 "),qG=n(lxe,"A",{href:!0});var ymt=s(qG);QSo=r(ymt,"CamembertForSequenceClassification"),ymt.forEach(t),HSo=r(lxe," (CamemBERT model)"),lxe.forEach(t),USo=i(j),n7=n(j,"LI",{});var ixe=s(n7);Sme=n(ixe,"STRONG",{});var xmt=s(Sme);JSo=r(xmt,"canine"),xmt.forEach(t),YSo=r(ixe," \u2014 "),jG=n(ixe,"A",{href:!0});var $mt=s(jG);KSo=r($mt,"CanineForSequenceClassification"),$mt.forEach(t),ZSo=r(ixe," (CANINE model)"),ixe.forEach(t),eRo=i(j),s7=n(j,"LI",{});var dxe=s(s7);Rme=n(dxe,"STRONG",{});var kmt=s(Rme);oRo=r(kmt,"convbert"),kmt.forEach(t),rRo=r(dxe," \u2014 "),DG=n(dxe,"A",{href:!0});var Smt=s(DG);tRo=r(Smt,"ConvBertForSequenceClassification"),Smt.forEach(t),aRo=r(dxe," (ConvBERT model)"),dxe.forEach(t),nRo=i(j),l7=n(j,"LI",{});var cxe=s(l7);Pme=n(cxe,"STRONG",{});var Rmt=s(Pme);sRo=r(Rmt,"ctrl"),Rmt.forEach(t),lRo=r(cxe," \u2014 "),GG=n(cxe,"A",{href:!0});var Pmt=s(GG);iRo=r(Pmt,"CTRLForSequenceClassification"),Pmt.forEach(t),dRo=r(cxe," (CTRL model)"),cxe.forEach(t),cRo=i(j),i7=n(j,"LI",{});var fxe=s(i7);Bme=n(fxe,"STRONG",{});var Bmt=s(Bme);fRo=r(Bmt,"data2vec-text"),Bmt.forEach(t),mRo=r(fxe," \u2014 "),OG=n(fxe,"A",{href:!0});var Imt=s(OG);gRo=r(Imt,"Data2VecTextForSequenceClassification"),Imt.forEach(t),hRo=r(fxe," (Data2VecText model)"),fxe.forEach(t),pRo=i(j),d7=n(j,"LI",{});var mxe=s(d7);Ime=n(mxe,"STRONG",{});var Nmt=s(Ime);_Ro=r(Nmt,"deberta"),Nmt.forEach(t),uRo=r(mxe," \u2014 "),VG=n(mxe,"A",{href:!0});var qmt=s(VG);bRo=r(qmt,"DebertaForSequenceClassification"),qmt.forEach(t),vRo=r(mxe," (DeBERTa model)"),mxe.forEach(t),FRo=i(j),c7=n(j,"LI",{});var gxe=s(c7);Nme=n(gxe,"STRONG",{});var jmt=s(Nme);TRo=r(jmt,"deberta-v2"),jmt.forEach(t),MRo=r(gxe," \u2014 "),XG=n(gxe,"A",{href:!0});var Dmt=s(XG);ERo=r(Dmt,"DebertaV2ForSequenceClassification"),Dmt.forEach(t),CRo=r(gxe," (DeBERTa-v2 model)"),gxe.forEach(t),wRo=i(j),f7=n(j,"LI",{});var hxe=s(f7);qme=n(hxe,"STRONG",{});var Gmt=s(qme);ARo=r(Gmt,"distilbert"),Gmt.forEach(t),LRo=r(hxe," \u2014 "),zG=n(hxe,"A",{href:!0});var Omt=s(zG);yRo=r(Omt,"DistilBertForSequenceClassification"),Omt.forEach(t),xRo=r(hxe," (DistilBERT model)"),hxe.forEach(t),$Ro=i(j),m7=n(j,"LI",{});var pxe=s(m7);jme=n(pxe,"STRONG",{});var Vmt=s(jme);kRo=r(Vmt,"electra"),Vmt.forEach(t),SRo=r(pxe," \u2014 "),WG=n(pxe,"A",{href:!0});var Xmt=s(WG);RRo=r(Xmt,"ElectraForSequenceClassification"),Xmt.forEach(t),PRo=r(pxe," (ELECTRA model)"),pxe.forEach(t),BRo=i(j),g7=n(j,"LI",{});var _xe=s(g7);Dme=n(_xe,"STRONG",{});var zmt=s(Dme);IRo=r(zmt,"flaubert"),zmt.forEach(t),NRo=r(_xe," \u2014 "),QG=n(_xe,"A",{href:!0});var Wmt=s(QG);qRo=r(Wmt,"FlaubertForSequenceClassification"),Wmt.forEach(t),jRo=r(_xe," (FlauBERT model)"),_xe.forEach(t),DRo=i(j),h7=n(j,"LI",{});var uxe=s(h7);Gme=n(uxe,"STRONG",{});var Qmt=s(Gme);GRo=r(Qmt,"fnet"),Qmt.forEach(t),ORo=r(uxe," \u2014 "),HG=n(uxe,"A",{href:!0});var Hmt=s(HG);VRo=r(Hmt,"FNetForSequenceClassification"),Hmt.forEach(t),XRo=r(uxe," (FNet model)"),uxe.forEach(t),zRo=i(j),p7=n(j,"LI",{});var bxe=s(p7);Ome=n(bxe,"STRONG",{});var Umt=s(Ome);WRo=r(Umt,"funnel"),Umt.forEach(t),QRo=r(bxe," \u2014 "),UG=n(bxe,"A",{href:!0});var Jmt=s(UG);HRo=r(Jmt,"FunnelForSequenceClassification"),Jmt.forEach(t),URo=r(bxe," (Funnel Transformer model)"),bxe.forEach(t),JRo=i(j),_7=n(j,"LI",{});var vxe=s(_7);Vme=n(vxe,"STRONG",{});var Ymt=s(Vme);YRo=r(Ymt,"gpt2"),Ymt.forEach(t),KRo=r(vxe," \u2014 "),JG=n(vxe,"A",{href:!0});var Kmt=s(JG);ZRo=r(Kmt,"GPT2ForSequenceClassification"),Kmt.forEach(t),ePo=r(vxe," (OpenAI GPT-2 model)"),vxe.forEach(t),oPo=i(j),u7=n(j,"LI",{});var Fxe=s(u7);Xme=n(Fxe,"STRONG",{});var Zmt=s(Xme);rPo=r(Zmt,"gpt_neo"),Zmt.forEach(t),tPo=r(Fxe," \u2014 "),YG=n(Fxe,"A",{href:!0});var egt=s(YG);aPo=r(egt,"GPTNeoForSequenceClassification"),egt.forEach(t),nPo=r(Fxe," (GPT Neo model)"),Fxe.forEach(t),sPo=i(j),b7=n(j,"LI",{});var Txe=s(b7);zme=n(Txe,"STRONG",{});var ogt=s(zme);lPo=r(ogt,"gptj"),ogt.forEach(t),iPo=r(Txe," \u2014 "),KG=n(Txe,"A",{href:!0});var rgt=s(KG);dPo=r(rgt,"GPTJForSequenceClassification"),rgt.forEach(t),cPo=r(Txe," (GPT-J model)"),Txe.forEach(t),fPo=i(j),v7=n(j,"LI",{});var Mxe=s(v7);Wme=n(Mxe,"STRONG",{});var tgt=s(Wme);mPo=r(tgt,"ibert"),tgt.forEach(t),gPo=r(Mxe," \u2014 "),ZG=n(Mxe,"A",{href:!0});var agt=s(ZG);hPo=r(agt,"IBertForSequenceClassification"),agt.forEach(t),pPo=r(Mxe," (I-BERT model)"),Mxe.forEach(t),_Po=i(j),F7=n(j,"LI",{});var Exe=s(F7);Qme=n(Exe,"STRONG",{});var ngt=s(Qme);uPo=r(ngt,"layoutlm"),ngt.forEach(t),bPo=r(Exe," \u2014 "),eO=n(Exe,"A",{href:!0});var sgt=s(eO);vPo=r(sgt,"LayoutLMForSequenceClassification"),sgt.forEach(t),FPo=r(Exe," (LayoutLM model)"),Exe.forEach(t),TPo=i(j),T7=n(j,"LI",{});var Cxe=s(T7);Hme=n(Cxe,"STRONG",{});var lgt=s(Hme);MPo=r(lgt,"layoutlmv2"),lgt.forEach(t),EPo=r(Cxe," \u2014 "),oO=n(Cxe,"A",{href:!0});var igt=s(oO);CPo=r(igt,"LayoutLMv2ForSequenceClassification"),igt.forEach(t),wPo=r(Cxe," (LayoutLMv2 model)"),Cxe.forEach(t),APo=i(j),M7=n(j,"LI",{});var wxe=s(M7);Ume=n(wxe,"STRONG",{});var dgt=s(Ume);LPo=r(dgt,"layoutlmv3"),dgt.forEach(t),yPo=r(wxe," \u2014 "),rO=n(wxe,"A",{href:!0});var cgt=s(rO);xPo=r(cgt,"LayoutLMv3ForSequenceClassification"),cgt.forEach(t),$Po=r(wxe," (LayoutLMv3 model)"),wxe.forEach(t),kPo=i(j),E7=n(j,"LI",{});var Axe=s(E7);Jme=n(Axe,"STRONG",{});var fgt=s(Jme);SPo=r(fgt,"led"),fgt.forEach(t),RPo=r(Axe," \u2014 "),tO=n(Axe,"A",{href:!0});var mgt=s(tO);PPo=r(mgt,"LEDForSequenceClassification"),mgt.forEach(t),BPo=r(Axe," (LED model)"),Axe.forEach(t),IPo=i(j),C7=n(j,"LI",{});var Lxe=s(C7);Yme=n(Lxe,"STRONG",{});var ggt=s(Yme);NPo=r(ggt,"longformer"),ggt.forEach(t),qPo=r(Lxe," \u2014 "),aO=n(Lxe,"A",{href:!0});var hgt=s(aO);jPo=r(hgt,"LongformerForSequenceClassification"),hgt.forEach(t),DPo=r(Lxe," (Longformer model)"),Lxe.forEach(t),GPo=i(j),w7=n(j,"LI",{});var yxe=s(w7);Kme=n(yxe,"STRONG",{});var pgt=s(Kme);OPo=r(pgt,"mbart"),pgt.forEach(t),VPo=r(yxe," \u2014 "),nO=n(yxe,"A",{href:!0});var _gt=s(nO);XPo=r(_gt,"MBartForSequenceClassification"),_gt.forEach(t),zPo=r(yxe," (mBART model)"),yxe.forEach(t),WPo=i(j),A7=n(j,"LI",{});var xxe=s(A7);Zme=n(xxe,"STRONG",{});var ugt=s(Zme);QPo=r(ugt,"megatron-bert"),ugt.forEach(t),HPo=r(xxe," \u2014 "),sO=n(xxe,"A",{href:!0});var bgt=s(sO);UPo=r(bgt,"MegatronBertForSequenceClassification"),bgt.forEach(t),JPo=r(xxe," (Megatron-BERT model)"),xxe.forEach(t),YPo=i(j),L7=n(j,"LI",{});var $xe=s(L7);ege=n($xe,"STRONG",{});var vgt=s(ege);KPo=r(vgt,"mobilebert"),vgt.forEach(t),ZPo=r($xe," \u2014 "),lO=n($xe,"A",{href:!0});var Fgt=s(lO);eBo=r(Fgt,"MobileBertForSequenceClassification"),Fgt.forEach(t),oBo=r($xe," (MobileBERT model)"),$xe.forEach(t),rBo=i(j),y7=n(j,"LI",{});var kxe=s(y7);oge=n(kxe,"STRONG",{});var Tgt=s(oge);tBo=r(Tgt,"mpnet"),Tgt.forEach(t),aBo=r(kxe," \u2014 "),iO=n(kxe,"A",{href:!0});var Mgt=s(iO);nBo=r(Mgt,"MPNetForSequenceClassification"),Mgt.forEach(t),sBo=r(kxe," (MPNet model)"),kxe.forEach(t),lBo=i(j),x7=n(j,"LI",{});var Sxe=s(x7);rge=n(Sxe,"STRONG",{});var Egt=s(rge);iBo=r(Egt,"nystromformer"),Egt.forEach(t),dBo=r(Sxe," \u2014 "),dO=n(Sxe,"A",{href:!0});var Cgt=s(dO);cBo=r(Cgt,"NystromformerForSequenceClassification"),Cgt.forEach(t),fBo=r(Sxe," (Nystr\xF6mformer model)"),Sxe.forEach(t),mBo=i(j),$7=n(j,"LI",{});var Rxe=s($7);tge=n(Rxe,"STRONG",{});var wgt=s(tge);gBo=r(wgt,"openai-gpt"),wgt.forEach(t),hBo=r(Rxe," \u2014 "),cO=n(Rxe,"A",{href:!0});var Agt=s(cO);pBo=r(Agt,"OpenAIGPTForSequenceClassification"),Agt.forEach(t),_Bo=r(Rxe," (OpenAI GPT model)"),Rxe.forEach(t),uBo=i(j),k7=n(j,"LI",{});var Pxe=s(k7);age=n(Pxe,"STRONG",{});var Lgt=s(age);bBo=r(Lgt,"perceiver"),Lgt.forEach(t),vBo=r(Pxe," \u2014 "),fO=n(Pxe,"A",{href:!0});var ygt=s(fO);FBo=r(ygt,"PerceiverForSequenceClassification"),ygt.forEach(t),TBo=r(Pxe," (Perceiver model)"),Pxe.forEach(t),MBo=i(j),S7=n(j,"LI",{});var Bxe=s(S7);nge=n(Bxe,"STRONG",{});var xgt=s(nge);EBo=r(xgt,"plbart"),xgt.forEach(t),CBo=r(Bxe," \u2014 "),mO=n(Bxe,"A",{href:!0});var $gt=s(mO);wBo=r($gt,"PLBartForSequenceClassification"),$gt.forEach(t),ABo=r(Bxe," (PLBart model)"),Bxe.forEach(t),LBo=i(j),R7=n(j,"LI",{});var Ixe=s(R7);sge=n(Ixe,"STRONG",{});var kgt=s(sge);yBo=r(kgt,"qdqbert"),kgt.forEach(t),xBo=r(Ixe," \u2014 "),gO=n(Ixe,"A",{href:!0});var Sgt=s(gO);$Bo=r(Sgt,"QDQBertForSequenceClassification"),Sgt.forEach(t),kBo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),SBo=i(j),P7=n(j,"LI",{});var Nxe=s(P7);lge=n(Nxe,"STRONG",{});var Rgt=s(lge);RBo=r(Rgt,"reformer"),Rgt.forEach(t),PBo=r(Nxe," \u2014 "),hO=n(Nxe,"A",{href:!0});var Pgt=s(hO);BBo=r(Pgt,"ReformerForSequenceClassification"),Pgt.forEach(t),IBo=r(Nxe," (Reformer model)"),Nxe.forEach(t),NBo=i(j),B7=n(j,"LI",{});var qxe=s(B7);ige=n(qxe,"STRONG",{});var Bgt=s(ige);qBo=r(Bgt,"rembert"),Bgt.forEach(t),jBo=r(qxe," \u2014 "),pO=n(qxe,"A",{href:!0});var Igt=s(pO);DBo=r(Igt,"RemBertForSequenceClassification"),Igt.forEach(t),GBo=r(qxe," (RemBERT model)"),qxe.forEach(t),OBo=i(j),I7=n(j,"LI",{});var jxe=s(I7);dge=n(jxe,"STRONG",{});var Ngt=s(dge);VBo=r(Ngt,"roberta"),Ngt.forEach(t),XBo=r(jxe," \u2014 "),_O=n(jxe,"A",{href:!0});var qgt=s(_O);zBo=r(qgt,"RobertaForSequenceClassification"),qgt.forEach(t),WBo=r(jxe," (RoBERTa model)"),jxe.forEach(t),QBo=i(j),N7=n(j,"LI",{});var Dxe=s(N7);cge=n(Dxe,"STRONG",{});var jgt=s(cge);HBo=r(jgt,"roformer"),jgt.forEach(t),UBo=r(Dxe," \u2014 "),uO=n(Dxe,"A",{href:!0});var Dgt=s(uO);JBo=r(Dgt,"RoFormerForSequenceClassification"),Dgt.forEach(t),YBo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),KBo=i(j),q7=n(j,"LI",{});var Gxe=s(q7);fge=n(Gxe,"STRONG",{});var Ggt=s(fge);ZBo=r(Ggt,"squeezebert"),Ggt.forEach(t),eIo=r(Gxe," \u2014 "),bO=n(Gxe,"A",{href:!0});var Ogt=s(bO);oIo=r(Ogt,"SqueezeBertForSequenceClassification"),Ogt.forEach(t),rIo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),tIo=i(j),j7=n(j,"LI",{});var Oxe=s(j7);mge=n(Oxe,"STRONG",{});var Vgt=s(mge);aIo=r(Vgt,"tapas"),Vgt.forEach(t),nIo=r(Oxe," \u2014 "),vO=n(Oxe,"A",{href:!0});var Xgt=s(vO);sIo=r(Xgt,"TapasForSequenceClassification"),Xgt.forEach(t),lIo=r(Oxe," (TAPAS model)"),Oxe.forEach(t),iIo=i(j),D7=n(j,"LI",{});var Vxe=s(D7);gge=n(Vxe,"STRONG",{});var zgt=s(gge);dIo=r(zgt,"transfo-xl"),zgt.forEach(t),cIo=r(Vxe," \u2014 "),FO=n(Vxe,"A",{href:!0});var Wgt=s(FO);fIo=r(Wgt,"TransfoXLForSequenceClassification"),Wgt.forEach(t),mIo=r(Vxe," (Transformer-XL model)"),Vxe.forEach(t),gIo=i(j),G7=n(j,"LI",{});var Xxe=s(G7);hge=n(Xxe,"STRONG",{});var Qgt=s(hge);hIo=r(Qgt,"xlm"),Qgt.forEach(t),pIo=r(Xxe," \u2014 "),TO=n(Xxe,"A",{href:!0});var Hgt=s(TO);_Io=r(Hgt,"XLMForSequenceClassification"),Hgt.forEach(t),uIo=r(Xxe," (XLM model)"),Xxe.forEach(t),bIo=i(j),O7=n(j,"LI",{});var zxe=s(O7);pge=n(zxe,"STRONG",{});var Ugt=s(pge);vIo=r(Ugt,"xlm-roberta"),Ugt.forEach(t),FIo=r(zxe," \u2014 "),MO=n(zxe,"A",{href:!0});var Jgt=s(MO);TIo=r(Jgt,"XLMRobertaForSequenceClassification"),Jgt.forEach(t),MIo=r(zxe," (XLM-RoBERTa model)"),zxe.forEach(t),EIo=i(j),V7=n(j,"LI",{});var Wxe=s(V7);_ge=n(Wxe,"STRONG",{});var Ygt=s(_ge);CIo=r(Ygt,"xlm-roberta-xl"),Ygt.forEach(t),wIo=r(Wxe," \u2014 "),EO=n(Wxe,"A",{href:!0});var Kgt=s(EO);AIo=r(Kgt,"XLMRobertaXLForSequenceClassification"),Kgt.forEach(t),LIo=r(Wxe," (XLM-RoBERTa-XL model)"),Wxe.forEach(t),yIo=i(j),X7=n(j,"LI",{});var Qxe=s(X7);uge=n(Qxe,"STRONG",{});var Zgt=s(uge);xIo=r(Zgt,"xlnet"),Zgt.forEach(t),$Io=r(Qxe," \u2014 "),CO=n(Qxe,"A",{href:!0});var eht=s(CO);kIo=r(eht,"XLNetForSequenceClassification"),eht.forEach(t),SIo=r(Qxe," (XLNet model)"),Qxe.forEach(t),RIo=i(j),z7=n(j,"LI",{});var Hxe=s(z7);bge=n(Hxe,"STRONG",{});var oht=s(bge);PIo=r(oht,"yoso"),oht.forEach(t),BIo=r(Hxe," \u2014 "),wO=n(Hxe,"A",{href:!0});var rht=s(wO);IIo=r(rht,"YosoForSequenceClassification"),rht.forEach(t),NIo=r(Hxe," (YOSO model)"),Hxe.forEach(t),j.forEach(t),qIo=i(sa),W7=n(sa,"P",{});var Uxe=s(W7);jIo=r(Uxe,"The model is set in evaluation mode by default using "),vge=n(Uxe,"CODE",{});var tht=s(vge);DIo=r(tht,"model.eval()"),tht.forEach(t),GIo=r(Uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=n(Uxe,"CODE",{});var aht=s(Fge);OIo=r(aht,"model.train()"),aht.forEach(t),Uxe.forEach(t),VIo=i(sa),T(Q7.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Aje=i(f),Xi=n(f,"H2",{class:!0});var $Ge=s(Xi);H7=n($Ge,"A",{id:!0,class:!0,href:!0});var nht=s(H7);Tge=n(nht,"SPAN",{});var sht=s(Tge);T(VL.$$.fragment,sht),sht.forEach(t),nht.forEach(t),XIo=i($Ge),Mge=n($Ge,"SPAN",{});var lht=s(Mge);zIo=r(lht,"AutoModelForMultipleChoice"),lht.forEach(t),$Ge.forEach(t),Lje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(XL.$$.fragment,Hs),WIo=i(Hs),zi=n(Hs,"P",{});var tee=s(zi);QIo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AO=n(tee,"A",{href:!0});var iht=s(AO);HIo=r(iht,"from_pretrained()"),iht.forEach(t),UIo=r(tee," class method or the "),LO=n(tee,"A",{href:!0});var dht=s(LO);JIo=r(dht,"from_config()"),dht.forEach(t),YIo=r(tee,` class
method.`),tee.forEach(t),KIo=i(Hs),zL=n(Hs,"P",{});var kGe=s(zL);ZIo=r(kGe,"This class cannot be instantiated directly using "),Ege=n(kGe,"CODE",{});var cht=s(Ege);eNo=r(cht,"__init__()"),cht.forEach(t),oNo=r(kGe," (throws an error)."),kGe.forEach(t),rNo=i(Hs),dt=n(Hs,"DIV",{class:!0});var tA=s(dt);T(WL.$$.fragment,tA),tNo=i(tA),Cge=n(tA,"P",{});var fht=s(Cge);aNo=r(fht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fht.forEach(t),nNo=i(tA),Wi=n(tA,"P",{});var aee=s(Wi);sNo=r(aee,`Note:
Loading a model from its configuration file does `),wge=n(aee,"STRONG",{});var mht=s(wge);lNo=r(mht,"not"),mht.forEach(t),iNo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(aee,"A",{href:!0});var ght=s(yO);dNo=r(ght,"from_pretrained()"),ght.forEach(t),cNo=r(aee," to load the model weights."),aee.forEach(t),fNo=i(tA),T(U7.$$.fragment,tA),tA.forEach(t),mNo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(QL.$$.fragment,la),gNo=i(la),Age=n(la,"P",{});var hht=s(Age);hNo=r(hht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hht.forEach(t),pNo=i(la),Pa=n(la,"P",{});var aA=s(Pa);_No=r(aA,"The model class to instantiate is selected based on the "),Lge=n(aA,"CODE",{});var pht=s(Lge);uNo=r(pht,"model_type"),pht.forEach(t),bNo=r(aA,` property of the config object (either
passed as an argument or loaded from `),yge=n(aA,"CODE",{});var _ht=s(yge);vNo=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),FNo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=n(aA,"CODE",{});var uht=s(xge);TNo=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),MNo=r(aA,":"),aA.forEach(t),ENo=i(la),K=n(la,"UL",{});var ee=s(K);J7=n(ee,"LI",{});var Jxe=s(J7);$ge=n(Jxe,"STRONG",{});var bht=s($ge);CNo=r(bht,"albert"),bht.forEach(t),wNo=r(Jxe," \u2014 "),xO=n(Jxe,"A",{href:!0});var vht=s(xO);ANo=r(vht,"AlbertForMultipleChoice"),vht.forEach(t),LNo=r(Jxe," (ALBERT model)"),Jxe.forEach(t),yNo=i(ee),Y7=n(ee,"LI",{});var Yxe=s(Y7);kge=n(Yxe,"STRONG",{});var Fht=s(kge);xNo=r(Fht,"bert"),Fht.forEach(t),$No=r(Yxe," \u2014 "),$O=n(Yxe,"A",{href:!0});var Tht=s($O);kNo=r(Tht,"BertForMultipleChoice"),Tht.forEach(t),SNo=r(Yxe," (BERT model)"),Yxe.forEach(t),RNo=i(ee),K7=n(ee,"LI",{});var Kxe=s(K7);Sge=n(Kxe,"STRONG",{});var Mht=s(Sge);PNo=r(Mht,"big_bird"),Mht.forEach(t),BNo=r(Kxe," \u2014 "),kO=n(Kxe,"A",{href:!0});var Eht=s(kO);INo=r(Eht,"BigBirdForMultipleChoice"),Eht.forEach(t),NNo=r(Kxe," (BigBird model)"),Kxe.forEach(t),qNo=i(ee),Z7=n(ee,"LI",{});var Zxe=s(Z7);Rge=n(Zxe,"STRONG",{});var Cht=s(Rge);jNo=r(Cht,"camembert"),Cht.forEach(t),DNo=r(Zxe," \u2014 "),SO=n(Zxe,"A",{href:!0});var wht=s(SO);GNo=r(wht,"CamembertForMultipleChoice"),wht.forEach(t),ONo=r(Zxe," (CamemBERT model)"),Zxe.forEach(t),VNo=i(ee),eb=n(ee,"LI",{});var e$e=s(eb);Pge=n(e$e,"STRONG",{});var Aht=s(Pge);XNo=r(Aht,"canine"),Aht.forEach(t),zNo=r(e$e," \u2014 "),RO=n(e$e,"A",{href:!0});var Lht=s(RO);WNo=r(Lht,"CanineForMultipleChoice"),Lht.forEach(t),QNo=r(e$e," (CANINE model)"),e$e.forEach(t),HNo=i(ee),ob=n(ee,"LI",{});var o$e=s(ob);Bge=n(o$e,"STRONG",{});var yht=s(Bge);UNo=r(yht,"convbert"),yht.forEach(t),JNo=r(o$e," \u2014 "),PO=n(o$e,"A",{href:!0});var xht=s(PO);YNo=r(xht,"ConvBertForMultipleChoice"),xht.forEach(t),KNo=r(o$e," (ConvBERT model)"),o$e.forEach(t),ZNo=i(ee),rb=n(ee,"LI",{});var r$e=s(rb);Ige=n(r$e,"STRONG",{});var $ht=s(Ige);eqo=r($ht,"data2vec-text"),$ht.forEach(t),oqo=r(r$e," \u2014 "),BO=n(r$e,"A",{href:!0});var kht=s(BO);rqo=r(kht,"Data2VecTextForMultipleChoice"),kht.forEach(t),tqo=r(r$e," (Data2VecText model)"),r$e.forEach(t),aqo=i(ee),tb=n(ee,"LI",{});var t$e=s(tb);Nge=n(t$e,"STRONG",{});var Sht=s(Nge);nqo=r(Sht,"deberta-v2"),Sht.forEach(t),sqo=r(t$e," \u2014 "),IO=n(t$e,"A",{href:!0});var Rht=s(IO);lqo=r(Rht,"DebertaV2ForMultipleChoice"),Rht.forEach(t),iqo=r(t$e," (DeBERTa-v2 model)"),t$e.forEach(t),dqo=i(ee),ab=n(ee,"LI",{});var a$e=s(ab);qge=n(a$e,"STRONG",{});var Pht=s(qge);cqo=r(Pht,"distilbert"),Pht.forEach(t),fqo=r(a$e," \u2014 "),NO=n(a$e,"A",{href:!0});var Bht=s(NO);mqo=r(Bht,"DistilBertForMultipleChoice"),Bht.forEach(t),gqo=r(a$e," (DistilBERT model)"),a$e.forEach(t),hqo=i(ee),nb=n(ee,"LI",{});var n$e=s(nb);jge=n(n$e,"STRONG",{});var Iht=s(jge);pqo=r(Iht,"electra"),Iht.forEach(t),_qo=r(n$e," \u2014 "),qO=n(n$e,"A",{href:!0});var Nht=s(qO);uqo=r(Nht,"ElectraForMultipleChoice"),Nht.forEach(t),bqo=r(n$e," (ELECTRA model)"),n$e.forEach(t),vqo=i(ee),sb=n(ee,"LI",{});var s$e=s(sb);Dge=n(s$e,"STRONG",{});var qht=s(Dge);Fqo=r(qht,"flaubert"),qht.forEach(t),Tqo=r(s$e," \u2014 "),jO=n(s$e,"A",{href:!0});var jht=s(jO);Mqo=r(jht,"FlaubertForMultipleChoice"),jht.forEach(t),Eqo=r(s$e," (FlauBERT model)"),s$e.forEach(t),Cqo=i(ee),lb=n(ee,"LI",{});var l$e=s(lb);Gge=n(l$e,"STRONG",{});var Dht=s(Gge);wqo=r(Dht,"fnet"),Dht.forEach(t),Aqo=r(l$e," \u2014 "),DO=n(l$e,"A",{href:!0});var Ght=s(DO);Lqo=r(Ght,"FNetForMultipleChoice"),Ght.forEach(t),yqo=r(l$e," (FNet model)"),l$e.forEach(t),xqo=i(ee),ib=n(ee,"LI",{});var i$e=s(ib);Oge=n(i$e,"STRONG",{});var Oht=s(Oge);$qo=r(Oht,"funnel"),Oht.forEach(t),kqo=r(i$e," \u2014 "),GO=n(i$e,"A",{href:!0});var Vht=s(GO);Sqo=r(Vht,"FunnelForMultipleChoice"),Vht.forEach(t),Rqo=r(i$e," (Funnel Transformer model)"),i$e.forEach(t),Pqo=i(ee),db=n(ee,"LI",{});var d$e=s(db);Vge=n(d$e,"STRONG",{});var Xht=s(Vge);Bqo=r(Xht,"ibert"),Xht.forEach(t),Iqo=r(d$e," \u2014 "),OO=n(d$e,"A",{href:!0});var zht=s(OO);Nqo=r(zht,"IBertForMultipleChoice"),zht.forEach(t),qqo=r(d$e," (I-BERT model)"),d$e.forEach(t),jqo=i(ee),cb=n(ee,"LI",{});var c$e=s(cb);Xge=n(c$e,"STRONG",{});var Wht=s(Xge);Dqo=r(Wht,"longformer"),Wht.forEach(t),Gqo=r(c$e," \u2014 "),VO=n(c$e,"A",{href:!0});var Qht=s(VO);Oqo=r(Qht,"LongformerForMultipleChoice"),Qht.forEach(t),Vqo=r(c$e," (Longformer model)"),c$e.forEach(t),Xqo=i(ee),fb=n(ee,"LI",{});var f$e=s(fb);zge=n(f$e,"STRONG",{});var Hht=s(zge);zqo=r(Hht,"megatron-bert"),Hht.forEach(t),Wqo=r(f$e," \u2014 "),XO=n(f$e,"A",{href:!0});var Uht=s(XO);Qqo=r(Uht,"MegatronBertForMultipleChoice"),Uht.forEach(t),Hqo=r(f$e," (Megatron-BERT model)"),f$e.forEach(t),Uqo=i(ee),mb=n(ee,"LI",{});var m$e=s(mb);Wge=n(m$e,"STRONG",{});var Jht=s(Wge);Jqo=r(Jht,"mobilebert"),Jht.forEach(t),Yqo=r(m$e," \u2014 "),zO=n(m$e,"A",{href:!0});var Yht=s(zO);Kqo=r(Yht,"MobileBertForMultipleChoice"),Yht.forEach(t),Zqo=r(m$e," (MobileBERT model)"),m$e.forEach(t),ejo=i(ee),gb=n(ee,"LI",{});var g$e=s(gb);Qge=n(g$e,"STRONG",{});var Kht=s(Qge);ojo=r(Kht,"mpnet"),Kht.forEach(t),rjo=r(g$e," \u2014 "),WO=n(g$e,"A",{href:!0});var Zht=s(WO);tjo=r(Zht,"MPNetForMultipleChoice"),Zht.forEach(t),ajo=r(g$e," (MPNet model)"),g$e.forEach(t),njo=i(ee),hb=n(ee,"LI",{});var h$e=s(hb);Hge=n(h$e,"STRONG",{});var ept=s(Hge);sjo=r(ept,"nystromformer"),ept.forEach(t),ljo=r(h$e," \u2014 "),QO=n(h$e,"A",{href:!0});var opt=s(QO);ijo=r(opt,"NystromformerForMultipleChoice"),opt.forEach(t),djo=r(h$e," (Nystr\xF6mformer model)"),h$e.forEach(t),cjo=i(ee),pb=n(ee,"LI",{});var p$e=s(pb);Uge=n(p$e,"STRONG",{});var rpt=s(Uge);fjo=r(rpt,"qdqbert"),rpt.forEach(t),mjo=r(p$e," \u2014 "),HO=n(p$e,"A",{href:!0});var tpt=s(HO);gjo=r(tpt,"QDQBertForMultipleChoice"),tpt.forEach(t),hjo=r(p$e," (QDQBert model)"),p$e.forEach(t),pjo=i(ee),_b=n(ee,"LI",{});var _$e=s(_b);Jge=n(_$e,"STRONG",{});var apt=s(Jge);_jo=r(apt,"rembert"),apt.forEach(t),ujo=r(_$e," \u2014 "),UO=n(_$e,"A",{href:!0});var npt=s(UO);bjo=r(npt,"RemBertForMultipleChoice"),npt.forEach(t),vjo=r(_$e," (RemBERT model)"),_$e.forEach(t),Fjo=i(ee),ub=n(ee,"LI",{});var u$e=s(ub);Yge=n(u$e,"STRONG",{});var spt=s(Yge);Tjo=r(spt,"roberta"),spt.forEach(t),Mjo=r(u$e," \u2014 "),JO=n(u$e,"A",{href:!0});var lpt=s(JO);Ejo=r(lpt,"RobertaForMultipleChoice"),lpt.forEach(t),Cjo=r(u$e," (RoBERTa model)"),u$e.forEach(t),wjo=i(ee),bb=n(ee,"LI",{});var b$e=s(bb);Kge=n(b$e,"STRONG",{});var ipt=s(Kge);Ajo=r(ipt,"roformer"),ipt.forEach(t),Ljo=r(b$e," \u2014 "),YO=n(b$e,"A",{href:!0});var dpt=s(YO);yjo=r(dpt,"RoFormerForMultipleChoice"),dpt.forEach(t),xjo=r(b$e," (RoFormer model)"),b$e.forEach(t),$jo=i(ee),vb=n(ee,"LI",{});var v$e=s(vb);Zge=n(v$e,"STRONG",{});var cpt=s(Zge);kjo=r(cpt,"squeezebert"),cpt.forEach(t),Sjo=r(v$e," \u2014 "),KO=n(v$e,"A",{href:!0});var fpt=s(KO);Rjo=r(fpt,"SqueezeBertForMultipleChoice"),fpt.forEach(t),Pjo=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),Bjo=i(ee),Fb=n(ee,"LI",{});var F$e=s(Fb);ehe=n(F$e,"STRONG",{});var mpt=s(ehe);Ijo=r(mpt,"xlm"),mpt.forEach(t),Njo=r(F$e," \u2014 "),ZO=n(F$e,"A",{href:!0});var gpt=s(ZO);qjo=r(gpt,"XLMForMultipleChoice"),gpt.forEach(t),jjo=r(F$e," (XLM model)"),F$e.forEach(t),Djo=i(ee),Tb=n(ee,"LI",{});var T$e=s(Tb);ohe=n(T$e,"STRONG",{});var hpt=s(ohe);Gjo=r(hpt,"xlm-roberta"),hpt.forEach(t),Ojo=r(T$e," \u2014 "),eV=n(T$e,"A",{href:!0});var ppt=s(eV);Vjo=r(ppt,"XLMRobertaForMultipleChoice"),ppt.forEach(t),Xjo=r(T$e," (XLM-RoBERTa model)"),T$e.forEach(t),zjo=i(ee),Mb=n(ee,"LI",{});var M$e=s(Mb);rhe=n(M$e,"STRONG",{});var _pt=s(rhe);Wjo=r(_pt,"xlm-roberta-xl"),_pt.forEach(t),Qjo=r(M$e," \u2014 "),oV=n(M$e,"A",{href:!0});var upt=s(oV);Hjo=r(upt,"XLMRobertaXLForMultipleChoice"),upt.forEach(t),Ujo=r(M$e," (XLM-RoBERTa-XL model)"),M$e.forEach(t),Jjo=i(ee),Eb=n(ee,"LI",{});var E$e=s(Eb);the=n(E$e,"STRONG",{});var bpt=s(the);Yjo=r(bpt,"xlnet"),bpt.forEach(t),Kjo=r(E$e," \u2014 "),rV=n(E$e,"A",{href:!0});var vpt=s(rV);Zjo=r(vpt,"XLNetForMultipleChoice"),vpt.forEach(t),eDo=r(E$e," (XLNet model)"),E$e.forEach(t),oDo=i(ee),Cb=n(ee,"LI",{});var C$e=s(Cb);ahe=n(C$e,"STRONG",{});var Fpt=s(ahe);rDo=r(Fpt,"yoso"),Fpt.forEach(t),tDo=r(C$e," \u2014 "),tV=n(C$e,"A",{href:!0});var Tpt=s(tV);aDo=r(Tpt,"YosoForMultipleChoice"),Tpt.forEach(t),nDo=r(C$e," (YOSO model)"),C$e.forEach(t),ee.forEach(t),sDo=i(la),wb=n(la,"P",{});var w$e=s(wb);lDo=r(w$e,"The model is set in evaluation mode by default using "),nhe=n(w$e,"CODE",{});var Mpt=s(nhe);iDo=r(Mpt,"model.eval()"),Mpt.forEach(t),dDo=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(w$e,"CODE",{});var Ept=s(she);cDo=r(Ept,"model.train()"),Ept.forEach(t),w$e.forEach(t),fDo=i(la),T(Ab.$$.fragment,la),la.forEach(t),Hs.forEach(t),yje=i(f),Qi=n(f,"H2",{class:!0});var SGe=s(Qi);Lb=n(SGe,"A",{id:!0,class:!0,href:!0});var Cpt=s(Lb);lhe=n(Cpt,"SPAN",{});var wpt=s(lhe);T(HL.$$.fragment,wpt),wpt.forEach(t),Cpt.forEach(t),mDo=i(SGe),ihe=n(SGe,"SPAN",{});var Apt=s(ihe);gDo=r(Apt,"AutoModelForNextSentencePrediction"),Apt.forEach(t),SGe.forEach(t),xje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(UL.$$.fragment,Us),hDo=i(Us),Hi=n(Us,"P",{});var nee=s(Hi);pDo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aV=n(nee,"A",{href:!0});var Lpt=s(aV);_Do=r(Lpt,"from_pretrained()"),Lpt.forEach(t),uDo=r(nee," class method or the "),nV=n(nee,"A",{href:!0});var ypt=s(nV);bDo=r(ypt,"from_config()"),ypt.forEach(t),vDo=r(nee,` class
method.`),nee.forEach(t),FDo=i(Us),JL=n(Us,"P",{});var RGe=s(JL);TDo=r(RGe,"This class cannot be instantiated directly using "),dhe=n(RGe,"CODE",{});var xpt=s(dhe);MDo=r(xpt,"__init__()"),xpt.forEach(t),EDo=r(RGe," (throws an error)."),RGe.forEach(t),CDo=i(Us),ct=n(Us,"DIV",{class:!0});var nA=s(ct);T(YL.$$.fragment,nA),wDo=i(nA),che=n(nA,"P",{});var $pt=s(che);ADo=r($pt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$pt.forEach(t),LDo=i(nA),Ui=n(nA,"P",{});var see=s(Ui);yDo=r(see,`Note:
Loading a model from its configuration file does `),fhe=n(see,"STRONG",{});var kpt=s(fhe);xDo=r(kpt,"not"),kpt.forEach(t),$Do=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(see,"A",{href:!0});var Spt=s(sV);kDo=r(Spt,"from_pretrained()"),Spt.forEach(t),SDo=r(see," to load the model weights."),see.forEach(t),RDo=i(nA),T(yb.$$.fragment,nA),nA.forEach(t),PDo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(KL.$$.fragment,ia),BDo=i(ia),mhe=n(ia,"P",{});var Rpt=s(mhe);IDo=r(Rpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Rpt.forEach(t),NDo=i(ia),Ba=n(ia,"P",{});var sA=s(Ba);qDo=r(sA,"The model class to instantiate is selected based on the "),ghe=n(sA,"CODE",{});var Ppt=s(ghe);jDo=r(Ppt,"model_type"),Ppt.forEach(t),DDo=r(sA,` property of the config object (either
passed as an argument or loaded from `),hhe=n(sA,"CODE",{});var Bpt=s(hhe);GDo=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),ODo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(sA,"CODE",{});var Ipt=s(phe);VDo=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),XDo=r(sA,":"),sA.forEach(t),zDo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);xb=n(Js,"LI",{});var A$e=s(xb);_he=n(A$e,"STRONG",{});var Npt=s(_he);WDo=r(Npt,"bert"),Npt.forEach(t),QDo=r(A$e," \u2014 "),lV=n(A$e,"A",{href:!0});var qpt=s(lV);HDo=r(qpt,"BertForNextSentencePrediction"),qpt.forEach(t),UDo=r(A$e," (BERT model)"),A$e.forEach(t),JDo=i(Js),$b=n(Js,"LI",{});var L$e=s($b);uhe=n(L$e,"STRONG",{});var jpt=s(uhe);YDo=r(jpt,"fnet"),jpt.forEach(t),KDo=r(L$e," \u2014 "),iV=n(L$e,"A",{href:!0});var Dpt=s(iV);ZDo=r(Dpt,"FNetForNextSentencePrediction"),Dpt.forEach(t),eGo=r(L$e," (FNet model)"),L$e.forEach(t),oGo=i(Js),kb=n(Js,"LI",{});var y$e=s(kb);bhe=n(y$e,"STRONG",{});var Gpt=s(bhe);rGo=r(Gpt,"megatron-bert"),Gpt.forEach(t),tGo=r(y$e," \u2014 "),dV=n(y$e,"A",{href:!0});var Opt=s(dV);aGo=r(Opt,"MegatronBertForNextSentencePrediction"),Opt.forEach(t),nGo=r(y$e," (Megatron-BERT model)"),y$e.forEach(t),sGo=i(Js),Sb=n(Js,"LI",{});var x$e=s(Sb);vhe=n(x$e,"STRONG",{});var Vpt=s(vhe);lGo=r(Vpt,"mobilebert"),Vpt.forEach(t),iGo=r(x$e," \u2014 "),cV=n(x$e,"A",{href:!0});var Xpt=s(cV);dGo=r(Xpt,"MobileBertForNextSentencePrediction"),Xpt.forEach(t),cGo=r(x$e," (MobileBERT model)"),x$e.forEach(t),fGo=i(Js),Rb=n(Js,"LI",{});var $$e=s(Rb);Fhe=n($$e,"STRONG",{});var zpt=s(Fhe);mGo=r(zpt,"qdqbert"),zpt.forEach(t),gGo=r($$e," \u2014 "),fV=n($$e,"A",{href:!0});var Wpt=s(fV);hGo=r(Wpt,"QDQBertForNextSentencePrediction"),Wpt.forEach(t),pGo=r($$e," (QDQBert model)"),$$e.forEach(t),Js.forEach(t),_Go=i(ia),Pb=n(ia,"P",{});var k$e=s(Pb);uGo=r(k$e,"The model is set in evaluation mode by default using "),The=n(k$e,"CODE",{});var Qpt=s(The);bGo=r(Qpt,"model.eval()"),Qpt.forEach(t),vGo=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(k$e,"CODE",{});var Hpt=s(Mhe);FGo=r(Hpt,"model.train()"),Hpt.forEach(t),k$e.forEach(t),TGo=i(ia),T(Bb.$$.fragment,ia),ia.forEach(t),Us.forEach(t),$je=i(f),Ji=n(f,"H2",{class:!0});var PGe=s(Ji);Ib=n(PGe,"A",{id:!0,class:!0,href:!0});var Upt=s(Ib);Ehe=n(Upt,"SPAN",{});var Jpt=s(Ehe);T(ZL.$$.fragment,Jpt),Jpt.forEach(t),Upt.forEach(t),MGo=i(PGe),Che=n(PGe,"SPAN",{});var Ypt=s(Che);EGo=r(Ypt,"AutoModelForTokenClassification"),Ypt.forEach(t),PGe.forEach(t),kje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(ey.$$.fragment,Ys),CGo=i(Ys),Yi=n(Ys,"P",{});var lee=s(Yi);wGo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mV=n(lee,"A",{href:!0});var Kpt=s(mV);AGo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),LGo=r(lee," class method or the "),gV=n(lee,"A",{href:!0});var Zpt=s(gV);yGo=r(Zpt,"from_config()"),Zpt.forEach(t),xGo=r(lee,` class
method.`),lee.forEach(t),$Go=i(Ys),oy=n(Ys,"P",{});var BGe=s(oy);kGo=r(BGe,"This class cannot be instantiated directly using "),whe=n(BGe,"CODE",{});var e_t=s(whe);SGo=r(e_t,"__init__()"),e_t.forEach(t),RGo=r(BGe," (throws an error)."),BGe.forEach(t),PGo=i(Ys),ft=n(Ys,"DIV",{class:!0});var lA=s(ft);T(ry.$$.fragment,lA),BGo=i(lA),Ahe=n(lA,"P",{});var o_t=s(Ahe);IGo=r(o_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o_t.forEach(t),NGo=i(lA),Ki=n(lA,"P",{});var iee=s(Ki);qGo=r(iee,`Note:
Loading a model from its configuration file does `),Lhe=n(iee,"STRONG",{});var r_t=s(Lhe);jGo=r(r_t,"not"),r_t.forEach(t),DGo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hV=n(iee,"A",{href:!0});var t_t=s(hV);GGo=r(t_t,"from_pretrained()"),t_t.forEach(t),OGo=r(iee," to load the model weights."),iee.forEach(t),VGo=i(lA),T(Nb.$$.fragment,lA),lA.forEach(t),XGo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(ty.$$.fragment,da),zGo=i(da),yhe=n(da,"P",{});var a_t=s(yhe);WGo=r(a_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),a_t.forEach(t),QGo=i(da),Ia=n(da,"P",{});var iA=s(Ia);HGo=r(iA,"The model class to instantiate is selected based on the "),xhe=n(iA,"CODE",{});var n_t=s(xhe);UGo=r(n_t,"model_type"),n_t.forEach(t),JGo=r(iA,` property of the config object (either
passed as an argument or loaded from `),$he=n(iA,"CODE",{});var s_t=s($he);YGo=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),KGo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(iA,"CODE",{});var l_t=s(khe);ZGo=r(l_t,"pretrained_model_name_or_path"),l_t.forEach(t),eOo=r(iA,":"),iA.forEach(t),oOo=i(da),U=n(da,"UL",{});var J=s(U);qb=n(J,"LI",{});var S$e=s(qb);She=n(S$e,"STRONG",{});var i_t=s(She);rOo=r(i_t,"albert"),i_t.forEach(t),tOo=r(S$e," \u2014 "),pV=n(S$e,"A",{href:!0});var d_t=s(pV);aOo=r(d_t,"AlbertForTokenClassification"),d_t.forEach(t),nOo=r(S$e," (ALBERT model)"),S$e.forEach(t),sOo=i(J),jb=n(J,"LI",{});var R$e=s(jb);Rhe=n(R$e,"STRONG",{});var c_t=s(Rhe);lOo=r(c_t,"bert"),c_t.forEach(t),iOo=r(R$e," \u2014 "),_V=n(R$e,"A",{href:!0});var f_t=s(_V);dOo=r(f_t,"BertForTokenClassification"),f_t.forEach(t),cOo=r(R$e," (BERT model)"),R$e.forEach(t),fOo=i(J),Db=n(J,"LI",{});var P$e=s(Db);Phe=n(P$e,"STRONG",{});var m_t=s(Phe);mOo=r(m_t,"big_bird"),m_t.forEach(t),gOo=r(P$e," \u2014 "),uV=n(P$e,"A",{href:!0});var g_t=s(uV);hOo=r(g_t,"BigBirdForTokenClassification"),g_t.forEach(t),pOo=r(P$e," (BigBird model)"),P$e.forEach(t),_Oo=i(J),Gb=n(J,"LI",{});var B$e=s(Gb);Bhe=n(B$e,"STRONG",{});var h_t=s(Bhe);uOo=r(h_t,"camembert"),h_t.forEach(t),bOo=r(B$e," \u2014 "),bV=n(B$e,"A",{href:!0});var p_t=s(bV);vOo=r(p_t,"CamembertForTokenClassification"),p_t.forEach(t),FOo=r(B$e," (CamemBERT model)"),B$e.forEach(t),TOo=i(J),Ob=n(J,"LI",{});var I$e=s(Ob);Ihe=n(I$e,"STRONG",{});var __t=s(Ihe);MOo=r(__t,"canine"),__t.forEach(t),EOo=r(I$e," \u2014 "),vV=n(I$e,"A",{href:!0});var u_t=s(vV);COo=r(u_t,"CanineForTokenClassification"),u_t.forEach(t),wOo=r(I$e," (CANINE model)"),I$e.forEach(t),AOo=i(J),Vb=n(J,"LI",{});var N$e=s(Vb);Nhe=n(N$e,"STRONG",{});var b_t=s(Nhe);LOo=r(b_t,"convbert"),b_t.forEach(t),yOo=r(N$e," \u2014 "),FV=n(N$e,"A",{href:!0});var v_t=s(FV);xOo=r(v_t,"ConvBertForTokenClassification"),v_t.forEach(t),$Oo=r(N$e," (ConvBERT model)"),N$e.forEach(t),kOo=i(J),Xb=n(J,"LI",{});var q$e=s(Xb);qhe=n(q$e,"STRONG",{});var F_t=s(qhe);SOo=r(F_t,"data2vec-text"),F_t.forEach(t),ROo=r(q$e," \u2014 "),TV=n(q$e,"A",{href:!0});var T_t=s(TV);POo=r(T_t,"Data2VecTextForTokenClassification"),T_t.forEach(t),BOo=r(q$e," (Data2VecText model)"),q$e.forEach(t),IOo=i(J),zb=n(J,"LI",{});var j$e=s(zb);jhe=n(j$e,"STRONG",{});var M_t=s(jhe);NOo=r(M_t,"deberta"),M_t.forEach(t),qOo=r(j$e," \u2014 "),MV=n(j$e,"A",{href:!0});var E_t=s(MV);jOo=r(E_t,"DebertaForTokenClassification"),E_t.forEach(t),DOo=r(j$e," (DeBERTa model)"),j$e.forEach(t),GOo=i(J),Wb=n(J,"LI",{});var D$e=s(Wb);Dhe=n(D$e,"STRONG",{});var C_t=s(Dhe);OOo=r(C_t,"deberta-v2"),C_t.forEach(t),VOo=r(D$e," \u2014 "),EV=n(D$e,"A",{href:!0});var w_t=s(EV);XOo=r(w_t,"DebertaV2ForTokenClassification"),w_t.forEach(t),zOo=r(D$e," (DeBERTa-v2 model)"),D$e.forEach(t),WOo=i(J),Qb=n(J,"LI",{});var G$e=s(Qb);Ghe=n(G$e,"STRONG",{});var A_t=s(Ghe);QOo=r(A_t,"distilbert"),A_t.forEach(t),HOo=r(G$e," \u2014 "),CV=n(G$e,"A",{href:!0});var L_t=s(CV);UOo=r(L_t,"DistilBertForTokenClassification"),L_t.forEach(t),JOo=r(G$e," (DistilBERT model)"),G$e.forEach(t),YOo=i(J),Hb=n(J,"LI",{});var O$e=s(Hb);Ohe=n(O$e,"STRONG",{});var y_t=s(Ohe);KOo=r(y_t,"electra"),y_t.forEach(t),ZOo=r(O$e," \u2014 "),wV=n(O$e,"A",{href:!0});var x_t=s(wV);eVo=r(x_t,"ElectraForTokenClassification"),x_t.forEach(t),oVo=r(O$e," (ELECTRA model)"),O$e.forEach(t),rVo=i(J),Ub=n(J,"LI",{});var V$e=s(Ub);Vhe=n(V$e,"STRONG",{});var $_t=s(Vhe);tVo=r($_t,"flaubert"),$_t.forEach(t),aVo=r(V$e," \u2014 "),AV=n(V$e,"A",{href:!0});var k_t=s(AV);nVo=r(k_t,"FlaubertForTokenClassification"),k_t.forEach(t),sVo=r(V$e," (FlauBERT model)"),V$e.forEach(t),lVo=i(J),Jb=n(J,"LI",{});var X$e=s(Jb);Xhe=n(X$e,"STRONG",{});var S_t=s(Xhe);iVo=r(S_t,"fnet"),S_t.forEach(t),dVo=r(X$e," \u2014 "),LV=n(X$e,"A",{href:!0});var R_t=s(LV);cVo=r(R_t,"FNetForTokenClassification"),R_t.forEach(t),fVo=r(X$e," (FNet model)"),X$e.forEach(t),mVo=i(J),Yb=n(J,"LI",{});var z$e=s(Yb);zhe=n(z$e,"STRONG",{});var P_t=s(zhe);gVo=r(P_t,"funnel"),P_t.forEach(t),hVo=r(z$e," \u2014 "),yV=n(z$e,"A",{href:!0});var B_t=s(yV);pVo=r(B_t,"FunnelForTokenClassification"),B_t.forEach(t),_Vo=r(z$e," (Funnel Transformer model)"),z$e.forEach(t),uVo=i(J),Kb=n(J,"LI",{});var W$e=s(Kb);Whe=n(W$e,"STRONG",{});var I_t=s(Whe);bVo=r(I_t,"gpt2"),I_t.forEach(t),vVo=r(W$e," \u2014 "),xV=n(W$e,"A",{href:!0});var N_t=s(xV);FVo=r(N_t,"GPT2ForTokenClassification"),N_t.forEach(t),TVo=r(W$e," (OpenAI GPT-2 model)"),W$e.forEach(t),MVo=i(J),Zb=n(J,"LI",{});var Q$e=s(Zb);Qhe=n(Q$e,"STRONG",{});var q_t=s(Qhe);EVo=r(q_t,"ibert"),q_t.forEach(t),CVo=r(Q$e," \u2014 "),$V=n(Q$e,"A",{href:!0});var j_t=s($V);wVo=r(j_t,"IBertForTokenClassification"),j_t.forEach(t),AVo=r(Q$e," (I-BERT model)"),Q$e.forEach(t),LVo=i(J),e2=n(J,"LI",{});var H$e=s(e2);Hhe=n(H$e,"STRONG",{});var D_t=s(Hhe);yVo=r(D_t,"layoutlm"),D_t.forEach(t),xVo=r(H$e," \u2014 "),kV=n(H$e,"A",{href:!0});var G_t=s(kV);$Vo=r(G_t,"LayoutLMForTokenClassification"),G_t.forEach(t),kVo=r(H$e," (LayoutLM model)"),H$e.forEach(t),SVo=i(J),o2=n(J,"LI",{});var U$e=s(o2);Uhe=n(U$e,"STRONG",{});var O_t=s(Uhe);RVo=r(O_t,"layoutlmv2"),O_t.forEach(t),PVo=r(U$e," \u2014 "),SV=n(U$e,"A",{href:!0});var V_t=s(SV);BVo=r(V_t,"LayoutLMv2ForTokenClassification"),V_t.forEach(t),IVo=r(U$e," (LayoutLMv2 model)"),U$e.forEach(t),NVo=i(J),r2=n(J,"LI",{});var J$e=s(r2);Jhe=n(J$e,"STRONG",{});var X_t=s(Jhe);qVo=r(X_t,"layoutlmv3"),X_t.forEach(t),jVo=r(J$e," \u2014 "),RV=n(J$e,"A",{href:!0});var z_t=s(RV);DVo=r(z_t,"LayoutLMv3ForTokenClassification"),z_t.forEach(t),GVo=r(J$e," (LayoutLMv3 model)"),J$e.forEach(t),OVo=i(J),t2=n(J,"LI",{});var Y$e=s(t2);Yhe=n(Y$e,"STRONG",{});var W_t=s(Yhe);VVo=r(W_t,"longformer"),W_t.forEach(t),XVo=r(Y$e," \u2014 "),PV=n(Y$e,"A",{href:!0});var Q_t=s(PV);zVo=r(Q_t,"LongformerForTokenClassification"),Q_t.forEach(t),WVo=r(Y$e," (Longformer model)"),Y$e.forEach(t),QVo=i(J),a2=n(J,"LI",{});var K$e=s(a2);Khe=n(K$e,"STRONG",{});var H_t=s(Khe);HVo=r(H_t,"megatron-bert"),H_t.forEach(t),UVo=r(K$e," \u2014 "),BV=n(K$e,"A",{href:!0});var U_t=s(BV);JVo=r(U_t,"MegatronBertForTokenClassification"),U_t.forEach(t),YVo=r(K$e," (Megatron-BERT model)"),K$e.forEach(t),KVo=i(J),n2=n(J,"LI",{});var Z$e=s(n2);Zhe=n(Z$e,"STRONG",{});var J_t=s(Zhe);ZVo=r(J_t,"mobilebert"),J_t.forEach(t),eXo=r(Z$e," \u2014 "),IV=n(Z$e,"A",{href:!0});var Y_t=s(IV);oXo=r(Y_t,"MobileBertForTokenClassification"),Y_t.forEach(t),rXo=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),tXo=i(J),s2=n(J,"LI",{});var eke=s(s2);epe=n(eke,"STRONG",{});var K_t=s(epe);aXo=r(K_t,"mpnet"),K_t.forEach(t),nXo=r(eke," \u2014 "),NV=n(eke,"A",{href:!0});var Z_t=s(NV);sXo=r(Z_t,"MPNetForTokenClassification"),Z_t.forEach(t),lXo=r(eke," (MPNet model)"),eke.forEach(t),iXo=i(J),l2=n(J,"LI",{});var oke=s(l2);ope=n(oke,"STRONG",{});var eut=s(ope);dXo=r(eut,"nystromformer"),eut.forEach(t),cXo=r(oke," \u2014 "),qV=n(oke,"A",{href:!0});var out=s(qV);fXo=r(out,"NystromformerForTokenClassification"),out.forEach(t),mXo=r(oke," (Nystr\xF6mformer model)"),oke.forEach(t),gXo=i(J),i2=n(J,"LI",{});var rke=s(i2);rpe=n(rke,"STRONG",{});var rut=s(rpe);hXo=r(rut,"qdqbert"),rut.forEach(t),pXo=r(rke," \u2014 "),jV=n(rke,"A",{href:!0});var tut=s(jV);_Xo=r(tut,"QDQBertForTokenClassification"),tut.forEach(t),uXo=r(rke," (QDQBert model)"),rke.forEach(t),bXo=i(J),d2=n(J,"LI",{});var tke=s(d2);tpe=n(tke,"STRONG",{});var aut=s(tpe);vXo=r(aut,"rembert"),aut.forEach(t),FXo=r(tke," \u2014 "),DV=n(tke,"A",{href:!0});var nut=s(DV);TXo=r(nut,"RemBertForTokenClassification"),nut.forEach(t),MXo=r(tke," (RemBERT model)"),tke.forEach(t),EXo=i(J),c2=n(J,"LI",{});var ake=s(c2);ape=n(ake,"STRONG",{});var sut=s(ape);CXo=r(sut,"roberta"),sut.forEach(t),wXo=r(ake," \u2014 "),GV=n(ake,"A",{href:!0});var lut=s(GV);AXo=r(lut,"RobertaForTokenClassification"),lut.forEach(t),LXo=r(ake," (RoBERTa model)"),ake.forEach(t),yXo=i(J),f2=n(J,"LI",{});var nke=s(f2);npe=n(nke,"STRONG",{});var iut=s(npe);xXo=r(iut,"roformer"),iut.forEach(t),$Xo=r(nke," \u2014 "),OV=n(nke,"A",{href:!0});var dut=s(OV);kXo=r(dut,"RoFormerForTokenClassification"),dut.forEach(t),SXo=r(nke," (RoFormer model)"),nke.forEach(t),RXo=i(J),m2=n(J,"LI",{});var ske=s(m2);spe=n(ske,"STRONG",{});var cut=s(spe);PXo=r(cut,"squeezebert"),cut.forEach(t),BXo=r(ske," \u2014 "),VV=n(ske,"A",{href:!0});var fut=s(VV);IXo=r(fut,"SqueezeBertForTokenClassification"),fut.forEach(t),NXo=r(ske," (SqueezeBERT model)"),ske.forEach(t),qXo=i(J),g2=n(J,"LI",{});var lke=s(g2);lpe=n(lke,"STRONG",{});var mut=s(lpe);jXo=r(mut,"xlm"),mut.forEach(t),DXo=r(lke," \u2014 "),XV=n(lke,"A",{href:!0});var gut=s(XV);GXo=r(gut,"XLMForTokenClassification"),gut.forEach(t),OXo=r(lke," (XLM model)"),lke.forEach(t),VXo=i(J),h2=n(J,"LI",{});var ike=s(h2);ipe=n(ike,"STRONG",{});var hut=s(ipe);XXo=r(hut,"xlm-roberta"),hut.forEach(t),zXo=r(ike," \u2014 "),zV=n(ike,"A",{href:!0});var put=s(zV);WXo=r(put,"XLMRobertaForTokenClassification"),put.forEach(t),QXo=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),HXo=i(J),p2=n(J,"LI",{});var dke=s(p2);dpe=n(dke,"STRONG",{});var _ut=s(dpe);UXo=r(_ut,"xlm-roberta-xl"),_ut.forEach(t),JXo=r(dke," \u2014 "),WV=n(dke,"A",{href:!0});var uut=s(WV);YXo=r(uut,"XLMRobertaXLForTokenClassification"),uut.forEach(t),KXo=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),ZXo=i(J),_2=n(J,"LI",{});var cke=s(_2);cpe=n(cke,"STRONG",{});var but=s(cpe);ezo=r(but,"xlnet"),but.forEach(t),ozo=r(cke," \u2014 "),QV=n(cke,"A",{href:!0});var vut=s(QV);rzo=r(vut,"XLNetForTokenClassification"),vut.forEach(t),tzo=r(cke," (XLNet model)"),cke.forEach(t),azo=i(J),u2=n(J,"LI",{});var fke=s(u2);fpe=n(fke,"STRONG",{});var Fut=s(fpe);nzo=r(Fut,"yoso"),Fut.forEach(t),szo=r(fke," \u2014 "),HV=n(fke,"A",{href:!0});var Tut=s(HV);lzo=r(Tut,"YosoForTokenClassification"),Tut.forEach(t),izo=r(fke," (YOSO model)"),fke.forEach(t),J.forEach(t),dzo=i(da),b2=n(da,"P",{});var mke=s(b2);czo=r(mke,"The model is set in evaluation mode by default using "),mpe=n(mke,"CODE",{});var Mut=s(mpe);fzo=r(Mut,"model.eval()"),Mut.forEach(t),mzo=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(mke,"CODE",{});var Eut=s(gpe);gzo=r(Eut,"model.train()"),Eut.forEach(t),mke.forEach(t),hzo=i(da),T(v2.$$.fragment,da),da.forEach(t),Ys.forEach(t),Sje=i(f),Zi=n(f,"H2",{class:!0});var IGe=s(Zi);F2=n(IGe,"A",{id:!0,class:!0,href:!0});var Cut=s(F2);hpe=n(Cut,"SPAN",{});var wut=s(hpe);T(ay.$$.fragment,wut),wut.forEach(t),Cut.forEach(t),pzo=i(IGe),ppe=n(IGe,"SPAN",{});var Aut=s(ppe);_zo=r(Aut,"AutoModelForQuestionAnswering"),Aut.forEach(t),IGe.forEach(t),Rje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(ny.$$.fragment,Ks),uzo=i(Ks),ed=n(Ks,"P",{});var dee=s(ed);bzo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UV=n(dee,"A",{href:!0});var Lut=s(UV);vzo=r(Lut,"from_pretrained()"),Lut.forEach(t),Fzo=r(dee," class method or the "),JV=n(dee,"A",{href:!0});var yut=s(JV);Tzo=r(yut,"from_config()"),yut.forEach(t),Mzo=r(dee,` class
method.`),dee.forEach(t),Ezo=i(Ks),sy=n(Ks,"P",{});var NGe=s(sy);Czo=r(NGe,"This class cannot be instantiated directly using "),_pe=n(NGe,"CODE",{});var xut=s(_pe);wzo=r(xut,"__init__()"),xut.forEach(t),Azo=r(NGe," (throws an error)."),NGe.forEach(t),Lzo=i(Ks),mt=n(Ks,"DIV",{class:!0});var dA=s(mt);T(ly.$$.fragment,dA),yzo=i(dA),upe=n(dA,"P",{});var $ut=s(upe);xzo=r($ut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$ut.forEach(t),$zo=i(dA),od=n(dA,"P",{});var cee=s(od);kzo=r(cee,`Note:
Loading a model from its configuration file does `),bpe=n(cee,"STRONG",{});var kut=s(bpe);Szo=r(kut,"not"),kut.forEach(t),Rzo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(cee,"A",{href:!0});var Sut=s(YV);Pzo=r(Sut,"from_pretrained()"),Sut.forEach(t),Bzo=r(cee," to load the model weights."),cee.forEach(t),Izo=i(dA),T(T2.$$.fragment,dA),dA.forEach(t),Nzo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(iy.$$.fragment,ca),qzo=i(ca),vpe=n(ca,"P",{});var Rut=s(vpe);jzo=r(Rut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Rut.forEach(t),Dzo=i(ca),Na=n(ca,"P",{});var cA=s(Na);Gzo=r(cA,"The model class to instantiate is selected based on the "),Fpe=n(cA,"CODE",{});var Put=s(Fpe);Ozo=r(Put,"model_type"),Put.forEach(t),Vzo=r(cA,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(cA,"CODE",{});var But=s(Tpe);Xzo=r(But,"pretrained_model_name_or_path"),But.forEach(t),zzo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(cA,"CODE",{});var Iut=s(Mpe);Wzo=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),Qzo=r(cA,":"),cA.forEach(t),Hzo=i(ca),V=n(ca,"UL",{});var X=s(V);M2=n(X,"LI",{});var gke=s(M2);Epe=n(gke,"STRONG",{});var Nut=s(Epe);Uzo=r(Nut,"albert"),Nut.forEach(t),Jzo=r(gke," \u2014 "),KV=n(gke,"A",{href:!0});var qut=s(KV);Yzo=r(qut,"AlbertForQuestionAnswering"),qut.forEach(t),Kzo=r(gke," (ALBERT model)"),gke.forEach(t),Zzo=i(X),E2=n(X,"LI",{});var hke=s(E2);Cpe=n(hke,"STRONG",{});var jut=s(Cpe);eWo=r(jut,"bart"),jut.forEach(t),oWo=r(hke," \u2014 "),ZV=n(hke,"A",{href:!0});var Dut=s(ZV);rWo=r(Dut,"BartForQuestionAnswering"),Dut.forEach(t),tWo=r(hke," (BART model)"),hke.forEach(t),aWo=i(X),C2=n(X,"LI",{});var pke=s(C2);wpe=n(pke,"STRONG",{});var Gut=s(wpe);nWo=r(Gut,"bert"),Gut.forEach(t),sWo=r(pke," \u2014 "),eX=n(pke,"A",{href:!0});var Out=s(eX);lWo=r(Out,"BertForQuestionAnswering"),Out.forEach(t),iWo=r(pke," (BERT model)"),pke.forEach(t),dWo=i(X),w2=n(X,"LI",{});var _ke=s(w2);Ape=n(_ke,"STRONG",{});var Vut=s(Ape);cWo=r(Vut,"big_bird"),Vut.forEach(t),fWo=r(_ke," \u2014 "),oX=n(_ke,"A",{href:!0});var Xut=s(oX);mWo=r(Xut,"BigBirdForQuestionAnswering"),Xut.forEach(t),gWo=r(_ke," (BigBird model)"),_ke.forEach(t),hWo=i(X),A2=n(X,"LI",{});var uke=s(A2);Lpe=n(uke,"STRONG",{});var zut=s(Lpe);pWo=r(zut,"bigbird_pegasus"),zut.forEach(t),_Wo=r(uke," \u2014 "),rX=n(uke,"A",{href:!0});var Wut=s(rX);uWo=r(Wut,"BigBirdPegasusForQuestionAnswering"),Wut.forEach(t),bWo=r(uke," (BigBird-Pegasus model)"),uke.forEach(t),vWo=i(X),L2=n(X,"LI",{});var bke=s(L2);ype=n(bke,"STRONG",{});var Qut=s(ype);FWo=r(Qut,"camembert"),Qut.forEach(t),TWo=r(bke," \u2014 "),tX=n(bke,"A",{href:!0});var Hut=s(tX);MWo=r(Hut,"CamembertForQuestionAnswering"),Hut.forEach(t),EWo=r(bke," (CamemBERT model)"),bke.forEach(t),CWo=i(X),y2=n(X,"LI",{});var vke=s(y2);xpe=n(vke,"STRONG",{});var Uut=s(xpe);wWo=r(Uut,"canine"),Uut.forEach(t),AWo=r(vke," \u2014 "),aX=n(vke,"A",{href:!0});var Jut=s(aX);LWo=r(Jut,"CanineForQuestionAnswering"),Jut.forEach(t),yWo=r(vke," (CANINE model)"),vke.forEach(t),xWo=i(X),x2=n(X,"LI",{});var Fke=s(x2);$pe=n(Fke,"STRONG",{});var Yut=s($pe);$Wo=r(Yut,"convbert"),Yut.forEach(t),kWo=r(Fke," \u2014 "),nX=n(Fke,"A",{href:!0});var Kut=s(nX);SWo=r(Kut,"ConvBertForQuestionAnswering"),Kut.forEach(t),RWo=r(Fke," (ConvBERT model)"),Fke.forEach(t),PWo=i(X),$2=n(X,"LI",{});var Tke=s($2);kpe=n(Tke,"STRONG",{});var Zut=s(kpe);BWo=r(Zut,"data2vec-text"),Zut.forEach(t),IWo=r(Tke," \u2014 "),sX=n(Tke,"A",{href:!0});var e4t=s(sX);NWo=r(e4t,"Data2VecTextForQuestionAnswering"),e4t.forEach(t),qWo=r(Tke," (Data2VecText model)"),Tke.forEach(t),jWo=i(X),k2=n(X,"LI",{});var Mke=s(k2);Spe=n(Mke,"STRONG",{});var o4t=s(Spe);DWo=r(o4t,"deberta"),o4t.forEach(t),GWo=r(Mke," \u2014 "),lX=n(Mke,"A",{href:!0});var r4t=s(lX);OWo=r(r4t,"DebertaForQuestionAnswering"),r4t.forEach(t),VWo=r(Mke," (DeBERTa model)"),Mke.forEach(t),XWo=i(X),S2=n(X,"LI",{});var Eke=s(S2);Rpe=n(Eke,"STRONG",{});var t4t=s(Rpe);zWo=r(t4t,"deberta-v2"),t4t.forEach(t),WWo=r(Eke," \u2014 "),iX=n(Eke,"A",{href:!0});var a4t=s(iX);QWo=r(a4t,"DebertaV2ForQuestionAnswering"),a4t.forEach(t),HWo=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),UWo=i(X),R2=n(X,"LI",{});var Cke=s(R2);Ppe=n(Cke,"STRONG",{});var n4t=s(Ppe);JWo=r(n4t,"distilbert"),n4t.forEach(t),YWo=r(Cke," \u2014 "),dX=n(Cke,"A",{href:!0});var s4t=s(dX);KWo=r(s4t,"DistilBertForQuestionAnswering"),s4t.forEach(t),ZWo=r(Cke," (DistilBERT model)"),Cke.forEach(t),eQo=i(X),P2=n(X,"LI",{});var wke=s(P2);Bpe=n(wke,"STRONG",{});var l4t=s(Bpe);oQo=r(l4t,"electra"),l4t.forEach(t),rQo=r(wke," \u2014 "),cX=n(wke,"A",{href:!0});var i4t=s(cX);tQo=r(i4t,"ElectraForQuestionAnswering"),i4t.forEach(t),aQo=r(wke," (ELECTRA model)"),wke.forEach(t),nQo=i(X),B2=n(X,"LI",{});var Ake=s(B2);Ipe=n(Ake,"STRONG",{});var d4t=s(Ipe);sQo=r(d4t,"flaubert"),d4t.forEach(t),lQo=r(Ake," \u2014 "),fX=n(Ake,"A",{href:!0});var c4t=s(fX);iQo=r(c4t,"FlaubertForQuestionAnsweringSimple"),c4t.forEach(t),dQo=r(Ake," (FlauBERT model)"),Ake.forEach(t),cQo=i(X),I2=n(X,"LI",{});var Lke=s(I2);Npe=n(Lke,"STRONG",{});var f4t=s(Npe);fQo=r(f4t,"fnet"),f4t.forEach(t),mQo=r(Lke," \u2014 "),mX=n(Lke,"A",{href:!0});var m4t=s(mX);gQo=r(m4t,"FNetForQuestionAnswering"),m4t.forEach(t),hQo=r(Lke," (FNet model)"),Lke.forEach(t),pQo=i(X),N2=n(X,"LI",{});var yke=s(N2);qpe=n(yke,"STRONG",{});var g4t=s(qpe);_Qo=r(g4t,"funnel"),g4t.forEach(t),uQo=r(yke," \u2014 "),gX=n(yke,"A",{href:!0});var h4t=s(gX);bQo=r(h4t,"FunnelForQuestionAnswering"),h4t.forEach(t),vQo=r(yke," (Funnel Transformer model)"),yke.forEach(t),FQo=i(X),q2=n(X,"LI",{});var xke=s(q2);jpe=n(xke,"STRONG",{});var p4t=s(jpe);TQo=r(p4t,"gptj"),p4t.forEach(t),MQo=r(xke," \u2014 "),hX=n(xke,"A",{href:!0});var _4t=s(hX);EQo=r(_4t,"GPTJForQuestionAnswering"),_4t.forEach(t),CQo=r(xke," (GPT-J model)"),xke.forEach(t),wQo=i(X),j2=n(X,"LI",{});var $ke=s(j2);Dpe=n($ke,"STRONG",{});var u4t=s(Dpe);AQo=r(u4t,"ibert"),u4t.forEach(t),LQo=r($ke," \u2014 "),pX=n($ke,"A",{href:!0});var b4t=s(pX);yQo=r(b4t,"IBertForQuestionAnswering"),b4t.forEach(t),xQo=r($ke," (I-BERT model)"),$ke.forEach(t),$Qo=i(X),D2=n(X,"LI",{});var kke=s(D2);Gpe=n(kke,"STRONG",{});var v4t=s(Gpe);kQo=r(v4t,"layoutlmv2"),v4t.forEach(t),SQo=r(kke," \u2014 "),_X=n(kke,"A",{href:!0});var F4t=s(_X);RQo=r(F4t,"LayoutLMv2ForQuestionAnswering"),F4t.forEach(t),PQo=r(kke," (LayoutLMv2 model)"),kke.forEach(t),BQo=i(X),G2=n(X,"LI",{});var Ske=s(G2);Ope=n(Ske,"STRONG",{});var T4t=s(Ope);IQo=r(T4t,"layoutlmv3"),T4t.forEach(t),NQo=r(Ske," \u2014 "),uX=n(Ske,"A",{href:!0});var M4t=s(uX);qQo=r(M4t,"LayoutLMv3ForQuestionAnswering"),M4t.forEach(t),jQo=r(Ske," (LayoutLMv3 model)"),Ske.forEach(t),DQo=i(X),O2=n(X,"LI",{});var Rke=s(O2);Vpe=n(Rke,"STRONG",{});var E4t=s(Vpe);GQo=r(E4t,"led"),E4t.forEach(t),OQo=r(Rke," \u2014 "),bX=n(Rke,"A",{href:!0});var C4t=s(bX);VQo=r(C4t,"LEDForQuestionAnswering"),C4t.forEach(t),XQo=r(Rke," (LED model)"),Rke.forEach(t),zQo=i(X),V2=n(X,"LI",{});var Pke=s(V2);Xpe=n(Pke,"STRONG",{});var w4t=s(Xpe);WQo=r(w4t,"longformer"),w4t.forEach(t),QQo=r(Pke," \u2014 "),vX=n(Pke,"A",{href:!0});var A4t=s(vX);HQo=r(A4t,"LongformerForQuestionAnswering"),A4t.forEach(t),UQo=r(Pke," (Longformer model)"),Pke.forEach(t),JQo=i(X),X2=n(X,"LI",{});var Bke=s(X2);zpe=n(Bke,"STRONG",{});var L4t=s(zpe);YQo=r(L4t,"lxmert"),L4t.forEach(t),KQo=r(Bke," \u2014 "),FX=n(Bke,"A",{href:!0});var y4t=s(FX);ZQo=r(y4t,"LxmertForQuestionAnswering"),y4t.forEach(t),eHo=r(Bke," (LXMERT model)"),Bke.forEach(t),oHo=i(X),z2=n(X,"LI",{});var Ike=s(z2);Wpe=n(Ike,"STRONG",{});var x4t=s(Wpe);rHo=r(x4t,"mbart"),x4t.forEach(t),tHo=r(Ike," \u2014 "),TX=n(Ike,"A",{href:!0});var $4t=s(TX);aHo=r($4t,"MBartForQuestionAnswering"),$4t.forEach(t),nHo=r(Ike," (mBART model)"),Ike.forEach(t),sHo=i(X),W2=n(X,"LI",{});var Nke=s(W2);Qpe=n(Nke,"STRONG",{});var k4t=s(Qpe);lHo=r(k4t,"megatron-bert"),k4t.forEach(t),iHo=r(Nke," \u2014 "),MX=n(Nke,"A",{href:!0});var S4t=s(MX);dHo=r(S4t,"MegatronBertForQuestionAnswering"),S4t.forEach(t),cHo=r(Nke," (Megatron-BERT model)"),Nke.forEach(t),fHo=i(X),Q2=n(X,"LI",{});var qke=s(Q2);Hpe=n(qke,"STRONG",{});var R4t=s(Hpe);mHo=r(R4t,"mobilebert"),R4t.forEach(t),gHo=r(qke," \u2014 "),EX=n(qke,"A",{href:!0});var P4t=s(EX);hHo=r(P4t,"MobileBertForQuestionAnswering"),P4t.forEach(t),pHo=r(qke," (MobileBERT model)"),qke.forEach(t),_Ho=i(X),H2=n(X,"LI",{});var jke=s(H2);Upe=n(jke,"STRONG",{});var B4t=s(Upe);uHo=r(B4t,"mpnet"),B4t.forEach(t),bHo=r(jke," \u2014 "),CX=n(jke,"A",{href:!0});var I4t=s(CX);vHo=r(I4t,"MPNetForQuestionAnswering"),I4t.forEach(t),FHo=r(jke," (MPNet model)"),jke.forEach(t),THo=i(X),U2=n(X,"LI",{});var Dke=s(U2);Jpe=n(Dke,"STRONG",{});var N4t=s(Jpe);MHo=r(N4t,"nystromformer"),N4t.forEach(t),EHo=r(Dke," \u2014 "),wX=n(Dke,"A",{href:!0});var q4t=s(wX);CHo=r(q4t,"NystromformerForQuestionAnswering"),q4t.forEach(t),wHo=r(Dke," (Nystr\xF6mformer model)"),Dke.forEach(t),AHo=i(X),J2=n(X,"LI",{});var Gke=s(J2);Ype=n(Gke,"STRONG",{});var j4t=s(Ype);LHo=r(j4t,"qdqbert"),j4t.forEach(t),yHo=r(Gke," \u2014 "),AX=n(Gke,"A",{href:!0});var D4t=s(AX);xHo=r(D4t,"QDQBertForQuestionAnswering"),D4t.forEach(t),$Ho=r(Gke," (QDQBert model)"),Gke.forEach(t),kHo=i(X),Y2=n(X,"LI",{});var Oke=s(Y2);Kpe=n(Oke,"STRONG",{});var G4t=s(Kpe);SHo=r(G4t,"reformer"),G4t.forEach(t),RHo=r(Oke," \u2014 "),LX=n(Oke,"A",{href:!0});var O4t=s(LX);PHo=r(O4t,"ReformerForQuestionAnswering"),O4t.forEach(t),BHo=r(Oke," (Reformer model)"),Oke.forEach(t),IHo=i(X),K2=n(X,"LI",{});var Vke=s(K2);Zpe=n(Vke,"STRONG",{});var V4t=s(Zpe);NHo=r(V4t,"rembert"),V4t.forEach(t),qHo=r(Vke," \u2014 "),yX=n(Vke,"A",{href:!0});var X4t=s(yX);jHo=r(X4t,"RemBertForQuestionAnswering"),X4t.forEach(t),DHo=r(Vke," (RemBERT model)"),Vke.forEach(t),GHo=i(X),Z2=n(X,"LI",{});var Xke=s(Z2);e_e=n(Xke,"STRONG",{});var z4t=s(e_e);OHo=r(z4t,"roberta"),z4t.forEach(t),VHo=r(Xke," \u2014 "),xX=n(Xke,"A",{href:!0});var W4t=s(xX);XHo=r(W4t,"RobertaForQuestionAnswering"),W4t.forEach(t),zHo=r(Xke," (RoBERTa model)"),Xke.forEach(t),WHo=i(X),ev=n(X,"LI",{});var zke=s(ev);o_e=n(zke,"STRONG",{});var Q4t=s(o_e);QHo=r(Q4t,"roformer"),Q4t.forEach(t),HHo=r(zke," \u2014 "),$X=n(zke,"A",{href:!0});var H4t=s($X);UHo=r(H4t,"RoFormerForQuestionAnswering"),H4t.forEach(t),JHo=r(zke," (RoFormer model)"),zke.forEach(t),YHo=i(X),ov=n(X,"LI",{});var Wke=s(ov);r_e=n(Wke,"STRONG",{});var U4t=s(r_e);KHo=r(U4t,"splinter"),U4t.forEach(t),ZHo=r(Wke," \u2014 "),kX=n(Wke,"A",{href:!0});var J4t=s(kX);eUo=r(J4t,"SplinterForQuestionAnswering"),J4t.forEach(t),oUo=r(Wke," (Splinter model)"),Wke.forEach(t),rUo=i(X),rv=n(X,"LI",{});var Qke=s(rv);t_e=n(Qke,"STRONG",{});var Y4t=s(t_e);tUo=r(Y4t,"squeezebert"),Y4t.forEach(t),aUo=r(Qke," \u2014 "),SX=n(Qke,"A",{href:!0});var K4t=s(SX);nUo=r(K4t,"SqueezeBertForQuestionAnswering"),K4t.forEach(t),sUo=r(Qke," (SqueezeBERT model)"),Qke.forEach(t),lUo=i(X),tv=n(X,"LI",{});var Hke=s(tv);a_e=n(Hke,"STRONG",{});var Z4t=s(a_e);iUo=r(Z4t,"xlm"),Z4t.forEach(t),dUo=r(Hke," \u2014 "),RX=n(Hke,"A",{href:!0});var e1t=s(RX);cUo=r(e1t,"XLMForQuestionAnsweringSimple"),e1t.forEach(t),fUo=r(Hke," (XLM model)"),Hke.forEach(t),mUo=i(X),av=n(X,"LI",{});var Uke=s(av);n_e=n(Uke,"STRONG",{});var o1t=s(n_e);gUo=r(o1t,"xlm-roberta"),o1t.forEach(t),hUo=r(Uke," \u2014 "),PX=n(Uke,"A",{href:!0});var r1t=s(PX);pUo=r(r1t,"XLMRobertaForQuestionAnswering"),r1t.forEach(t),_Uo=r(Uke," (XLM-RoBERTa model)"),Uke.forEach(t),uUo=i(X),nv=n(X,"LI",{});var Jke=s(nv);s_e=n(Jke,"STRONG",{});var t1t=s(s_e);bUo=r(t1t,"xlm-roberta-xl"),t1t.forEach(t),vUo=r(Jke," \u2014 "),BX=n(Jke,"A",{href:!0});var a1t=s(BX);FUo=r(a1t,"XLMRobertaXLForQuestionAnswering"),a1t.forEach(t),TUo=r(Jke," (XLM-RoBERTa-XL model)"),Jke.forEach(t),MUo=i(X),sv=n(X,"LI",{});var Yke=s(sv);l_e=n(Yke,"STRONG",{});var n1t=s(l_e);EUo=r(n1t,"xlnet"),n1t.forEach(t),CUo=r(Yke," \u2014 "),IX=n(Yke,"A",{href:!0});var s1t=s(IX);wUo=r(s1t,"XLNetForQuestionAnsweringSimple"),s1t.forEach(t),AUo=r(Yke," (XLNet model)"),Yke.forEach(t),LUo=i(X),lv=n(X,"LI",{});var Kke=s(lv);i_e=n(Kke,"STRONG",{});var l1t=s(i_e);yUo=r(l1t,"yoso"),l1t.forEach(t),xUo=r(Kke," \u2014 "),NX=n(Kke,"A",{href:!0});var i1t=s(NX);$Uo=r(i1t,"YosoForQuestionAnswering"),i1t.forEach(t),kUo=r(Kke," (YOSO model)"),Kke.forEach(t),X.forEach(t),SUo=i(ca),iv=n(ca,"P",{});var Zke=s(iv);RUo=r(Zke,"The model is set in evaluation mode by default using "),d_e=n(Zke,"CODE",{});var d1t=s(d_e);PUo=r(d1t,"model.eval()"),d1t.forEach(t),BUo=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=n(Zke,"CODE",{});var c1t=s(c_e);IUo=r(c1t,"model.train()"),c1t.forEach(t),Zke.forEach(t),NUo=i(ca),T(dv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),Pje=i(f),rd=n(f,"H2",{class:!0});var qGe=s(rd);cv=n(qGe,"A",{id:!0,class:!0,href:!0});var f1t=s(cv);f_e=n(f1t,"SPAN",{});var m1t=s(f_e);T(dy.$$.fragment,m1t),m1t.forEach(t),f1t.forEach(t),qUo=i(qGe),m_e=n(qGe,"SPAN",{});var g1t=s(m_e);jUo=r(g1t,"AutoModelForTableQuestionAnswering"),g1t.forEach(t),qGe.forEach(t),Bje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(cy.$$.fragment,Zs),DUo=i(Zs),td=n(Zs,"P",{});var fee=s(td);GUo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qX=n(fee,"A",{href:!0});var h1t=s(qX);OUo=r(h1t,"from_pretrained()"),h1t.forEach(t),VUo=r(fee," class method or the "),jX=n(fee,"A",{href:!0});var p1t=s(jX);XUo=r(p1t,"from_config()"),p1t.forEach(t),zUo=r(fee,` class
method.`),fee.forEach(t),WUo=i(Zs),fy=n(Zs,"P",{});var jGe=s(fy);QUo=r(jGe,"This class cannot be instantiated directly using "),g_e=n(jGe,"CODE",{});var _1t=s(g_e);HUo=r(_1t,"__init__()"),_1t.forEach(t),UUo=r(jGe," (throws an error)."),jGe.forEach(t),JUo=i(Zs),gt=n(Zs,"DIV",{class:!0});var fA=s(gt);T(my.$$.fragment,fA),YUo=i(fA),h_e=n(fA,"P",{});var u1t=s(h_e);KUo=r(u1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),u1t.forEach(t),ZUo=i(fA),ad=n(fA,"P",{});var mee=s(ad);eJo=r(mee,`Note:
Loading a model from its configuration file does `),p_e=n(mee,"STRONG",{});var b1t=s(p_e);oJo=r(b1t,"not"),b1t.forEach(t),rJo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(mee,"A",{href:!0});var v1t=s(DX);tJo=r(v1t,"from_pretrained()"),v1t.forEach(t),aJo=r(mee," to load the model weights."),mee.forEach(t),nJo=i(fA),T(fv.$$.fragment,fA),fA.forEach(t),sJo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(gy.$$.fragment,fa),lJo=i(fa),__e=n(fa,"P",{});var F1t=s(__e);iJo=r(F1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),F1t.forEach(t),dJo=i(fa),qa=n(fa,"P",{});var mA=s(qa);cJo=r(mA,"The model class to instantiate is selected based on the "),u_e=n(mA,"CODE",{});var T1t=s(u_e);fJo=r(T1t,"model_type"),T1t.forEach(t),mJo=r(mA,` property of the config object (either
passed as an argument or loaded from `),b_e=n(mA,"CODE",{});var M1t=s(b_e);gJo=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),hJo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(mA,"CODE",{});var E1t=s(v_e);pJo=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),_Jo=r(mA,":"),mA.forEach(t),uJo=i(fa),F_e=n(fa,"UL",{});var C1t=s(F_e);mv=n(C1t,"LI",{});var eSe=s(mv);T_e=n(eSe,"STRONG",{});var w1t=s(T_e);bJo=r(w1t,"tapas"),w1t.forEach(t),vJo=r(eSe," \u2014 "),GX=n(eSe,"A",{href:!0});var A1t=s(GX);FJo=r(A1t,"TapasForQuestionAnswering"),A1t.forEach(t),TJo=r(eSe," (TAPAS model)"),eSe.forEach(t),C1t.forEach(t),MJo=i(fa),gv=n(fa,"P",{});var oSe=s(gv);EJo=r(oSe,"The model is set in evaluation mode by default using "),M_e=n(oSe,"CODE",{});var L1t=s(M_e);CJo=r(L1t,"model.eval()"),L1t.forEach(t),wJo=r(oSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(oSe,"CODE",{});var y1t=s(E_e);AJo=r(y1t,"model.train()"),y1t.forEach(t),oSe.forEach(t),LJo=i(fa),T(hv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),Ije=i(f),nd=n(f,"H2",{class:!0});var DGe=s(nd);pv=n(DGe,"A",{id:!0,class:!0,href:!0});var x1t=s(pv);C_e=n(x1t,"SPAN",{});var $1t=s(C_e);T(hy.$$.fragment,$1t),$1t.forEach(t),x1t.forEach(t),yJo=i(DGe),w_e=n(DGe,"SPAN",{});var k1t=s(w_e);xJo=r(k1t,"AutoModelForImageClassification"),k1t.forEach(t),DGe.forEach(t),Nje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(py.$$.fragment,el),$Jo=i(el),sd=n(el,"P",{});var gee=s(sd);kJo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OX=n(gee,"A",{href:!0});var S1t=s(OX);SJo=r(S1t,"from_pretrained()"),S1t.forEach(t),RJo=r(gee," class method or the "),VX=n(gee,"A",{href:!0});var R1t=s(VX);PJo=r(R1t,"from_config()"),R1t.forEach(t),BJo=r(gee,` class
method.`),gee.forEach(t),IJo=i(el),_y=n(el,"P",{});var GGe=s(_y);NJo=r(GGe,"This class cannot be instantiated directly using "),A_e=n(GGe,"CODE",{});var P1t=s(A_e);qJo=r(P1t,"__init__()"),P1t.forEach(t),jJo=r(GGe," (throws an error)."),GGe.forEach(t),DJo=i(el),ht=n(el,"DIV",{class:!0});var gA=s(ht);T(uy.$$.fragment,gA),GJo=i(gA),L_e=n(gA,"P",{});var B1t=s(L_e);OJo=r(B1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B1t.forEach(t),VJo=i(gA),ld=n(gA,"P",{});var hee=s(ld);XJo=r(hee,`Note:
Loading a model from its configuration file does `),y_e=n(hee,"STRONG",{});var I1t=s(y_e);zJo=r(I1t,"not"),I1t.forEach(t),WJo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(hee,"A",{href:!0});var N1t=s(XX);QJo=r(N1t,"from_pretrained()"),N1t.forEach(t),HJo=r(hee," to load the model weights."),hee.forEach(t),UJo=i(gA),T(_v.$$.fragment,gA),gA.forEach(t),JJo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(by.$$.fragment,ma),YJo=i(ma),x_e=n(ma,"P",{});var q1t=s(x_e);KJo=r(q1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q1t.forEach(t),ZJo=i(ma),ja=n(ma,"P",{});var hA=s(ja);eYo=r(hA,"The model class to instantiate is selected based on the "),$_e=n(hA,"CODE",{});var j1t=s($_e);oYo=r(j1t,"model_type"),j1t.forEach(t),rYo=r(hA,` property of the config object (either
passed as an argument or loaded from `),k_e=n(hA,"CODE",{});var D1t=s(k_e);tYo=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),aYo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(hA,"CODE",{});var G1t=s(S_e);nYo=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),sYo=r(hA,":"),hA.forEach(t),lYo=i(ma),ve=n(ma,"UL",{});var Te=s(ve);uv=n(Te,"LI",{});var rSe=s(uv);R_e=n(rSe,"STRONG",{});var O1t=s(R_e);iYo=r(O1t,"beit"),O1t.forEach(t),dYo=r(rSe," \u2014 "),zX=n(rSe,"A",{href:!0});var V1t=s(zX);cYo=r(V1t,"BeitForImageClassification"),V1t.forEach(t),fYo=r(rSe," (BEiT model)"),rSe.forEach(t),mYo=i(Te),bv=n(Te,"LI",{});var tSe=s(bv);P_e=n(tSe,"STRONG",{});var X1t=s(P_e);gYo=r(X1t,"convnext"),X1t.forEach(t),hYo=r(tSe," \u2014 "),WX=n(tSe,"A",{href:!0});var z1t=s(WX);pYo=r(z1t,"ConvNextForImageClassification"),z1t.forEach(t),_Yo=r(tSe," (ConvNeXT model)"),tSe.forEach(t),uYo=i(Te),vv=n(Te,"LI",{});var aSe=s(vv);B_e=n(aSe,"STRONG",{});var W1t=s(B_e);bYo=r(W1t,"cvt"),W1t.forEach(t),vYo=r(aSe," \u2014 "),QX=n(aSe,"A",{href:!0});var Q1t=s(QX);FYo=r(Q1t,"CvtForImageClassification"),Q1t.forEach(t),TYo=r(aSe," (CvT model)"),aSe.forEach(t),MYo=i(Te),Fv=n(Te,"LI",{});var nSe=s(Fv);I_e=n(nSe,"STRONG",{});var H1t=s(I_e);EYo=r(H1t,"data2vec-vision"),H1t.forEach(t),CYo=r(nSe," \u2014 "),HX=n(nSe,"A",{href:!0});var U1t=s(HX);wYo=r(U1t,"Data2VecVisionForImageClassification"),U1t.forEach(t),AYo=r(nSe," (Data2VecVision model)"),nSe.forEach(t),LYo=i(Te),Bs=n(Te,"LI",{});var tk=s(Bs);N_e=n(tk,"STRONG",{});var J1t=s(N_e);yYo=r(J1t,"deit"),J1t.forEach(t),xYo=r(tk," \u2014 "),UX=n(tk,"A",{href:!0});var Y1t=s(UX);$Yo=r(Y1t,"DeiTForImageClassification"),Y1t.forEach(t),kYo=r(tk," or "),JX=n(tk,"A",{href:!0});var K1t=s(JX);SYo=r(K1t,"DeiTForImageClassificationWithTeacher"),K1t.forEach(t),RYo=r(tk," (DeiT model)"),tk.forEach(t),PYo=i(Te),Tv=n(Te,"LI",{});var sSe=s(Tv);q_e=n(sSe,"STRONG",{});var Z1t=s(q_e);BYo=r(Z1t,"imagegpt"),Z1t.forEach(t),IYo=r(sSe," \u2014 "),YX=n(sSe,"A",{href:!0});var e7t=s(YX);NYo=r(e7t,"ImageGPTForImageClassification"),e7t.forEach(t),qYo=r(sSe," (ImageGPT model)"),sSe.forEach(t),jYo=i(Te),Is=n(Te,"LI",{});var ak=s(Is);j_e=n(ak,"STRONG",{});var o7t=s(j_e);DYo=r(o7t,"levit"),o7t.forEach(t),GYo=r(ak," \u2014 "),KX=n(ak,"A",{href:!0});var r7t=s(KX);OYo=r(r7t,"LevitForImageClassification"),r7t.forEach(t),VYo=r(ak," or "),ZX=n(ak,"A",{href:!0});var t7t=s(ZX);XYo=r(t7t,"LevitForImageClassificationWithTeacher"),t7t.forEach(t),zYo=r(ak," (LeViT model)"),ak.forEach(t),WYo=i(Te),pt=n(Te,"LI",{});var pf=s(pt);D_e=n(pf,"STRONG",{});var a7t=s(D_e);QYo=r(a7t,"perceiver"),a7t.forEach(t),HYo=r(pf," \u2014 "),ez=n(pf,"A",{href:!0});var n7t=s(ez);UYo=r(n7t,"PerceiverForImageClassificationLearned"),n7t.forEach(t),JYo=r(pf," or "),oz=n(pf,"A",{href:!0});var s7t=s(oz);YYo=r(s7t,"PerceiverForImageClassificationFourier"),s7t.forEach(t),KYo=r(pf," or "),rz=n(pf,"A",{href:!0});var l7t=s(rz);ZYo=r(l7t,"PerceiverForImageClassificationConvProcessing"),l7t.forEach(t),eKo=r(pf," (Perceiver model)"),pf.forEach(t),oKo=i(Te),Mv=n(Te,"LI",{});var lSe=s(Mv);G_e=n(lSe,"STRONG",{});var i7t=s(G_e);rKo=r(i7t,"poolformer"),i7t.forEach(t),tKo=r(lSe," \u2014 "),tz=n(lSe,"A",{href:!0});var d7t=s(tz);aKo=r(d7t,"PoolFormerForImageClassification"),d7t.forEach(t),nKo=r(lSe," (PoolFormer model)"),lSe.forEach(t),sKo=i(Te),Ev=n(Te,"LI",{});var iSe=s(Ev);O_e=n(iSe,"STRONG",{});var c7t=s(O_e);lKo=r(c7t,"regnet"),c7t.forEach(t),iKo=r(iSe," \u2014 "),az=n(iSe,"A",{href:!0});var f7t=s(az);dKo=r(f7t,"RegNetForImageClassification"),f7t.forEach(t),cKo=r(iSe," (RegNet model)"),iSe.forEach(t),fKo=i(Te),Cv=n(Te,"LI",{});var dSe=s(Cv);V_e=n(dSe,"STRONG",{});var m7t=s(V_e);mKo=r(m7t,"resnet"),m7t.forEach(t),gKo=r(dSe," \u2014 "),nz=n(dSe,"A",{href:!0});var g7t=s(nz);hKo=r(g7t,"ResNetForImageClassification"),g7t.forEach(t),pKo=r(dSe," (ResNet model)"),dSe.forEach(t),_Ko=i(Te),wv=n(Te,"LI",{});var cSe=s(wv);X_e=n(cSe,"STRONG",{});var h7t=s(X_e);uKo=r(h7t,"segformer"),h7t.forEach(t),bKo=r(cSe," \u2014 "),sz=n(cSe,"A",{href:!0});var p7t=s(sz);vKo=r(p7t,"SegformerForImageClassification"),p7t.forEach(t),FKo=r(cSe," (SegFormer model)"),cSe.forEach(t),TKo=i(Te),Av=n(Te,"LI",{});var fSe=s(Av);z_e=n(fSe,"STRONG",{});var _7t=s(z_e);MKo=r(_7t,"swin"),_7t.forEach(t),EKo=r(fSe," \u2014 "),lz=n(fSe,"A",{href:!0});var u7t=s(lz);CKo=r(u7t,"SwinForImageClassification"),u7t.forEach(t),wKo=r(fSe," (Swin Transformer model)"),fSe.forEach(t),AKo=i(Te),Lv=n(Te,"LI",{});var mSe=s(Lv);W_e=n(mSe,"STRONG",{});var b7t=s(W_e);LKo=r(b7t,"van"),b7t.forEach(t),yKo=r(mSe," \u2014 "),iz=n(mSe,"A",{href:!0});var v7t=s(iz);xKo=r(v7t,"VanForImageClassification"),v7t.forEach(t),$Ko=r(mSe," (VAN model)"),mSe.forEach(t),kKo=i(Te),yv=n(Te,"LI",{});var gSe=s(yv);Q_e=n(gSe,"STRONG",{});var F7t=s(Q_e);SKo=r(F7t,"vit"),F7t.forEach(t),RKo=r(gSe," \u2014 "),dz=n(gSe,"A",{href:!0});var T7t=s(dz);PKo=r(T7t,"ViTForImageClassification"),T7t.forEach(t),BKo=r(gSe," (ViT model)"),gSe.forEach(t),Te.forEach(t),IKo=i(ma),xv=n(ma,"P",{});var hSe=s(xv);NKo=r(hSe,"The model is set in evaluation mode by default using "),H_e=n(hSe,"CODE",{});var M7t=s(H_e);qKo=r(M7t,"model.eval()"),M7t.forEach(t),jKo=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(hSe,"CODE",{});var E7t=s(U_e);DKo=r(E7t,"model.train()"),E7t.forEach(t),hSe.forEach(t),GKo=i(ma),T($v.$$.fragment,ma),ma.forEach(t),el.forEach(t),qje=i(f),id=n(f,"H2",{class:!0});var OGe=s(id);kv=n(OGe,"A",{id:!0,class:!0,href:!0});var C7t=s(kv);J_e=n(C7t,"SPAN",{});var w7t=s(J_e);T(vy.$$.fragment,w7t),w7t.forEach(t),C7t.forEach(t),OKo=i(OGe),Y_e=n(OGe,"SPAN",{});var A7t=s(Y_e);VKo=r(A7t,"AutoModelForVision2Seq"),A7t.forEach(t),OGe.forEach(t),jje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(Fy.$$.fragment,ol),XKo=i(ol),dd=n(ol,"P",{});var pee=s(dd);zKo=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cz=n(pee,"A",{href:!0});var L7t=s(cz);WKo=r(L7t,"from_pretrained()"),L7t.forEach(t),QKo=r(pee," class method or the "),fz=n(pee,"A",{href:!0});var y7t=s(fz);HKo=r(y7t,"from_config()"),y7t.forEach(t),UKo=r(pee,` class
method.`),pee.forEach(t),JKo=i(ol),Ty=n(ol,"P",{});var VGe=s(Ty);YKo=r(VGe,"This class cannot be instantiated directly using "),K_e=n(VGe,"CODE",{});var x7t=s(K_e);KKo=r(x7t,"__init__()"),x7t.forEach(t),ZKo=r(VGe," (throws an error)."),VGe.forEach(t),eZo=i(ol),_t=n(ol,"DIV",{class:!0});var pA=s(_t);T(My.$$.fragment,pA),oZo=i(pA),Z_e=n(pA,"P",{});var $7t=s(Z_e);rZo=r($7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$7t.forEach(t),tZo=i(pA),cd=n(pA,"P",{});var _ee=s(cd);aZo=r(_ee,`Note:
Loading a model from its configuration file does `),eue=n(_ee,"STRONG",{});var k7t=s(eue);nZo=r(k7t,"not"),k7t.forEach(t),sZo=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(_ee,"A",{href:!0});var S7t=s(mz);lZo=r(S7t,"from_pretrained()"),S7t.forEach(t),iZo=r(_ee," to load the model weights."),_ee.forEach(t),dZo=i(pA),T(Sv.$$.fragment,pA),pA.forEach(t),cZo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(Ey.$$.fragment,ga),fZo=i(ga),oue=n(ga,"P",{});var R7t=s(oue);mZo=r(R7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),R7t.forEach(t),gZo=i(ga),Da=n(ga,"P",{});var _A=s(Da);hZo=r(_A,"The model class to instantiate is selected based on the "),rue=n(_A,"CODE",{});var P7t=s(rue);pZo=r(P7t,"model_type"),P7t.forEach(t),_Zo=r(_A,` property of the config object (either
passed as an argument or loaded from `),tue=n(_A,"CODE",{});var B7t=s(tue);uZo=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),bZo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(_A,"CODE",{});var I7t=s(aue);vZo=r(I7t,"pretrained_model_name_or_path"),I7t.forEach(t),FZo=r(_A,":"),_A.forEach(t),TZo=i(ga),nue=n(ga,"UL",{});var N7t=s(nue);Rv=n(N7t,"LI",{});var pSe=s(Rv);sue=n(pSe,"STRONG",{});var q7t=s(sue);MZo=r(q7t,"vision-encoder-decoder"),q7t.forEach(t),EZo=r(pSe," \u2014 "),gz=n(pSe,"A",{href:!0});var j7t=s(gz);CZo=r(j7t,"VisionEncoderDecoderModel"),j7t.forEach(t),wZo=r(pSe," (Vision Encoder decoder model)"),pSe.forEach(t),N7t.forEach(t),AZo=i(ga),Pv=n(ga,"P",{});var _Se=s(Pv);LZo=r(_Se,"The model is set in evaluation mode by default using "),lue=n(_Se,"CODE",{});var D7t=s(lue);yZo=r(D7t,"model.eval()"),D7t.forEach(t),xZo=r(_Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(_Se,"CODE",{});var G7t=s(iue);$Zo=r(G7t,"model.train()"),G7t.forEach(t),_Se.forEach(t),kZo=i(ga),T(Bv.$$.fragment,ga),ga.forEach(t),ol.forEach(t),Dje=i(f),fd=n(f,"H2",{class:!0});var XGe=s(fd);Iv=n(XGe,"A",{id:!0,class:!0,href:!0});var O7t=s(Iv);due=n(O7t,"SPAN",{});var V7t=s(due);T(Cy.$$.fragment,V7t),V7t.forEach(t),O7t.forEach(t),SZo=i(XGe),cue=n(XGe,"SPAN",{});var X7t=s(cue);RZo=r(X7t,"AutoModelForAudioClassification"),X7t.forEach(t),XGe.forEach(t),Gje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(wy.$$.fragment,rl),PZo=i(rl),md=n(rl,"P",{});var uee=s(md);BZo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hz=n(uee,"A",{href:!0});var z7t=s(hz);IZo=r(z7t,"from_pretrained()"),z7t.forEach(t),NZo=r(uee," class method or the "),pz=n(uee,"A",{href:!0});var W7t=s(pz);qZo=r(W7t,"from_config()"),W7t.forEach(t),jZo=r(uee,` class
method.`),uee.forEach(t),DZo=i(rl),Ay=n(rl,"P",{});var zGe=s(Ay);GZo=r(zGe,"This class cannot be instantiated directly using "),fue=n(zGe,"CODE",{});var Q7t=s(fue);OZo=r(Q7t,"__init__()"),Q7t.forEach(t),VZo=r(zGe," (throws an error)."),zGe.forEach(t),XZo=i(rl),ut=n(rl,"DIV",{class:!0});var uA=s(ut);T(Ly.$$.fragment,uA),zZo=i(uA),mue=n(uA,"P",{});var H7t=s(mue);WZo=r(H7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),H7t.forEach(t),QZo=i(uA),gd=n(uA,"P",{});var bee=s(gd);HZo=r(bee,`Note:
Loading a model from its configuration file does `),gue=n(bee,"STRONG",{});var U7t=s(gue);UZo=r(U7t,"not"),U7t.forEach(t),JZo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(bee,"A",{href:!0});var J7t=s(_z);YZo=r(J7t,"from_pretrained()"),J7t.forEach(t),KZo=r(bee," to load the model weights."),bee.forEach(t),ZZo=i(uA),T(Nv.$$.fragment,uA),uA.forEach(t),eer=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(yy.$$.fragment,ha),oer=i(ha),hue=n(ha,"P",{});var Y7t=s(hue);rer=r(Y7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Y7t.forEach(t),ter=i(ha),Ga=n(ha,"P",{});var bA=s(Ga);aer=r(bA,"The model class to instantiate is selected based on the "),pue=n(bA,"CODE",{});var K7t=s(pue);ner=r(K7t,"model_type"),K7t.forEach(t),ser=r(bA,` property of the config object (either
passed as an argument or loaded from `),_ue=n(bA,"CODE",{});var Z7t=s(_ue);ler=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),ier=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(bA,"CODE",{});var ebt=s(uue);der=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),cer=r(bA,":"),bA.forEach(t),fer=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);qv=n(Ve,"LI",{});var uSe=s(qv);bue=n(uSe,"STRONG",{});var obt=s(bue);mer=r(obt,"data2vec-audio"),obt.forEach(t),ger=r(uSe," \u2014 "),uz=n(uSe,"A",{href:!0});var rbt=s(uz);her=r(rbt,"Data2VecAudioForSequenceClassification"),rbt.forEach(t),per=r(uSe," (Data2VecAudio model)"),uSe.forEach(t),_er=i(Ve),jv=n(Ve,"LI",{});var bSe=s(jv);vue=n(bSe,"STRONG",{});var tbt=s(vue);uer=r(tbt,"hubert"),tbt.forEach(t),ber=r(bSe," \u2014 "),bz=n(bSe,"A",{href:!0});var abt=s(bz);ver=r(abt,"HubertForSequenceClassification"),abt.forEach(t),Fer=r(bSe," (Hubert model)"),bSe.forEach(t),Ter=i(Ve),Dv=n(Ve,"LI",{});var vSe=s(Dv);Fue=n(vSe,"STRONG",{});var nbt=s(Fue);Mer=r(nbt,"sew"),nbt.forEach(t),Eer=r(vSe," \u2014 "),vz=n(vSe,"A",{href:!0});var sbt=s(vz);Cer=r(sbt,"SEWForSequenceClassification"),sbt.forEach(t),wer=r(vSe," (SEW model)"),vSe.forEach(t),Aer=i(Ve),Gv=n(Ve,"LI",{});var FSe=s(Gv);Tue=n(FSe,"STRONG",{});var lbt=s(Tue);Ler=r(lbt,"sew-d"),lbt.forEach(t),yer=r(FSe," \u2014 "),Fz=n(FSe,"A",{href:!0});var ibt=s(Fz);xer=r(ibt,"SEWDForSequenceClassification"),ibt.forEach(t),$er=r(FSe," (SEW-D model)"),FSe.forEach(t),ker=i(Ve),Ov=n(Ve,"LI",{});var TSe=s(Ov);Mue=n(TSe,"STRONG",{});var dbt=s(Mue);Ser=r(dbt,"unispeech"),dbt.forEach(t),Rer=r(TSe," \u2014 "),Tz=n(TSe,"A",{href:!0});var cbt=s(Tz);Per=r(cbt,"UniSpeechForSequenceClassification"),cbt.forEach(t),Ber=r(TSe," (UniSpeech model)"),TSe.forEach(t),Ier=i(Ve),Vv=n(Ve,"LI",{});var MSe=s(Vv);Eue=n(MSe,"STRONG",{});var fbt=s(Eue);Ner=r(fbt,"unispeech-sat"),fbt.forEach(t),qer=r(MSe," \u2014 "),Mz=n(MSe,"A",{href:!0});var mbt=s(Mz);jer=r(mbt,"UniSpeechSatForSequenceClassification"),mbt.forEach(t),Der=r(MSe," (UniSpeechSat model)"),MSe.forEach(t),Ger=i(Ve),Xv=n(Ve,"LI",{});var ESe=s(Xv);Cue=n(ESe,"STRONG",{});var gbt=s(Cue);Oer=r(gbt,"wav2vec2"),gbt.forEach(t),Ver=r(ESe," \u2014 "),Ez=n(ESe,"A",{href:!0});var hbt=s(Ez);Xer=r(hbt,"Wav2Vec2ForSequenceClassification"),hbt.forEach(t),zer=r(ESe," (Wav2Vec2 model)"),ESe.forEach(t),Wer=i(Ve),zv=n(Ve,"LI",{});var CSe=s(zv);wue=n(CSe,"STRONG",{});var pbt=s(wue);Qer=r(pbt,"wav2vec2-conformer"),pbt.forEach(t),Her=r(CSe," \u2014 "),Cz=n(CSe,"A",{href:!0});var _bt=s(Cz);Uer=r(_bt,"Wav2Vec2ConformerForSequenceClassification"),_bt.forEach(t),Jer=r(CSe," (Wav2Vec2-Conformer model)"),CSe.forEach(t),Yer=i(Ve),Wv=n(Ve,"LI",{});var wSe=s(Wv);Aue=n(wSe,"STRONG",{});var ubt=s(Aue);Ker=r(ubt,"wavlm"),ubt.forEach(t),Zer=r(wSe," \u2014 "),wz=n(wSe,"A",{href:!0});var bbt=s(wz);eor=r(bbt,"WavLMForSequenceClassification"),bbt.forEach(t),oor=r(wSe," (WavLM model)"),wSe.forEach(t),Ve.forEach(t),ror=i(ha),Qv=n(ha,"P",{});var ASe=s(Qv);tor=r(ASe,"The model is set in evaluation mode by default using "),Lue=n(ASe,"CODE",{});var vbt=s(Lue);aor=r(vbt,"model.eval()"),vbt.forEach(t),nor=r(ASe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(ASe,"CODE",{});var Fbt=s(yue);sor=r(Fbt,"model.train()"),Fbt.forEach(t),ASe.forEach(t),lor=i(ha),T(Hv.$$.fragment,ha),ha.forEach(t),rl.forEach(t),Oje=i(f),hd=n(f,"H2",{class:!0});var WGe=s(hd);Uv=n(WGe,"A",{id:!0,class:!0,href:!0});var Tbt=s(Uv);xue=n(Tbt,"SPAN",{});var Mbt=s(xue);T(xy.$$.fragment,Mbt),Mbt.forEach(t),Tbt.forEach(t),ior=i(WGe),$ue=n(WGe,"SPAN",{});var Ebt=s($ue);dor=r(Ebt,"AutoModelForAudioFrameClassification"),Ebt.forEach(t),WGe.forEach(t),Vje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T($y.$$.fragment,tl),cor=i(tl),pd=n(tl,"P",{});var vee=s(pd);mor=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Az=n(vee,"A",{href:!0});var Cbt=s(Az);gor=r(Cbt,"from_pretrained()"),Cbt.forEach(t),hor=r(vee," class method or the "),Lz=n(vee,"A",{href:!0});var wbt=s(Lz);por=r(wbt,"from_config()"),wbt.forEach(t),_or=r(vee,` class
method.`),vee.forEach(t),uor=i(tl),ky=n(tl,"P",{});var QGe=s(ky);bor=r(QGe,"This class cannot be instantiated directly using "),kue=n(QGe,"CODE",{});var Abt=s(kue);vor=r(Abt,"__init__()"),Abt.forEach(t),For=r(QGe," (throws an error)."),QGe.forEach(t),Tor=i(tl),bt=n(tl,"DIV",{class:!0});var vA=s(bt);T(Sy.$$.fragment,vA),Mor=i(vA),Sue=n(vA,"P",{});var Lbt=s(Sue);Eor=r(Lbt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Lbt.forEach(t),Cor=i(vA),_d=n(vA,"P",{});var Fee=s(_d);wor=r(Fee,`Note:
Loading a model from its configuration file does `),Rue=n(Fee,"STRONG",{});var ybt=s(Rue);Aor=r(ybt,"not"),ybt.forEach(t),Lor=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(Fee,"A",{href:!0});var xbt=s(yz);yor=r(xbt,"from_pretrained()"),xbt.forEach(t),xor=r(Fee," to load the model weights."),Fee.forEach(t),$or=i(vA),T(Jv.$$.fragment,vA),vA.forEach(t),kor=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Ry.$$.fragment,pa),Sor=i(pa),Pue=n(pa,"P",{});var $bt=s(Pue);Ror=r($bt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$bt.forEach(t),Por=i(pa),Oa=n(pa,"P",{});var FA=s(Oa);Bor=r(FA,"The model class to instantiate is selected based on the "),Bue=n(FA,"CODE",{});var kbt=s(Bue);Ior=r(kbt,"model_type"),kbt.forEach(t),Nor=r(FA,` property of the config object (either
passed as an argument or loaded from `),Iue=n(FA,"CODE",{});var Sbt=s(Iue);qor=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),jor=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(FA,"CODE",{});var Rbt=s(Nue);Dor=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),Gor=r(FA,":"),FA.forEach(t),Oor=i(pa),Kr=n(pa,"UL",{});var al=s(Kr);Yv=n(al,"LI",{});var LSe=s(Yv);que=n(LSe,"STRONG",{});var Pbt=s(que);Vor=r(Pbt,"data2vec-audio"),Pbt.forEach(t),Xor=r(LSe," \u2014 "),xz=n(LSe,"A",{href:!0});var Bbt=s(xz);zor=r(Bbt,"Data2VecAudioForAudioFrameClassification"),Bbt.forEach(t),Wor=r(LSe," (Data2VecAudio model)"),LSe.forEach(t),Qor=i(al),Kv=n(al,"LI",{});var ySe=s(Kv);jue=n(ySe,"STRONG",{});var Ibt=s(jue);Hor=r(Ibt,"unispeech-sat"),Ibt.forEach(t),Uor=r(ySe," \u2014 "),$z=n(ySe,"A",{href:!0});var Nbt=s($z);Jor=r(Nbt,"UniSpeechSatForAudioFrameClassification"),Nbt.forEach(t),Yor=r(ySe," (UniSpeechSat model)"),ySe.forEach(t),Kor=i(al),Zv=n(al,"LI",{});var xSe=s(Zv);Due=n(xSe,"STRONG",{});var qbt=s(Due);Zor=r(qbt,"wav2vec2"),qbt.forEach(t),err=r(xSe," \u2014 "),kz=n(xSe,"A",{href:!0});var jbt=s(kz);orr=r(jbt,"Wav2Vec2ForAudioFrameClassification"),jbt.forEach(t),rrr=r(xSe," (Wav2Vec2 model)"),xSe.forEach(t),trr=i(al),eF=n(al,"LI",{});var $Se=s(eF);Gue=n($Se,"STRONG",{});var Dbt=s(Gue);arr=r(Dbt,"wav2vec2-conformer"),Dbt.forEach(t),nrr=r($Se," \u2014 "),Sz=n($Se,"A",{href:!0});var Gbt=s(Sz);srr=r(Gbt,"Wav2Vec2ConformerForAudioFrameClassification"),Gbt.forEach(t),lrr=r($Se," (Wav2Vec2-Conformer model)"),$Se.forEach(t),irr=i(al),oF=n(al,"LI",{});var kSe=s(oF);Oue=n(kSe,"STRONG",{});var Obt=s(Oue);drr=r(Obt,"wavlm"),Obt.forEach(t),crr=r(kSe," \u2014 "),Rz=n(kSe,"A",{href:!0});var Vbt=s(Rz);frr=r(Vbt,"WavLMForAudioFrameClassification"),Vbt.forEach(t),mrr=r(kSe," (WavLM model)"),kSe.forEach(t),al.forEach(t),grr=i(pa),rF=n(pa,"P",{});var SSe=s(rF);hrr=r(SSe,"The model is set in evaluation mode by default using "),Vue=n(SSe,"CODE",{});var Xbt=s(Vue);prr=r(Xbt,"model.eval()"),Xbt.forEach(t),_rr=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(SSe,"CODE",{});var zbt=s(Xue);urr=r(zbt,"model.train()"),zbt.forEach(t),SSe.forEach(t),brr=i(pa),T(tF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Xje=i(f),ud=n(f,"H2",{class:!0});var HGe=s(ud);aF=n(HGe,"A",{id:!0,class:!0,href:!0});var Wbt=s(aF);zue=n(Wbt,"SPAN",{});var Qbt=s(zue);T(Py.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),vrr=i(HGe),Wue=n(HGe,"SPAN",{});var Hbt=s(Wue);Frr=r(Hbt,"AutoModelForCTC"),Hbt.forEach(t),HGe.forEach(t),zje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(By.$$.fragment,nl),Trr=i(nl),bd=n(nl,"P",{});var Tee=s(bd);Mrr=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Pz=n(Tee,"A",{href:!0});var Ubt=s(Pz);Err=r(Ubt,"from_pretrained()"),Ubt.forEach(t),Crr=r(Tee," class method or the "),Bz=n(Tee,"A",{href:!0});var Jbt=s(Bz);wrr=r(Jbt,"from_config()"),Jbt.forEach(t),Arr=r(Tee,` class
method.`),Tee.forEach(t),Lrr=i(nl),Iy=n(nl,"P",{});var UGe=s(Iy);yrr=r(UGe,"This class cannot be instantiated directly using "),Que=n(UGe,"CODE",{});var Ybt=s(Que);xrr=r(Ybt,"__init__()"),Ybt.forEach(t),$rr=r(UGe," (throws an error)."),UGe.forEach(t),krr=i(nl),vt=n(nl,"DIV",{class:!0});var TA=s(vt);T(Ny.$$.fragment,TA),Srr=i(TA),Hue=n(TA,"P",{});var Kbt=s(Hue);Rrr=r(Kbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Kbt.forEach(t),Prr=i(TA),vd=n(TA,"P",{});var Mee=s(vd);Brr=r(Mee,`Note:
Loading a model from its configuration file does `),Uue=n(Mee,"STRONG",{});var Zbt=s(Uue);Irr=r(Zbt,"not"),Zbt.forEach(t),Nrr=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(Mee,"A",{href:!0});var e2t=s(Iz);qrr=r(e2t,"from_pretrained()"),e2t.forEach(t),jrr=r(Mee," to load the model weights."),Mee.forEach(t),Drr=i(TA),T(nF.$$.fragment,TA),TA.forEach(t),Grr=i(nl),mo=n(nl,"DIV",{class:!0});var _a=s(mo);T(qy.$$.fragment,_a),Orr=i(_a),Jue=n(_a,"P",{});var o2t=s(Jue);Vrr=r(o2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),o2t.forEach(t),Xrr=i(_a),Va=n(_a,"P",{});var MA=s(Va);zrr=r(MA,"The model class to instantiate is selected based on the "),Yue=n(MA,"CODE",{});var r2t=s(Yue);Wrr=r(r2t,"model_type"),r2t.forEach(t),Qrr=r(MA,` property of the config object (either
passed as an argument or loaded from `),Kue=n(MA,"CODE",{});var t2t=s(Kue);Hrr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),Urr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(MA,"CODE",{});var a2t=s(Zue);Jrr=r(a2t,"pretrained_model_name_or_path"),a2t.forEach(t),Yrr=r(MA,":"),MA.forEach(t),Krr=i(_a),Re=n(_a,"UL",{});var Xe=s(Re);sF=n(Xe,"LI",{});var RSe=s(sF);e4e=n(RSe,"STRONG",{});var n2t=s(e4e);Zrr=r(n2t,"data2vec-audio"),n2t.forEach(t),etr=r(RSe," \u2014 "),Nz=n(RSe,"A",{href:!0});var s2t=s(Nz);otr=r(s2t,"Data2VecAudioForCTC"),s2t.forEach(t),rtr=r(RSe," (Data2VecAudio model)"),RSe.forEach(t),ttr=i(Xe),lF=n(Xe,"LI",{});var PSe=s(lF);o4e=n(PSe,"STRONG",{});var l2t=s(o4e);atr=r(l2t,"hubert"),l2t.forEach(t),ntr=r(PSe," \u2014 "),qz=n(PSe,"A",{href:!0});var i2t=s(qz);str=r(i2t,"HubertForCTC"),i2t.forEach(t),ltr=r(PSe," (Hubert model)"),PSe.forEach(t),itr=i(Xe),iF=n(Xe,"LI",{});var BSe=s(iF);r4e=n(BSe,"STRONG",{});var d2t=s(r4e);dtr=r(d2t,"sew"),d2t.forEach(t),ctr=r(BSe," \u2014 "),jz=n(BSe,"A",{href:!0});var c2t=s(jz);ftr=r(c2t,"SEWForCTC"),c2t.forEach(t),mtr=r(BSe," (SEW model)"),BSe.forEach(t),gtr=i(Xe),dF=n(Xe,"LI",{});var ISe=s(dF);t4e=n(ISe,"STRONG",{});var f2t=s(t4e);htr=r(f2t,"sew-d"),f2t.forEach(t),ptr=r(ISe," \u2014 "),Dz=n(ISe,"A",{href:!0});var m2t=s(Dz);_tr=r(m2t,"SEWDForCTC"),m2t.forEach(t),utr=r(ISe," (SEW-D model)"),ISe.forEach(t),btr=i(Xe),cF=n(Xe,"LI",{});var NSe=s(cF);a4e=n(NSe,"STRONG",{});var g2t=s(a4e);vtr=r(g2t,"unispeech"),g2t.forEach(t),Ftr=r(NSe," \u2014 "),Gz=n(NSe,"A",{href:!0});var h2t=s(Gz);Ttr=r(h2t,"UniSpeechForCTC"),h2t.forEach(t),Mtr=r(NSe," (UniSpeech model)"),NSe.forEach(t),Etr=i(Xe),fF=n(Xe,"LI",{});var qSe=s(fF);n4e=n(qSe,"STRONG",{});var p2t=s(n4e);Ctr=r(p2t,"unispeech-sat"),p2t.forEach(t),wtr=r(qSe," \u2014 "),Oz=n(qSe,"A",{href:!0});var _2t=s(Oz);Atr=r(_2t,"UniSpeechSatForCTC"),_2t.forEach(t),Ltr=r(qSe," (UniSpeechSat model)"),qSe.forEach(t),ytr=i(Xe),mF=n(Xe,"LI",{});var jSe=s(mF);s4e=n(jSe,"STRONG",{});var u2t=s(s4e);xtr=r(u2t,"wav2vec2"),u2t.forEach(t),$tr=r(jSe," \u2014 "),Vz=n(jSe,"A",{href:!0});var b2t=s(Vz);ktr=r(b2t,"Wav2Vec2ForCTC"),b2t.forEach(t),Str=r(jSe," (Wav2Vec2 model)"),jSe.forEach(t),Rtr=i(Xe),gF=n(Xe,"LI",{});var DSe=s(gF);l4e=n(DSe,"STRONG",{});var v2t=s(l4e);Ptr=r(v2t,"wav2vec2-conformer"),v2t.forEach(t),Btr=r(DSe," \u2014 "),Xz=n(DSe,"A",{href:!0});var F2t=s(Xz);Itr=r(F2t,"Wav2Vec2ConformerForCTC"),F2t.forEach(t),Ntr=r(DSe," (Wav2Vec2-Conformer model)"),DSe.forEach(t),qtr=i(Xe),hF=n(Xe,"LI",{});var GSe=s(hF);i4e=n(GSe,"STRONG",{});var T2t=s(i4e);jtr=r(T2t,"wavlm"),T2t.forEach(t),Dtr=r(GSe," \u2014 "),zz=n(GSe,"A",{href:!0});var M2t=s(zz);Gtr=r(M2t,"WavLMForCTC"),M2t.forEach(t),Otr=r(GSe," (WavLM model)"),GSe.forEach(t),Xe.forEach(t),Vtr=i(_a),pF=n(_a,"P",{});var OSe=s(pF);Xtr=r(OSe,"The model is set in evaluation mode by default using "),d4e=n(OSe,"CODE",{});var E2t=s(d4e);ztr=r(E2t,"model.eval()"),E2t.forEach(t),Wtr=r(OSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c4e=n(OSe,"CODE",{});var C2t=s(c4e);Qtr=r(C2t,"model.train()"),C2t.forEach(t),OSe.forEach(t),Htr=i(_a),T(_F.$$.fragment,_a),_a.forEach(t),nl.forEach(t),Wje=i(f),Fd=n(f,"H2",{class:!0});var JGe=s(Fd);uF=n(JGe,"A",{id:!0,class:!0,href:!0});var w2t=s(uF);f4e=n(w2t,"SPAN",{});var A2t=s(f4e);T(jy.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),Utr=i(JGe),m4e=n(JGe,"SPAN",{});var L2t=s(m4e);Jtr=r(L2t,"AutoModelForSpeechSeq2Seq"),L2t.forEach(t),JGe.forEach(t),Qje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(Dy.$$.fragment,sl),Ytr=i(sl),Td=n(sl,"P",{});var Eee=s(Td);Ktr=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Wz=n(Eee,"A",{href:!0});var y2t=s(Wz);Ztr=r(y2t,"from_pretrained()"),y2t.forEach(t),ear=r(Eee," class method or the "),Qz=n(Eee,"A",{href:!0});var x2t=s(Qz);oar=r(x2t,"from_config()"),x2t.forEach(t),rar=r(Eee,` class
method.`),Eee.forEach(t),tar=i(sl),Gy=n(sl,"P",{});var YGe=s(Gy);aar=r(YGe,"This class cannot be instantiated directly using "),g4e=n(YGe,"CODE",{});var $2t=s(g4e);nar=r($2t,"__init__()"),$2t.forEach(t),sar=r(YGe," (throws an error)."),YGe.forEach(t),lar=i(sl),Ft=n(sl,"DIV",{class:!0});var EA=s(Ft);T(Oy.$$.fragment,EA),iar=i(EA),h4e=n(EA,"P",{});var k2t=s(h4e);dar=r(k2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k2t.forEach(t),car=i(EA),Md=n(EA,"P",{});var Cee=s(Md);far=r(Cee,`Note:
Loading a model from its configuration file does `),p4e=n(Cee,"STRONG",{});var S2t=s(p4e);mar=r(S2t,"not"),S2t.forEach(t),gar=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(Cee,"A",{href:!0});var R2t=s(Hz);har=r(R2t,"from_pretrained()"),R2t.forEach(t),par=r(Cee," to load the model weights."),Cee.forEach(t),_ar=i(EA),T(bF.$$.fragment,EA),EA.forEach(t),uar=i(sl),go=n(sl,"DIV",{class:!0});var ua=s(go);T(Vy.$$.fragment,ua),bar=i(ua),_4e=n(ua,"P",{});var P2t=s(_4e);Far=r(P2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),P2t.forEach(t),Tar=i(ua),Xa=n(ua,"P",{});var CA=s(Xa);Mar=r(CA,"The model class to instantiate is selected based on the "),u4e=n(CA,"CODE",{});var B2t=s(u4e);Ear=r(B2t,"model_type"),B2t.forEach(t),Car=r(CA,` property of the config object (either
passed as an argument or loaded from `),b4e=n(CA,"CODE",{});var I2t=s(b4e);war=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Aar=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(CA,"CODE",{});var N2t=s(v4e);Lar=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),yar=r(CA,":"),CA.forEach(t),xar=i(ua),Xy=n(ua,"UL",{});var KGe=s(Xy);vF=n(KGe,"LI",{});var VSe=s(vF);F4e=n(VSe,"STRONG",{});var q2t=s(F4e);$ar=r(q2t,"speech-encoder-decoder"),q2t.forEach(t),kar=r(VSe," \u2014 "),Uz=n(VSe,"A",{href:!0});var j2t=s(Uz);Sar=r(j2t,"SpeechEncoderDecoderModel"),j2t.forEach(t),Rar=r(VSe," (Speech Encoder decoder model)"),VSe.forEach(t),Par=i(KGe),FF=n(KGe,"LI",{});var XSe=s(FF);T4e=n(XSe,"STRONG",{});var D2t=s(T4e);Bar=r(D2t,"speech_to_text"),D2t.forEach(t),Iar=r(XSe," \u2014 "),Jz=n(XSe,"A",{href:!0});var G2t=s(Jz);Nar=r(G2t,"Speech2TextForConditionalGeneration"),G2t.forEach(t),qar=r(XSe," (Speech2Text model)"),XSe.forEach(t),KGe.forEach(t),jar=i(ua),TF=n(ua,"P",{});var zSe=s(TF);Dar=r(zSe,"The model is set in evaluation mode by default using "),M4e=n(zSe,"CODE",{});var O2t=s(M4e);Gar=r(O2t,"model.eval()"),O2t.forEach(t),Oar=r(zSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E4e=n(zSe,"CODE",{});var V2t=s(E4e);Var=r(V2t,"model.train()"),V2t.forEach(t),zSe.forEach(t),Xar=i(ua),T(MF.$$.fragment,ua),ua.forEach(t),sl.forEach(t),Hje=i(f),Ed=n(f,"H2",{class:!0});var ZGe=s(Ed);EF=n(ZGe,"A",{id:!0,class:!0,href:!0});var X2t=s(EF);C4e=n(X2t,"SPAN",{});var z2t=s(C4e);T(zy.$$.fragment,z2t),z2t.forEach(t),X2t.forEach(t),zar=i(ZGe),w4e=n(ZGe,"SPAN",{});var W2t=s(w4e);War=r(W2t,"AutoModelForAudioXVector"),W2t.forEach(t),ZGe.forEach(t),Uje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(Wy.$$.fragment,ll),Qar=i(ll),Cd=n(ll,"P",{});var wee=s(Cd);Har=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Yz=n(wee,"A",{href:!0});var Q2t=s(Yz);Uar=r(Q2t,"from_pretrained()"),Q2t.forEach(t),Jar=r(wee," class method or the "),Kz=n(wee,"A",{href:!0});var H2t=s(Kz);Yar=r(H2t,"from_config()"),H2t.forEach(t),Kar=r(wee,` class
method.`),wee.forEach(t),Zar=i(ll),Qy=n(ll,"P",{});var eOe=s(Qy);enr=r(eOe,"This class cannot be instantiated directly using "),A4e=n(eOe,"CODE",{});var U2t=s(A4e);onr=r(U2t,"__init__()"),U2t.forEach(t),rnr=r(eOe," (throws an error)."),eOe.forEach(t),tnr=i(ll),Tt=n(ll,"DIV",{class:!0});var wA=s(Tt);T(Hy.$$.fragment,wA),anr=i(wA),L4e=n(wA,"P",{});var J2t=s(L4e);nnr=r(J2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),J2t.forEach(t),snr=i(wA),wd=n(wA,"P",{});var Aee=s(wd);lnr=r(Aee,`Note:
Loading a model from its configuration file does `),y4e=n(Aee,"STRONG",{});var Y2t=s(y4e);inr=r(Y2t,"not"),Y2t.forEach(t),dnr=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(Aee,"A",{href:!0});var K2t=s(Zz);cnr=r(K2t,"from_pretrained()"),K2t.forEach(t),fnr=r(Aee," to load the model weights."),Aee.forEach(t),mnr=i(wA),T(CF.$$.fragment,wA),wA.forEach(t),gnr=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(Uy.$$.fragment,ba),hnr=i(ba),x4e=n(ba,"P",{});var Z2t=s(x4e);pnr=r(Z2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Z2t.forEach(t),_nr=i(ba),za=n(ba,"P",{});var AA=s(za);unr=r(AA,"The model class to instantiate is selected based on the "),$4e=n(AA,"CODE",{});var evt=s($4e);bnr=r(evt,"model_type"),evt.forEach(t),vnr=r(AA,` property of the config object (either
passed as an argument or loaded from `),k4e=n(AA,"CODE",{});var ovt=s(k4e);Fnr=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),Tnr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(AA,"CODE",{});var rvt=s(S4e);Mnr=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),Enr=r(AA,":"),AA.forEach(t),Cnr=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);wF=n(il,"LI",{});var WSe=s(wF);R4e=n(WSe,"STRONG",{});var tvt=s(R4e);wnr=r(tvt,"data2vec-audio"),tvt.forEach(t),Anr=r(WSe," \u2014 "),eW=n(WSe,"A",{href:!0});var avt=s(eW);Lnr=r(avt,"Data2VecAudioForXVector"),avt.forEach(t),ynr=r(WSe," (Data2VecAudio model)"),WSe.forEach(t),xnr=i(il),AF=n(il,"LI",{});var QSe=s(AF);P4e=n(QSe,"STRONG",{});var nvt=s(P4e);$nr=r(nvt,"unispeech-sat"),nvt.forEach(t),knr=r(QSe," \u2014 "),oW=n(QSe,"A",{href:!0});var svt=s(oW);Snr=r(svt,"UniSpeechSatForXVector"),svt.forEach(t),Rnr=r(QSe," (UniSpeechSat model)"),QSe.forEach(t),Pnr=i(il),LF=n(il,"LI",{});var HSe=s(LF);B4e=n(HSe,"STRONG",{});var lvt=s(B4e);Bnr=r(lvt,"wav2vec2"),lvt.forEach(t),Inr=r(HSe," \u2014 "),rW=n(HSe,"A",{href:!0});var ivt=s(rW);Nnr=r(ivt,"Wav2Vec2ForXVector"),ivt.forEach(t),qnr=r(HSe," (Wav2Vec2 model)"),HSe.forEach(t),jnr=i(il),yF=n(il,"LI",{});var USe=s(yF);I4e=n(USe,"STRONG",{});var dvt=s(I4e);Dnr=r(dvt,"wav2vec2-conformer"),dvt.forEach(t),Gnr=r(USe," \u2014 "),tW=n(USe,"A",{href:!0});var cvt=s(tW);Onr=r(cvt,"Wav2Vec2ConformerForXVector"),cvt.forEach(t),Vnr=r(USe," (Wav2Vec2-Conformer model)"),USe.forEach(t),Xnr=i(il),xF=n(il,"LI",{});var JSe=s(xF);N4e=n(JSe,"STRONG",{});var fvt=s(N4e);znr=r(fvt,"wavlm"),fvt.forEach(t),Wnr=r(JSe," \u2014 "),aW=n(JSe,"A",{href:!0});var mvt=s(aW);Qnr=r(mvt,"WavLMForXVector"),mvt.forEach(t),Hnr=r(JSe," (WavLM model)"),JSe.forEach(t),il.forEach(t),Unr=i(ba),$F=n(ba,"P",{});var YSe=s($F);Jnr=r(YSe,"The model is set in evaluation mode by default using "),q4e=n(YSe,"CODE",{});var gvt=s(q4e);Ynr=r(gvt,"model.eval()"),gvt.forEach(t),Knr=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j4e=n(YSe,"CODE",{});var hvt=s(j4e);Znr=r(hvt,"model.train()"),hvt.forEach(t),YSe.forEach(t),esr=i(ba),T(kF.$$.fragment,ba),ba.forEach(t),ll.forEach(t),Jje=i(f),Ad=n(f,"H2",{class:!0});var oOe=s(Ad);SF=n(oOe,"A",{id:!0,class:!0,href:!0});var pvt=s(SF);D4e=n(pvt,"SPAN",{});var _vt=s(D4e);T(Jy.$$.fragment,_vt),_vt.forEach(t),pvt.forEach(t),osr=i(oOe),G4e=n(oOe,"SPAN",{});var uvt=s(G4e);rsr=r(uvt,"AutoModelForMaskedImageModeling"),uvt.forEach(t),oOe.forEach(t),Yje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(Yy.$$.fragment,dl),tsr=i(dl),Ld=n(dl,"P",{});var Lee=s(Ld);asr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nW=n(Lee,"A",{href:!0});var bvt=s(nW);nsr=r(bvt,"from_pretrained()"),bvt.forEach(t),ssr=r(Lee," class method or the "),sW=n(Lee,"A",{href:!0});var vvt=s(sW);lsr=r(vvt,"from_config()"),vvt.forEach(t),isr=r(Lee,` class
method.`),Lee.forEach(t),dsr=i(dl),Ky=n(dl,"P",{});var rOe=s(Ky);csr=r(rOe,"This class cannot be instantiated directly using "),O4e=n(rOe,"CODE",{});var Fvt=s(O4e);fsr=r(Fvt,"__init__()"),Fvt.forEach(t),msr=r(rOe," (throws an error)."),rOe.forEach(t),gsr=i(dl),Mt=n(dl,"DIV",{class:!0});var LA=s(Mt);T(Zy.$$.fragment,LA),hsr=i(LA),V4e=n(LA,"P",{});var Tvt=s(V4e);psr=r(Tvt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Tvt.forEach(t),_sr=i(LA),yd=n(LA,"P",{});var yee=s(yd);usr=r(yee,`Note:
Loading a model from its configuration file does `),X4e=n(yee,"STRONG",{});var Mvt=s(X4e);bsr=r(Mvt,"not"),Mvt.forEach(t),vsr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(yee,"A",{href:!0});var Evt=s(lW);Fsr=r(Evt,"from_pretrained()"),Evt.forEach(t),Tsr=r(yee," to load the model weights."),yee.forEach(t),Msr=i(LA),T(RF.$$.fragment,LA),LA.forEach(t),Esr=i(dl),po=n(dl,"DIV",{class:!0});var va=s(po);T(e8.$$.fragment,va),Csr=i(va),z4e=n(va,"P",{});var Cvt=s(z4e);wsr=r(Cvt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Cvt.forEach(t),Asr=i(va),Wa=n(va,"P",{});var yA=s(Wa);Lsr=r(yA,"The model class to instantiate is selected based on the "),W4e=n(yA,"CODE",{});var wvt=s(W4e);ysr=r(wvt,"model_type"),wvt.forEach(t),xsr=r(yA,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(yA,"CODE",{});var Avt=s(Q4e);$sr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),ksr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(yA,"CODE",{});var Lvt=s(H4e);Ssr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),Rsr=r(yA,":"),yA.forEach(t),Psr=i(va),xd=n(va,"UL",{});var xee=s(xd);PF=n(xee,"LI",{});var KSe=s(PF);U4e=n(KSe,"STRONG",{});var yvt=s(U4e);Bsr=r(yvt,"deit"),yvt.forEach(t),Isr=r(KSe," \u2014 "),iW=n(KSe,"A",{href:!0});var xvt=s(iW);Nsr=r(xvt,"DeiTForMaskedImageModeling"),xvt.forEach(t),qsr=r(KSe," (DeiT model)"),KSe.forEach(t),jsr=i(xee),BF=n(xee,"LI",{});var ZSe=s(BF);J4e=n(ZSe,"STRONG",{});var $vt=s(J4e);Dsr=r($vt,"swin"),$vt.forEach(t),Gsr=r(ZSe," \u2014 "),dW=n(ZSe,"A",{href:!0});var kvt=s(dW);Osr=r(kvt,"SwinForMaskedImageModeling"),kvt.forEach(t),Vsr=r(ZSe," (Swin Transformer model)"),ZSe.forEach(t),Xsr=i(xee),IF=n(xee,"LI",{});var eRe=s(IF);Y4e=n(eRe,"STRONG",{});var Svt=s(Y4e);zsr=r(Svt,"vit"),Svt.forEach(t),Wsr=r(eRe," \u2014 "),cW=n(eRe,"A",{href:!0});var Rvt=s(cW);Qsr=r(Rvt,"ViTForMaskedImageModeling"),Rvt.forEach(t),Hsr=r(eRe," (ViT model)"),eRe.forEach(t),xee.forEach(t),Usr=i(va),NF=n(va,"P",{});var oRe=s(NF);Jsr=r(oRe,"The model is set in evaluation mode by default using "),K4e=n(oRe,"CODE",{});var Pvt=s(K4e);Ysr=r(Pvt,"model.eval()"),Pvt.forEach(t),Ksr=r(oRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z4e=n(oRe,"CODE",{});var Bvt=s(Z4e);Zsr=r(Bvt,"model.train()"),Bvt.forEach(t),oRe.forEach(t),elr=i(va),T(qF.$$.fragment,va),va.forEach(t),dl.forEach(t),Kje=i(f),$d=n(f,"H2",{class:!0});var tOe=s($d);jF=n(tOe,"A",{id:!0,class:!0,href:!0});var Ivt=s(jF);e1e=n(Ivt,"SPAN",{});var Nvt=s(e1e);T(o8.$$.fragment,Nvt),Nvt.forEach(t),Ivt.forEach(t),olr=i(tOe),o1e=n(tOe,"SPAN",{});var qvt=s(o1e);rlr=r(qvt,"AutoModelForObjectDetection"),qvt.forEach(t),tOe.forEach(t),Zje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(r8.$$.fragment,cl),tlr=i(cl),kd=n(cl,"P",{});var $ee=s(kd);alr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fW=n($ee,"A",{href:!0});var jvt=s(fW);nlr=r(jvt,"from_pretrained()"),jvt.forEach(t),slr=r($ee," class method or the "),mW=n($ee,"A",{href:!0});var Dvt=s(mW);llr=r(Dvt,"from_config()"),Dvt.forEach(t),ilr=r($ee,` class
method.`),$ee.forEach(t),dlr=i(cl),t8=n(cl,"P",{});var aOe=s(t8);clr=r(aOe,"This class cannot be instantiated directly using "),r1e=n(aOe,"CODE",{});var Gvt=s(r1e);flr=r(Gvt,"__init__()"),Gvt.forEach(t),mlr=r(aOe," (throws an error)."),aOe.forEach(t),glr=i(cl),Et=n(cl,"DIV",{class:!0});var xA=s(Et);T(a8.$$.fragment,xA),hlr=i(xA),t1e=n(xA,"P",{});var Ovt=s(t1e);plr=r(Ovt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ovt.forEach(t),_lr=i(xA),Sd=n(xA,"P",{});var kee=s(Sd);ulr=r(kee,`Note:
Loading a model from its configuration file does `),a1e=n(kee,"STRONG",{});var Vvt=s(a1e);blr=r(Vvt,"not"),Vvt.forEach(t),vlr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(kee,"A",{href:!0});var Xvt=s(gW);Flr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Tlr=r(kee," to load the model weights."),kee.forEach(t),Mlr=i(xA),T(DF.$$.fragment,xA),xA.forEach(t),Elr=i(cl),_o=n(cl,"DIV",{class:!0});var Fa=s(_o);T(n8.$$.fragment,Fa),Clr=i(Fa),n1e=n(Fa,"P",{});var zvt=s(n1e);wlr=r(zvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zvt.forEach(t),Alr=i(Fa),Qa=n(Fa,"P",{});var $A=s(Qa);Llr=r($A,"The model class to instantiate is selected based on the "),s1e=n($A,"CODE",{});var Wvt=s(s1e);ylr=r(Wvt,"model_type"),Wvt.forEach(t),xlr=r($A,` property of the config object (either
passed as an argument or loaded from `),l1e=n($A,"CODE",{});var Qvt=s(l1e);$lr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),klr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n($A,"CODE",{});var Hvt=s(i1e);Slr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),Rlr=r($A,":"),$A.forEach(t),Plr=i(Fa),s8=n(Fa,"UL",{});var nOe=s(s8);GF=n(nOe,"LI",{});var rRe=s(GF);d1e=n(rRe,"STRONG",{});var Uvt=s(d1e);Blr=r(Uvt,"detr"),Uvt.forEach(t),Ilr=r(rRe," \u2014 "),hW=n(rRe,"A",{href:!0});var Jvt=s(hW);Nlr=r(Jvt,"DetrForObjectDetection"),Jvt.forEach(t),qlr=r(rRe," (DETR model)"),rRe.forEach(t),jlr=i(nOe),OF=n(nOe,"LI",{});var tRe=s(OF);c1e=n(tRe,"STRONG",{});var Yvt=s(c1e);Dlr=r(Yvt,"yolos"),Yvt.forEach(t),Glr=r(tRe," \u2014 "),pW=n(tRe,"A",{href:!0});var Kvt=s(pW);Olr=r(Kvt,"YolosForObjectDetection"),Kvt.forEach(t),Vlr=r(tRe," (YOLOS model)"),tRe.forEach(t),nOe.forEach(t),Xlr=i(Fa),VF=n(Fa,"P",{});var aRe=s(VF);zlr=r(aRe,"The model is set in evaluation mode by default using "),f1e=n(aRe,"CODE",{});var Zvt=s(f1e);Wlr=r(Zvt,"model.eval()"),Zvt.forEach(t),Qlr=r(aRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=n(aRe,"CODE",{});var eFt=s(m1e);Hlr=r(eFt,"model.train()"),eFt.forEach(t),aRe.forEach(t),Ulr=i(Fa),T(XF.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),eDe=i(f),Rd=n(f,"H2",{class:!0});var sOe=s(Rd);zF=n(sOe,"A",{id:!0,class:!0,href:!0});var oFt=s(zF);g1e=n(oFt,"SPAN",{});var rFt=s(g1e);T(l8.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),Jlr=i(sOe),h1e=n(sOe,"SPAN",{});var tFt=s(h1e);Ylr=r(tFt,"AutoModelForImageSegmentation"),tFt.forEach(t),sOe.forEach(t),oDe=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(i8.$$.fragment,fl),Klr=i(fl),Pd=n(fl,"P",{});var See=s(Pd);Zlr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_W=n(See,"A",{href:!0});var aFt=s(_W);eir=r(aFt,"from_pretrained()"),aFt.forEach(t),oir=r(See," class method or the "),uW=n(See,"A",{href:!0});var nFt=s(uW);rir=r(nFt,"from_config()"),nFt.forEach(t),tir=r(See,` class
method.`),See.forEach(t),air=i(fl),d8=n(fl,"P",{});var lOe=s(d8);nir=r(lOe,"This class cannot be instantiated directly using "),p1e=n(lOe,"CODE",{});var sFt=s(p1e);sir=r(sFt,"__init__()"),sFt.forEach(t),lir=r(lOe," (throws an error)."),lOe.forEach(t),iir=i(fl),Ct=n(fl,"DIV",{class:!0});var kA=s(Ct);T(c8.$$.fragment,kA),dir=i(kA),_1e=n(kA,"P",{});var lFt=s(_1e);cir=r(lFt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),lFt.forEach(t),fir=i(kA),Bd=n(kA,"P",{});var Ree=s(Bd);mir=r(Ree,`Note:
Loading a model from its configuration file does `),u1e=n(Ree,"STRONG",{});var iFt=s(u1e);gir=r(iFt,"not"),iFt.forEach(t),hir=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(Ree,"A",{href:!0});var dFt=s(bW);pir=r(dFt,"from_pretrained()"),dFt.forEach(t),_ir=r(Ree," to load the model weights."),Ree.forEach(t),uir=i(kA),T(WF.$$.fragment,kA),kA.forEach(t),bir=i(fl),uo=n(fl,"DIV",{class:!0});var Ta=s(uo);T(f8.$$.fragment,Ta),vir=i(Ta),b1e=n(Ta,"P",{});var cFt=s(b1e);Fir=r(cFt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cFt.forEach(t),Tir=i(Ta),Ha=n(Ta,"P",{});var SA=s(Ha);Mir=r(SA,"The model class to instantiate is selected based on the "),v1e=n(SA,"CODE",{});var fFt=s(v1e);Eir=r(fFt,"model_type"),fFt.forEach(t),Cir=r(SA,` property of the config object (either
passed as an argument or loaded from `),F1e=n(SA,"CODE",{});var mFt=s(F1e);wir=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),Air=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(SA,"CODE",{});var gFt=s(T1e);Lir=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),yir=r(SA,":"),SA.forEach(t),xir=i(Ta),M1e=n(Ta,"UL",{});var hFt=s(M1e);QF=n(hFt,"LI",{});var nRe=s(QF);E1e=n(nRe,"STRONG",{});var pFt=s(E1e);$ir=r(pFt,"detr"),pFt.forEach(t),kir=r(nRe," \u2014 "),vW=n(nRe,"A",{href:!0});var _Ft=s(vW);Sir=r(_Ft,"DetrForSegmentation"),_Ft.forEach(t),Rir=r(nRe," (DETR model)"),nRe.forEach(t),hFt.forEach(t),Pir=i(Ta),HF=n(Ta,"P",{});var sRe=s(HF);Bir=r(sRe,"The model is set in evaluation mode by default using "),C1e=n(sRe,"CODE",{});var uFt=s(C1e);Iir=r(uFt,"model.eval()"),uFt.forEach(t),Nir=r(sRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=n(sRe,"CODE",{});var bFt=s(w1e);qir=r(bFt,"model.train()"),bFt.forEach(t),sRe.forEach(t),jir=i(Ta),T(UF.$$.fragment,Ta),Ta.forEach(t),fl.forEach(t),rDe=i(f),Id=n(f,"H2",{class:!0});var iOe=s(Id);JF=n(iOe,"A",{id:!0,class:!0,href:!0});var vFt=s(JF);A1e=n(vFt,"SPAN",{});var FFt=s(A1e);T(m8.$$.fragment,FFt),FFt.forEach(t),vFt.forEach(t),Dir=i(iOe),L1e=n(iOe,"SPAN",{});var TFt=s(L1e);Gir=r(TFt,"AutoModelForSemanticSegmentation"),TFt.forEach(t),iOe.forEach(t),tDe=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(g8.$$.fragment,ml),Oir=i(ml),Nd=n(ml,"P",{});var Pee=s(Nd);Vir=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FW=n(Pee,"A",{href:!0});var MFt=s(FW);Xir=r(MFt,"from_pretrained()"),MFt.forEach(t),zir=r(Pee," class method or the "),TW=n(Pee,"A",{href:!0});var EFt=s(TW);Wir=r(EFt,"from_config()"),EFt.forEach(t),Qir=r(Pee,` class
method.`),Pee.forEach(t),Hir=i(ml),h8=n(ml,"P",{});var dOe=s(h8);Uir=r(dOe,"This class cannot be instantiated directly using "),y1e=n(dOe,"CODE",{});var CFt=s(y1e);Jir=r(CFt,"__init__()"),CFt.forEach(t),Yir=r(dOe," (throws an error)."),dOe.forEach(t),Kir=i(ml),wt=n(ml,"DIV",{class:!0});var RA=s(wt);T(p8.$$.fragment,RA),Zir=i(RA),x1e=n(RA,"P",{});var wFt=s(x1e);edr=r(wFt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),wFt.forEach(t),odr=i(RA),qd=n(RA,"P",{});var Bee=s(qd);rdr=r(Bee,`Note:
Loading a model from its configuration file does `),$1e=n(Bee,"STRONG",{});var AFt=s($1e);tdr=r(AFt,"not"),AFt.forEach(t),adr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Bee,"A",{href:!0});var LFt=s(MW);ndr=r(LFt,"from_pretrained()"),LFt.forEach(t),sdr=r(Bee," to load the model weights."),Bee.forEach(t),ldr=i(RA),T(YF.$$.fragment,RA),RA.forEach(t),idr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(_8.$$.fragment,Ma),ddr=i(Ma),k1e=n(Ma,"P",{});var yFt=s(k1e);cdr=r(yFt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),yFt.forEach(t),fdr=i(Ma),Ua=n(Ma,"P",{});var PA=s(Ua);mdr=r(PA,"The model class to instantiate is selected based on the "),S1e=n(PA,"CODE",{});var xFt=s(S1e);gdr=r(xFt,"model_type"),xFt.forEach(t),hdr=r(PA,` property of the config object (either
passed as an argument or loaded from `),R1e=n(PA,"CODE",{});var $Ft=s(R1e);pdr=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),_dr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(PA,"CODE",{});var kFt=s(P1e);udr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),bdr=r(PA,":"),PA.forEach(t),vdr=i(Ma),Ja=n(Ma,"UL",{});var BA=s(Ja);KF=n(BA,"LI",{});var lRe=s(KF);B1e=n(lRe,"STRONG",{});var SFt=s(B1e);Fdr=r(SFt,"beit"),SFt.forEach(t),Tdr=r(lRe," \u2014 "),EW=n(lRe,"A",{href:!0});var RFt=s(EW);Mdr=r(RFt,"BeitForSemanticSegmentation"),RFt.forEach(t),Edr=r(lRe," (BEiT model)"),lRe.forEach(t),Cdr=i(BA),ZF=n(BA,"LI",{});var iRe=s(ZF);I1e=n(iRe,"STRONG",{});var PFt=s(I1e);wdr=r(PFt,"data2vec-vision"),PFt.forEach(t),Adr=r(iRe," \u2014 "),CW=n(iRe,"A",{href:!0});var BFt=s(CW);Ldr=r(BFt,"Data2VecVisionForSemanticSegmentation"),BFt.forEach(t),ydr=r(iRe," (Data2VecVision model)"),iRe.forEach(t),xdr=i(BA),eT=n(BA,"LI",{});var dRe=s(eT);N1e=n(dRe,"STRONG",{});var IFt=s(N1e);$dr=r(IFt,"dpt"),IFt.forEach(t),kdr=r(dRe," \u2014 "),wW=n(dRe,"A",{href:!0});var NFt=s(wW);Sdr=r(NFt,"DPTForSemanticSegmentation"),NFt.forEach(t),Rdr=r(dRe," (DPT model)"),dRe.forEach(t),Pdr=i(BA),oT=n(BA,"LI",{});var cRe=s(oT);q1e=n(cRe,"STRONG",{});var qFt=s(q1e);Bdr=r(qFt,"segformer"),qFt.forEach(t),Idr=r(cRe," \u2014 "),AW=n(cRe,"A",{href:!0});var jFt=s(AW);Ndr=r(jFt,"SegformerForSemanticSegmentation"),jFt.forEach(t),qdr=r(cRe," (SegFormer model)"),cRe.forEach(t),BA.forEach(t),jdr=i(Ma),rT=n(Ma,"P",{});var fRe=s(rT);Ddr=r(fRe,"The model is set in evaluation mode by default using "),j1e=n(fRe,"CODE",{});var DFt=s(j1e);Gdr=r(DFt,"model.eval()"),DFt.forEach(t),Odr=r(fRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=n(fRe,"CODE",{});var GFt=s(D1e);Vdr=r(GFt,"model.train()"),GFt.forEach(t),fRe.forEach(t),Xdr=i(Ma),T(tT.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),aDe=i(f),jd=n(f,"H2",{class:!0});var cOe=s(jd);aT=n(cOe,"A",{id:!0,class:!0,href:!0});var OFt=s(aT);G1e=n(OFt,"SPAN",{});var VFt=s(G1e);T(u8.$$.fragment,VFt),VFt.forEach(t),OFt.forEach(t),zdr=i(cOe),O1e=n(cOe,"SPAN",{});var XFt=s(O1e);Wdr=r(XFt,"AutoModelForInstanceSegmentation"),XFt.forEach(t),cOe.forEach(t),nDe=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(b8.$$.fragment,gl),Qdr=i(gl),Dd=n(gl,"P",{});var Iee=s(Dd);Hdr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),LW=n(Iee,"A",{href:!0});var zFt=s(LW);Udr=r(zFt,"from_pretrained()"),zFt.forEach(t),Jdr=r(Iee," class method or the "),yW=n(Iee,"A",{href:!0});var WFt=s(yW);Ydr=r(WFt,"from_config()"),WFt.forEach(t),Kdr=r(Iee,` class
method.`),Iee.forEach(t),Zdr=i(gl),v8=n(gl,"P",{});var fOe=s(v8);ecr=r(fOe,"This class cannot be instantiated directly using "),V1e=n(fOe,"CODE",{});var QFt=s(V1e);ocr=r(QFt,"__init__()"),QFt.forEach(t),rcr=r(fOe," (throws an error)."),fOe.forEach(t),tcr=i(gl),At=n(gl,"DIV",{class:!0});var IA=s(At);T(F8.$$.fragment,IA),acr=i(IA),X1e=n(IA,"P",{});var HFt=s(X1e);ncr=r(HFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),HFt.forEach(t),scr=i(IA),Gd=n(IA,"P",{});var Nee=s(Gd);lcr=r(Nee,`Note:
Loading a model from its configuration file does `),z1e=n(Nee,"STRONG",{});var UFt=s(z1e);icr=r(UFt,"not"),UFt.forEach(t),dcr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(Nee,"A",{href:!0});var JFt=s(xW);ccr=r(JFt,"from_pretrained()"),JFt.forEach(t),fcr=r(Nee," to load the model weights."),Nee.forEach(t),mcr=i(IA),T(nT.$$.fragment,IA),IA.forEach(t),gcr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(T8.$$.fragment,Ea),hcr=i(Ea),W1e=n(Ea,"P",{});var YFt=s(W1e);pcr=r(YFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),YFt.forEach(t),_cr=i(Ea),Ya=n(Ea,"P",{});var NA=s(Ya);ucr=r(NA,"The model class to instantiate is selected based on the "),Q1e=n(NA,"CODE",{});var KFt=s(Q1e);bcr=r(KFt,"model_type"),KFt.forEach(t),vcr=r(NA,` property of the config object (either
passed as an argument or loaded from `),H1e=n(NA,"CODE",{});var ZFt=s(H1e);Fcr=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),Tcr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(NA,"CODE",{});var eTt=s(U1e);Mcr=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),Ecr=r(NA,":"),NA.forEach(t),Ccr=i(Ea),J1e=n(Ea,"UL",{});var oTt=s(J1e);sT=n(oTt,"LI",{});var mRe=s(sT);Y1e=n(mRe,"STRONG",{});var rTt=s(Y1e);wcr=r(rTt,"maskformer"),rTt.forEach(t),Acr=r(mRe," \u2014 "),$W=n(mRe,"A",{href:!0});var tTt=s($W);Lcr=r(tTt,"MaskFormerForInstanceSegmentation"),tTt.forEach(t),ycr=r(mRe," (MaskFormer model)"),mRe.forEach(t),oTt.forEach(t),xcr=i(Ea),lT=n(Ea,"P",{});var gRe=s(lT);$cr=r(gRe,"The model is set in evaluation mode by default using "),K1e=n(gRe,"CODE",{});var aTt=s(K1e);kcr=r(aTt,"model.eval()"),aTt.forEach(t),Scr=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=n(gRe,"CODE",{});var nTt=s(Z1e);Rcr=r(nTt,"model.train()"),nTt.forEach(t),gRe.forEach(t),Pcr=i(Ea),T(iT.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),sDe=i(f),Od=n(f,"H2",{class:!0});var mOe=s(Od);dT=n(mOe,"A",{id:!0,class:!0,href:!0});var sTt=s(dT);e7e=n(sTt,"SPAN",{});var lTt=s(e7e);T(M8.$$.fragment,lTt),lTt.forEach(t),sTt.forEach(t),Bcr=i(mOe),o7e=n(mOe,"SPAN",{});var iTt=s(o7e);Icr=r(iTt,"TFAutoModel"),iTt.forEach(t),mOe.forEach(t),lDe=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(E8.$$.fragment,hl),Ncr=i(hl),Vd=n(hl,"P",{});var qee=s(Vd);qcr=r(qee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kW=n(qee,"A",{href:!0});var dTt=s(kW);jcr=r(dTt,"from_pretrained()"),dTt.forEach(t),Dcr=r(qee," class method or the "),SW=n(qee,"A",{href:!0});var cTt=s(SW);Gcr=r(cTt,"from_config()"),cTt.forEach(t),Ocr=r(qee,` class
method.`),qee.forEach(t),Vcr=i(hl),C8=n(hl,"P",{});var gOe=s(C8);Xcr=r(gOe,"This class cannot be instantiated directly using "),r7e=n(gOe,"CODE",{});var fTt=s(r7e);zcr=r(fTt,"__init__()"),fTt.forEach(t),Wcr=r(gOe," (throws an error)."),gOe.forEach(t),Qcr=i(hl),Lt=n(hl,"DIV",{class:!0});var qA=s(Lt);T(w8.$$.fragment,qA),Hcr=i(qA),t7e=n(qA,"P",{});var mTt=s(t7e);Ucr=r(mTt,"Instantiates one of the base model classes of the library from a configuration."),mTt.forEach(t),Jcr=i(qA),Xd=n(qA,"P",{});var jee=s(Xd);Ycr=r(jee,`Note:
Loading a model from its configuration file does `),a7e=n(jee,"STRONG",{});var gTt=s(a7e);Kcr=r(gTt,"not"),gTt.forEach(t),Zcr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(jee,"A",{href:!0});var hTt=s(RW);efr=r(hTt,"from_pretrained()"),hTt.forEach(t),ofr=r(jee," to load the model weights."),jee.forEach(t),rfr=i(qA),T(cT.$$.fragment,qA),qA.forEach(t),tfr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(A8.$$.fragment,pl),afr=i(pl),n7e=n(pl,"P",{});var pTt=s(n7e);nfr=r(pTt,"Instantiate one of the base model classes of the library from a pretrained model."),pTt.forEach(t),sfr=i(pl),Ka=n(pl,"P",{});var jA=s(Ka);lfr=r(jA,"The model class to instantiate is selected based on the "),s7e=n(jA,"CODE",{});var _Tt=s(s7e);ifr=r(_Tt,"model_type"),_Tt.forEach(t),dfr=r(jA,` property of the config object (either
passed as an argument or loaded from `),l7e=n(jA,"CODE",{});var uTt=s(l7e);cfr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),ffr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=n(jA,"CODE",{});var bTt=s(i7e);mfr=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),gfr=r(jA,":"),jA.forEach(t),hfr=i(pl),q=n(pl,"UL",{});var D=s(q);fT=n(D,"LI",{});var hRe=s(fT);d7e=n(hRe,"STRONG",{});var vTt=s(d7e);pfr=r(vTt,"albert"),vTt.forEach(t),_fr=r(hRe," \u2014 "),PW=n(hRe,"A",{href:!0});var FTt=s(PW);ufr=r(FTt,"TFAlbertModel"),FTt.forEach(t),bfr=r(hRe," (ALBERT model)"),hRe.forEach(t),vfr=i(D),mT=n(D,"LI",{});var pRe=s(mT);c7e=n(pRe,"STRONG",{});var TTt=s(c7e);Ffr=r(TTt,"bart"),TTt.forEach(t),Tfr=r(pRe," \u2014 "),BW=n(pRe,"A",{href:!0});var MTt=s(BW);Mfr=r(MTt,"TFBartModel"),MTt.forEach(t),Efr=r(pRe," (BART model)"),pRe.forEach(t),Cfr=i(D),gT=n(D,"LI",{});var _Re=s(gT);f7e=n(_Re,"STRONG",{});var ETt=s(f7e);wfr=r(ETt,"bert"),ETt.forEach(t),Afr=r(_Re," \u2014 "),IW=n(_Re,"A",{href:!0});var CTt=s(IW);Lfr=r(CTt,"TFBertModel"),CTt.forEach(t),yfr=r(_Re," (BERT model)"),_Re.forEach(t),xfr=i(D),hT=n(D,"LI",{});var uRe=s(hT);m7e=n(uRe,"STRONG",{});var wTt=s(m7e);$fr=r(wTt,"blenderbot"),wTt.forEach(t),kfr=r(uRe," \u2014 "),NW=n(uRe,"A",{href:!0});var ATt=s(NW);Sfr=r(ATt,"TFBlenderbotModel"),ATt.forEach(t),Rfr=r(uRe," (Blenderbot model)"),uRe.forEach(t),Pfr=i(D),pT=n(D,"LI",{});var bRe=s(pT);g7e=n(bRe,"STRONG",{});var LTt=s(g7e);Bfr=r(LTt,"blenderbot-small"),LTt.forEach(t),Ifr=r(bRe," \u2014 "),qW=n(bRe,"A",{href:!0});var yTt=s(qW);Nfr=r(yTt,"TFBlenderbotSmallModel"),yTt.forEach(t),qfr=r(bRe," (BlenderbotSmall model)"),bRe.forEach(t),jfr=i(D),_T=n(D,"LI",{});var vRe=s(_T);h7e=n(vRe,"STRONG",{});var xTt=s(h7e);Dfr=r(xTt,"camembert"),xTt.forEach(t),Gfr=r(vRe," \u2014 "),jW=n(vRe,"A",{href:!0});var $Tt=s(jW);Ofr=r($Tt,"TFCamembertModel"),$Tt.forEach(t),Vfr=r(vRe," (CamemBERT model)"),vRe.forEach(t),Xfr=i(D),uT=n(D,"LI",{});var FRe=s(uT);p7e=n(FRe,"STRONG",{});var kTt=s(p7e);zfr=r(kTt,"clip"),kTt.forEach(t),Wfr=r(FRe," \u2014 "),DW=n(FRe,"A",{href:!0});var STt=s(DW);Qfr=r(STt,"TFCLIPModel"),STt.forEach(t),Hfr=r(FRe," (CLIP model)"),FRe.forEach(t),Ufr=i(D),bT=n(D,"LI",{});var TRe=s(bT);_7e=n(TRe,"STRONG",{});var RTt=s(_7e);Jfr=r(RTt,"convbert"),RTt.forEach(t),Yfr=r(TRe," \u2014 "),GW=n(TRe,"A",{href:!0});var PTt=s(GW);Kfr=r(PTt,"TFConvBertModel"),PTt.forEach(t),Zfr=r(TRe," (ConvBERT model)"),TRe.forEach(t),emr=i(D),vT=n(D,"LI",{});var MRe=s(vT);u7e=n(MRe,"STRONG",{});var BTt=s(u7e);omr=r(BTt,"convnext"),BTt.forEach(t),rmr=r(MRe," \u2014 "),OW=n(MRe,"A",{href:!0});var ITt=s(OW);tmr=r(ITt,"TFConvNextModel"),ITt.forEach(t),amr=r(MRe," (ConvNeXT model)"),MRe.forEach(t),nmr=i(D),FT=n(D,"LI",{});var ERe=s(FT);b7e=n(ERe,"STRONG",{});var NTt=s(b7e);smr=r(NTt,"ctrl"),NTt.forEach(t),lmr=r(ERe," \u2014 "),VW=n(ERe,"A",{href:!0});var qTt=s(VW);imr=r(qTt,"TFCTRLModel"),qTt.forEach(t),dmr=r(ERe," (CTRL model)"),ERe.forEach(t),cmr=i(D),TT=n(D,"LI",{});var CRe=s(TT);v7e=n(CRe,"STRONG",{});var jTt=s(v7e);fmr=r(jTt,"data2vec-vision"),jTt.forEach(t),mmr=r(CRe," \u2014 "),XW=n(CRe,"A",{href:!0});var DTt=s(XW);gmr=r(DTt,"TFData2VecVisionModel"),DTt.forEach(t),hmr=r(CRe," (Data2VecVision model)"),CRe.forEach(t),pmr=i(D),MT=n(D,"LI",{});var wRe=s(MT);F7e=n(wRe,"STRONG",{});var GTt=s(F7e);_mr=r(GTt,"deberta"),GTt.forEach(t),umr=r(wRe," \u2014 "),zW=n(wRe,"A",{href:!0});var OTt=s(zW);bmr=r(OTt,"TFDebertaModel"),OTt.forEach(t),vmr=r(wRe," (DeBERTa model)"),wRe.forEach(t),Fmr=i(D),ET=n(D,"LI",{});var ARe=s(ET);T7e=n(ARe,"STRONG",{});var VTt=s(T7e);Tmr=r(VTt,"deberta-v2"),VTt.forEach(t),Mmr=r(ARe," \u2014 "),WW=n(ARe,"A",{href:!0});var XTt=s(WW);Emr=r(XTt,"TFDebertaV2Model"),XTt.forEach(t),Cmr=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),wmr=i(D),CT=n(D,"LI",{});var LRe=s(CT);M7e=n(LRe,"STRONG",{});var zTt=s(M7e);Amr=r(zTt,"distilbert"),zTt.forEach(t),Lmr=r(LRe," \u2014 "),QW=n(LRe,"A",{href:!0});var WTt=s(QW);ymr=r(WTt,"TFDistilBertModel"),WTt.forEach(t),xmr=r(LRe," (DistilBERT model)"),LRe.forEach(t),$mr=i(D),wT=n(D,"LI",{});var yRe=s(wT);E7e=n(yRe,"STRONG",{});var QTt=s(E7e);kmr=r(QTt,"dpr"),QTt.forEach(t),Smr=r(yRe," \u2014 "),HW=n(yRe,"A",{href:!0});var HTt=s(HW);Rmr=r(HTt,"TFDPRQuestionEncoder"),HTt.forEach(t),Pmr=r(yRe," (DPR model)"),yRe.forEach(t),Bmr=i(D),AT=n(D,"LI",{});var xRe=s(AT);C7e=n(xRe,"STRONG",{});var UTt=s(C7e);Imr=r(UTt,"electra"),UTt.forEach(t),Nmr=r(xRe," \u2014 "),UW=n(xRe,"A",{href:!0});var JTt=s(UW);qmr=r(JTt,"TFElectraModel"),JTt.forEach(t),jmr=r(xRe," (ELECTRA model)"),xRe.forEach(t),Dmr=i(D),LT=n(D,"LI",{});var $Re=s(LT);w7e=n($Re,"STRONG",{});var YTt=s(w7e);Gmr=r(YTt,"flaubert"),YTt.forEach(t),Omr=r($Re," \u2014 "),JW=n($Re,"A",{href:!0});var KTt=s(JW);Vmr=r(KTt,"TFFlaubertModel"),KTt.forEach(t),Xmr=r($Re," (FlauBERT model)"),$Re.forEach(t),zmr=i(D),Ns=n(D,"LI",{});var nk=s(Ns);A7e=n(nk,"STRONG",{});var ZTt=s(A7e);Wmr=r(ZTt,"funnel"),ZTt.forEach(t),Qmr=r(nk," \u2014 "),YW=n(nk,"A",{href:!0});var eMt=s(YW);Hmr=r(eMt,"TFFunnelModel"),eMt.forEach(t),Umr=r(nk," or "),KW=n(nk,"A",{href:!0});var oMt=s(KW);Jmr=r(oMt,"TFFunnelBaseModel"),oMt.forEach(t),Ymr=r(nk," (Funnel Transformer model)"),nk.forEach(t),Kmr=i(D),yT=n(D,"LI",{});var kRe=s(yT);L7e=n(kRe,"STRONG",{});var rMt=s(L7e);Zmr=r(rMt,"gpt2"),rMt.forEach(t),egr=r(kRe," \u2014 "),ZW=n(kRe,"A",{href:!0});var tMt=s(ZW);ogr=r(tMt,"TFGPT2Model"),tMt.forEach(t),rgr=r(kRe," (OpenAI GPT-2 model)"),kRe.forEach(t),tgr=i(D),xT=n(D,"LI",{});var SRe=s(xT);y7e=n(SRe,"STRONG",{});var aMt=s(y7e);agr=r(aMt,"gptj"),aMt.forEach(t),ngr=r(SRe," \u2014 "),eQ=n(SRe,"A",{href:!0});var nMt=s(eQ);sgr=r(nMt,"TFGPTJModel"),nMt.forEach(t),lgr=r(SRe," (GPT-J model)"),SRe.forEach(t),igr=i(D),$T=n(D,"LI",{});var RRe=s($T);x7e=n(RRe,"STRONG",{});var sMt=s(x7e);dgr=r(sMt,"hubert"),sMt.forEach(t),cgr=r(RRe," \u2014 "),oQ=n(RRe,"A",{href:!0});var lMt=s(oQ);fgr=r(lMt,"TFHubertModel"),lMt.forEach(t),mgr=r(RRe," (Hubert model)"),RRe.forEach(t),ggr=i(D),kT=n(D,"LI",{});var PRe=s(kT);$7e=n(PRe,"STRONG",{});var iMt=s($7e);hgr=r(iMt,"layoutlm"),iMt.forEach(t),pgr=r(PRe," \u2014 "),rQ=n(PRe,"A",{href:!0});var dMt=s(rQ);_gr=r(dMt,"TFLayoutLMModel"),dMt.forEach(t),ugr=r(PRe," (LayoutLM model)"),PRe.forEach(t),bgr=i(D),ST=n(D,"LI",{});var BRe=s(ST);k7e=n(BRe,"STRONG",{});var cMt=s(k7e);vgr=r(cMt,"led"),cMt.forEach(t),Fgr=r(BRe," \u2014 "),tQ=n(BRe,"A",{href:!0});var fMt=s(tQ);Tgr=r(fMt,"TFLEDModel"),fMt.forEach(t),Mgr=r(BRe," (LED model)"),BRe.forEach(t),Egr=i(D),RT=n(D,"LI",{});var IRe=s(RT);S7e=n(IRe,"STRONG",{});var mMt=s(S7e);Cgr=r(mMt,"longformer"),mMt.forEach(t),wgr=r(IRe," \u2014 "),aQ=n(IRe,"A",{href:!0});var gMt=s(aQ);Agr=r(gMt,"TFLongformerModel"),gMt.forEach(t),Lgr=r(IRe," (Longformer model)"),IRe.forEach(t),ygr=i(D),PT=n(D,"LI",{});var NRe=s(PT);R7e=n(NRe,"STRONG",{});var hMt=s(R7e);xgr=r(hMt,"lxmert"),hMt.forEach(t),$gr=r(NRe," \u2014 "),nQ=n(NRe,"A",{href:!0});var pMt=s(nQ);kgr=r(pMt,"TFLxmertModel"),pMt.forEach(t),Sgr=r(NRe," (LXMERT model)"),NRe.forEach(t),Rgr=i(D),BT=n(D,"LI",{});var qRe=s(BT);P7e=n(qRe,"STRONG",{});var _Mt=s(P7e);Pgr=r(_Mt,"marian"),_Mt.forEach(t),Bgr=r(qRe," \u2014 "),sQ=n(qRe,"A",{href:!0});var uMt=s(sQ);Igr=r(uMt,"TFMarianModel"),uMt.forEach(t),Ngr=r(qRe," (Marian model)"),qRe.forEach(t),qgr=i(D),IT=n(D,"LI",{});var jRe=s(IT);B7e=n(jRe,"STRONG",{});var bMt=s(B7e);jgr=r(bMt,"mbart"),bMt.forEach(t),Dgr=r(jRe," \u2014 "),lQ=n(jRe,"A",{href:!0});var vMt=s(lQ);Ggr=r(vMt,"TFMBartModel"),vMt.forEach(t),Ogr=r(jRe," (mBART model)"),jRe.forEach(t),Vgr=i(D),NT=n(D,"LI",{});var DRe=s(NT);I7e=n(DRe,"STRONG",{});var FMt=s(I7e);Xgr=r(FMt,"mobilebert"),FMt.forEach(t),zgr=r(DRe," \u2014 "),iQ=n(DRe,"A",{href:!0});var TMt=s(iQ);Wgr=r(TMt,"TFMobileBertModel"),TMt.forEach(t),Qgr=r(DRe," (MobileBERT model)"),DRe.forEach(t),Hgr=i(D),qT=n(D,"LI",{});var GRe=s(qT);N7e=n(GRe,"STRONG",{});var MMt=s(N7e);Ugr=r(MMt,"mpnet"),MMt.forEach(t),Jgr=r(GRe," \u2014 "),dQ=n(GRe,"A",{href:!0});var EMt=s(dQ);Ygr=r(EMt,"TFMPNetModel"),EMt.forEach(t),Kgr=r(GRe," (MPNet model)"),GRe.forEach(t),Zgr=i(D),jT=n(D,"LI",{});var ORe=s(jT);q7e=n(ORe,"STRONG",{});var CMt=s(q7e);ehr=r(CMt,"mt5"),CMt.forEach(t),ohr=r(ORe," \u2014 "),cQ=n(ORe,"A",{href:!0});var wMt=s(cQ);rhr=r(wMt,"TFMT5Model"),wMt.forEach(t),thr=r(ORe," (MT5 model)"),ORe.forEach(t),ahr=i(D),DT=n(D,"LI",{});var VRe=s(DT);j7e=n(VRe,"STRONG",{});var AMt=s(j7e);nhr=r(AMt,"openai-gpt"),AMt.forEach(t),shr=r(VRe," \u2014 "),fQ=n(VRe,"A",{href:!0});var LMt=s(fQ);lhr=r(LMt,"TFOpenAIGPTModel"),LMt.forEach(t),ihr=r(VRe," (OpenAI GPT model)"),VRe.forEach(t),dhr=i(D),GT=n(D,"LI",{});var XRe=s(GT);D7e=n(XRe,"STRONG",{});var yMt=s(D7e);chr=r(yMt,"opt"),yMt.forEach(t),fhr=r(XRe," \u2014 "),mQ=n(XRe,"A",{href:!0});var xMt=s(mQ);mhr=r(xMt,"TFOPTModel"),xMt.forEach(t),ghr=r(XRe," (OPT model)"),XRe.forEach(t),hhr=i(D),OT=n(D,"LI",{});var zRe=s(OT);G7e=n(zRe,"STRONG",{});var $Mt=s(G7e);phr=r($Mt,"pegasus"),$Mt.forEach(t),_hr=r(zRe," \u2014 "),gQ=n(zRe,"A",{href:!0});var kMt=s(gQ);uhr=r(kMt,"TFPegasusModel"),kMt.forEach(t),bhr=r(zRe," (Pegasus model)"),zRe.forEach(t),vhr=i(D),VT=n(D,"LI",{});var WRe=s(VT);O7e=n(WRe,"STRONG",{});var SMt=s(O7e);Fhr=r(SMt,"rembert"),SMt.forEach(t),Thr=r(WRe," \u2014 "),hQ=n(WRe,"A",{href:!0});var RMt=s(hQ);Mhr=r(RMt,"TFRemBertModel"),RMt.forEach(t),Ehr=r(WRe," (RemBERT model)"),WRe.forEach(t),Chr=i(D),XT=n(D,"LI",{});var QRe=s(XT);V7e=n(QRe,"STRONG",{});var PMt=s(V7e);whr=r(PMt,"roberta"),PMt.forEach(t),Ahr=r(QRe," \u2014 "),pQ=n(QRe,"A",{href:!0});var BMt=s(pQ);Lhr=r(BMt,"TFRobertaModel"),BMt.forEach(t),yhr=r(QRe," (RoBERTa model)"),QRe.forEach(t),xhr=i(D),zT=n(D,"LI",{});var HRe=s(zT);X7e=n(HRe,"STRONG",{});var IMt=s(X7e);$hr=r(IMt,"roformer"),IMt.forEach(t),khr=r(HRe," \u2014 "),_Q=n(HRe,"A",{href:!0});var NMt=s(_Q);Shr=r(NMt,"TFRoFormerModel"),NMt.forEach(t),Rhr=r(HRe," (RoFormer model)"),HRe.forEach(t),Phr=i(D),WT=n(D,"LI",{});var URe=s(WT);z7e=n(URe,"STRONG",{});var qMt=s(z7e);Bhr=r(qMt,"speech_to_text"),qMt.forEach(t),Ihr=r(URe," \u2014 "),uQ=n(URe,"A",{href:!0});var jMt=s(uQ);Nhr=r(jMt,"TFSpeech2TextModel"),jMt.forEach(t),qhr=r(URe," (Speech2Text model)"),URe.forEach(t),jhr=i(D),QT=n(D,"LI",{});var JRe=s(QT);W7e=n(JRe,"STRONG",{});var DMt=s(W7e);Dhr=r(DMt,"swin"),DMt.forEach(t),Ghr=r(JRe," \u2014 "),bQ=n(JRe,"A",{href:!0});var GMt=s(bQ);Ohr=r(GMt,"TFSwinModel"),GMt.forEach(t),Vhr=r(JRe," (Swin Transformer model)"),JRe.forEach(t),Xhr=i(D),HT=n(D,"LI",{});var YRe=s(HT);Q7e=n(YRe,"STRONG",{});var OMt=s(Q7e);zhr=r(OMt,"t5"),OMt.forEach(t),Whr=r(YRe," \u2014 "),vQ=n(YRe,"A",{href:!0});var VMt=s(vQ);Qhr=r(VMt,"TFT5Model"),VMt.forEach(t),Hhr=r(YRe," (T5 model)"),YRe.forEach(t),Uhr=i(D),UT=n(D,"LI",{});var KRe=s(UT);H7e=n(KRe,"STRONG",{});var XMt=s(H7e);Jhr=r(XMt,"tapas"),XMt.forEach(t),Yhr=r(KRe," \u2014 "),FQ=n(KRe,"A",{href:!0});var zMt=s(FQ);Khr=r(zMt,"TFTapasModel"),zMt.forEach(t),Zhr=r(KRe," (TAPAS model)"),KRe.forEach(t),epr=i(D),JT=n(D,"LI",{});var ZRe=s(JT);U7e=n(ZRe,"STRONG",{});var WMt=s(U7e);opr=r(WMt,"transfo-xl"),WMt.forEach(t),rpr=r(ZRe," \u2014 "),TQ=n(ZRe,"A",{href:!0});var QMt=s(TQ);tpr=r(QMt,"TFTransfoXLModel"),QMt.forEach(t),apr=r(ZRe," (Transformer-XL model)"),ZRe.forEach(t),npr=i(D),YT=n(D,"LI",{});var ePe=s(YT);J7e=n(ePe,"STRONG",{});var HMt=s(J7e);spr=r(HMt,"vit"),HMt.forEach(t),lpr=r(ePe," \u2014 "),MQ=n(ePe,"A",{href:!0});var UMt=s(MQ);ipr=r(UMt,"TFViTModel"),UMt.forEach(t),dpr=r(ePe," (ViT model)"),ePe.forEach(t),cpr=i(D),KT=n(D,"LI",{});var oPe=s(KT);Y7e=n(oPe,"STRONG",{});var JMt=s(Y7e);fpr=r(JMt,"vit_mae"),JMt.forEach(t),mpr=r(oPe," \u2014 "),EQ=n(oPe,"A",{href:!0});var YMt=s(EQ);gpr=r(YMt,"TFViTMAEModel"),YMt.forEach(t),hpr=r(oPe," (ViTMAE model)"),oPe.forEach(t),ppr=i(D),ZT=n(D,"LI",{});var rPe=s(ZT);K7e=n(rPe,"STRONG",{});var KMt=s(K7e);_pr=r(KMt,"wav2vec2"),KMt.forEach(t),upr=r(rPe," \u2014 "),CQ=n(rPe,"A",{href:!0});var ZMt=s(CQ);bpr=r(ZMt,"TFWav2Vec2Model"),ZMt.forEach(t),vpr=r(rPe," (Wav2Vec2 model)"),rPe.forEach(t),Fpr=i(D),eM=n(D,"LI",{});var tPe=s(eM);Z7e=n(tPe,"STRONG",{});var eEt=s(Z7e);Tpr=r(eEt,"xlm"),eEt.forEach(t),Mpr=r(tPe," \u2014 "),wQ=n(tPe,"A",{href:!0});var oEt=s(wQ);Epr=r(oEt,"TFXLMModel"),oEt.forEach(t),Cpr=r(tPe," (XLM model)"),tPe.forEach(t),wpr=i(D),oM=n(D,"LI",{});var aPe=s(oM);ebe=n(aPe,"STRONG",{});var rEt=s(ebe);Apr=r(rEt,"xlm-roberta"),rEt.forEach(t),Lpr=r(aPe," \u2014 "),AQ=n(aPe,"A",{href:!0});var tEt=s(AQ);ypr=r(tEt,"TFXLMRobertaModel"),tEt.forEach(t),xpr=r(aPe," (XLM-RoBERTa model)"),aPe.forEach(t),$pr=i(D),rM=n(D,"LI",{});var nPe=s(rM);obe=n(nPe,"STRONG",{});var aEt=s(obe);kpr=r(aEt,"xlnet"),aEt.forEach(t),Spr=r(nPe," \u2014 "),LQ=n(nPe,"A",{href:!0});var nEt=s(LQ);Rpr=r(nEt,"TFXLNetModel"),nEt.forEach(t),Ppr=r(nPe," (XLNet model)"),nPe.forEach(t),D.forEach(t),Bpr=i(pl),T(tM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),iDe=i(f),zd=n(f,"H2",{class:!0});var hOe=s(zd);aM=n(hOe,"A",{id:!0,class:!0,href:!0});var sEt=s(aM);rbe=n(sEt,"SPAN",{});var lEt=s(rbe);T(L8.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),Ipr=i(hOe),tbe=n(hOe,"SPAN",{});var iEt=s(tbe);Npr=r(iEt,"TFAutoModelForPreTraining"),iEt.forEach(t),hOe.forEach(t),dDe=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(y8.$$.fragment,_l),qpr=i(_l),Wd=n(_l,"P",{});var Dee=s(Wd);jpr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yQ=n(Dee,"A",{href:!0});var dEt=s(yQ);Dpr=r(dEt,"from_pretrained()"),dEt.forEach(t),Gpr=r(Dee," class method or the "),xQ=n(Dee,"A",{href:!0});var cEt=s(xQ);Opr=r(cEt,"from_config()"),cEt.forEach(t),Vpr=r(Dee,` class
method.`),Dee.forEach(t),Xpr=i(_l),x8=n(_l,"P",{});var pOe=s(x8);zpr=r(pOe,"This class cannot be instantiated directly using "),abe=n(pOe,"CODE",{});var fEt=s(abe);Wpr=r(fEt,"__init__()"),fEt.forEach(t),Qpr=r(pOe," (throws an error)."),pOe.forEach(t),Hpr=i(_l),yt=n(_l,"DIV",{class:!0});var DA=s(yt);T($8.$$.fragment,DA),Upr=i(DA),nbe=n(DA,"P",{});var mEt=s(nbe);Jpr=r(mEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mEt.forEach(t),Ypr=i(DA),Qd=n(DA,"P",{});var Gee=s(Qd);Kpr=r(Gee,`Note:
Loading a model from its configuration file does `),sbe=n(Gee,"STRONG",{});var gEt=s(sbe);Zpr=r(gEt,"not"),gEt.forEach(t),e_r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(Gee,"A",{href:!0});var hEt=s($Q);o_r=r(hEt,"from_pretrained()"),hEt.forEach(t),r_r=r(Gee," to load the model weights."),Gee.forEach(t),t_r=i(DA),T(nM.$$.fragment,DA),DA.forEach(t),a_r=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(k8.$$.fragment,ul),n_r=i(ul),lbe=n(ul,"P",{});var pEt=s(lbe);s_r=r(pEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pEt.forEach(t),l_r=i(ul),Za=n(ul,"P",{});var GA=s(Za);i_r=r(GA,"The model class to instantiate is selected based on the "),ibe=n(GA,"CODE",{});var _Et=s(ibe);d_r=r(_Et,"model_type"),_Et.forEach(t),c_r=r(GA,` property of the config object (either
passed as an argument or loaded from `),dbe=n(GA,"CODE",{});var uEt=s(dbe);f_r=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),m_r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(GA,"CODE",{});var bEt=s(cbe);g_r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),h_r=r(GA,":"),GA.forEach(t),p_r=i(ul),se=n(ul,"UL",{});var le=s(se);sM=n(le,"LI",{});var sPe=s(sM);fbe=n(sPe,"STRONG",{});var vEt=s(fbe);__r=r(vEt,"albert"),vEt.forEach(t),u_r=r(sPe," \u2014 "),kQ=n(sPe,"A",{href:!0});var FEt=s(kQ);b_r=r(FEt,"TFAlbertForPreTraining"),FEt.forEach(t),v_r=r(sPe," (ALBERT model)"),sPe.forEach(t),F_r=i(le),lM=n(le,"LI",{});var lPe=s(lM);mbe=n(lPe,"STRONG",{});var TEt=s(mbe);T_r=r(TEt,"bart"),TEt.forEach(t),M_r=r(lPe," \u2014 "),SQ=n(lPe,"A",{href:!0});var MEt=s(SQ);E_r=r(MEt,"TFBartForConditionalGeneration"),MEt.forEach(t),C_r=r(lPe," (BART model)"),lPe.forEach(t),w_r=i(le),iM=n(le,"LI",{});var iPe=s(iM);gbe=n(iPe,"STRONG",{});var EEt=s(gbe);A_r=r(EEt,"bert"),EEt.forEach(t),L_r=r(iPe," \u2014 "),RQ=n(iPe,"A",{href:!0});var CEt=s(RQ);y_r=r(CEt,"TFBertForPreTraining"),CEt.forEach(t),x_r=r(iPe," (BERT model)"),iPe.forEach(t),$_r=i(le),dM=n(le,"LI",{});var dPe=s(dM);hbe=n(dPe,"STRONG",{});var wEt=s(hbe);k_r=r(wEt,"camembert"),wEt.forEach(t),S_r=r(dPe," \u2014 "),PQ=n(dPe,"A",{href:!0});var AEt=s(PQ);R_r=r(AEt,"TFCamembertForMaskedLM"),AEt.forEach(t),P_r=r(dPe," (CamemBERT model)"),dPe.forEach(t),B_r=i(le),cM=n(le,"LI",{});var cPe=s(cM);pbe=n(cPe,"STRONG",{});var LEt=s(pbe);I_r=r(LEt,"ctrl"),LEt.forEach(t),N_r=r(cPe," \u2014 "),BQ=n(cPe,"A",{href:!0});var yEt=s(BQ);q_r=r(yEt,"TFCTRLLMHeadModel"),yEt.forEach(t),j_r=r(cPe," (CTRL model)"),cPe.forEach(t),D_r=i(le),fM=n(le,"LI",{});var fPe=s(fM);_be=n(fPe,"STRONG",{});var xEt=s(_be);G_r=r(xEt,"distilbert"),xEt.forEach(t),O_r=r(fPe," \u2014 "),IQ=n(fPe,"A",{href:!0});var $Et=s(IQ);V_r=r($Et,"TFDistilBertForMaskedLM"),$Et.forEach(t),X_r=r(fPe," (DistilBERT model)"),fPe.forEach(t),z_r=i(le),mM=n(le,"LI",{});var mPe=s(mM);ube=n(mPe,"STRONG",{});var kEt=s(ube);W_r=r(kEt,"electra"),kEt.forEach(t),Q_r=r(mPe," \u2014 "),NQ=n(mPe,"A",{href:!0});var SEt=s(NQ);H_r=r(SEt,"TFElectraForPreTraining"),SEt.forEach(t),U_r=r(mPe," (ELECTRA model)"),mPe.forEach(t),J_r=i(le),gM=n(le,"LI",{});var gPe=s(gM);bbe=n(gPe,"STRONG",{});var REt=s(bbe);Y_r=r(REt,"flaubert"),REt.forEach(t),K_r=r(gPe," \u2014 "),qQ=n(gPe,"A",{href:!0});var PEt=s(qQ);Z_r=r(PEt,"TFFlaubertWithLMHeadModel"),PEt.forEach(t),eur=r(gPe," (FlauBERT model)"),gPe.forEach(t),our=i(le),hM=n(le,"LI",{});var hPe=s(hM);vbe=n(hPe,"STRONG",{});var BEt=s(vbe);rur=r(BEt,"funnel"),BEt.forEach(t),tur=r(hPe," \u2014 "),jQ=n(hPe,"A",{href:!0});var IEt=s(jQ);aur=r(IEt,"TFFunnelForPreTraining"),IEt.forEach(t),nur=r(hPe," (Funnel Transformer model)"),hPe.forEach(t),sur=i(le),pM=n(le,"LI",{});var pPe=s(pM);Fbe=n(pPe,"STRONG",{});var NEt=s(Fbe);lur=r(NEt,"gpt2"),NEt.forEach(t),iur=r(pPe," \u2014 "),DQ=n(pPe,"A",{href:!0});var qEt=s(DQ);dur=r(qEt,"TFGPT2LMHeadModel"),qEt.forEach(t),cur=r(pPe," (OpenAI GPT-2 model)"),pPe.forEach(t),fur=i(le),_M=n(le,"LI",{});var _Pe=s(_M);Tbe=n(_Pe,"STRONG",{});var jEt=s(Tbe);mur=r(jEt,"layoutlm"),jEt.forEach(t),gur=r(_Pe," \u2014 "),GQ=n(_Pe,"A",{href:!0});var DEt=s(GQ);hur=r(DEt,"TFLayoutLMForMaskedLM"),DEt.forEach(t),pur=r(_Pe," (LayoutLM model)"),_Pe.forEach(t),_ur=i(le),uM=n(le,"LI",{});var uPe=s(uM);Mbe=n(uPe,"STRONG",{});var GEt=s(Mbe);uur=r(GEt,"lxmert"),GEt.forEach(t),bur=r(uPe," \u2014 "),OQ=n(uPe,"A",{href:!0});var OEt=s(OQ);vur=r(OEt,"TFLxmertForPreTraining"),OEt.forEach(t),Fur=r(uPe," (LXMERT model)"),uPe.forEach(t),Tur=i(le),bM=n(le,"LI",{});var bPe=s(bM);Ebe=n(bPe,"STRONG",{});var VEt=s(Ebe);Mur=r(VEt,"mobilebert"),VEt.forEach(t),Eur=r(bPe," \u2014 "),VQ=n(bPe,"A",{href:!0});var XEt=s(VQ);Cur=r(XEt,"TFMobileBertForPreTraining"),XEt.forEach(t),wur=r(bPe," (MobileBERT model)"),bPe.forEach(t),Aur=i(le),vM=n(le,"LI",{});var vPe=s(vM);Cbe=n(vPe,"STRONG",{});var zEt=s(Cbe);Lur=r(zEt,"mpnet"),zEt.forEach(t),yur=r(vPe," \u2014 "),XQ=n(vPe,"A",{href:!0});var WEt=s(XQ);xur=r(WEt,"TFMPNetForMaskedLM"),WEt.forEach(t),$ur=r(vPe," (MPNet model)"),vPe.forEach(t),kur=i(le),FM=n(le,"LI",{});var FPe=s(FM);wbe=n(FPe,"STRONG",{});var QEt=s(wbe);Sur=r(QEt,"openai-gpt"),QEt.forEach(t),Rur=r(FPe," \u2014 "),zQ=n(FPe,"A",{href:!0});var HEt=s(zQ);Pur=r(HEt,"TFOpenAIGPTLMHeadModel"),HEt.forEach(t),Bur=r(FPe," (OpenAI GPT model)"),FPe.forEach(t),Iur=i(le),TM=n(le,"LI",{});var TPe=s(TM);Abe=n(TPe,"STRONG",{});var UEt=s(Abe);Nur=r(UEt,"roberta"),UEt.forEach(t),qur=r(TPe," \u2014 "),WQ=n(TPe,"A",{href:!0});var JEt=s(WQ);jur=r(JEt,"TFRobertaForMaskedLM"),JEt.forEach(t),Dur=r(TPe," (RoBERTa model)"),TPe.forEach(t),Gur=i(le),MM=n(le,"LI",{});var MPe=s(MM);Lbe=n(MPe,"STRONG",{});var YEt=s(Lbe);Our=r(YEt,"t5"),YEt.forEach(t),Vur=r(MPe," \u2014 "),QQ=n(MPe,"A",{href:!0});var KEt=s(QQ);Xur=r(KEt,"TFT5ForConditionalGeneration"),KEt.forEach(t),zur=r(MPe," (T5 model)"),MPe.forEach(t),Wur=i(le),EM=n(le,"LI",{});var EPe=s(EM);ybe=n(EPe,"STRONG",{});var ZEt=s(ybe);Qur=r(ZEt,"tapas"),ZEt.forEach(t),Hur=r(EPe," \u2014 "),HQ=n(EPe,"A",{href:!0});var eCt=s(HQ);Uur=r(eCt,"TFTapasForMaskedLM"),eCt.forEach(t),Jur=r(EPe," (TAPAS model)"),EPe.forEach(t),Yur=i(le),CM=n(le,"LI",{});var CPe=s(CM);xbe=n(CPe,"STRONG",{});var oCt=s(xbe);Kur=r(oCt,"transfo-xl"),oCt.forEach(t),Zur=r(CPe," \u2014 "),UQ=n(CPe,"A",{href:!0});var rCt=s(UQ);e4r=r(rCt,"TFTransfoXLLMHeadModel"),rCt.forEach(t),o4r=r(CPe," (Transformer-XL model)"),CPe.forEach(t),r4r=i(le),wM=n(le,"LI",{});var wPe=s(wM);$be=n(wPe,"STRONG",{});var tCt=s($be);t4r=r(tCt,"vit_mae"),tCt.forEach(t),a4r=r(wPe," \u2014 "),JQ=n(wPe,"A",{href:!0});var aCt=s(JQ);n4r=r(aCt,"TFViTMAEForPreTraining"),aCt.forEach(t),s4r=r(wPe," (ViTMAE model)"),wPe.forEach(t),l4r=i(le),AM=n(le,"LI",{});var APe=s(AM);kbe=n(APe,"STRONG",{});var nCt=s(kbe);i4r=r(nCt,"xlm"),nCt.forEach(t),d4r=r(APe," \u2014 "),YQ=n(APe,"A",{href:!0});var sCt=s(YQ);c4r=r(sCt,"TFXLMWithLMHeadModel"),sCt.forEach(t),f4r=r(APe," (XLM model)"),APe.forEach(t),m4r=i(le),LM=n(le,"LI",{});var LPe=s(LM);Sbe=n(LPe,"STRONG",{});var lCt=s(Sbe);g4r=r(lCt,"xlm-roberta"),lCt.forEach(t),h4r=r(LPe," \u2014 "),KQ=n(LPe,"A",{href:!0});var iCt=s(KQ);p4r=r(iCt,"TFXLMRobertaForMaskedLM"),iCt.forEach(t),_4r=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),u4r=i(le),yM=n(le,"LI",{});var yPe=s(yM);Rbe=n(yPe,"STRONG",{});var dCt=s(Rbe);b4r=r(dCt,"xlnet"),dCt.forEach(t),v4r=r(yPe," \u2014 "),ZQ=n(yPe,"A",{href:!0});var cCt=s(ZQ);F4r=r(cCt,"TFXLNetLMHeadModel"),cCt.forEach(t),T4r=r(yPe," (XLNet model)"),yPe.forEach(t),le.forEach(t),M4r=i(ul),T(xM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),cDe=i(f),Hd=n(f,"H2",{class:!0});var _Oe=s(Hd);$M=n(_Oe,"A",{id:!0,class:!0,href:!0});var fCt=s($M);Pbe=n(fCt,"SPAN",{});var mCt=s(Pbe);T(S8.$$.fragment,mCt),mCt.forEach(t),fCt.forEach(t),E4r=i(_Oe),Bbe=n(_Oe,"SPAN",{});var gCt=s(Bbe);C4r=r(gCt,"TFAutoModelForCausalLM"),gCt.forEach(t),_Oe.forEach(t),fDe=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T(R8.$$.fragment,bl),w4r=i(bl),Ud=n(bl,"P",{});var Oee=s(Ud);A4r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eH=n(Oee,"A",{href:!0});var hCt=s(eH);L4r=r(hCt,"from_pretrained()"),hCt.forEach(t),y4r=r(Oee," class method or the "),oH=n(Oee,"A",{href:!0});var pCt=s(oH);x4r=r(pCt,"from_config()"),pCt.forEach(t),$4r=r(Oee,` class
method.`),Oee.forEach(t),k4r=i(bl),P8=n(bl,"P",{});var uOe=s(P8);S4r=r(uOe,"This class cannot be instantiated directly using "),Ibe=n(uOe,"CODE",{});var _Ct=s(Ibe);R4r=r(_Ct,"__init__()"),_Ct.forEach(t),P4r=r(uOe," (throws an error)."),uOe.forEach(t),B4r=i(bl),xt=n(bl,"DIV",{class:!0});var OA=s(xt);T(B8.$$.fragment,OA),I4r=i(OA),Nbe=n(OA,"P",{});var uCt=s(Nbe);N4r=r(uCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uCt.forEach(t),q4r=i(OA),Jd=n(OA,"P",{});var Vee=s(Jd);j4r=r(Vee,`Note:
Loading a model from its configuration file does `),qbe=n(Vee,"STRONG",{});var bCt=s(qbe);D4r=r(bCt,"not"),bCt.forEach(t),G4r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(Vee,"A",{href:!0});var vCt=s(rH);O4r=r(vCt,"from_pretrained()"),vCt.forEach(t),V4r=r(Vee," to load the model weights."),Vee.forEach(t),X4r=i(OA),T(kM.$$.fragment,OA),OA.forEach(t),z4r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(I8.$$.fragment,vl),W4r=i(vl),jbe=n(vl,"P",{});var FCt=s(jbe);Q4r=r(FCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FCt.forEach(t),H4r=i(vl),en=n(vl,"P",{});var VA=s(en);U4r=r(VA,"The model class to instantiate is selected based on the "),Dbe=n(VA,"CODE",{});var TCt=s(Dbe);J4r=r(TCt,"model_type"),TCt.forEach(t),Y4r=r(VA,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(VA,"CODE",{});var MCt=s(Gbe);K4r=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),Z4r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(VA,"CODE",{});var ECt=s(Obe);e1r=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),o1r=r(VA,":"),VA.forEach(t),r1r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);SM=n(Ce,"LI",{});var xPe=s(SM);Vbe=n(xPe,"STRONG",{});var CCt=s(Vbe);t1r=r(CCt,"bert"),CCt.forEach(t),a1r=r(xPe," \u2014 "),tH=n(xPe,"A",{href:!0});var wCt=s(tH);n1r=r(wCt,"TFBertLMHeadModel"),wCt.forEach(t),s1r=r(xPe," (BERT model)"),xPe.forEach(t),l1r=i(Ce),RM=n(Ce,"LI",{});var $Pe=s(RM);Xbe=n($Pe,"STRONG",{});var ACt=s(Xbe);i1r=r(ACt,"camembert"),ACt.forEach(t),d1r=r($Pe," \u2014 "),aH=n($Pe,"A",{href:!0});var LCt=s(aH);c1r=r(LCt,"TFCamembertForCausalLM"),LCt.forEach(t),f1r=r($Pe," (CamemBERT model)"),$Pe.forEach(t),m1r=i(Ce),PM=n(Ce,"LI",{});var kPe=s(PM);zbe=n(kPe,"STRONG",{});var yCt=s(zbe);g1r=r(yCt,"ctrl"),yCt.forEach(t),h1r=r(kPe," \u2014 "),nH=n(kPe,"A",{href:!0});var xCt=s(nH);p1r=r(xCt,"TFCTRLLMHeadModel"),xCt.forEach(t),_1r=r(kPe," (CTRL model)"),kPe.forEach(t),u1r=i(Ce),BM=n(Ce,"LI",{});var SPe=s(BM);Wbe=n(SPe,"STRONG",{});var $Ct=s(Wbe);b1r=r($Ct,"gpt2"),$Ct.forEach(t),v1r=r(SPe," \u2014 "),sH=n(SPe,"A",{href:!0});var kCt=s(sH);F1r=r(kCt,"TFGPT2LMHeadModel"),kCt.forEach(t),T1r=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),M1r=i(Ce),IM=n(Ce,"LI",{});var RPe=s(IM);Qbe=n(RPe,"STRONG",{});var SCt=s(Qbe);E1r=r(SCt,"gptj"),SCt.forEach(t),C1r=r(RPe," \u2014 "),lH=n(RPe,"A",{href:!0});var RCt=s(lH);w1r=r(RCt,"TFGPTJForCausalLM"),RCt.forEach(t),A1r=r(RPe," (GPT-J model)"),RPe.forEach(t),L1r=i(Ce),NM=n(Ce,"LI",{});var PPe=s(NM);Hbe=n(PPe,"STRONG",{});var PCt=s(Hbe);y1r=r(PCt,"openai-gpt"),PCt.forEach(t),x1r=r(PPe," \u2014 "),iH=n(PPe,"A",{href:!0});var BCt=s(iH);$1r=r(BCt,"TFOpenAIGPTLMHeadModel"),BCt.forEach(t),k1r=r(PPe," (OpenAI GPT model)"),PPe.forEach(t),S1r=i(Ce),qM=n(Ce,"LI",{});var BPe=s(qM);Ube=n(BPe,"STRONG",{});var ICt=s(Ube);R1r=r(ICt,"opt"),ICt.forEach(t),P1r=r(BPe," \u2014 "),dH=n(BPe,"A",{href:!0});var NCt=s(dH);B1r=r(NCt,"TFOPTForCausalLM"),NCt.forEach(t),I1r=r(BPe," (OPT model)"),BPe.forEach(t),N1r=i(Ce),jM=n(Ce,"LI",{});var IPe=s(jM);Jbe=n(IPe,"STRONG",{});var qCt=s(Jbe);q1r=r(qCt,"rembert"),qCt.forEach(t),j1r=r(IPe," \u2014 "),cH=n(IPe,"A",{href:!0});var jCt=s(cH);D1r=r(jCt,"TFRemBertForCausalLM"),jCt.forEach(t),G1r=r(IPe," (RemBERT model)"),IPe.forEach(t),O1r=i(Ce),DM=n(Ce,"LI",{});var NPe=s(DM);Ybe=n(NPe,"STRONG",{});var DCt=s(Ybe);V1r=r(DCt,"roberta"),DCt.forEach(t),X1r=r(NPe," \u2014 "),fH=n(NPe,"A",{href:!0});var GCt=s(fH);z1r=r(GCt,"TFRobertaForCausalLM"),GCt.forEach(t),W1r=r(NPe," (RoBERTa model)"),NPe.forEach(t),Q1r=i(Ce),GM=n(Ce,"LI",{});var qPe=s(GM);Kbe=n(qPe,"STRONG",{});var OCt=s(Kbe);H1r=r(OCt,"roformer"),OCt.forEach(t),U1r=r(qPe," \u2014 "),mH=n(qPe,"A",{href:!0});var VCt=s(mH);J1r=r(VCt,"TFRoFormerForCausalLM"),VCt.forEach(t),Y1r=r(qPe," (RoFormer model)"),qPe.forEach(t),K1r=i(Ce),OM=n(Ce,"LI",{});var jPe=s(OM);Zbe=n(jPe,"STRONG",{});var XCt=s(Zbe);Z1r=r(XCt,"transfo-xl"),XCt.forEach(t),e7r=r(jPe," \u2014 "),gH=n(jPe,"A",{href:!0});var zCt=s(gH);o7r=r(zCt,"TFTransfoXLLMHeadModel"),zCt.forEach(t),r7r=r(jPe," (Transformer-XL model)"),jPe.forEach(t),t7r=i(Ce),VM=n(Ce,"LI",{});var DPe=s(VM);e2e=n(DPe,"STRONG",{});var WCt=s(e2e);a7r=r(WCt,"xlm"),WCt.forEach(t),n7r=r(DPe," \u2014 "),hH=n(DPe,"A",{href:!0});var QCt=s(hH);s7r=r(QCt,"TFXLMWithLMHeadModel"),QCt.forEach(t),l7r=r(DPe," (XLM model)"),DPe.forEach(t),i7r=i(Ce),XM=n(Ce,"LI",{});var GPe=s(XM);o2e=n(GPe,"STRONG",{});var HCt=s(o2e);d7r=r(HCt,"xlnet"),HCt.forEach(t),c7r=r(GPe," \u2014 "),pH=n(GPe,"A",{href:!0});var UCt=s(pH);f7r=r(UCt,"TFXLNetLMHeadModel"),UCt.forEach(t),m7r=r(GPe," (XLNet model)"),GPe.forEach(t),Ce.forEach(t),g7r=i(vl),T(zM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),mDe=i(f),Yd=n(f,"H2",{class:!0});var bOe=s(Yd);WM=n(bOe,"A",{id:!0,class:!0,href:!0});var JCt=s(WM);r2e=n(JCt,"SPAN",{});var YCt=s(r2e);T(N8.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),h7r=i(bOe),t2e=n(bOe,"SPAN",{});var KCt=s(t2e);p7r=r(KCt,"TFAutoModelForImageClassification"),KCt.forEach(t),bOe.forEach(t),gDe=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(q8.$$.fragment,Fl),_7r=i(Fl),Kd=n(Fl,"P",{});var Xee=s(Kd);u7r=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_H=n(Xee,"A",{href:!0});var ZCt=s(_H);b7r=r(ZCt,"from_pretrained()"),ZCt.forEach(t),v7r=r(Xee," class method or the "),uH=n(Xee,"A",{href:!0});var e5t=s(uH);F7r=r(e5t,"from_config()"),e5t.forEach(t),T7r=r(Xee,` class
method.`),Xee.forEach(t),M7r=i(Fl),j8=n(Fl,"P",{});var vOe=s(j8);E7r=r(vOe,"This class cannot be instantiated directly using "),a2e=n(vOe,"CODE",{});var o5t=s(a2e);C7r=r(o5t,"__init__()"),o5t.forEach(t),w7r=r(vOe," (throws an error)."),vOe.forEach(t),A7r=i(Fl),$t=n(Fl,"DIV",{class:!0});var XA=s($t);T(D8.$$.fragment,XA),L7r=i(XA),n2e=n(XA,"P",{});var r5t=s(n2e);y7r=r(r5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),r5t.forEach(t),x7r=i(XA),Zd=n(XA,"P",{});var zee=s(Zd);$7r=r(zee,`Note:
Loading a model from its configuration file does `),s2e=n(zee,"STRONG",{});var t5t=s(s2e);k7r=r(t5t,"not"),t5t.forEach(t),S7r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(zee,"A",{href:!0});var a5t=s(bH);R7r=r(a5t,"from_pretrained()"),a5t.forEach(t),P7r=r(zee," to load the model weights."),zee.forEach(t),B7r=i(XA),T(QM.$$.fragment,XA),XA.forEach(t),I7r=i(Fl),yr=n(Fl,"DIV",{class:!0});var Tl=s(yr);T(G8.$$.fragment,Tl),N7r=i(Tl),l2e=n(Tl,"P",{});var n5t=s(l2e);q7r=r(n5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),n5t.forEach(t),j7r=i(Tl),on=n(Tl,"P",{});var zA=s(on);D7r=r(zA,"The model class to instantiate is selected based on the "),i2e=n(zA,"CODE",{});var s5t=s(i2e);G7r=r(s5t,"model_type"),s5t.forEach(t),O7r=r(zA,` property of the config object (either
passed as an argument or loaded from `),d2e=n(zA,"CODE",{});var l5t=s(d2e);V7r=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),X7r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(zA,"CODE",{});var i5t=s(c2e);z7r=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),W7r=r(zA,":"),zA.forEach(t),Q7r=i(Tl),rn=n(Tl,"UL",{});var WA=s(rn);HM=n(WA,"LI",{});var OPe=s(HM);f2e=n(OPe,"STRONG",{});var d5t=s(f2e);H7r=r(d5t,"convnext"),d5t.forEach(t),U7r=r(OPe," \u2014 "),vH=n(OPe,"A",{href:!0});var c5t=s(vH);J7r=r(c5t,"TFConvNextForImageClassification"),c5t.forEach(t),Y7r=r(OPe," (ConvNeXT model)"),OPe.forEach(t),K7r=i(WA),UM=n(WA,"LI",{});var VPe=s(UM);m2e=n(VPe,"STRONG",{});var f5t=s(m2e);Z7r=r(f5t,"data2vec-vision"),f5t.forEach(t),ebr=r(VPe," \u2014 "),FH=n(VPe,"A",{href:!0});var m5t=s(FH);obr=r(m5t,"TFData2VecVisionForImageClassification"),m5t.forEach(t),rbr=r(VPe," (Data2VecVision model)"),VPe.forEach(t),tbr=i(WA),JM=n(WA,"LI",{});var XPe=s(JM);g2e=n(XPe,"STRONG",{});var g5t=s(g2e);abr=r(g5t,"swin"),g5t.forEach(t),nbr=r(XPe," \u2014 "),TH=n(XPe,"A",{href:!0});var h5t=s(TH);sbr=r(h5t,"TFSwinForImageClassification"),h5t.forEach(t),lbr=r(XPe," (Swin Transformer model)"),XPe.forEach(t),ibr=i(WA),YM=n(WA,"LI",{});var zPe=s(YM);h2e=n(zPe,"STRONG",{});var p5t=s(h2e);dbr=r(p5t,"vit"),p5t.forEach(t),cbr=r(zPe," \u2014 "),MH=n(zPe,"A",{href:!0});var _5t=s(MH);fbr=r(_5t,"TFViTForImageClassification"),_5t.forEach(t),mbr=r(zPe," (ViT model)"),zPe.forEach(t),WA.forEach(t),gbr=i(Tl),T(KM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),hDe=i(f),ec=n(f,"H2",{class:!0});var FOe=s(ec);ZM=n(FOe,"A",{id:!0,class:!0,href:!0});var u5t=s(ZM);p2e=n(u5t,"SPAN",{});var b5t=s(p2e);T(O8.$$.fragment,b5t),b5t.forEach(t),u5t.forEach(t),hbr=i(FOe),_2e=n(FOe,"SPAN",{});var v5t=s(_2e);pbr=r(v5t,"TFAutoModelForMaskedLM"),v5t.forEach(t),FOe.forEach(t),pDe=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(V8.$$.fragment,Ml),_br=i(Ml),oc=n(Ml,"P",{});var Wee=s(oc);ubr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EH=n(Wee,"A",{href:!0});var F5t=s(EH);bbr=r(F5t,"from_pretrained()"),F5t.forEach(t),vbr=r(Wee," class method or the "),CH=n(Wee,"A",{href:!0});var T5t=s(CH);Fbr=r(T5t,"from_config()"),T5t.forEach(t),Tbr=r(Wee,` class
method.`),Wee.forEach(t),Mbr=i(Ml),X8=n(Ml,"P",{});var TOe=s(X8);Ebr=r(TOe,"This class cannot be instantiated directly using "),u2e=n(TOe,"CODE",{});var M5t=s(u2e);Cbr=r(M5t,"__init__()"),M5t.forEach(t),wbr=r(TOe," (throws an error)."),TOe.forEach(t),Abr=i(Ml),kt=n(Ml,"DIV",{class:!0});var QA=s(kt);T(z8.$$.fragment,QA),Lbr=i(QA),b2e=n(QA,"P",{});var E5t=s(b2e);ybr=r(E5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E5t.forEach(t),xbr=i(QA),rc=n(QA,"P",{});var Qee=s(rc);$br=r(Qee,`Note:
Loading a model from its configuration file does `),v2e=n(Qee,"STRONG",{});var C5t=s(v2e);kbr=r(C5t,"not"),C5t.forEach(t),Sbr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(Qee,"A",{href:!0});var w5t=s(wH);Rbr=r(w5t,"from_pretrained()"),w5t.forEach(t),Pbr=r(Qee," to load the model weights."),Qee.forEach(t),Bbr=i(QA),T(eE.$$.fragment,QA),QA.forEach(t),Ibr=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(W8.$$.fragment,El),Nbr=i(El),F2e=n(El,"P",{});var A5t=s(F2e);qbr=r(A5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),A5t.forEach(t),jbr=i(El),tn=n(El,"P",{});var HA=s(tn);Dbr=r(HA,"The model class to instantiate is selected based on the "),T2e=n(HA,"CODE",{});var L5t=s(T2e);Gbr=r(L5t,"model_type"),L5t.forEach(t),Obr=r(HA,` property of the config object (either
passed as an argument or loaded from `),M2e=n(HA,"CODE",{});var y5t=s(M2e);Vbr=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),Xbr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(HA,"CODE",{});var x5t=s(E2e);zbr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),Wbr=r(HA,":"),HA.forEach(t),Qbr=i(El),ie=n(El,"UL",{});var fe=s(ie);oE=n(fe,"LI",{});var WPe=s(oE);C2e=n(WPe,"STRONG",{});var $5t=s(C2e);Hbr=r($5t,"albert"),$5t.forEach(t),Ubr=r(WPe," \u2014 "),AH=n(WPe,"A",{href:!0});var k5t=s(AH);Jbr=r(k5t,"TFAlbertForMaskedLM"),k5t.forEach(t),Ybr=r(WPe," (ALBERT model)"),WPe.forEach(t),Kbr=i(fe),rE=n(fe,"LI",{});var QPe=s(rE);w2e=n(QPe,"STRONG",{});var S5t=s(w2e);Zbr=r(S5t,"bert"),S5t.forEach(t),e2r=r(QPe," \u2014 "),LH=n(QPe,"A",{href:!0});var R5t=s(LH);o2r=r(R5t,"TFBertForMaskedLM"),R5t.forEach(t),r2r=r(QPe," (BERT model)"),QPe.forEach(t),t2r=i(fe),tE=n(fe,"LI",{});var HPe=s(tE);A2e=n(HPe,"STRONG",{});var P5t=s(A2e);a2r=r(P5t,"camembert"),P5t.forEach(t),n2r=r(HPe," \u2014 "),yH=n(HPe,"A",{href:!0});var B5t=s(yH);s2r=r(B5t,"TFCamembertForMaskedLM"),B5t.forEach(t),l2r=r(HPe," (CamemBERT model)"),HPe.forEach(t),i2r=i(fe),aE=n(fe,"LI",{});var UPe=s(aE);L2e=n(UPe,"STRONG",{});var I5t=s(L2e);d2r=r(I5t,"convbert"),I5t.forEach(t),c2r=r(UPe," \u2014 "),xH=n(UPe,"A",{href:!0});var N5t=s(xH);f2r=r(N5t,"TFConvBertForMaskedLM"),N5t.forEach(t),m2r=r(UPe," (ConvBERT model)"),UPe.forEach(t),g2r=i(fe),nE=n(fe,"LI",{});var JPe=s(nE);y2e=n(JPe,"STRONG",{});var q5t=s(y2e);h2r=r(q5t,"deberta"),q5t.forEach(t),p2r=r(JPe," \u2014 "),$H=n(JPe,"A",{href:!0});var j5t=s($H);_2r=r(j5t,"TFDebertaForMaskedLM"),j5t.forEach(t),u2r=r(JPe," (DeBERTa model)"),JPe.forEach(t),b2r=i(fe),sE=n(fe,"LI",{});var YPe=s(sE);x2e=n(YPe,"STRONG",{});var D5t=s(x2e);v2r=r(D5t,"deberta-v2"),D5t.forEach(t),F2r=r(YPe," \u2014 "),kH=n(YPe,"A",{href:!0});var G5t=s(kH);T2r=r(G5t,"TFDebertaV2ForMaskedLM"),G5t.forEach(t),M2r=r(YPe," (DeBERTa-v2 model)"),YPe.forEach(t),E2r=i(fe),lE=n(fe,"LI",{});var KPe=s(lE);$2e=n(KPe,"STRONG",{});var O5t=s($2e);C2r=r(O5t,"distilbert"),O5t.forEach(t),w2r=r(KPe," \u2014 "),SH=n(KPe,"A",{href:!0});var V5t=s(SH);A2r=r(V5t,"TFDistilBertForMaskedLM"),V5t.forEach(t),L2r=r(KPe," (DistilBERT model)"),KPe.forEach(t),y2r=i(fe),iE=n(fe,"LI",{});var ZPe=s(iE);k2e=n(ZPe,"STRONG",{});var X5t=s(k2e);x2r=r(X5t,"electra"),X5t.forEach(t),$2r=r(ZPe," \u2014 "),RH=n(ZPe,"A",{href:!0});var z5t=s(RH);k2r=r(z5t,"TFElectraForMaskedLM"),z5t.forEach(t),S2r=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),R2r=i(fe),dE=n(fe,"LI",{});var eBe=s(dE);S2e=n(eBe,"STRONG",{});var W5t=s(S2e);P2r=r(W5t,"flaubert"),W5t.forEach(t),B2r=r(eBe," \u2014 "),PH=n(eBe,"A",{href:!0});var Q5t=s(PH);I2r=r(Q5t,"TFFlaubertWithLMHeadModel"),Q5t.forEach(t),N2r=r(eBe," (FlauBERT model)"),eBe.forEach(t),q2r=i(fe),cE=n(fe,"LI",{});var oBe=s(cE);R2e=n(oBe,"STRONG",{});var H5t=s(R2e);j2r=r(H5t,"funnel"),H5t.forEach(t),D2r=r(oBe," \u2014 "),BH=n(oBe,"A",{href:!0});var U5t=s(BH);G2r=r(U5t,"TFFunnelForMaskedLM"),U5t.forEach(t),O2r=r(oBe," (Funnel Transformer model)"),oBe.forEach(t),V2r=i(fe),fE=n(fe,"LI",{});var rBe=s(fE);P2e=n(rBe,"STRONG",{});var J5t=s(P2e);X2r=r(J5t,"layoutlm"),J5t.forEach(t),z2r=r(rBe," \u2014 "),IH=n(rBe,"A",{href:!0});var Y5t=s(IH);W2r=r(Y5t,"TFLayoutLMForMaskedLM"),Y5t.forEach(t),Q2r=r(rBe," (LayoutLM model)"),rBe.forEach(t),H2r=i(fe),mE=n(fe,"LI",{});var tBe=s(mE);B2e=n(tBe,"STRONG",{});var K5t=s(B2e);U2r=r(K5t,"longformer"),K5t.forEach(t),J2r=r(tBe," \u2014 "),NH=n(tBe,"A",{href:!0});var Z5t=s(NH);Y2r=r(Z5t,"TFLongformerForMaskedLM"),Z5t.forEach(t),K2r=r(tBe," (Longformer model)"),tBe.forEach(t),Z2r=i(fe),gE=n(fe,"LI",{});var aBe=s(gE);I2e=n(aBe,"STRONG",{});var e3t=s(I2e);evr=r(e3t,"mobilebert"),e3t.forEach(t),ovr=r(aBe," \u2014 "),qH=n(aBe,"A",{href:!0});var o3t=s(qH);rvr=r(o3t,"TFMobileBertForMaskedLM"),o3t.forEach(t),tvr=r(aBe," (MobileBERT model)"),aBe.forEach(t),avr=i(fe),hE=n(fe,"LI",{});var nBe=s(hE);N2e=n(nBe,"STRONG",{});var r3t=s(N2e);nvr=r(r3t,"mpnet"),r3t.forEach(t),svr=r(nBe," \u2014 "),jH=n(nBe,"A",{href:!0});var t3t=s(jH);lvr=r(t3t,"TFMPNetForMaskedLM"),t3t.forEach(t),ivr=r(nBe," (MPNet model)"),nBe.forEach(t),dvr=i(fe),pE=n(fe,"LI",{});var sBe=s(pE);q2e=n(sBe,"STRONG",{});var a3t=s(q2e);cvr=r(a3t,"rembert"),a3t.forEach(t),fvr=r(sBe," \u2014 "),DH=n(sBe,"A",{href:!0});var n3t=s(DH);mvr=r(n3t,"TFRemBertForMaskedLM"),n3t.forEach(t),gvr=r(sBe," (RemBERT model)"),sBe.forEach(t),hvr=i(fe),_E=n(fe,"LI",{});var lBe=s(_E);j2e=n(lBe,"STRONG",{});var s3t=s(j2e);pvr=r(s3t,"roberta"),s3t.forEach(t),_vr=r(lBe," \u2014 "),GH=n(lBe,"A",{href:!0});var l3t=s(GH);uvr=r(l3t,"TFRobertaForMaskedLM"),l3t.forEach(t),bvr=r(lBe," (RoBERTa model)"),lBe.forEach(t),vvr=i(fe),uE=n(fe,"LI",{});var iBe=s(uE);D2e=n(iBe,"STRONG",{});var i3t=s(D2e);Fvr=r(i3t,"roformer"),i3t.forEach(t),Tvr=r(iBe," \u2014 "),OH=n(iBe,"A",{href:!0});var d3t=s(OH);Mvr=r(d3t,"TFRoFormerForMaskedLM"),d3t.forEach(t),Evr=r(iBe," (RoFormer model)"),iBe.forEach(t),Cvr=i(fe),bE=n(fe,"LI",{});var dBe=s(bE);G2e=n(dBe,"STRONG",{});var c3t=s(G2e);wvr=r(c3t,"tapas"),c3t.forEach(t),Avr=r(dBe," \u2014 "),VH=n(dBe,"A",{href:!0});var f3t=s(VH);Lvr=r(f3t,"TFTapasForMaskedLM"),f3t.forEach(t),yvr=r(dBe," (TAPAS model)"),dBe.forEach(t),xvr=i(fe),vE=n(fe,"LI",{});var cBe=s(vE);O2e=n(cBe,"STRONG",{});var m3t=s(O2e);$vr=r(m3t,"xlm"),m3t.forEach(t),kvr=r(cBe," \u2014 "),XH=n(cBe,"A",{href:!0});var g3t=s(XH);Svr=r(g3t,"TFXLMWithLMHeadModel"),g3t.forEach(t),Rvr=r(cBe," (XLM model)"),cBe.forEach(t),Pvr=i(fe),FE=n(fe,"LI",{});var fBe=s(FE);V2e=n(fBe,"STRONG",{});var h3t=s(V2e);Bvr=r(h3t,"xlm-roberta"),h3t.forEach(t),Ivr=r(fBe," \u2014 "),zH=n(fBe,"A",{href:!0});var p3t=s(zH);Nvr=r(p3t,"TFXLMRobertaForMaskedLM"),p3t.forEach(t),qvr=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),fe.forEach(t),jvr=i(El),T(TE.$$.fragment,El),El.forEach(t),Ml.forEach(t),_De=i(f),tc=n(f,"H2",{class:!0});var MOe=s(tc);ME=n(MOe,"A",{id:!0,class:!0,href:!0});var _3t=s(ME);X2e=n(_3t,"SPAN",{});var u3t=s(X2e);T(Q8.$$.fragment,u3t),u3t.forEach(t),_3t.forEach(t),Dvr=i(MOe),z2e=n(MOe,"SPAN",{});var b3t=s(z2e);Gvr=r(b3t,"TFAutoModelForSeq2SeqLM"),b3t.forEach(t),MOe.forEach(t),uDe=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(H8.$$.fragment,Cl),Ovr=i(Cl),ac=n(Cl,"P",{});var Hee=s(ac);Vvr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WH=n(Hee,"A",{href:!0});var v3t=s(WH);Xvr=r(v3t,"from_pretrained()"),v3t.forEach(t),zvr=r(Hee," class method or the "),QH=n(Hee,"A",{href:!0});var F3t=s(QH);Wvr=r(F3t,"from_config()"),F3t.forEach(t),Qvr=r(Hee,` class
method.`),Hee.forEach(t),Hvr=i(Cl),U8=n(Cl,"P",{});var EOe=s(U8);Uvr=r(EOe,"This class cannot be instantiated directly using "),W2e=n(EOe,"CODE",{});var T3t=s(W2e);Jvr=r(T3t,"__init__()"),T3t.forEach(t),Yvr=r(EOe," (throws an error)."),EOe.forEach(t),Kvr=i(Cl),St=n(Cl,"DIV",{class:!0});var UA=s(St);T(J8.$$.fragment,UA),Zvr=i(UA),Q2e=n(UA,"P",{});var M3t=s(Q2e);eFr=r(M3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M3t.forEach(t),oFr=i(UA),nc=n(UA,"P",{});var Uee=s(nc);rFr=r(Uee,`Note:
Loading a model from its configuration file does `),H2e=n(Uee,"STRONG",{});var E3t=s(H2e);tFr=r(E3t,"not"),E3t.forEach(t),aFr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(Uee,"A",{href:!0});var C3t=s(HH);nFr=r(C3t,"from_pretrained()"),C3t.forEach(t),sFr=r(Uee," to load the model weights."),Uee.forEach(t),lFr=i(UA),T(EE.$$.fragment,UA),UA.forEach(t),iFr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(Y8.$$.fragment,wl),dFr=i(wl),U2e=n(wl,"P",{});var w3t=s(U2e);cFr=r(w3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w3t.forEach(t),fFr=i(wl),an=n(wl,"P",{});var JA=s(an);mFr=r(JA,"The model class to instantiate is selected based on the "),J2e=n(JA,"CODE",{});var A3t=s(J2e);gFr=r(A3t,"model_type"),A3t.forEach(t),hFr=r(JA,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(JA,"CODE",{});var L3t=s(Y2e);pFr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),_Fr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(JA,"CODE",{});var y3t=s(K2e);uFr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),bFr=r(JA,":"),JA.forEach(t),vFr=i(wl),Le=n(wl,"UL",{});var Be=s(Le);CE=n(Be,"LI",{});var mBe=s(CE);Z2e=n(mBe,"STRONG",{});var x3t=s(Z2e);FFr=r(x3t,"bart"),x3t.forEach(t),TFr=r(mBe," \u2014 "),UH=n(mBe,"A",{href:!0});var $3t=s(UH);MFr=r($3t,"TFBartForConditionalGeneration"),$3t.forEach(t),EFr=r(mBe," (BART model)"),mBe.forEach(t),CFr=i(Be),wE=n(Be,"LI",{});var gBe=s(wE);eve=n(gBe,"STRONG",{});var k3t=s(eve);wFr=r(k3t,"blenderbot"),k3t.forEach(t),AFr=r(gBe," \u2014 "),JH=n(gBe,"A",{href:!0});var S3t=s(JH);LFr=r(S3t,"TFBlenderbotForConditionalGeneration"),S3t.forEach(t),yFr=r(gBe," (Blenderbot model)"),gBe.forEach(t),xFr=i(Be),AE=n(Be,"LI",{});var hBe=s(AE);ove=n(hBe,"STRONG",{});var R3t=s(ove);$Fr=r(R3t,"blenderbot-small"),R3t.forEach(t),kFr=r(hBe," \u2014 "),YH=n(hBe,"A",{href:!0});var P3t=s(YH);SFr=r(P3t,"TFBlenderbotSmallForConditionalGeneration"),P3t.forEach(t),RFr=r(hBe," (BlenderbotSmall model)"),hBe.forEach(t),PFr=i(Be),LE=n(Be,"LI",{});var pBe=s(LE);rve=n(pBe,"STRONG",{});var B3t=s(rve);BFr=r(B3t,"encoder-decoder"),B3t.forEach(t),IFr=r(pBe," \u2014 "),KH=n(pBe,"A",{href:!0});var I3t=s(KH);NFr=r(I3t,"TFEncoderDecoderModel"),I3t.forEach(t),qFr=r(pBe," (Encoder decoder model)"),pBe.forEach(t),jFr=i(Be),yE=n(Be,"LI",{});var _Be=s(yE);tve=n(_Be,"STRONG",{});var N3t=s(tve);DFr=r(N3t,"led"),N3t.forEach(t),GFr=r(_Be," \u2014 "),ZH=n(_Be,"A",{href:!0});var q3t=s(ZH);OFr=r(q3t,"TFLEDForConditionalGeneration"),q3t.forEach(t),VFr=r(_Be," (LED model)"),_Be.forEach(t),XFr=i(Be),xE=n(Be,"LI",{});var uBe=s(xE);ave=n(uBe,"STRONG",{});var j3t=s(ave);zFr=r(j3t,"marian"),j3t.forEach(t),WFr=r(uBe," \u2014 "),eU=n(uBe,"A",{href:!0});var D3t=s(eU);QFr=r(D3t,"TFMarianMTModel"),D3t.forEach(t),HFr=r(uBe," (Marian model)"),uBe.forEach(t),UFr=i(Be),$E=n(Be,"LI",{});var bBe=s($E);nve=n(bBe,"STRONG",{});var G3t=s(nve);JFr=r(G3t,"mbart"),G3t.forEach(t),YFr=r(bBe," \u2014 "),oU=n(bBe,"A",{href:!0});var O3t=s(oU);KFr=r(O3t,"TFMBartForConditionalGeneration"),O3t.forEach(t),ZFr=r(bBe," (mBART model)"),bBe.forEach(t),eTr=i(Be),kE=n(Be,"LI",{});var vBe=s(kE);sve=n(vBe,"STRONG",{});var V3t=s(sve);oTr=r(V3t,"mt5"),V3t.forEach(t),rTr=r(vBe," \u2014 "),rU=n(vBe,"A",{href:!0});var X3t=s(rU);tTr=r(X3t,"TFMT5ForConditionalGeneration"),X3t.forEach(t),aTr=r(vBe," (MT5 model)"),vBe.forEach(t),nTr=i(Be),SE=n(Be,"LI",{});var FBe=s(SE);lve=n(FBe,"STRONG",{});var z3t=s(lve);sTr=r(z3t,"pegasus"),z3t.forEach(t),lTr=r(FBe," \u2014 "),tU=n(FBe,"A",{href:!0});var W3t=s(tU);iTr=r(W3t,"TFPegasusForConditionalGeneration"),W3t.forEach(t),dTr=r(FBe," (Pegasus model)"),FBe.forEach(t),cTr=i(Be),RE=n(Be,"LI",{});var TBe=s(RE);ive=n(TBe,"STRONG",{});var Q3t=s(ive);fTr=r(Q3t,"t5"),Q3t.forEach(t),mTr=r(TBe," \u2014 "),aU=n(TBe,"A",{href:!0});var H3t=s(aU);gTr=r(H3t,"TFT5ForConditionalGeneration"),H3t.forEach(t),hTr=r(TBe," (T5 model)"),TBe.forEach(t),Be.forEach(t),pTr=i(wl),T(PE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),bDe=i(f),sc=n(f,"H2",{class:!0});var COe=s(sc);BE=n(COe,"A",{id:!0,class:!0,href:!0});var U3t=s(BE);dve=n(U3t,"SPAN",{});var J3t=s(dve);T(K8.$$.fragment,J3t),J3t.forEach(t),U3t.forEach(t),_Tr=i(COe),cve=n(COe,"SPAN",{});var Y3t=s(cve);uTr=r(Y3t,"TFAutoModelForSequenceClassification"),Y3t.forEach(t),COe.forEach(t),vDe=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(Z8.$$.fragment,Al),bTr=i(Al),lc=n(Al,"P",{});var Jee=s(lc);vTr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nU=n(Jee,"A",{href:!0});var K3t=s(nU);FTr=r(K3t,"from_pretrained()"),K3t.forEach(t),TTr=r(Jee," class method or the "),sU=n(Jee,"A",{href:!0});var Z3t=s(sU);MTr=r(Z3t,"from_config()"),Z3t.forEach(t),ETr=r(Jee,` class
method.`),Jee.forEach(t),CTr=i(Al),e9=n(Al,"P",{});var wOe=s(e9);wTr=r(wOe,"This class cannot be instantiated directly using "),fve=n(wOe,"CODE",{});var e0t=s(fve);ATr=r(e0t,"__init__()"),e0t.forEach(t),LTr=r(wOe," (throws an error)."),wOe.forEach(t),yTr=i(Al),Rt=n(Al,"DIV",{class:!0});var YA=s(Rt);T(o9.$$.fragment,YA),xTr=i(YA),mve=n(YA,"P",{});var o0t=s(mve);$Tr=r(o0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o0t.forEach(t),kTr=i(YA),ic=n(YA,"P",{});var Yee=s(ic);STr=r(Yee,`Note:
Loading a model from its configuration file does `),gve=n(Yee,"STRONG",{});var r0t=s(gve);RTr=r(r0t,"not"),r0t.forEach(t),PTr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Yee,"A",{href:!0});var t0t=s(lU);BTr=r(t0t,"from_pretrained()"),t0t.forEach(t),ITr=r(Yee," to load the model weights."),Yee.forEach(t),NTr=i(YA),T(IE.$$.fragment,YA),YA.forEach(t),qTr=i(Al),kr=n(Al,"DIV",{class:!0});var Ll=s(kr);T(r9.$$.fragment,Ll),jTr=i(Ll),hve=n(Ll,"P",{});var a0t=s(hve);DTr=r(a0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a0t.forEach(t),GTr=i(Ll),nn=n(Ll,"P",{});var KA=s(nn);OTr=r(KA,"The model class to instantiate is selected based on the "),pve=n(KA,"CODE",{});var n0t=s(pve);VTr=r(n0t,"model_type"),n0t.forEach(t),XTr=r(KA,` property of the config object (either
passed as an argument or loaded from `),_ve=n(KA,"CODE",{});var s0t=s(_ve);zTr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),WTr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(KA,"CODE",{});var l0t=s(uve);QTr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),HTr=r(KA,":"),KA.forEach(t),UTr=i(Ll),oe=n(Ll,"UL",{});var ae=s(oe);NE=n(ae,"LI",{});var MBe=s(NE);bve=n(MBe,"STRONG",{});var i0t=s(bve);JTr=r(i0t,"albert"),i0t.forEach(t),YTr=r(MBe," \u2014 "),iU=n(MBe,"A",{href:!0});var d0t=s(iU);KTr=r(d0t,"TFAlbertForSequenceClassification"),d0t.forEach(t),ZTr=r(MBe," (ALBERT model)"),MBe.forEach(t),eMr=i(ae),qE=n(ae,"LI",{});var EBe=s(qE);vve=n(EBe,"STRONG",{});var c0t=s(vve);oMr=r(c0t,"bert"),c0t.forEach(t),rMr=r(EBe," \u2014 "),dU=n(EBe,"A",{href:!0});var f0t=s(dU);tMr=r(f0t,"TFBertForSequenceClassification"),f0t.forEach(t),aMr=r(EBe," (BERT model)"),EBe.forEach(t),nMr=i(ae),jE=n(ae,"LI",{});var CBe=s(jE);Fve=n(CBe,"STRONG",{});var m0t=s(Fve);sMr=r(m0t,"camembert"),m0t.forEach(t),lMr=r(CBe," \u2014 "),cU=n(CBe,"A",{href:!0});var g0t=s(cU);iMr=r(g0t,"TFCamembertForSequenceClassification"),g0t.forEach(t),dMr=r(CBe," (CamemBERT model)"),CBe.forEach(t),cMr=i(ae),DE=n(ae,"LI",{});var wBe=s(DE);Tve=n(wBe,"STRONG",{});var h0t=s(Tve);fMr=r(h0t,"convbert"),h0t.forEach(t),mMr=r(wBe," \u2014 "),fU=n(wBe,"A",{href:!0});var p0t=s(fU);gMr=r(p0t,"TFConvBertForSequenceClassification"),p0t.forEach(t),hMr=r(wBe," (ConvBERT model)"),wBe.forEach(t),pMr=i(ae),GE=n(ae,"LI",{});var ABe=s(GE);Mve=n(ABe,"STRONG",{});var _0t=s(Mve);_Mr=r(_0t,"ctrl"),_0t.forEach(t),uMr=r(ABe," \u2014 "),mU=n(ABe,"A",{href:!0});var u0t=s(mU);bMr=r(u0t,"TFCTRLForSequenceClassification"),u0t.forEach(t),vMr=r(ABe," (CTRL model)"),ABe.forEach(t),FMr=i(ae),OE=n(ae,"LI",{});var LBe=s(OE);Eve=n(LBe,"STRONG",{});var b0t=s(Eve);TMr=r(b0t,"deberta"),b0t.forEach(t),MMr=r(LBe," \u2014 "),gU=n(LBe,"A",{href:!0});var v0t=s(gU);EMr=r(v0t,"TFDebertaForSequenceClassification"),v0t.forEach(t),CMr=r(LBe," (DeBERTa model)"),LBe.forEach(t),wMr=i(ae),VE=n(ae,"LI",{});var yBe=s(VE);Cve=n(yBe,"STRONG",{});var F0t=s(Cve);AMr=r(F0t,"deberta-v2"),F0t.forEach(t),LMr=r(yBe," \u2014 "),hU=n(yBe,"A",{href:!0});var T0t=s(hU);yMr=r(T0t,"TFDebertaV2ForSequenceClassification"),T0t.forEach(t),xMr=r(yBe," (DeBERTa-v2 model)"),yBe.forEach(t),$Mr=i(ae),XE=n(ae,"LI",{});var xBe=s(XE);wve=n(xBe,"STRONG",{});var M0t=s(wve);kMr=r(M0t,"distilbert"),M0t.forEach(t),SMr=r(xBe," \u2014 "),pU=n(xBe,"A",{href:!0});var E0t=s(pU);RMr=r(E0t,"TFDistilBertForSequenceClassification"),E0t.forEach(t),PMr=r(xBe," (DistilBERT model)"),xBe.forEach(t),BMr=i(ae),zE=n(ae,"LI",{});var $Be=s(zE);Ave=n($Be,"STRONG",{});var C0t=s(Ave);IMr=r(C0t,"electra"),C0t.forEach(t),NMr=r($Be," \u2014 "),_U=n($Be,"A",{href:!0});var w0t=s(_U);qMr=r(w0t,"TFElectraForSequenceClassification"),w0t.forEach(t),jMr=r($Be," (ELECTRA model)"),$Be.forEach(t),DMr=i(ae),WE=n(ae,"LI",{});var kBe=s(WE);Lve=n(kBe,"STRONG",{});var A0t=s(Lve);GMr=r(A0t,"flaubert"),A0t.forEach(t),OMr=r(kBe," \u2014 "),uU=n(kBe,"A",{href:!0});var L0t=s(uU);VMr=r(L0t,"TFFlaubertForSequenceClassification"),L0t.forEach(t),XMr=r(kBe," (FlauBERT model)"),kBe.forEach(t),zMr=i(ae),QE=n(ae,"LI",{});var SBe=s(QE);yve=n(SBe,"STRONG",{});var y0t=s(yve);WMr=r(y0t,"funnel"),y0t.forEach(t),QMr=r(SBe," \u2014 "),bU=n(SBe,"A",{href:!0});var x0t=s(bU);HMr=r(x0t,"TFFunnelForSequenceClassification"),x0t.forEach(t),UMr=r(SBe," (Funnel Transformer model)"),SBe.forEach(t),JMr=i(ae),HE=n(ae,"LI",{});var RBe=s(HE);xve=n(RBe,"STRONG",{});var $0t=s(xve);YMr=r($0t,"gpt2"),$0t.forEach(t),KMr=r(RBe," \u2014 "),vU=n(RBe,"A",{href:!0});var k0t=s(vU);ZMr=r(k0t,"TFGPT2ForSequenceClassification"),k0t.forEach(t),eEr=r(RBe," (OpenAI GPT-2 model)"),RBe.forEach(t),oEr=i(ae),UE=n(ae,"LI",{});var PBe=s(UE);$ve=n(PBe,"STRONG",{});var S0t=s($ve);rEr=r(S0t,"gptj"),S0t.forEach(t),tEr=r(PBe," \u2014 "),FU=n(PBe,"A",{href:!0});var R0t=s(FU);aEr=r(R0t,"TFGPTJForSequenceClassification"),R0t.forEach(t),nEr=r(PBe," (GPT-J model)"),PBe.forEach(t),sEr=i(ae),JE=n(ae,"LI",{});var BBe=s(JE);kve=n(BBe,"STRONG",{});var P0t=s(kve);lEr=r(P0t,"layoutlm"),P0t.forEach(t),iEr=r(BBe," \u2014 "),TU=n(BBe,"A",{href:!0});var B0t=s(TU);dEr=r(B0t,"TFLayoutLMForSequenceClassification"),B0t.forEach(t),cEr=r(BBe," (LayoutLM model)"),BBe.forEach(t),fEr=i(ae),YE=n(ae,"LI",{});var IBe=s(YE);Sve=n(IBe,"STRONG",{});var I0t=s(Sve);mEr=r(I0t,"longformer"),I0t.forEach(t),gEr=r(IBe," \u2014 "),MU=n(IBe,"A",{href:!0});var N0t=s(MU);hEr=r(N0t,"TFLongformerForSequenceClassification"),N0t.forEach(t),pEr=r(IBe," (Longformer model)"),IBe.forEach(t),_Er=i(ae),KE=n(ae,"LI",{});var NBe=s(KE);Rve=n(NBe,"STRONG",{});var q0t=s(Rve);uEr=r(q0t,"mobilebert"),q0t.forEach(t),bEr=r(NBe," \u2014 "),EU=n(NBe,"A",{href:!0});var j0t=s(EU);vEr=r(j0t,"TFMobileBertForSequenceClassification"),j0t.forEach(t),FEr=r(NBe," (MobileBERT model)"),NBe.forEach(t),TEr=i(ae),ZE=n(ae,"LI",{});var qBe=s(ZE);Pve=n(qBe,"STRONG",{});var D0t=s(Pve);MEr=r(D0t,"mpnet"),D0t.forEach(t),EEr=r(qBe," \u2014 "),CU=n(qBe,"A",{href:!0});var G0t=s(CU);CEr=r(G0t,"TFMPNetForSequenceClassification"),G0t.forEach(t),wEr=r(qBe," (MPNet model)"),qBe.forEach(t),AEr=i(ae),eC=n(ae,"LI",{});var jBe=s(eC);Bve=n(jBe,"STRONG",{});var O0t=s(Bve);LEr=r(O0t,"openai-gpt"),O0t.forEach(t),yEr=r(jBe," \u2014 "),wU=n(jBe,"A",{href:!0});var V0t=s(wU);xEr=r(V0t,"TFOpenAIGPTForSequenceClassification"),V0t.forEach(t),$Er=r(jBe," (OpenAI GPT model)"),jBe.forEach(t),kEr=i(ae),oC=n(ae,"LI",{});var DBe=s(oC);Ive=n(DBe,"STRONG",{});var X0t=s(Ive);SEr=r(X0t,"rembert"),X0t.forEach(t),REr=r(DBe," \u2014 "),AU=n(DBe,"A",{href:!0});var z0t=s(AU);PEr=r(z0t,"TFRemBertForSequenceClassification"),z0t.forEach(t),BEr=r(DBe," (RemBERT model)"),DBe.forEach(t),IEr=i(ae),rC=n(ae,"LI",{});var GBe=s(rC);Nve=n(GBe,"STRONG",{});var W0t=s(Nve);NEr=r(W0t,"roberta"),W0t.forEach(t),qEr=r(GBe," \u2014 "),LU=n(GBe,"A",{href:!0});var Q0t=s(LU);jEr=r(Q0t,"TFRobertaForSequenceClassification"),Q0t.forEach(t),DEr=r(GBe," (RoBERTa model)"),GBe.forEach(t),GEr=i(ae),tC=n(ae,"LI",{});var OBe=s(tC);qve=n(OBe,"STRONG",{});var H0t=s(qve);OEr=r(H0t,"roformer"),H0t.forEach(t),VEr=r(OBe," \u2014 "),yU=n(OBe,"A",{href:!0});var U0t=s(yU);XEr=r(U0t,"TFRoFormerForSequenceClassification"),U0t.forEach(t),zEr=r(OBe," (RoFormer model)"),OBe.forEach(t),WEr=i(ae),aC=n(ae,"LI",{});var VBe=s(aC);jve=n(VBe,"STRONG",{});var J0t=s(jve);QEr=r(J0t,"tapas"),J0t.forEach(t),HEr=r(VBe," \u2014 "),xU=n(VBe,"A",{href:!0});var Y0t=s(xU);UEr=r(Y0t,"TFTapasForSequenceClassification"),Y0t.forEach(t),JEr=r(VBe," (TAPAS model)"),VBe.forEach(t),YEr=i(ae),nC=n(ae,"LI",{});var XBe=s(nC);Dve=n(XBe,"STRONG",{});var K0t=s(Dve);KEr=r(K0t,"transfo-xl"),K0t.forEach(t),ZEr=r(XBe," \u2014 "),$U=n(XBe,"A",{href:!0});var Z0t=s($U);eCr=r(Z0t,"TFTransfoXLForSequenceClassification"),Z0t.forEach(t),oCr=r(XBe," (Transformer-XL model)"),XBe.forEach(t),rCr=i(ae),sC=n(ae,"LI",{});var zBe=s(sC);Gve=n(zBe,"STRONG",{});var ewt=s(Gve);tCr=r(ewt,"xlm"),ewt.forEach(t),aCr=r(zBe," \u2014 "),kU=n(zBe,"A",{href:!0});var owt=s(kU);nCr=r(owt,"TFXLMForSequenceClassification"),owt.forEach(t),sCr=r(zBe," (XLM model)"),zBe.forEach(t),lCr=i(ae),lC=n(ae,"LI",{});var WBe=s(lC);Ove=n(WBe,"STRONG",{});var rwt=s(Ove);iCr=r(rwt,"xlm-roberta"),rwt.forEach(t),dCr=r(WBe," \u2014 "),SU=n(WBe,"A",{href:!0});var twt=s(SU);cCr=r(twt,"TFXLMRobertaForSequenceClassification"),twt.forEach(t),fCr=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),mCr=i(ae),iC=n(ae,"LI",{});var QBe=s(iC);Vve=n(QBe,"STRONG",{});var awt=s(Vve);gCr=r(awt,"xlnet"),awt.forEach(t),hCr=r(QBe," \u2014 "),RU=n(QBe,"A",{href:!0});var nwt=s(RU);pCr=r(nwt,"TFXLNetForSequenceClassification"),nwt.forEach(t),_Cr=r(QBe," (XLNet model)"),QBe.forEach(t),ae.forEach(t),uCr=i(Ll),T(dC.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),FDe=i(f),dc=n(f,"H2",{class:!0});var AOe=s(dc);cC=n(AOe,"A",{id:!0,class:!0,href:!0});var swt=s(cC);Xve=n(swt,"SPAN",{});var lwt=s(Xve);T(t9.$$.fragment,lwt),lwt.forEach(t),swt.forEach(t),bCr=i(AOe),zve=n(AOe,"SPAN",{});var iwt=s(zve);vCr=r(iwt,"TFAutoModelForMultipleChoice"),iwt.forEach(t),AOe.forEach(t),TDe=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(a9.$$.fragment,yl),FCr=i(yl),cc=n(yl,"P",{});var Kee=s(cc);TCr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PU=n(Kee,"A",{href:!0});var dwt=s(PU);MCr=r(dwt,"from_pretrained()"),dwt.forEach(t),ECr=r(Kee," class method or the "),BU=n(Kee,"A",{href:!0});var cwt=s(BU);CCr=r(cwt,"from_config()"),cwt.forEach(t),wCr=r(Kee,` class
method.`),Kee.forEach(t),ACr=i(yl),n9=n(yl,"P",{});var LOe=s(n9);LCr=r(LOe,"This class cannot be instantiated directly using "),Wve=n(LOe,"CODE",{});var fwt=s(Wve);yCr=r(fwt,"__init__()"),fwt.forEach(t),xCr=r(LOe," (throws an error)."),LOe.forEach(t),$Cr=i(yl),Pt=n(yl,"DIV",{class:!0});var ZA=s(Pt);T(s9.$$.fragment,ZA),kCr=i(ZA),Qve=n(ZA,"P",{});var mwt=s(Qve);SCr=r(mwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mwt.forEach(t),RCr=i(ZA),fc=n(ZA,"P",{});var Zee=s(fc);PCr=r(Zee,`Note:
Loading a model from its configuration file does `),Hve=n(Zee,"STRONG",{});var gwt=s(Hve);BCr=r(gwt,"not"),gwt.forEach(t),ICr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(Zee,"A",{href:!0});var hwt=s(IU);NCr=r(hwt,"from_pretrained()"),hwt.forEach(t),qCr=r(Zee," to load the model weights."),Zee.forEach(t),jCr=i(ZA),T(fC.$$.fragment,ZA),ZA.forEach(t),DCr=i(yl),Sr=n(yl,"DIV",{class:!0});var xl=s(Sr);T(l9.$$.fragment,xl),GCr=i(xl),Uve=n(xl,"P",{});var pwt=s(Uve);OCr=r(pwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pwt.forEach(t),VCr=i(xl),sn=n(xl,"P",{});var e6=s(sn);XCr=r(e6,"The model class to instantiate is selected based on the "),Jve=n(e6,"CODE",{});var _wt=s(Jve);zCr=r(_wt,"model_type"),_wt.forEach(t),WCr=r(e6,` property of the config object (either
passed as an argument or loaded from `),Yve=n(e6,"CODE",{});var uwt=s(Yve);QCr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),HCr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(e6,"CODE",{});var bwt=s(Kve);UCr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),JCr=r(e6,":"),e6.forEach(t),YCr=i(xl),pe=n(xl,"UL",{});var be=s(pe);mC=n(be,"LI",{});var HBe=s(mC);Zve=n(HBe,"STRONG",{});var vwt=s(Zve);KCr=r(vwt,"albert"),vwt.forEach(t),ZCr=r(HBe," \u2014 "),NU=n(HBe,"A",{href:!0});var Fwt=s(NU);e5r=r(Fwt,"TFAlbertForMultipleChoice"),Fwt.forEach(t),o5r=r(HBe," (ALBERT model)"),HBe.forEach(t),r5r=i(be),gC=n(be,"LI",{});var UBe=s(gC);eFe=n(UBe,"STRONG",{});var Twt=s(eFe);t5r=r(Twt,"bert"),Twt.forEach(t),a5r=r(UBe," \u2014 "),qU=n(UBe,"A",{href:!0});var Mwt=s(qU);n5r=r(Mwt,"TFBertForMultipleChoice"),Mwt.forEach(t),s5r=r(UBe," (BERT model)"),UBe.forEach(t),l5r=i(be),hC=n(be,"LI",{});var JBe=s(hC);oFe=n(JBe,"STRONG",{});var Ewt=s(oFe);i5r=r(Ewt,"camembert"),Ewt.forEach(t),d5r=r(JBe," \u2014 "),jU=n(JBe,"A",{href:!0});var Cwt=s(jU);c5r=r(Cwt,"TFCamembertForMultipleChoice"),Cwt.forEach(t),f5r=r(JBe," (CamemBERT model)"),JBe.forEach(t),m5r=i(be),pC=n(be,"LI",{});var YBe=s(pC);rFe=n(YBe,"STRONG",{});var wwt=s(rFe);g5r=r(wwt,"convbert"),wwt.forEach(t),h5r=r(YBe," \u2014 "),DU=n(YBe,"A",{href:!0});var Awt=s(DU);p5r=r(Awt,"TFConvBertForMultipleChoice"),Awt.forEach(t),_5r=r(YBe," (ConvBERT model)"),YBe.forEach(t),u5r=i(be),_C=n(be,"LI",{});var KBe=s(_C);tFe=n(KBe,"STRONG",{});var Lwt=s(tFe);b5r=r(Lwt,"distilbert"),Lwt.forEach(t),v5r=r(KBe," \u2014 "),GU=n(KBe,"A",{href:!0});var ywt=s(GU);F5r=r(ywt,"TFDistilBertForMultipleChoice"),ywt.forEach(t),T5r=r(KBe," (DistilBERT model)"),KBe.forEach(t),M5r=i(be),uC=n(be,"LI",{});var ZBe=s(uC);aFe=n(ZBe,"STRONG",{});var xwt=s(aFe);E5r=r(xwt,"electra"),xwt.forEach(t),C5r=r(ZBe," \u2014 "),OU=n(ZBe,"A",{href:!0});var $wt=s(OU);w5r=r($wt,"TFElectraForMultipleChoice"),$wt.forEach(t),A5r=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),L5r=i(be),bC=n(be,"LI",{});var eIe=s(bC);nFe=n(eIe,"STRONG",{});var kwt=s(nFe);y5r=r(kwt,"flaubert"),kwt.forEach(t),x5r=r(eIe," \u2014 "),VU=n(eIe,"A",{href:!0});var Swt=s(VU);$5r=r(Swt,"TFFlaubertForMultipleChoice"),Swt.forEach(t),k5r=r(eIe," (FlauBERT model)"),eIe.forEach(t),S5r=i(be),vC=n(be,"LI",{});var oIe=s(vC);sFe=n(oIe,"STRONG",{});var Rwt=s(sFe);R5r=r(Rwt,"funnel"),Rwt.forEach(t),P5r=r(oIe," \u2014 "),XU=n(oIe,"A",{href:!0});var Pwt=s(XU);B5r=r(Pwt,"TFFunnelForMultipleChoice"),Pwt.forEach(t),I5r=r(oIe," (Funnel Transformer model)"),oIe.forEach(t),N5r=i(be),FC=n(be,"LI",{});var rIe=s(FC);lFe=n(rIe,"STRONG",{});var Bwt=s(lFe);q5r=r(Bwt,"longformer"),Bwt.forEach(t),j5r=r(rIe," \u2014 "),zU=n(rIe,"A",{href:!0});var Iwt=s(zU);D5r=r(Iwt,"TFLongformerForMultipleChoice"),Iwt.forEach(t),G5r=r(rIe," (Longformer model)"),rIe.forEach(t),O5r=i(be),TC=n(be,"LI",{});var tIe=s(TC);iFe=n(tIe,"STRONG",{});var Nwt=s(iFe);V5r=r(Nwt,"mobilebert"),Nwt.forEach(t),X5r=r(tIe," \u2014 "),WU=n(tIe,"A",{href:!0});var qwt=s(WU);z5r=r(qwt,"TFMobileBertForMultipleChoice"),qwt.forEach(t),W5r=r(tIe," (MobileBERT model)"),tIe.forEach(t),Q5r=i(be),MC=n(be,"LI",{});var aIe=s(MC);dFe=n(aIe,"STRONG",{});var jwt=s(dFe);H5r=r(jwt,"mpnet"),jwt.forEach(t),U5r=r(aIe," \u2014 "),QU=n(aIe,"A",{href:!0});var Dwt=s(QU);J5r=r(Dwt,"TFMPNetForMultipleChoice"),Dwt.forEach(t),Y5r=r(aIe," (MPNet model)"),aIe.forEach(t),K5r=i(be),EC=n(be,"LI",{});var nIe=s(EC);cFe=n(nIe,"STRONG",{});var Gwt=s(cFe);Z5r=r(Gwt,"rembert"),Gwt.forEach(t),e3r=r(nIe," \u2014 "),HU=n(nIe,"A",{href:!0});var Owt=s(HU);o3r=r(Owt,"TFRemBertForMultipleChoice"),Owt.forEach(t),r3r=r(nIe," (RemBERT model)"),nIe.forEach(t),t3r=i(be),CC=n(be,"LI",{});var sIe=s(CC);fFe=n(sIe,"STRONG",{});var Vwt=s(fFe);a3r=r(Vwt,"roberta"),Vwt.forEach(t),n3r=r(sIe," \u2014 "),UU=n(sIe,"A",{href:!0});var Xwt=s(UU);s3r=r(Xwt,"TFRobertaForMultipleChoice"),Xwt.forEach(t),l3r=r(sIe," (RoBERTa model)"),sIe.forEach(t),i3r=i(be),wC=n(be,"LI",{});var lIe=s(wC);mFe=n(lIe,"STRONG",{});var zwt=s(mFe);d3r=r(zwt,"roformer"),zwt.forEach(t),c3r=r(lIe," \u2014 "),JU=n(lIe,"A",{href:!0});var Wwt=s(JU);f3r=r(Wwt,"TFRoFormerForMultipleChoice"),Wwt.forEach(t),m3r=r(lIe," (RoFormer model)"),lIe.forEach(t),g3r=i(be),AC=n(be,"LI",{});var iIe=s(AC);gFe=n(iIe,"STRONG",{});var Qwt=s(gFe);h3r=r(Qwt,"xlm"),Qwt.forEach(t),p3r=r(iIe," \u2014 "),YU=n(iIe,"A",{href:!0});var Hwt=s(YU);_3r=r(Hwt,"TFXLMForMultipleChoice"),Hwt.forEach(t),u3r=r(iIe," (XLM model)"),iIe.forEach(t),b3r=i(be),LC=n(be,"LI",{});var dIe=s(LC);hFe=n(dIe,"STRONG",{});var Uwt=s(hFe);v3r=r(Uwt,"xlm-roberta"),Uwt.forEach(t),F3r=r(dIe," \u2014 "),KU=n(dIe,"A",{href:!0});var Jwt=s(KU);T3r=r(Jwt,"TFXLMRobertaForMultipleChoice"),Jwt.forEach(t),M3r=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),E3r=i(be),yC=n(be,"LI",{});var cIe=s(yC);pFe=n(cIe,"STRONG",{});var Ywt=s(pFe);C3r=r(Ywt,"xlnet"),Ywt.forEach(t),w3r=r(cIe," \u2014 "),ZU=n(cIe,"A",{href:!0});var Kwt=s(ZU);A3r=r(Kwt,"TFXLNetForMultipleChoice"),Kwt.forEach(t),L3r=r(cIe," (XLNet model)"),cIe.forEach(t),be.forEach(t),y3r=i(xl),T(xC.$$.fragment,xl),xl.forEach(t),yl.forEach(t),MDe=i(f),mc=n(f,"H2",{class:!0});var yOe=s(mc);$C=n(yOe,"A",{id:!0,class:!0,href:!0});var Zwt=s($C);_Fe=n(Zwt,"SPAN",{});var eAt=s(_Fe);T(i9.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),x3r=i(yOe),uFe=n(yOe,"SPAN",{});var oAt=s(uFe);$3r=r(oAt,"TFAutoModelForNextSentencePrediction"),oAt.forEach(t),yOe.forEach(t),EDe=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(d9.$$.fragment,$l),k3r=i($l),gc=n($l,"P",{});var eoe=s(gc);S3r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eJ=n(eoe,"A",{href:!0});var rAt=s(eJ);R3r=r(rAt,"from_pretrained()"),rAt.forEach(t),P3r=r(eoe," class method or the "),oJ=n(eoe,"A",{href:!0});var tAt=s(oJ);B3r=r(tAt,"from_config()"),tAt.forEach(t),I3r=r(eoe,` class
method.`),eoe.forEach(t),N3r=i($l),c9=n($l,"P",{});var xOe=s(c9);q3r=r(xOe,"This class cannot be instantiated directly using "),bFe=n(xOe,"CODE",{});var aAt=s(bFe);j3r=r(aAt,"__init__()"),aAt.forEach(t),D3r=r(xOe," (throws an error)."),xOe.forEach(t),G3r=i($l),Bt=n($l,"DIV",{class:!0});var o6=s(Bt);T(f9.$$.fragment,o6),O3r=i(o6),vFe=n(o6,"P",{});var nAt=s(vFe);V3r=r(nAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nAt.forEach(t),X3r=i(o6),hc=n(o6,"P",{});var ooe=s(hc);z3r=r(ooe,`Note:
Loading a model from its configuration file does `),FFe=n(ooe,"STRONG",{});var sAt=s(FFe);W3r=r(sAt,"not"),sAt.forEach(t),Q3r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(ooe,"A",{href:!0});var lAt=s(rJ);H3r=r(lAt,"from_pretrained()"),lAt.forEach(t),U3r=r(ooe," to load the model weights."),ooe.forEach(t),J3r=i(o6),T(kC.$$.fragment,o6),o6.forEach(t),Y3r=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(m9.$$.fragment,kl),K3r=i(kl),TFe=n(kl,"P",{});var iAt=s(TFe);Z3r=r(iAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iAt.forEach(t),e0r=i(kl),ln=n(kl,"P",{});var r6=s(ln);o0r=r(r6,"The model class to instantiate is selected based on the "),MFe=n(r6,"CODE",{});var dAt=s(MFe);r0r=r(dAt,"model_type"),dAt.forEach(t),t0r=r(r6,` property of the config object (either
passed as an argument or loaded from `),EFe=n(r6,"CODE",{});var cAt=s(EFe);a0r=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),n0r=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(r6,"CODE",{});var fAt=s(CFe);s0r=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),l0r=r(r6,":"),r6.forEach(t),i0r=i(kl),g9=n(kl,"UL",{});var $Oe=s(g9);SC=n($Oe,"LI",{});var fIe=s(SC);wFe=n(fIe,"STRONG",{});var mAt=s(wFe);d0r=r(mAt,"bert"),mAt.forEach(t),c0r=r(fIe," \u2014 "),tJ=n(fIe,"A",{href:!0});var gAt=s(tJ);f0r=r(gAt,"TFBertForNextSentencePrediction"),gAt.forEach(t),m0r=r(fIe," (BERT model)"),fIe.forEach(t),g0r=i($Oe),RC=n($Oe,"LI",{});var mIe=s(RC);AFe=n(mIe,"STRONG",{});var hAt=s(AFe);h0r=r(hAt,"mobilebert"),hAt.forEach(t),p0r=r(mIe," \u2014 "),aJ=n(mIe,"A",{href:!0});var pAt=s(aJ);_0r=r(pAt,"TFMobileBertForNextSentencePrediction"),pAt.forEach(t),u0r=r(mIe," (MobileBERT model)"),mIe.forEach(t),$Oe.forEach(t),b0r=i(kl),T(PC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),CDe=i(f),pc=n(f,"H2",{class:!0});var kOe=s(pc);BC=n(kOe,"A",{id:!0,class:!0,href:!0});var _At=s(BC);LFe=n(_At,"SPAN",{});var uAt=s(LFe);T(h9.$$.fragment,uAt),uAt.forEach(t),_At.forEach(t),v0r=i(kOe),yFe=n(kOe,"SPAN",{});var bAt=s(yFe);F0r=r(bAt,"TFAutoModelForTableQuestionAnswering"),bAt.forEach(t),kOe.forEach(t),wDe=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(p9.$$.fragment,Sl),T0r=i(Sl),_c=n(Sl,"P",{});var roe=s(_c);M0r=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nJ=n(roe,"A",{href:!0});var vAt=s(nJ);E0r=r(vAt,"from_pretrained()"),vAt.forEach(t),C0r=r(roe," class method or the "),sJ=n(roe,"A",{href:!0});var FAt=s(sJ);w0r=r(FAt,"from_config()"),FAt.forEach(t),A0r=r(roe,` class
method.`),roe.forEach(t),L0r=i(Sl),_9=n(Sl,"P",{});var SOe=s(_9);y0r=r(SOe,"This class cannot be instantiated directly using "),xFe=n(SOe,"CODE",{});var TAt=s(xFe);x0r=r(TAt,"__init__()"),TAt.forEach(t),$0r=r(SOe," (throws an error)."),SOe.forEach(t),k0r=i(Sl),It=n(Sl,"DIV",{class:!0});var t6=s(It);T(u9.$$.fragment,t6),S0r=i(t6),$Fe=n(t6,"P",{});var MAt=s($Fe);R0r=r(MAt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MAt.forEach(t),P0r=i(t6),uc=n(t6,"P",{});var toe=s(uc);B0r=r(toe,`Note:
Loading a model from its configuration file does `),kFe=n(toe,"STRONG",{});var EAt=s(kFe);I0r=r(EAt,"not"),EAt.forEach(t),N0r=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(toe,"A",{href:!0});var CAt=s(lJ);q0r=r(CAt,"from_pretrained()"),CAt.forEach(t),j0r=r(toe," to load the model weights."),toe.forEach(t),D0r=i(t6),T(IC.$$.fragment,t6),t6.forEach(t),G0r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(b9.$$.fragment,Rl),O0r=i(Rl),SFe=n(Rl,"P",{});var wAt=s(SFe);V0r=r(wAt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wAt.forEach(t),X0r=i(Rl),dn=n(Rl,"P",{});var a6=s(dn);z0r=r(a6,"The model class to instantiate is selected based on the "),RFe=n(a6,"CODE",{});var AAt=s(RFe);W0r=r(AAt,"model_type"),AAt.forEach(t),Q0r=r(a6,` property of the config object (either
passed as an argument or loaded from `),PFe=n(a6,"CODE",{});var LAt=s(PFe);H0r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),U0r=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(a6,"CODE",{});var yAt=s(BFe);J0r=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),Y0r=r(a6,":"),a6.forEach(t),K0r=i(Rl),IFe=n(Rl,"UL",{});var xAt=s(IFe);NC=n(xAt,"LI",{});var gIe=s(NC);NFe=n(gIe,"STRONG",{});var $At=s(NFe);Z0r=r($At,"tapas"),$At.forEach(t),ewr=r(gIe," \u2014 "),iJ=n(gIe,"A",{href:!0});var kAt=s(iJ);owr=r(kAt,"TFTapasForQuestionAnswering"),kAt.forEach(t),rwr=r(gIe," (TAPAS model)"),gIe.forEach(t),xAt.forEach(t),twr=i(Rl),T(qC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ADe=i(f),bc=n(f,"H2",{class:!0});var ROe=s(bc);jC=n(ROe,"A",{id:!0,class:!0,href:!0});var SAt=s(jC);qFe=n(SAt,"SPAN",{});var RAt=s(qFe);T(v9.$$.fragment,RAt),RAt.forEach(t),SAt.forEach(t),awr=i(ROe),jFe=n(ROe,"SPAN",{});var PAt=s(jFe);nwr=r(PAt,"TFAutoModelForTokenClassification"),PAt.forEach(t),ROe.forEach(t),LDe=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(F9.$$.fragment,Pl),swr=i(Pl),vc=n(Pl,"P",{});var aoe=s(vc);lwr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dJ=n(aoe,"A",{href:!0});var BAt=s(dJ);iwr=r(BAt,"from_pretrained()"),BAt.forEach(t),dwr=r(aoe," class method or the "),cJ=n(aoe,"A",{href:!0});var IAt=s(cJ);cwr=r(IAt,"from_config()"),IAt.forEach(t),fwr=r(aoe,` class
method.`),aoe.forEach(t),mwr=i(Pl),T9=n(Pl,"P",{});var POe=s(T9);gwr=r(POe,"This class cannot be instantiated directly using "),DFe=n(POe,"CODE",{});var NAt=s(DFe);hwr=r(NAt,"__init__()"),NAt.forEach(t),pwr=r(POe," (throws an error)."),POe.forEach(t),_wr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var n6=s(Nt);T(M9.$$.fragment,n6),uwr=i(n6),GFe=n(n6,"P",{});var qAt=s(GFe);bwr=r(qAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qAt.forEach(t),vwr=i(n6),Fc=n(n6,"P",{});var noe=s(Fc);Fwr=r(noe,`Note:
Loading a model from its configuration file does `),OFe=n(noe,"STRONG",{});var jAt=s(OFe);Twr=r(jAt,"not"),jAt.forEach(t),Mwr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(noe,"A",{href:!0});var DAt=s(fJ);Ewr=r(DAt,"from_pretrained()"),DAt.forEach(t),Cwr=r(noe," to load the model weights."),noe.forEach(t),wwr=i(n6),T(DC.$$.fragment,n6),n6.forEach(t),Awr=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(E9.$$.fragment,Bl),Lwr=i(Bl),VFe=n(Bl,"P",{});var GAt=s(VFe);ywr=r(GAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GAt.forEach(t),xwr=i(Bl),cn=n(Bl,"P",{});var s6=s(cn);$wr=r(s6,"The model class to instantiate is selected based on the "),XFe=n(s6,"CODE",{});var OAt=s(XFe);kwr=r(OAt,"model_type"),OAt.forEach(t),Swr=r(s6,` property of the config object (either
passed as an argument or loaded from `),zFe=n(s6,"CODE",{});var VAt=s(zFe);Rwr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),Pwr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(s6,"CODE",{});var XAt=s(WFe);Bwr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),Iwr=r(s6,":"),s6.forEach(t),Nwr=i(Bl),de=n(Bl,"UL",{});var me=s(de);GC=n(me,"LI",{});var hIe=s(GC);QFe=n(hIe,"STRONG",{});var zAt=s(QFe);qwr=r(zAt,"albert"),zAt.forEach(t),jwr=r(hIe," \u2014 "),mJ=n(hIe,"A",{href:!0});var WAt=s(mJ);Dwr=r(WAt,"TFAlbertForTokenClassification"),WAt.forEach(t),Gwr=r(hIe," (ALBERT model)"),hIe.forEach(t),Owr=i(me),OC=n(me,"LI",{});var pIe=s(OC);HFe=n(pIe,"STRONG",{});var QAt=s(HFe);Vwr=r(QAt,"bert"),QAt.forEach(t),Xwr=r(pIe," \u2014 "),gJ=n(pIe,"A",{href:!0});var HAt=s(gJ);zwr=r(HAt,"TFBertForTokenClassification"),HAt.forEach(t),Wwr=r(pIe," (BERT model)"),pIe.forEach(t),Qwr=i(me),VC=n(me,"LI",{});var _Ie=s(VC);UFe=n(_Ie,"STRONG",{});var UAt=s(UFe);Hwr=r(UAt,"camembert"),UAt.forEach(t),Uwr=r(_Ie," \u2014 "),hJ=n(_Ie,"A",{href:!0});var JAt=s(hJ);Jwr=r(JAt,"TFCamembertForTokenClassification"),JAt.forEach(t),Ywr=r(_Ie," (CamemBERT model)"),_Ie.forEach(t),Kwr=i(me),XC=n(me,"LI",{});var uIe=s(XC);JFe=n(uIe,"STRONG",{});var YAt=s(JFe);Zwr=r(YAt,"convbert"),YAt.forEach(t),eAr=r(uIe," \u2014 "),pJ=n(uIe,"A",{href:!0});var KAt=s(pJ);oAr=r(KAt,"TFConvBertForTokenClassification"),KAt.forEach(t),rAr=r(uIe," (ConvBERT model)"),uIe.forEach(t),tAr=i(me),zC=n(me,"LI",{});var bIe=s(zC);YFe=n(bIe,"STRONG",{});var ZAt=s(YFe);aAr=r(ZAt,"deberta"),ZAt.forEach(t),nAr=r(bIe," \u2014 "),_J=n(bIe,"A",{href:!0});var e6t=s(_J);sAr=r(e6t,"TFDebertaForTokenClassification"),e6t.forEach(t),lAr=r(bIe," (DeBERTa model)"),bIe.forEach(t),iAr=i(me),WC=n(me,"LI",{});var vIe=s(WC);KFe=n(vIe,"STRONG",{});var o6t=s(KFe);dAr=r(o6t,"deberta-v2"),o6t.forEach(t),cAr=r(vIe," \u2014 "),uJ=n(vIe,"A",{href:!0});var r6t=s(uJ);fAr=r(r6t,"TFDebertaV2ForTokenClassification"),r6t.forEach(t),mAr=r(vIe," (DeBERTa-v2 model)"),vIe.forEach(t),gAr=i(me),QC=n(me,"LI",{});var FIe=s(QC);ZFe=n(FIe,"STRONG",{});var t6t=s(ZFe);hAr=r(t6t,"distilbert"),t6t.forEach(t),pAr=r(FIe," \u2014 "),bJ=n(FIe,"A",{href:!0});var a6t=s(bJ);_Ar=r(a6t,"TFDistilBertForTokenClassification"),a6t.forEach(t),uAr=r(FIe," (DistilBERT model)"),FIe.forEach(t),bAr=i(me),HC=n(me,"LI",{});var TIe=s(HC);eTe=n(TIe,"STRONG",{});var n6t=s(eTe);vAr=r(n6t,"electra"),n6t.forEach(t),FAr=r(TIe," \u2014 "),vJ=n(TIe,"A",{href:!0});var s6t=s(vJ);TAr=r(s6t,"TFElectraForTokenClassification"),s6t.forEach(t),MAr=r(TIe," (ELECTRA model)"),TIe.forEach(t),EAr=i(me),UC=n(me,"LI",{});var MIe=s(UC);oTe=n(MIe,"STRONG",{});var l6t=s(oTe);CAr=r(l6t,"flaubert"),l6t.forEach(t),wAr=r(MIe," \u2014 "),FJ=n(MIe,"A",{href:!0});var i6t=s(FJ);AAr=r(i6t,"TFFlaubertForTokenClassification"),i6t.forEach(t),LAr=r(MIe," (FlauBERT model)"),MIe.forEach(t),yAr=i(me),JC=n(me,"LI",{});var EIe=s(JC);rTe=n(EIe,"STRONG",{});var d6t=s(rTe);xAr=r(d6t,"funnel"),d6t.forEach(t),$Ar=r(EIe," \u2014 "),TJ=n(EIe,"A",{href:!0});var c6t=s(TJ);kAr=r(c6t,"TFFunnelForTokenClassification"),c6t.forEach(t),SAr=r(EIe," (Funnel Transformer model)"),EIe.forEach(t),RAr=i(me),YC=n(me,"LI",{});var CIe=s(YC);tTe=n(CIe,"STRONG",{});var f6t=s(tTe);PAr=r(f6t,"layoutlm"),f6t.forEach(t),BAr=r(CIe," \u2014 "),MJ=n(CIe,"A",{href:!0});var m6t=s(MJ);IAr=r(m6t,"TFLayoutLMForTokenClassification"),m6t.forEach(t),NAr=r(CIe," (LayoutLM model)"),CIe.forEach(t),qAr=i(me),KC=n(me,"LI",{});var wIe=s(KC);aTe=n(wIe,"STRONG",{});var g6t=s(aTe);jAr=r(g6t,"longformer"),g6t.forEach(t),DAr=r(wIe," \u2014 "),EJ=n(wIe,"A",{href:!0});var h6t=s(EJ);GAr=r(h6t,"TFLongformerForTokenClassification"),h6t.forEach(t),OAr=r(wIe," (Longformer model)"),wIe.forEach(t),VAr=i(me),ZC=n(me,"LI",{});var AIe=s(ZC);nTe=n(AIe,"STRONG",{});var p6t=s(nTe);XAr=r(p6t,"mobilebert"),p6t.forEach(t),zAr=r(AIe," \u2014 "),CJ=n(AIe,"A",{href:!0});var _6t=s(CJ);WAr=r(_6t,"TFMobileBertForTokenClassification"),_6t.forEach(t),QAr=r(AIe," (MobileBERT model)"),AIe.forEach(t),HAr=i(me),e5=n(me,"LI",{});var LIe=s(e5);sTe=n(LIe,"STRONG",{});var u6t=s(sTe);UAr=r(u6t,"mpnet"),u6t.forEach(t),JAr=r(LIe," \u2014 "),wJ=n(LIe,"A",{href:!0});var b6t=s(wJ);YAr=r(b6t,"TFMPNetForTokenClassification"),b6t.forEach(t),KAr=r(LIe," (MPNet model)"),LIe.forEach(t),ZAr=i(me),o5=n(me,"LI",{});var yIe=s(o5);lTe=n(yIe,"STRONG",{});var v6t=s(lTe);e6r=r(v6t,"rembert"),v6t.forEach(t),o6r=r(yIe," \u2014 "),AJ=n(yIe,"A",{href:!0});var F6t=s(AJ);r6r=r(F6t,"TFRemBertForTokenClassification"),F6t.forEach(t),t6r=r(yIe," (RemBERT model)"),yIe.forEach(t),a6r=i(me),r5=n(me,"LI",{});var xIe=s(r5);iTe=n(xIe,"STRONG",{});var T6t=s(iTe);n6r=r(T6t,"roberta"),T6t.forEach(t),s6r=r(xIe," \u2014 "),LJ=n(xIe,"A",{href:!0});var M6t=s(LJ);l6r=r(M6t,"TFRobertaForTokenClassification"),M6t.forEach(t),i6r=r(xIe," (RoBERTa model)"),xIe.forEach(t),d6r=i(me),t5=n(me,"LI",{});var $Ie=s(t5);dTe=n($Ie,"STRONG",{});var E6t=s(dTe);c6r=r(E6t,"roformer"),E6t.forEach(t),f6r=r($Ie," \u2014 "),yJ=n($Ie,"A",{href:!0});var C6t=s(yJ);m6r=r(C6t,"TFRoFormerForTokenClassification"),C6t.forEach(t),g6r=r($Ie," (RoFormer model)"),$Ie.forEach(t),h6r=i(me),a5=n(me,"LI",{});var kIe=s(a5);cTe=n(kIe,"STRONG",{});var w6t=s(cTe);p6r=r(w6t,"xlm"),w6t.forEach(t),_6r=r(kIe," \u2014 "),xJ=n(kIe,"A",{href:!0});var A6t=s(xJ);u6r=r(A6t,"TFXLMForTokenClassification"),A6t.forEach(t),b6r=r(kIe," (XLM model)"),kIe.forEach(t),v6r=i(me),n5=n(me,"LI",{});var SIe=s(n5);fTe=n(SIe,"STRONG",{});var L6t=s(fTe);F6r=r(L6t,"xlm-roberta"),L6t.forEach(t),T6r=r(SIe," \u2014 "),$J=n(SIe,"A",{href:!0});var y6t=s($J);M6r=r(y6t,"TFXLMRobertaForTokenClassification"),y6t.forEach(t),E6r=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),C6r=i(me),s5=n(me,"LI",{});var RIe=s(s5);mTe=n(RIe,"STRONG",{});var x6t=s(mTe);w6r=r(x6t,"xlnet"),x6t.forEach(t),A6r=r(RIe," \u2014 "),kJ=n(RIe,"A",{href:!0});var $6t=s(kJ);L6r=r($6t,"TFXLNetForTokenClassification"),$6t.forEach(t),y6r=r(RIe," (XLNet model)"),RIe.forEach(t),me.forEach(t),x6r=i(Bl),T(l5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),yDe=i(f),Tc=n(f,"H2",{class:!0});var BOe=s(Tc);i5=n(BOe,"A",{id:!0,class:!0,href:!0});var k6t=s(i5);gTe=n(k6t,"SPAN",{});var S6t=s(gTe);T(C9.$$.fragment,S6t),S6t.forEach(t),k6t.forEach(t),$6r=i(BOe),hTe=n(BOe,"SPAN",{});var R6t=s(hTe);k6r=r(R6t,"TFAutoModelForQuestionAnswering"),R6t.forEach(t),BOe.forEach(t),xDe=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(w9.$$.fragment,Il),S6r=i(Il),Mc=n(Il,"P",{});var soe=s(Mc);R6r=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SJ=n(soe,"A",{href:!0});var P6t=s(SJ);P6r=r(P6t,"from_pretrained()"),P6t.forEach(t),B6r=r(soe," class method or the "),RJ=n(soe,"A",{href:!0});var B6t=s(RJ);I6r=r(B6t,"from_config()"),B6t.forEach(t),N6r=r(soe,` class
method.`),soe.forEach(t),q6r=i(Il),A9=n(Il,"P",{});var IOe=s(A9);j6r=r(IOe,"This class cannot be instantiated directly using "),pTe=n(IOe,"CODE",{});var I6t=s(pTe);D6r=r(I6t,"__init__()"),I6t.forEach(t),G6r=r(IOe," (throws an error)."),IOe.forEach(t),O6r=i(Il),qt=n(Il,"DIV",{class:!0});var l6=s(qt);T(L9.$$.fragment,l6),V6r=i(l6),_Te=n(l6,"P",{});var N6t=s(_Te);X6r=r(N6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N6t.forEach(t),z6r=i(l6),Ec=n(l6,"P",{});var loe=s(Ec);W6r=r(loe,`Note:
Loading a model from its configuration file does `),uTe=n(loe,"STRONG",{});var q6t=s(uTe);Q6r=r(q6t,"not"),q6t.forEach(t),H6r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(loe,"A",{href:!0});var j6t=s(PJ);U6r=r(j6t,"from_pretrained()"),j6t.forEach(t),J6r=r(loe," to load the model weights."),loe.forEach(t),Y6r=i(l6),T(d5.$$.fragment,l6),l6.forEach(t),K6r=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(y9.$$.fragment,Nl),Z6r=i(Nl),bTe=n(Nl,"P",{});var D6t=s(bTe);eLr=r(D6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),D6t.forEach(t),oLr=i(Nl),fn=n(Nl,"P",{});var i6=s(fn);rLr=r(i6,"The model class to instantiate is selected based on the "),vTe=n(i6,"CODE",{});var G6t=s(vTe);tLr=r(G6t,"model_type"),G6t.forEach(t),aLr=r(i6,` property of the config object (either
passed as an argument or loaded from `),FTe=n(i6,"CODE",{});var O6t=s(FTe);nLr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),sLr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(i6,"CODE",{});var V6t=s(TTe);lLr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),iLr=r(i6,":"),i6.forEach(t),dLr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);c5=n(ge,"LI",{});var PIe=s(c5);MTe=n(PIe,"STRONG",{});var X6t=s(MTe);cLr=r(X6t,"albert"),X6t.forEach(t),fLr=r(PIe," \u2014 "),BJ=n(PIe,"A",{href:!0});var z6t=s(BJ);mLr=r(z6t,"TFAlbertForQuestionAnswering"),z6t.forEach(t),gLr=r(PIe," (ALBERT model)"),PIe.forEach(t),hLr=i(ge),f5=n(ge,"LI",{});var BIe=s(f5);ETe=n(BIe,"STRONG",{});var W6t=s(ETe);pLr=r(W6t,"bert"),W6t.forEach(t),_Lr=r(BIe," \u2014 "),IJ=n(BIe,"A",{href:!0});var Q6t=s(IJ);uLr=r(Q6t,"TFBertForQuestionAnswering"),Q6t.forEach(t),bLr=r(BIe," (BERT model)"),BIe.forEach(t),vLr=i(ge),m5=n(ge,"LI",{});var IIe=s(m5);CTe=n(IIe,"STRONG",{});var H6t=s(CTe);FLr=r(H6t,"camembert"),H6t.forEach(t),TLr=r(IIe," \u2014 "),NJ=n(IIe,"A",{href:!0});var U6t=s(NJ);MLr=r(U6t,"TFCamembertForQuestionAnswering"),U6t.forEach(t),ELr=r(IIe," (CamemBERT model)"),IIe.forEach(t),CLr=i(ge),g5=n(ge,"LI",{});var NIe=s(g5);wTe=n(NIe,"STRONG",{});var J6t=s(wTe);wLr=r(J6t,"convbert"),J6t.forEach(t),ALr=r(NIe," \u2014 "),qJ=n(NIe,"A",{href:!0});var Y6t=s(qJ);LLr=r(Y6t,"TFConvBertForQuestionAnswering"),Y6t.forEach(t),yLr=r(NIe," (ConvBERT model)"),NIe.forEach(t),xLr=i(ge),h5=n(ge,"LI",{});var qIe=s(h5);ATe=n(qIe,"STRONG",{});var K6t=s(ATe);$Lr=r(K6t,"deberta"),K6t.forEach(t),kLr=r(qIe," \u2014 "),jJ=n(qIe,"A",{href:!0});var Z6t=s(jJ);SLr=r(Z6t,"TFDebertaForQuestionAnswering"),Z6t.forEach(t),RLr=r(qIe," (DeBERTa model)"),qIe.forEach(t),PLr=i(ge),p5=n(ge,"LI",{});var jIe=s(p5);LTe=n(jIe,"STRONG",{});var eLt=s(LTe);BLr=r(eLt,"deberta-v2"),eLt.forEach(t),ILr=r(jIe," \u2014 "),DJ=n(jIe,"A",{href:!0});var oLt=s(DJ);NLr=r(oLt,"TFDebertaV2ForQuestionAnswering"),oLt.forEach(t),qLr=r(jIe," (DeBERTa-v2 model)"),jIe.forEach(t),jLr=i(ge),_5=n(ge,"LI",{});var DIe=s(_5);yTe=n(DIe,"STRONG",{});var rLt=s(yTe);DLr=r(rLt,"distilbert"),rLt.forEach(t),GLr=r(DIe," \u2014 "),GJ=n(DIe,"A",{href:!0});var tLt=s(GJ);OLr=r(tLt,"TFDistilBertForQuestionAnswering"),tLt.forEach(t),VLr=r(DIe," (DistilBERT model)"),DIe.forEach(t),XLr=i(ge),u5=n(ge,"LI",{});var GIe=s(u5);xTe=n(GIe,"STRONG",{});var aLt=s(xTe);zLr=r(aLt,"electra"),aLt.forEach(t),WLr=r(GIe," \u2014 "),OJ=n(GIe,"A",{href:!0});var nLt=s(OJ);QLr=r(nLt,"TFElectraForQuestionAnswering"),nLt.forEach(t),HLr=r(GIe," (ELECTRA model)"),GIe.forEach(t),ULr=i(ge),b5=n(ge,"LI",{});var OIe=s(b5);$Te=n(OIe,"STRONG",{});var sLt=s($Te);JLr=r(sLt,"flaubert"),sLt.forEach(t),YLr=r(OIe," \u2014 "),VJ=n(OIe,"A",{href:!0});var lLt=s(VJ);KLr=r(lLt,"TFFlaubertForQuestionAnsweringSimple"),lLt.forEach(t),ZLr=r(OIe," (FlauBERT model)"),OIe.forEach(t),eyr=i(ge),v5=n(ge,"LI",{});var VIe=s(v5);kTe=n(VIe,"STRONG",{});var iLt=s(kTe);oyr=r(iLt,"funnel"),iLt.forEach(t),ryr=r(VIe," \u2014 "),XJ=n(VIe,"A",{href:!0});var dLt=s(XJ);tyr=r(dLt,"TFFunnelForQuestionAnswering"),dLt.forEach(t),ayr=r(VIe," (Funnel Transformer model)"),VIe.forEach(t),nyr=i(ge),F5=n(ge,"LI",{});var XIe=s(F5);STe=n(XIe,"STRONG",{});var cLt=s(STe);syr=r(cLt,"gptj"),cLt.forEach(t),lyr=r(XIe," \u2014 "),zJ=n(XIe,"A",{href:!0});var fLt=s(zJ);iyr=r(fLt,"TFGPTJForQuestionAnswering"),fLt.forEach(t),dyr=r(XIe," (GPT-J model)"),XIe.forEach(t),cyr=i(ge),T5=n(ge,"LI",{});var zIe=s(T5);RTe=n(zIe,"STRONG",{});var mLt=s(RTe);fyr=r(mLt,"longformer"),mLt.forEach(t),myr=r(zIe," \u2014 "),WJ=n(zIe,"A",{href:!0});var gLt=s(WJ);gyr=r(gLt,"TFLongformerForQuestionAnswering"),gLt.forEach(t),hyr=r(zIe," (Longformer model)"),zIe.forEach(t),pyr=i(ge),M5=n(ge,"LI",{});var WIe=s(M5);PTe=n(WIe,"STRONG",{});var hLt=s(PTe);_yr=r(hLt,"mobilebert"),hLt.forEach(t),uyr=r(WIe," \u2014 "),QJ=n(WIe,"A",{href:!0});var pLt=s(QJ);byr=r(pLt,"TFMobileBertForQuestionAnswering"),pLt.forEach(t),vyr=r(WIe," (MobileBERT model)"),WIe.forEach(t),Fyr=i(ge),E5=n(ge,"LI",{});var QIe=s(E5);BTe=n(QIe,"STRONG",{});var _Lt=s(BTe);Tyr=r(_Lt,"mpnet"),_Lt.forEach(t),Myr=r(QIe," \u2014 "),HJ=n(QIe,"A",{href:!0});var uLt=s(HJ);Eyr=r(uLt,"TFMPNetForQuestionAnswering"),uLt.forEach(t),Cyr=r(QIe," (MPNet model)"),QIe.forEach(t),wyr=i(ge),C5=n(ge,"LI",{});var HIe=s(C5);ITe=n(HIe,"STRONG",{});var bLt=s(ITe);Ayr=r(bLt,"rembert"),bLt.forEach(t),Lyr=r(HIe," \u2014 "),UJ=n(HIe,"A",{href:!0});var vLt=s(UJ);yyr=r(vLt,"TFRemBertForQuestionAnswering"),vLt.forEach(t),xyr=r(HIe," (RemBERT model)"),HIe.forEach(t),$yr=i(ge),w5=n(ge,"LI",{});var UIe=s(w5);NTe=n(UIe,"STRONG",{});var FLt=s(NTe);kyr=r(FLt,"roberta"),FLt.forEach(t),Syr=r(UIe," \u2014 "),JJ=n(UIe,"A",{href:!0});var TLt=s(JJ);Ryr=r(TLt,"TFRobertaForQuestionAnswering"),TLt.forEach(t),Pyr=r(UIe," (RoBERTa model)"),UIe.forEach(t),Byr=i(ge),A5=n(ge,"LI",{});var JIe=s(A5);qTe=n(JIe,"STRONG",{});var MLt=s(qTe);Iyr=r(MLt,"roformer"),MLt.forEach(t),Nyr=r(JIe," \u2014 "),YJ=n(JIe,"A",{href:!0});var ELt=s(YJ);qyr=r(ELt,"TFRoFormerForQuestionAnswering"),ELt.forEach(t),jyr=r(JIe," (RoFormer model)"),JIe.forEach(t),Dyr=i(ge),L5=n(ge,"LI",{});var YIe=s(L5);jTe=n(YIe,"STRONG",{});var CLt=s(jTe);Gyr=r(CLt,"xlm"),CLt.forEach(t),Oyr=r(YIe," \u2014 "),KJ=n(YIe,"A",{href:!0});var wLt=s(KJ);Vyr=r(wLt,"TFXLMForQuestionAnsweringSimple"),wLt.forEach(t),Xyr=r(YIe," (XLM model)"),YIe.forEach(t),zyr=i(ge),y5=n(ge,"LI",{});var KIe=s(y5);DTe=n(KIe,"STRONG",{});var ALt=s(DTe);Wyr=r(ALt,"xlm-roberta"),ALt.forEach(t),Qyr=r(KIe," \u2014 "),ZJ=n(KIe,"A",{href:!0});var LLt=s(ZJ);Hyr=r(LLt,"TFXLMRobertaForQuestionAnswering"),LLt.forEach(t),Uyr=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),Jyr=i(ge),x5=n(ge,"LI",{});var ZIe=s(x5);GTe=n(ZIe,"STRONG",{});var yLt=s(GTe);Yyr=r(yLt,"xlnet"),yLt.forEach(t),Kyr=r(ZIe," \u2014 "),eY=n(ZIe,"A",{href:!0});var xLt=s(eY);Zyr=r(xLt,"TFXLNetForQuestionAnsweringSimple"),xLt.forEach(t),e8r=r(ZIe," (XLNet model)"),ZIe.forEach(t),ge.forEach(t),o8r=i(Nl),T($5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),$De=i(f),Cc=n(f,"H2",{class:!0});var NOe=s(Cc);k5=n(NOe,"A",{id:!0,class:!0,href:!0});var $Lt=s(k5);OTe=n($Lt,"SPAN",{});var kLt=s(OTe);T(x9.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),r8r=i(NOe),VTe=n(NOe,"SPAN",{});var SLt=s(VTe);t8r=r(SLt,"TFAutoModelForVision2Seq"),SLt.forEach(t),NOe.forEach(t),kDe=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T($9.$$.fragment,ql),a8r=i(ql),wc=n(ql,"P",{});var ioe=s(wc);n8r=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oY=n(ioe,"A",{href:!0});var RLt=s(oY);s8r=r(RLt,"from_pretrained()"),RLt.forEach(t),l8r=r(ioe," class method or the "),rY=n(ioe,"A",{href:!0});var PLt=s(rY);i8r=r(PLt,"from_config()"),PLt.forEach(t),d8r=r(ioe,` class
method.`),ioe.forEach(t),c8r=i(ql),k9=n(ql,"P",{});var qOe=s(k9);f8r=r(qOe,"This class cannot be instantiated directly using "),XTe=n(qOe,"CODE",{});var BLt=s(XTe);m8r=r(BLt,"__init__()"),BLt.forEach(t),g8r=r(qOe," (throws an error)."),qOe.forEach(t),h8r=i(ql),jt=n(ql,"DIV",{class:!0});var d6=s(jt);T(S9.$$.fragment,d6),p8r=i(d6),zTe=n(d6,"P",{});var ILt=s(zTe);_8r=r(ILt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ILt.forEach(t),u8r=i(d6),Ac=n(d6,"P",{});var doe=s(Ac);b8r=r(doe,`Note:
Loading a model from its configuration file does `),WTe=n(doe,"STRONG",{});var NLt=s(WTe);v8r=r(NLt,"not"),NLt.forEach(t),F8r=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(doe,"A",{href:!0});var qLt=s(tY);T8r=r(qLt,"from_pretrained()"),qLt.forEach(t),M8r=r(doe," to load the model weights."),doe.forEach(t),E8r=i(d6),T(S5.$$.fragment,d6),d6.forEach(t),C8r=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(R9.$$.fragment,jl),w8r=i(jl),QTe=n(jl,"P",{});var jLt=s(QTe);A8r=r(jLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jLt.forEach(t),L8r=i(jl),mn=n(jl,"P",{});var c6=s(mn);y8r=r(c6,"The model class to instantiate is selected based on the "),HTe=n(c6,"CODE",{});var DLt=s(HTe);x8r=r(DLt,"model_type"),DLt.forEach(t),$8r=r(c6,` property of the config object (either
passed as an argument or loaded from `),UTe=n(c6,"CODE",{});var GLt=s(UTe);k8r=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),S8r=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(c6,"CODE",{});var OLt=s(JTe);R8r=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),P8r=r(c6,":"),c6.forEach(t),B8r=i(jl),YTe=n(jl,"UL",{});var VLt=s(YTe);R5=n(VLt,"LI",{});var eNe=s(R5);KTe=n(eNe,"STRONG",{});var XLt=s(KTe);I8r=r(XLt,"vision-encoder-decoder"),XLt.forEach(t),N8r=r(eNe," \u2014 "),aY=n(eNe,"A",{href:!0});var zLt=s(aY);q8r=r(zLt,"TFVisionEncoderDecoderModel"),zLt.forEach(t),j8r=r(eNe," (Vision Encoder decoder model)"),eNe.forEach(t),VLt.forEach(t),D8r=i(jl),T(P5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),SDe=i(f),Lc=n(f,"H2",{class:!0});var jOe=s(Lc);B5=n(jOe,"A",{id:!0,class:!0,href:!0});var WLt=s(B5);ZTe=n(WLt,"SPAN",{});var QLt=s(ZTe);T(P9.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),G8r=i(jOe),eMe=n(jOe,"SPAN",{});var HLt=s(eMe);O8r=r(HLt,"TFAutoModelForSpeechSeq2Seq"),HLt.forEach(t),jOe.forEach(t),RDe=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(B9.$$.fragment,Dl),V8r=i(Dl),yc=n(Dl,"P",{});var coe=s(yc);X8r=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nY=n(coe,"A",{href:!0});var ULt=s(nY);z8r=r(ULt,"from_pretrained()"),ULt.forEach(t),W8r=r(coe," class method or the "),sY=n(coe,"A",{href:!0});var JLt=s(sY);Q8r=r(JLt,"from_config()"),JLt.forEach(t),H8r=r(coe,` class
method.`),coe.forEach(t),U8r=i(Dl),I9=n(Dl,"P",{});var DOe=s(I9);J8r=r(DOe,"This class cannot be instantiated directly using "),oMe=n(DOe,"CODE",{});var YLt=s(oMe);Y8r=r(YLt,"__init__()"),YLt.forEach(t),K8r=r(DOe," (throws an error)."),DOe.forEach(t),Z8r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var f6=s(Dt);T(N9.$$.fragment,f6),e9r=i(f6),rMe=n(f6,"P",{});var KLt=s(rMe);o9r=r(KLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),KLt.forEach(t),r9r=i(f6),xc=n(f6,"P",{});var foe=s(xc);t9r=r(foe,`Note:
Loading a model from its configuration file does `),tMe=n(foe,"STRONG",{});var ZLt=s(tMe);a9r=r(ZLt,"not"),ZLt.forEach(t),n9r=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(foe,"A",{href:!0});var eyt=s(lY);s9r=r(eyt,"from_pretrained()"),eyt.forEach(t),l9r=r(foe," to load the model weights."),foe.forEach(t),i9r=i(f6),T(I5.$$.fragment,f6),f6.forEach(t),d9r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(q9.$$.fragment,Gl),c9r=i(Gl),aMe=n(Gl,"P",{});var oyt=s(aMe);f9r=r(oyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oyt.forEach(t),m9r=i(Gl),gn=n(Gl,"P",{});var m6=s(gn);g9r=r(m6,"The model class to instantiate is selected based on the "),nMe=n(m6,"CODE",{});var ryt=s(nMe);h9r=r(ryt,"model_type"),ryt.forEach(t),p9r=r(m6,` property of the config object (either
passed as an argument or loaded from `),sMe=n(m6,"CODE",{});var tyt=s(sMe);_9r=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),u9r=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(m6,"CODE",{});var ayt=s(lMe);b9r=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),v9r=r(m6,":"),m6.forEach(t),F9r=i(Gl),iMe=n(Gl,"UL",{});var nyt=s(iMe);N5=n(nyt,"LI",{});var oNe=s(N5);dMe=n(oNe,"STRONG",{});var syt=s(dMe);T9r=r(syt,"speech_to_text"),syt.forEach(t),M9r=r(oNe," \u2014 "),iY=n(oNe,"A",{href:!0});var lyt=s(iY);E9r=r(lyt,"TFSpeech2TextForConditionalGeneration"),lyt.forEach(t),C9r=r(oNe," (Speech2Text model)"),oNe.forEach(t),nyt.forEach(t),w9r=i(Gl),T(q5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),PDe=i(f),$c=n(f,"H2",{class:!0});var GOe=s($c);j5=n(GOe,"A",{id:!0,class:!0,href:!0});var iyt=s(j5);cMe=n(iyt,"SPAN",{});var dyt=s(cMe);T(j9.$$.fragment,dyt),dyt.forEach(t),iyt.forEach(t),A9r=i(GOe),fMe=n(GOe,"SPAN",{});var cyt=s(fMe);L9r=r(cyt,"FlaxAutoModel"),cyt.forEach(t),GOe.forEach(t),BDe=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(D9.$$.fragment,Ol),y9r=i(Ol),kc=n(Ol,"P",{});var moe=s(kc);x9r=r(moe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dY=n(moe,"A",{href:!0});var fyt=s(dY);$9r=r(fyt,"from_pretrained()"),fyt.forEach(t),k9r=r(moe," class method or the "),cY=n(moe,"A",{href:!0});var myt=s(cY);S9r=r(myt,"from_config()"),myt.forEach(t),R9r=r(moe,` class
method.`),moe.forEach(t),P9r=i(Ol),G9=n(Ol,"P",{});var OOe=s(G9);B9r=r(OOe,"This class cannot be instantiated directly using "),mMe=n(OOe,"CODE",{});var gyt=s(mMe);I9r=r(gyt,"__init__()"),gyt.forEach(t),N9r=r(OOe," (throws an error)."),OOe.forEach(t),q9r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var g6=s(Gt);T(O9.$$.fragment,g6),j9r=i(g6),gMe=n(g6,"P",{});var hyt=s(gMe);D9r=r(hyt,"Instantiates one of the base model classes of the library from a configuration."),hyt.forEach(t),G9r=i(g6),Sc=n(g6,"P",{});var goe=s(Sc);O9r=r(goe,`Note:
Loading a model from its configuration file does `),hMe=n(goe,"STRONG",{});var pyt=s(hMe);V9r=r(pyt,"not"),pyt.forEach(t),X9r=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(goe,"A",{href:!0});var _yt=s(fY);z9r=r(_yt,"from_pretrained()"),_yt.forEach(t),W9r=r(goe," to load the model weights."),goe.forEach(t),Q9r=i(g6),T(D5.$$.fragment,g6),g6.forEach(t),H9r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(V9.$$.fragment,Vl),U9r=i(Vl),pMe=n(Vl,"P",{});var uyt=s(pMe);J9r=r(uyt,"Instantiate one of the base model classes of the library from a pretrained model."),uyt.forEach(t),Y9r=i(Vl),hn=n(Vl,"P",{});var h6=s(hn);K9r=r(h6,"The model class to instantiate is selected based on the "),_Me=n(h6,"CODE",{});var byt=s(_Me);Z9r=r(byt,"model_type"),byt.forEach(t),exr=r(h6,` property of the config object (either
passed as an argument or loaded from `),uMe=n(h6,"CODE",{});var vyt=s(uMe);oxr=r(vyt,"pretrained_model_name_or_path"),vyt.forEach(t),rxr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(h6,"CODE",{});var Fyt=s(bMe);txr=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),axr=r(h6,":"),h6.forEach(t),nxr=i(Vl),re=n(Vl,"UL",{});var ne=s(re);G5=n(ne,"LI",{});var rNe=s(G5);vMe=n(rNe,"STRONG",{});var Tyt=s(vMe);sxr=r(Tyt,"albert"),Tyt.forEach(t),lxr=r(rNe," \u2014 "),mY=n(rNe,"A",{href:!0});var Myt=s(mY);ixr=r(Myt,"FlaxAlbertModel"),Myt.forEach(t),dxr=r(rNe," (ALBERT model)"),rNe.forEach(t),cxr=i(ne),O5=n(ne,"LI",{});var tNe=s(O5);FMe=n(tNe,"STRONG",{});var Eyt=s(FMe);fxr=r(Eyt,"bart"),Eyt.forEach(t),mxr=r(tNe," \u2014 "),gY=n(tNe,"A",{href:!0});var Cyt=s(gY);gxr=r(Cyt,"FlaxBartModel"),Cyt.forEach(t),hxr=r(tNe," (BART model)"),tNe.forEach(t),pxr=i(ne),V5=n(ne,"LI",{});var aNe=s(V5);TMe=n(aNe,"STRONG",{});var wyt=s(TMe);_xr=r(wyt,"beit"),wyt.forEach(t),uxr=r(aNe," \u2014 "),hY=n(aNe,"A",{href:!0});var Ayt=s(hY);bxr=r(Ayt,"FlaxBeitModel"),Ayt.forEach(t),vxr=r(aNe," (BEiT model)"),aNe.forEach(t),Fxr=i(ne),X5=n(ne,"LI",{});var nNe=s(X5);MMe=n(nNe,"STRONG",{});var Lyt=s(MMe);Txr=r(Lyt,"bert"),Lyt.forEach(t),Mxr=r(nNe," \u2014 "),pY=n(nNe,"A",{href:!0});var yyt=s(pY);Exr=r(yyt,"FlaxBertModel"),yyt.forEach(t),Cxr=r(nNe," (BERT model)"),nNe.forEach(t),wxr=i(ne),z5=n(ne,"LI",{});var sNe=s(z5);EMe=n(sNe,"STRONG",{});var xyt=s(EMe);Axr=r(xyt,"big_bird"),xyt.forEach(t),Lxr=r(sNe," \u2014 "),_Y=n(sNe,"A",{href:!0});var $yt=s(_Y);yxr=r($yt,"FlaxBigBirdModel"),$yt.forEach(t),xxr=r(sNe," (BigBird model)"),sNe.forEach(t),$xr=i(ne),W5=n(ne,"LI",{});var lNe=s(W5);CMe=n(lNe,"STRONG",{});var kyt=s(CMe);kxr=r(kyt,"blenderbot"),kyt.forEach(t),Sxr=r(lNe," \u2014 "),uY=n(lNe,"A",{href:!0});var Syt=s(uY);Rxr=r(Syt,"FlaxBlenderbotModel"),Syt.forEach(t),Pxr=r(lNe," (Blenderbot model)"),lNe.forEach(t),Bxr=i(ne),Q5=n(ne,"LI",{});var iNe=s(Q5);wMe=n(iNe,"STRONG",{});var Ryt=s(wMe);Ixr=r(Ryt,"blenderbot-small"),Ryt.forEach(t),Nxr=r(iNe," \u2014 "),bY=n(iNe,"A",{href:!0});var Pyt=s(bY);qxr=r(Pyt,"FlaxBlenderbotSmallModel"),Pyt.forEach(t),jxr=r(iNe," (BlenderbotSmall model)"),iNe.forEach(t),Dxr=i(ne),H5=n(ne,"LI",{});var dNe=s(H5);AMe=n(dNe,"STRONG",{});var Byt=s(AMe);Gxr=r(Byt,"clip"),Byt.forEach(t),Oxr=r(dNe," \u2014 "),vY=n(dNe,"A",{href:!0});var Iyt=s(vY);Vxr=r(Iyt,"FlaxCLIPModel"),Iyt.forEach(t),Xxr=r(dNe," (CLIP model)"),dNe.forEach(t),zxr=i(ne),U5=n(ne,"LI",{});var cNe=s(U5);LMe=n(cNe,"STRONG",{});var Nyt=s(LMe);Wxr=r(Nyt,"distilbert"),Nyt.forEach(t),Qxr=r(cNe," \u2014 "),FY=n(cNe,"A",{href:!0});var qyt=s(FY);Hxr=r(qyt,"FlaxDistilBertModel"),qyt.forEach(t),Uxr=r(cNe," (DistilBERT model)"),cNe.forEach(t),Jxr=i(ne),J5=n(ne,"LI",{});var fNe=s(J5);yMe=n(fNe,"STRONG",{});var jyt=s(yMe);Yxr=r(jyt,"electra"),jyt.forEach(t),Kxr=r(fNe," \u2014 "),TY=n(fNe,"A",{href:!0});var Dyt=s(TY);Zxr=r(Dyt,"FlaxElectraModel"),Dyt.forEach(t),e$r=r(fNe," (ELECTRA model)"),fNe.forEach(t),o$r=i(ne),Y5=n(ne,"LI",{});var mNe=s(Y5);xMe=n(mNe,"STRONG",{});var Gyt=s(xMe);r$r=r(Gyt,"gpt2"),Gyt.forEach(t),t$r=r(mNe," \u2014 "),MY=n(mNe,"A",{href:!0});var Oyt=s(MY);a$r=r(Oyt,"FlaxGPT2Model"),Oyt.forEach(t),n$r=r(mNe," (OpenAI GPT-2 model)"),mNe.forEach(t),s$r=i(ne),K5=n(ne,"LI",{});var gNe=s(K5);$Me=n(gNe,"STRONG",{});var Vyt=s($Me);l$r=r(Vyt,"gpt_neo"),Vyt.forEach(t),i$r=r(gNe," \u2014 "),EY=n(gNe,"A",{href:!0});var Xyt=s(EY);d$r=r(Xyt,"FlaxGPTNeoModel"),Xyt.forEach(t),c$r=r(gNe," (GPT Neo model)"),gNe.forEach(t),f$r=i(ne),Z5=n(ne,"LI",{});var hNe=s(Z5);kMe=n(hNe,"STRONG",{});var zyt=s(kMe);m$r=r(zyt,"gptj"),zyt.forEach(t),g$r=r(hNe," \u2014 "),CY=n(hNe,"A",{href:!0});var Wyt=s(CY);h$r=r(Wyt,"FlaxGPTJModel"),Wyt.forEach(t),p$r=r(hNe," (GPT-J model)"),hNe.forEach(t),_$r=i(ne),e3=n(ne,"LI",{});var pNe=s(e3);SMe=n(pNe,"STRONG",{});var Qyt=s(SMe);u$r=r(Qyt,"marian"),Qyt.forEach(t),b$r=r(pNe," \u2014 "),wY=n(pNe,"A",{href:!0});var Hyt=s(wY);v$r=r(Hyt,"FlaxMarianModel"),Hyt.forEach(t),F$r=r(pNe," (Marian model)"),pNe.forEach(t),T$r=i(ne),o3=n(ne,"LI",{});var _Ne=s(o3);RMe=n(_Ne,"STRONG",{});var Uyt=s(RMe);M$r=r(Uyt,"mbart"),Uyt.forEach(t),E$r=r(_Ne," \u2014 "),AY=n(_Ne,"A",{href:!0});var Jyt=s(AY);C$r=r(Jyt,"FlaxMBartModel"),Jyt.forEach(t),w$r=r(_Ne," (mBART model)"),_Ne.forEach(t),A$r=i(ne),r3=n(ne,"LI",{});var uNe=s(r3);PMe=n(uNe,"STRONG",{});var Yyt=s(PMe);L$r=r(Yyt,"mt5"),Yyt.forEach(t),y$r=r(uNe," \u2014 "),LY=n(uNe,"A",{href:!0});var Kyt=s(LY);x$r=r(Kyt,"FlaxMT5Model"),Kyt.forEach(t),$$r=r(uNe," (MT5 model)"),uNe.forEach(t),k$r=i(ne),t3=n(ne,"LI",{});var bNe=s(t3);BMe=n(bNe,"STRONG",{});var Zyt=s(BMe);S$r=r(Zyt,"opt"),Zyt.forEach(t),R$r=r(bNe," \u2014 "),yY=n(bNe,"A",{href:!0});var e8t=s(yY);P$r=r(e8t,"FlaxOPTModel"),e8t.forEach(t),B$r=r(bNe," (OPT model)"),bNe.forEach(t),I$r=i(ne),a3=n(ne,"LI",{});var vNe=s(a3);IMe=n(vNe,"STRONG",{});var o8t=s(IMe);N$r=r(o8t,"pegasus"),o8t.forEach(t),q$r=r(vNe," \u2014 "),xY=n(vNe,"A",{href:!0});var r8t=s(xY);j$r=r(r8t,"FlaxPegasusModel"),r8t.forEach(t),D$r=r(vNe," (Pegasus model)"),vNe.forEach(t),G$r=i(ne),n3=n(ne,"LI",{});var FNe=s(n3);NMe=n(FNe,"STRONG",{});var t8t=s(NMe);O$r=r(t8t,"roberta"),t8t.forEach(t),V$r=r(FNe," \u2014 "),$Y=n(FNe,"A",{href:!0});var a8t=s($Y);X$r=r(a8t,"FlaxRobertaModel"),a8t.forEach(t),z$r=r(FNe," (RoBERTa model)"),FNe.forEach(t),W$r=i(ne),s3=n(ne,"LI",{});var TNe=s(s3);qMe=n(TNe,"STRONG",{});var n8t=s(qMe);Q$r=r(n8t,"roformer"),n8t.forEach(t),H$r=r(TNe," \u2014 "),kY=n(TNe,"A",{href:!0});var s8t=s(kY);U$r=r(s8t,"FlaxRoFormerModel"),s8t.forEach(t),J$r=r(TNe," (RoFormer model)"),TNe.forEach(t),Y$r=i(ne),l3=n(ne,"LI",{});var MNe=s(l3);jMe=n(MNe,"STRONG",{});var l8t=s(jMe);K$r=r(l8t,"t5"),l8t.forEach(t),Z$r=r(MNe," \u2014 "),SY=n(MNe,"A",{href:!0});var i8t=s(SY);ekr=r(i8t,"FlaxT5Model"),i8t.forEach(t),okr=r(MNe," (T5 model)"),MNe.forEach(t),rkr=i(ne),i3=n(ne,"LI",{});var ENe=s(i3);DMe=n(ENe,"STRONG",{});var d8t=s(DMe);tkr=r(d8t,"vision-text-dual-encoder"),d8t.forEach(t),akr=r(ENe," \u2014 "),RY=n(ENe,"A",{href:!0});var c8t=s(RY);nkr=r(c8t,"FlaxVisionTextDualEncoderModel"),c8t.forEach(t),skr=r(ENe," (VisionTextDualEncoder model)"),ENe.forEach(t),lkr=i(ne),d3=n(ne,"LI",{});var CNe=s(d3);GMe=n(CNe,"STRONG",{});var f8t=s(GMe);ikr=r(f8t,"vit"),f8t.forEach(t),dkr=r(CNe," \u2014 "),PY=n(CNe,"A",{href:!0});var m8t=s(PY);ckr=r(m8t,"FlaxViTModel"),m8t.forEach(t),fkr=r(CNe," (ViT model)"),CNe.forEach(t),mkr=i(ne),c3=n(ne,"LI",{});var wNe=s(c3);OMe=n(wNe,"STRONG",{});var g8t=s(OMe);gkr=r(g8t,"wav2vec2"),g8t.forEach(t),hkr=r(wNe," \u2014 "),BY=n(wNe,"A",{href:!0});var h8t=s(BY);pkr=r(h8t,"FlaxWav2Vec2Model"),h8t.forEach(t),_kr=r(wNe," (Wav2Vec2 model)"),wNe.forEach(t),ukr=i(ne),f3=n(ne,"LI",{});var ANe=s(f3);VMe=n(ANe,"STRONG",{});var p8t=s(VMe);bkr=r(p8t,"xglm"),p8t.forEach(t),vkr=r(ANe," \u2014 "),IY=n(ANe,"A",{href:!0});var _8t=s(IY);Fkr=r(_8t,"FlaxXGLMModel"),_8t.forEach(t),Tkr=r(ANe," (XGLM model)"),ANe.forEach(t),Mkr=i(ne),m3=n(ne,"LI",{});var LNe=s(m3);XMe=n(LNe,"STRONG",{});var u8t=s(XMe);Ekr=r(u8t,"xlm-roberta"),u8t.forEach(t),Ckr=r(LNe," \u2014 "),NY=n(LNe,"A",{href:!0});var b8t=s(NY);wkr=r(b8t,"FlaxXLMRobertaModel"),b8t.forEach(t),Akr=r(LNe," (XLM-RoBERTa model)"),LNe.forEach(t),ne.forEach(t),Lkr=i(Vl),T(g3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),IDe=i(f),Rc=n(f,"H2",{class:!0});var VOe=s(Rc);h3=n(VOe,"A",{id:!0,class:!0,href:!0});var v8t=s(h3);zMe=n(v8t,"SPAN",{});var F8t=s(zMe);T(X9.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),ykr=i(VOe),WMe=n(VOe,"SPAN",{});var T8t=s(WMe);xkr=r(T8t,"FlaxAutoModelForCausalLM"),T8t.forEach(t),VOe.forEach(t),NDe=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(z9.$$.fragment,Xl),$kr=i(Xl),Pc=n(Xl,"P",{});var hoe=s(Pc);kkr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qY=n(hoe,"A",{href:!0});var M8t=s(qY);Skr=r(M8t,"from_pretrained()"),M8t.forEach(t),Rkr=r(hoe," class method or the "),jY=n(hoe,"A",{href:!0});var E8t=s(jY);Pkr=r(E8t,"from_config()"),E8t.forEach(t),Bkr=r(hoe,` class
method.`),hoe.forEach(t),Ikr=i(Xl),W9=n(Xl,"P",{});var XOe=s(W9);Nkr=r(XOe,"This class cannot be instantiated directly using "),QMe=n(XOe,"CODE",{});var C8t=s(QMe);qkr=r(C8t,"__init__()"),C8t.forEach(t),jkr=r(XOe," (throws an error)."),XOe.forEach(t),Dkr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var p6=s(Ot);T(Q9.$$.fragment,p6),Gkr=i(p6),HMe=n(p6,"P",{});var w8t=s(HMe);Okr=r(w8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w8t.forEach(t),Vkr=i(p6),Bc=n(p6,"P",{});var poe=s(Bc);Xkr=r(poe,`Note:
Loading a model from its configuration file does `),UMe=n(poe,"STRONG",{});var A8t=s(UMe);zkr=r(A8t,"not"),A8t.forEach(t),Wkr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(poe,"A",{href:!0});var L8t=s(DY);Qkr=r(L8t,"from_pretrained()"),L8t.forEach(t),Hkr=r(poe," to load the model weights."),poe.forEach(t),Ukr=i(p6),T(p3.$$.fragment,p6),p6.forEach(t),Jkr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(H9.$$.fragment,zl),Ykr=i(zl),JMe=n(zl,"P",{});var y8t=s(JMe);Kkr=r(y8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),y8t.forEach(t),Zkr=i(zl),pn=n(zl,"P",{});var _6=s(pn);eSr=r(_6,"The model class to instantiate is selected based on the "),YMe=n(_6,"CODE",{});var x8t=s(YMe);oSr=r(x8t,"model_type"),x8t.forEach(t),rSr=r(_6,` property of the config object (either
passed as an argument or loaded from `),KMe=n(_6,"CODE",{});var $8t=s(KMe);tSr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),aSr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(_6,"CODE",{});var k8t=s(ZMe);nSr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),sSr=r(_6,":"),_6.forEach(t),lSr=i(zl),ye=n(zl,"UL",{});var Ie=s(ye);_3=n(Ie,"LI",{});var yNe=s(_3);eEe=n(yNe,"STRONG",{});var S8t=s(eEe);iSr=r(S8t,"bart"),S8t.forEach(t),dSr=r(yNe," \u2014 "),GY=n(yNe,"A",{href:!0});var R8t=s(GY);cSr=r(R8t,"FlaxBartForCausalLM"),R8t.forEach(t),fSr=r(yNe," (BART model)"),yNe.forEach(t),mSr=i(Ie),u3=n(Ie,"LI",{});var xNe=s(u3);oEe=n(xNe,"STRONG",{});var P8t=s(oEe);gSr=r(P8t,"bert"),P8t.forEach(t),hSr=r(xNe," \u2014 "),OY=n(xNe,"A",{href:!0});var B8t=s(OY);pSr=r(B8t,"FlaxBertForCausalLM"),B8t.forEach(t),_Sr=r(xNe," (BERT model)"),xNe.forEach(t),uSr=i(Ie),b3=n(Ie,"LI",{});var $Ne=s(b3);rEe=n($Ne,"STRONG",{});var I8t=s(rEe);bSr=r(I8t,"big_bird"),I8t.forEach(t),vSr=r($Ne," \u2014 "),VY=n($Ne,"A",{href:!0});var N8t=s(VY);FSr=r(N8t,"FlaxBigBirdForCausalLM"),N8t.forEach(t),TSr=r($Ne," (BigBird model)"),$Ne.forEach(t),MSr=i(Ie),v3=n(Ie,"LI",{});var kNe=s(v3);tEe=n(kNe,"STRONG",{});var q8t=s(tEe);ESr=r(q8t,"electra"),q8t.forEach(t),CSr=r(kNe," \u2014 "),XY=n(kNe,"A",{href:!0});var j8t=s(XY);wSr=r(j8t,"FlaxElectraForCausalLM"),j8t.forEach(t),ASr=r(kNe," (ELECTRA model)"),kNe.forEach(t),LSr=i(Ie),F3=n(Ie,"LI",{});var SNe=s(F3);aEe=n(SNe,"STRONG",{});var D8t=s(aEe);ySr=r(D8t,"gpt2"),D8t.forEach(t),xSr=r(SNe," \u2014 "),zY=n(SNe,"A",{href:!0});var G8t=s(zY);$Sr=r(G8t,"FlaxGPT2LMHeadModel"),G8t.forEach(t),kSr=r(SNe," (OpenAI GPT-2 model)"),SNe.forEach(t),SSr=i(Ie),T3=n(Ie,"LI",{});var RNe=s(T3);nEe=n(RNe,"STRONG",{});var O8t=s(nEe);RSr=r(O8t,"gpt_neo"),O8t.forEach(t),PSr=r(RNe," \u2014 "),WY=n(RNe,"A",{href:!0});var V8t=s(WY);BSr=r(V8t,"FlaxGPTNeoForCausalLM"),V8t.forEach(t),ISr=r(RNe," (GPT Neo model)"),RNe.forEach(t),NSr=i(Ie),M3=n(Ie,"LI",{});var PNe=s(M3);sEe=n(PNe,"STRONG",{});var X8t=s(sEe);qSr=r(X8t,"gptj"),X8t.forEach(t),jSr=r(PNe," \u2014 "),QY=n(PNe,"A",{href:!0});var z8t=s(QY);DSr=r(z8t,"FlaxGPTJForCausalLM"),z8t.forEach(t),GSr=r(PNe," (GPT-J model)"),PNe.forEach(t),OSr=i(Ie),E3=n(Ie,"LI",{});var BNe=s(E3);lEe=n(BNe,"STRONG",{});var W8t=s(lEe);VSr=r(W8t,"opt"),W8t.forEach(t),XSr=r(BNe," \u2014 "),HY=n(BNe,"A",{href:!0});var Q8t=s(HY);zSr=r(Q8t,"FlaxOPTForCausalLM"),Q8t.forEach(t),WSr=r(BNe," (OPT model)"),BNe.forEach(t),QSr=i(Ie),C3=n(Ie,"LI",{});var INe=s(C3);iEe=n(INe,"STRONG",{});var H8t=s(iEe);HSr=r(H8t,"roberta"),H8t.forEach(t),USr=r(INe," \u2014 "),UY=n(INe,"A",{href:!0});var U8t=s(UY);JSr=r(U8t,"FlaxRobertaForCausalLM"),U8t.forEach(t),YSr=r(INe," (RoBERTa model)"),INe.forEach(t),KSr=i(Ie),w3=n(Ie,"LI",{});var NNe=s(w3);dEe=n(NNe,"STRONG",{});var J8t=s(dEe);ZSr=r(J8t,"xglm"),J8t.forEach(t),eRr=r(NNe," \u2014 "),JY=n(NNe,"A",{href:!0});var Y8t=s(JY);oRr=r(Y8t,"FlaxXGLMForCausalLM"),Y8t.forEach(t),rRr=r(NNe," (XGLM model)"),NNe.forEach(t),Ie.forEach(t),tRr=i(zl),T(A3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),qDe=i(f),Ic=n(f,"H2",{class:!0});var zOe=s(Ic);L3=n(zOe,"A",{id:!0,class:!0,href:!0});var K8t=s(L3);cEe=n(K8t,"SPAN",{});var Z8t=s(cEe);T(U9.$$.fragment,Z8t),Z8t.forEach(t),K8t.forEach(t),aRr=i(zOe),fEe=n(zOe,"SPAN",{});var e9t=s(fEe);nRr=r(e9t,"FlaxAutoModelForPreTraining"),e9t.forEach(t),zOe.forEach(t),jDe=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(J9.$$.fragment,Wl),sRr=i(Wl),Nc=n(Wl,"P",{});var _oe=s(Nc);lRr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YY=n(_oe,"A",{href:!0});var o9t=s(YY);iRr=r(o9t,"from_pretrained()"),o9t.forEach(t),dRr=r(_oe," class method or the "),KY=n(_oe,"A",{href:!0});var r9t=s(KY);cRr=r(r9t,"from_config()"),r9t.forEach(t),fRr=r(_oe,` class
method.`),_oe.forEach(t),mRr=i(Wl),Y9=n(Wl,"P",{});var WOe=s(Y9);gRr=r(WOe,"This class cannot be instantiated directly using "),mEe=n(WOe,"CODE",{});var t9t=s(mEe);hRr=r(t9t,"__init__()"),t9t.forEach(t),pRr=r(WOe," (throws an error)."),WOe.forEach(t),_Rr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var u6=s(Vt);T(K9.$$.fragment,u6),uRr=i(u6),gEe=n(u6,"P",{});var a9t=s(gEe);bRr=r(a9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a9t.forEach(t),vRr=i(u6),qc=n(u6,"P",{});var uoe=s(qc);FRr=r(uoe,`Note:
Loading a model from its configuration file does `),hEe=n(uoe,"STRONG",{});var n9t=s(hEe);TRr=r(n9t,"not"),n9t.forEach(t),MRr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(uoe,"A",{href:!0});var s9t=s(ZY);ERr=r(s9t,"from_pretrained()"),s9t.forEach(t),CRr=r(uoe," to load the model weights."),uoe.forEach(t),wRr=i(u6),T(y3.$$.fragment,u6),u6.forEach(t),ARr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(Z9.$$.fragment,Ql),LRr=i(Ql),pEe=n(Ql,"P",{});var l9t=s(pEe);yRr=r(l9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l9t.forEach(t),xRr=i(Ql),_n=n(Ql,"P",{});var b6=s(_n);$Rr=r(b6,"The model class to instantiate is selected based on the "),_Ee=n(b6,"CODE",{});var i9t=s(_Ee);kRr=r(i9t,"model_type"),i9t.forEach(t),SRr=r(b6,` property of the config object (either
passed as an argument or loaded from `),uEe=n(b6,"CODE",{});var d9t=s(uEe);RRr=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),PRr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=n(b6,"CODE",{});var c9t=s(bEe);BRr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),IRr=r(b6,":"),b6.forEach(t),NRr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);x3=n(we,"LI",{});var qNe=s(x3);vEe=n(qNe,"STRONG",{});var f9t=s(vEe);qRr=r(f9t,"albert"),f9t.forEach(t),jRr=r(qNe," \u2014 "),eK=n(qNe,"A",{href:!0});var m9t=s(eK);DRr=r(m9t,"FlaxAlbertForPreTraining"),m9t.forEach(t),GRr=r(qNe," (ALBERT model)"),qNe.forEach(t),ORr=i(we),$3=n(we,"LI",{});var jNe=s($3);FEe=n(jNe,"STRONG",{});var g9t=s(FEe);VRr=r(g9t,"bart"),g9t.forEach(t),XRr=r(jNe," \u2014 "),oK=n(jNe,"A",{href:!0});var h9t=s(oK);zRr=r(h9t,"FlaxBartForConditionalGeneration"),h9t.forEach(t),WRr=r(jNe," (BART model)"),jNe.forEach(t),QRr=i(we),k3=n(we,"LI",{});var DNe=s(k3);TEe=n(DNe,"STRONG",{});var p9t=s(TEe);HRr=r(p9t,"bert"),p9t.forEach(t),URr=r(DNe," \u2014 "),rK=n(DNe,"A",{href:!0});var _9t=s(rK);JRr=r(_9t,"FlaxBertForPreTraining"),_9t.forEach(t),YRr=r(DNe," (BERT model)"),DNe.forEach(t),KRr=i(we),S3=n(we,"LI",{});var GNe=s(S3);MEe=n(GNe,"STRONG",{});var u9t=s(MEe);ZRr=r(u9t,"big_bird"),u9t.forEach(t),ePr=r(GNe," \u2014 "),tK=n(GNe,"A",{href:!0});var b9t=s(tK);oPr=r(b9t,"FlaxBigBirdForPreTraining"),b9t.forEach(t),rPr=r(GNe," (BigBird model)"),GNe.forEach(t),tPr=i(we),R3=n(we,"LI",{});var ONe=s(R3);EEe=n(ONe,"STRONG",{});var v9t=s(EEe);aPr=r(v9t,"electra"),v9t.forEach(t),nPr=r(ONe," \u2014 "),aK=n(ONe,"A",{href:!0});var F9t=s(aK);sPr=r(F9t,"FlaxElectraForPreTraining"),F9t.forEach(t),lPr=r(ONe," (ELECTRA model)"),ONe.forEach(t),iPr=i(we),P3=n(we,"LI",{});var VNe=s(P3);CEe=n(VNe,"STRONG",{});var T9t=s(CEe);dPr=r(T9t,"mbart"),T9t.forEach(t),cPr=r(VNe," \u2014 "),nK=n(VNe,"A",{href:!0});var M9t=s(nK);fPr=r(M9t,"FlaxMBartForConditionalGeneration"),M9t.forEach(t),mPr=r(VNe," (mBART model)"),VNe.forEach(t),gPr=i(we),B3=n(we,"LI",{});var XNe=s(B3);wEe=n(XNe,"STRONG",{});var E9t=s(wEe);hPr=r(E9t,"mt5"),E9t.forEach(t),pPr=r(XNe," \u2014 "),sK=n(XNe,"A",{href:!0});var C9t=s(sK);_Pr=r(C9t,"FlaxMT5ForConditionalGeneration"),C9t.forEach(t),uPr=r(XNe," (MT5 model)"),XNe.forEach(t),bPr=i(we),I3=n(we,"LI",{});var zNe=s(I3);AEe=n(zNe,"STRONG",{});var w9t=s(AEe);vPr=r(w9t,"roberta"),w9t.forEach(t),FPr=r(zNe," \u2014 "),lK=n(zNe,"A",{href:!0});var A9t=s(lK);TPr=r(A9t,"FlaxRobertaForMaskedLM"),A9t.forEach(t),MPr=r(zNe," (RoBERTa model)"),zNe.forEach(t),EPr=i(we),N3=n(we,"LI",{});var WNe=s(N3);LEe=n(WNe,"STRONG",{});var L9t=s(LEe);CPr=r(L9t,"roformer"),L9t.forEach(t),wPr=r(WNe," \u2014 "),iK=n(WNe,"A",{href:!0});var y9t=s(iK);APr=r(y9t,"FlaxRoFormerForMaskedLM"),y9t.forEach(t),LPr=r(WNe," (RoFormer model)"),WNe.forEach(t),yPr=i(we),q3=n(we,"LI",{});var QNe=s(q3);yEe=n(QNe,"STRONG",{});var x9t=s(yEe);xPr=r(x9t,"t5"),x9t.forEach(t),$Pr=r(QNe," \u2014 "),dK=n(QNe,"A",{href:!0});var $9t=s(dK);kPr=r($9t,"FlaxT5ForConditionalGeneration"),$9t.forEach(t),SPr=r(QNe," (T5 model)"),QNe.forEach(t),RPr=i(we),j3=n(we,"LI",{});var HNe=s(j3);xEe=n(HNe,"STRONG",{});var k9t=s(xEe);PPr=r(k9t,"wav2vec2"),k9t.forEach(t),BPr=r(HNe," \u2014 "),cK=n(HNe,"A",{href:!0});var S9t=s(cK);IPr=r(S9t,"FlaxWav2Vec2ForPreTraining"),S9t.forEach(t),NPr=r(HNe," (Wav2Vec2 model)"),HNe.forEach(t),qPr=i(we),D3=n(we,"LI",{});var UNe=s(D3);$Ee=n(UNe,"STRONG",{});var R9t=s($Ee);jPr=r(R9t,"xlm-roberta"),R9t.forEach(t),DPr=r(UNe," \u2014 "),fK=n(UNe,"A",{href:!0});var P9t=s(fK);GPr=r(P9t,"FlaxXLMRobertaForMaskedLM"),P9t.forEach(t),OPr=r(UNe," (XLM-RoBERTa model)"),UNe.forEach(t),we.forEach(t),VPr=i(Ql),T(G3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),DDe=i(f),jc=n(f,"H2",{class:!0});var QOe=s(jc);O3=n(QOe,"A",{id:!0,class:!0,href:!0});var B9t=s(O3);kEe=n(B9t,"SPAN",{});var I9t=s(kEe);T(ex.$$.fragment,I9t),I9t.forEach(t),B9t.forEach(t),XPr=i(QOe),SEe=n(QOe,"SPAN",{});var N9t=s(SEe);zPr=r(N9t,"FlaxAutoModelForMaskedLM"),N9t.forEach(t),QOe.forEach(t),GDe=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(ox.$$.fragment,Hl),WPr=i(Hl),Dc=n(Hl,"P",{});var boe=s(Dc);QPr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mK=n(boe,"A",{href:!0});var q9t=s(mK);HPr=r(q9t,"from_pretrained()"),q9t.forEach(t),UPr=r(boe," class method or the "),gK=n(boe,"A",{href:!0});var j9t=s(gK);JPr=r(j9t,"from_config()"),j9t.forEach(t),YPr=r(boe,` class
method.`),boe.forEach(t),KPr=i(Hl),rx=n(Hl,"P",{});var HOe=s(rx);ZPr=r(HOe,"This class cannot be instantiated directly using "),REe=n(HOe,"CODE",{});var D9t=s(REe);eBr=r(D9t,"__init__()"),D9t.forEach(t),oBr=r(HOe," (throws an error)."),HOe.forEach(t),rBr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var v6=s(Xt);T(tx.$$.fragment,v6),tBr=i(v6),PEe=n(v6,"P",{});var G9t=s(PEe);aBr=r(G9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G9t.forEach(t),nBr=i(v6),Gc=n(v6,"P",{});var voe=s(Gc);sBr=r(voe,`Note:
Loading a model from its configuration file does `),BEe=n(voe,"STRONG",{});var O9t=s(BEe);lBr=r(O9t,"not"),O9t.forEach(t),iBr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(voe,"A",{href:!0});var V9t=s(hK);dBr=r(V9t,"from_pretrained()"),V9t.forEach(t),cBr=r(voe," to load the model weights."),voe.forEach(t),fBr=i(v6),T(V3.$$.fragment,v6),v6.forEach(t),mBr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(ax.$$.fragment,Ul),gBr=i(Ul),IEe=n(Ul,"P",{});var X9t=s(IEe);hBr=r(X9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),X9t.forEach(t),pBr=i(Ul),un=n(Ul,"P",{});var F6=s(un);_Br=r(F6,"The model class to instantiate is selected based on the "),NEe=n(F6,"CODE",{});var z9t=s(NEe);uBr=r(z9t,"model_type"),z9t.forEach(t),bBr=r(F6,` property of the config object (either
passed as an argument or loaded from `),qEe=n(F6,"CODE",{});var W9t=s(qEe);vBr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),FBr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=n(F6,"CODE",{});var Q9t=s(jEe);TBr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),MBr=r(F6,":"),F6.forEach(t),EBr=i(Ul),xe=n(Ul,"UL",{});var Ne=s(xe);X3=n(Ne,"LI",{});var JNe=s(X3);DEe=n(JNe,"STRONG",{});var H9t=s(DEe);CBr=r(H9t,"albert"),H9t.forEach(t),wBr=r(JNe," \u2014 "),pK=n(JNe,"A",{href:!0});var U9t=s(pK);ABr=r(U9t,"FlaxAlbertForMaskedLM"),U9t.forEach(t),LBr=r(JNe," (ALBERT model)"),JNe.forEach(t),yBr=i(Ne),z3=n(Ne,"LI",{});var YNe=s(z3);GEe=n(YNe,"STRONG",{});var J9t=s(GEe);xBr=r(J9t,"bart"),J9t.forEach(t),$Br=r(YNe," \u2014 "),_K=n(YNe,"A",{href:!0});var Y9t=s(_K);kBr=r(Y9t,"FlaxBartForConditionalGeneration"),Y9t.forEach(t),SBr=r(YNe," (BART model)"),YNe.forEach(t),RBr=i(Ne),W3=n(Ne,"LI",{});var KNe=s(W3);OEe=n(KNe,"STRONG",{});var K9t=s(OEe);PBr=r(K9t,"bert"),K9t.forEach(t),BBr=r(KNe," \u2014 "),uK=n(KNe,"A",{href:!0});var Z9t=s(uK);IBr=r(Z9t,"FlaxBertForMaskedLM"),Z9t.forEach(t),NBr=r(KNe," (BERT model)"),KNe.forEach(t),qBr=i(Ne),Q3=n(Ne,"LI",{});var ZNe=s(Q3);VEe=n(ZNe,"STRONG",{});var ext=s(VEe);jBr=r(ext,"big_bird"),ext.forEach(t),DBr=r(ZNe," \u2014 "),bK=n(ZNe,"A",{href:!0});var oxt=s(bK);GBr=r(oxt,"FlaxBigBirdForMaskedLM"),oxt.forEach(t),OBr=r(ZNe," (BigBird model)"),ZNe.forEach(t),VBr=i(Ne),H3=n(Ne,"LI",{});var eqe=s(H3);XEe=n(eqe,"STRONG",{});var rxt=s(XEe);XBr=r(rxt,"distilbert"),rxt.forEach(t),zBr=r(eqe," \u2014 "),vK=n(eqe,"A",{href:!0});var txt=s(vK);WBr=r(txt,"FlaxDistilBertForMaskedLM"),txt.forEach(t),QBr=r(eqe," (DistilBERT model)"),eqe.forEach(t),HBr=i(Ne),U3=n(Ne,"LI",{});var oqe=s(U3);zEe=n(oqe,"STRONG",{});var axt=s(zEe);UBr=r(axt,"electra"),axt.forEach(t),JBr=r(oqe," \u2014 "),FK=n(oqe,"A",{href:!0});var nxt=s(FK);YBr=r(nxt,"FlaxElectraForMaskedLM"),nxt.forEach(t),KBr=r(oqe," (ELECTRA model)"),oqe.forEach(t),ZBr=i(Ne),J3=n(Ne,"LI",{});var rqe=s(J3);WEe=n(rqe,"STRONG",{});var sxt=s(WEe);eIr=r(sxt,"mbart"),sxt.forEach(t),oIr=r(rqe," \u2014 "),TK=n(rqe,"A",{href:!0});var lxt=s(TK);rIr=r(lxt,"FlaxMBartForConditionalGeneration"),lxt.forEach(t),tIr=r(rqe," (mBART model)"),rqe.forEach(t),aIr=i(Ne),Y3=n(Ne,"LI",{});var tqe=s(Y3);QEe=n(tqe,"STRONG",{});var ixt=s(QEe);nIr=r(ixt,"roberta"),ixt.forEach(t),sIr=r(tqe," \u2014 "),MK=n(tqe,"A",{href:!0});var dxt=s(MK);lIr=r(dxt,"FlaxRobertaForMaskedLM"),dxt.forEach(t),iIr=r(tqe," (RoBERTa model)"),tqe.forEach(t),dIr=i(Ne),K3=n(Ne,"LI",{});var aqe=s(K3);HEe=n(aqe,"STRONG",{});var cxt=s(HEe);cIr=r(cxt,"roformer"),cxt.forEach(t),fIr=r(aqe," \u2014 "),EK=n(aqe,"A",{href:!0});var fxt=s(EK);mIr=r(fxt,"FlaxRoFormerForMaskedLM"),fxt.forEach(t),gIr=r(aqe," (RoFormer model)"),aqe.forEach(t),hIr=i(Ne),Z3=n(Ne,"LI",{});var nqe=s(Z3);UEe=n(nqe,"STRONG",{});var mxt=s(UEe);pIr=r(mxt,"xlm-roberta"),mxt.forEach(t),_Ir=r(nqe," \u2014 "),CK=n(nqe,"A",{href:!0});var gxt=s(CK);uIr=r(gxt,"FlaxXLMRobertaForMaskedLM"),gxt.forEach(t),bIr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),Ne.forEach(t),vIr=i(Ul),T(e0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ODe=i(f),Oc=n(f,"H2",{class:!0});var UOe=s(Oc);o0=n(UOe,"A",{id:!0,class:!0,href:!0});var hxt=s(o0);JEe=n(hxt,"SPAN",{});var pxt=s(JEe);T(nx.$$.fragment,pxt),pxt.forEach(t),hxt.forEach(t),FIr=i(UOe),YEe=n(UOe,"SPAN",{});var _xt=s(YEe);TIr=r(_xt,"FlaxAutoModelForSeq2SeqLM"),_xt.forEach(t),UOe.forEach(t),VDe=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(sx.$$.fragment,Jl),MIr=i(Jl),Vc=n(Jl,"P",{});var Foe=s(Vc);EIr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wK=n(Foe,"A",{href:!0});var uxt=s(wK);CIr=r(uxt,"from_pretrained()"),uxt.forEach(t),wIr=r(Foe," class method or the "),AK=n(Foe,"A",{href:!0});var bxt=s(AK);AIr=r(bxt,"from_config()"),bxt.forEach(t),LIr=r(Foe,` class
method.`),Foe.forEach(t),yIr=i(Jl),lx=n(Jl,"P",{});var JOe=s(lx);xIr=r(JOe,"This class cannot be instantiated directly using "),KEe=n(JOe,"CODE",{});var vxt=s(KEe);$Ir=r(vxt,"__init__()"),vxt.forEach(t),kIr=r(JOe," (throws an error)."),JOe.forEach(t),SIr=i(Jl),zt=n(Jl,"DIV",{class:!0});var T6=s(zt);T(ix.$$.fragment,T6),RIr=i(T6),ZEe=n(T6,"P",{});var Fxt=s(ZEe);PIr=r(Fxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fxt.forEach(t),BIr=i(T6),Xc=n(T6,"P",{});var Toe=s(Xc);IIr=r(Toe,`Note:
Loading a model from its configuration file does `),eCe=n(Toe,"STRONG",{});var Txt=s(eCe);NIr=r(Txt,"not"),Txt.forEach(t),qIr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Toe,"A",{href:!0});var Mxt=s(LK);jIr=r(Mxt,"from_pretrained()"),Mxt.forEach(t),DIr=r(Toe," to load the model weights."),Toe.forEach(t),GIr=i(T6),T(r0.$$.fragment,T6),T6.forEach(t),OIr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(dx.$$.fragment,Yl),VIr=i(Yl),oCe=n(Yl,"P",{});var Ext=s(oCe);XIr=r(Ext,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ext.forEach(t),zIr=i(Yl),bn=n(Yl,"P",{});var M6=s(bn);WIr=r(M6,"The model class to instantiate is selected based on the "),rCe=n(M6,"CODE",{});var Cxt=s(rCe);QIr=r(Cxt,"model_type"),Cxt.forEach(t),HIr=r(M6,` property of the config object (either
passed as an argument or loaded from `),tCe=n(M6,"CODE",{});var wxt=s(tCe);UIr=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),JIr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(M6,"CODE",{});var Axt=s(aCe);YIr=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),KIr=r(M6,":"),M6.forEach(t),ZIr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);t0=n(ze,"LI",{});var sqe=s(t0);nCe=n(sqe,"STRONG",{});var Lxt=s(nCe);eNr=r(Lxt,"bart"),Lxt.forEach(t),oNr=r(sqe," \u2014 "),yK=n(sqe,"A",{href:!0});var yxt=s(yK);rNr=r(yxt,"FlaxBartForConditionalGeneration"),yxt.forEach(t),tNr=r(sqe," (BART model)"),sqe.forEach(t),aNr=i(ze),a0=n(ze,"LI",{});var lqe=s(a0);sCe=n(lqe,"STRONG",{});var xxt=s(sCe);nNr=r(xxt,"blenderbot"),xxt.forEach(t),sNr=r(lqe," \u2014 "),xK=n(lqe,"A",{href:!0});var $xt=s(xK);lNr=r($xt,"FlaxBlenderbotForConditionalGeneration"),$xt.forEach(t),iNr=r(lqe," (Blenderbot model)"),lqe.forEach(t),dNr=i(ze),n0=n(ze,"LI",{});var iqe=s(n0);lCe=n(iqe,"STRONG",{});var kxt=s(lCe);cNr=r(kxt,"blenderbot-small"),kxt.forEach(t),fNr=r(iqe," \u2014 "),$K=n(iqe,"A",{href:!0});var Sxt=s($K);mNr=r(Sxt,"FlaxBlenderbotSmallForConditionalGeneration"),Sxt.forEach(t),gNr=r(iqe," (BlenderbotSmall model)"),iqe.forEach(t),hNr=i(ze),s0=n(ze,"LI",{});var dqe=s(s0);iCe=n(dqe,"STRONG",{});var Rxt=s(iCe);pNr=r(Rxt,"encoder-decoder"),Rxt.forEach(t),_Nr=r(dqe," \u2014 "),kK=n(dqe,"A",{href:!0});var Pxt=s(kK);uNr=r(Pxt,"FlaxEncoderDecoderModel"),Pxt.forEach(t),bNr=r(dqe," (Encoder decoder model)"),dqe.forEach(t),vNr=i(ze),l0=n(ze,"LI",{});var cqe=s(l0);dCe=n(cqe,"STRONG",{});var Bxt=s(dCe);FNr=r(Bxt,"marian"),Bxt.forEach(t),TNr=r(cqe," \u2014 "),SK=n(cqe,"A",{href:!0});var Ixt=s(SK);MNr=r(Ixt,"FlaxMarianMTModel"),Ixt.forEach(t),ENr=r(cqe," (Marian model)"),cqe.forEach(t),CNr=i(ze),i0=n(ze,"LI",{});var fqe=s(i0);cCe=n(fqe,"STRONG",{});var Nxt=s(cCe);wNr=r(Nxt,"mbart"),Nxt.forEach(t),ANr=r(fqe," \u2014 "),RK=n(fqe,"A",{href:!0});var qxt=s(RK);LNr=r(qxt,"FlaxMBartForConditionalGeneration"),qxt.forEach(t),yNr=r(fqe," (mBART model)"),fqe.forEach(t),xNr=i(ze),d0=n(ze,"LI",{});var mqe=s(d0);fCe=n(mqe,"STRONG",{});var jxt=s(fCe);$Nr=r(jxt,"mt5"),jxt.forEach(t),kNr=r(mqe," \u2014 "),PK=n(mqe,"A",{href:!0});var Dxt=s(PK);SNr=r(Dxt,"FlaxMT5ForConditionalGeneration"),Dxt.forEach(t),RNr=r(mqe," (MT5 model)"),mqe.forEach(t),PNr=i(ze),c0=n(ze,"LI",{});var gqe=s(c0);mCe=n(gqe,"STRONG",{});var Gxt=s(mCe);BNr=r(Gxt,"pegasus"),Gxt.forEach(t),INr=r(gqe," \u2014 "),BK=n(gqe,"A",{href:!0});var Oxt=s(BK);NNr=r(Oxt,"FlaxPegasusForConditionalGeneration"),Oxt.forEach(t),qNr=r(gqe," (Pegasus model)"),gqe.forEach(t),jNr=i(ze),f0=n(ze,"LI",{});var hqe=s(f0);gCe=n(hqe,"STRONG",{});var Vxt=s(gCe);DNr=r(Vxt,"t5"),Vxt.forEach(t),GNr=r(hqe," \u2014 "),IK=n(hqe,"A",{href:!0});var Xxt=s(IK);ONr=r(Xxt,"FlaxT5ForConditionalGeneration"),Xxt.forEach(t),VNr=r(hqe," (T5 model)"),hqe.forEach(t),ze.forEach(t),XNr=i(Yl),T(m0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),XDe=i(f),zc=n(f,"H2",{class:!0});var YOe=s(zc);g0=n(YOe,"A",{id:!0,class:!0,href:!0});var zxt=s(g0);hCe=n(zxt,"SPAN",{});var Wxt=s(hCe);T(cx.$$.fragment,Wxt),Wxt.forEach(t),zxt.forEach(t),zNr=i(YOe),pCe=n(YOe,"SPAN",{});var Qxt=s(pCe);WNr=r(Qxt,"FlaxAutoModelForSequenceClassification"),Qxt.forEach(t),YOe.forEach(t),zDe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(fx.$$.fragment,Kl),QNr=i(Kl),Wc=n(Kl,"P",{});var Moe=s(Wc);HNr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NK=n(Moe,"A",{href:!0});var Hxt=s(NK);UNr=r(Hxt,"from_pretrained()"),Hxt.forEach(t),JNr=r(Moe," class method or the "),qK=n(Moe,"A",{href:!0});var Uxt=s(qK);YNr=r(Uxt,"from_config()"),Uxt.forEach(t),KNr=r(Moe,` class
method.`),Moe.forEach(t),ZNr=i(Kl),mx=n(Kl,"P",{});var KOe=s(mx);eqr=r(KOe,"This class cannot be instantiated directly using "),_Ce=n(KOe,"CODE",{});var Jxt=s(_Ce);oqr=r(Jxt,"__init__()"),Jxt.forEach(t),rqr=r(KOe," (throws an error)."),KOe.forEach(t),tqr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var E6=s(Wt);T(gx.$$.fragment,E6),aqr=i(E6),uCe=n(E6,"P",{});var Yxt=s(uCe);nqr=r(Yxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yxt.forEach(t),sqr=i(E6),Qc=n(E6,"P",{});var Eoe=s(Qc);lqr=r(Eoe,`Note:
Loading a model from its configuration file does `),bCe=n(Eoe,"STRONG",{});var Kxt=s(bCe);iqr=r(Kxt,"not"),Kxt.forEach(t),dqr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Eoe,"A",{href:!0});var Zxt=s(jK);cqr=r(Zxt,"from_pretrained()"),Zxt.forEach(t),fqr=r(Eoe," to load the model weights."),Eoe.forEach(t),mqr=i(E6),T(h0.$$.fragment,E6),E6.forEach(t),gqr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(hx.$$.fragment,Zl),hqr=i(Zl),vCe=n(Zl,"P",{});var e$t=s(vCe);pqr=r(e$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e$t.forEach(t),_qr=i(Zl),vn=n(Zl,"P",{});var C6=s(vn);uqr=r(C6,"The model class to instantiate is selected based on the "),FCe=n(C6,"CODE",{});var o$t=s(FCe);bqr=r(o$t,"model_type"),o$t.forEach(t),vqr=r(C6,` property of the config object (either
passed as an argument or loaded from `),TCe=n(C6,"CODE",{});var r$t=s(TCe);Fqr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),Tqr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(C6,"CODE",{});var t$t=s(MCe);Mqr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),Eqr=r(C6,":"),C6.forEach(t),Cqr=i(Zl),$e=n(Zl,"UL",{});var qe=s($e);p0=n(qe,"LI",{});var pqe=s(p0);ECe=n(pqe,"STRONG",{});var a$t=s(ECe);wqr=r(a$t,"albert"),a$t.forEach(t),Aqr=r(pqe," \u2014 "),DK=n(pqe,"A",{href:!0});var n$t=s(DK);Lqr=r(n$t,"FlaxAlbertForSequenceClassification"),n$t.forEach(t),yqr=r(pqe," (ALBERT model)"),pqe.forEach(t),xqr=i(qe),_0=n(qe,"LI",{});var _qe=s(_0);CCe=n(_qe,"STRONG",{});var s$t=s(CCe);$qr=r(s$t,"bart"),s$t.forEach(t),kqr=r(_qe," \u2014 "),GK=n(_qe,"A",{href:!0});var l$t=s(GK);Sqr=r(l$t,"FlaxBartForSequenceClassification"),l$t.forEach(t),Rqr=r(_qe," (BART model)"),_qe.forEach(t),Pqr=i(qe),u0=n(qe,"LI",{});var uqe=s(u0);wCe=n(uqe,"STRONG",{});var i$t=s(wCe);Bqr=r(i$t,"bert"),i$t.forEach(t),Iqr=r(uqe," \u2014 "),OK=n(uqe,"A",{href:!0});var d$t=s(OK);Nqr=r(d$t,"FlaxBertForSequenceClassification"),d$t.forEach(t),qqr=r(uqe," (BERT model)"),uqe.forEach(t),jqr=i(qe),b0=n(qe,"LI",{});var bqe=s(b0);ACe=n(bqe,"STRONG",{});var c$t=s(ACe);Dqr=r(c$t,"big_bird"),c$t.forEach(t),Gqr=r(bqe," \u2014 "),VK=n(bqe,"A",{href:!0});var f$t=s(VK);Oqr=r(f$t,"FlaxBigBirdForSequenceClassification"),f$t.forEach(t),Vqr=r(bqe," (BigBird model)"),bqe.forEach(t),Xqr=i(qe),v0=n(qe,"LI",{});var vqe=s(v0);LCe=n(vqe,"STRONG",{});var m$t=s(LCe);zqr=r(m$t,"distilbert"),m$t.forEach(t),Wqr=r(vqe," \u2014 "),XK=n(vqe,"A",{href:!0});var g$t=s(XK);Qqr=r(g$t,"FlaxDistilBertForSequenceClassification"),g$t.forEach(t),Hqr=r(vqe," (DistilBERT model)"),vqe.forEach(t),Uqr=i(qe),F0=n(qe,"LI",{});var Fqe=s(F0);yCe=n(Fqe,"STRONG",{});var h$t=s(yCe);Jqr=r(h$t,"electra"),h$t.forEach(t),Yqr=r(Fqe," \u2014 "),zK=n(Fqe,"A",{href:!0});var p$t=s(zK);Kqr=r(p$t,"FlaxElectraForSequenceClassification"),p$t.forEach(t),Zqr=r(Fqe," (ELECTRA model)"),Fqe.forEach(t),ejr=i(qe),T0=n(qe,"LI",{});var Tqe=s(T0);xCe=n(Tqe,"STRONG",{});var _$t=s(xCe);ojr=r(_$t,"mbart"),_$t.forEach(t),rjr=r(Tqe," \u2014 "),WK=n(Tqe,"A",{href:!0});var u$t=s(WK);tjr=r(u$t,"FlaxMBartForSequenceClassification"),u$t.forEach(t),ajr=r(Tqe," (mBART model)"),Tqe.forEach(t),njr=i(qe),M0=n(qe,"LI",{});var Mqe=s(M0);$Ce=n(Mqe,"STRONG",{});var b$t=s($Ce);sjr=r(b$t,"roberta"),b$t.forEach(t),ljr=r(Mqe," \u2014 "),QK=n(Mqe,"A",{href:!0});var v$t=s(QK);ijr=r(v$t,"FlaxRobertaForSequenceClassification"),v$t.forEach(t),djr=r(Mqe," (RoBERTa model)"),Mqe.forEach(t),cjr=i(qe),E0=n(qe,"LI",{});var Eqe=s(E0);kCe=n(Eqe,"STRONG",{});var F$t=s(kCe);fjr=r(F$t,"roformer"),F$t.forEach(t),mjr=r(Eqe," \u2014 "),HK=n(Eqe,"A",{href:!0});var T$t=s(HK);gjr=r(T$t,"FlaxRoFormerForSequenceClassification"),T$t.forEach(t),hjr=r(Eqe," (RoFormer model)"),Eqe.forEach(t),pjr=i(qe),C0=n(qe,"LI",{});var Cqe=s(C0);SCe=n(Cqe,"STRONG",{});var M$t=s(SCe);_jr=r(M$t,"xlm-roberta"),M$t.forEach(t),ujr=r(Cqe," \u2014 "),UK=n(Cqe,"A",{href:!0});var E$t=s(UK);bjr=r(E$t,"FlaxXLMRobertaForSequenceClassification"),E$t.forEach(t),vjr=r(Cqe," (XLM-RoBERTa model)"),Cqe.forEach(t),qe.forEach(t),Fjr=i(Zl),T(w0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),WDe=i(f),Hc=n(f,"H2",{class:!0});var ZOe=s(Hc);A0=n(ZOe,"A",{id:!0,class:!0,href:!0});var C$t=s(A0);RCe=n(C$t,"SPAN",{});var w$t=s(RCe);T(px.$$.fragment,w$t),w$t.forEach(t),C$t.forEach(t),Tjr=i(ZOe),PCe=n(ZOe,"SPAN",{});var A$t=s(PCe);Mjr=r(A$t,"FlaxAutoModelForQuestionAnswering"),A$t.forEach(t),ZOe.forEach(t),QDe=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(_x.$$.fragment,ei),Ejr=i(ei),Uc=n(ei,"P",{});var Coe=s(Uc);Cjr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JK=n(Coe,"A",{href:!0});var L$t=s(JK);wjr=r(L$t,"from_pretrained()"),L$t.forEach(t),Ajr=r(Coe," class method or the "),YK=n(Coe,"A",{href:!0});var y$t=s(YK);Ljr=r(y$t,"from_config()"),y$t.forEach(t),yjr=r(Coe,` class
method.`),Coe.forEach(t),xjr=i(ei),ux=n(ei,"P",{});var eVe=s(ux);$jr=r(eVe,"This class cannot be instantiated directly using "),BCe=n(eVe,"CODE",{});var x$t=s(BCe);kjr=r(x$t,"__init__()"),x$t.forEach(t),Sjr=r(eVe," (throws an error)."),eVe.forEach(t),Rjr=i(ei),Qt=n(ei,"DIV",{class:!0});var w6=s(Qt);T(bx.$$.fragment,w6),Pjr=i(w6),ICe=n(w6,"P",{});var $$t=s(ICe);Bjr=r($$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$$t.forEach(t),Ijr=i(w6),Jc=n(w6,"P",{});var woe=s(Jc);Njr=r(woe,`Note:
Loading a model from its configuration file does `),NCe=n(woe,"STRONG",{});var k$t=s(NCe);qjr=r(k$t,"not"),k$t.forEach(t),jjr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(woe,"A",{href:!0});var S$t=s(KK);Djr=r(S$t,"from_pretrained()"),S$t.forEach(t),Gjr=r(woe," to load the model weights."),woe.forEach(t),Ojr=i(w6),T(L0.$$.fragment,w6),w6.forEach(t),Vjr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(vx.$$.fragment,oi),Xjr=i(oi),qCe=n(oi,"P",{});var R$t=s(qCe);zjr=r(R$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R$t.forEach(t),Wjr=i(oi),Fn=n(oi,"P",{});var A6=s(Fn);Qjr=r(A6,"The model class to instantiate is selected based on the "),jCe=n(A6,"CODE",{});var P$t=s(jCe);Hjr=r(P$t,"model_type"),P$t.forEach(t),Ujr=r(A6,` property of the config object (either
passed as an argument or loaded from `),DCe=n(A6,"CODE",{});var B$t=s(DCe);Jjr=r(B$t,"pretrained_model_name_or_path"),B$t.forEach(t),Yjr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GCe=n(A6,"CODE",{});var I$t=s(GCe);Kjr=r(I$t,"pretrained_model_name_or_path"),I$t.forEach(t),Zjr=r(A6,":"),A6.forEach(t),eDr=i(oi),ke=n(oi,"UL",{});var je=s(ke);y0=n(je,"LI",{});var wqe=s(y0);OCe=n(wqe,"STRONG",{});var N$t=s(OCe);oDr=r(N$t,"albert"),N$t.forEach(t),rDr=r(wqe," \u2014 "),ZK=n(wqe,"A",{href:!0});var q$t=s(ZK);tDr=r(q$t,"FlaxAlbertForQuestionAnswering"),q$t.forEach(t),aDr=r(wqe," (ALBERT model)"),wqe.forEach(t),nDr=i(je),x0=n(je,"LI",{});var Aqe=s(x0);VCe=n(Aqe,"STRONG",{});var j$t=s(VCe);sDr=r(j$t,"bart"),j$t.forEach(t),lDr=r(Aqe," \u2014 "),eZ=n(Aqe,"A",{href:!0});var D$t=s(eZ);iDr=r(D$t,"FlaxBartForQuestionAnswering"),D$t.forEach(t),dDr=r(Aqe," (BART model)"),Aqe.forEach(t),cDr=i(je),$0=n(je,"LI",{});var Lqe=s($0);XCe=n(Lqe,"STRONG",{});var G$t=s(XCe);fDr=r(G$t,"bert"),G$t.forEach(t),mDr=r(Lqe," \u2014 "),oZ=n(Lqe,"A",{href:!0});var O$t=s(oZ);gDr=r(O$t,"FlaxBertForQuestionAnswering"),O$t.forEach(t),hDr=r(Lqe," (BERT model)"),Lqe.forEach(t),pDr=i(je),k0=n(je,"LI",{});var yqe=s(k0);zCe=n(yqe,"STRONG",{});var V$t=s(zCe);_Dr=r(V$t,"big_bird"),V$t.forEach(t),uDr=r(yqe," \u2014 "),rZ=n(yqe,"A",{href:!0});var X$t=s(rZ);bDr=r(X$t,"FlaxBigBirdForQuestionAnswering"),X$t.forEach(t),vDr=r(yqe," (BigBird model)"),yqe.forEach(t),FDr=i(je),S0=n(je,"LI",{});var xqe=s(S0);WCe=n(xqe,"STRONG",{});var z$t=s(WCe);TDr=r(z$t,"distilbert"),z$t.forEach(t),MDr=r(xqe," \u2014 "),tZ=n(xqe,"A",{href:!0});var W$t=s(tZ);EDr=r(W$t,"FlaxDistilBertForQuestionAnswering"),W$t.forEach(t),CDr=r(xqe," (DistilBERT model)"),xqe.forEach(t),wDr=i(je),R0=n(je,"LI",{});var $qe=s(R0);QCe=n($qe,"STRONG",{});var Q$t=s(QCe);ADr=r(Q$t,"electra"),Q$t.forEach(t),LDr=r($qe," \u2014 "),aZ=n($qe,"A",{href:!0});var H$t=s(aZ);yDr=r(H$t,"FlaxElectraForQuestionAnswering"),H$t.forEach(t),xDr=r($qe," (ELECTRA model)"),$qe.forEach(t),$Dr=i(je),P0=n(je,"LI",{});var kqe=s(P0);HCe=n(kqe,"STRONG",{});var U$t=s(HCe);kDr=r(U$t,"mbart"),U$t.forEach(t),SDr=r(kqe," \u2014 "),nZ=n(kqe,"A",{href:!0});var J$t=s(nZ);RDr=r(J$t,"FlaxMBartForQuestionAnswering"),J$t.forEach(t),PDr=r(kqe," (mBART model)"),kqe.forEach(t),BDr=i(je),B0=n(je,"LI",{});var Sqe=s(B0);UCe=n(Sqe,"STRONG",{});var Y$t=s(UCe);IDr=r(Y$t,"roberta"),Y$t.forEach(t),NDr=r(Sqe," \u2014 "),sZ=n(Sqe,"A",{href:!0});var K$t=s(sZ);qDr=r(K$t,"FlaxRobertaForQuestionAnswering"),K$t.forEach(t),jDr=r(Sqe," (RoBERTa model)"),Sqe.forEach(t),DDr=i(je),I0=n(je,"LI",{});var Rqe=s(I0);JCe=n(Rqe,"STRONG",{});var Z$t=s(JCe);GDr=r(Z$t,"roformer"),Z$t.forEach(t),ODr=r(Rqe," \u2014 "),lZ=n(Rqe,"A",{href:!0});var ekt=s(lZ);VDr=r(ekt,"FlaxRoFormerForQuestionAnswering"),ekt.forEach(t),XDr=r(Rqe," (RoFormer model)"),Rqe.forEach(t),zDr=i(je),N0=n(je,"LI",{});var Pqe=s(N0);YCe=n(Pqe,"STRONG",{});var okt=s(YCe);WDr=r(okt,"xlm-roberta"),okt.forEach(t),QDr=r(Pqe," \u2014 "),iZ=n(Pqe,"A",{href:!0});var rkt=s(iZ);HDr=r(rkt,"FlaxXLMRobertaForQuestionAnswering"),rkt.forEach(t),UDr=r(Pqe," (XLM-RoBERTa model)"),Pqe.forEach(t),je.forEach(t),JDr=i(oi),T(q0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),HDe=i(f),Yc=n(f,"H2",{class:!0});var oVe=s(Yc);j0=n(oVe,"A",{id:!0,class:!0,href:!0});var tkt=s(j0);KCe=n(tkt,"SPAN",{});var akt=s(KCe);T(Fx.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),YDr=i(oVe),ZCe=n(oVe,"SPAN",{});var nkt=s(ZCe);KDr=r(nkt,"FlaxAutoModelForTokenClassification"),nkt.forEach(t),oVe.forEach(t),UDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(Tx.$$.fragment,ri),ZDr=i(ri),Kc=n(ri,"P",{});var Aoe=s(Kc);eGr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dZ=n(Aoe,"A",{href:!0});var skt=s(dZ);oGr=r(skt,"from_pretrained()"),skt.forEach(t),rGr=r(Aoe," class method or the "),cZ=n(Aoe,"A",{href:!0});var lkt=s(cZ);tGr=r(lkt,"from_config()"),lkt.forEach(t),aGr=r(Aoe,` class
method.`),Aoe.forEach(t),nGr=i(ri),Mx=n(ri,"P",{});var rVe=s(Mx);sGr=r(rVe,"This class cannot be instantiated directly using "),e5e=n(rVe,"CODE",{});var ikt=s(e5e);lGr=r(ikt,"__init__()"),ikt.forEach(t),iGr=r(rVe," (throws an error)."),rVe.forEach(t),dGr=i(ri),Ht=n(ri,"DIV",{class:!0});var L6=s(Ht);T(Ex.$$.fragment,L6),cGr=i(L6),o5e=n(L6,"P",{});var dkt=s(o5e);fGr=r(dkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dkt.forEach(t),mGr=i(L6),Zc=n(L6,"P",{});var Loe=s(Zc);gGr=r(Loe,`Note:
Loading a model from its configuration file does `),r5e=n(Loe,"STRONG",{});var ckt=s(r5e);hGr=r(ckt,"not"),ckt.forEach(t),pGr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Loe,"A",{href:!0});var fkt=s(fZ);_Gr=r(fkt,"from_pretrained()"),fkt.forEach(t),uGr=r(Loe," to load the model weights."),Loe.forEach(t),bGr=i(L6),T(D0.$$.fragment,L6),L6.forEach(t),vGr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(Cx.$$.fragment,ti),FGr=i(ti),t5e=n(ti,"P",{});var mkt=s(t5e);TGr=r(mkt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mkt.forEach(t),MGr=i(ti),Tn=n(ti,"P",{});var y6=s(Tn);EGr=r(y6,"The model class to instantiate is selected based on the "),a5e=n(y6,"CODE",{});var gkt=s(a5e);CGr=r(gkt,"model_type"),gkt.forEach(t),wGr=r(y6,` property of the config object (either
passed as an argument or loaded from `),n5e=n(y6,"CODE",{});var hkt=s(n5e);AGr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),LGr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(y6,"CODE",{});var pkt=s(s5e);yGr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),xGr=r(y6,":"),y6.forEach(t),$Gr=i(ti),Ge=n(ti,"UL",{});var Fo=s(Ge);G0=n(Fo,"LI",{});var Bqe=s(G0);l5e=n(Bqe,"STRONG",{});var _kt=s(l5e);kGr=r(_kt,"albert"),_kt.forEach(t),SGr=r(Bqe," \u2014 "),mZ=n(Bqe,"A",{href:!0});var ukt=s(mZ);RGr=r(ukt,"FlaxAlbertForTokenClassification"),ukt.forEach(t),PGr=r(Bqe," (ALBERT model)"),Bqe.forEach(t),BGr=i(Fo),O0=n(Fo,"LI",{});var Iqe=s(O0);i5e=n(Iqe,"STRONG",{});var bkt=s(i5e);IGr=r(bkt,"bert"),bkt.forEach(t),NGr=r(Iqe," \u2014 "),gZ=n(Iqe,"A",{href:!0});var vkt=s(gZ);qGr=r(vkt,"FlaxBertForTokenClassification"),vkt.forEach(t),jGr=r(Iqe," (BERT model)"),Iqe.forEach(t),DGr=i(Fo),V0=n(Fo,"LI",{});var Nqe=s(V0);d5e=n(Nqe,"STRONG",{});var Fkt=s(d5e);GGr=r(Fkt,"big_bird"),Fkt.forEach(t),OGr=r(Nqe," \u2014 "),hZ=n(Nqe,"A",{href:!0});var Tkt=s(hZ);VGr=r(Tkt,"FlaxBigBirdForTokenClassification"),Tkt.forEach(t),XGr=r(Nqe," (BigBird model)"),Nqe.forEach(t),zGr=i(Fo),X0=n(Fo,"LI",{});var qqe=s(X0);c5e=n(qqe,"STRONG",{});var Mkt=s(c5e);WGr=r(Mkt,"distilbert"),Mkt.forEach(t),QGr=r(qqe," \u2014 "),pZ=n(qqe,"A",{href:!0});var Ekt=s(pZ);HGr=r(Ekt,"FlaxDistilBertForTokenClassification"),Ekt.forEach(t),UGr=r(qqe," (DistilBERT model)"),qqe.forEach(t),JGr=i(Fo),z0=n(Fo,"LI",{});var jqe=s(z0);f5e=n(jqe,"STRONG",{});var Ckt=s(f5e);YGr=r(Ckt,"electra"),Ckt.forEach(t),KGr=r(jqe," \u2014 "),_Z=n(jqe,"A",{href:!0});var wkt=s(_Z);ZGr=r(wkt,"FlaxElectraForTokenClassification"),wkt.forEach(t),eOr=r(jqe," (ELECTRA model)"),jqe.forEach(t),oOr=i(Fo),W0=n(Fo,"LI",{});var Dqe=s(W0);m5e=n(Dqe,"STRONG",{});var Akt=s(m5e);rOr=r(Akt,"roberta"),Akt.forEach(t),tOr=r(Dqe," \u2014 "),uZ=n(Dqe,"A",{href:!0});var Lkt=s(uZ);aOr=r(Lkt,"FlaxRobertaForTokenClassification"),Lkt.forEach(t),nOr=r(Dqe," (RoBERTa model)"),Dqe.forEach(t),sOr=i(Fo),Q0=n(Fo,"LI",{});var Gqe=s(Q0);g5e=n(Gqe,"STRONG",{});var ykt=s(g5e);lOr=r(ykt,"roformer"),ykt.forEach(t),iOr=r(Gqe," \u2014 "),bZ=n(Gqe,"A",{href:!0});var xkt=s(bZ);dOr=r(xkt,"FlaxRoFormerForTokenClassification"),xkt.forEach(t),cOr=r(Gqe," (RoFormer model)"),Gqe.forEach(t),fOr=i(Fo),H0=n(Fo,"LI",{});var Oqe=s(H0);h5e=n(Oqe,"STRONG",{});var $kt=s(h5e);mOr=r($kt,"xlm-roberta"),$kt.forEach(t),gOr=r(Oqe," \u2014 "),vZ=n(Oqe,"A",{href:!0});var kkt=s(vZ);hOr=r(kkt,"FlaxXLMRobertaForTokenClassification"),kkt.forEach(t),pOr=r(Oqe," (XLM-RoBERTa model)"),Oqe.forEach(t),Fo.forEach(t),_Or=i(ti),T(U0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),JDe=i(f),ef=n(f,"H2",{class:!0});var tVe=s(ef);J0=n(tVe,"A",{id:!0,class:!0,href:!0});var Skt=s(J0);p5e=n(Skt,"SPAN",{});var Rkt=s(p5e);T(wx.$$.fragment,Rkt),Rkt.forEach(t),Skt.forEach(t),uOr=i(tVe),_5e=n(tVe,"SPAN",{});var Pkt=s(_5e);bOr=r(Pkt,"FlaxAutoModelForMultipleChoice"),Pkt.forEach(t),tVe.forEach(t),YDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(Ax.$$.fragment,ai),vOr=i(ai),of=n(ai,"P",{});var yoe=s(of);FOr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FZ=n(yoe,"A",{href:!0});var Bkt=s(FZ);TOr=r(Bkt,"from_pretrained()"),Bkt.forEach(t),MOr=r(yoe," class method or the "),TZ=n(yoe,"A",{href:!0});var Ikt=s(TZ);EOr=r(Ikt,"from_config()"),Ikt.forEach(t),COr=r(yoe,` class
method.`),yoe.forEach(t),wOr=i(ai),Lx=n(ai,"P",{});var aVe=s(Lx);AOr=r(aVe,"This class cannot be instantiated directly using "),u5e=n(aVe,"CODE",{});var Nkt=s(u5e);LOr=r(Nkt,"__init__()"),Nkt.forEach(t),yOr=r(aVe," (throws an error)."),aVe.forEach(t),xOr=i(ai),Ut=n(ai,"DIV",{class:!0});var x6=s(Ut);T(yx.$$.fragment,x6),$Or=i(x6),b5e=n(x6,"P",{});var qkt=s(b5e);kOr=r(qkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qkt.forEach(t),SOr=i(x6),rf=n(x6,"P",{});var xoe=s(rf);ROr=r(xoe,`Note:
Loading a model from its configuration file does `),v5e=n(xoe,"STRONG",{});var jkt=s(v5e);POr=r(jkt,"not"),jkt.forEach(t),BOr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(xoe,"A",{href:!0});var Dkt=s(MZ);IOr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),NOr=r(xoe," to load the model weights."),xoe.forEach(t),qOr=i(x6),T(Y0.$$.fragment,x6),x6.forEach(t),jOr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(xx.$$.fragment,ni),DOr=i(ni),F5e=n(ni,"P",{});var Gkt=s(F5e);GOr=r(Gkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Gkt.forEach(t),OOr=i(ni),Mn=n(ni,"P",{});var $6=s(Mn);VOr=r($6,"The model class to instantiate is selected based on the "),T5e=n($6,"CODE",{});var Okt=s(T5e);XOr=r(Okt,"model_type"),Okt.forEach(t),zOr=r($6,` property of the config object (either
passed as an argument or loaded from `),M5e=n($6,"CODE",{});var Vkt=s(M5e);WOr=r(Vkt,"pretrained_model_name_or_path"),Vkt.forEach(t),QOr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n($6,"CODE",{});var Xkt=s(E5e);HOr=r(Xkt,"pretrained_model_name_or_path"),Xkt.forEach(t),UOr=r($6,":"),$6.forEach(t),JOr=i(ni),Oe=n(ni,"UL",{});var To=s(Oe);K0=n(To,"LI",{});var Vqe=s(K0);C5e=n(Vqe,"STRONG",{});var zkt=s(C5e);YOr=r(zkt,"albert"),zkt.forEach(t),KOr=r(Vqe," \u2014 "),EZ=n(Vqe,"A",{href:!0});var Wkt=s(EZ);ZOr=r(Wkt,"FlaxAlbertForMultipleChoice"),Wkt.forEach(t),eVr=r(Vqe," (ALBERT model)"),Vqe.forEach(t),oVr=i(To),Z0=n(To,"LI",{});var Xqe=s(Z0);w5e=n(Xqe,"STRONG",{});var Qkt=s(w5e);rVr=r(Qkt,"bert"),Qkt.forEach(t),tVr=r(Xqe," \u2014 "),CZ=n(Xqe,"A",{href:!0});var Hkt=s(CZ);aVr=r(Hkt,"FlaxBertForMultipleChoice"),Hkt.forEach(t),nVr=r(Xqe," (BERT model)"),Xqe.forEach(t),sVr=i(To),ew=n(To,"LI",{});var zqe=s(ew);A5e=n(zqe,"STRONG",{});var Ukt=s(A5e);lVr=r(Ukt,"big_bird"),Ukt.forEach(t),iVr=r(zqe," \u2014 "),wZ=n(zqe,"A",{href:!0});var Jkt=s(wZ);dVr=r(Jkt,"FlaxBigBirdForMultipleChoice"),Jkt.forEach(t),cVr=r(zqe," (BigBird model)"),zqe.forEach(t),fVr=i(To),ow=n(To,"LI",{});var Wqe=s(ow);L5e=n(Wqe,"STRONG",{});var Ykt=s(L5e);mVr=r(Ykt,"distilbert"),Ykt.forEach(t),gVr=r(Wqe," \u2014 "),AZ=n(Wqe,"A",{href:!0});var Kkt=s(AZ);hVr=r(Kkt,"FlaxDistilBertForMultipleChoice"),Kkt.forEach(t),pVr=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),_Vr=i(To),rw=n(To,"LI",{});var Qqe=s(rw);y5e=n(Qqe,"STRONG",{});var Zkt=s(y5e);uVr=r(Zkt,"electra"),Zkt.forEach(t),bVr=r(Qqe," \u2014 "),LZ=n(Qqe,"A",{href:!0});var eSt=s(LZ);vVr=r(eSt,"FlaxElectraForMultipleChoice"),eSt.forEach(t),FVr=r(Qqe," (ELECTRA model)"),Qqe.forEach(t),TVr=i(To),tw=n(To,"LI",{});var Hqe=s(tw);x5e=n(Hqe,"STRONG",{});var oSt=s(x5e);MVr=r(oSt,"roberta"),oSt.forEach(t),EVr=r(Hqe," \u2014 "),yZ=n(Hqe,"A",{href:!0});var rSt=s(yZ);CVr=r(rSt,"FlaxRobertaForMultipleChoice"),rSt.forEach(t),wVr=r(Hqe," (RoBERTa model)"),Hqe.forEach(t),AVr=i(To),aw=n(To,"LI",{});var Uqe=s(aw);$5e=n(Uqe,"STRONG",{});var tSt=s($5e);LVr=r(tSt,"roformer"),tSt.forEach(t),yVr=r(Uqe," \u2014 "),xZ=n(Uqe,"A",{href:!0});var aSt=s(xZ);xVr=r(aSt,"FlaxRoFormerForMultipleChoice"),aSt.forEach(t),$Vr=r(Uqe," (RoFormer model)"),Uqe.forEach(t),kVr=i(To),nw=n(To,"LI",{});var Jqe=s(nw);k5e=n(Jqe,"STRONG",{});var nSt=s(k5e);SVr=r(nSt,"xlm-roberta"),nSt.forEach(t),RVr=r(Jqe," \u2014 "),$Z=n(Jqe,"A",{href:!0});var sSt=s($Z);PVr=r(sSt,"FlaxXLMRobertaForMultipleChoice"),sSt.forEach(t),BVr=r(Jqe," (XLM-RoBERTa model)"),Jqe.forEach(t),To.forEach(t),IVr=i(ni),T(sw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),KDe=i(f),tf=n(f,"H2",{class:!0});var nVe=s(tf);lw=n(nVe,"A",{id:!0,class:!0,href:!0});var lSt=s(lw);S5e=n(lSt,"SPAN",{});var iSt=s(S5e);T($x.$$.fragment,iSt),iSt.forEach(t),lSt.forEach(t),NVr=i(nVe),R5e=n(nVe,"SPAN",{});var dSt=s(R5e);qVr=r(dSt,"FlaxAutoModelForNextSentencePrediction"),dSt.forEach(t),nVe.forEach(t),ZDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(kx.$$.fragment,si),jVr=i(si),af=n(si,"P",{});var $oe=s(af);DVr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=n($oe,"A",{href:!0});var cSt=s(kZ);GVr=r(cSt,"from_pretrained()"),cSt.forEach(t),OVr=r($oe," class method or the "),SZ=n($oe,"A",{href:!0});var fSt=s(SZ);VVr=r(fSt,"from_config()"),fSt.forEach(t),XVr=r($oe,` class
method.`),$oe.forEach(t),zVr=i(si),Sx=n(si,"P",{});var sVe=s(Sx);WVr=r(sVe,"This class cannot be instantiated directly using "),P5e=n(sVe,"CODE",{});var mSt=s(P5e);QVr=r(mSt,"__init__()"),mSt.forEach(t),HVr=r(sVe," (throws an error)."),sVe.forEach(t),UVr=i(si),Jt=n(si,"DIV",{class:!0});var k6=s(Jt);T(Rx.$$.fragment,k6),JVr=i(k6),B5e=n(k6,"P",{});var gSt=s(B5e);YVr=r(gSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gSt.forEach(t),KVr=i(k6),nf=n(k6,"P",{});var koe=s(nf);ZVr=r(koe,`Note:
Loading a model from its configuration file does `),I5e=n(koe,"STRONG",{});var hSt=s(I5e);eXr=r(hSt,"not"),hSt.forEach(t),oXr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(koe,"A",{href:!0});var pSt=s(RZ);rXr=r(pSt,"from_pretrained()"),pSt.forEach(t),tXr=r(koe," to load the model weights."),koe.forEach(t),aXr=i(k6),T(iw.$$.fragment,k6),k6.forEach(t),nXr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Px.$$.fragment,li),sXr=i(li),N5e=n(li,"P",{});var _St=s(N5e);lXr=r(_St,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_St.forEach(t),iXr=i(li),En=n(li,"P",{});var S6=s(En);dXr=r(S6,"The model class to instantiate is selected based on the "),q5e=n(S6,"CODE",{});var uSt=s(q5e);cXr=r(uSt,"model_type"),uSt.forEach(t),fXr=r(S6,` property of the config object (either
passed as an argument or loaded from `),j5e=n(S6,"CODE",{});var bSt=s(j5e);mXr=r(bSt,"pretrained_model_name_or_path"),bSt.forEach(t),gXr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(S6,"CODE",{});var vSt=s(D5e);hXr=r(vSt,"pretrained_model_name_or_path"),vSt.forEach(t),pXr=r(S6,":"),S6.forEach(t),_Xr=i(li),G5e=n(li,"UL",{});var FSt=s(G5e);dw=n(FSt,"LI",{});var Yqe=s(dw);O5e=n(Yqe,"STRONG",{});var TSt=s(O5e);uXr=r(TSt,"bert"),TSt.forEach(t),bXr=r(Yqe," \u2014 "),PZ=n(Yqe,"A",{href:!0});var MSt=s(PZ);vXr=r(MSt,"FlaxBertForNextSentencePrediction"),MSt.forEach(t),FXr=r(Yqe," (BERT model)"),Yqe.forEach(t),FSt.forEach(t),TXr=i(li),T(cw.$$.fragment,li),li.forEach(t),si.forEach(t),eGe=i(f),sf=n(f,"H2",{class:!0});var lVe=s(sf);fw=n(lVe,"A",{id:!0,class:!0,href:!0});var ESt=s(fw);V5e=n(ESt,"SPAN",{});var CSt=s(V5e);T(Bx.$$.fragment,CSt),CSt.forEach(t),ESt.forEach(t),MXr=i(lVe),X5e=n(lVe,"SPAN",{});var wSt=s(X5e);EXr=r(wSt,"FlaxAutoModelForImageClassification"),wSt.forEach(t),lVe.forEach(t),oGe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Ix.$$.fragment,ii),CXr=i(ii),lf=n(ii,"P",{});var Soe=s(lf);wXr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BZ=n(Soe,"A",{href:!0});var ASt=s(BZ);AXr=r(ASt,"from_pretrained()"),ASt.forEach(t),LXr=r(Soe," class method or the "),IZ=n(Soe,"A",{href:!0});var LSt=s(IZ);yXr=r(LSt,"from_config()"),LSt.forEach(t),xXr=r(Soe,` class
method.`),Soe.forEach(t),$Xr=i(ii),Nx=n(ii,"P",{});var iVe=s(Nx);kXr=r(iVe,"This class cannot be instantiated directly using "),z5e=n(iVe,"CODE",{});var ySt=s(z5e);SXr=r(ySt,"__init__()"),ySt.forEach(t),RXr=r(iVe," (throws an error)."),iVe.forEach(t),PXr=i(ii),Yt=n(ii,"DIV",{class:!0});var R6=s(Yt);T(qx.$$.fragment,R6),BXr=i(R6),W5e=n(R6,"P",{});var xSt=s(W5e);IXr=r(xSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xSt.forEach(t),NXr=i(R6),df=n(R6,"P",{});var Roe=s(df);qXr=r(Roe,`Note:
Loading a model from its configuration file does `),Q5e=n(Roe,"STRONG",{});var $St=s(Q5e);jXr=r($St,"not"),$St.forEach(t),DXr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(Roe,"A",{href:!0});var kSt=s(NZ);GXr=r(kSt,"from_pretrained()"),kSt.forEach(t),OXr=r(Roe," to load the model weights."),Roe.forEach(t),VXr=i(R6),T(mw.$$.fragment,R6),R6.forEach(t),XXr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(jx.$$.fragment,di),zXr=i(di),H5e=n(di,"P",{});var SSt=s(H5e);WXr=r(SSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SSt.forEach(t),QXr=i(di),Cn=n(di,"P",{});var P6=s(Cn);HXr=r(P6,"The model class to instantiate is selected based on the "),U5e=n(P6,"CODE",{});var RSt=s(U5e);UXr=r(RSt,"model_type"),RSt.forEach(t),JXr=r(P6,` property of the config object (either
passed as an argument or loaded from `),J5e=n(P6,"CODE",{});var PSt=s(J5e);YXr=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),KXr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(P6,"CODE",{});var BSt=s(Y5e);ZXr=r(BSt,"pretrained_model_name_or_path"),BSt.forEach(t),ezr=r(P6,":"),P6.forEach(t),ozr=i(di),Dx=n(di,"UL",{});var dVe=s(Dx);gw=n(dVe,"LI",{});var Kqe=s(gw);K5e=n(Kqe,"STRONG",{});var ISt=s(K5e);rzr=r(ISt,"beit"),ISt.forEach(t),tzr=r(Kqe," \u2014 "),qZ=n(Kqe,"A",{href:!0});var NSt=s(qZ);azr=r(NSt,"FlaxBeitForImageClassification"),NSt.forEach(t),nzr=r(Kqe," (BEiT model)"),Kqe.forEach(t),szr=i(dVe),hw=n(dVe,"LI",{});var Zqe=s(hw);Z5e=n(Zqe,"STRONG",{});var qSt=s(Z5e);lzr=r(qSt,"vit"),qSt.forEach(t),izr=r(Zqe," \u2014 "),jZ=n(Zqe,"A",{href:!0});var jSt=s(jZ);dzr=r(jSt,"FlaxViTForImageClassification"),jSt.forEach(t),czr=r(Zqe," (ViT model)"),Zqe.forEach(t),dVe.forEach(t),fzr=i(di),T(pw.$$.fragment,di),di.forEach(t),ii.forEach(t),rGe=i(f),cf=n(f,"H2",{class:!0});var cVe=s(cf);_w=n(cVe,"A",{id:!0,class:!0,href:!0});var DSt=s(_w);e3e=n(DSt,"SPAN",{});var GSt=s(e3e);T(Gx.$$.fragment,GSt),GSt.forEach(t),DSt.forEach(t),mzr=i(cVe),o3e=n(cVe,"SPAN",{});var OSt=s(o3e);gzr=r(OSt,"FlaxAutoModelForVision2Seq"),OSt.forEach(t),cVe.forEach(t),tGe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T(Ox.$$.fragment,ci),hzr=i(ci),ff=n(ci,"P",{});var Poe=s(ff);pzr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=n(Poe,"A",{href:!0});var VSt=s(DZ);_zr=r(VSt,"from_pretrained()"),VSt.forEach(t),uzr=r(Poe," class method or the "),GZ=n(Poe,"A",{href:!0});var XSt=s(GZ);bzr=r(XSt,"from_config()"),XSt.forEach(t),vzr=r(Poe,` class
method.`),Poe.forEach(t),Fzr=i(ci),Vx=n(ci,"P",{});var fVe=s(Vx);Tzr=r(fVe,"This class cannot be instantiated directly using "),r3e=n(fVe,"CODE",{});var zSt=s(r3e);Mzr=r(zSt,"__init__()"),zSt.forEach(t),Ezr=r(fVe," (throws an error)."),fVe.forEach(t),Czr=i(ci),Kt=n(ci,"DIV",{class:!0});var B6=s(Kt);T(Xx.$$.fragment,B6),wzr=i(B6),t3e=n(B6,"P",{});var WSt=s(t3e);Azr=r(WSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WSt.forEach(t),Lzr=i(B6),mf=n(B6,"P",{});var Boe=s(mf);yzr=r(Boe,`Note:
Loading a model from its configuration file does `),a3e=n(Boe,"STRONG",{});var QSt=s(a3e);xzr=r(QSt,"not"),QSt.forEach(t),$zr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Boe,"A",{href:!0});var HSt=s(OZ);kzr=r(HSt,"from_pretrained()"),HSt.forEach(t),Szr=r(Boe," to load the model weights."),Boe.forEach(t),Rzr=i(B6),T(uw.$$.fragment,B6),B6.forEach(t),Pzr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(zx.$$.fragment,fi),Bzr=i(fi),n3e=n(fi,"P",{});var USt=s(n3e);Izr=r(USt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),USt.forEach(t),Nzr=i(fi),wn=n(fi,"P",{});var I6=s(wn);qzr=r(I6,"The model class to instantiate is selected based on the "),s3e=n(I6,"CODE",{});var JSt=s(s3e);jzr=r(JSt,"model_type"),JSt.forEach(t),Dzr=r(I6,` property of the config object (either
passed as an argument or loaded from `),l3e=n(I6,"CODE",{});var YSt=s(l3e);Gzr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),Ozr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(I6,"CODE",{});var KSt=s(i3e);Vzr=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),Xzr=r(I6,":"),I6.forEach(t),zzr=i(fi),d3e=n(fi,"UL",{});var ZSt=s(d3e);bw=n(ZSt,"LI",{});var eje=s(bw);c3e=n(eje,"STRONG",{});var eRt=s(c3e);Wzr=r(eRt,"vision-encoder-decoder"),eRt.forEach(t),Qzr=r(eje," \u2014 "),VZ=n(eje,"A",{href:!0});var oRt=s(VZ);Hzr=r(oRt,"FlaxVisionEncoderDecoderModel"),oRt.forEach(t),Uzr=r(eje," (Vision Encoder decoder model)"),eje.forEach(t),ZSt.forEach(t),Jzr=i(fi),T(vw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(nBt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Ln,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(mk,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(gk,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertConfig"),c(hk,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartConfig"),c(pk,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitConfig"),c(_k,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertConfig"),c(uk,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(bk,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdConfig"),c(vk,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Fk,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Tk,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Mk,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomConfig"),c(Ek,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertConfig"),c(Ck,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineConfig"),c(wk,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPConfig"),c(Ak,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertConfig"),c(Lk,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextConfig"),c(yk,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLConfig"),c(xk,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtConfig"),c($k,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(kk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Sk,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Rk,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaConfig"),c(Pk,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Bk,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ik,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTConfig"),c(Nk,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrConfig"),c(qk,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertConfig"),c(jk,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRConfig"),c(Dk,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTConfig"),c(Gk,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraConfig"),c(Ok,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Vk,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Xk,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaConfig"),c(zk,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetConfig"),c(Wk,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTConfig"),c(Qk,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelConfig"),c(Hk,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNConfig"),c(Uk,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Config"),c(Jk,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Yk,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Kk,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJConfig"),c(Zk,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertConfig"),c(eS,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertConfig"),c(oS,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rS,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tS,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(aS,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(nS,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDConfig"),c(sS,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitConfig"),c(lS,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerConfig"),c(iS,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeConfig"),c(dS,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertConfig"),c(cS,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Config"),c(fS,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianConfig"),c(mS,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(gS,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartConfig"),c(hS,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(pS,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(_S,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetConfig"),c(uS,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Config"),c(bS,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(vS,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(FS,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTConfig"),c(TS,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusConfig"),c(MS,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ES,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartConfig"),c(CS,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(wS,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(AS,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(LS,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagConfig"),c(yS,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmConfig"),c(xS,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerConfig"),c($S,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetConfig"),c(kS,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertConfig"),c(SS,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetConfig"),c(RS,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertConfig"),c(PS,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaConfig"),c(BS,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerConfig"),c(IS,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerConfig"),c(NS,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWConfig"),c(qS,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDConfig"),c(jS,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(DS,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(GS,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(OS,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterConfig"),c(VS,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(XS,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinConfig"),c(zS,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Config"),c(WS,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasConfig"),c(QS,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(HS,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(US,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRConfig"),c(JS,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(YS,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(KS,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanConfig"),c(ZS,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltConfig"),c(eR,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(oR,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(rR,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(tR,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTConfig"),c(aR,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(nR,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(sR,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(lR,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMConfig"),c(iR,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMConfig"),c(dR,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMConfig"),c(cR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(fR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(mR,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(gR,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetConfig"),c(hR,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosConfig"),c(pR,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"id","transformers.AutoTokenizer"),c(yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(_R,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(uR,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(bR,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizer"),c(FR,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartTokenizerFast"),c(TR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizer"),c(MR,"href","/docs/transformers/pr_17474/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(ER,"href","/docs/transformers/pr_17474/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(CR,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(wR,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LR,"href","/docs/transformers/pr_17474/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(yR,"href","/docs/transformers/pr_17474/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(xR,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c($R,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(kR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(SR,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(RR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(BR,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(IR,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(NR,"href","/docs/transformers/pr_17474/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(qR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jR,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineTokenizer"),c(GR,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizer"),c(OR,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(VR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(XR,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizer"),c(WR,"href","/docs/transformers/pr_17474/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(QR,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(HR,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UR,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JR,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizer"),c(YR,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(eP,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(oP,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(tP,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(aP,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizer"),c(nP,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(sP,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(lP,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizer"),c(iP,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(dP,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(cP,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizer"),c(fP,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(mP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_P,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(uP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bP,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizer"),c(FP,"href","/docs/transformers/pr_17474/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(TP,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(EP,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(wP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(AP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(LP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(yP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(xP,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c($P,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(kP,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(SP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizer"),c(RP,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDTokenizerFast"),c(PP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizer"),c(BP,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(IP,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeTokenizer"),c(NP,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(qP,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(DP,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianTokenizer"),c(GP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizer"),c(OP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(VP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(XP,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(zP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(WP,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(QP,"href","/docs/transformers/pr_17474/en/model_doc/mluke#transformers.MLukeTokenizer"),c(HP,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(UP,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(JP,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(YP,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(KP,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(ZP,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(eB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(oB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(tB,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(aB,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(sB,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(lB,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(iB,"href","/docs/transformers/pr_17474/en/model_doc/phobert#transformers.PhobertTokenizer"),c(dB,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartTokenizer"),c(cB,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(fB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(mB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17474/en/model_doc/rag#transformers.RagTokenizer"),c(hB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizer"),c(pB,"href","/docs/transformers/pr_17474/en/model_doc/realm#transformers.RealmTokenizerFast"),c(_B,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizer"),c(uB,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(bB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizer"),c(vB,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(TB,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(MB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(EB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CB,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(wB,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(AB,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(LB,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(yB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizer"),c(xB,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c($B,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(kB,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(SB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Tokenizer"),c(RB,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5TokenizerFast"),c(PB,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasTokenizer"),c(BB,"href","/docs/transformers/pr_17474/en/model_doc/tapex#transformers.TapexTokenizer"),c(IB,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(NB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizer"),c(qB,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GB,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(OB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VB,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XB,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMTokenizer"),c(zB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(WB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(QB,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UB,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JB,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YB,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZB,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoFeatureExtractor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(eI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oI,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sI,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(pI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(_I,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($I,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoProcessor"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(kI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(SI,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPProcessor"),c(RI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(PI,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(BI,"href","/docs/transformers/pr_17474/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(II,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jI,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DI,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VI,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltProcessor"),c(XI,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QI,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoModel"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(HI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JI,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YI,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertModel"),c(KI,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartModel"),c(ZI,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitModel"),c(eN,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertModel"),c(oN,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rN,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdModel"),c(tN,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aN,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nN,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sN,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomModel"),c(lN,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertModel"),c(iN,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineModel"),c(dN,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.CLIPModel"),c(cN,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertModel"),c(fN,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextModel"),c(mN,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLModel"),c(gN,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtModel"),c(hN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(pN,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(_N,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(uN,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaModel"),c(bN,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(vN,"href","/docs/transformers/pr_17474/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(FN,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTModel"),c(TN,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrModel"),c(MN,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertModel"),c(EN,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(CN,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTModel"),c(wN,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraModel"),c(AN,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertModel"),c(LN,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaModel"),c(yN,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetModel"),c(xN,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTModel"),c($N,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelModel"),c(kN,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelBaseModel"),c(SN,"href","/docs/transformers/pr_17474/en/model_doc/glpn#transformers.GLPNModel"),c(RN,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2Model"),c(PN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(BN,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(IN,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJModel"),c(NN,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertModel"),c(qN,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertModel"),c(jN,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(DN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(GN,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(ON,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(VN,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDModel"),c(XN,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitModel"),c(zN,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerModel"),c(WN,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeModel"),c(QN,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertModel"),c(HN,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100Model"),c(UN,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianModel"),c(JN,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerModel"),c(YN,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartModel"),c(KN,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(ZN,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertModel"),c(eq,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetModel"),c(oq,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5Model"),c(rq,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerModel"),c(tq,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(aq,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTModel"),c(nq,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusModel"),c(sq,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverModel"),c(lq,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartModel"),c(iq,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dq,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cq,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fq,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModel"),c(mq,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetModel"),c(gq,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertModel"),c(hq,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetModel"),c(pq,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(_q,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaModel"),c(uq,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerModel"),c(bq,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerModel"),c(vq,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWModel"),c(Fq,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDModel"),c(Tq,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Mq,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterModel"),c(Eq,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Cq,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinModel"),c(wq,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5Model"),c(Aq,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasModel"),c(Lq,"href","/docs/transformers/pr_17474/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(yq,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(xq,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechModel"),c($q,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(kq,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanModel"),c(Sq,"href","/docs/transformers/pr_17474/en/model_doc/vilt#transformers.ViltModel"),c(Rq,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Pq,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Bq,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTModel"),c(Iq,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Nq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qq,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(jq,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMModel"),c(Dq,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMModel"),c(Gq,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMModel"),c(Oq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Vq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Xq,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(zq,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetModel"),c(Wq,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosModel"),c(Qq,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cu,"id","transformers.AutoModelForPreTraining"),c(cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cu,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(Hq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jq,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yq,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zq,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForPreTraining"),c(ej,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(oj,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(rj,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tj,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aj,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nj,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sj,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lj,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ij,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForPreTraining"),c(dj,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cj,"href","/docs/transformers/pr_17474/en/model_doc/flava#transformers.FlavaForPreTraining"),c(fj,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForPreTraining"),c(mj,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(hj,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pj,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uj,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bj,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(vj,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Fj,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Tj,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17474/en/model_doc/retribert#transformers.RetriBertModel"),c(Cj,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wj,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Aj,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xj,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c($j,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(kj,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Sj,"href","/docs/transformers/pr_17474/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Rj,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Pj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Bj,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Ij,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qj,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jj,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.AutoModelForCausalLM"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Dj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oj,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vj,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForCausalLM"),c(Xj,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertLMHeadModel"),c(zj,"href","/docs/transformers/pr_17474/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Wj,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Qj,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Hj,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Uj,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Jj,"href","/docs/transformers/pr_17474/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Yj,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Kj,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(eD,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForCausalLM"),c(oD,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rD,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(tD,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(aD,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(nD,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianForCausalLM"),c(sD,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForCausalLM"),c(lD,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(iD,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dD,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.OPTForCausalLM"),c(cD,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(fD,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(mD,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(gD,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(hD,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(pD,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(_D,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uD,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(bD,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(vD,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(FD,"href","/docs/transformers/pr_17474/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(TD,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(MD,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ED,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(CD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(wD,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(AD,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.AutoModelForMaskedLM"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(LD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xD,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($D,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(PD,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ND,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qD,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jD,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(GD,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(OD,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(VD,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(XD,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(WD,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(QD,"href","/docs/transformers/pr_17474/en/model_doc/luke#transformers.LukeForMaskedLM"),c(HD,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(JD,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(YD,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(KD,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(eG,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(rG,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(tG,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(aG,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(nG,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lG,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(iG,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(dG,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(cG,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForSeq2SeqLM"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(fG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(vG,"href","/docs/transformers/pr_17474/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(TG,"href","/docs/transformers/pr_17474/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.MarianMTModel"),c(EG,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CG,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17474/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xG,"href","/docs/transformers/pr_17474/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSequenceClassification"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c($G,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17474/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.AutoModelForMultipleChoice"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(AO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(JO,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(YO,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(KO,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(ZO,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(eV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(oV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(rV,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(tV,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForNextSentencePrediction"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(aV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(iV,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(dV,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(cV,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(fV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ib,"id","transformers.AutoModelForTokenClassification"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(mV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(bV,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForTokenClassification"),c(FV,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(MV,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(EV,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(CV,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(wV,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(AV,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(yV,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(xV,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c($V,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(kV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(SV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(RV,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(PV,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(BV,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(IV,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(NV,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(qV,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(jV,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(DV,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(GV,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(OV,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(VV,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(XV,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(zV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(WV,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(QV,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(HV,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForQuestionAnswering"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(UV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17474/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17474/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(mX,"href","/docs/transformers/pr_17474/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17474/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17474/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17474/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17474/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_17474/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17474/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c($X,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_17474/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(SX,"href","/docs/transformers/pr_17474/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(RX,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(PX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(NX,"href","/docs/transformers/pr_17474/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForTableQuestionAnswering"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(qX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForImageClassification"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForImageClassification"),c(WX,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(QX,"href","/docs/transformers/pr_17474/en/model_doc/cvt#transformers.CvtForImageClassification"),c(HX,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(UX,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassification"),c(JX,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(YX,"href","/docs/transformers/pr_17474/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(KX,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassification"),c(ZX,"href","/docs/transformers/pr_17474/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(ez,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(oz,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(rz,"href","/docs/transformers/pr_17474/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(tz,"href","/docs/transformers/pr_17474/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(az,"href","/docs/transformers/pr_17474/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(nz,"href","/docs/transformers/pr_17474/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(sz,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lz,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForImageClassification"),c(iz,"href","/docs/transformers/pr_17474/en/model_doc/van#transformers.VanForImageClassification"),c(dz,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForVision2Seq"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(cz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForAudioClassification"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bz,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vz,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Fz,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Cz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(wz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForAudioFrameClassification"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($z,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Sz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Rz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForCTC"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(qz,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.HubertForCTC"),c(jz,"href","/docs/transformers/pr_17474/en/model_doc/sew#transformers.SEWForCTC"),c(Dz,"href","/docs/transformers/pr_17474/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Gz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Oz,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Vz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Xz,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(zz,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17474/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Jz,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForAudioXVector"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(oW,"href","/docs/transformers/pr_17474/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(rW,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(tW,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(aW,"href","/docs/transformers/pr_17474/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForMaskedImageModeling"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(nW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17474/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(dW,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(cW,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForObjectDetection"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(fW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForObjectDetection"),c(pW,"href","/docs/transformers/pr_17474/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForImageSegmentation"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(_W,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17474/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForSemanticSegmentation"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(FW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(CW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(wW,"href","/docs/transformers/pr_17474/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(AW,"href","/docs/transformers/pr_17474/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForInstanceSegmentation"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(LW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17474/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.TFAutoModel"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(kW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertModel"),c(BW,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartModel"),c(IW,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertModel"),c(NW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(qW,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(jW,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertModel"),c(DW,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.TFCLIPModel"),c(GW,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertModel"),c(OW,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextModel"),c(VW,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLModel"),c(XW,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(zW,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaModel"),c(WW,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(QW,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(HW,"href","/docs/transformers/pr_17474/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(UW,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraModel"),c(JW,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(YW,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelModel"),c(KW,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(ZW,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eQ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJModel"),c(oQ,"href","/docs/transformers/pr_17474/en/model_doc/hubert#transformers.TFHubertModel"),c(rQ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(tQ,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDModel"),c(aQ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerModel"),c(nQ,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertModel"),c(sQ,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianModel"),c(lQ,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartModel"),c(iQ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(dQ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetModel"),c(cQ,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5Model"),c(fQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(mQ,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTModel"),c(gQ,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusModel"),c(hQ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertModel"),c(pQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaModel"),c(_Q,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerModel"),c(uQ,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(bQ,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinModel"),c(vQ,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5Model"),c(FQ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasModel"),c(TQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(MQ,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTModel"),c(EQ,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(CQ,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(wQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMModel"),c(AQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(LQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModelForPreTraining"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(SQ,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForPreTraining"),c(PQ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qQ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(DQ,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(GQ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17474/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(VQ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(XQ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17474/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(YQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(KQ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForCausalLM"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(eH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(aH,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(nH,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sH,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(lH,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(iH,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dH,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(cH,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(fH,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(mH,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(gH,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(hH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pH,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForImageClassification"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(_H,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17474/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(FH,"href","/docs/transformers/pr_17474/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(TH,"href","/docs/transformers/pr_17474/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(MH,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForMaskedLM"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(EH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(LH,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xH,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($H,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kH,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SH,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RH,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(PH,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BH,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IH,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(NH,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(qH,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DH,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GH,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OH,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VH,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XH,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zH,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForSeq2SeqLM"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(WH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JH,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YH,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KH,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZH,"href","/docs/transformers/pr_17474/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.TFMarianMTModel"),c(oU,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rU,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tU,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aU,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.TFAutoModelForSequenceClassification"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(nU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17474/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17474/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(LU,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xU,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($U,"href","/docs/transformers/pr_17474/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kU,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SU,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RU,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForMultipleChoice"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(PU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XU,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zU,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(WU,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(QU,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HU,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UU,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JU,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YU,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KU,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZU,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForNextSentencePrediction"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17474/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForTokenClassification"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(_J,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MJ,"href","/docs/transformers/pr_17474/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($J,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForQuestionAnswering"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17474/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_17474/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17474/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17474/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XJ,"href","/docs/transformers/pr_17474/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17474/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_17474/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17474/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_17474/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YJ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZJ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17474/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.TFAutoModelForVision2Seq"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(nY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_17474/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModel"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(dY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartModel"),c(hY,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitModel"),c(pY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertModel"),c(_Y,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(uY,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bY,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vY,"href","/docs/transformers/pr_17474/en/model_doc/clip#transformers.FlaxCLIPModel"),c(FY,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraModel"),c(MY,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EY,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CY,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wY,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianModel"),c(AY,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartModel"),c(LY,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yY,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTModel"),c(xY,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c($Y,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(kY,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(SY,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5Model"),c(RY,"href","/docs/transformers/pr_17474/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PY,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTModel"),c(BY,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(IY,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NY,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.FlaxAutoModelForCausalLM"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(qY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(OY,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(VY,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(XY,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(zY,"href","/docs/transformers/pr_17474/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WY,"href","/docs/transformers/pr_17474/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QY,"href","/docs/transformers/pr_17474/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(HY,"href","/docs/transformers/pr_17474/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(UY,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JY,"href","/docs/transformers/pr_17474/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForPreTraining"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(YY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dK,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17474/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForMaskedLM"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_K,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(FK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(TK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(wK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($K,"href","/docs/transformers/pr_17474/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kK,"href","/docs/transformers/pr_17474/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(SK,"href","/docs/transformers/pr_17474/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PK,"href","/docs/transformers/pr_17474/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BK,"href","/docs/transformers/pr_17474/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IK,"href","/docs/transformers/pr_17474/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GK,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OK,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VK,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XK,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zK,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(WK,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(QK,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HK,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UK,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(JK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eZ,"href","/docs/transformers/pr_17474/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17474/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j0,"id","transformers.FlaxAutoModelForTokenClassification"),c(j0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17474/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wZ,"href","/docs/transformers/pr_17474/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AZ,"href","/docs/transformers/pr_17474/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(LZ,"href","/docs/transformers/pr_17474/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yZ,"href","/docs/transformers/pr_17474/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xZ,"href","/docs/transformers/pr_17474/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($Z,"href","/docs/transformers/pr_17474/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(kZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PZ,"href","/docs/transformers/pr_17474/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForImageClassification"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(BZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qZ,"href","/docs/transformers/pr_17474/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jZ,"href","/docs/transformers/pr_17474/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForVision2Seq"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17474/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17474/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,rt,u),e(rt,gi),e(rt,hi),e(hi,N6),e(rt,uf),b(f,De,u),b(f,We,u),e(We,pi),e(We,Ln),e(Ln,q6),e(We,yn),e(We,xn),e(xn,j6),e(We,_i),e(We,$n),e($n,D6),e(We,ui),b(f,bf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,sk),e(Ae,bi),e(bi,lk),e(Ae,ik),b(f,Eo,u),b(f,wa,u),e(wa,dk),e(wa,vf),e(vf,ck),e(wa,mVe),b(f,oje,u),b(f,vi,u),e(vi,Ff),e(Ff,Ioe),M(G6,Ioe,null),e(vi,gVe),e(vi,Noe),e(Noe,hVe),b(f,rje,u),b(f,kn,u),e(kn,pVe),e(kn,qoe),e(qoe,_Ve),e(kn,uVe),e(kn,joe),e(joe,bVe),e(kn,vVe),b(f,tje,u),M(O6,f,u),b(f,aje,u),b(f,fk,u),e(fk,FVe),b(f,nje,u),M(Tf,f,u),b(f,sje,u),b(f,Fi,u),e(Fi,Mf),e(Mf,Doe),M(V6,Doe,null),e(Fi,TVe),e(Fi,Goe),e(Goe,MVe),b(f,lje,u),b(f,Co,u),M(X6,Co,null),e(Co,EVe),e(Co,z6),e(z6,CVe),e(z6,mk),e(mk,wVe),e(z6,AVe),e(Co,LVe),e(Co,W6),e(W6,yVe),e(W6,Ooe),e(Ooe,xVe),e(W6,$Ve),e(Co,kVe),e(Co,Er),M(Q6,Er,null),e(Er,SVe),e(Er,Voe),e(Voe,RVe),e(Er,PVe),e(Er,Ti),e(Ti,BVe),e(Ti,Xoe),e(Xoe,IVe),e(Ti,NVe),e(Ti,zoe),e(zoe,qVe),e(Ti,jVe),e(Er,DVe),e(Er,A),e(A,Ef),e(Ef,Woe),e(Woe,GVe),e(Ef,OVe),e(Ef,gk),e(gk,VVe),e(Ef,XVe),e(A,zVe),e(A,Cf),e(Cf,Qoe),e(Qoe,WVe),e(Cf,QVe),e(Cf,hk),e(hk,HVe),e(Cf,UVe),e(A,JVe),e(A,wf),e(wf,Hoe),e(Hoe,YVe),e(wf,KVe),e(wf,pk),e(pk,ZVe),e(wf,eXe),e(A,oXe),e(A,Af),e(Af,Uoe),e(Uoe,rXe),e(Af,tXe),e(Af,_k),e(_k,aXe),e(Af,nXe),e(A,sXe),e(A,Lf),e(Lf,Joe),e(Joe,lXe),e(Lf,iXe),e(Lf,uk),e(uk,dXe),e(Lf,cXe),e(A,fXe),e(A,yf),e(yf,Yoe),e(Yoe,mXe),e(yf,gXe),e(yf,bk),e(bk,hXe),e(yf,pXe),e(A,_Xe),e(A,xf),e(xf,Koe),e(Koe,uXe),e(xf,bXe),e(xf,vk),e(vk,vXe),e(xf,FXe),e(A,TXe),e(A,$f),e($f,Zoe),e(Zoe,MXe),e($f,EXe),e($f,Fk),e(Fk,CXe),e($f,wXe),e(A,AXe),e(A,kf),e(kf,ere),e(ere,LXe),e(kf,yXe),e(kf,Tk),e(Tk,xXe),e(kf,$Xe),e(A,kXe),e(A,Sf),e(Sf,ore),e(ore,SXe),e(Sf,RXe),e(Sf,Mk),e(Mk,PXe),e(Sf,BXe),e(A,IXe),e(A,Rf),e(Rf,rre),e(rre,NXe),e(Rf,qXe),e(Rf,Ek),e(Ek,jXe),e(Rf,DXe),e(A,GXe),e(A,Pf),e(Pf,tre),e(tre,OXe),e(Pf,VXe),e(Pf,Ck),e(Ck,XXe),e(Pf,zXe),e(A,WXe),e(A,Bf),e(Bf,are),e(are,QXe),e(Bf,HXe),e(Bf,wk),e(wk,UXe),e(Bf,JXe),e(A,YXe),e(A,If),e(If,nre),e(nre,KXe),e(If,ZXe),e(If,Ak),e(Ak,eze),e(If,oze),e(A,rze),e(A,Nf),e(Nf,sre),e(sre,tze),e(Nf,aze),e(Nf,Lk),e(Lk,nze),e(Nf,sze),e(A,lze),e(A,qf),e(qf,lre),e(lre,ize),e(qf,dze),e(qf,yk),e(yk,cze),e(qf,fze),e(A,mze),e(A,jf),e(jf,ire),e(ire,gze),e(jf,hze),e(jf,xk),e(xk,pze),e(jf,_ze),e(A,uze),e(A,Df),e(Df,dre),e(dre,bze),e(Df,vze),e(Df,$k),e($k,Fze),e(Df,Tze),e(A,Mze),e(A,Gf),e(Gf,cre),e(cre,Eze),e(Gf,Cze),e(Gf,kk),e(kk,wze),e(Gf,Aze),e(A,Lze),e(A,Of),e(Of,fre),e(fre,yze),e(Of,xze),e(Of,Sk),e(Sk,$ze),e(Of,kze),e(A,Sze),e(A,Vf),e(Vf,mre),e(mre,Rze),e(Vf,Pze),e(Vf,Rk),e(Rk,Bze),e(Vf,Ize),e(A,Nze),e(A,Xf),e(Xf,gre),e(gre,qze),e(Xf,jze),e(Xf,Pk),e(Pk,Dze),e(Xf,Gze),e(A,Oze),e(A,zf),e(zf,hre),e(hre,Vze),e(zf,Xze),e(zf,Bk),e(Bk,zze),e(zf,Wze),e(A,Qze),e(A,Wf),e(Wf,pre),e(pre,Hze),e(Wf,Uze),e(Wf,Ik),e(Ik,Jze),e(Wf,Yze),e(A,Kze),e(A,Qf),e(Qf,_re),e(_re,Zze),e(Qf,eWe),e(Qf,Nk),e(Nk,oWe),e(Qf,rWe),e(A,tWe),e(A,Hf),e(Hf,ure),e(ure,aWe),e(Hf,nWe),e(Hf,qk),e(qk,sWe),e(Hf,lWe),e(A,iWe),e(A,Uf),e(Uf,bre),e(bre,dWe),e(Uf,cWe),e(Uf,jk),e(jk,fWe),e(Uf,mWe),e(A,gWe),e(A,Jf),e(Jf,vre),e(vre,hWe),e(Jf,pWe),e(Jf,Dk),e(Dk,_We),e(Jf,uWe),e(A,bWe),e(A,Yf),e(Yf,Fre),e(Fre,vWe),e(Yf,FWe),e(Yf,Gk),e(Gk,TWe),e(Yf,MWe),e(A,EWe),e(A,Kf),e(Kf,Tre),e(Tre,CWe),e(Kf,wWe),e(Kf,Ok),e(Ok,AWe),e(Kf,LWe),e(A,yWe),e(A,Zf),e(Zf,Mre),e(Mre,xWe),e(Zf,$We),e(Zf,Vk),e(Vk,kWe),e(Zf,SWe),e(A,RWe),e(A,em),e(em,Ere),e(Ere,PWe),e(em,BWe),e(em,Xk),e(Xk,IWe),e(em,NWe),e(A,qWe),e(A,om),e(om,Cre),e(Cre,jWe),e(om,DWe),e(om,zk),e(zk,GWe),e(om,OWe),e(A,VWe),e(A,rm),e(rm,wre),e(wre,XWe),e(rm,zWe),e(rm,Wk),e(Wk,WWe),e(rm,QWe),e(A,HWe),e(A,tm),e(tm,Are),e(Are,UWe),e(tm,JWe),e(tm,Qk),e(Qk,YWe),e(tm,KWe),e(A,ZWe),e(A,am),e(am,Lre),e(Lre,eQe),e(am,oQe),e(am,Hk),e(Hk,rQe),e(am,tQe),e(A,aQe),e(A,nm),e(nm,yre),e(yre,nQe),e(nm,sQe),e(nm,Uk),e(Uk,lQe),e(nm,iQe),e(A,dQe),e(A,sm),e(sm,xre),e(xre,cQe),e(sm,fQe),e(sm,Jk),e(Jk,mQe),e(sm,gQe),e(A,hQe),e(A,lm),e(lm,$re),e($re,pQe),e(lm,_Qe),e(lm,Yk),e(Yk,uQe),e(lm,bQe),e(A,vQe),e(A,im),e(im,kre),e(kre,FQe),e(im,TQe),e(im,Kk),e(Kk,MQe),e(im,EQe),e(A,CQe),e(A,dm),e(dm,Sre),e(Sre,wQe),e(dm,AQe),e(dm,Zk),e(Zk,LQe),e(dm,yQe),e(A,xQe),e(A,cm),e(cm,Rre),e(Rre,$Qe),e(cm,kQe),e(cm,eS),e(eS,SQe),e(cm,RQe),e(A,PQe),e(A,fm),e(fm,Pre),e(Pre,BQe),e(fm,IQe),e(fm,oS),e(oS,NQe),e(fm,qQe),e(A,jQe),e(A,mm),e(mm,Bre),e(Bre,DQe),e(mm,GQe),e(mm,rS),e(rS,OQe),e(mm,VQe),e(A,XQe),e(A,gm),e(gm,Ire),e(Ire,zQe),e(gm,WQe),e(gm,tS),e(tS,QQe),e(gm,HQe),e(A,UQe),e(A,hm),e(hm,Nre),e(Nre,JQe),e(hm,YQe),e(hm,aS),e(aS,KQe),e(hm,ZQe),e(A,eHe),e(A,pm),e(pm,qre),e(qre,oHe),e(pm,rHe),e(pm,nS),e(nS,tHe),e(pm,aHe),e(A,nHe),e(A,_m),e(_m,jre),e(jre,sHe),e(_m,lHe),e(_m,sS),e(sS,iHe),e(_m,dHe),e(A,cHe),e(A,um),e(um,Dre),e(Dre,fHe),e(um,mHe),e(um,lS),e(lS,gHe),e(um,hHe),e(A,pHe),e(A,bm),e(bm,Gre),e(Gre,_He),e(bm,uHe),e(bm,iS),e(iS,bHe),e(bm,vHe),e(A,FHe),e(A,vm),e(vm,Ore),e(Ore,THe),e(vm,MHe),e(vm,dS),e(dS,EHe),e(vm,CHe),e(A,wHe),e(A,Fm),e(Fm,Vre),e(Vre,AHe),e(Fm,LHe),e(Fm,cS),e(cS,yHe),e(Fm,xHe),e(A,$He),e(A,Tm),e(Tm,Xre),e(Xre,kHe),e(Tm,SHe),e(Tm,fS),e(fS,RHe),e(Tm,PHe),e(A,BHe),e(A,Mm),e(Mm,zre),e(zre,IHe),e(Mm,NHe),e(Mm,mS),e(mS,qHe),e(Mm,jHe),e(A,DHe),e(A,Em),e(Em,Wre),e(Wre,GHe),e(Em,OHe),e(Em,gS),e(gS,VHe),e(Em,XHe),e(A,zHe),e(A,Cm),e(Cm,Qre),e(Qre,WHe),e(Cm,QHe),e(Cm,hS),e(hS,HHe),e(Cm,UHe),e(A,JHe),e(A,wm),e(wm,Hre),e(Hre,YHe),e(wm,KHe),e(wm,pS),e(pS,ZHe),e(wm,eUe),e(A,oUe),e(A,Am),e(Am,Ure),e(Ure,rUe),e(Am,tUe),e(Am,_S),e(_S,aUe),e(Am,nUe),e(A,sUe),e(A,Lm),e(Lm,Jre),e(Jre,lUe),e(Lm,iUe),e(Lm,uS),e(uS,dUe),e(Lm,cUe),e(A,fUe),e(A,ym),e(ym,Yre),e(Yre,mUe),e(ym,gUe),e(ym,bS),e(bS,hUe),e(ym,pUe),e(A,_Ue),e(A,xm),e(xm,Kre),e(Kre,uUe),e(xm,bUe),e(xm,vS),e(vS,vUe),e(xm,FUe),e(A,TUe),e(A,$m),e($m,Zre),e(Zre,MUe),e($m,EUe),e($m,FS),e(FS,CUe),e($m,wUe),e(A,AUe),e(A,km),e(km,ete),e(ete,LUe),e(km,yUe),e(km,TS),e(TS,xUe),e(km,$Ue),e(A,kUe),e(A,Sm),e(Sm,ote),e(ote,SUe),e(Sm,RUe),e(Sm,MS),e(MS,PUe),e(Sm,BUe),e(A,IUe),e(A,Rm),e(Rm,rte),e(rte,NUe),e(Rm,qUe),e(Rm,ES),e(ES,jUe),e(Rm,DUe),e(A,GUe),e(A,Pm),e(Pm,tte),e(tte,OUe),e(Pm,VUe),e(Pm,CS),e(CS,XUe),e(Pm,zUe),e(A,WUe),e(A,Bm),e(Bm,ate),e(ate,QUe),e(Bm,HUe),e(Bm,wS),e(wS,UUe),e(Bm,JUe),e(A,YUe),e(A,Im),e(Im,nte),e(nte,KUe),e(Im,ZUe),e(Im,AS),e(AS,eJe),e(Im,oJe),e(A,rJe),e(A,Nm),e(Nm,ste),e(ste,tJe),e(Nm,aJe),e(Nm,LS),e(LS,nJe),e(Nm,sJe),e(A,lJe),e(A,qm),e(qm,lte),e(lte,iJe),e(qm,dJe),e(qm,yS),e(yS,cJe),e(qm,fJe),e(A,mJe),e(A,jm),e(jm,ite),e(ite,gJe),e(jm,hJe),e(jm,xS),e(xS,pJe),e(jm,_Je),e(A,uJe),e(A,Dm),e(Dm,dte),e(dte,bJe),e(Dm,vJe),e(Dm,$S),e($S,FJe),e(Dm,TJe),e(A,MJe),e(A,Gm),e(Gm,cte),e(cte,EJe),e(Gm,CJe),e(Gm,kS),e(kS,wJe),e(Gm,AJe),e(A,LJe),e(A,Om),e(Om,fte),e(fte,yJe),e(Om,xJe),e(Om,SS),e(SS,$Je),e(Om,kJe),e(A,SJe),e(A,Vm),e(Vm,mte),e(mte,RJe),e(Vm,PJe),e(Vm,RS),e(RS,BJe),e(Vm,IJe),e(A,NJe),e(A,Xm),e(Xm,gte),e(gte,qJe),e(Xm,jJe),e(Xm,PS),e(PS,DJe),e(Xm,GJe),e(A,OJe),e(A,zm),e(zm,hte),e(hte,VJe),e(zm,XJe),e(zm,BS),e(BS,zJe),e(zm,WJe),e(A,QJe),e(A,Wm),e(Wm,pte),e(pte,HJe),e(Wm,UJe),e(Wm,IS),e(IS,JJe),e(Wm,YJe),e(A,KJe),e(A,Qm),e(Qm,_te),e(_te,ZJe),e(Qm,eYe),e(Qm,NS),e(NS,oYe),e(Qm,rYe),e(A,tYe),e(A,Hm),e(Hm,ute),e(ute,aYe),e(Hm,nYe),e(Hm,qS),e(qS,sYe),e(Hm,lYe),e(A,iYe),e(A,Um),e(Um,bte),e(bte,dYe),e(Um,cYe),e(Um,jS),e(jS,fYe),e(Um,mYe),e(A,gYe),e(A,Jm),e(Jm,vte),e(vte,hYe),e(Jm,pYe),e(Jm,DS),e(DS,_Ye),e(Jm,uYe),e(A,bYe),e(A,Ym),e(Ym,Fte),e(Fte,vYe),e(Ym,FYe),e(Ym,GS),e(GS,TYe),e(Ym,MYe),e(A,EYe),e(A,Km),e(Km,Tte),e(Tte,CYe),e(Km,wYe),e(Km,OS),e(OS,AYe),e(Km,LYe),e(A,yYe),e(A,Zm),e(Zm,Mte),e(Mte,xYe),e(Zm,$Ye),e(Zm,VS),e(VS,kYe),e(Zm,SYe),e(A,RYe),e(A,eg),e(eg,Ete),e(Ete,PYe),e(eg,BYe),e(eg,XS),e(XS,IYe),e(eg,NYe),e(A,qYe),e(A,og),e(og,Cte),e(Cte,jYe),e(og,DYe),e(og,zS),e(zS,GYe),e(og,OYe),e(A,VYe),e(A,rg),e(rg,wte),e(wte,XYe),e(rg,zYe),e(rg,WS),e(WS,WYe),e(rg,QYe),e(A,HYe),e(A,tg),e(tg,Ate),e(Ate,UYe),e(tg,JYe),e(tg,QS),e(QS,YYe),e(tg,KYe),e(A,ZYe),e(A,ag),e(ag,Lte),e(Lte,eKe),e(ag,oKe),e(ag,HS),e(HS,rKe),e(ag,tKe),e(A,aKe),e(A,ng),e(ng,yte),e(yte,nKe),e(ng,sKe),e(ng,US),e(US,lKe),e(ng,iKe),e(A,dKe),e(A,sg),e(sg,xte),e(xte,cKe),e(sg,fKe),e(sg,JS),e(JS,mKe),e(sg,gKe),e(A,hKe),e(A,lg),e(lg,$te),e($te,pKe),e(lg,_Ke),e(lg,YS),e(YS,uKe),e(lg,bKe),e(A,vKe),e(A,ig),e(ig,kte),e(kte,FKe),e(ig,TKe),e(ig,KS),e(KS,MKe),e(ig,EKe),e(A,CKe),e(A,dg),e(dg,Ste),e(Ste,wKe),e(dg,AKe),e(dg,ZS),e(ZS,LKe),e(dg,yKe),e(A,xKe),e(A,cg),e(cg,Rte),e(Rte,$Ke),e(cg,kKe),e(cg,eR),e(eR,SKe),e(cg,RKe),e(A,PKe),e(A,fg),e(fg,Pte),e(Pte,BKe),e(fg,IKe),e(fg,oR),e(oR,NKe),e(fg,qKe),e(A,jKe),e(A,mg),e(mg,Bte),e(Bte,DKe),e(mg,GKe),e(mg,rR),e(rR,OKe),e(mg,VKe),e(A,XKe),e(A,gg),e(gg,Ite),e(Ite,zKe),e(gg,WKe),e(gg,tR),e(tR,QKe),e(gg,HKe),e(A,UKe),e(A,hg),e(hg,Nte),e(Nte,JKe),e(hg,YKe),e(hg,aR),e(aR,KKe),e(hg,ZKe),e(A,eZe),e(A,pg),e(pg,qte),e(qte,oZe),e(pg,rZe),e(pg,nR),e(nR,tZe),e(pg,aZe),e(A,nZe),e(A,_g),e(_g,jte),e(jte,sZe),e(_g,lZe),e(_g,sR),e(sR,iZe),e(_g,dZe),e(A,cZe),e(A,ug),e(ug,Dte),e(Dte,fZe),e(ug,mZe),e(ug,lR),e(lR,gZe),e(ug,hZe),e(A,pZe),e(A,bg),e(bg,Gte),e(Gte,_Ze),e(bg,uZe),e(bg,iR),e(iR,bZe),e(bg,vZe),e(A,FZe),e(A,vg),e(vg,Ote),e(Ote,TZe),e(vg,MZe),e(vg,dR),e(dR,EZe),e(vg,CZe),e(A,wZe),e(A,Fg),e(Fg,Vte),e(Vte,AZe),e(Fg,LZe),e(Fg,cR),e(cR,yZe),e(Fg,xZe),e(A,$Ze),e(A,Tg),e(Tg,Xte),e(Xte,kZe),e(Tg,SZe),e(Tg,fR),e(fR,RZe),e(Tg,PZe),e(A,BZe),e(A,Mg),e(Mg,zte),e(zte,IZe),e(Mg,NZe),e(Mg,mR),e(mR,qZe),e(Mg,jZe),e(A,DZe),e(A,Eg),e(Eg,Wte),e(Wte,GZe),e(Eg,OZe),e(Eg,gR),e(gR,VZe),e(Eg,XZe),e(A,zZe),e(A,Cg),e(Cg,Qte),e(Qte,WZe),e(Cg,QZe),e(Cg,hR),e(hR,HZe),e(Cg,UZe),e(A,JZe),e(A,wg),e(wg,Hte),e(Hte,YZe),e(wg,KZe),e(wg,pR),e(pR,ZZe),e(wg,eeo),e(Er,oeo),M(Ag,Er,null),e(Co,reo),e(Co,Lg),M(H6,Lg,null),e(Lg,teo),e(Lg,Ute),e(Ute,aeo),b(f,ije,u),b(f,Mi,u),e(Mi,yg),e(yg,Jte),M(U6,Jte,null),e(Mi,neo),e(Mi,Yte),e(Yte,seo),b(f,dje,u),b(f,wo,u),M(J6,wo,null),e(wo,leo),e(wo,Y6),e(Y6,ieo),e(Y6,_R),e(_R,deo),e(Y6,ceo),e(wo,feo),e(wo,K6),e(K6,meo),e(K6,Kte),e(Kte,geo),e(K6,heo),e(wo,peo),e(wo,Cr),M(Z6,Cr,null),e(Cr,_eo),e(Cr,Zte),e(Zte,ueo),e(Cr,beo),e(Cr,Aa),e(Aa,veo),e(Aa,eae),e(eae,Feo),e(Aa,Teo),e(Aa,oae),e(oae,Meo),e(Aa,Eeo),e(Aa,rae),e(rae,Ceo),e(Aa,weo),e(Cr,Aeo),e(Cr,k),e(k,Sn),e(Sn,tae),e(tae,Leo),e(Sn,yeo),e(Sn,uR),e(uR,xeo),e(Sn,$eo),e(Sn,bR),e(bR,keo),e(Sn,Seo),e(k,Reo),e(k,Rn),e(Rn,aae),e(aae,Peo),e(Rn,Beo),e(Rn,vR),e(vR,Ieo),e(Rn,Neo),e(Rn,FR),e(FR,qeo),e(Rn,jeo),e(k,Deo),e(k,Pn),e(Pn,nae),e(nae,Geo),e(Pn,Oeo),e(Pn,TR),e(TR,Veo),e(Pn,Xeo),e(Pn,MR),e(MR,zeo),e(Pn,Weo),e(k,Qeo),e(k,xg),e(xg,sae),e(sae,Heo),e(xg,Ueo),e(xg,ER),e(ER,Jeo),e(xg,Yeo),e(k,Keo),e(k,Bn),e(Bn,lae),e(lae,Zeo),e(Bn,eoo),e(Bn,CR),e(CR,ooo),e(Bn,roo),e(Bn,wR),e(wR,too),e(Bn,aoo),e(k,noo),e(k,$g),e($g,iae),e(iae,soo),e($g,loo),e($g,AR),e(AR,ioo),e($g,doo),e(k,coo),e(k,kg),e(kg,dae),e(dae,foo),e(kg,moo),e(kg,LR),e(LR,goo),e(kg,hoo),e(k,poo),e(k,Sg),e(Sg,cae),e(cae,_oo),e(Sg,uoo),e(Sg,yR),e(yR,boo),e(Sg,voo),e(k,Foo),e(k,In),e(In,fae),e(fae,Too),e(In,Moo),e(In,xR),e(xR,Eoo),e(In,Coo),e(In,$R),e($R,woo),e(In,Aoo),e(k,Loo),e(k,Nn),e(Nn,mae),e(mae,yoo),e(Nn,xoo),e(Nn,kR),e(kR,$oo),e(Nn,koo),e(Nn,SR),e(SR,Soo),e(Nn,Roo),e(k,Poo),e(k,qn),e(qn,gae),e(gae,Boo),e(qn,Ioo),e(qn,RR),e(RR,Noo),e(qn,qoo),e(qn,PR),e(PR,joo),e(qn,Doo),e(k,Goo),e(k,Rg),e(Rg,hae),e(hae,Ooo),e(Rg,Voo),e(Rg,BR),e(BR,Xoo),e(Rg,zoo),e(k,Woo),e(k,Pg),e(Pg,pae),e(pae,Qoo),e(Pg,Hoo),e(Pg,IR),e(IR,Uoo),e(Pg,Joo),e(k,Yoo),e(k,Bg),e(Bg,_ae),e(_ae,Koo),e(Bg,Zoo),e(Bg,NR),e(NR,ero),e(Bg,oro),e(k,rro),e(k,jn),e(jn,uae),e(uae,tro),e(jn,aro),e(jn,qR),e(qR,nro),e(jn,sro),e(jn,jR),e(jR,lro),e(jn,iro),e(k,dro),e(k,Ig),e(Ig,bae),e(bae,cro),e(Ig,fro),e(Ig,DR),e(DR,mro),e(Ig,gro),e(k,hro),e(k,Dn),e(Dn,vae),e(vae,pro),e(Dn,_ro),e(Dn,GR),e(GR,uro),e(Dn,bro),e(Dn,OR),e(OR,vro),e(Dn,Fro),e(k,Tro),e(k,Gn),e(Gn,Fae),e(Fae,Mro),e(Gn,Ero),e(Gn,VR),e(VR,Cro),e(Gn,wro),e(Gn,XR),e(XR,Aro),e(Gn,Lro),e(k,yro),e(k,On),e(On,Tae),e(Tae,xro),e(On,$ro),e(On,zR),e(zR,kro),e(On,Sro),e(On,WR),e(WR,Rro),e(On,Pro),e(k,Bro),e(k,Ng),e(Ng,Mae),e(Mae,Iro),e(Ng,Nro),e(Ng,QR),e(QR,qro),e(Ng,jro),e(k,Dro),e(k,Vn),e(Vn,Eae),e(Eae,Gro),e(Vn,Oro),e(Vn,HR),e(HR,Vro),e(Vn,Xro),e(Vn,UR),e(UR,zro),e(Vn,Wro),e(k,Qro),e(k,Xn),e(Xn,Cae),e(Cae,Hro),e(Xn,Uro),e(Xn,JR),e(JR,Jro),e(Xn,Yro),e(Xn,YR),e(YR,Kro),e(Xn,Zro),e(k,eto),e(k,zn),e(zn,wae),e(wae,oto),e(zn,rto),e(zn,KR),e(KR,tto),e(zn,ato),e(zn,ZR),e(ZR,nto),e(zn,sto),e(k,lto),e(k,Wn),e(Wn,Aae),e(Aae,ito),e(Wn,dto),e(Wn,eP),e(eP,cto),e(Wn,fto),e(Wn,oP),e(oP,mto),e(Wn,gto),e(k,hto),e(k,Qn),e(Qn,Lae),e(Lae,pto),e(Qn,_to),e(Qn,rP),e(rP,uto),e(Qn,bto),e(Qn,tP),e(tP,vto),e(Qn,Fto),e(k,Tto),e(k,Hn),e(Hn,yae),e(yae,Mto),e(Hn,Eto),e(Hn,aP),e(aP,Cto),e(Hn,wto),e(Hn,nP),e(nP,Ato),e(Hn,Lto),e(k,yto),e(k,qg),e(qg,xae),e(xae,xto),e(qg,$to),e(qg,sP),e(sP,kto),e(qg,Sto),e(k,Rto),e(k,Un),e(Un,$ae),e($ae,Pto),e(Un,Bto),e(Un,lP),e(lP,Ito),e(Un,Nto),e(Un,iP),e(iP,qto),e(Un,jto),e(k,Dto),e(k,jg),e(jg,kae),e(kae,Gto),e(jg,Oto),e(jg,dP),e(dP,Vto),e(jg,Xto),e(k,zto),e(k,Jn),e(Jn,Sae),e(Sae,Wto),e(Jn,Qto),e(Jn,cP),e(cP,Hto),e(Jn,Uto),e(Jn,fP),e(fP,Jto),e(Jn,Yto),e(k,Kto),e(k,Yn),e(Yn,Rae),e(Rae,Zto),e(Yn,eao),e(Yn,mP),e(mP,oao),e(Yn,rao),e(Yn,gP),e(gP,tao),e(Yn,aao),e(k,nao),e(k,Kn),e(Kn,Pae),e(Pae,sao),e(Kn,lao),e(Kn,hP),e(hP,iao),e(Kn,dao),e(Kn,pP),e(pP,cao),e(Kn,fao),e(k,mao),e(k,Dg),e(Dg,Bae),e(Bae,gao),e(Dg,hao),e(Dg,_P),e(_P,pao),e(Dg,_ao),e(k,uao),e(k,Zn),e(Zn,Iae),e(Iae,bao),e(Zn,vao),e(Zn,uP),e(uP,Fao),e(Zn,Tao),e(Zn,bP),e(bP,Mao),e(Zn,Eao),e(k,Cao),e(k,es),e(es,Nae),e(Nae,wao),e(es,Aao),e(es,vP),e(vP,Lao),e(es,yao),e(es,FP),e(FP,xao),e(es,$ao),e(k,kao),e(k,Gg),e(Gg,qae),e(qae,Sao),e(Gg,Rao),e(Gg,TP),e(TP,Pao),e(Gg,Bao),e(k,Iao),e(k,os),e(os,jae),e(jae,Nao),e(os,qao),e(os,MP),e(MP,jao),e(os,Dao),e(os,EP),e(EP,Gao),e(os,Oao),e(k,Vao),e(k,rs),e(rs,Dae),e(Dae,Xao),e(rs,zao),e(rs,CP),e(CP,Wao),e(rs,Qao),e(rs,wP),e(wP,Hao),e(rs,Uao),e(k,Jao),e(k,ts),e(ts,Gae),e(Gae,Yao),e(ts,Kao),e(ts,AP),e(AP,Zao),e(ts,eno),e(ts,LP),e(LP,ono),e(ts,rno),e(k,tno),e(k,as),e(as,Oae),e(Oae,ano),e(as,nno),e(as,yP),e(yP,sno),e(as,lno),e(as,xP),e(xP,ino),e(as,dno),e(k,cno),e(k,ns),e(ns,Vae),e(Vae,fno),e(ns,mno),e(ns,$P),e($P,gno),e(ns,hno),e(ns,kP),e(kP,pno),e(ns,_no),e(k,uno),e(k,ss),e(ss,Xae),e(Xae,bno),e(ss,vno),e(ss,SP),e(SP,Fno),e(ss,Tno),e(ss,RP),e(RP,Mno),e(ss,Eno),e(k,Cno),e(k,ls),e(ls,zae),e(zae,wno),e(ls,Ano),e(ls,PP),e(PP,Lno),e(ls,yno),e(ls,BP),e(BP,xno),e(ls,$no),e(k,kno),e(k,Og),e(Og,Wae),e(Wae,Sno),e(Og,Rno),e(Og,IP),e(IP,Pno),e(Og,Bno),e(k,Ino),e(k,is),e(is,Qae),e(Qae,Nno),e(is,qno),e(is,NP),e(NP,jno),e(is,Dno),e(is,qP),e(qP,Gno),e(is,Ono),e(k,Vno),e(k,Vg),e(Vg,Hae),e(Hae,Xno),e(Vg,zno),e(Vg,jP),e(jP,Wno),e(Vg,Qno),e(k,Hno),e(k,Xg),e(Xg,Uae),e(Uae,Uno),e(Xg,Jno),e(Xg,DP),e(DP,Yno),e(Xg,Kno),e(k,Zno),e(k,ds),e(ds,Jae),e(Jae,eso),e(ds,oso),e(ds,GP),e(GP,rso),e(ds,tso),e(ds,OP),e(OP,aso),e(ds,nso),e(k,sso),e(k,cs),e(cs,Yae),e(Yae,lso),e(cs,iso),e(cs,VP),e(VP,dso),e(cs,cso),e(cs,XP),e(XP,fso),e(cs,mso),e(k,gso),e(k,fs),e(fs,Kae),e(Kae,hso),e(fs,pso),e(fs,zP),e(zP,_so),e(fs,uso),e(fs,WP),e(WP,bso),e(fs,vso),e(k,Fso),e(k,zg),e(zg,Zae),e(Zae,Tso),e(zg,Mso),e(zg,QP),e(QP,Eso),e(zg,Cso),e(k,wso),e(k,ms),e(ms,ene),e(ene,Aso),e(ms,Lso),e(ms,HP),e(HP,yso),e(ms,xso),e(ms,UP),e(UP,$so),e(ms,kso),e(k,Sso),e(k,gs),e(gs,one),e(one,Rso),e(gs,Pso),e(gs,JP),e(JP,Bso),e(gs,Iso),e(gs,YP),e(YP,Nso),e(gs,qso),e(k,jso),e(k,hs),e(hs,rne),e(rne,Dso),e(hs,Gso),e(hs,KP),e(KP,Oso),e(hs,Vso),e(hs,ZP),e(ZP,Xso),e(hs,zso),e(k,Wso),e(k,ps),e(ps,tne),e(tne,Qso),e(ps,Hso),e(ps,eB),e(eB,Uso),e(ps,Jso),e(ps,oB),e(oB,Yso),e(ps,Kso),e(k,Zso),e(k,_s),e(_s,ane),e(ane,elo),e(_s,olo),e(_s,rB),e(rB,rlo),e(_s,tlo),e(_s,tB),e(tB,alo),e(_s,nlo),e(k,slo),e(k,Wg),e(Wg,nne),e(nne,llo),e(Wg,ilo),e(Wg,aB),e(aB,dlo),e(Wg,clo),e(k,flo),e(k,us),e(us,sne),e(sne,mlo),e(us,glo),e(us,nB),e(nB,hlo),e(us,plo),e(us,sB),e(sB,_lo),e(us,ulo),e(k,blo),e(k,Qg),e(Qg,lne),e(lne,vlo),e(Qg,Flo),e(Qg,lB),e(lB,Tlo),e(Qg,Mlo),e(k,Elo),e(k,Hg),e(Hg,ine),e(ine,Clo),e(Hg,wlo),e(Hg,iB),e(iB,Alo),e(Hg,Llo),e(k,ylo),e(k,Ug),e(Ug,dne),e(dne,xlo),e(Ug,$lo),e(Ug,dB),e(dB,klo),e(Ug,Slo),e(k,Rlo),e(k,Jg),e(Jg,cne),e(cne,Plo),e(Jg,Blo),e(Jg,cB),e(cB,Ilo),e(Jg,Nlo),e(k,qlo),e(k,bs),e(bs,fne),e(fne,jlo),e(bs,Dlo),e(bs,fB),e(fB,Glo),e(bs,Olo),e(bs,mB),e(mB,Vlo),e(bs,Xlo),e(k,zlo),e(k,Yg),e(Yg,mne),e(mne,Wlo),e(Yg,Qlo),e(Yg,gB),e(gB,Hlo),e(Yg,Ulo),e(k,Jlo),e(k,vs),e(vs,gne),e(gne,Ylo),e(vs,Klo),e(vs,hB),e(hB,Zlo),e(vs,eio),e(vs,pB),e(pB,oio),e(vs,rio),e(k,tio),e(k,Fs),e(Fs,hne),e(hne,aio),e(Fs,nio),e(Fs,_B),e(_B,sio),e(Fs,lio),e(Fs,uB),e(uB,iio),e(Fs,dio),e(k,cio),e(k,Ts),e(Ts,pne),e(pne,fio),e(Ts,mio),e(Ts,bB),e(bB,gio),e(Ts,hio),e(Ts,vB),e(vB,pio),e(Ts,_io),e(k,uio),e(k,Ms),e(Ms,_ne),e(_ne,bio),e(Ms,vio),e(Ms,FB),e(FB,Fio),e(Ms,Tio),e(Ms,TB),e(TB,Mio),e(Ms,Eio),e(k,Cio),e(k,Es),e(Es,une),e(une,wio),e(Es,Aio),e(Es,MB),e(MB,Lio),e(Es,yio),e(Es,EB),e(EB,xio),e(Es,$io),e(k,kio),e(k,Cs),e(Cs,bne),e(bne,Sio),e(Cs,Rio),e(Cs,CB),e(CB,Pio),e(Cs,Bio),e(Cs,wB),e(wB,Iio),e(Cs,Nio),e(k,qio),e(k,Kg),e(Kg,vne),e(vne,jio),e(Kg,Dio),e(Kg,AB),e(AB,Gio),e(Kg,Oio),e(k,Vio),e(k,Zg),e(Zg,Fne),e(Fne,Xio),e(Zg,zio),e(Zg,LB),e(LB,Wio),e(Zg,Qio),e(k,Hio),e(k,ws),e(ws,Tne),e(Tne,Uio),e(ws,Jio),e(ws,yB),e(yB,Yio),e(ws,Kio),e(ws,xB),e(xB,Zio),e(ws,edo),e(k,odo),e(k,As),e(As,Mne),e(Mne,rdo),e(As,tdo),e(As,$B),e($B,ado),e(As,ndo),e(As,kB),e(kB,sdo),e(As,ldo),e(k,ido),e(k,Ls),e(Ls,Ene),e(Ene,ddo),e(Ls,cdo),e(Ls,SB),e(SB,fdo),e(Ls,mdo),e(Ls,RB),e(RB,gdo),e(Ls,hdo),e(k,pdo),e(k,eh),e(eh,Cne),e(Cne,_do),e(eh,udo),e(eh,PB),e(PB,bdo),e(eh,vdo),e(k,Fdo),e(k,oh),e(oh,wne),e(wne,Tdo),e(oh,Mdo),e(oh,BB),e(BB,Edo),e(oh,Cdo),e(k,wdo),e(k,rh),e(rh,Ane),e(Ane,Ado),e(rh,Ldo),e(rh,IB),e(IB,ydo),e(rh,xdo),e(k,$do),e(k,ys),e(ys,Lne),e(Lne,kdo),e(ys,Sdo),e(ys,NB),e(NB,Rdo),e(ys,Pdo),e(ys,qB),e(qB,Bdo),e(ys,Ido),e(k,Ndo),e(k,th),e(th,yne),e(yne,qdo),e(th,jdo),e(th,jB),e(jB,Ddo),e(th,Gdo),e(k,Odo),e(k,ah),e(ah,xne),e(xne,Vdo),e(ah,Xdo),e(ah,DB),e(DB,zdo),e(ah,Wdo),e(k,Qdo),e(k,nh),e(nh,$ne),e($ne,Hdo),e(nh,Udo),e(nh,GB),e(GB,Jdo),e(nh,Ydo),e(k,Kdo),e(k,xs),e(xs,kne),e(kne,Zdo),e(xs,eco),e(xs,OB),e(OB,oco),e(xs,rco),e(xs,VB),e(VB,tco),e(xs,aco),e(k,nco),e(k,sh),e(sh,Sne),e(Sne,sco),e(sh,lco),e(sh,XB),e(XB,ico),e(sh,dco),e(k,cco),e(k,lh),e(lh,Rne),e(Rne,fco),e(lh,mco),e(lh,zB),e(zB,gco),e(lh,hco),e(k,pco),e(k,$s),e($s,Pne),e(Pne,_co),e($s,uco),e($s,WB),e(WB,bco),e($s,vco),e($s,QB),e(QB,Fco),e($s,Tco),e(k,Mco),e(k,ks),e(ks,Bne),e(Bne,Eco),e(ks,Cco),e(ks,HB),e(HB,wco),e(ks,Aco),e(ks,UB),e(UB,Lco),e(ks,yco),e(k,xco),e(k,Ss),e(Ss,Ine),e(Ine,$co),e(Ss,kco),e(Ss,JB),e(JB,Sco),e(Ss,Rco),e(Ss,YB),e(YB,Pco),e(Ss,Bco),e(k,Ico),e(k,Rs),e(Rs,Nne),e(Nne,Nco),e(Rs,qco),e(Rs,KB),e(KB,jco),e(Rs,Dco),e(Rs,ZB),e(ZB,Gco),e(Rs,Oco),e(Cr,Vco),M(ih,Cr,null),e(wo,Xco),e(wo,dh),M(eL,dh,null),e(dh,zco),e(dh,qne),e(qne,Wco),b(f,cje,u),b(f,Ei,u),e(Ei,ch),e(ch,jne),M(oL,jne,null),e(Ei,Qco),e(Ei,Dne),e(Dne,Hco),b(f,fje,u),b(f,Ao,u),M(rL,Ao,null),e(Ao,Uco),e(Ao,tL),e(tL,Jco),e(tL,eI),e(eI,Yco),e(tL,Kco),e(Ao,Zco),e(Ao,aL),e(aL,efo),e(aL,Gne),e(Gne,ofo),e(aL,rfo),e(Ao,tfo),e(Ao,He),M(nL,He,null),e(He,afo),e(He,One),e(One,nfo),e(He,sfo),e(He,La),e(La,lfo),e(La,Vne),e(Vne,ifo),e(La,dfo),e(La,Xne),e(Xne,cfo),e(La,ffo),e(La,zne),e(zne,mfo),e(La,gfo),e(He,hfo),e(He,Y),e(Y,fh),e(fh,Wne),e(Wne,pfo),e(fh,_fo),e(fh,oI),e(oI,ufo),e(fh,bfo),e(Y,vfo),e(Y,mh),e(mh,Qne),e(Qne,Ffo),e(mh,Tfo),e(mh,rI),e(rI,Mfo),e(mh,Efo),e(Y,Cfo),e(Y,gh),e(gh,Hne),e(Hne,wfo),e(gh,Afo),e(gh,tI),e(tI,Lfo),e(gh,yfo),e(Y,xfo),e(Y,hh),e(hh,Une),e(Une,$fo),e(hh,kfo),e(hh,aI),e(aI,Sfo),e(hh,Rfo),e(Y,Pfo),e(Y,ph),e(ph,Jne),e(Jne,Bfo),e(ph,Ifo),e(ph,nI),e(nI,Nfo),e(ph,qfo),e(Y,jfo),e(Y,_h),e(_h,Yne),e(Yne,Dfo),e(_h,Gfo),e(_h,sI),e(sI,Ofo),e(_h,Vfo),e(Y,Xfo),e(Y,uh),e(uh,Kne),e(Kne,zfo),e(uh,Wfo),e(uh,lI),e(lI,Qfo),e(uh,Hfo),e(Y,Ufo),e(Y,bh),e(bh,Zne),e(Zne,Jfo),e(bh,Yfo),e(bh,iI),e(iI,Kfo),e(bh,Zfo),e(Y,emo),e(Y,vh),e(vh,ese),e(ese,omo),e(vh,rmo),e(vh,dI),e(dI,tmo),e(vh,amo),e(Y,nmo),e(Y,Fh),e(Fh,ose),e(ose,smo),e(Fh,lmo),e(Fh,cI),e(cI,imo),e(Fh,dmo),e(Y,cmo),e(Y,Th),e(Th,rse),e(rse,fmo),e(Th,mmo),e(Th,fI),e(fI,gmo),e(Th,hmo),e(Y,pmo),e(Y,Mh),e(Mh,tse),e(tse,_mo),e(Mh,umo),e(Mh,mI),e(mI,bmo),e(Mh,vmo),e(Y,Fmo),e(Y,Eh),e(Eh,ase),e(ase,Tmo),e(Eh,Mmo),e(Eh,gI),e(gI,Emo),e(Eh,Cmo),e(Y,wmo),e(Y,Ch),e(Ch,nse),e(nse,Amo),e(Ch,Lmo),e(Ch,hI),e(hI,ymo),e(Ch,xmo),e(Y,$mo),e(Y,wh),e(wh,sse),e(sse,kmo),e(wh,Smo),e(wh,pI),e(pI,Rmo),e(wh,Pmo),e(Y,Bmo),e(Y,Ah),e(Ah,lse),e(lse,Imo),e(Ah,Nmo),e(Ah,_I),e(_I,qmo),e(Ah,jmo),e(Y,Dmo),e(Y,Lh),e(Lh,ise),e(ise,Gmo),e(Lh,Omo),e(Lh,uI),e(uI,Vmo),e(Lh,Xmo),e(Y,zmo),e(Y,yh),e(yh,dse),e(dse,Wmo),e(yh,Qmo),e(yh,bI),e(bI,Hmo),e(yh,Umo),e(Y,Jmo),e(Y,xh),e(xh,cse),e(cse,Ymo),e(xh,Kmo),e(xh,vI),e(vI,Zmo),e(xh,ego),e(Y,ogo),e(Y,$h),e($h,fse),e(fse,rgo),e($h,tgo),e($h,FI),e(FI,ago),e($h,ngo),e(Y,sgo),e(Y,kh),e(kh,mse),e(mse,lgo),e(kh,igo),e(kh,TI),e(TI,dgo),e(kh,cgo),e(Y,fgo),e(Y,Sh),e(Sh,gse),e(gse,mgo),e(Sh,ggo),e(Sh,MI),e(MI,hgo),e(Sh,pgo),e(Y,_go),e(Y,Rh),e(Rh,hse),e(hse,ugo),e(Rh,bgo),e(Rh,EI),e(EI,vgo),e(Rh,Fgo),e(Y,Tgo),e(Y,Ph),e(Ph,pse),e(pse,Mgo),e(Ph,Ego),e(Ph,CI),e(CI,Cgo),e(Ph,wgo),e(Y,Ago),e(Y,Bh),e(Bh,_se),e(_se,Lgo),e(Bh,ygo),e(Bh,wI),e(wI,xgo),e(Bh,$go),e(Y,kgo),e(Y,Ih),e(Ih,use),e(use,Sgo),e(Ih,Rgo),e(Ih,AI),e(AI,Pgo),e(Ih,Bgo),e(Y,Igo),e(Y,Nh),e(Nh,bse),e(bse,Ngo),e(Nh,qgo),e(Nh,LI),e(LI,jgo),e(Nh,Dgo),e(Y,Ggo),e(Y,qh),e(qh,vse),e(vse,Ogo),e(qh,Vgo),e(qh,yI),e(yI,Xgo),e(qh,zgo),e(Y,Wgo),e(Y,jh),e(jh,Fse),e(Fse,Qgo),e(jh,Hgo),e(jh,xI),e(xI,Ugo),e(jh,Jgo),e(Y,Ygo),e(Y,Dh),e(Dh,Tse),e(Tse,Kgo),e(Dh,Zgo),e(Dh,$I),e($I,eho),e(Dh,oho),e(He,rho),M(Gh,He,null),e(He,tho),M(Oh,He,null),e(Ao,aho),e(Ao,Vh),M(sL,Vh,null),e(Vh,nho),e(Vh,Mse),e(Mse,sho),b(f,mje,u),b(f,Ci,u),e(Ci,Xh),e(Xh,Ese),M(lL,Ese,null),e(Ci,lho),e(Ci,Cse),e(Cse,iho),b(f,gje,u),b(f,Lo,u),M(iL,Lo,null),e(Lo,dho),e(Lo,dL),e(dL,cho),e(dL,kI),e(kI,fho),e(dL,mho),e(Lo,gho),e(Lo,cL),e(cL,hho),e(cL,wse),e(wse,pho),e(cL,_ho),e(Lo,uho),e(Lo,Ue),M(fL,Ue,null),e(Ue,bho),e(Ue,Ase),e(Ase,vho),e(Ue,Fho),e(Ue,wi),e(wi,Tho),e(wi,Lse),e(Lse,Mho),e(wi,Eho),e(wi,yse),e(yse,Cho),e(wi,who),e(Ue,Aho),e(Ue,he),e(he,zh),e(zh,xse),e(xse,Lho),e(zh,yho),e(zh,SI),e(SI,xho),e(zh,$ho),e(he,kho),e(he,Wh),e(Wh,$se),e($se,Sho),e(Wh,Rho),e(Wh,kse),e(kse,Pho),e(Wh,Bho),e(he,Iho),e(he,Qh),e(Qh,Sse),e(Sse,Nho),e(Qh,qho),e(Qh,RI),e(RI,jho),e(Qh,Dho),e(he,Gho),e(he,Hh),e(Hh,Rse),e(Rse,Oho),e(Hh,Vho),e(Hh,PI),e(PI,Xho),e(Hh,zho),e(he,Who),e(he,Uh),e(Uh,Pse),e(Pse,Qho),e(Uh,Hho),e(Uh,BI),e(BI,Uho),e(Uh,Jho),e(he,Yho),e(he,Jh),e(Jh,Bse),e(Bse,Kho),e(Jh,Zho),e(Jh,II),e(II,epo),e(Jh,opo),e(he,rpo),e(he,Yh),e(Yh,Ise),e(Ise,tpo),e(Yh,apo),e(Yh,NI),e(NI,npo),e(Yh,spo),e(he,lpo),e(he,Kh),e(Kh,Nse),e(Nse,ipo),e(Kh,dpo),e(Kh,qI),e(qI,cpo),e(Kh,fpo),e(he,mpo),e(he,Zh),e(Zh,qse),e(qse,gpo),e(Zh,hpo),e(Zh,jI),e(jI,ppo),e(Zh,_po),e(he,upo),e(he,ep),e(ep,jse),e(jse,bpo),e(ep,vpo),e(ep,DI),e(DI,Fpo),e(ep,Tpo),e(he,Mpo),e(he,op),e(op,Dse),e(Dse,Epo),e(op,Cpo),e(op,GI),e(GI,wpo),e(op,Apo),e(he,Lpo),e(he,rp),e(rp,Gse),e(Gse,ypo),e(rp,xpo),e(rp,OI),e(OI,$po),e(rp,kpo),e(he,Spo),e(he,tp),e(tp,Ose),e(Ose,Rpo),e(tp,Ppo),e(tp,VI),e(VI,Bpo),e(tp,Ipo),e(he,Npo),e(he,ap),e(ap,Vse),e(Vse,qpo),e(ap,jpo),e(ap,XI),e(XI,Dpo),e(ap,Gpo),e(he,Opo),e(he,np),e(np,Xse),e(Xse,Vpo),e(np,Xpo),e(np,zI),e(zI,zpo),e(np,Wpo),e(he,Qpo),e(he,sp),e(sp,zse),e(zse,Hpo),e(sp,Upo),e(sp,WI),e(WI,Jpo),e(sp,Ypo),e(he,Kpo),e(he,lp),e(lp,Wse),e(Wse,Zpo),e(lp,e_o),e(lp,QI),e(QI,o_o),e(lp,r_o),e(Ue,t_o),M(ip,Ue,null),e(Ue,a_o),M(dp,Ue,null),e(Lo,n_o),e(Lo,cp),M(mL,cp,null),e(cp,s_o),e(cp,Qse),e(Qse,l_o),b(f,hje,u),b(f,Ai,u),e(Ai,fp),e(fp,Hse),M(gL,Hse,null),e(Ai,i_o),e(Ai,Use),e(Use,d_o),b(f,pje,u),b(f,yo,u),M(hL,yo,null),e(yo,c_o),e(yo,Li),e(Li,f_o),e(Li,HI),e(HI,m_o),e(Li,g_o),e(Li,UI),e(UI,h_o),e(Li,p_o),e(yo,__o),e(yo,pL),e(pL,u_o),e(pL,Jse),e(Jse,b_o),e(pL,v_o),e(yo,F_o),e(yo,tt),M(_L,tt,null),e(tt,T_o),e(tt,Yse),e(Yse,M_o),e(tt,E_o),e(tt,yi),e(yi,C_o),e(yi,Kse),e(Kse,w_o),e(yi,A_o),e(yi,JI),e(JI,L_o),e(yi,y_o),e(tt,x_o),M(mp,tt,null),e(yo,$_o),e(yo,Je),M(uL,Je,null),e(Je,k_o),e(Je,Zse),e(Zse,S_o),e(Je,R_o),e(Je,ya),e(ya,P_o),e(ya,ele),e(ele,B_o),e(ya,I_o),e(ya,ole),e(ole,N_o),e(ya,q_o),e(ya,rle),e(rle,j_o),e(ya,D_o),e(Je,G_o),e(Je,x),e(x,gp),e(gp,tle),e(tle,O_o),e(gp,V_o),e(gp,YI),e(YI,X_o),e(gp,z_o),e(x,W_o),e(x,hp),e(hp,ale),e(ale,Q_o),e(hp,H_o),e(hp,KI),e(KI,U_o),e(hp,J_o),e(x,Y_o),e(x,pp),e(pp,nle),e(nle,K_o),e(pp,Z_o),e(pp,ZI),e(ZI,euo),e(pp,ouo),e(x,ruo),e(x,_p),e(_p,sle),e(sle,tuo),e(_p,auo),e(_p,eN),e(eN,nuo),e(_p,suo),e(x,luo),e(x,up),e(up,lle),e(lle,iuo),e(up,duo),e(up,oN),e(oN,cuo),e(up,fuo),e(x,muo),e(x,bp),e(bp,ile),e(ile,guo),e(bp,huo),e(bp,rN),e(rN,puo),e(bp,_uo),e(x,uuo),e(x,vp),e(vp,dle),e(dle,buo),e(vp,vuo),e(vp,tN),e(tN,Fuo),e(vp,Tuo),e(x,Muo),e(x,Fp),e(Fp,cle),e(cle,Euo),e(Fp,Cuo),e(Fp,aN),e(aN,wuo),e(Fp,Auo),e(x,Luo),e(x,Tp),e(Tp,fle),e(fle,yuo),e(Tp,xuo),e(Tp,nN),e(nN,$uo),e(Tp,kuo),e(x,Suo),e(x,Mp),e(Mp,mle),e(mle,Ruo),e(Mp,Puo),e(Mp,sN),e(sN,Buo),e(Mp,Iuo),e(x,Nuo),e(x,Ep),e(Ep,gle),e(gle,quo),e(Ep,juo),e(Ep,lN),e(lN,Duo),e(Ep,Guo),e(x,Ouo),e(x,Cp),e(Cp,hle),e(hle,Vuo),e(Cp,Xuo),e(Cp,iN),e(iN,zuo),e(Cp,Wuo),e(x,Quo),e(x,wp),e(wp,ple),e(ple,Huo),e(wp,Uuo),e(wp,dN),e(dN,Juo),e(wp,Yuo),e(x,Kuo),e(x,Ap),e(Ap,_le),e(_le,Zuo),e(Ap,e4o),e(Ap,cN),e(cN,o4o),e(Ap,r4o),e(x,t4o),e(x,Lp),e(Lp,ule),e(ule,a4o),e(Lp,n4o),e(Lp,fN),e(fN,s4o),e(Lp,l4o),e(x,i4o),e(x,yp),e(yp,ble),e(ble,d4o),e(yp,c4o),e(yp,mN),e(mN,f4o),e(yp,m4o),e(x,g4o),e(x,xp),e(xp,vle),e(vle,h4o),e(xp,p4o),e(xp,gN),e(gN,_4o),e(xp,u4o),e(x,b4o),e(x,$p),e($p,Fle),e(Fle,v4o),e($p,F4o),e($p,hN),e(hN,T4o),e($p,M4o),e(x,E4o),e(x,kp),e(kp,Tle),e(Tle,C4o),e(kp,w4o),e(kp,pN),e(pN,A4o),e(kp,L4o),e(x,y4o),e(x,Sp),e(Sp,Mle),e(Mle,x4o),e(Sp,$4o),e(Sp,_N),e(_N,k4o),e(Sp,S4o),e(x,R4o),e(x,Rp),e(Rp,Ele),e(Ele,P4o),e(Rp,B4o),e(Rp,uN),e(uN,I4o),e(Rp,N4o),e(x,q4o),e(x,Pp),e(Pp,Cle),e(Cle,j4o),e(Pp,D4o),e(Pp,bN),e(bN,G4o),e(Pp,O4o),e(x,V4o),e(x,Bp),e(Bp,wle),e(wle,X4o),e(Bp,z4o),e(Bp,vN),e(vN,W4o),e(Bp,Q4o),e(x,H4o),e(x,Ip),e(Ip,Ale),e(Ale,U4o),e(Ip,J4o),e(Ip,FN),e(FN,Y4o),e(Ip,K4o),e(x,Z4o),e(x,Np),e(Np,Lle),e(Lle,e1o),e(Np,o1o),e(Np,TN),e(TN,r1o),e(Np,t1o),e(x,a1o),e(x,qp),e(qp,yle),e(yle,n1o),e(qp,s1o),e(qp,MN),e(MN,l1o),e(qp,i1o),e(x,d1o),e(x,jp),e(jp,xle),e(xle,c1o),e(jp,f1o),e(jp,EN),e(EN,m1o),e(jp,g1o),e(x,h1o),e(x,Dp),e(Dp,$le),e($le,p1o),e(Dp,_1o),e(Dp,CN),e(CN,u1o),e(Dp,b1o),e(x,v1o),e(x,Gp),e(Gp,kle),e(kle,F1o),e(Gp,T1o),e(Gp,wN),e(wN,M1o),e(Gp,E1o),e(x,C1o),e(x,Op),e(Op,Sle),e(Sle,w1o),e(Op,A1o),e(Op,AN),e(AN,L1o),e(Op,y1o),e(x,x1o),e(x,Vp),e(Vp,Rle),e(Rle,$1o),e(Vp,k1o),e(Vp,LN),e(LN,S1o),e(Vp,R1o),e(x,P1o),e(x,Xp),e(Xp,Ple),e(Ple,B1o),e(Xp,I1o),e(Xp,yN),e(yN,N1o),e(Xp,q1o),e(x,j1o),e(x,zp),e(zp,Ble),e(Ble,D1o),e(zp,G1o),e(zp,xN),e(xN,O1o),e(zp,V1o),e(x,X1o),e(x,Ps),e(Ps,Ile),e(Ile,z1o),e(Ps,W1o),e(Ps,$N),e($N,Q1o),e(Ps,H1o),e(Ps,kN),e(kN,U1o),e(Ps,J1o),e(x,Y1o),e(x,Wp),e(Wp,Nle),e(Nle,K1o),e(Wp,Z1o),e(Wp,SN),e(SN,e7o),e(Wp,o7o),e(x,r7o),e(x,Qp),e(Qp,qle),e(qle,t7o),e(Qp,a7o),e(Qp,RN),e(RN,n7o),e(Qp,s7o),e(x,l7o),e(x,Hp),e(Hp,jle),e(jle,i7o),e(Hp,d7o),e(Hp,PN),e(PN,c7o),e(Hp,f7o),e(x,m7o),e(x,Up),e(Up,Dle),e(Dle,g7o),e(Up,h7o),e(Up,BN),e(BN,p7o),e(Up,_7o),e(x,u7o),e(x,Jp),e(Jp,Gle),e(Gle,b7o),e(Jp,v7o),e(Jp,IN),e(IN,F7o),e(Jp,T7o),e(x,M7o),e(x,Yp),e(Yp,Ole),e(Ole,E7o),e(Yp,C7o),e(Yp,NN),e(NN,w7o),e(Yp,A7o),e(x,L7o),e(x,Kp),e(Kp,Vle),e(Vle,y7o),e(Kp,x7o),e(Kp,qN),e(qN,$7o),e(Kp,k7o),e(x,S7o),e(x,Zp),e(Zp,Xle),e(Xle,R7o),e(Zp,P7o),e(Zp,jN),e(jN,B7o),e(Zp,I7o),e(x,N7o),e(x,e_),e(e_,zle),e(zle,q7o),e(e_,j7o),e(e_,DN),e(DN,D7o),e(e_,G7o),e(x,O7o),e(x,o_),e(o_,Wle),e(Wle,V7o),e(o_,X7o),e(o_,GN),e(GN,z7o),e(o_,W7o),e(x,Q7o),e(x,r_),e(r_,Qle),e(Qle,H7o),e(r_,U7o),e(r_,ON),e(ON,J7o),e(r_,Y7o),e(x,K7o),e(x,t_),e(t_,Hle),e(Hle,Z7o),e(t_,ebo),e(t_,VN),e(VN,obo),e(t_,rbo),e(x,tbo),e(x,a_),e(a_,Ule),e(Ule,abo),e(a_,nbo),e(a_,XN),e(XN,sbo),e(a_,lbo),e(x,ibo),e(x,n_),e(n_,Jle),e(Jle,dbo),e(n_,cbo),e(n_,zN),e(zN,fbo),e(n_,mbo),e(x,gbo),e(x,s_),e(s_,Yle),e(Yle,hbo),e(s_,pbo),e(s_,WN),e(WN,_bo),e(s_,ubo),e(x,bbo),e(x,l_),e(l_,Kle),e(Kle,vbo),e(l_,Fbo),e(l_,QN),e(QN,Tbo),e(l_,Mbo),e(x,Ebo),e(x,i_),e(i_,Zle),e(Zle,Cbo),e(i_,wbo),e(i_,HN),e(HN,Abo),e(i_,Lbo),e(x,ybo),e(x,d_),e(d_,eie),e(eie,xbo),e(d_,$bo),e(d_,UN),e(UN,kbo),e(d_,Sbo),e(x,Rbo),e(x,c_),e(c_,oie),e(oie,Pbo),e(c_,Bbo),e(c_,JN),e(JN,Ibo),e(c_,Nbo),e(x,qbo),e(x,f_),e(f_,rie),e(rie,jbo),e(f_,Dbo),e(f_,YN),e(YN,Gbo),e(f_,Obo),e(x,Vbo),e(x,m_),e(m_,tie),e(tie,Xbo),e(m_,zbo),e(m_,KN),e(KN,Wbo),e(m_,Qbo),e(x,Hbo),e(x,g_),e(g_,aie),e(aie,Ubo),e(g_,Jbo),e(g_,ZN),e(ZN,Ybo),e(g_,Kbo),e(x,Zbo),e(x,h_),e(h_,nie),e(nie,e2o),e(h_,o2o),e(h_,eq),e(eq,r2o),e(h_,t2o),e(x,a2o),e(x,p_),e(p_,sie),e(sie,n2o),e(p_,s2o),e(p_,oq),e(oq,l2o),e(p_,i2o),e(x,d2o),e(x,__),e(__,lie),e(lie,c2o),e(__,f2o),e(__,rq),e(rq,m2o),e(__,g2o),e(x,h2o),e(x,u_),e(u_,iie),e(iie,p2o),e(u_,_2o),e(u_,tq),e(tq,u2o),e(u_,b2o),e(x,v2o),e(x,b_),e(b_,die),e(die,F2o),e(b_,T2o),e(b_,aq),e(aq,M2o),e(b_,E2o),e(x,C2o),e(x,v_),e(v_,cie),e(cie,w2o),e(v_,A2o),e(v_,nq),e(nq,L2o),e(v_,y2o),e(x,x2o),e(x,F_),e(F_,fie),e(fie,$2o),e(F_,k2o),e(F_,sq),e(sq,S2o),e(F_,R2o),e(x,P2o),e(x,T_),e(T_,mie),e(mie,B2o),e(T_,I2o),e(T_,lq),e(lq,N2o),e(T_,q2o),e(x,j2o),e(x,M_),e(M_,gie),e(gie,D2o),e(M_,G2o),e(M_,iq),e(iq,O2o),e(M_,V2o),e(x,X2o),e(x,E_),e(E_,hie),e(hie,z2o),e(E_,W2o),e(E_,dq),e(dq,Q2o),e(E_,H2o),e(x,U2o),e(x,C_),e(C_,pie),e(pie,J2o),e(C_,Y2o),e(C_,cq),e(cq,K2o),e(C_,Z2o),e(x,evo),e(x,w_),e(w_,_ie),e(_ie,ovo),e(w_,rvo),e(w_,fq),e(fq,tvo),e(w_,avo),e(x,nvo),e(x,A_),e(A_,uie),e(uie,svo),e(A_,lvo),e(A_,mq),e(mq,ivo),e(A_,dvo),e(x,cvo),e(x,L_),e(L_,bie),e(bie,fvo),e(L_,mvo),e(L_,gq),e(gq,gvo),e(L_,hvo),e(x,pvo),e(x,y_),e(y_,vie),e(vie,_vo),e(y_,uvo),e(y_,hq),e(hq,bvo),e(y_,vvo),e(x,Fvo),e(x,x_),e(x_,Fie),e(Fie,Tvo),e(x_,Mvo),e(x_,pq),e(pq,Evo),e(x_,Cvo),e(x,wvo),e(x,$_),e($_,Tie),e(Tie,Avo),e($_,Lvo),e($_,_q),e(_q,yvo),e($_,xvo),e(x,$vo),e(x,k_),e(k_,Mie),e(Mie,kvo),e(k_,Svo),e(k_,uq),e(uq,Rvo),e(k_,Pvo),e(x,Bvo),e(x,S_),e(S_,Eie),e(Eie,Ivo),e(S_,Nvo),e(S_,bq),e(bq,qvo),e(S_,jvo),e(x,Dvo),e(x,R_),e(R_,Cie),e(Cie,Gvo),e(R_,Ovo),e(R_,vq),e(vq,Vvo),e(R_,Xvo),e(x,zvo),e(x,P_),e(P_,wie),e(wie,Wvo),e(P_,Qvo),e(P_,Fq),e(Fq,Hvo),e(P_,Uvo),e(x,Jvo),e(x,B_),e(B_,Aie),e(Aie,Yvo),e(B_,Kvo),e(B_,Tq),e(Tq,Zvo),e(B_,eFo),e(x,oFo),e(x,I_),e(I_,Lie),e(Lie,rFo),e(I_,tFo),e(I_,Mq),e(Mq,aFo),e(I_,nFo),e(x,sFo),e(x,N_),e(N_,yie),e(yie,lFo),e(N_,iFo),e(N_,Eq),e(Eq,dFo),e(N_,cFo),e(x,fFo),e(x,q_),e(q_,xie),e(xie,mFo),e(q_,gFo),e(q_,Cq),e(Cq,hFo),e(q_,pFo),e(x,_Fo),e(x,j_),e(j_,$ie),e($ie,uFo),e(j_,bFo),e(j_,wq),e(wq,vFo),e(j_,FFo),e(x,TFo),e(x,D_),e(D_,kie),e(kie,MFo),e(D_,EFo),e(D_,Aq),e(Aq,CFo),e(D_,wFo),e(x,AFo),e(x,G_),e(G_,Sie),e(Sie,LFo),e(G_,yFo),e(G_,Lq),e(Lq,xFo),e(G_,$Fo),e(x,kFo),e(x,O_),e(O_,Rie),e(Rie,SFo),e(O_,RFo),e(O_,yq),e(yq,PFo),e(O_,BFo),e(x,IFo),e(x,V_),e(V_,Pie),e(Pie,NFo),e(V_,qFo),e(V_,xq),e(xq,jFo),e(V_,DFo),e(x,GFo),e(x,X_),e(X_,Bie),e(Bie,OFo),e(X_,VFo),e(X_,$q),e($q,XFo),e(X_,zFo),e(x,WFo),e(x,z_),e(z_,Iie),e(Iie,QFo),e(z_,HFo),e(z_,kq),e(kq,UFo),e(z_,JFo),e(x,YFo),e(x,W_),e(W_,Nie),e(Nie,KFo),e(W_,ZFo),e(W_,Sq),e(Sq,eTo),e(W_,oTo),e(x,rTo),e(x,Q_),e(Q_,qie),e(qie,tTo),e(Q_,aTo),e(Q_,Rq),e(Rq,nTo),e(Q_,sTo),e(x,lTo),e(x,H_),e(H_,jie),e(jie,iTo),e(H_,dTo),e(H_,Pq),e(Pq,cTo),e(H_,fTo),e(x,mTo),e(x,U_),e(U_,Die),e(Die,gTo),e(U_,hTo),e(U_,Bq),e(Bq,pTo),e(U_,_To),e(x,uTo),e(x,J_),e(J_,Gie),e(Gie,bTo),e(J_,vTo),e(J_,Iq),e(Iq,FTo),e(J_,TTo),e(x,MTo),e(x,Y_),e(Y_,Oie),e(Oie,ETo),e(Y_,CTo),e(Y_,Nq),e(Nq,wTo),e(Y_,ATo),e(x,LTo),e(x,K_),e(K_,Vie),e(Vie,yTo),e(K_,xTo),e(K_,qq),e(qq,$To),e(K_,kTo),e(x,STo),e(x,Z_),e(Z_,Xie),e(Xie,RTo),e(Z_,PTo),e(Z_,jq),e(jq,BTo),e(Z_,ITo),e(x,NTo),e(x,eu),e(eu,zie),e(zie,qTo),e(eu,jTo),e(eu,Dq),e(Dq,DTo),e(eu,GTo),e(x,OTo),e(x,ou),e(ou,Wie),e(Wie,VTo),e(ou,XTo),e(ou,Gq),e(Gq,zTo),e(ou,WTo),e(x,QTo),e(x,ru),e(ru,Qie),e(Qie,HTo),e(ru,UTo),e(ru,Oq),e(Oq,JTo),e(ru,YTo),e(x,KTo),e(x,tu),e(tu,Hie),e(Hie,ZTo),e(tu,eMo),e(tu,Vq),e(Vq,oMo),e(tu,rMo),e(x,tMo),e(x,au),e(au,Uie),e(Uie,aMo),e(au,nMo),e(au,Xq),e(Xq,sMo),e(au,lMo),e(x,iMo),e(x,nu),e(nu,Jie),e(Jie,dMo),e(nu,cMo),e(nu,zq),e(zq,fMo),e(nu,mMo),e(x,gMo),e(x,su),e(su,Yie),e(Yie,hMo),e(su,pMo),e(su,Wq),e(Wq,_Mo),e(su,uMo),e(x,bMo),e(x,lu),e(lu,Kie),e(Kie,vMo),e(lu,FMo),e(lu,Qq),e(Qq,TMo),e(lu,MMo),e(Je,EMo),e(Je,iu),e(iu,CMo),e(iu,Zie),e(Zie,wMo),e(iu,AMo),e(iu,ede),e(ede,LMo),e(Je,yMo),M(du,Je,null),b(f,_je,u),b(f,xi,u),e(xi,cu),e(cu,ode),M(bL,ode,null),e(xi,xMo),e(xi,rde),e(rde,$Mo),b(f,uje,u),b(f,xo,u),M(vL,xo,null),e(xo,kMo),e(xo,$i),e($i,SMo),e($i,Hq),e(Hq,RMo),e($i,PMo),e($i,Uq),e(Uq,BMo),e($i,IMo),e(xo,NMo),e(xo,FL),e(FL,qMo),e(FL,tde),e(tde,jMo),e(FL,DMo),e(xo,GMo),e(xo,at),M(TL,at,null),e(at,OMo),e(at,ade),e(ade,VMo),e(at,XMo),e(at,ki),e(ki,zMo),e(ki,nde),e(nde,WMo),e(ki,QMo),e(ki,Jq),e(Jq,HMo),e(ki,UMo),e(at,JMo),M(fu,at,null),e(xo,YMo),e(xo,Ye),M(ML,Ye,null),e(Ye,KMo),e(Ye,sde),e(sde,ZMo),e(Ye,eEo),e(Ye,xa),e(xa,oEo),e(xa,lde),e(lde,rEo),e(xa,tEo),e(xa,ide),e(ide,aEo),e(xa,nEo),e(xa,dde),e(dde,sEo),e(xa,lEo),e(Ye,iEo),e(Ye,G),e(G,mu),e(mu,cde),e(cde,dEo),e(mu,cEo),e(mu,Yq),e(Yq,fEo),e(mu,mEo),e(G,gEo),e(G,gu),e(gu,fde),e(fde,hEo),e(gu,pEo),e(gu,Kq),e(Kq,_Eo),e(gu,uEo),e(G,bEo),e(G,hu),e(hu,mde),e(mde,vEo),e(hu,FEo),e(hu,Zq),e(Zq,TEo),e(hu,MEo),e(G,EEo),e(G,pu),e(pu,gde),e(gde,CEo),e(pu,wEo),e(pu,ej),e(ej,AEo),e(pu,LEo),e(G,yEo),e(G,_u),e(_u,hde),e(hde,xEo),e(_u,$Eo),e(_u,oj),e(oj,kEo),e(_u,SEo),e(G,REo),e(G,uu),e(uu,pde),e(pde,PEo),e(uu,BEo),e(uu,rj),e(rj,IEo),e(uu,NEo),e(G,qEo),e(G,bu),e(bu,_de),e(_de,jEo),e(bu,DEo),e(bu,tj),e(tj,GEo),e(bu,OEo),e(G,VEo),e(G,vu),e(vu,ude),e(ude,XEo),e(vu,zEo),e(vu,aj),e(aj,WEo),e(vu,QEo),e(G,HEo),e(G,Fu),e(Fu,bde),e(bde,UEo),e(Fu,JEo),e(Fu,nj),e(nj,YEo),e(Fu,KEo),e(G,ZEo),e(G,Tu),e(Tu,vde),e(vde,eCo),e(Tu,oCo),e(Tu,sj),e(sj,rCo),e(Tu,tCo),e(G,aCo),e(G,Mu),e(Mu,Fde),e(Fde,nCo),e(Mu,sCo),e(Mu,lj),e(lj,lCo),e(Mu,iCo),e(G,dCo),e(G,Eu),e(Eu,Tde),e(Tde,cCo),e(Eu,fCo),e(Eu,ij),e(ij,mCo),e(Eu,gCo),e(G,hCo),e(G,Cu),e(Cu,Mde),e(Mde,pCo),e(Cu,_Co),e(Cu,dj),e(dj,uCo),e(Cu,bCo),e(G,vCo),e(G,wu),e(wu,Ede),e(Ede,FCo),e(wu,TCo),e(wu,cj),e(cj,MCo),e(wu,ECo),e(G,CCo),e(G,Au),e(Au,Cde),e(Cde,wCo),e(Au,ACo),e(Au,fj),e(fj,LCo),e(Au,yCo),e(G,xCo),e(G,Lu),e(Lu,wde),e(wde,$Co),e(Lu,kCo),e(Lu,mj),e(mj,SCo),e(Lu,RCo),e(G,PCo),e(G,yu),e(yu,Ade),e(Ade,BCo),e(yu,ICo),e(yu,gj),e(gj,NCo),e(yu,qCo),e(G,jCo),e(G,xu),e(xu,Lde),e(Lde,DCo),e(xu,GCo),e(xu,hj),e(hj,OCo),e(xu,VCo),e(G,XCo),e(G,$u),e($u,yde),e(yde,zCo),e($u,WCo),e($u,pj),e(pj,QCo),e($u,HCo),e(G,UCo),e(G,ku),e(ku,xde),e(xde,JCo),e(ku,YCo),e(ku,_j),e(_j,KCo),e(ku,ZCo),e(G,e5o),e(G,Su),e(Su,$de),e($de,o5o),e(Su,r5o),e(Su,uj),e(uj,t5o),e(Su,a5o),e(G,n5o),e(G,Ru),e(Ru,kde),e(kde,s5o),e(Ru,l5o),e(Ru,bj),e(bj,i5o),e(Ru,d5o),e(G,c5o),e(G,Pu),e(Pu,Sde),e(Sde,f5o),e(Pu,m5o),e(Pu,vj),e(vj,g5o),e(Pu,h5o),e(G,p5o),e(G,Bu),e(Bu,Rde),e(Rde,_5o),e(Bu,u5o),e(Bu,Fj),e(Fj,b5o),e(Bu,v5o),e(G,F5o),e(G,Iu),e(Iu,Pde),e(Pde,T5o),e(Iu,M5o),e(Iu,Tj),e(Tj,E5o),e(Iu,C5o),e(G,w5o),e(G,Nu),e(Nu,Bde),e(Bde,A5o),e(Nu,L5o),e(Nu,Mj),e(Mj,y5o),e(Nu,x5o),e(G,$5o),e(G,qu),e(qu,Ide),e(Ide,k5o),e(qu,S5o),e(qu,Ej),e(Ej,R5o),e(qu,P5o),e(G,B5o),e(G,ju),e(ju,Nde),e(Nde,I5o),e(ju,N5o),e(ju,Cj),e(Cj,q5o),e(ju,j5o),e(G,D5o),e(G,Du),e(Du,qde),e(qde,G5o),e(Du,O5o),e(Du,wj),e(wj,V5o),e(Du,X5o),e(G,z5o),e(G,Gu),e(Gu,jde),e(jde,W5o),e(Gu,Q5o),e(Gu,Aj),e(Aj,H5o),e(Gu,U5o),e(G,J5o),e(G,Ou),e(Ou,Dde),e(Dde,Y5o),e(Ou,K5o),e(Ou,Lj),e(Lj,Z5o),e(Ou,e3o),e(G,o3o),e(G,Vu),e(Vu,Gde),e(Gde,r3o),e(Vu,t3o),e(Vu,yj),e(yj,a3o),e(Vu,n3o),e(G,s3o),e(G,Xu),e(Xu,Ode),e(Ode,l3o),e(Xu,i3o),e(Xu,xj),e(xj,d3o),e(Xu,c3o),e(G,f3o),e(G,zu),e(zu,Vde),e(Vde,m3o),e(zu,g3o),e(zu,$j),e($j,h3o),e(zu,p3o),e(G,_3o),e(G,Wu),e(Wu,Xde),e(Xde,u3o),e(Wu,b3o),e(Wu,kj),e(kj,v3o),e(Wu,F3o),e(G,T3o),e(G,Qu),e(Qu,zde),e(zde,M3o),e(Qu,E3o),e(Qu,Sj),e(Sj,C3o),e(Qu,w3o),e(G,A3o),e(G,Hu),e(Hu,Wde),e(Wde,L3o),e(Hu,y3o),e(Hu,Rj),e(Rj,x3o),e(Hu,$3o),e(G,k3o),e(G,Uu),e(Uu,Qde),e(Qde,S3o),e(Uu,R3o),e(Uu,Pj),e(Pj,P3o),e(Uu,B3o),e(G,I3o),e(G,Ju),e(Ju,Hde),e(Hde,N3o),e(Ju,q3o),e(Ju,Bj),e(Bj,j3o),e(Ju,D3o),e(G,G3o),e(G,Yu),e(Yu,Ude),e(Ude,O3o),e(Yu,V3o),e(Yu,Ij),e(Ij,X3o),e(Yu,z3o),e(G,W3o),e(G,Ku),e(Ku,Jde),e(Jde,Q3o),e(Ku,H3o),e(Ku,Nj),e(Nj,U3o),e(Ku,J3o),e(G,Y3o),e(G,Zu),e(Zu,Yde),e(Yde,K3o),e(Zu,Z3o),e(Zu,qj),e(qj,e0o),e(Zu,o0o),e(G,r0o),e(G,e4),e(e4,Kde),e(Kde,t0o),e(e4,a0o),e(e4,jj),e(jj,n0o),e(e4,s0o),e(Ye,l0o),e(Ye,o4),e(o4,i0o),e(o4,Zde),e(Zde,d0o),e(o4,c0o),e(o4,ece),e(ece,f0o),e(Ye,m0o),M(r4,Ye,null),b(f,bje,u),b(f,Si,u),e(Si,t4),e(t4,oce),M(EL,oce,null),e(Si,g0o),e(Si,rce),e(rce,h0o),b(f,vje,u),b(f,$o,u),M(CL,$o,null),e($o,p0o),e($o,Ri),e(Ri,_0o),e(Ri,Dj),e(Dj,u0o),e(Ri,b0o),e(Ri,Gj),e(Gj,v0o),e(Ri,F0o),e($o,T0o),e($o,wL),e(wL,M0o),e(wL,tce),e(tce,E0o),e(wL,C0o),e($o,w0o),e($o,nt),M(AL,nt,null),e(nt,A0o),e(nt,ace),e(ace,L0o),e(nt,y0o),e(nt,Pi),e(Pi,x0o),e(Pi,nce),e(nce,$0o),e(Pi,k0o),e(Pi,Oj),e(Oj,S0o),e(Pi,R0o),e(nt,P0o),M(a4,nt,null),e($o,B0o),e($o,Ke),M(LL,Ke,null),e(Ke,I0o),e(Ke,sce),e(sce,N0o),e(Ke,q0o),e(Ke,$a),e($a,j0o),e($a,lce),e(lce,D0o),e($a,G0o),e($a,ice),e(ice,O0o),e($a,V0o),e($a,dce),e(dce,X0o),e($a,z0o),e(Ke,W0o),e(Ke,z),e(z,n4),e(n4,cce),e(cce,Q0o),e(n4,H0o),e(n4,Vj),e(Vj,U0o),e(n4,J0o),e(z,Y0o),e(z,s4),e(s4,fce),e(fce,K0o),e(s4,Z0o),e(s4,Xj),e(Xj,ewo),e(s4,owo),e(z,rwo),e(z,l4),e(l4,mce),e(mce,two),e(l4,awo),e(l4,zj),e(zj,nwo),e(l4,swo),e(z,lwo),e(z,i4),e(i4,gce),e(gce,iwo),e(i4,dwo),e(i4,Wj),e(Wj,cwo),e(i4,fwo),e(z,mwo),e(z,d4),e(d4,hce),e(hce,gwo),e(d4,hwo),e(d4,Qj),e(Qj,pwo),e(d4,_wo),e(z,uwo),e(z,c4),e(c4,pce),e(pce,bwo),e(c4,vwo),e(c4,Hj),e(Hj,Fwo),e(c4,Two),e(z,Mwo),e(z,f4),e(f4,_ce),e(_ce,Ewo),e(f4,Cwo),e(f4,Uj),e(Uj,wwo),e(f4,Awo),e(z,Lwo),e(z,m4),e(m4,uce),e(uce,ywo),e(m4,xwo),e(m4,Jj),e(Jj,$wo),e(m4,kwo),e(z,Swo),e(z,g4),e(g4,bce),e(bce,Rwo),e(g4,Pwo),e(g4,Yj),e(Yj,Bwo),e(g4,Iwo),e(z,Nwo),e(z,h4),e(h4,vce),e(vce,qwo),e(h4,jwo),e(h4,Kj),e(Kj,Dwo),e(h4,Gwo),e(z,Owo),e(z,p4),e(p4,Fce),e(Fce,Vwo),e(p4,Xwo),e(p4,Zj),e(Zj,zwo),e(p4,Wwo),e(z,Qwo),e(z,_4),e(_4,Tce),e(Tce,Hwo),e(_4,Uwo),e(_4,eD),e(eD,Jwo),e(_4,Ywo),e(z,Kwo),e(z,u4),e(u4,Mce),e(Mce,Zwo),e(u4,eAo),e(u4,oD),e(oD,oAo),e(u4,rAo),e(z,tAo),e(z,b4),e(b4,Ece),e(Ece,aAo),e(b4,nAo),e(b4,rD),e(rD,sAo),e(b4,lAo),e(z,iAo),e(z,v4),e(v4,Cce),e(Cce,dAo),e(v4,cAo),e(v4,tD),e(tD,fAo),e(v4,mAo),e(z,gAo),e(z,F4),e(F4,wce),e(wce,hAo),e(F4,pAo),e(F4,aD),e(aD,_Ao),e(F4,uAo),e(z,bAo),e(z,T4),e(T4,Ace),e(Ace,vAo),e(T4,FAo),e(T4,nD),e(nD,TAo),e(T4,MAo),e(z,EAo),e(z,M4),e(M4,Lce),e(Lce,CAo),e(M4,wAo),e(M4,sD),e(sD,AAo),e(M4,LAo),e(z,yAo),e(z,E4),e(E4,yce),e(yce,xAo),e(E4,$Ao),e(E4,lD),e(lD,kAo),e(E4,SAo),e(z,RAo),e(z,C4),e(C4,xce),e(xce,PAo),e(C4,BAo),e(C4,iD),e(iD,IAo),e(C4,NAo),e(z,qAo),e(z,w4),e(w4,$ce),e($ce,jAo),e(w4,DAo),e(w4,dD),e(dD,GAo),e(w4,OAo),e(z,VAo),e(z,A4),e(A4,kce),e(kce,XAo),e(A4,zAo),e(A4,cD),e(cD,WAo),e(A4,QAo),e(z,HAo),e(z,L4),e(L4,Sce),e(Sce,UAo),e(L4,JAo),e(L4,fD),e(fD,YAo),e(L4,KAo),e(z,ZAo),e(z,y4),e(y4,Rce),e(Rce,e6o),e(y4,o6o),e(y4,mD),e(mD,r6o),e(y4,t6o),e(z,a6o),e(z,x4),e(x4,Pce),e(Pce,n6o),e(x4,s6o),e(x4,gD),e(gD,l6o),e(x4,i6o),e(z,d6o),e(z,$4),e($4,Bce),e(Bce,c6o),e($4,f6o),e($4,hD),e(hD,m6o),e($4,g6o),e(z,h6o),e(z,k4),e(k4,Ice),e(Ice,p6o),e(k4,_6o),e(k4,pD),e(pD,u6o),e(k4,b6o),e(z,v6o),e(z,S4),e(S4,Nce),e(Nce,F6o),e(S4,T6o),e(S4,_D),e(_D,M6o),e(S4,E6o),e(z,C6o),e(z,R4),e(R4,qce),e(qce,w6o),e(R4,A6o),e(R4,uD),e(uD,L6o),e(R4,y6o),e(z,x6o),e(z,P4),e(P4,jce),e(jce,$6o),e(P4,k6o),e(P4,bD),e(bD,S6o),e(P4,R6o),e(z,P6o),e(z,B4),e(B4,Dce),e(Dce,B6o),e(B4,I6o),e(B4,vD),e(vD,N6o),e(B4,q6o),e(z,j6o),e(z,I4),e(I4,Gce),e(Gce,D6o),e(I4,G6o),e(I4,FD),e(FD,O6o),e(I4,V6o),e(z,X6o),e(z,N4),e(N4,Oce),e(Oce,z6o),e(N4,W6o),e(N4,TD),e(TD,Q6o),e(N4,H6o),e(z,U6o),e(z,q4),e(q4,Vce),e(Vce,J6o),e(q4,Y6o),e(q4,MD),e(MD,K6o),e(q4,Z6o),e(z,eLo),e(z,j4),e(j4,Xce),e(Xce,oLo),e(j4,rLo),e(j4,ED),e(ED,tLo),e(j4,aLo),e(z,nLo),e(z,D4),e(D4,zce),e(zce,sLo),e(D4,lLo),e(D4,CD),e(CD,iLo),e(D4,dLo),e(z,cLo),e(z,G4),e(G4,Wce),e(Wce,fLo),e(G4,mLo),e(G4,wD),e(wD,gLo),e(G4,hLo),e(z,pLo),e(z,O4),e(O4,Qce),e(Qce,_Lo),e(O4,uLo),e(O4,AD),e(AD,bLo),e(O4,vLo),e(Ke,FLo),e(Ke,V4),e(V4,TLo),e(V4,Hce),e(Hce,MLo),e(V4,ELo),e(V4,Uce),e(Uce,CLo),e(Ke,wLo),M(X4,Ke,null),b(f,Fje,u),b(f,Bi,u),e(Bi,z4),e(z4,Jce),M(yL,Jce,null),e(Bi,ALo),e(Bi,Yce),e(Yce,LLo),b(f,Tje,u),b(f,ko,u),M(xL,ko,null),e(ko,yLo),e(ko,Ii),e(Ii,xLo),e(Ii,LD),e(LD,$Lo),e(Ii,kLo),e(Ii,yD),e(yD,SLo),e(Ii,RLo),e(ko,PLo),e(ko,$L),e($L,BLo),e($L,Kce),e(Kce,ILo),e($L,NLo),e(ko,qLo),e(ko,st),M(kL,st,null),e(st,jLo),e(st,Zce),e(Zce,DLo),e(st,GLo),e(st,Ni),e(Ni,OLo),e(Ni,efe),e(efe,VLo),e(Ni,XLo),e(Ni,xD),e(xD,zLo),e(Ni,WLo),e(st,QLo),M(W4,st,null),e(ko,HLo),e(ko,Ze),M(SL,Ze,null),e(Ze,ULo),e(Ze,ofe),e(ofe,JLo),e(Ze,YLo),e(Ze,ka),e(ka,KLo),e(ka,rfe),e(rfe,ZLo),e(ka,eyo),e(ka,tfe),e(tfe,oyo),e(ka,ryo),e(ka,afe),e(afe,tyo),e(ka,ayo),e(Ze,nyo),e(Ze,Q),e(Q,Q4),e(Q4,nfe),e(nfe,syo),e(Q4,lyo),e(Q4,$D),e($D,iyo),e(Q4,dyo),e(Q,cyo),e(Q,H4),e(H4,sfe),e(sfe,fyo),e(H4,myo),e(H4,kD),e(kD,gyo),e(H4,hyo),e(Q,pyo),e(Q,U4),e(U4,lfe),e(lfe,_yo),e(U4,uyo),e(U4,SD),e(SD,byo),e(U4,vyo),e(Q,Fyo),e(Q,J4),e(J4,ife),e(ife,Tyo),e(J4,Myo),e(J4,RD),e(RD,Eyo),e(J4,Cyo),e(Q,wyo),e(Q,Y4),e(Y4,dfe),e(dfe,Ayo),e(Y4,Lyo),e(Y4,PD),e(PD,yyo),e(Y4,xyo),e(Q,$yo),e(Q,K4),e(K4,cfe),e(cfe,kyo),e(K4,Syo),e(K4,BD),e(BD,Ryo),e(K4,Pyo),e(Q,Byo),e(Q,Z4),e(Z4,ffe),e(ffe,Iyo),e(Z4,Nyo),e(Z4,ID),e(ID,qyo),e(Z4,jyo),e(Q,Dyo),e(Q,e1),e(e1,mfe),e(mfe,Gyo),e(e1,Oyo),e(e1,ND),e(ND,Vyo),e(e1,Xyo),e(Q,zyo),e(Q,o1),e(o1,gfe),e(gfe,Wyo),e(o1,Qyo),e(o1,qD),e(qD,Hyo),e(o1,Uyo),e(Q,Jyo),e(Q,r1),e(r1,hfe),e(hfe,Yyo),e(r1,Kyo),e(r1,jD),e(jD,Zyo),e(r1,e8o),e(Q,o8o),e(Q,t1),e(t1,pfe),e(pfe,r8o),e(t1,t8o),e(t1,DD),e(DD,a8o),e(t1,n8o),e(Q,s8o),e(Q,a1),e(a1,_fe),e(_fe,l8o),e(a1,i8o),e(a1,GD),e(GD,d8o),e(a1,c8o),e(Q,f8o),e(Q,n1),e(n1,ufe),e(ufe,m8o),e(n1,g8o),e(n1,OD),e(OD,h8o),e(n1,p8o),e(Q,_8o),e(Q,s1),e(s1,bfe),e(bfe,u8o),e(s1,b8o),e(s1,VD),e(VD,v8o),e(s1,F8o),e(Q,T8o),e(Q,l1),e(l1,vfe),e(vfe,M8o),e(l1,E8o),e(l1,XD),e(XD,C8o),e(l1,w8o),e(Q,A8o),e(Q,i1),e(i1,Ffe),e(Ffe,L8o),e(i1,y8o),e(i1,zD),e(zD,x8o),e(i1,$8o),e(Q,k8o),e(Q,d1),e(d1,Tfe),e(Tfe,S8o),e(d1,R8o),e(d1,WD),e(WD,P8o),e(d1,B8o),e(Q,I8o),e(Q,c1),e(c1,Mfe),e(Mfe,N8o),e(c1,q8o),e(c1,QD),e(QD,j8o),e(c1,D8o),e(Q,G8o),e(Q,f1),e(f1,Efe),e(Efe,O8o),e(f1,V8o),e(f1,HD),e(HD,X8o),e(f1,z8o),e(Q,W8o),e(Q,m1),e(m1,Cfe),e(Cfe,Q8o),e(m1,H8o),e(m1,UD),e(UD,U8o),e(m1,J8o),e(Q,Y8o),e(Q,g1),e(g1,wfe),e(wfe,K8o),e(g1,Z8o),e(g1,JD),e(JD,e9o),e(g1,o9o),e(Q,r9o),e(Q,h1),e(h1,Afe),e(Afe,t9o),e(h1,a9o),e(h1,YD),e(YD,n9o),e(h1,s9o),e(Q,l9o),e(Q,p1),e(p1,Lfe),e(Lfe,i9o),e(p1,d9o),e(p1,KD),e(KD,c9o),e(p1,f9o),e(Q,m9o),e(Q,_1),e(_1,yfe),e(yfe,g9o),e(_1,h9o),e(_1,ZD),e(ZD,p9o),e(_1,_9o),e(Q,u9o),e(Q,u1),e(u1,xfe),e(xfe,b9o),e(u1,v9o),e(u1,eG),e(eG,F9o),e(u1,T9o),e(Q,M9o),e(Q,b1),e(b1,$fe),e($fe,E9o),e(b1,C9o),e(b1,oG),e(oG,w9o),e(b1,A9o),e(Q,L9o),e(Q,v1),e(v1,kfe),e(kfe,y9o),e(v1,x9o),e(v1,rG),e(rG,$9o),e(v1,k9o),e(Q,S9o),e(Q,F1),e(F1,Sfe),e(Sfe,R9o),e(F1,P9o),e(F1,tG),e(tG,B9o),e(F1,I9o),e(Q,N9o),e(Q,T1),e(T1,Rfe),e(Rfe,q9o),e(T1,j9o),e(T1,aG),e(aG,D9o),e(T1,G9o),e(Q,O9o),e(Q,M1),e(M1,Pfe),e(Pfe,V9o),e(M1,X9o),e(M1,nG),e(nG,z9o),e(M1,W9o),e(Q,Q9o),e(Q,E1),e(E1,Bfe),e(Bfe,H9o),e(E1,U9o),e(E1,sG),e(sG,J9o),e(E1,Y9o),e(Q,K9o),e(Q,C1),e(C1,Ife),e(Ife,Z9o),e(C1,exo),e(C1,Nfe),e(Nfe,oxo),e(C1,rxo),e(Q,txo),e(Q,w1),e(w1,qfe),e(qfe,axo),e(w1,nxo),e(w1,lG),e(lG,sxo),e(w1,lxo),e(Q,ixo),e(Q,A1),e(A1,jfe),e(jfe,dxo),e(A1,cxo),e(A1,iG),e(iG,fxo),e(A1,mxo),e(Q,gxo),e(Q,L1),e(L1,Dfe),e(Dfe,hxo),e(L1,pxo),e(L1,dG),e(dG,_xo),e(L1,uxo),e(Q,bxo),e(Q,y1),e(y1,Gfe),e(Gfe,vxo),e(y1,Fxo),e(y1,cG),e(cG,Txo),e(y1,Mxo),e(Ze,Exo),e(Ze,x1),e(x1,Cxo),e(x1,Ofe),e(Ofe,wxo),e(x1,Axo),e(x1,Vfe),e(Vfe,Lxo),e(Ze,yxo),M($1,Ze,null),b(f,Mje,u),b(f,qi,u),e(qi,k1),e(k1,Xfe),M(RL,Xfe,null),e(qi,xxo),e(qi,zfe),e(zfe,$xo),b(f,Eje,u),b(f,So,u),M(PL,So,null),e(So,kxo),e(So,ji),e(ji,Sxo),e(ji,fG),e(fG,Rxo),e(ji,Pxo),e(ji,mG),e(mG,Bxo),e(ji,Ixo),e(So,Nxo),e(So,BL),e(BL,qxo),e(BL,Wfe),e(Wfe,jxo),e(BL,Dxo),e(So,Gxo),e(So,lt),M(IL,lt,null),e(lt,Oxo),e(lt,Qfe),e(Qfe,Vxo),e(lt,Xxo),e(lt,Di),e(Di,zxo),e(Di,Hfe),e(Hfe,Wxo),e(Di,Qxo),e(Di,gG),e(gG,Hxo),e(Di,Uxo),e(lt,Jxo),M(S1,lt,null),e(So,Yxo),e(So,eo),M(NL,eo,null),e(eo,Kxo),e(eo,Ufe),e(Ufe,Zxo),e(eo,e$o),e(eo,Sa),e(Sa,o$o),e(Sa,Jfe),e(Jfe,r$o),e(Sa,t$o),e(Sa,Yfe),e(Yfe,a$o),e(Sa,n$o),e(Sa,Kfe),e(Kfe,s$o),e(Sa,l$o),e(eo,i$o),e(eo,_e),e(_e,R1),e(R1,Zfe),e(Zfe,d$o),e(R1,c$o),e(R1,hG),e(hG,f$o),e(R1,m$o),e(_e,g$o),e(_e,P1),e(P1,eme),e(eme,h$o),e(P1,p$o),e(P1,pG),e(pG,_$o),e(P1,u$o),e(_e,b$o),e(_e,B1),e(B1,ome),e(ome,v$o),e(B1,F$o),e(B1,_G),e(_G,T$o),e(B1,M$o),e(_e,E$o),e(_e,I1),e(I1,rme),e(rme,C$o),e(I1,w$o),e(I1,uG),e(uG,A$o),e(I1,L$o),e(_e,y$o),e(_e,N1),e(N1,tme),e(tme,x$o),e(N1,$$o),e(N1,bG),e(bG,k$o),e(N1,S$o),e(_e,R$o),e(_e,q1),e(q1,ame),e(ame,P$o),e(q1,B$o),e(q1,vG),e(vG,I$o),e(q1,N$o),e(_e,q$o),e(_e,j1),e(j1,nme),e(nme,j$o),e(j1,D$o),e(j1,FG),e(FG,G$o),e(j1,O$o),e(_e,V$o),e(_e,D1),e(D1,sme),e(sme,X$o),e(D1,z$o),e(D1,TG),e(TG,W$o),e(D1,Q$o),e(_e,H$o),e(_e,G1),e(G1,lme),e(lme,U$o),e(G1,J$o),e(G1,MG),e(MG,Y$o),e(G1,K$o),e(_e,Z$o),e(_e,O1),e(O1,ime),e(ime,eko),e(O1,oko),e(O1,EG),e(EG,rko),e(O1,tko),e(_e,ako),e(_e,V1),e(V1,dme),e(dme,nko),e(V1,sko),e(V1,CG),e(CG,lko),e(V1,iko),e(_e,dko),e(_e,X1),e(X1,cme),e(cme,cko),e(X1,fko),e(X1,wG),e(wG,mko),e(X1,gko),e(_e,hko),e(_e,z1),e(z1,fme),e(fme,pko),e(z1,_ko),e(z1,AG),e(AG,uko),e(z1,bko),e(_e,vko),e(_e,W1),e(W1,mme),e(mme,Fko),e(W1,Tko),e(W1,LG),e(LG,Mko),e(W1,Eko),e(_e,Cko),e(_e,Q1),e(Q1,gme),e(gme,wko),e(Q1,Ako),e(Q1,yG),e(yG,Lko),e(Q1,yko),e(_e,xko),e(_e,H1),e(H1,hme),e(hme,$ko),e(H1,kko),e(H1,xG),e(xG,Sko),e(H1,Rko),e(eo,Pko),e(eo,U1),e(U1,Bko),e(U1,pme),e(pme,Iko),e(U1,Nko),e(U1,_me),e(_me,qko),e(eo,jko),M(J1,eo,null),b(f,Cje,u),b(f,Gi,u),e(Gi,Y1),e(Y1,ume),M(qL,ume,null),e(Gi,Dko),e(Gi,bme),e(bme,Gko),b(f,wje,u),b(f,Ro,u),M(jL,Ro,null),e(Ro,Oko),e(Ro,Oi),e(Oi,Vko),e(Oi,$G),e($G,Xko),e(Oi,zko),e(Oi,kG),e(kG,Wko),e(Oi,Qko),e(Ro,Hko),e(Ro,DL),e(DL,Uko),e(DL,vme),e(vme,Jko),e(DL,Yko),e(Ro,Kko),e(Ro,it),M(GL,it,null),e(it,Zko),e(it,Fme),e(Fme,eSo),e(it,oSo),e(it,Vi),e(Vi,rSo),e(Vi,Tme),e(Tme,tSo),e(Vi,aSo),e(Vi,SG),e(SG,nSo),e(Vi,sSo),e(it,lSo),M(K1,it,null),e(Ro,iSo),e(Ro,oo),M(OL,oo,null),e(oo,dSo),e(oo,Mme),e(Mme,cSo),e(oo,fSo),e(oo,Ra),e(Ra,mSo),e(Ra,Eme),e(Eme,gSo),e(Ra,hSo),e(Ra,Cme),e(Cme,pSo),e(Ra,_So),e(Ra,wme),e(wme,uSo),e(Ra,bSo),e(oo,vSo),e(oo,N),e(N,Z1),e(Z1,Ame),e(Ame,FSo),e(Z1,TSo),e(Z1,RG),e(RG,MSo),e(Z1,ESo),e(N,CSo),e(N,e7),e(e7,Lme),e(Lme,wSo),e(e7,ASo),e(e7,PG),e(PG,LSo),e(e7,ySo),e(N,xSo),e(N,o7),e(o7,yme),e(yme,$So),e(o7,kSo),e(o7,BG),e(BG,SSo),e(o7,RSo),e(N,PSo),e(N,r7),e(r7,xme),e(xme,BSo),e(r7,ISo),e(r7,IG),e(IG,NSo),e(r7,qSo),e(N,jSo),e(N,t7),e(t7,$me),e($me,DSo),e(t7,GSo),e(t7,NG),e(NG,OSo),e(t7,VSo),e(N,XSo),e(N,a7),e(a7,kme),e(kme,zSo),e(a7,WSo),e(a7,qG),e(qG,QSo),e(a7,HSo),e(N,USo),e(N,n7),e(n7,Sme),e(Sme,JSo),e(n7,YSo),e(n7,jG),e(jG,KSo),e(n7,ZSo),e(N,eRo),e(N,s7),e(s7,Rme),e(Rme,oRo),e(s7,rRo),e(s7,DG),e(DG,tRo),e(s7,aRo),e(N,nRo),e(N,l7),e(l7,Pme),e(Pme,sRo),e(l7,lRo),e(l7,GG),e(GG,iRo),e(l7,dRo),e(N,cRo),e(N,i7),e(i7,Bme),e(Bme,fRo),e(i7,mRo),e(i7,OG),e(OG,gRo),e(i7,hRo),e(N,pRo),e(N,d7),e(d7,Ime),e(Ime,_Ro),e(d7,uRo),e(d7,VG),e(VG,bRo),e(d7,vRo),e(N,FRo),e(N,c7),e(c7,Nme),e(Nme,TRo),e(c7,MRo),e(c7,XG),e(XG,ERo),e(c7,CRo),e(N,wRo),e(N,f7),e(f7,qme),e(qme,ARo),e(f7,LRo),e(f7,zG),e(zG,yRo),e(f7,xRo),e(N,$Ro),e(N,m7),e(m7,jme),e(jme,kRo),e(m7,SRo),e(m7,WG),e(WG,RRo),e(m7,PRo),e(N,BRo),e(N,g7),e(g7,Dme),e(Dme,IRo),e(g7,NRo),e(g7,QG),e(QG,qRo),e(g7,jRo),e(N,DRo),e(N,h7),e(h7,Gme),e(Gme,GRo),e(h7,ORo),e(h7,HG),e(HG,VRo),e(h7,XRo),e(N,zRo),e(N,p7),e(p7,Ome),e(Ome,WRo),e(p7,QRo),e(p7,UG),e(UG,HRo),e(p7,URo),e(N,JRo),e(N,_7),e(_7,Vme),e(Vme,YRo),e(_7,KRo),e(_7,JG),e(JG,ZRo),e(_7,ePo),e(N,oPo),e(N,u7),e(u7,Xme),e(Xme,rPo),e(u7,tPo),e(u7,YG),e(YG,aPo),e(u7,nPo),e(N,sPo),e(N,b7),e(b7,zme),e(zme,lPo),e(b7,iPo),e(b7,KG),e(KG,dPo),e(b7,cPo),e(N,fPo),e(N,v7),e(v7,Wme),e(Wme,mPo),e(v7,gPo),e(v7,ZG),e(ZG,hPo),e(v7,pPo),e(N,_Po),e(N,F7),e(F7,Qme),e(Qme,uPo),e(F7,bPo),e(F7,eO),e(eO,vPo),e(F7,FPo),e(N,TPo),e(N,T7),e(T7,Hme),e(Hme,MPo),e(T7,EPo),e(T7,oO),e(oO,CPo),e(T7,wPo),e(N,APo),e(N,M7),e(M7,Ume),e(Ume,LPo),e(M7,yPo),e(M7,rO),e(rO,xPo),e(M7,$Po),e(N,kPo),e(N,E7),e(E7,Jme),e(Jme,SPo),e(E7,RPo),e(E7,tO),e(tO,PPo),e(E7,BPo),e(N,IPo),e(N,C7),e(C7,Yme),e(Yme,NPo),e(C7,qPo),e(C7,aO),e(aO,jPo),e(C7,DPo),e(N,GPo),e(N,w7),e(w7,Kme),e(Kme,OPo),e(w7,VPo),e(w7,nO),e(nO,XPo),e(w7,zPo),e(N,WPo),e(N,A7),e(A7,Zme),e(Zme,QPo),e(A7,HPo),e(A7,sO),e(sO,UPo),e(A7,JPo),e(N,YPo),e(N,L7),e(L7,ege),e(ege,KPo),e(L7,ZPo),e(L7,lO),e(lO,eBo),e(L7,oBo),e(N,rBo),e(N,y7),e(y7,oge),e(oge,tBo),e(y7,aBo),e(y7,iO),e(iO,nBo),e(y7,sBo),e(N,lBo),e(N,x7),e(x7,rge),e(rge,iBo),e(x7,dBo),e(x7,dO),e(dO,cBo),e(x7,fBo),e(N,mBo),e(N,$7),e($7,tge),e(tge,gBo),e($7,hBo),e($7,cO),e(cO,pBo),e($7,_Bo),e(N,uBo),e(N,k7),e(k7,age),e(age,bBo),e(k7,vBo),e(k7,fO),e(fO,FBo),e(k7,TBo),e(N,MBo),e(N,S7),e(S7,nge),e(nge,EBo),e(S7,CBo),e(S7,mO),e(mO,wBo),e(S7,ABo),e(N,LBo),e(N,R7),e(R7,sge),e(sge,yBo),e(R7,xBo),e(R7,gO),e(gO,$Bo),e(R7,kBo),e(N,SBo),e(N,P7),e(P7,lge),e(lge,RBo),e(P7,PBo),e(P7,hO),e(hO,BBo),e(P7,IBo),e(N,NBo),e(N,B7),e(B7,ige),e(ige,qBo),e(B7,jBo),e(B7,pO),e(pO,DBo),e(B7,GBo),e(N,OBo),e(N,I7),e(I7,dge),e(dge,VBo),e(I7,XBo),e(I7,_O),e(_O,zBo),e(I7,WBo),e(N,QBo),e(N,N7),e(N7,cge),e(cge,HBo),e(N7,UBo),e(N7,uO),e(uO,JBo),e(N7,YBo),e(N,KBo),e(N,q7),e(q7,fge),e(fge,ZBo),e(q7,eIo),e(q7,bO),e(bO,oIo),e(q7,rIo),e(N,tIo),e(N,j7),e(j7,mge),e(mge,aIo),e(j7,nIo),e(j7,vO),e(vO,sIo),e(j7,lIo),e(N,iIo),e(N,D7),e(D7,gge),e(gge,dIo),e(D7,cIo),e(D7,FO),e(FO,fIo),e(D7,mIo),e(N,gIo),e(N,G7),e(G7,hge),e(hge,hIo),e(G7,pIo),e(G7,TO),e(TO,_Io),e(G7,uIo),e(N,bIo),e(N,O7),e(O7,pge),e(pge,vIo),e(O7,FIo),e(O7,MO),e(MO,TIo),e(O7,MIo),e(N,EIo),e(N,V7),e(V7,_ge),e(_ge,CIo),e(V7,wIo),e(V7,EO),e(EO,AIo),e(V7,LIo),e(N,yIo),e(N,X7),e(X7,uge),e(uge,xIo),e(X7,$Io),e(X7,CO),e(CO,kIo),e(X7,SIo),e(N,RIo),e(N,z7),e(z7,bge),e(bge,PIo),e(z7,BIo),e(z7,wO),e(wO,IIo),e(z7,NIo),e(oo,qIo),e(oo,W7),e(W7,jIo),e(W7,vge),e(vge,DIo),e(W7,GIo),e(W7,Fge),e(Fge,OIo),e(oo,VIo),M(Q7,oo,null),b(f,Aje,u),b(f,Xi,u),e(Xi,H7),e(H7,Tge),M(VL,Tge,null),e(Xi,XIo),e(Xi,Mge),e(Mge,zIo),b(f,Lje,u),b(f,Po,u),M(XL,Po,null),e(Po,WIo),e(Po,zi),e(zi,QIo),e(zi,AO),e(AO,HIo),e(zi,UIo),e(zi,LO),e(LO,JIo),e(zi,YIo),e(Po,KIo),e(Po,zL),e(zL,ZIo),e(zL,Ege),e(Ege,eNo),e(zL,oNo),e(Po,rNo),e(Po,dt),M(WL,dt,null),e(dt,tNo),e(dt,Cge),e(Cge,aNo),e(dt,nNo),e(dt,Wi),e(Wi,sNo),e(Wi,wge),e(wge,lNo),e(Wi,iNo),e(Wi,yO),e(yO,dNo),e(Wi,cNo),e(dt,fNo),M(U7,dt,null),e(Po,mNo),e(Po,ro),M(QL,ro,null),e(ro,gNo),e(ro,Age),e(Age,hNo),e(ro,pNo),e(ro,Pa),e(Pa,_No),e(Pa,Lge),e(Lge,uNo),e(Pa,bNo),e(Pa,yge),e(yge,vNo),e(Pa,FNo),e(Pa,xge),e(xge,TNo),e(Pa,MNo),e(ro,ENo),e(ro,K),e(K,J7),e(J7,$ge),e($ge,CNo),e(J7,wNo),e(J7,xO),e(xO,ANo),e(J7,LNo),e(K,yNo),e(K,Y7),e(Y7,kge),e(kge,xNo),e(Y7,$No),e(Y7,$O),e($O,kNo),e(Y7,SNo),e(K,RNo),e(K,K7),e(K7,Sge),e(Sge,PNo),e(K7,BNo),e(K7,kO),e(kO,INo),e(K7,NNo),e(K,qNo),e(K,Z7),e(Z7,Rge),e(Rge,jNo),e(Z7,DNo),e(Z7,SO),e(SO,GNo),e(Z7,ONo),e(K,VNo),e(K,eb),e(eb,Pge),e(Pge,XNo),e(eb,zNo),e(eb,RO),e(RO,WNo),e(eb,QNo),e(K,HNo),e(K,ob),e(ob,Bge),e(Bge,UNo),e(ob,JNo),e(ob,PO),e(PO,YNo),e(ob,KNo),e(K,ZNo),e(K,rb),e(rb,Ige),e(Ige,eqo),e(rb,oqo),e(rb,BO),e(BO,rqo),e(rb,tqo),e(K,aqo),e(K,tb),e(tb,Nge),e(Nge,nqo),e(tb,sqo),e(tb,IO),e(IO,lqo),e(tb,iqo),e(K,dqo),e(K,ab),e(ab,qge),e(qge,cqo),e(ab,fqo),e(ab,NO),e(NO,mqo),e(ab,gqo),e(K,hqo),e(K,nb),e(nb,jge),e(jge,pqo),e(nb,_qo),e(nb,qO),e(qO,uqo),e(nb,bqo),e(K,vqo),e(K,sb),e(sb,Dge),e(Dge,Fqo),e(sb,Tqo),e(sb,jO),e(jO,Mqo),e(sb,Eqo),e(K,Cqo),e(K,lb),e(lb,Gge),e(Gge,wqo),e(lb,Aqo),e(lb,DO),e(DO,Lqo),e(lb,yqo),e(K,xqo),e(K,ib),e(ib,Oge),e(Oge,$qo),e(ib,kqo),e(ib,GO),e(GO,Sqo),e(ib,Rqo),e(K,Pqo),e(K,db),e(db,Vge),e(Vge,Bqo),e(db,Iqo),e(db,OO),e(OO,Nqo),e(db,qqo),e(K,jqo),e(K,cb),e(cb,Xge),e(Xge,Dqo),e(cb,Gqo),e(cb,VO),e(VO,Oqo),e(cb,Vqo),e(K,Xqo),e(K,fb),e(fb,zge),e(zge,zqo),e(fb,Wqo),e(fb,XO),e(XO,Qqo),e(fb,Hqo),e(K,Uqo),e(K,mb),e(mb,Wge),e(Wge,Jqo),e(mb,Yqo),e(mb,zO),e(zO,Kqo),e(mb,Zqo),e(K,ejo),e(K,gb),e(gb,Qge),e(Qge,ojo),e(gb,rjo),e(gb,WO),e(WO,tjo),e(gb,ajo),e(K,njo),e(K,hb),e(hb,Hge),e(Hge,sjo),e(hb,ljo),e(hb,QO),e(QO,ijo),e(hb,djo),e(K,cjo),e(K,pb),e(pb,Uge),e(Uge,fjo),e(pb,mjo),e(pb,HO),e(HO,gjo),e(pb,hjo),e(K,pjo),e(K,_b),e(_b,Jge),e(Jge,_jo),e(_b,ujo),e(_b,UO),e(UO,bjo),e(_b,vjo),e(K,Fjo),e(K,ub),e(ub,Yge),e(Yge,Tjo),e(ub,Mjo),e(ub,JO),e(JO,Ejo),e(ub,Cjo),e(K,wjo),e(K,bb),e(bb,Kge),e(Kge,Ajo),e(bb,Ljo),e(bb,YO),e(YO,yjo),e(bb,xjo),e(K,$jo),e(K,vb),e(vb,Zge),e(Zge,kjo),e(vb,Sjo),e(vb,KO),e(KO,Rjo),e(vb,Pjo),e(K,Bjo),e(K,Fb),e(Fb,ehe),e(ehe,Ijo),e(Fb,Njo),e(Fb,ZO),e(ZO,qjo),e(Fb,jjo),e(K,Djo),e(K,Tb),e(Tb,ohe),e(ohe,Gjo),e(Tb,Ojo),e(Tb,eV),e(eV,Vjo),e(Tb,Xjo),e(K,zjo),e(K,Mb),e(Mb,rhe),e(rhe,Wjo),e(Mb,Qjo),e(Mb,oV),e(oV,Hjo),e(Mb,Ujo),e(K,Jjo),e(K,Eb),e(Eb,the),e(the,Yjo),e(Eb,Kjo),e(Eb,rV),e(rV,Zjo),e(Eb,eDo),e(K,oDo),e(K,Cb),e(Cb,ahe),e(ahe,rDo),e(Cb,tDo),e(Cb,tV),e(tV,aDo),e(Cb,nDo),e(ro,sDo),e(ro,wb),e(wb,lDo),e(wb,nhe),e(nhe,iDo),e(wb,dDo),e(wb,she),e(she,cDo),e(ro,fDo),M(Ab,ro,null),b(f,yje,u),b(f,Qi,u),e(Qi,Lb),e(Lb,lhe),M(HL,lhe,null),e(Qi,mDo),e(Qi,ihe),e(ihe,gDo),b(f,xje,u),b(f,Bo,u),M(UL,Bo,null),e(Bo,hDo),e(Bo,Hi),e(Hi,pDo),e(Hi,aV),e(aV,_Do),e(Hi,uDo),e(Hi,nV),e(nV,bDo),e(Hi,vDo),e(Bo,FDo),e(Bo,JL),e(JL,TDo),e(JL,dhe),e(dhe,MDo),e(JL,EDo),e(Bo,CDo),e(Bo,ct),M(YL,ct,null),e(ct,wDo),e(ct,che),e(che,ADo),e(ct,LDo),e(ct,Ui),e(Ui,yDo),e(Ui,fhe),e(fhe,xDo),e(Ui,$Do),e(Ui,sV),e(sV,kDo),e(Ui,SDo),e(ct,RDo),M(yb,ct,null),e(Bo,PDo),e(Bo,to),M(KL,to,null),e(to,BDo),e(to,mhe),e(mhe,IDo),e(to,NDo),e(to,Ba),e(Ba,qDo),e(Ba,ghe),e(ghe,jDo),e(Ba,DDo),e(Ba,hhe),e(hhe,GDo),e(Ba,ODo),e(Ba,phe),e(phe,VDo),e(Ba,XDo),e(to,zDo),e(to,Yr),e(Yr,xb),e(xb,_he),e(_he,WDo),e(xb,QDo),e(xb,lV),e(lV,HDo),e(xb,UDo),e(Yr,JDo),e(Yr,$b),e($b,uhe),e(uhe,YDo),e($b,KDo),e($b,iV),e(iV,ZDo),e($b,eGo),e(Yr,oGo),e(Yr,kb),e(kb,bhe),e(bhe,rGo),e(kb,tGo),e(kb,dV),e(dV,aGo),e(kb,nGo),e(Yr,sGo),e(Yr,Sb),e(Sb,vhe),e(vhe,lGo),e(Sb,iGo),e(Sb,cV),e(cV,dGo),e(Sb,cGo),e(Yr,fGo),e(Yr,Rb),e(Rb,Fhe),e(Fhe,mGo),e(Rb,gGo),e(Rb,fV),e(fV,hGo),e(Rb,pGo),e(to,_Go),e(to,Pb),e(Pb,uGo),e(Pb,The),e(The,bGo),e(Pb,vGo),e(Pb,Mhe),e(Mhe,FGo),e(to,TGo),M(Bb,to,null),b(f,$je,u),b(f,Ji,u),e(Ji,Ib),e(Ib,Ehe),M(ZL,Ehe,null),e(Ji,MGo),e(Ji,Che),e(Che,EGo),b(f,kje,u),b(f,Io,u),M(ey,Io,null),e(Io,CGo),e(Io,Yi),e(Yi,wGo),e(Yi,mV),e(mV,AGo),e(Yi,LGo),e(Yi,gV),e(gV,yGo),e(Yi,xGo),e(Io,$Go),e(Io,oy),e(oy,kGo),e(oy,whe),e(whe,SGo),e(oy,RGo),e(Io,PGo),e(Io,ft),M(ry,ft,null),e(ft,BGo),e(ft,Ahe),e(Ahe,IGo),e(ft,NGo),e(ft,Ki),e(Ki,qGo),e(Ki,Lhe),e(Lhe,jGo),e(Ki,DGo),e(Ki,hV),e(hV,GGo),e(Ki,OGo),e(ft,VGo),M(Nb,ft,null),e(Io,XGo),e(Io,ao),M(ty,ao,null),e(ao,zGo),e(ao,yhe),e(yhe,WGo),e(ao,QGo),e(ao,Ia),e(Ia,HGo),e(Ia,xhe),e(xhe,UGo),e(Ia,JGo),e(Ia,$he),e($he,YGo),e(Ia,KGo),e(Ia,khe),e(khe,ZGo),e(Ia,eOo),e(ao,oOo),e(ao,U),e(U,qb),e(qb,She),e(She,rOo),e(qb,tOo),e(qb,pV),e(pV,aOo),e(qb,nOo),e(U,sOo),e(U,jb),e(jb,Rhe),e(Rhe,lOo),e(jb,iOo),e(jb,_V),e(_V,dOo),e(jb,cOo),e(U,fOo),e(U,Db),e(Db,Phe),e(Phe,mOo),e(Db,gOo),e(Db,uV),e(uV,hOo),e(Db,pOo),e(U,_Oo),e(U,Gb),e(Gb,Bhe),e(Bhe,uOo),e(Gb,bOo),e(Gb,bV),e(bV,vOo),e(Gb,FOo),e(U,TOo),e(U,Ob),e(Ob,Ihe),e(Ihe,MOo),e(Ob,EOo),e(Ob,vV),e(vV,COo),e(Ob,wOo),e(U,AOo),e(U,Vb),e(Vb,Nhe),e(Nhe,LOo),e(Vb,yOo),e(Vb,FV),e(FV,xOo),e(Vb,$Oo),e(U,kOo),e(U,Xb),e(Xb,qhe),e(qhe,SOo),e(Xb,ROo),e(Xb,TV),e(TV,POo),e(Xb,BOo),e(U,IOo),e(U,zb),e(zb,jhe),e(jhe,NOo),e(zb,qOo),e(zb,MV),e(MV,jOo),e(zb,DOo),e(U,GOo),e(U,Wb),e(Wb,Dhe),e(Dhe,OOo),e(Wb,VOo),e(Wb,EV),e(EV,XOo),e(Wb,zOo),e(U,WOo),e(U,Qb),e(Qb,Ghe),e(Ghe,QOo),e(Qb,HOo),e(Qb,CV),e(CV,UOo),e(Qb,JOo),e(U,YOo),e(U,Hb),e(Hb,Ohe),e(Ohe,KOo),e(Hb,ZOo),e(Hb,wV),e(wV,eVo),e(Hb,oVo),e(U,rVo),e(U,Ub),e(Ub,Vhe),e(Vhe,tVo),e(Ub,aVo),e(Ub,AV),e(AV,nVo),e(Ub,sVo),e(U,lVo),e(U,Jb),e(Jb,Xhe),e(Xhe,iVo),e(Jb,dVo),e(Jb,LV),e(LV,cVo),e(Jb,fVo),e(U,mVo),e(U,Yb),e(Yb,zhe),e(zhe,gVo),e(Yb,hVo),e(Yb,yV),e(yV,pVo),e(Yb,_Vo),e(U,uVo),e(U,Kb),e(Kb,Whe),e(Whe,bVo),e(Kb,vVo),e(Kb,xV),e(xV,FVo),e(Kb,TVo),e(U,MVo),e(U,Zb),e(Zb,Qhe),e(Qhe,EVo),e(Zb,CVo),e(Zb,$V),e($V,wVo),e(Zb,AVo),e(U,LVo),e(U,e2),e(e2,Hhe),e(Hhe,yVo),e(e2,xVo),e(e2,kV),e(kV,$Vo),e(e2,kVo),e(U,SVo),e(U,o2),e(o2,Uhe),e(Uhe,RVo),e(o2,PVo),e(o2,SV),e(SV,BVo),e(o2,IVo),e(U,NVo),e(U,r2),e(r2,Jhe),e(Jhe,qVo),e(r2,jVo),e(r2,RV),e(RV,DVo),e(r2,GVo),e(U,OVo),e(U,t2),e(t2,Yhe),e(Yhe,VVo),e(t2,XVo),e(t2,PV),e(PV,zVo),e(t2,WVo),e(U,QVo),e(U,a2),e(a2,Khe),e(Khe,HVo),e(a2,UVo),e(a2,BV),e(BV,JVo),e(a2,YVo),e(U,KVo),e(U,n2),e(n2,Zhe),e(Zhe,ZVo),e(n2,eXo),e(n2,IV),e(IV,oXo),e(n2,rXo),e(U,tXo),e(U,s2),e(s2,epe),e(epe,aXo),e(s2,nXo),e(s2,NV),e(NV,sXo),e(s2,lXo),e(U,iXo),e(U,l2),e(l2,ope),e(ope,dXo),e(l2,cXo),e(l2,qV),e(qV,fXo),e(l2,mXo),e(U,gXo),e(U,i2),e(i2,rpe),e(rpe,hXo),e(i2,pXo),e(i2,jV),e(jV,_Xo),e(i2,uXo),e(U,bXo),e(U,d2),e(d2,tpe),e(tpe,vXo),e(d2,FXo),e(d2,DV),e(DV,TXo),e(d2,MXo),e(U,EXo),e(U,c2),e(c2,ape),e(ape,CXo),e(c2,wXo),e(c2,GV),e(GV,AXo),e(c2,LXo),e(U,yXo),e(U,f2),e(f2,npe),e(npe,xXo),e(f2,$Xo),e(f2,OV),e(OV,kXo),e(f2,SXo),e(U,RXo),e(U,m2),e(m2,spe),e(spe,PXo),e(m2,BXo),e(m2,VV),e(VV,IXo),e(m2,NXo),e(U,qXo),e(U,g2),e(g2,lpe),e(lpe,jXo),e(g2,DXo),e(g2,XV),e(XV,GXo),e(g2,OXo),e(U,VXo),e(U,h2),e(h2,ipe),e(ipe,XXo),e(h2,zXo),e(h2,zV),e(zV,WXo),e(h2,QXo),e(U,HXo),e(U,p2),e(p2,dpe),e(dpe,UXo),e(p2,JXo),e(p2,WV),e(WV,YXo),e(p2,KXo),e(U,ZXo),e(U,_2),e(_2,cpe),e(cpe,ezo),e(_2,ozo),e(_2,QV),e(QV,rzo),e(_2,tzo),e(U,azo),e(U,u2),e(u2,fpe),e(fpe,nzo),e(u2,szo),e(u2,HV),e(HV,lzo),e(u2,izo),e(ao,dzo),e(ao,b2),e(b2,czo),e(b2,mpe),e(mpe,fzo),e(b2,mzo),e(b2,gpe),e(gpe,gzo),e(ao,hzo),M(v2,ao,null),b(f,Sje,u),b(f,Zi,u),e(Zi,F2),e(F2,hpe),M(ay,hpe,null),e(Zi,pzo),e(Zi,ppe),e(ppe,_zo),b(f,Rje,u),b(f,No,u),M(ny,No,null),e(No,uzo),e(No,ed),e(ed,bzo),e(ed,UV),e(UV,vzo),e(ed,Fzo),e(ed,JV),e(JV,Tzo),e(ed,Mzo),e(No,Ezo),e(No,sy),e(sy,Czo),e(sy,_pe),e(_pe,wzo),e(sy,Azo),e(No,Lzo),e(No,mt),M(ly,mt,null),e(mt,yzo),e(mt,upe),e(upe,xzo),e(mt,$zo),e(mt,od),e(od,kzo),e(od,bpe),e(bpe,Szo),e(od,Rzo),e(od,YV),e(YV,Pzo),e(od,Bzo),e(mt,Izo),M(T2,mt,null),e(No,Nzo),e(No,no),M(iy,no,null),e(no,qzo),e(no,vpe),e(vpe,jzo),e(no,Dzo),e(no,Na),e(Na,Gzo),e(Na,Fpe),e(Fpe,Ozo),e(Na,Vzo),e(Na,Tpe),e(Tpe,Xzo),e(Na,zzo),e(Na,Mpe),e(Mpe,Wzo),e(Na,Qzo),e(no,Hzo),e(no,V),e(V,M2),e(M2,Epe),e(Epe,Uzo),e(M2,Jzo),e(M2,KV),e(KV,Yzo),e(M2,Kzo),e(V,Zzo),e(V,E2),e(E2,Cpe),e(Cpe,eWo),e(E2,oWo),e(E2,ZV),e(ZV,rWo),e(E2,tWo),e(V,aWo),e(V,C2),e(C2,wpe),e(wpe,nWo),e(C2,sWo),e(C2,eX),e(eX,lWo),e(C2,iWo),e(V,dWo),e(V,w2),e(w2,Ape),e(Ape,cWo),e(w2,fWo),e(w2,oX),e(oX,mWo),e(w2,gWo),e(V,hWo),e(V,A2),e(A2,Lpe),e(Lpe,pWo),e(A2,_Wo),e(A2,rX),e(rX,uWo),e(A2,bWo),e(V,vWo),e(V,L2),e(L2,ype),e(ype,FWo),e(L2,TWo),e(L2,tX),e(tX,MWo),e(L2,EWo),e(V,CWo),e(V,y2),e(y2,xpe),e(xpe,wWo),e(y2,AWo),e(y2,aX),e(aX,LWo),e(y2,yWo),e(V,xWo),e(V,x2),e(x2,$pe),e($pe,$Wo),e(x2,kWo),e(x2,nX),e(nX,SWo),e(x2,RWo),e(V,PWo),e(V,$2),e($2,kpe),e(kpe,BWo),e($2,IWo),e($2,sX),e(sX,NWo),e($2,qWo),e(V,jWo),e(V,k2),e(k2,Spe),e(Spe,DWo),e(k2,GWo),e(k2,lX),e(lX,OWo),e(k2,VWo),e(V,XWo),e(V,S2),e(S2,Rpe),e(Rpe,zWo),e(S2,WWo),e(S2,iX),e(iX,QWo),e(S2,HWo),e(V,UWo),e(V,R2),e(R2,Ppe),e(Ppe,JWo),e(R2,YWo),e(R2,dX),e(dX,KWo),e(R2,ZWo),e(V,eQo),e(V,P2),e(P2,Bpe),e(Bpe,oQo),e(P2,rQo),e(P2,cX),e(cX,tQo),e(P2,aQo),e(V,nQo),e(V,B2),e(B2,Ipe),e(Ipe,sQo),e(B2,lQo),e(B2,fX),e(fX,iQo),e(B2,dQo),e(V,cQo),e(V,I2),e(I2,Npe),e(Npe,fQo),e(I2,mQo),e(I2,mX),e(mX,gQo),e(I2,hQo),e(V,pQo),e(V,N2),e(N2,qpe),e(qpe,_Qo),e(N2,uQo),e(N2,gX),e(gX,bQo),e(N2,vQo),e(V,FQo),e(V,q2),e(q2,jpe),e(jpe,TQo),e(q2,MQo),e(q2,hX),e(hX,EQo),e(q2,CQo),e(V,wQo),e(V,j2),e(j2,Dpe),e(Dpe,AQo),e(j2,LQo),e(j2,pX),e(pX,yQo),e(j2,xQo),e(V,$Qo),e(V,D2),e(D2,Gpe),e(Gpe,kQo),e(D2,SQo),e(D2,_X),e(_X,RQo),e(D2,PQo),e(V,BQo),e(V,G2),e(G2,Ope),e(Ope,IQo),e(G2,NQo),e(G2,uX),e(uX,qQo),e(G2,jQo),e(V,DQo),e(V,O2),e(O2,Vpe),e(Vpe,GQo),e(O2,OQo),e(O2,bX),e(bX,VQo),e(O2,XQo),e(V,zQo),e(V,V2),e(V2,Xpe),e(Xpe,WQo),e(V2,QQo),e(V2,vX),e(vX,HQo),e(V2,UQo),e(V,JQo),e(V,X2),e(X2,zpe),e(zpe,YQo),e(X2,KQo),e(X2,FX),e(FX,ZQo),e(X2,eHo),e(V,oHo),e(V,z2),e(z2,Wpe),e(Wpe,rHo),e(z2,tHo),e(z2,TX),e(TX,aHo),e(z2,nHo),e(V,sHo),e(V,W2),e(W2,Qpe),e(Qpe,lHo),e(W2,iHo),e(W2,MX),e(MX,dHo),e(W2,cHo),e(V,fHo),e(V,Q2),e(Q2,Hpe),e(Hpe,mHo),e(Q2,gHo),e(Q2,EX),e(EX,hHo),e(Q2,pHo),e(V,_Ho),e(V,H2),e(H2,Upe),e(Upe,uHo),e(H2,bHo),e(H2,CX),e(CX,vHo),e(H2,FHo),e(V,THo),e(V,U2),e(U2,Jpe),e(Jpe,MHo),e(U2,EHo),e(U2,wX),e(wX,CHo),e(U2,wHo),e(V,AHo),e(V,J2),e(J2,Ype),e(Ype,LHo),e(J2,yHo),e(J2,AX),e(AX,xHo),e(J2,$Ho),e(V,kHo),e(V,Y2),e(Y2,Kpe),e(Kpe,SHo),e(Y2,RHo),e(Y2,LX),e(LX,PHo),e(Y2,BHo),e(V,IHo),e(V,K2),e(K2,Zpe),e(Zpe,NHo),e(K2,qHo),e(K2,yX),e(yX,jHo),e(K2,DHo),e(V,GHo),e(V,Z2),e(Z2,e_e),e(e_e,OHo),e(Z2,VHo),e(Z2,xX),e(xX,XHo),e(Z2,zHo),e(V,WHo),e(V,ev),e(ev,o_e),e(o_e,QHo),e(ev,HHo),e(ev,$X),e($X,UHo),e(ev,JHo),e(V,YHo),e(V,ov),e(ov,r_e),e(r_e,KHo),e(ov,ZHo),e(ov,kX),e(kX,eUo),e(ov,oUo),e(V,rUo),e(V,rv),e(rv,t_e),e(t_e,tUo),e(rv,aUo),e(rv,SX),e(SX,nUo),e(rv,sUo),e(V,lUo),e(V,tv),e(tv,a_e),e(a_e,iUo),e(tv,dUo),e(tv,RX),e(RX,cUo),e(tv,fUo),e(V,mUo),e(V,av),e(av,n_e),e(n_e,gUo),e(av,hUo),e(av,PX),e(PX,pUo),e(av,_Uo),e(V,uUo),e(V,nv),e(nv,s_e),e(s_e,bUo),e(nv,vUo),e(nv,BX),e(BX,FUo),e(nv,TUo),e(V,MUo),e(V,sv),e(sv,l_e),e(l_e,EUo),e(sv,CUo),e(sv,IX),e(IX,wUo),e(sv,AUo),e(V,LUo),e(V,lv),e(lv,i_e),e(i_e,yUo),e(lv,xUo),e(lv,NX),e(NX,$Uo),e(lv,kUo),e(no,SUo),e(no,iv),e(iv,RUo),e(iv,d_e),e(d_e,PUo),e(iv,BUo),e(iv,c_e),e(c_e,IUo),e(no,NUo),M(dv,no,null),b(f,Pje,u),b(f,rd,u),e(rd,cv),e(cv,f_e),M(dy,f_e,null),e(rd,qUo),e(rd,m_e),e(m_e,jUo),b(f,Bje,u),b(f,qo,u),M(cy,qo,null),e(qo,DUo),e(qo,td),e(td,GUo),e(td,qX),e(qX,OUo),e(td,VUo),e(td,jX),e(jX,XUo),e(td,zUo),e(qo,WUo),e(qo,fy),e(fy,QUo),e(fy,g_e),e(g_e,HUo),e(fy,UUo),e(qo,JUo),e(qo,gt),M(my,gt,null),e(gt,YUo),e(gt,h_e),e(h_e,KUo),e(gt,ZUo),e(gt,ad),e(ad,eJo),e(ad,p_e),e(p_e,oJo),e(ad,rJo),e(ad,DX),e(DX,tJo),e(ad,aJo),e(gt,nJo),M(fv,gt,null),e(qo,sJo),e(qo,so),M(gy,so,null),e(so,lJo),e(so,__e),e(__e,iJo),e(so,dJo),e(so,qa),e(qa,cJo),e(qa,u_e),e(u_e,fJo),e(qa,mJo),e(qa,b_e),e(b_e,gJo),e(qa,hJo),e(qa,v_e),e(v_e,pJo),e(qa,_Jo),e(so,uJo),e(so,F_e),e(F_e,mv),e(mv,T_e),e(T_e,bJo),e(mv,vJo),e(mv,GX),e(GX,FJo),e(mv,TJo),e(so,MJo),e(so,gv),e(gv,EJo),e(gv,M_e),e(M_e,CJo),e(gv,wJo),e(gv,E_e),e(E_e,AJo),e(so,LJo),M(hv,so,null),b(f,Ije,u),b(f,nd,u),e(nd,pv),e(pv,C_e),M(hy,C_e,null),e(nd,yJo),e(nd,w_e),e(w_e,xJo),b(f,Nje,u),b(f,jo,u),M(py,jo,null),e(jo,$Jo),e(jo,sd),e(sd,kJo),e(sd,OX),e(OX,SJo),e(sd,RJo),e(sd,VX),e(VX,PJo),e(sd,BJo),e(jo,IJo),e(jo,_y),e(_y,NJo),e(_y,A_e),e(A_e,qJo),e(_y,jJo),e(jo,DJo),e(jo,ht),M(uy,ht,null),e(ht,GJo),e(ht,L_e),e(L_e,OJo),e(ht,VJo),e(ht,ld),e(ld,XJo),e(ld,y_e),e(y_e,zJo),e(ld,WJo),e(ld,XX),e(XX,QJo),e(ld,HJo),e(ht,UJo),M(_v,ht,null),e(jo,JJo),e(jo,lo),M(by,lo,null),e(lo,YJo),e(lo,x_e),e(x_e,KJo),e(lo,ZJo),e(lo,ja),e(ja,eYo),e(ja,$_e),e($_e,oYo),e(ja,rYo),e(ja,k_e),e(k_e,tYo),e(ja,aYo),e(ja,S_e),e(S_e,nYo),e(ja,sYo),e(lo,lYo),e(lo,ve),e(ve,uv),e(uv,R_e),e(R_e,iYo),e(uv,dYo),e(uv,zX),e(zX,cYo),e(uv,fYo),e(ve,mYo),e(ve,bv),e(bv,P_e),e(P_e,gYo),e(bv,hYo),e(bv,WX),e(WX,pYo),e(bv,_Yo),e(ve,uYo),e(ve,vv),e(vv,B_e),e(B_e,bYo),e(vv,vYo),e(vv,QX),e(QX,FYo),e(vv,TYo),e(ve,MYo),e(ve,Fv),e(Fv,I_e),e(I_e,EYo),e(Fv,CYo),e(Fv,HX),e(HX,wYo),e(Fv,AYo),e(ve,LYo),e(ve,Bs),e(Bs,N_e),e(N_e,yYo),e(Bs,xYo),e(Bs,UX),e(UX,$Yo),e(Bs,kYo),e(Bs,JX),e(JX,SYo),e(Bs,RYo),e(ve,PYo),e(ve,Tv),e(Tv,q_e),e(q_e,BYo),e(Tv,IYo),e(Tv,YX),e(YX,NYo),e(Tv,qYo),e(ve,jYo),e(ve,Is),e(Is,j_e),e(j_e,DYo),e(Is,GYo),e(Is,KX),e(KX,OYo),e(Is,VYo),e(Is,ZX),e(ZX,XYo),e(Is,zYo),e(ve,WYo),e(ve,pt),e(pt,D_e),e(D_e,QYo),e(pt,HYo),e(pt,ez),e(ez,UYo),e(pt,JYo),e(pt,oz),e(oz,YYo),e(pt,KYo),e(pt,rz),e(rz,ZYo),e(pt,eKo),e(ve,oKo),e(ve,Mv),e(Mv,G_e),e(G_e,rKo),e(Mv,tKo),e(Mv,tz),e(tz,aKo),e(Mv,nKo),e(ve,sKo),e(ve,Ev),e(Ev,O_e),e(O_e,lKo),e(Ev,iKo),e(Ev,az),e(az,dKo),e(Ev,cKo),e(ve,fKo),e(ve,Cv),e(Cv,V_e),e(V_e,mKo),e(Cv,gKo),e(Cv,nz),e(nz,hKo),e(Cv,pKo),e(ve,_Ko),e(ve,wv),e(wv,X_e),e(X_e,uKo),e(wv,bKo),e(wv,sz),e(sz,vKo),e(wv,FKo),e(ve,TKo),e(ve,Av),e(Av,z_e),e(z_e,MKo),e(Av,EKo),e(Av,lz),e(lz,CKo),e(Av,wKo),e(ve,AKo),e(ve,Lv),e(Lv,W_e),e(W_e,LKo),e(Lv,yKo),e(Lv,iz),e(iz,xKo),e(Lv,$Ko),e(ve,kKo),e(ve,yv),e(yv,Q_e),e(Q_e,SKo),e(yv,RKo),e(yv,dz),e(dz,PKo),e(yv,BKo),e(lo,IKo),e(lo,xv),e(xv,NKo),e(xv,H_e),e(H_e,qKo),e(xv,jKo),e(xv,U_e),e(U_e,DKo),e(lo,GKo),M($v,lo,null),b(f,qje,u),b(f,id,u),e(id,kv),e(kv,J_e),M(vy,J_e,null),e(id,OKo),e(id,Y_e),e(Y_e,VKo),b(f,jje,u),b(f,Do,u),M(Fy,Do,null),e(Do,XKo),e(Do,dd),e(dd,zKo),e(dd,cz),e(cz,WKo),e(dd,QKo),e(dd,fz),e(fz,HKo),e(dd,UKo),e(Do,JKo),e(Do,Ty),e(Ty,YKo),e(Ty,K_e),e(K_e,KKo),e(Ty,ZKo),e(Do,eZo),e(Do,_t),M(My,_t,null),e(_t,oZo),e(_t,Z_e),e(Z_e,rZo),e(_t,tZo),e(_t,cd),e(cd,aZo),e(cd,eue),e(eue,nZo),e(cd,sZo),e(cd,mz),e(mz,lZo),e(cd,iZo),e(_t,dZo),M(Sv,_t,null),e(Do,cZo),e(Do,io),M(Ey,io,null),e(io,fZo),e(io,oue),e(oue,mZo),e(io,gZo),e(io,Da),e(Da,hZo),e(Da,rue),e(rue,pZo),e(Da,_Zo),e(Da,tue),e(tue,uZo),e(Da,bZo),e(Da,aue),e(aue,vZo),e(Da,FZo),e(io,TZo),e(io,nue),e(nue,Rv),e(Rv,sue),e(sue,MZo),e(Rv,EZo),e(Rv,gz),e(gz,CZo),e(Rv,wZo),e(io,AZo),e(io,Pv),e(Pv,LZo),e(Pv,lue),e(lue,yZo),e(Pv,xZo),e(Pv,iue),e(iue,$Zo),e(io,kZo),M(Bv,io,null),b(f,Dje,u),b(f,fd,u),e(fd,Iv),e(Iv,due),M(Cy,due,null),e(fd,SZo),e(fd,cue),e(cue,RZo),b(f,Gje,u),b(f,Go,u),M(wy,Go,null),e(Go,PZo),e(Go,md),e(md,BZo),e(md,hz),e(hz,IZo),e(md,NZo),e(md,pz),e(pz,qZo),e(md,jZo),e(Go,DZo),e(Go,Ay),e(Ay,GZo),e(Ay,fue),e(fue,OZo),e(Ay,VZo),e(Go,XZo),e(Go,ut),M(Ly,ut,null),e(ut,zZo),e(ut,mue),e(mue,WZo),e(ut,QZo),e(ut,gd),e(gd,HZo),e(gd,gue),e(gue,UZo),e(gd,JZo),e(gd,_z),e(_z,YZo),e(gd,KZo),e(ut,ZZo),M(Nv,ut,null),e(Go,eer),e(Go,co),M(yy,co,null),e(co,oer),e(co,hue),e(hue,rer),e(co,ter),e(co,Ga),e(Ga,aer),e(Ga,pue),e(pue,ner),e(Ga,ser),e(Ga,_ue),e(_ue,ler),e(Ga,ier),e(Ga,uue),e(uue,der),e(Ga,cer),e(co,fer),e(co,Se),e(Se,qv),e(qv,bue),e(bue,mer),e(qv,ger),e(qv,uz),e(uz,her),e(qv,per),e(Se,_er),e(Se,jv),e(jv,vue),e(vue,uer),e(jv,ber),e(jv,bz),e(bz,ver),e(jv,Fer),e(Se,Ter),e(Se,Dv),e(Dv,Fue),e(Fue,Mer),e(Dv,Eer),e(Dv,vz),e(vz,Cer),e(Dv,wer),e(Se,Aer),e(Se,Gv),e(Gv,Tue),e(Tue,Ler),e(Gv,yer),e(Gv,Fz),e(Fz,xer),e(Gv,$er),e(Se,ker),e(Se,Ov),e(Ov,Mue),e(Mue,Ser),e(Ov,Rer),e(Ov,Tz),e(Tz,Per),e(Ov,Ber),e(Se,Ier),e(Se,Vv),e(Vv,Eue),e(Eue,Ner),e(Vv,qer),e(Vv,Mz),e(Mz,jer),e(Vv,Der),e(Se,Ger),e(Se,Xv),e(Xv,Cue),e(Cue,Oer),e(Xv,Ver),e(Xv,Ez),e(Ez,Xer),e(Xv,zer),e(Se,Wer),e(Se,zv),e(zv,wue),e(wue,Qer),e(zv,Her),e(zv,Cz),e(Cz,Uer),e(zv,Jer),e(Se,Yer),e(Se,Wv),e(Wv,Aue),e(Aue,Ker),e(Wv,Zer),e(Wv,wz),e(wz,eor),e(Wv,oor),e(co,ror),e(co,Qv),e(Qv,tor),e(Qv,Lue),e(Lue,aor),e(Qv,nor),e(Qv,yue),e(yue,sor),e(co,lor),M(Hv,co,null),b(f,Oje,u),b(f,hd,u),e(hd,Uv),e(Uv,xue),M(xy,xue,null),e(hd,ior),e(hd,$ue),e($ue,dor),b(f,Vje,u),b(f,Oo,u),M($y,Oo,null),e(Oo,cor),e(Oo,pd),e(pd,mor),e(pd,Az),e(Az,gor),e(pd,hor),e(pd,Lz),e(Lz,por),e(pd,_or),e(Oo,uor),e(Oo,ky),e(ky,bor),e(ky,kue),e(kue,vor),e(ky,For),e(Oo,Tor),e(Oo,bt),M(Sy,bt,null),e(bt,Mor),e(bt,Sue),e(Sue,Eor),e(bt,Cor),e(bt,_d),e(_d,wor),e(_d,Rue),e(Rue,Aor),e(_d,Lor),e(_d,yz),e(yz,yor),e(_d,xor),e(bt,$or),M(Jv,bt,null),e(Oo,kor),e(Oo,fo),M(Ry,fo,null),e(fo,Sor),e(fo,Pue),e(Pue,Ror),e(fo,Por),e(fo,Oa),e(Oa,Bor),e(Oa,Bue),e(Bue,Ior),e(Oa,Nor),e(Oa,Iue),e(Iue,qor),e(Oa,jor),e(Oa,Nue),e(Nue,Dor),e(Oa,Gor),e(fo,Oor),e(fo,Kr),e(Kr,Yv),e(Yv,que),e(que,Vor),e(Yv,Xor),e(Yv,xz),e(xz,zor),e(Yv,Wor),e(Kr,Qor),e(Kr,Kv),e(Kv,jue),e(jue,Hor),e(Kv,Uor),e(Kv,$z),e($z,Jor),e(Kv,Yor),e(Kr,Kor),e(Kr,Zv),e(Zv,Due),e(Due,Zor),e(Zv,err),e(Zv,kz),e(kz,orr),e(Zv,rrr),e(Kr,trr),e(Kr,eF),e(eF,Gue),e(Gue,arr),e(eF,nrr),e(eF,Sz),e(Sz,srr),e(eF,lrr),e(Kr,irr),e(Kr,oF),e(oF,Oue),e(Oue,drr),e(oF,crr),e(oF,Rz),e(Rz,frr),e(oF,mrr),e(fo,grr),e(fo,rF),e(rF,hrr),e(rF,Vue),e(Vue,prr),e(rF,_rr),e(rF,Xue),e(Xue,urr),e(fo,brr),M(tF,fo,null),b(f,Xje,u),b(f,ud,u),e(ud,aF),e(aF,zue),M(Py,zue,null),e(ud,vrr),e(ud,Wue),e(Wue,Frr),b(f,zje,u),b(f,Vo,u),M(By,Vo,null),e(Vo,Trr),e(Vo,bd),e(bd,Mrr),e(bd,Pz),e(Pz,Err),e(bd,Crr),e(bd,Bz),e(Bz,wrr),e(bd,Arr),e(Vo,Lrr),e(Vo,Iy),e(Iy,yrr),e(Iy,Que),e(Que,xrr),e(Iy,$rr),e(Vo,krr),e(Vo,vt),M(Ny,vt,null),e(vt,Srr),e(vt,Hue),e(Hue,Rrr),e(vt,Prr),e(vt,vd),e(vd,Brr),e(vd,Uue),e(Uue,Irr),e(vd,Nrr),e(vd,Iz),e(Iz,qrr),e(vd,jrr),e(vt,Drr),M(nF,vt,null),e(Vo,Grr),e(Vo,mo),M(qy,mo,null),e(mo,Orr),e(mo,Jue),e(Jue,Vrr),e(mo,Xrr),e(mo,Va),e(Va,zrr),e(Va,Yue),e(Yue,Wrr),e(Va,Qrr),e(Va,Kue),e(Kue,Hrr),e(Va,Urr),e(Va,Zue),e(Zue,Jrr),e(Va,Yrr),e(mo,Krr),e(mo,Re),e(Re,sF),e(sF,e4e),e(e4e,Zrr),e(sF,etr),e(sF,Nz),e(Nz,otr),e(sF,rtr),e(Re,ttr),e(Re,lF),e(lF,o4e),e(o4e,atr),e(lF,ntr),e(lF,qz),e(qz,str),e(lF,ltr),e(Re,itr),e(Re,iF),e(iF,r4e),e(r4e,dtr),e(iF,ctr),e(iF,jz),e(jz,ftr),e(iF,mtr),e(Re,gtr),e(Re,dF),e(dF,t4e),e(t4e,htr),e(dF,ptr),e(dF,Dz),e(Dz,_tr),e(dF,utr),e(Re,btr),e(Re,cF),e(cF,a4e),e(a4e,vtr),e(cF,Ftr),e(cF,Gz),e(Gz,Ttr),e(cF,Mtr),e(Re,Etr),e(Re,fF),e(fF,n4e),e(n4e,Ctr),e(fF,wtr),e(fF,Oz),e(Oz,Atr),e(fF,Ltr),e(Re,ytr),e(Re,mF),e(mF,s4e),e(s4e,xtr),e(mF,$tr),e(mF,Vz),e(Vz,ktr),e(mF,Str),e(Re,Rtr),e(Re,gF),e(gF,l4e),e(l4e,Ptr),e(gF,Btr),e(gF,Xz),e(Xz,Itr),e(gF,Ntr),e(Re,qtr),e(Re,hF),e(hF,i4e),e(i4e,jtr),e(hF,Dtr),e(hF,zz),e(zz,Gtr),e(hF,Otr),e(mo,Vtr),e(mo,pF),e(pF,Xtr),e(pF,d4e),e(d4e,ztr),e(pF,Wtr),e(pF,c4e),e(c4e,Qtr),e(mo,Htr),M(_F,mo,null),b(f,Wje,u),b(f,Fd,u),e(Fd,uF),e(uF,f4e),M(jy,f4e,null),e(Fd,Utr),e(Fd,m4e),e(m4e,Jtr),b(f,Qje,u),b(f,Xo,u),M(Dy,Xo,null),e(Xo,Ytr),e(Xo,Td),e(Td,Ktr),e(Td,Wz),e(Wz,Ztr),e(Td,ear),e(Td,Qz),e(Qz,oar),e(Td,rar),e(Xo,tar),e(Xo,Gy),e(Gy,aar),e(Gy,g4e),e(g4e,nar),e(Gy,sar),e(Xo,lar),e(Xo,Ft),M(Oy,Ft,null),e(Ft,iar),e(Ft,h4e),e(h4e,dar),e(Ft,car),e(Ft,Md),e(Md,far),e(Md,p4e),e(p4e,mar),e(Md,gar),e(Md,Hz),e(Hz,har),e(Md,par),e(Ft,_ar),M(bF,Ft,null),e(Xo,uar),e(Xo,go),M(Vy,go,null),e(go,bar),e(go,_4e),e(_4e,Far),e(go,Tar),e(go,Xa),e(Xa,Mar),e(Xa,u4e),e(u4e,Ear),e(Xa,Car),e(Xa,b4e),e(b4e,war),e(Xa,Aar),e(Xa,v4e),e(v4e,Lar),e(Xa,yar),e(go,xar),e(go,Xy),e(Xy,vF),e(vF,F4e),e(F4e,$ar),e(vF,kar),e(vF,Uz),e(Uz,Sar),e(vF,Rar),e(Xy,Par),e(Xy,FF),e(FF,T4e),e(T4e,Bar),e(FF,Iar),e(FF,Jz),e(Jz,Nar),e(FF,qar),e(go,jar),e(go,TF),e(TF,Dar),e(TF,M4e),e(M4e,Gar),e(TF,Oar),e(TF,E4e),e(E4e,Var),e(go,Xar),M(MF,go,null),b(f,Hje,u),b(f,Ed,u),e(Ed,EF),e(EF,C4e),M(zy,C4e,null),e(Ed,zar),e(Ed,w4e),e(w4e,War),b(f,Uje,u),b(f,zo,u),M(Wy,zo,null),e(zo,Qar),e(zo,Cd),e(Cd,Har),e(Cd,Yz),e(Yz,Uar),e(Cd,Jar),e(Cd,Kz),e(Kz,Yar),e(Cd,Kar),e(zo,Zar),e(zo,Qy),e(Qy,enr),e(Qy,A4e),e(A4e,onr),e(Qy,rnr),e(zo,tnr),e(zo,Tt),M(Hy,Tt,null),e(Tt,anr),e(Tt,L4e),e(L4e,nnr),e(Tt,snr),e(Tt,wd),e(wd,lnr),e(wd,y4e),e(y4e,inr),e(wd,dnr),e(wd,Zz),e(Zz,cnr),e(wd,fnr),e(Tt,mnr),M(CF,Tt,null),e(zo,gnr),e(zo,ho),M(Uy,ho,null),e(ho,hnr),e(ho,x4e),e(x4e,pnr),e(ho,_nr),e(ho,za),e(za,unr),e(za,$4e),e($4e,bnr),e(za,vnr),e(za,k4e),e(k4e,Fnr),e(za,Tnr),e(za,S4e),e(S4e,Mnr),e(za,Enr),e(ho,Cnr),e(ho,Zr),e(Zr,wF),e(wF,R4e),e(R4e,wnr),e(wF,Anr),e(wF,eW),e(eW,Lnr),e(wF,ynr),e(Zr,xnr),e(Zr,AF),e(AF,P4e),e(P4e,$nr),e(AF,knr),e(AF,oW),e(oW,Snr),e(AF,Rnr),e(Zr,Pnr),e(Zr,LF),e(LF,B4e),e(B4e,Bnr),e(LF,Inr),e(LF,rW),e(rW,Nnr),e(LF,qnr),e(Zr,jnr),e(Zr,yF),e(yF,I4e),e(I4e,Dnr),e(yF,Gnr),e(yF,tW),e(tW,Onr),e(yF,Vnr),e(Zr,Xnr),e(Zr,xF),e(xF,N4e),e(N4e,znr),e(xF,Wnr),e(xF,aW),e(aW,Qnr),e(xF,Hnr),e(ho,Unr),e(ho,$F),e($F,Jnr),e($F,q4e),e(q4e,Ynr),e($F,Knr),e($F,j4e),e(j4e,Znr),e(ho,esr),M(kF,ho,null),b(f,Jje,u),b(f,Ad,u),e(Ad,SF),e(SF,D4e),M(Jy,D4e,null),e(Ad,osr),e(Ad,G4e),e(G4e,rsr),b(f,Yje,u),b(f,Wo,u),M(Yy,Wo,null),e(Wo,tsr),e(Wo,Ld),e(Ld,asr),e(Ld,nW),e(nW,nsr),e(Ld,ssr),e(Ld,sW),e(sW,lsr),e(Ld,isr),e(Wo,dsr),e(Wo,Ky),e(Ky,csr),e(Ky,O4e),e(O4e,fsr),e(Ky,msr),e(Wo,gsr),e(Wo,Mt),M(Zy,Mt,null),e(Mt,hsr),e(Mt,V4e),e(V4e,psr),e(Mt,_sr),e(Mt,yd),e(yd,usr),e(yd,X4e),e(X4e,bsr),e(yd,vsr),e(yd,lW),e(lW,Fsr),e(yd,Tsr),e(Mt,Msr),M(RF,Mt,null),e(Wo,Esr),e(Wo,po),M(e8,po,null),e(po,Csr),e(po,z4e),e(z4e,wsr),e(po,Asr),e(po,Wa),e(Wa,Lsr),e(Wa,W4e),e(W4e,ysr),e(Wa,xsr),e(Wa,Q4e),e(Q4e,$sr),e(Wa,ksr),e(Wa,H4e),e(H4e,Ssr),e(Wa,Rsr),e(po,Psr),e(po,xd),e(xd,PF),e(PF,U4e),e(U4e,Bsr),e(PF,Isr),e(PF,iW),e(iW,Nsr),e(PF,qsr),e(xd,jsr),e(xd,BF),e(BF,J4e),e(J4e,Dsr),e(BF,Gsr),e(BF,dW),e(dW,Osr),e(BF,Vsr),e(xd,Xsr),e(xd,IF),e(IF,Y4e),e(Y4e,zsr),e(IF,Wsr),e(IF,cW),e(cW,Qsr),e(IF,Hsr),e(po,Usr),e(po,NF),e(NF,Jsr),e(NF,K4e),e(K4e,Ysr),e(NF,Ksr),e(NF,Z4e),e(Z4e,Zsr),e(po,elr),M(qF,po,null),b(f,Kje,u),b(f,$d,u),e($d,jF),e(jF,e1e),M(o8,e1e,null),e($d,olr),e($d,o1e),e(o1e,rlr),b(f,Zje,u),b(f,Qo,u),M(r8,Qo,null),e(Qo,tlr),e(Qo,kd),e(kd,alr),e(kd,fW),e(fW,nlr),e(kd,slr),e(kd,mW),e(mW,llr),e(kd,ilr),e(Qo,dlr),e(Qo,t8),e(t8,clr),e(t8,r1e),e(r1e,flr),e(t8,mlr),e(Qo,glr),e(Qo,Et),M(a8,Et,null),e(Et,hlr),e(Et,t1e),e(t1e,plr),e(Et,_lr),e(Et,Sd),e(Sd,ulr),e(Sd,a1e),e(a1e,blr),e(Sd,vlr),e(Sd,gW),e(gW,Flr),e(Sd,Tlr),e(Et,Mlr),M(DF,Et,null),e(Qo,Elr),e(Qo,_o),M(n8,_o,null),e(_o,Clr),e(_o,n1e),e(n1e,wlr),e(_o,Alr),e(_o,Qa),e(Qa,Llr),e(Qa,s1e),e(s1e,ylr),e(Qa,xlr),e(Qa,l1e),e(l1e,$lr),e(Qa,klr),e(Qa,i1e),e(i1e,Slr),e(Qa,Rlr),e(_o,Plr),e(_o,s8),e(s8,GF),e(GF,d1e),e(d1e,Blr),e(GF,Ilr),e(GF,hW),e(hW,Nlr),e(GF,qlr),e(s8,jlr),e(s8,OF),e(OF,c1e),e(c1e,Dlr),e(OF,Glr),e(OF,pW),e(pW,Olr),e(OF,Vlr),e(_o,Xlr),e(_o,VF),e(VF,zlr),e(VF,f1e),e(f1e,Wlr),e(VF,Qlr),e(VF,m1e),e(m1e,Hlr),e(_o,Ulr),M(XF,_o,null),b(f,eDe,u),b(f,Rd,u),e(Rd,zF),e(zF,g1e),M(l8,g1e,null),e(Rd,Jlr),e(Rd,h1e),e(h1e,Ylr),b(f,oDe,u),b(f,Ho,u),M(i8,Ho,null),e(Ho,Klr),e(Ho,Pd),e(Pd,Zlr),e(Pd,_W),e(_W,eir),e(Pd,oir),e(Pd,uW),e(uW,rir),e(Pd,tir),e(Ho,air),e(Ho,d8),e(d8,nir),e(d8,p1e),e(p1e,sir),e(d8,lir),e(Ho,iir),e(Ho,Ct),M(c8,Ct,null),e(Ct,dir),e(Ct,_1e),e(_1e,cir),e(Ct,fir),e(Ct,Bd),e(Bd,mir),e(Bd,u1e),e(u1e,gir),e(Bd,hir),e(Bd,bW),e(bW,pir),e(Bd,_ir),e(Ct,uir),M(WF,Ct,null),e(Ho,bir),e(Ho,uo),M(f8,uo,null),e(uo,vir),e(uo,b1e),e(b1e,Fir),e(uo,Tir),e(uo,Ha),e(Ha,Mir),e(Ha,v1e),e(v1e,Eir),e(Ha,Cir),e(Ha,F1e),e(F1e,wir),e(Ha,Air),e(Ha,T1e),e(T1e,Lir),e(Ha,yir),e(uo,xir),e(uo,M1e),e(M1e,QF),e(QF,E1e),e(E1e,$ir),e(QF,kir),e(QF,vW),e(vW,Sir),e(QF,Rir),e(uo,Pir),e(uo,HF),e(HF,Bir),e(HF,C1e),e(C1e,Iir),e(HF,Nir),e(HF,w1e),e(w1e,qir),e(uo,jir),M(UF,uo,null),b(f,rDe,u),b(f,Id,u),e(Id,JF),e(JF,A1e),M(m8,A1e,null),e(Id,Dir),e(Id,L1e),e(L1e,Gir),b(f,tDe,u),b(f,Uo,u),M(g8,Uo,null),e(Uo,Oir),e(Uo,Nd),e(Nd,Vir),e(Nd,FW),e(FW,Xir),e(Nd,zir),e(Nd,TW),e(TW,Wir),e(Nd,Qir),e(Uo,Hir),e(Uo,h8),e(h8,Uir),e(h8,y1e),e(y1e,Jir),e(h8,Yir),e(Uo,Kir),e(Uo,wt),M(p8,wt,null),e(wt,Zir),e(wt,x1e),e(x1e,edr),e(wt,odr),e(wt,qd),e(qd,rdr),e(qd,$1e),e($1e,tdr),e(qd,adr),e(qd,MW),e(MW,ndr),e(qd,sdr),e(wt,ldr),M(YF,wt,null),e(Uo,idr),e(Uo,bo),M(_8,bo,null),e(bo,ddr),e(bo,k1e),e(k1e,cdr),e(bo,fdr),e(bo,Ua),e(Ua,mdr),e(Ua,S1e),e(S1e,gdr),e(Ua,hdr),e(Ua,R1e),e(R1e,pdr),e(Ua,_dr),e(Ua,P1e),e(P1e,udr),e(Ua,bdr),e(bo,vdr),e(bo,Ja),e(Ja,KF),e(KF,B1e),e(B1e,Fdr),e(KF,Tdr),e(KF,EW),e(EW,Mdr),e(KF,Edr),e(Ja,Cdr),e(Ja,ZF),e(ZF,I1e),e(I1e,wdr),e(ZF,Adr),e(ZF,CW),e(CW,Ldr),e(ZF,ydr),e(Ja,xdr),e(Ja,eT),e(eT,N1e),e(N1e,$dr),e(eT,kdr),e(eT,wW),e(wW,Sdr),e(eT,Rdr),e(Ja,Pdr),e(Ja,oT),e(oT,q1e),e(q1e,Bdr),e(oT,Idr),e(oT,AW),e(AW,Ndr),e(oT,qdr),e(bo,jdr),e(bo,rT),e(rT,Ddr),e(rT,j1e),e(j1e,Gdr),e(rT,Odr),e(rT,D1e),e(D1e,Vdr),e(bo,Xdr),M(tT,bo,null),b(f,aDe,u),b(f,jd,u),e(jd,aT),e(aT,G1e),M(u8,G1e,null),e(jd,zdr),e(jd,O1e),e(O1e,Wdr),b(f,nDe,u),b(f,Jo,u),M(b8,Jo,null),e(Jo,Qdr),e(Jo,Dd),e(Dd,Hdr),e(Dd,LW),e(LW,Udr),e(Dd,Jdr),e(Dd,yW),e(yW,Ydr),e(Dd,Kdr),e(Jo,Zdr),e(Jo,v8),e(v8,ecr),e(v8,V1e),e(V1e,ocr),e(v8,rcr),e(Jo,tcr),e(Jo,At),M(F8,At,null),e(At,acr),e(At,X1e),e(X1e,ncr),e(At,scr),e(At,Gd),e(Gd,lcr),e(Gd,z1e),e(z1e,icr),e(Gd,dcr),e(Gd,xW),e(xW,ccr),e(Gd,fcr),e(At,mcr),M(nT,At,null),e(Jo,gcr),e(Jo,vo),M(T8,vo,null),e(vo,hcr),e(vo,W1e),e(W1e,pcr),e(vo,_cr),e(vo,Ya),e(Ya,ucr),e(Ya,Q1e),e(Q1e,bcr),e(Ya,vcr),e(Ya,H1e),e(H1e,Fcr),e(Ya,Tcr),e(Ya,U1e),e(U1e,Mcr),e(Ya,Ecr),e(vo,Ccr),e(vo,J1e),e(J1e,sT),e(sT,Y1e),e(Y1e,wcr),e(sT,Acr),e(sT,$W),e($W,Lcr),e(sT,ycr),e(vo,xcr),e(vo,lT),e(lT,$cr),e(lT,K1e),e(K1e,kcr),e(lT,Scr),e(lT,Z1e),e(Z1e,Rcr),e(vo,Pcr),M(iT,vo,null),b(f,sDe,u),b(f,Od,u),e(Od,dT),e(dT,e7e),M(M8,e7e,null),e(Od,Bcr),e(Od,o7e),e(o7e,Icr),b(f,lDe,u),b(f,Yo,u),M(E8,Yo,null),e(Yo,Ncr),e(Yo,Vd),e(Vd,qcr),e(Vd,kW),e(kW,jcr),e(Vd,Dcr),e(Vd,SW),e(SW,Gcr),e(Vd,Ocr),e(Yo,Vcr),e(Yo,C8),e(C8,Xcr),e(C8,r7e),e(r7e,zcr),e(C8,Wcr),e(Yo,Qcr),e(Yo,Lt),M(w8,Lt,null),e(Lt,Hcr),e(Lt,t7e),e(t7e,Ucr),e(Lt,Jcr),e(Lt,Xd),e(Xd,Ycr),e(Xd,a7e),e(a7e,Kcr),e(Xd,Zcr),e(Xd,RW),e(RW,efr),e(Xd,ofr),e(Lt,rfr),M(cT,Lt,null),e(Yo,tfr),e(Yo,wr),M(A8,wr,null),e(wr,afr),e(wr,n7e),e(n7e,nfr),e(wr,sfr),e(wr,Ka),e(Ka,lfr),e(Ka,s7e),e(s7e,ifr),e(Ka,dfr),e(Ka,l7e),e(l7e,cfr),e(Ka,ffr),e(Ka,i7e),e(i7e,mfr),e(Ka,gfr),e(wr,hfr),e(wr,q),e(q,fT),e(fT,d7e),e(d7e,pfr),e(fT,_fr),e(fT,PW),e(PW,ufr),e(fT,bfr),e(q,vfr),e(q,mT),e(mT,c7e),e(c7e,Ffr),e(mT,Tfr),e(mT,BW),e(BW,Mfr),e(mT,Efr),e(q,Cfr),e(q,gT),e(gT,f7e),e(f7e,wfr),e(gT,Afr),e(gT,IW),e(IW,Lfr),e(gT,yfr),e(q,xfr),e(q,hT),e(hT,m7e),e(m7e,$fr),e(hT,kfr),e(hT,NW),e(NW,Sfr),e(hT,Rfr),e(q,Pfr),e(q,pT),e(pT,g7e),e(g7e,Bfr),e(pT,Ifr),e(pT,qW),e(qW,Nfr),e(pT,qfr),e(q,jfr),e(q,_T),e(_T,h7e),e(h7e,Dfr),e(_T,Gfr),e(_T,jW),e(jW,Ofr),e(_T,Vfr),e(q,Xfr),e(q,uT),e(uT,p7e),e(p7e,zfr),e(uT,Wfr),e(uT,DW),e(DW,Qfr),e(uT,Hfr),e(q,Ufr),e(q,bT),e(bT,_7e),e(_7e,Jfr),e(bT,Yfr),e(bT,GW),e(GW,Kfr),e(bT,Zfr),e(q,emr),e(q,vT),e(vT,u7e),e(u7e,omr),e(vT,rmr),e(vT,OW),e(OW,tmr),e(vT,amr),e(q,nmr),e(q,FT),e(FT,b7e),e(b7e,smr),e(FT,lmr),e(FT,VW),e(VW,imr),e(FT,dmr),e(q,cmr),e(q,TT),e(TT,v7e),e(v7e,fmr),e(TT,mmr),e(TT,XW),e(XW,gmr),e(TT,hmr),e(q,pmr),e(q,MT),e(MT,F7e),e(F7e,_mr),e(MT,umr),e(MT,zW),e(zW,bmr),e(MT,vmr),e(q,Fmr),e(q,ET),e(ET,T7e),e(T7e,Tmr),e(ET,Mmr),e(ET,WW),e(WW,Emr),e(ET,Cmr),e(q,wmr),e(q,CT),e(CT,M7e),e(M7e,Amr),e(CT,Lmr),e(CT,QW),e(QW,ymr),e(CT,xmr),e(q,$mr),e(q,wT),e(wT,E7e),e(E7e,kmr),e(wT,Smr),e(wT,HW),e(HW,Rmr),e(wT,Pmr),e(q,Bmr),e(q,AT),e(AT,C7e),e(C7e,Imr),e(AT,Nmr),e(AT,UW),e(UW,qmr),e(AT,jmr),e(q,Dmr),e(q,LT),e(LT,w7e),e(w7e,Gmr),e(LT,Omr),e(LT,JW),e(JW,Vmr),e(LT,Xmr),e(q,zmr),e(q,Ns),e(Ns,A7e),e(A7e,Wmr),e(Ns,Qmr),e(Ns,YW),e(YW,Hmr),e(Ns,Umr),e(Ns,KW),e(KW,Jmr),e(Ns,Ymr),e(q,Kmr),e(q,yT),e(yT,L7e),e(L7e,Zmr),e(yT,egr),e(yT,ZW),e(ZW,ogr),e(yT,rgr),e(q,tgr),e(q,xT),e(xT,y7e),e(y7e,agr),e(xT,ngr),e(xT,eQ),e(eQ,sgr),e(xT,lgr),e(q,igr),e(q,$T),e($T,x7e),e(x7e,dgr),e($T,cgr),e($T,oQ),e(oQ,fgr),e($T,mgr),e(q,ggr),e(q,kT),e(kT,$7e),e($7e,hgr),e(kT,pgr),e(kT,rQ),e(rQ,_gr),e(kT,ugr),e(q,bgr),e(q,ST),e(ST,k7e),e(k7e,vgr),e(ST,Fgr),e(ST,tQ),e(tQ,Tgr),e(ST,Mgr),e(q,Egr),e(q,RT),e(RT,S7e),e(S7e,Cgr),e(RT,wgr),e(RT,aQ),e(aQ,Agr),e(RT,Lgr),e(q,ygr),e(q,PT),e(PT,R7e),e(R7e,xgr),e(PT,$gr),e(PT,nQ),e(nQ,kgr),e(PT,Sgr),e(q,Rgr),e(q,BT),e(BT,P7e),e(P7e,Pgr),e(BT,Bgr),e(BT,sQ),e(sQ,Igr),e(BT,Ngr),e(q,qgr),e(q,IT),e(IT,B7e),e(B7e,jgr),e(IT,Dgr),e(IT,lQ),e(lQ,Ggr),e(IT,Ogr),e(q,Vgr),e(q,NT),e(NT,I7e),e(I7e,Xgr),e(NT,zgr),e(NT,iQ),e(iQ,Wgr),e(NT,Qgr),e(q,Hgr),e(q,qT),e(qT,N7e),e(N7e,Ugr),e(qT,Jgr),e(qT,dQ),e(dQ,Ygr),e(qT,Kgr),e(q,Zgr),e(q,jT),e(jT,q7e),e(q7e,ehr),e(jT,ohr),e(jT,cQ),e(cQ,rhr),e(jT,thr),e(q,ahr),e(q,DT),e(DT,j7e),e(j7e,nhr),e(DT,shr),e(DT,fQ),e(fQ,lhr),e(DT,ihr),e(q,dhr),e(q,GT),e(GT,D7e),e(D7e,chr),e(GT,fhr),e(GT,mQ),e(mQ,mhr),e(GT,ghr),e(q,hhr),e(q,OT),e(OT,G7e),e(G7e,phr),e(OT,_hr),e(OT,gQ),e(gQ,uhr),e(OT,bhr),e(q,vhr),e(q,VT),e(VT,O7e),e(O7e,Fhr),e(VT,Thr),e(VT,hQ),e(hQ,Mhr),e(VT,Ehr),e(q,Chr),e(q,XT),e(XT,V7e),e(V7e,whr),e(XT,Ahr),e(XT,pQ),e(pQ,Lhr),e(XT,yhr),e(q,xhr),e(q,zT),e(zT,X7e),e(X7e,$hr),e(zT,khr),e(zT,_Q),e(_Q,Shr),e(zT,Rhr),e(q,Phr),e(q,WT),e(WT,z7e),e(z7e,Bhr),e(WT,Ihr),e(WT,uQ),e(uQ,Nhr),e(WT,qhr),e(q,jhr),e(q,QT),e(QT,W7e),e(W7e,Dhr),e(QT,Ghr),e(QT,bQ),e(bQ,Ohr),e(QT,Vhr),e(q,Xhr),e(q,HT),e(HT,Q7e),e(Q7e,zhr),e(HT,Whr),e(HT,vQ),e(vQ,Qhr),e(HT,Hhr),e(q,Uhr),e(q,UT),e(UT,H7e),e(H7e,Jhr),e(UT,Yhr),e(UT,FQ),e(FQ,Khr),e(UT,Zhr),e(q,epr),e(q,JT),e(JT,U7e),e(U7e,opr),e(JT,rpr),e(JT,TQ),e(TQ,tpr),e(JT,apr),e(q,npr),e(q,YT),e(YT,J7e),e(J7e,spr),e(YT,lpr),e(YT,MQ),e(MQ,ipr),e(YT,dpr),e(q,cpr),e(q,KT),e(KT,Y7e),e(Y7e,fpr),e(KT,mpr),e(KT,EQ),e(EQ,gpr),e(KT,hpr),e(q,ppr),e(q,ZT),e(ZT,K7e),e(K7e,_pr),e(ZT,upr),e(ZT,CQ),e(CQ,bpr),e(ZT,vpr),e(q,Fpr),e(q,eM),e(eM,Z7e),e(Z7e,Tpr),e(eM,Mpr),e(eM,wQ),e(wQ,Epr),e(eM,Cpr),e(q,wpr),e(q,oM),e(oM,ebe),e(ebe,Apr),e(oM,Lpr),e(oM,AQ),e(AQ,ypr),e(oM,xpr),e(q,$pr),e(q,rM),e(rM,obe),e(obe,kpr),e(rM,Spr),e(rM,LQ),e(LQ,Rpr),e(rM,Ppr),e(wr,Bpr),M(tM,wr,null),b(f,iDe,u),b(f,zd,u),e(zd,aM),e(aM,rbe),M(L8,rbe,null),e(zd,Ipr),e(zd,tbe),e(tbe,Npr),b(f,dDe,u),b(f,Ko,u),M(y8,Ko,null),e(Ko,qpr),e(Ko,Wd),e(Wd,jpr),e(Wd,yQ),e(yQ,Dpr),e(Wd,Gpr),e(Wd,xQ),e(xQ,Opr),e(Wd,Vpr),e(Ko,Xpr),e(Ko,x8),e(x8,zpr),e(x8,abe),e(abe,Wpr),e(x8,Qpr),e(Ko,Hpr),e(Ko,yt),M($8,yt,null),e(yt,Upr),e(yt,nbe),e(nbe,Jpr),e(yt,Ypr),e(yt,Qd),e(Qd,Kpr),e(Qd,sbe),e(sbe,Zpr),e(Qd,e_r),e(Qd,$Q),e($Q,o_r),e(Qd,r_r),e(yt,t_r),M(nM,yt,null),e(Ko,a_r),e(Ko,Ar),M(k8,Ar,null),e(Ar,n_r),e(Ar,lbe),e(lbe,s_r),e(Ar,l_r),e(Ar,Za),e(Za,i_r),e(Za,ibe),e(ibe,d_r),e(Za,c_r),e(Za,dbe),e(dbe,f_r),e(Za,m_r),e(Za,cbe),e(cbe,g_r),e(Za,h_r),e(Ar,p_r),e(Ar,se),e(se,sM),e(sM,fbe),e(fbe,__r),e(sM,u_r),e(sM,kQ),e(kQ,b_r),e(sM,v_r),e(se,F_r),e(se,lM),e(lM,mbe),e(mbe,T_r),e(lM,M_r),e(lM,SQ),e(SQ,E_r),e(lM,C_r),e(se,w_r),e(se,iM),e(iM,gbe),e(gbe,A_r),e(iM,L_r),e(iM,RQ),e(RQ,y_r),e(iM,x_r),e(se,$_r),e(se,dM),e(dM,hbe),e(hbe,k_r),e(dM,S_r),e(dM,PQ),e(PQ,R_r),e(dM,P_r),e(se,B_r),e(se,cM),e(cM,pbe),e(pbe,I_r),e(cM,N_r),e(cM,BQ),e(BQ,q_r),e(cM,j_r),e(se,D_r),e(se,fM),e(fM,_be),e(_be,G_r),e(fM,O_r),e(fM,IQ),e(IQ,V_r),e(fM,X_r),e(se,z_r),e(se,mM),e(mM,ube),e(ube,W_r),e(mM,Q_r),e(mM,NQ),e(NQ,H_r),e(mM,U_r),e(se,J_r),e(se,gM),e(gM,bbe),e(bbe,Y_r),e(gM,K_r),e(gM,qQ),e(qQ,Z_r),e(gM,eur),e(se,our),e(se,hM),e(hM,vbe),e(vbe,rur),e(hM,tur),e(hM,jQ),e(jQ,aur),e(hM,nur),e(se,sur),e(se,pM),e(pM,Fbe),e(Fbe,lur),e(pM,iur),e(pM,DQ),e(DQ,dur),e(pM,cur),e(se,fur),e(se,_M),e(_M,Tbe),e(Tbe,mur),e(_M,gur),e(_M,GQ),e(GQ,hur),e(_M,pur),e(se,_ur),e(se,uM),e(uM,Mbe),e(Mbe,uur),e(uM,bur),e(uM,OQ),e(OQ,vur),e(uM,Fur),e(se,Tur),e(se,bM),e(bM,Ebe),e(Ebe,Mur),e(bM,Eur),e(bM,VQ),e(VQ,Cur),e(bM,wur),e(se,Aur),e(se,vM),e(vM,Cbe),e(Cbe,Lur),e(vM,yur),e(vM,XQ),e(XQ,xur),e(vM,$ur),e(se,kur),e(se,FM),e(FM,wbe),e(wbe,Sur),e(FM,Rur),e(FM,zQ),e(zQ,Pur),e(FM,Bur),e(se,Iur),e(se,TM),e(TM,Abe),e(Abe,Nur),e(TM,qur),e(TM,WQ),e(WQ,jur),e(TM,Dur),e(se,Gur),e(se,MM),e(MM,Lbe),e(Lbe,Our),e(MM,Vur),e(MM,QQ),e(QQ,Xur),e(MM,zur),e(se,Wur),e(se,EM),e(EM,ybe),e(ybe,Qur),e(EM,Hur),e(EM,HQ),e(HQ,Uur),e(EM,Jur),e(se,Yur),e(se,CM),e(CM,xbe),e(xbe,Kur),e(CM,Zur),e(CM,UQ),e(UQ,e4r),e(CM,o4r),e(se,r4r),e(se,wM),e(wM,$be),e($be,t4r),e(wM,a4r),e(wM,JQ),e(JQ,n4r),e(wM,s4r),e(se,l4r),e(se,AM),e(AM,kbe),e(kbe,i4r),e(AM,d4r),e(AM,YQ),e(YQ,c4r),e(AM,f4r),e(se,m4r),e(se,LM),e(LM,Sbe),e(Sbe,g4r),e(LM,h4r),e(LM,KQ),e(KQ,p4r),e(LM,_4r),e(se,u4r),e(se,yM),e(yM,Rbe),e(Rbe,b4r),e(yM,v4r),e(yM,ZQ),e(ZQ,F4r),e(yM,T4r),e(Ar,M4r),M(xM,Ar,null),b(f,cDe,u),b(f,Hd,u),e(Hd,$M),e($M,Pbe),M(S8,Pbe,null),e(Hd,E4r),e(Hd,Bbe),e(Bbe,C4r),b(f,fDe,u),b(f,Zo,u),M(R8,Zo,null),e(Zo,w4r),e(Zo,Ud),e(Ud,A4r),e(Ud,eH),e(eH,L4r),e(Ud,y4r),e(Ud,oH),e(oH,x4r),e(Ud,$4r),e(Zo,k4r),e(Zo,P8),e(P8,S4r),e(P8,Ibe),e(Ibe,R4r),e(P8,P4r),e(Zo,B4r),e(Zo,xt),M(B8,xt,null),e(xt,I4r),e(xt,Nbe),e(Nbe,N4r),e(xt,q4r),e(xt,Jd),e(Jd,j4r),e(Jd,qbe),e(qbe,D4r),e(Jd,G4r),e(Jd,rH),e(rH,O4r),e(Jd,V4r),e(xt,X4r),M(kM,xt,null),e(Zo,z4r),e(Zo,Lr),M(I8,Lr,null),e(Lr,W4r),e(Lr,jbe),e(jbe,Q4r),e(Lr,H4r),e(Lr,en),e(en,U4r),e(en,Dbe),e(Dbe,J4r),e(en,Y4r),e(en,Gbe),e(Gbe,K4r),e(en,Z4r),e(en,Obe),e(Obe,e1r),e(en,o1r),e(Lr,r1r),e(Lr,Me),e(Me,SM),e(SM,Vbe),e(Vbe,t1r),e(SM,a1r),e(SM,tH),e(tH,n1r),e(SM,s1r),e(Me,l1r),e(Me,RM),e(RM,Xbe),e(Xbe,i1r),e(RM,d1r),e(RM,aH),e(aH,c1r),e(RM,f1r),e(Me,m1r),e(Me,PM),e(PM,zbe),e(zbe,g1r),e(PM,h1r),e(PM,nH),e(nH,p1r),e(PM,_1r),e(Me,u1r),e(Me,BM),e(BM,Wbe),e(Wbe,b1r),e(BM,v1r),e(BM,sH),e(sH,F1r),e(BM,T1r),e(Me,M1r),e(Me,IM),e(IM,Qbe),e(Qbe,E1r),e(IM,C1r),e(IM,lH),e(lH,w1r),e(IM,A1r),e(Me,L1r),e(Me,NM),e(NM,Hbe),e(Hbe,y1r),e(NM,x1r),e(NM,iH),e(iH,$1r),e(NM,k1r),e(Me,S1r),e(Me,qM),e(qM,Ube),e(Ube,R1r),e(qM,P1r),e(qM,dH),e(dH,B1r),e(qM,I1r),e(Me,N1r),e(Me,jM),e(jM,Jbe),e(Jbe,q1r),e(jM,j1r),e(jM,cH),e(cH,D1r),e(jM,G1r),e(Me,O1r),e(Me,DM),e(DM,Ybe),e(Ybe,V1r),e(DM,X1r),e(DM,fH),e(fH,z1r),e(DM,W1r),e(Me,Q1r),e(Me,GM),e(GM,Kbe),e(Kbe,H1r),e(GM,U1r),e(GM,mH),e(mH,J1r),e(GM,Y1r),e(Me,K1r),e(Me,OM),e(OM,Zbe),e(Zbe,Z1r),e(OM,e7r),e(OM,gH),e(gH,o7r),e(OM,r7r),e(Me,t7r),e(Me,VM),e(VM,e2e),e(e2e,a7r),e(VM,n7r),e(VM,hH),e(hH,s7r),e(VM,l7r),e(Me,i7r),e(Me,XM),e(XM,o2e),e(o2e,d7r),e(XM,c7r),e(XM,pH),e(pH,f7r),e(XM,m7r),e(Lr,g7r),M(zM,Lr,null),b(f,mDe,u),b(f,Yd,u),e(Yd,WM),e(WM,r2e),M(N8,r2e,null),e(Yd,h7r),e(Yd,t2e),e(t2e,p7r),b(f,gDe,u),b(f,er,u),M(q8,er,null),e(er,_7r),e(er,Kd),e(Kd,u7r),e(Kd,_H),e(_H,b7r),e(Kd,v7r),e(Kd,uH),e(uH,F7r),e(Kd,T7r),e(er,M7r),e(er,j8),e(j8,E7r),e(j8,a2e),e(a2e,C7r),e(j8,w7r),e(er,A7r),e(er,$t),M(D8,$t,null),e($t,L7r),e($t,n2e),e(n2e,y7r),e($t,x7r),e($t,Zd),e(Zd,$7r),e(Zd,s2e),e(s2e,k7r),e(Zd,S7r),e(Zd,bH),e(bH,R7r),e(Zd,P7r),e($t,B7r),M(QM,$t,null),e(er,I7r),e(er,yr),M(G8,yr,null),e(yr,N7r),e(yr,l2e),e(l2e,q7r),e(yr,j7r),e(yr,on),e(on,D7r),e(on,i2e),e(i2e,G7r),e(on,O7r),e(on,d2e),e(d2e,V7r),e(on,X7r),e(on,c2e),e(c2e,z7r),e(on,W7r),e(yr,Q7r),e(yr,rn),e(rn,HM),e(HM,f2e),e(f2e,H7r),e(HM,U7r),e(HM,vH),e(vH,J7r),e(HM,Y7r),e(rn,K7r),e(rn,UM),e(UM,m2e),e(m2e,Z7r),e(UM,ebr),e(UM,FH),e(FH,obr),e(UM,rbr),e(rn,tbr),e(rn,JM),e(JM,g2e),e(g2e,abr),e(JM,nbr),e(JM,TH),e(TH,sbr),e(JM,lbr),e(rn,ibr),e(rn,YM),e(YM,h2e),e(h2e,dbr),e(YM,cbr),e(YM,MH),e(MH,fbr),e(YM,mbr),e(yr,gbr),M(KM,yr,null),b(f,hDe,u),b(f,ec,u),e(ec,ZM),e(ZM,p2e),M(O8,p2e,null),e(ec,hbr),e(ec,_2e),e(_2e,pbr),b(f,pDe,u),b(f,or,u),M(V8,or,null),e(or,_br),e(or,oc),e(oc,ubr),e(oc,EH),e(EH,bbr),e(oc,vbr),e(oc,CH),e(CH,Fbr),e(oc,Tbr),e(or,Mbr),e(or,X8),e(X8,Ebr),e(X8,u2e),e(u2e,Cbr),e(X8,wbr),e(or,Abr),e(or,kt),M(z8,kt,null),e(kt,Lbr),e(kt,b2e),e(b2e,ybr),e(kt,xbr),e(kt,rc),e(rc,$br),e(rc,v2e),e(v2e,kbr),e(rc,Sbr),e(rc,wH),e(wH,Rbr),e(rc,Pbr),e(kt,Bbr),M(eE,kt,null),e(or,Ibr),e(or,xr),M(W8,xr,null),e(xr,Nbr),e(xr,F2e),e(F2e,qbr),e(xr,jbr),e(xr,tn),e(tn,Dbr),e(tn,T2e),e(T2e,Gbr),e(tn,Obr),e(tn,M2e),e(M2e,Vbr),e(tn,Xbr),e(tn,E2e),e(E2e,zbr),e(tn,Wbr),e(xr,Qbr),e(xr,ie),e(ie,oE),e(oE,C2e),e(C2e,Hbr),e(oE,Ubr),e(oE,AH),e(AH,Jbr),e(oE,Ybr),e(ie,Kbr),e(ie,rE),e(rE,w2e),e(w2e,Zbr),e(rE,e2r),e(rE,LH),e(LH,o2r),e(rE,r2r),e(ie,t2r),e(ie,tE),e(tE,A2e),e(A2e,a2r),e(tE,n2r),e(tE,yH),e(yH,s2r),e(tE,l2r),e(ie,i2r),e(ie,aE),e(aE,L2e),e(L2e,d2r),e(aE,c2r),e(aE,xH),e(xH,f2r),e(aE,m2r),e(ie,g2r),e(ie,nE),e(nE,y2e),e(y2e,h2r),e(nE,p2r),e(nE,$H),e($H,_2r),e(nE,u2r),e(ie,b2r),e(ie,sE),e(sE,x2e),e(x2e,v2r),e(sE,F2r),e(sE,kH),e(kH,T2r),e(sE,M2r),e(ie,E2r),e(ie,lE),e(lE,$2e),e($2e,C2r),e(lE,w2r),e(lE,SH),e(SH,A2r),e(lE,L2r),e(ie,y2r),e(ie,iE),e(iE,k2e),e(k2e,x2r),e(iE,$2r),e(iE,RH),e(RH,k2r),e(iE,S2r),e(ie,R2r),e(ie,dE),e(dE,S2e),e(S2e,P2r),e(dE,B2r),e(dE,PH),e(PH,I2r),e(dE,N2r),e(ie,q2r),e(ie,cE),e(cE,R2e),e(R2e,j2r),e(cE,D2r),e(cE,BH),e(BH,G2r),e(cE,O2r),e(ie,V2r),e(ie,fE),e(fE,P2e),e(P2e,X2r),e(fE,z2r),e(fE,IH),e(IH,W2r),e(fE,Q2r),e(ie,H2r),e(ie,mE),e(mE,B2e),e(B2e,U2r),e(mE,J2r),e(mE,NH),e(NH,Y2r),e(mE,K2r),e(ie,Z2r),e(ie,gE),e(gE,I2e),e(I2e,evr),e(gE,ovr),e(gE,qH),e(qH,rvr),e(gE,tvr),e(ie,avr),e(ie,hE),e(hE,N2e),e(N2e,nvr),e(hE,svr),e(hE,jH),e(jH,lvr),e(hE,ivr),e(ie,dvr),e(ie,pE),e(pE,q2e),e(q2e,cvr),e(pE,fvr),e(pE,DH),e(DH,mvr),e(pE,gvr),e(ie,hvr),e(ie,_E),e(_E,j2e),e(j2e,pvr),e(_E,_vr),e(_E,GH),e(GH,uvr),e(_E,bvr),e(ie,vvr),e(ie,uE),e(uE,D2e),e(D2e,Fvr),e(uE,Tvr),e(uE,OH),e(OH,Mvr),e(uE,Evr),e(ie,Cvr),e(ie,bE),e(bE,G2e),e(G2e,wvr),e(bE,Avr),e(bE,VH),e(VH,Lvr),e(bE,yvr),e(ie,xvr),e(ie,vE),e(vE,O2e),e(O2e,$vr),e(vE,kvr),e(vE,XH),e(XH,Svr),e(vE,Rvr),e(ie,Pvr),e(ie,FE),e(FE,V2e),e(V2e,Bvr),e(FE,Ivr),e(FE,zH),e(zH,Nvr),e(FE,qvr),e(xr,jvr),M(TE,xr,null),b(f,_De,u),b(f,tc,u),e(tc,ME),e(ME,X2e),M(Q8,X2e,null),e(tc,Dvr),e(tc,z2e),e(z2e,Gvr),b(f,uDe,u),b(f,rr,u),M(H8,rr,null),e(rr,Ovr),e(rr,ac),e(ac,Vvr),e(ac,WH),e(WH,Xvr),e(ac,zvr),e(ac,QH),e(QH,Wvr),e(ac,Qvr),e(rr,Hvr),e(rr,U8),e(U8,Uvr),e(U8,W2e),e(W2e,Jvr),e(U8,Yvr),e(rr,Kvr),e(rr,St),M(J8,St,null),e(St,Zvr),e(St,Q2e),e(Q2e,eFr),e(St,oFr),e(St,nc),e(nc,rFr),e(nc,H2e),e(H2e,tFr),e(nc,aFr),e(nc,HH),e(HH,nFr),e(nc,sFr),e(St,lFr),M(EE,St,null),e(rr,iFr),e(rr,$r),M(Y8,$r,null),e($r,dFr),e($r,U2e),e(U2e,cFr),e($r,fFr),e($r,an),e(an,mFr),e(an,J2e),e(J2e,gFr),e(an,hFr),e(an,Y2e),e(Y2e,pFr),e(an,_Fr),e(an,K2e),e(K2e,uFr),e(an,bFr),e($r,vFr),e($r,Le),e(Le,CE),e(CE,Z2e),e(Z2e,FFr),e(CE,TFr),e(CE,UH),e(UH,MFr),e(CE,EFr),e(Le,CFr),e(Le,wE),e(wE,eve),e(eve,wFr),e(wE,AFr),e(wE,JH),e(JH,LFr),e(wE,yFr),e(Le,xFr),e(Le,AE),e(AE,ove),e(ove,$Fr),e(AE,kFr),e(AE,YH),e(YH,SFr),e(AE,RFr),e(Le,PFr),e(Le,LE),e(LE,rve),e(rve,BFr),e(LE,IFr),e(LE,KH),e(KH,NFr),e(LE,qFr),e(Le,jFr),e(Le,yE),e(yE,tve),e(tve,DFr),e(yE,GFr),e(yE,ZH),e(ZH,OFr),e(yE,VFr),e(Le,XFr),e(Le,xE),e(xE,ave),e(ave,zFr),e(xE,WFr),e(xE,eU),e(eU,QFr),e(xE,HFr),e(Le,UFr),e(Le,$E),e($E,nve),e(nve,JFr),e($E,YFr),e($E,oU),e(oU,KFr),e($E,ZFr),e(Le,eTr),e(Le,kE),e(kE,sve),e(sve,oTr),e(kE,rTr),e(kE,rU),e(rU,tTr),e(kE,aTr),e(Le,nTr),e(Le,SE),e(SE,lve),e(lve,sTr),e(SE,lTr),e(SE,tU),e(tU,iTr),e(SE,dTr),e(Le,cTr),e(Le,RE),e(RE,ive),e(ive,fTr),e(RE,mTr),e(RE,aU),e(aU,gTr),e(RE,hTr),e($r,pTr),M(PE,$r,null),b(f,bDe,u),b(f,sc,u),e(sc,BE),e(BE,dve),M(K8,dve,null),e(sc,_Tr),e(sc,cve),e(cve,uTr),b(f,vDe,u),b(f,tr,u),M(Z8,tr,null),e(tr,bTr),e(tr,lc),e(lc,vTr),e(lc,nU),e(nU,FTr),e(lc,TTr),e(lc,sU),e(sU,MTr),e(lc,ETr),e(tr,CTr),e(tr,e9),e(e9,wTr),e(e9,fve),e(fve,ATr),e(e9,LTr),e(tr,yTr),e(tr,Rt),M(o9,Rt,null),e(Rt,xTr),e(Rt,mve),e(mve,$Tr),e(Rt,kTr),e(Rt,ic),e(ic,STr),e(ic,gve),e(gve,RTr),e(ic,PTr),e(ic,lU),e(lU,BTr),e(ic,ITr),e(Rt,NTr),M(IE,Rt,null),e(tr,qTr),e(tr,kr),M(r9,kr,null),e(kr,jTr),e(kr,hve),e(hve,DTr),e(kr,GTr),e(kr,nn),e(nn,OTr),e(nn,pve),e(pve,VTr),e(nn,XTr),e(nn,_ve),e(_ve,zTr),e(nn,WTr),e(nn,uve),e(uve,QTr),e(nn,HTr),e(kr,UTr),e(kr,oe),e(oe,NE),e(NE,bve),e(bve,JTr),e(NE,YTr),e(NE,iU),e(iU,KTr),e(NE,ZTr),e(oe,eMr),e(oe,qE),e(qE,vve),e(vve,oMr),e(qE,rMr),e(qE,dU),e(dU,tMr),e(qE,aMr),e(oe,nMr),e(oe,jE),e(jE,Fve),e(Fve,sMr),e(jE,lMr),e(jE,cU),e(cU,iMr),e(jE,dMr),e(oe,cMr),e(oe,DE),e(DE,Tve),e(Tve,fMr),e(DE,mMr),e(DE,fU),e(fU,gMr),e(DE,hMr),e(oe,pMr),e(oe,GE),e(GE,Mve),e(Mve,_Mr),e(GE,uMr),e(GE,mU),e(mU,bMr),e(GE,vMr),e(oe,FMr),e(oe,OE),e(OE,Eve),e(Eve,TMr),e(OE,MMr),e(OE,gU),e(gU,EMr),e(OE,CMr),e(oe,wMr),e(oe,VE),e(VE,Cve),e(Cve,AMr),e(VE,LMr),e(VE,hU),e(hU,yMr),e(VE,xMr),e(oe,$Mr),e(oe,XE),e(XE,wve),e(wve,kMr),e(XE,SMr),e(XE,pU),e(pU,RMr),e(XE,PMr),e(oe,BMr),e(oe,zE),e(zE,Ave),e(Ave,IMr),e(zE,NMr),e(zE,_U),e(_U,qMr),e(zE,jMr),e(oe,DMr),e(oe,WE),e(WE,Lve),e(Lve,GMr),e(WE,OMr),e(WE,uU),e(uU,VMr),e(WE,XMr),e(oe,zMr),e(oe,QE),e(QE,yve),e(yve,WMr),e(QE,QMr),e(QE,bU),e(bU,HMr),e(QE,UMr),e(oe,JMr),e(oe,HE),e(HE,xve),e(xve,YMr),e(HE,KMr),e(HE,vU),e(vU,ZMr),e(HE,eEr),e(oe,oEr),e(oe,UE),e(UE,$ve),e($ve,rEr),e(UE,tEr),e(UE,FU),e(FU,aEr),e(UE,nEr),e(oe,sEr),e(oe,JE),e(JE,kve),e(kve,lEr),e(JE,iEr),e(JE,TU),e(TU,dEr),e(JE,cEr),e(oe,fEr),e(oe,YE),e(YE,Sve),e(Sve,mEr),e(YE,gEr),e(YE,MU),e(MU,hEr),e(YE,pEr),e(oe,_Er),e(oe,KE),e(KE,Rve),e(Rve,uEr),e(KE,bEr),e(KE,EU),e(EU,vEr),e(KE,FEr),e(oe,TEr),e(oe,ZE),e(ZE,Pve),e(Pve,MEr),e(ZE,EEr),e(ZE,CU),e(CU,CEr),e(ZE,wEr),e(oe,AEr),e(oe,eC),e(eC,Bve),e(Bve,LEr),e(eC,yEr),e(eC,wU),e(wU,xEr),e(eC,$Er),e(oe,kEr),e(oe,oC),e(oC,Ive),e(Ive,SEr),e(oC,REr),e(oC,AU),e(AU,PEr),e(oC,BEr),e(oe,IEr),e(oe,rC),e(rC,Nve),e(Nve,NEr),e(rC,qEr),e(rC,LU),e(LU,jEr),e(rC,DEr),e(oe,GEr),e(oe,tC),e(tC,qve),e(qve,OEr),e(tC,VEr),e(tC,yU),e(yU,XEr),e(tC,zEr),e(oe,WEr),e(oe,aC),e(aC,jve),e(jve,QEr),e(aC,HEr),e(aC,xU),e(xU,UEr),e(aC,JEr),e(oe,YEr),e(oe,nC),e(nC,Dve),e(Dve,KEr),e(nC,ZEr),e(nC,$U),e($U,eCr),e(nC,oCr),e(oe,rCr),e(oe,sC),e(sC,Gve),e(Gve,tCr),e(sC,aCr),e(sC,kU),e(kU,nCr),e(sC,sCr),e(oe,lCr),e(oe,lC),e(lC,Ove),e(Ove,iCr),e(lC,dCr),e(lC,SU),e(SU,cCr),e(lC,fCr),e(oe,mCr),e(oe,iC),e(iC,Vve),e(Vve,gCr),e(iC,hCr),e(iC,RU),e(RU,pCr),e(iC,_Cr),e(kr,uCr),M(dC,kr,null),b(f,FDe,u),b(f,dc,u),e(dc,cC),e(cC,Xve),M(t9,Xve,null),e(dc,bCr),e(dc,zve),e(zve,vCr),b(f,TDe,u),b(f,ar,u),M(a9,ar,null),e(ar,FCr),e(ar,cc),e(cc,TCr),e(cc,PU),e(PU,MCr),e(cc,ECr),e(cc,BU),e(BU,CCr),e(cc,wCr),e(ar,ACr),e(ar,n9),e(n9,LCr),e(n9,Wve),e(Wve,yCr),e(n9,xCr),e(ar,$Cr),e(ar,Pt),M(s9,Pt,null),e(Pt,kCr),e(Pt,Qve),e(Qve,SCr),e(Pt,RCr),e(Pt,fc),e(fc,PCr),e(fc,Hve),e(Hve,BCr),e(fc,ICr),e(fc,IU),e(IU,NCr),e(fc,qCr),e(Pt,jCr),M(fC,Pt,null),e(ar,DCr),e(ar,Sr),M(l9,Sr,null),e(Sr,GCr),e(Sr,Uve),e(Uve,OCr),e(Sr,VCr),e(Sr,sn),e(sn,XCr),e(sn,Jve),e(Jve,zCr),e(sn,WCr),e(sn,Yve),e(Yve,QCr),e(sn,HCr),e(sn,Kve),e(Kve,UCr),e(sn,JCr),e(Sr,YCr),e(Sr,pe),e(pe,mC),e(mC,Zve),e(Zve,KCr),e(mC,ZCr),e(mC,NU),e(NU,e5r),e(mC,o5r),e(pe,r5r),e(pe,gC),e(gC,eFe),e(eFe,t5r),e(gC,a5r),e(gC,qU),e(qU,n5r),e(gC,s5r),e(pe,l5r),e(pe,hC),e(hC,oFe),e(oFe,i5r),e(hC,d5r),e(hC,jU),e(jU,c5r),e(hC,f5r),e(pe,m5r),e(pe,pC),e(pC,rFe),e(rFe,g5r),e(pC,h5r),e(pC,DU),e(DU,p5r),e(pC,_5r),e(pe,u5r),e(pe,_C),e(_C,tFe),e(tFe,b5r),e(_C,v5r),e(_C,GU),e(GU,F5r),e(_C,T5r),e(pe,M5r),e(pe,uC),e(uC,aFe),e(aFe,E5r),e(uC,C5r),e(uC,OU),e(OU,w5r),e(uC,A5r),e(pe,L5r),e(pe,bC),e(bC,nFe),e(nFe,y5r),e(bC,x5r),e(bC,VU),e(VU,$5r),e(bC,k5r),e(pe,S5r),e(pe,vC),e(vC,sFe),e(sFe,R5r),e(vC,P5r),e(vC,XU),e(XU,B5r),e(vC,I5r),e(pe,N5r),e(pe,FC),e(FC,lFe),e(lFe,q5r),e(FC,j5r),e(FC,zU),e(zU,D5r),e(FC,G5r),e(pe,O5r),e(pe,TC),e(TC,iFe),e(iFe,V5r),e(TC,X5r),e(TC,WU),e(WU,z5r),e(TC,W5r),e(pe,Q5r),e(pe,MC),e(MC,dFe),e(dFe,H5r),e(MC,U5r),e(MC,QU),e(QU,J5r),e(MC,Y5r),e(pe,K5r),e(pe,EC),e(EC,cFe),e(cFe,Z5r),e(EC,e3r),e(EC,HU),e(HU,o3r),e(EC,r3r),e(pe,t3r),e(pe,CC),e(CC,fFe),e(fFe,a3r),e(CC,n3r),e(CC,UU),e(UU,s3r),e(CC,l3r),e(pe,i3r),e(pe,wC),e(wC,mFe),e(mFe,d3r),e(wC,c3r),e(wC,JU),e(JU,f3r),e(wC,m3r),e(pe,g3r),e(pe,AC),e(AC,gFe),e(gFe,h3r),e(AC,p3r),e(AC,YU),e(YU,_3r),e(AC,u3r),e(pe,b3r),e(pe,LC),e(LC,hFe),e(hFe,v3r),e(LC,F3r),e(LC,KU),e(KU,T3r),e(LC,M3r),e(pe,E3r),e(pe,yC),e(yC,pFe),e(pFe,C3r),e(yC,w3r),e(yC,ZU),e(ZU,A3r),e(yC,L3r),e(Sr,y3r),M(xC,Sr,null),b(f,MDe,u),b(f,mc,u),e(mc,$C),e($C,_Fe),M(i9,_Fe,null),e(mc,x3r),e(mc,uFe),e(uFe,$3r),b(f,EDe,u),b(f,nr,u),M(d9,nr,null),e(nr,k3r),e(nr,gc),e(gc,S3r),e(gc,eJ),e(eJ,R3r),e(gc,P3r),e(gc,oJ),e(oJ,B3r),e(gc,I3r),e(nr,N3r),e(nr,c9),e(c9,q3r),e(c9,bFe),e(bFe,j3r),e(c9,D3r),e(nr,G3r),e(nr,Bt),M(f9,Bt,null),e(Bt,O3r),e(Bt,vFe),e(vFe,V3r),e(Bt,X3r),e(Bt,hc),e(hc,z3r),e(hc,FFe),e(FFe,W3r),e(hc,Q3r),e(hc,rJ),e(rJ,H3r),e(hc,U3r),e(Bt,J3r),M(kC,Bt,null),e(nr,Y3r),e(nr,Rr),M(m9,Rr,null),e(Rr,K3r),e(Rr,TFe),e(TFe,Z3r),e(Rr,e0r),e(Rr,ln),e(ln,o0r),e(ln,MFe),e(MFe,r0r),e(ln,t0r),e(ln,EFe),e(EFe,a0r),e(ln,n0r),e(ln,CFe),e(CFe,s0r),e(ln,l0r),e(Rr,i0r),e(Rr,g9),e(g9,SC),e(SC,wFe),e(wFe,d0r),e(SC,c0r),e(SC,tJ),e(tJ,f0r),e(SC,m0r),e(g9,g0r),e(g9,RC),e(RC,AFe),e(AFe,h0r),e(RC,p0r),e(RC,aJ),e(aJ,_0r),e(RC,u0r),e(Rr,b0r),M(PC,Rr,null),b(f,CDe,u),b(f,pc,u),e(pc,BC),e(BC,LFe),M(h9,LFe,null),e(pc,v0r),e(pc,yFe),e(yFe,F0r),b(f,wDe,u),b(f,sr,u),M(p9,sr,null),e(sr,T0r),e(sr,_c),e(_c,M0r),e(_c,nJ),e(nJ,E0r),e(_c,C0r),e(_c,sJ),e(sJ,w0r),e(_c,A0r),e(sr,L0r),e(sr,_9),e(_9,y0r),e(_9,xFe),e(xFe,x0r),e(_9,$0r),e(sr,k0r),e(sr,It),M(u9,It,null),e(It,S0r),e(It,$Fe),e($Fe,R0r),e(It,P0r),e(It,uc),e(uc,B0r),e(uc,kFe),e(kFe,I0r),e(uc,N0r),e(uc,lJ),e(lJ,q0r),e(uc,j0r),e(It,D0r),M(IC,It,null),e(sr,G0r),e(sr,Pr),M(b9,Pr,null),e(Pr,O0r),e(Pr,SFe),e(SFe,V0r),e(Pr,X0r),e(Pr,dn),e(dn,z0r),e(dn,RFe),e(RFe,W0r),e(dn,Q0r),e(dn,PFe),e(PFe,H0r),e(dn,U0r),e(dn,BFe),e(BFe,J0r),e(dn,Y0r),e(Pr,K0r),e(Pr,IFe),e(IFe,NC),e(NC,NFe),e(NFe,Z0r),e(NC,ewr),e(NC,iJ),e(iJ,owr),e(NC,rwr),e(Pr,twr),M(qC,Pr,null),b(f,ADe,u),b(f,bc,u),e(bc,jC),e(jC,qFe),M(v9,qFe,null),e(bc,awr),e(bc,jFe),e(jFe,nwr),b(f,LDe,u),b(f,lr,u),M(F9,lr,null),e(lr,swr),e(lr,vc),e(vc,lwr),e(vc,dJ),e(dJ,iwr),e(vc,dwr),e(vc,cJ),e(cJ,cwr),e(vc,fwr),e(lr,mwr),e(lr,T9),e(T9,gwr),e(T9,DFe),e(DFe,hwr),e(T9,pwr),e(lr,_wr),e(lr,Nt),M(M9,Nt,null),e(Nt,uwr),e(Nt,GFe),e(GFe,bwr),e(Nt,vwr),e(Nt,Fc),e(Fc,Fwr),e(Fc,OFe),e(OFe,Twr),e(Fc,Mwr),e(Fc,fJ),e(fJ,Ewr),e(Fc,Cwr),e(Nt,wwr),M(DC,Nt,null),e(lr,Awr),e(lr,Br),M(E9,Br,null),e(Br,Lwr),e(Br,VFe),e(VFe,ywr),e(Br,xwr),e(Br,cn),e(cn,$wr),e(cn,XFe),e(XFe,kwr),e(cn,Swr),e(cn,zFe),e(zFe,Rwr),e(cn,Pwr),e(cn,WFe),e(WFe,Bwr),e(cn,Iwr),e(Br,Nwr),e(Br,de),e(de,GC),e(GC,QFe),e(QFe,qwr),e(GC,jwr),e(GC,mJ),e(mJ,Dwr),e(GC,Gwr),e(de,Owr),e(de,OC),e(OC,HFe),e(HFe,Vwr),e(OC,Xwr),e(OC,gJ),e(gJ,zwr),e(OC,Wwr),e(de,Qwr),e(de,VC),e(VC,UFe),e(UFe,Hwr),e(VC,Uwr),e(VC,hJ),e(hJ,Jwr),e(VC,Ywr),e(de,Kwr),e(de,XC),e(XC,JFe),e(JFe,Zwr),e(XC,eAr),e(XC,pJ),e(pJ,oAr),e(XC,rAr),e(de,tAr),e(de,zC),e(zC,YFe),e(YFe,aAr),e(zC,nAr),e(zC,_J),e(_J,sAr),e(zC,lAr),e(de,iAr),e(de,WC),e(WC,KFe),e(KFe,dAr),e(WC,cAr),e(WC,uJ),e(uJ,fAr),e(WC,mAr),e(de,gAr),e(de,QC),e(QC,ZFe),e(ZFe,hAr),e(QC,pAr),e(QC,bJ),e(bJ,_Ar),e(QC,uAr),e(de,bAr),e(de,HC),e(HC,eTe),e(eTe,vAr),e(HC,FAr),e(HC,vJ),e(vJ,TAr),e(HC,MAr),e(de,EAr),e(de,UC),e(UC,oTe),e(oTe,CAr),e(UC,wAr),e(UC,FJ),e(FJ,AAr),e(UC,LAr),e(de,yAr),e(de,JC),e(JC,rTe),e(rTe,xAr),e(JC,$Ar),e(JC,TJ),e(TJ,kAr),e(JC,SAr),e(de,RAr),e(de,YC),e(YC,tTe),e(tTe,PAr),e(YC,BAr),e(YC,MJ),e(MJ,IAr),e(YC,NAr),e(de,qAr),e(de,KC),e(KC,aTe),e(aTe,jAr),e(KC,DAr),e(KC,EJ),e(EJ,GAr),e(KC,OAr),e(de,VAr),e(de,ZC),e(ZC,nTe),e(nTe,XAr),e(ZC,zAr),e(ZC,CJ),e(CJ,WAr),e(ZC,QAr),e(de,HAr),e(de,e5),e(e5,sTe),e(sTe,UAr),e(e5,JAr),e(e5,wJ),e(wJ,YAr),e(e5,KAr),e(de,ZAr),e(de,o5),e(o5,lTe),e(lTe,e6r),e(o5,o6r),e(o5,AJ),e(AJ,r6r),e(o5,t6r),e(de,a6r),e(de,r5),e(r5,iTe),e(iTe,n6r),e(r5,s6r),e(r5,LJ),e(LJ,l6r),e(r5,i6r),e(de,d6r),e(de,t5),e(t5,dTe),e(dTe,c6r),e(t5,f6r),e(t5,yJ),e(yJ,m6r),e(t5,g6r),e(de,h6r),e(de,a5),e(a5,cTe),e(cTe,p6r),e(a5,_6r),e(a5,xJ),e(xJ,u6r),e(a5,b6r),e(de,v6r),e(de,n5),e(n5,fTe),e(fTe,F6r),e(n5,T6r),e(n5,$J),e($J,M6r),e(n5,E6r),e(de,C6r),e(de,s5),e(s5,mTe),e(mTe,w6r),e(s5,A6r),e(s5,kJ),e(kJ,L6r),e(s5,y6r),e(Br,x6r),M(l5,Br,null),b(f,yDe,u),b(f,Tc,u),e(Tc,i5),e(i5,gTe),M(C9,gTe,null),e(Tc,$6r),e(Tc,hTe),e(hTe,k6r),b(f,xDe,u),b(f,ir,u),M(w9,ir,null),e(ir,S6r),e(ir,Mc),e(Mc,R6r),e(Mc,SJ),e(SJ,P6r),e(Mc,B6r),e(Mc,RJ),e(RJ,I6r),e(Mc,N6r),e(ir,q6r),e(ir,A9),e(A9,j6r),e(A9,pTe),e(pTe,D6r),e(A9,G6r),e(ir,O6r),e(ir,qt),M(L9,qt,null),e(qt,V6r),e(qt,_Te),e(_Te,X6r),e(qt,z6r),e(qt,Ec),e(Ec,W6r),e(Ec,uTe),e(uTe,Q6r),e(Ec,H6r),e(Ec,PJ),e(PJ,U6r),e(Ec,J6r),e(qt,Y6r),M(d5,qt,null),e(ir,K6r),e(ir,Ir),M(y9,Ir,null),e(Ir,Z6r),e(Ir,bTe),e(bTe,eLr),e(Ir,oLr),e(Ir,fn),e(fn,rLr),e(fn,vTe),e(vTe,tLr),e(fn,aLr),e(fn,FTe),e(FTe,nLr),e(fn,sLr),e(fn,TTe),e(TTe,lLr),e(fn,iLr),e(Ir,dLr),e(Ir,ce),e(ce,c5),e(c5,MTe),e(MTe,cLr),e(c5,fLr),e(c5,BJ),e(BJ,mLr),e(c5,gLr),e(ce,hLr),e(ce,f5),e(f5,ETe),e(ETe,pLr),e(f5,_Lr),e(f5,IJ),e(IJ,uLr),e(f5,bLr),e(ce,vLr),e(ce,m5),e(m5,CTe),e(CTe,FLr),e(m5,TLr),e(m5,NJ),e(NJ,MLr),e(m5,ELr),e(ce,CLr),e(ce,g5),e(g5,wTe),e(wTe,wLr),e(g5,ALr),e(g5,qJ),e(qJ,LLr),e(g5,yLr),e(ce,xLr),e(ce,h5),e(h5,ATe),e(ATe,$Lr),e(h5,kLr),e(h5,jJ),e(jJ,SLr),e(h5,RLr),e(ce,PLr),e(ce,p5),e(p5,LTe),e(LTe,BLr),e(p5,ILr),e(p5,DJ),e(DJ,NLr),e(p5,qLr),e(ce,jLr),e(ce,_5),e(_5,yTe),e(yTe,DLr),e(_5,GLr),e(_5,GJ),e(GJ,OLr),e(_5,VLr),e(ce,XLr),e(ce,u5),e(u5,xTe),e(xTe,zLr),e(u5,WLr),e(u5,OJ),e(OJ,QLr),e(u5,HLr),e(ce,ULr),e(ce,b5),e(b5,$Te),e($Te,JLr),e(b5,YLr),e(b5,VJ),e(VJ,KLr),e(b5,ZLr),e(ce,eyr),e(ce,v5),e(v5,kTe),e(kTe,oyr),e(v5,ryr),e(v5,XJ),e(XJ,tyr),e(v5,ayr),e(ce,nyr),e(ce,F5),e(F5,STe),e(STe,syr),e(F5,lyr),e(F5,zJ),e(zJ,iyr),e(F5,dyr),e(ce,cyr),e(ce,T5),e(T5,RTe),e(RTe,fyr),e(T5,myr),e(T5,WJ),e(WJ,gyr),e(T5,hyr),e(ce,pyr),e(ce,M5),e(M5,PTe),e(PTe,_yr),e(M5,uyr),e(M5,QJ),e(QJ,byr),e(M5,vyr),e(ce,Fyr),e(ce,E5),e(E5,BTe),e(BTe,Tyr),e(E5,Myr),e(E5,HJ),e(HJ,Eyr),e(E5,Cyr),e(ce,wyr),e(ce,C5),e(C5,ITe),e(ITe,Ayr),e(C5,Lyr),e(C5,UJ),e(UJ,yyr),e(C5,xyr),e(ce,$yr),e(ce,w5),e(w5,NTe),e(NTe,kyr),e(w5,Syr),e(w5,JJ),e(JJ,Ryr),e(w5,Pyr),e(ce,Byr),e(ce,A5),e(A5,qTe),e(qTe,Iyr),e(A5,Nyr),e(A5,YJ),e(YJ,qyr),e(A5,jyr),e(ce,Dyr),e(ce,L5),e(L5,jTe),e(jTe,Gyr),e(L5,Oyr),e(L5,KJ),e(KJ,Vyr),e(L5,Xyr),e(ce,zyr),e(ce,y5),e(y5,DTe),e(DTe,Wyr),e(y5,Qyr),e(y5,ZJ),e(ZJ,Hyr),e(y5,Uyr),e(ce,Jyr),e(ce,x5),e(x5,GTe),e(GTe,Yyr),e(x5,Kyr),e(x5,eY),e(eY,Zyr),e(x5,e8r),e(Ir,o8r),M($5,Ir,null),b(f,$De,u),b(f,Cc,u),e(Cc,k5),e(k5,OTe),M(x9,OTe,null),e(Cc,r8r),e(Cc,VTe),e(VTe,t8r),b(f,kDe,u),b(f,dr,u),M($9,dr,null),e(dr,a8r),e(dr,wc),e(wc,n8r),e(wc,oY),e(oY,s8r),e(wc,l8r),e(wc,rY),e(rY,i8r),e(wc,d8r),e(dr,c8r),e(dr,k9),e(k9,f8r),e(k9,XTe),e(XTe,m8r),e(k9,g8r),e(dr,h8r),e(dr,jt),M(S9,jt,null),e(jt,p8r),e(jt,zTe),e(zTe,_8r),e(jt,u8r),e(jt,Ac),e(Ac,b8r),e(Ac,WTe),e(WTe,v8r),e(Ac,F8r),e(Ac,tY),e(tY,T8r),e(Ac,M8r),e(jt,E8r),M(S5,jt,null),e(dr,C8r),e(dr,Nr),M(R9,Nr,null),e(Nr,w8r),e(Nr,QTe),e(QTe,A8r),e(Nr,L8r),e(Nr,mn),e(mn,y8r),e(mn,HTe),e(HTe,x8r),e(mn,$8r),e(mn,UTe),e(UTe,k8r),e(mn,S8r),e(mn,JTe),e(JTe,R8r),e(mn,P8r),e(Nr,B8r),e(Nr,YTe),e(YTe,R5),e(R5,KTe),e(KTe,I8r),e(R5,N8r),e(R5,aY),e(aY,q8r),e(R5,j8r),e(Nr,D8r),M(P5,Nr,null),b(f,SDe,u),b(f,Lc,u),e(Lc,B5),e(B5,ZTe),M(P9,ZTe,null),e(Lc,G8r),e(Lc,eMe),e(eMe,O8r),b(f,RDe,u),b(f,cr,u),M(B9,cr,null),e(cr,V8r),e(cr,yc),e(yc,X8r),e(yc,nY),e(nY,z8r),e(yc,W8r),e(yc,sY),e(sY,Q8r),e(yc,H8r),e(cr,U8r),e(cr,I9),e(I9,J8r),e(I9,oMe),e(oMe,Y8r),e(I9,K8r),e(cr,Z8r),e(cr,Dt),M(N9,Dt,null),e(Dt,e9r),e(Dt,rMe),e(rMe,o9r),e(Dt,r9r),e(Dt,xc),e(xc,t9r),e(xc,tMe),e(tMe,a9r),e(xc,n9r),e(xc,lY),e(lY,s9r),e(xc,l9r),e(Dt,i9r),M(I5,Dt,null),e(cr,d9r),e(cr,qr),M(q9,qr,null),e(qr,c9r),e(qr,aMe),e(aMe,f9r),e(qr,m9r),e(qr,gn),e(gn,g9r),e(gn,nMe),e(nMe,h9r),e(gn,p9r),e(gn,sMe),e(sMe,_9r),e(gn,u9r),e(gn,lMe),e(lMe,b9r),e(gn,v9r),e(qr,F9r),e(qr,iMe),e(iMe,N5),e(N5,dMe),e(dMe,T9r),e(N5,M9r),e(N5,iY),e(iY,E9r),e(N5,C9r),e(qr,w9r),M(q5,qr,null),b(f,PDe,u),b(f,$c,u),e($c,j5),e(j5,cMe),M(j9,cMe,null),e($c,A9r),e($c,fMe),e(fMe,L9r),b(f,BDe,u),b(f,fr,u),M(D9,fr,null),e(fr,y9r),e(fr,kc),e(kc,x9r),e(kc,dY),e(dY,$9r),e(kc,k9r),e(kc,cY),e(cY,S9r),e(kc,R9r),e(fr,P9r),e(fr,G9),e(G9,B9r),e(G9,mMe),e(mMe,I9r),e(G9,N9r),e(fr,q9r),e(fr,Gt),M(O9,Gt,null),e(Gt,j9r),e(Gt,gMe),e(gMe,D9r),e(Gt,G9r),e(Gt,Sc),e(Sc,O9r),e(Sc,hMe),e(hMe,V9r),e(Sc,X9r),e(Sc,fY),e(fY,z9r),e(Sc,W9r),e(Gt,Q9r),M(D5,Gt,null),e(fr,H9r),e(fr,jr),M(V9,jr,null),e(jr,U9r),e(jr,pMe),e(pMe,J9r),e(jr,Y9r),e(jr,hn),e(hn,K9r),e(hn,_Me),e(_Me,Z9r),e(hn,exr),e(hn,uMe),e(uMe,oxr),e(hn,rxr),e(hn,bMe),e(bMe,txr),e(hn,axr),e(jr,nxr),e(jr,re),e(re,G5),e(G5,vMe),e(vMe,sxr),e(G5,lxr),e(G5,mY),e(mY,ixr),e(G5,dxr),e(re,cxr),e(re,O5),e(O5,FMe),e(FMe,fxr),e(O5,mxr),e(O5,gY),e(gY,gxr),e(O5,hxr),e(re,pxr),e(re,V5),e(V5,TMe),e(TMe,_xr),e(V5,uxr),e(V5,hY),e(hY,bxr),e(V5,vxr),e(re,Fxr),e(re,X5),e(X5,MMe),e(MMe,Txr),e(X5,Mxr),e(X5,pY),e(pY,Exr),e(X5,Cxr),e(re,wxr),e(re,z5),e(z5,EMe),e(EMe,Axr),e(z5,Lxr),e(z5,_Y),e(_Y,yxr),e(z5,xxr),e(re,$xr),e(re,W5),e(W5,CMe),e(CMe,kxr),e(W5,Sxr),e(W5,uY),e(uY,Rxr),e(W5,Pxr),e(re,Bxr),e(re,Q5),e(Q5,wMe),e(wMe,Ixr),e(Q5,Nxr),e(Q5,bY),e(bY,qxr),e(Q5,jxr),e(re,Dxr),e(re,H5),e(H5,AMe),e(AMe,Gxr),e(H5,Oxr),e(H5,vY),e(vY,Vxr),e(H5,Xxr),e(re,zxr),e(re,U5),e(U5,LMe),e(LMe,Wxr),e(U5,Qxr),e(U5,FY),e(FY,Hxr),e(U5,Uxr),e(re,Jxr),e(re,J5),e(J5,yMe),e(yMe,Yxr),e(J5,Kxr),e(J5,TY),e(TY,Zxr),e(J5,e$r),e(re,o$r),e(re,Y5),e(Y5,xMe),e(xMe,r$r),e(Y5,t$r),e(Y5,MY),e(MY,a$r),e(Y5,n$r),e(re,s$r),e(re,K5),e(K5,$Me),e($Me,l$r),e(K5,i$r),e(K5,EY),e(EY,d$r),e(K5,c$r),e(re,f$r),e(re,Z5),e(Z5,kMe),e(kMe,m$r),e(Z5,g$r),e(Z5,CY),e(CY,h$r),e(Z5,p$r),e(re,_$r),e(re,e3),e(e3,SMe),e(SMe,u$r),e(e3,b$r),e(e3,wY),e(wY,v$r),e(e3,F$r),e(re,T$r),e(re,o3),e(o3,RMe),e(RMe,M$r),e(o3,E$r),e(o3,AY),e(AY,C$r),e(o3,w$r),e(re,A$r),e(re,r3),e(r3,PMe),e(PMe,L$r),e(r3,y$r),e(r3,LY),e(LY,x$r),e(r3,$$r),e(re,k$r),e(re,t3),e(t3,BMe),e(BMe,S$r),e(t3,R$r),e(t3,yY),e(yY,P$r),e(t3,B$r),e(re,I$r),e(re,a3),e(a3,IMe),e(IMe,N$r),e(a3,q$r),e(a3,xY),e(xY,j$r),e(a3,D$r),e(re,G$r),e(re,n3),e(n3,NMe),e(NMe,O$r),e(n3,V$r),e(n3,$Y),e($Y,X$r),e(n3,z$r),e(re,W$r),e(re,s3),e(s3,qMe),e(qMe,Q$r),e(s3,H$r),e(s3,kY),e(kY,U$r),e(s3,J$r),e(re,Y$r),e(re,l3),e(l3,jMe),e(jMe,K$r),e(l3,Z$r),e(l3,SY),e(SY,ekr),e(l3,okr),e(re,rkr),e(re,i3),e(i3,DMe),e(DMe,tkr),e(i3,akr),e(i3,RY),e(RY,nkr),e(i3,skr),e(re,lkr),e(re,d3),e(d3,GMe),e(GMe,ikr),e(d3,dkr),e(d3,PY),e(PY,ckr),e(d3,fkr),e(re,mkr),e(re,c3),e(c3,OMe),e(OMe,gkr),e(c3,hkr),e(c3,BY),e(BY,pkr),e(c3,_kr),e(re,ukr),e(re,f3),e(f3,VMe),e(VMe,bkr),e(f3,vkr),e(f3,IY),e(IY,Fkr),e(f3,Tkr),e(re,Mkr),e(re,m3),e(m3,XMe),e(XMe,Ekr),e(m3,Ckr),e(m3,NY),e(NY,wkr),e(m3,Akr),e(jr,Lkr),M(g3,jr,null),b(f,IDe,u),b(f,Rc,u),e(Rc,h3),e(h3,zMe),M(X9,zMe,null),e(Rc,ykr),e(Rc,WMe),e(WMe,xkr),b(f,NDe,u),b(f,mr,u),M(z9,mr,null),e(mr,$kr),e(mr,Pc),e(Pc,kkr),e(Pc,qY),e(qY,Skr),e(Pc,Rkr),e(Pc,jY),e(jY,Pkr),e(Pc,Bkr),e(mr,Ikr),e(mr,W9),e(W9,Nkr),e(W9,QMe),e(QMe,qkr),e(W9,jkr),e(mr,Dkr),e(mr,Ot),M(Q9,Ot,null),e(Ot,Gkr),e(Ot,HMe),e(HMe,Okr),e(Ot,Vkr),e(Ot,Bc),e(Bc,Xkr),e(Bc,UMe),e(UMe,zkr),e(Bc,Wkr),e(Bc,DY),e(DY,Qkr),e(Bc,Hkr),e(Ot,Ukr),M(p3,Ot,null),e(mr,Jkr),e(mr,Dr),M(H9,Dr,null),e(Dr,Ykr),e(Dr,JMe),e(JMe,Kkr),e(Dr,Zkr),e(Dr,pn),e(pn,eSr),e(pn,YMe),e(YMe,oSr),e(pn,rSr),e(pn,KMe),e(KMe,tSr),e(pn,aSr),e(pn,ZMe),e(ZMe,nSr),e(pn,sSr),e(Dr,lSr),e(Dr,ye),e(ye,_3),e(_3,eEe),e(eEe,iSr),e(_3,dSr),e(_3,GY),e(GY,cSr),e(_3,fSr),e(ye,mSr),e(ye,u3),e(u3,oEe),e(oEe,gSr),e(u3,hSr),e(u3,OY),e(OY,pSr),e(u3,_Sr),e(ye,uSr),e(ye,b3),e(b3,rEe),e(rEe,bSr),e(b3,vSr),e(b3,VY),e(VY,FSr),e(b3,TSr),e(ye,MSr),e(ye,v3),e(v3,tEe),e(tEe,ESr),e(v3,CSr),e(v3,XY),e(XY,wSr),e(v3,ASr),e(ye,LSr),e(ye,F3),e(F3,aEe),e(aEe,ySr),e(F3,xSr),e(F3,zY),e(zY,$Sr),e(F3,kSr),e(ye,SSr),e(ye,T3),e(T3,nEe),e(nEe,RSr),e(T3,PSr),e(T3,WY),e(WY,BSr),e(T3,ISr),e(ye,NSr),e(ye,M3),e(M3,sEe),e(sEe,qSr),e(M3,jSr),e(M3,QY),e(QY,DSr),e(M3,GSr),e(ye,OSr),e(ye,E3),e(E3,lEe),e(lEe,VSr),e(E3,XSr),e(E3,HY),e(HY,zSr),e(E3,WSr),e(ye,QSr),e(ye,C3),e(C3,iEe),e(iEe,HSr),e(C3,USr),e(C3,UY),e(UY,JSr),e(C3,YSr),e(ye,KSr),e(ye,w3),e(w3,dEe),e(dEe,ZSr),e(w3,eRr),e(w3,JY),e(JY,oRr),e(w3,rRr),e(Dr,tRr),M(A3,Dr,null),b(f,qDe,u),b(f,Ic,u),e(Ic,L3),e(L3,cEe),M(U9,cEe,null),e(Ic,aRr),e(Ic,fEe),e(fEe,nRr),b(f,jDe,u),b(f,gr,u),M(J9,gr,null),e(gr,sRr),e(gr,Nc),e(Nc,lRr),e(Nc,YY),e(YY,iRr),e(Nc,dRr),e(Nc,KY),e(KY,cRr),e(Nc,fRr),e(gr,mRr),e(gr,Y9),e(Y9,gRr),e(Y9,mEe),e(mEe,hRr),e(Y9,pRr),e(gr,_Rr),e(gr,Vt),M(K9,Vt,null),e(Vt,uRr),e(Vt,gEe),e(gEe,bRr),e(Vt,vRr),e(Vt,qc),e(qc,FRr),e(qc,hEe),e(hEe,TRr),e(qc,MRr),e(qc,ZY),e(ZY,ERr),e(qc,CRr),e(Vt,wRr),M(y3,Vt,null),e(gr,ARr),e(gr,Gr),M(Z9,Gr,null),e(Gr,LRr),e(Gr,pEe),e(pEe,yRr),e(Gr,xRr),e(Gr,_n),e(_n,$Rr),e(_n,_Ee),e(_Ee,kRr),e(_n,SRr),e(_n,uEe),e(uEe,RRr),e(_n,PRr),e(_n,bEe),e(bEe,BRr),e(_n,IRr),e(Gr,NRr),e(Gr,Ee),e(Ee,x3),e(x3,vEe),e(vEe,qRr),e(x3,jRr),e(x3,eK),e(eK,DRr),e(x3,GRr),e(Ee,ORr),e(Ee,$3),e($3,FEe),e(FEe,VRr),e($3,XRr),e($3,oK),e(oK,zRr),e($3,WRr),e(Ee,QRr),e(Ee,k3),e(k3,TEe),e(TEe,HRr),e(k3,URr),e(k3,rK),e(rK,JRr),e(k3,YRr),e(Ee,KRr),e(Ee,S3),e(S3,MEe),e(MEe,ZRr),e(S3,ePr),e(S3,tK),e(tK,oPr),e(S3,rPr),e(Ee,tPr),e(Ee,R3),e(R3,EEe),e(EEe,aPr),e(R3,nPr),e(R3,aK),e(aK,sPr),e(R3,lPr),e(Ee,iPr),e(Ee,P3),e(P3,CEe),e(CEe,dPr),e(P3,cPr),e(P3,nK),e(nK,fPr),e(P3,mPr),e(Ee,gPr),e(Ee,B3),e(B3,wEe),e(wEe,hPr),e(B3,pPr),e(B3,sK),e(sK,_Pr),e(B3,uPr),e(Ee,bPr),e(Ee,I3),e(I3,AEe),e(AEe,vPr),e(I3,FPr),e(I3,lK),e(lK,TPr),e(I3,MPr),e(Ee,EPr),e(Ee,N3),e(N3,LEe),e(LEe,CPr),e(N3,wPr),e(N3,iK),e(iK,APr),e(N3,LPr),e(Ee,yPr),e(Ee,q3),e(q3,yEe),e(yEe,xPr),e(q3,$Pr),e(q3,dK),e(dK,kPr),e(q3,SPr),e(Ee,RPr),e(Ee,j3),e(j3,xEe),e(xEe,PPr),e(j3,BPr),e(j3,cK),e(cK,IPr),e(j3,NPr),e(Ee,qPr),e(Ee,D3),e(D3,$Ee),e($Ee,jPr),e(D3,DPr),e(D3,fK),e(fK,GPr),e(D3,OPr),e(Gr,VPr),M(G3,Gr,null),b(f,DDe,u),b(f,jc,u),e(jc,O3),e(O3,kEe),M(ex,kEe,null),e(jc,XPr),e(jc,SEe),e(SEe,zPr),b(f,GDe,u),b(f,hr,u),M(ox,hr,null),e(hr,WPr),e(hr,Dc),e(Dc,QPr),e(Dc,mK),e(mK,HPr),e(Dc,UPr),e(Dc,gK),e(gK,JPr),e(Dc,YPr),e(hr,KPr),e(hr,rx),e(rx,ZPr),e(rx,REe),e(REe,eBr),e(rx,oBr),e(hr,rBr),e(hr,Xt),M(tx,Xt,null),e(Xt,tBr),e(Xt,PEe),e(PEe,aBr),e(Xt,nBr),e(Xt,Gc),e(Gc,sBr),e(Gc,BEe),e(BEe,lBr),e(Gc,iBr),e(Gc,hK),e(hK,dBr),e(Gc,cBr),e(Xt,fBr),M(V3,Xt,null),e(hr,mBr),e(hr,Or),M(ax,Or,null),e(Or,gBr),e(Or,IEe),e(IEe,hBr),e(Or,pBr),e(Or,un),e(un,_Br),e(un,NEe),e(NEe,uBr),e(un,bBr),e(un,qEe),e(qEe,vBr),e(un,FBr),e(un,jEe),e(jEe,TBr),e(un,MBr),e(Or,EBr),e(Or,xe),e(xe,X3),e(X3,DEe),e(DEe,CBr),e(X3,wBr),e(X3,pK),e(pK,ABr),e(X3,LBr),e(xe,yBr),e(xe,z3),e(z3,GEe),e(GEe,xBr),e(z3,$Br),e(z3,_K),e(_K,kBr),e(z3,SBr),e(xe,RBr),e(xe,W3),e(W3,OEe),e(OEe,PBr),e(W3,BBr),e(W3,uK),e(uK,IBr),e(W3,NBr),e(xe,qBr),e(xe,Q3),e(Q3,VEe),e(VEe,jBr),e(Q3,DBr),e(Q3,bK),e(bK,GBr),e(Q3,OBr),e(xe,VBr),e(xe,H3),e(H3,XEe),e(XEe,XBr),e(H3,zBr),e(H3,vK),e(vK,WBr),e(H3,QBr),e(xe,HBr),e(xe,U3),e(U3,zEe),e(zEe,UBr),e(U3,JBr),e(U3,FK),e(FK,YBr),e(U3,KBr),e(xe,ZBr),e(xe,J3),e(J3,WEe),e(WEe,eIr),e(J3,oIr),e(J3,TK),e(TK,rIr),e(J3,tIr),e(xe,aIr),e(xe,Y3),e(Y3,QEe),e(QEe,nIr),e(Y3,sIr),e(Y3,MK),e(MK,lIr),e(Y3,iIr),e(xe,dIr),e(xe,K3),e(K3,HEe),e(HEe,cIr),e(K3,fIr),e(K3,EK),e(EK,mIr),e(K3,gIr),e(xe,hIr),e(xe,Z3),e(Z3,UEe),e(UEe,pIr),e(Z3,_Ir),e(Z3,CK),e(CK,uIr),e(Z3,bIr),e(Or,vIr),M(e0,Or,null),b(f,ODe,u),b(f,Oc,u),e(Oc,o0),e(o0,JEe),M(nx,JEe,null),e(Oc,FIr),e(Oc,YEe),e(YEe,TIr),b(f,VDe,u),b(f,pr,u),M(sx,pr,null),e(pr,MIr),e(pr,Vc),e(Vc,EIr),e(Vc,wK),e(wK,CIr),e(Vc,wIr),e(Vc,AK),e(AK,AIr),e(Vc,LIr),e(pr,yIr),e(pr,lx),e(lx,xIr),e(lx,KEe),e(KEe,$Ir),e(lx,kIr),e(pr,SIr),e(pr,zt),M(ix,zt,null),e(zt,RIr),e(zt,ZEe),e(ZEe,PIr),e(zt,BIr),e(zt,Xc),e(Xc,IIr),e(Xc,eCe),e(eCe,NIr),e(Xc,qIr),e(Xc,LK),e(LK,jIr),e(Xc,DIr),e(zt,GIr),M(r0,zt,null),e(pr,OIr),e(pr,Vr),M(dx,Vr,null),e(Vr,VIr),e(Vr,oCe),e(oCe,XIr),e(Vr,zIr),e(Vr,bn),e(bn,WIr),e(bn,rCe),e(rCe,QIr),e(bn,HIr),e(bn,tCe),e(tCe,UIr),e(bn,JIr),e(bn,aCe),e(aCe,YIr),e(bn,KIr),e(Vr,ZIr),e(Vr,Pe),e(Pe,t0),e(t0,nCe),e(nCe,eNr),e(t0,oNr),e(t0,yK),e(yK,rNr),e(t0,tNr),e(Pe,aNr),e(Pe,a0),e(a0,sCe),e(sCe,nNr),e(a0,sNr),e(a0,xK),e(xK,lNr),e(a0,iNr),e(Pe,dNr),e(Pe,n0),e(n0,lCe),e(lCe,cNr),e(n0,fNr),e(n0,$K),e($K,mNr),e(n0,gNr),e(Pe,hNr),e(Pe,s0),e(s0,iCe),e(iCe,pNr),e(s0,_Nr),e(s0,kK),e(kK,uNr),e(s0,bNr),e(Pe,vNr),e(Pe,l0),e(l0,dCe),e(dCe,FNr),e(l0,TNr),e(l0,SK),e(SK,MNr),e(l0,ENr),e(Pe,CNr),e(Pe,i0),e(i0,cCe),e(cCe,wNr),e(i0,ANr),e(i0,RK),e(RK,LNr),e(i0,yNr),e(Pe,xNr),e(Pe,d0),e(d0,fCe),e(fCe,$Nr),e(d0,kNr),e(d0,PK),e(PK,SNr),e(d0,RNr),e(Pe,PNr),e(Pe,c0),e(c0,mCe),e(mCe,BNr),e(c0,INr),e(c0,BK),e(BK,NNr),e(c0,qNr),e(Pe,jNr),e(Pe,f0),e(f0,gCe),e(gCe,DNr),e(f0,GNr),e(f0,IK),e(IK,ONr),e(f0,VNr),e(Vr,XNr),M(m0,Vr,null),b(f,XDe,u),b(f,zc,u),e(zc,g0),e(g0,hCe),M(cx,hCe,null),e(zc,zNr),e(zc,pCe),e(pCe,WNr),b(f,zDe,u),b(f,_r,u),M(fx,_r,null),e(_r,QNr),e(_r,Wc),e(Wc,HNr),e(Wc,NK),e(NK,UNr),e(Wc,JNr),e(Wc,qK),e(qK,YNr),e(Wc,KNr),e(_r,ZNr),e(_r,mx),e(mx,eqr),e(mx,_Ce),e(_Ce,oqr),e(mx,rqr),e(_r,tqr),e(_r,Wt),M(gx,Wt,null),e(Wt,aqr),e(Wt,uCe),e(uCe,nqr),e(Wt,sqr),e(Wt,Qc),e(Qc,lqr),e(Qc,bCe),e(bCe,iqr),e(Qc,dqr),e(Qc,jK),e(jK,cqr),e(Qc,fqr),e(Wt,mqr),M(h0,Wt,null),e(_r,gqr),e(_r,Xr),M(hx,Xr,null),e(Xr,hqr),e(Xr,vCe),e(vCe,pqr),e(Xr,_qr),e(Xr,vn),e(vn,uqr),e(vn,FCe),e(FCe,bqr),e(vn,vqr),e(vn,TCe),e(TCe,Fqr),e(vn,Tqr),e(vn,MCe),e(MCe,Mqr),e(vn,Eqr),e(Xr,Cqr),e(Xr,$e),e($e,p0),e(p0,ECe),e(ECe,wqr),e(p0,Aqr),e(p0,DK),e(DK,Lqr),e(p0,yqr),e($e,xqr),e($e,_0),e(_0,CCe),e(CCe,$qr),e(_0,kqr),e(_0,GK),e(GK,Sqr),e(_0,Rqr),e($e,Pqr),e($e,u0),e(u0,wCe),e(wCe,Bqr),e(u0,Iqr),e(u0,OK),e(OK,Nqr),e(u0,qqr),e($e,jqr),e($e,b0),e(b0,ACe),e(ACe,Dqr),e(b0,Gqr),e(b0,VK),e(VK,Oqr),e(b0,Vqr),e($e,Xqr),e($e,v0),e(v0,LCe),e(LCe,zqr),e(v0,Wqr),e(v0,XK),e(XK,Qqr),e(v0,Hqr),e($e,Uqr),e($e,F0),e(F0,yCe),e(yCe,Jqr),e(F0,Yqr),e(F0,zK),e(zK,Kqr),e(F0,Zqr),e($e,ejr),e($e,T0),e(T0,xCe),e(xCe,ojr),e(T0,rjr),e(T0,WK),e(WK,tjr),e(T0,ajr),e($e,njr),e($e,M0),e(M0,$Ce),e($Ce,sjr),e(M0,ljr),e(M0,QK),e(QK,ijr),e(M0,djr),e($e,cjr),e($e,E0),e(E0,kCe),e(kCe,fjr),e(E0,mjr),e(E0,HK),e(HK,gjr),e(E0,hjr),e($e,pjr),e($e,C0),e(C0,SCe),e(SCe,_jr),e(C0,ujr),e(C0,UK),e(UK,bjr),e(C0,vjr),e(Xr,Fjr),M(w0,Xr,null),b(f,WDe,u),b(f,Hc,u),e(Hc,A0),e(A0,RCe),M(px,RCe,null),e(Hc,Tjr),e(Hc,PCe),e(PCe,Mjr),b(f,QDe,u),b(f,ur,u),M(_x,ur,null),e(ur,Ejr),e(ur,Uc),e(Uc,Cjr),e(Uc,JK),e(JK,wjr),e(Uc,Ajr),e(Uc,YK),e(YK,Ljr),e(Uc,yjr),e(ur,xjr),e(ur,ux),e(ux,$jr),e(ux,BCe),e(BCe,kjr),e(ux,Sjr),e(ur,Rjr),e(ur,Qt),M(bx,Qt,null),e(Qt,Pjr),e(Qt,ICe),e(ICe,Bjr),e(Qt,Ijr),e(Qt,Jc),e(Jc,Njr),e(Jc,NCe),e(NCe,qjr),e(Jc,jjr),e(Jc,KK),e(KK,Djr),e(Jc,Gjr),e(Qt,Ojr),M(L0,Qt,null),e(ur,Vjr),e(ur,zr),M(vx,zr,null),e(zr,Xjr),e(zr,qCe),e(qCe,zjr),e(zr,Wjr),e(zr,Fn),e(Fn,Qjr),e(Fn,jCe),e(jCe,Hjr),e(Fn,Ujr),e(Fn,DCe),e(DCe,Jjr),e(Fn,Yjr),e(Fn,GCe),e(GCe,Kjr),e(Fn,Zjr),e(zr,eDr),e(zr,ke),e(ke,y0),e(y0,OCe),e(OCe,oDr),e(y0,rDr),e(y0,ZK),e(ZK,tDr),e(y0,aDr),e(ke,nDr),e(ke,x0),e(x0,VCe),e(VCe,sDr),e(x0,lDr),e(x0,eZ),e(eZ,iDr),e(x0,dDr),e(ke,cDr),e(ke,$0),e($0,XCe),e(XCe,fDr),e($0,mDr),e($0,oZ),e(oZ,gDr),e($0,hDr),e(ke,pDr),e(ke,k0),e(k0,zCe),e(zCe,_Dr),e(k0,uDr),e(k0,rZ),e(rZ,bDr),e(k0,vDr),e(ke,FDr),e(ke,S0),e(S0,WCe),e(WCe,TDr),e(S0,MDr),e(S0,tZ),e(tZ,EDr),e(S0,CDr),e(ke,wDr),e(ke,R0),e(R0,QCe),e(QCe,ADr),e(R0,LDr),e(R0,aZ),e(aZ,yDr),e(R0,xDr),e(ke,$Dr),e(ke,P0),e(P0,HCe),e(HCe,kDr),e(P0,SDr),e(P0,nZ),e(nZ,RDr),e(P0,PDr),e(ke,BDr),e(ke,B0),e(B0,UCe),e(UCe,IDr),e(B0,NDr),e(B0,sZ),e(sZ,qDr),e(B0,jDr),e(ke,DDr),e(ke,I0),e(I0,JCe),e(JCe,GDr),e(I0,ODr),e(I0,lZ),e(lZ,VDr),e(I0,XDr),e(ke,zDr),e(ke,N0),e(N0,YCe),e(YCe,WDr),e(N0,QDr),e(N0,iZ),e(iZ,HDr),e(N0,UDr),e(zr,JDr),M(q0,zr,null),b(f,HDe,u),b(f,Yc,u),e(Yc,j0),e(j0,KCe),M(Fx,KCe,null),e(Yc,YDr),e(Yc,ZCe),e(ZCe,KDr),b(f,UDe,u),b(f,br,u),M(Tx,br,null),e(br,ZDr),e(br,Kc),e(Kc,eGr),e(Kc,dZ),e(dZ,oGr),e(Kc,rGr),e(Kc,cZ),e(cZ,tGr),e(Kc,aGr),e(br,nGr),e(br,Mx),e(Mx,sGr),e(Mx,e5e),e(e5e,lGr),e(Mx,iGr),e(br,dGr),e(br,Ht),M(Ex,Ht,null),e(Ht,cGr),e(Ht,o5e),e(o5e,fGr),e(Ht,mGr),e(Ht,Zc),e(Zc,gGr),e(Zc,r5e),e(r5e,hGr),e(Zc,pGr),e(Zc,fZ),e(fZ,_Gr),e(Zc,uGr),e(Ht,bGr),M(D0,Ht,null),e(br,vGr),e(br,Wr),M(Cx,Wr,null),e(Wr,FGr),e(Wr,t5e),e(t5e,TGr),e(Wr,MGr),e(Wr,Tn),e(Tn,EGr),e(Tn,a5e),e(a5e,CGr),e(Tn,wGr),e(Tn,n5e),e(n5e,AGr),e(Tn,LGr),e(Tn,s5e),e(s5e,yGr),e(Tn,xGr),e(Wr,$Gr),e(Wr,Ge),e(Ge,G0),e(G0,l5e),e(l5e,kGr),e(G0,SGr),e(G0,mZ),e(mZ,RGr),e(G0,PGr),e(Ge,BGr),e(Ge,O0),e(O0,i5e),e(i5e,IGr),e(O0,NGr),e(O0,gZ),e(gZ,qGr),e(O0,jGr),e(Ge,DGr),e(Ge,V0),e(V0,d5e),e(d5e,GGr),e(V0,OGr),e(V0,hZ),e(hZ,VGr),e(V0,XGr),e(Ge,zGr),e(Ge,X0),e(X0,c5e),e(c5e,WGr),e(X0,QGr),e(X0,pZ),e(pZ,HGr),e(X0,UGr),e(Ge,JGr),e(Ge,z0),e(z0,f5e),e(f5e,YGr),e(z0,KGr),e(z0,_Z),e(_Z,ZGr),e(z0,eOr),e(Ge,oOr),e(Ge,W0),e(W0,m5e),e(m5e,rOr),e(W0,tOr),e(W0,uZ),e(uZ,aOr),e(W0,nOr),e(Ge,sOr),e(Ge,Q0),e(Q0,g5e),e(g5e,lOr),e(Q0,iOr),e(Q0,bZ),e(bZ,dOr),e(Q0,cOr),e(Ge,fOr),e(Ge,H0),e(H0,h5e),e(h5e,mOr),e(H0,gOr),e(H0,vZ),e(vZ,hOr),e(H0,pOr),e(Wr,_Or),M(U0,Wr,null),b(f,JDe,u),b(f,ef,u),e(ef,J0),e(J0,p5e),M(wx,p5e,null),e(ef,uOr),e(ef,_5e),e(_5e,bOr),b(f,YDe,u),b(f,vr,u),M(Ax,vr,null),e(vr,vOr),e(vr,of),e(of,FOr),e(of,FZ),e(FZ,TOr),e(of,MOr),e(of,TZ),e(TZ,EOr),e(of,COr),e(vr,wOr),e(vr,Lx),e(Lx,AOr),e(Lx,u5e),e(u5e,LOr),e(Lx,yOr),e(vr,xOr),e(vr,Ut),M(yx,Ut,null),e(Ut,$Or),e(Ut,b5e),e(b5e,kOr),e(Ut,SOr),e(Ut,rf),e(rf,ROr),e(rf,v5e),e(v5e,POr),e(rf,BOr),e(rf,MZ),e(MZ,IOr),e(rf,NOr),e(Ut,qOr),M(Y0,Ut,null),e(vr,jOr),e(vr,Qr),M(xx,Qr,null),e(Qr,DOr),e(Qr,F5e),e(F5e,GOr),e(Qr,OOr),e(Qr,Mn),e(Mn,VOr),e(Mn,T5e),e(T5e,XOr),e(Mn,zOr),e(Mn,M5e),e(M5e,WOr),e(Mn,QOr),e(Mn,E5e),e(E5e,HOr),e(Mn,UOr),e(Qr,JOr),e(Qr,Oe),e(Oe,K0),e(K0,C5e),e(C5e,YOr),e(K0,KOr),e(K0,EZ),e(EZ,ZOr),e(K0,eVr),e(Oe,oVr),e(Oe,Z0),e(Z0,w5e),e(w5e,rVr),e(Z0,tVr),e(Z0,CZ),e(CZ,aVr),e(Z0,nVr),e(Oe,sVr),e(Oe,ew),e(ew,A5e),e(A5e,lVr),e(ew,iVr),e(ew,wZ),e(wZ,dVr),e(ew,cVr),e(Oe,fVr),e(Oe,ow),e(ow,L5e),e(L5e,mVr),e(ow,gVr),e(ow,AZ),e(AZ,hVr),e(ow,pVr),e(Oe,_Vr),e(Oe,rw),e(rw,y5e),e(y5e,uVr),e(rw,bVr),e(rw,LZ),e(LZ,vVr),e(rw,FVr),e(Oe,TVr),e(Oe,tw),e(tw,x5e),e(x5e,MVr),e(tw,EVr),e(tw,yZ),e(yZ,CVr),e(tw,wVr),e(Oe,AVr),e(Oe,aw),e(aw,$5e),e($5e,LVr),e(aw,yVr),e(aw,xZ),e(xZ,xVr),e(aw,$Vr),e(Oe,kVr),e(Oe,nw),e(nw,k5e),e(k5e,SVr),e(nw,RVr),e(nw,$Z),e($Z,PVr),e(nw,BVr),e(Qr,IVr),M(sw,Qr,null),b(f,KDe,u),b(f,tf,u),e(tf,lw),e(lw,S5e),M($x,S5e,null),e(tf,NVr),e(tf,R5e),e(R5e,qVr),b(f,ZDe,u),b(f,Fr,u),M(kx,Fr,null),e(Fr,jVr),e(Fr,af),e(af,DVr),e(af,kZ),e(kZ,GVr),e(af,OVr),e(af,SZ),e(SZ,VVr),e(af,XVr),e(Fr,zVr),e(Fr,Sx),e(Sx,WVr),e(Sx,P5e),e(P5e,QVr),e(Sx,HVr),e(Fr,UVr),e(Fr,Jt),M(Rx,Jt,null),e(Jt,JVr),e(Jt,B5e),e(B5e,YVr),e(Jt,KVr),e(Jt,nf),e(nf,ZVr),e(nf,I5e),e(I5e,eXr),e(nf,oXr),e(nf,RZ),e(RZ,rXr),e(nf,tXr),e(Jt,aXr),M(iw,Jt,null),e(Fr,nXr),e(Fr,Hr),M(Px,Hr,null),e(Hr,sXr),e(Hr,N5e),e(N5e,lXr),e(Hr,iXr),e(Hr,En),e(En,dXr),e(En,q5e),e(q5e,cXr),e(En,fXr),e(En,j5e),e(j5e,mXr),e(En,gXr),e(En,D5e),e(D5e,hXr),e(En,pXr),e(Hr,_Xr),e(Hr,G5e),e(G5e,dw),e(dw,O5e),e(O5e,uXr),e(dw,bXr),e(dw,PZ),e(PZ,vXr),e(dw,FXr),e(Hr,TXr),M(cw,Hr,null),b(f,eGe,u),b(f,sf,u),e(sf,fw),e(fw,V5e),M(Bx,V5e,null),e(sf,MXr),e(sf,X5e),e(X5e,EXr),b(f,oGe,u),b(f,Tr,u),M(Ix,Tr,null),e(Tr,CXr),e(Tr,lf),e(lf,wXr),e(lf,BZ),e(BZ,AXr),e(lf,LXr),e(lf,IZ),e(IZ,yXr),e(lf,xXr),e(Tr,$Xr),e(Tr,Nx),e(Nx,kXr),e(Nx,z5e),e(z5e,SXr),e(Nx,RXr),e(Tr,PXr),e(Tr,Yt),M(qx,Yt,null),e(Yt,BXr),e(Yt,W5e),e(W5e,IXr),e(Yt,NXr),e(Yt,df),e(df,qXr),e(df,Q5e),e(Q5e,jXr),e(df,DXr),e(df,NZ),e(NZ,GXr),e(df,OXr),e(Yt,VXr),M(mw,Yt,null),e(Tr,XXr),e(Tr,Ur),M(jx,Ur,null),e(Ur,zXr),e(Ur,H5e),e(H5e,WXr),e(Ur,QXr),e(Ur,Cn),e(Cn,HXr),e(Cn,U5e),e(U5e,UXr),e(Cn,JXr),e(Cn,J5e),e(J5e,YXr),e(Cn,KXr),e(Cn,Y5e),e(Y5e,ZXr),e(Cn,ezr),e(Ur,ozr),e(Ur,Dx),e(Dx,gw),e(gw,K5e),e(K5e,rzr),e(gw,tzr),e(gw,qZ),e(qZ,azr),e(gw,nzr),e(Dx,szr),e(Dx,hw),e(hw,Z5e),e(Z5e,lzr),e(hw,izr),e(hw,jZ),e(jZ,dzr),e(hw,czr),e(Ur,fzr),M(pw,Ur,null),b(f,rGe,u),b(f,cf,u),e(cf,_w),e(_w,e3e),M(Gx,e3e,null),e(cf,mzr),e(cf,o3e),e(o3e,gzr),b(f,tGe,u),b(f,Mr,u),M(Ox,Mr,null),e(Mr,hzr),e(Mr,ff),e(ff,pzr),e(ff,DZ),e(DZ,_zr),e(ff,uzr),e(ff,GZ),e(GZ,bzr),e(ff,vzr),e(Mr,Fzr),e(Mr,Vx),e(Vx,Tzr),e(Vx,r3e),e(r3e,Mzr),e(Vx,Ezr),e(Mr,Czr),e(Mr,Kt),M(Xx,Kt,null),e(Kt,wzr),e(Kt,t3e),e(t3e,Azr),e(Kt,Lzr),e(Kt,mf),e(mf,yzr),e(mf,a3e),e(a3e,xzr),e(mf,$zr),e(mf,OZ),e(OZ,kzr),e(mf,Szr),e(Kt,Rzr),M(uw,Kt,null),e(Mr,Pzr),e(Mr,Jr),M(zx,Jr,null),e(Jr,Bzr),e(Jr,n3e),e(n3e,Izr),e(Jr,Nzr),e(Jr,wn),e(wn,qzr),e(wn,s3e),e(s3e,jzr),e(wn,Dzr),e(wn,l3e),e(l3e,Gzr),e(wn,Ozr),e(wn,i3e),e(i3e,Vzr),e(wn,Xzr),e(Jr,zzr),e(Jr,d3e),e(d3e,bw),e(bw,c3e),e(c3e,Wzr),e(bw,Qzr),e(bw,VZ),e(VZ,Hzr),e(bw,Uzr),e(Jr,Jzr),M(vw,Jr,null),aGe=!0},p(f,[u]){const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),Tf.$set(Wx);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),Ag.$set(f3e);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),ih.$set(m3e);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),Gh.$set(g3e);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),Oh.$set(Qx);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),ip.$set(h3e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),dp.$set(An);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),mp.$set(p3e);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),du.$set(_3e);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),fu.$set(u3e);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),r4.$set(Hx);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),a4.$set(b3e);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),X4.$set(Ux);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),W4.$set(v3e);const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),$1.$set(Jx);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),S1.$set(F3e);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),J1.$set(T3e);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),K1.$set(M3e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),Q7.$set(gf);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),U7.$set(E3e);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),Ab.$set(C3e);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),yb.$set(w3e);const Yx={};u&2&&(Yx.$$scope={dirty:u,ctx:f}),Bb.$set(Yx);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),Nb.$set(A3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),v2.$set(L3e);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),T2.$set(y3e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),dv.$set(et);const Kx={};u&2&&(Kx.$$scope={dirty:u,ctx:f}),fv.$set(Kx);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),hv.$set(x3e);const Zx={};u&2&&(Zx.$$scope={dirty:u,ctx:f}),_v.$set(Zx);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),$v.$set($3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),Sv.$set(ot);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),Bv.$set(k3e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Nv.$set(hf);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),Hv.$set(S3e);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),Jv.$set(R3e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),tF.$set(L);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),nF.$set(Fw);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),_F.$set(P3e);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),bF.$set(B3e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),MF.$set(Tw);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),CF.$set(I3e);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),kF.$set(N3e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),RF.$set(Mw);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),qF.$set(q3e);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),DF.$set(j3e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),XF.$set(Ew);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),WF.$set(D3e);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),UF.$set(G3e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),YF.$set(Cw);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),tT.$set(O3e);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),nT.$set(V3e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),iT.$set(ww);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),cT.$set(X3e);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),tM.$set(z3e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),nM.$set(Aw);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),xM.$set(W3e);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),kM.$set(Q3e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),zM.$set(Lw);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),QM.$set(H3e);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),KM.$set(U3e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),eE.$set(yw);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),TE.$set(J3e);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),EE.$set(Y3e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),PE.$set(xw);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),IE.$set(K3e);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),dC.$set(Z3e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),fC.$set($w);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),xC.$set(e0e);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),kC.$set(o0e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),PC.$set(kw);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),IC.$set(r0e);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),qC.$set(t0e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),DC.$set(Sw);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),l5.$set(a0e);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),d5.$set(n0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),$5.$set(Rw);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),S5.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),P5.$set(l0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),I5.$set(Pw);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),q5.$set(i0e);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),D5.$set(d0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),g3.$set(Bw);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),p3.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),A3.$set(f0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),y3.$set(Iw);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),G3.$set(m0e);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),V3.$set(g0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),e0.$set(Nw);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),r0.$set(h0e);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),m0.$set(p0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),h0.$set(qw);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),w0.$set(_0e);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),L0.$set(u0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),q0.$set(jw);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),D0.$set(b0e);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),U0.$set(v0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),Y0.$set(Dw);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),sw.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),iw.$set(T0e);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),cw.$set(Gw);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),mw.$set(M0e);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),pw.$set(E0e);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),uw.$set(Ow);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),vw.$set(C0e)},i(f){aGe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(Tf.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(Ag.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(Z6.$$.fragment,f),E(ih.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(nL.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(_L.$$.fragment,f),E(mp.$$.fragment,f),E(uL.$$.fragment,f),E(du.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(fu.$$.fragment,f),E(ML.$$.fragment,f),E(r4.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(a4.$$.fragment,f),E(LL.$$.fragment,f),E(X4.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(W4.$$.fragment,f),E(SL.$$.fragment,f),E($1.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(S1.$$.fragment,f),E(NL.$$.fragment,f),E(J1.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(K1.$$.fragment,f),E(OL.$$.fragment,f),E(Q7.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(U7.$$.fragment,f),E(QL.$$.fragment,f),E(Ab.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(yb.$$.fragment,f),E(KL.$$.fragment,f),E(Bb.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(Nb.$$.fragment,f),E(ty.$$.fragment,f),E(v2.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(T2.$$.fragment,f),E(iy.$$.fragment,f),E(dv.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(fv.$$.fragment,f),E(gy.$$.fragment,f),E(hv.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(_v.$$.fragment,f),E(by.$$.fragment,f),E($v.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(Sv.$$.fragment,f),E(Ey.$$.fragment,f),E(Bv.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(Nv.$$.fragment,f),E(yy.$$.fragment,f),E(Hv.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Jv.$$.fragment,f),E(Ry.$$.fragment,f),E(tF.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(nF.$$.fragment,f),E(qy.$$.fragment,f),E(_F.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(bF.$$.fragment,f),E(Vy.$$.fragment,f),E(MF.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(CF.$$.fragment,f),E(Uy.$$.fragment,f),E(kF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(RF.$$.fragment,f),E(e8.$$.fragment,f),E(qF.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(DF.$$.fragment,f),E(n8.$$.fragment,f),E(XF.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(WF.$$.fragment,f),E(f8.$$.fragment,f),E(UF.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(YF.$$.fragment,f),E(_8.$$.fragment,f),E(tT.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(nT.$$.fragment,f),E(T8.$$.fragment,f),E(iT.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(cT.$$.fragment,f),E(A8.$$.fragment,f),E(tM.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(nM.$$.fragment,f),E(k8.$$.fragment,f),E(xM.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(kM.$$.fragment,f),E(I8.$$.fragment,f),E(zM.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(QM.$$.fragment,f),E(G8.$$.fragment,f),E(KM.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(eE.$$.fragment,f),E(W8.$$.fragment,f),E(TE.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(EE.$$.fragment,f),E(Y8.$$.fragment,f),E(PE.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(IE.$$.fragment,f),E(r9.$$.fragment,f),E(dC.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(fC.$$.fragment,f),E(l9.$$.fragment,f),E(xC.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(kC.$$.fragment,f),E(m9.$$.fragment,f),E(PC.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(IC.$$.fragment,f),E(b9.$$.fragment,f),E(qC.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(DC.$$.fragment,f),E(E9.$$.fragment,f),E(l5.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(d5.$$.fragment,f),E(y9.$$.fragment,f),E($5.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(S5.$$.fragment,f),E(R9.$$.fragment,f),E(P5.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(I5.$$.fragment,f),E(q9.$$.fragment,f),E(q5.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(D5.$$.fragment,f),E(V9.$$.fragment,f),E(g3.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(p3.$$.fragment,f),E(H9.$$.fragment,f),E(A3.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(y3.$$.fragment,f),E(Z9.$$.fragment,f),E(G3.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(V3.$$.fragment,f),E(ax.$$.fragment,f),E(e0.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(r0.$$.fragment,f),E(dx.$$.fragment,f),E(m0.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(h0.$$.fragment,f),E(hx.$$.fragment,f),E(w0.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(L0.$$.fragment,f),E(vx.$$.fragment,f),E(q0.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(D0.$$.fragment,f),E(Cx.$$.fragment,f),E(U0.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(Y0.$$.fragment,f),E(xx.$$.fragment,f),E(sw.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(iw.$$.fragment,f),E(Px.$$.fragment,f),E(cw.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(mw.$$.fragment,f),E(jx.$$.fragment,f),E(pw.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(uw.$$.fragment,f),E(zx.$$.fragment,f),E(vw.$$.fragment,f),aGe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(Tf.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(Ag.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(Z6.$$.fragment,f),C(ih.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(nL.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(_L.$$.fragment,f),C(mp.$$.fragment,f),C(uL.$$.fragment,f),C(du.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(fu.$$.fragment,f),C(ML.$$.fragment,f),C(r4.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(a4.$$.fragment,f),C(LL.$$.fragment,f),C(X4.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(W4.$$.fragment,f),C(SL.$$.fragment,f),C($1.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(S1.$$.fragment,f),C(NL.$$.fragment,f),C(J1.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(K1.$$.fragment,f),C(OL.$$.fragment,f),C(Q7.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(U7.$$.fragment,f),C(QL.$$.fragment,f),C(Ab.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(yb.$$.fragment,f),C(KL.$$.fragment,f),C(Bb.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(Nb.$$.fragment,f),C(ty.$$.fragment,f),C(v2.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(T2.$$.fragment,f),C(iy.$$.fragment,f),C(dv.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(fv.$$.fragment,f),C(gy.$$.fragment,f),C(hv.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(_v.$$.fragment,f),C(by.$$.fragment,f),C($v.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(Sv.$$.fragment,f),C(Ey.$$.fragment,f),C(Bv.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(Nv.$$.fragment,f),C(yy.$$.fragment,f),C(Hv.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Jv.$$.fragment,f),C(Ry.$$.fragment,f),C(tF.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(nF.$$.fragment,f),C(qy.$$.fragment,f),C(_F.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(bF.$$.fragment,f),C(Vy.$$.fragment,f),C(MF.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(CF.$$.fragment,f),C(Uy.$$.fragment,f),C(kF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(RF.$$.fragment,f),C(e8.$$.fragment,f),C(qF.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(DF.$$.fragment,f),C(n8.$$.fragment,f),C(XF.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(WF.$$.fragment,f),C(f8.$$.fragment,f),C(UF.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(YF.$$.fragment,f),C(_8.$$.fragment,f),C(tT.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(nT.$$.fragment,f),C(T8.$$.fragment,f),C(iT.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(cT.$$.fragment,f),C(A8.$$.fragment,f),C(tM.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(nM.$$.fragment,f),C(k8.$$.fragment,f),C(xM.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(kM.$$.fragment,f),C(I8.$$.fragment,f),C(zM.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(QM.$$.fragment,f),C(G8.$$.fragment,f),C(KM.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(eE.$$.fragment,f),C(W8.$$.fragment,f),C(TE.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(EE.$$.fragment,f),C(Y8.$$.fragment,f),C(PE.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(IE.$$.fragment,f),C(r9.$$.fragment,f),C(dC.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(fC.$$.fragment,f),C(l9.$$.fragment,f),C(xC.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(kC.$$.fragment,f),C(m9.$$.fragment,f),C(PC.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(IC.$$.fragment,f),C(b9.$$.fragment,f),C(qC.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(DC.$$.fragment,f),C(E9.$$.fragment,f),C(l5.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(d5.$$.fragment,f),C(y9.$$.fragment,f),C($5.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(S5.$$.fragment,f),C(R9.$$.fragment,f),C(P5.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(I5.$$.fragment,f),C(q9.$$.fragment,f),C(q5.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(D5.$$.fragment,f),C(V9.$$.fragment,f),C(g3.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(p3.$$.fragment,f),C(H9.$$.fragment,f),C(A3.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(y3.$$.fragment,f),C(Z9.$$.fragment,f),C(G3.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(V3.$$.fragment,f),C(ax.$$.fragment,f),C(e0.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(r0.$$.fragment,f),C(dx.$$.fragment,f),C(m0.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(h0.$$.fragment,f),C(hx.$$.fragment,f),C(w0.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(L0.$$.fragment,f),C(vx.$$.fragment,f),C(q0.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(D0.$$.fragment,f),C(Cx.$$.fragment,f),C(U0.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(Y0.$$.fragment,f),C(xx.$$.fragment,f),C(sw.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(iw.$$.fragment,f),C(Px.$$.fragment,f),C(cw.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(mw.$$.fragment,f),C(jx.$$.fragment,f),C(pw.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(uw.$$.fragment,f),C(zx.$$.fragment,f),C(vw.$$.fragment,f),aGe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(rt),f&&t(De),f&&t(We),f&&t(bf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(oje),f&&t(vi),w(G6),f&&t(rje),f&&t(kn),f&&t(tje),w(O6,f),f&&t(aje),f&&t(fk),f&&t(nje),w(Tf,f),f&&t(sje),f&&t(Fi),w(V6),f&&t(lje),f&&t(Co),w(X6),w(Q6),w(Ag),w(H6),f&&t(ije),f&&t(Mi),w(U6),f&&t(dje),f&&t(wo),w(J6),w(Z6),w(ih),w(eL),f&&t(cje),f&&t(Ei),w(oL),f&&t(fje),f&&t(Ao),w(rL),w(nL),w(Gh),w(Oh),w(sL),f&&t(mje),f&&t(Ci),w(lL),f&&t(gje),f&&t(Lo),w(iL),w(fL),w(ip),w(dp),w(mL),f&&t(hje),f&&t(Ai),w(gL),f&&t(pje),f&&t(yo),w(hL),w(_L),w(mp),w(uL),w(du),f&&t(_je),f&&t(xi),w(bL),f&&t(uje),f&&t(xo),w(vL),w(TL),w(fu),w(ML),w(r4),f&&t(bje),f&&t(Si),w(EL),f&&t(vje),f&&t($o),w(CL),w(AL),w(a4),w(LL),w(X4),f&&t(Fje),f&&t(Bi),w(yL),f&&t(Tje),f&&t(ko),w(xL),w(kL),w(W4),w(SL),w($1),f&&t(Mje),f&&t(qi),w(RL),f&&t(Eje),f&&t(So),w(PL),w(IL),w(S1),w(NL),w(J1),f&&t(Cje),f&&t(Gi),w(qL),f&&t(wje),f&&t(Ro),w(jL),w(GL),w(K1),w(OL),w(Q7),f&&t(Aje),f&&t(Xi),w(VL),f&&t(Lje),f&&t(Po),w(XL),w(WL),w(U7),w(QL),w(Ab),f&&t(yje),f&&t(Qi),w(HL),f&&t(xje),f&&t(Bo),w(UL),w(YL),w(yb),w(KL),w(Bb),f&&t($je),f&&t(Ji),w(ZL),f&&t(kje),f&&t(Io),w(ey),w(ry),w(Nb),w(ty),w(v2),f&&t(Sje),f&&t(Zi),w(ay),f&&t(Rje),f&&t(No),w(ny),w(ly),w(T2),w(iy),w(dv),f&&t(Pje),f&&t(rd),w(dy),f&&t(Bje),f&&t(qo),w(cy),w(my),w(fv),w(gy),w(hv),f&&t(Ije),f&&t(nd),w(hy),f&&t(Nje),f&&t(jo),w(py),w(uy),w(_v),w(by),w($v),f&&t(qje),f&&t(id),w(vy),f&&t(jje),f&&t(Do),w(Fy),w(My),w(Sv),w(Ey),w(Bv),f&&t(Dje),f&&t(fd),w(Cy),f&&t(Gje),f&&t(Go),w(wy),w(Ly),w(Nv),w(yy),w(Hv),f&&t(Oje),f&&t(hd),w(xy),f&&t(Vje),f&&t(Oo),w($y),w(Sy),w(Jv),w(Ry),w(tF),f&&t(Xje),f&&t(ud),w(Py),f&&t(zje),f&&t(Vo),w(By),w(Ny),w(nF),w(qy),w(_F),f&&t(Wje),f&&t(Fd),w(jy),f&&t(Qje),f&&t(Xo),w(Dy),w(Oy),w(bF),w(Vy),w(MF),f&&t(Hje),f&&t(Ed),w(zy),f&&t(Uje),f&&t(zo),w(Wy),w(Hy),w(CF),w(Uy),w(kF),f&&t(Jje),f&&t(Ad),w(Jy),f&&t(Yje),f&&t(Wo),w(Yy),w(Zy),w(RF),w(e8),w(qF),f&&t(Kje),f&&t($d),w(o8),f&&t(Zje),f&&t(Qo),w(r8),w(a8),w(DF),w(n8),w(XF),f&&t(eDe),f&&t(Rd),w(l8),f&&t(oDe),f&&t(Ho),w(i8),w(c8),w(WF),w(f8),w(UF),f&&t(rDe),f&&t(Id),w(m8),f&&t(tDe),f&&t(Uo),w(g8),w(p8),w(YF),w(_8),w(tT),f&&t(aDe),f&&t(jd),w(u8),f&&t(nDe),f&&t(Jo),w(b8),w(F8),w(nT),w(T8),w(iT),f&&t(sDe),f&&t(Od),w(M8),f&&t(lDe),f&&t(Yo),w(E8),w(w8),w(cT),w(A8),w(tM),f&&t(iDe),f&&t(zd),w(L8),f&&t(dDe),f&&t(Ko),w(y8),w($8),w(nM),w(k8),w(xM),f&&t(cDe),f&&t(Hd),w(S8),f&&t(fDe),f&&t(Zo),w(R8),w(B8),w(kM),w(I8),w(zM),f&&t(mDe),f&&t(Yd),w(N8),f&&t(gDe),f&&t(er),w(q8),w(D8),w(QM),w(G8),w(KM),f&&t(hDe),f&&t(ec),w(O8),f&&t(pDe),f&&t(or),w(V8),w(z8),w(eE),w(W8),w(TE),f&&t(_De),f&&t(tc),w(Q8),f&&t(uDe),f&&t(rr),w(H8),w(J8),w(EE),w(Y8),w(PE),f&&t(bDe),f&&t(sc),w(K8),f&&t(vDe),f&&t(tr),w(Z8),w(o9),w(IE),w(r9),w(dC),f&&t(FDe),f&&t(dc),w(t9),f&&t(TDe),f&&t(ar),w(a9),w(s9),w(fC),w(l9),w(xC),f&&t(MDe),f&&t(mc),w(i9),f&&t(EDe),f&&t(nr),w(d9),w(f9),w(kC),w(m9),w(PC),f&&t(CDe),f&&t(pc),w(h9),f&&t(wDe),f&&t(sr),w(p9),w(u9),w(IC),w(b9),w(qC),f&&t(ADe),f&&t(bc),w(v9),f&&t(LDe),f&&t(lr),w(F9),w(M9),w(DC),w(E9),w(l5),f&&t(yDe),f&&t(Tc),w(C9),f&&t(xDe),f&&t(ir),w(w9),w(L9),w(d5),w(y9),w($5),f&&t($De),f&&t(Cc),w(x9),f&&t(kDe),f&&t(dr),w($9),w(S9),w(S5),w(R9),w(P5),f&&t(SDe),f&&t(Lc),w(P9),f&&t(RDe),f&&t(cr),w(B9),w(N9),w(I5),w(q9),w(q5),f&&t(PDe),f&&t($c),w(j9),f&&t(BDe),f&&t(fr),w(D9),w(O9),w(D5),w(V9),w(g3),f&&t(IDe),f&&t(Rc),w(X9),f&&t(NDe),f&&t(mr),w(z9),w(Q9),w(p3),w(H9),w(A3),f&&t(qDe),f&&t(Ic),w(U9),f&&t(jDe),f&&t(gr),w(J9),w(K9),w(y3),w(Z9),w(G3),f&&t(DDe),f&&t(jc),w(ex),f&&t(GDe),f&&t(hr),w(ox),w(tx),w(V3),w(ax),w(e0),f&&t(ODe),f&&t(Oc),w(nx),f&&t(VDe),f&&t(pr),w(sx),w(ix),w(r0),w(dx),w(m0),f&&t(XDe),f&&t(zc),w(cx),f&&t(zDe),f&&t(_r),w(fx),w(gx),w(h0),w(hx),w(w0),f&&t(WDe),f&&t(Hc),w(px),f&&t(QDe),f&&t(ur),w(_x),w(bx),w(L0),w(vx),w(q0),f&&t(HDe),f&&t(Yc),w(Fx),f&&t(UDe),f&&t(br),w(Tx),w(Ex),w(D0),w(Cx),w(U0),f&&t(JDe),f&&t(ef),w(wx),f&&t(YDe),f&&t(vr),w(Ax),w(yx),w(Y0),w(xx),w(sw),f&&t(KDe),f&&t(tf),w($x),f&&t(ZDe),f&&t(Fr),w(kx),w(Rx),w(iw),w(Px),w(cw),f&&t(eGe),f&&t(sf),w(Bx),f&&t(oGe),f&&t(Tr),w(Ix),w(qx),w(mw),w(jx),w(pw),f&&t(rGe),f&&t(cf),w(Gx),f&&t(tGe),f&&t(Mr),w(Ox),w(Xx),w(uw),w(zx),w(vw)}}}const nBt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function sBt(y){return sRt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gBt extends rRt{constructor(g){super();tRt(this,g,sBt,aBt,aRt,{})}}export{gBt as default,nBt as metadata};
