import{S as DOt,i as GOt,s as OOt,e as a,k as l,w as F,t as o,M as VOt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as XOt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as UZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function zOt($){let g,v,p,m,_,d,h,Eo,Ei,$f,at,Ci,wi,IL,kf,Oe,Qe,Ai,Pn,NL,Bn,In,qL,Li,Nn,jL,yi,Sf,$a;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ei=a("code"),$f=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ci=a("code"),wi=o('"new-model"'),IL=o(")."),kf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ai=a("code"),Pn=o("NewModel"),NL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),qL=o(`, make sure its
`),Li=a("code"),Nn=o("config_class"),jL=o(` attribute is set to the same class you use when registering the model (here
`),yi=a("code"),Sf=o("NewModelConfig"),$a=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var pS=s(p);m=r(pS,"NewModelConfig"),pS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var xi=s(d);h=r(xi,"PretrainedConfig"),xi.forEach(t),Eo=r(Ae,`, make sure its
`),Ei=n(Ae,"CODE",{});var _S=s(Ei);$f=r(_S,"model_type"),_S.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ci=n(Ae,"CODE",{});var uS=s(Ci);wi=r(uS,'"new-model"'),uS.forEach(t),IL=r(Ae,")."),Ae.forEach(t),kf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Ai=n(Co,"CODE",{});var ka=s(Ai);Pn=r(ka,"NewModel"),ka.forEach(t),NL=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var bS=s(Bn);In=r(bS,"PreTrainedModel"),bS.forEach(t),qL=r(Co,`, make sure its
`),Li=n(Co,"CODE",{});var Rf=s(Li);Nn=r(Rf,"config_class"),Rf.forEach(t),jL=r(Co,` attribute is set to the same class you use when registering the model (here
`),yi=n(Co,"CODE",{});var vS=s(yi);Sf=r(vS,"NewModelConfig"),vS.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ei),e(Ei,$f),e(g,at),e(g,Ci),e(Ci,wi),e(g,IL),b(We,kf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Ai),e(Ai,Pn),e(Oe,NL),e(Oe,Bn),e(Bn,In),e(Oe,qL),e(Oe,Li),e(Li,Nn),e(Oe,jL),e(Oe,yi),e(yi,Sf),e(Oe,$a)},d(We){We&&t(g),We&&t(kf),We&&t(Oe)}}}function QOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function UOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function YOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XXt($){let g,v,p,m,_,d,h,Eo,Ei,$f,at,Ci,wi,IL,kf,Oe,Qe,Ai,Pn,NL,Bn,In,qL,Li,Nn,jL,yi,Sf,$a,We,Ae,pS,xi,_S,uS,Co,ka,bS,Rf,vS,QQe,kOe,$i,Pf,qte,DL,WQe,jte,HQe,SOe,qn,UQe,Dte,JQe,YQe,Gte,KQe,ZQe,ROe,GL,POe,FS,eWe,BOe,Bf,IOe,ki,If,Ote,OL,oWe,Vte,rWe,NOe,wo,VL,tWe,XL,aWe,TS,nWe,sWe,lWe,zL,iWe,Xte,dWe,cWe,fWe,Lr,QL,mWe,zte,gWe,hWe,Si,pWe,Qte,_We,uWe,Wte,bWe,vWe,FWe,A,Nf,Hte,TWe,MWe,MS,EWe,CWe,wWe,qf,Ute,AWe,LWe,ES,yWe,xWe,$We,jf,Jte,kWe,SWe,CS,RWe,PWe,BWe,Df,Yte,IWe,NWe,wS,qWe,jWe,DWe,Gf,Kte,GWe,OWe,AS,VWe,XWe,zWe,Of,Zte,QWe,WWe,LS,HWe,UWe,JWe,Vf,eae,YWe,KWe,yS,ZWe,eHe,oHe,Xf,oae,rHe,tHe,xS,aHe,nHe,sHe,zf,rae,lHe,iHe,$S,dHe,cHe,fHe,Qf,tae,mHe,gHe,kS,hHe,pHe,_He,Wf,aae,uHe,bHe,SS,vHe,FHe,THe,Hf,nae,MHe,EHe,RS,CHe,wHe,AHe,Uf,sae,LHe,yHe,PS,xHe,$He,kHe,Jf,lae,SHe,RHe,BS,PHe,BHe,IHe,Yf,iae,NHe,qHe,IS,jHe,DHe,GHe,Kf,dae,OHe,VHe,NS,XHe,zHe,QHe,Zf,cae,WHe,HHe,qS,UHe,JHe,YHe,em,fae,KHe,ZHe,jS,eUe,oUe,rUe,om,mae,tUe,aUe,DS,nUe,sUe,lUe,rm,gae,iUe,dUe,GS,cUe,fUe,mUe,tm,hae,gUe,hUe,OS,pUe,_Ue,uUe,am,pae,bUe,vUe,VS,FUe,TUe,MUe,nm,_ae,EUe,CUe,XS,wUe,AUe,LUe,sm,uae,yUe,xUe,zS,$Ue,kUe,SUe,lm,bae,RUe,PUe,QS,BUe,IUe,NUe,im,vae,qUe,jUe,WS,DUe,GUe,OUe,dm,Fae,VUe,XUe,HS,zUe,QUe,WUe,cm,Tae,HUe,UUe,US,JUe,YUe,KUe,fm,Mae,ZUe,eJe,JS,oJe,rJe,tJe,mm,Eae,aJe,nJe,YS,sJe,lJe,iJe,gm,Cae,dJe,cJe,KS,fJe,mJe,gJe,hm,wae,hJe,pJe,ZS,_Je,uJe,bJe,pm,Aae,vJe,FJe,eR,TJe,MJe,EJe,_m,Lae,CJe,wJe,oR,AJe,LJe,yJe,um,yae,xJe,$Je,rR,kJe,SJe,RJe,bm,xae,PJe,BJe,tR,IJe,NJe,qJe,vm,$ae,jJe,DJe,aR,GJe,OJe,VJe,Fm,kae,XJe,zJe,nR,QJe,WJe,HJe,Tm,Sae,UJe,JJe,sR,YJe,KJe,ZJe,Mm,Rae,eYe,oYe,lR,rYe,tYe,aYe,Em,Pae,nYe,sYe,iR,lYe,iYe,dYe,Cm,Bae,cYe,fYe,dR,mYe,gYe,hYe,wm,Iae,pYe,_Ye,cR,uYe,bYe,vYe,Am,Nae,FYe,TYe,fR,MYe,EYe,CYe,Lm,qae,wYe,AYe,mR,LYe,yYe,xYe,ym,jae,$Ye,kYe,gR,SYe,RYe,PYe,xm,Dae,BYe,IYe,hR,NYe,qYe,jYe,$m,Gae,DYe,GYe,pR,OYe,VYe,XYe,km,Oae,zYe,QYe,_R,WYe,HYe,UYe,Sm,Vae,JYe,YYe,uR,KYe,ZYe,eKe,Rm,Xae,oKe,rKe,bR,tKe,aKe,nKe,Pm,zae,sKe,lKe,vR,iKe,dKe,cKe,Bm,Qae,fKe,mKe,FR,gKe,hKe,pKe,Im,Wae,_Ke,uKe,TR,bKe,vKe,FKe,Nm,Hae,TKe,MKe,MR,EKe,CKe,wKe,qm,Uae,AKe,LKe,ER,yKe,xKe,$Ke,jm,Jae,kKe,SKe,CR,RKe,PKe,BKe,Dm,Yae,IKe,NKe,wR,qKe,jKe,DKe,Gm,Kae,GKe,OKe,AR,VKe,XKe,zKe,Om,Zae,QKe,WKe,LR,HKe,UKe,JKe,Vm,ene,YKe,KKe,yR,ZKe,eZe,oZe,Xm,one,rZe,tZe,xR,aZe,nZe,sZe,zm,rne,lZe,iZe,$R,dZe,cZe,fZe,Qm,tne,mZe,gZe,kR,hZe,pZe,_Ze,Wm,ane,uZe,bZe,SR,vZe,FZe,TZe,Hm,nne,MZe,EZe,RR,CZe,wZe,AZe,Um,sne,LZe,yZe,PR,xZe,$Ze,kZe,Jm,lne,SZe,RZe,BR,PZe,BZe,IZe,Ym,ine,NZe,qZe,IR,jZe,DZe,GZe,Km,dne,OZe,VZe,NR,XZe,zZe,QZe,Zm,cne,WZe,HZe,qR,UZe,JZe,YZe,eg,fne,KZe,ZZe,jR,eeo,oeo,reo,og,mne,teo,aeo,DR,neo,seo,leo,rg,gne,ieo,deo,GR,ceo,feo,meo,tg,hne,geo,heo,OR,peo,_eo,ueo,ag,pne,beo,veo,VR,Feo,Teo,Meo,ng,_ne,Eeo,Ceo,XR,weo,Aeo,Leo,sg,une,yeo,xeo,zR,$eo,keo,Seo,lg,bne,Reo,Peo,QR,Beo,Ieo,Neo,ig,vne,qeo,jeo,WR,Deo,Geo,Oeo,dg,Fne,Veo,Xeo,HR,zeo,Qeo,Weo,cg,Tne,Heo,Ueo,UR,Jeo,Yeo,Keo,fg,Mne,Zeo,eoo,JR,ooo,roo,too,mg,Ene,aoo,noo,YR,soo,loo,ioo,gg,Cne,doo,coo,KR,foo,moo,goo,hg,wne,hoo,poo,ZR,_oo,uoo,boo,pg,Ane,voo,Foo,eP,Too,Moo,Eoo,_g,Lne,Coo,woo,oP,Aoo,Loo,yoo,ug,yne,xoo,$oo,rP,koo,Soo,Roo,bg,xne,Poo,Boo,tP,Ioo,Noo,qoo,vg,$ne,joo,Doo,aP,Goo,Ooo,Voo,Fg,kne,Xoo,zoo,nP,Qoo,Woo,Hoo,Tg,Sne,Uoo,Joo,sP,Yoo,Koo,Zoo,Mg,Rne,ero,oro,lP,rro,tro,aro,Eg,Pne,nro,sro,iP,lro,iro,dro,Cg,Bne,cro,fro,dP,mro,gro,hro,wg,Ine,pro,_ro,cP,uro,bro,vro,Ag,Nne,Fro,Tro,fP,Mro,Ero,Cro,Lg,qne,wro,Aro,mP,Lro,yro,xro,yg,jne,$ro,kro,gP,Sro,Rro,Pro,xg,Dne,Bro,Iro,hP,Nro,qro,jro,$g,Gne,Dro,Gro,pP,Oro,Vro,Xro,kg,One,zro,Qro,_P,Wro,Hro,Uro,Sg,Vne,Jro,Yro,uP,Kro,Zro,eto,Rg,Xne,oto,rto,bP,tto,ato,nto,Pg,zne,sto,lto,vP,ito,dto,cto,Bg,Qne,fto,mto,FP,gto,hto,pto,Ig,Wne,_to,uto,TP,bto,vto,Fto,Ng,Hne,Tto,Mto,MP,Eto,Cto,wto,qg,Une,Ato,Lto,EP,yto,xto,$to,jg,Jne,kto,Sto,CP,Rto,Pto,Bto,Dg,Yne,Ito,Nto,wP,qto,jto,Dto,Gg,Kne,Gto,Oto,AP,Vto,Xto,zto,Og,Zne,Qto,Wto,LP,Hto,Uto,Jto,Vg,ese,Yto,Kto,yP,Zto,eao,oao,Xg,ose,rao,tao,xP,aao,nao,sao,zg,lao,Qg,WL,iao,rse,dao,qOe,Ri,Wg,tse,HL,cao,ase,fao,jOe,Ao,UL,mao,JL,gao,$P,hao,pao,_ao,YL,uao,nse,bao,vao,Fao,yr,KL,Tao,sse,Mao,Eao,Sa,Cao,lse,wao,Aao,ise,Lao,yao,dse,xao,$ao,kao,k,jn,cse,Sao,Rao,kP,Pao,Bao,SP,Iao,Nao,qao,Dn,fse,jao,Dao,RP,Gao,Oao,PP,Vao,Xao,zao,Gn,mse,Qao,Wao,BP,Hao,Uao,IP,Jao,Yao,Kao,Hg,gse,Zao,eno,NP,ono,rno,tno,On,hse,ano,nno,qP,sno,lno,jP,ino,dno,cno,Ug,pse,fno,mno,DP,gno,hno,pno,Jg,_se,_no,uno,GP,bno,vno,Fno,Yg,use,Tno,Mno,OP,Eno,Cno,wno,Vn,bse,Ano,Lno,VP,yno,xno,XP,$no,kno,Sno,Xn,vse,Rno,Pno,zP,Bno,Ino,QP,Nno,qno,jno,zn,Fse,Dno,Gno,WP,Ono,Vno,HP,Xno,zno,Qno,Kg,Tse,Wno,Hno,UP,Uno,Jno,Yno,Zg,Mse,Kno,Zno,JP,eso,oso,rso,eh,Ese,tso,aso,YP,nso,sso,lso,Qn,Cse,iso,dso,KP,cso,fso,ZP,mso,gso,hso,oh,wse,pso,_so,eB,uso,bso,vso,Wn,Ase,Fso,Tso,oB,Mso,Eso,rB,Cso,wso,Aso,Hn,Lse,Lso,yso,tB,xso,$so,aB,kso,Sso,Rso,Un,yse,Pso,Bso,nB,Iso,Nso,sB,qso,jso,Dso,Jn,xse,Gso,Oso,lB,Vso,Xso,iB,zso,Qso,Wso,rh,$se,Hso,Uso,dB,Jso,Yso,Kso,Yn,kse,Zso,elo,cB,olo,rlo,fB,tlo,alo,nlo,Kn,Sse,slo,llo,mB,ilo,dlo,gB,clo,flo,mlo,Zn,Rse,glo,hlo,hB,plo,_lo,pB,ulo,blo,vlo,es,Pse,Flo,Tlo,_B,Mlo,Elo,uB,Clo,wlo,Alo,os,Bse,Llo,ylo,bB,xlo,$lo,vB,klo,Slo,Rlo,rs,Ise,Plo,Blo,FB,Ilo,Nlo,TB,qlo,jlo,Dlo,th,Nse,Glo,Olo,MB,Vlo,Xlo,zlo,ts,qse,Qlo,Wlo,EB,Hlo,Ulo,CB,Jlo,Ylo,Klo,ah,jse,Zlo,eio,wB,oio,rio,tio,as,Dse,aio,nio,AB,sio,lio,LB,iio,dio,cio,ns,Gse,fio,mio,yB,gio,hio,xB,pio,_io,uio,ss,Ose,bio,vio,$B,Fio,Tio,kB,Mio,Eio,Cio,nh,Vse,wio,Aio,SB,Lio,yio,xio,ls,Xse,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Iio,is,zse,Nio,qio,BB,jio,Dio,IB,Gio,Oio,Vio,ds,Qse,Xio,zio,NB,Qio,Wio,qB,Hio,Uio,Jio,sh,Wse,Yio,Kio,jB,Zio,edo,odo,cs,Hse,rdo,tdo,DB,ado,ndo,GB,sdo,ldo,ido,fs,Use,ddo,cdo,OB,fdo,mdo,VB,gdo,hdo,pdo,ms,Jse,_do,udo,XB,bdo,vdo,zB,Fdo,Tdo,Mdo,gs,Yse,Edo,Cdo,QB,wdo,Ado,WB,Ldo,ydo,xdo,hs,Kse,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,ps,Zse,Ndo,qdo,JB,jdo,Ddo,YB,Gdo,Odo,Vdo,_s,ele,Xdo,zdo,KB,Qdo,Wdo,ZB,Hdo,Udo,Jdo,us,ole,Ydo,Kdo,eI,Zdo,eco,oI,oco,rco,tco,lh,rle,aco,nco,rI,sco,lco,ico,bs,tle,dco,cco,tI,fco,mco,aI,gco,hco,pco,ih,ale,_co,uco,nI,bco,vco,Fco,dh,nle,Tco,Mco,sI,Eco,Cco,wco,vs,sle,Aco,Lco,lI,yco,xco,iI,$co,kco,Sco,Fs,lle,Rco,Pco,dI,Bco,Ico,cI,Nco,qco,jco,Ts,ile,Dco,Gco,fI,Oco,Vco,mI,Xco,zco,Qco,ch,dle,Wco,Hco,gI,Uco,Jco,Yco,Ms,cle,Kco,Zco,hI,efo,ofo,pI,rfo,tfo,afo,Es,fle,nfo,sfo,_I,lfo,ifo,uI,dfo,cfo,ffo,Cs,mle,mfo,gfo,bI,hfo,pfo,vI,_fo,ufo,bfo,ws,gle,vfo,Ffo,FI,Tfo,Mfo,TI,Efo,Cfo,wfo,As,hle,Afo,Lfo,MI,yfo,xfo,EI,$fo,kfo,Sfo,Ls,ple,Rfo,Pfo,CI,Bfo,Ifo,wI,Nfo,qfo,jfo,fh,_le,Dfo,Gfo,AI,Ofo,Vfo,Xfo,ys,ule,zfo,Qfo,LI,Wfo,Hfo,yI,Ufo,Jfo,Yfo,mh,ble,Kfo,Zfo,xI,emo,omo,rmo,gh,vle,tmo,amo,$I,nmo,smo,lmo,hh,Fle,imo,dmo,kI,cmo,fmo,mmo,ph,Tle,gmo,hmo,SI,pmo,_mo,umo,xs,Mle,bmo,vmo,RI,Fmo,Tmo,PI,Mmo,Emo,Cmo,_h,Ele,wmo,Amo,BI,Lmo,ymo,xmo,$s,Cle,$mo,kmo,II,Smo,Rmo,NI,Pmo,Bmo,Imo,ks,wle,Nmo,qmo,qI,jmo,Dmo,jI,Gmo,Omo,Vmo,Ss,Ale,Xmo,zmo,DI,Qmo,Wmo,GI,Hmo,Umo,Jmo,Rs,Lle,Ymo,Kmo,OI,Zmo,ego,VI,ogo,rgo,tgo,Ps,yle,ago,ngo,XI,sgo,lgo,zI,igo,dgo,cgo,Bs,xle,fgo,mgo,QI,ggo,hgo,WI,pgo,_go,ugo,uh,$le,bgo,vgo,HI,Fgo,Tgo,Mgo,bh,kle,Ego,Cgo,UI,wgo,Ago,Lgo,Is,Sle,ygo,xgo,JI,$go,kgo,YI,Sgo,Rgo,Pgo,Ns,Rle,Bgo,Igo,KI,Ngo,qgo,ZI,jgo,Dgo,Ggo,qs,Ple,Ogo,Vgo,eN,Xgo,zgo,oN,Qgo,Wgo,Hgo,vh,Ble,Ugo,Jgo,rN,Ygo,Kgo,Zgo,Fh,Ile,eho,oho,tN,rho,tho,aho,Th,Nle,nho,sho,aN,lho,iho,dho,js,qle,cho,fho,nN,mho,gho,sN,hho,pho,_ho,Ds,jle,uho,bho,lN,vho,Fho,iN,Tho,Mho,Eho,Mh,Dle,Cho,who,dN,Aho,Lho,yho,Eh,Gle,xho,$ho,cN,kho,Sho,Rho,Ch,Ole,Pho,Bho,fN,Iho,Nho,qho,Gs,Vle,jho,Dho,mN,Gho,Oho,gN,Vho,Xho,zho,wh,Xle,Qho,Who,hN,Hho,Uho,Jho,Ah,zle,Yho,Kho,pN,Zho,epo,opo,Os,Qle,rpo,tpo,_N,apo,npo,uN,spo,lpo,ipo,Vs,Wle,dpo,cpo,bN,fpo,mpo,vN,gpo,hpo,ppo,Xs,Hle,_po,upo,FN,bpo,vpo,TN,Fpo,Tpo,Mpo,zs,Ule,Epo,Cpo,MN,wpo,Apo,EN,Lpo,ypo,xpo,Lh,$po,yh,ZL,kpo,Jle,Spo,DOe,Pi,xh,Yle,ey,Rpo,Kle,Ppo,GOe,Lo,oy,Bpo,ry,Ipo,CN,Npo,qpo,jpo,ty,Dpo,Zle,Gpo,Opo,Vpo,He,ay,Xpo,eie,zpo,Qpo,Ra,Wpo,oie,Hpo,Upo,rie,Jpo,Ypo,tie,Kpo,Zpo,e_o,Y,$h,aie,o_o,r_o,wN,t_o,a_o,n_o,kh,nie,s_o,l_o,AN,i_o,d_o,c_o,Sh,sie,f_o,m_o,LN,g_o,h_o,p_o,Rh,lie,__o,u_o,yN,b_o,v_o,F_o,Ph,iie,T_o,M_o,xN,E_o,C_o,w_o,Bh,die,A_o,L_o,$N,y_o,x_o,$_o,Ih,cie,k_o,S_o,kN,R_o,P_o,B_o,Nh,fie,I_o,N_o,SN,q_o,j_o,D_o,qh,mie,G_o,O_o,RN,V_o,X_o,z_o,jh,gie,Q_o,W_o,PN,H_o,U_o,J_o,Dh,hie,Y_o,K_o,BN,Z_o,euo,ouo,Gh,pie,ruo,tuo,IN,auo,nuo,suo,Oh,_ie,luo,iuo,NN,duo,cuo,fuo,Vh,uie,muo,guo,qN,huo,puo,_uo,Xh,bie,uuo,buo,jN,vuo,Fuo,Tuo,zh,vie,Muo,Euo,DN,Cuo,wuo,Auo,Qh,Fie,Luo,yuo,GN,xuo,$uo,kuo,Wh,Tie,Suo,Ruo,ON,Puo,Buo,Iuo,Hh,Mie,Nuo,quo,VN,juo,Duo,Guo,Uh,Eie,Ouo,Vuo,XN,Xuo,zuo,Quo,Jh,Cie,Wuo,Huo,zN,Uuo,Juo,Yuo,Yh,wie,Kuo,Zuo,QN,e1o,o1o,r1o,Kh,Aie,t1o,a1o,WN,n1o,s1o,l1o,Zh,Lie,i1o,d1o,HN,c1o,f1o,m1o,ep,yie,g1o,h1o,UN,p1o,_1o,u1o,op,xie,b1o,v1o,JN,F1o,T1o,M1o,rp,$ie,E1o,C1o,YN,w1o,A1o,L1o,tp,kie,y1o,x1o,KN,$1o,k1o,S1o,ap,Sie,R1o,P1o,ZN,B1o,I1o,N1o,np,Rie,q1o,j1o,eq,D1o,G1o,O1o,sp,Pie,V1o,X1o,oq,z1o,Q1o,W1o,lp,Bie,H1o,U1o,rq,J1o,Y1o,K1o,ip,Iie,Z1o,e7o,tq,o7o,r7o,t7o,dp,a7o,cp,n7o,fp,ny,s7o,Nie,l7o,OOe,Bi,mp,qie,sy,i7o,jie,d7o,VOe,yo,ly,c7o,iy,f7o,aq,m7o,g7o,h7o,dy,p7o,Die,_7o,u7o,b7o,Ue,cy,v7o,Gie,F7o,T7o,Ii,M7o,Oie,E7o,C7o,Vie,w7o,A7o,L7o,he,gp,Xie,y7o,x7o,nq,$7o,k7o,S7o,hp,zie,R7o,P7o,Qie,B7o,I7o,N7o,pp,Wie,q7o,j7o,sq,D7o,G7o,O7o,_p,Hie,V7o,X7o,lq,z7o,Q7o,W7o,up,Uie,H7o,U7o,iq,J7o,Y7o,K7o,bp,Jie,Z7o,e2o,dq,o2o,r2o,t2o,vp,Yie,a2o,n2o,cq,s2o,l2o,i2o,Fp,Kie,d2o,c2o,fq,f2o,m2o,g2o,Tp,Zie,h2o,p2o,mq,_2o,u2o,b2o,Mp,ede,v2o,F2o,gq,T2o,M2o,E2o,Ep,ode,C2o,w2o,hq,A2o,L2o,y2o,Cp,rde,x2o,$2o,pq,k2o,S2o,R2o,wp,tde,P2o,B2o,_q,I2o,N2o,q2o,Ap,ade,j2o,D2o,uq,G2o,O2o,V2o,Lp,nde,X2o,z2o,bq,Q2o,W2o,H2o,yp,sde,U2o,J2o,vq,Y2o,K2o,Z2o,xp,lde,ebo,obo,Fq,rbo,tbo,abo,$p,ide,nbo,sbo,Tq,lbo,ibo,dbo,kp,cbo,Sp,fbo,Rp,fy,mbo,dde,gbo,XOe,Ni,Pp,cde,my,hbo,fde,pbo,zOe,xo,gy,_bo,qi,ubo,Mq,bbo,vbo,Eq,Fbo,Tbo,Mbo,hy,Ebo,mde,Cbo,wbo,Abo,nt,py,Lbo,gde,ybo,xbo,ji,$bo,hde,kbo,Sbo,Cq,Rbo,Pbo,Bbo,Bp,Ibo,Je,_y,Nbo,pde,qbo,jbo,Pa,Dbo,_de,Gbo,Obo,ude,Vbo,Xbo,bde,zbo,Qbo,Wbo,y,Ip,vde,Hbo,Ubo,wq,Jbo,Ybo,Kbo,Np,Fde,Zbo,evo,Aq,ovo,rvo,tvo,qp,Tde,avo,nvo,Lq,svo,lvo,ivo,jp,Mde,dvo,cvo,yq,fvo,mvo,gvo,Dp,Ede,hvo,pvo,xq,_vo,uvo,bvo,Gp,Cde,vvo,Fvo,$q,Tvo,Mvo,Evo,Op,wde,Cvo,wvo,kq,Avo,Lvo,yvo,Vp,Ade,xvo,$vo,Sq,kvo,Svo,Rvo,Xp,Lde,Pvo,Bvo,Rq,Ivo,Nvo,qvo,zp,yde,jvo,Dvo,Pq,Gvo,Ovo,Vvo,Qp,xde,Xvo,zvo,Bq,Qvo,Wvo,Hvo,Wp,$de,Uvo,Jvo,Iq,Yvo,Kvo,Zvo,Hp,kde,eFo,oFo,Nq,rFo,tFo,aFo,Up,Sde,nFo,sFo,qq,lFo,iFo,dFo,Jp,Rde,cFo,fFo,jq,mFo,gFo,hFo,Yp,Pde,pFo,_Fo,Dq,uFo,bFo,vFo,Kp,Bde,FFo,TFo,Gq,MFo,EFo,CFo,Zp,Ide,wFo,AFo,Oq,LFo,yFo,xFo,e_,Nde,$Fo,kFo,Vq,SFo,RFo,PFo,o_,qde,BFo,IFo,Xq,NFo,qFo,jFo,r_,jde,DFo,GFo,zq,OFo,VFo,XFo,t_,Dde,zFo,QFo,Qq,WFo,HFo,UFo,a_,Gde,JFo,YFo,Wq,KFo,ZFo,e6o,n_,Ode,o6o,r6o,Hq,t6o,a6o,n6o,s_,Vde,s6o,l6o,Uq,i6o,d6o,c6o,l_,Xde,f6o,m6o,Jq,g6o,h6o,p6o,i_,zde,_6o,u6o,Yq,b6o,v6o,F6o,d_,Qde,T6o,M6o,Kq,E6o,C6o,w6o,c_,Wde,A6o,L6o,Zq,y6o,x6o,$6o,f_,Hde,k6o,S6o,ej,R6o,P6o,B6o,m_,Ude,I6o,N6o,oj,q6o,j6o,D6o,g_,Jde,G6o,O6o,rj,V6o,X6o,z6o,h_,Yde,Q6o,W6o,tj,H6o,U6o,J6o,p_,Kde,Y6o,K6o,aj,Z6o,eTo,oTo,Qs,Zde,rTo,tTo,nj,aTo,nTo,sj,sTo,lTo,iTo,__,ece,dTo,cTo,lj,fTo,mTo,gTo,u_,oce,hTo,pTo,ij,_To,uTo,bTo,b_,rce,vTo,FTo,dj,TTo,MTo,ETo,v_,tce,CTo,wTo,cj,ATo,LTo,yTo,F_,ace,xTo,$To,fj,kTo,STo,RTo,T_,nce,PTo,BTo,mj,ITo,NTo,qTo,M_,sce,jTo,DTo,gj,GTo,OTo,VTo,E_,lce,XTo,zTo,hj,QTo,WTo,HTo,C_,ice,UTo,JTo,pj,YTo,KTo,ZTo,w_,dce,eMo,oMo,_j,rMo,tMo,aMo,A_,cce,nMo,sMo,uj,lMo,iMo,dMo,L_,fce,cMo,fMo,bj,mMo,gMo,hMo,y_,mce,pMo,_Mo,vj,uMo,bMo,vMo,x_,gce,FMo,TMo,Fj,MMo,EMo,CMo,$_,hce,wMo,AMo,Tj,LMo,yMo,xMo,k_,pce,$Mo,kMo,Mj,SMo,RMo,PMo,S_,_ce,BMo,IMo,Ej,NMo,qMo,jMo,R_,uce,DMo,GMo,Cj,OMo,VMo,XMo,P_,bce,zMo,QMo,wj,WMo,HMo,UMo,B_,vce,JMo,YMo,Aj,KMo,ZMo,e4o,I_,Fce,o4o,r4o,Lj,t4o,a4o,n4o,N_,Tce,s4o,l4o,yj,i4o,d4o,c4o,q_,Mce,f4o,m4o,xj,g4o,h4o,p4o,j_,Ece,_4o,u4o,$j,b4o,v4o,F4o,D_,Cce,T4o,M4o,kj,E4o,C4o,w4o,G_,wce,A4o,L4o,Sj,y4o,x4o,$4o,O_,Ace,k4o,S4o,Rj,R4o,P4o,B4o,V_,Lce,I4o,N4o,Pj,q4o,j4o,D4o,X_,yce,G4o,O4o,Bj,V4o,X4o,z4o,z_,xce,Q4o,W4o,Ij,H4o,U4o,J4o,Q_,$ce,Y4o,K4o,Nj,Z4o,eEo,oEo,W_,kce,rEo,tEo,qj,aEo,nEo,sEo,H_,Sce,lEo,iEo,jj,dEo,cEo,fEo,U_,Rce,mEo,gEo,Dj,hEo,pEo,_Eo,J_,Pce,uEo,bEo,Gj,vEo,FEo,TEo,Y_,Bce,MEo,EEo,Oj,CEo,wEo,AEo,K_,Ice,LEo,yEo,Vj,xEo,$Eo,kEo,Z_,Nce,SEo,REo,Xj,PEo,BEo,IEo,eu,qce,NEo,qEo,zj,jEo,DEo,GEo,ou,jce,OEo,VEo,Qj,XEo,zEo,QEo,ru,Dce,WEo,HEo,Wj,UEo,JEo,YEo,tu,Gce,KEo,ZEo,Hj,eCo,oCo,rCo,au,Oce,tCo,aCo,Uj,nCo,sCo,lCo,nu,Vce,iCo,dCo,Jj,cCo,fCo,mCo,su,Xce,gCo,hCo,Yj,pCo,_Co,uCo,lu,zce,bCo,vCo,Kj,FCo,TCo,MCo,iu,Qce,ECo,CCo,Zj,wCo,ACo,LCo,du,Wce,yCo,xCo,eD,$Co,kCo,SCo,cu,Hce,RCo,PCo,oD,BCo,ICo,NCo,fu,Uce,qCo,jCo,rD,DCo,GCo,OCo,mu,Jce,VCo,XCo,tD,zCo,QCo,WCo,gu,Yce,HCo,UCo,aD,JCo,YCo,KCo,hu,Kce,ZCo,e5o,nD,o5o,r5o,t5o,pu,Zce,a5o,n5o,sD,s5o,l5o,i5o,_u,efe,d5o,c5o,lD,f5o,m5o,g5o,uu,ofe,h5o,p5o,iD,_5o,u5o,b5o,bu,rfe,v5o,F5o,dD,T5o,M5o,E5o,vu,tfe,C5o,w5o,cD,A5o,L5o,y5o,Fu,afe,x5o,$5o,fD,k5o,S5o,R5o,Tu,nfe,P5o,B5o,mD,I5o,N5o,q5o,Mu,sfe,j5o,D5o,gD,G5o,O5o,V5o,Eu,lfe,X5o,z5o,hD,Q5o,W5o,H5o,Cu,ife,U5o,J5o,pD,Y5o,K5o,Z5o,wu,dfe,e3o,o3o,_D,r3o,t3o,a3o,Au,cfe,n3o,s3o,uD,l3o,i3o,d3o,Lu,ffe,c3o,f3o,bD,m3o,g3o,h3o,yu,mfe,p3o,_3o,vD,u3o,b3o,v3o,xu,gfe,F3o,T3o,FD,M3o,E3o,C3o,$u,hfe,w3o,A3o,TD,L3o,y3o,x3o,ku,pfe,$3o,k3o,MD,S3o,R3o,P3o,Su,_fe,B3o,I3o,ED,N3o,q3o,j3o,Ru,ufe,D3o,G3o,CD,O3o,V3o,X3o,Pu,bfe,z3o,Q3o,wD,W3o,H3o,U3o,Bu,vfe,J3o,Y3o,AD,K3o,Z3o,e0o,Iu,o0o,Ffe,r0o,t0o,Tfe,a0o,n0o,Nu,QOe,Di,qu,Mfe,uy,s0o,Efe,l0o,WOe,$o,by,i0o,Gi,d0o,LD,c0o,f0o,yD,m0o,g0o,h0o,vy,p0o,Cfe,_0o,u0o,b0o,st,Fy,v0o,wfe,F0o,T0o,Oi,M0o,Afe,E0o,C0o,xD,w0o,A0o,L0o,ju,y0o,Ye,Ty,x0o,Lfe,$0o,k0o,Ba,S0o,yfe,R0o,P0o,xfe,B0o,I0o,$fe,N0o,q0o,j0o,G,Du,kfe,D0o,G0o,$D,O0o,V0o,X0o,Gu,Sfe,z0o,Q0o,kD,W0o,H0o,U0o,Ou,Rfe,J0o,Y0o,SD,K0o,Z0o,ewo,Vu,Pfe,owo,rwo,RD,two,awo,nwo,Xu,Bfe,swo,lwo,PD,iwo,dwo,cwo,zu,Ife,fwo,mwo,BD,gwo,hwo,pwo,Qu,Nfe,_wo,uwo,ID,bwo,vwo,Fwo,Wu,qfe,Two,Mwo,ND,Ewo,Cwo,wwo,Hu,jfe,Awo,Lwo,qD,ywo,xwo,$wo,Uu,Dfe,kwo,Swo,jD,Rwo,Pwo,Bwo,Ju,Gfe,Iwo,Nwo,DD,qwo,jwo,Dwo,Yu,Ofe,Gwo,Owo,GD,Vwo,Xwo,zwo,Ku,Vfe,Qwo,Wwo,OD,Hwo,Uwo,Jwo,Zu,Xfe,Ywo,Kwo,VD,Zwo,eAo,oAo,e1,zfe,rAo,tAo,XD,aAo,nAo,sAo,o1,Qfe,lAo,iAo,zD,dAo,cAo,fAo,r1,Wfe,mAo,gAo,QD,hAo,pAo,_Ao,t1,Hfe,uAo,bAo,WD,vAo,FAo,TAo,a1,Ufe,MAo,EAo,HD,CAo,wAo,AAo,n1,Jfe,LAo,yAo,UD,xAo,$Ao,kAo,s1,Yfe,SAo,RAo,JD,PAo,BAo,IAo,l1,Kfe,NAo,qAo,YD,jAo,DAo,GAo,i1,Zfe,OAo,VAo,KD,XAo,zAo,QAo,d1,eme,WAo,HAo,ZD,UAo,JAo,YAo,c1,ome,KAo,ZAo,eG,eLo,oLo,rLo,f1,rme,tLo,aLo,oG,nLo,sLo,lLo,m1,tme,iLo,dLo,rG,cLo,fLo,mLo,g1,ame,gLo,hLo,tG,pLo,_Lo,uLo,h1,nme,bLo,vLo,aG,FLo,TLo,MLo,p1,sme,ELo,CLo,nG,wLo,ALo,LLo,_1,lme,yLo,xLo,sG,$Lo,kLo,SLo,u1,ime,RLo,PLo,lG,BLo,ILo,NLo,b1,dme,qLo,jLo,iG,DLo,GLo,OLo,v1,cme,VLo,XLo,dG,zLo,QLo,WLo,F1,fme,HLo,ULo,cG,JLo,YLo,KLo,T1,mme,ZLo,eyo,fG,oyo,ryo,tyo,M1,gme,ayo,nyo,mG,syo,lyo,iyo,E1,hme,dyo,cyo,gG,fyo,myo,gyo,C1,pme,hyo,pyo,hG,_yo,uyo,byo,w1,_me,vyo,Fyo,pG,Tyo,Myo,Eyo,A1,ume,Cyo,wyo,_G,Ayo,Lyo,yyo,L1,bme,xyo,$yo,uG,kyo,Syo,Ryo,y1,vme,Pyo,Byo,bG,Iyo,Nyo,qyo,x1,Fme,jyo,Dyo,vG,Gyo,Oyo,Vyo,$1,Xyo,Tme,zyo,Qyo,Mme,Wyo,Hyo,k1,HOe,Vi,S1,Eme,My,Uyo,Cme,Jyo,UOe,ko,Ey,Yyo,Xi,Kyo,FG,Zyo,e8o,TG,o8o,r8o,t8o,Cy,a8o,wme,n8o,s8o,l8o,lt,wy,i8o,Ame,d8o,c8o,zi,f8o,Lme,m8o,g8o,MG,h8o,p8o,_8o,R1,u8o,Ke,Ay,b8o,yme,v8o,F8o,Ia,T8o,xme,M8o,E8o,$me,C8o,w8o,kme,A8o,L8o,y8o,z,P1,Sme,x8o,$8o,EG,k8o,S8o,R8o,B1,Rme,P8o,B8o,CG,I8o,N8o,q8o,I1,Pme,j8o,D8o,wG,G8o,O8o,V8o,N1,Bme,X8o,z8o,AG,Q8o,W8o,H8o,q1,Ime,U8o,J8o,LG,Y8o,K8o,Z8o,j1,Nme,e9o,o9o,yG,r9o,t9o,a9o,D1,qme,n9o,s9o,xG,l9o,i9o,d9o,G1,jme,c9o,f9o,$G,m9o,g9o,h9o,O1,Dme,p9o,_9o,kG,u9o,b9o,v9o,V1,Gme,F9o,T9o,SG,M9o,E9o,C9o,X1,Ome,w9o,A9o,RG,L9o,y9o,x9o,z1,Vme,$9o,k9o,PG,S9o,R9o,P9o,Q1,Xme,B9o,I9o,BG,N9o,q9o,j9o,W1,zme,D9o,G9o,IG,O9o,V9o,X9o,H1,Qme,z9o,Q9o,NG,W9o,H9o,U9o,U1,Wme,J9o,Y9o,qG,K9o,Z9o,exo,J1,Hme,oxo,rxo,jG,txo,axo,nxo,Y1,Ume,sxo,lxo,DG,ixo,dxo,cxo,K1,Jme,fxo,mxo,GG,gxo,hxo,pxo,Z1,Yme,_xo,uxo,OG,bxo,vxo,Fxo,e7,Kme,Txo,Mxo,VG,Exo,Cxo,wxo,o7,Zme,Axo,Lxo,XG,yxo,xxo,$xo,r7,ege,kxo,Sxo,zG,Rxo,Pxo,Bxo,t7,oge,Ixo,Nxo,QG,qxo,jxo,Dxo,a7,rge,Gxo,Oxo,WG,Vxo,Xxo,zxo,n7,tge,Qxo,Wxo,HG,Hxo,Uxo,Jxo,s7,age,Yxo,Kxo,UG,Zxo,e$o,o$o,l7,nge,r$o,t$o,JG,a$o,n$o,s$o,i7,sge,l$o,i$o,YG,d$o,c$o,f$o,d7,lge,m$o,g$o,KG,h$o,p$o,_$o,c7,ige,u$o,b$o,ZG,v$o,F$o,T$o,f7,dge,M$o,E$o,eO,C$o,w$o,A$o,m7,cge,L$o,y$o,oO,x$o,$$o,k$o,g7,fge,S$o,R$o,rO,P$o,B$o,I$o,h7,mge,N$o,q$o,tO,j$o,D$o,G$o,p7,gge,O$o,V$o,aO,X$o,z$o,Q$o,_7,hge,W$o,H$o,nO,U$o,J$o,Y$o,u7,pge,K$o,Z$o,sO,eko,oko,rko,b7,_ge,tko,ako,lO,nko,sko,lko,v7,iko,uge,dko,cko,bge,fko,mko,F7,JOe,Qi,T7,vge,Ly,gko,Fge,hko,YOe,So,yy,pko,Wi,_ko,iO,uko,bko,dO,vko,Fko,Tko,xy,Mko,Tge,Eko,Cko,wko,it,$y,Ako,Mge,Lko,yko,Hi,xko,Ege,$ko,kko,cO,Sko,Rko,Pko,M7,Bko,Ze,ky,Iko,Cge,Nko,qko,Na,jko,wge,Dko,Gko,Age,Oko,Vko,Lge,Xko,zko,Qko,W,E7,yge,Wko,Hko,fO,Uko,Jko,Yko,C7,xge,Kko,Zko,mO,eSo,oSo,rSo,w7,$ge,tSo,aSo,gO,nSo,sSo,lSo,A7,kge,iSo,dSo,hO,cSo,fSo,mSo,L7,Sge,gSo,hSo,pO,pSo,_So,uSo,y7,Rge,bSo,vSo,_O,FSo,TSo,MSo,x7,Pge,ESo,CSo,uO,wSo,ASo,LSo,$7,Bge,ySo,xSo,bO,$So,kSo,SSo,k7,Ige,RSo,PSo,vO,BSo,ISo,NSo,S7,Nge,qSo,jSo,FO,DSo,GSo,OSo,R7,qge,VSo,XSo,TO,zSo,QSo,WSo,P7,jge,HSo,USo,MO,JSo,YSo,KSo,B7,Dge,ZSo,eRo,EO,oRo,rRo,tRo,I7,Gge,aRo,nRo,CO,sRo,lRo,iRo,N7,Oge,dRo,cRo,wO,fRo,mRo,gRo,q7,Vge,hRo,pRo,AO,_Ro,uRo,bRo,j7,Xge,vRo,FRo,LO,TRo,MRo,ERo,D7,zge,CRo,wRo,yO,ARo,LRo,yRo,G7,Qge,xRo,$Ro,xO,kRo,SRo,RRo,O7,Wge,PRo,BRo,$O,IRo,NRo,qRo,V7,Hge,jRo,DRo,kO,GRo,ORo,VRo,X7,Uge,XRo,zRo,SO,QRo,WRo,HRo,z7,Jge,URo,JRo,RO,YRo,KRo,ZRo,Q7,Yge,ePo,oPo,PO,rPo,tPo,aPo,W7,Kge,nPo,sPo,BO,lPo,iPo,dPo,H7,Zge,cPo,fPo,IO,mPo,gPo,hPo,U7,ehe,pPo,_Po,NO,uPo,bPo,vPo,J7,ohe,FPo,TPo,qO,MPo,EPo,CPo,Y7,rhe,wPo,APo,jO,LPo,yPo,xPo,K7,the,$Po,kPo,DO,SPo,RPo,PPo,Z7,ahe,BPo,IPo,GO,NPo,qPo,jPo,e2,nhe,DPo,GPo,OO,OPo,VPo,XPo,o2,she,zPo,QPo,lhe,WPo,HPo,UPo,r2,ihe,JPo,YPo,VO,KPo,ZPo,eBo,t2,dhe,oBo,rBo,XO,tBo,aBo,nBo,a2,che,sBo,lBo,zO,iBo,dBo,cBo,n2,fhe,fBo,mBo,QO,gBo,hBo,pBo,s2,_Bo,mhe,uBo,bBo,ghe,vBo,FBo,l2,KOe,Ui,i2,hhe,Sy,TBo,phe,MBo,ZOe,Ro,Ry,EBo,Ji,CBo,WO,wBo,ABo,HO,LBo,yBo,xBo,Py,$Bo,_he,kBo,SBo,RBo,dt,By,PBo,uhe,BBo,IBo,Yi,NBo,bhe,qBo,jBo,UO,DBo,GBo,OBo,d2,VBo,eo,Iy,XBo,vhe,zBo,QBo,qa,WBo,Fhe,HBo,UBo,The,JBo,YBo,Mhe,KBo,ZBo,eIo,pe,c2,Ehe,oIo,rIo,JO,tIo,aIo,nIo,f2,Che,sIo,lIo,YO,iIo,dIo,cIo,m2,whe,fIo,mIo,KO,gIo,hIo,pIo,g2,Ahe,_Io,uIo,ZO,bIo,vIo,FIo,h2,Lhe,TIo,MIo,eV,EIo,CIo,wIo,p2,yhe,AIo,LIo,oV,yIo,xIo,$Io,_2,xhe,kIo,SIo,rV,RIo,PIo,BIo,u2,$he,IIo,NIo,tV,qIo,jIo,DIo,b2,khe,GIo,OIo,aV,VIo,XIo,zIo,v2,She,QIo,WIo,nV,HIo,UIo,JIo,F2,Rhe,YIo,KIo,sV,ZIo,eNo,oNo,T2,Phe,rNo,tNo,lV,aNo,nNo,sNo,M2,Bhe,lNo,iNo,iV,dNo,cNo,fNo,E2,Ihe,mNo,gNo,dV,hNo,pNo,_No,C2,Nhe,uNo,bNo,cV,vNo,FNo,TNo,w2,qhe,MNo,ENo,fV,CNo,wNo,ANo,A2,jhe,LNo,yNo,mV,xNo,$No,kNo,L2,SNo,Dhe,RNo,PNo,Ghe,BNo,INo,y2,eVe,Ki,x2,Ohe,Ny,NNo,Vhe,qNo,oVe,Po,qy,jNo,Zi,DNo,gV,GNo,ONo,hV,VNo,XNo,zNo,jy,QNo,Xhe,WNo,HNo,UNo,ct,Dy,JNo,zhe,YNo,KNo,ed,ZNo,Qhe,eqo,oqo,pV,rqo,tqo,aqo,$2,nqo,oo,Gy,sqo,Whe,lqo,iqo,ja,dqo,Hhe,cqo,fqo,Uhe,mqo,gqo,Jhe,hqo,pqo,_qo,N,k2,Yhe,uqo,bqo,_V,vqo,Fqo,Tqo,S2,Khe,Mqo,Eqo,uV,Cqo,wqo,Aqo,R2,Zhe,Lqo,yqo,bV,xqo,$qo,kqo,P2,epe,Sqo,Rqo,vV,Pqo,Bqo,Iqo,B2,ope,Nqo,qqo,FV,jqo,Dqo,Gqo,I2,rpe,Oqo,Vqo,TV,Xqo,zqo,Qqo,N2,tpe,Wqo,Hqo,MV,Uqo,Jqo,Yqo,q2,ape,Kqo,Zqo,EV,ejo,ojo,rjo,j2,npe,tjo,ajo,CV,njo,sjo,ljo,D2,spe,ijo,djo,wV,cjo,fjo,mjo,G2,lpe,gjo,hjo,AV,pjo,_jo,ujo,O2,ipe,bjo,vjo,LV,Fjo,Tjo,Mjo,V2,dpe,Ejo,Cjo,yV,wjo,Ajo,Ljo,X2,cpe,yjo,xjo,xV,$jo,kjo,Sjo,z2,fpe,Rjo,Pjo,$V,Bjo,Ijo,Njo,Q2,mpe,qjo,jjo,kV,Djo,Gjo,Ojo,W2,gpe,Vjo,Xjo,SV,zjo,Qjo,Wjo,H2,hpe,Hjo,Ujo,RV,Jjo,Yjo,Kjo,U2,ppe,Zjo,eDo,PV,oDo,rDo,tDo,J2,_pe,aDo,nDo,BV,sDo,lDo,iDo,Y2,upe,dDo,cDo,IV,fDo,mDo,gDo,K2,bpe,hDo,pDo,NV,_Do,uDo,bDo,Z2,vpe,vDo,FDo,qV,TDo,MDo,EDo,eb,Fpe,CDo,wDo,jV,ADo,LDo,yDo,ob,Tpe,xDo,$Do,DV,kDo,SDo,RDo,rb,Mpe,PDo,BDo,GV,IDo,NDo,qDo,tb,Epe,jDo,DDo,OV,GDo,ODo,VDo,ab,Cpe,XDo,zDo,VV,QDo,WDo,HDo,nb,wpe,UDo,JDo,XV,YDo,KDo,ZDo,sb,Ape,eGo,oGo,zV,rGo,tGo,aGo,lb,Lpe,nGo,sGo,QV,lGo,iGo,dGo,ib,ype,cGo,fGo,WV,mGo,gGo,hGo,db,xpe,pGo,_Go,HV,uGo,bGo,vGo,cb,$pe,FGo,TGo,UV,MGo,EGo,CGo,fb,kpe,wGo,AGo,JV,LGo,yGo,xGo,mb,Spe,$Go,kGo,YV,SGo,RGo,PGo,gb,Rpe,BGo,IGo,KV,NGo,qGo,jGo,hb,Ppe,DGo,GGo,ZV,OGo,VGo,XGo,pb,Bpe,zGo,QGo,eX,WGo,HGo,UGo,_b,Ipe,JGo,YGo,oX,KGo,ZGo,eOo,ub,Npe,oOo,rOo,rX,tOo,aOo,nOo,bb,qpe,sOo,lOo,tX,iOo,dOo,cOo,vb,jpe,fOo,mOo,aX,gOo,hOo,pOo,Fb,Dpe,_Oo,uOo,nX,bOo,vOo,FOo,Tb,Gpe,TOo,MOo,sX,EOo,COo,wOo,Mb,Ope,AOo,LOo,lX,yOo,xOo,$Oo,Eb,Vpe,kOo,SOo,iX,ROo,POo,BOo,Cb,Xpe,IOo,NOo,dX,qOo,jOo,DOo,wb,zpe,GOo,OOo,cX,VOo,XOo,zOo,Ab,Qpe,QOo,WOo,fX,HOo,UOo,JOo,Lb,YOo,Wpe,KOo,ZOo,Hpe,eVo,oVo,yb,rVe,od,xb,Upe,Oy,rVo,Jpe,tVo,tVe,Bo,Vy,aVo,rd,nVo,mX,sVo,lVo,gX,iVo,dVo,cVo,Xy,fVo,Ype,mVo,gVo,hVo,ft,zy,pVo,Kpe,_Vo,uVo,td,bVo,Zpe,vVo,FVo,hX,TVo,MVo,EVo,$b,CVo,ro,Qy,wVo,e_e,AVo,LVo,Da,yVo,o_e,xVo,$Vo,r_e,kVo,SVo,t_e,RVo,PVo,BVo,Z,kb,a_e,IVo,NVo,pX,qVo,jVo,DVo,Sb,n_e,GVo,OVo,_X,VVo,XVo,zVo,Rb,s_e,QVo,WVo,uX,HVo,UVo,JVo,Pb,l_e,YVo,KVo,bX,ZVo,eXo,oXo,Bb,i_e,rXo,tXo,vX,aXo,nXo,sXo,Ib,d_e,lXo,iXo,FX,dXo,cXo,fXo,Nb,c_e,mXo,gXo,TX,hXo,pXo,_Xo,qb,f_e,uXo,bXo,MX,vXo,FXo,TXo,jb,m_e,MXo,EXo,EX,CXo,wXo,AXo,Db,g_e,LXo,yXo,CX,xXo,$Xo,kXo,Gb,h_e,SXo,RXo,wX,PXo,BXo,IXo,Ob,p_e,NXo,qXo,AX,jXo,DXo,GXo,Vb,__e,OXo,VXo,LX,XXo,zXo,QXo,Xb,u_e,WXo,HXo,yX,UXo,JXo,YXo,zb,b_e,KXo,ZXo,xX,ezo,ozo,rzo,Qb,v_e,tzo,azo,$X,nzo,szo,lzo,Wb,F_e,izo,dzo,kX,czo,fzo,mzo,Hb,T_e,gzo,hzo,SX,pzo,_zo,uzo,Ub,M_e,bzo,vzo,RX,Fzo,Tzo,Mzo,Jb,E_e,Ezo,Czo,PX,wzo,Azo,Lzo,Yb,C_e,yzo,xzo,BX,$zo,kzo,Szo,Kb,w_e,Rzo,Pzo,IX,Bzo,Izo,Nzo,Zb,A_e,qzo,jzo,NX,Dzo,Gzo,Ozo,ev,L_e,Vzo,Xzo,qX,zzo,Qzo,Wzo,ov,y_e,Hzo,Uzo,jX,Jzo,Yzo,Kzo,rv,x_e,Zzo,eQo,DX,oQo,rQo,tQo,tv,$_e,aQo,nQo,GX,sQo,lQo,iQo,av,k_e,dQo,cQo,OX,fQo,mQo,gQo,nv,S_e,hQo,pQo,VX,_Qo,uQo,bQo,sv,R_e,vQo,FQo,XX,TQo,MQo,EQo,lv,CQo,P_e,wQo,AQo,B_e,LQo,yQo,iv,aVe,ad,dv,I_e,Wy,xQo,N_e,$Qo,nVe,Io,Hy,kQo,nd,SQo,zX,RQo,PQo,QX,BQo,IQo,NQo,Uy,qQo,q_e,jQo,DQo,GQo,mt,Jy,OQo,j_e,VQo,XQo,sd,zQo,D_e,QQo,WQo,WX,HQo,UQo,JQo,cv,YQo,to,Yy,KQo,G_e,ZQo,eWo,Ga,oWo,O_e,rWo,tWo,V_e,aWo,nWo,X_e,sWo,lWo,iWo,No,fv,z_e,dWo,cWo,HX,fWo,mWo,gWo,mv,Q_e,hWo,pWo,UX,_Wo,uWo,bWo,gv,W_e,vWo,FWo,JX,TWo,MWo,EWo,hv,H_e,CWo,wWo,YX,AWo,LWo,yWo,pv,U_e,xWo,$Wo,KX,kWo,SWo,RWo,_v,J_e,PWo,BWo,ZX,IWo,NWo,qWo,uv,jWo,Y_e,DWo,GWo,K_e,OWo,VWo,bv,sVe,ld,vv,Z_e,Ky,XWo,eue,zWo,lVe,qo,Zy,QWo,id,WWo,ez,HWo,UWo,oz,JWo,YWo,KWo,e8,ZWo,oue,eHo,oHo,rHo,gt,o8,tHo,rue,aHo,nHo,dd,sHo,tue,lHo,iHo,rz,dHo,cHo,fHo,Fv,mHo,ao,r8,gHo,aue,hHo,pHo,Oa,_Ho,nue,uHo,bHo,sue,vHo,FHo,lue,THo,MHo,EHo,H,Tv,iue,CHo,wHo,tz,AHo,LHo,yHo,Mv,due,xHo,$Ho,az,kHo,SHo,RHo,Ev,cue,PHo,BHo,nz,IHo,NHo,qHo,Cv,fue,jHo,DHo,sz,GHo,OHo,VHo,wv,mue,XHo,zHo,lz,QHo,WHo,HHo,Av,gue,UHo,JHo,iz,YHo,KHo,ZHo,Lv,hue,eUo,oUo,dz,rUo,tUo,aUo,yv,pue,nUo,sUo,cz,lUo,iUo,dUo,xv,_ue,cUo,fUo,fz,mUo,gUo,hUo,$v,uue,pUo,_Uo,mz,uUo,bUo,vUo,kv,bue,FUo,TUo,gz,MUo,EUo,CUo,Sv,vue,wUo,AUo,hz,LUo,yUo,xUo,Rv,Fue,$Uo,kUo,pz,SUo,RUo,PUo,Pv,Tue,BUo,IUo,_z,NUo,qUo,jUo,Bv,Mue,DUo,GUo,uz,OUo,VUo,XUo,Iv,Eue,zUo,QUo,bz,WUo,HUo,UUo,Nv,Cue,JUo,YUo,vz,KUo,ZUo,eJo,qv,wue,oJo,rJo,Fz,tJo,aJo,nJo,jv,Aue,sJo,lJo,Tz,iJo,dJo,cJo,Dv,Lue,fJo,mJo,Mz,gJo,hJo,pJo,Gv,yue,_Jo,uJo,Ez,bJo,vJo,FJo,Ov,xue,TJo,MJo,Cz,EJo,CJo,wJo,Vv,$ue,AJo,LJo,wz,yJo,xJo,$Jo,Xv,kue,kJo,SJo,Az,RJo,PJo,BJo,zv,Sue,IJo,NJo,Lz,qJo,jJo,DJo,Qv,Rue,GJo,OJo,yz,VJo,XJo,zJo,Wv,Pue,QJo,WJo,xz,HJo,UJo,JJo,Hv,Bue,YJo,KJo,$z,ZJo,eYo,oYo,Uv,Iue,rYo,tYo,kz,aYo,nYo,sYo,Jv,Nue,lYo,iYo,Sz,dYo,cYo,fYo,Yv,que,mYo,gYo,Rz,hYo,pYo,_Yo,Kv,jue,uYo,bYo,Pz,vYo,FYo,TYo,Zv,Due,MYo,EYo,Bz,CYo,wYo,AYo,eF,Gue,LYo,yYo,Iz,xYo,$Yo,kYo,oF,Oue,SYo,RYo,Nz,PYo,BYo,IYo,rF,Vue,NYo,qYo,qz,jYo,DYo,GYo,tF,OYo,Xue,VYo,XYo,zue,zYo,QYo,aF,iVe,cd,nF,Que,t8,WYo,Wue,HYo,dVe,jo,a8,UYo,fd,JYo,jz,YYo,KYo,Dz,ZYo,eKo,oKo,n8,rKo,Hue,tKo,aKo,nKo,ht,s8,sKo,Uue,lKo,iKo,md,dKo,Jue,cKo,fKo,Gz,mKo,gKo,hKo,sF,pKo,no,l8,_Ko,Yue,uKo,bKo,Va,vKo,Kue,FKo,TKo,Zue,MKo,EKo,e1e,CKo,wKo,AKo,V,lF,o1e,LKo,yKo,Oz,xKo,$Ko,kKo,iF,r1e,SKo,RKo,Vz,PKo,BKo,IKo,dF,t1e,NKo,qKo,Xz,jKo,DKo,GKo,cF,a1e,OKo,VKo,zz,XKo,zKo,QKo,fF,n1e,WKo,HKo,Qz,UKo,JKo,YKo,mF,s1e,KKo,ZKo,Wz,eZo,oZo,rZo,gF,l1e,tZo,aZo,Hz,nZo,sZo,lZo,hF,i1e,iZo,dZo,Uz,cZo,fZo,mZo,pF,d1e,gZo,hZo,Jz,pZo,_Zo,uZo,_F,c1e,bZo,vZo,Yz,FZo,TZo,MZo,uF,f1e,EZo,CZo,Kz,wZo,AZo,LZo,bF,m1e,yZo,xZo,Zz,$Zo,kZo,SZo,vF,g1e,RZo,PZo,eQ,BZo,IZo,NZo,FF,h1e,qZo,jZo,oQ,DZo,GZo,OZo,TF,p1e,VZo,XZo,rQ,zZo,QZo,WZo,MF,_1e,HZo,UZo,tQ,JZo,YZo,KZo,EF,u1e,ZZo,eer,aQ,oer,rer,ter,CF,b1e,aer,ner,nQ,ser,ler,ier,wF,v1e,der,cer,sQ,fer,mer,ger,AF,F1e,her,per,lQ,_er,uer,ber,LF,T1e,ver,Fer,iQ,Ter,Mer,Eer,yF,M1e,Cer,wer,dQ,Aer,Ler,yer,xF,E1e,xer,$er,cQ,ker,Ser,Rer,$F,C1e,Per,Ber,fQ,Ier,Ner,qer,kF,w1e,jer,Der,mQ,Ger,Oer,Ver,SF,A1e,Xer,zer,gQ,Qer,Wer,Her,RF,L1e,Uer,Jer,hQ,Yer,Ker,Zer,PF,y1e,eor,oor,pQ,ror,tor,aor,BF,x1e,nor,sor,_Q,lor,ior,dor,IF,$1e,cor,mor,uQ,gor,hor,por,NF,k1e,_or,uor,bQ,bor,vor,For,qF,S1e,Tor,Mor,vQ,Eor,Cor,wor,jF,R1e,Aor,Lor,FQ,yor,xor,$or,DF,P1e,kor,Sor,TQ,Ror,Por,Bor,GF,B1e,Ior,Nor,MQ,qor,jor,Dor,OF,I1e,Gor,Oor,EQ,Vor,Xor,zor,VF,N1e,Qor,Wor,CQ,Hor,Uor,Jor,XF,q1e,Yor,Kor,wQ,Zor,err,orr,zF,j1e,rrr,trr,AQ,arr,nrr,srr,QF,D1e,lrr,irr,LQ,drr,crr,frr,WF,G1e,mrr,grr,yQ,hrr,prr,_rr,HF,urr,O1e,brr,vrr,V1e,Frr,Trr,UF,cVe,gd,JF,X1e,i8,Mrr,z1e,Err,fVe,Do,d8,Crr,hd,wrr,xQ,Arr,Lrr,$Q,yrr,xrr,$rr,c8,krr,Q1e,Srr,Rrr,Prr,pt,f8,Brr,W1e,Irr,Nrr,pd,qrr,H1e,jrr,Drr,kQ,Grr,Orr,Vrr,YF,Xrr,so,m8,zrr,U1e,Qrr,Wrr,Xa,Hrr,J1e,Urr,Jrr,Y1e,Yrr,Krr,K1e,Zrr,etr,otr,Z1e,KF,e7e,rtr,ttr,SQ,atr,ntr,str,ZF,ltr,o7e,itr,dtr,r7e,ctr,ftr,e6,mVe,_d,o6,t7e,g8,mtr,a7e,gtr,gVe,Go,h8,htr,ud,ptr,RQ,_tr,utr,PQ,btr,vtr,Ftr,p8,Ttr,n7e,Mtr,Etr,Ctr,_t,_8,wtr,s7e,Atr,Ltr,bd,ytr,l7e,xtr,$tr,BQ,ktr,Str,Rtr,r6,Ptr,lo,u8,Btr,i7e,Itr,Ntr,za,qtr,d7e,jtr,Dtr,c7e,Gtr,Otr,f7e,Vtr,Xtr,ztr,Fe,t6,m7e,Qtr,Wtr,IQ,Htr,Utr,Jtr,a6,g7e,Ytr,Ktr,NQ,Ztr,ear,oar,n6,h7e,rar,tar,qQ,aar,nar,sar,s6,p7e,lar,iar,jQ,dar,car,far,Ws,_7e,mar,gar,DQ,har,par,GQ,_ar,uar,bar,l6,u7e,Far,Tar,OQ,Mar,Ear,Car,Hs,b7e,war,Aar,VQ,Lar,yar,XQ,xar,$ar,kar,ut,v7e,Sar,Rar,zQ,Par,Bar,QQ,Iar,Nar,WQ,qar,jar,Dar,i6,F7e,Gar,Oar,HQ,Var,Xar,zar,d6,T7e,Qar,War,UQ,Har,Uar,Jar,c6,M7e,Yar,Kar,JQ,Zar,enr,onr,f6,E7e,rnr,tnr,YQ,anr,nnr,snr,m6,C7e,lnr,inr,KQ,dnr,cnr,fnr,g6,w7e,mnr,gnr,ZQ,hnr,pnr,_nr,h6,A7e,unr,bnr,eW,vnr,Fnr,Tnr,p6,Mnr,L7e,Enr,Cnr,y7e,wnr,Anr,_6,hVe,vd,u6,x7e,b8,Lnr,$7e,ynr,pVe,Oo,v8,xnr,Fd,$nr,oW,knr,Snr,rW,Rnr,Pnr,Bnr,F8,Inr,k7e,Nnr,qnr,jnr,bt,T8,Dnr,S7e,Gnr,Onr,Td,Vnr,R7e,Xnr,znr,tW,Qnr,Wnr,Hnr,b6,Unr,io,M8,Jnr,P7e,Ynr,Knr,Qa,Znr,B7e,esr,osr,I7e,rsr,tsr,N7e,asr,nsr,ssr,q7e,v6,j7e,lsr,isr,aW,dsr,csr,fsr,F6,msr,D7e,gsr,hsr,G7e,psr,_sr,T6,_Ve,Md,M6,O7e,E8,usr,V7e,bsr,uVe,Vo,C8,vsr,Ed,Fsr,nW,Tsr,Msr,sW,Esr,Csr,wsr,w8,Asr,X7e,Lsr,ysr,xsr,vt,A8,$sr,z7e,ksr,Ssr,Cd,Rsr,Q7e,Psr,Bsr,lW,Isr,Nsr,qsr,E6,jsr,co,L8,Dsr,W7e,Gsr,Osr,Wa,Vsr,H7e,Xsr,zsr,U7e,Qsr,Wsr,J7e,Hsr,Usr,Jsr,Y7e,C6,K7e,Ysr,Ksr,iW,Zsr,elr,olr,w6,rlr,Z7e,tlr,alr,e2e,nlr,slr,A6,bVe,wd,L6,o2e,y8,llr,r2e,ilr,vVe,Xo,x8,dlr,Ad,clr,dW,flr,mlr,cW,glr,hlr,plr,$8,_lr,t2e,ulr,blr,vlr,Ft,k8,Flr,a2e,Tlr,Mlr,Ld,Elr,n2e,Clr,wlr,fW,Alr,Llr,ylr,y6,xlr,fo,S8,$lr,s2e,klr,Slr,Ha,Rlr,l2e,Plr,Blr,i2e,Ilr,Nlr,d2e,qlr,jlr,Dlr,Pe,x6,c2e,Glr,Olr,mW,Vlr,Xlr,zlr,$6,f2e,Qlr,Wlr,gW,Hlr,Ulr,Jlr,k6,m2e,Ylr,Klr,hW,Zlr,eir,oir,S6,g2e,rir,tir,pW,air,nir,sir,R6,h2e,lir,iir,_W,dir,cir,fir,P6,p2e,mir,gir,uW,hir,pir,_ir,B6,_2e,uir,bir,bW,vir,Fir,Tir,I6,u2e,Mir,Eir,vW,Cir,wir,Air,N6,b2e,Lir,yir,FW,xir,$ir,kir,q6,Sir,v2e,Rir,Pir,F2e,Bir,Iir,j6,FVe,yd,D6,T2e,R8,Nir,M2e,qir,TVe,zo,P8,jir,xd,Dir,TW,Gir,Oir,MW,Vir,Xir,zir,B8,Qir,E2e,Wir,Hir,Uir,Tt,I8,Jir,C2e,Yir,Kir,$d,Zir,w2e,edr,odr,EW,rdr,tdr,adr,G6,ndr,mo,N8,sdr,A2e,ldr,idr,Ua,ddr,L2e,cdr,fdr,y2e,mdr,gdr,x2e,hdr,pdr,_dr,Qo,O6,$2e,udr,bdr,CW,vdr,Fdr,Tdr,V6,k2e,Mdr,Edr,wW,Cdr,wdr,Adr,X6,S2e,Ldr,ydr,AW,xdr,$dr,kdr,z6,R2e,Sdr,Rdr,LW,Pdr,Bdr,Idr,Q6,P2e,Ndr,qdr,yW,jdr,Ddr,Gdr,W6,B2e,Odr,Vdr,xW,Xdr,zdr,Qdr,H6,Wdr,I2e,Hdr,Udr,N2e,Jdr,Ydr,U6,MVe,kd,J6,q2e,q8,Kdr,j2e,Zdr,EVe,Wo,j8,ecr,Sd,ocr,$W,rcr,tcr,kW,acr,ncr,scr,D8,lcr,D2e,icr,dcr,ccr,Mt,G8,fcr,G2e,mcr,gcr,Rd,hcr,O2e,pcr,_cr,SW,ucr,bcr,vcr,Y6,Fcr,go,O8,Tcr,V2e,Mcr,Ecr,Ja,Ccr,X2e,wcr,Acr,z2e,Lcr,ycr,Q2e,xcr,$cr,kcr,Le,K6,W2e,Scr,Rcr,RW,Pcr,Bcr,Icr,Z6,H2e,Ncr,qcr,PW,jcr,Dcr,Gcr,eT,U2e,Ocr,Vcr,BW,Xcr,zcr,Qcr,oT,J2e,Wcr,Hcr,IW,Ucr,Jcr,Ycr,rT,Y2e,Kcr,Zcr,NW,efr,ofr,rfr,tT,K2e,tfr,afr,qW,nfr,sfr,lfr,aT,Z2e,ifr,dfr,jW,cfr,ffr,mfr,nT,ebe,gfr,hfr,DW,pfr,_fr,ufr,sT,obe,bfr,vfr,GW,Ffr,Tfr,Mfr,lT,rbe,Efr,Cfr,OW,wfr,Afr,Lfr,iT,yfr,tbe,xfr,$fr,abe,kfr,Sfr,dT,CVe,Pd,cT,nbe,V8,Rfr,sbe,Pfr,wVe,Ho,X8,Bfr,Bd,Ifr,VW,Nfr,qfr,XW,jfr,Dfr,Gfr,z8,Ofr,lbe,Vfr,Xfr,zfr,Et,Q8,Qfr,ibe,Wfr,Hfr,Id,Ufr,dbe,Jfr,Yfr,zW,Kfr,Zfr,emr,fT,omr,ho,W8,rmr,cbe,tmr,amr,Ya,nmr,fbe,smr,lmr,mbe,imr,dmr,gbe,cmr,fmr,mmr,H8,mT,hbe,gmr,hmr,QW,pmr,_mr,umr,gT,pbe,bmr,vmr,WW,Fmr,Tmr,Mmr,hT,Emr,_be,Cmr,wmr,ube,Amr,Lmr,pT,AVe,Nd,_T,bbe,U8,ymr,vbe,xmr,LVe,Uo,J8,$mr,qd,kmr,HW,Smr,Rmr,UW,Pmr,Bmr,Imr,Y8,Nmr,Fbe,qmr,jmr,Dmr,Ct,K8,Gmr,Tbe,Omr,Vmr,jd,Xmr,Mbe,zmr,Qmr,JW,Wmr,Hmr,Umr,uT,Jmr,po,Z8,Ymr,Ebe,Kmr,Zmr,Ka,egr,Cbe,ogr,rgr,wbe,tgr,agr,Abe,ngr,sgr,lgr,ot,bT,Lbe,igr,dgr,YW,cgr,fgr,mgr,vT,ybe,ggr,hgr,KW,pgr,_gr,ugr,FT,xbe,bgr,vgr,ZW,Fgr,Tgr,Mgr,TT,$be,Egr,Cgr,eH,wgr,Agr,Lgr,MT,kbe,ygr,xgr,oH,$gr,kgr,Sgr,ET,Rgr,Sbe,Pgr,Bgr,Rbe,Igr,Ngr,CT,yVe,Dd,wT,Pbe,e9,qgr,Bbe,jgr,xVe,Jo,o9,Dgr,Gd,Ggr,rH,Ogr,Vgr,tH,Xgr,zgr,Qgr,r9,Wgr,Ibe,Hgr,Ugr,Jgr,wt,t9,Ygr,Nbe,Kgr,Zgr,Od,ehr,qbe,ohr,rhr,aH,thr,ahr,nhr,AT,shr,_o,a9,lhr,jbe,ihr,dhr,Za,chr,Dbe,fhr,mhr,Gbe,ghr,hhr,Obe,phr,_hr,uhr,Vd,LT,Vbe,bhr,vhr,nH,Fhr,Thr,Mhr,yT,Xbe,Ehr,Chr,sH,whr,Ahr,Lhr,xT,zbe,yhr,xhr,lH,$hr,khr,Shr,$T,Rhr,Qbe,Phr,Bhr,Wbe,Ihr,Nhr,kT,$Ve,Xd,ST,Hbe,n9,qhr,Ube,jhr,kVe,Yo,s9,Dhr,zd,Ghr,iH,Ohr,Vhr,dH,Xhr,zhr,Qhr,l9,Whr,Jbe,Hhr,Uhr,Jhr,At,i9,Yhr,Ybe,Khr,Zhr,Qd,epr,Kbe,opr,rpr,cH,tpr,apr,npr,RT,spr,uo,d9,lpr,Zbe,ipr,dpr,en,cpr,eve,fpr,mpr,ove,gpr,hpr,rve,ppr,_pr,upr,c9,PT,tve,bpr,vpr,fH,Fpr,Tpr,Mpr,BT,ave,Epr,Cpr,mH,wpr,Apr,Lpr,IT,ypr,nve,xpr,$pr,sve,kpr,Spr,NT,SVe,Wd,qT,lve,f9,Rpr,ive,Ppr,RVe,Ko,m9,Bpr,Hd,Ipr,gH,Npr,qpr,hH,jpr,Dpr,Gpr,g9,Opr,dve,Vpr,Xpr,zpr,Lt,h9,Qpr,cve,Wpr,Hpr,Ud,Upr,fve,Jpr,Ypr,pH,Kpr,Zpr,e_r,jT,o_r,bo,p9,r_r,mve,t_r,a_r,on,n_r,gve,s_r,l_r,hve,i_r,d_r,pve,c_r,f_r,m_r,_ve,DT,uve,g_r,h_r,_H,p_r,__r,u_r,GT,b_r,bve,v_r,F_r,vve,T_r,M_r,OT,PVe,Jd,VT,Fve,_9,E_r,Tve,C_r,BVe,Zo,u9,w_r,Yd,A_r,uH,L_r,y_r,bH,x_r,$_r,k_r,b9,S_r,Mve,R_r,P_r,B_r,yt,v9,I_r,Eve,N_r,q_r,Kd,j_r,Cve,D_r,G_r,vH,O_r,V_r,X_r,XT,z_r,vo,F9,Q_r,wve,W_r,H_r,rn,U_r,Ave,J_r,Y_r,Lve,K_r,Z_r,yve,eur,our,rur,tn,zT,xve,tur,aur,FH,nur,sur,lur,QT,$ve,iur,dur,TH,cur,fur,mur,WT,kve,gur,hur,MH,pur,_ur,uur,HT,Sve,bur,vur,EH,Fur,Tur,Mur,UT,Eur,Rve,Cur,wur,Pve,Aur,Lur,JT,IVe,Zd,YT,Bve,T9,yur,Ive,xur,NVe,er,M9,$ur,ec,kur,CH,Sur,Rur,wH,Pur,Bur,Iur,E9,Nur,Nve,qur,jur,Dur,xt,C9,Gur,qve,Our,Vur,oc,Xur,jve,zur,Qur,AH,Wur,Hur,Uur,KT,Jur,Fo,w9,Yur,Dve,Kur,Zur,an,e1r,Gve,o1r,r1r,Ove,t1r,a1r,Vve,n1r,s1r,l1r,Xve,ZT,zve,i1r,d1r,LH,c1r,f1r,m1r,eM,g1r,Qve,h1r,p1r,Wve,_1r,u1r,oM,qVe,rc,rM,Hve,A9,b1r,Uve,v1r,jVe,or,L9,F1r,tc,T1r,yH,M1r,E1r,xH,C1r,w1r,A1r,y9,L1r,Jve,y1r,x1r,$1r,$t,x9,k1r,Yve,S1r,R1r,ac,P1r,Kve,B1r,I1r,$H,N1r,q1r,j1r,tM,D1r,xr,$9,G1r,Zve,O1r,V1r,nn,X1r,eFe,z1r,Q1r,oFe,W1r,H1r,rFe,U1r,J1r,Y1r,j,aM,tFe,K1r,Z1r,kH,e7r,o7r,r7r,nM,aFe,t7r,a7r,SH,n7r,s7r,l7r,sM,nFe,i7r,d7r,RH,c7r,f7r,m7r,lM,sFe,g7r,h7r,PH,p7r,_7r,u7r,iM,lFe,b7r,v7r,BH,F7r,T7r,M7r,dM,iFe,E7r,C7r,IH,w7r,A7r,L7r,cM,dFe,y7r,x7r,NH,$7r,k7r,S7r,fM,cFe,R7r,P7r,qH,B7r,I7r,N7r,mM,fFe,q7r,j7r,jH,D7r,G7r,O7r,gM,mFe,V7r,X7r,DH,z7r,Q7r,W7r,hM,gFe,H7r,U7r,GH,J7r,Y7r,K7r,pM,hFe,Z7r,e2r,OH,o2r,r2r,t2r,_M,pFe,a2r,n2r,VH,s2r,l2r,i2r,uM,_Fe,d2r,c2r,XH,f2r,m2r,g2r,bM,uFe,h2r,p2r,zH,_2r,u2r,b2r,vM,bFe,v2r,F2r,QH,T2r,M2r,E2r,FM,vFe,C2r,w2r,WH,A2r,L2r,y2r,Us,FFe,x2r,$2r,HH,k2r,S2r,UH,R2r,P2r,B2r,TM,TFe,I2r,N2r,JH,q2r,j2r,D2r,MM,MFe,G2r,O2r,YH,V2r,X2r,z2r,EM,EFe,Q2r,W2r,KH,H2r,U2r,J2r,CM,CFe,Y2r,K2r,ZH,Z2r,ebr,obr,wM,wFe,rbr,tbr,eU,abr,nbr,sbr,AM,AFe,lbr,ibr,oU,dbr,cbr,fbr,LM,LFe,mbr,gbr,rU,hbr,pbr,_br,yM,yFe,ubr,bbr,tU,vbr,Fbr,Tbr,xM,xFe,Mbr,Ebr,aU,Cbr,wbr,Abr,$M,$Fe,Lbr,ybr,nU,xbr,$br,kbr,kM,kFe,Sbr,Rbr,sU,Pbr,Bbr,Ibr,SM,SFe,Nbr,qbr,lU,jbr,Dbr,Gbr,RM,RFe,Obr,Vbr,iU,Xbr,zbr,Qbr,PM,PFe,Wbr,Hbr,dU,Ubr,Jbr,Ybr,BM,BFe,Kbr,Zbr,cU,evr,ovr,rvr,IM,IFe,tvr,avr,fU,nvr,svr,lvr,NM,NFe,ivr,dvr,mU,cvr,fvr,mvr,qM,qFe,gvr,hvr,gU,pvr,_vr,uvr,jM,jFe,bvr,vvr,hU,Fvr,Tvr,Mvr,DM,DFe,Evr,Cvr,pU,wvr,Avr,Lvr,GM,GFe,yvr,xvr,_U,$vr,kvr,Svr,OM,OFe,Rvr,Pvr,uU,Bvr,Ivr,Nvr,VM,VFe,qvr,jvr,bU,Dvr,Gvr,Ovr,XM,XFe,Vvr,Xvr,vU,zvr,Qvr,Wvr,zM,zFe,Hvr,Uvr,FU,Jvr,Yvr,Kvr,QM,QFe,Zvr,eFr,TU,oFr,rFr,tFr,WM,WFe,aFr,nFr,MU,sFr,lFr,iFr,HM,HFe,dFr,cFr,EU,fFr,mFr,gFr,UM,UFe,hFr,pFr,CU,_Fr,uFr,bFr,JM,DVe,nc,YM,JFe,k9,vFr,YFe,FFr,GVe,rr,S9,TFr,sc,MFr,wU,EFr,CFr,AU,wFr,AFr,LFr,R9,yFr,KFe,xFr,$Fr,kFr,kt,P9,SFr,ZFe,RFr,PFr,lc,BFr,e6e,IFr,NFr,LU,qFr,jFr,DFr,KM,GFr,$r,B9,OFr,o6e,VFr,XFr,sn,zFr,r6e,QFr,WFr,t6e,HFr,UFr,a6e,JFr,YFr,KFr,se,ZM,n6e,ZFr,e6r,yU,o6r,r6r,t6r,e4,s6e,a6r,n6r,xU,s6r,l6r,i6r,o4,l6e,d6r,c6r,$U,f6r,m6r,g6r,r4,i6e,h6r,p6r,kU,_6r,u6r,b6r,t4,d6e,v6r,F6r,SU,T6r,M6r,E6r,a4,c6e,C6r,w6r,RU,A6r,L6r,y6r,n4,f6e,x6r,$6r,PU,k6r,S6r,R6r,s4,m6e,P6r,B6r,BU,I6r,N6r,q6r,l4,g6e,j6r,D6r,IU,G6r,O6r,V6r,i4,h6e,X6r,z6r,NU,Q6r,W6r,H6r,d4,p6e,U6r,J6r,qU,Y6r,K6r,Z6r,c4,_6e,eTr,oTr,jU,rTr,tTr,aTr,f4,u6e,nTr,sTr,DU,lTr,iTr,dTr,m4,b6e,cTr,fTr,GU,mTr,gTr,hTr,g4,v6e,pTr,_Tr,OU,uTr,bTr,vTr,h4,F6e,FTr,TTr,VU,MTr,ETr,CTr,p4,T6e,wTr,ATr,XU,LTr,yTr,xTr,_4,M6e,$Tr,kTr,zU,STr,RTr,PTr,u4,E6e,BTr,ITr,QU,NTr,qTr,jTr,b4,C6e,DTr,GTr,WU,OTr,VTr,XTr,v4,w6e,zTr,QTr,HU,WTr,HTr,UTr,F4,A6e,JTr,YTr,UU,KTr,ZTr,eMr,T4,L6e,oMr,rMr,JU,tMr,aMr,nMr,M4,OVe,ic,E4,y6e,I9,sMr,x6e,lMr,VVe,tr,N9,iMr,dc,dMr,YU,cMr,fMr,KU,mMr,gMr,hMr,q9,pMr,$6e,_Mr,uMr,bMr,St,j9,vMr,k6e,FMr,TMr,cc,MMr,S6e,EMr,CMr,ZU,wMr,AMr,LMr,C4,yMr,kr,D9,xMr,R6e,$Mr,kMr,ln,SMr,P6e,RMr,PMr,B6e,BMr,IMr,I6e,NMr,qMr,jMr,Me,w4,N6e,DMr,GMr,eJ,OMr,VMr,XMr,A4,q6e,zMr,QMr,oJ,WMr,HMr,UMr,L4,j6e,JMr,YMr,rJ,KMr,ZMr,e4r,y4,D6e,o4r,r4r,tJ,t4r,a4r,n4r,x4,G6e,s4r,l4r,aJ,i4r,d4r,c4r,$4,O6e,f4r,m4r,nJ,g4r,h4r,p4r,k4,V6e,_4r,u4r,sJ,b4r,v4r,F4r,S4,X6e,T4r,M4r,lJ,E4r,C4r,w4r,R4,z6e,A4r,L4r,iJ,y4r,x4r,$4r,P4,Q6e,k4r,S4r,dJ,R4r,P4r,B4r,B4,W6e,I4r,N4r,cJ,q4r,j4r,D4r,I4,H6e,G4r,O4r,fJ,V4r,X4r,z4r,N4,U6e,Q4r,W4r,mJ,H4r,U4r,J4r,q4,XVe,fc,j4,J6e,G9,Y4r,Y6e,K4r,zVe,ar,O9,Z4r,mc,eEr,gJ,oEr,rEr,hJ,tEr,aEr,nEr,V9,sEr,K6e,lEr,iEr,dEr,Rt,X9,cEr,Z6e,fEr,mEr,gc,gEr,eTe,hEr,pEr,pJ,_Er,uEr,bEr,D4,vEr,Sr,z9,FEr,oTe,TEr,MEr,dn,EEr,rTe,CEr,wEr,tTe,AEr,LEr,aTe,yEr,xEr,$Er,cn,G4,nTe,kEr,SEr,_J,REr,PEr,BEr,O4,sTe,IEr,NEr,uJ,qEr,jEr,DEr,V4,lTe,GEr,OEr,bJ,VEr,XEr,zEr,X4,iTe,QEr,WEr,vJ,HEr,UEr,JEr,z4,QVe,hc,Q4,dTe,Q9,YEr,cTe,KEr,WVe,nr,W9,ZEr,pc,eCr,FJ,oCr,rCr,TJ,tCr,aCr,nCr,H9,sCr,fTe,lCr,iCr,dCr,Pt,U9,cCr,mTe,fCr,mCr,_c,gCr,gTe,hCr,pCr,MJ,_Cr,uCr,bCr,W4,vCr,Rr,J9,FCr,hTe,TCr,MCr,fn,ECr,pTe,CCr,wCr,_Te,ACr,LCr,uTe,yCr,xCr,$Cr,ie,H4,bTe,kCr,SCr,EJ,RCr,PCr,BCr,U4,vTe,ICr,NCr,CJ,qCr,jCr,DCr,J4,FTe,GCr,OCr,wJ,VCr,XCr,zCr,Y4,TTe,QCr,WCr,AJ,HCr,UCr,JCr,K4,MTe,YCr,KCr,LJ,ZCr,e5r,o5r,Z4,ETe,r5r,t5r,yJ,a5r,n5r,s5r,eE,CTe,l5r,i5r,xJ,d5r,c5r,f5r,oE,wTe,m5r,g5r,$J,h5r,p5r,_5r,rE,ATe,u5r,b5r,kJ,v5r,F5r,T5r,tE,LTe,M5r,E5r,SJ,C5r,w5r,A5r,aE,yTe,L5r,y5r,RJ,x5r,$5r,k5r,nE,xTe,S5r,R5r,PJ,P5r,B5r,I5r,sE,$Te,N5r,q5r,BJ,j5r,D5r,G5r,lE,kTe,O5r,V5r,IJ,X5r,z5r,Q5r,iE,STe,W5r,H5r,NJ,U5r,J5r,Y5r,dE,RTe,K5r,Z5r,qJ,e3r,o3r,r3r,cE,PTe,t3r,a3r,jJ,n3r,s3r,l3r,fE,BTe,i3r,d3r,DJ,c3r,f3r,m3r,mE,ITe,g3r,h3r,GJ,p3r,_3r,u3r,gE,NTe,b3r,v3r,OJ,F3r,T3r,M3r,hE,HVe,uc,pE,qTe,Y9,E3r,jTe,C3r,UVe,sr,K9,w3r,bc,A3r,VJ,L3r,y3r,XJ,x3r,$3r,k3r,Z9,S3r,DTe,R3r,P3r,B3r,Bt,ex,I3r,GTe,N3r,q3r,vc,j3r,OTe,D3r,G3r,zJ,O3r,V3r,X3r,_E,z3r,Pr,ox,Q3r,VTe,W3r,H3r,mn,U3r,XTe,J3r,Y3r,zTe,K3r,Z3r,QTe,e0r,o0r,r0r,ye,uE,WTe,t0r,a0r,QJ,n0r,s0r,l0r,bE,HTe,i0r,d0r,WJ,c0r,f0r,m0r,vE,UTe,g0r,h0r,HJ,p0r,_0r,u0r,FE,JTe,b0r,v0r,UJ,F0r,T0r,M0r,TE,YTe,E0r,C0r,JJ,w0r,A0r,L0r,ME,KTe,y0r,x0r,YJ,$0r,k0r,S0r,EE,ZTe,R0r,P0r,KJ,B0r,I0r,N0r,CE,eMe,q0r,j0r,ZJ,D0r,G0r,O0r,wE,oMe,V0r,X0r,eY,z0r,Q0r,W0r,AE,rMe,H0r,U0r,oY,J0r,Y0r,K0r,LE,JVe,Fc,yE,tMe,rx,Z0r,aMe,ewr,YVe,lr,tx,owr,Tc,rwr,rY,twr,awr,tY,nwr,swr,lwr,ax,iwr,nMe,dwr,cwr,fwr,It,nx,mwr,sMe,gwr,hwr,Mc,pwr,lMe,_wr,uwr,aY,bwr,vwr,Fwr,xE,Twr,Br,sx,Mwr,iMe,Ewr,Cwr,gn,wwr,dMe,Awr,Lwr,cMe,ywr,xwr,fMe,$wr,kwr,Swr,te,$E,mMe,Rwr,Pwr,nY,Bwr,Iwr,Nwr,kE,gMe,qwr,jwr,sY,Dwr,Gwr,Owr,SE,hMe,Vwr,Xwr,lY,zwr,Qwr,Wwr,RE,pMe,Hwr,Uwr,iY,Jwr,Ywr,Kwr,PE,_Me,Zwr,eAr,dY,oAr,rAr,tAr,BE,uMe,aAr,nAr,cY,sAr,lAr,iAr,IE,bMe,dAr,cAr,fY,fAr,mAr,gAr,NE,vMe,hAr,pAr,mY,_Ar,uAr,bAr,qE,FMe,vAr,FAr,gY,TAr,MAr,EAr,jE,TMe,CAr,wAr,hY,AAr,LAr,yAr,DE,MMe,xAr,$Ar,pY,kAr,SAr,RAr,GE,EMe,PAr,BAr,_Y,IAr,NAr,qAr,OE,CMe,jAr,DAr,uY,GAr,OAr,VAr,VE,wMe,XAr,zAr,bY,QAr,WAr,HAr,XE,AMe,UAr,JAr,vY,YAr,KAr,ZAr,zE,LMe,eLr,oLr,FY,rLr,tLr,aLr,QE,yMe,nLr,sLr,TY,lLr,iLr,dLr,WE,xMe,cLr,fLr,MY,mLr,gLr,hLr,HE,$Me,pLr,_Lr,EY,uLr,bLr,vLr,UE,kMe,FLr,TLr,CY,MLr,ELr,CLr,JE,SMe,wLr,ALr,wY,LLr,yLr,xLr,YE,RMe,$Lr,kLr,AY,SLr,RLr,PLr,KE,PMe,BLr,ILr,LY,NLr,qLr,jLr,ZE,BMe,DLr,GLr,yY,OLr,VLr,XLr,eC,IMe,zLr,QLr,xY,WLr,HLr,ULr,oC,NMe,JLr,YLr,$Y,KLr,ZLr,eyr,rC,KVe,Ec,tC,qMe,lx,oyr,jMe,ryr,ZVe,ir,ix,tyr,Cc,ayr,kY,nyr,syr,SY,lyr,iyr,dyr,dx,cyr,DMe,fyr,myr,gyr,Nt,cx,hyr,GMe,pyr,_yr,wc,uyr,OMe,byr,vyr,RY,Fyr,Tyr,Myr,aC,Eyr,Ir,fx,Cyr,VMe,wyr,Ayr,hn,Lyr,XMe,yyr,xyr,zMe,$yr,kyr,QMe,Syr,Ryr,Pyr,_e,nC,WMe,Byr,Iyr,PY,Nyr,qyr,jyr,sC,HMe,Dyr,Gyr,BY,Oyr,Vyr,Xyr,lC,UMe,zyr,Qyr,IY,Wyr,Hyr,Uyr,iC,JMe,Jyr,Yyr,NY,Kyr,Zyr,e8r,dC,YMe,o8r,r8r,qY,t8r,a8r,n8r,cC,KMe,s8r,l8r,jY,i8r,d8r,c8r,fC,ZMe,f8r,m8r,DY,g8r,h8r,p8r,mC,e4e,_8r,u8r,GY,b8r,v8r,F8r,gC,o4e,T8r,M8r,OY,E8r,C8r,w8r,hC,r4e,A8r,L8r,VY,y8r,x8r,$8r,pC,t4e,k8r,S8r,XY,R8r,P8r,B8r,_C,a4e,I8r,N8r,zY,q8r,j8r,D8r,uC,n4e,G8r,O8r,QY,V8r,X8r,z8r,bC,s4e,Q8r,W8r,WY,H8r,U8r,J8r,vC,l4e,Y8r,K8r,HY,Z8r,e9r,o9r,FC,i4e,r9r,t9r,UY,a9r,n9r,s9r,TC,d4e,l9r,i9r,JY,d9r,c9r,f9r,MC,eXe,Ac,EC,c4e,mx,m9r,f4e,g9r,oXe,dr,gx,h9r,Lc,p9r,YY,_9r,u9r,KY,b9r,v9r,F9r,hx,T9r,m4e,M9r,E9r,C9r,qt,px,w9r,g4e,A9r,L9r,yc,y9r,h4e,x9r,$9r,ZY,k9r,S9r,R9r,CC,P9r,Nr,_x,B9r,p4e,I9r,N9r,pn,q9r,_4e,j9r,D9r,u4e,G9r,O9r,b4e,V9r,X9r,z9r,ux,wC,v4e,Q9r,W9r,eK,H9r,U9r,J9r,AC,F4e,Y9r,K9r,oK,Z9r,exr,oxr,LC,rXe,xc,yC,T4e,bx,rxr,M4e,txr,tXe,cr,vx,axr,$c,nxr,rK,sxr,lxr,tK,ixr,dxr,cxr,Fx,fxr,E4e,mxr,gxr,hxr,jt,Tx,pxr,C4e,_xr,uxr,kc,bxr,w4e,vxr,Fxr,aK,Txr,Mxr,Exr,xC,Cxr,qr,Mx,wxr,A4e,Axr,Lxr,_n,yxr,L4e,xxr,$xr,y4e,kxr,Sxr,x4e,Rxr,Pxr,Bxr,$4e,$C,k4e,Ixr,Nxr,nK,qxr,jxr,Dxr,kC,aXe,Sc,SC,S4e,Ex,Gxr,R4e,Oxr,nXe,fr,Cx,Vxr,Rc,Xxr,sK,zxr,Qxr,lK,Wxr,Hxr,Uxr,wx,Jxr,P4e,Yxr,Kxr,Zxr,Dt,Ax,e$r,B4e,o$r,r$r,Pc,t$r,I4e,a$r,n$r,iK,s$r,l$r,i$r,RC,d$r,jr,Lx,c$r,N4e,f$r,m$r,un,g$r,q4e,h$r,p$r,j4e,_$r,u$r,D4e,b$r,v$r,F$r,de,PC,G4e,T$r,M$r,dK,E$r,C$r,w$r,BC,O4e,A$r,L$r,cK,y$r,x$r,$$r,IC,V4e,k$r,S$r,fK,R$r,P$r,B$r,NC,X4e,I$r,N$r,mK,q$r,j$r,D$r,qC,z4e,G$r,O$r,gK,V$r,X$r,z$r,jC,Q4e,Q$r,W$r,hK,H$r,U$r,J$r,DC,W4e,Y$r,K$r,pK,Z$r,ekr,okr,GC,H4e,rkr,tkr,_K,akr,nkr,skr,OC,U4e,lkr,ikr,uK,dkr,ckr,fkr,VC,J4e,mkr,gkr,bK,hkr,pkr,_kr,XC,Y4e,ukr,bkr,vK,vkr,Fkr,Tkr,zC,K4e,Mkr,Ekr,FK,Ckr,wkr,Akr,QC,Z4e,Lkr,ykr,TK,xkr,$kr,kkr,WC,eEe,Skr,Rkr,MK,Pkr,Bkr,Ikr,HC,oEe,Nkr,qkr,EK,jkr,Dkr,Gkr,UC,rEe,Okr,Vkr,CK,Xkr,zkr,Qkr,JC,tEe,Wkr,Hkr,wK,Ukr,Jkr,Ykr,YC,aEe,Kkr,Zkr,AK,eSr,oSr,rSr,KC,nEe,tSr,aSr,LK,nSr,sSr,lSr,ZC,sEe,iSr,dSr,yK,cSr,fSr,mSr,e5,sXe,Bc,o5,lEe,yx,gSr,iEe,hSr,lXe,mr,xx,pSr,Ic,_Sr,xK,uSr,bSr,$K,vSr,FSr,TSr,$x,MSr,dEe,ESr,CSr,wSr,Gt,kx,ASr,cEe,LSr,ySr,Nc,xSr,fEe,$Sr,kSr,kK,SSr,RSr,PSr,r5,BSr,Dr,Sx,ISr,mEe,NSr,qSr,bn,jSr,gEe,DSr,GSr,hEe,OSr,VSr,pEe,XSr,zSr,QSr,ce,t5,_Ee,WSr,HSr,SK,USr,JSr,YSr,a5,uEe,KSr,ZSr,RK,eRr,oRr,rRr,n5,bEe,tRr,aRr,PK,nRr,sRr,lRr,s5,vEe,iRr,dRr,BK,cRr,fRr,mRr,l5,FEe,gRr,hRr,IK,pRr,_Rr,uRr,i5,TEe,bRr,vRr,NK,FRr,TRr,MRr,d5,MEe,ERr,CRr,qK,wRr,ARr,LRr,c5,EEe,yRr,xRr,jK,$Rr,kRr,SRr,f5,CEe,RRr,PRr,DK,BRr,IRr,NRr,m5,wEe,qRr,jRr,GK,DRr,GRr,ORr,g5,AEe,VRr,XRr,OK,zRr,QRr,WRr,h5,LEe,HRr,URr,VK,JRr,YRr,KRr,p5,yEe,ZRr,ePr,XK,oPr,rPr,tPr,_5,xEe,aPr,nPr,zK,sPr,lPr,iPr,u5,$Ee,dPr,cPr,QK,fPr,mPr,gPr,b5,kEe,hPr,pPr,WK,_Pr,uPr,bPr,v5,SEe,vPr,FPr,HK,TPr,MPr,EPr,F5,REe,CPr,wPr,UK,APr,LPr,yPr,T5,PEe,xPr,$Pr,JK,kPr,SPr,RPr,M5,BEe,PPr,BPr,YK,IPr,NPr,qPr,E5,iXe,qc,C5,IEe,Rx,jPr,NEe,DPr,dXe,gr,Px,GPr,jc,OPr,KK,VPr,XPr,ZK,zPr,QPr,WPr,Bx,HPr,qEe,UPr,JPr,YPr,Ot,Ix,KPr,jEe,ZPr,eBr,Dc,oBr,DEe,rBr,tBr,eZ,aBr,nBr,sBr,w5,lBr,Gr,Nx,iBr,GEe,dBr,cBr,vn,fBr,OEe,mBr,gBr,VEe,hBr,pBr,XEe,_Br,uBr,bBr,zEe,A5,QEe,vBr,FBr,oZ,TBr,MBr,EBr,L5,cXe,Gc,y5,WEe,qx,CBr,HEe,wBr,fXe,hr,jx,ABr,Oc,LBr,rZ,yBr,xBr,tZ,$Br,kBr,SBr,Dx,RBr,UEe,PBr,BBr,IBr,Vt,Gx,NBr,JEe,qBr,jBr,Vc,DBr,YEe,GBr,OBr,aZ,VBr,XBr,zBr,x5,QBr,Or,Ox,WBr,KEe,HBr,UBr,Fn,JBr,ZEe,YBr,KBr,eCe,ZBr,eIr,oCe,oIr,rIr,tIr,rCe,$5,tCe,aIr,nIr,nZ,sIr,lIr,iIr,k5,mXe,Xc,S5,aCe,Vx,dIr,nCe,cIr,gXe,pr,Xx,fIr,zc,mIr,sZ,gIr,hIr,lZ,pIr,_Ir,uIr,zx,bIr,sCe,vIr,FIr,TIr,Xt,Qx,MIr,lCe,EIr,CIr,Qc,wIr,iCe,AIr,LIr,iZ,yIr,xIr,$Ir,R5,kIr,Vr,Wx,SIr,dCe,RIr,PIr,Tn,BIr,cCe,IIr,NIr,fCe,qIr,jIr,mCe,DIr,GIr,OIr,oe,P5,gCe,VIr,XIr,dZ,zIr,QIr,WIr,B5,hCe,HIr,UIr,cZ,JIr,YIr,KIr,I5,pCe,ZIr,eNr,fZ,oNr,rNr,tNr,N5,_Ce,aNr,nNr,mZ,sNr,lNr,iNr,q5,uCe,dNr,cNr,gZ,fNr,mNr,gNr,j5,bCe,hNr,pNr,hZ,_Nr,uNr,bNr,D5,vCe,vNr,FNr,pZ,TNr,MNr,ENr,G5,FCe,CNr,wNr,_Z,ANr,LNr,yNr,O5,TCe,xNr,$Nr,uZ,kNr,SNr,RNr,V5,MCe,PNr,BNr,bZ,INr,NNr,qNr,X5,ECe,jNr,DNr,vZ,GNr,ONr,VNr,z5,CCe,XNr,zNr,FZ,QNr,WNr,HNr,Q5,wCe,UNr,JNr,TZ,YNr,KNr,ZNr,W5,ACe,eqr,oqr,MZ,rqr,tqr,aqr,H5,LCe,nqr,sqr,EZ,lqr,iqr,dqr,U5,yCe,cqr,fqr,CZ,mqr,gqr,hqr,J5,xCe,pqr,_qr,wZ,uqr,bqr,vqr,Y5,$Ce,Fqr,Tqr,AZ,Mqr,Eqr,Cqr,K5,kCe,wqr,Aqr,LZ,Lqr,yqr,xqr,Z5,SCe,$qr,kqr,yZ,Sqr,Rqr,Pqr,e3,RCe,Bqr,Iqr,xZ,Nqr,qqr,jqr,o3,PCe,Dqr,Gqr,$Z,Oqr,Vqr,Xqr,r3,BCe,zqr,Qqr,kZ,Wqr,Hqr,Uqr,t3,ICe,Jqr,Yqr,SZ,Kqr,Zqr,ejr,a3,NCe,ojr,rjr,RZ,tjr,ajr,njr,n3,qCe,sjr,ljr,PZ,ijr,djr,cjr,s3,jCe,fjr,mjr,BZ,gjr,hjr,pjr,l3,hXe,Wc,i3,DCe,Hx,_jr,GCe,ujr,pXe,_r,Ux,bjr,Hc,vjr,IZ,Fjr,Tjr,NZ,Mjr,Ejr,Cjr,Jx,wjr,OCe,Ajr,Ljr,yjr,zt,Yx,xjr,VCe,$jr,kjr,Uc,Sjr,XCe,Rjr,Pjr,qZ,Bjr,Ijr,Njr,d3,qjr,Xr,Kx,jjr,zCe,Djr,Gjr,Mn,Ojr,QCe,Vjr,Xjr,WCe,zjr,Qjr,HCe,Wjr,Hjr,Ujr,xe,c3,UCe,Jjr,Yjr,jZ,Kjr,Zjr,eDr,f3,JCe,oDr,rDr,DZ,tDr,aDr,nDr,m3,YCe,sDr,lDr,GZ,iDr,dDr,cDr,g3,KCe,fDr,mDr,OZ,gDr,hDr,pDr,h3,ZCe,_Dr,uDr,VZ,bDr,vDr,FDr,p3,e5e,TDr,MDr,XZ,EDr,CDr,wDr,_3,o5e,ADr,LDr,zZ,yDr,xDr,$Dr,u3,r5e,kDr,SDr,QZ,RDr,PDr,BDr,b3,t5e,IDr,NDr,WZ,qDr,jDr,DDr,v3,a5e,GDr,ODr,HZ,VDr,XDr,zDr,F3,_Xe,Jc,T3,n5e,Zx,QDr,s5e,WDr,uXe,ur,e$,HDr,Yc,UDr,UZ,JDr,YDr,JZ,KDr,ZDr,eGr,o$,oGr,l5e,rGr,tGr,aGr,Qt,r$,nGr,i5e,sGr,lGr,Kc,iGr,d5e,dGr,cGr,YZ,fGr,mGr,gGr,M3,hGr,zr,t$,pGr,c5e,_Gr,uGr,En,bGr,f5e,vGr,FGr,m5e,TGr,MGr,g5e,EGr,CGr,wGr,Ee,E3,h5e,AGr,LGr,KZ,yGr,xGr,$Gr,C3,p5e,kGr,SGr,ZZ,RGr,PGr,BGr,w3,_5e,IGr,NGr,eee,qGr,jGr,DGr,A3,u5e,GGr,OGr,oee,VGr,XGr,zGr,L3,b5e,QGr,WGr,ree,HGr,UGr,JGr,y3,v5e,YGr,KGr,tee,ZGr,eOr,oOr,x3,F5e,rOr,tOr,aee,aOr,nOr,sOr,$3,T5e,lOr,iOr,nee,dOr,cOr,fOr,k3,M5e,mOr,gOr,see,hOr,pOr,_Or,S3,E5e,uOr,bOr,lee,vOr,FOr,TOr,R3,C5e,MOr,EOr,iee,COr,wOr,AOr,P3,w5e,LOr,yOr,dee,xOr,$Or,kOr,B3,A5e,SOr,ROr,cee,POr,BOr,IOr,I3,bXe,Zc,N3,L5e,a$,NOr,y5e,qOr,vXe,br,n$,jOr,ef,DOr,fee,GOr,OOr,mee,VOr,XOr,zOr,s$,QOr,x5e,WOr,HOr,UOr,Wt,l$,JOr,$5e,YOr,KOr,of,ZOr,k5e,eVr,oVr,gee,rVr,tVr,aVr,q3,nVr,Qr,i$,sVr,S5e,lVr,iVr,Cn,dVr,R5e,cVr,fVr,P5e,mVr,gVr,B5e,hVr,pVr,_Vr,$e,j3,I5e,uVr,bVr,hee,vVr,FVr,TVr,D3,N5e,MVr,EVr,pee,CVr,wVr,AVr,G3,q5e,LVr,yVr,_ee,xVr,$Vr,kVr,O3,j5e,SVr,RVr,uee,PVr,BVr,IVr,V3,D5e,NVr,qVr,bee,jVr,DVr,GVr,X3,G5e,OVr,VVr,vee,XVr,zVr,QVr,z3,O5e,WVr,HVr,Fee,UVr,JVr,YVr,Q3,V5e,KVr,ZVr,Tee,eXr,oXr,rXr,W3,X5e,tXr,aXr,Mee,nXr,sXr,lXr,H3,z5e,iXr,dXr,Eee,cXr,fXr,mXr,U3,FXe,rf,J3,Q5e,d$,gXr,W5e,hXr,TXe,vr,c$,pXr,tf,_Xr,Cee,uXr,bXr,wee,vXr,FXr,TXr,f$,MXr,H5e,EXr,CXr,wXr,Ht,m$,AXr,U5e,LXr,yXr,af,xXr,J5e,$Xr,kXr,Aee,SXr,RXr,PXr,Y3,BXr,Wr,g$,IXr,Y5e,NXr,qXr,wn,jXr,K5e,DXr,GXr,Z5e,OXr,VXr,e3e,XXr,zXr,QXr,ke,K3,o3e,WXr,HXr,Lee,UXr,JXr,YXr,Z3,r3e,KXr,ZXr,yee,ezr,ozr,rzr,e0,t3e,tzr,azr,xee,nzr,szr,lzr,o0,a3e,izr,dzr,$ee,czr,fzr,mzr,r0,n3e,gzr,hzr,kee,pzr,_zr,uzr,t0,s3e,bzr,vzr,See,Fzr,Tzr,Mzr,a0,l3e,Ezr,Czr,Ree,wzr,Azr,Lzr,n0,i3e,yzr,xzr,Pee,$zr,kzr,Szr,s0,d3e,Rzr,Pzr,Bee,Bzr,Izr,Nzr,l0,c3e,qzr,jzr,Iee,Dzr,Gzr,Ozr,i0,MXe,nf,d0,f3e,h$,Vzr,m3e,Xzr,EXe,Fr,p$,zzr,sf,Qzr,Nee,Wzr,Hzr,qee,Uzr,Jzr,Yzr,_$,Kzr,g3e,Zzr,eQr,oQr,Ut,u$,rQr,h3e,tQr,aQr,lf,nQr,p3e,sQr,lQr,jee,iQr,dQr,cQr,c0,fQr,Hr,b$,mQr,_3e,gQr,hQr,An,pQr,u3e,_Qr,uQr,b3e,bQr,vQr,v3e,FQr,TQr,MQr,Se,f0,F3e,EQr,CQr,Dee,wQr,AQr,LQr,m0,T3e,yQr,xQr,Gee,$Qr,kQr,SQr,g0,M3e,RQr,PQr,Oee,BQr,IQr,NQr,h0,E3e,qQr,jQr,Vee,DQr,GQr,OQr,p0,C3e,VQr,XQr,Xee,zQr,QQr,WQr,_0,w3e,HQr,UQr,zee,JQr,YQr,KQr,u0,A3e,ZQr,eWr,Qee,oWr,rWr,tWr,b0,L3e,aWr,nWr,Wee,sWr,lWr,iWr,v0,y3e,dWr,cWr,Hee,fWr,mWr,gWr,F0,x3e,hWr,pWr,Uee,_Wr,uWr,bWr,T0,CXe,df,M0,$3e,v$,vWr,k3e,FWr,wXe,Tr,F$,TWr,cf,MWr,Jee,EWr,CWr,Yee,wWr,AWr,LWr,T$,yWr,S3e,xWr,$Wr,kWr,Jt,M$,SWr,R3e,RWr,PWr,ff,BWr,P3e,IWr,NWr,Kee,qWr,jWr,DWr,E0,GWr,Ur,E$,OWr,B3e,VWr,XWr,Ln,zWr,I3e,QWr,WWr,N3e,HWr,UWr,q3e,JWr,YWr,KWr,Re,C0,j3e,ZWr,eHr,Zee,oHr,rHr,tHr,w0,D3e,aHr,nHr,eoe,sHr,lHr,iHr,A0,G3e,dHr,cHr,ooe,fHr,mHr,gHr,L0,O3e,hHr,pHr,roe,_Hr,uHr,bHr,y0,V3e,vHr,FHr,toe,THr,MHr,EHr,x0,X3e,CHr,wHr,aoe,AHr,LHr,yHr,$0,z3e,xHr,$Hr,noe,kHr,SHr,RHr,k0,Q3e,PHr,BHr,soe,IHr,NHr,qHr,S0,W3e,jHr,DHr,loe,GHr,OHr,VHr,R0,H3e,XHr,zHr,ioe,QHr,WHr,HHr,P0,AXe,mf,B0,U3e,C$,UHr,J3e,JHr,LXe,Mr,w$,YHr,gf,KHr,doe,ZHr,eUr,coe,oUr,rUr,tUr,A$,aUr,Y3e,nUr,sUr,lUr,Yt,L$,iUr,K3e,dUr,cUr,hf,fUr,Z3e,mUr,gUr,foe,hUr,pUr,_Ur,I0,uUr,Jr,y$,bUr,e0e,vUr,FUr,yn,TUr,o0e,MUr,EUr,r0e,CUr,wUr,t0e,AUr,LUr,yUr,Ve,N0,a0e,xUr,$Ur,moe,kUr,SUr,RUr,q0,n0e,PUr,BUr,goe,IUr,NUr,qUr,j0,s0e,jUr,DUr,hoe,GUr,OUr,VUr,D0,l0e,XUr,zUr,poe,QUr,WUr,HUr,G0,i0e,UUr,JUr,_oe,YUr,KUr,ZUr,O0,d0e,eJr,oJr,uoe,rJr,tJr,aJr,V0,c0e,nJr,sJr,boe,lJr,iJr,dJr,X0,f0e,cJr,fJr,voe,mJr,gJr,hJr,z0,yXe,pf,Q0,m0e,x$,pJr,g0e,_Jr,xXe,Er,$$,uJr,_f,bJr,Foe,vJr,FJr,Toe,TJr,MJr,EJr,k$,CJr,h0e,wJr,AJr,LJr,Kt,S$,yJr,p0e,xJr,$Jr,uf,kJr,_0e,SJr,RJr,Moe,PJr,BJr,IJr,W0,NJr,Yr,R$,qJr,u0e,jJr,DJr,xn,GJr,b0e,OJr,VJr,v0e,XJr,zJr,F0e,QJr,WJr,HJr,Xe,H0,T0e,UJr,JJr,Eoe,YJr,KJr,ZJr,U0,M0e,eYr,oYr,Coe,rYr,tYr,aYr,J0,E0e,nYr,sYr,woe,lYr,iYr,dYr,Y0,C0e,cYr,fYr,Aoe,mYr,gYr,hYr,K0,w0e,pYr,_Yr,Loe,uYr,bYr,vYr,Z0,A0e,FYr,TYr,yoe,MYr,EYr,CYr,ew,L0e,wYr,AYr,xoe,LYr,yYr,xYr,ow,y0e,$Yr,kYr,$oe,SYr,RYr,PYr,rw,$Xe,bf,tw,x0e,P$,BYr,$0e,IYr,kXe,Cr,B$,NYr,vf,qYr,koe,jYr,DYr,Soe,GYr,OYr,VYr,I$,XYr,k0e,zYr,QYr,WYr,Zt,N$,HYr,S0e,UYr,JYr,Ff,YYr,R0e,KYr,ZYr,Roe,eKr,oKr,rKr,aw,tKr,Kr,q$,aKr,P0e,nKr,sKr,$n,lKr,B0e,iKr,dKr,I0e,cKr,fKr,N0e,mKr,gKr,hKr,q0e,nw,j0e,pKr,_Kr,Poe,uKr,bKr,vKr,sw,SXe,Tf,lw,D0e,j$,FKr,G0e,TKr,RXe,wr,D$,MKr,Mf,EKr,Boe,CKr,wKr,Ioe,AKr,LKr,yKr,G$,xKr,O0e,$Kr,kKr,SKr,ea,O$,RKr,V0e,PKr,BKr,Ef,IKr,X0e,NKr,qKr,Noe,jKr,DKr,GKr,iw,OKr,Zr,V$,VKr,z0e,XKr,zKr,kn,QKr,Q0e,WKr,HKr,W0e,UKr,JKr,H0e,YKr,KKr,ZKr,X$,dw,U0e,eZr,oZr,qoe,rZr,tZr,aZr,cw,J0e,nZr,sZr,joe,lZr,iZr,dZr,fw,PXe,Cf,mw,Y0e,z$,cZr,K0e,fZr,BXe,Ar,Q$,mZr,wf,gZr,Doe,hZr,pZr,Goe,_Zr,uZr,bZr,W$,vZr,Z0e,FZr,TZr,MZr,oa,H$,EZr,ewe,CZr,wZr,Af,AZr,owe,LZr,yZr,Ooe,xZr,$Zr,kZr,gw,SZr,et,U$,RZr,rwe,PZr,BZr,Sn,IZr,twe,NZr,qZr,awe,jZr,DZr,nwe,GZr,OZr,VZr,swe,hw,lwe,XZr,zZr,Voe,QZr,WZr,HZr,pw,IXe;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),DL=new re({}),GL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new UZr({props:{warning:!0,$$slots:{default:[zOt]},$$scope:{ctx:$}}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/configuration_auto.py#L604"}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/configuration_auto.py#L627"}}),zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),WL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/configuration_auto.py#L750"}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/tokenization_auto.py#L402"}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17671/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/tokenization_auto.py#L416"}}),Lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/tokenization_auto.py#L615"}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17671/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),dp=new UZr({props:{$$slots:{default:[HOt]},$$scope:{ctx:$}}}),cp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),ny=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/processing_auto.py#L89"}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/processing_auto.py#L103"}}),kp=new UZr({props:{$$slots:{default:[JOt]},$$scope:{ctx:$}}}),Sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/processing_auto.py#L256"}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L773"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Bp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),Nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L780"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),k1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L795"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),R1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L802"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),l2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L809"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),d2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),y2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L818"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForSequenceClassification">MCTCTForSequenceClassification</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),$2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),yb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L863"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),$b=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L870"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L856"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L827"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L834"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L879"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L918"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L845"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L925"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L948"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForAudioFrameClassification">MCTCTForAudioFrameClassification</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L932"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L939"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L957"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L964"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L911"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),f9=new re({}),m9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L886"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),_9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L893"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),T9=new re({}),M9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_auto.py#L902"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),A9=new re({}),L9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),k9=new re({}),S9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),I9=new re({}),N9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),j9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),G9=new re({}),O9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),X9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),Q9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lXt]},$$scope:{ctx:$}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iXt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dXt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[cXt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[fXt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[mXt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gXt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[hXt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[pXt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[_Xt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uXt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bXt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vXt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[FXt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[TXt]},$$scope:{ctx:$}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[MXt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[EXt]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[CXt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[wXt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[AXt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LXt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),m$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yXt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xXt]},$$scope:{ctx:$}}}),h$=new re({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Xt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kXt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SXt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RXt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[PXt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BXt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[IXt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[NXt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qXt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jXt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[DXt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[GXt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[OXt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17671/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17671/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17671/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[VXt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ei=o("Auto Classes"),$f=l(),at=a("p"),Ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=a("code"),IL=o("from_pretrained()"),kf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ai=o("Instantiating one of "),Pn=a("a"),NL=o("AutoConfig"),Bn=o(", "),In=a("a"),qL=o("AutoModel"),Li=o(`, and
`),Nn=a("a"),jL=o("AutoTokenizer"),yi=o(" will directly create a class of the relevant architecture. For instance"),Sf=l(),F($a.$$.fragment),We=l(),Ae=a("p"),pS=o("will create a model that is an instance of "),xi=a("a"),_S=o("BertModel"),uS=o("."),Co=l(),ka=a("p"),bS=o("There is one class of "),Rf=a("code"),vS=o("AutoModel"),QQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kOe=l(),$i=a("h2"),Pf=a("a"),qte=a("span"),F(DL.$$.fragment),WQe=l(),jte=a("span"),HQe=o("Extending the Auto Classes"),SOe=l(),qn=a("p"),UQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dte=a("code"),JQe=o("NewModel"),YQe=o(", make sure you have a "),Gte=a("code"),KQe=o("NewModelConfig"),ZQe=o(` then you can add those to the auto
classes like this:`),ROe=l(),F(GL.$$.fragment),POe=l(),FS=a("p"),eWe=o("You will then be able to use the auto classes like you would usually do!"),BOe=l(),F(Bf.$$.fragment),IOe=l(),ki=a("h2"),If=a("a"),Ote=a("span"),F(OL.$$.fragment),oWe=l(),Vte=a("span"),rWe=o("AutoConfig"),NOe=l(),wo=a("div"),F(VL.$$.fragment),tWe=l(),XL=a("p"),aWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TS=a("a"),nWe=o("from_pretrained()"),sWe=o(" class method."),lWe=l(),zL=a("p"),iWe=o("This class cannot be instantiated directly using "),Xte=a("code"),dWe=o("__init__()"),cWe=o(" (throws an error)."),fWe=l(),Lr=a("div"),F(QL.$$.fragment),mWe=l(),zte=a("p"),gWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hWe=l(),Si=a("p"),pWe=o("The configuration class to instantiate is selected based on the "),Qte=a("code"),_We=o("model_type"),uWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wte=a("code"),bWe=o("pretrained_model_name_or_path"),vWe=o(":"),FWe=l(),A=a("ul"),Nf=a("li"),Hte=a("strong"),TWe=o("albert"),MWe=o(" \u2014 "),MS=a("a"),EWe=o("AlbertConfig"),CWe=o(" (ALBERT model)"),wWe=l(),qf=a("li"),Ute=a("strong"),AWe=o("bart"),LWe=o(" \u2014 "),ES=a("a"),yWe=o("BartConfig"),xWe=o(" (BART model)"),$We=l(),jf=a("li"),Jte=a("strong"),kWe=o("beit"),SWe=o(" \u2014 "),CS=a("a"),RWe=o("BeitConfig"),PWe=o(" (BEiT model)"),BWe=l(),Df=a("li"),Yte=a("strong"),IWe=o("bert"),NWe=o(" \u2014 "),wS=a("a"),qWe=o("BertConfig"),jWe=o(" (BERT model)"),DWe=l(),Gf=a("li"),Kte=a("strong"),GWe=o("bert-generation"),OWe=o(" \u2014 "),AS=a("a"),VWe=o("BertGenerationConfig"),XWe=o(" (Bert Generation model)"),zWe=l(),Of=a("li"),Zte=a("strong"),QWe=o("big_bird"),WWe=o(" \u2014 "),LS=a("a"),HWe=o("BigBirdConfig"),UWe=o(" (BigBird model)"),JWe=l(),Vf=a("li"),eae=a("strong"),YWe=o("bigbird_pegasus"),KWe=o(" \u2014 "),yS=a("a"),ZWe=o("BigBirdPegasusConfig"),eHe=o(" (BigBird-Pegasus model)"),oHe=l(),Xf=a("li"),oae=a("strong"),rHe=o("blenderbot"),tHe=o(" \u2014 "),xS=a("a"),aHe=o("BlenderbotConfig"),nHe=o(" (Blenderbot model)"),sHe=l(),zf=a("li"),rae=a("strong"),lHe=o("blenderbot-small"),iHe=o(" \u2014 "),$S=a("a"),dHe=o("BlenderbotSmallConfig"),cHe=o(" (BlenderbotSmall model)"),fHe=l(),Qf=a("li"),tae=a("strong"),mHe=o("bloom"),gHe=o(" \u2014 "),kS=a("a"),hHe=o("BloomConfig"),pHe=o(" (BLOOM model)"),_He=l(),Wf=a("li"),aae=a("strong"),uHe=o("camembert"),bHe=o(" \u2014 "),SS=a("a"),vHe=o("CamembertConfig"),FHe=o(" (CamemBERT model)"),THe=l(),Hf=a("li"),nae=a("strong"),MHe=o("canine"),EHe=o(" \u2014 "),RS=a("a"),CHe=o("CanineConfig"),wHe=o(" (CANINE model)"),AHe=l(),Uf=a("li"),sae=a("strong"),LHe=o("clip"),yHe=o(" \u2014 "),PS=a("a"),xHe=o("CLIPConfig"),$He=o(" (CLIP model)"),kHe=l(),Jf=a("li"),lae=a("strong"),SHe=o("codegen"),RHe=o(" \u2014 "),BS=a("a"),PHe=o("CodeGenConfig"),BHe=o(" (CodeGen model)"),IHe=l(),Yf=a("li"),iae=a("strong"),NHe=o("convbert"),qHe=o(" \u2014 "),IS=a("a"),jHe=o("ConvBertConfig"),DHe=o(" (ConvBERT model)"),GHe=l(),Kf=a("li"),dae=a("strong"),OHe=o("convnext"),VHe=o(" \u2014 "),NS=a("a"),XHe=o("ConvNextConfig"),zHe=o(" (ConvNeXT model)"),QHe=l(),Zf=a("li"),cae=a("strong"),WHe=o("ctrl"),HHe=o(" \u2014 "),qS=a("a"),UHe=o("CTRLConfig"),JHe=o(" (CTRL model)"),YHe=l(),em=a("li"),fae=a("strong"),KHe=o("cvt"),ZHe=o(" \u2014 "),jS=a("a"),eUe=o("CvtConfig"),oUe=o(" (CvT model)"),rUe=l(),om=a("li"),mae=a("strong"),tUe=o("data2vec-audio"),aUe=o(" \u2014 "),DS=a("a"),nUe=o("Data2VecAudioConfig"),sUe=o(" (Data2VecAudio model)"),lUe=l(),rm=a("li"),gae=a("strong"),iUe=o("data2vec-text"),dUe=o(" \u2014 "),GS=a("a"),cUe=o("Data2VecTextConfig"),fUe=o(" (Data2VecText model)"),mUe=l(),tm=a("li"),hae=a("strong"),gUe=o("data2vec-vision"),hUe=o(" \u2014 "),OS=a("a"),pUe=o("Data2VecVisionConfig"),_Ue=o(" (Data2VecVision model)"),uUe=l(),am=a("li"),pae=a("strong"),bUe=o("deberta"),vUe=o(" \u2014 "),VS=a("a"),FUe=o("DebertaConfig"),TUe=o(" (DeBERTa model)"),MUe=l(),nm=a("li"),_ae=a("strong"),EUe=o("deberta-v2"),CUe=o(" \u2014 "),XS=a("a"),wUe=o("DebertaV2Config"),AUe=o(" (DeBERTa-v2 model)"),LUe=l(),sm=a("li"),uae=a("strong"),yUe=o("decision_transformer"),xUe=o(" \u2014 "),zS=a("a"),$Ue=o("DecisionTransformerConfig"),kUe=o(" (Decision Transformer model)"),SUe=l(),lm=a("li"),bae=a("strong"),RUe=o("deit"),PUe=o(" \u2014 "),QS=a("a"),BUe=o("DeiTConfig"),IUe=o(" (DeiT model)"),NUe=l(),im=a("li"),vae=a("strong"),qUe=o("detr"),jUe=o(" \u2014 "),WS=a("a"),DUe=o("DetrConfig"),GUe=o(" (DETR model)"),OUe=l(),dm=a("li"),Fae=a("strong"),VUe=o("distilbert"),XUe=o(" \u2014 "),HS=a("a"),zUe=o("DistilBertConfig"),QUe=o(" (DistilBERT model)"),WUe=l(),cm=a("li"),Tae=a("strong"),HUe=o("dpr"),UUe=o(" \u2014 "),US=a("a"),JUe=o("DPRConfig"),YUe=o(" (DPR model)"),KUe=l(),fm=a("li"),Mae=a("strong"),ZUe=o("dpt"),eJe=o(" \u2014 "),JS=a("a"),oJe=o("DPTConfig"),rJe=o(" (DPT model)"),tJe=l(),mm=a("li"),Eae=a("strong"),aJe=o("electra"),nJe=o(" \u2014 "),YS=a("a"),sJe=o("ElectraConfig"),lJe=o(" (ELECTRA model)"),iJe=l(),gm=a("li"),Cae=a("strong"),dJe=o("encoder-decoder"),cJe=o(" \u2014 "),KS=a("a"),fJe=o("EncoderDecoderConfig"),mJe=o(" (Encoder decoder model)"),gJe=l(),hm=a("li"),wae=a("strong"),hJe=o("flaubert"),pJe=o(" \u2014 "),ZS=a("a"),_Je=o("FlaubertConfig"),uJe=o(" (FlauBERT model)"),bJe=l(),pm=a("li"),Aae=a("strong"),vJe=o("flava"),FJe=o(" \u2014 "),eR=a("a"),TJe=o("FlavaConfig"),MJe=o(" (FLAVA model)"),EJe=l(),_m=a("li"),Lae=a("strong"),CJe=o("fnet"),wJe=o(" \u2014 "),oR=a("a"),AJe=o("FNetConfig"),LJe=o(" (FNet model)"),yJe=l(),um=a("li"),yae=a("strong"),xJe=o("fsmt"),$Je=o(" \u2014 "),rR=a("a"),kJe=o("FSMTConfig"),SJe=o(" (FairSeq Machine-Translation model)"),RJe=l(),bm=a("li"),xae=a("strong"),PJe=o("funnel"),BJe=o(" \u2014 "),tR=a("a"),IJe=o("FunnelConfig"),NJe=o(" (Funnel Transformer model)"),qJe=l(),vm=a("li"),$ae=a("strong"),jJe=o("glpn"),DJe=o(" \u2014 "),aR=a("a"),GJe=o("GLPNConfig"),OJe=o(" (GLPN model)"),VJe=l(),Fm=a("li"),kae=a("strong"),XJe=o("gpt2"),zJe=o(" \u2014 "),nR=a("a"),QJe=o("GPT2Config"),WJe=o(" (OpenAI GPT-2 model)"),HJe=l(),Tm=a("li"),Sae=a("strong"),UJe=o("gpt_neo"),JJe=o(" \u2014 "),sR=a("a"),YJe=o("GPTNeoConfig"),KJe=o(" (GPT Neo model)"),ZJe=l(),Mm=a("li"),Rae=a("strong"),eYe=o("gpt_neox"),oYe=o(" \u2014 "),lR=a("a"),rYe=o("GPTNeoXConfig"),tYe=o(" (GPT NeoX model)"),aYe=l(),Em=a("li"),Pae=a("strong"),nYe=o("gptj"),sYe=o(" \u2014 "),iR=a("a"),lYe=o("GPTJConfig"),iYe=o(" (GPT-J model)"),dYe=l(),Cm=a("li"),Bae=a("strong"),cYe=o("groupvit"),fYe=o(" \u2014 "),dR=a("a"),mYe=o("GroupViTConfig"),gYe=o(" (GroupViT model)"),hYe=l(),wm=a("li"),Iae=a("strong"),pYe=o("hubert"),_Ye=o(" \u2014 "),cR=a("a"),uYe=o("HubertConfig"),bYe=o(" (Hubert model)"),vYe=l(),Am=a("li"),Nae=a("strong"),FYe=o("ibert"),TYe=o(" \u2014 "),fR=a("a"),MYe=o("IBertConfig"),EYe=o(" (I-BERT model)"),CYe=l(),Lm=a("li"),qae=a("strong"),wYe=o("imagegpt"),AYe=o(" \u2014 "),mR=a("a"),LYe=o("ImageGPTConfig"),yYe=o(" (ImageGPT model)"),xYe=l(),ym=a("li"),jae=a("strong"),$Ye=o("layoutlm"),kYe=o(" \u2014 "),gR=a("a"),SYe=o("LayoutLMConfig"),RYe=o(" (LayoutLM model)"),PYe=l(),xm=a("li"),Dae=a("strong"),BYe=o("layoutlmv2"),IYe=o(" \u2014 "),hR=a("a"),NYe=o("LayoutLMv2Config"),qYe=o(" (LayoutLMv2 model)"),jYe=l(),$m=a("li"),Gae=a("strong"),DYe=o("layoutlmv3"),GYe=o(" \u2014 "),pR=a("a"),OYe=o("LayoutLMv3Config"),VYe=o(" (LayoutLMv3 model)"),XYe=l(),km=a("li"),Oae=a("strong"),zYe=o("led"),QYe=o(" \u2014 "),_R=a("a"),WYe=o("LEDConfig"),HYe=o(" (LED model)"),UYe=l(),Sm=a("li"),Vae=a("strong"),JYe=o("levit"),YYe=o(" \u2014 "),uR=a("a"),KYe=o("LevitConfig"),ZYe=o(" (LeViT model)"),eKe=l(),Rm=a("li"),Xae=a("strong"),oKe=o("longformer"),rKe=o(" \u2014 "),bR=a("a"),tKe=o("LongformerConfig"),aKe=o(" (Longformer model)"),nKe=l(),Pm=a("li"),zae=a("strong"),sKe=o("longt5"),lKe=o(" \u2014 "),vR=a("a"),iKe=o("LongT5Config"),dKe=o(" (LongT5 model)"),cKe=l(),Bm=a("li"),Qae=a("strong"),fKe=o("luke"),mKe=o(" \u2014 "),FR=a("a"),gKe=o("LukeConfig"),hKe=o(" (LUKE model)"),pKe=l(),Im=a("li"),Wae=a("strong"),_Ke=o("lxmert"),uKe=o(" \u2014 "),TR=a("a"),bKe=o("LxmertConfig"),vKe=o(" (LXMERT model)"),FKe=l(),Nm=a("li"),Hae=a("strong"),TKe=o("m2m_100"),MKe=o(" \u2014 "),MR=a("a"),EKe=o("M2M100Config"),CKe=o(" (M2M100 model)"),wKe=l(),qm=a("li"),Uae=a("strong"),AKe=o("marian"),LKe=o(" \u2014 "),ER=a("a"),yKe=o("MarianConfig"),xKe=o(" (Marian model)"),$Ke=l(),jm=a("li"),Jae=a("strong"),kKe=o("maskformer"),SKe=o(" \u2014 "),CR=a("a"),RKe=o("MaskFormerConfig"),PKe=o(" (MaskFormer model)"),BKe=l(),Dm=a("li"),Yae=a("strong"),IKe=o("mbart"),NKe=o(" \u2014 "),wR=a("a"),qKe=o("MBartConfig"),jKe=o(" (mBART model)"),DKe=l(),Gm=a("li"),Kae=a("strong"),GKe=o("mctct"),OKe=o(" \u2014 "),AR=a("a"),VKe=o("MCTCTConfig"),XKe=o(" (M-CTC-T model)"),zKe=l(),Om=a("li"),Zae=a("strong"),QKe=o("megatron-bert"),WKe=o(" \u2014 "),LR=a("a"),HKe=o("MegatronBertConfig"),UKe=o(" (Megatron-BERT model)"),JKe=l(),Vm=a("li"),ene=a("strong"),YKe=o("mobilebert"),KKe=o(" \u2014 "),yR=a("a"),ZKe=o("MobileBertConfig"),eZe=o(" (MobileBERT model)"),oZe=l(),Xm=a("li"),one=a("strong"),rZe=o("mpnet"),tZe=o(" \u2014 "),xR=a("a"),aZe=o("MPNetConfig"),nZe=o(" (MPNet model)"),sZe=l(),zm=a("li"),rne=a("strong"),lZe=o("mt5"),iZe=o(" \u2014 "),$R=a("a"),dZe=o("MT5Config"),cZe=o(" (MT5 model)"),fZe=l(),Qm=a("li"),tne=a("strong"),mZe=o("nezha"),gZe=o(" \u2014 "),kR=a("a"),hZe=o("NezhaConfig"),pZe=o(" (Nezha model)"),_Ze=l(),Wm=a("li"),ane=a("strong"),uZe=o("nystromformer"),bZe=o(" \u2014 "),SR=a("a"),vZe=o("NystromformerConfig"),FZe=o(" (Nystr\xF6mformer model)"),TZe=l(),Hm=a("li"),nne=a("strong"),MZe=o("openai-gpt"),EZe=o(" \u2014 "),RR=a("a"),CZe=o("OpenAIGPTConfig"),wZe=o(" (OpenAI GPT model)"),AZe=l(),Um=a("li"),sne=a("strong"),LZe=o("opt"),yZe=o(" \u2014 "),PR=a("a"),xZe=o("OPTConfig"),$Ze=o(" (OPT model)"),kZe=l(),Jm=a("li"),lne=a("strong"),SZe=o("pegasus"),RZe=o(" \u2014 "),BR=a("a"),PZe=o("PegasusConfig"),BZe=o(" (Pegasus model)"),IZe=l(),Ym=a("li"),ine=a("strong"),NZe=o("perceiver"),qZe=o(" \u2014 "),IR=a("a"),jZe=o("PerceiverConfig"),DZe=o(" (Perceiver model)"),GZe=l(),Km=a("li"),dne=a("strong"),OZe=o("plbart"),VZe=o(" \u2014 "),NR=a("a"),XZe=o("PLBartConfig"),zZe=o(" (PLBart model)"),QZe=l(),Zm=a("li"),cne=a("strong"),WZe=o("poolformer"),HZe=o(" \u2014 "),qR=a("a"),UZe=o("PoolFormerConfig"),JZe=o(" (PoolFormer model)"),YZe=l(),eg=a("li"),fne=a("strong"),KZe=o("prophetnet"),ZZe=o(" \u2014 "),jR=a("a"),eeo=o("ProphetNetConfig"),oeo=o(" (ProphetNet model)"),reo=l(),og=a("li"),mne=a("strong"),teo=o("qdqbert"),aeo=o(" \u2014 "),DR=a("a"),neo=o("QDQBertConfig"),seo=o(" (QDQBert model)"),leo=l(),rg=a("li"),gne=a("strong"),ieo=o("rag"),deo=o(" \u2014 "),GR=a("a"),ceo=o("RagConfig"),feo=o(" (RAG model)"),meo=l(),tg=a("li"),hne=a("strong"),geo=o("realm"),heo=o(" \u2014 "),OR=a("a"),peo=o("RealmConfig"),_eo=o(" (REALM model)"),ueo=l(),ag=a("li"),pne=a("strong"),beo=o("reformer"),veo=o(" \u2014 "),VR=a("a"),Feo=o("ReformerConfig"),Teo=o(" (Reformer model)"),Meo=l(),ng=a("li"),_ne=a("strong"),Eeo=o("regnet"),Ceo=o(" \u2014 "),XR=a("a"),weo=o("RegNetConfig"),Aeo=o(" (RegNet model)"),Leo=l(),sg=a("li"),une=a("strong"),yeo=o("rembert"),xeo=o(" \u2014 "),zR=a("a"),$eo=o("RemBertConfig"),keo=o(" (RemBERT model)"),Seo=l(),lg=a("li"),bne=a("strong"),Reo=o("resnet"),Peo=o(" \u2014 "),QR=a("a"),Beo=o("ResNetConfig"),Ieo=o(" (ResNet model)"),Neo=l(),ig=a("li"),vne=a("strong"),qeo=o("retribert"),jeo=o(" \u2014 "),WR=a("a"),Deo=o("RetriBertConfig"),Geo=o(" (RetriBERT model)"),Oeo=l(),dg=a("li"),Fne=a("strong"),Veo=o("roberta"),Xeo=o(" \u2014 "),HR=a("a"),zeo=o("RobertaConfig"),Qeo=o(" (RoBERTa model)"),Weo=l(),cg=a("li"),Tne=a("strong"),Heo=o("roformer"),Ueo=o(" \u2014 "),UR=a("a"),Jeo=o("RoFormerConfig"),Yeo=o(" (RoFormer model)"),Keo=l(),fg=a("li"),Mne=a("strong"),Zeo=o("segformer"),eoo=o(" \u2014 "),JR=a("a"),ooo=o("SegformerConfig"),roo=o(" (SegFormer model)"),too=l(),mg=a("li"),Ene=a("strong"),aoo=o("sew"),noo=o(" \u2014 "),YR=a("a"),soo=o("SEWConfig"),loo=o(" (SEW model)"),ioo=l(),gg=a("li"),Cne=a("strong"),doo=o("sew-d"),coo=o(" \u2014 "),KR=a("a"),foo=o("SEWDConfig"),moo=o(" (SEW-D model)"),goo=l(),hg=a("li"),wne=a("strong"),hoo=o("speech-encoder-decoder"),poo=o(" \u2014 "),ZR=a("a"),_oo=o("SpeechEncoderDecoderConfig"),uoo=o(" (Speech Encoder decoder model)"),boo=l(),pg=a("li"),Ane=a("strong"),voo=o("speech_to_text"),Foo=o(" \u2014 "),eP=a("a"),Too=o("Speech2TextConfig"),Moo=o(" (Speech2Text model)"),Eoo=l(),_g=a("li"),Lne=a("strong"),Coo=o("speech_to_text_2"),woo=o(" \u2014 "),oP=a("a"),Aoo=o("Speech2Text2Config"),Loo=o(" (Speech2Text2 model)"),yoo=l(),ug=a("li"),yne=a("strong"),xoo=o("splinter"),$oo=o(" \u2014 "),rP=a("a"),koo=o("SplinterConfig"),Soo=o(" (Splinter model)"),Roo=l(),bg=a("li"),xne=a("strong"),Poo=o("squeezebert"),Boo=o(" \u2014 "),tP=a("a"),Ioo=o("SqueezeBertConfig"),Noo=o(" (SqueezeBERT model)"),qoo=l(),vg=a("li"),$ne=a("strong"),joo=o("swin"),Doo=o(" \u2014 "),aP=a("a"),Goo=o("SwinConfig"),Ooo=o(" (Swin Transformer model)"),Voo=l(),Fg=a("li"),kne=a("strong"),Xoo=o("t5"),zoo=o(" \u2014 "),nP=a("a"),Qoo=o("T5Config"),Woo=o(" (T5 model)"),Hoo=l(),Tg=a("li"),Sne=a("strong"),Uoo=o("tapas"),Joo=o(" \u2014 "),sP=a("a"),Yoo=o("TapasConfig"),Koo=o(" (TAPAS model)"),Zoo=l(),Mg=a("li"),Rne=a("strong"),ero=o("trajectory_transformer"),oro=o(" \u2014 "),lP=a("a"),rro=o("TrajectoryTransformerConfig"),tro=o(" (Trajectory Transformer model)"),aro=l(),Eg=a("li"),Pne=a("strong"),nro=o("transfo-xl"),sro=o(" \u2014 "),iP=a("a"),lro=o("TransfoXLConfig"),iro=o(" (Transformer-XL model)"),dro=l(),Cg=a("li"),Bne=a("strong"),cro=o("trocr"),fro=o(" \u2014 "),dP=a("a"),mro=o("TrOCRConfig"),gro=o(" (TrOCR model)"),hro=l(),wg=a("li"),Ine=a("strong"),pro=o("unispeech"),_ro=o(" \u2014 "),cP=a("a"),uro=o("UniSpeechConfig"),bro=o(" (UniSpeech model)"),vro=l(),Ag=a("li"),Nne=a("strong"),Fro=o("unispeech-sat"),Tro=o(" \u2014 "),fP=a("a"),Mro=o("UniSpeechSatConfig"),Ero=o(" (UniSpeechSat model)"),Cro=l(),Lg=a("li"),qne=a("strong"),wro=o("van"),Aro=o(" \u2014 "),mP=a("a"),Lro=o("VanConfig"),yro=o(" (VAN model)"),xro=l(),yg=a("li"),jne=a("strong"),$ro=o("vilt"),kro=o(" \u2014 "),gP=a("a"),Sro=o("ViltConfig"),Rro=o(" (ViLT model)"),Pro=l(),xg=a("li"),Dne=a("strong"),Bro=o("vision-encoder-decoder"),Iro=o(" \u2014 "),hP=a("a"),Nro=o("VisionEncoderDecoderConfig"),qro=o(" (Vision Encoder decoder model)"),jro=l(),$g=a("li"),Gne=a("strong"),Dro=o("vision-text-dual-encoder"),Gro=o(" \u2014 "),pP=a("a"),Oro=o("VisionTextDualEncoderConfig"),Vro=o(" (VisionTextDualEncoder model)"),Xro=l(),kg=a("li"),One=a("strong"),zro=o("visual_bert"),Qro=o(" \u2014 "),_P=a("a"),Wro=o("VisualBertConfig"),Hro=o(" (VisualBERT model)"),Uro=l(),Sg=a("li"),Vne=a("strong"),Jro=o("vit"),Yro=o(" \u2014 "),uP=a("a"),Kro=o("ViTConfig"),Zro=o(" (ViT model)"),eto=l(),Rg=a("li"),Xne=a("strong"),oto=o("vit_mae"),rto=o(" \u2014 "),bP=a("a"),tto=o("ViTMAEConfig"),ato=o(" (ViTMAE model)"),nto=l(),Pg=a("li"),zne=a("strong"),sto=o("wav2vec2"),lto=o(" \u2014 "),vP=a("a"),ito=o("Wav2Vec2Config"),dto=o(" (Wav2Vec2 model)"),cto=l(),Bg=a("li"),Qne=a("strong"),fto=o("wav2vec2-conformer"),mto=o(" \u2014 "),FP=a("a"),gto=o("Wav2Vec2ConformerConfig"),hto=o(" (Wav2Vec2-Conformer model)"),pto=l(),Ig=a("li"),Wne=a("strong"),_to=o("wavlm"),uto=o(" \u2014 "),TP=a("a"),bto=o("WavLMConfig"),vto=o(" (WavLM model)"),Fto=l(),Ng=a("li"),Hne=a("strong"),Tto=o("xglm"),Mto=o(" \u2014 "),MP=a("a"),Eto=o("XGLMConfig"),Cto=o(" (XGLM model)"),wto=l(),qg=a("li"),Une=a("strong"),Ato=o("xlm"),Lto=o(" \u2014 "),EP=a("a"),yto=o("XLMConfig"),xto=o(" (XLM model)"),$to=l(),jg=a("li"),Jne=a("strong"),kto=o("xlm-prophetnet"),Sto=o(" \u2014 "),CP=a("a"),Rto=o("XLMProphetNetConfig"),Pto=o(" (XLM-ProphetNet model)"),Bto=l(),Dg=a("li"),Yne=a("strong"),Ito=o("xlm-roberta"),Nto=o(" \u2014 "),wP=a("a"),qto=o("XLMRobertaConfig"),jto=o(" (XLM-RoBERTa model)"),Dto=l(),Gg=a("li"),Kne=a("strong"),Gto=o("xlm-roberta-xl"),Oto=o(" \u2014 "),AP=a("a"),Vto=o("XLMRobertaXLConfig"),Xto=o(" (XLM-RoBERTa-XL model)"),zto=l(),Og=a("li"),Zne=a("strong"),Qto=o("xlnet"),Wto=o(" \u2014 "),LP=a("a"),Hto=o("XLNetConfig"),Uto=o(" (XLNet model)"),Jto=l(),Vg=a("li"),ese=a("strong"),Yto=o("yolos"),Kto=o(" \u2014 "),yP=a("a"),Zto=o("YolosConfig"),eao=o(" (YOLOS model)"),oao=l(),Xg=a("li"),ose=a("strong"),rao=o("yoso"),tao=o(" \u2014 "),xP=a("a"),aao=o("YosoConfig"),nao=o(" (YOSO model)"),sao=l(),F(zg.$$.fragment),lao=l(),Qg=a("div"),F(WL.$$.fragment),iao=l(),rse=a("p"),dao=o("Register a new configuration for this class."),qOe=l(),Ri=a("h2"),Wg=a("a"),tse=a("span"),F(HL.$$.fragment),cao=l(),ase=a("span"),fao=o("AutoTokenizer"),jOe=l(),Ao=a("div"),F(UL.$$.fragment),mao=l(),JL=a("p"),gao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$P=a("a"),hao=o("AutoTokenizer.from_pretrained()"),pao=o(" class method."),_ao=l(),YL=a("p"),uao=o("This class cannot be instantiated directly using "),nse=a("code"),bao=o("__init__()"),vao=o(" (throws an error)."),Fao=l(),yr=a("div"),F(KL.$$.fragment),Tao=l(),sse=a("p"),Mao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eao=l(),Sa=a("p"),Cao=o("The tokenizer class to instantiate is selected based on the "),lse=a("code"),wao=o("model_type"),Aao=o(` property of the config object (either
passed as an argument or loaded from `),ise=a("code"),Lao=o("pretrained_model_name_or_path"),yao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=a("code"),xao=o("pretrained_model_name_or_path"),$ao=o(":"),kao=l(),k=a("ul"),jn=a("li"),cse=a("strong"),Sao=o("albert"),Rao=o(" \u2014 "),kP=a("a"),Pao=o("AlbertTokenizer"),Bao=o(" or "),SP=a("a"),Iao=o("AlbertTokenizerFast"),Nao=o(" (ALBERT model)"),qao=l(),Dn=a("li"),fse=a("strong"),jao=o("bart"),Dao=o(" \u2014 "),RP=a("a"),Gao=o("BartTokenizer"),Oao=o(" or "),PP=a("a"),Vao=o("BartTokenizerFast"),Xao=o(" (BART model)"),zao=l(),Gn=a("li"),mse=a("strong"),Qao=o("barthez"),Wao=o(" \u2014 "),BP=a("a"),Hao=o("BarthezTokenizer"),Uao=o(" or "),IP=a("a"),Jao=o("BarthezTokenizerFast"),Yao=o(" (BARThez model)"),Kao=l(),Hg=a("li"),gse=a("strong"),Zao=o("bartpho"),eno=o(" \u2014 "),NP=a("a"),ono=o("BartphoTokenizer"),rno=o(" (BARTpho model)"),tno=l(),On=a("li"),hse=a("strong"),ano=o("bert"),nno=o(" \u2014 "),qP=a("a"),sno=o("BertTokenizer"),lno=o(" or "),jP=a("a"),ino=o("BertTokenizerFast"),dno=o(" (BERT model)"),cno=l(),Ug=a("li"),pse=a("strong"),fno=o("bert-generation"),mno=o(" \u2014 "),DP=a("a"),gno=o("BertGenerationTokenizer"),hno=o(" (Bert Generation model)"),pno=l(),Jg=a("li"),_se=a("strong"),_no=o("bert-japanese"),uno=o(" \u2014 "),GP=a("a"),bno=o("BertJapaneseTokenizer"),vno=o(" (BertJapanese model)"),Fno=l(),Yg=a("li"),use=a("strong"),Tno=o("bertweet"),Mno=o(" \u2014 "),OP=a("a"),Eno=o("BertweetTokenizer"),Cno=o(" (BERTweet model)"),wno=l(),Vn=a("li"),bse=a("strong"),Ano=o("big_bird"),Lno=o(" \u2014 "),VP=a("a"),yno=o("BigBirdTokenizer"),xno=o(" or "),XP=a("a"),$no=o("BigBirdTokenizerFast"),kno=o(" (BigBird model)"),Sno=l(),Xn=a("li"),vse=a("strong"),Rno=o("bigbird_pegasus"),Pno=o(" \u2014 "),zP=a("a"),Bno=o("PegasusTokenizer"),Ino=o(" or "),QP=a("a"),Nno=o("PegasusTokenizerFast"),qno=o(" (BigBird-Pegasus model)"),jno=l(),zn=a("li"),Fse=a("strong"),Dno=o("blenderbot"),Gno=o(" \u2014 "),WP=a("a"),Ono=o("BlenderbotTokenizer"),Vno=o(" or "),HP=a("a"),Xno=o("BlenderbotTokenizerFast"),zno=o(" (Blenderbot model)"),Qno=l(),Kg=a("li"),Tse=a("strong"),Wno=o("blenderbot-small"),Hno=o(" \u2014 "),UP=a("a"),Uno=o("BlenderbotSmallTokenizer"),Jno=o(" (BlenderbotSmall model)"),Yno=l(),Zg=a("li"),Mse=a("strong"),Kno=o("bloom"),Zno=o(" \u2014 "),JP=a("a"),eso=o("BloomTokenizerFast"),oso=o(" (BLOOM model)"),rso=l(),eh=a("li"),Ese=a("strong"),tso=o("byt5"),aso=o(" \u2014 "),YP=a("a"),nso=o("ByT5Tokenizer"),sso=o(" (ByT5 model)"),lso=l(),Qn=a("li"),Cse=a("strong"),iso=o("camembert"),dso=o(" \u2014 "),KP=a("a"),cso=o("CamembertTokenizer"),fso=o(" or "),ZP=a("a"),mso=o("CamembertTokenizerFast"),gso=o(" (CamemBERT model)"),hso=l(),oh=a("li"),wse=a("strong"),pso=o("canine"),_so=o(" \u2014 "),eB=a("a"),uso=o("CanineTokenizer"),bso=o(" (CANINE model)"),vso=l(),Wn=a("li"),Ase=a("strong"),Fso=o("clip"),Tso=o(" \u2014 "),oB=a("a"),Mso=o("CLIPTokenizer"),Eso=o(" or "),rB=a("a"),Cso=o("CLIPTokenizerFast"),wso=o(" (CLIP model)"),Aso=l(),Hn=a("li"),Lse=a("strong"),Lso=o("codegen"),yso=o(" \u2014 "),tB=a("a"),xso=o("CodeGenTokenizer"),$so=o(" or "),aB=a("a"),kso=o("CodeGenTokenizerFast"),Sso=o(" (CodeGen model)"),Rso=l(),Un=a("li"),yse=a("strong"),Pso=o("convbert"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("ConvBertTokenizer"),Nso=o(" or "),sB=a("a"),qso=o("ConvBertTokenizerFast"),jso=o(" (ConvBERT model)"),Dso=l(),Jn=a("li"),xse=a("strong"),Gso=o("cpm"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("CpmTokenizer"),Xso=o(" or "),iB=a("a"),zso=o("CpmTokenizerFast"),Qso=o(" (CPM model)"),Wso=l(),rh=a("li"),$se=a("strong"),Hso=o("ctrl"),Uso=o(" \u2014 "),dB=a("a"),Jso=o("CTRLTokenizer"),Yso=o(" (CTRL model)"),Kso=l(),Yn=a("li"),kse=a("strong"),Zso=o("data2vec-text"),elo=o(" \u2014 "),cB=a("a"),olo=o("RobertaTokenizer"),rlo=o(" or "),fB=a("a"),tlo=o("RobertaTokenizerFast"),alo=o(" (Data2VecText model)"),nlo=l(),Kn=a("li"),Sse=a("strong"),slo=o("deberta"),llo=o(" \u2014 "),mB=a("a"),ilo=o("DebertaTokenizer"),dlo=o(" or "),gB=a("a"),clo=o("DebertaTokenizerFast"),flo=o(" (DeBERTa model)"),mlo=l(),Zn=a("li"),Rse=a("strong"),glo=o("deberta-v2"),hlo=o(" \u2014 "),hB=a("a"),plo=o("DebertaV2Tokenizer"),_lo=o(" or "),pB=a("a"),ulo=o("DebertaV2TokenizerFast"),blo=o(" (DeBERTa-v2 model)"),vlo=l(),es=a("li"),Pse=a("strong"),Flo=o("distilbert"),Tlo=o(" \u2014 "),_B=a("a"),Mlo=o("DistilBertTokenizer"),Elo=o(" or "),uB=a("a"),Clo=o("DistilBertTokenizerFast"),wlo=o(" (DistilBERT model)"),Alo=l(),os=a("li"),Bse=a("strong"),Llo=o("dpr"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("DPRQuestionEncoderTokenizer"),$lo=o(" or "),vB=a("a"),klo=o("DPRQuestionEncoderTokenizerFast"),Slo=o(" (DPR model)"),Rlo=l(),rs=a("li"),Ise=a("strong"),Plo=o("electra"),Blo=o(" \u2014 "),FB=a("a"),Ilo=o("ElectraTokenizer"),Nlo=o(" or "),TB=a("a"),qlo=o("ElectraTokenizerFast"),jlo=o(" (ELECTRA model)"),Dlo=l(),th=a("li"),Nse=a("strong"),Glo=o("flaubert"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("FlaubertTokenizer"),Xlo=o(" (FlauBERT model)"),zlo=l(),ts=a("li"),qse=a("strong"),Qlo=o("fnet"),Wlo=o(" \u2014 "),EB=a("a"),Hlo=o("FNetTokenizer"),Ulo=o(" or "),CB=a("a"),Jlo=o("FNetTokenizerFast"),Ylo=o(" (FNet model)"),Klo=l(),ah=a("li"),jse=a("strong"),Zlo=o("fsmt"),eio=o(" \u2014 "),wB=a("a"),oio=o("FSMTTokenizer"),rio=o(" (FairSeq Machine-Translation model)"),tio=l(),as=a("li"),Dse=a("strong"),aio=o("funnel"),nio=o(" \u2014 "),AB=a("a"),sio=o("FunnelTokenizer"),lio=o(" or "),LB=a("a"),iio=o("FunnelTokenizerFast"),dio=o(" (Funnel Transformer model)"),cio=l(),ns=a("li"),Gse=a("strong"),fio=o("gpt2"),mio=o(" \u2014 "),yB=a("a"),gio=o("GPT2Tokenizer"),hio=o(" or "),xB=a("a"),pio=o("GPT2TokenizerFast"),_io=o(" (OpenAI GPT-2 model)"),uio=l(),ss=a("li"),Ose=a("strong"),bio=o("gpt_neo"),vio=o(" \u2014 "),$B=a("a"),Fio=o("GPT2Tokenizer"),Tio=o(" or "),kB=a("a"),Mio=o("GPT2TokenizerFast"),Eio=o(" (GPT Neo model)"),Cio=l(),nh=a("li"),Vse=a("strong"),wio=o("gpt_neox"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("GPTNeoXTokenizerFast"),yio=o(" (GPT NeoX model)"),xio=l(),ls=a("li"),Xse=a("strong"),$io=o("gptj"),kio=o(" \u2014 "),RB=a("a"),Sio=o("GPT2Tokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("GPT2TokenizerFast"),Bio=o(" (GPT-J model)"),Iio=l(),is=a("li"),zse=a("strong"),Nio=o("groupvit"),qio=o(" \u2014 "),BB=a("a"),jio=o("CLIPTokenizer"),Dio=o(" or "),IB=a("a"),Gio=o("CLIPTokenizerFast"),Oio=o(" (GroupViT model)"),Vio=l(),ds=a("li"),Qse=a("strong"),Xio=o("herbert"),zio=o(" \u2014 "),NB=a("a"),Qio=o("HerbertTokenizer"),Wio=o(" or "),qB=a("a"),Hio=o("HerbertTokenizerFast"),Uio=o(" (HerBERT model)"),Jio=l(),sh=a("li"),Wse=a("strong"),Yio=o("hubert"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("Wav2Vec2CTCTokenizer"),edo=o(" (Hubert model)"),odo=l(),cs=a("li"),Hse=a("strong"),rdo=o("ibert"),tdo=o(" \u2014 "),DB=a("a"),ado=o("RobertaTokenizer"),ndo=o(" or "),GB=a("a"),sdo=o("RobertaTokenizerFast"),ldo=o(" (I-BERT model)"),ido=l(),fs=a("li"),Use=a("strong"),ddo=o("layoutlm"),cdo=o(" \u2014 "),OB=a("a"),fdo=o("LayoutLMTokenizer"),mdo=o(" or "),VB=a("a"),gdo=o("LayoutLMTokenizerFast"),hdo=o(" (LayoutLM model)"),pdo=l(),ms=a("li"),Jse=a("strong"),_do=o("layoutlmv2"),udo=o(" \u2014 "),XB=a("a"),bdo=o("LayoutLMv2Tokenizer"),vdo=o(" or "),zB=a("a"),Fdo=o("LayoutLMv2TokenizerFast"),Tdo=o(" (LayoutLMv2 model)"),Mdo=l(),gs=a("li"),Yse=a("strong"),Edo=o("layoutlmv3"),Cdo=o(" \u2014 "),QB=a("a"),wdo=o("LayoutLMv3Tokenizer"),Ado=o(" or "),WB=a("a"),Ldo=o("LayoutLMv3TokenizerFast"),ydo=o(" (LayoutLMv3 model)"),xdo=l(),hs=a("li"),Kse=a("strong"),$do=o("layoutxlm"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("LayoutXLMTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("LayoutXLMTokenizerFast"),Bdo=o(" (LayoutXLM model)"),Ido=l(),ps=a("li"),Zse=a("strong"),Ndo=o("led"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("LEDTokenizer"),Ddo=o(" or "),YB=a("a"),Gdo=o("LEDTokenizerFast"),Odo=o(" (LED model)"),Vdo=l(),_s=a("li"),ele=a("strong"),Xdo=o("longformer"),zdo=o(" \u2014 "),KB=a("a"),Qdo=o("LongformerTokenizer"),Wdo=o(" or "),ZB=a("a"),Hdo=o("LongformerTokenizerFast"),Udo=o(" (Longformer model)"),Jdo=l(),us=a("li"),ole=a("strong"),Ydo=o("longt5"),Kdo=o(" \u2014 "),eI=a("a"),Zdo=o("T5Tokenizer"),eco=o(" or "),oI=a("a"),oco=o("T5TokenizerFast"),rco=o(" (LongT5 model)"),tco=l(),lh=a("li"),rle=a("strong"),aco=o("luke"),nco=o(" \u2014 "),rI=a("a"),sco=o("LukeTokenizer"),lco=o(" (LUKE model)"),ico=l(),bs=a("li"),tle=a("strong"),dco=o("lxmert"),cco=o(" \u2014 "),tI=a("a"),fco=o("LxmertTokenizer"),mco=o(" or "),aI=a("a"),gco=o("LxmertTokenizerFast"),hco=o(" (LXMERT model)"),pco=l(),ih=a("li"),ale=a("strong"),_co=o("m2m_100"),uco=o(" \u2014 "),nI=a("a"),bco=o("M2M100Tokenizer"),vco=o(" (M2M100 model)"),Fco=l(),dh=a("li"),nle=a("strong"),Tco=o("marian"),Mco=o(" \u2014 "),sI=a("a"),Eco=o("MarianTokenizer"),Cco=o(" (Marian model)"),wco=l(),vs=a("li"),sle=a("strong"),Aco=o("mbart"),Lco=o(" \u2014 "),lI=a("a"),yco=o("MBartTokenizer"),xco=o(" or "),iI=a("a"),$co=o("MBartTokenizerFast"),kco=o(" (mBART model)"),Sco=l(),Fs=a("li"),lle=a("strong"),Rco=o("mbart50"),Pco=o(" \u2014 "),dI=a("a"),Bco=o("MBart50Tokenizer"),Ico=o(" or "),cI=a("a"),Nco=o("MBart50TokenizerFast"),qco=o(" (mBART-50 model)"),jco=l(),Ts=a("li"),ile=a("strong"),Dco=o("megatron-bert"),Gco=o(" \u2014 "),fI=a("a"),Oco=o("BertTokenizer"),Vco=o(" or "),mI=a("a"),Xco=o("BertTokenizerFast"),zco=o(" (Megatron-BERT model)"),Qco=l(),ch=a("li"),dle=a("strong"),Wco=o("mluke"),Hco=o(" \u2014 "),gI=a("a"),Uco=o("MLukeTokenizer"),Jco=o(" (mLUKE model)"),Yco=l(),Ms=a("li"),cle=a("strong"),Kco=o("mobilebert"),Zco=o(" \u2014 "),hI=a("a"),efo=o("MobileBertTokenizer"),ofo=o(" or "),pI=a("a"),rfo=o("MobileBertTokenizerFast"),tfo=o(" (MobileBERT model)"),afo=l(),Es=a("li"),fle=a("strong"),nfo=o("mpnet"),sfo=o(" \u2014 "),_I=a("a"),lfo=o("MPNetTokenizer"),ifo=o(" or "),uI=a("a"),dfo=o("MPNetTokenizerFast"),cfo=o(" (MPNet model)"),ffo=l(),Cs=a("li"),mle=a("strong"),mfo=o("mt5"),gfo=o(" \u2014 "),bI=a("a"),hfo=o("MT5Tokenizer"),pfo=o(" or "),vI=a("a"),_fo=o("MT5TokenizerFast"),ufo=o(" (MT5 model)"),bfo=l(),ws=a("li"),gle=a("strong"),vfo=o("nezha"),Ffo=o(" \u2014 "),FI=a("a"),Tfo=o("BertTokenizer"),Mfo=o(" or "),TI=a("a"),Efo=o("BertTokenizerFast"),Cfo=o(" (Nezha model)"),wfo=l(),As=a("li"),hle=a("strong"),Afo=o("nystromformer"),Lfo=o(" \u2014 "),MI=a("a"),yfo=o("AlbertTokenizer"),xfo=o(" or "),EI=a("a"),$fo=o("AlbertTokenizerFast"),kfo=o(" (Nystr\xF6mformer model)"),Sfo=l(),Ls=a("li"),ple=a("strong"),Rfo=o("openai-gpt"),Pfo=o(" \u2014 "),CI=a("a"),Bfo=o("OpenAIGPTTokenizer"),Ifo=o(" or "),wI=a("a"),Nfo=o("OpenAIGPTTokenizerFast"),qfo=o(" (OpenAI GPT model)"),jfo=l(),fh=a("li"),_le=a("strong"),Dfo=o("opt"),Gfo=o(" \u2014 "),AI=a("a"),Ofo=o("GPT2Tokenizer"),Vfo=o(" (OPT model)"),Xfo=l(),ys=a("li"),ule=a("strong"),zfo=o("pegasus"),Qfo=o(" \u2014 "),LI=a("a"),Wfo=o("PegasusTokenizer"),Hfo=o(" or "),yI=a("a"),Ufo=o("PegasusTokenizerFast"),Jfo=o(" (Pegasus model)"),Yfo=l(),mh=a("li"),ble=a("strong"),Kfo=o("perceiver"),Zfo=o(" \u2014 "),xI=a("a"),emo=o("PerceiverTokenizer"),omo=o(" (Perceiver model)"),rmo=l(),gh=a("li"),vle=a("strong"),tmo=o("phobert"),amo=o(" \u2014 "),$I=a("a"),nmo=o("PhobertTokenizer"),smo=o(" (PhoBERT model)"),lmo=l(),hh=a("li"),Fle=a("strong"),imo=o("plbart"),dmo=o(" \u2014 "),kI=a("a"),cmo=o("PLBartTokenizer"),fmo=o(" (PLBart model)"),mmo=l(),ph=a("li"),Tle=a("strong"),gmo=o("prophetnet"),hmo=o(" \u2014 "),SI=a("a"),pmo=o("ProphetNetTokenizer"),_mo=o(" (ProphetNet model)"),umo=l(),xs=a("li"),Mle=a("strong"),bmo=o("qdqbert"),vmo=o(" \u2014 "),RI=a("a"),Fmo=o("BertTokenizer"),Tmo=o(" or "),PI=a("a"),Mmo=o("BertTokenizerFast"),Emo=o(" (QDQBert model)"),Cmo=l(),_h=a("li"),Ele=a("strong"),wmo=o("rag"),Amo=o(" \u2014 "),BI=a("a"),Lmo=o("RagTokenizer"),ymo=o(" (RAG model)"),xmo=l(),$s=a("li"),Cle=a("strong"),$mo=o("realm"),kmo=o(" \u2014 "),II=a("a"),Smo=o("RealmTokenizer"),Rmo=o(" or "),NI=a("a"),Pmo=o("RealmTokenizerFast"),Bmo=o(" (REALM model)"),Imo=l(),ks=a("li"),wle=a("strong"),Nmo=o("reformer"),qmo=o(" \u2014 "),qI=a("a"),jmo=o("ReformerTokenizer"),Dmo=o(" or "),jI=a("a"),Gmo=o("ReformerTokenizerFast"),Omo=o(" (Reformer model)"),Vmo=l(),Ss=a("li"),Ale=a("strong"),Xmo=o("rembert"),zmo=o(" \u2014 "),DI=a("a"),Qmo=o("RemBertTokenizer"),Wmo=o(" or "),GI=a("a"),Hmo=o("RemBertTokenizerFast"),Umo=o(" (RemBERT model)"),Jmo=l(),Rs=a("li"),Lle=a("strong"),Ymo=o("retribert"),Kmo=o(" \u2014 "),OI=a("a"),Zmo=o("RetriBertTokenizer"),ego=o(" or "),VI=a("a"),ogo=o("RetriBertTokenizerFast"),rgo=o(" (RetriBERT model)"),tgo=l(),Ps=a("li"),yle=a("strong"),ago=o("roberta"),ngo=o(" \u2014 "),XI=a("a"),sgo=o("RobertaTokenizer"),lgo=o(" or "),zI=a("a"),igo=o("RobertaTokenizerFast"),dgo=o(" (RoBERTa model)"),cgo=l(),Bs=a("li"),xle=a("strong"),fgo=o("roformer"),mgo=o(" \u2014 "),QI=a("a"),ggo=o("RoFormerTokenizer"),hgo=o(" or "),WI=a("a"),pgo=o("RoFormerTokenizerFast"),_go=o(" (RoFormer model)"),ugo=l(),uh=a("li"),$le=a("strong"),bgo=o("speech_to_text"),vgo=o(" \u2014 "),HI=a("a"),Fgo=o("Speech2TextTokenizer"),Tgo=o(" (Speech2Text model)"),Mgo=l(),bh=a("li"),kle=a("strong"),Ego=o("speech_to_text_2"),Cgo=o(" \u2014 "),UI=a("a"),wgo=o("Speech2Text2Tokenizer"),Ago=o(" (Speech2Text2 model)"),Lgo=l(),Is=a("li"),Sle=a("strong"),ygo=o("splinter"),xgo=o(" \u2014 "),JI=a("a"),$go=o("SplinterTokenizer"),kgo=o(" or "),YI=a("a"),Sgo=o("SplinterTokenizerFast"),Rgo=o(" (Splinter model)"),Pgo=l(),Ns=a("li"),Rle=a("strong"),Bgo=o("squeezebert"),Igo=o(" \u2014 "),KI=a("a"),Ngo=o("SqueezeBertTokenizer"),qgo=o(" or "),ZI=a("a"),jgo=o("SqueezeBertTokenizerFast"),Dgo=o(" (SqueezeBERT model)"),Ggo=l(),qs=a("li"),Ple=a("strong"),Ogo=o("t5"),Vgo=o(" \u2014 "),eN=a("a"),Xgo=o("T5Tokenizer"),zgo=o(" or "),oN=a("a"),Qgo=o("T5TokenizerFast"),Wgo=o(" (T5 model)"),Hgo=l(),vh=a("li"),Ble=a("strong"),Ugo=o("tapas"),Jgo=o(" \u2014 "),rN=a("a"),Ygo=o("TapasTokenizer"),Kgo=o(" (TAPAS model)"),Zgo=l(),Fh=a("li"),Ile=a("strong"),eho=o("tapex"),oho=o(" \u2014 "),tN=a("a"),rho=o("TapexTokenizer"),tho=o(" (TAPEX model)"),aho=l(),Th=a("li"),Nle=a("strong"),nho=o("transfo-xl"),sho=o(" \u2014 "),aN=a("a"),lho=o("TransfoXLTokenizer"),iho=o(" (Transformer-XL model)"),dho=l(),js=a("li"),qle=a("strong"),cho=o("vilt"),fho=o(" \u2014 "),nN=a("a"),mho=o("BertTokenizer"),gho=o(" or "),sN=a("a"),hho=o("BertTokenizerFast"),pho=o(" (ViLT model)"),_ho=l(),Ds=a("li"),jle=a("strong"),uho=o("visual_bert"),bho=o(" \u2014 "),lN=a("a"),vho=o("BertTokenizer"),Fho=o(" or "),iN=a("a"),Tho=o("BertTokenizerFast"),Mho=o(" (VisualBERT model)"),Eho=l(),Mh=a("li"),Dle=a("strong"),Cho=o("wav2vec2"),who=o(" \u2014 "),dN=a("a"),Aho=o("Wav2Vec2CTCTokenizer"),Lho=o(" (Wav2Vec2 model)"),yho=l(),Eh=a("li"),Gle=a("strong"),xho=o("wav2vec2-conformer"),$ho=o(" \u2014 "),cN=a("a"),kho=o("Wav2Vec2CTCTokenizer"),Sho=o(" (Wav2Vec2-Conformer model)"),Rho=l(),Ch=a("li"),Ole=a("strong"),Pho=o("wav2vec2_phoneme"),Bho=o(" \u2014 "),fN=a("a"),Iho=o("Wav2Vec2PhonemeCTCTokenizer"),Nho=o(" (Wav2Vec2Phoneme model)"),qho=l(),Gs=a("li"),Vle=a("strong"),jho=o("xglm"),Dho=o(" \u2014 "),mN=a("a"),Gho=o("XGLMTokenizer"),Oho=o(" or "),gN=a("a"),Vho=o("XGLMTokenizerFast"),Xho=o(" (XGLM model)"),zho=l(),wh=a("li"),Xle=a("strong"),Qho=o("xlm"),Who=o(" \u2014 "),hN=a("a"),Hho=o("XLMTokenizer"),Uho=o(" (XLM model)"),Jho=l(),Ah=a("li"),zle=a("strong"),Yho=o("xlm-prophetnet"),Kho=o(" \u2014 "),pN=a("a"),Zho=o("XLMProphetNetTokenizer"),epo=o(" (XLM-ProphetNet model)"),opo=l(),Os=a("li"),Qle=a("strong"),rpo=o("xlm-roberta"),tpo=o(" \u2014 "),_N=a("a"),apo=o("XLMRobertaTokenizer"),npo=o(" or "),uN=a("a"),spo=o("XLMRobertaTokenizerFast"),lpo=o(" (XLM-RoBERTa model)"),ipo=l(),Vs=a("li"),Wle=a("strong"),dpo=o("xlm-roberta-xl"),cpo=o(" \u2014 "),bN=a("a"),fpo=o("RobertaTokenizer"),mpo=o(" or "),vN=a("a"),gpo=o("RobertaTokenizerFast"),hpo=o(" (XLM-RoBERTa-XL model)"),ppo=l(),Xs=a("li"),Hle=a("strong"),_po=o("xlnet"),upo=o(" \u2014 "),FN=a("a"),bpo=o("XLNetTokenizer"),vpo=o(" or "),TN=a("a"),Fpo=o("XLNetTokenizerFast"),Tpo=o(" (XLNet model)"),Mpo=l(),zs=a("li"),Ule=a("strong"),Epo=o("yoso"),Cpo=o(" \u2014 "),MN=a("a"),wpo=o("AlbertTokenizer"),Apo=o(" or "),EN=a("a"),Lpo=o("AlbertTokenizerFast"),ypo=o(" (YOSO model)"),xpo=l(),F(Lh.$$.fragment),$po=l(),yh=a("div"),F(ZL.$$.fragment),kpo=l(),Jle=a("p"),Spo=o("Register a new tokenizer in this mapping."),DOe=l(),Pi=a("h2"),xh=a("a"),Yle=a("span"),F(ey.$$.fragment),Rpo=l(),Kle=a("span"),Ppo=o("AutoFeatureExtractor"),GOe=l(),Lo=a("div"),F(oy.$$.fragment),Bpo=l(),ry=a("p"),Ipo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CN=a("a"),Npo=o("AutoFeatureExtractor.from_pretrained()"),qpo=o(" class method."),jpo=l(),ty=a("p"),Dpo=o("This class cannot be instantiated directly using "),Zle=a("code"),Gpo=o("__init__()"),Opo=o(" (throws an error)."),Vpo=l(),He=a("div"),F(ay.$$.fragment),Xpo=l(),eie=a("p"),zpo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qpo=l(),Ra=a("p"),Wpo=o("The feature extractor class to instantiate is selected based on the "),oie=a("code"),Hpo=o("model_type"),Upo=o(` property of the config object
(either passed as an argument or loaded from `),rie=a("code"),Jpo=o("pretrained_model_name_or_path"),Ypo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tie=a("code"),Kpo=o("pretrained_model_name_or_path"),Zpo=o(":"),e_o=l(),Y=a("ul"),$h=a("li"),aie=a("strong"),o_o=o("beit"),r_o=o(" \u2014 "),wN=a("a"),t_o=o("BeitFeatureExtractor"),a_o=o(" (BEiT model)"),n_o=l(),kh=a("li"),nie=a("strong"),s_o=o("clip"),l_o=o(" \u2014 "),AN=a("a"),i_o=o("CLIPFeatureExtractor"),d_o=o(" (CLIP model)"),c_o=l(),Sh=a("li"),sie=a("strong"),f_o=o("convnext"),m_o=o(" \u2014 "),LN=a("a"),g_o=o("ConvNextFeatureExtractor"),h_o=o(" (ConvNeXT model)"),p_o=l(),Rh=a("li"),lie=a("strong"),__o=o("cvt"),u_o=o(" \u2014 "),yN=a("a"),b_o=o("ConvNextFeatureExtractor"),v_o=o(" (CvT model)"),F_o=l(),Ph=a("li"),iie=a("strong"),T_o=o("data2vec-audio"),M_o=o(" \u2014 "),xN=a("a"),E_o=o("Wav2Vec2FeatureExtractor"),C_o=o(" (Data2VecAudio model)"),w_o=l(),Bh=a("li"),die=a("strong"),A_o=o("data2vec-vision"),L_o=o(" \u2014 "),$N=a("a"),y_o=o("BeitFeatureExtractor"),x_o=o(" (Data2VecVision model)"),$_o=l(),Ih=a("li"),cie=a("strong"),k_o=o("deit"),S_o=o(" \u2014 "),kN=a("a"),R_o=o("DeiTFeatureExtractor"),P_o=o(" (DeiT model)"),B_o=l(),Nh=a("li"),fie=a("strong"),I_o=o("detr"),N_o=o(" \u2014 "),SN=a("a"),q_o=o("DetrFeatureExtractor"),j_o=o(" (DETR model)"),D_o=l(),qh=a("li"),mie=a("strong"),G_o=o("dpt"),O_o=o(" \u2014 "),RN=a("a"),V_o=o("DPTFeatureExtractor"),X_o=o(" (DPT model)"),z_o=l(),jh=a("li"),gie=a("strong"),Q_o=o("flava"),W_o=o(" \u2014 "),PN=a("a"),H_o=o("FlavaFeatureExtractor"),U_o=o(" (FLAVA model)"),J_o=l(),Dh=a("li"),hie=a("strong"),Y_o=o("glpn"),K_o=o(" \u2014 "),BN=a("a"),Z_o=o("GLPNFeatureExtractor"),euo=o(" (GLPN model)"),ouo=l(),Gh=a("li"),pie=a("strong"),ruo=o("groupvit"),tuo=o(" \u2014 "),IN=a("a"),auo=o("CLIPFeatureExtractor"),nuo=o(" (GroupViT model)"),suo=l(),Oh=a("li"),_ie=a("strong"),luo=o("hubert"),iuo=o(" \u2014 "),NN=a("a"),duo=o("Wav2Vec2FeatureExtractor"),cuo=o(" (Hubert model)"),fuo=l(),Vh=a("li"),uie=a("strong"),muo=o("imagegpt"),guo=o(" \u2014 "),qN=a("a"),huo=o("ImageGPTFeatureExtractor"),puo=o(" (ImageGPT model)"),_uo=l(),Xh=a("li"),bie=a("strong"),uuo=o("layoutlmv2"),buo=o(" \u2014 "),jN=a("a"),vuo=o("LayoutLMv2FeatureExtractor"),Fuo=o(" (LayoutLMv2 model)"),Tuo=l(),zh=a("li"),vie=a("strong"),Muo=o("layoutlmv3"),Euo=o(" \u2014 "),DN=a("a"),Cuo=o("LayoutLMv3FeatureExtractor"),wuo=o(" (LayoutLMv3 model)"),Auo=l(),Qh=a("li"),Fie=a("strong"),Luo=o("levit"),yuo=o(" \u2014 "),GN=a("a"),xuo=o("LevitFeatureExtractor"),$uo=o(" (LeViT model)"),kuo=l(),Wh=a("li"),Tie=a("strong"),Suo=o("maskformer"),Ruo=o(" \u2014 "),ON=a("a"),Puo=o("MaskFormerFeatureExtractor"),Buo=o(" (MaskFormer model)"),Iuo=l(),Hh=a("li"),Mie=a("strong"),Nuo=o("mctct"),quo=o(" \u2014 "),VN=a("a"),juo=o("MCTCTFeatureExtractor"),Duo=o(" (M-CTC-T model)"),Guo=l(),Uh=a("li"),Eie=a("strong"),Ouo=o("perceiver"),Vuo=o(" \u2014 "),XN=a("a"),Xuo=o("PerceiverFeatureExtractor"),zuo=o(" (Perceiver model)"),Quo=l(),Jh=a("li"),Cie=a("strong"),Wuo=o("poolformer"),Huo=o(" \u2014 "),zN=a("a"),Uuo=o("PoolFormerFeatureExtractor"),Juo=o(" (PoolFormer model)"),Yuo=l(),Yh=a("li"),wie=a("strong"),Kuo=o("regnet"),Zuo=o(" \u2014 "),QN=a("a"),e1o=o("ConvNextFeatureExtractor"),o1o=o(" (RegNet model)"),r1o=l(),Kh=a("li"),Aie=a("strong"),t1o=o("resnet"),a1o=o(" \u2014 "),WN=a("a"),n1o=o("ConvNextFeatureExtractor"),s1o=o(" (ResNet model)"),l1o=l(),Zh=a("li"),Lie=a("strong"),i1o=o("segformer"),d1o=o(" \u2014 "),HN=a("a"),c1o=o("SegformerFeatureExtractor"),f1o=o(" (SegFormer model)"),m1o=l(),ep=a("li"),yie=a("strong"),g1o=o("speech_to_text"),h1o=o(" \u2014 "),UN=a("a"),p1o=o("Speech2TextFeatureExtractor"),_1o=o(" (Speech2Text model)"),u1o=l(),op=a("li"),xie=a("strong"),b1o=o("swin"),v1o=o(" \u2014 "),JN=a("a"),F1o=o("ViTFeatureExtractor"),T1o=o(" (Swin Transformer model)"),M1o=l(),rp=a("li"),$ie=a("strong"),E1o=o("van"),C1o=o(" \u2014 "),YN=a("a"),w1o=o("ConvNextFeatureExtractor"),A1o=o(" (VAN model)"),L1o=l(),tp=a("li"),kie=a("strong"),y1o=o("vilt"),x1o=o(" \u2014 "),KN=a("a"),$1o=o("ViltFeatureExtractor"),k1o=o(" (ViLT model)"),S1o=l(),ap=a("li"),Sie=a("strong"),R1o=o("vit"),P1o=o(" \u2014 "),ZN=a("a"),B1o=o("ViTFeatureExtractor"),I1o=o(" (ViT model)"),N1o=l(),np=a("li"),Rie=a("strong"),q1o=o("vit_mae"),j1o=o(" \u2014 "),eq=a("a"),D1o=o("ViTFeatureExtractor"),G1o=o(" (ViTMAE model)"),O1o=l(),sp=a("li"),Pie=a("strong"),V1o=o("wav2vec2"),X1o=o(" \u2014 "),oq=a("a"),z1o=o("Wav2Vec2FeatureExtractor"),Q1o=o(" (Wav2Vec2 model)"),W1o=l(),lp=a("li"),Bie=a("strong"),H1o=o("wav2vec2-conformer"),U1o=o(" \u2014 "),rq=a("a"),J1o=o("Wav2Vec2FeatureExtractor"),Y1o=o(" (Wav2Vec2-Conformer model)"),K1o=l(),ip=a("li"),Iie=a("strong"),Z1o=o("yolos"),e7o=o(" \u2014 "),tq=a("a"),o7o=o("YolosFeatureExtractor"),r7o=o(" (YOLOS model)"),t7o=l(),F(dp.$$.fragment),a7o=l(),F(cp.$$.fragment),n7o=l(),fp=a("div"),F(ny.$$.fragment),s7o=l(),Nie=a("p"),l7o=o("Register a new feature extractor for this class."),OOe=l(),Bi=a("h2"),mp=a("a"),qie=a("span"),F(sy.$$.fragment),i7o=l(),jie=a("span"),d7o=o("AutoProcessor"),VOe=l(),yo=a("div"),F(ly.$$.fragment),c7o=l(),iy=a("p"),f7o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aq=a("a"),m7o=o("AutoProcessor.from_pretrained()"),g7o=o(" class method."),h7o=l(),dy=a("p"),p7o=o("This class cannot be instantiated directly using "),Die=a("code"),_7o=o("__init__()"),u7o=o(" (throws an error)."),b7o=l(),Ue=a("div"),F(cy.$$.fragment),v7o=l(),Gie=a("p"),F7o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),T7o=l(),Ii=a("p"),M7o=o("The processor class to instantiate is selected based on the "),Oie=a("code"),E7o=o("model_type"),C7o=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),w7o=o("pretrained_model_name_or_path"),A7o=o(" if possible):"),L7o=l(),he=a("ul"),gp=a("li"),Xie=a("strong"),y7o=o("clip"),x7o=o(" \u2014 "),nq=a("a"),$7o=o("CLIPProcessor"),k7o=o(" (CLIP model)"),S7o=l(),hp=a("li"),zie=a("strong"),R7o=o("flava"),P7o=o(" \u2014 "),Qie=a("code"),B7o=o("FLAVAProcessor"),I7o=o(" (FLAVA model)"),N7o=l(),pp=a("li"),Wie=a("strong"),q7o=o("groupvit"),j7o=o(" \u2014 "),sq=a("a"),D7o=o("CLIPProcessor"),G7o=o(" (GroupViT model)"),O7o=l(),_p=a("li"),Hie=a("strong"),V7o=o("layoutlmv2"),X7o=o(" \u2014 "),lq=a("a"),z7o=o("LayoutLMv2Processor"),Q7o=o(" (LayoutLMv2 model)"),W7o=l(),up=a("li"),Uie=a("strong"),H7o=o("layoutlmv3"),U7o=o(" \u2014 "),iq=a("a"),J7o=o("LayoutLMv3Processor"),Y7o=o(" (LayoutLMv3 model)"),K7o=l(),bp=a("li"),Jie=a("strong"),Z7o=o("layoutxlm"),e2o=o(" \u2014 "),dq=a("a"),o2o=o("LayoutXLMProcessor"),r2o=o(" (LayoutXLM model)"),t2o=l(),vp=a("li"),Yie=a("strong"),a2o=o("sew"),n2o=o(" \u2014 "),cq=a("a"),s2o=o("Wav2Vec2Processor"),l2o=o(" (SEW model)"),i2o=l(),Fp=a("li"),Kie=a("strong"),d2o=o("sew-d"),c2o=o(" \u2014 "),fq=a("a"),f2o=o("Wav2Vec2Processor"),m2o=o(" (SEW-D model)"),g2o=l(),Tp=a("li"),Zie=a("strong"),h2o=o("speech_to_text"),p2o=o(" \u2014 "),mq=a("a"),_2o=o("Speech2TextProcessor"),u2o=o(" (Speech2Text model)"),b2o=l(),Mp=a("li"),ede=a("strong"),v2o=o("speech_to_text_2"),F2o=o(" \u2014 "),gq=a("a"),T2o=o("Speech2Text2Processor"),M2o=o(" (Speech2Text2 model)"),E2o=l(),Ep=a("li"),ode=a("strong"),C2o=o("trocr"),w2o=o(" \u2014 "),hq=a("a"),A2o=o("TrOCRProcessor"),L2o=o(" (TrOCR model)"),y2o=l(),Cp=a("li"),rde=a("strong"),x2o=o("unispeech"),$2o=o(" \u2014 "),pq=a("a"),k2o=o("Wav2Vec2Processor"),S2o=o(" (UniSpeech model)"),R2o=l(),wp=a("li"),tde=a("strong"),P2o=o("unispeech-sat"),B2o=o(" \u2014 "),_q=a("a"),I2o=o("Wav2Vec2Processor"),N2o=o(" (UniSpeechSat model)"),q2o=l(),Ap=a("li"),ade=a("strong"),j2o=o("vilt"),D2o=o(" \u2014 "),uq=a("a"),G2o=o("ViltProcessor"),O2o=o(" (ViLT model)"),V2o=l(),Lp=a("li"),nde=a("strong"),X2o=o("vision-text-dual-encoder"),z2o=o(" \u2014 "),bq=a("a"),Q2o=o("VisionTextDualEncoderProcessor"),W2o=o(" (VisionTextDualEncoder model)"),H2o=l(),yp=a("li"),sde=a("strong"),U2o=o("wav2vec2"),J2o=o(" \u2014 "),vq=a("a"),Y2o=o("Wav2Vec2Processor"),K2o=o(" (Wav2Vec2 model)"),Z2o=l(),xp=a("li"),lde=a("strong"),ebo=o("wav2vec2-conformer"),obo=o(" \u2014 "),Fq=a("a"),rbo=o("Wav2Vec2Processor"),tbo=o(" (Wav2Vec2-Conformer model)"),abo=l(),$p=a("li"),ide=a("strong"),nbo=o("wavlm"),sbo=o(" \u2014 "),Tq=a("a"),lbo=o("Wav2Vec2Processor"),ibo=o(" (WavLM model)"),dbo=l(),F(kp.$$.fragment),cbo=l(),F(Sp.$$.fragment),fbo=l(),Rp=a("div"),F(fy.$$.fragment),mbo=l(),dde=a("p"),gbo=o("Register a new processor for this class."),XOe=l(),Ni=a("h2"),Pp=a("a"),cde=a("span"),F(my.$$.fragment),hbo=l(),fde=a("span"),pbo=o("AutoModel"),zOe=l(),xo=a("div"),F(gy.$$.fragment),_bo=l(),qi=a("p"),ubo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=a("a"),bbo=o("from_pretrained()"),vbo=o(" class method or the "),Eq=a("a"),Fbo=o("from_config()"),Tbo=o(` class
method.`),Mbo=l(),hy=a("p"),Ebo=o("This class cannot be instantiated directly using "),mde=a("code"),Cbo=o("__init__()"),wbo=o(" (throws an error)."),Abo=l(),nt=a("div"),F(py.$$.fragment),Lbo=l(),gde=a("p"),ybo=o("Instantiates one of the base model classes of the library from a configuration."),xbo=l(),ji=a("p"),$bo=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),kbo=o("not"),Sbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=a("a"),Rbo=o("from_pretrained()"),Pbo=o(" to load the model weights."),Bbo=l(),F(Bp.$$.fragment),Ibo=l(),Je=a("div"),F(_y.$$.fragment),Nbo=l(),pde=a("p"),qbo=o("Instantiate one of the base model classes of the library from a pretrained model."),jbo=l(),Pa=a("p"),Dbo=o("The model class to instantiate is selected based on the "),_de=a("code"),Gbo=o("model_type"),Obo=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),Vbo=o("pretrained_model_name_or_path"),Xbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=a("code"),zbo=o("pretrained_model_name_or_path"),Qbo=o(":"),Wbo=l(),y=a("ul"),Ip=a("li"),vde=a("strong"),Hbo=o("albert"),Ubo=o(" \u2014 "),wq=a("a"),Jbo=o("AlbertModel"),Ybo=o(" (ALBERT model)"),Kbo=l(),Np=a("li"),Fde=a("strong"),Zbo=o("bart"),evo=o(" \u2014 "),Aq=a("a"),ovo=o("BartModel"),rvo=o(" (BART model)"),tvo=l(),qp=a("li"),Tde=a("strong"),avo=o("beit"),nvo=o(" \u2014 "),Lq=a("a"),svo=o("BeitModel"),lvo=o(" (BEiT model)"),ivo=l(),jp=a("li"),Mde=a("strong"),dvo=o("bert"),cvo=o(" \u2014 "),yq=a("a"),fvo=o("BertModel"),mvo=o(" (BERT model)"),gvo=l(),Dp=a("li"),Ede=a("strong"),hvo=o("bert-generation"),pvo=o(" \u2014 "),xq=a("a"),_vo=o("BertGenerationEncoder"),uvo=o(" (Bert Generation model)"),bvo=l(),Gp=a("li"),Cde=a("strong"),vvo=o("big_bird"),Fvo=o(" \u2014 "),$q=a("a"),Tvo=o("BigBirdModel"),Mvo=o(" (BigBird model)"),Evo=l(),Op=a("li"),wde=a("strong"),Cvo=o("bigbird_pegasus"),wvo=o(" \u2014 "),kq=a("a"),Avo=o("BigBirdPegasusModel"),Lvo=o(" (BigBird-Pegasus model)"),yvo=l(),Vp=a("li"),Ade=a("strong"),xvo=o("blenderbot"),$vo=o(" \u2014 "),Sq=a("a"),kvo=o("BlenderbotModel"),Svo=o(" (Blenderbot model)"),Rvo=l(),Xp=a("li"),Lde=a("strong"),Pvo=o("blenderbot-small"),Bvo=o(" \u2014 "),Rq=a("a"),Ivo=o("BlenderbotSmallModel"),Nvo=o(" (BlenderbotSmall model)"),qvo=l(),zp=a("li"),yde=a("strong"),jvo=o("bloom"),Dvo=o(" \u2014 "),Pq=a("a"),Gvo=o("BloomModel"),Ovo=o(" (BLOOM model)"),Vvo=l(),Qp=a("li"),xde=a("strong"),Xvo=o("camembert"),zvo=o(" \u2014 "),Bq=a("a"),Qvo=o("CamembertModel"),Wvo=o(" (CamemBERT model)"),Hvo=l(),Wp=a("li"),$de=a("strong"),Uvo=o("canine"),Jvo=o(" \u2014 "),Iq=a("a"),Yvo=o("CanineModel"),Kvo=o(" (CANINE model)"),Zvo=l(),Hp=a("li"),kde=a("strong"),eFo=o("clip"),oFo=o(" \u2014 "),Nq=a("a"),rFo=o("CLIPModel"),tFo=o(" (CLIP model)"),aFo=l(),Up=a("li"),Sde=a("strong"),nFo=o("codegen"),sFo=o(" \u2014 "),qq=a("a"),lFo=o("CodeGenModel"),iFo=o(" (CodeGen model)"),dFo=l(),Jp=a("li"),Rde=a("strong"),cFo=o("convbert"),fFo=o(" \u2014 "),jq=a("a"),mFo=o("ConvBertModel"),gFo=o(" (ConvBERT model)"),hFo=l(),Yp=a("li"),Pde=a("strong"),pFo=o("convnext"),_Fo=o(" \u2014 "),Dq=a("a"),uFo=o("ConvNextModel"),bFo=o(" (ConvNeXT model)"),vFo=l(),Kp=a("li"),Bde=a("strong"),FFo=o("ctrl"),TFo=o(" \u2014 "),Gq=a("a"),MFo=o("CTRLModel"),EFo=o(" (CTRL model)"),CFo=l(),Zp=a("li"),Ide=a("strong"),wFo=o("cvt"),AFo=o(" \u2014 "),Oq=a("a"),LFo=o("CvtModel"),yFo=o(" (CvT model)"),xFo=l(),e_=a("li"),Nde=a("strong"),$Fo=o("data2vec-audio"),kFo=o(" \u2014 "),Vq=a("a"),SFo=o("Data2VecAudioModel"),RFo=o(" (Data2VecAudio model)"),PFo=l(),o_=a("li"),qde=a("strong"),BFo=o("data2vec-text"),IFo=o(" \u2014 "),Xq=a("a"),NFo=o("Data2VecTextModel"),qFo=o(" (Data2VecText model)"),jFo=l(),r_=a("li"),jde=a("strong"),DFo=o("data2vec-vision"),GFo=o(" \u2014 "),zq=a("a"),OFo=o("Data2VecVisionModel"),VFo=o(" (Data2VecVision model)"),XFo=l(),t_=a("li"),Dde=a("strong"),zFo=o("deberta"),QFo=o(" \u2014 "),Qq=a("a"),WFo=o("DebertaModel"),HFo=o(" (DeBERTa model)"),UFo=l(),a_=a("li"),Gde=a("strong"),JFo=o("deberta-v2"),YFo=o(" \u2014 "),Wq=a("a"),KFo=o("DebertaV2Model"),ZFo=o(" (DeBERTa-v2 model)"),e6o=l(),n_=a("li"),Ode=a("strong"),o6o=o("decision_transformer"),r6o=o(" \u2014 "),Hq=a("a"),t6o=o("DecisionTransformerModel"),a6o=o(" (Decision Transformer model)"),n6o=l(),s_=a("li"),Vde=a("strong"),s6o=o("deit"),l6o=o(" \u2014 "),Uq=a("a"),i6o=o("DeiTModel"),d6o=o(" (DeiT model)"),c6o=l(),l_=a("li"),Xde=a("strong"),f6o=o("detr"),m6o=o(" \u2014 "),Jq=a("a"),g6o=o("DetrModel"),h6o=o(" (DETR model)"),p6o=l(),i_=a("li"),zde=a("strong"),_6o=o("distilbert"),u6o=o(" \u2014 "),Yq=a("a"),b6o=o("DistilBertModel"),v6o=o(" (DistilBERT model)"),F6o=l(),d_=a("li"),Qde=a("strong"),T6o=o("dpr"),M6o=o(" \u2014 "),Kq=a("a"),E6o=o("DPRQuestionEncoder"),C6o=o(" (DPR model)"),w6o=l(),c_=a("li"),Wde=a("strong"),A6o=o("dpt"),L6o=o(" \u2014 "),Zq=a("a"),y6o=o("DPTModel"),x6o=o(" (DPT model)"),$6o=l(),f_=a("li"),Hde=a("strong"),k6o=o("electra"),S6o=o(" \u2014 "),ej=a("a"),R6o=o("ElectraModel"),P6o=o(" (ELECTRA model)"),B6o=l(),m_=a("li"),Ude=a("strong"),I6o=o("flaubert"),N6o=o(" \u2014 "),oj=a("a"),q6o=o("FlaubertModel"),j6o=o(" (FlauBERT model)"),D6o=l(),g_=a("li"),Jde=a("strong"),G6o=o("flava"),O6o=o(" \u2014 "),rj=a("a"),V6o=o("FlavaModel"),X6o=o(" (FLAVA model)"),z6o=l(),h_=a("li"),Yde=a("strong"),Q6o=o("fnet"),W6o=o(" \u2014 "),tj=a("a"),H6o=o("FNetModel"),U6o=o(" (FNet model)"),J6o=l(),p_=a("li"),Kde=a("strong"),Y6o=o("fsmt"),K6o=o(" \u2014 "),aj=a("a"),Z6o=o("FSMTModel"),eTo=o(" (FairSeq Machine-Translation model)"),oTo=l(),Qs=a("li"),Zde=a("strong"),rTo=o("funnel"),tTo=o(" \u2014 "),nj=a("a"),aTo=o("FunnelModel"),nTo=o(" or "),sj=a("a"),sTo=o("FunnelBaseModel"),lTo=o(" (Funnel Transformer model)"),iTo=l(),__=a("li"),ece=a("strong"),dTo=o("glpn"),cTo=o(" \u2014 "),lj=a("a"),fTo=o("GLPNModel"),mTo=o(" (GLPN model)"),gTo=l(),u_=a("li"),oce=a("strong"),hTo=o("gpt2"),pTo=o(" \u2014 "),ij=a("a"),_To=o("GPT2Model"),uTo=o(" (OpenAI GPT-2 model)"),bTo=l(),b_=a("li"),rce=a("strong"),vTo=o("gpt_neo"),FTo=o(" \u2014 "),dj=a("a"),TTo=o("GPTNeoModel"),MTo=o(" (GPT Neo model)"),ETo=l(),v_=a("li"),tce=a("strong"),CTo=o("gpt_neox"),wTo=o(" \u2014 "),cj=a("a"),ATo=o("GPTNeoXModel"),LTo=o(" (GPT NeoX model)"),yTo=l(),F_=a("li"),ace=a("strong"),xTo=o("gptj"),$To=o(" \u2014 "),fj=a("a"),kTo=o("GPTJModel"),STo=o(" (GPT-J model)"),RTo=l(),T_=a("li"),nce=a("strong"),PTo=o("groupvit"),BTo=o(" \u2014 "),mj=a("a"),ITo=o("GroupViTModel"),NTo=o(" (GroupViT model)"),qTo=l(),M_=a("li"),sce=a("strong"),jTo=o("hubert"),DTo=o(" \u2014 "),gj=a("a"),GTo=o("HubertModel"),OTo=o(" (Hubert model)"),VTo=l(),E_=a("li"),lce=a("strong"),XTo=o("ibert"),zTo=o(" \u2014 "),hj=a("a"),QTo=o("IBertModel"),WTo=o(" (I-BERT model)"),HTo=l(),C_=a("li"),ice=a("strong"),UTo=o("imagegpt"),JTo=o(" \u2014 "),pj=a("a"),YTo=o("ImageGPTModel"),KTo=o(" (ImageGPT model)"),ZTo=l(),w_=a("li"),dce=a("strong"),eMo=o("layoutlm"),oMo=o(" \u2014 "),_j=a("a"),rMo=o("LayoutLMModel"),tMo=o(" (LayoutLM model)"),aMo=l(),A_=a("li"),cce=a("strong"),nMo=o("layoutlmv2"),sMo=o(" \u2014 "),uj=a("a"),lMo=o("LayoutLMv2Model"),iMo=o(" (LayoutLMv2 model)"),dMo=l(),L_=a("li"),fce=a("strong"),cMo=o("layoutlmv3"),fMo=o(" \u2014 "),bj=a("a"),mMo=o("LayoutLMv3Model"),gMo=o(" (LayoutLMv3 model)"),hMo=l(),y_=a("li"),mce=a("strong"),pMo=o("led"),_Mo=o(" \u2014 "),vj=a("a"),uMo=o("LEDModel"),bMo=o(" (LED model)"),vMo=l(),x_=a("li"),gce=a("strong"),FMo=o("levit"),TMo=o(" \u2014 "),Fj=a("a"),MMo=o("LevitModel"),EMo=o(" (LeViT model)"),CMo=l(),$_=a("li"),hce=a("strong"),wMo=o("longformer"),AMo=o(" \u2014 "),Tj=a("a"),LMo=o("LongformerModel"),yMo=o(" (Longformer model)"),xMo=l(),k_=a("li"),pce=a("strong"),$Mo=o("longt5"),kMo=o(" \u2014 "),Mj=a("a"),SMo=o("LongT5Model"),RMo=o(" (LongT5 model)"),PMo=l(),S_=a("li"),_ce=a("strong"),BMo=o("luke"),IMo=o(" \u2014 "),Ej=a("a"),NMo=o("LukeModel"),qMo=o(" (LUKE model)"),jMo=l(),R_=a("li"),uce=a("strong"),DMo=o("lxmert"),GMo=o(" \u2014 "),Cj=a("a"),OMo=o("LxmertModel"),VMo=o(" (LXMERT model)"),XMo=l(),P_=a("li"),bce=a("strong"),zMo=o("m2m_100"),QMo=o(" \u2014 "),wj=a("a"),WMo=o("M2M100Model"),HMo=o(" (M2M100 model)"),UMo=l(),B_=a("li"),vce=a("strong"),JMo=o("marian"),YMo=o(" \u2014 "),Aj=a("a"),KMo=o("MarianModel"),ZMo=o(" (Marian model)"),e4o=l(),I_=a("li"),Fce=a("strong"),o4o=o("maskformer"),r4o=o(" \u2014 "),Lj=a("a"),t4o=o("MaskFormerModel"),a4o=o(" (MaskFormer model)"),n4o=l(),N_=a("li"),Tce=a("strong"),s4o=o("mbart"),l4o=o(" \u2014 "),yj=a("a"),i4o=o("MBartModel"),d4o=o(" (mBART model)"),c4o=l(),q_=a("li"),Mce=a("strong"),f4o=o("mctct"),m4o=o(" \u2014 "),xj=a("a"),g4o=o("MCTCTModel"),h4o=o(" (M-CTC-T model)"),p4o=l(),j_=a("li"),Ece=a("strong"),_4o=o("megatron-bert"),u4o=o(" \u2014 "),$j=a("a"),b4o=o("MegatronBertModel"),v4o=o(" (Megatron-BERT model)"),F4o=l(),D_=a("li"),Cce=a("strong"),T4o=o("mobilebert"),M4o=o(" \u2014 "),kj=a("a"),E4o=o("MobileBertModel"),C4o=o(" (MobileBERT model)"),w4o=l(),G_=a("li"),wce=a("strong"),A4o=o("mpnet"),L4o=o(" \u2014 "),Sj=a("a"),y4o=o("MPNetModel"),x4o=o(" (MPNet model)"),$4o=l(),O_=a("li"),Ace=a("strong"),k4o=o("mt5"),S4o=o(" \u2014 "),Rj=a("a"),R4o=o("MT5Model"),P4o=o(" (MT5 model)"),B4o=l(),V_=a("li"),Lce=a("strong"),I4o=o("nezha"),N4o=o(" \u2014 "),Pj=a("a"),q4o=o("NezhaModel"),j4o=o(" (Nezha model)"),D4o=l(),X_=a("li"),yce=a("strong"),G4o=o("nystromformer"),O4o=o(" \u2014 "),Bj=a("a"),V4o=o("NystromformerModel"),X4o=o(" (Nystr\xF6mformer model)"),z4o=l(),z_=a("li"),xce=a("strong"),Q4o=o("openai-gpt"),W4o=o(" \u2014 "),Ij=a("a"),H4o=o("OpenAIGPTModel"),U4o=o(" (OpenAI GPT model)"),J4o=l(),Q_=a("li"),$ce=a("strong"),Y4o=o("opt"),K4o=o(" \u2014 "),Nj=a("a"),Z4o=o("OPTModel"),eEo=o(" (OPT model)"),oEo=l(),W_=a("li"),kce=a("strong"),rEo=o("pegasus"),tEo=o(" \u2014 "),qj=a("a"),aEo=o("PegasusModel"),nEo=o(" (Pegasus model)"),sEo=l(),H_=a("li"),Sce=a("strong"),lEo=o("perceiver"),iEo=o(" \u2014 "),jj=a("a"),dEo=o("PerceiverModel"),cEo=o(" (Perceiver model)"),fEo=l(),U_=a("li"),Rce=a("strong"),mEo=o("plbart"),gEo=o(" \u2014 "),Dj=a("a"),hEo=o("PLBartModel"),pEo=o(" (PLBart model)"),_Eo=l(),J_=a("li"),Pce=a("strong"),uEo=o("poolformer"),bEo=o(" \u2014 "),Gj=a("a"),vEo=o("PoolFormerModel"),FEo=o(" (PoolFormer model)"),TEo=l(),Y_=a("li"),Bce=a("strong"),MEo=o("prophetnet"),EEo=o(" \u2014 "),Oj=a("a"),CEo=o("ProphetNetModel"),wEo=o(" (ProphetNet model)"),AEo=l(),K_=a("li"),Ice=a("strong"),LEo=o("qdqbert"),yEo=o(" \u2014 "),Vj=a("a"),xEo=o("QDQBertModel"),$Eo=o(" (QDQBert model)"),kEo=l(),Z_=a("li"),Nce=a("strong"),SEo=o("reformer"),REo=o(" \u2014 "),Xj=a("a"),PEo=o("ReformerModel"),BEo=o(" (Reformer model)"),IEo=l(),eu=a("li"),qce=a("strong"),NEo=o("regnet"),qEo=o(" \u2014 "),zj=a("a"),jEo=o("RegNetModel"),DEo=o(" (RegNet model)"),GEo=l(),ou=a("li"),jce=a("strong"),OEo=o("rembert"),VEo=o(" \u2014 "),Qj=a("a"),XEo=o("RemBertModel"),zEo=o(" (RemBERT model)"),QEo=l(),ru=a("li"),Dce=a("strong"),WEo=o("resnet"),HEo=o(" \u2014 "),Wj=a("a"),UEo=o("ResNetModel"),JEo=o(" (ResNet model)"),YEo=l(),tu=a("li"),Gce=a("strong"),KEo=o("retribert"),ZEo=o(" \u2014 "),Hj=a("a"),eCo=o("RetriBertModel"),oCo=o(" (RetriBERT model)"),rCo=l(),au=a("li"),Oce=a("strong"),tCo=o("roberta"),aCo=o(" \u2014 "),Uj=a("a"),nCo=o("RobertaModel"),sCo=o(" (RoBERTa model)"),lCo=l(),nu=a("li"),Vce=a("strong"),iCo=o("roformer"),dCo=o(" \u2014 "),Jj=a("a"),cCo=o("RoFormerModel"),fCo=o(" (RoFormer model)"),mCo=l(),su=a("li"),Xce=a("strong"),gCo=o("segformer"),hCo=o(" \u2014 "),Yj=a("a"),pCo=o("SegformerModel"),_Co=o(" (SegFormer model)"),uCo=l(),lu=a("li"),zce=a("strong"),bCo=o("sew"),vCo=o(" \u2014 "),Kj=a("a"),FCo=o("SEWModel"),TCo=o(" (SEW model)"),MCo=l(),iu=a("li"),Qce=a("strong"),ECo=o("sew-d"),CCo=o(" \u2014 "),Zj=a("a"),wCo=o("SEWDModel"),ACo=o(" (SEW-D model)"),LCo=l(),du=a("li"),Wce=a("strong"),yCo=o("speech_to_text"),xCo=o(" \u2014 "),eD=a("a"),$Co=o("Speech2TextModel"),kCo=o(" (Speech2Text model)"),SCo=l(),cu=a("li"),Hce=a("strong"),RCo=o("splinter"),PCo=o(" \u2014 "),oD=a("a"),BCo=o("SplinterModel"),ICo=o(" (Splinter model)"),NCo=l(),fu=a("li"),Uce=a("strong"),qCo=o("squeezebert"),jCo=o(" \u2014 "),rD=a("a"),DCo=o("SqueezeBertModel"),GCo=o(" (SqueezeBERT model)"),OCo=l(),mu=a("li"),Jce=a("strong"),VCo=o("swin"),XCo=o(" \u2014 "),tD=a("a"),zCo=o("SwinModel"),QCo=o(" (Swin Transformer model)"),WCo=l(),gu=a("li"),Yce=a("strong"),HCo=o("t5"),UCo=o(" \u2014 "),aD=a("a"),JCo=o("T5Model"),YCo=o(" (T5 model)"),KCo=l(),hu=a("li"),Kce=a("strong"),ZCo=o("tapas"),e5o=o(" \u2014 "),nD=a("a"),o5o=o("TapasModel"),r5o=o(" (TAPAS model)"),t5o=l(),pu=a("li"),Zce=a("strong"),a5o=o("trajectory_transformer"),n5o=o(" \u2014 "),sD=a("a"),s5o=o("TrajectoryTransformerModel"),l5o=o(" (Trajectory Transformer model)"),i5o=l(),_u=a("li"),efe=a("strong"),d5o=o("transfo-xl"),c5o=o(" \u2014 "),lD=a("a"),f5o=o("TransfoXLModel"),m5o=o(" (Transformer-XL model)"),g5o=l(),uu=a("li"),ofe=a("strong"),h5o=o("unispeech"),p5o=o(" \u2014 "),iD=a("a"),_5o=o("UniSpeechModel"),u5o=o(" (UniSpeech model)"),b5o=l(),bu=a("li"),rfe=a("strong"),v5o=o("unispeech-sat"),F5o=o(" \u2014 "),dD=a("a"),T5o=o("UniSpeechSatModel"),M5o=o(" (UniSpeechSat model)"),E5o=l(),vu=a("li"),tfe=a("strong"),C5o=o("van"),w5o=o(" \u2014 "),cD=a("a"),A5o=o("VanModel"),L5o=o(" (VAN model)"),y5o=l(),Fu=a("li"),afe=a("strong"),x5o=o("vilt"),$5o=o(" \u2014 "),fD=a("a"),k5o=o("ViltModel"),S5o=o(" (ViLT model)"),R5o=l(),Tu=a("li"),nfe=a("strong"),P5o=o("vision-text-dual-encoder"),B5o=o(" \u2014 "),mD=a("a"),I5o=o("VisionTextDualEncoderModel"),N5o=o(" (VisionTextDualEncoder model)"),q5o=l(),Mu=a("li"),sfe=a("strong"),j5o=o("visual_bert"),D5o=o(" \u2014 "),gD=a("a"),G5o=o("VisualBertModel"),O5o=o(" (VisualBERT model)"),V5o=l(),Eu=a("li"),lfe=a("strong"),X5o=o("vit"),z5o=o(" \u2014 "),hD=a("a"),Q5o=o("ViTModel"),W5o=o(" (ViT model)"),H5o=l(),Cu=a("li"),ife=a("strong"),U5o=o("vit_mae"),J5o=o(" \u2014 "),pD=a("a"),Y5o=o("ViTMAEModel"),K5o=o(" (ViTMAE model)"),Z5o=l(),wu=a("li"),dfe=a("strong"),e3o=o("wav2vec2"),o3o=o(" \u2014 "),_D=a("a"),r3o=o("Wav2Vec2Model"),t3o=o(" (Wav2Vec2 model)"),a3o=l(),Au=a("li"),cfe=a("strong"),n3o=o("wav2vec2-conformer"),s3o=o(" \u2014 "),uD=a("a"),l3o=o("Wav2Vec2ConformerModel"),i3o=o(" (Wav2Vec2-Conformer model)"),d3o=l(),Lu=a("li"),ffe=a("strong"),c3o=o("wavlm"),f3o=o(" \u2014 "),bD=a("a"),m3o=o("WavLMModel"),g3o=o(" (WavLM model)"),h3o=l(),yu=a("li"),mfe=a("strong"),p3o=o("xglm"),_3o=o(" \u2014 "),vD=a("a"),u3o=o("XGLMModel"),b3o=o(" (XGLM model)"),v3o=l(),xu=a("li"),gfe=a("strong"),F3o=o("xlm"),T3o=o(" \u2014 "),FD=a("a"),M3o=o("XLMModel"),E3o=o(" (XLM model)"),C3o=l(),$u=a("li"),hfe=a("strong"),w3o=o("xlm-prophetnet"),A3o=o(" \u2014 "),TD=a("a"),L3o=o("XLMProphetNetModel"),y3o=o(" (XLM-ProphetNet model)"),x3o=l(),ku=a("li"),pfe=a("strong"),$3o=o("xlm-roberta"),k3o=o(" \u2014 "),MD=a("a"),S3o=o("XLMRobertaModel"),R3o=o(" (XLM-RoBERTa model)"),P3o=l(),Su=a("li"),_fe=a("strong"),B3o=o("xlm-roberta-xl"),I3o=o(" \u2014 "),ED=a("a"),N3o=o("XLMRobertaXLModel"),q3o=o(" (XLM-RoBERTa-XL model)"),j3o=l(),Ru=a("li"),ufe=a("strong"),D3o=o("xlnet"),G3o=o(" \u2014 "),CD=a("a"),O3o=o("XLNetModel"),V3o=o(" (XLNet model)"),X3o=l(),Pu=a("li"),bfe=a("strong"),z3o=o("yolos"),Q3o=o(" \u2014 "),wD=a("a"),W3o=o("YolosModel"),H3o=o(" (YOLOS model)"),U3o=l(),Bu=a("li"),vfe=a("strong"),J3o=o("yoso"),Y3o=o(" \u2014 "),AD=a("a"),K3o=o("YosoModel"),Z3o=o(" (YOSO model)"),e0o=l(),Iu=a("p"),o0o=o("The model is set in evaluation mode by default using "),Ffe=a("code"),r0o=o("model.eval()"),t0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=a("code"),a0o=o("model.train()"),n0o=l(),F(Nu.$$.fragment),QOe=l(),Di=a("h2"),qu=a("a"),Mfe=a("span"),F(uy.$$.fragment),s0o=l(),Efe=a("span"),l0o=o("AutoModelForPreTraining"),WOe=l(),$o=a("div"),F(by.$$.fragment),i0o=l(),Gi=a("p"),d0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=a("a"),c0o=o("from_pretrained()"),f0o=o(" class method or the "),yD=a("a"),m0o=o("from_config()"),g0o=o(` class
method.`),h0o=l(),vy=a("p"),p0o=o("This class cannot be instantiated directly using "),Cfe=a("code"),_0o=o("__init__()"),u0o=o(" (throws an error)."),b0o=l(),st=a("div"),F(Fy.$$.fragment),v0o=l(),wfe=a("p"),F0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),T0o=l(),Oi=a("p"),M0o=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),E0o=o("not"),C0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=a("a"),w0o=o("from_pretrained()"),A0o=o(" to load the model weights."),L0o=l(),F(ju.$$.fragment),y0o=l(),Ye=a("div"),F(Ty.$$.fragment),x0o=l(),Lfe=a("p"),$0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),k0o=l(),Ba=a("p"),S0o=o("The model class to instantiate is selected based on the "),yfe=a("code"),R0o=o("model_type"),P0o=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),B0o=o("pretrained_model_name_or_path"),I0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=a("code"),N0o=o("pretrained_model_name_or_path"),q0o=o(":"),j0o=l(),G=a("ul"),Du=a("li"),kfe=a("strong"),D0o=o("albert"),G0o=o(" \u2014 "),$D=a("a"),O0o=o("AlbertForPreTraining"),V0o=o(" (ALBERT model)"),X0o=l(),Gu=a("li"),Sfe=a("strong"),z0o=o("bart"),Q0o=o(" \u2014 "),kD=a("a"),W0o=o("BartForConditionalGeneration"),H0o=o(" (BART model)"),U0o=l(),Ou=a("li"),Rfe=a("strong"),J0o=o("bert"),Y0o=o(" \u2014 "),SD=a("a"),K0o=o("BertForPreTraining"),Z0o=o(" (BERT model)"),ewo=l(),Vu=a("li"),Pfe=a("strong"),owo=o("big_bird"),rwo=o(" \u2014 "),RD=a("a"),two=o("BigBirdForPreTraining"),awo=o(" (BigBird model)"),nwo=l(),Xu=a("li"),Bfe=a("strong"),swo=o("bloom"),lwo=o(" \u2014 "),PD=a("a"),iwo=o("BloomForCausalLM"),dwo=o(" (BLOOM model)"),cwo=l(),zu=a("li"),Ife=a("strong"),fwo=o("camembert"),mwo=o(" \u2014 "),BD=a("a"),gwo=o("CamembertForMaskedLM"),hwo=o(" (CamemBERT model)"),pwo=l(),Qu=a("li"),Nfe=a("strong"),_wo=o("ctrl"),uwo=o(" \u2014 "),ID=a("a"),bwo=o("CTRLLMHeadModel"),vwo=o(" (CTRL model)"),Fwo=l(),Wu=a("li"),qfe=a("strong"),Two=o("data2vec-text"),Mwo=o(" \u2014 "),ND=a("a"),Ewo=o("Data2VecTextForMaskedLM"),Cwo=o(" (Data2VecText model)"),wwo=l(),Hu=a("li"),jfe=a("strong"),Awo=o("deberta"),Lwo=o(" \u2014 "),qD=a("a"),ywo=o("DebertaForMaskedLM"),xwo=o(" (DeBERTa model)"),$wo=l(),Uu=a("li"),Dfe=a("strong"),kwo=o("deberta-v2"),Swo=o(" \u2014 "),jD=a("a"),Rwo=o("DebertaV2ForMaskedLM"),Pwo=o(" (DeBERTa-v2 model)"),Bwo=l(),Ju=a("li"),Gfe=a("strong"),Iwo=o("distilbert"),Nwo=o(" \u2014 "),DD=a("a"),qwo=o("DistilBertForMaskedLM"),jwo=o(" (DistilBERT model)"),Dwo=l(),Yu=a("li"),Ofe=a("strong"),Gwo=o("electra"),Owo=o(" \u2014 "),GD=a("a"),Vwo=o("ElectraForPreTraining"),Xwo=o(" (ELECTRA model)"),zwo=l(),Ku=a("li"),Vfe=a("strong"),Qwo=o("flaubert"),Wwo=o(" \u2014 "),OD=a("a"),Hwo=o("FlaubertWithLMHeadModel"),Uwo=o(" (FlauBERT model)"),Jwo=l(),Zu=a("li"),Xfe=a("strong"),Ywo=o("flava"),Kwo=o(" \u2014 "),VD=a("a"),Zwo=o("FlavaForPreTraining"),eAo=o(" (FLAVA model)"),oAo=l(),e1=a("li"),zfe=a("strong"),rAo=o("fnet"),tAo=o(" \u2014 "),XD=a("a"),aAo=o("FNetForPreTraining"),nAo=o(" (FNet model)"),sAo=l(),o1=a("li"),Qfe=a("strong"),lAo=o("fsmt"),iAo=o(" \u2014 "),zD=a("a"),dAo=o("FSMTForConditionalGeneration"),cAo=o(" (FairSeq Machine-Translation model)"),fAo=l(),r1=a("li"),Wfe=a("strong"),mAo=o("funnel"),gAo=o(" \u2014 "),QD=a("a"),hAo=o("FunnelForPreTraining"),pAo=o(" (Funnel Transformer model)"),_Ao=l(),t1=a("li"),Hfe=a("strong"),uAo=o("gpt2"),bAo=o(" \u2014 "),WD=a("a"),vAo=o("GPT2LMHeadModel"),FAo=o(" (OpenAI GPT-2 model)"),TAo=l(),a1=a("li"),Ufe=a("strong"),MAo=o("ibert"),EAo=o(" \u2014 "),HD=a("a"),CAo=o("IBertForMaskedLM"),wAo=o(" (I-BERT model)"),AAo=l(),n1=a("li"),Jfe=a("strong"),LAo=o("layoutlm"),yAo=o(" \u2014 "),UD=a("a"),xAo=o("LayoutLMForMaskedLM"),$Ao=o(" (LayoutLM model)"),kAo=l(),s1=a("li"),Yfe=a("strong"),SAo=o("longformer"),RAo=o(" \u2014 "),JD=a("a"),PAo=o("LongformerForMaskedLM"),BAo=o(" (Longformer model)"),IAo=l(),l1=a("li"),Kfe=a("strong"),NAo=o("lxmert"),qAo=o(" \u2014 "),YD=a("a"),jAo=o("LxmertForPreTraining"),DAo=o(" (LXMERT model)"),GAo=l(),i1=a("li"),Zfe=a("strong"),OAo=o("megatron-bert"),VAo=o(" \u2014 "),KD=a("a"),XAo=o("MegatronBertForPreTraining"),zAo=o(" (Megatron-BERT model)"),QAo=l(),d1=a("li"),eme=a("strong"),WAo=o("mobilebert"),HAo=o(" \u2014 "),ZD=a("a"),UAo=o("MobileBertForPreTraining"),JAo=o(" (MobileBERT model)"),YAo=l(),c1=a("li"),ome=a("strong"),KAo=o("mpnet"),ZAo=o(" \u2014 "),eG=a("a"),eLo=o("MPNetForMaskedLM"),oLo=o(" (MPNet model)"),rLo=l(),f1=a("li"),rme=a("strong"),tLo=o("nezha"),aLo=o(" \u2014 "),oG=a("a"),nLo=o("NezhaForPreTraining"),sLo=o(" (Nezha model)"),lLo=l(),m1=a("li"),tme=a("strong"),iLo=o("openai-gpt"),dLo=o(" \u2014 "),rG=a("a"),cLo=o("OpenAIGPTLMHeadModel"),fLo=o(" (OpenAI GPT model)"),mLo=l(),g1=a("li"),ame=a("strong"),gLo=o("retribert"),hLo=o(" \u2014 "),tG=a("a"),pLo=o("RetriBertModel"),_Lo=o(" (RetriBERT model)"),uLo=l(),h1=a("li"),nme=a("strong"),bLo=o("roberta"),vLo=o(" \u2014 "),aG=a("a"),FLo=o("RobertaForMaskedLM"),TLo=o(" (RoBERTa model)"),MLo=l(),p1=a("li"),sme=a("strong"),ELo=o("splinter"),CLo=o(" \u2014 "),nG=a("a"),wLo=o("SplinterForPreTraining"),ALo=o(" (Splinter model)"),LLo=l(),_1=a("li"),lme=a("strong"),yLo=o("squeezebert"),xLo=o(" \u2014 "),sG=a("a"),$Lo=o("SqueezeBertForMaskedLM"),kLo=o(" (SqueezeBERT model)"),SLo=l(),u1=a("li"),ime=a("strong"),RLo=o("t5"),PLo=o(" \u2014 "),lG=a("a"),BLo=o("T5ForConditionalGeneration"),ILo=o(" (T5 model)"),NLo=l(),b1=a("li"),dme=a("strong"),qLo=o("tapas"),jLo=o(" \u2014 "),iG=a("a"),DLo=o("TapasForMaskedLM"),GLo=o(" (TAPAS model)"),OLo=l(),v1=a("li"),cme=a("strong"),VLo=o("transfo-xl"),XLo=o(" \u2014 "),dG=a("a"),zLo=o("TransfoXLLMHeadModel"),QLo=o(" (Transformer-XL model)"),WLo=l(),F1=a("li"),fme=a("strong"),HLo=o("unispeech"),ULo=o(" \u2014 "),cG=a("a"),JLo=o("UniSpeechForPreTraining"),YLo=o(" (UniSpeech model)"),KLo=l(),T1=a("li"),mme=a("strong"),ZLo=o("unispeech-sat"),eyo=o(" \u2014 "),fG=a("a"),oyo=o("UniSpeechSatForPreTraining"),ryo=o(" (UniSpeechSat model)"),tyo=l(),M1=a("li"),gme=a("strong"),ayo=o("visual_bert"),nyo=o(" \u2014 "),mG=a("a"),syo=o("VisualBertForPreTraining"),lyo=o(" (VisualBERT model)"),iyo=l(),E1=a("li"),hme=a("strong"),dyo=o("vit_mae"),cyo=o(" \u2014 "),gG=a("a"),fyo=o("ViTMAEForPreTraining"),myo=o(" (ViTMAE model)"),gyo=l(),C1=a("li"),pme=a("strong"),hyo=o("wav2vec2"),pyo=o(" \u2014 "),hG=a("a"),_yo=o("Wav2Vec2ForPreTraining"),uyo=o(" (Wav2Vec2 model)"),byo=l(),w1=a("li"),_me=a("strong"),vyo=o("wav2vec2-conformer"),Fyo=o(" \u2014 "),pG=a("a"),Tyo=o("Wav2Vec2ConformerForPreTraining"),Myo=o(" (Wav2Vec2-Conformer model)"),Eyo=l(),A1=a("li"),ume=a("strong"),Cyo=o("xlm"),wyo=o(" \u2014 "),_G=a("a"),Ayo=o("XLMWithLMHeadModel"),Lyo=o(" (XLM model)"),yyo=l(),L1=a("li"),bme=a("strong"),xyo=o("xlm-roberta"),$yo=o(" \u2014 "),uG=a("a"),kyo=o("XLMRobertaForMaskedLM"),Syo=o(" (XLM-RoBERTa model)"),Ryo=l(),y1=a("li"),vme=a("strong"),Pyo=o("xlm-roberta-xl"),Byo=o(" \u2014 "),bG=a("a"),Iyo=o("XLMRobertaXLForMaskedLM"),Nyo=o(" (XLM-RoBERTa-XL model)"),qyo=l(),x1=a("li"),Fme=a("strong"),jyo=o("xlnet"),Dyo=o(" \u2014 "),vG=a("a"),Gyo=o("XLNetLMHeadModel"),Oyo=o(" (XLNet model)"),Vyo=l(),$1=a("p"),Xyo=o("The model is set in evaluation mode by default using "),Tme=a("code"),zyo=o("model.eval()"),Qyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),Wyo=o("model.train()"),Hyo=l(),F(k1.$$.fragment),HOe=l(),Vi=a("h2"),S1=a("a"),Eme=a("span"),F(My.$$.fragment),Uyo=l(),Cme=a("span"),Jyo=o("AutoModelForCausalLM"),UOe=l(),ko=a("div"),F(Ey.$$.fragment),Yyo=l(),Xi=a("p"),Kyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FG=a("a"),Zyo=o("from_pretrained()"),e8o=o(" class method or the "),TG=a("a"),o8o=o("from_config()"),r8o=o(` class
method.`),t8o=l(),Cy=a("p"),a8o=o("This class cannot be instantiated directly using "),wme=a("code"),n8o=o("__init__()"),s8o=o(" (throws an error)."),l8o=l(),lt=a("div"),F(wy.$$.fragment),i8o=l(),Ame=a("p"),d8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),c8o=l(),zi=a("p"),f8o=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),m8o=o("not"),g8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),h8o=o("from_pretrained()"),p8o=o(" to load the model weights."),_8o=l(),F(R1.$$.fragment),u8o=l(),Ke=a("div"),F(Ay.$$.fragment),b8o=l(),yme=a("p"),v8o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F8o=l(),Ia=a("p"),T8o=o("The model class to instantiate is selected based on the "),xme=a("code"),M8o=o("model_type"),E8o=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),C8o=o("pretrained_model_name_or_path"),w8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),A8o=o("pretrained_model_name_or_path"),L8o=o(":"),y8o=l(),z=a("ul"),P1=a("li"),Sme=a("strong"),x8o=o("bart"),$8o=o(" \u2014 "),EG=a("a"),k8o=o("BartForCausalLM"),S8o=o(" (BART model)"),R8o=l(),B1=a("li"),Rme=a("strong"),P8o=o("bert"),B8o=o(" \u2014 "),CG=a("a"),I8o=o("BertLMHeadModel"),N8o=o(" (BERT model)"),q8o=l(),I1=a("li"),Pme=a("strong"),j8o=o("bert-generation"),D8o=o(" \u2014 "),wG=a("a"),G8o=o("BertGenerationDecoder"),O8o=o(" (Bert Generation model)"),V8o=l(),N1=a("li"),Bme=a("strong"),X8o=o("big_bird"),z8o=o(" \u2014 "),AG=a("a"),Q8o=o("BigBirdForCausalLM"),W8o=o(" (BigBird model)"),H8o=l(),q1=a("li"),Ime=a("strong"),U8o=o("bigbird_pegasus"),J8o=o(" \u2014 "),LG=a("a"),Y8o=o("BigBirdPegasusForCausalLM"),K8o=o(" (BigBird-Pegasus model)"),Z8o=l(),j1=a("li"),Nme=a("strong"),e9o=o("blenderbot"),o9o=o(" \u2014 "),yG=a("a"),r9o=o("BlenderbotForCausalLM"),t9o=o(" (Blenderbot model)"),a9o=l(),D1=a("li"),qme=a("strong"),n9o=o("blenderbot-small"),s9o=o(" \u2014 "),xG=a("a"),l9o=o("BlenderbotSmallForCausalLM"),i9o=o(" (BlenderbotSmall model)"),d9o=l(),G1=a("li"),jme=a("strong"),c9o=o("bloom"),f9o=o(" \u2014 "),$G=a("a"),m9o=o("BloomForCausalLM"),g9o=o(" (BLOOM model)"),h9o=l(),O1=a("li"),Dme=a("strong"),p9o=o("camembert"),_9o=o(" \u2014 "),kG=a("a"),u9o=o("CamembertForCausalLM"),b9o=o(" (CamemBERT model)"),v9o=l(),V1=a("li"),Gme=a("strong"),F9o=o("codegen"),T9o=o(" \u2014 "),SG=a("a"),M9o=o("CodeGenForCausalLM"),E9o=o(" (CodeGen model)"),C9o=l(),X1=a("li"),Ome=a("strong"),w9o=o("ctrl"),A9o=o(" \u2014 "),RG=a("a"),L9o=o("CTRLLMHeadModel"),y9o=o(" (CTRL model)"),x9o=l(),z1=a("li"),Vme=a("strong"),$9o=o("data2vec-text"),k9o=o(" \u2014 "),PG=a("a"),S9o=o("Data2VecTextForCausalLM"),R9o=o(" (Data2VecText model)"),P9o=l(),Q1=a("li"),Xme=a("strong"),B9o=o("electra"),I9o=o(" \u2014 "),BG=a("a"),N9o=o("ElectraForCausalLM"),q9o=o(" (ELECTRA model)"),j9o=l(),W1=a("li"),zme=a("strong"),D9o=o("gpt2"),G9o=o(" \u2014 "),IG=a("a"),O9o=o("GPT2LMHeadModel"),V9o=o(" (OpenAI GPT-2 model)"),X9o=l(),H1=a("li"),Qme=a("strong"),z9o=o("gpt_neo"),Q9o=o(" \u2014 "),NG=a("a"),W9o=o("GPTNeoForCausalLM"),H9o=o(" (GPT Neo model)"),U9o=l(),U1=a("li"),Wme=a("strong"),J9o=o("gpt_neox"),Y9o=o(" \u2014 "),qG=a("a"),K9o=o("GPTNeoXForCausalLM"),Z9o=o(" (GPT NeoX model)"),exo=l(),J1=a("li"),Hme=a("strong"),oxo=o("gptj"),rxo=o(" \u2014 "),jG=a("a"),txo=o("GPTJForCausalLM"),axo=o(" (GPT-J model)"),nxo=l(),Y1=a("li"),Ume=a("strong"),sxo=o("marian"),lxo=o(" \u2014 "),DG=a("a"),ixo=o("MarianForCausalLM"),dxo=o(" (Marian model)"),cxo=l(),K1=a("li"),Jme=a("strong"),fxo=o("mbart"),mxo=o(" \u2014 "),GG=a("a"),gxo=o("MBartForCausalLM"),hxo=o(" (mBART model)"),pxo=l(),Z1=a("li"),Yme=a("strong"),_xo=o("megatron-bert"),uxo=o(" \u2014 "),OG=a("a"),bxo=o("MegatronBertForCausalLM"),vxo=o(" (Megatron-BERT model)"),Fxo=l(),e7=a("li"),Kme=a("strong"),Txo=o("openai-gpt"),Mxo=o(" \u2014 "),VG=a("a"),Exo=o("OpenAIGPTLMHeadModel"),Cxo=o(" (OpenAI GPT model)"),wxo=l(),o7=a("li"),Zme=a("strong"),Axo=o("opt"),Lxo=o(" \u2014 "),XG=a("a"),yxo=o("OPTForCausalLM"),xxo=o(" (OPT model)"),$xo=l(),r7=a("li"),ege=a("strong"),kxo=o("pegasus"),Sxo=o(" \u2014 "),zG=a("a"),Rxo=o("PegasusForCausalLM"),Pxo=o(" (Pegasus model)"),Bxo=l(),t7=a("li"),oge=a("strong"),Ixo=o("plbart"),Nxo=o(" \u2014 "),QG=a("a"),qxo=o("PLBartForCausalLM"),jxo=o(" (PLBart model)"),Dxo=l(),a7=a("li"),rge=a("strong"),Gxo=o("prophetnet"),Oxo=o(" \u2014 "),WG=a("a"),Vxo=o("ProphetNetForCausalLM"),Xxo=o(" (ProphetNet model)"),zxo=l(),n7=a("li"),tge=a("strong"),Qxo=o("qdqbert"),Wxo=o(" \u2014 "),HG=a("a"),Hxo=o("QDQBertLMHeadModel"),Uxo=o(" (QDQBert model)"),Jxo=l(),s7=a("li"),age=a("strong"),Yxo=o("reformer"),Kxo=o(" \u2014 "),UG=a("a"),Zxo=o("ReformerModelWithLMHead"),e$o=o(" (Reformer model)"),o$o=l(),l7=a("li"),nge=a("strong"),r$o=o("rembert"),t$o=o(" \u2014 "),JG=a("a"),a$o=o("RemBertForCausalLM"),n$o=o(" (RemBERT model)"),s$o=l(),i7=a("li"),sge=a("strong"),l$o=o("roberta"),i$o=o(" \u2014 "),YG=a("a"),d$o=o("RobertaForCausalLM"),c$o=o(" (RoBERTa model)"),f$o=l(),d7=a("li"),lge=a("strong"),m$o=o("roformer"),g$o=o(" \u2014 "),KG=a("a"),h$o=o("RoFormerForCausalLM"),p$o=o(" (RoFormer model)"),_$o=l(),c7=a("li"),ige=a("strong"),u$o=o("speech_to_text_2"),b$o=o(" \u2014 "),ZG=a("a"),v$o=o("Speech2Text2ForCausalLM"),F$o=o(" (Speech2Text2 model)"),T$o=l(),f7=a("li"),dge=a("strong"),M$o=o("transfo-xl"),E$o=o(" \u2014 "),eO=a("a"),C$o=o("TransfoXLLMHeadModel"),w$o=o(" (Transformer-XL model)"),A$o=l(),m7=a("li"),cge=a("strong"),L$o=o("trocr"),y$o=o(" \u2014 "),oO=a("a"),x$o=o("TrOCRForCausalLM"),$$o=o(" (TrOCR model)"),k$o=l(),g7=a("li"),fge=a("strong"),S$o=o("xglm"),R$o=o(" \u2014 "),rO=a("a"),P$o=o("XGLMForCausalLM"),B$o=o(" (XGLM model)"),I$o=l(),h7=a("li"),mge=a("strong"),N$o=o("xlm"),q$o=o(" \u2014 "),tO=a("a"),j$o=o("XLMWithLMHeadModel"),D$o=o(" (XLM model)"),G$o=l(),p7=a("li"),gge=a("strong"),O$o=o("xlm-prophetnet"),V$o=o(" \u2014 "),aO=a("a"),X$o=o("XLMProphetNetForCausalLM"),z$o=o(" (XLM-ProphetNet model)"),Q$o=l(),_7=a("li"),hge=a("strong"),W$o=o("xlm-roberta"),H$o=o(" \u2014 "),nO=a("a"),U$o=o("XLMRobertaForCausalLM"),J$o=o(" (XLM-RoBERTa model)"),Y$o=l(),u7=a("li"),pge=a("strong"),K$o=o("xlm-roberta-xl"),Z$o=o(" \u2014 "),sO=a("a"),eko=o("XLMRobertaXLForCausalLM"),oko=o(" (XLM-RoBERTa-XL model)"),rko=l(),b7=a("li"),_ge=a("strong"),tko=o("xlnet"),ako=o(" \u2014 "),lO=a("a"),nko=o("XLNetLMHeadModel"),sko=o(" (XLNet model)"),lko=l(),v7=a("p"),iko=o("The model is set in evaluation mode by default using "),uge=a("code"),dko=o("model.eval()"),cko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),fko=o("model.train()"),mko=l(),F(F7.$$.fragment),JOe=l(),Qi=a("h2"),T7=a("a"),vge=a("span"),F(Ly.$$.fragment),gko=l(),Fge=a("span"),hko=o("AutoModelForMaskedLM"),YOe=l(),So=a("div"),F(yy.$$.fragment),pko=l(),Wi=a("p"),_ko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iO=a("a"),uko=o("from_pretrained()"),bko=o(" class method or the "),dO=a("a"),vko=o("from_config()"),Fko=o(` class
method.`),Tko=l(),xy=a("p"),Mko=o("This class cannot be instantiated directly using "),Tge=a("code"),Eko=o("__init__()"),Cko=o(" (throws an error)."),wko=l(),it=a("div"),F($y.$$.fragment),Ako=l(),Mge=a("p"),Lko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yko=l(),Hi=a("p"),xko=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),$ko=o("not"),kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),Sko=o("from_pretrained()"),Rko=o(" to load the model weights."),Pko=l(),F(M7.$$.fragment),Bko=l(),Ze=a("div"),F(ky.$$.fragment),Iko=l(),Cge=a("p"),Nko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qko=l(),Na=a("p"),jko=o("The model class to instantiate is selected based on the "),wge=a("code"),Dko=o("model_type"),Gko=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),Oko=o("pretrained_model_name_or_path"),Vko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),Xko=o("pretrained_model_name_or_path"),zko=o(":"),Qko=l(),W=a("ul"),E7=a("li"),yge=a("strong"),Wko=o("albert"),Hko=o(" \u2014 "),fO=a("a"),Uko=o("AlbertForMaskedLM"),Jko=o(" (ALBERT model)"),Yko=l(),C7=a("li"),xge=a("strong"),Kko=o("bart"),Zko=o(" \u2014 "),mO=a("a"),eSo=o("BartForConditionalGeneration"),oSo=o(" (BART model)"),rSo=l(),w7=a("li"),$ge=a("strong"),tSo=o("bert"),aSo=o(" \u2014 "),gO=a("a"),nSo=o("BertForMaskedLM"),sSo=o(" (BERT model)"),lSo=l(),A7=a("li"),kge=a("strong"),iSo=o("big_bird"),dSo=o(" \u2014 "),hO=a("a"),cSo=o("BigBirdForMaskedLM"),fSo=o(" (BigBird model)"),mSo=l(),L7=a("li"),Sge=a("strong"),gSo=o("camembert"),hSo=o(" \u2014 "),pO=a("a"),pSo=o("CamembertForMaskedLM"),_So=o(" (CamemBERT model)"),uSo=l(),y7=a("li"),Rge=a("strong"),bSo=o("convbert"),vSo=o(" \u2014 "),_O=a("a"),FSo=o("ConvBertForMaskedLM"),TSo=o(" (ConvBERT model)"),MSo=l(),x7=a("li"),Pge=a("strong"),ESo=o("data2vec-text"),CSo=o(" \u2014 "),uO=a("a"),wSo=o("Data2VecTextForMaskedLM"),ASo=o(" (Data2VecText model)"),LSo=l(),$7=a("li"),Bge=a("strong"),ySo=o("deberta"),xSo=o(" \u2014 "),bO=a("a"),$So=o("DebertaForMaskedLM"),kSo=o(" (DeBERTa model)"),SSo=l(),k7=a("li"),Ige=a("strong"),RSo=o("deberta-v2"),PSo=o(" \u2014 "),vO=a("a"),BSo=o("DebertaV2ForMaskedLM"),ISo=o(" (DeBERTa-v2 model)"),NSo=l(),S7=a("li"),Nge=a("strong"),qSo=o("distilbert"),jSo=o(" \u2014 "),FO=a("a"),DSo=o("DistilBertForMaskedLM"),GSo=o(" (DistilBERT model)"),OSo=l(),R7=a("li"),qge=a("strong"),VSo=o("electra"),XSo=o(" \u2014 "),TO=a("a"),zSo=o("ElectraForMaskedLM"),QSo=o(" (ELECTRA model)"),WSo=l(),P7=a("li"),jge=a("strong"),HSo=o("flaubert"),USo=o(" \u2014 "),MO=a("a"),JSo=o("FlaubertWithLMHeadModel"),YSo=o(" (FlauBERT model)"),KSo=l(),B7=a("li"),Dge=a("strong"),ZSo=o("fnet"),eRo=o(" \u2014 "),EO=a("a"),oRo=o("FNetForMaskedLM"),rRo=o(" (FNet model)"),tRo=l(),I7=a("li"),Gge=a("strong"),aRo=o("funnel"),nRo=o(" \u2014 "),CO=a("a"),sRo=o("FunnelForMaskedLM"),lRo=o(" (Funnel Transformer model)"),iRo=l(),N7=a("li"),Oge=a("strong"),dRo=o("ibert"),cRo=o(" \u2014 "),wO=a("a"),fRo=o("IBertForMaskedLM"),mRo=o(" (I-BERT model)"),gRo=l(),q7=a("li"),Vge=a("strong"),hRo=o("layoutlm"),pRo=o(" \u2014 "),AO=a("a"),_Ro=o("LayoutLMForMaskedLM"),uRo=o(" (LayoutLM model)"),bRo=l(),j7=a("li"),Xge=a("strong"),vRo=o("longformer"),FRo=o(" \u2014 "),LO=a("a"),TRo=o("LongformerForMaskedLM"),MRo=o(" (Longformer model)"),ERo=l(),D7=a("li"),zge=a("strong"),CRo=o("luke"),wRo=o(" \u2014 "),yO=a("a"),ARo=o("LukeForMaskedLM"),LRo=o(" (LUKE model)"),yRo=l(),G7=a("li"),Qge=a("strong"),xRo=o("mbart"),$Ro=o(" \u2014 "),xO=a("a"),kRo=o("MBartForConditionalGeneration"),SRo=o(" (mBART model)"),RRo=l(),O7=a("li"),Wge=a("strong"),PRo=o("megatron-bert"),BRo=o(" \u2014 "),$O=a("a"),IRo=o("MegatronBertForMaskedLM"),NRo=o(" (Megatron-BERT model)"),qRo=l(),V7=a("li"),Hge=a("strong"),jRo=o("mobilebert"),DRo=o(" \u2014 "),kO=a("a"),GRo=o("MobileBertForMaskedLM"),ORo=o(" (MobileBERT model)"),VRo=l(),X7=a("li"),Uge=a("strong"),XRo=o("mpnet"),zRo=o(" \u2014 "),SO=a("a"),QRo=o("MPNetForMaskedLM"),WRo=o(" (MPNet model)"),HRo=l(),z7=a("li"),Jge=a("strong"),URo=o("nezha"),JRo=o(" \u2014 "),RO=a("a"),YRo=o("NezhaForMaskedLM"),KRo=o(" (Nezha model)"),ZRo=l(),Q7=a("li"),Yge=a("strong"),ePo=o("nystromformer"),oPo=o(" \u2014 "),PO=a("a"),rPo=o("NystromformerForMaskedLM"),tPo=o(" (Nystr\xF6mformer model)"),aPo=l(),W7=a("li"),Kge=a("strong"),nPo=o("perceiver"),sPo=o(" \u2014 "),BO=a("a"),lPo=o("PerceiverForMaskedLM"),iPo=o(" (Perceiver model)"),dPo=l(),H7=a("li"),Zge=a("strong"),cPo=o("qdqbert"),fPo=o(" \u2014 "),IO=a("a"),mPo=o("QDQBertForMaskedLM"),gPo=o(" (QDQBert model)"),hPo=l(),U7=a("li"),ehe=a("strong"),pPo=o("reformer"),_Po=o(" \u2014 "),NO=a("a"),uPo=o("ReformerForMaskedLM"),bPo=o(" (Reformer model)"),vPo=l(),J7=a("li"),ohe=a("strong"),FPo=o("rembert"),TPo=o(" \u2014 "),qO=a("a"),MPo=o("RemBertForMaskedLM"),EPo=o(" (RemBERT model)"),CPo=l(),Y7=a("li"),rhe=a("strong"),wPo=o("roberta"),APo=o(" \u2014 "),jO=a("a"),LPo=o("RobertaForMaskedLM"),yPo=o(" (RoBERTa model)"),xPo=l(),K7=a("li"),the=a("strong"),$Po=o("roformer"),kPo=o(" \u2014 "),DO=a("a"),SPo=o("RoFormerForMaskedLM"),RPo=o(" (RoFormer model)"),PPo=l(),Z7=a("li"),ahe=a("strong"),BPo=o("squeezebert"),IPo=o(" \u2014 "),GO=a("a"),NPo=o("SqueezeBertForMaskedLM"),qPo=o(" (SqueezeBERT model)"),jPo=l(),e2=a("li"),nhe=a("strong"),DPo=o("tapas"),GPo=o(" \u2014 "),OO=a("a"),OPo=o("TapasForMaskedLM"),VPo=o(" (TAPAS model)"),XPo=l(),o2=a("li"),she=a("strong"),zPo=o("wav2vec2"),QPo=o(" \u2014 "),lhe=a("code"),WPo=o("Wav2Vec2ForMaskedLM"),HPo=o(" (Wav2Vec2 model)"),UPo=l(),r2=a("li"),ihe=a("strong"),JPo=o("xlm"),YPo=o(" \u2014 "),VO=a("a"),KPo=o("XLMWithLMHeadModel"),ZPo=o(" (XLM model)"),eBo=l(),t2=a("li"),dhe=a("strong"),oBo=o("xlm-roberta"),rBo=o(" \u2014 "),XO=a("a"),tBo=o("XLMRobertaForMaskedLM"),aBo=o(" (XLM-RoBERTa model)"),nBo=l(),a2=a("li"),che=a("strong"),sBo=o("xlm-roberta-xl"),lBo=o(" \u2014 "),zO=a("a"),iBo=o("XLMRobertaXLForMaskedLM"),dBo=o(" (XLM-RoBERTa-XL model)"),cBo=l(),n2=a("li"),fhe=a("strong"),fBo=o("yoso"),mBo=o(" \u2014 "),QO=a("a"),gBo=o("YosoForMaskedLM"),hBo=o(" (YOSO model)"),pBo=l(),s2=a("p"),_Bo=o("The model is set in evaluation mode by default using "),mhe=a("code"),uBo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),vBo=o("model.train()"),FBo=l(),F(l2.$$.fragment),KOe=l(),Ui=a("h2"),i2=a("a"),hhe=a("span"),F(Sy.$$.fragment),TBo=l(),phe=a("span"),MBo=o("AutoModelForSeq2SeqLM"),ZOe=l(),Ro=a("div"),F(Ry.$$.fragment),EBo=l(),Ji=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WO=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),HO=a("a"),LBo=o("from_config()"),yBo=o(` class
method.`),xBo=l(),Py=a("p"),$Bo=o("This class cannot be instantiated directly using "),_he=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),dt=a("div"),F(By.$$.fragment),PBo=l(),uhe=a("p"),BBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IBo=l(),Yi=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),qBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(d2.$$.fragment),VBo=l(),eo=a("div"),F(Iy.$$.fragment),XBo=l(),vhe=a("p"),zBo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QBo=l(),qa=a("p"),WBo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),pe=a("ul"),c2=a("li"),Ehe=a("strong"),oIo=o("bart"),rIo=o(" \u2014 "),JO=a("a"),tIo=o("BartForConditionalGeneration"),aIo=o(" (BART model)"),nIo=l(),f2=a("li"),Che=a("strong"),sIo=o("bigbird_pegasus"),lIo=o(" \u2014 "),YO=a("a"),iIo=o("BigBirdPegasusForConditionalGeneration"),dIo=o(" (BigBird-Pegasus model)"),cIo=l(),m2=a("li"),whe=a("strong"),fIo=o("blenderbot"),mIo=o(" \u2014 "),KO=a("a"),gIo=o("BlenderbotForConditionalGeneration"),hIo=o(" (Blenderbot model)"),pIo=l(),g2=a("li"),Ahe=a("strong"),_Io=o("blenderbot-small"),uIo=o(" \u2014 "),ZO=a("a"),bIo=o("BlenderbotSmallForConditionalGeneration"),vIo=o(" (BlenderbotSmall model)"),FIo=l(),h2=a("li"),Lhe=a("strong"),TIo=o("encoder-decoder"),MIo=o(" \u2014 "),eV=a("a"),EIo=o("EncoderDecoderModel"),CIo=o(" (Encoder decoder model)"),wIo=l(),p2=a("li"),yhe=a("strong"),AIo=o("fsmt"),LIo=o(" \u2014 "),oV=a("a"),yIo=o("FSMTForConditionalGeneration"),xIo=o(" (FairSeq Machine-Translation model)"),$Io=l(),_2=a("li"),xhe=a("strong"),kIo=o("led"),SIo=o(" \u2014 "),rV=a("a"),RIo=o("LEDForConditionalGeneration"),PIo=o(" (LED model)"),BIo=l(),u2=a("li"),$he=a("strong"),IIo=o("longt5"),NIo=o(" \u2014 "),tV=a("a"),qIo=o("LongT5ForConditionalGeneration"),jIo=o(" (LongT5 model)"),DIo=l(),b2=a("li"),khe=a("strong"),GIo=o("m2m_100"),OIo=o(" \u2014 "),aV=a("a"),VIo=o("M2M100ForConditionalGeneration"),XIo=o(" (M2M100 model)"),zIo=l(),v2=a("li"),She=a("strong"),QIo=o("marian"),WIo=o(" \u2014 "),nV=a("a"),HIo=o("MarianMTModel"),UIo=o(" (Marian model)"),JIo=l(),F2=a("li"),Rhe=a("strong"),YIo=o("mbart"),KIo=o(" \u2014 "),sV=a("a"),ZIo=o("MBartForConditionalGeneration"),eNo=o(" (mBART model)"),oNo=l(),T2=a("li"),Phe=a("strong"),rNo=o("mt5"),tNo=o(" \u2014 "),lV=a("a"),aNo=o("MT5ForConditionalGeneration"),nNo=o(" (MT5 model)"),sNo=l(),M2=a("li"),Bhe=a("strong"),lNo=o("pegasus"),iNo=o(" \u2014 "),iV=a("a"),dNo=o("PegasusForConditionalGeneration"),cNo=o(" (Pegasus model)"),fNo=l(),E2=a("li"),Ihe=a("strong"),mNo=o("plbart"),gNo=o(" \u2014 "),dV=a("a"),hNo=o("PLBartForConditionalGeneration"),pNo=o(" (PLBart model)"),_No=l(),C2=a("li"),Nhe=a("strong"),uNo=o("prophetnet"),bNo=o(" \u2014 "),cV=a("a"),vNo=o("ProphetNetForConditionalGeneration"),FNo=o(" (ProphetNet model)"),TNo=l(),w2=a("li"),qhe=a("strong"),MNo=o("t5"),ENo=o(" \u2014 "),fV=a("a"),CNo=o("T5ForConditionalGeneration"),wNo=o(" (T5 model)"),ANo=l(),A2=a("li"),jhe=a("strong"),LNo=o("xlm-prophetnet"),yNo=o(" \u2014 "),mV=a("a"),xNo=o("XLMProphetNetForConditionalGeneration"),$No=o(" (XLM-ProphetNet model)"),kNo=l(),L2=a("p"),SNo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),RNo=o("model.eval()"),PNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),BNo=o("model.train()"),INo=l(),F(y2.$$.fragment),eVe=l(),Ki=a("h2"),x2=a("a"),Ohe=a("span"),F(Ny.$$.fragment),NNo=l(),Vhe=a("span"),qNo=o("AutoModelForSequenceClassification"),oVe=l(),Po=a("div"),F(qy.$$.fragment),jNo=l(),Zi=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gV=a("a"),GNo=o("from_pretrained()"),ONo=o(" class method or the "),hV=a("a"),VNo=o("from_config()"),XNo=o(` class
method.`),zNo=l(),jy=a("p"),QNo=o("This class cannot be instantiated directly using "),Xhe=a("code"),WNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),ct=a("div"),F(Dy.$$.fragment),JNo=l(),zhe=a("p"),YNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KNo=l(),ed=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),eqo=o("not"),oqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),rqo=o("from_pretrained()"),tqo=o(" to load the model weights."),aqo=l(),F($2.$$.fragment),nqo=l(),oo=a("div"),F(Gy.$$.fragment),sqo=l(),Whe=a("p"),lqo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iqo=l(),ja=a("p"),dqo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),cqo=o("model_type"),fqo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),mqo=o("pretrained_model_name_or_path"),gqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),hqo=o("pretrained_model_name_or_path"),pqo=o(":"),_qo=l(),N=a("ul"),k2=a("li"),Yhe=a("strong"),uqo=o("albert"),bqo=o(" \u2014 "),_V=a("a"),vqo=o("AlbertForSequenceClassification"),Fqo=o(" (ALBERT model)"),Tqo=l(),S2=a("li"),Khe=a("strong"),Mqo=o("bart"),Eqo=o(" \u2014 "),uV=a("a"),Cqo=o("BartForSequenceClassification"),wqo=o(" (BART model)"),Aqo=l(),R2=a("li"),Zhe=a("strong"),Lqo=o("bert"),yqo=o(" \u2014 "),bV=a("a"),xqo=o("BertForSequenceClassification"),$qo=o(" (BERT model)"),kqo=l(),P2=a("li"),epe=a("strong"),Sqo=o("big_bird"),Rqo=o(" \u2014 "),vV=a("a"),Pqo=o("BigBirdForSequenceClassification"),Bqo=o(" (BigBird model)"),Iqo=l(),B2=a("li"),ope=a("strong"),Nqo=o("bigbird_pegasus"),qqo=o(" \u2014 "),FV=a("a"),jqo=o("BigBirdPegasusForSequenceClassification"),Dqo=o(" (BigBird-Pegasus model)"),Gqo=l(),I2=a("li"),rpe=a("strong"),Oqo=o("bloom"),Vqo=o(" \u2014 "),TV=a("a"),Xqo=o("BloomForSequenceClassification"),zqo=o(" (BLOOM model)"),Qqo=l(),N2=a("li"),tpe=a("strong"),Wqo=o("camembert"),Hqo=o(" \u2014 "),MV=a("a"),Uqo=o("CamembertForSequenceClassification"),Jqo=o(" (CamemBERT model)"),Yqo=l(),q2=a("li"),ape=a("strong"),Kqo=o("canine"),Zqo=o(" \u2014 "),EV=a("a"),ejo=o("CanineForSequenceClassification"),ojo=o(" (CANINE model)"),rjo=l(),j2=a("li"),npe=a("strong"),tjo=o("convbert"),ajo=o(" \u2014 "),CV=a("a"),njo=o("ConvBertForSequenceClassification"),sjo=o(" (ConvBERT model)"),ljo=l(),D2=a("li"),spe=a("strong"),ijo=o("ctrl"),djo=o(" \u2014 "),wV=a("a"),cjo=o("CTRLForSequenceClassification"),fjo=o(" (CTRL model)"),mjo=l(),G2=a("li"),lpe=a("strong"),gjo=o("data2vec-text"),hjo=o(" \u2014 "),AV=a("a"),pjo=o("Data2VecTextForSequenceClassification"),_jo=o(" (Data2VecText model)"),ujo=l(),O2=a("li"),ipe=a("strong"),bjo=o("deberta"),vjo=o(" \u2014 "),LV=a("a"),Fjo=o("DebertaForSequenceClassification"),Tjo=o(" (DeBERTa model)"),Mjo=l(),V2=a("li"),dpe=a("strong"),Ejo=o("deberta-v2"),Cjo=o(" \u2014 "),yV=a("a"),wjo=o("DebertaV2ForSequenceClassification"),Ajo=o(" (DeBERTa-v2 model)"),Ljo=l(),X2=a("li"),cpe=a("strong"),yjo=o("distilbert"),xjo=o(" \u2014 "),xV=a("a"),$jo=o("DistilBertForSequenceClassification"),kjo=o(" (DistilBERT model)"),Sjo=l(),z2=a("li"),fpe=a("strong"),Rjo=o("electra"),Pjo=o(" \u2014 "),$V=a("a"),Bjo=o("ElectraForSequenceClassification"),Ijo=o(" (ELECTRA model)"),Njo=l(),Q2=a("li"),mpe=a("strong"),qjo=o("flaubert"),jjo=o(" \u2014 "),kV=a("a"),Djo=o("FlaubertForSequenceClassification"),Gjo=o(" (FlauBERT model)"),Ojo=l(),W2=a("li"),gpe=a("strong"),Vjo=o("fnet"),Xjo=o(" \u2014 "),SV=a("a"),zjo=o("FNetForSequenceClassification"),Qjo=o(" (FNet model)"),Wjo=l(),H2=a("li"),hpe=a("strong"),Hjo=o("funnel"),Ujo=o(" \u2014 "),RV=a("a"),Jjo=o("FunnelForSequenceClassification"),Yjo=o(" (Funnel Transformer model)"),Kjo=l(),U2=a("li"),ppe=a("strong"),Zjo=o("gpt2"),eDo=o(" \u2014 "),PV=a("a"),oDo=o("GPT2ForSequenceClassification"),rDo=o(" (OpenAI GPT-2 model)"),tDo=l(),J2=a("li"),_pe=a("strong"),aDo=o("gpt_neo"),nDo=o(" \u2014 "),BV=a("a"),sDo=o("GPTNeoForSequenceClassification"),lDo=o(" (GPT Neo model)"),iDo=l(),Y2=a("li"),upe=a("strong"),dDo=o("gptj"),cDo=o(" \u2014 "),IV=a("a"),fDo=o("GPTJForSequenceClassification"),mDo=o(" (GPT-J model)"),gDo=l(),K2=a("li"),bpe=a("strong"),hDo=o("ibert"),pDo=o(" \u2014 "),NV=a("a"),_Do=o("IBertForSequenceClassification"),uDo=o(" (I-BERT model)"),bDo=l(),Z2=a("li"),vpe=a("strong"),vDo=o("layoutlm"),FDo=o(" \u2014 "),qV=a("a"),TDo=o("LayoutLMForSequenceClassification"),MDo=o(" (LayoutLM model)"),EDo=l(),eb=a("li"),Fpe=a("strong"),CDo=o("layoutlmv2"),wDo=o(" \u2014 "),jV=a("a"),ADo=o("LayoutLMv2ForSequenceClassification"),LDo=o(" (LayoutLMv2 model)"),yDo=l(),ob=a("li"),Tpe=a("strong"),xDo=o("layoutlmv3"),$Do=o(" \u2014 "),DV=a("a"),kDo=o("LayoutLMv3ForSequenceClassification"),SDo=o(" (LayoutLMv3 model)"),RDo=l(),rb=a("li"),Mpe=a("strong"),PDo=o("led"),BDo=o(" \u2014 "),GV=a("a"),IDo=o("LEDForSequenceClassification"),NDo=o(" (LED model)"),qDo=l(),tb=a("li"),Epe=a("strong"),jDo=o("longformer"),DDo=o(" \u2014 "),OV=a("a"),GDo=o("LongformerForSequenceClassification"),ODo=o(" (Longformer model)"),VDo=l(),ab=a("li"),Cpe=a("strong"),XDo=o("mbart"),zDo=o(" \u2014 "),VV=a("a"),QDo=o("MBartForSequenceClassification"),WDo=o(" (mBART model)"),HDo=l(),nb=a("li"),wpe=a("strong"),UDo=o("mctct"),JDo=o(" \u2014 "),XV=a("a"),YDo=o("MCTCTForSequenceClassification"),KDo=o(" (M-CTC-T model)"),ZDo=l(),sb=a("li"),Ape=a("strong"),eGo=o("megatron-bert"),oGo=o(" \u2014 "),zV=a("a"),rGo=o("MegatronBertForSequenceClassification"),tGo=o(" (Megatron-BERT model)"),aGo=l(),lb=a("li"),Lpe=a("strong"),nGo=o("mobilebert"),sGo=o(" \u2014 "),QV=a("a"),lGo=o("MobileBertForSequenceClassification"),iGo=o(" (MobileBERT model)"),dGo=l(),ib=a("li"),ype=a("strong"),cGo=o("mpnet"),fGo=o(" \u2014 "),WV=a("a"),mGo=o("MPNetForSequenceClassification"),gGo=o(" (MPNet model)"),hGo=l(),db=a("li"),xpe=a("strong"),pGo=o("nezha"),_Go=o(" \u2014 "),HV=a("a"),uGo=o("NezhaForSequenceClassification"),bGo=o(" (Nezha model)"),vGo=l(),cb=a("li"),$pe=a("strong"),FGo=o("nystromformer"),TGo=o(" \u2014 "),UV=a("a"),MGo=o("NystromformerForSequenceClassification"),EGo=o(" (Nystr\xF6mformer model)"),CGo=l(),fb=a("li"),kpe=a("strong"),wGo=o("openai-gpt"),AGo=o(" \u2014 "),JV=a("a"),LGo=o("OpenAIGPTForSequenceClassification"),yGo=o(" (OpenAI GPT model)"),xGo=l(),mb=a("li"),Spe=a("strong"),$Go=o("perceiver"),kGo=o(" \u2014 "),YV=a("a"),SGo=o("PerceiverForSequenceClassification"),RGo=o(" (Perceiver model)"),PGo=l(),gb=a("li"),Rpe=a("strong"),BGo=o("plbart"),IGo=o(" \u2014 "),KV=a("a"),NGo=o("PLBartForSequenceClassification"),qGo=o(" (PLBart model)"),jGo=l(),hb=a("li"),Ppe=a("strong"),DGo=o("qdqbert"),GGo=o(" \u2014 "),ZV=a("a"),OGo=o("QDQBertForSequenceClassification"),VGo=o(" (QDQBert model)"),XGo=l(),pb=a("li"),Bpe=a("strong"),zGo=o("reformer"),QGo=o(" \u2014 "),eX=a("a"),WGo=o("ReformerForSequenceClassification"),HGo=o(" (Reformer model)"),UGo=l(),_b=a("li"),Ipe=a("strong"),JGo=o("rembert"),YGo=o(" \u2014 "),oX=a("a"),KGo=o("RemBertForSequenceClassification"),ZGo=o(" (RemBERT model)"),eOo=l(),ub=a("li"),Npe=a("strong"),oOo=o("roberta"),rOo=o(" \u2014 "),rX=a("a"),tOo=o("RobertaForSequenceClassification"),aOo=o(" (RoBERTa model)"),nOo=l(),bb=a("li"),qpe=a("strong"),sOo=o("roformer"),lOo=o(" \u2014 "),tX=a("a"),iOo=o("RoFormerForSequenceClassification"),dOo=o(" (RoFormer model)"),cOo=l(),vb=a("li"),jpe=a("strong"),fOo=o("squeezebert"),mOo=o(" \u2014 "),aX=a("a"),gOo=o("SqueezeBertForSequenceClassification"),hOo=o(" (SqueezeBERT model)"),pOo=l(),Fb=a("li"),Dpe=a("strong"),_Oo=o("tapas"),uOo=o(" \u2014 "),nX=a("a"),bOo=o("TapasForSequenceClassification"),vOo=o(" (TAPAS model)"),FOo=l(),Tb=a("li"),Gpe=a("strong"),TOo=o("transfo-xl"),MOo=o(" \u2014 "),sX=a("a"),EOo=o("TransfoXLForSequenceClassification"),COo=o(" (Transformer-XL model)"),wOo=l(),Mb=a("li"),Ope=a("strong"),AOo=o("xlm"),LOo=o(" \u2014 "),lX=a("a"),yOo=o("XLMForSequenceClassification"),xOo=o(" (XLM model)"),$Oo=l(),Eb=a("li"),Vpe=a("strong"),kOo=o("xlm-roberta"),SOo=o(" \u2014 "),iX=a("a"),ROo=o("XLMRobertaForSequenceClassification"),POo=o(" (XLM-RoBERTa model)"),BOo=l(),Cb=a("li"),Xpe=a("strong"),IOo=o("xlm-roberta-xl"),NOo=o(" \u2014 "),dX=a("a"),qOo=o("XLMRobertaXLForSequenceClassification"),jOo=o(" (XLM-RoBERTa-XL model)"),DOo=l(),wb=a("li"),zpe=a("strong"),GOo=o("xlnet"),OOo=o(" \u2014 "),cX=a("a"),VOo=o("XLNetForSequenceClassification"),XOo=o(" (XLNet model)"),zOo=l(),Ab=a("li"),Qpe=a("strong"),QOo=o("yoso"),WOo=o(" \u2014 "),fX=a("a"),HOo=o("YosoForSequenceClassification"),UOo=o(" (YOSO model)"),JOo=l(),Lb=a("p"),YOo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),KOo=o("model.eval()"),ZOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),eVo=o("model.train()"),oVo=l(),F(yb.$$.fragment),rVe=l(),od=a("h2"),xb=a("a"),Upe=a("span"),F(Oy.$$.fragment),rVo=l(),Jpe=a("span"),tVo=o("AutoModelForMultipleChoice"),tVe=l(),Bo=a("div"),F(Vy.$$.fragment),aVo=l(),rd=a("p"),nVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mX=a("a"),sVo=o("from_pretrained()"),lVo=o(" class method or the "),gX=a("a"),iVo=o("from_config()"),dVo=o(` class
method.`),cVo=l(),Xy=a("p"),fVo=o("This class cannot be instantiated directly using "),Ype=a("code"),mVo=o("__init__()"),gVo=o(" (throws an error)."),hVo=l(),ft=a("div"),F(zy.$$.fragment),pVo=l(),Kpe=a("p"),_Vo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uVo=l(),td=a("p"),bVo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),vVo=o("not"),FVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),TVo=o("from_pretrained()"),MVo=o(" to load the model weights."),EVo=l(),F($b.$$.fragment),CVo=l(),ro=a("div"),F(Qy.$$.fragment),wVo=l(),e_e=a("p"),AVo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LVo=l(),Da=a("p"),yVo=o("The model class to instantiate is selected based on the "),o_e=a("code"),xVo=o("model_type"),$Vo=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),kVo=o("pretrained_model_name_or_path"),SVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),RVo=o("pretrained_model_name_or_path"),PVo=o(":"),BVo=l(),Z=a("ul"),kb=a("li"),a_e=a("strong"),IVo=o("albert"),NVo=o(" \u2014 "),pX=a("a"),qVo=o("AlbertForMultipleChoice"),jVo=o(" (ALBERT model)"),DVo=l(),Sb=a("li"),n_e=a("strong"),GVo=o("bert"),OVo=o(" \u2014 "),_X=a("a"),VVo=o("BertForMultipleChoice"),XVo=o(" (BERT model)"),zVo=l(),Rb=a("li"),s_e=a("strong"),QVo=o("big_bird"),WVo=o(" \u2014 "),uX=a("a"),HVo=o("BigBirdForMultipleChoice"),UVo=o(" (BigBird model)"),JVo=l(),Pb=a("li"),l_e=a("strong"),YVo=o("camembert"),KVo=o(" \u2014 "),bX=a("a"),ZVo=o("CamembertForMultipleChoice"),eXo=o(" (CamemBERT model)"),oXo=l(),Bb=a("li"),i_e=a("strong"),rXo=o("canine"),tXo=o(" \u2014 "),vX=a("a"),aXo=o("CanineForMultipleChoice"),nXo=o(" (CANINE model)"),sXo=l(),Ib=a("li"),d_e=a("strong"),lXo=o("convbert"),iXo=o(" \u2014 "),FX=a("a"),dXo=o("ConvBertForMultipleChoice"),cXo=o(" (ConvBERT model)"),fXo=l(),Nb=a("li"),c_e=a("strong"),mXo=o("data2vec-text"),gXo=o(" \u2014 "),TX=a("a"),hXo=o("Data2VecTextForMultipleChoice"),pXo=o(" (Data2VecText model)"),_Xo=l(),qb=a("li"),f_e=a("strong"),uXo=o("deberta-v2"),bXo=o(" \u2014 "),MX=a("a"),vXo=o("DebertaV2ForMultipleChoice"),FXo=o(" (DeBERTa-v2 model)"),TXo=l(),jb=a("li"),m_e=a("strong"),MXo=o("distilbert"),EXo=o(" \u2014 "),EX=a("a"),CXo=o("DistilBertForMultipleChoice"),wXo=o(" (DistilBERT model)"),AXo=l(),Db=a("li"),g_e=a("strong"),LXo=o("electra"),yXo=o(" \u2014 "),CX=a("a"),xXo=o("ElectraForMultipleChoice"),$Xo=o(" (ELECTRA model)"),kXo=l(),Gb=a("li"),h_e=a("strong"),SXo=o("flaubert"),RXo=o(" \u2014 "),wX=a("a"),PXo=o("FlaubertForMultipleChoice"),BXo=o(" (FlauBERT model)"),IXo=l(),Ob=a("li"),p_e=a("strong"),NXo=o("fnet"),qXo=o(" \u2014 "),AX=a("a"),jXo=o("FNetForMultipleChoice"),DXo=o(" (FNet model)"),GXo=l(),Vb=a("li"),__e=a("strong"),OXo=o("funnel"),VXo=o(" \u2014 "),LX=a("a"),XXo=o("FunnelForMultipleChoice"),zXo=o(" (Funnel Transformer model)"),QXo=l(),Xb=a("li"),u_e=a("strong"),WXo=o("ibert"),HXo=o(" \u2014 "),yX=a("a"),UXo=o("IBertForMultipleChoice"),JXo=o(" (I-BERT model)"),YXo=l(),zb=a("li"),b_e=a("strong"),KXo=o("longformer"),ZXo=o(" \u2014 "),xX=a("a"),ezo=o("LongformerForMultipleChoice"),ozo=o(" (Longformer model)"),rzo=l(),Qb=a("li"),v_e=a("strong"),tzo=o("megatron-bert"),azo=o(" \u2014 "),$X=a("a"),nzo=o("MegatronBertForMultipleChoice"),szo=o(" (Megatron-BERT model)"),lzo=l(),Wb=a("li"),F_e=a("strong"),izo=o("mobilebert"),dzo=o(" \u2014 "),kX=a("a"),czo=o("MobileBertForMultipleChoice"),fzo=o(" (MobileBERT model)"),mzo=l(),Hb=a("li"),T_e=a("strong"),gzo=o("mpnet"),hzo=o(" \u2014 "),SX=a("a"),pzo=o("MPNetForMultipleChoice"),_zo=o(" (MPNet model)"),uzo=l(),Ub=a("li"),M_e=a("strong"),bzo=o("nezha"),vzo=o(" \u2014 "),RX=a("a"),Fzo=o("NezhaForMultipleChoice"),Tzo=o(" (Nezha model)"),Mzo=l(),Jb=a("li"),E_e=a("strong"),Ezo=o("nystromformer"),Czo=o(" \u2014 "),PX=a("a"),wzo=o("NystromformerForMultipleChoice"),Azo=o(" (Nystr\xF6mformer model)"),Lzo=l(),Yb=a("li"),C_e=a("strong"),yzo=o("qdqbert"),xzo=o(" \u2014 "),BX=a("a"),$zo=o("QDQBertForMultipleChoice"),kzo=o(" (QDQBert model)"),Szo=l(),Kb=a("li"),w_e=a("strong"),Rzo=o("rembert"),Pzo=o(" \u2014 "),IX=a("a"),Bzo=o("RemBertForMultipleChoice"),Izo=o(" (RemBERT model)"),Nzo=l(),Zb=a("li"),A_e=a("strong"),qzo=o("roberta"),jzo=o(" \u2014 "),NX=a("a"),Dzo=o("RobertaForMultipleChoice"),Gzo=o(" (RoBERTa model)"),Ozo=l(),ev=a("li"),L_e=a("strong"),Vzo=o("roformer"),Xzo=o(" \u2014 "),qX=a("a"),zzo=o("RoFormerForMultipleChoice"),Qzo=o(" (RoFormer model)"),Wzo=l(),ov=a("li"),y_e=a("strong"),Hzo=o("squeezebert"),Uzo=o(" \u2014 "),jX=a("a"),Jzo=o("SqueezeBertForMultipleChoice"),Yzo=o(" (SqueezeBERT model)"),Kzo=l(),rv=a("li"),x_e=a("strong"),Zzo=o("xlm"),eQo=o(" \u2014 "),DX=a("a"),oQo=o("XLMForMultipleChoice"),rQo=o(" (XLM model)"),tQo=l(),tv=a("li"),$_e=a("strong"),aQo=o("xlm-roberta"),nQo=o(" \u2014 "),GX=a("a"),sQo=o("XLMRobertaForMultipleChoice"),lQo=o(" (XLM-RoBERTa model)"),iQo=l(),av=a("li"),k_e=a("strong"),dQo=o("xlm-roberta-xl"),cQo=o(" \u2014 "),OX=a("a"),fQo=o("XLMRobertaXLForMultipleChoice"),mQo=o(" (XLM-RoBERTa-XL model)"),gQo=l(),nv=a("li"),S_e=a("strong"),hQo=o("xlnet"),pQo=o(" \u2014 "),VX=a("a"),_Qo=o("XLNetForMultipleChoice"),uQo=o(" (XLNet model)"),bQo=l(),sv=a("li"),R_e=a("strong"),vQo=o("yoso"),FQo=o(" \u2014 "),XX=a("a"),TQo=o("YosoForMultipleChoice"),MQo=o(" (YOSO model)"),EQo=l(),lv=a("p"),CQo=o("The model is set in evaluation mode by default using "),P_e=a("code"),wQo=o("model.eval()"),AQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=a("code"),LQo=o("model.train()"),yQo=l(),F(iv.$$.fragment),aVe=l(),ad=a("h2"),dv=a("a"),I_e=a("span"),F(Wy.$$.fragment),xQo=l(),N_e=a("span"),$Qo=o("AutoModelForNextSentencePrediction"),nVe=l(),Io=a("div"),F(Hy.$$.fragment),kQo=l(),nd=a("p"),SQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zX=a("a"),RQo=o("from_pretrained()"),PQo=o(" class method or the "),QX=a("a"),BQo=o("from_config()"),IQo=o(` class
method.`),NQo=l(),Uy=a("p"),qQo=o("This class cannot be instantiated directly using "),q_e=a("code"),jQo=o("__init__()"),DQo=o(" (throws an error)."),GQo=l(),mt=a("div"),F(Jy.$$.fragment),OQo=l(),j_e=a("p"),VQo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),XQo=l(),sd=a("p"),zQo=o(`Note:
Loading a model from its configuration file does `),D_e=a("strong"),QQo=o("not"),WQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),HQo=o("from_pretrained()"),UQo=o(" to load the model weights."),JQo=l(),F(cv.$$.fragment),YQo=l(),to=a("div"),F(Yy.$$.fragment),KQo=l(),G_e=a("p"),ZQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eWo=l(),Ga=a("p"),oWo=o("The model class to instantiate is selected based on the "),O_e=a("code"),rWo=o("model_type"),tWo=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),aWo=o("pretrained_model_name_or_path"),nWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),sWo=o("pretrained_model_name_or_path"),lWo=o(":"),iWo=l(),No=a("ul"),fv=a("li"),z_e=a("strong"),dWo=o("bert"),cWo=o(" \u2014 "),HX=a("a"),fWo=o("BertForNextSentencePrediction"),mWo=o(" (BERT model)"),gWo=l(),mv=a("li"),Q_e=a("strong"),hWo=o("fnet"),pWo=o(" \u2014 "),UX=a("a"),_Wo=o("FNetForNextSentencePrediction"),uWo=o(" (FNet model)"),bWo=l(),gv=a("li"),W_e=a("strong"),vWo=o("megatron-bert"),FWo=o(" \u2014 "),JX=a("a"),TWo=o("MegatronBertForNextSentencePrediction"),MWo=o(" (Megatron-BERT model)"),EWo=l(),hv=a("li"),H_e=a("strong"),CWo=o("mobilebert"),wWo=o(" \u2014 "),YX=a("a"),AWo=o("MobileBertForNextSentencePrediction"),LWo=o(" (MobileBERT model)"),yWo=l(),pv=a("li"),U_e=a("strong"),xWo=o("nezha"),$Wo=o(" \u2014 "),KX=a("a"),kWo=o("NezhaForNextSentencePrediction"),SWo=o(" (Nezha model)"),RWo=l(),_v=a("li"),J_e=a("strong"),PWo=o("qdqbert"),BWo=o(" \u2014 "),ZX=a("a"),IWo=o("QDQBertForNextSentencePrediction"),NWo=o(" (QDQBert model)"),qWo=l(),uv=a("p"),jWo=o("The model is set in evaluation mode by default using "),Y_e=a("code"),DWo=o("model.eval()"),GWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),OWo=o("model.train()"),VWo=l(),F(bv.$$.fragment),sVe=l(),ld=a("h2"),vv=a("a"),Z_e=a("span"),F(Ky.$$.fragment),XWo=l(),eue=a("span"),zWo=o("AutoModelForTokenClassification"),lVe=l(),qo=a("div"),F(Zy.$$.fragment),QWo=l(),id=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ez=a("a"),HWo=o("from_pretrained()"),UWo=o(" class method or the "),oz=a("a"),JWo=o("from_config()"),YWo=o(` class
method.`),KWo=l(),e8=a("p"),ZWo=o("This class cannot be instantiated directly using "),oue=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),gt=a("div"),F(o8.$$.fragment),tHo=l(),rue=a("p"),aHo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nHo=l(),dd=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),fHo=l(),F(Fv.$$.fragment),mHo=l(),ao=a("div"),F(r8.$$.fragment),gHo=l(),aue=a("p"),hHo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pHo=l(),Oa=a("p"),_Ho=o("The model class to instantiate is selected based on the "),nue=a("code"),uHo=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(":"),EHo=l(),H=a("ul"),Tv=a("li"),iue=a("strong"),CHo=o("albert"),wHo=o(" \u2014 "),tz=a("a"),AHo=o("AlbertForTokenClassification"),LHo=o(" (ALBERT model)"),yHo=l(),Mv=a("li"),due=a("strong"),xHo=o("bert"),$Ho=o(" \u2014 "),az=a("a"),kHo=o("BertForTokenClassification"),SHo=o(" (BERT model)"),RHo=l(),Ev=a("li"),cue=a("strong"),PHo=o("big_bird"),BHo=o(" \u2014 "),nz=a("a"),IHo=o("BigBirdForTokenClassification"),NHo=o(" (BigBird model)"),qHo=l(),Cv=a("li"),fue=a("strong"),jHo=o("bloom"),DHo=o(" \u2014 "),sz=a("a"),GHo=o("BloomForTokenClassification"),OHo=o(" (BLOOM model)"),VHo=l(),wv=a("li"),mue=a("strong"),XHo=o("camembert"),zHo=o(" \u2014 "),lz=a("a"),QHo=o("CamembertForTokenClassification"),WHo=o(" (CamemBERT model)"),HHo=l(),Av=a("li"),gue=a("strong"),UHo=o("canine"),JHo=o(" \u2014 "),iz=a("a"),YHo=o("CanineForTokenClassification"),KHo=o(" (CANINE model)"),ZHo=l(),Lv=a("li"),hue=a("strong"),eUo=o("convbert"),oUo=o(" \u2014 "),dz=a("a"),rUo=o("ConvBertForTokenClassification"),tUo=o(" (ConvBERT model)"),aUo=l(),yv=a("li"),pue=a("strong"),nUo=o("data2vec-text"),sUo=o(" \u2014 "),cz=a("a"),lUo=o("Data2VecTextForTokenClassification"),iUo=o(" (Data2VecText model)"),dUo=l(),xv=a("li"),_ue=a("strong"),cUo=o("deberta"),fUo=o(" \u2014 "),fz=a("a"),mUo=o("DebertaForTokenClassification"),gUo=o(" (DeBERTa model)"),hUo=l(),$v=a("li"),uue=a("strong"),pUo=o("deberta-v2"),_Uo=o(" \u2014 "),mz=a("a"),uUo=o("DebertaV2ForTokenClassification"),bUo=o(" (DeBERTa-v2 model)"),vUo=l(),kv=a("li"),bue=a("strong"),FUo=o("distilbert"),TUo=o(" \u2014 "),gz=a("a"),MUo=o("DistilBertForTokenClassification"),EUo=o(" (DistilBERT model)"),CUo=l(),Sv=a("li"),vue=a("strong"),wUo=o("electra"),AUo=o(" \u2014 "),hz=a("a"),LUo=o("ElectraForTokenClassification"),yUo=o(" (ELECTRA model)"),xUo=l(),Rv=a("li"),Fue=a("strong"),$Uo=o("flaubert"),kUo=o(" \u2014 "),pz=a("a"),SUo=o("FlaubertForTokenClassification"),RUo=o(" (FlauBERT model)"),PUo=l(),Pv=a("li"),Tue=a("strong"),BUo=o("fnet"),IUo=o(" \u2014 "),_z=a("a"),NUo=o("FNetForTokenClassification"),qUo=o(" (FNet model)"),jUo=l(),Bv=a("li"),Mue=a("strong"),DUo=o("funnel"),GUo=o(" \u2014 "),uz=a("a"),OUo=o("FunnelForTokenClassification"),VUo=o(" (Funnel Transformer model)"),XUo=l(),Iv=a("li"),Eue=a("strong"),zUo=o("gpt2"),QUo=o(" \u2014 "),bz=a("a"),WUo=o("GPT2ForTokenClassification"),HUo=o(" (OpenAI GPT-2 model)"),UUo=l(),Nv=a("li"),Cue=a("strong"),JUo=o("ibert"),YUo=o(" \u2014 "),vz=a("a"),KUo=o("IBertForTokenClassification"),ZUo=o(" (I-BERT model)"),eJo=l(),qv=a("li"),wue=a("strong"),oJo=o("layoutlm"),rJo=o(" \u2014 "),Fz=a("a"),tJo=o("LayoutLMForTokenClassification"),aJo=o(" (LayoutLM model)"),nJo=l(),jv=a("li"),Aue=a("strong"),sJo=o("layoutlmv2"),lJo=o(" \u2014 "),Tz=a("a"),iJo=o("LayoutLMv2ForTokenClassification"),dJo=o(" (LayoutLMv2 model)"),cJo=l(),Dv=a("li"),Lue=a("strong"),fJo=o("layoutlmv3"),mJo=o(" \u2014 "),Mz=a("a"),gJo=o("LayoutLMv3ForTokenClassification"),hJo=o(" (LayoutLMv3 model)"),pJo=l(),Gv=a("li"),yue=a("strong"),_Jo=o("longformer"),uJo=o(" \u2014 "),Ez=a("a"),bJo=o("LongformerForTokenClassification"),vJo=o(" (Longformer model)"),FJo=l(),Ov=a("li"),xue=a("strong"),TJo=o("megatron-bert"),MJo=o(" \u2014 "),Cz=a("a"),EJo=o("MegatronBertForTokenClassification"),CJo=o(" (Megatron-BERT model)"),wJo=l(),Vv=a("li"),$ue=a("strong"),AJo=o("mobilebert"),LJo=o(" \u2014 "),wz=a("a"),yJo=o("MobileBertForTokenClassification"),xJo=o(" (MobileBERT model)"),$Jo=l(),Xv=a("li"),kue=a("strong"),kJo=o("mpnet"),SJo=o(" \u2014 "),Az=a("a"),RJo=o("MPNetForTokenClassification"),PJo=o(" (MPNet model)"),BJo=l(),zv=a("li"),Sue=a("strong"),IJo=o("nezha"),NJo=o(" \u2014 "),Lz=a("a"),qJo=o("NezhaForTokenClassification"),jJo=o(" (Nezha model)"),DJo=l(),Qv=a("li"),Rue=a("strong"),GJo=o("nystromformer"),OJo=o(" \u2014 "),yz=a("a"),VJo=o("NystromformerForTokenClassification"),XJo=o(" (Nystr\xF6mformer model)"),zJo=l(),Wv=a("li"),Pue=a("strong"),QJo=o("qdqbert"),WJo=o(" \u2014 "),xz=a("a"),HJo=o("QDQBertForTokenClassification"),UJo=o(" (QDQBert model)"),JJo=l(),Hv=a("li"),Bue=a("strong"),YJo=o("rembert"),KJo=o(" \u2014 "),$z=a("a"),ZJo=o("RemBertForTokenClassification"),eYo=o(" (RemBERT model)"),oYo=l(),Uv=a("li"),Iue=a("strong"),rYo=o("roberta"),tYo=o(" \u2014 "),kz=a("a"),aYo=o("RobertaForTokenClassification"),nYo=o(" (RoBERTa model)"),sYo=l(),Jv=a("li"),Nue=a("strong"),lYo=o("roformer"),iYo=o(" \u2014 "),Sz=a("a"),dYo=o("RoFormerForTokenClassification"),cYo=o(" (RoFormer model)"),fYo=l(),Yv=a("li"),que=a("strong"),mYo=o("squeezebert"),gYo=o(" \u2014 "),Rz=a("a"),hYo=o("SqueezeBertForTokenClassification"),pYo=o(" (SqueezeBERT model)"),_Yo=l(),Kv=a("li"),jue=a("strong"),uYo=o("xlm"),bYo=o(" \u2014 "),Pz=a("a"),vYo=o("XLMForTokenClassification"),FYo=o(" (XLM model)"),TYo=l(),Zv=a("li"),Due=a("strong"),MYo=o("xlm-roberta"),EYo=o(" \u2014 "),Bz=a("a"),CYo=o("XLMRobertaForTokenClassification"),wYo=o(" (XLM-RoBERTa model)"),AYo=l(),eF=a("li"),Gue=a("strong"),LYo=o("xlm-roberta-xl"),yYo=o(" \u2014 "),Iz=a("a"),xYo=o("XLMRobertaXLForTokenClassification"),$Yo=o(" (XLM-RoBERTa-XL model)"),kYo=l(),oF=a("li"),Oue=a("strong"),SYo=o("xlnet"),RYo=o(" \u2014 "),Nz=a("a"),PYo=o("XLNetForTokenClassification"),BYo=o(" (XLNet model)"),IYo=l(),rF=a("li"),Vue=a("strong"),NYo=o("yoso"),qYo=o(" \u2014 "),qz=a("a"),jYo=o("YosoForTokenClassification"),DYo=o(" (YOSO model)"),GYo=l(),tF=a("p"),OYo=o("The model is set in evaluation mode by default using "),Xue=a("code"),VYo=o("model.eval()"),XYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),zYo=o("model.train()"),QYo=l(),F(aF.$$.fragment),iVe=l(),cd=a("h2"),nF=a("a"),Que=a("span"),F(t8.$$.fragment),WYo=l(),Wue=a("span"),HYo=o("AutoModelForQuestionAnswering"),dVe=l(),jo=a("div"),F(a8.$$.fragment),UYo=l(),fd=a("p"),JYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jz=a("a"),YYo=o("from_pretrained()"),KYo=o(" class method or the "),Dz=a("a"),ZYo=o("from_config()"),eKo=o(` class
method.`),oKo=l(),n8=a("p"),rKo=o("This class cannot be instantiated directly using "),Hue=a("code"),tKo=o("__init__()"),aKo=o(" (throws an error)."),nKo=l(),ht=a("div"),F(s8.$$.fragment),sKo=l(),Uue=a("p"),lKo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iKo=l(),md=a("p"),dKo=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),cKo=o("not"),fKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),mKo=o("from_pretrained()"),gKo=o(" to load the model weights."),hKo=l(),F(sF.$$.fragment),pKo=l(),no=a("div"),F(l8.$$.fragment),_Ko=l(),Yue=a("p"),uKo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bKo=l(),Va=a("p"),vKo=o("The model class to instantiate is selected based on the "),Kue=a("code"),FKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),V=a("ul"),lF=a("li"),o1e=a("strong"),LKo=o("albert"),yKo=o(" \u2014 "),Oz=a("a"),xKo=o("AlbertForQuestionAnswering"),$Ko=o(" (ALBERT model)"),kKo=l(),iF=a("li"),r1e=a("strong"),SKo=o("bart"),RKo=o(" \u2014 "),Vz=a("a"),PKo=o("BartForQuestionAnswering"),BKo=o(" (BART model)"),IKo=l(),dF=a("li"),t1e=a("strong"),NKo=o("bert"),qKo=o(" \u2014 "),Xz=a("a"),jKo=o("BertForQuestionAnswering"),DKo=o(" (BERT model)"),GKo=l(),cF=a("li"),a1e=a("strong"),OKo=o("big_bird"),VKo=o(" \u2014 "),zz=a("a"),XKo=o("BigBirdForQuestionAnswering"),zKo=o(" (BigBird model)"),QKo=l(),fF=a("li"),n1e=a("strong"),WKo=o("bigbird_pegasus"),HKo=o(" \u2014 "),Qz=a("a"),UKo=o("BigBirdPegasusForQuestionAnswering"),JKo=o(" (BigBird-Pegasus model)"),YKo=l(),mF=a("li"),s1e=a("strong"),KKo=o("camembert"),ZKo=o(" \u2014 "),Wz=a("a"),eZo=o("CamembertForQuestionAnswering"),oZo=o(" (CamemBERT model)"),rZo=l(),gF=a("li"),l1e=a("strong"),tZo=o("canine"),aZo=o(" \u2014 "),Hz=a("a"),nZo=o("CanineForQuestionAnswering"),sZo=o(" (CANINE model)"),lZo=l(),hF=a("li"),i1e=a("strong"),iZo=o("convbert"),dZo=o(" \u2014 "),Uz=a("a"),cZo=o("ConvBertForQuestionAnswering"),fZo=o(" (ConvBERT model)"),mZo=l(),pF=a("li"),d1e=a("strong"),gZo=o("data2vec-text"),hZo=o(" \u2014 "),Jz=a("a"),pZo=o("Data2VecTextForQuestionAnswering"),_Zo=o(" (Data2VecText model)"),uZo=l(),_F=a("li"),c1e=a("strong"),bZo=o("deberta"),vZo=o(" \u2014 "),Yz=a("a"),FZo=o("DebertaForQuestionAnswering"),TZo=o(" (DeBERTa model)"),MZo=l(),uF=a("li"),f1e=a("strong"),EZo=o("deberta-v2"),CZo=o(" \u2014 "),Kz=a("a"),wZo=o("DebertaV2ForQuestionAnswering"),AZo=o(" (DeBERTa-v2 model)"),LZo=l(),bF=a("li"),m1e=a("strong"),yZo=o("distilbert"),xZo=o(" \u2014 "),Zz=a("a"),$Zo=o("DistilBertForQuestionAnswering"),kZo=o(" (DistilBERT model)"),SZo=l(),vF=a("li"),g1e=a("strong"),RZo=o("electra"),PZo=o(" \u2014 "),eQ=a("a"),BZo=o("ElectraForQuestionAnswering"),IZo=o(" (ELECTRA model)"),NZo=l(),FF=a("li"),h1e=a("strong"),qZo=o("flaubert"),jZo=o(" \u2014 "),oQ=a("a"),DZo=o("FlaubertForQuestionAnsweringSimple"),GZo=o(" (FlauBERT model)"),OZo=l(),TF=a("li"),p1e=a("strong"),VZo=o("fnet"),XZo=o(" \u2014 "),rQ=a("a"),zZo=o("FNetForQuestionAnswering"),QZo=o(" (FNet model)"),WZo=l(),MF=a("li"),_1e=a("strong"),HZo=o("funnel"),UZo=o(" \u2014 "),tQ=a("a"),JZo=o("FunnelForQuestionAnswering"),YZo=o(" (Funnel Transformer model)"),KZo=l(),EF=a("li"),u1e=a("strong"),ZZo=o("gptj"),eer=o(" \u2014 "),aQ=a("a"),oer=o("GPTJForQuestionAnswering"),rer=o(" (GPT-J model)"),ter=l(),CF=a("li"),b1e=a("strong"),aer=o("ibert"),ner=o(" \u2014 "),nQ=a("a"),ser=o("IBertForQuestionAnswering"),ler=o(" (I-BERT model)"),ier=l(),wF=a("li"),v1e=a("strong"),der=o("layoutlmv2"),cer=o(" \u2014 "),sQ=a("a"),fer=o("LayoutLMv2ForQuestionAnswering"),mer=o(" (LayoutLMv2 model)"),ger=l(),AF=a("li"),F1e=a("strong"),her=o("layoutlmv3"),per=o(" \u2014 "),lQ=a("a"),_er=o("LayoutLMv3ForQuestionAnswering"),uer=o(" (LayoutLMv3 model)"),ber=l(),LF=a("li"),T1e=a("strong"),ver=o("led"),Fer=o(" \u2014 "),iQ=a("a"),Ter=o("LEDForQuestionAnswering"),Mer=o(" (LED model)"),Eer=l(),yF=a("li"),M1e=a("strong"),Cer=o("longformer"),wer=o(" \u2014 "),dQ=a("a"),Aer=o("LongformerForQuestionAnswering"),Ler=o(" (Longformer model)"),yer=l(),xF=a("li"),E1e=a("strong"),xer=o("lxmert"),$er=o(" \u2014 "),cQ=a("a"),ker=o("LxmertForQuestionAnswering"),Ser=o(" (LXMERT model)"),Rer=l(),$F=a("li"),C1e=a("strong"),Per=o("mbart"),Ber=o(" \u2014 "),fQ=a("a"),Ier=o("MBartForQuestionAnswering"),Ner=o(" (mBART model)"),qer=l(),kF=a("li"),w1e=a("strong"),jer=o("megatron-bert"),Der=o(" \u2014 "),mQ=a("a"),Ger=o("MegatronBertForQuestionAnswering"),Oer=o(" (Megatron-BERT model)"),Ver=l(),SF=a("li"),A1e=a("strong"),Xer=o("mobilebert"),zer=o(" \u2014 "),gQ=a("a"),Qer=o("MobileBertForQuestionAnswering"),Wer=o(" (MobileBERT model)"),Her=l(),RF=a("li"),L1e=a("strong"),Uer=o("mpnet"),Jer=o(" \u2014 "),hQ=a("a"),Yer=o("MPNetForQuestionAnswering"),Ker=o(" (MPNet model)"),Zer=l(),PF=a("li"),y1e=a("strong"),eor=o("nezha"),oor=o(" \u2014 "),pQ=a("a"),ror=o("NezhaForQuestionAnswering"),tor=o(" (Nezha model)"),aor=l(),BF=a("li"),x1e=a("strong"),nor=o("nystromformer"),sor=o(" \u2014 "),_Q=a("a"),lor=o("NystromformerForQuestionAnswering"),ior=o(" (Nystr\xF6mformer model)"),dor=l(),IF=a("li"),$1e=a("strong"),cor=o("qdqbert"),mor=o(" \u2014 "),uQ=a("a"),gor=o("QDQBertForQuestionAnswering"),hor=o(" (QDQBert model)"),por=l(),NF=a("li"),k1e=a("strong"),_or=o("reformer"),uor=o(" \u2014 "),bQ=a("a"),bor=o("ReformerForQuestionAnswering"),vor=o(" (Reformer model)"),For=l(),qF=a("li"),S1e=a("strong"),Tor=o("rembert"),Mor=o(" \u2014 "),vQ=a("a"),Eor=o("RemBertForQuestionAnswering"),Cor=o(" (RemBERT model)"),wor=l(),jF=a("li"),R1e=a("strong"),Aor=o("roberta"),Lor=o(" \u2014 "),FQ=a("a"),yor=o("RobertaForQuestionAnswering"),xor=o(" (RoBERTa model)"),$or=l(),DF=a("li"),P1e=a("strong"),kor=o("roformer"),Sor=o(" \u2014 "),TQ=a("a"),Ror=o("RoFormerForQuestionAnswering"),Por=o(" (RoFormer model)"),Bor=l(),GF=a("li"),B1e=a("strong"),Ior=o("splinter"),Nor=o(" \u2014 "),MQ=a("a"),qor=o("SplinterForQuestionAnswering"),jor=o(" (Splinter model)"),Dor=l(),OF=a("li"),I1e=a("strong"),Gor=o("squeezebert"),Oor=o(" \u2014 "),EQ=a("a"),Vor=o("SqueezeBertForQuestionAnswering"),Xor=o(" (SqueezeBERT model)"),zor=l(),VF=a("li"),N1e=a("strong"),Qor=o("xlm"),Wor=o(" \u2014 "),CQ=a("a"),Hor=o("XLMForQuestionAnsweringSimple"),Uor=o(" (XLM model)"),Jor=l(),XF=a("li"),q1e=a("strong"),Yor=o("xlm-roberta"),Kor=o(" \u2014 "),wQ=a("a"),Zor=o("XLMRobertaForQuestionAnswering"),err=o(" (XLM-RoBERTa model)"),orr=l(),zF=a("li"),j1e=a("strong"),rrr=o("xlm-roberta-xl"),trr=o(" \u2014 "),AQ=a("a"),arr=o("XLMRobertaXLForQuestionAnswering"),nrr=o(" (XLM-RoBERTa-XL model)"),srr=l(),QF=a("li"),D1e=a("strong"),lrr=o("xlnet"),irr=o(" \u2014 "),LQ=a("a"),drr=o("XLNetForQuestionAnsweringSimple"),crr=o(" (XLNet model)"),frr=l(),WF=a("li"),G1e=a("strong"),mrr=o("yoso"),grr=o(" \u2014 "),yQ=a("a"),hrr=o("YosoForQuestionAnswering"),prr=o(" (YOSO model)"),_rr=l(),HF=a("p"),urr=o("The model is set in evaluation mode by default using "),O1e=a("code"),brr=o("model.eval()"),vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=a("code"),Frr=o("model.train()"),Trr=l(),F(UF.$$.fragment),cVe=l(),gd=a("h2"),JF=a("a"),X1e=a("span"),F(i8.$$.fragment),Mrr=l(),z1e=a("span"),Err=o("AutoModelForTableQuestionAnswering"),fVe=l(),Do=a("div"),F(d8.$$.fragment),Crr=l(),hd=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xQ=a("a"),Arr=o("from_pretrained()"),Lrr=o(" class method or the "),$Q=a("a"),yrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),c8=a("p"),krr=o("This class cannot be instantiated directly using "),Q1e=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Prr=l(),pt=a("div"),F(f8.$$.fragment),Brr=l(),W1e=a("p"),Irr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Nrr=l(),pd=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),F(YF.$$.fragment),Xrr=l(),so=a("div"),F(m8.$$.fragment),zrr=l(),U1e=a("p"),Qrr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wrr=l(),Xa=a("p"),Hrr=o("The model class to instantiate is selected based on the "),J1e=a("code"),Urr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),Z1e=a("ul"),KF=a("li"),e7e=a("strong"),rtr=o("tapas"),ttr=o(" \u2014 "),SQ=a("a"),atr=o("TapasForQuestionAnswering"),ntr=o(" (TAPAS model)"),str=l(),ZF=a("p"),ltr=o("The model is set in evaluation mode by default using "),o7e=a("code"),itr=o("model.eval()"),dtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r7e=a("code"),ctr=o("model.train()"),ftr=l(),F(e6.$$.fragment),mVe=l(),_d=a("h2"),o6=a("a"),t7e=a("span"),F(g8.$$.fragment),mtr=l(),a7e=a("span"),gtr=o("AutoModelForImageClassification"),gVe=l(),Go=a("div"),F(h8.$$.fragment),htr=l(),ud=a("p"),ptr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RQ=a("a"),_tr=o("from_pretrained()"),utr=o(" class method or the "),PQ=a("a"),btr=o("from_config()"),vtr=o(` class
method.`),Ftr=l(),p8=a("p"),Ttr=o("This class cannot be instantiated directly using "),n7e=a("code"),Mtr=o("__init__()"),Etr=o(" (throws an error)."),Ctr=l(),_t=a("div"),F(_8.$$.fragment),wtr=l(),s7e=a("p"),Atr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ltr=l(),bd=a("p"),ytr=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),xtr=o("not"),$tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),ktr=o("from_pretrained()"),Str=o(" to load the model weights."),Rtr=l(),F(r6.$$.fragment),Ptr=l(),lo=a("div"),F(u8.$$.fragment),Btr=l(),i7e=a("p"),Itr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ntr=l(),za=a("p"),qtr=o("The model class to instantiate is selected based on the "),d7e=a("code"),jtr=o("model_type"),Dtr=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),Gtr=o("pretrained_model_name_or_path"),Otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),Vtr=o("pretrained_model_name_or_path"),Xtr=o(":"),ztr=l(),Fe=a("ul"),t6=a("li"),m7e=a("strong"),Qtr=o("beit"),Wtr=o(" \u2014 "),IQ=a("a"),Htr=o("BeitForImageClassification"),Utr=o(" (BEiT model)"),Jtr=l(),a6=a("li"),g7e=a("strong"),Ytr=o("convnext"),Ktr=o(" \u2014 "),NQ=a("a"),Ztr=o("ConvNextForImageClassification"),ear=o(" (ConvNeXT model)"),oar=l(),n6=a("li"),h7e=a("strong"),rar=o("cvt"),tar=o(" \u2014 "),qQ=a("a"),aar=o("CvtForImageClassification"),nar=o(" (CvT model)"),sar=l(),s6=a("li"),p7e=a("strong"),lar=o("data2vec-vision"),iar=o(" \u2014 "),jQ=a("a"),dar=o("Data2VecVisionForImageClassification"),car=o(" (Data2VecVision model)"),far=l(),Ws=a("li"),_7e=a("strong"),mar=o("deit"),gar=o(" \u2014 "),DQ=a("a"),har=o("DeiTForImageClassification"),par=o(" or "),GQ=a("a"),_ar=o("DeiTForImageClassificationWithTeacher"),uar=o(" (DeiT model)"),bar=l(),l6=a("li"),u7e=a("strong"),Far=o("imagegpt"),Tar=o(" \u2014 "),OQ=a("a"),Mar=o("ImageGPTForImageClassification"),Ear=o(" (ImageGPT model)"),Car=l(),Hs=a("li"),b7e=a("strong"),war=o("levit"),Aar=o(" \u2014 "),VQ=a("a"),Lar=o("LevitForImageClassification"),yar=o(" or "),XQ=a("a"),xar=o("LevitForImageClassificationWithTeacher"),$ar=o(" (LeViT model)"),kar=l(),ut=a("li"),v7e=a("strong"),Sar=o("perceiver"),Rar=o(" \u2014 "),zQ=a("a"),Par=o("PerceiverForImageClassificationLearned"),Bar=o(" or "),QQ=a("a"),Iar=o("PerceiverForImageClassificationFourier"),Nar=o(" or "),WQ=a("a"),qar=o("PerceiverForImageClassificationConvProcessing"),jar=o(" (Perceiver model)"),Dar=l(),i6=a("li"),F7e=a("strong"),Gar=o("poolformer"),Oar=o(" \u2014 "),HQ=a("a"),Var=o("PoolFormerForImageClassification"),Xar=o(" (PoolFormer model)"),zar=l(),d6=a("li"),T7e=a("strong"),Qar=o("regnet"),War=o(" \u2014 "),UQ=a("a"),Har=o("RegNetForImageClassification"),Uar=o(" (RegNet model)"),Jar=l(),c6=a("li"),M7e=a("strong"),Yar=o("resnet"),Kar=o(" \u2014 "),JQ=a("a"),Zar=o("ResNetForImageClassification"),enr=o(" (ResNet model)"),onr=l(),f6=a("li"),E7e=a("strong"),rnr=o("segformer"),tnr=o(" \u2014 "),YQ=a("a"),anr=o("SegformerForImageClassification"),nnr=o(" (SegFormer model)"),snr=l(),m6=a("li"),C7e=a("strong"),lnr=o("swin"),inr=o(" \u2014 "),KQ=a("a"),dnr=o("SwinForImageClassification"),cnr=o(" (Swin Transformer model)"),fnr=l(),g6=a("li"),w7e=a("strong"),mnr=o("van"),gnr=o(" \u2014 "),ZQ=a("a"),hnr=o("VanForImageClassification"),pnr=o(" (VAN model)"),_nr=l(),h6=a("li"),A7e=a("strong"),unr=o("vit"),bnr=o(" \u2014 "),eW=a("a"),vnr=o("ViTForImageClassification"),Fnr=o(" (ViT model)"),Tnr=l(),p6=a("p"),Mnr=o("The model is set in evaluation mode by default using "),L7e=a("code"),Enr=o("model.eval()"),Cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y7e=a("code"),wnr=o("model.train()"),Anr=l(),F(_6.$$.fragment),hVe=l(),vd=a("h2"),u6=a("a"),x7e=a("span"),F(b8.$$.fragment),Lnr=l(),$7e=a("span"),ynr=o("AutoModelForVision2Seq"),pVe=l(),Oo=a("div"),F(v8.$$.fragment),xnr=l(),Fd=a("p"),$nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oW=a("a"),knr=o("from_pretrained()"),Snr=o(" class method or the "),rW=a("a"),Rnr=o("from_config()"),Pnr=o(` class
method.`),Bnr=l(),F8=a("p"),Inr=o("This class cannot be instantiated directly using "),k7e=a("code"),Nnr=o("__init__()"),qnr=o(" (throws an error)."),jnr=l(),bt=a("div"),F(T8.$$.fragment),Dnr=l(),S7e=a("p"),Gnr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Onr=l(),Td=a("p"),Vnr=o(`Note:
Loading a model from its configuration file does `),R7e=a("strong"),Xnr=o("not"),znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),Qnr=o("from_pretrained()"),Wnr=o(" to load the model weights."),Hnr=l(),F(b6.$$.fragment),Unr=l(),io=a("div"),F(M8.$$.fragment),Jnr=l(),P7e=a("p"),Ynr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Knr=l(),Qa=a("p"),Znr=o("The model class to instantiate is selected based on the "),B7e=a("code"),esr=o("model_type"),osr=o(` property of the config object (either
passed as an argument or loaded from `),I7e=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(":"),ssr=l(),q7e=a("ul"),v6=a("li"),j7e=a("strong"),lsr=o("vision-encoder-decoder"),isr=o(" \u2014 "),aW=a("a"),dsr=o("VisionEncoderDecoderModel"),csr=o(" (Vision Encoder decoder model)"),fsr=l(),F6=a("p"),msr=o("The model is set in evaluation mode by default using "),D7e=a("code"),gsr=o("model.eval()"),hsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G7e=a("code"),psr=o("model.train()"),_sr=l(),F(T6.$$.fragment),_Ve=l(),Md=a("h2"),M6=a("a"),O7e=a("span"),F(E8.$$.fragment),usr=l(),V7e=a("span"),bsr=o("AutoModelForVisualQuestionAnswering"),uVe=l(),Vo=a("div"),F(C8.$$.fragment),vsr=l(),Ed=a("p"),Fsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),nW=a("a"),Tsr=o("from_pretrained()"),Msr=o(" class method or the "),sW=a("a"),Esr=o("from_config()"),Csr=o(` class
method.`),wsr=l(),w8=a("p"),Asr=o("This class cannot be instantiated directly using "),X7e=a("code"),Lsr=o("__init__()"),ysr=o(" (throws an error)."),xsr=l(),vt=a("div"),F(A8.$$.fragment),$sr=l(),z7e=a("p"),ksr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ssr=l(),Cd=a("p"),Rsr=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),Psr=o("not"),Bsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Isr=o("from_pretrained()"),Nsr=o(" to load the model weights."),qsr=l(),F(E6.$$.fragment),jsr=l(),co=a("div"),F(L8.$$.fragment),Dsr=l(),W7e=a("p"),Gsr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Osr=l(),Wa=a("p"),Vsr=o("The model class to instantiate is selected based on the "),H7e=a("code"),Xsr=o("model_type"),zsr=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),Qsr=o("pretrained_model_name_or_path"),Wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),Hsr=o("pretrained_model_name_or_path"),Usr=o(":"),Jsr=l(),Y7e=a("ul"),C6=a("li"),K7e=a("strong"),Ysr=o("vilt"),Ksr=o(" \u2014 "),iW=a("a"),Zsr=o("ViltForQuestionAnswering"),elr=o(" (ViLT model)"),olr=l(),w6=a("p"),rlr=o("The model is set in evaluation mode by default using "),Z7e=a("code"),tlr=o("model.eval()"),alr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),nlr=o("model.train()"),slr=l(),F(A6.$$.fragment),bVe=l(),wd=a("h2"),L6=a("a"),o2e=a("span"),F(y8.$$.fragment),llr=l(),r2e=a("span"),ilr=o("AutoModelForAudioClassification"),vVe=l(),Xo=a("div"),F(x8.$$.fragment),dlr=l(),Ad=a("p"),clr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dW=a("a"),flr=o("from_pretrained()"),mlr=o(" class method or the "),cW=a("a"),glr=o("from_config()"),hlr=o(` class
method.`),plr=l(),$8=a("p"),_lr=o("This class cannot be instantiated directly using "),t2e=a("code"),ulr=o("__init__()"),blr=o(" (throws an error)."),vlr=l(),Ft=a("div"),F(k8.$$.fragment),Flr=l(),a2e=a("p"),Tlr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mlr=l(),Ld=a("p"),Elr=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),Clr=o("not"),wlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),Alr=o("from_pretrained()"),Llr=o(" to load the model weights."),ylr=l(),F(y6.$$.fragment),xlr=l(),fo=a("div"),F(S8.$$.fragment),$lr=l(),s2e=a("p"),klr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Slr=l(),Ha=a("p"),Rlr=o("The model class to instantiate is selected based on the "),l2e=a("code"),Plr=o("model_type"),Blr=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),Ilr=o("pretrained_model_name_or_path"),Nlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),qlr=o("pretrained_model_name_or_path"),jlr=o(":"),Dlr=l(),Pe=a("ul"),x6=a("li"),c2e=a("strong"),Glr=o("data2vec-audio"),Olr=o(" \u2014 "),mW=a("a"),Vlr=o("Data2VecAudioForSequenceClassification"),Xlr=o(" (Data2VecAudio model)"),zlr=l(),$6=a("li"),f2e=a("strong"),Qlr=o("hubert"),Wlr=o(" \u2014 "),gW=a("a"),Hlr=o("HubertForSequenceClassification"),Ulr=o(" (Hubert model)"),Jlr=l(),k6=a("li"),m2e=a("strong"),Ylr=o("sew"),Klr=o(" \u2014 "),hW=a("a"),Zlr=o("SEWForSequenceClassification"),eir=o(" (SEW model)"),oir=l(),S6=a("li"),g2e=a("strong"),rir=o("sew-d"),tir=o(" \u2014 "),pW=a("a"),air=o("SEWDForSequenceClassification"),nir=o(" (SEW-D model)"),sir=l(),R6=a("li"),h2e=a("strong"),lir=o("unispeech"),iir=o(" \u2014 "),_W=a("a"),dir=o("UniSpeechForSequenceClassification"),cir=o(" (UniSpeech model)"),fir=l(),P6=a("li"),p2e=a("strong"),mir=o("unispeech-sat"),gir=o(" \u2014 "),uW=a("a"),hir=o("UniSpeechSatForSequenceClassification"),pir=o(" (UniSpeechSat model)"),_ir=l(),B6=a("li"),_2e=a("strong"),uir=o("wav2vec2"),bir=o(" \u2014 "),bW=a("a"),vir=o("Wav2Vec2ForSequenceClassification"),Fir=o(" (Wav2Vec2 model)"),Tir=l(),I6=a("li"),u2e=a("strong"),Mir=o("wav2vec2-conformer"),Eir=o(" \u2014 "),vW=a("a"),Cir=o("Wav2Vec2ConformerForSequenceClassification"),wir=o(" (Wav2Vec2-Conformer model)"),Air=l(),N6=a("li"),b2e=a("strong"),Lir=o("wavlm"),yir=o(" \u2014 "),FW=a("a"),xir=o("WavLMForSequenceClassification"),$ir=o(" (WavLM model)"),kir=l(),q6=a("p"),Sir=o("The model is set in evaluation mode by default using "),v2e=a("code"),Rir=o("model.eval()"),Pir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=a("code"),Bir=o("model.train()"),Iir=l(),F(j6.$$.fragment),FVe=l(),yd=a("h2"),D6=a("a"),T2e=a("span"),F(R8.$$.fragment),Nir=l(),M2e=a("span"),qir=o("AutoModelForAudioFrameClassification"),TVe=l(),zo=a("div"),F(P8.$$.fragment),jir=l(),xd=a("p"),Dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),TW=a("a"),Gir=o("from_pretrained()"),Oir=o(" class method or the "),MW=a("a"),Vir=o("from_config()"),Xir=o(` class
method.`),zir=l(),B8=a("p"),Qir=o("This class cannot be instantiated directly using "),E2e=a("code"),Wir=o("__init__()"),Hir=o(" (throws an error)."),Uir=l(),Tt=a("div"),F(I8.$$.fragment),Jir=l(),C2e=a("p"),Yir=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Kir=l(),$d=a("p"),Zir=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),edr=o("not"),odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),rdr=o("from_pretrained()"),tdr=o(" to load the model weights."),adr=l(),F(G6.$$.fragment),ndr=l(),mo=a("div"),F(N8.$$.fragment),sdr=l(),A2e=a("p"),ldr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),idr=l(),Ua=a("p"),ddr=o("The model class to instantiate is selected based on the "),L2e=a("code"),cdr=o("model_type"),fdr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),hdr=o("pretrained_model_name_or_path"),pdr=o(":"),_dr=l(),Qo=a("ul"),O6=a("li"),$2e=a("strong"),udr=o("data2vec-audio"),bdr=o(" \u2014 "),CW=a("a"),vdr=o("Data2VecAudioForAudioFrameClassification"),Fdr=o(" (Data2VecAudio model)"),Tdr=l(),V6=a("li"),k2e=a("strong"),Mdr=o("mctct"),Edr=o(" \u2014 "),wW=a("a"),Cdr=o("MCTCTForAudioFrameClassification"),wdr=o(" (M-CTC-T model)"),Adr=l(),X6=a("li"),S2e=a("strong"),Ldr=o("unispeech-sat"),ydr=o(" \u2014 "),AW=a("a"),xdr=o("UniSpeechSatForAudioFrameClassification"),$dr=o(" (UniSpeechSat model)"),kdr=l(),z6=a("li"),R2e=a("strong"),Sdr=o("wav2vec2"),Rdr=o(" \u2014 "),LW=a("a"),Pdr=o("Wav2Vec2ForAudioFrameClassification"),Bdr=o(" (Wav2Vec2 model)"),Idr=l(),Q6=a("li"),P2e=a("strong"),Ndr=o("wav2vec2-conformer"),qdr=o(" \u2014 "),yW=a("a"),jdr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ddr=o(" (Wav2Vec2-Conformer model)"),Gdr=l(),W6=a("li"),B2e=a("strong"),Odr=o("wavlm"),Vdr=o(" \u2014 "),xW=a("a"),Xdr=o("WavLMForAudioFrameClassification"),zdr=o(" (WavLM model)"),Qdr=l(),H6=a("p"),Wdr=o("The model is set in evaluation mode by default using "),I2e=a("code"),Hdr=o("model.eval()"),Udr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=a("code"),Jdr=o("model.train()"),Ydr=l(),F(U6.$$.fragment),MVe=l(),kd=a("h2"),J6=a("a"),q2e=a("span"),F(q8.$$.fragment),Kdr=l(),j2e=a("span"),Zdr=o("AutoModelForCTC"),EVe=l(),Wo=a("div"),F(j8.$$.fragment),ecr=l(),Sd=a("p"),ocr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$W=a("a"),rcr=o("from_pretrained()"),tcr=o(" class method or the "),kW=a("a"),acr=o("from_config()"),ncr=o(` class
method.`),scr=l(),D8=a("p"),lcr=o("This class cannot be instantiated directly using "),D2e=a("code"),icr=o("__init__()"),dcr=o(" (throws an error)."),ccr=l(),Mt=a("div"),F(G8.$$.fragment),fcr=l(),G2e=a("p"),mcr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gcr=l(),Rd=a("p"),hcr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),pcr=o("not"),_cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),ucr=o("from_pretrained()"),bcr=o(" to load the model weights."),vcr=l(),F(Y6.$$.fragment),Fcr=l(),go=a("div"),F(O8.$$.fragment),Tcr=l(),V2e=a("p"),Mcr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ecr=l(),Ja=a("p"),Ccr=o("The model class to instantiate is selected based on the "),X2e=a("code"),wcr=o("model_type"),Acr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),Lcr=o("pretrained_model_name_or_path"),ycr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),xcr=o("pretrained_model_name_or_path"),$cr=o(":"),kcr=l(),Le=a("ul"),K6=a("li"),W2e=a("strong"),Scr=o("data2vec-audio"),Rcr=o(" \u2014 "),RW=a("a"),Pcr=o("Data2VecAudioForCTC"),Bcr=o(" (Data2VecAudio model)"),Icr=l(),Z6=a("li"),H2e=a("strong"),Ncr=o("hubert"),qcr=o(" \u2014 "),PW=a("a"),jcr=o("HubertForCTC"),Dcr=o(" (Hubert model)"),Gcr=l(),eT=a("li"),U2e=a("strong"),Ocr=o("mctct"),Vcr=o(" \u2014 "),BW=a("a"),Xcr=o("MCTCTForCTC"),zcr=o(" (M-CTC-T model)"),Qcr=l(),oT=a("li"),J2e=a("strong"),Wcr=o("sew"),Hcr=o(" \u2014 "),IW=a("a"),Ucr=o("SEWForCTC"),Jcr=o(" (SEW model)"),Ycr=l(),rT=a("li"),Y2e=a("strong"),Kcr=o("sew-d"),Zcr=o(" \u2014 "),NW=a("a"),efr=o("SEWDForCTC"),ofr=o(" (SEW-D model)"),rfr=l(),tT=a("li"),K2e=a("strong"),tfr=o("unispeech"),afr=o(" \u2014 "),qW=a("a"),nfr=o("UniSpeechForCTC"),sfr=o(" (UniSpeech model)"),lfr=l(),aT=a("li"),Z2e=a("strong"),ifr=o("unispeech-sat"),dfr=o(" \u2014 "),jW=a("a"),cfr=o("UniSpeechSatForCTC"),ffr=o(" (UniSpeechSat model)"),mfr=l(),nT=a("li"),ebe=a("strong"),gfr=o("wav2vec2"),hfr=o(" \u2014 "),DW=a("a"),pfr=o("Wav2Vec2ForCTC"),_fr=o(" (Wav2Vec2 model)"),ufr=l(),sT=a("li"),obe=a("strong"),bfr=o("wav2vec2-conformer"),vfr=o(" \u2014 "),GW=a("a"),Ffr=o("Wav2Vec2ConformerForCTC"),Tfr=o(" (Wav2Vec2-Conformer model)"),Mfr=l(),lT=a("li"),rbe=a("strong"),Efr=o("wavlm"),Cfr=o(" \u2014 "),OW=a("a"),wfr=o("WavLMForCTC"),Afr=o(" (WavLM model)"),Lfr=l(),iT=a("p"),yfr=o("The model is set in evaluation mode by default using "),tbe=a("code"),xfr=o("model.eval()"),$fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=a("code"),kfr=o("model.train()"),Sfr=l(),F(dT.$$.fragment),CVe=l(),Pd=a("h2"),cT=a("a"),nbe=a("span"),F(V8.$$.fragment),Rfr=l(),sbe=a("span"),Pfr=o("AutoModelForSpeechSeq2Seq"),wVe=l(),Ho=a("div"),F(X8.$$.fragment),Bfr=l(),Bd=a("p"),Ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VW=a("a"),Nfr=o("from_pretrained()"),qfr=o(" class method or the "),XW=a("a"),jfr=o("from_config()"),Dfr=o(` class
method.`),Gfr=l(),z8=a("p"),Ofr=o("This class cannot be instantiated directly using "),lbe=a("code"),Vfr=o("__init__()"),Xfr=o(" (throws an error)."),zfr=l(),Et=a("div"),F(Q8.$$.fragment),Qfr=l(),ibe=a("p"),Wfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hfr=l(),Id=a("p"),Ufr=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),Jfr=o("not"),Yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),Kfr=o("from_pretrained()"),Zfr=o(" to load the model weights."),emr=l(),F(fT.$$.fragment),omr=l(),ho=a("div"),F(W8.$$.fragment),rmr=l(),cbe=a("p"),tmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),amr=l(),Ya=a("p"),nmr=o("The model class to instantiate is selected based on the "),fbe=a("code"),smr=o("model_type"),lmr=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),imr=o("pretrained_model_name_or_path"),dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),cmr=o("pretrained_model_name_or_path"),fmr=o(":"),mmr=l(),H8=a("ul"),mT=a("li"),hbe=a("strong"),gmr=o("speech-encoder-decoder"),hmr=o(" \u2014 "),QW=a("a"),pmr=o("SpeechEncoderDecoderModel"),_mr=o(" (Speech Encoder decoder model)"),umr=l(),gT=a("li"),pbe=a("strong"),bmr=o("speech_to_text"),vmr=o(" \u2014 "),WW=a("a"),Fmr=o("Speech2TextForConditionalGeneration"),Tmr=o(" (Speech2Text model)"),Mmr=l(),hT=a("p"),Emr=o("The model is set in evaluation mode by default using "),_be=a("code"),Cmr=o("model.eval()"),wmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=a("code"),Amr=o("model.train()"),Lmr=l(),F(pT.$$.fragment),AVe=l(),Nd=a("h2"),_T=a("a"),bbe=a("span"),F(U8.$$.fragment),ymr=l(),vbe=a("span"),xmr=o("AutoModelForAudioXVector"),LVe=l(),Uo=a("div"),F(J8.$$.fragment),$mr=l(),qd=a("p"),kmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),HW=a("a"),Smr=o("from_pretrained()"),Rmr=o(" class method or the "),UW=a("a"),Pmr=o("from_config()"),Bmr=o(` class
method.`),Imr=l(),Y8=a("p"),Nmr=o("This class cannot be instantiated directly using "),Fbe=a("code"),qmr=o("__init__()"),jmr=o(" (throws an error)."),Dmr=l(),Ct=a("div"),F(K8.$$.fragment),Gmr=l(),Tbe=a("p"),Omr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Vmr=l(),jd=a("p"),Xmr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),zmr=o("not"),Qmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Wmr=o("from_pretrained()"),Hmr=o(" to load the model weights."),Umr=l(),F(uT.$$.fragment),Jmr=l(),po=a("div"),F(Z8.$$.fragment),Ymr=l(),Ebe=a("p"),Kmr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zmr=l(),Ka=a("p"),egr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),ogr=o("model_type"),rgr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),tgr=o("pretrained_model_name_or_path"),agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),ngr=o("pretrained_model_name_or_path"),sgr=o(":"),lgr=l(),ot=a("ul"),bT=a("li"),Lbe=a("strong"),igr=o("data2vec-audio"),dgr=o(" \u2014 "),YW=a("a"),cgr=o("Data2VecAudioForXVector"),fgr=o(" (Data2VecAudio model)"),mgr=l(),vT=a("li"),ybe=a("strong"),ggr=o("unispeech-sat"),hgr=o(" \u2014 "),KW=a("a"),pgr=o("UniSpeechSatForXVector"),_gr=o(" (UniSpeechSat model)"),ugr=l(),FT=a("li"),xbe=a("strong"),bgr=o("wav2vec2"),vgr=o(" \u2014 "),ZW=a("a"),Fgr=o("Wav2Vec2ForXVector"),Tgr=o(" (Wav2Vec2 model)"),Mgr=l(),TT=a("li"),$be=a("strong"),Egr=o("wav2vec2-conformer"),Cgr=o(" \u2014 "),eH=a("a"),wgr=o("Wav2Vec2ConformerForXVector"),Agr=o(" (Wav2Vec2-Conformer model)"),Lgr=l(),MT=a("li"),kbe=a("strong"),ygr=o("wavlm"),xgr=o(" \u2014 "),oH=a("a"),$gr=o("WavLMForXVector"),kgr=o(" (WavLM model)"),Sgr=l(),ET=a("p"),Rgr=o("The model is set in evaluation mode by default using "),Sbe=a("code"),Pgr=o("model.eval()"),Bgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=a("code"),Igr=o("model.train()"),Ngr=l(),F(CT.$$.fragment),yVe=l(),Dd=a("h2"),wT=a("a"),Pbe=a("span"),F(e9.$$.fragment),qgr=l(),Bbe=a("span"),jgr=o("AutoModelForMaskedImageModeling"),xVe=l(),Jo=a("div"),F(o9.$$.fragment),Dgr=l(),Gd=a("p"),Ggr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rH=a("a"),Ogr=o("from_pretrained()"),Vgr=o(" class method or the "),tH=a("a"),Xgr=o("from_config()"),zgr=o(` class
method.`),Qgr=l(),r9=a("p"),Wgr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Hgr=o("__init__()"),Ugr=o(" (throws an error)."),Jgr=l(),wt=a("div"),F(t9.$$.fragment),Ygr=l(),Nbe=a("p"),Kgr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zgr=l(),Od=a("p"),ehr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),ohr=o("not"),rhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),thr=o("from_pretrained()"),ahr=o(" to load the model weights."),nhr=l(),F(AT.$$.fragment),shr=l(),_o=a("div"),F(a9.$$.fragment),lhr=l(),jbe=a("p"),ihr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dhr=l(),Za=a("p"),chr=o("The model class to instantiate is selected based on the "),Dbe=a("code"),fhr=o("model_type"),mhr=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(":"),uhr=l(),Vd=a("ul"),LT=a("li"),Vbe=a("strong"),bhr=o("deit"),vhr=o(" \u2014 "),nH=a("a"),Fhr=o("DeiTForMaskedImageModeling"),Thr=o(" (DeiT model)"),Mhr=l(),yT=a("li"),Xbe=a("strong"),Ehr=o("swin"),Chr=o(" \u2014 "),sH=a("a"),whr=o("SwinForMaskedImageModeling"),Ahr=o(" (Swin Transformer model)"),Lhr=l(),xT=a("li"),zbe=a("strong"),yhr=o("vit"),xhr=o(" \u2014 "),lH=a("a"),$hr=o("ViTForMaskedImageModeling"),khr=o(" (ViT model)"),Shr=l(),$T=a("p"),Rhr=o("The model is set in evaluation mode by default using "),Qbe=a("code"),Phr=o("model.eval()"),Bhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=a("code"),Ihr=o("model.train()"),Nhr=l(),F(kT.$$.fragment),$Ve=l(),Xd=a("h2"),ST=a("a"),Hbe=a("span"),F(n9.$$.fragment),qhr=l(),Ube=a("span"),jhr=o("AutoModelForObjectDetection"),kVe=l(),Yo=a("div"),F(s9.$$.fragment),Dhr=l(),zd=a("p"),Ghr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iH=a("a"),Ohr=o("from_pretrained()"),Vhr=o(" class method or the "),dH=a("a"),Xhr=o("from_config()"),zhr=o(` class
method.`),Qhr=l(),l9=a("p"),Whr=o("This class cannot be instantiated directly using "),Jbe=a("code"),Hhr=o("__init__()"),Uhr=o(" (throws an error)."),Jhr=l(),At=a("div"),F(i9.$$.fragment),Yhr=l(),Ybe=a("p"),Khr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Zhr=l(),Qd=a("p"),epr=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),opr=o("not"),rpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),tpr=o("from_pretrained()"),apr=o(" to load the model weights."),npr=l(),F(RT.$$.fragment),spr=l(),uo=a("div"),F(d9.$$.fragment),lpr=l(),Zbe=a("p"),ipr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dpr=l(),en=a("p"),cpr=o("The model class to instantiate is selected based on the "),eve=a("code"),fpr=o("model_type"),mpr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),gpr=o("pretrained_model_name_or_path"),hpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),ppr=o("pretrained_model_name_or_path"),_pr=o(":"),upr=l(),c9=a("ul"),PT=a("li"),tve=a("strong"),bpr=o("detr"),vpr=o(" \u2014 "),fH=a("a"),Fpr=o("DetrForObjectDetection"),Tpr=o(" (DETR model)"),Mpr=l(),BT=a("li"),ave=a("strong"),Epr=o("yolos"),Cpr=o(" \u2014 "),mH=a("a"),wpr=o("YolosForObjectDetection"),Apr=o(" (YOLOS model)"),Lpr=l(),IT=a("p"),ypr=o("The model is set in evaluation mode by default using "),nve=a("code"),xpr=o("model.eval()"),$pr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sve=a("code"),kpr=o("model.train()"),Spr=l(),F(NT.$$.fragment),SVe=l(),Wd=a("h2"),qT=a("a"),lve=a("span"),F(f9.$$.fragment),Rpr=l(),ive=a("span"),Ppr=o("AutoModelForImageSegmentation"),RVe=l(),Ko=a("div"),F(m9.$$.fragment),Bpr=l(),Hd=a("p"),Ipr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gH=a("a"),Npr=o("from_pretrained()"),qpr=o(" class method or the "),hH=a("a"),jpr=o("from_config()"),Dpr=o(` class
method.`),Gpr=l(),g9=a("p"),Opr=o("This class cannot be instantiated directly using "),dve=a("code"),Vpr=o("__init__()"),Xpr=o(" (throws an error)."),zpr=l(),Lt=a("div"),F(h9.$$.fragment),Qpr=l(),cve=a("p"),Wpr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Hpr=l(),Ud=a("p"),Upr=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),Jpr=o("not"),Ypr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),Kpr=o("from_pretrained()"),Zpr=o(" to load the model weights."),e_r=l(),F(jT.$$.fragment),o_r=l(),bo=a("div"),F(p9.$$.fragment),r_r=l(),mve=a("p"),t_r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),a_r=l(),on=a("p"),n_r=o("The model class to instantiate is selected based on the "),gve=a("code"),s_r=o("model_type"),l_r=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),i_r=o("pretrained_model_name_or_path"),d_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(":"),m_r=l(),_ve=a("ul"),DT=a("li"),uve=a("strong"),g_r=o("detr"),h_r=o(" \u2014 "),_H=a("a"),p_r=o("DetrForSegmentation"),__r=o(" (DETR model)"),u_r=l(),GT=a("p"),b_r=o("The model is set in evaluation mode by default using "),bve=a("code"),v_r=o("model.eval()"),F_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=a("code"),T_r=o("model.train()"),M_r=l(),F(OT.$$.fragment),PVe=l(),Jd=a("h2"),VT=a("a"),Fve=a("span"),F(_9.$$.fragment),E_r=l(),Tve=a("span"),C_r=o("AutoModelForSemanticSegmentation"),BVe=l(),Zo=a("div"),F(u9.$$.fragment),w_r=l(),Yd=a("p"),A_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uH=a("a"),L_r=o("from_pretrained()"),y_r=o(" class method or the "),bH=a("a"),x_r=o("from_config()"),$_r=o(` class
method.`),k_r=l(),b9=a("p"),S_r=o("This class cannot be instantiated directly using "),Mve=a("code"),R_r=o("__init__()"),P_r=o(" (throws an error)."),B_r=l(),yt=a("div"),F(v9.$$.fragment),I_r=l(),Eve=a("p"),N_r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),q_r=l(),Kd=a("p"),j_r=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),D_r=o("not"),G_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),O_r=o("from_pretrained()"),V_r=o(" to load the model weights."),X_r=l(),F(XT.$$.fragment),z_r=l(),vo=a("div"),F(F9.$$.fragment),Q_r=l(),wve=a("p"),W_r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),H_r=l(),rn=a("p"),U_r=o("The model class to instantiate is selected based on the "),Ave=a("code"),J_r=o("model_type"),Y_r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),eur=o("pretrained_model_name_or_path"),our=o(":"),rur=l(),tn=a("ul"),zT=a("li"),xve=a("strong"),tur=o("beit"),aur=o(" \u2014 "),FH=a("a"),nur=o("BeitForSemanticSegmentation"),sur=o(" (BEiT model)"),lur=l(),QT=a("li"),$ve=a("strong"),iur=o("data2vec-vision"),dur=o(" \u2014 "),TH=a("a"),cur=o("Data2VecVisionForSemanticSegmentation"),fur=o(" (Data2VecVision model)"),mur=l(),WT=a("li"),kve=a("strong"),gur=o("dpt"),hur=o(" \u2014 "),MH=a("a"),pur=o("DPTForSemanticSegmentation"),_ur=o(" (DPT model)"),uur=l(),HT=a("li"),Sve=a("strong"),bur=o("segformer"),vur=o(" \u2014 "),EH=a("a"),Fur=o("SegformerForSemanticSegmentation"),Tur=o(" (SegFormer model)"),Mur=l(),UT=a("p"),Eur=o("The model is set in evaluation mode by default using "),Rve=a("code"),Cur=o("model.eval()"),wur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),Aur=o("model.train()"),Lur=l(),F(JT.$$.fragment),IVe=l(),Zd=a("h2"),YT=a("a"),Bve=a("span"),F(T9.$$.fragment),yur=l(),Ive=a("span"),xur=o("AutoModelForInstanceSegmentation"),NVe=l(),er=a("div"),F(M9.$$.fragment),$ur=l(),ec=a("p"),kur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),CH=a("a"),Sur=o("from_pretrained()"),Rur=o(" class method or the "),wH=a("a"),Pur=o("from_config()"),Bur=o(` class
method.`),Iur=l(),E9=a("p"),Nur=o("This class cannot be instantiated directly using "),Nve=a("code"),qur=o("__init__()"),jur=o(" (throws an error)."),Dur=l(),xt=a("div"),F(C9.$$.fragment),Gur=l(),qve=a("p"),Our=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vur=l(),oc=a("p"),Xur=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),zur=o("not"),Qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),Wur=o("from_pretrained()"),Hur=o(" to load the model weights."),Uur=l(),F(KT.$$.fragment),Jur=l(),Fo=a("div"),F(w9.$$.fragment),Yur=l(),Dve=a("p"),Kur=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zur=l(),an=a("p"),e1r=o("The model class to instantiate is selected based on the "),Gve=a("code"),o1r=o("model_type"),r1r=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),t1r=o("pretrained_model_name_or_path"),a1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),n1r=o("pretrained_model_name_or_path"),s1r=o(":"),l1r=l(),Xve=a("ul"),ZT=a("li"),zve=a("strong"),i1r=o("maskformer"),d1r=o(" \u2014 "),LH=a("a"),c1r=o("MaskFormerForInstanceSegmentation"),f1r=o(" (MaskFormer model)"),m1r=l(),eM=a("p"),g1r=o("The model is set in evaluation mode by default using "),Qve=a("code"),h1r=o("model.eval()"),p1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wve=a("code"),_1r=o("model.train()"),u1r=l(),F(oM.$$.fragment),qVe=l(),rc=a("h2"),rM=a("a"),Hve=a("span"),F(A9.$$.fragment),b1r=l(),Uve=a("span"),v1r=o("TFAutoModel"),jVe=l(),or=a("div"),F(L9.$$.fragment),F1r=l(),tc=a("p"),T1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yH=a("a"),M1r=o("from_pretrained()"),E1r=o(" class method or the "),xH=a("a"),C1r=o("from_config()"),w1r=o(` class
method.`),A1r=l(),y9=a("p"),L1r=o("This class cannot be instantiated directly using "),Jve=a("code"),y1r=o("__init__()"),x1r=o(" (throws an error)."),$1r=l(),$t=a("div"),F(x9.$$.fragment),k1r=l(),Yve=a("p"),S1r=o("Instantiates one of the base model classes of the library from a configuration."),R1r=l(),ac=a("p"),P1r=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),B1r=o("not"),I1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),N1r=o("from_pretrained()"),q1r=o(" to load the model weights."),j1r=l(),F(tM.$$.fragment),D1r=l(),xr=a("div"),F($9.$$.fragment),G1r=l(),Zve=a("p"),O1r=o("Instantiate one of the base model classes of the library from a pretrained model."),V1r=l(),nn=a("p"),X1r=o("The model class to instantiate is selected based on the "),eFe=a("code"),z1r=o("model_type"),Q1r=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),W1r=o("pretrained_model_name_or_path"),H1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),U1r=o("pretrained_model_name_or_path"),J1r=o(":"),Y1r=l(),j=a("ul"),aM=a("li"),tFe=a("strong"),K1r=o("albert"),Z1r=o(" \u2014 "),kH=a("a"),e7r=o("TFAlbertModel"),o7r=o(" (ALBERT model)"),r7r=l(),nM=a("li"),aFe=a("strong"),t7r=o("bart"),a7r=o(" \u2014 "),SH=a("a"),n7r=o("TFBartModel"),s7r=o(" (BART model)"),l7r=l(),sM=a("li"),nFe=a("strong"),i7r=o("bert"),d7r=o(" \u2014 "),RH=a("a"),c7r=o("TFBertModel"),f7r=o(" (BERT model)"),m7r=l(),lM=a("li"),sFe=a("strong"),g7r=o("blenderbot"),h7r=o(" \u2014 "),PH=a("a"),p7r=o("TFBlenderbotModel"),_7r=o(" (Blenderbot model)"),u7r=l(),iM=a("li"),lFe=a("strong"),b7r=o("blenderbot-small"),v7r=o(" \u2014 "),BH=a("a"),F7r=o("TFBlenderbotSmallModel"),T7r=o(" (BlenderbotSmall model)"),M7r=l(),dM=a("li"),iFe=a("strong"),E7r=o("camembert"),C7r=o(" \u2014 "),IH=a("a"),w7r=o("TFCamembertModel"),A7r=o(" (CamemBERT model)"),L7r=l(),cM=a("li"),dFe=a("strong"),y7r=o("clip"),x7r=o(" \u2014 "),NH=a("a"),$7r=o("TFCLIPModel"),k7r=o(" (CLIP model)"),S7r=l(),fM=a("li"),cFe=a("strong"),R7r=o("convbert"),P7r=o(" \u2014 "),qH=a("a"),B7r=o("TFConvBertModel"),I7r=o(" (ConvBERT model)"),N7r=l(),mM=a("li"),fFe=a("strong"),q7r=o("convnext"),j7r=o(" \u2014 "),jH=a("a"),D7r=o("TFConvNextModel"),G7r=o(" (ConvNeXT model)"),O7r=l(),gM=a("li"),mFe=a("strong"),V7r=o("ctrl"),X7r=o(" \u2014 "),DH=a("a"),z7r=o("TFCTRLModel"),Q7r=o(" (CTRL model)"),W7r=l(),hM=a("li"),gFe=a("strong"),H7r=o("data2vec-vision"),U7r=o(" \u2014 "),GH=a("a"),J7r=o("TFData2VecVisionModel"),Y7r=o(" (Data2VecVision model)"),K7r=l(),pM=a("li"),hFe=a("strong"),Z7r=o("deberta"),e2r=o(" \u2014 "),OH=a("a"),o2r=o("TFDebertaModel"),r2r=o(" (DeBERTa model)"),t2r=l(),_M=a("li"),pFe=a("strong"),a2r=o("deberta-v2"),n2r=o(" \u2014 "),VH=a("a"),s2r=o("TFDebertaV2Model"),l2r=o(" (DeBERTa-v2 model)"),i2r=l(),uM=a("li"),_Fe=a("strong"),d2r=o("distilbert"),c2r=o(" \u2014 "),XH=a("a"),f2r=o("TFDistilBertModel"),m2r=o(" (DistilBERT model)"),g2r=l(),bM=a("li"),uFe=a("strong"),h2r=o("dpr"),p2r=o(" \u2014 "),zH=a("a"),_2r=o("TFDPRQuestionEncoder"),u2r=o(" (DPR model)"),b2r=l(),vM=a("li"),bFe=a("strong"),v2r=o("electra"),F2r=o(" \u2014 "),QH=a("a"),T2r=o("TFElectraModel"),M2r=o(" (ELECTRA model)"),E2r=l(),FM=a("li"),vFe=a("strong"),C2r=o("flaubert"),w2r=o(" \u2014 "),WH=a("a"),A2r=o("TFFlaubertModel"),L2r=o(" (FlauBERT model)"),y2r=l(),Us=a("li"),FFe=a("strong"),x2r=o("funnel"),$2r=o(" \u2014 "),HH=a("a"),k2r=o("TFFunnelModel"),S2r=o(" or "),UH=a("a"),R2r=o("TFFunnelBaseModel"),P2r=o(" (Funnel Transformer model)"),B2r=l(),TM=a("li"),TFe=a("strong"),I2r=o("gpt2"),N2r=o(" \u2014 "),JH=a("a"),q2r=o("TFGPT2Model"),j2r=o(" (OpenAI GPT-2 model)"),D2r=l(),MM=a("li"),MFe=a("strong"),G2r=o("gptj"),O2r=o(" \u2014 "),YH=a("a"),V2r=o("TFGPTJModel"),X2r=o(" (GPT-J model)"),z2r=l(),EM=a("li"),EFe=a("strong"),Q2r=o("hubert"),W2r=o(" \u2014 "),KH=a("a"),H2r=o("TFHubertModel"),U2r=o(" (Hubert model)"),J2r=l(),CM=a("li"),CFe=a("strong"),Y2r=o("layoutlm"),K2r=o(" \u2014 "),ZH=a("a"),Z2r=o("TFLayoutLMModel"),ebr=o(" (LayoutLM model)"),obr=l(),wM=a("li"),wFe=a("strong"),rbr=o("led"),tbr=o(" \u2014 "),eU=a("a"),abr=o("TFLEDModel"),nbr=o(" (LED model)"),sbr=l(),AM=a("li"),AFe=a("strong"),lbr=o("longformer"),ibr=o(" \u2014 "),oU=a("a"),dbr=o("TFLongformerModel"),cbr=o(" (Longformer model)"),fbr=l(),LM=a("li"),LFe=a("strong"),mbr=o("lxmert"),gbr=o(" \u2014 "),rU=a("a"),hbr=o("TFLxmertModel"),pbr=o(" (LXMERT model)"),_br=l(),yM=a("li"),yFe=a("strong"),ubr=o("marian"),bbr=o(" \u2014 "),tU=a("a"),vbr=o("TFMarianModel"),Fbr=o(" (Marian model)"),Tbr=l(),xM=a("li"),xFe=a("strong"),Mbr=o("mbart"),Ebr=o(" \u2014 "),aU=a("a"),Cbr=o("TFMBartModel"),wbr=o(" (mBART model)"),Abr=l(),$M=a("li"),$Fe=a("strong"),Lbr=o("mobilebert"),ybr=o(" \u2014 "),nU=a("a"),xbr=o("TFMobileBertModel"),$br=o(" (MobileBERT model)"),kbr=l(),kM=a("li"),kFe=a("strong"),Sbr=o("mpnet"),Rbr=o(" \u2014 "),sU=a("a"),Pbr=o("TFMPNetModel"),Bbr=o(" (MPNet model)"),Ibr=l(),SM=a("li"),SFe=a("strong"),Nbr=o("mt5"),qbr=o(" \u2014 "),lU=a("a"),jbr=o("TFMT5Model"),Dbr=o(" (MT5 model)"),Gbr=l(),RM=a("li"),RFe=a("strong"),Obr=o("openai-gpt"),Vbr=o(" \u2014 "),iU=a("a"),Xbr=o("TFOpenAIGPTModel"),zbr=o(" (OpenAI GPT model)"),Qbr=l(),PM=a("li"),PFe=a("strong"),Wbr=o("opt"),Hbr=o(" \u2014 "),dU=a("a"),Ubr=o("TFOPTModel"),Jbr=o(" (OPT model)"),Ybr=l(),BM=a("li"),BFe=a("strong"),Kbr=o("pegasus"),Zbr=o(" \u2014 "),cU=a("a"),evr=o("TFPegasusModel"),ovr=o(" (Pegasus model)"),rvr=l(),IM=a("li"),IFe=a("strong"),tvr=o("rembert"),avr=o(" \u2014 "),fU=a("a"),nvr=o("TFRemBertModel"),svr=o(" (RemBERT model)"),lvr=l(),NM=a("li"),NFe=a("strong"),ivr=o("roberta"),dvr=o(" \u2014 "),mU=a("a"),cvr=o("TFRobertaModel"),fvr=o(" (RoBERTa model)"),mvr=l(),qM=a("li"),qFe=a("strong"),gvr=o("roformer"),hvr=o(" \u2014 "),gU=a("a"),pvr=o("TFRoFormerModel"),_vr=o(" (RoFormer model)"),uvr=l(),jM=a("li"),jFe=a("strong"),bvr=o("speech_to_text"),vvr=o(" \u2014 "),hU=a("a"),Fvr=o("TFSpeech2TextModel"),Tvr=o(" (Speech2Text model)"),Mvr=l(),DM=a("li"),DFe=a("strong"),Evr=o("swin"),Cvr=o(" \u2014 "),pU=a("a"),wvr=o("TFSwinModel"),Avr=o(" (Swin Transformer model)"),Lvr=l(),GM=a("li"),GFe=a("strong"),yvr=o("t5"),xvr=o(" \u2014 "),_U=a("a"),$vr=o("TFT5Model"),kvr=o(" (T5 model)"),Svr=l(),OM=a("li"),OFe=a("strong"),Rvr=o("tapas"),Pvr=o(" \u2014 "),uU=a("a"),Bvr=o("TFTapasModel"),Ivr=o(" (TAPAS model)"),Nvr=l(),VM=a("li"),VFe=a("strong"),qvr=o("transfo-xl"),jvr=o(" \u2014 "),bU=a("a"),Dvr=o("TFTransfoXLModel"),Gvr=o(" (Transformer-XL model)"),Ovr=l(),XM=a("li"),XFe=a("strong"),Vvr=o("vit"),Xvr=o(" \u2014 "),vU=a("a"),zvr=o("TFViTModel"),Qvr=o(" (ViT model)"),Wvr=l(),zM=a("li"),zFe=a("strong"),Hvr=o("vit_mae"),Uvr=o(" \u2014 "),FU=a("a"),Jvr=o("TFViTMAEModel"),Yvr=o(" (ViTMAE model)"),Kvr=l(),QM=a("li"),QFe=a("strong"),Zvr=o("wav2vec2"),eFr=o(" \u2014 "),TU=a("a"),oFr=o("TFWav2Vec2Model"),rFr=o(" (Wav2Vec2 model)"),tFr=l(),WM=a("li"),WFe=a("strong"),aFr=o("xlm"),nFr=o(" \u2014 "),MU=a("a"),sFr=o("TFXLMModel"),lFr=o(" (XLM model)"),iFr=l(),HM=a("li"),HFe=a("strong"),dFr=o("xlm-roberta"),cFr=o(" \u2014 "),EU=a("a"),fFr=o("TFXLMRobertaModel"),mFr=o(" (XLM-RoBERTa model)"),gFr=l(),UM=a("li"),UFe=a("strong"),hFr=o("xlnet"),pFr=o(" \u2014 "),CU=a("a"),_Fr=o("TFXLNetModel"),uFr=o(" (XLNet model)"),bFr=l(),F(JM.$$.fragment),DVe=l(),nc=a("h2"),YM=a("a"),JFe=a("span"),F(k9.$$.fragment),vFr=l(),YFe=a("span"),FFr=o("TFAutoModelForPreTraining"),GVe=l(),rr=a("div"),F(S9.$$.fragment),TFr=l(),sc=a("p"),MFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wU=a("a"),EFr=o("from_pretrained()"),CFr=o(" class method or the "),AU=a("a"),wFr=o("from_config()"),AFr=o(` class
method.`),LFr=l(),R9=a("p"),yFr=o("This class cannot be instantiated directly using "),KFe=a("code"),xFr=o("__init__()"),$Fr=o(" (throws an error)."),kFr=l(),kt=a("div"),F(P9.$$.fragment),SFr=l(),ZFe=a("p"),RFr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PFr=l(),lc=a("p"),BFr=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),IFr=o("not"),NFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),qFr=o("from_pretrained()"),jFr=o(" to load the model weights."),DFr=l(),F(KM.$$.fragment),GFr=l(),$r=a("div"),F(B9.$$.fragment),OFr=l(),o6e=a("p"),VFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XFr=l(),sn=a("p"),zFr=o("The model class to instantiate is selected based on the "),r6e=a("code"),QFr=o("model_type"),WFr=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),HFr=o("pretrained_model_name_or_path"),UFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),JFr=o("pretrained_model_name_or_path"),YFr=o(":"),KFr=l(),se=a("ul"),ZM=a("li"),n6e=a("strong"),ZFr=o("albert"),e6r=o(" \u2014 "),yU=a("a"),o6r=o("TFAlbertForPreTraining"),r6r=o(" (ALBERT model)"),t6r=l(),e4=a("li"),s6e=a("strong"),a6r=o("bart"),n6r=o(" \u2014 "),xU=a("a"),s6r=o("TFBartForConditionalGeneration"),l6r=o(" (BART model)"),i6r=l(),o4=a("li"),l6e=a("strong"),d6r=o("bert"),c6r=o(" \u2014 "),$U=a("a"),f6r=o("TFBertForPreTraining"),m6r=o(" (BERT model)"),g6r=l(),r4=a("li"),i6e=a("strong"),h6r=o("camembert"),p6r=o(" \u2014 "),kU=a("a"),_6r=o("TFCamembertForMaskedLM"),u6r=o(" (CamemBERT model)"),b6r=l(),t4=a("li"),d6e=a("strong"),v6r=o("ctrl"),F6r=o(" \u2014 "),SU=a("a"),T6r=o("TFCTRLLMHeadModel"),M6r=o(" (CTRL model)"),E6r=l(),a4=a("li"),c6e=a("strong"),C6r=o("distilbert"),w6r=o(" \u2014 "),RU=a("a"),A6r=o("TFDistilBertForMaskedLM"),L6r=o(" (DistilBERT model)"),y6r=l(),n4=a("li"),f6e=a("strong"),x6r=o("electra"),$6r=o(" \u2014 "),PU=a("a"),k6r=o("TFElectraForPreTraining"),S6r=o(" (ELECTRA model)"),R6r=l(),s4=a("li"),m6e=a("strong"),P6r=o("flaubert"),B6r=o(" \u2014 "),BU=a("a"),I6r=o("TFFlaubertWithLMHeadModel"),N6r=o(" (FlauBERT model)"),q6r=l(),l4=a("li"),g6e=a("strong"),j6r=o("funnel"),D6r=o(" \u2014 "),IU=a("a"),G6r=o("TFFunnelForPreTraining"),O6r=o(" (Funnel Transformer model)"),V6r=l(),i4=a("li"),h6e=a("strong"),X6r=o("gpt2"),z6r=o(" \u2014 "),NU=a("a"),Q6r=o("TFGPT2LMHeadModel"),W6r=o(" (OpenAI GPT-2 model)"),H6r=l(),d4=a("li"),p6e=a("strong"),U6r=o("layoutlm"),J6r=o(" \u2014 "),qU=a("a"),Y6r=o("TFLayoutLMForMaskedLM"),K6r=o(" (LayoutLM model)"),Z6r=l(),c4=a("li"),_6e=a("strong"),eTr=o("lxmert"),oTr=o(" \u2014 "),jU=a("a"),rTr=o("TFLxmertForPreTraining"),tTr=o(" (LXMERT model)"),aTr=l(),f4=a("li"),u6e=a("strong"),nTr=o("mobilebert"),sTr=o(" \u2014 "),DU=a("a"),lTr=o("TFMobileBertForPreTraining"),iTr=o(" (MobileBERT model)"),dTr=l(),m4=a("li"),b6e=a("strong"),cTr=o("mpnet"),fTr=o(" \u2014 "),GU=a("a"),mTr=o("TFMPNetForMaskedLM"),gTr=o(" (MPNet model)"),hTr=l(),g4=a("li"),v6e=a("strong"),pTr=o("openai-gpt"),_Tr=o(" \u2014 "),OU=a("a"),uTr=o("TFOpenAIGPTLMHeadModel"),bTr=o(" (OpenAI GPT model)"),vTr=l(),h4=a("li"),F6e=a("strong"),FTr=o("roberta"),TTr=o(" \u2014 "),VU=a("a"),MTr=o("TFRobertaForMaskedLM"),ETr=o(" (RoBERTa model)"),CTr=l(),p4=a("li"),T6e=a("strong"),wTr=o("t5"),ATr=o(" \u2014 "),XU=a("a"),LTr=o("TFT5ForConditionalGeneration"),yTr=o(" (T5 model)"),xTr=l(),_4=a("li"),M6e=a("strong"),$Tr=o("tapas"),kTr=o(" \u2014 "),zU=a("a"),STr=o("TFTapasForMaskedLM"),RTr=o(" (TAPAS model)"),PTr=l(),u4=a("li"),E6e=a("strong"),BTr=o("transfo-xl"),ITr=o(" \u2014 "),QU=a("a"),NTr=o("TFTransfoXLLMHeadModel"),qTr=o(" (Transformer-XL model)"),jTr=l(),b4=a("li"),C6e=a("strong"),DTr=o("vit_mae"),GTr=o(" \u2014 "),WU=a("a"),OTr=o("TFViTMAEForPreTraining"),VTr=o(" (ViTMAE model)"),XTr=l(),v4=a("li"),w6e=a("strong"),zTr=o("xlm"),QTr=o(" \u2014 "),HU=a("a"),WTr=o("TFXLMWithLMHeadModel"),HTr=o(" (XLM model)"),UTr=l(),F4=a("li"),A6e=a("strong"),JTr=o("xlm-roberta"),YTr=o(" \u2014 "),UU=a("a"),KTr=o("TFXLMRobertaForMaskedLM"),ZTr=o(" (XLM-RoBERTa model)"),eMr=l(),T4=a("li"),L6e=a("strong"),oMr=o("xlnet"),rMr=o(" \u2014 "),JU=a("a"),tMr=o("TFXLNetLMHeadModel"),aMr=o(" (XLNet model)"),nMr=l(),F(M4.$$.fragment),OVe=l(),ic=a("h2"),E4=a("a"),y6e=a("span"),F(I9.$$.fragment),sMr=l(),x6e=a("span"),lMr=o("TFAutoModelForCausalLM"),VVe=l(),tr=a("div"),F(N9.$$.fragment),iMr=l(),dc=a("p"),dMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YU=a("a"),cMr=o("from_pretrained()"),fMr=o(" class method or the "),KU=a("a"),mMr=o("from_config()"),gMr=o(` class
method.`),hMr=l(),q9=a("p"),pMr=o("This class cannot be instantiated directly using "),$6e=a("code"),_Mr=o("__init__()"),uMr=o(" (throws an error)."),bMr=l(),St=a("div"),F(j9.$$.fragment),vMr=l(),k6e=a("p"),FMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TMr=l(),cc=a("p"),MMr=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),EMr=o("not"),CMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),wMr=o("from_pretrained()"),AMr=o(" to load the model weights."),LMr=l(),F(C4.$$.fragment),yMr=l(),kr=a("div"),F(D9.$$.fragment),xMr=l(),R6e=a("p"),$Mr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kMr=l(),ln=a("p"),SMr=o("The model class to instantiate is selected based on the "),P6e=a("code"),RMr=o("model_type"),PMr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),BMr=o("pretrained_model_name_or_path"),IMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),NMr=o("pretrained_model_name_or_path"),qMr=o(":"),jMr=l(),Me=a("ul"),w4=a("li"),N6e=a("strong"),DMr=o("bert"),GMr=o(" \u2014 "),eJ=a("a"),OMr=o("TFBertLMHeadModel"),VMr=o(" (BERT model)"),XMr=l(),A4=a("li"),q6e=a("strong"),zMr=o("camembert"),QMr=o(" \u2014 "),oJ=a("a"),WMr=o("TFCamembertForCausalLM"),HMr=o(" (CamemBERT model)"),UMr=l(),L4=a("li"),j6e=a("strong"),JMr=o("ctrl"),YMr=o(" \u2014 "),rJ=a("a"),KMr=o("TFCTRLLMHeadModel"),ZMr=o(" (CTRL model)"),e4r=l(),y4=a("li"),D6e=a("strong"),o4r=o("gpt2"),r4r=o(" \u2014 "),tJ=a("a"),t4r=o("TFGPT2LMHeadModel"),a4r=o(" (OpenAI GPT-2 model)"),n4r=l(),x4=a("li"),G6e=a("strong"),s4r=o("gptj"),l4r=o(" \u2014 "),aJ=a("a"),i4r=o("TFGPTJForCausalLM"),d4r=o(" (GPT-J model)"),c4r=l(),$4=a("li"),O6e=a("strong"),f4r=o("openai-gpt"),m4r=o(" \u2014 "),nJ=a("a"),g4r=o("TFOpenAIGPTLMHeadModel"),h4r=o(" (OpenAI GPT model)"),p4r=l(),k4=a("li"),V6e=a("strong"),_4r=o("opt"),u4r=o(" \u2014 "),sJ=a("a"),b4r=o("TFOPTForCausalLM"),v4r=o(" (OPT model)"),F4r=l(),S4=a("li"),X6e=a("strong"),T4r=o("rembert"),M4r=o(" \u2014 "),lJ=a("a"),E4r=o("TFRemBertForCausalLM"),C4r=o(" (RemBERT model)"),w4r=l(),R4=a("li"),z6e=a("strong"),A4r=o("roberta"),L4r=o(" \u2014 "),iJ=a("a"),y4r=o("TFRobertaForCausalLM"),x4r=o(" (RoBERTa model)"),$4r=l(),P4=a("li"),Q6e=a("strong"),k4r=o("roformer"),S4r=o(" \u2014 "),dJ=a("a"),R4r=o("TFRoFormerForCausalLM"),P4r=o(" (RoFormer model)"),B4r=l(),B4=a("li"),W6e=a("strong"),I4r=o("transfo-xl"),N4r=o(" \u2014 "),cJ=a("a"),q4r=o("TFTransfoXLLMHeadModel"),j4r=o(" (Transformer-XL model)"),D4r=l(),I4=a("li"),H6e=a("strong"),G4r=o("xlm"),O4r=o(" \u2014 "),fJ=a("a"),V4r=o("TFXLMWithLMHeadModel"),X4r=o(" (XLM model)"),z4r=l(),N4=a("li"),U6e=a("strong"),Q4r=o("xlnet"),W4r=o(" \u2014 "),mJ=a("a"),H4r=o("TFXLNetLMHeadModel"),U4r=o(" (XLNet model)"),J4r=l(),F(q4.$$.fragment),XVe=l(),fc=a("h2"),j4=a("a"),J6e=a("span"),F(G9.$$.fragment),Y4r=l(),Y6e=a("span"),K4r=o("TFAutoModelForImageClassification"),zVe=l(),ar=a("div"),F(O9.$$.fragment),Z4r=l(),mc=a("p"),eEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gJ=a("a"),oEr=o("from_pretrained()"),rEr=o(" class method or the "),hJ=a("a"),tEr=o("from_config()"),aEr=o(` class
method.`),nEr=l(),V9=a("p"),sEr=o("This class cannot be instantiated directly using "),K6e=a("code"),lEr=o("__init__()"),iEr=o(" (throws an error)."),dEr=l(),Rt=a("div"),F(X9.$$.fragment),cEr=l(),Z6e=a("p"),fEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mEr=l(),gc=a("p"),gEr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),hEr=o("not"),pEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),_Er=o("from_pretrained()"),uEr=o(" to load the model weights."),bEr=l(),F(D4.$$.fragment),vEr=l(),Sr=a("div"),F(z9.$$.fragment),FEr=l(),oTe=a("p"),TEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MEr=l(),dn=a("p"),EEr=o("The model class to instantiate is selected based on the "),rTe=a("code"),CEr=o("model_type"),wEr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),AEr=o("pretrained_model_name_or_path"),LEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),yEr=o("pretrained_model_name_or_path"),xEr=o(":"),$Er=l(),cn=a("ul"),G4=a("li"),nTe=a("strong"),kEr=o("convnext"),SEr=o(" \u2014 "),_J=a("a"),REr=o("TFConvNextForImageClassification"),PEr=o(" (ConvNeXT model)"),BEr=l(),O4=a("li"),sTe=a("strong"),IEr=o("data2vec-vision"),NEr=o(" \u2014 "),uJ=a("a"),qEr=o("TFData2VecVisionForImageClassification"),jEr=o(" (Data2VecVision model)"),DEr=l(),V4=a("li"),lTe=a("strong"),GEr=o("swin"),OEr=o(" \u2014 "),bJ=a("a"),VEr=o("TFSwinForImageClassification"),XEr=o(" (Swin Transformer model)"),zEr=l(),X4=a("li"),iTe=a("strong"),QEr=o("vit"),WEr=o(" \u2014 "),vJ=a("a"),HEr=o("TFViTForImageClassification"),UEr=o(" (ViT model)"),JEr=l(),F(z4.$$.fragment),QVe=l(),hc=a("h2"),Q4=a("a"),dTe=a("span"),F(Q9.$$.fragment),YEr=l(),cTe=a("span"),KEr=o("TFAutoModelForMaskedLM"),WVe=l(),nr=a("div"),F(W9.$$.fragment),ZEr=l(),pc=a("p"),eCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=a("a"),oCr=o("from_pretrained()"),rCr=o(" class method or the "),TJ=a("a"),tCr=o("from_config()"),aCr=o(` class
method.`),nCr=l(),H9=a("p"),sCr=o("This class cannot be instantiated directly using "),fTe=a("code"),lCr=o("__init__()"),iCr=o(" (throws an error)."),dCr=l(),Pt=a("div"),F(U9.$$.fragment),cCr=l(),mTe=a("p"),fCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mCr=l(),_c=a("p"),gCr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),hCr=o("not"),pCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),_Cr=o("from_pretrained()"),uCr=o(" to load the model weights."),bCr=l(),F(W4.$$.fragment),vCr=l(),Rr=a("div"),F(J9.$$.fragment),FCr=l(),hTe=a("p"),TCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MCr=l(),fn=a("p"),ECr=o("The model class to instantiate is selected based on the "),pTe=a("code"),CCr=o("model_type"),wCr=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),ACr=o("pretrained_model_name_or_path"),LCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),yCr=o("pretrained_model_name_or_path"),xCr=o(":"),$Cr=l(),ie=a("ul"),H4=a("li"),bTe=a("strong"),kCr=o("albert"),SCr=o(" \u2014 "),EJ=a("a"),RCr=o("TFAlbertForMaskedLM"),PCr=o(" (ALBERT model)"),BCr=l(),U4=a("li"),vTe=a("strong"),ICr=o("bert"),NCr=o(" \u2014 "),CJ=a("a"),qCr=o("TFBertForMaskedLM"),jCr=o(" (BERT model)"),DCr=l(),J4=a("li"),FTe=a("strong"),GCr=o("camembert"),OCr=o(" \u2014 "),wJ=a("a"),VCr=o("TFCamembertForMaskedLM"),XCr=o(" (CamemBERT model)"),zCr=l(),Y4=a("li"),TTe=a("strong"),QCr=o("convbert"),WCr=o(" \u2014 "),AJ=a("a"),HCr=o("TFConvBertForMaskedLM"),UCr=o(" (ConvBERT model)"),JCr=l(),K4=a("li"),MTe=a("strong"),YCr=o("deberta"),KCr=o(" \u2014 "),LJ=a("a"),ZCr=o("TFDebertaForMaskedLM"),e5r=o(" (DeBERTa model)"),o5r=l(),Z4=a("li"),ETe=a("strong"),r5r=o("deberta-v2"),t5r=o(" \u2014 "),yJ=a("a"),a5r=o("TFDebertaV2ForMaskedLM"),n5r=o(" (DeBERTa-v2 model)"),s5r=l(),eE=a("li"),CTe=a("strong"),l5r=o("distilbert"),i5r=o(" \u2014 "),xJ=a("a"),d5r=o("TFDistilBertForMaskedLM"),c5r=o(" (DistilBERT model)"),f5r=l(),oE=a("li"),wTe=a("strong"),m5r=o("electra"),g5r=o(" \u2014 "),$J=a("a"),h5r=o("TFElectraForMaskedLM"),p5r=o(" (ELECTRA model)"),_5r=l(),rE=a("li"),ATe=a("strong"),u5r=o("flaubert"),b5r=o(" \u2014 "),kJ=a("a"),v5r=o("TFFlaubertWithLMHeadModel"),F5r=o(" (FlauBERT model)"),T5r=l(),tE=a("li"),LTe=a("strong"),M5r=o("funnel"),E5r=o(" \u2014 "),SJ=a("a"),C5r=o("TFFunnelForMaskedLM"),w5r=o(" (Funnel Transformer model)"),A5r=l(),aE=a("li"),yTe=a("strong"),L5r=o("layoutlm"),y5r=o(" \u2014 "),RJ=a("a"),x5r=o("TFLayoutLMForMaskedLM"),$5r=o(" (LayoutLM model)"),k5r=l(),nE=a("li"),xTe=a("strong"),S5r=o("longformer"),R5r=o(" \u2014 "),PJ=a("a"),P5r=o("TFLongformerForMaskedLM"),B5r=o(" (Longformer model)"),I5r=l(),sE=a("li"),$Te=a("strong"),N5r=o("mobilebert"),q5r=o(" \u2014 "),BJ=a("a"),j5r=o("TFMobileBertForMaskedLM"),D5r=o(" (MobileBERT model)"),G5r=l(),lE=a("li"),kTe=a("strong"),O5r=o("mpnet"),V5r=o(" \u2014 "),IJ=a("a"),X5r=o("TFMPNetForMaskedLM"),z5r=o(" (MPNet model)"),Q5r=l(),iE=a("li"),STe=a("strong"),W5r=o("rembert"),H5r=o(" \u2014 "),NJ=a("a"),U5r=o("TFRemBertForMaskedLM"),J5r=o(" (RemBERT model)"),Y5r=l(),dE=a("li"),RTe=a("strong"),K5r=o("roberta"),Z5r=o(" \u2014 "),qJ=a("a"),e3r=o("TFRobertaForMaskedLM"),o3r=o(" (RoBERTa model)"),r3r=l(),cE=a("li"),PTe=a("strong"),t3r=o("roformer"),a3r=o(" \u2014 "),jJ=a("a"),n3r=o("TFRoFormerForMaskedLM"),s3r=o(" (RoFormer model)"),l3r=l(),fE=a("li"),BTe=a("strong"),i3r=o("tapas"),d3r=o(" \u2014 "),DJ=a("a"),c3r=o("TFTapasForMaskedLM"),f3r=o(" (TAPAS model)"),m3r=l(),mE=a("li"),ITe=a("strong"),g3r=o("xlm"),h3r=o(" \u2014 "),GJ=a("a"),p3r=o("TFXLMWithLMHeadModel"),_3r=o(" (XLM model)"),u3r=l(),gE=a("li"),NTe=a("strong"),b3r=o("xlm-roberta"),v3r=o(" \u2014 "),OJ=a("a"),F3r=o("TFXLMRobertaForMaskedLM"),T3r=o(" (XLM-RoBERTa model)"),M3r=l(),F(hE.$$.fragment),HVe=l(),uc=a("h2"),pE=a("a"),qTe=a("span"),F(Y9.$$.fragment),E3r=l(),jTe=a("span"),C3r=o("TFAutoModelForSeq2SeqLM"),UVe=l(),sr=a("div"),F(K9.$$.fragment),w3r=l(),bc=a("p"),A3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=a("a"),L3r=o("from_pretrained()"),y3r=o(" class method or the "),XJ=a("a"),x3r=o("from_config()"),$3r=o(` class
method.`),k3r=l(),Z9=a("p"),S3r=o("This class cannot be instantiated directly using "),DTe=a("code"),R3r=o("__init__()"),P3r=o(" (throws an error)."),B3r=l(),Bt=a("div"),F(ex.$$.fragment),I3r=l(),GTe=a("p"),N3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q3r=l(),vc=a("p"),j3r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),D3r=o("not"),G3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),O3r=o("from_pretrained()"),V3r=o(" to load the model weights."),X3r=l(),F(_E.$$.fragment),z3r=l(),Pr=a("div"),F(ox.$$.fragment),Q3r=l(),VTe=a("p"),W3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H3r=l(),mn=a("p"),U3r=o("The model class to instantiate is selected based on the "),XTe=a("code"),J3r=o("model_type"),Y3r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),K3r=o("pretrained_model_name_or_path"),Z3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(":"),r0r=l(),ye=a("ul"),uE=a("li"),WTe=a("strong"),t0r=o("bart"),a0r=o(" \u2014 "),QJ=a("a"),n0r=o("TFBartForConditionalGeneration"),s0r=o(" (BART model)"),l0r=l(),bE=a("li"),HTe=a("strong"),i0r=o("blenderbot"),d0r=o(" \u2014 "),WJ=a("a"),c0r=o("TFBlenderbotForConditionalGeneration"),f0r=o(" (Blenderbot model)"),m0r=l(),vE=a("li"),UTe=a("strong"),g0r=o("blenderbot-small"),h0r=o(" \u2014 "),HJ=a("a"),p0r=o("TFBlenderbotSmallForConditionalGeneration"),_0r=o(" (BlenderbotSmall model)"),u0r=l(),FE=a("li"),JTe=a("strong"),b0r=o("encoder-decoder"),v0r=o(" \u2014 "),UJ=a("a"),F0r=o("TFEncoderDecoderModel"),T0r=o(" (Encoder decoder model)"),M0r=l(),TE=a("li"),YTe=a("strong"),E0r=o("led"),C0r=o(" \u2014 "),JJ=a("a"),w0r=o("TFLEDForConditionalGeneration"),A0r=o(" (LED model)"),L0r=l(),ME=a("li"),KTe=a("strong"),y0r=o("marian"),x0r=o(" \u2014 "),YJ=a("a"),$0r=o("TFMarianMTModel"),k0r=o(" (Marian model)"),S0r=l(),EE=a("li"),ZTe=a("strong"),R0r=o("mbart"),P0r=o(" \u2014 "),KJ=a("a"),B0r=o("TFMBartForConditionalGeneration"),I0r=o(" (mBART model)"),N0r=l(),CE=a("li"),eMe=a("strong"),q0r=o("mt5"),j0r=o(" \u2014 "),ZJ=a("a"),D0r=o("TFMT5ForConditionalGeneration"),G0r=o(" (MT5 model)"),O0r=l(),wE=a("li"),oMe=a("strong"),V0r=o("pegasus"),X0r=o(" \u2014 "),eY=a("a"),z0r=o("TFPegasusForConditionalGeneration"),Q0r=o(" (Pegasus model)"),W0r=l(),AE=a("li"),rMe=a("strong"),H0r=o("t5"),U0r=o(" \u2014 "),oY=a("a"),J0r=o("TFT5ForConditionalGeneration"),Y0r=o(" (T5 model)"),K0r=l(),F(LE.$$.fragment),JVe=l(),Fc=a("h2"),yE=a("a"),tMe=a("span"),F(rx.$$.fragment),Z0r=l(),aMe=a("span"),ewr=o("TFAutoModelForSequenceClassification"),YVe=l(),lr=a("div"),F(tx.$$.fragment),owr=l(),Tc=a("p"),rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=a("a"),twr=o("from_pretrained()"),awr=o(" class method or the "),tY=a("a"),nwr=o("from_config()"),swr=o(` class
method.`),lwr=l(),ax=a("p"),iwr=o("This class cannot be instantiated directly using "),nMe=a("code"),dwr=o("__init__()"),cwr=o(" (throws an error)."),fwr=l(),It=a("div"),F(nx.$$.fragment),mwr=l(),sMe=a("p"),gwr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hwr=l(),Mc=a("p"),pwr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),_wr=o("not"),uwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),bwr=o("from_pretrained()"),vwr=o(" to load the model weights."),Fwr=l(),F(xE.$$.fragment),Twr=l(),Br=a("div"),F(sx.$$.fragment),Mwr=l(),iMe=a("p"),Ewr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cwr=l(),gn=a("p"),wwr=o("The model class to instantiate is selected based on the "),dMe=a("code"),Awr=o("model_type"),Lwr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),ywr=o("pretrained_model_name_or_path"),xwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),$wr=o("pretrained_model_name_or_path"),kwr=o(":"),Swr=l(),te=a("ul"),$E=a("li"),mMe=a("strong"),Rwr=o("albert"),Pwr=o(" \u2014 "),nY=a("a"),Bwr=o("TFAlbertForSequenceClassification"),Iwr=o(" (ALBERT model)"),Nwr=l(),kE=a("li"),gMe=a("strong"),qwr=o("bert"),jwr=o(" \u2014 "),sY=a("a"),Dwr=o("TFBertForSequenceClassification"),Gwr=o(" (BERT model)"),Owr=l(),SE=a("li"),hMe=a("strong"),Vwr=o("camembert"),Xwr=o(" \u2014 "),lY=a("a"),zwr=o("TFCamembertForSequenceClassification"),Qwr=o(" (CamemBERT model)"),Wwr=l(),RE=a("li"),pMe=a("strong"),Hwr=o("convbert"),Uwr=o(" \u2014 "),iY=a("a"),Jwr=o("TFConvBertForSequenceClassification"),Ywr=o(" (ConvBERT model)"),Kwr=l(),PE=a("li"),_Me=a("strong"),Zwr=o("ctrl"),eAr=o(" \u2014 "),dY=a("a"),oAr=o("TFCTRLForSequenceClassification"),rAr=o(" (CTRL model)"),tAr=l(),BE=a("li"),uMe=a("strong"),aAr=o("deberta"),nAr=o(" \u2014 "),cY=a("a"),sAr=o("TFDebertaForSequenceClassification"),lAr=o(" (DeBERTa model)"),iAr=l(),IE=a("li"),bMe=a("strong"),dAr=o("deberta-v2"),cAr=o(" \u2014 "),fY=a("a"),fAr=o("TFDebertaV2ForSequenceClassification"),mAr=o(" (DeBERTa-v2 model)"),gAr=l(),NE=a("li"),vMe=a("strong"),hAr=o("distilbert"),pAr=o(" \u2014 "),mY=a("a"),_Ar=o("TFDistilBertForSequenceClassification"),uAr=o(" (DistilBERT model)"),bAr=l(),qE=a("li"),FMe=a("strong"),vAr=o("electra"),FAr=o(" \u2014 "),gY=a("a"),TAr=o("TFElectraForSequenceClassification"),MAr=o(" (ELECTRA model)"),EAr=l(),jE=a("li"),TMe=a("strong"),CAr=o("flaubert"),wAr=o(" \u2014 "),hY=a("a"),AAr=o("TFFlaubertForSequenceClassification"),LAr=o(" (FlauBERT model)"),yAr=l(),DE=a("li"),MMe=a("strong"),xAr=o("funnel"),$Ar=o(" \u2014 "),pY=a("a"),kAr=o("TFFunnelForSequenceClassification"),SAr=o(" (Funnel Transformer model)"),RAr=l(),GE=a("li"),EMe=a("strong"),PAr=o("gpt2"),BAr=o(" \u2014 "),_Y=a("a"),IAr=o("TFGPT2ForSequenceClassification"),NAr=o(" (OpenAI GPT-2 model)"),qAr=l(),OE=a("li"),CMe=a("strong"),jAr=o("gptj"),DAr=o(" \u2014 "),uY=a("a"),GAr=o("TFGPTJForSequenceClassification"),OAr=o(" (GPT-J model)"),VAr=l(),VE=a("li"),wMe=a("strong"),XAr=o("layoutlm"),zAr=o(" \u2014 "),bY=a("a"),QAr=o("TFLayoutLMForSequenceClassification"),WAr=o(" (LayoutLM model)"),HAr=l(),XE=a("li"),AMe=a("strong"),UAr=o("longformer"),JAr=o(" \u2014 "),vY=a("a"),YAr=o("TFLongformerForSequenceClassification"),KAr=o(" (Longformer model)"),ZAr=l(),zE=a("li"),LMe=a("strong"),eLr=o("mobilebert"),oLr=o(" \u2014 "),FY=a("a"),rLr=o("TFMobileBertForSequenceClassification"),tLr=o(" (MobileBERT model)"),aLr=l(),QE=a("li"),yMe=a("strong"),nLr=o("mpnet"),sLr=o(" \u2014 "),TY=a("a"),lLr=o("TFMPNetForSequenceClassification"),iLr=o(" (MPNet model)"),dLr=l(),WE=a("li"),xMe=a("strong"),cLr=o("openai-gpt"),fLr=o(" \u2014 "),MY=a("a"),mLr=o("TFOpenAIGPTForSequenceClassification"),gLr=o(" (OpenAI GPT model)"),hLr=l(),HE=a("li"),$Me=a("strong"),pLr=o("rembert"),_Lr=o(" \u2014 "),EY=a("a"),uLr=o("TFRemBertForSequenceClassification"),bLr=o(" (RemBERT model)"),vLr=l(),UE=a("li"),kMe=a("strong"),FLr=o("roberta"),TLr=o(" \u2014 "),CY=a("a"),MLr=o("TFRobertaForSequenceClassification"),ELr=o(" (RoBERTa model)"),CLr=l(),JE=a("li"),SMe=a("strong"),wLr=o("roformer"),ALr=o(" \u2014 "),wY=a("a"),LLr=o("TFRoFormerForSequenceClassification"),yLr=o(" (RoFormer model)"),xLr=l(),YE=a("li"),RMe=a("strong"),$Lr=o("tapas"),kLr=o(" \u2014 "),AY=a("a"),SLr=o("TFTapasForSequenceClassification"),RLr=o(" (TAPAS model)"),PLr=l(),KE=a("li"),PMe=a("strong"),BLr=o("transfo-xl"),ILr=o(" \u2014 "),LY=a("a"),NLr=o("TFTransfoXLForSequenceClassification"),qLr=o(" (Transformer-XL model)"),jLr=l(),ZE=a("li"),BMe=a("strong"),DLr=o("xlm"),GLr=o(" \u2014 "),yY=a("a"),OLr=o("TFXLMForSequenceClassification"),VLr=o(" (XLM model)"),XLr=l(),eC=a("li"),IMe=a("strong"),zLr=o("xlm-roberta"),QLr=o(" \u2014 "),xY=a("a"),WLr=o("TFXLMRobertaForSequenceClassification"),HLr=o(" (XLM-RoBERTa model)"),ULr=l(),oC=a("li"),NMe=a("strong"),JLr=o("xlnet"),YLr=o(" \u2014 "),$Y=a("a"),KLr=o("TFXLNetForSequenceClassification"),ZLr=o(" (XLNet model)"),eyr=l(),F(rC.$$.fragment),KVe=l(),Ec=a("h2"),tC=a("a"),qMe=a("span"),F(lx.$$.fragment),oyr=l(),jMe=a("span"),ryr=o("TFAutoModelForMultipleChoice"),ZVe=l(),ir=a("div"),F(ix.$$.fragment),tyr=l(),Cc=a("p"),ayr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=a("a"),nyr=o("from_pretrained()"),syr=o(" class method or the "),SY=a("a"),lyr=o("from_config()"),iyr=o(` class
method.`),dyr=l(),dx=a("p"),cyr=o("This class cannot be instantiated directly using "),DMe=a("code"),fyr=o("__init__()"),myr=o(" (throws an error)."),gyr=l(),Nt=a("div"),F(cx.$$.fragment),hyr=l(),GMe=a("p"),pyr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_yr=l(),wc=a("p"),uyr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),byr=o("not"),vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Fyr=o("from_pretrained()"),Tyr=o(" to load the model weights."),Myr=l(),F(aC.$$.fragment),Eyr=l(),Ir=a("div"),F(fx.$$.fragment),Cyr=l(),VMe=a("p"),wyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ayr=l(),hn=a("p"),Lyr=o("The model class to instantiate is selected based on the "),XMe=a("code"),yyr=o("model_type"),xyr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),$yr=o("pretrained_model_name_or_path"),kyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(":"),Pyr=l(),_e=a("ul"),nC=a("li"),WMe=a("strong"),Byr=o("albert"),Iyr=o(" \u2014 "),PY=a("a"),Nyr=o("TFAlbertForMultipleChoice"),qyr=o(" (ALBERT model)"),jyr=l(),sC=a("li"),HMe=a("strong"),Dyr=o("bert"),Gyr=o(" \u2014 "),BY=a("a"),Oyr=o("TFBertForMultipleChoice"),Vyr=o(" (BERT model)"),Xyr=l(),lC=a("li"),UMe=a("strong"),zyr=o("camembert"),Qyr=o(" \u2014 "),IY=a("a"),Wyr=o("TFCamembertForMultipleChoice"),Hyr=o(" (CamemBERT model)"),Uyr=l(),iC=a("li"),JMe=a("strong"),Jyr=o("convbert"),Yyr=o(" \u2014 "),NY=a("a"),Kyr=o("TFConvBertForMultipleChoice"),Zyr=o(" (ConvBERT model)"),e8r=l(),dC=a("li"),YMe=a("strong"),o8r=o("distilbert"),r8r=o(" \u2014 "),qY=a("a"),t8r=o("TFDistilBertForMultipleChoice"),a8r=o(" (DistilBERT model)"),n8r=l(),cC=a("li"),KMe=a("strong"),s8r=o("electra"),l8r=o(" \u2014 "),jY=a("a"),i8r=o("TFElectraForMultipleChoice"),d8r=o(" (ELECTRA model)"),c8r=l(),fC=a("li"),ZMe=a("strong"),f8r=o("flaubert"),m8r=o(" \u2014 "),DY=a("a"),g8r=o("TFFlaubertForMultipleChoice"),h8r=o(" (FlauBERT model)"),p8r=l(),mC=a("li"),e4e=a("strong"),_8r=o("funnel"),u8r=o(" \u2014 "),GY=a("a"),b8r=o("TFFunnelForMultipleChoice"),v8r=o(" (Funnel Transformer model)"),F8r=l(),gC=a("li"),o4e=a("strong"),T8r=o("longformer"),M8r=o(" \u2014 "),OY=a("a"),E8r=o("TFLongformerForMultipleChoice"),C8r=o(" (Longformer model)"),w8r=l(),hC=a("li"),r4e=a("strong"),A8r=o("mobilebert"),L8r=o(" \u2014 "),VY=a("a"),y8r=o("TFMobileBertForMultipleChoice"),x8r=o(" (MobileBERT model)"),$8r=l(),pC=a("li"),t4e=a("strong"),k8r=o("mpnet"),S8r=o(" \u2014 "),XY=a("a"),R8r=o("TFMPNetForMultipleChoice"),P8r=o(" (MPNet model)"),B8r=l(),_C=a("li"),a4e=a("strong"),I8r=o("rembert"),N8r=o(" \u2014 "),zY=a("a"),q8r=o("TFRemBertForMultipleChoice"),j8r=o(" (RemBERT model)"),D8r=l(),uC=a("li"),n4e=a("strong"),G8r=o("roberta"),O8r=o(" \u2014 "),QY=a("a"),V8r=o("TFRobertaForMultipleChoice"),X8r=o(" (RoBERTa model)"),z8r=l(),bC=a("li"),s4e=a("strong"),Q8r=o("roformer"),W8r=o(" \u2014 "),WY=a("a"),H8r=o("TFRoFormerForMultipleChoice"),U8r=o(" (RoFormer model)"),J8r=l(),vC=a("li"),l4e=a("strong"),Y8r=o("xlm"),K8r=o(" \u2014 "),HY=a("a"),Z8r=o("TFXLMForMultipleChoice"),e9r=o(" (XLM model)"),o9r=l(),FC=a("li"),i4e=a("strong"),r9r=o("xlm-roberta"),t9r=o(" \u2014 "),UY=a("a"),a9r=o("TFXLMRobertaForMultipleChoice"),n9r=o(" (XLM-RoBERTa model)"),s9r=l(),TC=a("li"),d4e=a("strong"),l9r=o("xlnet"),i9r=o(" \u2014 "),JY=a("a"),d9r=o("TFXLNetForMultipleChoice"),c9r=o(" (XLNet model)"),f9r=l(),F(MC.$$.fragment),eXe=l(),Ac=a("h2"),EC=a("a"),c4e=a("span"),F(mx.$$.fragment),m9r=l(),f4e=a("span"),g9r=o("TFAutoModelForNextSentencePrediction"),oXe=l(),dr=a("div"),F(gx.$$.fragment),h9r=l(),Lc=a("p"),p9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=a("a"),_9r=o("from_pretrained()"),u9r=o(" class method or the "),KY=a("a"),b9r=o("from_config()"),v9r=o(` class
method.`),F9r=l(),hx=a("p"),T9r=o("This class cannot be instantiated directly using "),m4e=a("code"),M9r=o("__init__()"),E9r=o(" (throws an error)."),C9r=l(),qt=a("div"),F(px.$$.fragment),w9r=l(),g4e=a("p"),A9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),L9r=l(),yc=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),x9r=o("not"),$9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),k9r=o("from_pretrained()"),S9r=o(" to load the model weights."),R9r=l(),F(CC.$$.fragment),P9r=l(),Nr=a("div"),F(_x.$$.fragment),B9r=l(),p4e=a("p"),I9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N9r=l(),pn=a("p"),q9r=o("The model class to instantiate is selected based on the "),_4e=a("code"),j9r=o("model_type"),D9r=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(":"),z9r=l(),ux=a("ul"),wC=a("li"),v4e=a("strong"),Q9r=o("bert"),W9r=o(" \u2014 "),eK=a("a"),H9r=o("TFBertForNextSentencePrediction"),U9r=o(" (BERT model)"),J9r=l(),AC=a("li"),F4e=a("strong"),Y9r=o("mobilebert"),K9r=o(" \u2014 "),oK=a("a"),Z9r=o("TFMobileBertForNextSentencePrediction"),exr=o(" (MobileBERT model)"),oxr=l(),F(LC.$$.fragment),rXe=l(),xc=a("h2"),yC=a("a"),T4e=a("span"),F(bx.$$.fragment),rxr=l(),M4e=a("span"),txr=o("TFAutoModelForTableQuestionAnswering"),tXe=l(),cr=a("div"),F(vx.$$.fragment),axr=l(),$c=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rK=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),tK=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),Fx=a("p"),fxr=o("This class cannot be instantiated directly using "),E4e=a("code"),mxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),jt=a("div"),F(Tx.$$.fragment),pxr=l(),C4e=a("p"),_xr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uxr=l(),kc=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),vxr=o("not"),Fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),F(xC.$$.fragment),Cxr=l(),qr=a("div"),F(Mx.$$.fragment),wxr=l(),A4e=a("p"),Axr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lxr=l(),_n=a("p"),yxr=o("The model class to instantiate is selected based on the "),L4e=a("code"),xxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(":"),Bxr=l(),$4e=a("ul"),$C=a("li"),k4e=a("strong"),Ixr=o("tapas"),Nxr=o(" \u2014 "),nK=a("a"),qxr=o("TFTapasForQuestionAnswering"),jxr=o(" (TAPAS model)"),Dxr=l(),F(kC.$$.fragment),aXe=l(),Sc=a("h2"),SC=a("a"),S4e=a("span"),F(Ex.$$.fragment),Gxr=l(),R4e=a("span"),Oxr=o("TFAutoModelForTokenClassification"),nXe=l(),fr=a("div"),F(Cx.$$.fragment),Vxr=l(),Rc=a("p"),Xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sK=a("a"),zxr=o("from_pretrained()"),Qxr=o(" class method or the "),lK=a("a"),Wxr=o("from_config()"),Hxr=o(` class
method.`),Uxr=l(),wx=a("p"),Jxr=o("This class cannot be instantiated directly using "),P4e=a("code"),Yxr=o("__init__()"),Kxr=o(" (throws an error)."),Zxr=l(),Dt=a("div"),F(Ax.$$.fragment),e$r=l(),B4e=a("p"),o$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r$r=l(),Pc=a("p"),t$r=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),a$r=o("not"),n$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),s$r=o("from_pretrained()"),l$r=o(" to load the model weights."),i$r=l(),F(RC.$$.fragment),d$r=l(),jr=a("div"),F(Lx.$$.fragment),c$r=l(),N4e=a("p"),f$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),m$r=l(),un=a("p"),g$r=o("The model class to instantiate is selected based on the "),q4e=a("code"),h$r=o("model_type"),p$r=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),_$r=o("pretrained_model_name_or_path"),u$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(":"),F$r=l(),de=a("ul"),PC=a("li"),G4e=a("strong"),T$r=o("albert"),M$r=o(" \u2014 "),dK=a("a"),E$r=o("TFAlbertForTokenClassification"),C$r=o(" (ALBERT model)"),w$r=l(),BC=a("li"),O4e=a("strong"),A$r=o("bert"),L$r=o(" \u2014 "),cK=a("a"),y$r=o("TFBertForTokenClassification"),x$r=o(" (BERT model)"),$$r=l(),IC=a("li"),V4e=a("strong"),k$r=o("camembert"),S$r=o(" \u2014 "),fK=a("a"),R$r=o("TFCamembertForTokenClassification"),P$r=o(" (CamemBERT model)"),B$r=l(),NC=a("li"),X4e=a("strong"),I$r=o("convbert"),N$r=o(" \u2014 "),mK=a("a"),q$r=o("TFConvBertForTokenClassification"),j$r=o(" (ConvBERT model)"),D$r=l(),qC=a("li"),z4e=a("strong"),G$r=o("deberta"),O$r=o(" \u2014 "),gK=a("a"),V$r=o("TFDebertaForTokenClassification"),X$r=o(" (DeBERTa model)"),z$r=l(),jC=a("li"),Q4e=a("strong"),Q$r=o("deberta-v2"),W$r=o(" \u2014 "),hK=a("a"),H$r=o("TFDebertaV2ForTokenClassification"),U$r=o(" (DeBERTa-v2 model)"),J$r=l(),DC=a("li"),W4e=a("strong"),Y$r=o("distilbert"),K$r=o(" \u2014 "),pK=a("a"),Z$r=o("TFDistilBertForTokenClassification"),ekr=o(" (DistilBERT model)"),okr=l(),GC=a("li"),H4e=a("strong"),rkr=o("electra"),tkr=o(" \u2014 "),_K=a("a"),akr=o("TFElectraForTokenClassification"),nkr=o(" (ELECTRA model)"),skr=l(),OC=a("li"),U4e=a("strong"),lkr=o("flaubert"),ikr=o(" \u2014 "),uK=a("a"),dkr=o("TFFlaubertForTokenClassification"),ckr=o(" (FlauBERT model)"),fkr=l(),VC=a("li"),J4e=a("strong"),mkr=o("funnel"),gkr=o(" \u2014 "),bK=a("a"),hkr=o("TFFunnelForTokenClassification"),pkr=o(" (Funnel Transformer model)"),_kr=l(),XC=a("li"),Y4e=a("strong"),ukr=o("layoutlm"),bkr=o(" \u2014 "),vK=a("a"),vkr=o("TFLayoutLMForTokenClassification"),Fkr=o(" (LayoutLM model)"),Tkr=l(),zC=a("li"),K4e=a("strong"),Mkr=o("longformer"),Ekr=o(" \u2014 "),FK=a("a"),Ckr=o("TFLongformerForTokenClassification"),wkr=o(" (Longformer model)"),Akr=l(),QC=a("li"),Z4e=a("strong"),Lkr=o("mobilebert"),ykr=o(" \u2014 "),TK=a("a"),xkr=o("TFMobileBertForTokenClassification"),$kr=o(" (MobileBERT model)"),kkr=l(),WC=a("li"),eEe=a("strong"),Skr=o("mpnet"),Rkr=o(" \u2014 "),MK=a("a"),Pkr=o("TFMPNetForTokenClassification"),Bkr=o(" (MPNet model)"),Ikr=l(),HC=a("li"),oEe=a("strong"),Nkr=o("rembert"),qkr=o(" \u2014 "),EK=a("a"),jkr=o("TFRemBertForTokenClassification"),Dkr=o(" (RemBERT model)"),Gkr=l(),UC=a("li"),rEe=a("strong"),Okr=o("roberta"),Vkr=o(" \u2014 "),CK=a("a"),Xkr=o("TFRobertaForTokenClassification"),zkr=o(" (RoBERTa model)"),Qkr=l(),JC=a("li"),tEe=a("strong"),Wkr=o("roformer"),Hkr=o(" \u2014 "),wK=a("a"),Ukr=o("TFRoFormerForTokenClassification"),Jkr=o(" (RoFormer model)"),Ykr=l(),YC=a("li"),aEe=a("strong"),Kkr=o("xlm"),Zkr=o(" \u2014 "),AK=a("a"),eSr=o("TFXLMForTokenClassification"),oSr=o(" (XLM model)"),rSr=l(),KC=a("li"),nEe=a("strong"),tSr=o("xlm-roberta"),aSr=o(" \u2014 "),LK=a("a"),nSr=o("TFXLMRobertaForTokenClassification"),sSr=o(" (XLM-RoBERTa model)"),lSr=l(),ZC=a("li"),sEe=a("strong"),iSr=o("xlnet"),dSr=o(" \u2014 "),yK=a("a"),cSr=o("TFXLNetForTokenClassification"),fSr=o(" (XLNet model)"),mSr=l(),F(e5.$$.fragment),sXe=l(),Bc=a("h2"),o5=a("a"),lEe=a("span"),F(yx.$$.fragment),gSr=l(),iEe=a("span"),hSr=o("TFAutoModelForQuestionAnswering"),lXe=l(),mr=a("div"),F(xx.$$.fragment),pSr=l(),Ic=a("p"),_Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xK=a("a"),uSr=o("from_pretrained()"),bSr=o(" class method or the "),$K=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),$x=a("p"),MSr=o("This class cannot be instantiated directly using "),dEe=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),Gt=a("div"),F(kx.$$.fragment),ASr=l(),cEe=a("p"),LSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ySr=l(),Nc=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),PSr=l(),F(r5.$$.fragment),BSr=l(),Dr=a("div"),F(Sx.$$.fragment),ISr=l(),mEe=a("p"),NSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qSr=l(),bn=a("p"),jSr=o("The model class to instantiate is selected based on the "),gEe=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),QSr=l(),ce=a("ul"),t5=a("li"),_Ee=a("strong"),WSr=o("albert"),HSr=o(" \u2014 "),SK=a("a"),USr=o("TFAlbertForQuestionAnswering"),JSr=o(" (ALBERT model)"),YSr=l(),a5=a("li"),uEe=a("strong"),KSr=o("bert"),ZSr=o(" \u2014 "),RK=a("a"),eRr=o("TFBertForQuestionAnswering"),oRr=o(" (BERT model)"),rRr=l(),n5=a("li"),bEe=a("strong"),tRr=o("camembert"),aRr=o(" \u2014 "),PK=a("a"),nRr=o("TFCamembertForQuestionAnswering"),sRr=o(" (CamemBERT model)"),lRr=l(),s5=a("li"),vEe=a("strong"),iRr=o("convbert"),dRr=o(" \u2014 "),BK=a("a"),cRr=o("TFConvBertForQuestionAnswering"),fRr=o(" (ConvBERT model)"),mRr=l(),l5=a("li"),FEe=a("strong"),gRr=o("deberta"),hRr=o(" \u2014 "),IK=a("a"),pRr=o("TFDebertaForQuestionAnswering"),_Rr=o(" (DeBERTa model)"),uRr=l(),i5=a("li"),TEe=a("strong"),bRr=o("deberta-v2"),vRr=o(" \u2014 "),NK=a("a"),FRr=o("TFDebertaV2ForQuestionAnswering"),TRr=o(" (DeBERTa-v2 model)"),MRr=l(),d5=a("li"),MEe=a("strong"),ERr=o("distilbert"),CRr=o(" \u2014 "),qK=a("a"),wRr=o("TFDistilBertForQuestionAnswering"),ARr=o(" (DistilBERT model)"),LRr=l(),c5=a("li"),EEe=a("strong"),yRr=o("electra"),xRr=o(" \u2014 "),jK=a("a"),$Rr=o("TFElectraForQuestionAnswering"),kRr=o(" (ELECTRA model)"),SRr=l(),f5=a("li"),CEe=a("strong"),RRr=o("flaubert"),PRr=o(" \u2014 "),DK=a("a"),BRr=o("TFFlaubertForQuestionAnsweringSimple"),IRr=o(" (FlauBERT model)"),NRr=l(),m5=a("li"),wEe=a("strong"),qRr=o("funnel"),jRr=o(" \u2014 "),GK=a("a"),DRr=o("TFFunnelForQuestionAnswering"),GRr=o(" (Funnel Transformer model)"),ORr=l(),g5=a("li"),AEe=a("strong"),VRr=o("gptj"),XRr=o(" \u2014 "),OK=a("a"),zRr=o("TFGPTJForQuestionAnswering"),QRr=o(" (GPT-J model)"),WRr=l(),h5=a("li"),LEe=a("strong"),HRr=o("longformer"),URr=o(" \u2014 "),VK=a("a"),JRr=o("TFLongformerForQuestionAnswering"),YRr=o(" (Longformer model)"),KRr=l(),p5=a("li"),yEe=a("strong"),ZRr=o("mobilebert"),ePr=o(" \u2014 "),XK=a("a"),oPr=o("TFMobileBertForQuestionAnswering"),rPr=o(" (MobileBERT model)"),tPr=l(),_5=a("li"),xEe=a("strong"),aPr=o("mpnet"),nPr=o(" \u2014 "),zK=a("a"),sPr=o("TFMPNetForQuestionAnswering"),lPr=o(" (MPNet model)"),iPr=l(),u5=a("li"),$Ee=a("strong"),dPr=o("rembert"),cPr=o(" \u2014 "),QK=a("a"),fPr=o("TFRemBertForQuestionAnswering"),mPr=o(" (RemBERT model)"),gPr=l(),b5=a("li"),kEe=a("strong"),hPr=o("roberta"),pPr=o(" \u2014 "),WK=a("a"),_Pr=o("TFRobertaForQuestionAnswering"),uPr=o(" (RoBERTa model)"),bPr=l(),v5=a("li"),SEe=a("strong"),vPr=o("roformer"),FPr=o(" \u2014 "),HK=a("a"),TPr=o("TFRoFormerForQuestionAnswering"),MPr=o(" (RoFormer model)"),EPr=l(),F5=a("li"),REe=a("strong"),CPr=o("xlm"),wPr=o(" \u2014 "),UK=a("a"),APr=o("TFXLMForQuestionAnsweringSimple"),LPr=o(" (XLM model)"),yPr=l(),T5=a("li"),PEe=a("strong"),xPr=o("xlm-roberta"),$Pr=o(" \u2014 "),JK=a("a"),kPr=o("TFXLMRobertaForQuestionAnswering"),SPr=o(" (XLM-RoBERTa model)"),RPr=l(),M5=a("li"),BEe=a("strong"),PPr=o("xlnet"),BPr=o(" \u2014 "),YK=a("a"),IPr=o("TFXLNetForQuestionAnsweringSimple"),NPr=o(" (XLNet model)"),qPr=l(),F(E5.$$.fragment),iXe=l(),qc=a("h2"),C5=a("a"),IEe=a("span"),F(Rx.$$.fragment),jPr=l(),NEe=a("span"),DPr=o("TFAutoModelForVision2Seq"),dXe=l(),gr=a("div"),F(Px.$$.fragment),GPr=l(),jc=a("p"),OPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KK=a("a"),VPr=o("from_pretrained()"),XPr=o(" class method or the "),ZK=a("a"),zPr=o("from_config()"),QPr=o(` class
method.`),WPr=l(),Bx=a("p"),HPr=o("This class cannot be instantiated directly using "),qEe=a("code"),UPr=o("__init__()"),JPr=o(" (throws an error)."),YPr=l(),Ot=a("div"),F(Ix.$$.fragment),KPr=l(),jEe=a("p"),ZPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eBr=l(),Dc=a("p"),oBr=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),rBr=o("not"),tBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),aBr=o("from_pretrained()"),nBr=o(" to load the model weights."),sBr=l(),F(w5.$$.fragment),lBr=l(),Gr=a("div"),F(Nx.$$.fragment),iBr=l(),GEe=a("p"),dBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cBr=l(),vn=a("p"),fBr=o("The model class to instantiate is selected based on the "),OEe=a("code"),mBr=o("model_type"),gBr=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),hBr=o("pretrained_model_name_or_path"),pBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),_Br=o("pretrained_model_name_or_path"),uBr=o(":"),bBr=l(),zEe=a("ul"),A5=a("li"),QEe=a("strong"),vBr=o("vision-encoder-decoder"),FBr=o(" \u2014 "),oZ=a("a"),TBr=o("TFVisionEncoderDecoderModel"),MBr=o(" (Vision Encoder decoder model)"),EBr=l(),F(L5.$$.fragment),cXe=l(),Gc=a("h2"),y5=a("a"),WEe=a("span"),F(qx.$$.fragment),CBr=l(),HEe=a("span"),wBr=o("TFAutoModelForSpeechSeq2Seq"),fXe=l(),hr=a("div"),F(jx.$$.fragment),ABr=l(),Oc=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rZ=a("a"),yBr=o("from_pretrained()"),xBr=o(" class method or the "),tZ=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),Dx=a("p"),RBr=o("This class cannot be instantiated directly using "),UEe=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Vt=a("div"),F(Gx.$$.fragment),NBr=l(),JEe=a("p"),qBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jBr=l(),Vc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),YEe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(x5.$$.fragment),QBr=l(),Or=a("div"),F(Ox.$$.fragment),WBr=l(),KEe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UBr=l(),Fn=a("p"),JBr=o("The model class to instantiate is selected based on the "),ZEe=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),eCe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),rCe=a("ul"),$5=a("li"),tCe=a("strong"),aIr=o("speech_to_text"),nIr=o(" \u2014 "),nZ=a("a"),sIr=o("TFSpeech2TextForConditionalGeneration"),lIr=o(" (Speech2Text model)"),iIr=l(),F(k5.$$.fragment),mXe=l(),Xc=a("h2"),S5=a("a"),aCe=a("span"),F(Vx.$$.fragment),dIr=l(),nCe=a("span"),cIr=o("FlaxAutoModel"),gXe=l(),pr=a("div"),F(Xx.$$.fragment),fIr=l(),zc=a("p"),mIr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sZ=a("a"),gIr=o("from_pretrained()"),hIr=o(" class method or the "),lZ=a("a"),pIr=o("from_config()"),_Ir=o(` class
method.`),uIr=l(),zx=a("p"),bIr=o("This class cannot be instantiated directly using "),sCe=a("code"),vIr=o("__init__()"),FIr=o(" (throws an error)."),TIr=l(),Xt=a("div"),F(Qx.$$.fragment),MIr=l(),lCe=a("p"),EIr=o("Instantiates one of the base model classes of the library from a configuration."),CIr=l(),Qc=a("p"),wIr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),AIr=o("not"),LIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),yIr=o("from_pretrained()"),xIr=o(" to load the model weights."),$Ir=l(),F(R5.$$.fragment),kIr=l(),Vr=a("div"),F(Wx.$$.fragment),SIr=l(),dCe=a("p"),RIr=o("Instantiate one of the base model classes of the library from a pretrained model."),PIr=l(),Tn=a("p"),BIr=o("The model class to instantiate is selected based on the "),cCe=a("code"),IIr=o("model_type"),NIr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),qIr=o("pretrained_model_name_or_path"),jIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(":"),OIr=l(),oe=a("ul"),P5=a("li"),gCe=a("strong"),VIr=o("albert"),XIr=o(" \u2014 "),dZ=a("a"),zIr=o("FlaxAlbertModel"),QIr=o(" (ALBERT model)"),WIr=l(),B5=a("li"),hCe=a("strong"),HIr=o("bart"),UIr=o(" \u2014 "),cZ=a("a"),JIr=o("FlaxBartModel"),YIr=o(" (BART model)"),KIr=l(),I5=a("li"),pCe=a("strong"),ZIr=o("beit"),eNr=o(" \u2014 "),fZ=a("a"),oNr=o("FlaxBeitModel"),rNr=o(" (BEiT model)"),tNr=l(),N5=a("li"),_Ce=a("strong"),aNr=o("bert"),nNr=o(" \u2014 "),mZ=a("a"),sNr=o("FlaxBertModel"),lNr=o(" (BERT model)"),iNr=l(),q5=a("li"),uCe=a("strong"),dNr=o("big_bird"),cNr=o(" \u2014 "),gZ=a("a"),fNr=o("FlaxBigBirdModel"),mNr=o(" (BigBird model)"),gNr=l(),j5=a("li"),bCe=a("strong"),hNr=o("blenderbot"),pNr=o(" \u2014 "),hZ=a("a"),_Nr=o("FlaxBlenderbotModel"),uNr=o(" (Blenderbot model)"),bNr=l(),D5=a("li"),vCe=a("strong"),vNr=o("blenderbot-small"),FNr=o(" \u2014 "),pZ=a("a"),TNr=o("FlaxBlenderbotSmallModel"),MNr=o(" (BlenderbotSmall model)"),ENr=l(),G5=a("li"),FCe=a("strong"),CNr=o("clip"),wNr=o(" \u2014 "),_Z=a("a"),ANr=o("FlaxCLIPModel"),LNr=o(" (CLIP model)"),yNr=l(),O5=a("li"),TCe=a("strong"),xNr=o("distilbert"),$Nr=o(" \u2014 "),uZ=a("a"),kNr=o("FlaxDistilBertModel"),SNr=o(" (DistilBERT model)"),RNr=l(),V5=a("li"),MCe=a("strong"),PNr=o("electra"),BNr=o(" \u2014 "),bZ=a("a"),INr=o("FlaxElectraModel"),NNr=o(" (ELECTRA model)"),qNr=l(),X5=a("li"),ECe=a("strong"),jNr=o("gpt2"),DNr=o(" \u2014 "),vZ=a("a"),GNr=o("FlaxGPT2Model"),ONr=o(" (OpenAI GPT-2 model)"),VNr=l(),z5=a("li"),CCe=a("strong"),XNr=o("gpt_neo"),zNr=o(" \u2014 "),FZ=a("a"),QNr=o("FlaxGPTNeoModel"),WNr=o(" (GPT Neo model)"),HNr=l(),Q5=a("li"),wCe=a("strong"),UNr=o("gptj"),JNr=o(" \u2014 "),TZ=a("a"),YNr=o("FlaxGPTJModel"),KNr=o(" (GPT-J model)"),ZNr=l(),W5=a("li"),ACe=a("strong"),eqr=o("longt5"),oqr=o(" \u2014 "),MZ=a("a"),rqr=o("FlaxLongT5Model"),tqr=o(" (LongT5 model)"),aqr=l(),H5=a("li"),LCe=a("strong"),nqr=o("marian"),sqr=o(" \u2014 "),EZ=a("a"),lqr=o("FlaxMarianModel"),iqr=o(" (Marian model)"),dqr=l(),U5=a("li"),yCe=a("strong"),cqr=o("mbart"),fqr=o(" \u2014 "),CZ=a("a"),mqr=o("FlaxMBartModel"),gqr=o(" (mBART model)"),hqr=l(),J5=a("li"),xCe=a("strong"),pqr=o("mt5"),_qr=o(" \u2014 "),wZ=a("a"),uqr=o("FlaxMT5Model"),bqr=o(" (MT5 model)"),vqr=l(),Y5=a("li"),$Ce=a("strong"),Fqr=o("opt"),Tqr=o(" \u2014 "),AZ=a("a"),Mqr=o("FlaxOPTModel"),Eqr=o(" (OPT model)"),Cqr=l(),K5=a("li"),kCe=a("strong"),wqr=o("pegasus"),Aqr=o(" \u2014 "),LZ=a("a"),Lqr=o("FlaxPegasusModel"),yqr=o(" (Pegasus model)"),xqr=l(),Z5=a("li"),SCe=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),yZ=a("a"),Sqr=o("FlaxRobertaModel"),Rqr=o(" (RoBERTa model)"),Pqr=l(),e3=a("li"),RCe=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),xZ=a("a"),Nqr=o("FlaxRoFormerModel"),qqr=o(" (RoFormer model)"),jqr=l(),o3=a("li"),PCe=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),$Z=a("a"),Oqr=o("FlaxT5Model"),Vqr=o(" (T5 model)"),Xqr=l(),r3=a("li"),BCe=a("strong"),zqr=o("vision-text-dual-encoder"),Qqr=o(" \u2014 "),kZ=a("a"),Wqr=o("FlaxVisionTextDualEncoderModel"),Hqr=o(" (VisionTextDualEncoder model)"),Uqr=l(),t3=a("li"),ICe=a("strong"),Jqr=o("vit"),Yqr=o(" \u2014 "),SZ=a("a"),Kqr=o("FlaxViTModel"),Zqr=o(" (ViT model)"),ejr=l(),a3=a("li"),NCe=a("strong"),ojr=o("wav2vec2"),rjr=o(" \u2014 "),RZ=a("a"),tjr=o("FlaxWav2Vec2Model"),ajr=o(" (Wav2Vec2 model)"),njr=l(),n3=a("li"),qCe=a("strong"),sjr=o("xglm"),ljr=o(" \u2014 "),PZ=a("a"),ijr=o("FlaxXGLMModel"),djr=o(" (XGLM model)"),cjr=l(),s3=a("li"),jCe=a("strong"),fjr=o("xlm-roberta"),mjr=o(" \u2014 "),BZ=a("a"),gjr=o("FlaxXLMRobertaModel"),hjr=o(" (XLM-RoBERTa model)"),pjr=l(),F(l3.$$.fragment),hXe=l(),Wc=a("h2"),i3=a("a"),DCe=a("span"),F(Hx.$$.fragment),_jr=l(),GCe=a("span"),ujr=o("FlaxAutoModelForCausalLM"),pXe=l(),_r=a("div"),F(Ux.$$.fragment),bjr=l(),Hc=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IZ=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),NZ=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),Jx=a("p"),wjr=o("This class cannot be instantiated directly using "),OCe=a("code"),Ajr=o("__init__()"),Ljr=o(" (throws an error)."),yjr=l(),zt=a("div"),F(Yx.$$.fragment),xjr=l(),VCe=a("p"),$jr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kjr=l(),Uc=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),Njr=l(),F(d3.$$.fragment),qjr=l(),Xr=a("div"),F(Kx.$$.fragment),jjr=l(),zCe=a("p"),Djr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gjr=l(),Mn=a("p"),Ojr=o("The model class to instantiate is selected based on the "),QCe=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),zjr=o("pretrained_model_name_or_path"),Qjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=a("code"),Wjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),xe=a("ul"),c3=a("li"),UCe=a("strong"),Jjr=o("bart"),Yjr=o(" \u2014 "),jZ=a("a"),Kjr=o("FlaxBartForCausalLM"),Zjr=o(" (BART model)"),eDr=l(),f3=a("li"),JCe=a("strong"),oDr=o("bert"),rDr=o(" \u2014 "),DZ=a("a"),tDr=o("FlaxBertForCausalLM"),aDr=o(" (BERT model)"),nDr=l(),m3=a("li"),YCe=a("strong"),sDr=o("big_bird"),lDr=o(" \u2014 "),GZ=a("a"),iDr=o("FlaxBigBirdForCausalLM"),dDr=o(" (BigBird model)"),cDr=l(),g3=a("li"),KCe=a("strong"),fDr=o("electra"),mDr=o(" \u2014 "),OZ=a("a"),gDr=o("FlaxElectraForCausalLM"),hDr=o(" (ELECTRA model)"),pDr=l(),h3=a("li"),ZCe=a("strong"),_Dr=o("gpt2"),uDr=o(" \u2014 "),VZ=a("a"),bDr=o("FlaxGPT2LMHeadModel"),vDr=o(" (OpenAI GPT-2 model)"),FDr=l(),p3=a("li"),e5e=a("strong"),TDr=o("gpt_neo"),MDr=o(" \u2014 "),XZ=a("a"),EDr=o("FlaxGPTNeoForCausalLM"),CDr=o(" (GPT Neo model)"),wDr=l(),_3=a("li"),o5e=a("strong"),ADr=o("gptj"),LDr=o(" \u2014 "),zZ=a("a"),yDr=o("FlaxGPTJForCausalLM"),xDr=o(" (GPT-J model)"),$Dr=l(),u3=a("li"),r5e=a("strong"),kDr=o("opt"),SDr=o(" \u2014 "),QZ=a("a"),RDr=o("FlaxOPTForCausalLM"),PDr=o(" (OPT model)"),BDr=l(),b3=a("li"),t5e=a("strong"),IDr=o("roberta"),NDr=o(" \u2014 "),WZ=a("a"),qDr=o("FlaxRobertaForCausalLM"),jDr=o(" (RoBERTa model)"),DDr=l(),v3=a("li"),a5e=a("strong"),GDr=o("xglm"),ODr=o(" \u2014 "),HZ=a("a"),VDr=o("FlaxXGLMForCausalLM"),XDr=o(" (XGLM model)"),zDr=l(),F(F3.$$.fragment),_Xe=l(),Jc=a("h2"),T3=a("a"),n5e=a("span"),F(Zx.$$.fragment),QDr=l(),s5e=a("span"),WDr=o("FlaxAutoModelForPreTraining"),uXe=l(),ur=a("div"),F(e$.$$.fragment),HDr=l(),Yc=a("p"),UDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" class method or the "),JZ=a("a"),KDr=o("from_config()"),ZDr=o(` class
method.`),eGr=l(),o$=a("p"),oGr=o("This class cannot be instantiated directly using "),l5e=a("code"),rGr=o("__init__()"),tGr=o(" (throws an error)."),aGr=l(),Qt=a("div"),F(r$.$$.fragment),nGr=l(),i5e=a("p"),sGr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lGr=l(),Kc=a("p"),iGr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),dGr=o("not"),cGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),fGr=o("from_pretrained()"),mGr=o(" to load the model weights."),gGr=l(),F(M3.$$.fragment),hGr=l(),zr=a("div"),F(t$.$$.fragment),pGr=l(),c5e=a("p"),_Gr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uGr=l(),En=a("p"),bGr=o("The model class to instantiate is selected based on the "),f5e=a("code"),vGr=o("model_type"),FGr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),TGr=o("pretrained_model_name_or_path"),MGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),EGr=o("pretrained_model_name_or_path"),CGr=o(":"),wGr=l(),Ee=a("ul"),E3=a("li"),h5e=a("strong"),AGr=o("albert"),LGr=o(" \u2014 "),KZ=a("a"),yGr=o("FlaxAlbertForPreTraining"),xGr=o(" (ALBERT model)"),$Gr=l(),C3=a("li"),p5e=a("strong"),kGr=o("bart"),SGr=o(" \u2014 "),ZZ=a("a"),RGr=o("FlaxBartForConditionalGeneration"),PGr=o(" (BART model)"),BGr=l(),w3=a("li"),_5e=a("strong"),IGr=o("bert"),NGr=o(" \u2014 "),eee=a("a"),qGr=o("FlaxBertForPreTraining"),jGr=o(" (BERT model)"),DGr=l(),A3=a("li"),u5e=a("strong"),GGr=o("big_bird"),OGr=o(" \u2014 "),oee=a("a"),VGr=o("FlaxBigBirdForPreTraining"),XGr=o(" (BigBird model)"),zGr=l(),L3=a("li"),b5e=a("strong"),QGr=o("electra"),WGr=o(" \u2014 "),ree=a("a"),HGr=o("FlaxElectraForPreTraining"),UGr=o(" (ELECTRA model)"),JGr=l(),y3=a("li"),v5e=a("strong"),YGr=o("longt5"),KGr=o(" \u2014 "),tee=a("a"),ZGr=o("FlaxLongT5ForConditionalGeneration"),eOr=o(" (LongT5 model)"),oOr=l(),x3=a("li"),F5e=a("strong"),rOr=o("mbart"),tOr=o(" \u2014 "),aee=a("a"),aOr=o("FlaxMBartForConditionalGeneration"),nOr=o(" (mBART model)"),sOr=l(),$3=a("li"),T5e=a("strong"),lOr=o("mt5"),iOr=o(" \u2014 "),nee=a("a"),dOr=o("FlaxMT5ForConditionalGeneration"),cOr=o(" (MT5 model)"),fOr=l(),k3=a("li"),M5e=a("strong"),mOr=o("roberta"),gOr=o(" \u2014 "),see=a("a"),hOr=o("FlaxRobertaForMaskedLM"),pOr=o(" (RoBERTa model)"),_Or=l(),S3=a("li"),E5e=a("strong"),uOr=o("roformer"),bOr=o(" \u2014 "),lee=a("a"),vOr=o("FlaxRoFormerForMaskedLM"),FOr=o(" (RoFormer model)"),TOr=l(),R3=a("li"),C5e=a("strong"),MOr=o("t5"),EOr=o(" \u2014 "),iee=a("a"),COr=o("FlaxT5ForConditionalGeneration"),wOr=o(" (T5 model)"),AOr=l(),P3=a("li"),w5e=a("strong"),LOr=o("wav2vec2"),yOr=o(" \u2014 "),dee=a("a"),xOr=o("FlaxWav2Vec2ForPreTraining"),$Or=o(" (Wav2Vec2 model)"),kOr=l(),B3=a("li"),A5e=a("strong"),SOr=o("xlm-roberta"),ROr=o(" \u2014 "),cee=a("a"),POr=o("FlaxXLMRobertaForMaskedLM"),BOr=o(" (XLM-RoBERTa model)"),IOr=l(),F(I3.$$.fragment),bXe=l(),Zc=a("h2"),N3=a("a"),L5e=a("span"),F(a$.$$.fragment),NOr=l(),y5e=a("span"),qOr=o("FlaxAutoModelForMaskedLM"),vXe=l(),br=a("div"),F(n$.$$.fragment),jOr=l(),ef=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fee=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),mee=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),s$=a("p"),QOr=o("This class cannot be instantiated directly using "),x5e=a("code"),WOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Wt=a("div"),F(l$.$$.fragment),JOr=l(),$5e=a("p"),YOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KOr=l(),of=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(q3.$$.fragment),nVr=l(),Qr=a("div"),F(i$.$$.fragment),sVr=l(),S5e=a("p"),lVr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iVr=l(),Cn=a("p"),dVr=o("The model class to instantiate is selected based on the "),R5e=a("code"),cVr=o("model_type"),fVr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),mVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),hVr=o("pretrained_model_name_or_path"),pVr=o(":"),_Vr=l(),$e=a("ul"),j3=a("li"),I5e=a("strong"),uVr=o("albert"),bVr=o(" \u2014 "),hee=a("a"),vVr=o("FlaxAlbertForMaskedLM"),FVr=o(" (ALBERT model)"),TVr=l(),D3=a("li"),N5e=a("strong"),MVr=o("bart"),EVr=o(" \u2014 "),pee=a("a"),CVr=o("FlaxBartForConditionalGeneration"),wVr=o(" (BART model)"),AVr=l(),G3=a("li"),q5e=a("strong"),LVr=o("bert"),yVr=o(" \u2014 "),_ee=a("a"),xVr=o("FlaxBertForMaskedLM"),$Vr=o(" (BERT model)"),kVr=l(),O3=a("li"),j5e=a("strong"),SVr=o("big_bird"),RVr=o(" \u2014 "),uee=a("a"),PVr=o("FlaxBigBirdForMaskedLM"),BVr=o(" (BigBird model)"),IVr=l(),V3=a("li"),D5e=a("strong"),NVr=o("distilbert"),qVr=o(" \u2014 "),bee=a("a"),jVr=o("FlaxDistilBertForMaskedLM"),DVr=o(" (DistilBERT model)"),GVr=l(),X3=a("li"),G5e=a("strong"),OVr=o("electra"),VVr=o(" \u2014 "),vee=a("a"),XVr=o("FlaxElectraForMaskedLM"),zVr=o(" (ELECTRA model)"),QVr=l(),z3=a("li"),O5e=a("strong"),WVr=o("mbart"),HVr=o(" \u2014 "),Fee=a("a"),UVr=o("FlaxMBartForConditionalGeneration"),JVr=o(" (mBART model)"),YVr=l(),Q3=a("li"),V5e=a("strong"),KVr=o("roberta"),ZVr=o(" \u2014 "),Tee=a("a"),eXr=o("FlaxRobertaForMaskedLM"),oXr=o(" (RoBERTa model)"),rXr=l(),W3=a("li"),X5e=a("strong"),tXr=o("roformer"),aXr=o(" \u2014 "),Mee=a("a"),nXr=o("FlaxRoFormerForMaskedLM"),sXr=o(" (RoFormer model)"),lXr=l(),H3=a("li"),z5e=a("strong"),iXr=o("xlm-roberta"),dXr=o(" \u2014 "),Eee=a("a"),cXr=o("FlaxXLMRobertaForMaskedLM"),fXr=o(" (XLM-RoBERTa model)"),mXr=l(),F(U3.$$.fragment),FXe=l(),rf=a("h2"),J3=a("a"),Q5e=a("span"),F(d$.$$.fragment),gXr=l(),W5e=a("span"),hXr=o("FlaxAutoModelForSeq2SeqLM"),TXe=l(),vr=a("div"),F(c$.$$.fragment),pXr=l(),tf=a("p"),_Xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cee=a("a"),uXr=o("from_pretrained()"),bXr=o(" class method or the "),wee=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),f$=a("p"),MXr=o("This class cannot be instantiated directly using "),H5e=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Ht=a("div"),F(m$.$$.fragment),AXr=l(),U5e=a("p"),LXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yXr=l(),af=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(Y3.$$.fragment),BXr=l(),Wr=a("div"),F(g$.$$.fragment),IXr=l(),Y5e=a("p"),NXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qXr=l(),wn=a("p"),jXr=o("The model class to instantiate is selected based on the "),K5e=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),QXr=l(),ke=a("ul"),K3=a("li"),o3e=a("strong"),WXr=o("bart"),HXr=o(" \u2014 "),Lee=a("a"),UXr=o("FlaxBartForConditionalGeneration"),JXr=o(" (BART model)"),YXr=l(),Z3=a("li"),r3e=a("strong"),KXr=o("blenderbot"),ZXr=o(" \u2014 "),yee=a("a"),ezr=o("FlaxBlenderbotForConditionalGeneration"),ozr=o(" (Blenderbot model)"),rzr=l(),e0=a("li"),t3e=a("strong"),tzr=o("blenderbot-small"),azr=o(" \u2014 "),xee=a("a"),nzr=o("FlaxBlenderbotSmallForConditionalGeneration"),szr=o(" (BlenderbotSmall model)"),lzr=l(),o0=a("li"),a3e=a("strong"),izr=o("encoder-decoder"),dzr=o(" \u2014 "),$ee=a("a"),czr=o("FlaxEncoderDecoderModel"),fzr=o(" (Encoder decoder model)"),mzr=l(),r0=a("li"),n3e=a("strong"),gzr=o("longt5"),hzr=o(" \u2014 "),kee=a("a"),pzr=o("FlaxLongT5ForConditionalGeneration"),_zr=o(" (LongT5 model)"),uzr=l(),t0=a("li"),s3e=a("strong"),bzr=o("marian"),vzr=o(" \u2014 "),See=a("a"),Fzr=o("FlaxMarianMTModel"),Tzr=o(" (Marian model)"),Mzr=l(),a0=a("li"),l3e=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),Ree=a("a"),wzr=o("FlaxMBartForConditionalGeneration"),Azr=o(" (mBART model)"),Lzr=l(),n0=a("li"),i3e=a("strong"),yzr=o("mt5"),xzr=o(" \u2014 "),Pee=a("a"),$zr=o("FlaxMT5ForConditionalGeneration"),kzr=o(" (MT5 model)"),Szr=l(),s0=a("li"),d3e=a("strong"),Rzr=o("pegasus"),Pzr=o(" \u2014 "),Bee=a("a"),Bzr=o("FlaxPegasusForConditionalGeneration"),Izr=o(" (Pegasus model)"),Nzr=l(),l0=a("li"),c3e=a("strong"),qzr=o("t5"),jzr=o(" \u2014 "),Iee=a("a"),Dzr=o("FlaxT5ForConditionalGeneration"),Gzr=o(" (T5 model)"),Ozr=l(),F(i0.$$.fragment),MXe=l(),nf=a("h2"),d0=a("a"),f3e=a("span"),F(h$.$$.fragment),Vzr=l(),m3e=a("span"),Xzr=o("FlaxAutoModelForSequenceClassification"),EXe=l(),Fr=a("div"),F(p$.$$.fragment),zzr=l(),sf=a("p"),Qzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nee=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" class method or the "),qee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),_$=a("p"),Kzr=o("This class cannot be instantiated directly using "),g3e=a("code"),Zzr=o("__init__()"),eQr=o(" (throws an error)."),oQr=l(),Ut=a("div"),F(u$.$$.fragment),rQr=l(),h3e=a("p"),tQr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aQr=l(),lf=a("p"),nQr=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),sQr=o("not"),lQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),iQr=o("from_pretrained()"),dQr=o(" to load the model weights."),cQr=l(),F(c0.$$.fragment),fQr=l(),Hr=a("div"),F(b$.$$.fragment),mQr=l(),_3e=a("p"),gQr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hQr=l(),An=a("p"),pQr=o("The model class to instantiate is selected based on the "),u3e=a("code"),_Qr=o("model_type"),uQr=o(` property of the config object (either
passed as an argument or loaded from `),b3e=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(":"),MQr=l(),Se=a("ul"),f0=a("li"),F3e=a("strong"),EQr=o("albert"),CQr=o(" \u2014 "),Dee=a("a"),wQr=o("FlaxAlbertForSequenceClassification"),AQr=o(" (ALBERT model)"),LQr=l(),m0=a("li"),T3e=a("strong"),yQr=o("bart"),xQr=o(" \u2014 "),Gee=a("a"),$Qr=o("FlaxBartForSequenceClassification"),kQr=o(" (BART model)"),SQr=l(),g0=a("li"),M3e=a("strong"),RQr=o("bert"),PQr=o(" \u2014 "),Oee=a("a"),BQr=o("FlaxBertForSequenceClassification"),IQr=o(" (BERT model)"),NQr=l(),h0=a("li"),E3e=a("strong"),qQr=o("big_bird"),jQr=o(" \u2014 "),Vee=a("a"),DQr=o("FlaxBigBirdForSequenceClassification"),GQr=o(" (BigBird model)"),OQr=l(),p0=a("li"),C3e=a("strong"),VQr=o("distilbert"),XQr=o(" \u2014 "),Xee=a("a"),zQr=o("FlaxDistilBertForSequenceClassification"),QQr=o(" (DistilBERT model)"),WQr=l(),_0=a("li"),w3e=a("strong"),HQr=o("electra"),UQr=o(" \u2014 "),zee=a("a"),JQr=o("FlaxElectraForSequenceClassification"),YQr=o(" (ELECTRA model)"),KQr=l(),u0=a("li"),A3e=a("strong"),ZQr=o("mbart"),eWr=o(" \u2014 "),Qee=a("a"),oWr=o("FlaxMBartForSequenceClassification"),rWr=o(" (mBART model)"),tWr=l(),b0=a("li"),L3e=a("strong"),aWr=o("roberta"),nWr=o(" \u2014 "),Wee=a("a"),sWr=o("FlaxRobertaForSequenceClassification"),lWr=o(" (RoBERTa model)"),iWr=l(),v0=a("li"),y3e=a("strong"),dWr=o("roformer"),cWr=o(" \u2014 "),Hee=a("a"),fWr=o("FlaxRoFormerForSequenceClassification"),mWr=o(" (RoFormer model)"),gWr=l(),F0=a("li"),x3e=a("strong"),hWr=o("xlm-roberta"),pWr=o(" \u2014 "),Uee=a("a"),_Wr=o("FlaxXLMRobertaForSequenceClassification"),uWr=o(" (XLM-RoBERTa model)"),bWr=l(),F(T0.$$.fragment),CXe=l(),df=a("h2"),M0=a("a"),$3e=a("span"),F(v$.$$.fragment),vWr=l(),k3e=a("span"),FWr=o("FlaxAutoModelForQuestionAnswering"),wXe=l(),Tr=a("div"),F(F$.$$.fragment),TWr=l(),cf=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jee=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),Yee=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),T$=a("p"),yWr=o("This class cannot be instantiated directly using "),S3e=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Jt=a("div"),F(M$.$$.fragment),SWr=l(),R3e=a("p"),RWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PWr=l(),ff=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),P3e=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(E0.$$.fragment),GWr=l(),Ur=a("div"),F(E$.$$.fragment),OWr=l(),B3e=a("p"),VWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XWr=l(),Ln=a("p"),zWr=o("The model class to instantiate is selected based on the "),I3e=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),N3e=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),Re=a("ul"),C0=a("li"),j3e=a("strong"),ZWr=o("albert"),eHr=o(" \u2014 "),Zee=a("a"),oHr=o("FlaxAlbertForQuestionAnswering"),rHr=o(" (ALBERT model)"),tHr=l(),w0=a("li"),D3e=a("strong"),aHr=o("bart"),nHr=o(" \u2014 "),eoe=a("a"),sHr=o("FlaxBartForQuestionAnswering"),lHr=o(" (BART model)"),iHr=l(),A0=a("li"),G3e=a("strong"),dHr=o("bert"),cHr=o(" \u2014 "),ooe=a("a"),fHr=o("FlaxBertForQuestionAnswering"),mHr=o(" (BERT model)"),gHr=l(),L0=a("li"),O3e=a("strong"),hHr=o("big_bird"),pHr=o(" \u2014 "),roe=a("a"),_Hr=o("FlaxBigBirdForQuestionAnswering"),uHr=o(" (BigBird model)"),bHr=l(),y0=a("li"),V3e=a("strong"),vHr=o("distilbert"),FHr=o(" \u2014 "),toe=a("a"),THr=o("FlaxDistilBertForQuestionAnswering"),MHr=o(" (DistilBERT model)"),EHr=l(),x0=a("li"),X3e=a("strong"),CHr=o("electra"),wHr=o(" \u2014 "),aoe=a("a"),AHr=o("FlaxElectraForQuestionAnswering"),LHr=o(" (ELECTRA model)"),yHr=l(),$0=a("li"),z3e=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),noe=a("a"),kHr=o("FlaxMBartForQuestionAnswering"),SHr=o(" (mBART model)"),RHr=l(),k0=a("li"),Q3e=a("strong"),PHr=o("roberta"),BHr=o(" \u2014 "),soe=a("a"),IHr=o("FlaxRobertaForQuestionAnswering"),NHr=o(" (RoBERTa model)"),qHr=l(),S0=a("li"),W3e=a("strong"),jHr=o("roformer"),DHr=o(" \u2014 "),loe=a("a"),GHr=o("FlaxRoFormerForQuestionAnswering"),OHr=o(" (RoFormer model)"),VHr=l(),R0=a("li"),H3e=a("strong"),XHr=o("xlm-roberta"),zHr=o(" \u2014 "),ioe=a("a"),QHr=o("FlaxXLMRobertaForQuestionAnswering"),WHr=o(" (XLM-RoBERTa model)"),HHr=l(),F(P0.$$.fragment),AXe=l(),mf=a("h2"),B0=a("a"),U3e=a("span"),F(C$.$$.fragment),UHr=l(),J3e=a("span"),JHr=o("FlaxAutoModelForTokenClassification"),LXe=l(),Mr=a("div"),F(w$.$$.fragment),YHr=l(),gf=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),doe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),coe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),A$=a("p"),aUr=o("This class cannot be instantiated directly using "),Y3e=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Yt=a("div"),F(L$.$$.fragment),iUr=l(),K3e=a("p"),dUr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cUr=l(),hf=a("p"),fUr=o(`Note:
Loading a model from its configuration file does `),Z3e=a("strong"),mUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=a("a"),hUr=o("from_pretrained()"),pUr=o(" to load the model weights."),_Ur=l(),F(I0.$$.fragment),uUr=l(),Jr=a("div"),F(y$.$$.fragment),bUr=l(),e0e=a("p"),vUr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FUr=l(),yn=a("p"),TUr=o("The model class to instantiate is selected based on the "),o0e=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),r0e=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),Ve=a("ul"),N0=a("li"),a0e=a("strong"),xUr=o("albert"),$Ur=o(" \u2014 "),moe=a("a"),kUr=o("FlaxAlbertForTokenClassification"),SUr=o(" (ALBERT model)"),RUr=l(),q0=a("li"),n0e=a("strong"),PUr=o("bert"),BUr=o(" \u2014 "),goe=a("a"),IUr=o("FlaxBertForTokenClassification"),NUr=o(" (BERT model)"),qUr=l(),j0=a("li"),s0e=a("strong"),jUr=o("big_bird"),DUr=o(" \u2014 "),hoe=a("a"),GUr=o("FlaxBigBirdForTokenClassification"),OUr=o(" (BigBird model)"),VUr=l(),D0=a("li"),l0e=a("strong"),XUr=o("distilbert"),zUr=o(" \u2014 "),poe=a("a"),QUr=o("FlaxDistilBertForTokenClassification"),WUr=o(" (DistilBERT model)"),HUr=l(),G0=a("li"),i0e=a("strong"),UUr=o("electra"),JUr=o(" \u2014 "),_oe=a("a"),YUr=o("FlaxElectraForTokenClassification"),KUr=o(" (ELECTRA model)"),ZUr=l(),O0=a("li"),d0e=a("strong"),eJr=o("roberta"),oJr=o(" \u2014 "),uoe=a("a"),rJr=o("FlaxRobertaForTokenClassification"),tJr=o(" (RoBERTa model)"),aJr=l(),V0=a("li"),c0e=a("strong"),nJr=o("roformer"),sJr=o(" \u2014 "),boe=a("a"),lJr=o("FlaxRoFormerForTokenClassification"),iJr=o(" (RoFormer model)"),dJr=l(),X0=a("li"),f0e=a("strong"),cJr=o("xlm-roberta"),fJr=o(" \u2014 "),voe=a("a"),mJr=o("FlaxXLMRobertaForTokenClassification"),gJr=o(" (XLM-RoBERTa model)"),hJr=l(),F(z0.$$.fragment),yXe=l(),pf=a("h2"),Q0=a("a"),m0e=a("span"),F(x$.$$.fragment),pJr=l(),g0e=a("span"),_Jr=o("FlaxAutoModelForMultipleChoice"),xXe=l(),Er=a("div"),F($$.$$.fragment),uJr=l(),_f=a("p"),bJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Foe=a("a"),vJr=o("from_pretrained()"),FJr=o(" class method or the "),Toe=a("a"),TJr=o("from_config()"),MJr=o(` class
method.`),EJr=l(),k$=a("p"),CJr=o("This class cannot be instantiated directly using "),h0e=a("code"),wJr=o("__init__()"),AJr=o(" (throws an error)."),LJr=l(),Kt=a("div"),F(S$.$$.fragment),yJr=l(),p0e=a("p"),xJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Jr=l(),uf=a("p"),kJr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),SJr=o("not"),RJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("a"),PJr=o("from_pretrained()"),BJr=o(" to load the model weights."),IJr=l(),F(W0.$$.fragment),NJr=l(),Yr=a("div"),F(R$.$$.fragment),qJr=l(),u0e=a("p"),jJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DJr=l(),xn=a("p"),GJr=o("The model class to instantiate is selected based on the "),b0e=a("code"),OJr=o("model_type"),VJr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),XJr=o("pretrained_model_name_or_path"),zJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),QJr=o("pretrained_model_name_or_path"),WJr=o(":"),HJr=l(),Xe=a("ul"),H0=a("li"),T0e=a("strong"),UJr=o("albert"),JJr=o(" \u2014 "),Eoe=a("a"),YJr=o("FlaxAlbertForMultipleChoice"),KJr=o(" (ALBERT model)"),ZJr=l(),U0=a("li"),M0e=a("strong"),eYr=o("bert"),oYr=o(" \u2014 "),Coe=a("a"),rYr=o("FlaxBertForMultipleChoice"),tYr=o(" (BERT model)"),aYr=l(),J0=a("li"),E0e=a("strong"),nYr=o("big_bird"),sYr=o(" \u2014 "),woe=a("a"),lYr=o("FlaxBigBirdForMultipleChoice"),iYr=o(" (BigBird model)"),dYr=l(),Y0=a("li"),C0e=a("strong"),cYr=o("distilbert"),fYr=o(" \u2014 "),Aoe=a("a"),mYr=o("FlaxDistilBertForMultipleChoice"),gYr=o(" (DistilBERT model)"),hYr=l(),K0=a("li"),w0e=a("strong"),pYr=o("electra"),_Yr=o(" \u2014 "),Loe=a("a"),uYr=o("FlaxElectraForMultipleChoice"),bYr=o(" (ELECTRA model)"),vYr=l(),Z0=a("li"),A0e=a("strong"),FYr=o("roberta"),TYr=o(" \u2014 "),yoe=a("a"),MYr=o("FlaxRobertaForMultipleChoice"),EYr=o(" (RoBERTa model)"),CYr=l(),ew=a("li"),L0e=a("strong"),wYr=o("roformer"),AYr=o(" \u2014 "),xoe=a("a"),LYr=o("FlaxRoFormerForMultipleChoice"),yYr=o(" (RoFormer model)"),xYr=l(),ow=a("li"),y0e=a("strong"),$Yr=o("xlm-roberta"),kYr=o(" \u2014 "),$oe=a("a"),SYr=o("FlaxXLMRobertaForMultipleChoice"),RYr=o(" (XLM-RoBERTa model)"),PYr=l(),F(rw.$$.fragment),$Xe=l(),bf=a("h2"),tw=a("a"),x0e=a("span"),F(P$.$$.fragment),BYr=l(),$0e=a("span"),IYr=o("FlaxAutoModelForNextSentencePrediction"),kXe=l(),Cr=a("div"),F(B$.$$.fragment),NYr=l(),vf=a("p"),qYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),koe=a("a"),jYr=o("from_pretrained()"),DYr=o(" class method or the "),Soe=a("a"),GYr=o("from_config()"),OYr=o(` class
method.`),VYr=l(),I$=a("p"),XYr=o("This class cannot be instantiated directly using "),k0e=a("code"),zYr=o("__init__()"),QYr=o(" (throws an error)."),WYr=l(),Zt=a("div"),F(N$.$$.fragment),HYr=l(),S0e=a("p"),UYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JYr=l(),Ff=a("p"),YYr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),KYr=o("not"),ZYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),eKr=o("from_pretrained()"),oKr=o(" to load the model weights."),rKr=l(),F(aw.$$.fragment),tKr=l(),Kr=a("div"),F(q$.$$.fragment),aKr=l(),P0e=a("p"),nKr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sKr=l(),$n=a("p"),lKr=o("The model class to instantiate is selected based on the "),B0e=a("code"),iKr=o("model_type"),dKr=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),cKr=o("pretrained_model_name_or_path"),fKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),mKr=o("pretrained_model_name_or_path"),gKr=o(":"),hKr=l(),q0e=a("ul"),nw=a("li"),j0e=a("strong"),pKr=o("bert"),_Kr=o(" \u2014 "),Poe=a("a"),uKr=o("FlaxBertForNextSentencePrediction"),bKr=o(" (BERT model)"),vKr=l(),F(sw.$$.fragment),SXe=l(),Tf=a("h2"),lw=a("a"),D0e=a("span"),F(j$.$$.fragment),FKr=l(),G0e=a("span"),TKr=o("FlaxAutoModelForImageClassification"),RXe=l(),wr=a("div"),F(D$.$$.fragment),MKr=l(),Mf=a("p"),EKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Boe=a("a"),CKr=o("from_pretrained()"),wKr=o(" class method or the "),Ioe=a("a"),AKr=o("from_config()"),LKr=o(` class
method.`),yKr=l(),G$=a("p"),xKr=o("This class cannot be instantiated directly using "),O0e=a("code"),$Kr=o("__init__()"),kKr=o(" (throws an error)."),SKr=l(),ea=a("div"),F(O$.$$.fragment),RKr=l(),V0e=a("p"),PKr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BKr=l(),Ef=a("p"),IKr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),NKr=o("not"),qKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),jKr=o("from_pretrained()"),DKr=o(" to load the model weights."),GKr=l(),F(iw.$$.fragment),OKr=l(),Zr=a("div"),F(V$.$$.fragment),VKr=l(),z0e=a("p"),XKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zKr=l(),kn=a("p"),QKr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),WKr=o("model_type"),HKr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),UKr=o("pretrained_model_name_or_path"),JKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),YKr=o("pretrained_model_name_or_path"),KKr=o(":"),ZKr=l(),X$=a("ul"),dw=a("li"),U0e=a("strong"),eZr=o("beit"),oZr=o(" \u2014 "),qoe=a("a"),rZr=o("FlaxBeitForImageClassification"),tZr=o(" (BEiT model)"),aZr=l(),cw=a("li"),J0e=a("strong"),nZr=o("vit"),sZr=o(" \u2014 "),joe=a("a"),lZr=o("FlaxViTForImageClassification"),iZr=o(" (ViT model)"),dZr=l(),F(fw.$$.fragment),PXe=l(),Cf=a("h2"),mw=a("a"),Y0e=a("span"),F(z$.$$.fragment),cZr=l(),K0e=a("span"),fZr=o("FlaxAutoModelForVision2Seq"),BXe=l(),Ar=a("div"),F(Q$.$$.fragment),mZr=l(),wf=a("p"),gZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Doe=a("a"),hZr=o("from_pretrained()"),pZr=o(" class method or the "),Goe=a("a"),_Zr=o("from_config()"),uZr=o(` class
method.`),bZr=l(),W$=a("p"),vZr=o("This class cannot be instantiated directly using "),Z0e=a("code"),FZr=o("__init__()"),TZr=o(" (throws an error)."),MZr=l(),oa=a("div"),F(H$.$$.fragment),EZr=l(),ewe=a("p"),CZr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wZr=l(),Af=a("p"),AZr=o(`Note:
Loading a model from its configuration file does `),owe=a("strong"),LZr=o("not"),yZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),xZr=o("from_pretrained()"),$Zr=o(" to load the model weights."),kZr=l(),F(gw.$$.fragment),SZr=l(),et=a("div"),F(U$.$$.fragment),RZr=l(),rwe=a("p"),PZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BZr=l(),Sn=a("p"),IZr=o("The model class to instantiate is selected based on the "),twe=a("code"),NZr=o("model_type"),qZr=o(` property of the config object (either
passed as an argument or loaded from `),awe=a("code"),jZr=o("pretrained_model_name_or_path"),DZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=a("code"),GZr=o("pretrained_model_name_or_path"),OZr=o(":"),VZr=l(),swe=a("ul"),hw=a("li"),lwe=a("strong"),XZr=o("vision-encoder-decoder"),zZr=o(" \u2014 "),Voe=a("a"),QZr=o("FlaxVisionEncoderDecoderModel"),WZr=o(" (Vision Encoder decoder model)"),HZr=l(),F(pw.$$.fragment),this.h()},l(f){const u=VOt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var J$=s(p);m=n(J$,"A",{id:!0,class:!0,href:!0});var iwe=s(m);_=n(iwe,"SPAN",{});var dwe=s(_);T(d.$$.fragment,dwe),dwe.forEach(t),iwe.forEach(t),h=i(J$),Eo=n(J$,"SPAN",{});var cwe=s(Eo);Ei=r(cwe,"Auto Classes"),cwe.forEach(t),J$.forEach(t),$f=i(f),at=n(f,"P",{});var Y$=s(at);Ci=r(Y$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=n(Y$,"CODE",{});var fwe=s(wi);IL=r(fwe,"from_pretrained()"),fwe.forEach(t),kf=r(Y$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Y$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);Ai=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var mwe=s(Pn);NL=r(mwe,"AutoConfig"),mwe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var gwe=s(In);qL=r(gwe,"AutoModel"),gwe.forEach(t),Li=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var hwe=s(Nn);jL=r(hwe,"AutoTokenizer"),hwe.forEach(t),yi=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Sf=i(f),T($a.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var K$=s(Ae);pS=r(K$,"will create a model that is an instance of "),xi=n(K$,"A",{href:!0});var pwe=s(xi);_S=r(pwe,"BertModel"),pwe.forEach(t),uS=r(K$,"."),K$.forEach(t),Co=i(f),ka=n(f,"P",{});var Z$=s(ka);bS=r(Z$,"There is one class of "),Rf=n(Z$,"CODE",{});var _we=s(Rf);vS=r(_we,"AutoModel"),_we.forEach(t),QQe=r(Z$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Z$.forEach(t),kOe=i(f),$i=n(f,"H2",{class:!0});var ek=s($i);Pf=n(ek,"A",{id:!0,class:!0,href:!0});var uwe=s(Pf);qte=n(uwe,"SPAN",{});var bwe=s(qte);T(DL.$$.fragment,bwe),bwe.forEach(t),uwe.forEach(t),WQe=i(ek),jte=n(ek,"SPAN",{});var vwe=s(jte);HQe=r(vwe,"Extending the Auto Classes"),vwe.forEach(t),ek.forEach(t),SOe=i(f),qn=n(f,"P",{});var Lf=s(qn);UQe=r(Lf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dte=n(Lf,"CODE",{});var Fwe=s(Dte);JQe=r(Fwe,"NewModel"),Fwe.forEach(t),YQe=r(Lf,", make sure you have a "),Gte=n(Lf,"CODE",{});var Twe=s(Gte);KQe=r(Twe,"NewModelConfig"),Twe.forEach(t),ZQe=r(Lf,` then you can add those to the auto
classes like this:`),Lf.forEach(t),ROe=i(f),T(GL.$$.fragment,f),POe=i(f),FS=n(f,"P",{});var Mwe=s(FS);eWe=r(Mwe,"You will then be able to use the auto classes like you would usually do!"),Mwe.forEach(t),BOe=i(f),T(Bf.$$.fragment,f),IOe=i(f),ki=n(f,"H2",{class:!0});var ok=s(ki);If=n(ok,"A",{id:!0,class:!0,href:!0});var Ewe=s(If);Ote=n(Ewe,"SPAN",{});var Cwe=s(Ote);T(OL.$$.fragment,Cwe),Cwe.forEach(t),Ewe.forEach(t),oWe=i(ok),Vte=n(ok,"SPAN",{});var wwe=s(Vte);rWe=r(wwe,"AutoConfig"),wwe.forEach(t),ok.forEach(t),NOe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(VL.$$.fragment,rt),tWe=i(rt),XL=n(rt,"P",{});var rk=s(XL);aWe=r(rk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TS=n(rk,"A",{href:!0});var Awe=s(TS);nWe=r(Awe,"from_pretrained()"),Awe.forEach(t),sWe=r(rk," class method."),rk.forEach(t),lWe=i(rt),zL=n(rt,"P",{});var tk=s(zL);iWe=r(tk,"This class cannot be instantiated directly using "),Xte=n(tk,"CODE",{});var Lwe=s(Xte);dWe=r(Lwe,"__init__()"),Lwe.forEach(t),cWe=r(tk," (throws an error)."),tk.forEach(t),fWe=i(rt),Lr=n(rt,"DIV",{class:!0});var tt=s(Lr);T(QL.$$.fragment,tt),mWe=i(tt),zte=n(tt,"P",{});var ywe=s(zte);gWe=r(ywe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ywe.forEach(t),hWe=i(tt),Si=n(tt,"P",{});var yf=s(Si);pWe=r(yf,"The configuration class to instantiate is selected based on the "),Qte=n(yf,"CODE",{});var xwe=s(Qte);_We=r(xwe,"model_type"),xwe.forEach(t),uWe=r(yf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wte=n(yf,"CODE",{});var $we=s(Wte);bWe=r($we,"pretrained_model_name_or_path"),$we.forEach(t),vWe=r(yf,":"),yf.forEach(t),FWe=i(tt),A=n(tt,"UL",{});var L=s(A);Nf=n(L,"LI",{});var _w=s(Nf);Hte=n(_w,"STRONG",{});var kwe=s(Hte);TWe=r(kwe,"albert"),kwe.forEach(t),MWe=r(_w," \u2014 "),MS=n(_w,"A",{href:!0});var Swe=s(MS);EWe=r(Swe,"AlbertConfig"),Swe.forEach(t),CWe=r(_w," (ALBERT model)"),_w.forEach(t),wWe=i(L),qf=n(L,"LI",{});var uw=s(qf);Ute=n(uw,"STRONG",{});var Rwe=s(Ute);AWe=r(Rwe,"bart"),Rwe.forEach(t),LWe=r(uw," \u2014 "),ES=n(uw,"A",{href:!0});var Pwe=s(ES);yWe=r(Pwe,"BartConfig"),Pwe.forEach(t),xWe=r(uw," (BART model)"),uw.forEach(t),$We=i(L),jf=n(L,"LI",{});var bw=s(jf);Jte=n(bw,"STRONG",{});var Bwe=s(Jte);kWe=r(Bwe,"beit"),Bwe.forEach(t),SWe=r(bw," \u2014 "),CS=n(bw,"A",{href:!0});var Iwe=s(CS);RWe=r(Iwe,"BeitConfig"),Iwe.forEach(t),PWe=r(bw," (BEiT model)"),bw.forEach(t),BWe=i(L),Df=n(L,"LI",{});var vw=s(Df);Yte=n(vw,"STRONG",{});var Nwe=s(Yte);IWe=r(Nwe,"bert"),Nwe.forEach(t),NWe=r(vw," \u2014 "),wS=n(vw,"A",{href:!0});var qwe=s(wS);qWe=r(qwe,"BertConfig"),qwe.forEach(t),jWe=r(vw," (BERT model)"),vw.forEach(t),DWe=i(L),Gf=n(L,"LI",{});var Fw=s(Gf);Kte=n(Fw,"STRONG",{});var jwe=s(Kte);GWe=r(jwe,"bert-generation"),jwe.forEach(t),OWe=r(Fw," \u2014 "),AS=n(Fw,"A",{href:!0});var Dwe=s(AS);VWe=r(Dwe,"BertGenerationConfig"),Dwe.forEach(t),XWe=r(Fw," (Bert Generation model)"),Fw.forEach(t),zWe=i(L),Of=n(L,"LI",{});var Tw=s(Of);Zte=n(Tw,"STRONG",{});var Gwe=s(Zte);QWe=r(Gwe,"big_bird"),Gwe.forEach(t),WWe=r(Tw," \u2014 "),LS=n(Tw,"A",{href:!0});var Owe=s(LS);HWe=r(Owe,"BigBirdConfig"),Owe.forEach(t),UWe=r(Tw," (BigBird model)"),Tw.forEach(t),JWe=i(L),Vf=n(L,"LI",{});var Mw=s(Vf);eae=n(Mw,"STRONG",{});var Vwe=s(eae);YWe=r(Vwe,"bigbird_pegasus"),Vwe.forEach(t),KWe=r(Mw," \u2014 "),yS=n(Mw,"A",{href:!0});var Xwe=s(yS);ZWe=r(Xwe,"BigBirdPegasusConfig"),Xwe.forEach(t),eHe=r(Mw," (BigBird-Pegasus model)"),Mw.forEach(t),oHe=i(L),Xf=n(L,"LI",{});var Ew=s(Xf);oae=n(Ew,"STRONG",{});var zwe=s(oae);rHe=r(zwe,"blenderbot"),zwe.forEach(t),tHe=r(Ew," \u2014 "),xS=n(Ew,"A",{href:!0});var Qwe=s(xS);aHe=r(Qwe,"BlenderbotConfig"),Qwe.forEach(t),nHe=r(Ew," (Blenderbot model)"),Ew.forEach(t),sHe=i(L),zf=n(L,"LI",{});var Cw=s(zf);rae=n(Cw,"STRONG",{});var Wwe=s(rae);lHe=r(Wwe,"blenderbot-small"),Wwe.forEach(t),iHe=r(Cw," \u2014 "),$S=n(Cw,"A",{href:!0});var Hwe=s($S);dHe=r(Hwe,"BlenderbotSmallConfig"),Hwe.forEach(t),cHe=r(Cw," (BlenderbotSmall model)"),Cw.forEach(t),fHe=i(L),Qf=n(L,"LI",{});var ww=s(Qf);tae=n(ww,"STRONG",{});var Uwe=s(tae);mHe=r(Uwe,"bloom"),Uwe.forEach(t),gHe=r(ww," \u2014 "),kS=n(ww,"A",{href:!0});var Jwe=s(kS);hHe=r(Jwe,"BloomConfig"),Jwe.forEach(t),pHe=r(ww," (BLOOM model)"),ww.forEach(t),_He=i(L),Wf=n(L,"LI",{});var Aw=s(Wf);aae=n(Aw,"STRONG",{});var Ywe=s(aae);uHe=r(Ywe,"camembert"),Ywe.forEach(t),bHe=r(Aw," \u2014 "),SS=n(Aw,"A",{href:!0});var Kwe=s(SS);vHe=r(Kwe,"CamembertConfig"),Kwe.forEach(t),FHe=r(Aw," (CamemBERT model)"),Aw.forEach(t),THe=i(L),Hf=n(L,"LI",{});var Lw=s(Hf);nae=n(Lw,"STRONG",{});var Zwe=s(nae);MHe=r(Zwe,"canine"),Zwe.forEach(t),EHe=r(Lw," \u2014 "),RS=n(Lw,"A",{href:!0});var eAe=s(RS);CHe=r(eAe,"CanineConfig"),eAe.forEach(t),wHe=r(Lw," (CANINE model)"),Lw.forEach(t),AHe=i(L),Uf=n(L,"LI",{});var yw=s(Uf);sae=n(yw,"STRONG",{});var oAe=s(sae);LHe=r(oAe,"clip"),oAe.forEach(t),yHe=r(yw," \u2014 "),PS=n(yw,"A",{href:!0});var rAe=s(PS);xHe=r(rAe,"CLIPConfig"),rAe.forEach(t),$He=r(yw," (CLIP model)"),yw.forEach(t),kHe=i(L),Jf=n(L,"LI",{});var xw=s(Jf);lae=n(xw,"STRONG",{});var tAe=s(lae);SHe=r(tAe,"codegen"),tAe.forEach(t),RHe=r(xw," \u2014 "),BS=n(xw,"A",{href:!0});var aAe=s(BS);PHe=r(aAe,"CodeGenConfig"),aAe.forEach(t),BHe=r(xw," (CodeGen model)"),xw.forEach(t),IHe=i(L),Yf=n(L,"LI",{});var $w=s(Yf);iae=n($w,"STRONG",{});var nAe=s(iae);NHe=r(nAe,"convbert"),nAe.forEach(t),qHe=r($w," \u2014 "),IS=n($w,"A",{href:!0});var sAe=s(IS);jHe=r(sAe,"ConvBertConfig"),sAe.forEach(t),DHe=r($w," (ConvBERT model)"),$w.forEach(t),GHe=i(L),Kf=n(L,"LI",{});var kw=s(Kf);dae=n(kw,"STRONG",{});var lAe=s(dae);OHe=r(lAe,"convnext"),lAe.forEach(t),VHe=r(kw," \u2014 "),NS=n(kw,"A",{href:!0});var iAe=s(NS);XHe=r(iAe,"ConvNextConfig"),iAe.forEach(t),zHe=r(kw," (ConvNeXT model)"),kw.forEach(t),QHe=i(L),Zf=n(L,"LI",{});var Sw=s(Zf);cae=n(Sw,"STRONG",{});var dAe=s(cae);WHe=r(dAe,"ctrl"),dAe.forEach(t),HHe=r(Sw," \u2014 "),qS=n(Sw,"A",{href:!0});var cAe=s(qS);UHe=r(cAe,"CTRLConfig"),cAe.forEach(t),JHe=r(Sw," (CTRL model)"),Sw.forEach(t),YHe=i(L),em=n(L,"LI",{});var Rw=s(em);fae=n(Rw,"STRONG",{});var fAe=s(fae);KHe=r(fAe,"cvt"),fAe.forEach(t),ZHe=r(Rw," \u2014 "),jS=n(Rw,"A",{href:!0});var mAe=s(jS);eUe=r(mAe,"CvtConfig"),mAe.forEach(t),oUe=r(Rw," (CvT model)"),Rw.forEach(t),rUe=i(L),om=n(L,"LI",{});var Pw=s(om);mae=n(Pw,"STRONG",{});var gAe=s(mae);tUe=r(gAe,"data2vec-audio"),gAe.forEach(t),aUe=r(Pw," \u2014 "),DS=n(Pw,"A",{href:!0});var hAe=s(DS);nUe=r(hAe,"Data2VecAudioConfig"),hAe.forEach(t),sUe=r(Pw," (Data2VecAudio model)"),Pw.forEach(t),lUe=i(L),rm=n(L,"LI",{});var Bw=s(rm);gae=n(Bw,"STRONG",{});var pAe=s(gae);iUe=r(pAe,"data2vec-text"),pAe.forEach(t),dUe=r(Bw," \u2014 "),GS=n(Bw,"A",{href:!0});var _Ae=s(GS);cUe=r(_Ae,"Data2VecTextConfig"),_Ae.forEach(t),fUe=r(Bw," (Data2VecText model)"),Bw.forEach(t),mUe=i(L),tm=n(L,"LI",{});var Iw=s(tm);hae=n(Iw,"STRONG",{});var uAe=s(hae);gUe=r(uAe,"data2vec-vision"),uAe.forEach(t),hUe=r(Iw," \u2014 "),OS=n(Iw,"A",{href:!0});var bAe=s(OS);pUe=r(bAe,"Data2VecVisionConfig"),bAe.forEach(t),_Ue=r(Iw," (Data2VecVision model)"),Iw.forEach(t),uUe=i(L),am=n(L,"LI",{});var Nw=s(am);pae=n(Nw,"STRONG",{});var vAe=s(pae);bUe=r(vAe,"deberta"),vAe.forEach(t),vUe=r(Nw," \u2014 "),VS=n(Nw,"A",{href:!0});var FAe=s(VS);FUe=r(FAe,"DebertaConfig"),FAe.forEach(t),TUe=r(Nw," (DeBERTa model)"),Nw.forEach(t),MUe=i(L),nm=n(L,"LI",{});var qw=s(nm);_ae=n(qw,"STRONG",{});var TAe=s(_ae);EUe=r(TAe,"deberta-v2"),TAe.forEach(t),CUe=r(qw," \u2014 "),XS=n(qw,"A",{href:!0});var MAe=s(XS);wUe=r(MAe,"DebertaV2Config"),MAe.forEach(t),AUe=r(qw," (DeBERTa-v2 model)"),qw.forEach(t),LUe=i(L),sm=n(L,"LI",{});var jw=s(sm);uae=n(jw,"STRONG",{});var JZr=s(uae);yUe=r(JZr,"decision_transformer"),JZr.forEach(t),xUe=r(jw," \u2014 "),zS=n(jw,"A",{href:!0});var YZr=s(zS);$Ue=r(YZr,"DecisionTransformerConfig"),YZr.forEach(t),kUe=r(jw," (Decision Transformer model)"),jw.forEach(t),SUe=i(L),lm=n(L,"LI",{});var EAe=s(lm);bae=n(EAe,"STRONG",{});var KZr=s(bae);RUe=r(KZr,"deit"),KZr.forEach(t),PUe=r(EAe," \u2014 "),QS=n(EAe,"A",{href:!0});var ZZr=s(QS);BUe=r(ZZr,"DeiTConfig"),ZZr.forEach(t),IUe=r(EAe," (DeiT model)"),EAe.forEach(t),NUe=i(L),im=n(L,"LI",{});var CAe=s(im);vae=n(CAe,"STRONG",{});var eet=s(vae);qUe=r(eet,"detr"),eet.forEach(t),jUe=r(CAe," \u2014 "),WS=n(CAe,"A",{href:!0});var oet=s(WS);DUe=r(oet,"DetrConfig"),oet.forEach(t),GUe=r(CAe," (DETR model)"),CAe.forEach(t),OUe=i(L),dm=n(L,"LI",{});var wAe=s(dm);Fae=n(wAe,"STRONG",{});var ret=s(Fae);VUe=r(ret,"distilbert"),ret.forEach(t),XUe=r(wAe," \u2014 "),HS=n(wAe,"A",{href:!0});var tet=s(HS);zUe=r(tet,"DistilBertConfig"),tet.forEach(t),QUe=r(wAe," (DistilBERT model)"),wAe.forEach(t),WUe=i(L),cm=n(L,"LI",{});var AAe=s(cm);Tae=n(AAe,"STRONG",{});var aet=s(Tae);HUe=r(aet,"dpr"),aet.forEach(t),UUe=r(AAe," \u2014 "),US=n(AAe,"A",{href:!0});var net=s(US);JUe=r(net,"DPRConfig"),net.forEach(t),YUe=r(AAe," (DPR model)"),AAe.forEach(t),KUe=i(L),fm=n(L,"LI",{});var LAe=s(fm);Mae=n(LAe,"STRONG",{});var set=s(Mae);ZUe=r(set,"dpt"),set.forEach(t),eJe=r(LAe," \u2014 "),JS=n(LAe,"A",{href:!0});var iet=s(JS);oJe=r(iet,"DPTConfig"),iet.forEach(t),rJe=r(LAe," (DPT model)"),LAe.forEach(t),tJe=i(L),mm=n(L,"LI",{});var yAe=s(mm);Eae=n(yAe,"STRONG",{});var det=s(Eae);aJe=r(det,"electra"),det.forEach(t),nJe=r(yAe," \u2014 "),YS=n(yAe,"A",{href:!0});var cet=s(YS);sJe=r(cet,"ElectraConfig"),cet.forEach(t),lJe=r(yAe," (ELECTRA model)"),yAe.forEach(t),iJe=i(L),gm=n(L,"LI",{});var xAe=s(gm);Cae=n(xAe,"STRONG",{});var fet=s(Cae);dJe=r(fet,"encoder-decoder"),fet.forEach(t),cJe=r(xAe," \u2014 "),KS=n(xAe,"A",{href:!0});var met=s(KS);fJe=r(met,"EncoderDecoderConfig"),met.forEach(t),mJe=r(xAe," (Encoder decoder model)"),xAe.forEach(t),gJe=i(L),hm=n(L,"LI",{});var $Ae=s(hm);wae=n($Ae,"STRONG",{});var get=s(wae);hJe=r(get,"flaubert"),get.forEach(t),pJe=r($Ae," \u2014 "),ZS=n($Ae,"A",{href:!0});var het=s(ZS);_Je=r(het,"FlaubertConfig"),het.forEach(t),uJe=r($Ae," (FlauBERT model)"),$Ae.forEach(t),bJe=i(L),pm=n(L,"LI",{});var kAe=s(pm);Aae=n(kAe,"STRONG",{});var pet=s(Aae);vJe=r(pet,"flava"),pet.forEach(t),FJe=r(kAe," \u2014 "),eR=n(kAe,"A",{href:!0});var _et=s(eR);TJe=r(_et,"FlavaConfig"),_et.forEach(t),MJe=r(kAe," (FLAVA model)"),kAe.forEach(t),EJe=i(L),_m=n(L,"LI",{});var SAe=s(_m);Lae=n(SAe,"STRONG",{});var uet=s(Lae);CJe=r(uet,"fnet"),uet.forEach(t),wJe=r(SAe," \u2014 "),oR=n(SAe,"A",{href:!0});var bet=s(oR);AJe=r(bet,"FNetConfig"),bet.forEach(t),LJe=r(SAe," (FNet model)"),SAe.forEach(t),yJe=i(L),um=n(L,"LI",{});var RAe=s(um);yae=n(RAe,"STRONG",{});var vet=s(yae);xJe=r(vet,"fsmt"),vet.forEach(t),$Je=r(RAe," \u2014 "),rR=n(RAe,"A",{href:!0});var Fet=s(rR);kJe=r(Fet,"FSMTConfig"),Fet.forEach(t),SJe=r(RAe," (FairSeq Machine-Translation model)"),RAe.forEach(t),RJe=i(L),bm=n(L,"LI",{});var PAe=s(bm);xae=n(PAe,"STRONG",{});var Tet=s(xae);PJe=r(Tet,"funnel"),Tet.forEach(t),BJe=r(PAe," \u2014 "),tR=n(PAe,"A",{href:!0});var Met=s(tR);IJe=r(Met,"FunnelConfig"),Met.forEach(t),NJe=r(PAe," (Funnel Transformer model)"),PAe.forEach(t),qJe=i(L),vm=n(L,"LI",{});var BAe=s(vm);$ae=n(BAe,"STRONG",{});var Eet=s($ae);jJe=r(Eet,"glpn"),Eet.forEach(t),DJe=r(BAe," \u2014 "),aR=n(BAe,"A",{href:!0});var Cet=s(aR);GJe=r(Cet,"GLPNConfig"),Cet.forEach(t),OJe=r(BAe," (GLPN model)"),BAe.forEach(t),VJe=i(L),Fm=n(L,"LI",{});var IAe=s(Fm);kae=n(IAe,"STRONG",{});var wet=s(kae);XJe=r(wet,"gpt2"),wet.forEach(t),zJe=r(IAe," \u2014 "),nR=n(IAe,"A",{href:!0});var Aet=s(nR);QJe=r(Aet,"GPT2Config"),Aet.forEach(t),WJe=r(IAe," (OpenAI GPT-2 model)"),IAe.forEach(t),HJe=i(L),Tm=n(L,"LI",{});var NAe=s(Tm);Sae=n(NAe,"STRONG",{});var Let=s(Sae);UJe=r(Let,"gpt_neo"),Let.forEach(t),JJe=r(NAe," \u2014 "),sR=n(NAe,"A",{href:!0});var yet=s(sR);YJe=r(yet,"GPTNeoConfig"),yet.forEach(t),KJe=r(NAe," (GPT Neo model)"),NAe.forEach(t),ZJe=i(L),Mm=n(L,"LI",{});var qAe=s(Mm);Rae=n(qAe,"STRONG",{});var xet=s(Rae);eYe=r(xet,"gpt_neox"),xet.forEach(t),oYe=r(qAe," \u2014 "),lR=n(qAe,"A",{href:!0});var $et=s(lR);rYe=r($et,"GPTNeoXConfig"),$et.forEach(t),tYe=r(qAe," (GPT NeoX model)"),qAe.forEach(t),aYe=i(L),Em=n(L,"LI",{});var jAe=s(Em);Pae=n(jAe,"STRONG",{});var ket=s(Pae);nYe=r(ket,"gptj"),ket.forEach(t),sYe=r(jAe," \u2014 "),iR=n(jAe,"A",{href:!0});var Set=s(iR);lYe=r(Set,"GPTJConfig"),Set.forEach(t),iYe=r(jAe," (GPT-J model)"),jAe.forEach(t),dYe=i(L),Cm=n(L,"LI",{});var DAe=s(Cm);Bae=n(DAe,"STRONG",{});var Ret=s(Bae);cYe=r(Ret,"groupvit"),Ret.forEach(t),fYe=r(DAe," \u2014 "),dR=n(DAe,"A",{href:!0});var Pet=s(dR);mYe=r(Pet,"GroupViTConfig"),Pet.forEach(t),gYe=r(DAe," (GroupViT model)"),DAe.forEach(t),hYe=i(L),wm=n(L,"LI",{});var GAe=s(wm);Iae=n(GAe,"STRONG",{});var Bet=s(Iae);pYe=r(Bet,"hubert"),Bet.forEach(t),_Ye=r(GAe," \u2014 "),cR=n(GAe,"A",{href:!0});var Iet=s(cR);uYe=r(Iet,"HubertConfig"),Iet.forEach(t),bYe=r(GAe," (Hubert model)"),GAe.forEach(t),vYe=i(L),Am=n(L,"LI",{});var OAe=s(Am);Nae=n(OAe,"STRONG",{});var Net=s(Nae);FYe=r(Net,"ibert"),Net.forEach(t),TYe=r(OAe," \u2014 "),fR=n(OAe,"A",{href:!0});var qet=s(fR);MYe=r(qet,"IBertConfig"),qet.forEach(t),EYe=r(OAe," (I-BERT model)"),OAe.forEach(t),CYe=i(L),Lm=n(L,"LI",{});var VAe=s(Lm);qae=n(VAe,"STRONG",{});var jet=s(qae);wYe=r(jet,"imagegpt"),jet.forEach(t),AYe=r(VAe," \u2014 "),mR=n(VAe,"A",{href:!0});var Det=s(mR);LYe=r(Det,"ImageGPTConfig"),Det.forEach(t),yYe=r(VAe," (ImageGPT model)"),VAe.forEach(t),xYe=i(L),ym=n(L,"LI",{});var XAe=s(ym);jae=n(XAe,"STRONG",{});var Get=s(jae);$Ye=r(Get,"layoutlm"),Get.forEach(t),kYe=r(XAe," \u2014 "),gR=n(XAe,"A",{href:!0});var Oet=s(gR);SYe=r(Oet,"LayoutLMConfig"),Oet.forEach(t),RYe=r(XAe," (LayoutLM model)"),XAe.forEach(t),PYe=i(L),xm=n(L,"LI",{});var zAe=s(xm);Dae=n(zAe,"STRONG",{});var Vet=s(Dae);BYe=r(Vet,"layoutlmv2"),Vet.forEach(t),IYe=r(zAe," \u2014 "),hR=n(zAe,"A",{href:!0});var Xet=s(hR);NYe=r(Xet,"LayoutLMv2Config"),Xet.forEach(t),qYe=r(zAe," (LayoutLMv2 model)"),zAe.forEach(t),jYe=i(L),$m=n(L,"LI",{});var QAe=s($m);Gae=n(QAe,"STRONG",{});var zet=s(Gae);DYe=r(zet,"layoutlmv3"),zet.forEach(t),GYe=r(QAe," \u2014 "),pR=n(QAe,"A",{href:!0});var Qet=s(pR);OYe=r(Qet,"LayoutLMv3Config"),Qet.forEach(t),VYe=r(QAe," (LayoutLMv3 model)"),QAe.forEach(t),XYe=i(L),km=n(L,"LI",{});var WAe=s(km);Oae=n(WAe,"STRONG",{});var Wet=s(Oae);zYe=r(Wet,"led"),Wet.forEach(t),QYe=r(WAe," \u2014 "),_R=n(WAe,"A",{href:!0});var Het=s(_R);WYe=r(Het,"LEDConfig"),Het.forEach(t),HYe=r(WAe," (LED model)"),WAe.forEach(t),UYe=i(L),Sm=n(L,"LI",{});var HAe=s(Sm);Vae=n(HAe,"STRONG",{});var Uet=s(Vae);JYe=r(Uet,"levit"),Uet.forEach(t),YYe=r(HAe," \u2014 "),uR=n(HAe,"A",{href:!0});var Jet=s(uR);KYe=r(Jet,"LevitConfig"),Jet.forEach(t),ZYe=r(HAe," (LeViT model)"),HAe.forEach(t),eKe=i(L),Rm=n(L,"LI",{});var UAe=s(Rm);Xae=n(UAe,"STRONG",{});var Yet=s(Xae);oKe=r(Yet,"longformer"),Yet.forEach(t),rKe=r(UAe," \u2014 "),bR=n(UAe,"A",{href:!0});var Ket=s(bR);tKe=r(Ket,"LongformerConfig"),Ket.forEach(t),aKe=r(UAe," (Longformer model)"),UAe.forEach(t),nKe=i(L),Pm=n(L,"LI",{});var JAe=s(Pm);zae=n(JAe,"STRONG",{});var Zet=s(zae);sKe=r(Zet,"longt5"),Zet.forEach(t),lKe=r(JAe," \u2014 "),vR=n(JAe,"A",{href:!0});var eot=s(vR);iKe=r(eot,"LongT5Config"),eot.forEach(t),dKe=r(JAe," (LongT5 model)"),JAe.forEach(t),cKe=i(L),Bm=n(L,"LI",{});var YAe=s(Bm);Qae=n(YAe,"STRONG",{});var oot=s(Qae);fKe=r(oot,"luke"),oot.forEach(t),mKe=r(YAe," \u2014 "),FR=n(YAe,"A",{href:!0});var rot=s(FR);gKe=r(rot,"LukeConfig"),rot.forEach(t),hKe=r(YAe," (LUKE model)"),YAe.forEach(t),pKe=i(L),Im=n(L,"LI",{});var KAe=s(Im);Wae=n(KAe,"STRONG",{});var tot=s(Wae);_Ke=r(tot,"lxmert"),tot.forEach(t),uKe=r(KAe," \u2014 "),TR=n(KAe,"A",{href:!0});var aot=s(TR);bKe=r(aot,"LxmertConfig"),aot.forEach(t),vKe=r(KAe," (LXMERT model)"),KAe.forEach(t),FKe=i(L),Nm=n(L,"LI",{});var ZAe=s(Nm);Hae=n(ZAe,"STRONG",{});var not=s(Hae);TKe=r(not,"m2m_100"),not.forEach(t),MKe=r(ZAe," \u2014 "),MR=n(ZAe,"A",{href:!0});var sot=s(MR);EKe=r(sot,"M2M100Config"),sot.forEach(t),CKe=r(ZAe," (M2M100 model)"),ZAe.forEach(t),wKe=i(L),qm=n(L,"LI",{});var eLe=s(qm);Uae=n(eLe,"STRONG",{});var lot=s(Uae);AKe=r(lot,"marian"),lot.forEach(t),LKe=r(eLe," \u2014 "),ER=n(eLe,"A",{href:!0});var iot=s(ER);yKe=r(iot,"MarianConfig"),iot.forEach(t),xKe=r(eLe," (Marian model)"),eLe.forEach(t),$Ke=i(L),jm=n(L,"LI",{});var oLe=s(jm);Jae=n(oLe,"STRONG",{});var dot=s(Jae);kKe=r(dot,"maskformer"),dot.forEach(t),SKe=r(oLe," \u2014 "),CR=n(oLe,"A",{href:!0});var cot=s(CR);RKe=r(cot,"MaskFormerConfig"),cot.forEach(t),PKe=r(oLe," (MaskFormer model)"),oLe.forEach(t),BKe=i(L),Dm=n(L,"LI",{});var rLe=s(Dm);Yae=n(rLe,"STRONG",{});var fot=s(Yae);IKe=r(fot,"mbart"),fot.forEach(t),NKe=r(rLe," \u2014 "),wR=n(rLe,"A",{href:!0});var mot=s(wR);qKe=r(mot,"MBartConfig"),mot.forEach(t),jKe=r(rLe," (mBART model)"),rLe.forEach(t),DKe=i(L),Gm=n(L,"LI",{});var tLe=s(Gm);Kae=n(tLe,"STRONG",{});var got=s(Kae);GKe=r(got,"mctct"),got.forEach(t),OKe=r(tLe," \u2014 "),AR=n(tLe,"A",{href:!0});var hot=s(AR);VKe=r(hot,"MCTCTConfig"),hot.forEach(t),XKe=r(tLe," (M-CTC-T model)"),tLe.forEach(t),zKe=i(L),Om=n(L,"LI",{});var aLe=s(Om);Zae=n(aLe,"STRONG",{});var pot=s(Zae);QKe=r(pot,"megatron-bert"),pot.forEach(t),WKe=r(aLe," \u2014 "),LR=n(aLe,"A",{href:!0});var _ot=s(LR);HKe=r(_ot,"MegatronBertConfig"),_ot.forEach(t),UKe=r(aLe," (Megatron-BERT model)"),aLe.forEach(t),JKe=i(L),Vm=n(L,"LI",{});var nLe=s(Vm);ene=n(nLe,"STRONG",{});var uot=s(ene);YKe=r(uot,"mobilebert"),uot.forEach(t),KKe=r(nLe," \u2014 "),yR=n(nLe,"A",{href:!0});var bot=s(yR);ZKe=r(bot,"MobileBertConfig"),bot.forEach(t),eZe=r(nLe," (MobileBERT model)"),nLe.forEach(t),oZe=i(L),Xm=n(L,"LI",{});var sLe=s(Xm);one=n(sLe,"STRONG",{});var vot=s(one);rZe=r(vot,"mpnet"),vot.forEach(t),tZe=r(sLe," \u2014 "),xR=n(sLe,"A",{href:!0});var Fot=s(xR);aZe=r(Fot,"MPNetConfig"),Fot.forEach(t),nZe=r(sLe," (MPNet model)"),sLe.forEach(t),sZe=i(L),zm=n(L,"LI",{});var lLe=s(zm);rne=n(lLe,"STRONG",{});var Tot=s(rne);lZe=r(Tot,"mt5"),Tot.forEach(t),iZe=r(lLe," \u2014 "),$R=n(lLe,"A",{href:!0});var Mot=s($R);dZe=r(Mot,"MT5Config"),Mot.forEach(t),cZe=r(lLe," (MT5 model)"),lLe.forEach(t),fZe=i(L),Qm=n(L,"LI",{});var iLe=s(Qm);tne=n(iLe,"STRONG",{});var Eot=s(tne);mZe=r(Eot,"nezha"),Eot.forEach(t),gZe=r(iLe," \u2014 "),kR=n(iLe,"A",{href:!0});var Cot=s(kR);hZe=r(Cot,"NezhaConfig"),Cot.forEach(t),pZe=r(iLe," (Nezha model)"),iLe.forEach(t),_Ze=i(L),Wm=n(L,"LI",{});var dLe=s(Wm);ane=n(dLe,"STRONG",{});var wot=s(ane);uZe=r(wot,"nystromformer"),wot.forEach(t),bZe=r(dLe," \u2014 "),SR=n(dLe,"A",{href:!0});var Aot=s(SR);vZe=r(Aot,"NystromformerConfig"),Aot.forEach(t),FZe=r(dLe," (Nystr\xF6mformer model)"),dLe.forEach(t),TZe=i(L),Hm=n(L,"LI",{});var cLe=s(Hm);nne=n(cLe,"STRONG",{});var Lot=s(nne);MZe=r(Lot,"openai-gpt"),Lot.forEach(t),EZe=r(cLe," \u2014 "),RR=n(cLe,"A",{href:!0});var yot=s(RR);CZe=r(yot,"OpenAIGPTConfig"),yot.forEach(t),wZe=r(cLe," (OpenAI GPT model)"),cLe.forEach(t),AZe=i(L),Um=n(L,"LI",{});var fLe=s(Um);sne=n(fLe,"STRONG",{});var xot=s(sne);LZe=r(xot,"opt"),xot.forEach(t),yZe=r(fLe," \u2014 "),PR=n(fLe,"A",{href:!0});var $ot=s(PR);xZe=r($ot,"OPTConfig"),$ot.forEach(t),$Ze=r(fLe," (OPT model)"),fLe.forEach(t),kZe=i(L),Jm=n(L,"LI",{});var mLe=s(Jm);lne=n(mLe,"STRONG",{});var kot=s(lne);SZe=r(kot,"pegasus"),kot.forEach(t),RZe=r(mLe," \u2014 "),BR=n(mLe,"A",{href:!0});var Sot=s(BR);PZe=r(Sot,"PegasusConfig"),Sot.forEach(t),BZe=r(mLe," (Pegasus model)"),mLe.forEach(t),IZe=i(L),Ym=n(L,"LI",{});var gLe=s(Ym);ine=n(gLe,"STRONG",{});var Rot=s(ine);NZe=r(Rot,"perceiver"),Rot.forEach(t),qZe=r(gLe," \u2014 "),IR=n(gLe,"A",{href:!0});var Pot=s(IR);jZe=r(Pot,"PerceiverConfig"),Pot.forEach(t),DZe=r(gLe," (Perceiver model)"),gLe.forEach(t),GZe=i(L),Km=n(L,"LI",{});var hLe=s(Km);dne=n(hLe,"STRONG",{});var Bot=s(dne);OZe=r(Bot,"plbart"),Bot.forEach(t),VZe=r(hLe," \u2014 "),NR=n(hLe,"A",{href:!0});var Iot=s(NR);XZe=r(Iot,"PLBartConfig"),Iot.forEach(t),zZe=r(hLe," (PLBart model)"),hLe.forEach(t),QZe=i(L),Zm=n(L,"LI",{});var pLe=s(Zm);cne=n(pLe,"STRONG",{});var Not=s(cne);WZe=r(Not,"poolformer"),Not.forEach(t),HZe=r(pLe," \u2014 "),qR=n(pLe,"A",{href:!0});var qot=s(qR);UZe=r(qot,"PoolFormerConfig"),qot.forEach(t),JZe=r(pLe," (PoolFormer model)"),pLe.forEach(t),YZe=i(L),eg=n(L,"LI",{});var _Le=s(eg);fne=n(_Le,"STRONG",{});var jot=s(fne);KZe=r(jot,"prophetnet"),jot.forEach(t),ZZe=r(_Le," \u2014 "),jR=n(_Le,"A",{href:!0});var Dot=s(jR);eeo=r(Dot,"ProphetNetConfig"),Dot.forEach(t),oeo=r(_Le," (ProphetNet model)"),_Le.forEach(t),reo=i(L),og=n(L,"LI",{});var uLe=s(og);mne=n(uLe,"STRONG",{});var Got=s(mne);teo=r(Got,"qdqbert"),Got.forEach(t),aeo=r(uLe," \u2014 "),DR=n(uLe,"A",{href:!0});var Oot=s(DR);neo=r(Oot,"QDQBertConfig"),Oot.forEach(t),seo=r(uLe," (QDQBert model)"),uLe.forEach(t),leo=i(L),rg=n(L,"LI",{});var bLe=s(rg);gne=n(bLe,"STRONG",{});var Vot=s(gne);ieo=r(Vot,"rag"),Vot.forEach(t),deo=r(bLe," \u2014 "),GR=n(bLe,"A",{href:!0});var Xot=s(GR);ceo=r(Xot,"RagConfig"),Xot.forEach(t),feo=r(bLe," (RAG model)"),bLe.forEach(t),meo=i(L),tg=n(L,"LI",{});var vLe=s(tg);hne=n(vLe,"STRONG",{});var zot=s(hne);geo=r(zot,"realm"),zot.forEach(t),heo=r(vLe," \u2014 "),OR=n(vLe,"A",{href:!0});var Qot=s(OR);peo=r(Qot,"RealmConfig"),Qot.forEach(t),_eo=r(vLe," (REALM model)"),vLe.forEach(t),ueo=i(L),ag=n(L,"LI",{});var FLe=s(ag);pne=n(FLe,"STRONG",{});var Wot=s(pne);beo=r(Wot,"reformer"),Wot.forEach(t),veo=r(FLe," \u2014 "),VR=n(FLe,"A",{href:!0});var Hot=s(VR);Feo=r(Hot,"ReformerConfig"),Hot.forEach(t),Teo=r(FLe," (Reformer model)"),FLe.forEach(t),Meo=i(L),ng=n(L,"LI",{});var TLe=s(ng);_ne=n(TLe,"STRONG",{});var Uot=s(_ne);Eeo=r(Uot,"regnet"),Uot.forEach(t),Ceo=r(TLe," \u2014 "),XR=n(TLe,"A",{href:!0});var Jot=s(XR);weo=r(Jot,"RegNetConfig"),Jot.forEach(t),Aeo=r(TLe," (RegNet model)"),TLe.forEach(t),Leo=i(L),sg=n(L,"LI",{});var MLe=s(sg);une=n(MLe,"STRONG",{});var Yot=s(une);yeo=r(Yot,"rembert"),Yot.forEach(t),xeo=r(MLe," \u2014 "),zR=n(MLe,"A",{href:!0});var Kot=s(zR);$eo=r(Kot,"RemBertConfig"),Kot.forEach(t),keo=r(MLe," (RemBERT model)"),MLe.forEach(t),Seo=i(L),lg=n(L,"LI",{});var ELe=s(lg);bne=n(ELe,"STRONG",{});var Zot=s(bne);Reo=r(Zot,"resnet"),Zot.forEach(t),Peo=r(ELe," \u2014 "),QR=n(ELe,"A",{href:!0});var ert=s(QR);Beo=r(ert,"ResNetConfig"),ert.forEach(t),Ieo=r(ELe," (ResNet model)"),ELe.forEach(t),Neo=i(L),ig=n(L,"LI",{});var CLe=s(ig);vne=n(CLe,"STRONG",{});var ort=s(vne);qeo=r(ort,"retribert"),ort.forEach(t),jeo=r(CLe," \u2014 "),WR=n(CLe,"A",{href:!0});var rrt=s(WR);Deo=r(rrt,"RetriBertConfig"),rrt.forEach(t),Geo=r(CLe," (RetriBERT model)"),CLe.forEach(t),Oeo=i(L),dg=n(L,"LI",{});var wLe=s(dg);Fne=n(wLe,"STRONG",{});var trt=s(Fne);Veo=r(trt,"roberta"),trt.forEach(t),Xeo=r(wLe," \u2014 "),HR=n(wLe,"A",{href:!0});var art=s(HR);zeo=r(art,"RobertaConfig"),art.forEach(t),Qeo=r(wLe," (RoBERTa model)"),wLe.forEach(t),Weo=i(L),cg=n(L,"LI",{});var ALe=s(cg);Tne=n(ALe,"STRONG",{});var nrt=s(Tne);Heo=r(nrt,"roformer"),nrt.forEach(t),Ueo=r(ALe," \u2014 "),UR=n(ALe,"A",{href:!0});var srt=s(UR);Jeo=r(srt,"RoFormerConfig"),srt.forEach(t),Yeo=r(ALe," (RoFormer model)"),ALe.forEach(t),Keo=i(L),fg=n(L,"LI",{});var LLe=s(fg);Mne=n(LLe,"STRONG",{});var lrt=s(Mne);Zeo=r(lrt,"segformer"),lrt.forEach(t),eoo=r(LLe," \u2014 "),JR=n(LLe,"A",{href:!0});var irt=s(JR);ooo=r(irt,"SegformerConfig"),irt.forEach(t),roo=r(LLe," (SegFormer model)"),LLe.forEach(t),too=i(L),mg=n(L,"LI",{});var yLe=s(mg);Ene=n(yLe,"STRONG",{});var drt=s(Ene);aoo=r(drt,"sew"),drt.forEach(t),noo=r(yLe," \u2014 "),YR=n(yLe,"A",{href:!0});var crt=s(YR);soo=r(crt,"SEWConfig"),crt.forEach(t),loo=r(yLe," (SEW model)"),yLe.forEach(t),ioo=i(L),gg=n(L,"LI",{});var xLe=s(gg);Cne=n(xLe,"STRONG",{});var frt=s(Cne);doo=r(frt,"sew-d"),frt.forEach(t),coo=r(xLe," \u2014 "),KR=n(xLe,"A",{href:!0});var mrt=s(KR);foo=r(mrt,"SEWDConfig"),mrt.forEach(t),moo=r(xLe," (SEW-D model)"),xLe.forEach(t),goo=i(L),hg=n(L,"LI",{});var $Le=s(hg);wne=n($Le,"STRONG",{});var grt=s(wne);hoo=r(grt,"speech-encoder-decoder"),grt.forEach(t),poo=r($Le," \u2014 "),ZR=n($Le,"A",{href:!0});var hrt=s(ZR);_oo=r(hrt,"SpeechEncoderDecoderConfig"),hrt.forEach(t),uoo=r($Le," (Speech Encoder decoder model)"),$Le.forEach(t),boo=i(L),pg=n(L,"LI",{});var kLe=s(pg);Ane=n(kLe,"STRONG",{});var prt=s(Ane);voo=r(prt,"speech_to_text"),prt.forEach(t),Foo=r(kLe," \u2014 "),eP=n(kLe,"A",{href:!0});var _rt=s(eP);Too=r(_rt,"Speech2TextConfig"),_rt.forEach(t),Moo=r(kLe," (Speech2Text model)"),kLe.forEach(t),Eoo=i(L),_g=n(L,"LI",{});var SLe=s(_g);Lne=n(SLe,"STRONG",{});var urt=s(Lne);Coo=r(urt,"speech_to_text_2"),urt.forEach(t),woo=r(SLe," \u2014 "),oP=n(SLe,"A",{href:!0});var brt=s(oP);Aoo=r(brt,"Speech2Text2Config"),brt.forEach(t),Loo=r(SLe," (Speech2Text2 model)"),SLe.forEach(t),yoo=i(L),ug=n(L,"LI",{});var RLe=s(ug);yne=n(RLe,"STRONG",{});var vrt=s(yne);xoo=r(vrt,"splinter"),vrt.forEach(t),$oo=r(RLe," \u2014 "),rP=n(RLe,"A",{href:!0});var Frt=s(rP);koo=r(Frt,"SplinterConfig"),Frt.forEach(t),Soo=r(RLe," (Splinter model)"),RLe.forEach(t),Roo=i(L),bg=n(L,"LI",{});var PLe=s(bg);xne=n(PLe,"STRONG",{});var Trt=s(xne);Poo=r(Trt,"squeezebert"),Trt.forEach(t),Boo=r(PLe," \u2014 "),tP=n(PLe,"A",{href:!0});var Mrt=s(tP);Ioo=r(Mrt,"SqueezeBertConfig"),Mrt.forEach(t),Noo=r(PLe," (SqueezeBERT model)"),PLe.forEach(t),qoo=i(L),vg=n(L,"LI",{});var BLe=s(vg);$ne=n(BLe,"STRONG",{});var Ert=s($ne);joo=r(Ert,"swin"),Ert.forEach(t),Doo=r(BLe," \u2014 "),aP=n(BLe,"A",{href:!0});var Crt=s(aP);Goo=r(Crt,"SwinConfig"),Crt.forEach(t),Ooo=r(BLe," (Swin Transformer model)"),BLe.forEach(t),Voo=i(L),Fg=n(L,"LI",{});var ILe=s(Fg);kne=n(ILe,"STRONG",{});var wrt=s(kne);Xoo=r(wrt,"t5"),wrt.forEach(t),zoo=r(ILe," \u2014 "),nP=n(ILe,"A",{href:!0});var Art=s(nP);Qoo=r(Art,"T5Config"),Art.forEach(t),Woo=r(ILe," (T5 model)"),ILe.forEach(t),Hoo=i(L),Tg=n(L,"LI",{});var NLe=s(Tg);Sne=n(NLe,"STRONG",{});var Lrt=s(Sne);Uoo=r(Lrt,"tapas"),Lrt.forEach(t),Joo=r(NLe," \u2014 "),sP=n(NLe,"A",{href:!0});var yrt=s(sP);Yoo=r(yrt,"TapasConfig"),yrt.forEach(t),Koo=r(NLe," (TAPAS model)"),NLe.forEach(t),Zoo=i(L),Mg=n(L,"LI",{});var qLe=s(Mg);Rne=n(qLe,"STRONG",{});var xrt=s(Rne);ero=r(xrt,"trajectory_transformer"),xrt.forEach(t),oro=r(qLe," \u2014 "),lP=n(qLe,"A",{href:!0});var $rt=s(lP);rro=r($rt,"TrajectoryTransformerConfig"),$rt.forEach(t),tro=r(qLe," (Trajectory Transformer model)"),qLe.forEach(t),aro=i(L),Eg=n(L,"LI",{});var jLe=s(Eg);Pne=n(jLe,"STRONG",{});var krt=s(Pne);nro=r(krt,"transfo-xl"),krt.forEach(t),sro=r(jLe," \u2014 "),iP=n(jLe,"A",{href:!0});var Srt=s(iP);lro=r(Srt,"TransfoXLConfig"),Srt.forEach(t),iro=r(jLe," (Transformer-XL model)"),jLe.forEach(t),dro=i(L),Cg=n(L,"LI",{});var DLe=s(Cg);Bne=n(DLe,"STRONG",{});var Rrt=s(Bne);cro=r(Rrt,"trocr"),Rrt.forEach(t),fro=r(DLe," \u2014 "),dP=n(DLe,"A",{href:!0});var Prt=s(dP);mro=r(Prt,"TrOCRConfig"),Prt.forEach(t),gro=r(DLe," (TrOCR model)"),DLe.forEach(t),hro=i(L),wg=n(L,"LI",{});var GLe=s(wg);Ine=n(GLe,"STRONG",{});var Brt=s(Ine);pro=r(Brt,"unispeech"),Brt.forEach(t),_ro=r(GLe," \u2014 "),cP=n(GLe,"A",{href:!0});var Irt=s(cP);uro=r(Irt,"UniSpeechConfig"),Irt.forEach(t),bro=r(GLe," (UniSpeech model)"),GLe.forEach(t),vro=i(L),Ag=n(L,"LI",{});var OLe=s(Ag);Nne=n(OLe,"STRONG",{});var Nrt=s(Nne);Fro=r(Nrt,"unispeech-sat"),Nrt.forEach(t),Tro=r(OLe," \u2014 "),fP=n(OLe,"A",{href:!0});var qrt=s(fP);Mro=r(qrt,"UniSpeechSatConfig"),qrt.forEach(t),Ero=r(OLe," (UniSpeechSat model)"),OLe.forEach(t),Cro=i(L),Lg=n(L,"LI",{});var VLe=s(Lg);qne=n(VLe,"STRONG",{});var jrt=s(qne);wro=r(jrt,"van"),jrt.forEach(t),Aro=r(VLe," \u2014 "),mP=n(VLe,"A",{href:!0});var Drt=s(mP);Lro=r(Drt,"VanConfig"),Drt.forEach(t),yro=r(VLe," (VAN model)"),VLe.forEach(t),xro=i(L),yg=n(L,"LI",{});var XLe=s(yg);jne=n(XLe,"STRONG",{});var Grt=s(jne);$ro=r(Grt,"vilt"),Grt.forEach(t),kro=r(XLe," \u2014 "),gP=n(XLe,"A",{href:!0});var Ort=s(gP);Sro=r(Ort,"ViltConfig"),Ort.forEach(t),Rro=r(XLe," (ViLT model)"),XLe.forEach(t),Pro=i(L),xg=n(L,"LI",{});var zLe=s(xg);Dne=n(zLe,"STRONG",{});var Vrt=s(Dne);Bro=r(Vrt,"vision-encoder-decoder"),Vrt.forEach(t),Iro=r(zLe," \u2014 "),hP=n(zLe,"A",{href:!0});var Xrt=s(hP);Nro=r(Xrt,"VisionEncoderDecoderConfig"),Xrt.forEach(t),qro=r(zLe," (Vision Encoder decoder model)"),zLe.forEach(t),jro=i(L),$g=n(L,"LI",{});var QLe=s($g);Gne=n(QLe,"STRONG",{});var zrt=s(Gne);Dro=r(zrt,"vision-text-dual-encoder"),zrt.forEach(t),Gro=r(QLe," \u2014 "),pP=n(QLe,"A",{href:!0});var Qrt=s(pP);Oro=r(Qrt,"VisionTextDualEncoderConfig"),Qrt.forEach(t),Vro=r(QLe," (VisionTextDualEncoder model)"),QLe.forEach(t),Xro=i(L),kg=n(L,"LI",{});var WLe=s(kg);One=n(WLe,"STRONG",{});var Wrt=s(One);zro=r(Wrt,"visual_bert"),Wrt.forEach(t),Qro=r(WLe," \u2014 "),_P=n(WLe,"A",{href:!0});var Hrt=s(_P);Wro=r(Hrt,"VisualBertConfig"),Hrt.forEach(t),Hro=r(WLe," (VisualBERT model)"),WLe.forEach(t),Uro=i(L),Sg=n(L,"LI",{});var HLe=s(Sg);Vne=n(HLe,"STRONG",{});var Urt=s(Vne);Jro=r(Urt,"vit"),Urt.forEach(t),Yro=r(HLe," \u2014 "),uP=n(HLe,"A",{href:!0});var Jrt=s(uP);Kro=r(Jrt,"ViTConfig"),Jrt.forEach(t),Zro=r(HLe," (ViT model)"),HLe.forEach(t),eto=i(L),Rg=n(L,"LI",{});var ULe=s(Rg);Xne=n(ULe,"STRONG",{});var Yrt=s(Xne);oto=r(Yrt,"vit_mae"),Yrt.forEach(t),rto=r(ULe," \u2014 "),bP=n(ULe,"A",{href:!0});var Krt=s(bP);tto=r(Krt,"ViTMAEConfig"),Krt.forEach(t),ato=r(ULe," (ViTMAE model)"),ULe.forEach(t),nto=i(L),Pg=n(L,"LI",{});var JLe=s(Pg);zne=n(JLe,"STRONG",{});var Zrt=s(zne);sto=r(Zrt,"wav2vec2"),Zrt.forEach(t),lto=r(JLe," \u2014 "),vP=n(JLe,"A",{href:!0});var ett=s(vP);ito=r(ett,"Wav2Vec2Config"),ett.forEach(t),dto=r(JLe," (Wav2Vec2 model)"),JLe.forEach(t),cto=i(L),Bg=n(L,"LI",{});var YLe=s(Bg);Qne=n(YLe,"STRONG",{});var ott=s(Qne);fto=r(ott,"wav2vec2-conformer"),ott.forEach(t),mto=r(YLe," \u2014 "),FP=n(YLe,"A",{href:!0});var rtt=s(FP);gto=r(rtt,"Wav2Vec2ConformerConfig"),rtt.forEach(t),hto=r(YLe," (Wav2Vec2-Conformer model)"),YLe.forEach(t),pto=i(L),Ig=n(L,"LI",{});var KLe=s(Ig);Wne=n(KLe,"STRONG",{});var ttt=s(Wne);_to=r(ttt,"wavlm"),ttt.forEach(t),uto=r(KLe," \u2014 "),TP=n(KLe,"A",{href:!0});var att=s(TP);bto=r(att,"WavLMConfig"),att.forEach(t),vto=r(KLe," (WavLM model)"),KLe.forEach(t),Fto=i(L),Ng=n(L,"LI",{});var ZLe=s(Ng);Hne=n(ZLe,"STRONG",{});var ntt=s(Hne);Tto=r(ntt,"xglm"),ntt.forEach(t),Mto=r(ZLe," \u2014 "),MP=n(ZLe,"A",{href:!0});var stt=s(MP);Eto=r(stt,"XGLMConfig"),stt.forEach(t),Cto=r(ZLe," (XGLM model)"),ZLe.forEach(t),wto=i(L),qg=n(L,"LI",{});var eye=s(qg);Une=n(eye,"STRONG",{});var ltt=s(Une);Ato=r(ltt,"xlm"),ltt.forEach(t),Lto=r(eye," \u2014 "),EP=n(eye,"A",{href:!0});var itt=s(EP);yto=r(itt,"XLMConfig"),itt.forEach(t),xto=r(eye," (XLM model)"),eye.forEach(t),$to=i(L),jg=n(L,"LI",{});var oye=s(jg);Jne=n(oye,"STRONG",{});var dtt=s(Jne);kto=r(dtt,"xlm-prophetnet"),dtt.forEach(t),Sto=r(oye," \u2014 "),CP=n(oye,"A",{href:!0});var ctt=s(CP);Rto=r(ctt,"XLMProphetNetConfig"),ctt.forEach(t),Pto=r(oye," (XLM-ProphetNet model)"),oye.forEach(t),Bto=i(L),Dg=n(L,"LI",{});var rye=s(Dg);Yne=n(rye,"STRONG",{});var ftt=s(Yne);Ito=r(ftt,"xlm-roberta"),ftt.forEach(t),Nto=r(rye," \u2014 "),wP=n(rye,"A",{href:!0});var mtt=s(wP);qto=r(mtt,"XLMRobertaConfig"),mtt.forEach(t),jto=r(rye," (XLM-RoBERTa model)"),rye.forEach(t),Dto=i(L),Gg=n(L,"LI",{});var tye=s(Gg);Kne=n(tye,"STRONG",{});var gtt=s(Kne);Gto=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),Oto=r(tye," \u2014 "),AP=n(tye,"A",{href:!0});var htt=s(AP);Vto=r(htt,"XLMRobertaXLConfig"),htt.forEach(t),Xto=r(tye," (XLM-RoBERTa-XL model)"),tye.forEach(t),zto=i(L),Og=n(L,"LI",{});var aye=s(Og);Zne=n(aye,"STRONG",{});var ptt=s(Zne);Qto=r(ptt,"xlnet"),ptt.forEach(t),Wto=r(aye," \u2014 "),LP=n(aye,"A",{href:!0});var _tt=s(LP);Hto=r(_tt,"XLNetConfig"),_tt.forEach(t),Uto=r(aye," (XLNet model)"),aye.forEach(t),Jto=i(L),Vg=n(L,"LI",{});var nye=s(Vg);ese=n(nye,"STRONG",{});var utt=s(ese);Yto=r(utt,"yolos"),utt.forEach(t),Kto=r(nye," \u2014 "),yP=n(nye,"A",{href:!0});var btt=s(yP);Zto=r(btt,"YolosConfig"),btt.forEach(t),eao=r(nye," (YOLOS model)"),nye.forEach(t),oao=i(L),Xg=n(L,"LI",{});var sye=s(Xg);ose=n(sye,"STRONG",{});var vtt=s(ose);rao=r(vtt,"yoso"),vtt.forEach(t),tao=r(sye," \u2014 "),xP=n(sye,"A",{href:!0});var Ftt=s(xP);aao=r(Ftt,"YosoConfig"),Ftt.forEach(t),nao=r(sye," (YOSO model)"),sye.forEach(t),L.forEach(t),sao=i(tt),T(zg.$$.fragment,tt),tt.forEach(t),lao=i(rt),Qg=n(rt,"DIV",{class:!0});var NXe=s(Qg);T(WL.$$.fragment,NXe),iao=i(NXe),rse=n(NXe,"P",{});var Ttt=s(rse);dao=r(Ttt,"Register a new configuration for this class."),Ttt.forEach(t),NXe.forEach(t),rt.forEach(t),qOe=i(f),Ri=n(f,"H2",{class:!0});var qXe=s(Ri);Wg=n(qXe,"A",{id:!0,class:!0,href:!0});var Mtt=s(Wg);tse=n(Mtt,"SPAN",{});var Ett=s(tse);T(HL.$$.fragment,Ett),Ett.forEach(t),Mtt.forEach(t),cao=i(qXe),ase=n(qXe,"SPAN",{});var Ctt=s(ase);fao=r(Ctt,"AutoTokenizer"),Ctt.forEach(t),qXe.forEach(t),jOe=i(f),Ao=n(f,"DIV",{class:!0});var Js=s(Ao);T(UL.$$.fragment,Js),mao=i(Js),JL=n(Js,"P",{});var jXe=s(JL);gao=r(jXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$P=n(jXe,"A",{href:!0});var wtt=s($P);hao=r(wtt,"AutoTokenizer.from_pretrained()"),wtt.forEach(t),pao=r(jXe," class method."),jXe.forEach(t),_ao=i(Js),YL=n(Js,"P",{});var DXe=s(YL);uao=r(DXe,"This class cannot be instantiated directly using "),nse=n(DXe,"CODE",{});var Att=s(nse);bao=r(Att,"__init__()"),Att.forEach(t),vao=r(DXe," (throws an error)."),DXe.forEach(t),Fao=i(Js),yr=n(Js,"DIV",{class:!0});var Ys=s(yr);T(KL.$$.fragment,Ys),Tao=i(Ys),sse=n(Ys,"P",{});var Ltt=s(sse);Mao=r(Ltt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ltt.forEach(t),Eao=i(Ys),Sa=n(Ys,"P",{});var Dw=s(Sa);Cao=r(Dw,"The tokenizer class to instantiate is selected based on the "),lse=n(Dw,"CODE",{});var ytt=s(lse);wao=r(ytt,"model_type"),ytt.forEach(t),Aao=r(Dw,` property of the config object (either
passed as an argument or loaded from `),ise=n(Dw,"CODE",{});var xtt=s(ise);Lao=r(xtt,"pretrained_model_name_or_path"),xtt.forEach(t),yao=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=n(Dw,"CODE",{});var $tt=s(dse);xao=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),$ao=r(Dw,":"),Dw.forEach(t),kao=i(Ys),k=n(Ys,"UL",{});var S=s(k);jn=n(S,"LI",{});var ak=s(jn);cse=n(ak,"STRONG",{});var ktt=s(cse);Sao=r(ktt,"albert"),ktt.forEach(t),Rao=r(ak," \u2014 "),kP=n(ak,"A",{href:!0});var Stt=s(kP);Pao=r(Stt,"AlbertTokenizer"),Stt.forEach(t),Bao=r(ak," or "),SP=n(ak,"A",{href:!0});var Rtt=s(SP);Iao=r(Rtt,"AlbertTokenizerFast"),Rtt.forEach(t),Nao=r(ak," (ALBERT model)"),ak.forEach(t),qao=i(S),Dn=n(S,"LI",{});var nk=s(Dn);fse=n(nk,"STRONG",{});var Ptt=s(fse);jao=r(Ptt,"bart"),Ptt.forEach(t),Dao=r(nk," \u2014 "),RP=n(nk,"A",{href:!0});var Btt=s(RP);Gao=r(Btt,"BartTokenizer"),Btt.forEach(t),Oao=r(nk," or "),PP=n(nk,"A",{href:!0});var Itt=s(PP);Vao=r(Itt,"BartTokenizerFast"),Itt.forEach(t),Xao=r(nk," (BART model)"),nk.forEach(t),zao=i(S),Gn=n(S,"LI",{});var sk=s(Gn);mse=n(sk,"STRONG",{});var Ntt=s(mse);Qao=r(Ntt,"barthez"),Ntt.forEach(t),Wao=r(sk," \u2014 "),BP=n(sk,"A",{href:!0});var qtt=s(BP);Hao=r(qtt,"BarthezTokenizer"),qtt.forEach(t),Uao=r(sk," or "),IP=n(sk,"A",{href:!0});var jtt=s(IP);Jao=r(jtt,"BarthezTokenizerFast"),jtt.forEach(t),Yao=r(sk," (BARThez model)"),sk.forEach(t),Kao=i(S),Hg=n(S,"LI",{});var lye=s(Hg);gse=n(lye,"STRONG",{});var Dtt=s(gse);Zao=r(Dtt,"bartpho"),Dtt.forEach(t),eno=r(lye," \u2014 "),NP=n(lye,"A",{href:!0});var Gtt=s(NP);ono=r(Gtt,"BartphoTokenizer"),Gtt.forEach(t),rno=r(lye," (BARTpho model)"),lye.forEach(t),tno=i(S),On=n(S,"LI",{});var lk=s(On);hse=n(lk,"STRONG",{});var Ott=s(hse);ano=r(Ott,"bert"),Ott.forEach(t),nno=r(lk," \u2014 "),qP=n(lk,"A",{href:!0});var Vtt=s(qP);sno=r(Vtt,"BertTokenizer"),Vtt.forEach(t),lno=r(lk," or "),jP=n(lk,"A",{href:!0});var Xtt=s(jP);ino=r(Xtt,"BertTokenizerFast"),Xtt.forEach(t),dno=r(lk," (BERT model)"),lk.forEach(t),cno=i(S),Ug=n(S,"LI",{});var iye=s(Ug);pse=n(iye,"STRONG",{});var ztt=s(pse);fno=r(ztt,"bert-generation"),ztt.forEach(t),mno=r(iye," \u2014 "),DP=n(iye,"A",{href:!0});var Qtt=s(DP);gno=r(Qtt,"BertGenerationTokenizer"),Qtt.forEach(t),hno=r(iye," (Bert Generation model)"),iye.forEach(t),pno=i(S),Jg=n(S,"LI",{});var dye=s(Jg);_se=n(dye,"STRONG",{});var Wtt=s(_se);_no=r(Wtt,"bert-japanese"),Wtt.forEach(t),uno=r(dye," \u2014 "),GP=n(dye,"A",{href:!0});var Htt=s(GP);bno=r(Htt,"BertJapaneseTokenizer"),Htt.forEach(t),vno=r(dye," (BertJapanese model)"),dye.forEach(t),Fno=i(S),Yg=n(S,"LI",{});var cye=s(Yg);use=n(cye,"STRONG",{});var Utt=s(use);Tno=r(Utt,"bertweet"),Utt.forEach(t),Mno=r(cye," \u2014 "),OP=n(cye,"A",{href:!0});var Jtt=s(OP);Eno=r(Jtt,"BertweetTokenizer"),Jtt.forEach(t),Cno=r(cye," (BERTweet model)"),cye.forEach(t),wno=i(S),Vn=n(S,"LI",{});var ik=s(Vn);bse=n(ik,"STRONG",{});var Ytt=s(bse);Ano=r(Ytt,"big_bird"),Ytt.forEach(t),Lno=r(ik," \u2014 "),VP=n(ik,"A",{href:!0});var Ktt=s(VP);yno=r(Ktt,"BigBirdTokenizer"),Ktt.forEach(t),xno=r(ik," or "),XP=n(ik,"A",{href:!0});var Ztt=s(XP);$no=r(Ztt,"BigBirdTokenizerFast"),Ztt.forEach(t),kno=r(ik," (BigBird model)"),ik.forEach(t),Sno=i(S),Xn=n(S,"LI",{});var dk=s(Xn);vse=n(dk,"STRONG",{});var eat=s(vse);Rno=r(eat,"bigbird_pegasus"),eat.forEach(t),Pno=r(dk," \u2014 "),zP=n(dk,"A",{href:!0});var oat=s(zP);Bno=r(oat,"PegasusTokenizer"),oat.forEach(t),Ino=r(dk," or "),QP=n(dk,"A",{href:!0});var rat=s(QP);Nno=r(rat,"PegasusTokenizerFast"),rat.forEach(t),qno=r(dk," (BigBird-Pegasus model)"),dk.forEach(t),jno=i(S),zn=n(S,"LI",{});var ck=s(zn);Fse=n(ck,"STRONG",{});var tat=s(Fse);Dno=r(tat,"blenderbot"),tat.forEach(t),Gno=r(ck," \u2014 "),WP=n(ck,"A",{href:!0});var aat=s(WP);Ono=r(aat,"BlenderbotTokenizer"),aat.forEach(t),Vno=r(ck," or "),HP=n(ck,"A",{href:!0});var nat=s(HP);Xno=r(nat,"BlenderbotTokenizerFast"),nat.forEach(t),zno=r(ck," (Blenderbot model)"),ck.forEach(t),Qno=i(S),Kg=n(S,"LI",{});var fye=s(Kg);Tse=n(fye,"STRONG",{});var sat=s(Tse);Wno=r(sat,"blenderbot-small"),sat.forEach(t),Hno=r(fye," \u2014 "),UP=n(fye,"A",{href:!0});var lat=s(UP);Uno=r(lat,"BlenderbotSmallTokenizer"),lat.forEach(t),Jno=r(fye," (BlenderbotSmall model)"),fye.forEach(t),Yno=i(S),Zg=n(S,"LI",{});var mye=s(Zg);Mse=n(mye,"STRONG",{});var iat=s(Mse);Kno=r(iat,"bloom"),iat.forEach(t),Zno=r(mye," \u2014 "),JP=n(mye,"A",{href:!0});var dat=s(JP);eso=r(dat,"BloomTokenizerFast"),dat.forEach(t),oso=r(mye," (BLOOM model)"),mye.forEach(t),rso=i(S),eh=n(S,"LI",{});var gye=s(eh);Ese=n(gye,"STRONG",{});var cat=s(Ese);tso=r(cat,"byt5"),cat.forEach(t),aso=r(gye," \u2014 "),YP=n(gye,"A",{href:!0});var fat=s(YP);nso=r(fat,"ByT5Tokenizer"),fat.forEach(t),sso=r(gye," (ByT5 model)"),gye.forEach(t),lso=i(S),Qn=n(S,"LI",{});var fk=s(Qn);Cse=n(fk,"STRONG",{});var mat=s(Cse);iso=r(mat,"camembert"),mat.forEach(t),dso=r(fk," \u2014 "),KP=n(fk,"A",{href:!0});var gat=s(KP);cso=r(gat,"CamembertTokenizer"),gat.forEach(t),fso=r(fk," or "),ZP=n(fk,"A",{href:!0});var hat=s(ZP);mso=r(hat,"CamembertTokenizerFast"),hat.forEach(t),gso=r(fk," (CamemBERT model)"),fk.forEach(t),hso=i(S),oh=n(S,"LI",{});var hye=s(oh);wse=n(hye,"STRONG",{});var pat=s(wse);pso=r(pat,"canine"),pat.forEach(t),_so=r(hye," \u2014 "),eB=n(hye,"A",{href:!0});var _at=s(eB);uso=r(_at,"CanineTokenizer"),_at.forEach(t),bso=r(hye," (CANINE model)"),hye.forEach(t),vso=i(S),Wn=n(S,"LI",{});var mk=s(Wn);Ase=n(mk,"STRONG",{});var uat=s(Ase);Fso=r(uat,"clip"),uat.forEach(t),Tso=r(mk," \u2014 "),oB=n(mk,"A",{href:!0});var bat=s(oB);Mso=r(bat,"CLIPTokenizer"),bat.forEach(t),Eso=r(mk," or "),rB=n(mk,"A",{href:!0});var vat=s(rB);Cso=r(vat,"CLIPTokenizerFast"),vat.forEach(t),wso=r(mk," (CLIP model)"),mk.forEach(t),Aso=i(S),Hn=n(S,"LI",{});var gk=s(Hn);Lse=n(gk,"STRONG",{});var Fat=s(Lse);Lso=r(Fat,"codegen"),Fat.forEach(t),yso=r(gk," \u2014 "),tB=n(gk,"A",{href:!0});var Tat=s(tB);xso=r(Tat,"CodeGenTokenizer"),Tat.forEach(t),$so=r(gk," or "),aB=n(gk,"A",{href:!0});var Mat=s(aB);kso=r(Mat,"CodeGenTokenizerFast"),Mat.forEach(t),Sso=r(gk," (CodeGen model)"),gk.forEach(t),Rso=i(S),Un=n(S,"LI",{});var hk=s(Un);yse=n(hk,"STRONG",{});var Eat=s(yse);Pso=r(Eat,"convbert"),Eat.forEach(t),Bso=r(hk," \u2014 "),nB=n(hk,"A",{href:!0});var Cat=s(nB);Iso=r(Cat,"ConvBertTokenizer"),Cat.forEach(t),Nso=r(hk," or "),sB=n(hk,"A",{href:!0});var wat=s(sB);qso=r(wat,"ConvBertTokenizerFast"),wat.forEach(t),jso=r(hk," (ConvBERT model)"),hk.forEach(t),Dso=i(S),Jn=n(S,"LI",{});var pk=s(Jn);xse=n(pk,"STRONG",{});var Aat=s(xse);Gso=r(Aat,"cpm"),Aat.forEach(t),Oso=r(pk," \u2014 "),lB=n(pk,"A",{href:!0});var Lat=s(lB);Vso=r(Lat,"CpmTokenizer"),Lat.forEach(t),Xso=r(pk," or "),iB=n(pk,"A",{href:!0});var yat=s(iB);zso=r(yat,"CpmTokenizerFast"),yat.forEach(t),Qso=r(pk," (CPM model)"),pk.forEach(t),Wso=i(S),rh=n(S,"LI",{});var pye=s(rh);$se=n(pye,"STRONG",{});var xat=s($se);Hso=r(xat,"ctrl"),xat.forEach(t),Uso=r(pye," \u2014 "),dB=n(pye,"A",{href:!0});var $at=s(dB);Jso=r($at,"CTRLTokenizer"),$at.forEach(t),Yso=r(pye," (CTRL model)"),pye.forEach(t),Kso=i(S),Yn=n(S,"LI",{});var _k=s(Yn);kse=n(_k,"STRONG",{});var kat=s(kse);Zso=r(kat,"data2vec-text"),kat.forEach(t),elo=r(_k," \u2014 "),cB=n(_k,"A",{href:!0});var Sat=s(cB);olo=r(Sat,"RobertaTokenizer"),Sat.forEach(t),rlo=r(_k," or "),fB=n(_k,"A",{href:!0});var Rat=s(fB);tlo=r(Rat,"RobertaTokenizerFast"),Rat.forEach(t),alo=r(_k," (Data2VecText model)"),_k.forEach(t),nlo=i(S),Kn=n(S,"LI",{});var uk=s(Kn);Sse=n(uk,"STRONG",{});var Pat=s(Sse);slo=r(Pat,"deberta"),Pat.forEach(t),llo=r(uk," \u2014 "),mB=n(uk,"A",{href:!0});var Bat=s(mB);ilo=r(Bat,"DebertaTokenizer"),Bat.forEach(t),dlo=r(uk," or "),gB=n(uk,"A",{href:!0});var Iat=s(gB);clo=r(Iat,"DebertaTokenizerFast"),Iat.forEach(t),flo=r(uk," (DeBERTa model)"),uk.forEach(t),mlo=i(S),Zn=n(S,"LI",{});var bk=s(Zn);Rse=n(bk,"STRONG",{});var Nat=s(Rse);glo=r(Nat,"deberta-v2"),Nat.forEach(t),hlo=r(bk," \u2014 "),hB=n(bk,"A",{href:!0});var qat=s(hB);plo=r(qat,"DebertaV2Tokenizer"),qat.forEach(t),_lo=r(bk," or "),pB=n(bk,"A",{href:!0});var jat=s(pB);ulo=r(jat,"DebertaV2TokenizerFast"),jat.forEach(t),blo=r(bk," (DeBERTa-v2 model)"),bk.forEach(t),vlo=i(S),es=n(S,"LI",{});var vk=s(es);Pse=n(vk,"STRONG",{});var Dat=s(Pse);Flo=r(Dat,"distilbert"),Dat.forEach(t),Tlo=r(vk," \u2014 "),_B=n(vk,"A",{href:!0});var Gat=s(_B);Mlo=r(Gat,"DistilBertTokenizer"),Gat.forEach(t),Elo=r(vk," or "),uB=n(vk,"A",{href:!0});var Oat=s(uB);Clo=r(Oat,"DistilBertTokenizerFast"),Oat.forEach(t),wlo=r(vk," (DistilBERT model)"),vk.forEach(t),Alo=i(S),os=n(S,"LI",{});var Fk=s(os);Bse=n(Fk,"STRONG",{});var Vat=s(Bse);Llo=r(Vat,"dpr"),Vat.forEach(t),ylo=r(Fk," \u2014 "),bB=n(Fk,"A",{href:!0});var Xat=s(bB);xlo=r(Xat,"DPRQuestionEncoderTokenizer"),Xat.forEach(t),$lo=r(Fk," or "),vB=n(Fk,"A",{href:!0});var zat=s(vB);klo=r(zat,"DPRQuestionEncoderTokenizerFast"),zat.forEach(t),Slo=r(Fk," (DPR model)"),Fk.forEach(t),Rlo=i(S),rs=n(S,"LI",{});var Tk=s(rs);Ise=n(Tk,"STRONG",{});var Qat=s(Ise);Plo=r(Qat,"electra"),Qat.forEach(t),Blo=r(Tk," \u2014 "),FB=n(Tk,"A",{href:!0});var Wat=s(FB);Ilo=r(Wat,"ElectraTokenizer"),Wat.forEach(t),Nlo=r(Tk," or "),TB=n(Tk,"A",{href:!0});var Hat=s(TB);qlo=r(Hat,"ElectraTokenizerFast"),Hat.forEach(t),jlo=r(Tk," (ELECTRA model)"),Tk.forEach(t),Dlo=i(S),th=n(S,"LI",{});var _ye=s(th);Nse=n(_ye,"STRONG",{});var Uat=s(Nse);Glo=r(Uat,"flaubert"),Uat.forEach(t),Olo=r(_ye," \u2014 "),MB=n(_ye,"A",{href:!0});var Jat=s(MB);Vlo=r(Jat,"FlaubertTokenizer"),Jat.forEach(t),Xlo=r(_ye," (FlauBERT model)"),_ye.forEach(t),zlo=i(S),ts=n(S,"LI",{});var Mk=s(ts);qse=n(Mk,"STRONG",{});var Yat=s(qse);Qlo=r(Yat,"fnet"),Yat.forEach(t),Wlo=r(Mk," \u2014 "),EB=n(Mk,"A",{href:!0});var Kat=s(EB);Hlo=r(Kat,"FNetTokenizer"),Kat.forEach(t),Ulo=r(Mk," or "),CB=n(Mk,"A",{href:!0});var Zat=s(CB);Jlo=r(Zat,"FNetTokenizerFast"),Zat.forEach(t),Ylo=r(Mk," (FNet model)"),Mk.forEach(t),Klo=i(S),ah=n(S,"LI",{});var uye=s(ah);jse=n(uye,"STRONG",{});var ent=s(jse);Zlo=r(ent,"fsmt"),ent.forEach(t),eio=r(uye," \u2014 "),wB=n(uye,"A",{href:!0});var ont=s(wB);oio=r(ont,"FSMTTokenizer"),ont.forEach(t),rio=r(uye," (FairSeq Machine-Translation model)"),uye.forEach(t),tio=i(S),as=n(S,"LI",{});var Ek=s(as);Dse=n(Ek,"STRONG",{});var rnt=s(Dse);aio=r(rnt,"funnel"),rnt.forEach(t),nio=r(Ek," \u2014 "),AB=n(Ek,"A",{href:!0});var tnt=s(AB);sio=r(tnt,"FunnelTokenizer"),tnt.forEach(t),lio=r(Ek," or "),LB=n(Ek,"A",{href:!0});var ant=s(LB);iio=r(ant,"FunnelTokenizerFast"),ant.forEach(t),dio=r(Ek," (Funnel Transformer model)"),Ek.forEach(t),cio=i(S),ns=n(S,"LI",{});var Ck=s(ns);Gse=n(Ck,"STRONG",{});var nnt=s(Gse);fio=r(nnt,"gpt2"),nnt.forEach(t),mio=r(Ck," \u2014 "),yB=n(Ck,"A",{href:!0});var snt=s(yB);gio=r(snt,"GPT2Tokenizer"),snt.forEach(t),hio=r(Ck," or "),xB=n(Ck,"A",{href:!0});var lnt=s(xB);pio=r(lnt,"GPT2TokenizerFast"),lnt.forEach(t),_io=r(Ck," (OpenAI GPT-2 model)"),Ck.forEach(t),uio=i(S),ss=n(S,"LI",{});var wk=s(ss);Ose=n(wk,"STRONG",{});var int=s(Ose);bio=r(int,"gpt_neo"),int.forEach(t),vio=r(wk," \u2014 "),$B=n(wk,"A",{href:!0});var dnt=s($B);Fio=r(dnt,"GPT2Tokenizer"),dnt.forEach(t),Tio=r(wk," or "),kB=n(wk,"A",{href:!0});var cnt=s(kB);Mio=r(cnt,"GPT2TokenizerFast"),cnt.forEach(t),Eio=r(wk," (GPT Neo model)"),wk.forEach(t),Cio=i(S),nh=n(S,"LI",{});var bye=s(nh);Vse=n(bye,"STRONG",{});var fnt=s(Vse);wio=r(fnt,"gpt_neox"),fnt.forEach(t),Aio=r(bye," \u2014 "),SB=n(bye,"A",{href:!0});var mnt=s(SB);Lio=r(mnt,"GPTNeoXTokenizerFast"),mnt.forEach(t),yio=r(bye," (GPT NeoX model)"),bye.forEach(t),xio=i(S),ls=n(S,"LI",{});var Ak=s(ls);Xse=n(Ak,"STRONG",{});var gnt=s(Xse);$io=r(gnt,"gptj"),gnt.forEach(t),kio=r(Ak," \u2014 "),RB=n(Ak,"A",{href:!0});var hnt=s(RB);Sio=r(hnt,"GPT2Tokenizer"),hnt.forEach(t),Rio=r(Ak," or "),PB=n(Ak,"A",{href:!0});var pnt=s(PB);Pio=r(pnt,"GPT2TokenizerFast"),pnt.forEach(t),Bio=r(Ak," (GPT-J model)"),Ak.forEach(t),Iio=i(S),is=n(S,"LI",{});var Lk=s(is);zse=n(Lk,"STRONG",{});var _nt=s(zse);Nio=r(_nt,"groupvit"),_nt.forEach(t),qio=r(Lk," \u2014 "),BB=n(Lk,"A",{href:!0});var unt=s(BB);jio=r(unt,"CLIPTokenizer"),unt.forEach(t),Dio=r(Lk," or "),IB=n(Lk,"A",{href:!0});var bnt=s(IB);Gio=r(bnt,"CLIPTokenizerFast"),bnt.forEach(t),Oio=r(Lk," (GroupViT model)"),Lk.forEach(t),Vio=i(S),ds=n(S,"LI",{});var yk=s(ds);Qse=n(yk,"STRONG",{});var vnt=s(Qse);Xio=r(vnt,"herbert"),vnt.forEach(t),zio=r(yk," \u2014 "),NB=n(yk,"A",{href:!0});var Fnt=s(NB);Qio=r(Fnt,"HerbertTokenizer"),Fnt.forEach(t),Wio=r(yk," or "),qB=n(yk,"A",{href:!0});var Tnt=s(qB);Hio=r(Tnt,"HerbertTokenizerFast"),Tnt.forEach(t),Uio=r(yk," (HerBERT model)"),yk.forEach(t),Jio=i(S),sh=n(S,"LI",{});var vye=s(sh);Wse=n(vye,"STRONG",{});var Mnt=s(Wse);Yio=r(Mnt,"hubert"),Mnt.forEach(t),Kio=r(vye," \u2014 "),jB=n(vye,"A",{href:!0});var Ent=s(jB);Zio=r(Ent,"Wav2Vec2CTCTokenizer"),Ent.forEach(t),edo=r(vye," (Hubert model)"),vye.forEach(t),odo=i(S),cs=n(S,"LI",{});var xk=s(cs);Hse=n(xk,"STRONG",{});var Cnt=s(Hse);rdo=r(Cnt,"ibert"),Cnt.forEach(t),tdo=r(xk," \u2014 "),DB=n(xk,"A",{href:!0});var wnt=s(DB);ado=r(wnt,"RobertaTokenizer"),wnt.forEach(t),ndo=r(xk," or "),GB=n(xk,"A",{href:!0});var Ant=s(GB);sdo=r(Ant,"RobertaTokenizerFast"),Ant.forEach(t),ldo=r(xk," (I-BERT model)"),xk.forEach(t),ido=i(S),fs=n(S,"LI",{});var $k=s(fs);Use=n($k,"STRONG",{});var Lnt=s(Use);ddo=r(Lnt,"layoutlm"),Lnt.forEach(t),cdo=r($k," \u2014 "),OB=n($k,"A",{href:!0});var ynt=s(OB);fdo=r(ynt,"LayoutLMTokenizer"),ynt.forEach(t),mdo=r($k," or "),VB=n($k,"A",{href:!0});var xnt=s(VB);gdo=r(xnt,"LayoutLMTokenizerFast"),xnt.forEach(t),hdo=r($k," (LayoutLM model)"),$k.forEach(t),pdo=i(S),ms=n(S,"LI",{});var kk=s(ms);Jse=n(kk,"STRONG",{});var $nt=s(Jse);_do=r($nt,"layoutlmv2"),$nt.forEach(t),udo=r(kk," \u2014 "),XB=n(kk,"A",{href:!0});var knt=s(XB);bdo=r(knt,"LayoutLMv2Tokenizer"),knt.forEach(t),vdo=r(kk," or "),zB=n(kk,"A",{href:!0});var Snt=s(zB);Fdo=r(Snt,"LayoutLMv2TokenizerFast"),Snt.forEach(t),Tdo=r(kk," (LayoutLMv2 model)"),kk.forEach(t),Mdo=i(S),gs=n(S,"LI",{});var Sk=s(gs);Yse=n(Sk,"STRONG",{});var Rnt=s(Yse);Edo=r(Rnt,"layoutlmv3"),Rnt.forEach(t),Cdo=r(Sk," \u2014 "),QB=n(Sk,"A",{href:!0});var Pnt=s(QB);wdo=r(Pnt,"LayoutLMv3Tokenizer"),Pnt.forEach(t),Ado=r(Sk," or "),WB=n(Sk,"A",{href:!0});var Bnt=s(WB);Ldo=r(Bnt,"LayoutLMv3TokenizerFast"),Bnt.forEach(t),ydo=r(Sk," (LayoutLMv3 model)"),Sk.forEach(t),xdo=i(S),hs=n(S,"LI",{});var Rk=s(hs);Kse=n(Rk,"STRONG",{});var Int=s(Kse);$do=r(Int,"layoutxlm"),Int.forEach(t),kdo=r(Rk," \u2014 "),HB=n(Rk,"A",{href:!0});var Nnt=s(HB);Sdo=r(Nnt,"LayoutXLMTokenizer"),Nnt.forEach(t),Rdo=r(Rk," or "),UB=n(Rk,"A",{href:!0});var qnt=s(UB);Pdo=r(qnt,"LayoutXLMTokenizerFast"),qnt.forEach(t),Bdo=r(Rk," (LayoutXLM model)"),Rk.forEach(t),Ido=i(S),ps=n(S,"LI",{});var Pk=s(ps);Zse=n(Pk,"STRONG",{});var jnt=s(Zse);Ndo=r(jnt,"led"),jnt.forEach(t),qdo=r(Pk," \u2014 "),JB=n(Pk,"A",{href:!0});var Dnt=s(JB);jdo=r(Dnt,"LEDTokenizer"),Dnt.forEach(t),Ddo=r(Pk," or "),YB=n(Pk,"A",{href:!0});var Gnt=s(YB);Gdo=r(Gnt,"LEDTokenizerFast"),Gnt.forEach(t),Odo=r(Pk," (LED model)"),Pk.forEach(t),Vdo=i(S),_s=n(S,"LI",{});var Bk=s(_s);ele=n(Bk,"STRONG",{});var Ont=s(ele);Xdo=r(Ont,"longformer"),Ont.forEach(t),zdo=r(Bk," \u2014 "),KB=n(Bk,"A",{href:!0});var Vnt=s(KB);Qdo=r(Vnt,"LongformerTokenizer"),Vnt.forEach(t),Wdo=r(Bk," or "),ZB=n(Bk,"A",{href:!0});var Xnt=s(ZB);Hdo=r(Xnt,"LongformerTokenizerFast"),Xnt.forEach(t),Udo=r(Bk," (Longformer model)"),Bk.forEach(t),Jdo=i(S),us=n(S,"LI",{});var Ik=s(us);ole=n(Ik,"STRONG",{});var znt=s(ole);Ydo=r(znt,"longt5"),znt.forEach(t),Kdo=r(Ik," \u2014 "),eI=n(Ik,"A",{href:!0});var Qnt=s(eI);Zdo=r(Qnt,"T5Tokenizer"),Qnt.forEach(t),eco=r(Ik," or "),oI=n(Ik,"A",{href:!0});var Wnt=s(oI);oco=r(Wnt,"T5TokenizerFast"),Wnt.forEach(t),rco=r(Ik," (LongT5 model)"),Ik.forEach(t),tco=i(S),lh=n(S,"LI",{});var Fye=s(lh);rle=n(Fye,"STRONG",{});var Hnt=s(rle);aco=r(Hnt,"luke"),Hnt.forEach(t),nco=r(Fye," \u2014 "),rI=n(Fye,"A",{href:!0});var Unt=s(rI);sco=r(Unt,"LukeTokenizer"),Unt.forEach(t),lco=r(Fye," (LUKE model)"),Fye.forEach(t),ico=i(S),bs=n(S,"LI",{});var Nk=s(bs);tle=n(Nk,"STRONG",{});var Jnt=s(tle);dco=r(Jnt,"lxmert"),Jnt.forEach(t),cco=r(Nk," \u2014 "),tI=n(Nk,"A",{href:!0});var Ynt=s(tI);fco=r(Ynt,"LxmertTokenizer"),Ynt.forEach(t),mco=r(Nk," or "),aI=n(Nk,"A",{href:!0});var Knt=s(aI);gco=r(Knt,"LxmertTokenizerFast"),Knt.forEach(t),hco=r(Nk," (LXMERT model)"),Nk.forEach(t),pco=i(S),ih=n(S,"LI",{});var Tye=s(ih);ale=n(Tye,"STRONG",{});var Znt=s(ale);_co=r(Znt,"m2m_100"),Znt.forEach(t),uco=r(Tye," \u2014 "),nI=n(Tye,"A",{href:!0});var est=s(nI);bco=r(est,"M2M100Tokenizer"),est.forEach(t),vco=r(Tye," (M2M100 model)"),Tye.forEach(t),Fco=i(S),dh=n(S,"LI",{});var Mye=s(dh);nle=n(Mye,"STRONG",{});var ost=s(nle);Tco=r(ost,"marian"),ost.forEach(t),Mco=r(Mye," \u2014 "),sI=n(Mye,"A",{href:!0});var rst=s(sI);Eco=r(rst,"MarianTokenizer"),rst.forEach(t),Cco=r(Mye," (Marian model)"),Mye.forEach(t),wco=i(S),vs=n(S,"LI",{});var qk=s(vs);sle=n(qk,"STRONG",{});var tst=s(sle);Aco=r(tst,"mbart"),tst.forEach(t),Lco=r(qk," \u2014 "),lI=n(qk,"A",{href:!0});var ast=s(lI);yco=r(ast,"MBartTokenizer"),ast.forEach(t),xco=r(qk," or "),iI=n(qk,"A",{href:!0});var nst=s(iI);$co=r(nst,"MBartTokenizerFast"),nst.forEach(t),kco=r(qk," (mBART model)"),qk.forEach(t),Sco=i(S),Fs=n(S,"LI",{});var jk=s(Fs);lle=n(jk,"STRONG",{});var sst=s(lle);Rco=r(sst,"mbart50"),sst.forEach(t),Pco=r(jk," \u2014 "),dI=n(jk,"A",{href:!0});var lst=s(dI);Bco=r(lst,"MBart50Tokenizer"),lst.forEach(t),Ico=r(jk," or "),cI=n(jk,"A",{href:!0});var ist=s(cI);Nco=r(ist,"MBart50TokenizerFast"),ist.forEach(t),qco=r(jk," (mBART-50 model)"),jk.forEach(t),jco=i(S),Ts=n(S,"LI",{});var Dk=s(Ts);ile=n(Dk,"STRONG",{});var dst=s(ile);Dco=r(dst,"megatron-bert"),dst.forEach(t),Gco=r(Dk," \u2014 "),fI=n(Dk,"A",{href:!0});var cst=s(fI);Oco=r(cst,"BertTokenizer"),cst.forEach(t),Vco=r(Dk," or "),mI=n(Dk,"A",{href:!0});var fst=s(mI);Xco=r(fst,"BertTokenizerFast"),fst.forEach(t),zco=r(Dk," (Megatron-BERT model)"),Dk.forEach(t),Qco=i(S),ch=n(S,"LI",{});var Eye=s(ch);dle=n(Eye,"STRONG",{});var mst=s(dle);Wco=r(mst,"mluke"),mst.forEach(t),Hco=r(Eye," \u2014 "),gI=n(Eye,"A",{href:!0});var gst=s(gI);Uco=r(gst,"MLukeTokenizer"),gst.forEach(t),Jco=r(Eye," (mLUKE model)"),Eye.forEach(t),Yco=i(S),Ms=n(S,"LI",{});var Gk=s(Ms);cle=n(Gk,"STRONG",{});var hst=s(cle);Kco=r(hst,"mobilebert"),hst.forEach(t),Zco=r(Gk," \u2014 "),hI=n(Gk,"A",{href:!0});var pst=s(hI);efo=r(pst,"MobileBertTokenizer"),pst.forEach(t),ofo=r(Gk," or "),pI=n(Gk,"A",{href:!0});var _st=s(pI);rfo=r(_st,"MobileBertTokenizerFast"),_st.forEach(t),tfo=r(Gk," (MobileBERT model)"),Gk.forEach(t),afo=i(S),Es=n(S,"LI",{});var Ok=s(Es);fle=n(Ok,"STRONG",{});var ust=s(fle);nfo=r(ust,"mpnet"),ust.forEach(t),sfo=r(Ok," \u2014 "),_I=n(Ok,"A",{href:!0});var bst=s(_I);lfo=r(bst,"MPNetTokenizer"),bst.forEach(t),ifo=r(Ok," or "),uI=n(Ok,"A",{href:!0});var vst=s(uI);dfo=r(vst,"MPNetTokenizerFast"),vst.forEach(t),cfo=r(Ok," (MPNet model)"),Ok.forEach(t),ffo=i(S),Cs=n(S,"LI",{});var Vk=s(Cs);mle=n(Vk,"STRONG",{});var Fst=s(mle);mfo=r(Fst,"mt5"),Fst.forEach(t),gfo=r(Vk," \u2014 "),bI=n(Vk,"A",{href:!0});var Tst=s(bI);hfo=r(Tst,"MT5Tokenizer"),Tst.forEach(t),pfo=r(Vk," or "),vI=n(Vk,"A",{href:!0});var Mst=s(vI);_fo=r(Mst,"MT5TokenizerFast"),Mst.forEach(t),ufo=r(Vk," (MT5 model)"),Vk.forEach(t),bfo=i(S),ws=n(S,"LI",{});var Xk=s(ws);gle=n(Xk,"STRONG",{});var Est=s(gle);vfo=r(Est,"nezha"),Est.forEach(t),Ffo=r(Xk," \u2014 "),FI=n(Xk,"A",{href:!0});var Cst=s(FI);Tfo=r(Cst,"BertTokenizer"),Cst.forEach(t),Mfo=r(Xk," or "),TI=n(Xk,"A",{href:!0});var wst=s(TI);Efo=r(wst,"BertTokenizerFast"),wst.forEach(t),Cfo=r(Xk," (Nezha model)"),Xk.forEach(t),wfo=i(S),As=n(S,"LI",{});var zk=s(As);hle=n(zk,"STRONG",{});var Ast=s(hle);Afo=r(Ast,"nystromformer"),Ast.forEach(t),Lfo=r(zk," \u2014 "),MI=n(zk,"A",{href:!0});var Lst=s(MI);yfo=r(Lst,"AlbertTokenizer"),Lst.forEach(t),xfo=r(zk," or "),EI=n(zk,"A",{href:!0});var yst=s(EI);$fo=r(yst,"AlbertTokenizerFast"),yst.forEach(t),kfo=r(zk," (Nystr\xF6mformer model)"),zk.forEach(t),Sfo=i(S),Ls=n(S,"LI",{});var Qk=s(Ls);ple=n(Qk,"STRONG",{});var xst=s(ple);Rfo=r(xst,"openai-gpt"),xst.forEach(t),Pfo=r(Qk," \u2014 "),CI=n(Qk,"A",{href:!0});var $st=s(CI);Bfo=r($st,"OpenAIGPTTokenizer"),$st.forEach(t),Ifo=r(Qk," or "),wI=n(Qk,"A",{href:!0});var kst=s(wI);Nfo=r(kst,"OpenAIGPTTokenizerFast"),kst.forEach(t),qfo=r(Qk," (OpenAI GPT model)"),Qk.forEach(t),jfo=i(S),fh=n(S,"LI",{});var Cye=s(fh);_le=n(Cye,"STRONG",{});var Sst=s(_le);Dfo=r(Sst,"opt"),Sst.forEach(t),Gfo=r(Cye," \u2014 "),AI=n(Cye,"A",{href:!0});var Rst=s(AI);Ofo=r(Rst,"GPT2Tokenizer"),Rst.forEach(t),Vfo=r(Cye," (OPT model)"),Cye.forEach(t),Xfo=i(S),ys=n(S,"LI",{});var Wk=s(ys);ule=n(Wk,"STRONG",{});var Pst=s(ule);zfo=r(Pst,"pegasus"),Pst.forEach(t),Qfo=r(Wk," \u2014 "),LI=n(Wk,"A",{href:!0});var Bst=s(LI);Wfo=r(Bst,"PegasusTokenizer"),Bst.forEach(t),Hfo=r(Wk," or "),yI=n(Wk,"A",{href:!0});var Ist=s(yI);Ufo=r(Ist,"PegasusTokenizerFast"),Ist.forEach(t),Jfo=r(Wk," (Pegasus model)"),Wk.forEach(t),Yfo=i(S),mh=n(S,"LI",{});var wye=s(mh);ble=n(wye,"STRONG",{});var Nst=s(ble);Kfo=r(Nst,"perceiver"),Nst.forEach(t),Zfo=r(wye," \u2014 "),xI=n(wye,"A",{href:!0});var qst=s(xI);emo=r(qst,"PerceiverTokenizer"),qst.forEach(t),omo=r(wye," (Perceiver model)"),wye.forEach(t),rmo=i(S),gh=n(S,"LI",{});var Aye=s(gh);vle=n(Aye,"STRONG",{});var jst=s(vle);tmo=r(jst,"phobert"),jst.forEach(t),amo=r(Aye," \u2014 "),$I=n(Aye,"A",{href:!0});var Dst=s($I);nmo=r(Dst,"PhobertTokenizer"),Dst.forEach(t),smo=r(Aye," (PhoBERT model)"),Aye.forEach(t),lmo=i(S),hh=n(S,"LI",{});var Lye=s(hh);Fle=n(Lye,"STRONG",{});var Gst=s(Fle);imo=r(Gst,"plbart"),Gst.forEach(t),dmo=r(Lye," \u2014 "),kI=n(Lye,"A",{href:!0});var Ost=s(kI);cmo=r(Ost,"PLBartTokenizer"),Ost.forEach(t),fmo=r(Lye," (PLBart model)"),Lye.forEach(t),mmo=i(S),ph=n(S,"LI",{});var yye=s(ph);Tle=n(yye,"STRONG",{});var Vst=s(Tle);gmo=r(Vst,"prophetnet"),Vst.forEach(t),hmo=r(yye," \u2014 "),SI=n(yye,"A",{href:!0});var Xst=s(SI);pmo=r(Xst,"ProphetNetTokenizer"),Xst.forEach(t),_mo=r(yye," (ProphetNet model)"),yye.forEach(t),umo=i(S),xs=n(S,"LI",{});var Hk=s(xs);Mle=n(Hk,"STRONG",{});var zst=s(Mle);bmo=r(zst,"qdqbert"),zst.forEach(t),vmo=r(Hk," \u2014 "),RI=n(Hk,"A",{href:!0});var Qst=s(RI);Fmo=r(Qst,"BertTokenizer"),Qst.forEach(t),Tmo=r(Hk," or "),PI=n(Hk,"A",{href:!0});var Wst=s(PI);Mmo=r(Wst,"BertTokenizerFast"),Wst.forEach(t),Emo=r(Hk," (QDQBert model)"),Hk.forEach(t),Cmo=i(S),_h=n(S,"LI",{});var xye=s(_h);Ele=n(xye,"STRONG",{});var Hst=s(Ele);wmo=r(Hst,"rag"),Hst.forEach(t),Amo=r(xye," \u2014 "),BI=n(xye,"A",{href:!0});var Ust=s(BI);Lmo=r(Ust,"RagTokenizer"),Ust.forEach(t),ymo=r(xye," (RAG model)"),xye.forEach(t),xmo=i(S),$s=n(S,"LI",{});var Uk=s($s);Cle=n(Uk,"STRONG",{});var Jst=s(Cle);$mo=r(Jst,"realm"),Jst.forEach(t),kmo=r(Uk," \u2014 "),II=n(Uk,"A",{href:!0});var Yst=s(II);Smo=r(Yst,"RealmTokenizer"),Yst.forEach(t),Rmo=r(Uk," or "),NI=n(Uk,"A",{href:!0});var Kst=s(NI);Pmo=r(Kst,"RealmTokenizerFast"),Kst.forEach(t),Bmo=r(Uk," (REALM model)"),Uk.forEach(t),Imo=i(S),ks=n(S,"LI",{});var Jk=s(ks);wle=n(Jk,"STRONG",{});var Zst=s(wle);Nmo=r(Zst,"reformer"),Zst.forEach(t),qmo=r(Jk," \u2014 "),qI=n(Jk,"A",{href:!0});var elt=s(qI);jmo=r(elt,"ReformerTokenizer"),elt.forEach(t),Dmo=r(Jk," or "),jI=n(Jk,"A",{href:!0});var olt=s(jI);Gmo=r(olt,"ReformerTokenizerFast"),olt.forEach(t),Omo=r(Jk," (Reformer model)"),Jk.forEach(t),Vmo=i(S),Ss=n(S,"LI",{});var Yk=s(Ss);Ale=n(Yk,"STRONG",{});var rlt=s(Ale);Xmo=r(rlt,"rembert"),rlt.forEach(t),zmo=r(Yk," \u2014 "),DI=n(Yk,"A",{href:!0});var tlt=s(DI);Qmo=r(tlt,"RemBertTokenizer"),tlt.forEach(t),Wmo=r(Yk," or "),GI=n(Yk,"A",{href:!0});var alt=s(GI);Hmo=r(alt,"RemBertTokenizerFast"),alt.forEach(t),Umo=r(Yk," (RemBERT model)"),Yk.forEach(t),Jmo=i(S),Rs=n(S,"LI",{});var Kk=s(Rs);Lle=n(Kk,"STRONG",{});var nlt=s(Lle);Ymo=r(nlt,"retribert"),nlt.forEach(t),Kmo=r(Kk," \u2014 "),OI=n(Kk,"A",{href:!0});var slt=s(OI);Zmo=r(slt,"RetriBertTokenizer"),slt.forEach(t),ego=r(Kk," or "),VI=n(Kk,"A",{href:!0});var llt=s(VI);ogo=r(llt,"RetriBertTokenizerFast"),llt.forEach(t),rgo=r(Kk," (RetriBERT model)"),Kk.forEach(t),tgo=i(S),Ps=n(S,"LI",{});var Zk=s(Ps);yle=n(Zk,"STRONG",{});var ilt=s(yle);ago=r(ilt,"roberta"),ilt.forEach(t),ngo=r(Zk," \u2014 "),XI=n(Zk,"A",{href:!0});var dlt=s(XI);sgo=r(dlt,"RobertaTokenizer"),dlt.forEach(t),lgo=r(Zk," or "),zI=n(Zk,"A",{href:!0});var clt=s(zI);igo=r(clt,"RobertaTokenizerFast"),clt.forEach(t),dgo=r(Zk," (RoBERTa model)"),Zk.forEach(t),cgo=i(S),Bs=n(S,"LI",{});var eS=s(Bs);xle=n(eS,"STRONG",{});var flt=s(xle);fgo=r(flt,"roformer"),flt.forEach(t),mgo=r(eS," \u2014 "),QI=n(eS,"A",{href:!0});var mlt=s(QI);ggo=r(mlt,"RoFormerTokenizer"),mlt.forEach(t),hgo=r(eS," or "),WI=n(eS,"A",{href:!0});var glt=s(WI);pgo=r(glt,"RoFormerTokenizerFast"),glt.forEach(t),_go=r(eS," (RoFormer model)"),eS.forEach(t),ugo=i(S),uh=n(S,"LI",{});var $ye=s(uh);$le=n($ye,"STRONG",{});var hlt=s($le);bgo=r(hlt,"speech_to_text"),hlt.forEach(t),vgo=r($ye," \u2014 "),HI=n($ye,"A",{href:!0});var plt=s(HI);Fgo=r(plt,"Speech2TextTokenizer"),plt.forEach(t),Tgo=r($ye," (Speech2Text model)"),$ye.forEach(t),Mgo=i(S),bh=n(S,"LI",{});var kye=s(bh);kle=n(kye,"STRONG",{});var _lt=s(kle);Ego=r(_lt,"speech_to_text_2"),_lt.forEach(t),Cgo=r(kye," \u2014 "),UI=n(kye,"A",{href:!0});var ult=s(UI);wgo=r(ult,"Speech2Text2Tokenizer"),ult.forEach(t),Ago=r(kye," (Speech2Text2 model)"),kye.forEach(t),Lgo=i(S),Is=n(S,"LI",{});var oS=s(Is);Sle=n(oS,"STRONG",{});var blt=s(Sle);ygo=r(blt,"splinter"),blt.forEach(t),xgo=r(oS," \u2014 "),JI=n(oS,"A",{href:!0});var vlt=s(JI);$go=r(vlt,"SplinterTokenizer"),vlt.forEach(t),kgo=r(oS," or "),YI=n(oS,"A",{href:!0});var Flt=s(YI);Sgo=r(Flt,"SplinterTokenizerFast"),Flt.forEach(t),Rgo=r(oS," (Splinter model)"),oS.forEach(t),Pgo=i(S),Ns=n(S,"LI",{});var rS=s(Ns);Rle=n(rS,"STRONG",{});var Tlt=s(Rle);Bgo=r(Tlt,"squeezebert"),Tlt.forEach(t),Igo=r(rS," \u2014 "),KI=n(rS,"A",{href:!0});var Mlt=s(KI);Ngo=r(Mlt,"SqueezeBertTokenizer"),Mlt.forEach(t),qgo=r(rS," or "),ZI=n(rS,"A",{href:!0});var Elt=s(ZI);jgo=r(Elt,"SqueezeBertTokenizerFast"),Elt.forEach(t),Dgo=r(rS," (SqueezeBERT model)"),rS.forEach(t),Ggo=i(S),qs=n(S,"LI",{});var tS=s(qs);Ple=n(tS,"STRONG",{});var Clt=s(Ple);Ogo=r(Clt,"t5"),Clt.forEach(t),Vgo=r(tS," \u2014 "),eN=n(tS,"A",{href:!0});var wlt=s(eN);Xgo=r(wlt,"T5Tokenizer"),wlt.forEach(t),zgo=r(tS," or "),oN=n(tS,"A",{href:!0});var Alt=s(oN);Qgo=r(Alt,"T5TokenizerFast"),Alt.forEach(t),Wgo=r(tS," (T5 model)"),tS.forEach(t),Hgo=i(S),vh=n(S,"LI",{});var Sye=s(vh);Ble=n(Sye,"STRONG",{});var Llt=s(Ble);Ugo=r(Llt,"tapas"),Llt.forEach(t),Jgo=r(Sye," \u2014 "),rN=n(Sye,"A",{href:!0});var ylt=s(rN);Ygo=r(ylt,"TapasTokenizer"),ylt.forEach(t),Kgo=r(Sye," (TAPAS model)"),Sye.forEach(t),Zgo=i(S),Fh=n(S,"LI",{});var Rye=s(Fh);Ile=n(Rye,"STRONG",{});var xlt=s(Ile);eho=r(xlt,"tapex"),xlt.forEach(t),oho=r(Rye," \u2014 "),tN=n(Rye,"A",{href:!0});var $lt=s(tN);rho=r($lt,"TapexTokenizer"),$lt.forEach(t),tho=r(Rye," (TAPEX model)"),Rye.forEach(t),aho=i(S),Th=n(S,"LI",{});var Pye=s(Th);Nle=n(Pye,"STRONG",{});var klt=s(Nle);nho=r(klt,"transfo-xl"),klt.forEach(t),sho=r(Pye," \u2014 "),aN=n(Pye,"A",{href:!0});var Slt=s(aN);lho=r(Slt,"TransfoXLTokenizer"),Slt.forEach(t),iho=r(Pye," (Transformer-XL model)"),Pye.forEach(t),dho=i(S),js=n(S,"LI",{});var aS=s(js);qle=n(aS,"STRONG",{});var Rlt=s(qle);cho=r(Rlt,"vilt"),Rlt.forEach(t),fho=r(aS," \u2014 "),nN=n(aS,"A",{href:!0});var Plt=s(nN);mho=r(Plt,"BertTokenizer"),Plt.forEach(t),gho=r(aS," or "),sN=n(aS,"A",{href:!0});var Blt=s(sN);hho=r(Blt,"BertTokenizerFast"),Blt.forEach(t),pho=r(aS," (ViLT model)"),aS.forEach(t),_ho=i(S),Ds=n(S,"LI",{});var nS=s(Ds);jle=n(nS,"STRONG",{});var Ilt=s(jle);uho=r(Ilt,"visual_bert"),Ilt.forEach(t),bho=r(nS," \u2014 "),lN=n(nS,"A",{href:!0});var Nlt=s(lN);vho=r(Nlt,"BertTokenizer"),Nlt.forEach(t),Fho=r(nS," or "),iN=n(nS,"A",{href:!0});var qlt=s(iN);Tho=r(qlt,"BertTokenizerFast"),qlt.forEach(t),Mho=r(nS," (VisualBERT model)"),nS.forEach(t),Eho=i(S),Mh=n(S,"LI",{});var Bye=s(Mh);Dle=n(Bye,"STRONG",{});var jlt=s(Dle);Cho=r(jlt,"wav2vec2"),jlt.forEach(t),who=r(Bye," \u2014 "),dN=n(Bye,"A",{href:!0});var Dlt=s(dN);Aho=r(Dlt,"Wav2Vec2CTCTokenizer"),Dlt.forEach(t),Lho=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),yho=i(S),Eh=n(S,"LI",{});var Iye=s(Eh);Gle=n(Iye,"STRONG",{});var Glt=s(Gle);xho=r(Glt,"wav2vec2-conformer"),Glt.forEach(t),$ho=r(Iye," \u2014 "),cN=n(Iye,"A",{href:!0});var Olt=s(cN);kho=r(Olt,"Wav2Vec2CTCTokenizer"),Olt.forEach(t),Sho=r(Iye," (Wav2Vec2-Conformer model)"),Iye.forEach(t),Rho=i(S),Ch=n(S,"LI",{});var Nye=s(Ch);Ole=n(Nye,"STRONG",{});var Vlt=s(Ole);Pho=r(Vlt,"wav2vec2_phoneme"),Vlt.forEach(t),Bho=r(Nye," \u2014 "),fN=n(Nye,"A",{href:!0});var Xlt=s(fN);Iho=r(Xlt,"Wav2Vec2PhonemeCTCTokenizer"),Xlt.forEach(t),Nho=r(Nye," (Wav2Vec2Phoneme model)"),Nye.forEach(t),qho=i(S),Gs=n(S,"LI",{});var sS=s(Gs);Vle=n(sS,"STRONG",{});var zlt=s(Vle);jho=r(zlt,"xglm"),zlt.forEach(t),Dho=r(sS," \u2014 "),mN=n(sS,"A",{href:!0});var Qlt=s(mN);Gho=r(Qlt,"XGLMTokenizer"),Qlt.forEach(t),Oho=r(sS," or "),gN=n(sS,"A",{href:!0});var Wlt=s(gN);Vho=r(Wlt,"XGLMTokenizerFast"),Wlt.forEach(t),Xho=r(sS," (XGLM model)"),sS.forEach(t),zho=i(S),wh=n(S,"LI",{});var qye=s(wh);Xle=n(qye,"STRONG",{});var Hlt=s(Xle);Qho=r(Hlt,"xlm"),Hlt.forEach(t),Who=r(qye," \u2014 "),hN=n(qye,"A",{href:!0});var Ult=s(hN);Hho=r(Ult,"XLMTokenizer"),Ult.forEach(t),Uho=r(qye," (XLM model)"),qye.forEach(t),Jho=i(S),Ah=n(S,"LI",{});var jye=s(Ah);zle=n(jye,"STRONG",{});var Jlt=s(zle);Yho=r(Jlt,"xlm-prophetnet"),Jlt.forEach(t),Kho=r(jye," \u2014 "),pN=n(jye,"A",{href:!0});var Ylt=s(pN);Zho=r(Ylt,"XLMProphetNetTokenizer"),Ylt.forEach(t),epo=r(jye," (XLM-ProphetNet model)"),jye.forEach(t),opo=i(S),Os=n(S,"LI",{});var lS=s(Os);Qle=n(lS,"STRONG",{});var Klt=s(Qle);rpo=r(Klt,"xlm-roberta"),Klt.forEach(t),tpo=r(lS," \u2014 "),_N=n(lS,"A",{href:!0});var Zlt=s(_N);apo=r(Zlt,"XLMRobertaTokenizer"),Zlt.forEach(t),npo=r(lS," or "),uN=n(lS,"A",{href:!0});var eit=s(uN);spo=r(eit,"XLMRobertaTokenizerFast"),eit.forEach(t),lpo=r(lS," (XLM-RoBERTa model)"),lS.forEach(t),ipo=i(S),Vs=n(S,"LI",{});var iS=s(Vs);Wle=n(iS,"STRONG",{});var oit=s(Wle);dpo=r(oit,"xlm-roberta-xl"),oit.forEach(t),cpo=r(iS," \u2014 "),bN=n(iS,"A",{href:!0});var rit=s(bN);fpo=r(rit,"RobertaTokenizer"),rit.forEach(t),mpo=r(iS," or "),vN=n(iS,"A",{href:!0});var tit=s(vN);gpo=r(tit,"RobertaTokenizerFast"),tit.forEach(t),hpo=r(iS," (XLM-RoBERTa-XL model)"),iS.forEach(t),ppo=i(S),Xs=n(S,"LI",{});var dS=s(Xs);Hle=n(dS,"STRONG",{});var ait=s(Hle);_po=r(ait,"xlnet"),ait.forEach(t),upo=r(dS," \u2014 "),FN=n(dS,"A",{href:!0});var nit=s(FN);bpo=r(nit,"XLNetTokenizer"),nit.forEach(t),vpo=r(dS," or "),TN=n(dS,"A",{href:!0});var sit=s(TN);Fpo=r(sit,"XLNetTokenizerFast"),sit.forEach(t),Tpo=r(dS," (XLNet model)"),dS.forEach(t),Mpo=i(S),zs=n(S,"LI",{});var cS=s(zs);Ule=n(cS,"STRONG",{});var lit=s(Ule);Epo=r(lit,"yoso"),lit.forEach(t),Cpo=r(cS," \u2014 "),MN=n(cS,"A",{href:!0});var iit=s(MN);wpo=r(iit,"AlbertTokenizer"),iit.forEach(t),Apo=r(cS," or "),EN=n(cS,"A",{href:!0});var dit=s(EN);Lpo=r(dit,"AlbertTokenizerFast"),dit.forEach(t),ypo=r(cS," (YOSO model)"),cS.forEach(t),S.forEach(t),xpo=i(Ys),T(Lh.$$.fragment,Ys),Ys.forEach(t),$po=i(Js),yh=n(Js,"DIV",{class:!0});var GXe=s(yh);T(ZL.$$.fragment,GXe),kpo=i(GXe),Jle=n(GXe,"P",{});var cit=s(Jle);Spo=r(cit,"Register a new tokenizer in this mapping."),cit.forEach(t),GXe.forEach(t),Js.forEach(t),DOe=i(f),Pi=n(f,"H2",{class:!0});var OXe=s(Pi);xh=n(OXe,"A",{id:!0,class:!0,href:!0});var fit=s(xh);Yle=n(fit,"SPAN",{});var mit=s(Yle);T(ey.$$.fragment,mit),mit.forEach(t),fit.forEach(t),Rpo=i(OXe),Kle=n(OXe,"SPAN",{});var git=s(Kle);Ppo=r(git,"AutoFeatureExtractor"),git.forEach(t),OXe.forEach(t),GOe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(oy.$$.fragment,Ks),Bpo=i(Ks),ry=n(Ks,"P",{});var VXe=s(ry);Ipo=r(VXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CN=n(VXe,"A",{href:!0});var hit=s(CN);Npo=r(hit,"AutoFeatureExtractor.from_pretrained()"),hit.forEach(t),qpo=r(VXe," class method."),VXe.forEach(t),jpo=i(Ks),ty=n(Ks,"P",{});var XXe=s(ty);Dpo=r(XXe,"This class cannot be instantiated directly using "),Zle=n(XXe,"CODE",{});var pit=s(Zle);Gpo=r(pit,"__init__()"),pit.forEach(t),Opo=r(XXe," (throws an error)."),XXe.forEach(t),Vpo=i(Ks),He=n(Ks,"DIV",{class:!0});var ra=s(He);T(ay.$$.fragment,ra),Xpo=i(ra),eie=n(ra,"P",{});var _it=s(eie);zpo=r(_it,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_it.forEach(t),Qpo=i(ra),Ra=n(ra,"P",{});var Gw=s(Ra);Wpo=r(Gw,"The feature extractor class to instantiate is selected based on the "),oie=n(Gw,"CODE",{});var uit=s(oie);Hpo=r(uit,"model_type"),uit.forEach(t),Upo=r(Gw,` property of the config object
(either passed as an argument or loaded from `),rie=n(Gw,"CODE",{});var bit=s(rie);Jpo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),Ypo=r(Gw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tie=n(Gw,"CODE",{});var vit=s(tie);Kpo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),Zpo=r(Gw,":"),Gw.forEach(t),e_o=i(ra),Y=n(ra,"UL",{});var K=s(Y);$h=n(K,"LI",{});var Dye=s($h);aie=n(Dye,"STRONG",{});var Fit=s(aie);o_o=r(Fit,"beit"),Fit.forEach(t),r_o=r(Dye," \u2014 "),wN=n(Dye,"A",{href:!0});var Tit=s(wN);t_o=r(Tit,"BeitFeatureExtractor"),Tit.forEach(t),a_o=r(Dye," (BEiT model)"),Dye.forEach(t),n_o=i(K),kh=n(K,"LI",{});var Gye=s(kh);nie=n(Gye,"STRONG",{});var Mit=s(nie);s_o=r(Mit,"clip"),Mit.forEach(t),l_o=r(Gye," \u2014 "),AN=n(Gye,"A",{href:!0});var Eit=s(AN);i_o=r(Eit,"CLIPFeatureExtractor"),Eit.forEach(t),d_o=r(Gye," (CLIP model)"),Gye.forEach(t),c_o=i(K),Sh=n(K,"LI",{});var Oye=s(Sh);sie=n(Oye,"STRONG",{});var Cit=s(sie);f_o=r(Cit,"convnext"),Cit.forEach(t),m_o=r(Oye," \u2014 "),LN=n(Oye,"A",{href:!0});var wit=s(LN);g_o=r(wit,"ConvNextFeatureExtractor"),wit.forEach(t),h_o=r(Oye," (ConvNeXT model)"),Oye.forEach(t),p_o=i(K),Rh=n(K,"LI",{});var Vye=s(Rh);lie=n(Vye,"STRONG",{});var Ait=s(lie);__o=r(Ait,"cvt"),Ait.forEach(t),u_o=r(Vye," \u2014 "),yN=n(Vye,"A",{href:!0});var Lit=s(yN);b_o=r(Lit,"ConvNextFeatureExtractor"),Lit.forEach(t),v_o=r(Vye," (CvT model)"),Vye.forEach(t),F_o=i(K),Ph=n(K,"LI",{});var Xye=s(Ph);iie=n(Xye,"STRONG",{});var yit=s(iie);T_o=r(yit,"data2vec-audio"),yit.forEach(t),M_o=r(Xye," \u2014 "),xN=n(Xye,"A",{href:!0});var xit=s(xN);E_o=r(xit,"Wav2Vec2FeatureExtractor"),xit.forEach(t),C_o=r(Xye," (Data2VecAudio model)"),Xye.forEach(t),w_o=i(K),Bh=n(K,"LI",{});var zye=s(Bh);die=n(zye,"STRONG",{});var $it=s(die);A_o=r($it,"data2vec-vision"),$it.forEach(t),L_o=r(zye," \u2014 "),$N=n(zye,"A",{href:!0});var kit=s($N);y_o=r(kit,"BeitFeatureExtractor"),kit.forEach(t),x_o=r(zye," (Data2VecVision model)"),zye.forEach(t),$_o=i(K),Ih=n(K,"LI",{});var Qye=s(Ih);cie=n(Qye,"STRONG",{});var Sit=s(cie);k_o=r(Sit,"deit"),Sit.forEach(t),S_o=r(Qye," \u2014 "),kN=n(Qye,"A",{href:!0});var Rit=s(kN);R_o=r(Rit,"DeiTFeatureExtractor"),Rit.forEach(t),P_o=r(Qye," (DeiT model)"),Qye.forEach(t),B_o=i(K),Nh=n(K,"LI",{});var Wye=s(Nh);fie=n(Wye,"STRONG",{});var Pit=s(fie);I_o=r(Pit,"detr"),Pit.forEach(t),N_o=r(Wye," \u2014 "),SN=n(Wye,"A",{href:!0});var Bit=s(SN);q_o=r(Bit,"DetrFeatureExtractor"),Bit.forEach(t),j_o=r(Wye," (DETR model)"),Wye.forEach(t),D_o=i(K),qh=n(K,"LI",{});var Hye=s(qh);mie=n(Hye,"STRONG",{});var Iit=s(mie);G_o=r(Iit,"dpt"),Iit.forEach(t),O_o=r(Hye," \u2014 "),RN=n(Hye,"A",{href:!0});var Nit=s(RN);V_o=r(Nit,"DPTFeatureExtractor"),Nit.forEach(t),X_o=r(Hye," (DPT model)"),Hye.forEach(t),z_o=i(K),jh=n(K,"LI",{});var Uye=s(jh);gie=n(Uye,"STRONG",{});var qit=s(gie);Q_o=r(qit,"flava"),qit.forEach(t),W_o=r(Uye," \u2014 "),PN=n(Uye,"A",{href:!0});var jit=s(PN);H_o=r(jit,"FlavaFeatureExtractor"),jit.forEach(t),U_o=r(Uye," (FLAVA model)"),Uye.forEach(t),J_o=i(K),Dh=n(K,"LI",{});var Jye=s(Dh);hie=n(Jye,"STRONG",{});var Dit=s(hie);Y_o=r(Dit,"glpn"),Dit.forEach(t),K_o=r(Jye," \u2014 "),BN=n(Jye,"A",{href:!0});var Git=s(BN);Z_o=r(Git,"GLPNFeatureExtractor"),Git.forEach(t),euo=r(Jye," (GLPN model)"),Jye.forEach(t),ouo=i(K),Gh=n(K,"LI",{});var Yye=s(Gh);pie=n(Yye,"STRONG",{});var Oit=s(pie);ruo=r(Oit,"groupvit"),Oit.forEach(t),tuo=r(Yye," \u2014 "),IN=n(Yye,"A",{href:!0});var Vit=s(IN);auo=r(Vit,"CLIPFeatureExtractor"),Vit.forEach(t),nuo=r(Yye," (GroupViT model)"),Yye.forEach(t),suo=i(K),Oh=n(K,"LI",{});var Kye=s(Oh);_ie=n(Kye,"STRONG",{});var Xit=s(_ie);luo=r(Xit,"hubert"),Xit.forEach(t),iuo=r(Kye," \u2014 "),NN=n(Kye,"A",{href:!0});var zit=s(NN);duo=r(zit,"Wav2Vec2FeatureExtractor"),zit.forEach(t),cuo=r(Kye," (Hubert model)"),Kye.forEach(t),fuo=i(K),Vh=n(K,"LI",{});var Zye=s(Vh);uie=n(Zye,"STRONG",{});var Qit=s(uie);muo=r(Qit,"imagegpt"),Qit.forEach(t),guo=r(Zye," \u2014 "),qN=n(Zye,"A",{href:!0});var Wit=s(qN);huo=r(Wit,"ImageGPTFeatureExtractor"),Wit.forEach(t),puo=r(Zye," (ImageGPT model)"),Zye.forEach(t),_uo=i(K),Xh=n(K,"LI",{});var e8e=s(Xh);bie=n(e8e,"STRONG",{});var Hit=s(bie);uuo=r(Hit,"layoutlmv2"),Hit.forEach(t),buo=r(e8e," \u2014 "),jN=n(e8e,"A",{href:!0});var Uit=s(jN);vuo=r(Uit,"LayoutLMv2FeatureExtractor"),Uit.forEach(t),Fuo=r(e8e," (LayoutLMv2 model)"),e8e.forEach(t),Tuo=i(K),zh=n(K,"LI",{});var o8e=s(zh);vie=n(o8e,"STRONG",{});var Jit=s(vie);Muo=r(Jit,"layoutlmv3"),Jit.forEach(t),Euo=r(o8e," \u2014 "),DN=n(o8e,"A",{href:!0});var Yit=s(DN);Cuo=r(Yit,"LayoutLMv3FeatureExtractor"),Yit.forEach(t),wuo=r(o8e," (LayoutLMv3 model)"),o8e.forEach(t),Auo=i(K),Qh=n(K,"LI",{});var r8e=s(Qh);Fie=n(r8e,"STRONG",{});var Kit=s(Fie);Luo=r(Kit,"levit"),Kit.forEach(t),yuo=r(r8e," \u2014 "),GN=n(r8e,"A",{href:!0});var Zit=s(GN);xuo=r(Zit,"LevitFeatureExtractor"),Zit.forEach(t),$uo=r(r8e," (LeViT model)"),r8e.forEach(t),kuo=i(K),Wh=n(K,"LI",{});var t8e=s(Wh);Tie=n(t8e,"STRONG",{});var edt=s(Tie);Suo=r(edt,"maskformer"),edt.forEach(t),Ruo=r(t8e," \u2014 "),ON=n(t8e,"A",{href:!0});var odt=s(ON);Puo=r(odt,"MaskFormerFeatureExtractor"),odt.forEach(t),Buo=r(t8e," (MaskFormer model)"),t8e.forEach(t),Iuo=i(K),Hh=n(K,"LI",{});var a8e=s(Hh);Mie=n(a8e,"STRONG",{});var rdt=s(Mie);Nuo=r(rdt,"mctct"),rdt.forEach(t),quo=r(a8e," \u2014 "),VN=n(a8e,"A",{href:!0});var tdt=s(VN);juo=r(tdt,"MCTCTFeatureExtractor"),tdt.forEach(t),Duo=r(a8e," (M-CTC-T model)"),a8e.forEach(t),Guo=i(K),Uh=n(K,"LI",{});var n8e=s(Uh);Eie=n(n8e,"STRONG",{});var adt=s(Eie);Ouo=r(adt,"perceiver"),adt.forEach(t),Vuo=r(n8e," \u2014 "),XN=n(n8e,"A",{href:!0});var ndt=s(XN);Xuo=r(ndt,"PerceiverFeatureExtractor"),ndt.forEach(t),zuo=r(n8e," (Perceiver model)"),n8e.forEach(t),Quo=i(K),Jh=n(K,"LI",{});var s8e=s(Jh);Cie=n(s8e,"STRONG",{});var sdt=s(Cie);Wuo=r(sdt,"poolformer"),sdt.forEach(t),Huo=r(s8e," \u2014 "),zN=n(s8e,"A",{href:!0});var ldt=s(zN);Uuo=r(ldt,"PoolFormerFeatureExtractor"),ldt.forEach(t),Juo=r(s8e," (PoolFormer model)"),s8e.forEach(t),Yuo=i(K),Yh=n(K,"LI",{});var l8e=s(Yh);wie=n(l8e,"STRONG",{});var idt=s(wie);Kuo=r(idt,"regnet"),idt.forEach(t),Zuo=r(l8e," \u2014 "),QN=n(l8e,"A",{href:!0});var ddt=s(QN);e1o=r(ddt,"ConvNextFeatureExtractor"),ddt.forEach(t),o1o=r(l8e," (RegNet model)"),l8e.forEach(t),r1o=i(K),Kh=n(K,"LI",{});var i8e=s(Kh);Aie=n(i8e,"STRONG",{});var cdt=s(Aie);t1o=r(cdt,"resnet"),cdt.forEach(t),a1o=r(i8e," \u2014 "),WN=n(i8e,"A",{href:!0});var fdt=s(WN);n1o=r(fdt,"ConvNextFeatureExtractor"),fdt.forEach(t),s1o=r(i8e," (ResNet model)"),i8e.forEach(t),l1o=i(K),Zh=n(K,"LI",{});var d8e=s(Zh);Lie=n(d8e,"STRONG",{});var mdt=s(Lie);i1o=r(mdt,"segformer"),mdt.forEach(t),d1o=r(d8e," \u2014 "),HN=n(d8e,"A",{href:!0});var gdt=s(HN);c1o=r(gdt,"SegformerFeatureExtractor"),gdt.forEach(t),f1o=r(d8e," (SegFormer model)"),d8e.forEach(t),m1o=i(K),ep=n(K,"LI",{});var c8e=s(ep);yie=n(c8e,"STRONG",{});var hdt=s(yie);g1o=r(hdt,"speech_to_text"),hdt.forEach(t),h1o=r(c8e," \u2014 "),UN=n(c8e,"A",{href:!0});var pdt=s(UN);p1o=r(pdt,"Speech2TextFeatureExtractor"),pdt.forEach(t),_1o=r(c8e," (Speech2Text model)"),c8e.forEach(t),u1o=i(K),op=n(K,"LI",{});var f8e=s(op);xie=n(f8e,"STRONG",{});var _dt=s(xie);b1o=r(_dt,"swin"),_dt.forEach(t),v1o=r(f8e," \u2014 "),JN=n(f8e,"A",{href:!0});var udt=s(JN);F1o=r(udt,"ViTFeatureExtractor"),udt.forEach(t),T1o=r(f8e," (Swin Transformer model)"),f8e.forEach(t),M1o=i(K),rp=n(K,"LI",{});var m8e=s(rp);$ie=n(m8e,"STRONG",{});var bdt=s($ie);E1o=r(bdt,"van"),bdt.forEach(t),C1o=r(m8e," \u2014 "),YN=n(m8e,"A",{href:!0});var vdt=s(YN);w1o=r(vdt,"ConvNextFeatureExtractor"),vdt.forEach(t),A1o=r(m8e," (VAN model)"),m8e.forEach(t),L1o=i(K),tp=n(K,"LI",{});var g8e=s(tp);kie=n(g8e,"STRONG",{});var Fdt=s(kie);y1o=r(Fdt,"vilt"),Fdt.forEach(t),x1o=r(g8e," \u2014 "),KN=n(g8e,"A",{href:!0});var Tdt=s(KN);$1o=r(Tdt,"ViltFeatureExtractor"),Tdt.forEach(t),k1o=r(g8e," (ViLT model)"),g8e.forEach(t),S1o=i(K),ap=n(K,"LI",{});var h8e=s(ap);Sie=n(h8e,"STRONG",{});var Mdt=s(Sie);R1o=r(Mdt,"vit"),Mdt.forEach(t),P1o=r(h8e," \u2014 "),ZN=n(h8e,"A",{href:!0});var Edt=s(ZN);B1o=r(Edt,"ViTFeatureExtractor"),Edt.forEach(t),I1o=r(h8e," (ViT model)"),h8e.forEach(t),N1o=i(K),np=n(K,"LI",{});var p8e=s(np);Rie=n(p8e,"STRONG",{});var Cdt=s(Rie);q1o=r(Cdt,"vit_mae"),Cdt.forEach(t),j1o=r(p8e," \u2014 "),eq=n(p8e,"A",{href:!0});var wdt=s(eq);D1o=r(wdt,"ViTFeatureExtractor"),wdt.forEach(t),G1o=r(p8e," (ViTMAE model)"),p8e.forEach(t),O1o=i(K),sp=n(K,"LI",{});var _8e=s(sp);Pie=n(_8e,"STRONG",{});var Adt=s(Pie);V1o=r(Adt,"wav2vec2"),Adt.forEach(t),X1o=r(_8e," \u2014 "),oq=n(_8e,"A",{href:!0});var Ldt=s(oq);z1o=r(Ldt,"Wav2Vec2FeatureExtractor"),Ldt.forEach(t),Q1o=r(_8e," (Wav2Vec2 model)"),_8e.forEach(t),W1o=i(K),lp=n(K,"LI",{});var u8e=s(lp);Bie=n(u8e,"STRONG",{});var ydt=s(Bie);H1o=r(ydt,"wav2vec2-conformer"),ydt.forEach(t),U1o=r(u8e," \u2014 "),rq=n(u8e,"A",{href:!0});var xdt=s(rq);J1o=r(xdt,"Wav2Vec2FeatureExtractor"),xdt.forEach(t),Y1o=r(u8e," (Wav2Vec2-Conformer model)"),u8e.forEach(t),K1o=i(K),ip=n(K,"LI",{});var b8e=s(ip);Iie=n(b8e,"STRONG",{});var $dt=s(Iie);Z1o=r($dt,"yolos"),$dt.forEach(t),e7o=r(b8e," \u2014 "),tq=n(b8e,"A",{href:!0});var kdt=s(tq);o7o=r(kdt,"YolosFeatureExtractor"),kdt.forEach(t),r7o=r(b8e," (YOLOS model)"),b8e.forEach(t),K.forEach(t),t7o=i(ra),T(dp.$$.fragment,ra),a7o=i(ra),T(cp.$$.fragment,ra),ra.forEach(t),n7o=i(Ks),fp=n(Ks,"DIV",{class:!0});var zXe=s(fp);T(ny.$$.fragment,zXe),s7o=i(zXe),Nie=n(zXe,"P",{});var Sdt=s(Nie);l7o=r(Sdt,"Register a new feature extractor for this class."),Sdt.forEach(t),zXe.forEach(t),Ks.forEach(t),OOe=i(f),Bi=n(f,"H2",{class:!0});var QXe=s(Bi);mp=n(QXe,"A",{id:!0,class:!0,href:!0});var Rdt=s(mp);qie=n(Rdt,"SPAN",{});var Pdt=s(qie);T(sy.$$.fragment,Pdt),Pdt.forEach(t),Rdt.forEach(t),i7o=i(QXe),jie=n(QXe,"SPAN",{});var Bdt=s(jie);d7o=r(Bdt,"AutoProcessor"),Bdt.forEach(t),QXe.forEach(t),VOe=i(f),yo=n(f,"DIV",{class:!0});var Zs=s(yo);T(ly.$$.fragment,Zs),c7o=i(Zs),iy=n(Zs,"P",{});var WXe=s(iy);f7o=r(WXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aq=n(WXe,"A",{href:!0});var Idt=s(aq);m7o=r(Idt,"AutoProcessor.from_pretrained()"),Idt.forEach(t),g7o=r(WXe," class method."),WXe.forEach(t),h7o=i(Zs),dy=n(Zs,"P",{});var HXe=s(dy);p7o=r(HXe,"This class cannot be instantiated directly using "),Die=n(HXe,"CODE",{});var Ndt=s(Die);_7o=r(Ndt,"__init__()"),Ndt.forEach(t),u7o=r(HXe," (throws an error)."),HXe.forEach(t),b7o=i(Zs),Ue=n(Zs,"DIV",{class:!0});var ta=s(Ue);T(cy.$$.fragment,ta),v7o=i(ta),Gie=n(ta,"P",{});var qdt=s(Gie);F7o=r(qdt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qdt.forEach(t),T7o=i(ta),Ii=n(ta,"P",{});var Xoe=s(Ii);M7o=r(Xoe,"The processor class to instantiate is selected based on the "),Oie=n(Xoe,"CODE",{});var jdt=s(Oie);E7o=r(jdt,"model_type"),jdt.forEach(t),C7o=r(Xoe,` property of the config object (either
passed as an argument or loaded from `),Vie=n(Xoe,"CODE",{});var Ddt=s(Vie);w7o=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),A7o=r(Xoe," if possible):"),Xoe.forEach(t),L7o=i(ta),he=n(ta,"UL",{});var ue=s(he);gp=n(ue,"LI",{});var v8e=s(gp);Xie=n(v8e,"STRONG",{});var Gdt=s(Xie);y7o=r(Gdt,"clip"),Gdt.forEach(t),x7o=r(v8e," \u2014 "),nq=n(v8e,"A",{href:!0});var Odt=s(nq);$7o=r(Odt,"CLIPProcessor"),Odt.forEach(t),k7o=r(v8e," (CLIP model)"),v8e.forEach(t),S7o=i(ue),hp=n(ue,"LI",{});var F8e=s(hp);zie=n(F8e,"STRONG",{});var Vdt=s(zie);R7o=r(Vdt,"flava"),Vdt.forEach(t),P7o=r(F8e," \u2014 "),Qie=n(F8e,"CODE",{});var Xdt=s(Qie);B7o=r(Xdt,"FLAVAProcessor"),Xdt.forEach(t),I7o=r(F8e," (FLAVA model)"),F8e.forEach(t),N7o=i(ue),pp=n(ue,"LI",{});var T8e=s(pp);Wie=n(T8e,"STRONG",{});var zdt=s(Wie);q7o=r(zdt,"groupvit"),zdt.forEach(t),j7o=r(T8e," \u2014 "),sq=n(T8e,"A",{href:!0});var Qdt=s(sq);D7o=r(Qdt,"CLIPProcessor"),Qdt.forEach(t),G7o=r(T8e," (GroupViT model)"),T8e.forEach(t),O7o=i(ue),_p=n(ue,"LI",{});var M8e=s(_p);Hie=n(M8e,"STRONG",{});var Wdt=s(Hie);V7o=r(Wdt,"layoutlmv2"),Wdt.forEach(t),X7o=r(M8e," \u2014 "),lq=n(M8e,"A",{href:!0});var Hdt=s(lq);z7o=r(Hdt,"LayoutLMv2Processor"),Hdt.forEach(t),Q7o=r(M8e," (LayoutLMv2 model)"),M8e.forEach(t),W7o=i(ue),up=n(ue,"LI",{});var E8e=s(up);Uie=n(E8e,"STRONG",{});var Udt=s(Uie);H7o=r(Udt,"layoutlmv3"),Udt.forEach(t),U7o=r(E8e," \u2014 "),iq=n(E8e,"A",{href:!0});var Jdt=s(iq);J7o=r(Jdt,"LayoutLMv3Processor"),Jdt.forEach(t),Y7o=r(E8e," (LayoutLMv3 model)"),E8e.forEach(t),K7o=i(ue),bp=n(ue,"LI",{});var C8e=s(bp);Jie=n(C8e,"STRONG",{});var Ydt=s(Jie);Z7o=r(Ydt,"layoutxlm"),Ydt.forEach(t),e2o=r(C8e," \u2014 "),dq=n(C8e,"A",{href:!0});var Kdt=s(dq);o2o=r(Kdt,"LayoutXLMProcessor"),Kdt.forEach(t),r2o=r(C8e," (LayoutXLM model)"),C8e.forEach(t),t2o=i(ue),vp=n(ue,"LI",{});var w8e=s(vp);Yie=n(w8e,"STRONG",{});var Zdt=s(Yie);a2o=r(Zdt,"sew"),Zdt.forEach(t),n2o=r(w8e," \u2014 "),cq=n(w8e,"A",{href:!0});var ect=s(cq);s2o=r(ect,"Wav2Vec2Processor"),ect.forEach(t),l2o=r(w8e," (SEW model)"),w8e.forEach(t),i2o=i(ue),Fp=n(ue,"LI",{});var A8e=s(Fp);Kie=n(A8e,"STRONG",{});var oct=s(Kie);d2o=r(oct,"sew-d"),oct.forEach(t),c2o=r(A8e," \u2014 "),fq=n(A8e,"A",{href:!0});var rct=s(fq);f2o=r(rct,"Wav2Vec2Processor"),rct.forEach(t),m2o=r(A8e," (SEW-D model)"),A8e.forEach(t),g2o=i(ue),Tp=n(ue,"LI",{});var L8e=s(Tp);Zie=n(L8e,"STRONG",{});var tct=s(Zie);h2o=r(tct,"speech_to_text"),tct.forEach(t),p2o=r(L8e," \u2014 "),mq=n(L8e,"A",{href:!0});var act=s(mq);_2o=r(act,"Speech2TextProcessor"),act.forEach(t),u2o=r(L8e," (Speech2Text model)"),L8e.forEach(t),b2o=i(ue),Mp=n(ue,"LI",{});var y8e=s(Mp);ede=n(y8e,"STRONG",{});var nct=s(ede);v2o=r(nct,"speech_to_text_2"),nct.forEach(t),F2o=r(y8e," \u2014 "),gq=n(y8e,"A",{href:!0});var sct=s(gq);T2o=r(sct,"Speech2Text2Processor"),sct.forEach(t),M2o=r(y8e," (Speech2Text2 model)"),y8e.forEach(t),E2o=i(ue),Ep=n(ue,"LI",{});var x8e=s(Ep);ode=n(x8e,"STRONG",{});var lct=s(ode);C2o=r(lct,"trocr"),lct.forEach(t),w2o=r(x8e," \u2014 "),hq=n(x8e,"A",{href:!0});var ict=s(hq);A2o=r(ict,"TrOCRProcessor"),ict.forEach(t),L2o=r(x8e," (TrOCR model)"),x8e.forEach(t),y2o=i(ue),Cp=n(ue,"LI",{});var $8e=s(Cp);rde=n($8e,"STRONG",{});var dct=s(rde);x2o=r(dct,"unispeech"),dct.forEach(t),$2o=r($8e," \u2014 "),pq=n($8e,"A",{href:!0});var cct=s(pq);k2o=r(cct,"Wav2Vec2Processor"),cct.forEach(t),S2o=r($8e," (UniSpeech model)"),$8e.forEach(t),R2o=i(ue),wp=n(ue,"LI",{});var k8e=s(wp);tde=n(k8e,"STRONG",{});var fct=s(tde);P2o=r(fct,"unispeech-sat"),fct.forEach(t),B2o=r(k8e," \u2014 "),_q=n(k8e,"A",{href:!0});var mct=s(_q);I2o=r(mct,"Wav2Vec2Processor"),mct.forEach(t),N2o=r(k8e," (UniSpeechSat model)"),k8e.forEach(t),q2o=i(ue),Ap=n(ue,"LI",{});var S8e=s(Ap);ade=n(S8e,"STRONG",{});var gct=s(ade);j2o=r(gct,"vilt"),gct.forEach(t),D2o=r(S8e," \u2014 "),uq=n(S8e,"A",{href:!0});var hct=s(uq);G2o=r(hct,"ViltProcessor"),hct.forEach(t),O2o=r(S8e," (ViLT model)"),S8e.forEach(t),V2o=i(ue),Lp=n(ue,"LI",{});var R8e=s(Lp);nde=n(R8e,"STRONG",{});var pct=s(nde);X2o=r(pct,"vision-text-dual-encoder"),pct.forEach(t),z2o=r(R8e," \u2014 "),bq=n(R8e,"A",{href:!0});var _ct=s(bq);Q2o=r(_ct,"VisionTextDualEncoderProcessor"),_ct.forEach(t),W2o=r(R8e," (VisionTextDualEncoder model)"),R8e.forEach(t),H2o=i(ue),yp=n(ue,"LI",{});var P8e=s(yp);sde=n(P8e,"STRONG",{});var uct=s(sde);U2o=r(uct,"wav2vec2"),uct.forEach(t),J2o=r(P8e," \u2014 "),vq=n(P8e,"A",{href:!0});var bct=s(vq);Y2o=r(bct,"Wav2Vec2Processor"),bct.forEach(t),K2o=r(P8e," (Wav2Vec2 model)"),P8e.forEach(t),Z2o=i(ue),xp=n(ue,"LI",{});var B8e=s(xp);lde=n(B8e,"STRONG",{});var vct=s(lde);ebo=r(vct,"wav2vec2-conformer"),vct.forEach(t),obo=r(B8e," \u2014 "),Fq=n(B8e,"A",{href:!0});var Fct=s(Fq);rbo=r(Fct,"Wav2Vec2Processor"),Fct.forEach(t),tbo=r(B8e," (Wav2Vec2-Conformer model)"),B8e.forEach(t),abo=i(ue),$p=n(ue,"LI",{});var I8e=s($p);ide=n(I8e,"STRONG",{});var Tct=s(ide);nbo=r(Tct,"wavlm"),Tct.forEach(t),sbo=r(I8e," \u2014 "),Tq=n(I8e,"A",{href:!0});var Mct=s(Tq);lbo=r(Mct,"Wav2Vec2Processor"),Mct.forEach(t),ibo=r(I8e," (WavLM model)"),I8e.forEach(t),ue.forEach(t),dbo=i(ta),T(kp.$$.fragment,ta),cbo=i(ta),T(Sp.$$.fragment,ta),ta.forEach(t),fbo=i(Zs),Rp=n(Zs,"DIV",{class:!0});var UXe=s(Rp);T(fy.$$.fragment,UXe),mbo=i(UXe),dde=n(UXe,"P",{});var Ect=s(dde);gbo=r(Ect,"Register a new processor for this class."),Ect.forEach(t),UXe.forEach(t),Zs.forEach(t),XOe=i(f),Ni=n(f,"H2",{class:!0});var JXe=s(Ni);Pp=n(JXe,"A",{id:!0,class:!0,href:!0});var Cct=s(Pp);cde=n(Cct,"SPAN",{});var wct=s(cde);T(my.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),hbo=i(JXe),fde=n(JXe,"SPAN",{});var Act=s(fde);pbo=r(Act,"AutoModel"),Act.forEach(t),JXe.forEach(t),zOe=i(f),xo=n(f,"DIV",{class:!0});var el=s(xo);T(gy.$$.fragment,el),_bo=i(el),qi=n(el,"P",{});var zoe=s(qi);ubo=r(zoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=n(zoe,"A",{href:!0});var Lct=s(Mq);bbo=r(Lct,"from_pretrained()"),Lct.forEach(t),vbo=r(zoe," class method or the "),Eq=n(zoe,"A",{href:!0});var yct=s(Eq);Fbo=r(yct,"from_config()"),yct.forEach(t),Tbo=r(zoe,` class
method.`),zoe.forEach(t),Mbo=i(el),hy=n(el,"P",{});var YXe=s(hy);Ebo=r(YXe,"This class cannot be instantiated directly using "),mde=n(YXe,"CODE",{});var xct=s(mde);Cbo=r(xct,"__init__()"),xct.forEach(t),wbo=r(YXe," (throws an error)."),YXe.forEach(t),Abo=i(el),nt=n(el,"DIV",{class:!0});var Ow=s(nt);T(py.$$.fragment,Ow),Lbo=i(Ow),gde=n(Ow,"P",{});var $ct=s(gde);ybo=r($ct,"Instantiates one of the base model classes of the library from a configuration."),$ct.forEach(t),xbo=i(Ow),ji=n(Ow,"P",{});var Qoe=s(ji);$bo=r(Qoe,`Note:
Loading a model from its configuration file does `),hde=n(Qoe,"STRONG",{});var kct=s(hde);kbo=r(kct,"not"),kct.forEach(t),Sbo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=n(Qoe,"A",{href:!0});var Sct=s(Cq);Rbo=r(Sct,"from_pretrained()"),Sct.forEach(t),Pbo=r(Qoe," to load the model weights."),Qoe.forEach(t),Bbo=i(Ow),T(Bp.$$.fragment,Ow),Ow.forEach(t),Ibo=i(el),Je=n(el,"DIV",{class:!0});var aa=s(Je);T(_y.$$.fragment,aa),Nbo=i(aa),pde=n(aa,"P",{});var Rct=s(pde);qbo=r(Rct,"Instantiate one of the base model classes of the library from a pretrained model."),Rct.forEach(t),jbo=i(aa),Pa=n(aa,"P",{});var Vw=s(Pa);Dbo=r(Vw,"The model class to instantiate is selected based on the "),_de=n(Vw,"CODE",{});var Pct=s(_de);Gbo=r(Pct,"model_type"),Pct.forEach(t),Obo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),ude=n(Vw,"CODE",{});var Bct=s(ude);Vbo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),Xbo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=n(Vw,"CODE",{});var Ict=s(bde);zbo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),Qbo=r(Vw,":"),Vw.forEach(t),Wbo=i(aa),y=n(aa,"UL",{});var x=s(y);Ip=n(x,"LI",{});var N8e=s(Ip);vde=n(N8e,"STRONG",{});var Nct=s(vde);Hbo=r(Nct,"albert"),Nct.forEach(t),Ubo=r(N8e," \u2014 "),wq=n(N8e,"A",{href:!0});var qct=s(wq);Jbo=r(qct,"AlbertModel"),qct.forEach(t),Ybo=r(N8e," (ALBERT model)"),N8e.forEach(t),Kbo=i(x),Np=n(x,"LI",{});var q8e=s(Np);Fde=n(q8e,"STRONG",{});var jct=s(Fde);Zbo=r(jct,"bart"),jct.forEach(t),evo=r(q8e," \u2014 "),Aq=n(q8e,"A",{href:!0});var Dct=s(Aq);ovo=r(Dct,"BartModel"),Dct.forEach(t),rvo=r(q8e," (BART model)"),q8e.forEach(t),tvo=i(x),qp=n(x,"LI",{});var j8e=s(qp);Tde=n(j8e,"STRONG",{});var Gct=s(Tde);avo=r(Gct,"beit"),Gct.forEach(t),nvo=r(j8e," \u2014 "),Lq=n(j8e,"A",{href:!0});var Oct=s(Lq);svo=r(Oct,"BeitModel"),Oct.forEach(t),lvo=r(j8e," (BEiT model)"),j8e.forEach(t),ivo=i(x),jp=n(x,"LI",{});var D8e=s(jp);Mde=n(D8e,"STRONG",{});var Vct=s(Mde);dvo=r(Vct,"bert"),Vct.forEach(t),cvo=r(D8e," \u2014 "),yq=n(D8e,"A",{href:!0});var Xct=s(yq);fvo=r(Xct,"BertModel"),Xct.forEach(t),mvo=r(D8e," (BERT model)"),D8e.forEach(t),gvo=i(x),Dp=n(x,"LI",{});var G8e=s(Dp);Ede=n(G8e,"STRONG",{});var zct=s(Ede);hvo=r(zct,"bert-generation"),zct.forEach(t),pvo=r(G8e," \u2014 "),xq=n(G8e,"A",{href:!0});var Qct=s(xq);_vo=r(Qct,"BertGenerationEncoder"),Qct.forEach(t),uvo=r(G8e," (Bert Generation model)"),G8e.forEach(t),bvo=i(x),Gp=n(x,"LI",{});var O8e=s(Gp);Cde=n(O8e,"STRONG",{});var Wct=s(Cde);vvo=r(Wct,"big_bird"),Wct.forEach(t),Fvo=r(O8e," \u2014 "),$q=n(O8e,"A",{href:!0});var Hct=s($q);Tvo=r(Hct,"BigBirdModel"),Hct.forEach(t),Mvo=r(O8e," (BigBird model)"),O8e.forEach(t),Evo=i(x),Op=n(x,"LI",{});var V8e=s(Op);wde=n(V8e,"STRONG",{});var Uct=s(wde);Cvo=r(Uct,"bigbird_pegasus"),Uct.forEach(t),wvo=r(V8e," \u2014 "),kq=n(V8e,"A",{href:!0});var Jct=s(kq);Avo=r(Jct,"BigBirdPegasusModel"),Jct.forEach(t),Lvo=r(V8e," (BigBird-Pegasus model)"),V8e.forEach(t),yvo=i(x),Vp=n(x,"LI",{});var X8e=s(Vp);Ade=n(X8e,"STRONG",{});var Yct=s(Ade);xvo=r(Yct,"blenderbot"),Yct.forEach(t),$vo=r(X8e," \u2014 "),Sq=n(X8e,"A",{href:!0});var Kct=s(Sq);kvo=r(Kct,"BlenderbotModel"),Kct.forEach(t),Svo=r(X8e," (Blenderbot model)"),X8e.forEach(t),Rvo=i(x),Xp=n(x,"LI",{});var z8e=s(Xp);Lde=n(z8e,"STRONG",{});var Zct=s(Lde);Pvo=r(Zct,"blenderbot-small"),Zct.forEach(t),Bvo=r(z8e," \u2014 "),Rq=n(z8e,"A",{href:!0});var eft=s(Rq);Ivo=r(eft,"BlenderbotSmallModel"),eft.forEach(t),Nvo=r(z8e," (BlenderbotSmall model)"),z8e.forEach(t),qvo=i(x),zp=n(x,"LI",{});var Q8e=s(zp);yde=n(Q8e,"STRONG",{});var oft=s(yde);jvo=r(oft,"bloom"),oft.forEach(t),Dvo=r(Q8e," \u2014 "),Pq=n(Q8e,"A",{href:!0});var rft=s(Pq);Gvo=r(rft,"BloomModel"),rft.forEach(t),Ovo=r(Q8e," (BLOOM model)"),Q8e.forEach(t),Vvo=i(x),Qp=n(x,"LI",{});var W8e=s(Qp);xde=n(W8e,"STRONG",{});var tft=s(xde);Xvo=r(tft,"camembert"),tft.forEach(t),zvo=r(W8e," \u2014 "),Bq=n(W8e,"A",{href:!0});var aft=s(Bq);Qvo=r(aft,"CamembertModel"),aft.forEach(t),Wvo=r(W8e," (CamemBERT model)"),W8e.forEach(t),Hvo=i(x),Wp=n(x,"LI",{});var H8e=s(Wp);$de=n(H8e,"STRONG",{});var nft=s($de);Uvo=r(nft,"canine"),nft.forEach(t),Jvo=r(H8e," \u2014 "),Iq=n(H8e,"A",{href:!0});var sft=s(Iq);Yvo=r(sft,"CanineModel"),sft.forEach(t),Kvo=r(H8e," (CANINE model)"),H8e.forEach(t),Zvo=i(x),Hp=n(x,"LI",{});var U8e=s(Hp);kde=n(U8e,"STRONG",{});var lft=s(kde);eFo=r(lft,"clip"),lft.forEach(t),oFo=r(U8e," \u2014 "),Nq=n(U8e,"A",{href:!0});var ift=s(Nq);rFo=r(ift,"CLIPModel"),ift.forEach(t),tFo=r(U8e," (CLIP model)"),U8e.forEach(t),aFo=i(x),Up=n(x,"LI",{});var J8e=s(Up);Sde=n(J8e,"STRONG",{});var dft=s(Sde);nFo=r(dft,"codegen"),dft.forEach(t),sFo=r(J8e," \u2014 "),qq=n(J8e,"A",{href:!0});var cft=s(qq);lFo=r(cft,"CodeGenModel"),cft.forEach(t),iFo=r(J8e," (CodeGen model)"),J8e.forEach(t),dFo=i(x),Jp=n(x,"LI",{});var Y8e=s(Jp);Rde=n(Y8e,"STRONG",{});var fft=s(Rde);cFo=r(fft,"convbert"),fft.forEach(t),fFo=r(Y8e," \u2014 "),jq=n(Y8e,"A",{href:!0});var mft=s(jq);mFo=r(mft,"ConvBertModel"),mft.forEach(t),gFo=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),hFo=i(x),Yp=n(x,"LI",{});var K8e=s(Yp);Pde=n(K8e,"STRONG",{});var gft=s(Pde);pFo=r(gft,"convnext"),gft.forEach(t),_Fo=r(K8e," \u2014 "),Dq=n(K8e,"A",{href:!0});var hft=s(Dq);uFo=r(hft,"ConvNextModel"),hft.forEach(t),bFo=r(K8e," (ConvNeXT model)"),K8e.forEach(t),vFo=i(x),Kp=n(x,"LI",{});var Z8e=s(Kp);Bde=n(Z8e,"STRONG",{});var pft=s(Bde);FFo=r(pft,"ctrl"),pft.forEach(t),TFo=r(Z8e," \u2014 "),Gq=n(Z8e,"A",{href:!0});var _ft=s(Gq);MFo=r(_ft,"CTRLModel"),_ft.forEach(t),EFo=r(Z8e," (CTRL model)"),Z8e.forEach(t),CFo=i(x),Zp=n(x,"LI",{});var e9e=s(Zp);Ide=n(e9e,"STRONG",{});var uft=s(Ide);wFo=r(uft,"cvt"),uft.forEach(t),AFo=r(e9e," \u2014 "),Oq=n(e9e,"A",{href:!0});var bft=s(Oq);LFo=r(bft,"CvtModel"),bft.forEach(t),yFo=r(e9e," (CvT model)"),e9e.forEach(t),xFo=i(x),e_=n(x,"LI",{});var o9e=s(e_);Nde=n(o9e,"STRONG",{});var vft=s(Nde);$Fo=r(vft,"data2vec-audio"),vft.forEach(t),kFo=r(o9e," \u2014 "),Vq=n(o9e,"A",{href:!0});var Fft=s(Vq);SFo=r(Fft,"Data2VecAudioModel"),Fft.forEach(t),RFo=r(o9e," (Data2VecAudio model)"),o9e.forEach(t),PFo=i(x),o_=n(x,"LI",{});var r9e=s(o_);qde=n(r9e,"STRONG",{});var Tft=s(qde);BFo=r(Tft,"data2vec-text"),Tft.forEach(t),IFo=r(r9e," \u2014 "),Xq=n(r9e,"A",{href:!0});var Mft=s(Xq);NFo=r(Mft,"Data2VecTextModel"),Mft.forEach(t),qFo=r(r9e," (Data2VecText model)"),r9e.forEach(t),jFo=i(x),r_=n(x,"LI",{});var t9e=s(r_);jde=n(t9e,"STRONG",{});var Eft=s(jde);DFo=r(Eft,"data2vec-vision"),Eft.forEach(t),GFo=r(t9e," \u2014 "),zq=n(t9e,"A",{href:!0});var Cft=s(zq);OFo=r(Cft,"Data2VecVisionModel"),Cft.forEach(t),VFo=r(t9e," (Data2VecVision model)"),t9e.forEach(t),XFo=i(x),t_=n(x,"LI",{});var a9e=s(t_);Dde=n(a9e,"STRONG",{});var wft=s(Dde);zFo=r(wft,"deberta"),wft.forEach(t),QFo=r(a9e," \u2014 "),Qq=n(a9e,"A",{href:!0});var Aft=s(Qq);WFo=r(Aft,"DebertaModel"),Aft.forEach(t),HFo=r(a9e," (DeBERTa model)"),a9e.forEach(t),UFo=i(x),a_=n(x,"LI",{});var n9e=s(a_);Gde=n(n9e,"STRONG",{});var Lft=s(Gde);JFo=r(Lft,"deberta-v2"),Lft.forEach(t),YFo=r(n9e," \u2014 "),Wq=n(n9e,"A",{href:!0});var yft=s(Wq);KFo=r(yft,"DebertaV2Model"),yft.forEach(t),ZFo=r(n9e," (DeBERTa-v2 model)"),n9e.forEach(t),e6o=i(x),n_=n(x,"LI",{});var s9e=s(n_);Ode=n(s9e,"STRONG",{});var xft=s(Ode);o6o=r(xft,"decision_transformer"),xft.forEach(t),r6o=r(s9e," \u2014 "),Hq=n(s9e,"A",{href:!0});var $ft=s(Hq);t6o=r($ft,"DecisionTransformerModel"),$ft.forEach(t),a6o=r(s9e," (Decision Transformer model)"),s9e.forEach(t),n6o=i(x),s_=n(x,"LI",{});var l9e=s(s_);Vde=n(l9e,"STRONG",{});var kft=s(Vde);s6o=r(kft,"deit"),kft.forEach(t),l6o=r(l9e," \u2014 "),Uq=n(l9e,"A",{href:!0});var Sft=s(Uq);i6o=r(Sft,"DeiTModel"),Sft.forEach(t),d6o=r(l9e," (DeiT model)"),l9e.forEach(t),c6o=i(x),l_=n(x,"LI",{});var i9e=s(l_);Xde=n(i9e,"STRONG",{});var Rft=s(Xde);f6o=r(Rft,"detr"),Rft.forEach(t),m6o=r(i9e," \u2014 "),Jq=n(i9e,"A",{href:!0});var Pft=s(Jq);g6o=r(Pft,"DetrModel"),Pft.forEach(t),h6o=r(i9e," (DETR model)"),i9e.forEach(t),p6o=i(x),i_=n(x,"LI",{});var d9e=s(i_);zde=n(d9e,"STRONG",{});var Bft=s(zde);_6o=r(Bft,"distilbert"),Bft.forEach(t),u6o=r(d9e," \u2014 "),Yq=n(d9e,"A",{href:!0});var Ift=s(Yq);b6o=r(Ift,"DistilBertModel"),Ift.forEach(t),v6o=r(d9e," (DistilBERT model)"),d9e.forEach(t),F6o=i(x),d_=n(x,"LI",{});var c9e=s(d_);Qde=n(c9e,"STRONG",{});var Nft=s(Qde);T6o=r(Nft,"dpr"),Nft.forEach(t),M6o=r(c9e," \u2014 "),Kq=n(c9e,"A",{href:!0});var qft=s(Kq);E6o=r(qft,"DPRQuestionEncoder"),qft.forEach(t),C6o=r(c9e," (DPR model)"),c9e.forEach(t),w6o=i(x),c_=n(x,"LI",{});var f9e=s(c_);Wde=n(f9e,"STRONG",{});var jft=s(Wde);A6o=r(jft,"dpt"),jft.forEach(t),L6o=r(f9e," \u2014 "),Zq=n(f9e,"A",{href:!0});var Dft=s(Zq);y6o=r(Dft,"DPTModel"),Dft.forEach(t),x6o=r(f9e," (DPT model)"),f9e.forEach(t),$6o=i(x),f_=n(x,"LI",{});var m9e=s(f_);Hde=n(m9e,"STRONG",{});var Gft=s(Hde);k6o=r(Gft,"electra"),Gft.forEach(t),S6o=r(m9e," \u2014 "),ej=n(m9e,"A",{href:!0});var Oft=s(ej);R6o=r(Oft,"ElectraModel"),Oft.forEach(t),P6o=r(m9e," (ELECTRA model)"),m9e.forEach(t),B6o=i(x),m_=n(x,"LI",{});var g9e=s(m_);Ude=n(g9e,"STRONG",{});var Vft=s(Ude);I6o=r(Vft,"flaubert"),Vft.forEach(t),N6o=r(g9e," \u2014 "),oj=n(g9e,"A",{href:!0});var Xft=s(oj);q6o=r(Xft,"FlaubertModel"),Xft.forEach(t),j6o=r(g9e," (FlauBERT model)"),g9e.forEach(t),D6o=i(x),g_=n(x,"LI",{});var h9e=s(g_);Jde=n(h9e,"STRONG",{});var zft=s(Jde);G6o=r(zft,"flava"),zft.forEach(t),O6o=r(h9e," \u2014 "),rj=n(h9e,"A",{href:!0});var Qft=s(rj);V6o=r(Qft,"FlavaModel"),Qft.forEach(t),X6o=r(h9e," (FLAVA model)"),h9e.forEach(t),z6o=i(x),h_=n(x,"LI",{});var p9e=s(h_);Yde=n(p9e,"STRONG",{});var Wft=s(Yde);Q6o=r(Wft,"fnet"),Wft.forEach(t),W6o=r(p9e," \u2014 "),tj=n(p9e,"A",{href:!0});var Hft=s(tj);H6o=r(Hft,"FNetModel"),Hft.forEach(t),U6o=r(p9e," (FNet model)"),p9e.forEach(t),J6o=i(x),p_=n(x,"LI",{});var _9e=s(p_);Kde=n(_9e,"STRONG",{});var Uft=s(Kde);Y6o=r(Uft,"fsmt"),Uft.forEach(t),K6o=r(_9e," \u2014 "),aj=n(_9e,"A",{href:!0});var Jft=s(aj);Z6o=r(Jft,"FSMTModel"),Jft.forEach(t),eTo=r(_9e," (FairSeq Machine-Translation model)"),_9e.forEach(t),oTo=i(x),Qs=n(x,"LI",{});var fS=s(Qs);Zde=n(fS,"STRONG",{});var Yft=s(Zde);rTo=r(Yft,"funnel"),Yft.forEach(t),tTo=r(fS," \u2014 "),nj=n(fS,"A",{href:!0});var Kft=s(nj);aTo=r(Kft,"FunnelModel"),Kft.forEach(t),nTo=r(fS," or "),sj=n(fS,"A",{href:!0});var Zft=s(sj);sTo=r(Zft,"FunnelBaseModel"),Zft.forEach(t),lTo=r(fS," (Funnel Transformer model)"),fS.forEach(t),iTo=i(x),__=n(x,"LI",{});var u9e=s(__);ece=n(u9e,"STRONG",{});var emt=s(ece);dTo=r(emt,"glpn"),emt.forEach(t),cTo=r(u9e," \u2014 "),lj=n(u9e,"A",{href:!0});var omt=s(lj);fTo=r(omt,"GLPNModel"),omt.forEach(t),mTo=r(u9e," (GLPN model)"),u9e.forEach(t),gTo=i(x),u_=n(x,"LI",{});var b9e=s(u_);oce=n(b9e,"STRONG",{});var rmt=s(oce);hTo=r(rmt,"gpt2"),rmt.forEach(t),pTo=r(b9e," \u2014 "),ij=n(b9e,"A",{href:!0});var tmt=s(ij);_To=r(tmt,"GPT2Model"),tmt.forEach(t),uTo=r(b9e," (OpenAI GPT-2 model)"),b9e.forEach(t),bTo=i(x),b_=n(x,"LI",{});var v9e=s(b_);rce=n(v9e,"STRONG",{});var amt=s(rce);vTo=r(amt,"gpt_neo"),amt.forEach(t),FTo=r(v9e," \u2014 "),dj=n(v9e,"A",{href:!0});var nmt=s(dj);TTo=r(nmt,"GPTNeoModel"),nmt.forEach(t),MTo=r(v9e," (GPT Neo model)"),v9e.forEach(t),ETo=i(x),v_=n(x,"LI",{});var F9e=s(v_);tce=n(F9e,"STRONG",{});var smt=s(tce);CTo=r(smt,"gpt_neox"),smt.forEach(t),wTo=r(F9e," \u2014 "),cj=n(F9e,"A",{href:!0});var lmt=s(cj);ATo=r(lmt,"GPTNeoXModel"),lmt.forEach(t),LTo=r(F9e," (GPT NeoX model)"),F9e.forEach(t),yTo=i(x),F_=n(x,"LI",{});var T9e=s(F_);ace=n(T9e,"STRONG",{});var imt=s(ace);xTo=r(imt,"gptj"),imt.forEach(t),$To=r(T9e," \u2014 "),fj=n(T9e,"A",{href:!0});var dmt=s(fj);kTo=r(dmt,"GPTJModel"),dmt.forEach(t),STo=r(T9e," (GPT-J model)"),T9e.forEach(t),RTo=i(x),T_=n(x,"LI",{});var M9e=s(T_);nce=n(M9e,"STRONG",{});var cmt=s(nce);PTo=r(cmt,"groupvit"),cmt.forEach(t),BTo=r(M9e," \u2014 "),mj=n(M9e,"A",{href:!0});var fmt=s(mj);ITo=r(fmt,"GroupViTModel"),fmt.forEach(t),NTo=r(M9e," (GroupViT model)"),M9e.forEach(t),qTo=i(x),M_=n(x,"LI",{});var E9e=s(M_);sce=n(E9e,"STRONG",{});var mmt=s(sce);jTo=r(mmt,"hubert"),mmt.forEach(t),DTo=r(E9e," \u2014 "),gj=n(E9e,"A",{href:!0});var gmt=s(gj);GTo=r(gmt,"HubertModel"),gmt.forEach(t),OTo=r(E9e," (Hubert model)"),E9e.forEach(t),VTo=i(x),E_=n(x,"LI",{});var C9e=s(E_);lce=n(C9e,"STRONG",{});var hmt=s(lce);XTo=r(hmt,"ibert"),hmt.forEach(t),zTo=r(C9e," \u2014 "),hj=n(C9e,"A",{href:!0});var pmt=s(hj);QTo=r(pmt,"IBertModel"),pmt.forEach(t),WTo=r(C9e," (I-BERT model)"),C9e.forEach(t),HTo=i(x),C_=n(x,"LI",{});var w9e=s(C_);ice=n(w9e,"STRONG",{});var _mt=s(ice);UTo=r(_mt,"imagegpt"),_mt.forEach(t),JTo=r(w9e," \u2014 "),pj=n(w9e,"A",{href:!0});var umt=s(pj);YTo=r(umt,"ImageGPTModel"),umt.forEach(t),KTo=r(w9e," (ImageGPT model)"),w9e.forEach(t),ZTo=i(x),w_=n(x,"LI",{});var A9e=s(w_);dce=n(A9e,"STRONG",{});var bmt=s(dce);eMo=r(bmt,"layoutlm"),bmt.forEach(t),oMo=r(A9e," \u2014 "),_j=n(A9e,"A",{href:!0});var vmt=s(_j);rMo=r(vmt,"LayoutLMModel"),vmt.forEach(t),tMo=r(A9e," (LayoutLM model)"),A9e.forEach(t),aMo=i(x),A_=n(x,"LI",{});var L9e=s(A_);cce=n(L9e,"STRONG",{});var Fmt=s(cce);nMo=r(Fmt,"layoutlmv2"),Fmt.forEach(t),sMo=r(L9e," \u2014 "),uj=n(L9e,"A",{href:!0});var Tmt=s(uj);lMo=r(Tmt,"LayoutLMv2Model"),Tmt.forEach(t),iMo=r(L9e," (LayoutLMv2 model)"),L9e.forEach(t),dMo=i(x),L_=n(x,"LI",{});var y9e=s(L_);fce=n(y9e,"STRONG",{});var Mmt=s(fce);cMo=r(Mmt,"layoutlmv3"),Mmt.forEach(t),fMo=r(y9e," \u2014 "),bj=n(y9e,"A",{href:!0});var Emt=s(bj);mMo=r(Emt,"LayoutLMv3Model"),Emt.forEach(t),gMo=r(y9e," (LayoutLMv3 model)"),y9e.forEach(t),hMo=i(x),y_=n(x,"LI",{});var x9e=s(y_);mce=n(x9e,"STRONG",{});var Cmt=s(mce);pMo=r(Cmt,"led"),Cmt.forEach(t),_Mo=r(x9e," \u2014 "),vj=n(x9e,"A",{href:!0});var wmt=s(vj);uMo=r(wmt,"LEDModel"),wmt.forEach(t),bMo=r(x9e," (LED model)"),x9e.forEach(t),vMo=i(x),x_=n(x,"LI",{});var $9e=s(x_);gce=n($9e,"STRONG",{});var Amt=s(gce);FMo=r(Amt,"levit"),Amt.forEach(t),TMo=r($9e," \u2014 "),Fj=n($9e,"A",{href:!0});var Lmt=s(Fj);MMo=r(Lmt,"LevitModel"),Lmt.forEach(t),EMo=r($9e," (LeViT model)"),$9e.forEach(t),CMo=i(x),$_=n(x,"LI",{});var k9e=s($_);hce=n(k9e,"STRONG",{});var ymt=s(hce);wMo=r(ymt,"longformer"),ymt.forEach(t),AMo=r(k9e," \u2014 "),Tj=n(k9e,"A",{href:!0});var xmt=s(Tj);LMo=r(xmt,"LongformerModel"),xmt.forEach(t),yMo=r(k9e," (Longformer model)"),k9e.forEach(t),xMo=i(x),k_=n(x,"LI",{});var S9e=s(k_);pce=n(S9e,"STRONG",{});var $mt=s(pce);$Mo=r($mt,"longt5"),$mt.forEach(t),kMo=r(S9e," \u2014 "),Mj=n(S9e,"A",{href:!0});var kmt=s(Mj);SMo=r(kmt,"LongT5Model"),kmt.forEach(t),RMo=r(S9e," (LongT5 model)"),S9e.forEach(t),PMo=i(x),S_=n(x,"LI",{});var R9e=s(S_);_ce=n(R9e,"STRONG",{});var Smt=s(_ce);BMo=r(Smt,"luke"),Smt.forEach(t),IMo=r(R9e," \u2014 "),Ej=n(R9e,"A",{href:!0});var Rmt=s(Ej);NMo=r(Rmt,"LukeModel"),Rmt.forEach(t),qMo=r(R9e," (LUKE model)"),R9e.forEach(t),jMo=i(x),R_=n(x,"LI",{});var P9e=s(R_);uce=n(P9e,"STRONG",{});var Pmt=s(uce);DMo=r(Pmt,"lxmert"),Pmt.forEach(t),GMo=r(P9e," \u2014 "),Cj=n(P9e,"A",{href:!0});var Bmt=s(Cj);OMo=r(Bmt,"LxmertModel"),Bmt.forEach(t),VMo=r(P9e," (LXMERT model)"),P9e.forEach(t),XMo=i(x),P_=n(x,"LI",{});var B9e=s(P_);bce=n(B9e,"STRONG",{});var Imt=s(bce);zMo=r(Imt,"m2m_100"),Imt.forEach(t),QMo=r(B9e," \u2014 "),wj=n(B9e,"A",{href:!0});var Nmt=s(wj);WMo=r(Nmt,"M2M100Model"),Nmt.forEach(t),HMo=r(B9e," (M2M100 model)"),B9e.forEach(t),UMo=i(x),B_=n(x,"LI",{});var I9e=s(B_);vce=n(I9e,"STRONG",{});var qmt=s(vce);JMo=r(qmt,"marian"),qmt.forEach(t),YMo=r(I9e," \u2014 "),Aj=n(I9e,"A",{href:!0});var jmt=s(Aj);KMo=r(jmt,"MarianModel"),jmt.forEach(t),ZMo=r(I9e," (Marian model)"),I9e.forEach(t),e4o=i(x),I_=n(x,"LI",{});var N9e=s(I_);Fce=n(N9e,"STRONG",{});var Dmt=s(Fce);o4o=r(Dmt,"maskformer"),Dmt.forEach(t),r4o=r(N9e," \u2014 "),Lj=n(N9e,"A",{href:!0});var Gmt=s(Lj);t4o=r(Gmt,"MaskFormerModel"),Gmt.forEach(t),a4o=r(N9e," (MaskFormer model)"),N9e.forEach(t),n4o=i(x),N_=n(x,"LI",{});var q9e=s(N_);Tce=n(q9e,"STRONG",{});var Omt=s(Tce);s4o=r(Omt,"mbart"),Omt.forEach(t),l4o=r(q9e," \u2014 "),yj=n(q9e,"A",{href:!0});var Vmt=s(yj);i4o=r(Vmt,"MBartModel"),Vmt.forEach(t),d4o=r(q9e," (mBART model)"),q9e.forEach(t),c4o=i(x),q_=n(x,"LI",{});var j9e=s(q_);Mce=n(j9e,"STRONG",{});var Xmt=s(Mce);f4o=r(Xmt,"mctct"),Xmt.forEach(t),m4o=r(j9e," \u2014 "),xj=n(j9e,"A",{href:!0});var zmt=s(xj);g4o=r(zmt,"MCTCTModel"),zmt.forEach(t),h4o=r(j9e," (M-CTC-T model)"),j9e.forEach(t),p4o=i(x),j_=n(x,"LI",{});var D9e=s(j_);Ece=n(D9e,"STRONG",{});var Qmt=s(Ece);_4o=r(Qmt,"megatron-bert"),Qmt.forEach(t),u4o=r(D9e," \u2014 "),$j=n(D9e,"A",{href:!0});var Wmt=s($j);b4o=r(Wmt,"MegatronBertModel"),Wmt.forEach(t),v4o=r(D9e," (Megatron-BERT model)"),D9e.forEach(t),F4o=i(x),D_=n(x,"LI",{});var G9e=s(D_);Cce=n(G9e,"STRONG",{});var Hmt=s(Cce);T4o=r(Hmt,"mobilebert"),Hmt.forEach(t),M4o=r(G9e," \u2014 "),kj=n(G9e,"A",{href:!0});var Umt=s(kj);E4o=r(Umt,"MobileBertModel"),Umt.forEach(t),C4o=r(G9e," (MobileBERT model)"),G9e.forEach(t),w4o=i(x),G_=n(x,"LI",{});var O9e=s(G_);wce=n(O9e,"STRONG",{});var Jmt=s(wce);A4o=r(Jmt,"mpnet"),Jmt.forEach(t),L4o=r(O9e," \u2014 "),Sj=n(O9e,"A",{href:!0});var Ymt=s(Sj);y4o=r(Ymt,"MPNetModel"),Ymt.forEach(t),x4o=r(O9e," (MPNet model)"),O9e.forEach(t),$4o=i(x),O_=n(x,"LI",{});var V9e=s(O_);Ace=n(V9e,"STRONG",{});var Kmt=s(Ace);k4o=r(Kmt,"mt5"),Kmt.forEach(t),S4o=r(V9e," \u2014 "),Rj=n(V9e,"A",{href:!0});var Zmt=s(Rj);R4o=r(Zmt,"MT5Model"),Zmt.forEach(t),P4o=r(V9e," (MT5 model)"),V9e.forEach(t),B4o=i(x),V_=n(x,"LI",{});var X9e=s(V_);Lce=n(X9e,"STRONG",{});var egt=s(Lce);I4o=r(egt,"nezha"),egt.forEach(t),N4o=r(X9e," \u2014 "),Pj=n(X9e,"A",{href:!0});var ogt=s(Pj);q4o=r(ogt,"NezhaModel"),ogt.forEach(t),j4o=r(X9e," (Nezha model)"),X9e.forEach(t),D4o=i(x),X_=n(x,"LI",{});var z9e=s(X_);yce=n(z9e,"STRONG",{});var rgt=s(yce);G4o=r(rgt,"nystromformer"),rgt.forEach(t),O4o=r(z9e," \u2014 "),Bj=n(z9e,"A",{href:!0});var tgt=s(Bj);V4o=r(tgt,"NystromformerModel"),tgt.forEach(t),X4o=r(z9e," (Nystr\xF6mformer model)"),z9e.forEach(t),z4o=i(x),z_=n(x,"LI",{});var Q9e=s(z_);xce=n(Q9e,"STRONG",{});var agt=s(xce);Q4o=r(agt,"openai-gpt"),agt.forEach(t),W4o=r(Q9e," \u2014 "),Ij=n(Q9e,"A",{href:!0});var ngt=s(Ij);H4o=r(ngt,"OpenAIGPTModel"),ngt.forEach(t),U4o=r(Q9e," (OpenAI GPT model)"),Q9e.forEach(t),J4o=i(x),Q_=n(x,"LI",{});var W9e=s(Q_);$ce=n(W9e,"STRONG",{});var sgt=s($ce);Y4o=r(sgt,"opt"),sgt.forEach(t),K4o=r(W9e," \u2014 "),Nj=n(W9e,"A",{href:!0});var lgt=s(Nj);Z4o=r(lgt,"OPTModel"),lgt.forEach(t),eEo=r(W9e," (OPT model)"),W9e.forEach(t),oEo=i(x),W_=n(x,"LI",{});var H9e=s(W_);kce=n(H9e,"STRONG",{});var igt=s(kce);rEo=r(igt,"pegasus"),igt.forEach(t),tEo=r(H9e," \u2014 "),qj=n(H9e,"A",{href:!0});var dgt=s(qj);aEo=r(dgt,"PegasusModel"),dgt.forEach(t),nEo=r(H9e," (Pegasus model)"),H9e.forEach(t),sEo=i(x),H_=n(x,"LI",{});var U9e=s(H_);Sce=n(U9e,"STRONG",{});var cgt=s(Sce);lEo=r(cgt,"perceiver"),cgt.forEach(t),iEo=r(U9e," \u2014 "),jj=n(U9e,"A",{href:!0});var fgt=s(jj);dEo=r(fgt,"PerceiverModel"),fgt.forEach(t),cEo=r(U9e," (Perceiver model)"),U9e.forEach(t),fEo=i(x),U_=n(x,"LI",{});var J9e=s(U_);Rce=n(J9e,"STRONG",{});var mgt=s(Rce);mEo=r(mgt,"plbart"),mgt.forEach(t),gEo=r(J9e," \u2014 "),Dj=n(J9e,"A",{href:!0});var ggt=s(Dj);hEo=r(ggt,"PLBartModel"),ggt.forEach(t),pEo=r(J9e," (PLBart model)"),J9e.forEach(t),_Eo=i(x),J_=n(x,"LI",{});var Y9e=s(J_);Pce=n(Y9e,"STRONG",{});var hgt=s(Pce);uEo=r(hgt,"poolformer"),hgt.forEach(t),bEo=r(Y9e," \u2014 "),Gj=n(Y9e,"A",{href:!0});var pgt=s(Gj);vEo=r(pgt,"PoolFormerModel"),pgt.forEach(t),FEo=r(Y9e," (PoolFormer model)"),Y9e.forEach(t),TEo=i(x),Y_=n(x,"LI",{});var K9e=s(Y_);Bce=n(K9e,"STRONG",{});var _gt=s(Bce);MEo=r(_gt,"prophetnet"),_gt.forEach(t),EEo=r(K9e," \u2014 "),Oj=n(K9e,"A",{href:!0});var ugt=s(Oj);CEo=r(ugt,"ProphetNetModel"),ugt.forEach(t),wEo=r(K9e," (ProphetNet model)"),K9e.forEach(t),AEo=i(x),K_=n(x,"LI",{});var Z9e=s(K_);Ice=n(Z9e,"STRONG",{});var bgt=s(Ice);LEo=r(bgt,"qdqbert"),bgt.forEach(t),yEo=r(Z9e," \u2014 "),Vj=n(Z9e,"A",{href:!0});var vgt=s(Vj);xEo=r(vgt,"QDQBertModel"),vgt.forEach(t),$Eo=r(Z9e," (QDQBert model)"),Z9e.forEach(t),kEo=i(x),Z_=n(x,"LI",{});var exe=s(Z_);Nce=n(exe,"STRONG",{});var Fgt=s(Nce);SEo=r(Fgt,"reformer"),Fgt.forEach(t),REo=r(exe," \u2014 "),Xj=n(exe,"A",{href:!0});var Tgt=s(Xj);PEo=r(Tgt,"ReformerModel"),Tgt.forEach(t),BEo=r(exe," (Reformer model)"),exe.forEach(t),IEo=i(x),eu=n(x,"LI",{});var oxe=s(eu);qce=n(oxe,"STRONG",{});var Mgt=s(qce);NEo=r(Mgt,"regnet"),Mgt.forEach(t),qEo=r(oxe," \u2014 "),zj=n(oxe,"A",{href:!0});var Egt=s(zj);jEo=r(Egt,"RegNetModel"),Egt.forEach(t),DEo=r(oxe," (RegNet model)"),oxe.forEach(t),GEo=i(x),ou=n(x,"LI",{});var rxe=s(ou);jce=n(rxe,"STRONG",{});var Cgt=s(jce);OEo=r(Cgt,"rembert"),Cgt.forEach(t),VEo=r(rxe," \u2014 "),Qj=n(rxe,"A",{href:!0});var wgt=s(Qj);XEo=r(wgt,"RemBertModel"),wgt.forEach(t),zEo=r(rxe," (RemBERT model)"),rxe.forEach(t),QEo=i(x),ru=n(x,"LI",{});var txe=s(ru);Dce=n(txe,"STRONG",{});var Agt=s(Dce);WEo=r(Agt,"resnet"),Agt.forEach(t),HEo=r(txe," \u2014 "),Wj=n(txe,"A",{href:!0});var Lgt=s(Wj);UEo=r(Lgt,"ResNetModel"),Lgt.forEach(t),JEo=r(txe," (ResNet model)"),txe.forEach(t),YEo=i(x),tu=n(x,"LI",{});var axe=s(tu);Gce=n(axe,"STRONG",{});var ygt=s(Gce);KEo=r(ygt,"retribert"),ygt.forEach(t),ZEo=r(axe," \u2014 "),Hj=n(axe,"A",{href:!0});var xgt=s(Hj);eCo=r(xgt,"RetriBertModel"),xgt.forEach(t),oCo=r(axe," (RetriBERT model)"),axe.forEach(t),rCo=i(x),au=n(x,"LI",{});var nxe=s(au);Oce=n(nxe,"STRONG",{});var $gt=s(Oce);tCo=r($gt,"roberta"),$gt.forEach(t),aCo=r(nxe," \u2014 "),Uj=n(nxe,"A",{href:!0});var kgt=s(Uj);nCo=r(kgt,"RobertaModel"),kgt.forEach(t),sCo=r(nxe," (RoBERTa model)"),nxe.forEach(t),lCo=i(x),nu=n(x,"LI",{});var sxe=s(nu);Vce=n(sxe,"STRONG",{});var Sgt=s(Vce);iCo=r(Sgt,"roformer"),Sgt.forEach(t),dCo=r(sxe," \u2014 "),Jj=n(sxe,"A",{href:!0});var Rgt=s(Jj);cCo=r(Rgt,"RoFormerModel"),Rgt.forEach(t),fCo=r(sxe," (RoFormer model)"),sxe.forEach(t),mCo=i(x),su=n(x,"LI",{});var lxe=s(su);Xce=n(lxe,"STRONG",{});var Pgt=s(Xce);gCo=r(Pgt,"segformer"),Pgt.forEach(t),hCo=r(lxe," \u2014 "),Yj=n(lxe,"A",{href:!0});var Bgt=s(Yj);pCo=r(Bgt,"SegformerModel"),Bgt.forEach(t),_Co=r(lxe," (SegFormer model)"),lxe.forEach(t),uCo=i(x),lu=n(x,"LI",{});var ixe=s(lu);zce=n(ixe,"STRONG",{});var Igt=s(zce);bCo=r(Igt,"sew"),Igt.forEach(t),vCo=r(ixe," \u2014 "),Kj=n(ixe,"A",{href:!0});var Ngt=s(Kj);FCo=r(Ngt,"SEWModel"),Ngt.forEach(t),TCo=r(ixe," (SEW model)"),ixe.forEach(t),MCo=i(x),iu=n(x,"LI",{});var dxe=s(iu);Qce=n(dxe,"STRONG",{});var qgt=s(Qce);ECo=r(qgt,"sew-d"),qgt.forEach(t),CCo=r(dxe," \u2014 "),Zj=n(dxe,"A",{href:!0});var jgt=s(Zj);wCo=r(jgt,"SEWDModel"),jgt.forEach(t),ACo=r(dxe," (SEW-D model)"),dxe.forEach(t),LCo=i(x),du=n(x,"LI",{});var cxe=s(du);Wce=n(cxe,"STRONG",{});var Dgt=s(Wce);yCo=r(Dgt,"speech_to_text"),Dgt.forEach(t),xCo=r(cxe," \u2014 "),eD=n(cxe,"A",{href:!0});var Ggt=s(eD);$Co=r(Ggt,"Speech2TextModel"),Ggt.forEach(t),kCo=r(cxe," (Speech2Text model)"),cxe.forEach(t),SCo=i(x),cu=n(x,"LI",{});var fxe=s(cu);Hce=n(fxe,"STRONG",{});var Ogt=s(Hce);RCo=r(Ogt,"splinter"),Ogt.forEach(t),PCo=r(fxe," \u2014 "),oD=n(fxe,"A",{href:!0});var Vgt=s(oD);BCo=r(Vgt,"SplinterModel"),Vgt.forEach(t),ICo=r(fxe," (Splinter model)"),fxe.forEach(t),NCo=i(x),fu=n(x,"LI",{});var mxe=s(fu);Uce=n(mxe,"STRONG",{});var Xgt=s(Uce);qCo=r(Xgt,"squeezebert"),Xgt.forEach(t),jCo=r(mxe," \u2014 "),rD=n(mxe,"A",{href:!0});var zgt=s(rD);DCo=r(zgt,"SqueezeBertModel"),zgt.forEach(t),GCo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),OCo=i(x),mu=n(x,"LI",{});var gxe=s(mu);Jce=n(gxe,"STRONG",{});var Qgt=s(Jce);VCo=r(Qgt,"swin"),Qgt.forEach(t),XCo=r(gxe," \u2014 "),tD=n(gxe,"A",{href:!0});var Wgt=s(tD);zCo=r(Wgt,"SwinModel"),Wgt.forEach(t),QCo=r(gxe," (Swin Transformer model)"),gxe.forEach(t),WCo=i(x),gu=n(x,"LI",{});var hxe=s(gu);Yce=n(hxe,"STRONG",{});var Hgt=s(Yce);HCo=r(Hgt,"t5"),Hgt.forEach(t),UCo=r(hxe," \u2014 "),aD=n(hxe,"A",{href:!0});var Ugt=s(aD);JCo=r(Ugt,"T5Model"),Ugt.forEach(t),YCo=r(hxe," (T5 model)"),hxe.forEach(t),KCo=i(x),hu=n(x,"LI",{});var pxe=s(hu);Kce=n(pxe,"STRONG",{});var Jgt=s(Kce);ZCo=r(Jgt,"tapas"),Jgt.forEach(t),e5o=r(pxe," \u2014 "),nD=n(pxe,"A",{href:!0});var Ygt=s(nD);o5o=r(Ygt,"TapasModel"),Ygt.forEach(t),r5o=r(pxe," (TAPAS model)"),pxe.forEach(t),t5o=i(x),pu=n(x,"LI",{});var _xe=s(pu);Zce=n(_xe,"STRONG",{});var Kgt=s(Zce);a5o=r(Kgt,"trajectory_transformer"),Kgt.forEach(t),n5o=r(_xe," \u2014 "),sD=n(_xe,"A",{href:!0});var Zgt=s(sD);s5o=r(Zgt,"TrajectoryTransformerModel"),Zgt.forEach(t),l5o=r(_xe," (Trajectory Transformer model)"),_xe.forEach(t),i5o=i(x),_u=n(x,"LI",{});var uxe=s(_u);efe=n(uxe,"STRONG",{});var eht=s(efe);d5o=r(eht,"transfo-xl"),eht.forEach(t),c5o=r(uxe," \u2014 "),lD=n(uxe,"A",{href:!0});var oht=s(lD);f5o=r(oht,"TransfoXLModel"),oht.forEach(t),m5o=r(uxe," (Transformer-XL model)"),uxe.forEach(t),g5o=i(x),uu=n(x,"LI",{});var bxe=s(uu);ofe=n(bxe,"STRONG",{});var rht=s(ofe);h5o=r(rht,"unispeech"),rht.forEach(t),p5o=r(bxe," \u2014 "),iD=n(bxe,"A",{href:!0});var tht=s(iD);_5o=r(tht,"UniSpeechModel"),tht.forEach(t),u5o=r(bxe," (UniSpeech model)"),bxe.forEach(t),b5o=i(x),bu=n(x,"LI",{});var vxe=s(bu);rfe=n(vxe,"STRONG",{});var aht=s(rfe);v5o=r(aht,"unispeech-sat"),aht.forEach(t),F5o=r(vxe," \u2014 "),dD=n(vxe,"A",{href:!0});var nht=s(dD);T5o=r(nht,"UniSpeechSatModel"),nht.forEach(t),M5o=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),E5o=i(x),vu=n(x,"LI",{});var Fxe=s(vu);tfe=n(Fxe,"STRONG",{});var sht=s(tfe);C5o=r(sht,"van"),sht.forEach(t),w5o=r(Fxe," \u2014 "),cD=n(Fxe,"A",{href:!0});var lht=s(cD);A5o=r(lht,"VanModel"),lht.forEach(t),L5o=r(Fxe," (VAN model)"),Fxe.forEach(t),y5o=i(x),Fu=n(x,"LI",{});var Txe=s(Fu);afe=n(Txe,"STRONG",{});var iht=s(afe);x5o=r(iht,"vilt"),iht.forEach(t),$5o=r(Txe," \u2014 "),fD=n(Txe,"A",{href:!0});var dht=s(fD);k5o=r(dht,"ViltModel"),dht.forEach(t),S5o=r(Txe," (ViLT model)"),Txe.forEach(t),R5o=i(x),Tu=n(x,"LI",{});var Mxe=s(Tu);nfe=n(Mxe,"STRONG",{});var cht=s(nfe);P5o=r(cht,"vision-text-dual-encoder"),cht.forEach(t),B5o=r(Mxe," \u2014 "),mD=n(Mxe,"A",{href:!0});var fht=s(mD);I5o=r(fht,"VisionTextDualEncoderModel"),fht.forEach(t),N5o=r(Mxe," (VisionTextDualEncoder model)"),Mxe.forEach(t),q5o=i(x),Mu=n(x,"LI",{});var Exe=s(Mu);sfe=n(Exe,"STRONG",{});var mht=s(sfe);j5o=r(mht,"visual_bert"),mht.forEach(t),D5o=r(Exe," \u2014 "),gD=n(Exe,"A",{href:!0});var ght=s(gD);G5o=r(ght,"VisualBertModel"),ght.forEach(t),O5o=r(Exe," (VisualBERT model)"),Exe.forEach(t),V5o=i(x),Eu=n(x,"LI",{});var Cxe=s(Eu);lfe=n(Cxe,"STRONG",{});var hht=s(lfe);X5o=r(hht,"vit"),hht.forEach(t),z5o=r(Cxe," \u2014 "),hD=n(Cxe,"A",{href:!0});var pht=s(hD);Q5o=r(pht,"ViTModel"),pht.forEach(t),W5o=r(Cxe," (ViT model)"),Cxe.forEach(t),H5o=i(x),Cu=n(x,"LI",{});var wxe=s(Cu);ife=n(wxe,"STRONG",{});var _ht=s(ife);U5o=r(_ht,"vit_mae"),_ht.forEach(t),J5o=r(wxe," \u2014 "),pD=n(wxe,"A",{href:!0});var uht=s(pD);Y5o=r(uht,"ViTMAEModel"),uht.forEach(t),K5o=r(wxe," (ViTMAE model)"),wxe.forEach(t),Z5o=i(x),wu=n(x,"LI",{});var Axe=s(wu);dfe=n(Axe,"STRONG",{});var bht=s(dfe);e3o=r(bht,"wav2vec2"),bht.forEach(t),o3o=r(Axe," \u2014 "),_D=n(Axe,"A",{href:!0});var vht=s(_D);r3o=r(vht,"Wav2Vec2Model"),vht.forEach(t),t3o=r(Axe," (Wav2Vec2 model)"),Axe.forEach(t),a3o=i(x),Au=n(x,"LI",{});var Lxe=s(Au);cfe=n(Lxe,"STRONG",{});var Fht=s(cfe);n3o=r(Fht,"wav2vec2-conformer"),Fht.forEach(t),s3o=r(Lxe," \u2014 "),uD=n(Lxe,"A",{href:!0});var Tht=s(uD);l3o=r(Tht,"Wav2Vec2ConformerModel"),Tht.forEach(t),i3o=r(Lxe," (Wav2Vec2-Conformer model)"),Lxe.forEach(t),d3o=i(x),Lu=n(x,"LI",{});var yxe=s(Lu);ffe=n(yxe,"STRONG",{});var Mht=s(ffe);c3o=r(Mht,"wavlm"),Mht.forEach(t),f3o=r(yxe," \u2014 "),bD=n(yxe,"A",{href:!0});var Eht=s(bD);m3o=r(Eht,"WavLMModel"),Eht.forEach(t),g3o=r(yxe," (WavLM model)"),yxe.forEach(t),h3o=i(x),yu=n(x,"LI",{});var xxe=s(yu);mfe=n(xxe,"STRONG",{});var Cht=s(mfe);p3o=r(Cht,"xglm"),Cht.forEach(t),_3o=r(xxe," \u2014 "),vD=n(xxe,"A",{href:!0});var wht=s(vD);u3o=r(wht,"XGLMModel"),wht.forEach(t),b3o=r(xxe," (XGLM model)"),xxe.forEach(t),v3o=i(x),xu=n(x,"LI",{});var $xe=s(xu);gfe=n($xe,"STRONG",{});var Aht=s(gfe);F3o=r(Aht,"xlm"),Aht.forEach(t),T3o=r($xe," \u2014 "),FD=n($xe,"A",{href:!0});var Lht=s(FD);M3o=r(Lht,"XLMModel"),Lht.forEach(t),E3o=r($xe," (XLM model)"),$xe.forEach(t),C3o=i(x),$u=n(x,"LI",{});var kxe=s($u);hfe=n(kxe,"STRONG",{});var yht=s(hfe);w3o=r(yht,"xlm-prophetnet"),yht.forEach(t),A3o=r(kxe," \u2014 "),TD=n(kxe,"A",{href:!0});var xht=s(TD);L3o=r(xht,"XLMProphetNetModel"),xht.forEach(t),y3o=r(kxe," (XLM-ProphetNet model)"),kxe.forEach(t),x3o=i(x),ku=n(x,"LI",{});var Sxe=s(ku);pfe=n(Sxe,"STRONG",{});var $ht=s(pfe);$3o=r($ht,"xlm-roberta"),$ht.forEach(t),k3o=r(Sxe," \u2014 "),MD=n(Sxe,"A",{href:!0});var kht=s(MD);S3o=r(kht,"XLMRobertaModel"),kht.forEach(t),R3o=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),P3o=i(x),Su=n(x,"LI",{});var Rxe=s(Su);_fe=n(Rxe,"STRONG",{});var Sht=s(_fe);B3o=r(Sht,"xlm-roberta-xl"),Sht.forEach(t),I3o=r(Rxe," \u2014 "),ED=n(Rxe,"A",{href:!0});var Rht=s(ED);N3o=r(Rht,"XLMRobertaXLModel"),Rht.forEach(t),q3o=r(Rxe," (XLM-RoBERTa-XL model)"),Rxe.forEach(t),j3o=i(x),Ru=n(x,"LI",{});var Pxe=s(Ru);ufe=n(Pxe,"STRONG",{});var Pht=s(ufe);D3o=r(Pht,"xlnet"),Pht.forEach(t),G3o=r(Pxe," \u2014 "),CD=n(Pxe,"A",{href:!0});var Bht=s(CD);O3o=r(Bht,"XLNetModel"),Bht.forEach(t),V3o=r(Pxe," (XLNet model)"),Pxe.forEach(t),X3o=i(x),Pu=n(x,"LI",{});var Bxe=s(Pu);bfe=n(Bxe,"STRONG",{});var Iht=s(bfe);z3o=r(Iht,"yolos"),Iht.forEach(t),Q3o=r(Bxe," \u2014 "),wD=n(Bxe,"A",{href:!0});var Nht=s(wD);W3o=r(Nht,"YolosModel"),Nht.forEach(t),H3o=r(Bxe," (YOLOS model)"),Bxe.forEach(t),U3o=i(x),Bu=n(x,"LI",{});var Ixe=s(Bu);vfe=n(Ixe,"STRONG",{});var qht=s(vfe);J3o=r(qht,"yoso"),qht.forEach(t),Y3o=r(Ixe," \u2014 "),AD=n(Ixe,"A",{href:!0});var jht=s(AD);K3o=r(jht,"YosoModel"),jht.forEach(t),Z3o=r(Ixe," (YOSO model)"),Ixe.forEach(t),x.forEach(t),e0o=i(aa),Iu=n(aa,"P",{});var Nxe=s(Iu);o0o=r(Nxe,"The model is set in evaluation mode by default using "),Ffe=n(Nxe,"CODE",{});var Dht=s(Ffe);r0o=r(Dht,"model.eval()"),Dht.forEach(t),t0o=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tfe=n(Nxe,"CODE",{});var Ght=s(Tfe);a0o=r(Ght,"model.train()"),Ght.forEach(t),Nxe.forEach(t),n0o=i(aa),T(Nu.$$.fragment,aa),aa.forEach(t),el.forEach(t),QOe=i(f),Di=n(f,"H2",{class:!0});var KXe=s(Di);qu=n(KXe,"A",{id:!0,class:!0,href:!0});var Oht=s(qu);Mfe=n(Oht,"SPAN",{});var Vht=s(Mfe);T(uy.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),s0o=i(KXe),Efe=n(KXe,"SPAN",{});var Xht=s(Efe);l0o=r(Xht,"AutoModelForPreTraining"),Xht.forEach(t),KXe.forEach(t),WOe=i(f),$o=n(f,"DIV",{class:!0});var ol=s($o);T(by.$$.fragment,ol),i0o=i(ol),Gi=n(ol,"P",{});var Woe=s(Gi);d0o=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=n(Woe,"A",{href:!0});var zht=s(LD);c0o=r(zht,"from_pretrained()"),zht.forEach(t),f0o=r(Woe," class method or the "),yD=n(Woe,"A",{href:!0});var Qht=s(yD);m0o=r(Qht,"from_config()"),Qht.forEach(t),g0o=r(Woe,` class
method.`),Woe.forEach(t),h0o=i(ol),vy=n(ol,"P",{});var ZXe=s(vy);p0o=r(ZXe,"This class cannot be instantiated directly using "),Cfe=n(ZXe,"CODE",{});var Wht=s(Cfe);_0o=r(Wht,"__init__()"),Wht.forEach(t),u0o=r(ZXe," (throws an error)."),ZXe.forEach(t),b0o=i(ol),st=n(ol,"DIV",{class:!0});var Xw=s(st);T(Fy.$$.fragment,Xw),v0o=i(Xw),wfe=n(Xw,"P",{});var Hht=s(wfe);F0o=r(Hht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hht.forEach(t),T0o=i(Xw),Oi=n(Xw,"P",{});var Hoe=s(Oi);M0o=r(Hoe,`Note:
Loading a model from its configuration file does `),Afe=n(Hoe,"STRONG",{});var Uht=s(Afe);E0o=r(Uht,"not"),Uht.forEach(t),C0o=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=n(Hoe,"A",{href:!0});var Jht=s(xD);w0o=r(Jht,"from_pretrained()"),Jht.forEach(t),A0o=r(Hoe," to load the model weights."),Hoe.forEach(t),L0o=i(Xw),T(ju.$$.fragment,Xw),Xw.forEach(t),y0o=i(ol),Ye=n(ol,"DIV",{class:!0});var na=s(Ye);T(Ty.$$.fragment,na),x0o=i(na),Lfe=n(na,"P",{});var Yht=s(Lfe);$0o=r(Yht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yht.forEach(t),k0o=i(na),Ba=n(na,"P",{});var zw=s(Ba);S0o=r(zw,"The model class to instantiate is selected based on the "),yfe=n(zw,"CODE",{});var Kht=s(yfe);R0o=r(Kht,"model_type"),Kht.forEach(t),P0o=r(zw,` property of the config object (either
passed as an argument or loaded from `),xfe=n(zw,"CODE",{});var Zht=s(xfe);B0o=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),I0o=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=n(zw,"CODE",{});var ept=s($fe);N0o=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),q0o=r(zw,":"),zw.forEach(t),j0o=i(na),G=n(na,"UL",{});var O=s(G);Du=n(O,"LI",{});var qxe=s(Du);kfe=n(qxe,"STRONG",{});var opt=s(kfe);D0o=r(opt,"albert"),opt.forEach(t),G0o=r(qxe," \u2014 "),$D=n(qxe,"A",{href:!0});var rpt=s($D);O0o=r(rpt,"AlbertForPreTraining"),rpt.forEach(t),V0o=r(qxe," (ALBERT model)"),qxe.forEach(t),X0o=i(O),Gu=n(O,"LI",{});var jxe=s(Gu);Sfe=n(jxe,"STRONG",{});var tpt=s(Sfe);z0o=r(tpt,"bart"),tpt.forEach(t),Q0o=r(jxe," \u2014 "),kD=n(jxe,"A",{href:!0});var apt=s(kD);W0o=r(apt,"BartForConditionalGeneration"),apt.forEach(t),H0o=r(jxe," (BART model)"),jxe.forEach(t),U0o=i(O),Ou=n(O,"LI",{});var Dxe=s(Ou);Rfe=n(Dxe,"STRONG",{});var npt=s(Rfe);J0o=r(npt,"bert"),npt.forEach(t),Y0o=r(Dxe," \u2014 "),SD=n(Dxe,"A",{href:!0});var spt=s(SD);K0o=r(spt,"BertForPreTraining"),spt.forEach(t),Z0o=r(Dxe," (BERT model)"),Dxe.forEach(t),ewo=i(O),Vu=n(O,"LI",{});var Gxe=s(Vu);Pfe=n(Gxe,"STRONG",{});var lpt=s(Pfe);owo=r(lpt,"big_bird"),lpt.forEach(t),rwo=r(Gxe," \u2014 "),RD=n(Gxe,"A",{href:!0});var ipt=s(RD);two=r(ipt,"BigBirdForPreTraining"),ipt.forEach(t),awo=r(Gxe," (BigBird model)"),Gxe.forEach(t),nwo=i(O),Xu=n(O,"LI",{});var Oxe=s(Xu);Bfe=n(Oxe,"STRONG",{});var dpt=s(Bfe);swo=r(dpt,"bloom"),dpt.forEach(t),lwo=r(Oxe," \u2014 "),PD=n(Oxe,"A",{href:!0});var cpt=s(PD);iwo=r(cpt,"BloomForCausalLM"),cpt.forEach(t),dwo=r(Oxe," (BLOOM model)"),Oxe.forEach(t),cwo=i(O),zu=n(O,"LI",{});var Vxe=s(zu);Ife=n(Vxe,"STRONG",{});var fpt=s(Ife);fwo=r(fpt,"camembert"),fpt.forEach(t),mwo=r(Vxe," \u2014 "),BD=n(Vxe,"A",{href:!0});var mpt=s(BD);gwo=r(mpt,"CamembertForMaskedLM"),mpt.forEach(t),hwo=r(Vxe," (CamemBERT model)"),Vxe.forEach(t),pwo=i(O),Qu=n(O,"LI",{});var Xxe=s(Qu);Nfe=n(Xxe,"STRONG",{});var gpt=s(Nfe);_wo=r(gpt,"ctrl"),gpt.forEach(t),uwo=r(Xxe," \u2014 "),ID=n(Xxe,"A",{href:!0});var hpt=s(ID);bwo=r(hpt,"CTRLLMHeadModel"),hpt.forEach(t),vwo=r(Xxe," (CTRL model)"),Xxe.forEach(t),Fwo=i(O),Wu=n(O,"LI",{});var zxe=s(Wu);qfe=n(zxe,"STRONG",{});var ppt=s(qfe);Two=r(ppt,"data2vec-text"),ppt.forEach(t),Mwo=r(zxe," \u2014 "),ND=n(zxe,"A",{href:!0});var _pt=s(ND);Ewo=r(_pt,"Data2VecTextForMaskedLM"),_pt.forEach(t),Cwo=r(zxe," (Data2VecText model)"),zxe.forEach(t),wwo=i(O),Hu=n(O,"LI",{});var Qxe=s(Hu);jfe=n(Qxe,"STRONG",{});var upt=s(jfe);Awo=r(upt,"deberta"),upt.forEach(t),Lwo=r(Qxe," \u2014 "),qD=n(Qxe,"A",{href:!0});var bpt=s(qD);ywo=r(bpt,"DebertaForMaskedLM"),bpt.forEach(t),xwo=r(Qxe," (DeBERTa model)"),Qxe.forEach(t),$wo=i(O),Uu=n(O,"LI",{});var Wxe=s(Uu);Dfe=n(Wxe,"STRONG",{});var vpt=s(Dfe);kwo=r(vpt,"deberta-v2"),vpt.forEach(t),Swo=r(Wxe," \u2014 "),jD=n(Wxe,"A",{href:!0});var Fpt=s(jD);Rwo=r(Fpt,"DebertaV2ForMaskedLM"),Fpt.forEach(t),Pwo=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),Bwo=i(O),Ju=n(O,"LI",{});var Hxe=s(Ju);Gfe=n(Hxe,"STRONG",{});var Tpt=s(Gfe);Iwo=r(Tpt,"distilbert"),Tpt.forEach(t),Nwo=r(Hxe," \u2014 "),DD=n(Hxe,"A",{href:!0});var Mpt=s(DD);qwo=r(Mpt,"DistilBertForMaskedLM"),Mpt.forEach(t),jwo=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),Dwo=i(O),Yu=n(O,"LI",{});var Uxe=s(Yu);Ofe=n(Uxe,"STRONG",{});var Ept=s(Ofe);Gwo=r(Ept,"electra"),Ept.forEach(t),Owo=r(Uxe," \u2014 "),GD=n(Uxe,"A",{href:!0});var Cpt=s(GD);Vwo=r(Cpt,"ElectraForPreTraining"),Cpt.forEach(t),Xwo=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),zwo=i(O),Ku=n(O,"LI",{});var Jxe=s(Ku);Vfe=n(Jxe,"STRONG",{});var wpt=s(Vfe);Qwo=r(wpt,"flaubert"),wpt.forEach(t),Wwo=r(Jxe," \u2014 "),OD=n(Jxe,"A",{href:!0});var Apt=s(OD);Hwo=r(Apt,"FlaubertWithLMHeadModel"),Apt.forEach(t),Uwo=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),Jwo=i(O),Zu=n(O,"LI",{});var Yxe=s(Zu);Xfe=n(Yxe,"STRONG",{});var Lpt=s(Xfe);Ywo=r(Lpt,"flava"),Lpt.forEach(t),Kwo=r(Yxe," \u2014 "),VD=n(Yxe,"A",{href:!0});var ypt=s(VD);Zwo=r(ypt,"FlavaForPreTraining"),ypt.forEach(t),eAo=r(Yxe," (FLAVA model)"),Yxe.forEach(t),oAo=i(O),e1=n(O,"LI",{});var Kxe=s(e1);zfe=n(Kxe,"STRONG",{});var xpt=s(zfe);rAo=r(xpt,"fnet"),xpt.forEach(t),tAo=r(Kxe," \u2014 "),XD=n(Kxe,"A",{href:!0});var $pt=s(XD);aAo=r($pt,"FNetForPreTraining"),$pt.forEach(t),nAo=r(Kxe," (FNet model)"),Kxe.forEach(t),sAo=i(O),o1=n(O,"LI",{});var Zxe=s(o1);Qfe=n(Zxe,"STRONG",{});var kpt=s(Qfe);lAo=r(kpt,"fsmt"),kpt.forEach(t),iAo=r(Zxe," \u2014 "),zD=n(Zxe,"A",{href:!0});var Spt=s(zD);dAo=r(Spt,"FSMTForConditionalGeneration"),Spt.forEach(t),cAo=r(Zxe," (FairSeq Machine-Translation model)"),Zxe.forEach(t),fAo=i(O),r1=n(O,"LI",{});var e$e=s(r1);Wfe=n(e$e,"STRONG",{});var Rpt=s(Wfe);mAo=r(Rpt,"funnel"),Rpt.forEach(t),gAo=r(e$e," \u2014 "),QD=n(e$e,"A",{href:!0});var Ppt=s(QD);hAo=r(Ppt,"FunnelForPreTraining"),Ppt.forEach(t),pAo=r(e$e," (Funnel Transformer model)"),e$e.forEach(t),_Ao=i(O),t1=n(O,"LI",{});var o$e=s(t1);Hfe=n(o$e,"STRONG",{});var Bpt=s(Hfe);uAo=r(Bpt,"gpt2"),Bpt.forEach(t),bAo=r(o$e," \u2014 "),WD=n(o$e,"A",{href:!0});var Ipt=s(WD);vAo=r(Ipt,"GPT2LMHeadModel"),Ipt.forEach(t),FAo=r(o$e," (OpenAI GPT-2 model)"),o$e.forEach(t),TAo=i(O),a1=n(O,"LI",{});var r$e=s(a1);Ufe=n(r$e,"STRONG",{});var Npt=s(Ufe);MAo=r(Npt,"ibert"),Npt.forEach(t),EAo=r(r$e," \u2014 "),HD=n(r$e,"A",{href:!0});var qpt=s(HD);CAo=r(qpt,"IBertForMaskedLM"),qpt.forEach(t),wAo=r(r$e," (I-BERT model)"),r$e.forEach(t),AAo=i(O),n1=n(O,"LI",{});var t$e=s(n1);Jfe=n(t$e,"STRONG",{});var jpt=s(Jfe);LAo=r(jpt,"layoutlm"),jpt.forEach(t),yAo=r(t$e," \u2014 "),UD=n(t$e,"A",{href:!0});var Dpt=s(UD);xAo=r(Dpt,"LayoutLMForMaskedLM"),Dpt.forEach(t),$Ao=r(t$e," (LayoutLM model)"),t$e.forEach(t),kAo=i(O),s1=n(O,"LI",{});var a$e=s(s1);Yfe=n(a$e,"STRONG",{});var Gpt=s(Yfe);SAo=r(Gpt,"longformer"),Gpt.forEach(t),RAo=r(a$e," \u2014 "),JD=n(a$e,"A",{href:!0});var Opt=s(JD);PAo=r(Opt,"LongformerForMaskedLM"),Opt.forEach(t),BAo=r(a$e," (Longformer model)"),a$e.forEach(t),IAo=i(O),l1=n(O,"LI",{});var n$e=s(l1);Kfe=n(n$e,"STRONG",{});var Vpt=s(Kfe);NAo=r(Vpt,"lxmert"),Vpt.forEach(t),qAo=r(n$e," \u2014 "),YD=n(n$e,"A",{href:!0});var Xpt=s(YD);jAo=r(Xpt,"LxmertForPreTraining"),Xpt.forEach(t),DAo=r(n$e," (LXMERT model)"),n$e.forEach(t),GAo=i(O),i1=n(O,"LI",{});var s$e=s(i1);Zfe=n(s$e,"STRONG",{});var zpt=s(Zfe);OAo=r(zpt,"megatron-bert"),zpt.forEach(t),VAo=r(s$e," \u2014 "),KD=n(s$e,"A",{href:!0});var Qpt=s(KD);XAo=r(Qpt,"MegatronBertForPreTraining"),Qpt.forEach(t),zAo=r(s$e," (Megatron-BERT model)"),s$e.forEach(t),QAo=i(O),d1=n(O,"LI",{});var l$e=s(d1);eme=n(l$e,"STRONG",{});var Wpt=s(eme);WAo=r(Wpt,"mobilebert"),Wpt.forEach(t),HAo=r(l$e," \u2014 "),ZD=n(l$e,"A",{href:!0});var Hpt=s(ZD);UAo=r(Hpt,"MobileBertForPreTraining"),Hpt.forEach(t),JAo=r(l$e," (MobileBERT model)"),l$e.forEach(t),YAo=i(O),c1=n(O,"LI",{});var i$e=s(c1);ome=n(i$e,"STRONG",{});var Upt=s(ome);KAo=r(Upt,"mpnet"),Upt.forEach(t),ZAo=r(i$e," \u2014 "),eG=n(i$e,"A",{href:!0});var Jpt=s(eG);eLo=r(Jpt,"MPNetForMaskedLM"),Jpt.forEach(t),oLo=r(i$e," (MPNet model)"),i$e.forEach(t),rLo=i(O),f1=n(O,"LI",{});var d$e=s(f1);rme=n(d$e,"STRONG",{});var Ypt=s(rme);tLo=r(Ypt,"nezha"),Ypt.forEach(t),aLo=r(d$e," \u2014 "),oG=n(d$e,"A",{href:!0});var Kpt=s(oG);nLo=r(Kpt,"NezhaForPreTraining"),Kpt.forEach(t),sLo=r(d$e," (Nezha model)"),d$e.forEach(t),lLo=i(O),m1=n(O,"LI",{});var c$e=s(m1);tme=n(c$e,"STRONG",{});var Zpt=s(tme);iLo=r(Zpt,"openai-gpt"),Zpt.forEach(t),dLo=r(c$e," \u2014 "),rG=n(c$e,"A",{href:!0});var e_t=s(rG);cLo=r(e_t,"OpenAIGPTLMHeadModel"),e_t.forEach(t),fLo=r(c$e," (OpenAI GPT model)"),c$e.forEach(t),mLo=i(O),g1=n(O,"LI",{});var f$e=s(g1);ame=n(f$e,"STRONG",{});var o_t=s(ame);gLo=r(o_t,"retribert"),o_t.forEach(t),hLo=r(f$e," \u2014 "),tG=n(f$e,"A",{href:!0});var r_t=s(tG);pLo=r(r_t,"RetriBertModel"),r_t.forEach(t),_Lo=r(f$e," (RetriBERT model)"),f$e.forEach(t),uLo=i(O),h1=n(O,"LI",{});var m$e=s(h1);nme=n(m$e,"STRONG",{});var t_t=s(nme);bLo=r(t_t,"roberta"),t_t.forEach(t),vLo=r(m$e," \u2014 "),aG=n(m$e,"A",{href:!0});var a_t=s(aG);FLo=r(a_t,"RobertaForMaskedLM"),a_t.forEach(t),TLo=r(m$e," (RoBERTa model)"),m$e.forEach(t),MLo=i(O),p1=n(O,"LI",{});var g$e=s(p1);sme=n(g$e,"STRONG",{});var n_t=s(sme);ELo=r(n_t,"splinter"),n_t.forEach(t),CLo=r(g$e," \u2014 "),nG=n(g$e,"A",{href:!0});var s_t=s(nG);wLo=r(s_t,"SplinterForPreTraining"),s_t.forEach(t),ALo=r(g$e," (Splinter model)"),g$e.forEach(t),LLo=i(O),_1=n(O,"LI",{});var h$e=s(_1);lme=n(h$e,"STRONG",{});var l_t=s(lme);yLo=r(l_t,"squeezebert"),l_t.forEach(t),xLo=r(h$e," \u2014 "),sG=n(h$e,"A",{href:!0});var i_t=s(sG);$Lo=r(i_t,"SqueezeBertForMaskedLM"),i_t.forEach(t),kLo=r(h$e," (SqueezeBERT model)"),h$e.forEach(t),SLo=i(O),u1=n(O,"LI",{});var p$e=s(u1);ime=n(p$e,"STRONG",{});var d_t=s(ime);RLo=r(d_t,"t5"),d_t.forEach(t),PLo=r(p$e," \u2014 "),lG=n(p$e,"A",{href:!0});var c_t=s(lG);BLo=r(c_t,"T5ForConditionalGeneration"),c_t.forEach(t),ILo=r(p$e," (T5 model)"),p$e.forEach(t),NLo=i(O),b1=n(O,"LI",{});var _$e=s(b1);dme=n(_$e,"STRONG",{});var f_t=s(dme);qLo=r(f_t,"tapas"),f_t.forEach(t),jLo=r(_$e," \u2014 "),iG=n(_$e,"A",{href:!0});var m_t=s(iG);DLo=r(m_t,"TapasForMaskedLM"),m_t.forEach(t),GLo=r(_$e," (TAPAS model)"),_$e.forEach(t),OLo=i(O),v1=n(O,"LI",{});var u$e=s(v1);cme=n(u$e,"STRONG",{});var g_t=s(cme);VLo=r(g_t,"transfo-xl"),g_t.forEach(t),XLo=r(u$e," \u2014 "),dG=n(u$e,"A",{href:!0});var h_t=s(dG);zLo=r(h_t,"TransfoXLLMHeadModel"),h_t.forEach(t),QLo=r(u$e," (Transformer-XL model)"),u$e.forEach(t),WLo=i(O),F1=n(O,"LI",{});var b$e=s(F1);fme=n(b$e,"STRONG",{});var p_t=s(fme);HLo=r(p_t,"unispeech"),p_t.forEach(t),ULo=r(b$e," \u2014 "),cG=n(b$e,"A",{href:!0});var __t=s(cG);JLo=r(__t,"UniSpeechForPreTraining"),__t.forEach(t),YLo=r(b$e," (UniSpeech model)"),b$e.forEach(t),KLo=i(O),T1=n(O,"LI",{});var v$e=s(T1);mme=n(v$e,"STRONG",{});var u_t=s(mme);ZLo=r(u_t,"unispeech-sat"),u_t.forEach(t),eyo=r(v$e," \u2014 "),fG=n(v$e,"A",{href:!0});var b_t=s(fG);oyo=r(b_t,"UniSpeechSatForPreTraining"),b_t.forEach(t),ryo=r(v$e," (UniSpeechSat model)"),v$e.forEach(t),tyo=i(O),M1=n(O,"LI",{});var F$e=s(M1);gme=n(F$e,"STRONG",{});var v_t=s(gme);ayo=r(v_t,"visual_bert"),v_t.forEach(t),nyo=r(F$e," \u2014 "),mG=n(F$e,"A",{href:!0});var F_t=s(mG);syo=r(F_t,"VisualBertForPreTraining"),F_t.forEach(t),lyo=r(F$e," (VisualBERT model)"),F$e.forEach(t),iyo=i(O),E1=n(O,"LI",{});var T$e=s(E1);hme=n(T$e,"STRONG",{});var T_t=s(hme);dyo=r(T_t,"vit_mae"),T_t.forEach(t),cyo=r(T$e," \u2014 "),gG=n(T$e,"A",{href:!0});var M_t=s(gG);fyo=r(M_t,"ViTMAEForPreTraining"),M_t.forEach(t),myo=r(T$e," (ViTMAE model)"),T$e.forEach(t),gyo=i(O),C1=n(O,"LI",{});var M$e=s(C1);pme=n(M$e,"STRONG",{});var E_t=s(pme);hyo=r(E_t,"wav2vec2"),E_t.forEach(t),pyo=r(M$e," \u2014 "),hG=n(M$e,"A",{href:!0});var C_t=s(hG);_yo=r(C_t,"Wav2Vec2ForPreTraining"),C_t.forEach(t),uyo=r(M$e," (Wav2Vec2 model)"),M$e.forEach(t),byo=i(O),w1=n(O,"LI",{});var E$e=s(w1);_me=n(E$e,"STRONG",{});var w_t=s(_me);vyo=r(w_t,"wav2vec2-conformer"),w_t.forEach(t),Fyo=r(E$e," \u2014 "),pG=n(E$e,"A",{href:!0});var A_t=s(pG);Tyo=r(A_t,"Wav2Vec2ConformerForPreTraining"),A_t.forEach(t),Myo=r(E$e," (Wav2Vec2-Conformer model)"),E$e.forEach(t),Eyo=i(O),A1=n(O,"LI",{});var C$e=s(A1);ume=n(C$e,"STRONG",{});var L_t=s(ume);Cyo=r(L_t,"xlm"),L_t.forEach(t),wyo=r(C$e," \u2014 "),_G=n(C$e,"A",{href:!0});var y_t=s(_G);Ayo=r(y_t,"XLMWithLMHeadModel"),y_t.forEach(t),Lyo=r(C$e," (XLM model)"),C$e.forEach(t),yyo=i(O),L1=n(O,"LI",{});var w$e=s(L1);bme=n(w$e,"STRONG",{});var x_t=s(bme);xyo=r(x_t,"xlm-roberta"),x_t.forEach(t),$yo=r(w$e," \u2014 "),uG=n(w$e,"A",{href:!0});var $_t=s(uG);kyo=r($_t,"XLMRobertaForMaskedLM"),$_t.forEach(t),Syo=r(w$e," (XLM-RoBERTa model)"),w$e.forEach(t),Ryo=i(O),y1=n(O,"LI",{});var A$e=s(y1);vme=n(A$e,"STRONG",{});var k_t=s(vme);Pyo=r(k_t,"xlm-roberta-xl"),k_t.forEach(t),Byo=r(A$e," \u2014 "),bG=n(A$e,"A",{href:!0});var S_t=s(bG);Iyo=r(S_t,"XLMRobertaXLForMaskedLM"),S_t.forEach(t),Nyo=r(A$e," (XLM-RoBERTa-XL model)"),A$e.forEach(t),qyo=i(O),x1=n(O,"LI",{});var L$e=s(x1);Fme=n(L$e,"STRONG",{});var R_t=s(Fme);jyo=r(R_t,"xlnet"),R_t.forEach(t),Dyo=r(L$e," \u2014 "),vG=n(L$e,"A",{href:!0});var P_t=s(vG);Gyo=r(P_t,"XLNetLMHeadModel"),P_t.forEach(t),Oyo=r(L$e," (XLNet model)"),L$e.forEach(t),O.forEach(t),Vyo=i(na),$1=n(na,"P",{});var y$e=s($1);Xyo=r(y$e,"The model is set in evaluation mode by default using "),Tme=n(y$e,"CODE",{});var B_t=s(Tme);zyo=r(B_t,"model.eval()"),B_t.forEach(t),Qyo=r(y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(y$e,"CODE",{});var I_t=s(Mme);Wyo=r(I_t,"model.train()"),I_t.forEach(t),y$e.forEach(t),Hyo=i(na),T(k1.$$.fragment,na),na.forEach(t),ol.forEach(t),HOe=i(f),Vi=n(f,"H2",{class:!0});var eze=s(Vi);S1=n(eze,"A",{id:!0,class:!0,href:!0});var N_t=s(S1);Eme=n(N_t,"SPAN",{});var q_t=s(Eme);T(My.$$.fragment,q_t),q_t.forEach(t),N_t.forEach(t),Uyo=i(eze),Cme=n(eze,"SPAN",{});var j_t=s(Cme);Jyo=r(j_t,"AutoModelForCausalLM"),j_t.forEach(t),eze.forEach(t),UOe=i(f),ko=n(f,"DIV",{class:!0});var rl=s(ko);T(Ey.$$.fragment,rl),Yyo=i(rl),Xi=n(rl,"P",{});var Uoe=s(Xi);Kyo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FG=n(Uoe,"A",{href:!0});var D_t=s(FG);Zyo=r(D_t,"from_pretrained()"),D_t.forEach(t),e8o=r(Uoe," class method or the "),TG=n(Uoe,"A",{href:!0});var G_t=s(TG);o8o=r(G_t,"from_config()"),G_t.forEach(t),r8o=r(Uoe,` class
method.`),Uoe.forEach(t),t8o=i(rl),Cy=n(rl,"P",{});var oze=s(Cy);a8o=r(oze,"This class cannot be instantiated directly using "),wme=n(oze,"CODE",{});var O_t=s(wme);n8o=r(O_t,"__init__()"),O_t.forEach(t),s8o=r(oze," (throws an error)."),oze.forEach(t),l8o=i(rl),lt=n(rl,"DIV",{class:!0});var Qw=s(lt);T(wy.$$.fragment,Qw),i8o=i(Qw),Ame=n(Qw,"P",{});var V_t=s(Ame);d8o=r(V_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V_t.forEach(t),c8o=i(Qw),zi=n(Qw,"P",{});var Joe=s(zi);f8o=r(Joe,`Note:
Loading a model from its configuration file does `),Lme=n(Joe,"STRONG",{});var X_t=s(Lme);m8o=r(X_t,"not"),X_t.forEach(t),g8o=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(Joe,"A",{href:!0});var z_t=s(MG);h8o=r(z_t,"from_pretrained()"),z_t.forEach(t),p8o=r(Joe," to load the model weights."),Joe.forEach(t),_8o=i(Qw),T(R1.$$.fragment,Qw),Qw.forEach(t),u8o=i(rl),Ke=n(rl,"DIV",{class:!0});var sa=s(Ke);T(Ay.$$.fragment,sa),b8o=i(sa),yme=n(sa,"P",{});var Q_t=s(yme);v8o=r(Q_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q_t.forEach(t),F8o=i(sa),Ia=n(sa,"P",{});var Ww=s(Ia);T8o=r(Ww,"The model class to instantiate is selected based on the "),xme=n(Ww,"CODE",{});var W_t=s(xme);M8o=r(W_t,"model_type"),W_t.forEach(t),E8o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),$me=n(Ww,"CODE",{});var H_t=s($me);C8o=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),w8o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(Ww,"CODE",{});var U_t=s(kme);A8o=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),L8o=r(Ww,":"),Ww.forEach(t),y8o=i(sa),z=n(sa,"UL",{});var Q=s(z);P1=n(Q,"LI",{});var x$e=s(P1);Sme=n(x$e,"STRONG",{});var J_t=s(Sme);x8o=r(J_t,"bart"),J_t.forEach(t),$8o=r(x$e," \u2014 "),EG=n(x$e,"A",{href:!0});var Y_t=s(EG);k8o=r(Y_t,"BartForCausalLM"),Y_t.forEach(t),S8o=r(x$e," (BART model)"),x$e.forEach(t),R8o=i(Q),B1=n(Q,"LI",{});var $$e=s(B1);Rme=n($$e,"STRONG",{});var K_t=s(Rme);P8o=r(K_t,"bert"),K_t.forEach(t),B8o=r($$e," \u2014 "),CG=n($$e,"A",{href:!0});var Z_t=s(CG);I8o=r(Z_t,"BertLMHeadModel"),Z_t.forEach(t),N8o=r($$e," (BERT model)"),$$e.forEach(t),q8o=i(Q),I1=n(Q,"LI",{});var k$e=s(I1);Pme=n(k$e,"STRONG",{});var eut=s(Pme);j8o=r(eut,"bert-generation"),eut.forEach(t),D8o=r(k$e," \u2014 "),wG=n(k$e,"A",{href:!0});var out=s(wG);G8o=r(out,"BertGenerationDecoder"),out.forEach(t),O8o=r(k$e," (Bert Generation model)"),k$e.forEach(t),V8o=i(Q),N1=n(Q,"LI",{});var S$e=s(N1);Bme=n(S$e,"STRONG",{});var rut=s(Bme);X8o=r(rut,"big_bird"),rut.forEach(t),z8o=r(S$e," \u2014 "),AG=n(S$e,"A",{href:!0});var tut=s(AG);Q8o=r(tut,"BigBirdForCausalLM"),tut.forEach(t),W8o=r(S$e," (BigBird model)"),S$e.forEach(t),H8o=i(Q),q1=n(Q,"LI",{});var R$e=s(q1);Ime=n(R$e,"STRONG",{});var aut=s(Ime);U8o=r(aut,"bigbird_pegasus"),aut.forEach(t),J8o=r(R$e," \u2014 "),LG=n(R$e,"A",{href:!0});var nut=s(LG);Y8o=r(nut,"BigBirdPegasusForCausalLM"),nut.forEach(t),K8o=r(R$e," (BigBird-Pegasus model)"),R$e.forEach(t),Z8o=i(Q),j1=n(Q,"LI",{});var P$e=s(j1);Nme=n(P$e,"STRONG",{});var sut=s(Nme);e9o=r(sut,"blenderbot"),sut.forEach(t),o9o=r(P$e," \u2014 "),yG=n(P$e,"A",{href:!0});var lut=s(yG);r9o=r(lut,"BlenderbotForCausalLM"),lut.forEach(t),t9o=r(P$e," (Blenderbot model)"),P$e.forEach(t),a9o=i(Q),D1=n(Q,"LI",{});var B$e=s(D1);qme=n(B$e,"STRONG",{});var iut=s(qme);n9o=r(iut,"blenderbot-small"),iut.forEach(t),s9o=r(B$e," \u2014 "),xG=n(B$e,"A",{href:!0});var dut=s(xG);l9o=r(dut,"BlenderbotSmallForCausalLM"),dut.forEach(t),i9o=r(B$e," (BlenderbotSmall model)"),B$e.forEach(t),d9o=i(Q),G1=n(Q,"LI",{});var I$e=s(G1);jme=n(I$e,"STRONG",{});var cut=s(jme);c9o=r(cut,"bloom"),cut.forEach(t),f9o=r(I$e," \u2014 "),$G=n(I$e,"A",{href:!0});var fut=s($G);m9o=r(fut,"BloomForCausalLM"),fut.forEach(t),g9o=r(I$e," (BLOOM model)"),I$e.forEach(t),h9o=i(Q),O1=n(Q,"LI",{});var N$e=s(O1);Dme=n(N$e,"STRONG",{});var mut=s(Dme);p9o=r(mut,"camembert"),mut.forEach(t),_9o=r(N$e," \u2014 "),kG=n(N$e,"A",{href:!0});var gut=s(kG);u9o=r(gut,"CamembertForCausalLM"),gut.forEach(t),b9o=r(N$e," (CamemBERT model)"),N$e.forEach(t),v9o=i(Q),V1=n(Q,"LI",{});var q$e=s(V1);Gme=n(q$e,"STRONG",{});var hut=s(Gme);F9o=r(hut,"codegen"),hut.forEach(t),T9o=r(q$e," \u2014 "),SG=n(q$e,"A",{href:!0});var put=s(SG);M9o=r(put,"CodeGenForCausalLM"),put.forEach(t),E9o=r(q$e," (CodeGen model)"),q$e.forEach(t),C9o=i(Q),X1=n(Q,"LI",{});var j$e=s(X1);Ome=n(j$e,"STRONG",{});var _ut=s(Ome);w9o=r(_ut,"ctrl"),_ut.forEach(t),A9o=r(j$e," \u2014 "),RG=n(j$e,"A",{href:!0});var uut=s(RG);L9o=r(uut,"CTRLLMHeadModel"),uut.forEach(t),y9o=r(j$e," (CTRL model)"),j$e.forEach(t),x9o=i(Q),z1=n(Q,"LI",{});var D$e=s(z1);Vme=n(D$e,"STRONG",{});var but=s(Vme);$9o=r(but,"data2vec-text"),but.forEach(t),k9o=r(D$e," \u2014 "),PG=n(D$e,"A",{href:!0});var vut=s(PG);S9o=r(vut,"Data2VecTextForCausalLM"),vut.forEach(t),R9o=r(D$e," (Data2VecText model)"),D$e.forEach(t),P9o=i(Q),Q1=n(Q,"LI",{});var G$e=s(Q1);Xme=n(G$e,"STRONG",{});var Fut=s(Xme);B9o=r(Fut,"electra"),Fut.forEach(t),I9o=r(G$e," \u2014 "),BG=n(G$e,"A",{href:!0});var Tut=s(BG);N9o=r(Tut,"ElectraForCausalLM"),Tut.forEach(t),q9o=r(G$e," (ELECTRA model)"),G$e.forEach(t),j9o=i(Q),W1=n(Q,"LI",{});var O$e=s(W1);zme=n(O$e,"STRONG",{});var Mut=s(zme);D9o=r(Mut,"gpt2"),Mut.forEach(t),G9o=r(O$e," \u2014 "),IG=n(O$e,"A",{href:!0});var Eut=s(IG);O9o=r(Eut,"GPT2LMHeadModel"),Eut.forEach(t),V9o=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),X9o=i(Q),H1=n(Q,"LI",{});var V$e=s(H1);Qme=n(V$e,"STRONG",{});var Cut=s(Qme);z9o=r(Cut,"gpt_neo"),Cut.forEach(t),Q9o=r(V$e," \u2014 "),NG=n(V$e,"A",{href:!0});var wut=s(NG);W9o=r(wut,"GPTNeoForCausalLM"),wut.forEach(t),H9o=r(V$e," (GPT Neo model)"),V$e.forEach(t),U9o=i(Q),U1=n(Q,"LI",{});var X$e=s(U1);Wme=n(X$e,"STRONG",{});var Aut=s(Wme);J9o=r(Aut,"gpt_neox"),Aut.forEach(t),Y9o=r(X$e," \u2014 "),qG=n(X$e,"A",{href:!0});var Lut=s(qG);K9o=r(Lut,"GPTNeoXForCausalLM"),Lut.forEach(t),Z9o=r(X$e," (GPT NeoX model)"),X$e.forEach(t),exo=i(Q),J1=n(Q,"LI",{});var z$e=s(J1);Hme=n(z$e,"STRONG",{});var yut=s(Hme);oxo=r(yut,"gptj"),yut.forEach(t),rxo=r(z$e," \u2014 "),jG=n(z$e,"A",{href:!0});var xut=s(jG);txo=r(xut,"GPTJForCausalLM"),xut.forEach(t),axo=r(z$e," (GPT-J model)"),z$e.forEach(t),nxo=i(Q),Y1=n(Q,"LI",{});var Q$e=s(Y1);Ume=n(Q$e,"STRONG",{});var $ut=s(Ume);sxo=r($ut,"marian"),$ut.forEach(t),lxo=r(Q$e," \u2014 "),DG=n(Q$e,"A",{href:!0});var kut=s(DG);ixo=r(kut,"MarianForCausalLM"),kut.forEach(t),dxo=r(Q$e," (Marian model)"),Q$e.forEach(t),cxo=i(Q),K1=n(Q,"LI",{});var W$e=s(K1);Jme=n(W$e,"STRONG",{});var Sut=s(Jme);fxo=r(Sut,"mbart"),Sut.forEach(t),mxo=r(W$e," \u2014 "),GG=n(W$e,"A",{href:!0});var Rut=s(GG);gxo=r(Rut,"MBartForCausalLM"),Rut.forEach(t),hxo=r(W$e," (mBART model)"),W$e.forEach(t),pxo=i(Q),Z1=n(Q,"LI",{});var H$e=s(Z1);Yme=n(H$e,"STRONG",{});var Put=s(Yme);_xo=r(Put,"megatron-bert"),Put.forEach(t),uxo=r(H$e," \u2014 "),OG=n(H$e,"A",{href:!0});var But=s(OG);bxo=r(But,"MegatronBertForCausalLM"),But.forEach(t),vxo=r(H$e," (Megatron-BERT model)"),H$e.forEach(t),Fxo=i(Q),e7=n(Q,"LI",{});var U$e=s(e7);Kme=n(U$e,"STRONG",{});var Iut=s(Kme);Txo=r(Iut,"openai-gpt"),Iut.forEach(t),Mxo=r(U$e," \u2014 "),VG=n(U$e,"A",{href:!0});var Nut=s(VG);Exo=r(Nut,"OpenAIGPTLMHeadModel"),Nut.forEach(t),Cxo=r(U$e," (OpenAI GPT model)"),U$e.forEach(t),wxo=i(Q),o7=n(Q,"LI",{});var J$e=s(o7);Zme=n(J$e,"STRONG",{});var qut=s(Zme);Axo=r(qut,"opt"),qut.forEach(t),Lxo=r(J$e," \u2014 "),XG=n(J$e,"A",{href:!0});var jut=s(XG);yxo=r(jut,"OPTForCausalLM"),jut.forEach(t),xxo=r(J$e," (OPT model)"),J$e.forEach(t),$xo=i(Q),r7=n(Q,"LI",{});var Y$e=s(r7);ege=n(Y$e,"STRONG",{});var Dut=s(ege);kxo=r(Dut,"pegasus"),Dut.forEach(t),Sxo=r(Y$e," \u2014 "),zG=n(Y$e,"A",{href:!0});var Gut=s(zG);Rxo=r(Gut,"PegasusForCausalLM"),Gut.forEach(t),Pxo=r(Y$e," (Pegasus model)"),Y$e.forEach(t),Bxo=i(Q),t7=n(Q,"LI",{});var K$e=s(t7);oge=n(K$e,"STRONG",{});var Out=s(oge);Ixo=r(Out,"plbart"),Out.forEach(t),Nxo=r(K$e," \u2014 "),QG=n(K$e,"A",{href:!0});var Vut=s(QG);qxo=r(Vut,"PLBartForCausalLM"),Vut.forEach(t),jxo=r(K$e," (PLBart model)"),K$e.forEach(t),Dxo=i(Q),a7=n(Q,"LI",{});var Z$e=s(a7);rge=n(Z$e,"STRONG",{});var Xut=s(rge);Gxo=r(Xut,"prophetnet"),Xut.forEach(t),Oxo=r(Z$e," \u2014 "),WG=n(Z$e,"A",{href:!0});var zut=s(WG);Vxo=r(zut,"ProphetNetForCausalLM"),zut.forEach(t),Xxo=r(Z$e," (ProphetNet model)"),Z$e.forEach(t),zxo=i(Q),n7=n(Q,"LI",{});var eke=s(n7);tge=n(eke,"STRONG",{});var Qut=s(tge);Qxo=r(Qut,"qdqbert"),Qut.forEach(t),Wxo=r(eke," \u2014 "),HG=n(eke,"A",{href:!0});var Wut=s(HG);Hxo=r(Wut,"QDQBertLMHeadModel"),Wut.forEach(t),Uxo=r(eke," (QDQBert model)"),eke.forEach(t),Jxo=i(Q),s7=n(Q,"LI",{});var oke=s(s7);age=n(oke,"STRONG",{});var Hut=s(age);Yxo=r(Hut,"reformer"),Hut.forEach(t),Kxo=r(oke," \u2014 "),UG=n(oke,"A",{href:!0});var Uut=s(UG);Zxo=r(Uut,"ReformerModelWithLMHead"),Uut.forEach(t),e$o=r(oke," (Reformer model)"),oke.forEach(t),o$o=i(Q),l7=n(Q,"LI",{});var rke=s(l7);nge=n(rke,"STRONG",{});var Jut=s(nge);r$o=r(Jut,"rembert"),Jut.forEach(t),t$o=r(rke," \u2014 "),JG=n(rke,"A",{href:!0});var Yut=s(JG);a$o=r(Yut,"RemBertForCausalLM"),Yut.forEach(t),n$o=r(rke," (RemBERT model)"),rke.forEach(t),s$o=i(Q),i7=n(Q,"LI",{});var tke=s(i7);sge=n(tke,"STRONG",{});var Kut=s(sge);l$o=r(Kut,"roberta"),Kut.forEach(t),i$o=r(tke," \u2014 "),YG=n(tke,"A",{href:!0});var Zut=s(YG);d$o=r(Zut,"RobertaForCausalLM"),Zut.forEach(t),c$o=r(tke," (RoBERTa model)"),tke.forEach(t),f$o=i(Q),d7=n(Q,"LI",{});var ake=s(d7);lge=n(ake,"STRONG",{});var e1t=s(lge);m$o=r(e1t,"roformer"),e1t.forEach(t),g$o=r(ake," \u2014 "),KG=n(ake,"A",{href:!0});var o1t=s(KG);h$o=r(o1t,"RoFormerForCausalLM"),o1t.forEach(t),p$o=r(ake," (RoFormer model)"),ake.forEach(t),_$o=i(Q),c7=n(Q,"LI",{});var nke=s(c7);ige=n(nke,"STRONG",{});var r1t=s(ige);u$o=r(r1t,"speech_to_text_2"),r1t.forEach(t),b$o=r(nke," \u2014 "),ZG=n(nke,"A",{href:!0});var t1t=s(ZG);v$o=r(t1t,"Speech2Text2ForCausalLM"),t1t.forEach(t),F$o=r(nke," (Speech2Text2 model)"),nke.forEach(t),T$o=i(Q),f7=n(Q,"LI",{});var ske=s(f7);dge=n(ske,"STRONG",{});var a1t=s(dge);M$o=r(a1t,"transfo-xl"),a1t.forEach(t),E$o=r(ske," \u2014 "),eO=n(ske,"A",{href:!0});var n1t=s(eO);C$o=r(n1t,"TransfoXLLMHeadModel"),n1t.forEach(t),w$o=r(ske," (Transformer-XL model)"),ske.forEach(t),A$o=i(Q),m7=n(Q,"LI",{});var lke=s(m7);cge=n(lke,"STRONG",{});var s1t=s(cge);L$o=r(s1t,"trocr"),s1t.forEach(t),y$o=r(lke," \u2014 "),oO=n(lke,"A",{href:!0});var l1t=s(oO);x$o=r(l1t,"TrOCRForCausalLM"),l1t.forEach(t),$$o=r(lke," (TrOCR model)"),lke.forEach(t),k$o=i(Q),g7=n(Q,"LI",{});var ike=s(g7);fge=n(ike,"STRONG",{});var i1t=s(fge);S$o=r(i1t,"xglm"),i1t.forEach(t),R$o=r(ike," \u2014 "),rO=n(ike,"A",{href:!0});var d1t=s(rO);P$o=r(d1t,"XGLMForCausalLM"),d1t.forEach(t),B$o=r(ike," (XGLM model)"),ike.forEach(t),I$o=i(Q),h7=n(Q,"LI",{});var dke=s(h7);mge=n(dke,"STRONG",{});var c1t=s(mge);N$o=r(c1t,"xlm"),c1t.forEach(t),q$o=r(dke," \u2014 "),tO=n(dke,"A",{href:!0});var f1t=s(tO);j$o=r(f1t,"XLMWithLMHeadModel"),f1t.forEach(t),D$o=r(dke," (XLM model)"),dke.forEach(t),G$o=i(Q),p7=n(Q,"LI",{});var cke=s(p7);gge=n(cke,"STRONG",{});var m1t=s(gge);O$o=r(m1t,"xlm-prophetnet"),m1t.forEach(t),V$o=r(cke," \u2014 "),aO=n(cke,"A",{href:!0});var g1t=s(aO);X$o=r(g1t,"XLMProphetNetForCausalLM"),g1t.forEach(t),z$o=r(cke," (XLM-ProphetNet model)"),cke.forEach(t),Q$o=i(Q),_7=n(Q,"LI",{});var fke=s(_7);hge=n(fke,"STRONG",{});var h1t=s(hge);W$o=r(h1t,"xlm-roberta"),h1t.forEach(t),H$o=r(fke," \u2014 "),nO=n(fke,"A",{href:!0});var p1t=s(nO);U$o=r(p1t,"XLMRobertaForCausalLM"),p1t.forEach(t),J$o=r(fke," (XLM-RoBERTa model)"),fke.forEach(t),Y$o=i(Q),u7=n(Q,"LI",{});var mke=s(u7);pge=n(mke,"STRONG",{});var _1t=s(pge);K$o=r(_1t,"xlm-roberta-xl"),_1t.forEach(t),Z$o=r(mke," \u2014 "),sO=n(mke,"A",{href:!0});var u1t=s(sO);eko=r(u1t,"XLMRobertaXLForCausalLM"),u1t.forEach(t),oko=r(mke," (XLM-RoBERTa-XL model)"),mke.forEach(t),rko=i(Q),b7=n(Q,"LI",{});var gke=s(b7);_ge=n(gke,"STRONG",{});var b1t=s(_ge);tko=r(b1t,"xlnet"),b1t.forEach(t),ako=r(gke," \u2014 "),lO=n(gke,"A",{href:!0});var v1t=s(lO);nko=r(v1t,"XLNetLMHeadModel"),v1t.forEach(t),sko=r(gke," (XLNet model)"),gke.forEach(t),Q.forEach(t),lko=i(sa),v7=n(sa,"P",{});var hke=s(v7);iko=r(hke,"The model is set in evaluation mode by default using "),uge=n(hke,"CODE",{});var F1t=s(uge);dko=r(F1t,"model.eval()"),F1t.forEach(t),cko=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(hke,"CODE",{});var T1t=s(bge);fko=r(T1t,"model.train()"),T1t.forEach(t),hke.forEach(t),mko=i(sa),T(F7.$$.fragment,sa),sa.forEach(t),rl.forEach(t),JOe=i(f),Qi=n(f,"H2",{class:!0});var rze=s(Qi);T7=n(rze,"A",{id:!0,class:!0,href:!0});var M1t=s(T7);vge=n(M1t,"SPAN",{});var E1t=s(vge);T(Ly.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),gko=i(rze),Fge=n(rze,"SPAN",{});var C1t=s(Fge);hko=r(C1t,"AutoModelForMaskedLM"),C1t.forEach(t),rze.forEach(t),YOe=i(f),So=n(f,"DIV",{class:!0});var tl=s(So);T(yy.$$.fragment,tl),pko=i(tl),Wi=n(tl,"P",{});var Yoe=s(Wi);_ko=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iO=n(Yoe,"A",{href:!0});var w1t=s(iO);uko=r(w1t,"from_pretrained()"),w1t.forEach(t),bko=r(Yoe," class method or the "),dO=n(Yoe,"A",{href:!0});var A1t=s(dO);vko=r(A1t,"from_config()"),A1t.forEach(t),Fko=r(Yoe,` class
method.`),Yoe.forEach(t),Tko=i(tl),xy=n(tl,"P",{});var tze=s(xy);Mko=r(tze,"This class cannot be instantiated directly using "),Tge=n(tze,"CODE",{});var L1t=s(Tge);Eko=r(L1t,"__init__()"),L1t.forEach(t),Cko=r(tze," (throws an error)."),tze.forEach(t),wko=i(tl),it=n(tl,"DIV",{class:!0});var Hw=s(it);T($y.$$.fragment,Hw),Ako=i(Hw),Mge=n(Hw,"P",{});var y1t=s(Mge);Lko=r(y1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y1t.forEach(t),yko=i(Hw),Hi=n(Hw,"P",{});var Koe=s(Hi);xko=r(Koe,`Note:
Loading a model from its configuration file does `),Ege=n(Koe,"STRONG",{});var x1t=s(Ege);$ko=r(x1t,"not"),x1t.forEach(t),kko=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(Koe,"A",{href:!0});var $1t=s(cO);Sko=r($1t,"from_pretrained()"),$1t.forEach(t),Rko=r(Koe," to load the model weights."),Koe.forEach(t),Pko=i(Hw),T(M7.$$.fragment,Hw),Hw.forEach(t),Bko=i(tl),Ze=n(tl,"DIV",{class:!0});var la=s(Ze);T(ky.$$.fragment,la),Iko=i(la),Cge=n(la,"P",{});var k1t=s(Cge);Nko=r(k1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k1t.forEach(t),qko=i(la),Na=n(la,"P",{});var Uw=s(Na);jko=r(Uw,"The model class to instantiate is selected based on the "),wge=n(Uw,"CODE",{});var S1t=s(wge);Dko=r(S1t,"model_type"),S1t.forEach(t),Gko=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Age=n(Uw,"CODE",{});var R1t=s(Age);Oko=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),Vko=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(Uw,"CODE",{});var P1t=s(Lge);Xko=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),zko=r(Uw,":"),Uw.forEach(t),Qko=i(la),W=n(la,"UL",{});var U=s(W);E7=n(U,"LI",{});var pke=s(E7);yge=n(pke,"STRONG",{});var B1t=s(yge);Wko=r(B1t,"albert"),B1t.forEach(t),Hko=r(pke," \u2014 "),fO=n(pke,"A",{href:!0});var I1t=s(fO);Uko=r(I1t,"AlbertForMaskedLM"),I1t.forEach(t),Jko=r(pke," (ALBERT model)"),pke.forEach(t),Yko=i(U),C7=n(U,"LI",{});var _ke=s(C7);xge=n(_ke,"STRONG",{});var N1t=s(xge);Kko=r(N1t,"bart"),N1t.forEach(t),Zko=r(_ke," \u2014 "),mO=n(_ke,"A",{href:!0});var q1t=s(mO);eSo=r(q1t,"BartForConditionalGeneration"),q1t.forEach(t),oSo=r(_ke," (BART model)"),_ke.forEach(t),rSo=i(U),w7=n(U,"LI",{});var uke=s(w7);$ge=n(uke,"STRONG",{});var j1t=s($ge);tSo=r(j1t,"bert"),j1t.forEach(t),aSo=r(uke," \u2014 "),gO=n(uke,"A",{href:!0});var D1t=s(gO);nSo=r(D1t,"BertForMaskedLM"),D1t.forEach(t),sSo=r(uke," (BERT model)"),uke.forEach(t),lSo=i(U),A7=n(U,"LI",{});var bke=s(A7);kge=n(bke,"STRONG",{});var G1t=s(kge);iSo=r(G1t,"big_bird"),G1t.forEach(t),dSo=r(bke," \u2014 "),hO=n(bke,"A",{href:!0});var O1t=s(hO);cSo=r(O1t,"BigBirdForMaskedLM"),O1t.forEach(t),fSo=r(bke," (BigBird model)"),bke.forEach(t),mSo=i(U),L7=n(U,"LI",{});var vke=s(L7);Sge=n(vke,"STRONG",{});var V1t=s(Sge);gSo=r(V1t,"camembert"),V1t.forEach(t),hSo=r(vke," \u2014 "),pO=n(vke,"A",{href:!0});var X1t=s(pO);pSo=r(X1t,"CamembertForMaskedLM"),X1t.forEach(t),_So=r(vke," (CamemBERT model)"),vke.forEach(t),uSo=i(U),y7=n(U,"LI",{});var Fke=s(y7);Rge=n(Fke,"STRONG",{});var z1t=s(Rge);bSo=r(z1t,"convbert"),z1t.forEach(t),vSo=r(Fke," \u2014 "),_O=n(Fke,"A",{href:!0});var Q1t=s(_O);FSo=r(Q1t,"ConvBertForMaskedLM"),Q1t.forEach(t),TSo=r(Fke," (ConvBERT model)"),Fke.forEach(t),MSo=i(U),x7=n(U,"LI",{});var Tke=s(x7);Pge=n(Tke,"STRONG",{});var W1t=s(Pge);ESo=r(W1t,"data2vec-text"),W1t.forEach(t),CSo=r(Tke," \u2014 "),uO=n(Tke,"A",{href:!0});var H1t=s(uO);wSo=r(H1t,"Data2VecTextForMaskedLM"),H1t.forEach(t),ASo=r(Tke," (Data2VecText model)"),Tke.forEach(t),LSo=i(U),$7=n(U,"LI",{});var Mke=s($7);Bge=n(Mke,"STRONG",{});var U1t=s(Bge);ySo=r(U1t,"deberta"),U1t.forEach(t),xSo=r(Mke," \u2014 "),bO=n(Mke,"A",{href:!0});var J1t=s(bO);$So=r(J1t,"DebertaForMaskedLM"),J1t.forEach(t),kSo=r(Mke," (DeBERTa model)"),Mke.forEach(t),SSo=i(U),k7=n(U,"LI",{});var Eke=s(k7);Ige=n(Eke,"STRONG",{});var Y1t=s(Ige);RSo=r(Y1t,"deberta-v2"),Y1t.forEach(t),PSo=r(Eke," \u2014 "),vO=n(Eke,"A",{href:!0});var K1t=s(vO);BSo=r(K1t,"DebertaV2ForMaskedLM"),K1t.forEach(t),ISo=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),NSo=i(U),S7=n(U,"LI",{});var Cke=s(S7);Nge=n(Cke,"STRONG",{});var Z1t=s(Nge);qSo=r(Z1t,"distilbert"),Z1t.forEach(t),jSo=r(Cke," \u2014 "),FO=n(Cke,"A",{href:!0});var e7t=s(FO);DSo=r(e7t,"DistilBertForMaskedLM"),e7t.forEach(t),GSo=r(Cke," (DistilBERT model)"),Cke.forEach(t),OSo=i(U),R7=n(U,"LI",{});var wke=s(R7);qge=n(wke,"STRONG",{});var o7t=s(qge);VSo=r(o7t,"electra"),o7t.forEach(t),XSo=r(wke," \u2014 "),TO=n(wke,"A",{href:!0});var r7t=s(TO);zSo=r(r7t,"ElectraForMaskedLM"),r7t.forEach(t),QSo=r(wke," (ELECTRA model)"),wke.forEach(t),WSo=i(U),P7=n(U,"LI",{});var Ake=s(P7);jge=n(Ake,"STRONG",{});var t7t=s(jge);HSo=r(t7t,"flaubert"),t7t.forEach(t),USo=r(Ake," \u2014 "),MO=n(Ake,"A",{href:!0});var a7t=s(MO);JSo=r(a7t,"FlaubertWithLMHeadModel"),a7t.forEach(t),YSo=r(Ake," (FlauBERT model)"),Ake.forEach(t),KSo=i(U),B7=n(U,"LI",{});var Lke=s(B7);Dge=n(Lke,"STRONG",{});var n7t=s(Dge);ZSo=r(n7t,"fnet"),n7t.forEach(t),eRo=r(Lke," \u2014 "),EO=n(Lke,"A",{href:!0});var s7t=s(EO);oRo=r(s7t,"FNetForMaskedLM"),s7t.forEach(t),rRo=r(Lke," (FNet model)"),Lke.forEach(t),tRo=i(U),I7=n(U,"LI",{});var yke=s(I7);Gge=n(yke,"STRONG",{});var l7t=s(Gge);aRo=r(l7t,"funnel"),l7t.forEach(t),nRo=r(yke," \u2014 "),CO=n(yke,"A",{href:!0});var i7t=s(CO);sRo=r(i7t,"FunnelForMaskedLM"),i7t.forEach(t),lRo=r(yke," (Funnel Transformer model)"),yke.forEach(t),iRo=i(U),N7=n(U,"LI",{});var xke=s(N7);Oge=n(xke,"STRONG",{});var d7t=s(Oge);dRo=r(d7t,"ibert"),d7t.forEach(t),cRo=r(xke," \u2014 "),wO=n(xke,"A",{href:!0});var c7t=s(wO);fRo=r(c7t,"IBertForMaskedLM"),c7t.forEach(t),mRo=r(xke," (I-BERT model)"),xke.forEach(t),gRo=i(U),q7=n(U,"LI",{});var $ke=s(q7);Vge=n($ke,"STRONG",{});var f7t=s(Vge);hRo=r(f7t,"layoutlm"),f7t.forEach(t),pRo=r($ke," \u2014 "),AO=n($ke,"A",{href:!0});var m7t=s(AO);_Ro=r(m7t,"LayoutLMForMaskedLM"),m7t.forEach(t),uRo=r($ke," (LayoutLM model)"),$ke.forEach(t),bRo=i(U),j7=n(U,"LI",{});var kke=s(j7);Xge=n(kke,"STRONG",{});var g7t=s(Xge);vRo=r(g7t,"longformer"),g7t.forEach(t),FRo=r(kke," \u2014 "),LO=n(kke,"A",{href:!0});var h7t=s(LO);TRo=r(h7t,"LongformerForMaskedLM"),h7t.forEach(t),MRo=r(kke," (Longformer model)"),kke.forEach(t),ERo=i(U),D7=n(U,"LI",{});var Ske=s(D7);zge=n(Ske,"STRONG",{});var p7t=s(zge);CRo=r(p7t,"luke"),p7t.forEach(t),wRo=r(Ske," \u2014 "),yO=n(Ske,"A",{href:!0});var _7t=s(yO);ARo=r(_7t,"LukeForMaskedLM"),_7t.forEach(t),LRo=r(Ske," (LUKE model)"),Ske.forEach(t),yRo=i(U),G7=n(U,"LI",{});var Rke=s(G7);Qge=n(Rke,"STRONG",{});var u7t=s(Qge);xRo=r(u7t,"mbart"),u7t.forEach(t),$Ro=r(Rke," \u2014 "),xO=n(Rke,"A",{href:!0});var b7t=s(xO);kRo=r(b7t,"MBartForConditionalGeneration"),b7t.forEach(t),SRo=r(Rke," (mBART model)"),Rke.forEach(t),RRo=i(U),O7=n(U,"LI",{});var Pke=s(O7);Wge=n(Pke,"STRONG",{});var v7t=s(Wge);PRo=r(v7t,"megatron-bert"),v7t.forEach(t),BRo=r(Pke," \u2014 "),$O=n(Pke,"A",{href:!0});var F7t=s($O);IRo=r(F7t,"MegatronBertForMaskedLM"),F7t.forEach(t),NRo=r(Pke," (Megatron-BERT model)"),Pke.forEach(t),qRo=i(U),V7=n(U,"LI",{});var Bke=s(V7);Hge=n(Bke,"STRONG",{});var T7t=s(Hge);jRo=r(T7t,"mobilebert"),T7t.forEach(t),DRo=r(Bke," \u2014 "),kO=n(Bke,"A",{href:!0});var M7t=s(kO);GRo=r(M7t,"MobileBertForMaskedLM"),M7t.forEach(t),ORo=r(Bke," (MobileBERT model)"),Bke.forEach(t),VRo=i(U),X7=n(U,"LI",{});var Ike=s(X7);Uge=n(Ike,"STRONG",{});var E7t=s(Uge);XRo=r(E7t,"mpnet"),E7t.forEach(t),zRo=r(Ike," \u2014 "),SO=n(Ike,"A",{href:!0});var C7t=s(SO);QRo=r(C7t,"MPNetForMaskedLM"),C7t.forEach(t),WRo=r(Ike," (MPNet model)"),Ike.forEach(t),HRo=i(U),z7=n(U,"LI",{});var Nke=s(z7);Jge=n(Nke,"STRONG",{});var w7t=s(Jge);URo=r(w7t,"nezha"),w7t.forEach(t),JRo=r(Nke," \u2014 "),RO=n(Nke,"A",{href:!0});var A7t=s(RO);YRo=r(A7t,"NezhaForMaskedLM"),A7t.forEach(t),KRo=r(Nke," (Nezha model)"),Nke.forEach(t),ZRo=i(U),Q7=n(U,"LI",{});var qke=s(Q7);Yge=n(qke,"STRONG",{});var L7t=s(Yge);ePo=r(L7t,"nystromformer"),L7t.forEach(t),oPo=r(qke," \u2014 "),PO=n(qke,"A",{href:!0});var y7t=s(PO);rPo=r(y7t,"NystromformerForMaskedLM"),y7t.forEach(t),tPo=r(qke," (Nystr\xF6mformer model)"),qke.forEach(t),aPo=i(U),W7=n(U,"LI",{});var jke=s(W7);Kge=n(jke,"STRONG",{});var x7t=s(Kge);nPo=r(x7t,"perceiver"),x7t.forEach(t),sPo=r(jke," \u2014 "),BO=n(jke,"A",{href:!0});var $7t=s(BO);lPo=r($7t,"PerceiverForMaskedLM"),$7t.forEach(t),iPo=r(jke," (Perceiver model)"),jke.forEach(t),dPo=i(U),H7=n(U,"LI",{});var Dke=s(H7);Zge=n(Dke,"STRONG",{});var k7t=s(Zge);cPo=r(k7t,"qdqbert"),k7t.forEach(t),fPo=r(Dke," \u2014 "),IO=n(Dke,"A",{href:!0});var S7t=s(IO);mPo=r(S7t,"QDQBertForMaskedLM"),S7t.forEach(t),gPo=r(Dke," (QDQBert model)"),Dke.forEach(t),hPo=i(U),U7=n(U,"LI",{});var Gke=s(U7);ehe=n(Gke,"STRONG",{});var R7t=s(ehe);pPo=r(R7t,"reformer"),R7t.forEach(t),_Po=r(Gke," \u2014 "),NO=n(Gke,"A",{href:!0});var P7t=s(NO);uPo=r(P7t,"ReformerForMaskedLM"),P7t.forEach(t),bPo=r(Gke," (Reformer model)"),Gke.forEach(t),vPo=i(U),J7=n(U,"LI",{});var Oke=s(J7);ohe=n(Oke,"STRONG",{});var B7t=s(ohe);FPo=r(B7t,"rembert"),B7t.forEach(t),TPo=r(Oke," \u2014 "),qO=n(Oke,"A",{href:!0});var I7t=s(qO);MPo=r(I7t,"RemBertForMaskedLM"),I7t.forEach(t),EPo=r(Oke," (RemBERT model)"),Oke.forEach(t),CPo=i(U),Y7=n(U,"LI",{});var Vke=s(Y7);rhe=n(Vke,"STRONG",{});var N7t=s(rhe);wPo=r(N7t,"roberta"),N7t.forEach(t),APo=r(Vke," \u2014 "),jO=n(Vke,"A",{href:!0});var q7t=s(jO);LPo=r(q7t,"RobertaForMaskedLM"),q7t.forEach(t),yPo=r(Vke," (RoBERTa model)"),Vke.forEach(t),xPo=i(U),K7=n(U,"LI",{});var Xke=s(K7);the=n(Xke,"STRONG",{});var j7t=s(the);$Po=r(j7t,"roformer"),j7t.forEach(t),kPo=r(Xke," \u2014 "),DO=n(Xke,"A",{href:!0});var D7t=s(DO);SPo=r(D7t,"RoFormerForMaskedLM"),D7t.forEach(t),RPo=r(Xke," (RoFormer model)"),Xke.forEach(t),PPo=i(U),Z7=n(U,"LI",{});var zke=s(Z7);ahe=n(zke,"STRONG",{});var G7t=s(ahe);BPo=r(G7t,"squeezebert"),G7t.forEach(t),IPo=r(zke," \u2014 "),GO=n(zke,"A",{href:!0});var O7t=s(GO);NPo=r(O7t,"SqueezeBertForMaskedLM"),O7t.forEach(t),qPo=r(zke," (SqueezeBERT model)"),zke.forEach(t),jPo=i(U),e2=n(U,"LI",{});var Qke=s(e2);nhe=n(Qke,"STRONG",{});var V7t=s(nhe);DPo=r(V7t,"tapas"),V7t.forEach(t),GPo=r(Qke," \u2014 "),OO=n(Qke,"A",{href:!0});var X7t=s(OO);OPo=r(X7t,"TapasForMaskedLM"),X7t.forEach(t),VPo=r(Qke," (TAPAS model)"),Qke.forEach(t),XPo=i(U),o2=n(U,"LI",{});var Wke=s(o2);she=n(Wke,"STRONG",{});var z7t=s(she);zPo=r(z7t,"wav2vec2"),z7t.forEach(t),QPo=r(Wke," \u2014 "),lhe=n(Wke,"CODE",{});var Q7t=s(lhe);WPo=r(Q7t,"Wav2Vec2ForMaskedLM"),Q7t.forEach(t),HPo=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),UPo=i(U),r2=n(U,"LI",{});var Hke=s(r2);ihe=n(Hke,"STRONG",{});var W7t=s(ihe);JPo=r(W7t,"xlm"),W7t.forEach(t),YPo=r(Hke," \u2014 "),VO=n(Hke,"A",{href:!0});var H7t=s(VO);KPo=r(H7t,"XLMWithLMHeadModel"),H7t.forEach(t),ZPo=r(Hke," (XLM model)"),Hke.forEach(t),eBo=i(U),t2=n(U,"LI",{});var Uke=s(t2);dhe=n(Uke,"STRONG",{});var U7t=s(dhe);oBo=r(U7t,"xlm-roberta"),U7t.forEach(t),rBo=r(Uke," \u2014 "),XO=n(Uke,"A",{href:!0});var J7t=s(XO);tBo=r(J7t,"XLMRobertaForMaskedLM"),J7t.forEach(t),aBo=r(Uke," (XLM-RoBERTa model)"),Uke.forEach(t),nBo=i(U),a2=n(U,"LI",{});var Jke=s(a2);che=n(Jke,"STRONG",{});var Y7t=s(che);sBo=r(Y7t,"xlm-roberta-xl"),Y7t.forEach(t),lBo=r(Jke," \u2014 "),zO=n(Jke,"A",{href:!0});var K7t=s(zO);iBo=r(K7t,"XLMRobertaXLForMaskedLM"),K7t.forEach(t),dBo=r(Jke," (XLM-RoBERTa-XL model)"),Jke.forEach(t),cBo=i(U),n2=n(U,"LI",{});var Yke=s(n2);fhe=n(Yke,"STRONG",{});var Z7t=s(fhe);fBo=r(Z7t,"yoso"),Z7t.forEach(t),mBo=r(Yke," \u2014 "),QO=n(Yke,"A",{href:!0});var e2t=s(QO);gBo=r(e2t,"YosoForMaskedLM"),e2t.forEach(t),hBo=r(Yke," (YOSO model)"),Yke.forEach(t),U.forEach(t),pBo=i(la),s2=n(la,"P",{});var Kke=s(s2);_Bo=r(Kke,"The model is set in evaluation mode by default using "),mhe=n(Kke,"CODE",{});var o2t=s(mhe);uBo=r(o2t,"model.eval()"),o2t.forEach(t),bBo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(Kke,"CODE",{});var r2t=s(ghe);vBo=r(r2t,"model.train()"),r2t.forEach(t),Kke.forEach(t),FBo=i(la),T(l2.$$.fragment,la),la.forEach(t),tl.forEach(t),KOe=i(f),Ui=n(f,"H2",{class:!0});var aze=s(Ui);i2=n(aze,"A",{id:!0,class:!0,href:!0});var t2t=s(i2);hhe=n(t2t,"SPAN",{});var a2t=s(hhe);T(Sy.$$.fragment,a2t),a2t.forEach(t),t2t.forEach(t),TBo=i(aze),phe=n(aze,"SPAN",{});var n2t=s(phe);MBo=r(n2t,"AutoModelForSeq2SeqLM"),n2t.forEach(t),aze.forEach(t),ZOe=i(f),Ro=n(f,"DIV",{class:!0});var al=s(Ro);T(Ry.$$.fragment,al),EBo=i(al),Ji=n(al,"P",{});var Zoe=s(Ji);CBo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WO=n(Zoe,"A",{href:!0});var s2t=s(WO);wBo=r(s2t,"from_pretrained()"),s2t.forEach(t),ABo=r(Zoe," class method or the "),HO=n(Zoe,"A",{href:!0});var l2t=s(HO);LBo=r(l2t,"from_config()"),l2t.forEach(t),yBo=r(Zoe,` class
method.`),Zoe.forEach(t),xBo=i(al),Py=n(al,"P",{});var nze=s(Py);$Bo=r(nze,"This class cannot be instantiated directly using "),_he=n(nze,"CODE",{});var i2t=s(_he);kBo=r(i2t,"__init__()"),i2t.forEach(t),SBo=r(nze," (throws an error)."),nze.forEach(t),RBo=i(al),dt=n(al,"DIV",{class:!0});var Jw=s(dt);T(By.$$.fragment,Jw),PBo=i(Jw),uhe=n(Jw,"P",{});var d2t=s(uhe);BBo=r(d2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d2t.forEach(t),IBo=i(Jw),Yi=n(Jw,"P",{});var ere=s(Yi);NBo=r(ere,`Note:
Loading a model from its configuration file does `),bhe=n(ere,"STRONG",{});var c2t=s(bhe);qBo=r(c2t,"not"),c2t.forEach(t),jBo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(ere,"A",{href:!0});var f2t=s(UO);DBo=r(f2t,"from_pretrained()"),f2t.forEach(t),GBo=r(ere," to load the model weights."),ere.forEach(t),OBo=i(Jw),T(d2.$$.fragment,Jw),Jw.forEach(t),VBo=i(al),eo=n(al,"DIV",{class:!0});var ia=s(eo);T(Iy.$$.fragment,ia),XBo=i(ia),vhe=n(ia,"P",{});var m2t=s(vhe);zBo=r(m2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m2t.forEach(t),QBo=i(ia),qa=n(ia,"P",{});var Yw=s(qa);WBo=r(Yw,"The model class to instantiate is selected based on the "),Fhe=n(Yw,"CODE",{});var g2t=s(Fhe);HBo=r(g2t,"model_type"),g2t.forEach(t),UBo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),The=n(Yw,"CODE",{});var h2t=s(The);JBo=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),YBo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(Yw,"CODE",{});var p2t=s(Mhe);KBo=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),ZBo=r(Yw,":"),Yw.forEach(t),eIo=i(ia),pe=n(ia,"UL",{});var be=s(pe);c2=n(be,"LI",{});var Zke=s(c2);Ehe=n(Zke,"STRONG",{});var _2t=s(Ehe);oIo=r(_2t,"bart"),_2t.forEach(t),rIo=r(Zke," \u2014 "),JO=n(Zke,"A",{href:!0});var u2t=s(JO);tIo=r(u2t,"BartForConditionalGeneration"),u2t.forEach(t),aIo=r(Zke," (BART model)"),Zke.forEach(t),nIo=i(be),f2=n(be,"LI",{});var eSe=s(f2);Che=n(eSe,"STRONG",{});var b2t=s(Che);sIo=r(b2t,"bigbird_pegasus"),b2t.forEach(t),lIo=r(eSe," \u2014 "),YO=n(eSe,"A",{href:!0});var v2t=s(YO);iIo=r(v2t,"BigBirdPegasusForConditionalGeneration"),v2t.forEach(t),dIo=r(eSe," (BigBird-Pegasus model)"),eSe.forEach(t),cIo=i(be),m2=n(be,"LI",{});var oSe=s(m2);whe=n(oSe,"STRONG",{});var F2t=s(whe);fIo=r(F2t,"blenderbot"),F2t.forEach(t),mIo=r(oSe," \u2014 "),KO=n(oSe,"A",{href:!0});var T2t=s(KO);gIo=r(T2t,"BlenderbotForConditionalGeneration"),T2t.forEach(t),hIo=r(oSe," (Blenderbot model)"),oSe.forEach(t),pIo=i(be),g2=n(be,"LI",{});var rSe=s(g2);Ahe=n(rSe,"STRONG",{});var M2t=s(Ahe);_Io=r(M2t,"blenderbot-small"),M2t.forEach(t),uIo=r(rSe," \u2014 "),ZO=n(rSe,"A",{href:!0});var E2t=s(ZO);bIo=r(E2t,"BlenderbotSmallForConditionalGeneration"),E2t.forEach(t),vIo=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),FIo=i(be),h2=n(be,"LI",{});var tSe=s(h2);Lhe=n(tSe,"STRONG",{});var C2t=s(Lhe);TIo=r(C2t,"encoder-decoder"),C2t.forEach(t),MIo=r(tSe," \u2014 "),eV=n(tSe,"A",{href:!0});var w2t=s(eV);EIo=r(w2t,"EncoderDecoderModel"),w2t.forEach(t),CIo=r(tSe," (Encoder decoder model)"),tSe.forEach(t),wIo=i(be),p2=n(be,"LI",{});var aSe=s(p2);yhe=n(aSe,"STRONG",{});var A2t=s(yhe);AIo=r(A2t,"fsmt"),A2t.forEach(t),LIo=r(aSe," \u2014 "),oV=n(aSe,"A",{href:!0});var L2t=s(oV);yIo=r(L2t,"FSMTForConditionalGeneration"),L2t.forEach(t),xIo=r(aSe," (FairSeq Machine-Translation model)"),aSe.forEach(t),$Io=i(be),_2=n(be,"LI",{});var nSe=s(_2);xhe=n(nSe,"STRONG",{});var y2t=s(xhe);kIo=r(y2t,"led"),y2t.forEach(t),SIo=r(nSe," \u2014 "),rV=n(nSe,"A",{href:!0});var x2t=s(rV);RIo=r(x2t,"LEDForConditionalGeneration"),x2t.forEach(t),PIo=r(nSe," (LED model)"),nSe.forEach(t),BIo=i(be),u2=n(be,"LI",{});var sSe=s(u2);$he=n(sSe,"STRONG",{});var $2t=s($he);IIo=r($2t,"longt5"),$2t.forEach(t),NIo=r(sSe," \u2014 "),tV=n(sSe,"A",{href:!0});var k2t=s(tV);qIo=r(k2t,"LongT5ForConditionalGeneration"),k2t.forEach(t),jIo=r(sSe," (LongT5 model)"),sSe.forEach(t),DIo=i(be),b2=n(be,"LI",{});var lSe=s(b2);khe=n(lSe,"STRONG",{});var S2t=s(khe);GIo=r(S2t,"m2m_100"),S2t.forEach(t),OIo=r(lSe," \u2014 "),aV=n(lSe,"A",{href:!0});var R2t=s(aV);VIo=r(R2t,"M2M100ForConditionalGeneration"),R2t.forEach(t),XIo=r(lSe," (M2M100 model)"),lSe.forEach(t),zIo=i(be),v2=n(be,"LI",{});var iSe=s(v2);She=n(iSe,"STRONG",{});var P2t=s(She);QIo=r(P2t,"marian"),P2t.forEach(t),WIo=r(iSe," \u2014 "),nV=n(iSe,"A",{href:!0});var B2t=s(nV);HIo=r(B2t,"MarianMTModel"),B2t.forEach(t),UIo=r(iSe," (Marian model)"),iSe.forEach(t),JIo=i(be),F2=n(be,"LI",{});var dSe=s(F2);Rhe=n(dSe,"STRONG",{});var I2t=s(Rhe);YIo=r(I2t,"mbart"),I2t.forEach(t),KIo=r(dSe," \u2014 "),sV=n(dSe,"A",{href:!0});var N2t=s(sV);ZIo=r(N2t,"MBartForConditionalGeneration"),N2t.forEach(t),eNo=r(dSe," (mBART model)"),dSe.forEach(t),oNo=i(be),T2=n(be,"LI",{});var cSe=s(T2);Phe=n(cSe,"STRONG",{});var q2t=s(Phe);rNo=r(q2t,"mt5"),q2t.forEach(t),tNo=r(cSe," \u2014 "),lV=n(cSe,"A",{href:!0});var j2t=s(lV);aNo=r(j2t,"MT5ForConditionalGeneration"),j2t.forEach(t),nNo=r(cSe," (MT5 model)"),cSe.forEach(t),sNo=i(be),M2=n(be,"LI",{});var fSe=s(M2);Bhe=n(fSe,"STRONG",{});var D2t=s(Bhe);lNo=r(D2t,"pegasus"),D2t.forEach(t),iNo=r(fSe," \u2014 "),iV=n(fSe,"A",{href:!0});var G2t=s(iV);dNo=r(G2t,"PegasusForConditionalGeneration"),G2t.forEach(t),cNo=r(fSe," (Pegasus model)"),fSe.forEach(t),fNo=i(be),E2=n(be,"LI",{});var mSe=s(E2);Ihe=n(mSe,"STRONG",{});var O2t=s(Ihe);mNo=r(O2t,"plbart"),O2t.forEach(t),gNo=r(mSe," \u2014 "),dV=n(mSe,"A",{href:!0});var V2t=s(dV);hNo=r(V2t,"PLBartForConditionalGeneration"),V2t.forEach(t),pNo=r(mSe," (PLBart model)"),mSe.forEach(t),_No=i(be),C2=n(be,"LI",{});var gSe=s(C2);Nhe=n(gSe,"STRONG",{});var X2t=s(Nhe);uNo=r(X2t,"prophetnet"),X2t.forEach(t),bNo=r(gSe," \u2014 "),cV=n(gSe,"A",{href:!0});var z2t=s(cV);vNo=r(z2t,"ProphetNetForConditionalGeneration"),z2t.forEach(t),FNo=r(gSe," (ProphetNet model)"),gSe.forEach(t),TNo=i(be),w2=n(be,"LI",{});var hSe=s(w2);qhe=n(hSe,"STRONG",{});var Q2t=s(qhe);MNo=r(Q2t,"t5"),Q2t.forEach(t),ENo=r(hSe," \u2014 "),fV=n(hSe,"A",{href:!0});var W2t=s(fV);CNo=r(W2t,"T5ForConditionalGeneration"),W2t.forEach(t),wNo=r(hSe," (T5 model)"),hSe.forEach(t),ANo=i(be),A2=n(be,"LI",{});var pSe=s(A2);jhe=n(pSe,"STRONG",{});var H2t=s(jhe);LNo=r(H2t,"xlm-prophetnet"),H2t.forEach(t),yNo=r(pSe," \u2014 "),mV=n(pSe,"A",{href:!0});var U2t=s(mV);xNo=r(U2t,"XLMProphetNetForConditionalGeneration"),U2t.forEach(t),$No=r(pSe," (XLM-ProphetNet model)"),pSe.forEach(t),be.forEach(t),kNo=i(ia),L2=n(ia,"P",{});var _Se=s(L2);SNo=r(_Se,"The model is set in evaluation mode by default using "),Dhe=n(_Se,"CODE",{});var J2t=s(Dhe);RNo=r(J2t,"model.eval()"),J2t.forEach(t),PNo=r(_Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(_Se,"CODE",{});var Y2t=s(Ghe);BNo=r(Y2t,"model.train()"),Y2t.forEach(t),_Se.forEach(t),INo=i(ia),T(y2.$$.fragment,ia),ia.forEach(t),al.forEach(t),eVe=i(f),Ki=n(f,"H2",{class:!0});var sze=s(Ki);x2=n(sze,"A",{id:!0,class:!0,href:!0});var K2t=s(x2);Ohe=n(K2t,"SPAN",{});var Z2t=s(Ohe);T(Ny.$$.fragment,Z2t),Z2t.forEach(t),K2t.forEach(t),NNo=i(sze),Vhe=n(sze,"SPAN",{});var ebt=s(Vhe);qNo=r(ebt,"AutoModelForSequenceClassification"),ebt.forEach(t),sze.forEach(t),oVe=i(f),Po=n(f,"DIV",{class:!0});var nl=s(Po);T(qy.$$.fragment,nl),jNo=i(nl),Zi=n(nl,"P",{});var ore=s(Zi);DNo=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gV=n(ore,"A",{href:!0});var obt=s(gV);GNo=r(obt,"from_pretrained()"),obt.forEach(t),ONo=r(ore," class method or the "),hV=n(ore,"A",{href:!0});var rbt=s(hV);VNo=r(rbt,"from_config()"),rbt.forEach(t),XNo=r(ore,` class
method.`),ore.forEach(t),zNo=i(nl),jy=n(nl,"P",{});var lze=s(jy);QNo=r(lze,"This class cannot be instantiated directly using "),Xhe=n(lze,"CODE",{});var tbt=s(Xhe);WNo=r(tbt,"__init__()"),tbt.forEach(t),HNo=r(lze," (throws an error)."),lze.forEach(t),UNo=i(nl),ct=n(nl,"DIV",{class:!0});var Kw=s(ct);T(Dy.$$.fragment,Kw),JNo=i(Kw),zhe=n(Kw,"P",{});var abt=s(zhe);YNo=r(abt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),abt.forEach(t),KNo=i(Kw),ed=n(Kw,"P",{});var rre=s(ed);ZNo=r(rre,`Note:
Loading a model from its configuration file does `),Qhe=n(rre,"STRONG",{});var nbt=s(Qhe);eqo=r(nbt,"not"),nbt.forEach(t),oqo=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(rre,"A",{href:!0});var sbt=s(pV);rqo=r(sbt,"from_pretrained()"),sbt.forEach(t),tqo=r(rre," to load the model weights."),rre.forEach(t),aqo=i(Kw),T($2.$$.fragment,Kw),Kw.forEach(t),nqo=i(nl),oo=n(nl,"DIV",{class:!0});var da=s(oo);T(Gy.$$.fragment,da),sqo=i(da),Whe=n(da,"P",{});var lbt=s(Whe);lqo=r(lbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lbt.forEach(t),iqo=i(da),ja=n(da,"P",{});var Zw=s(ja);dqo=r(Zw,"The model class to instantiate is selected based on the "),Hhe=n(Zw,"CODE",{});var ibt=s(Hhe);cqo=r(ibt,"model_type"),ibt.forEach(t),fqo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(Zw,"CODE",{});var dbt=s(Uhe);mqo=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),gqo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(Zw,"CODE",{});var cbt=s(Jhe);hqo=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),pqo=r(Zw,":"),Zw.forEach(t),_qo=i(da),N=n(da,"UL",{});var q=s(N);k2=n(q,"LI",{});var uSe=s(k2);Yhe=n(uSe,"STRONG",{});var fbt=s(Yhe);uqo=r(fbt,"albert"),fbt.forEach(t),bqo=r(uSe," \u2014 "),_V=n(uSe,"A",{href:!0});var mbt=s(_V);vqo=r(mbt,"AlbertForSequenceClassification"),mbt.forEach(t),Fqo=r(uSe," (ALBERT model)"),uSe.forEach(t),Tqo=i(q),S2=n(q,"LI",{});var bSe=s(S2);Khe=n(bSe,"STRONG",{});var gbt=s(Khe);Mqo=r(gbt,"bart"),gbt.forEach(t),Eqo=r(bSe," \u2014 "),uV=n(bSe,"A",{href:!0});var hbt=s(uV);Cqo=r(hbt,"BartForSequenceClassification"),hbt.forEach(t),wqo=r(bSe," (BART model)"),bSe.forEach(t),Aqo=i(q),R2=n(q,"LI",{});var vSe=s(R2);Zhe=n(vSe,"STRONG",{});var pbt=s(Zhe);Lqo=r(pbt,"bert"),pbt.forEach(t),yqo=r(vSe," \u2014 "),bV=n(vSe,"A",{href:!0});var _bt=s(bV);xqo=r(_bt,"BertForSequenceClassification"),_bt.forEach(t),$qo=r(vSe," (BERT model)"),vSe.forEach(t),kqo=i(q),P2=n(q,"LI",{});var FSe=s(P2);epe=n(FSe,"STRONG",{});var ubt=s(epe);Sqo=r(ubt,"big_bird"),ubt.forEach(t),Rqo=r(FSe," \u2014 "),vV=n(FSe,"A",{href:!0});var bbt=s(vV);Pqo=r(bbt,"BigBirdForSequenceClassification"),bbt.forEach(t),Bqo=r(FSe," (BigBird model)"),FSe.forEach(t),Iqo=i(q),B2=n(q,"LI",{});var TSe=s(B2);ope=n(TSe,"STRONG",{});var vbt=s(ope);Nqo=r(vbt,"bigbird_pegasus"),vbt.forEach(t),qqo=r(TSe," \u2014 "),FV=n(TSe,"A",{href:!0});var Fbt=s(FV);jqo=r(Fbt,"BigBirdPegasusForSequenceClassification"),Fbt.forEach(t),Dqo=r(TSe," (BigBird-Pegasus model)"),TSe.forEach(t),Gqo=i(q),I2=n(q,"LI",{});var MSe=s(I2);rpe=n(MSe,"STRONG",{});var Tbt=s(rpe);Oqo=r(Tbt,"bloom"),Tbt.forEach(t),Vqo=r(MSe," \u2014 "),TV=n(MSe,"A",{href:!0});var Mbt=s(TV);Xqo=r(Mbt,"BloomForSequenceClassification"),Mbt.forEach(t),zqo=r(MSe," (BLOOM model)"),MSe.forEach(t),Qqo=i(q),N2=n(q,"LI",{});var ESe=s(N2);tpe=n(ESe,"STRONG",{});var Ebt=s(tpe);Wqo=r(Ebt,"camembert"),Ebt.forEach(t),Hqo=r(ESe," \u2014 "),MV=n(ESe,"A",{href:!0});var Cbt=s(MV);Uqo=r(Cbt,"CamembertForSequenceClassification"),Cbt.forEach(t),Jqo=r(ESe," (CamemBERT model)"),ESe.forEach(t),Yqo=i(q),q2=n(q,"LI",{});var CSe=s(q2);ape=n(CSe,"STRONG",{});var wbt=s(ape);Kqo=r(wbt,"canine"),wbt.forEach(t),Zqo=r(CSe," \u2014 "),EV=n(CSe,"A",{href:!0});var Abt=s(EV);ejo=r(Abt,"CanineForSequenceClassification"),Abt.forEach(t),ojo=r(CSe," (CANINE model)"),CSe.forEach(t),rjo=i(q),j2=n(q,"LI",{});var wSe=s(j2);npe=n(wSe,"STRONG",{});var Lbt=s(npe);tjo=r(Lbt,"convbert"),Lbt.forEach(t),ajo=r(wSe," \u2014 "),CV=n(wSe,"A",{href:!0});var ybt=s(CV);njo=r(ybt,"ConvBertForSequenceClassification"),ybt.forEach(t),sjo=r(wSe," (ConvBERT model)"),wSe.forEach(t),ljo=i(q),D2=n(q,"LI",{});var ASe=s(D2);spe=n(ASe,"STRONG",{});var xbt=s(spe);ijo=r(xbt,"ctrl"),xbt.forEach(t),djo=r(ASe," \u2014 "),wV=n(ASe,"A",{href:!0});var $bt=s(wV);cjo=r($bt,"CTRLForSequenceClassification"),$bt.forEach(t),fjo=r(ASe," (CTRL model)"),ASe.forEach(t),mjo=i(q),G2=n(q,"LI",{});var LSe=s(G2);lpe=n(LSe,"STRONG",{});var kbt=s(lpe);gjo=r(kbt,"data2vec-text"),kbt.forEach(t),hjo=r(LSe," \u2014 "),AV=n(LSe,"A",{href:!0});var Sbt=s(AV);pjo=r(Sbt,"Data2VecTextForSequenceClassification"),Sbt.forEach(t),_jo=r(LSe," (Data2VecText model)"),LSe.forEach(t),ujo=i(q),O2=n(q,"LI",{});var ySe=s(O2);ipe=n(ySe,"STRONG",{});var Rbt=s(ipe);bjo=r(Rbt,"deberta"),Rbt.forEach(t),vjo=r(ySe," \u2014 "),LV=n(ySe,"A",{href:!0});var Pbt=s(LV);Fjo=r(Pbt,"DebertaForSequenceClassification"),Pbt.forEach(t),Tjo=r(ySe," (DeBERTa model)"),ySe.forEach(t),Mjo=i(q),V2=n(q,"LI",{});var xSe=s(V2);dpe=n(xSe,"STRONG",{});var Bbt=s(dpe);Ejo=r(Bbt,"deberta-v2"),Bbt.forEach(t),Cjo=r(xSe," \u2014 "),yV=n(xSe,"A",{href:!0});var Ibt=s(yV);wjo=r(Ibt,"DebertaV2ForSequenceClassification"),Ibt.forEach(t),Ajo=r(xSe," (DeBERTa-v2 model)"),xSe.forEach(t),Ljo=i(q),X2=n(q,"LI",{});var $Se=s(X2);cpe=n($Se,"STRONG",{});var Nbt=s(cpe);yjo=r(Nbt,"distilbert"),Nbt.forEach(t),xjo=r($Se," \u2014 "),xV=n($Se,"A",{href:!0});var qbt=s(xV);$jo=r(qbt,"DistilBertForSequenceClassification"),qbt.forEach(t),kjo=r($Se," (DistilBERT model)"),$Se.forEach(t),Sjo=i(q),z2=n(q,"LI",{});var kSe=s(z2);fpe=n(kSe,"STRONG",{});var jbt=s(fpe);Rjo=r(jbt,"electra"),jbt.forEach(t),Pjo=r(kSe," \u2014 "),$V=n(kSe,"A",{href:!0});var Dbt=s($V);Bjo=r(Dbt,"ElectraForSequenceClassification"),Dbt.forEach(t),Ijo=r(kSe," (ELECTRA model)"),kSe.forEach(t),Njo=i(q),Q2=n(q,"LI",{});var SSe=s(Q2);mpe=n(SSe,"STRONG",{});var Gbt=s(mpe);qjo=r(Gbt,"flaubert"),Gbt.forEach(t),jjo=r(SSe," \u2014 "),kV=n(SSe,"A",{href:!0});var Obt=s(kV);Djo=r(Obt,"FlaubertForSequenceClassification"),Obt.forEach(t),Gjo=r(SSe," (FlauBERT model)"),SSe.forEach(t),Ojo=i(q),W2=n(q,"LI",{});var RSe=s(W2);gpe=n(RSe,"STRONG",{});var Vbt=s(gpe);Vjo=r(Vbt,"fnet"),Vbt.forEach(t),Xjo=r(RSe," \u2014 "),SV=n(RSe,"A",{href:!0});var Xbt=s(SV);zjo=r(Xbt,"FNetForSequenceClassification"),Xbt.forEach(t),Qjo=r(RSe," (FNet model)"),RSe.forEach(t),Wjo=i(q),H2=n(q,"LI",{});var PSe=s(H2);hpe=n(PSe,"STRONG",{});var zbt=s(hpe);Hjo=r(zbt,"funnel"),zbt.forEach(t),Ujo=r(PSe," \u2014 "),RV=n(PSe,"A",{href:!0});var Qbt=s(RV);Jjo=r(Qbt,"FunnelForSequenceClassification"),Qbt.forEach(t),Yjo=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),Kjo=i(q),U2=n(q,"LI",{});var BSe=s(U2);ppe=n(BSe,"STRONG",{});var Wbt=s(ppe);Zjo=r(Wbt,"gpt2"),Wbt.forEach(t),eDo=r(BSe," \u2014 "),PV=n(BSe,"A",{href:!0});var Hbt=s(PV);oDo=r(Hbt,"GPT2ForSequenceClassification"),Hbt.forEach(t),rDo=r(BSe," (OpenAI GPT-2 model)"),BSe.forEach(t),tDo=i(q),J2=n(q,"LI",{});var ISe=s(J2);_pe=n(ISe,"STRONG",{});var Ubt=s(_pe);aDo=r(Ubt,"gpt_neo"),Ubt.forEach(t),nDo=r(ISe," \u2014 "),BV=n(ISe,"A",{href:!0});var Jbt=s(BV);sDo=r(Jbt,"GPTNeoForSequenceClassification"),Jbt.forEach(t),lDo=r(ISe," (GPT Neo model)"),ISe.forEach(t),iDo=i(q),Y2=n(q,"LI",{});var NSe=s(Y2);upe=n(NSe,"STRONG",{});var Ybt=s(upe);dDo=r(Ybt,"gptj"),Ybt.forEach(t),cDo=r(NSe," \u2014 "),IV=n(NSe,"A",{href:!0});var Kbt=s(IV);fDo=r(Kbt,"GPTJForSequenceClassification"),Kbt.forEach(t),mDo=r(NSe," (GPT-J model)"),NSe.forEach(t),gDo=i(q),K2=n(q,"LI",{});var qSe=s(K2);bpe=n(qSe,"STRONG",{});var Zbt=s(bpe);hDo=r(Zbt,"ibert"),Zbt.forEach(t),pDo=r(qSe," \u2014 "),NV=n(qSe,"A",{href:!0});var evt=s(NV);_Do=r(evt,"IBertForSequenceClassification"),evt.forEach(t),uDo=r(qSe," (I-BERT model)"),qSe.forEach(t),bDo=i(q),Z2=n(q,"LI",{});var jSe=s(Z2);vpe=n(jSe,"STRONG",{});var ovt=s(vpe);vDo=r(ovt,"layoutlm"),ovt.forEach(t),FDo=r(jSe," \u2014 "),qV=n(jSe,"A",{href:!0});var rvt=s(qV);TDo=r(rvt,"LayoutLMForSequenceClassification"),rvt.forEach(t),MDo=r(jSe," (LayoutLM model)"),jSe.forEach(t),EDo=i(q),eb=n(q,"LI",{});var DSe=s(eb);Fpe=n(DSe,"STRONG",{});var tvt=s(Fpe);CDo=r(tvt,"layoutlmv2"),tvt.forEach(t),wDo=r(DSe," \u2014 "),jV=n(DSe,"A",{href:!0});var avt=s(jV);ADo=r(avt,"LayoutLMv2ForSequenceClassification"),avt.forEach(t),LDo=r(DSe," (LayoutLMv2 model)"),DSe.forEach(t),yDo=i(q),ob=n(q,"LI",{});var GSe=s(ob);Tpe=n(GSe,"STRONG",{});var nvt=s(Tpe);xDo=r(nvt,"layoutlmv3"),nvt.forEach(t),$Do=r(GSe," \u2014 "),DV=n(GSe,"A",{href:!0});var svt=s(DV);kDo=r(svt,"LayoutLMv3ForSequenceClassification"),svt.forEach(t),SDo=r(GSe," (LayoutLMv3 model)"),GSe.forEach(t),RDo=i(q),rb=n(q,"LI",{});var OSe=s(rb);Mpe=n(OSe,"STRONG",{});var lvt=s(Mpe);PDo=r(lvt,"led"),lvt.forEach(t),BDo=r(OSe," \u2014 "),GV=n(OSe,"A",{href:!0});var ivt=s(GV);IDo=r(ivt,"LEDForSequenceClassification"),ivt.forEach(t),NDo=r(OSe," (LED model)"),OSe.forEach(t),qDo=i(q),tb=n(q,"LI",{});var VSe=s(tb);Epe=n(VSe,"STRONG",{});var dvt=s(Epe);jDo=r(dvt,"longformer"),dvt.forEach(t),DDo=r(VSe," \u2014 "),OV=n(VSe,"A",{href:!0});var cvt=s(OV);GDo=r(cvt,"LongformerForSequenceClassification"),cvt.forEach(t),ODo=r(VSe," (Longformer model)"),VSe.forEach(t),VDo=i(q),ab=n(q,"LI",{});var XSe=s(ab);Cpe=n(XSe,"STRONG",{});var fvt=s(Cpe);XDo=r(fvt,"mbart"),fvt.forEach(t),zDo=r(XSe," \u2014 "),VV=n(XSe,"A",{href:!0});var mvt=s(VV);QDo=r(mvt,"MBartForSequenceClassification"),mvt.forEach(t),WDo=r(XSe," (mBART model)"),XSe.forEach(t),HDo=i(q),nb=n(q,"LI",{});var zSe=s(nb);wpe=n(zSe,"STRONG",{});var gvt=s(wpe);UDo=r(gvt,"mctct"),gvt.forEach(t),JDo=r(zSe," \u2014 "),XV=n(zSe,"A",{href:!0});var hvt=s(XV);YDo=r(hvt,"MCTCTForSequenceClassification"),hvt.forEach(t),KDo=r(zSe," (M-CTC-T model)"),zSe.forEach(t),ZDo=i(q),sb=n(q,"LI",{});var QSe=s(sb);Ape=n(QSe,"STRONG",{});var pvt=s(Ape);eGo=r(pvt,"megatron-bert"),pvt.forEach(t),oGo=r(QSe," \u2014 "),zV=n(QSe,"A",{href:!0});var _vt=s(zV);rGo=r(_vt,"MegatronBertForSequenceClassification"),_vt.forEach(t),tGo=r(QSe," (Megatron-BERT model)"),QSe.forEach(t),aGo=i(q),lb=n(q,"LI",{});var WSe=s(lb);Lpe=n(WSe,"STRONG",{});var uvt=s(Lpe);nGo=r(uvt,"mobilebert"),uvt.forEach(t),sGo=r(WSe," \u2014 "),QV=n(WSe,"A",{href:!0});var bvt=s(QV);lGo=r(bvt,"MobileBertForSequenceClassification"),bvt.forEach(t),iGo=r(WSe," (MobileBERT model)"),WSe.forEach(t),dGo=i(q),ib=n(q,"LI",{});var HSe=s(ib);ype=n(HSe,"STRONG",{});var vvt=s(ype);cGo=r(vvt,"mpnet"),vvt.forEach(t),fGo=r(HSe," \u2014 "),WV=n(HSe,"A",{href:!0});var Fvt=s(WV);mGo=r(Fvt,"MPNetForSequenceClassification"),Fvt.forEach(t),gGo=r(HSe," (MPNet model)"),HSe.forEach(t),hGo=i(q),db=n(q,"LI",{});var USe=s(db);xpe=n(USe,"STRONG",{});var Tvt=s(xpe);pGo=r(Tvt,"nezha"),Tvt.forEach(t),_Go=r(USe," \u2014 "),HV=n(USe,"A",{href:!0});var Mvt=s(HV);uGo=r(Mvt,"NezhaForSequenceClassification"),Mvt.forEach(t),bGo=r(USe," (Nezha model)"),USe.forEach(t),vGo=i(q),cb=n(q,"LI",{});var JSe=s(cb);$pe=n(JSe,"STRONG",{});var Evt=s($pe);FGo=r(Evt,"nystromformer"),Evt.forEach(t),TGo=r(JSe," \u2014 "),UV=n(JSe,"A",{href:!0});var Cvt=s(UV);MGo=r(Cvt,"NystromformerForSequenceClassification"),Cvt.forEach(t),EGo=r(JSe," (Nystr\xF6mformer model)"),JSe.forEach(t),CGo=i(q),fb=n(q,"LI",{});var YSe=s(fb);kpe=n(YSe,"STRONG",{});var wvt=s(kpe);wGo=r(wvt,"openai-gpt"),wvt.forEach(t),AGo=r(YSe," \u2014 "),JV=n(YSe,"A",{href:!0});var Avt=s(JV);LGo=r(Avt,"OpenAIGPTForSequenceClassification"),Avt.forEach(t),yGo=r(YSe," (OpenAI GPT model)"),YSe.forEach(t),xGo=i(q),mb=n(q,"LI",{});var KSe=s(mb);Spe=n(KSe,"STRONG",{});var Lvt=s(Spe);$Go=r(Lvt,"perceiver"),Lvt.forEach(t),kGo=r(KSe," \u2014 "),YV=n(KSe,"A",{href:!0});var yvt=s(YV);SGo=r(yvt,"PerceiverForSequenceClassification"),yvt.forEach(t),RGo=r(KSe," (Perceiver model)"),KSe.forEach(t),PGo=i(q),gb=n(q,"LI",{});var ZSe=s(gb);Rpe=n(ZSe,"STRONG",{});var xvt=s(Rpe);BGo=r(xvt,"plbart"),xvt.forEach(t),IGo=r(ZSe," \u2014 "),KV=n(ZSe,"A",{href:!0});var $vt=s(KV);NGo=r($vt,"PLBartForSequenceClassification"),$vt.forEach(t),qGo=r(ZSe," (PLBart model)"),ZSe.forEach(t),jGo=i(q),hb=n(q,"LI",{});var eRe=s(hb);Ppe=n(eRe,"STRONG",{});var kvt=s(Ppe);DGo=r(kvt,"qdqbert"),kvt.forEach(t),GGo=r(eRe," \u2014 "),ZV=n(eRe,"A",{href:!0});var Svt=s(ZV);OGo=r(Svt,"QDQBertForSequenceClassification"),Svt.forEach(t),VGo=r(eRe," (QDQBert model)"),eRe.forEach(t),XGo=i(q),pb=n(q,"LI",{});var oRe=s(pb);Bpe=n(oRe,"STRONG",{});var Rvt=s(Bpe);zGo=r(Rvt,"reformer"),Rvt.forEach(t),QGo=r(oRe," \u2014 "),eX=n(oRe,"A",{href:!0});var Pvt=s(eX);WGo=r(Pvt,"ReformerForSequenceClassification"),Pvt.forEach(t),HGo=r(oRe," (Reformer model)"),oRe.forEach(t),UGo=i(q),_b=n(q,"LI",{});var rRe=s(_b);Ipe=n(rRe,"STRONG",{});var Bvt=s(Ipe);JGo=r(Bvt,"rembert"),Bvt.forEach(t),YGo=r(rRe," \u2014 "),oX=n(rRe,"A",{href:!0});var Ivt=s(oX);KGo=r(Ivt,"RemBertForSequenceClassification"),Ivt.forEach(t),ZGo=r(rRe," (RemBERT model)"),rRe.forEach(t),eOo=i(q),ub=n(q,"LI",{});var tRe=s(ub);Npe=n(tRe,"STRONG",{});var Nvt=s(Npe);oOo=r(Nvt,"roberta"),Nvt.forEach(t),rOo=r(tRe," \u2014 "),rX=n(tRe,"A",{href:!0});var qvt=s(rX);tOo=r(qvt,"RobertaForSequenceClassification"),qvt.forEach(t),aOo=r(tRe," (RoBERTa model)"),tRe.forEach(t),nOo=i(q),bb=n(q,"LI",{});var aRe=s(bb);qpe=n(aRe,"STRONG",{});var jvt=s(qpe);sOo=r(jvt,"roformer"),jvt.forEach(t),lOo=r(aRe," \u2014 "),tX=n(aRe,"A",{href:!0});var Dvt=s(tX);iOo=r(Dvt,"RoFormerForSequenceClassification"),Dvt.forEach(t),dOo=r(aRe," (RoFormer model)"),aRe.forEach(t),cOo=i(q),vb=n(q,"LI",{});var nRe=s(vb);jpe=n(nRe,"STRONG",{});var Gvt=s(jpe);fOo=r(Gvt,"squeezebert"),Gvt.forEach(t),mOo=r(nRe," \u2014 "),aX=n(nRe,"A",{href:!0});var Ovt=s(aX);gOo=r(Ovt,"SqueezeBertForSequenceClassification"),Ovt.forEach(t),hOo=r(nRe," (SqueezeBERT model)"),nRe.forEach(t),pOo=i(q),Fb=n(q,"LI",{});var sRe=s(Fb);Dpe=n(sRe,"STRONG",{});var Vvt=s(Dpe);_Oo=r(Vvt,"tapas"),Vvt.forEach(t),uOo=r(sRe," \u2014 "),nX=n(sRe,"A",{href:!0});var Xvt=s(nX);bOo=r(Xvt,"TapasForSequenceClassification"),Xvt.forEach(t),vOo=r(sRe," (TAPAS model)"),sRe.forEach(t),FOo=i(q),Tb=n(q,"LI",{});var lRe=s(Tb);Gpe=n(lRe,"STRONG",{});var zvt=s(Gpe);TOo=r(zvt,"transfo-xl"),zvt.forEach(t),MOo=r(lRe," \u2014 "),sX=n(lRe,"A",{href:!0});var Qvt=s(sX);EOo=r(Qvt,"TransfoXLForSequenceClassification"),Qvt.forEach(t),COo=r(lRe," (Transformer-XL model)"),lRe.forEach(t),wOo=i(q),Mb=n(q,"LI",{});var iRe=s(Mb);Ope=n(iRe,"STRONG",{});var Wvt=s(Ope);AOo=r(Wvt,"xlm"),Wvt.forEach(t),LOo=r(iRe," \u2014 "),lX=n(iRe,"A",{href:!0});var Hvt=s(lX);yOo=r(Hvt,"XLMForSequenceClassification"),Hvt.forEach(t),xOo=r(iRe," (XLM model)"),iRe.forEach(t),$Oo=i(q),Eb=n(q,"LI",{});var dRe=s(Eb);Vpe=n(dRe,"STRONG",{});var Uvt=s(Vpe);kOo=r(Uvt,"xlm-roberta"),Uvt.forEach(t),SOo=r(dRe," \u2014 "),iX=n(dRe,"A",{href:!0});var Jvt=s(iX);ROo=r(Jvt,"XLMRobertaForSequenceClassification"),Jvt.forEach(t),POo=r(dRe," (XLM-RoBERTa model)"),dRe.forEach(t),BOo=i(q),Cb=n(q,"LI",{});var cRe=s(Cb);Xpe=n(cRe,"STRONG",{});var Yvt=s(Xpe);IOo=r(Yvt,"xlm-roberta-xl"),Yvt.forEach(t),NOo=r(cRe," \u2014 "),dX=n(cRe,"A",{href:!0});var Kvt=s(dX);qOo=r(Kvt,"XLMRobertaXLForSequenceClassification"),Kvt.forEach(t),jOo=r(cRe," (XLM-RoBERTa-XL model)"),cRe.forEach(t),DOo=i(q),wb=n(q,"LI",{});var fRe=s(wb);zpe=n(fRe,"STRONG",{});var Zvt=s(zpe);GOo=r(Zvt,"xlnet"),Zvt.forEach(t),OOo=r(fRe," \u2014 "),cX=n(fRe,"A",{href:!0});var eFt=s(cX);VOo=r(eFt,"XLNetForSequenceClassification"),eFt.forEach(t),XOo=r(fRe," (XLNet model)"),fRe.forEach(t),zOo=i(q),Ab=n(q,"LI",{});var mRe=s(Ab);Qpe=n(mRe,"STRONG",{});var oFt=s(Qpe);QOo=r(oFt,"yoso"),oFt.forEach(t),WOo=r(mRe," \u2014 "),fX=n(mRe,"A",{href:!0});var rFt=s(fX);HOo=r(rFt,"YosoForSequenceClassification"),rFt.forEach(t),UOo=r(mRe," (YOSO model)"),mRe.forEach(t),q.forEach(t),JOo=i(da),Lb=n(da,"P",{});var gRe=s(Lb);YOo=r(gRe,"The model is set in evaluation mode by default using "),Wpe=n(gRe,"CODE",{});var tFt=s(Wpe);KOo=r(tFt,"model.eval()"),tFt.forEach(t),ZOo=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(gRe,"CODE",{});var aFt=s(Hpe);eVo=r(aFt,"model.train()"),aFt.forEach(t),gRe.forEach(t),oVo=i(da),T(yb.$$.fragment,da),da.forEach(t),nl.forEach(t),rVe=i(f),od=n(f,"H2",{class:!0});var ize=s(od);xb=n(ize,"A",{id:!0,class:!0,href:!0});var nFt=s(xb);Upe=n(nFt,"SPAN",{});var sFt=s(Upe);T(Oy.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),rVo=i(ize),Jpe=n(ize,"SPAN",{});var lFt=s(Jpe);tVo=r(lFt,"AutoModelForMultipleChoice"),lFt.forEach(t),ize.forEach(t),tVe=i(f),Bo=n(f,"DIV",{class:!0});var sl=s(Bo);T(Vy.$$.fragment,sl),aVo=i(sl),rd=n(sl,"P",{});var tre=s(rd);nVo=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mX=n(tre,"A",{href:!0});var iFt=s(mX);sVo=r(iFt,"from_pretrained()"),iFt.forEach(t),lVo=r(tre," class method or the "),gX=n(tre,"A",{href:!0});var dFt=s(gX);iVo=r(dFt,"from_config()"),dFt.forEach(t),dVo=r(tre,` class
method.`),tre.forEach(t),cVo=i(sl),Xy=n(sl,"P",{});var dze=s(Xy);fVo=r(dze,"This class cannot be instantiated directly using "),Ype=n(dze,"CODE",{});var cFt=s(Ype);mVo=r(cFt,"__init__()"),cFt.forEach(t),gVo=r(dze," (throws an error)."),dze.forEach(t),hVo=i(sl),ft=n(sl,"DIV",{class:!0});var eA=s(ft);T(zy.$$.fragment,eA),pVo=i(eA),Kpe=n(eA,"P",{});var fFt=s(Kpe);_Vo=r(fFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fFt.forEach(t),uVo=i(eA),td=n(eA,"P",{});var are=s(td);bVo=r(are,`Note:
Loading a model from its configuration file does `),Zpe=n(are,"STRONG",{});var mFt=s(Zpe);vVo=r(mFt,"not"),mFt.forEach(t),FVo=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(are,"A",{href:!0});var gFt=s(hX);TVo=r(gFt,"from_pretrained()"),gFt.forEach(t),MVo=r(are," to load the model weights."),are.forEach(t),EVo=i(eA),T($b.$$.fragment,eA),eA.forEach(t),CVo=i(sl),ro=n(sl,"DIV",{class:!0});var ca=s(ro);T(Qy.$$.fragment,ca),wVo=i(ca),e_e=n(ca,"P",{});var hFt=s(e_e);AVo=r(hFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hFt.forEach(t),LVo=i(ca),Da=n(ca,"P",{});var oA=s(Da);yVo=r(oA,"The model class to instantiate is selected based on the "),o_e=n(oA,"CODE",{});var pFt=s(o_e);xVo=r(pFt,"model_type"),pFt.forEach(t),$Vo=r(oA,` property of the config object (either
passed as an argument or loaded from `),r_e=n(oA,"CODE",{});var _Ft=s(r_e);kVo=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),SVo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(oA,"CODE",{});var uFt=s(t_e);RVo=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),PVo=r(oA,":"),oA.forEach(t),BVo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);kb=n(ee,"LI",{});var hRe=s(kb);a_e=n(hRe,"STRONG",{});var bFt=s(a_e);IVo=r(bFt,"albert"),bFt.forEach(t),NVo=r(hRe," \u2014 "),pX=n(hRe,"A",{href:!0});var vFt=s(pX);qVo=r(vFt,"AlbertForMultipleChoice"),vFt.forEach(t),jVo=r(hRe," (ALBERT model)"),hRe.forEach(t),DVo=i(ee),Sb=n(ee,"LI",{});var pRe=s(Sb);n_e=n(pRe,"STRONG",{});var FFt=s(n_e);GVo=r(FFt,"bert"),FFt.forEach(t),OVo=r(pRe," \u2014 "),_X=n(pRe,"A",{href:!0});var TFt=s(_X);VVo=r(TFt,"BertForMultipleChoice"),TFt.forEach(t),XVo=r(pRe," (BERT model)"),pRe.forEach(t),zVo=i(ee),Rb=n(ee,"LI",{});var _Re=s(Rb);s_e=n(_Re,"STRONG",{});var MFt=s(s_e);QVo=r(MFt,"big_bird"),MFt.forEach(t),WVo=r(_Re," \u2014 "),uX=n(_Re,"A",{href:!0});var EFt=s(uX);HVo=r(EFt,"BigBirdForMultipleChoice"),EFt.forEach(t),UVo=r(_Re," (BigBird model)"),_Re.forEach(t),JVo=i(ee),Pb=n(ee,"LI",{});var uRe=s(Pb);l_e=n(uRe,"STRONG",{});var CFt=s(l_e);YVo=r(CFt,"camembert"),CFt.forEach(t),KVo=r(uRe," \u2014 "),bX=n(uRe,"A",{href:!0});var wFt=s(bX);ZVo=r(wFt,"CamembertForMultipleChoice"),wFt.forEach(t),eXo=r(uRe," (CamemBERT model)"),uRe.forEach(t),oXo=i(ee),Bb=n(ee,"LI",{});var bRe=s(Bb);i_e=n(bRe,"STRONG",{});var AFt=s(i_e);rXo=r(AFt,"canine"),AFt.forEach(t),tXo=r(bRe," \u2014 "),vX=n(bRe,"A",{href:!0});var LFt=s(vX);aXo=r(LFt,"CanineForMultipleChoice"),LFt.forEach(t),nXo=r(bRe," (CANINE model)"),bRe.forEach(t),sXo=i(ee),Ib=n(ee,"LI",{});var vRe=s(Ib);d_e=n(vRe,"STRONG",{});var yFt=s(d_e);lXo=r(yFt,"convbert"),yFt.forEach(t),iXo=r(vRe," \u2014 "),FX=n(vRe,"A",{href:!0});var xFt=s(FX);dXo=r(xFt,"ConvBertForMultipleChoice"),xFt.forEach(t),cXo=r(vRe," (ConvBERT model)"),vRe.forEach(t),fXo=i(ee),Nb=n(ee,"LI",{});var FRe=s(Nb);c_e=n(FRe,"STRONG",{});var $Ft=s(c_e);mXo=r($Ft,"data2vec-text"),$Ft.forEach(t),gXo=r(FRe," \u2014 "),TX=n(FRe,"A",{href:!0});var kFt=s(TX);hXo=r(kFt,"Data2VecTextForMultipleChoice"),kFt.forEach(t),pXo=r(FRe," (Data2VecText model)"),FRe.forEach(t),_Xo=i(ee),qb=n(ee,"LI",{});var TRe=s(qb);f_e=n(TRe,"STRONG",{});var SFt=s(f_e);uXo=r(SFt,"deberta-v2"),SFt.forEach(t),bXo=r(TRe," \u2014 "),MX=n(TRe,"A",{href:!0});var RFt=s(MX);vXo=r(RFt,"DebertaV2ForMultipleChoice"),RFt.forEach(t),FXo=r(TRe," (DeBERTa-v2 model)"),TRe.forEach(t),TXo=i(ee),jb=n(ee,"LI",{});var MRe=s(jb);m_e=n(MRe,"STRONG",{});var PFt=s(m_e);MXo=r(PFt,"distilbert"),PFt.forEach(t),EXo=r(MRe," \u2014 "),EX=n(MRe,"A",{href:!0});var BFt=s(EX);CXo=r(BFt,"DistilBertForMultipleChoice"),BFt.forEach(t),wXo=r(MRe," (DistilBERT model)"),MRe.forEach(t),AXo=i(ee),Db=n(ee,"LI",{});var ERe=s(Db);g_e=n(ERe,"STRONG",{});var IFt=s(g_e);LXo=r(IFt,"electra"),IFt.forEach(t),yXo=r(ERe," \u2014 "),CX=n(ERe,"A",{href:!0});var NFt=s(CX);xXo=r(NFt,"ElectraForMultipleChoice"),NFt.forEach(t),$Xo=r(ERe," (ELECTRA model)"),ERe.forEach(t),kXo=i(ee),Gb=n(ee,"LI",{});var CRe=s(Gb);h_e=n(CRe,"STRONG",{});var qFt=s(h_e);SXo=r(qFt,"flaubert"),qFt.forEach(t),RXo=r(CRe," \u2014 "),wX=n(CRe,"A",{href:!0});var jFt=s(wX);PXo=r(jFt,"FlaubertForMultipleChoice"),jFt.forEach(t),BXo=r(CRe," (FlauBERT model)"),CRe.forEach(t),IXo=i(ee),Ob=n(ee,"LI",{});var wRe=s(Ob);p_e=n(wRe,"STRONG",{});var DFt=s(p_e);NXo=r(DFt,"fnet"),DFt.forEach(t),qXo=r(wRe," \u2014 "),AX=n(wRe,"A",{href:!0});var GFt=s(AX);jXo=r(GFt,"FNetForMultipleChoice"),GFt.forEach(t),DXo=r(wRe," (FNet model)"),wRe.forEach(t),GXo=i(ee),Vb=n(ee,"LI",{});var ARe=s(Vb);__e=n(ARe,"STRONG",{});var OFt=s(__e);OXo=r(OFt,"funnel"),OFt.forEach(t),VXo=r(ARe," \u2014 "),LX=n(ARe,"A",{href:!0});var VFt=s(LX);XXo=r(VFt,"FunnelForMultipleChoice"),VFt.forEach(t),zXo=r(ARe," (Funnel Transformer model)"),ARe.forEach(t),QXo=i(ee),Xb=n(ee,"LI",{});var LRe=s(Xb);u_e=n(LRe,"STRONG",{});var XFt=s(u_e);WXo=r(XFt,"ibert"),XFt.forEach(t),HXo=r(LRe," \u2014 "),yX=n(LRe,"A",{href:!0});var zFt=s(yX);UXo=r(zFt,"IBertForMultipleChoice"),zFt.forEach(t),JXo=r(LRe," (I-BERT model)"),LRe.forEach(t),YXo=i(ee),zb=n(ee,"LI",{});var yRe=s(zb);b_e=n(yRe,"STRONG",{});var QFt=s(b_e);KXo=r(QFt,"longformer"),QFt.forEach(t),ZXo=r(yRe," \u2014 "),xX=n(yRe,"A",{href:!0});var WFt=s(xX);ezo=r(WFt,"LongformerForMultipleChoice"),WFt.forEach(t),ozo=r(yRe," (Longformer model)"),yRe.forEach(t),rzo=i(ee),Qb=n(ee,"LI",{});var xRe=s(Qb);v_e=n(xRe,"STRONG",{});var HFt=s(v_e);tzo=r(HFt,"megatron-bert"),HFt.forEach(t),azo=r(xRe," \u2014 "),$X=n(xRe,"A",{href:!0});var UFt=s($X);nzo=r(UFt,"MegatronBertForMultipleChoice"),UFt.forEach(t),szo=r(xRe," (Megatron-BERT model)"),xRe.forEach(t),lzo=i(ee),Wb=n(ee,"LI",{});var $Re=s(Wb);F_e=n($Re,"STRONG",{});var JFt=s(F_e);izo=r(JFt,"mobilebert"),JFt.forEach(t),dzo=r($Re," \u2014 "),kX=n($Re,"A",{href:!0});var YFt=s(kX);czo=r(YFt,"MobileBertForMultipleChoice"),YFt.forEach(t),fzo=r($Re," (MobileBERT model)"),$Re.forEach(t),mzo=i(ee),Hb=n(ee,"LI",{});var kRe=s(Hb);T_e=n(kRe,"STRONG",{});var KFt=s(T_e);gzo=r(KFt,"mpnet"),KFt.forEach(t),hzo=r(kRe," \u2014 "),SX=n(kRe,"A",{href:!0});var ZFt=s(SX);pzo=r(ZFt,"MPNetForMultipleChoice"),ZFt.forEach(t),_zo=r(kRe," (MPNet model)"),kRe.forEach(t),uzo=i(ee),Ub=n(ee,"LI",{});var SRe=s(Ub);M_e=n(SRe,"STRONG",{});var e6t=s(M_e);bzo=r(e6t,"nezha"),e6t.forEach(t),vzo=r(SRe," \u2014 "),RX=n(SRe,"A",{href:!0});var o6t=s(RX);Fzo=r(o6t,"NezhaForMultipleChoice"),o6t.forEach(t),Tzo=r(SRe," (Nezha model)"),SRe.forEach(t),Mzo=i(ee),Jb=n(ee,"LI",{});var RRe=s(Jb);E_e=n(RRe,"STRONG",{});var r6t=s(E_e);Ezo=r(r6t,"nystromformer"),r6t.forEach(t),Czo=r(RRe," \u2014 "),PX=n(RRe,"A",{href:!0});var t6t=s(PX);wzo=r(t6t,"NystromformerForMultipleChoice"),t6t.forEach(t),Azo=r(RRe," (Nystr\xF6mformer model)"),RRe.forEach(t),Lzo=i(ee),Yb=n(ee,"LI",{});var PRe=s(Yb);C_e=n(PRe,"STRONG",{});var a6t=s(C_e);yzo=r(a6t,"qdqbert"),a6t.forEach(t),xzo=r(PRe," \u2014 "),BX=n(PRe,"A",{href:!0});var n6t=s(BX);$zo=r(n6t,"QDQBertForMultipleChoice"),n6t.forEach(t),kzo=r(PRe," (QDQBert model)"),PRe.forEach(t),Szo=i(ee),Kb=n(ee,"LI",{});var BRe=s(Kb);w_e=n(BRe,"STRONG",{});var s6t=s(w_e);Rzo=r(s6t,"rembert"),s6t.forEach(t),Pzo=r(BRe," \u2014 "),IX=n(BRe,"A",{href:!0});var l6t=s(IX);Bzo=r(l6t,"RemBertForMultipleChoice"),l6t.forEach(t),Izo=r(BRe," (RemBERT model)"),BRe.forEach(t),Nzo=i(ee),Zb=n(ee,"LI",{});var IRe=s(Zb);A_e=n(IRe,"STRONG",{});var i6t=s(A_e);qzo=r(i6t,"roberta"),i6t.forEach(t),jzo=r(IRe," \u2014 "),NX=n(IRe,"A",{href:!0});var d6t=s(NX);Dzo=r(d6t,"RobertaForMultipleChoice"),d6t.forEach(t),Gzo=r(IRe," (RoBERTa model)"),IRe.forEach(t),Ozo=i(ee),ev=n(ee,"LI",{});var NRe=s(ev);L_e=n(NRe,"STRONG",{});var c6t=s(L_e);Vzo=r(c6t,"roformer"),c6t.forEach(t),Xzo=r(NRe," \u2014 "),qX=n(NRe,"A",{href:!0});var f6t=s(qX);zzo=r(f6t,"RoFormerForMultipleChoice"),f6t.forEach(t),Qzo=r(NRe," (RoFormer model)"),NRe.forEach(t),Wzo=i(ee),ov=n(ee,"LI",{});var qRe=s(ov);y_e=n(qRe,"STRONG",{});var m6t=s(y_e);Hzo=r(m6t,"squeezebert"),m6t.forEach(t),Uzo=r(qRe," \u2014 "),jX=n(qRe,"A",{href:!0});var g6t=s(jX);Jzo=r(g6t,"SqueezeBertForMultipleChoice"),g6t.forEach(t),Yzo=r(qRe," (SqueezeBERT model)"),qRe.forEach(t),Kzo=i(ee),rv=n(ee,"LI",{});var jRe=s(rv);x_e=n(jRe,"STRONG",{});var h6t=s(x_e);Zzo=r(h6t,"xlm"),h6t.forEach(t),eQo=r(jRe," \u2014 "),DX=n(jRe,"A",{href:!0});var p6t=s(DX);oQo=r(p6t,"XLMForMultipleChoice"),p6t.forEach(t),rQo=r(jRe," (XLM model)"),jRe.forEach(t),tQo=i(ee),tv=n(ee,"LI",{});var DRe=s(tv);$_e=n(DRe,"STRONG",{});var _6t=s($_e);aQo=r(_6t,"xlm-roberta"),_6t.forEach(t),nQo=r(DRe," \u2014 "),GX=n(DRe,"A",{href:!0});var u6t=s(GX);sQo=r(u6t,"XLMRobertaForMultipleChoice"),u6t.forEach(t),lQo=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),iQo=i(ee),av=n(ee,"LI",{});var GRe=s(av);k_e=n(GRe,"STRONG",{});var b6t=s(k_e);dQo=r(b6t,"xlm-roberta-xl"),b6t.forEach(t),cQo=r(GRe," \u2014 "),OX=n(GRe,"A",{href:!0});var v6t=s(OX);fQo=r(v6t,"XLMRobertaXLForMultipleChoice"),v6t.forEach(t),mQo=r(GRe," (XLM-RoBERTa-XL model)"),GRe.forEach(t),gQo=i(ee),nv=n(ee,"LI",{});var ORe=s(nv);S_e=n(ORe,"STRONG",{});var F6t=s(S_e);hQo=r(F6t,"xlnet"),F6t.forEach(t),pQo=r(ORe," \u2014 "),VX=n(ORe,"A",{href:!0});var T6t=s(VX);_Qo=r(T6t,"XLNetForMultipleChoice"),T6t.forEach(t),uQo=r(ORe," (XLNet model)"),ORe.forEach(t),bQo=i(ee),sv=n(ee,"LI",{});var VRe=s(sv);R_e=n(VRe,"STRONG",{});var M6t=s(R_e);vQo=r(M6t,"yoso"),M6t.forEach(t),FQo=r(VRe," \u2014 "),XX=n(VRe,"A",{href:!0});var E6t=s(XX);TQo=r(E6t,"YosoForMultipleChoice"),E6t.forEach(t),MQo=r(VRe," (YOSO model)"),VRe.forEach(t),ee.forEach(t),EQo=i(ca),lv=n(ca,"P",{});var XRe=s(lv);CQo=r(XRe,"The model is set in evaluation mode by default using "),P_e=n(XRe,"CODE",{});var C6t=s(P_e);wQo=r(C6t,"model.eval()"),C6t.forEach(t),AQo=r(XRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=n(XRe,"CODE",{});var w6t=s(B_e);LQo=r(w6t,"model.train()"),w6t.forEach(t),XRe.forEach(t),yQo=i(ca),T(iv.$$.fragment,ca),ca.forEach(t),sl.forEach(t),aVe=i(f),ad=n(f,"H2",{class:!0});var cze=s(ad);dv=n(cze,"A",{id:!0,class:!0,href:!0});var A6t=s(dv);I_e=n(A6t,"SPAN",{});var L6t=s(I_e);T(Wy.$$.fragment,L6t),L6t.forEach(t),A6t.forEach(t),xQo=i(cze),N_e=n(cze,"SPAN",{});var y6t=s(N_e);$Qo=r(y6t,"AutoModelForNextSentencePrediction"),y6t.forEach(t),cze.forEach(t),nVe=i(f),Io=n(f,"DIV",{class:!0});var ll=s(Io);T(Hy.$$.fragment,ll),kQo=i(ll),nd=n(ll,"P",{});var nre=s(nd);SQo=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zX=n(nre,"A",{href:!0});var x6t=s(zX);RQo=r(x6t,"from_pretrained()"),x6t.forEach(t),PQo=r(nre," class method or the "),QX=n(nre,"A",{href:!0});var $6t=s(QX);BQo=r($6t,"from_config()"),$6t.forEach(t),IQo=r(nre,` class
method.`),nre.forEach(t),NQo=i(ll),Uy=n(ll,"P",{});var fze=s(Uy);qQo=r(fze,"This class cannot be instantiated directly using "),q_e=n(fze,"CODE",{});var k6t=s(q_e);jQo=r(k6t,"__init__()"),k6t.forEach(t),DQo=r(fze," (throws an error)."),fze.forEach(t),GQo=i(ll),mt=n(ll,"DIV",{class:!0});var rA=s(mt);T(Jy.$$.fragment,rA),OQo=i(rA),j_e=n(rA,"P",{});var S6t=s(j_e);VQo=r(S6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S6t.forEach(t),XQo=i(rA),sd=n(rA,"P",{});var sre=s(sd);zQo=r(sre,`Note:
Loading a model from its configuration file does `),D_e=n(sre,"STRONG",{});var R6t=s(D_e);QQo=r(R6t,"not"),R6t.forEach(t),WQo=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(sre,"A",{href:!0});var P6t=s(WX);HQo=r(P6t,"from_pretrained()"),P6t.forEach(t),UQo=r(sre," to load the model weights."),sre.forEach(t),JQo=i(rA),T(cv.$$.fragment,rA),rA.forEach(t),YQo=i(ll),to=n(ll,"DIV",{class:!0});var fa=s(to);T(Yy.$$.fragment,fa),KQo=i(fa),G_e=n(fa,"P",{});var B6t=s(G_e);ZQo=r(B6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),B6t.forEach(t),eWo=i(fa),Ga=n(fa,"P",{});var tA=s(Ga);oWo=r(tA,"The model class to instantiate is selected based on the "),O_e=n(tA,"CODE",{});var I6t=s(O_e);rWo=r(I6t,"model_type"),I6t.forEach(t),tWo=r(tA,` property of the config object (either
passed as an argument or loaded from `),V_e=n(tA,"CODE",{});var N6t=s(V_e);aWo=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),nWo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(tA,"CODE",{});var q6t=s(X_e);sWo=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),lWo=r(tA,":"),tA.forEach(t),iWo=i(fa),No=n(fa,"UL",{});var ma=s(No);fv=n(ma,"LI",{});var zRe=s(fv);z_e=n(zRe,"STRONG",{});var j6t=s(z_e);dWo=r(j6t,"bert"),j6t.forEach(t),cWo=r(zRe," \u2014 "),HX=n(zRe,"A",{href:!0});var D6t=s(HX);fWo=r(D6t,"BertForNextSentencePrediction"),D6t.forEach(t),mWo=r(zRe," (BERT model)"),zRe.forEach(t),gWo=i(ma),mv=n(ma,"LI",{});var QRe=s(mv);Q_e=n(QRe,"STRONG",{});var G6t=s(Q_e);hWo=r(G6t,"fnet"),G6t.forEach(t),pWo=r(QRe," \u2014 "),UX=n(QRe,"A",{href:!0});var O6t=s(UX);_Wo=r(O6t,"FNetForNextSentencePrediction"),O6t.forEach(t),uWo=r(QRe," (FNet model)"),QRe.forEach(t),bWo=i(ma),gv=n(ma,"LI",{});var WRe=s(gv);W_e=n(WRe,"STRONG",{});var V6t=s(W_e);vWo=r(V6t,"megatron-bert"),V6t.forEach(t),FWo=r(WRe," \u2014 "),JX=n(WRe,"A",{href:!0});var X6t=s(JX);TWo=r(X6t,"MegatronBertForNextSentencePrediction"),X6t.forEach(t),MWo=r(WRe," (Megatron-BERT model)"),WRe.forEach(t),EWo=i(ma),hv=n(ma,"LI",{});var HRe=s(hv);H_e=n(HRe,"STRONG",{});var z6t=s(H_e);CWo=r(z6t,"mobilebert"),z6t.forEach(t),wWo=r(HRe," \u2014 "),YX=n(HRe,"A",{href:!0});var Q6t=s(YX);AWo=r(Q6t,"MobileBertForNextSentencePrediction"),Q6t.forEach(t),LWo=r(HRe," (MobileBERT model)"),HRe.forEach(t),yWo=i(ma),pv=n(ma,"LI",{});var URe=s(pv);U_e=n(URe,"STRONG",{});var W6t=s(U_e);xWo=r(W6t,"nezha"),W6t.forEach(t),$Wo=r(URe," \u2014 "),KX=n(URe,"A",{href:!0});var H6t=s(KX);kWo=r(H6t,"NezhaForNextSentencePrediction"),H6t.forEach(t),SWo=r(URe," (Nezha model)"),URe.forEach(t),RWo=i(ma),_v=n(ma,"LI",{});var JRe=s(_v);J_e=n(JRe,"STRONG",{});var U6t=s(J_e);PWo=r(U6t,"qdqbert"),U6t.forEach(t),BWo=r(JRe," \u2014 "),ZX=n(JRe,"A",{href:!0});var J6t=s(ZX);IWo=r(J6t,"QDQBertForNextSentencePrediction"),J6t.forEach(t),NWo=r(JRe," (QDQBert model)"),JRe.forEach(t),ma.forEach(t),qWo=i(fa),uv=n(fa,"P",{});var YRe=s(uv);jWo=r(YRe,"The model is set in evaluation mode by default using "),Y_e=n(YRe,"CODE",{});var Y6t=s(Y_e);DWo=r(Y6t,"model.eval()"),Y6t.forEach(t),GWo=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(YRe,"CODE",{});var K6t=s(K_e);OWo=r(K6t,"model.train()"),K6t.forEach(t),YRe.forEach(t),VWo=i(fa),T(bv.$$.fragment,fa),fa.forEach(t),ll.forEach(t),sVe=i(f),ld=n(f,"H2",{class:!0});var mze=s(ld);vv=n(mze,"A",{id:!0,class:!0,href:!0});var Z6t=s(vv);Z_e=n(Z6t,"SPAN",{});var eTt=s(Z_e);T(Ky.$$.fragment,eTt),eTt.forEach(t),Z6t.forEach(t),XWo=i(mze),eue=n(mze,"SPAN",{});var oTt=s(eue);zWo=r(oTt,"AutoModelForTokenClassification"),oTt.forEach(t),mze.forEach(t),lVe=i(f),qo=n(f,"DIV",{class:!0});var il=s(qo);T(Zy.$$.fragment,il),QWo=i(il),id=n(il,"P",{});var lre=s(id);WWo=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ez=n(lre,"A",{href:!0});var rTt=s(ez);HWo=r(rTt,"from_pretrained()"),rTt.forEach(t),UWo=r(lre," class method or the "),oz=n(lre,"A",{href:!0});var tTt=s(oz);JWo=r(tTt,"from_config()"),tTt.forEach(t),YWo=r(lre,` class
method.`),lre.forEach(t),KWo=i(il),e8=n(il,"P",{});var gze=s(e8);ZWo=r(gze,"This class cannot be instantiated directly using "),oue=n(gze,"CODE",{});var aTt=s(oue);eHo=r(aTt,"__init__()"),aTt.forEach(t),oHo=r(gze," (throws an error)."),gze.forEach(t),rHo=i(il),gt=n(il,"DIV",{class:!0});var aA=s(gt);T(o8.$$.fragment,aA),tHo=i(aA),rue=n(aA,"P",{});var nTt=s(rue);aHo=r(nTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nTt.forEach(t),nHo=i(aA),dd=n(aA,"P",{});var ire=s(dd);sHo=r(ire,`Note:
Loading a model from its configuration file does `),tue=n(ire,"STRONG",{});var sTt=s(tue);lHo=r(sTt,"not"),sTt.forEach(t),iHo=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(ire,"A",{href:!0});var lTt=s(rz);dHo=r(lTt,"from_pretrained()"),lTt.forEach(t),cHo=r(ire," to load the model weights."),ire.forEach(t),fHo=i(aA),T(Fv.$$.fragment,aA),aA.forEach(t),mHo=i(il),ao=n(il,"DIV",{class:!0});var ga=s(ao);T(r8.$$.fragment,ga),gHo=i(ga),aue=n(ga,"P",{});var iTt=s(aue);hHo=r(iTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iTt.forEach(t),pHo=i(ga),Oa=n(ga,"P",{});var nA=s(Oa);_Ho=r(nA,"The model class to instantiate is selected based on the "),nue=n(nA,"CODE",{});var dTt=s(nue);uHo=r(dTt,"model_type"),dTt.forEach(t),bHo=r(nA,` property of the config object (either
passed as an argument or loaded from `),sue=n(nA,"CODE",{});var cTt=s(sue);vHo=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),FHo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(nA,"CODE",{});var fTt=s(lue);THo=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),MHo=r(nA,":"),nA.forEach(t),EHo=i(ga),H=n(ga,"UL",{});var J=s(H);Tv=n(J,"LI",{});var KRe=s(Tv);iue=n(KRe,"STRONG",{});var mTt=s(iue);CHo=r(mTt,"albert"),mTt.forEach(t),wHo=r(KRe," \u2014 "),tz=n(KRe,"A",{href:!0});var gTt=s(tz);AHo=r(gTt,"AlbertForTokenClassification"),gTt.forEach(t),LHo=r(KRe," (ALBERT model)"),KRe.forEach(t),yHo=i(J),Mv=n(J,"LI",{});var ZRe=s(Mv);due=n(ZRe,"STRONG",{});var hTt=s(due);xHo=r(hTt,"bert"),hTt.forEach(t),$Ho=r(ZRe," \u2014 "),az=n(ZRe,"A",{href:!0});var pTt=s(az);kHo=r(pTt,"BertForTokenClassification"),pTt.forEach(t),SHo=r(ZRe," (BERT model)"),ZRe.forEach(t),RHo=i(J),Ev=n(J,"LI",{});var ePe=s(Ev);cue=n(ePe,"STRONG",{});var _Tt=s(cue);PHo=r(_Tt,"big_bird"),_Tt.forEach(t),BHo=r(ePe," \u2014 "),nz=n(ePe,"A",{href:!0});var uTt=s(nz);IHo=r(uTt,"BigBirdForTokenClassification"),uTt.forEach(t),NHo=r(ePe," (BigBird model)"),ePe.forEach(t),qHo=i(J),Cv=n(J,"LI",{});var oPe=s(Cv);fue=n(oPe,"STRONG",{});var bTt=s(fue);jHo=r(bTt,"bloom"),bTt.forEach(t),DHo=r(oPe," \u2014 "),sz=n(oPe,"A",{href:!0});var vTt=s(sz);GHo=r(vTt,"BloomForTokenClassification"),vTt.forEach(t),OHo=r(oPe," (BLOOM model)"),oPe.forEach(t),VHo=i(J),wv=n(J,"LI",{});var rPe=s(wv);mue=n(rPe,"STRONG",{});var FTt=s(mue);XHo=r(FTt,"camembert"),FTt.forEach(t),zHo=r(rPe," \u2014 "),lz=n(rPe,"A",{href:!0});var TTt=s(lz);QHo=r(TTt,"CamembertForTokenClassification"),TTt.forEach(t),WHo=r(rPe," (CamemBERT model)"),rPe.forEach(t),HHo=i(J),Av=n(J,"LI",{});var tPe=s(Av);gue=n(tPe,"STRONG",{});var MTt=s(gue);UHo=r(MTt,"canine"),MTt.forEach(t),JHo=r(tPe," \u2014 "),iz=n(tPe,"A",{href:!0});var ETt=s(iz);YHo=r(ETt,"CanineForTokenClassification"),ETt.forEach(t),KHo=r(tPe," (CANINE model)"),tPe.forEach(t),ZHo=i(J),Lv=n(J,"LI",{});var aPe=s(Lv);hue=n(aPe,"STRONG",{});var CTt=s(hue);eUo=r(CTt,"convbert"),CTt.forEach(t),oUo=r(aPe," \u2014 "),dz=n(aPe,"A",{href:!0});var wTt=s(dz);rUo=r(wTt,"ConvBertForTokenClassification"),wTt.forEach(t),tUo=r(aPe," (ConvBERT model)"),aPe.forEach(t),aUo=i(J),yv=n(J,"LI",{});var nPe=s(yv);pue=n(nPe,"STRONG",{});var ATt=s(pue);nUo=r(ATt,"data2vec-text"),ATt.forEach(t),sUo=r(nPe," \u2014 "),cz=n(nPe,"A",{href:!0});var LTt=s(cz);lUo=r(LTt,"Data2VecTextForTokenClassification"),LTt.forEach(t),iUo=r(nPe," (Data2VecText model)"),nPe.forEach(t),dUo=i(J),xv=n(J,"LI",{});var sPe=s(xv);_ue=n(sPe,"STRONG",{});var yTt=s(_ue);cUo=r(yTt,"deberta"),yTt.forEach(t),fUo=r(sPe," \u2014 "),fz=n(sPe,"A",{href:!0});var xTt=s(fz);mUo=r(xTt,"DebertaForTokenClassification"),xTt.forEach(t),gUo=r(sPe," (DeBERTa model)"),sPe.forEach(t),hUo=i(J),$v=n(J,"LI",{});var lPe=s($v);uue=n(lPe,"STRONG",{});var $Tt=s(uue);pUo=r($Tt,"deberta-v2"),$Tt.forEach(t),_Uo=r(lPe," \u2014 "),mz=n(lPe,"A",{href:!0});var kTt=s(mz);uUo=r(kTt,"DebertaV2ForTokenClassification"),kTt.forEach(t),bUo=r(lPe," (DeBERTa-v2 model)"),lPe.forEach(t),vUo=i(J),kv=n(J,"LI",{});var iPe=s(kv);bue=n(iPe,"STRONG",{});var STt=s(bue);FUo=r(STt,"distilbert"),STt.forEach(t),TUo=r(iPe," \u2014 "),gz=n(iPe,"A",{href:!0});var RTt=s(gz);MUo=r(RTt,"DistilBertForTokenClassification"),RTt.forEach(t),EUo=r(iPe," (DistilBERT model)"),iPe.forEach(t),CUo=i(J),Sv=n(J,"LI",{});var dPe=s(Sv);vue=n(dPe,"STRONG",{});var PTt=s(vue);wUo=r(PTt,"electra"),PTt.forEach(t),AUo=r(dPe," \u2014 "),hz=n(dPe,"A",{href:!0});var BTt=s(hz);LUo=r(BTt,"ElectraForTokenClassification"),BTt.forEach(t),yUo=r(dPe," (ELECTRA model)"),dPe.forEach(t),xUo=i(J),Rv=n(J,"LI",{});var cPe=s(Rv);Fue=n(cPe,"STRONG",{});var ITt=s(Fue);$Uo=r(ITt,"flaubert"),ITt.forEach(t),kUo=r(cPe," \u2014 "),pz=n(cPe,"A",{href:!0});var NTt=s(pz);SUo=r(NTt,"FlaubertForTokenClassification"),NTt.forEach(t),RUo=r(cPe," (FlauBERT model)"),cPe.forEach(t),PUo=i(J),Pv=n(J,"LI",{});var fPe=s(Pv);Tue=n(fPe,"STRONG",{});var qTt=s(Tue);BUo=r(qTt,"fnet"),qTt.forEach(t),IUo=r(fPe," \u2014 "),_z=n(fPe,"A",{href:!0});var jTt=s(_z);NUo=r(jTt,"FNetForTokenClassification"),jTt.forEach(t),qUo=r(fPe," (FNet model)"),fPe.forEach(t),jUo=i(J),Bv=n(J,"LI",{});var mPe=s(Bv);Mue=n(mPe,"STRONG",{});var DTt=s(Mue);DUo=r(DTt,"funnel"),DTt.forEach(t),GUo=r(mPe," \u2014 "),uz=n(mPe,"A",{href:!0});var GTt=s(uz);OUo=r(GTt,"FunnelForTokenClassification"),GTt.forEach(t),VUo=r(mPe," (Funnel Transformer model)"),mPe.forEach(t),XUo=i(J),Iv=n(J,"LI",{});var gPe=s(Iv);Eue=n(gPe,"STRONG",{});var OTt=s(Eue);zUo=r(OTt,"gpt2"),OTt.forEach(t),QUo=r(gPe," \u2014 "),bz=n(gPe,"A",{href:!0});var VTt=s(bz);WUo=r(VTt,"GPT2ForTokenClassification"),VTt.forEach(t),HUo=r(gPe," (OpenAI GPT-2 model)"),gPe.forEach(t),UUo=i(J),Nv=n(J,"LI",{});var hPe=s(Nv);Cue=n(hPe,"STRONG",{});var XTt=s(Cue);JUo=r(XTt,"ibert"),XTt.forEach(t),YUo=r(hPe," \u2014 "),vz=n(hPe,"A",{href:!0});var zTt=s(vz);KUo=r(zTt,"IBertForTokenClassification"),zTt.forEach(t),ZUo=r(hPe," (I-BERT model)"),hPe.forEach(t),eJo=i(J),qv=n(J,"LI",{});var pPe=s(qv);wue=n(pPe,"STRONG",{});var QTt=s(wue);oJo=r(QTt,"layoutlm"),QTt.forEach(t),rJo=r(pPe," \u2014 "),Fz=n(pPe,"A",{href:!0});var WTt=s(Fz);tJo=r(WTt,"LayoutLMForTokenClassification"),WTt.forEach(t),aJo=r(pPe," (LayoutLM model)"),pPe.forEach(t),nJo=i(J),jv=n(J,"LI",{});var _Pe=s(jv);Aue=n(_Pe,"STRONG",{});var HTt=s(Aue);sJo=r(HTt,"layoutlmv2"),HTt.forEach(t),lJo=r(_Pe," \u2014 "),Tz=n(_Pe,"A",{href:!0});var UTt=s(Tz);iJo=r(UTt,"LayoutLMv2ForTokenClassification"),UTt.forEach(t),dJo=r(_Pe," (LayoutLMv2 model)"),_Pe.forEach(t),cJo=i(J),Dv=n(J,"LI",{});var uPe=s(Dv);Lue=n(uPe,"STRONG",{});var JTt=s(Lue);fJo=r(JTt,"layoutlmv3"),JTt.forEach(t),mJo=r(uPe," \u2014 "),Mz=n(uPe,"A",{href:!0});var YTt=s(Mz);gJo=r(YTt,"LayoutLMv3ForTokenClassification"),YTt.forEach(t),hJo=r(uPe," (LayoutLMv3 model)"),uPe.forEach(t),pJo=i(J),Gv=n(J,"LI",{});var bPe=s(Gv);yue=n(bPe,"STRONG",{});var KTt=s(yue);_Jo=r(KTt,"longformer"),KTt.forEach(t),uJo=r(bPe," \u2014 "),Ez=n(bPe,"A",{href:!0});var ZTt=s(Ez);bJo=r(ZTt,"LongformerForTokenClassification"),ZTt.forEach(t),vJo=r(bPe," (Longformer model)"),bPe.forEach(t),FJo=i(J),Ov=n(J,"LI",{});var vPe=s(Ov);xue=n(vPe,"STRONG",{});var eMt=s(xue);TJo=r(eMt,"megatron-bert"),eMt.forEach(t),MJo=r(vPe," \u2014 "),Cz=n(vPe,"A",{href:!0});var oMt=s(Cz);EJo=r(oMt,"MegatronBertForTokenClassification"),oMt.forEach(t),CJo=r(vPe," (Megatron-BERT model)"),vPe.forEach(t),wJo=i(J),Vv=n(J,"LI",{});var FPe=s(Vv);$ue=n(FPe,"STRONG",{});var rMt=s($ue);AJo=r(rMt,"mobilebert"),rMt.forEach(t),LJo=r(FPe," \u2014 "),wz=n(FPe,"A",{href:!0});var tMt=s(wz);yJo=r(tMt,"MobileBertForTokenClassification"),tMt.forEach(t),xJo=r(FPe," (MobileBERT model)"),FPe.forEach(t),$Jo=i(J),Xv=n(J,"LI",{});var TPe=s(Xv);kue=n(TPe,"STRONG",{});var aMt=s(kue);kJo=r(aMt,"mpnet"),aMt.forEach(t),SJo=r(TPe," \u2014 "),Az=n(TPe,"A",{href:!0});var nMt=s(Az);RJo=r(nMt,"MPNetForTokenClassification"),nMt.forEach(t),PJo=r(TPe," (MPNet model)"),TPe.forEach(t),BJo=i(J),zv=n(J,"LI",{});var MPe=s(zv);Sue=n(MPe,"STRONG",{});var sMt=s(Sue);IJo=r(sMt,"nezha"),sMt.forEach(t),NJo=r(MPe," \u2014 "),Lz=n(MPe,"A",{href:!0});var lMt=s(Lz);qJo=r(lMt,"NezhaForTokenClassification"),lMt.forEach(t),jJo=r(MPe," (Nezha model)"),MPe.forEach(t),DJo=i(J),Qv=n(J,"LI",{});var EPe=s(Qv);Rue=n(EPe,"STRONG",{});var iMt=s(Rue);GJo=r(iMt,"nystromformer"),iMt.forEach(t),OJo=r(EPe," \u2014 "),yz=n(EPe,"A",{href:!0});var dMt=s(yz);VJo=r(dMt,"NystromformerForTokenClassification"),dMt.forEach(t),XJo=r(EPe," (Nystr\xF6mformer model)"),EPe.forEach(t),zJo=i(J),Wv=n(J,"LI",{});var CPe=s(Wv);Pue=n(CPe,"STRONG",{});var cMt=s(Pue);QJo=r(cMt,"qdqbert"),cMt.forEach(t),WJo=r(CPe," \u2014 "),xz=n(CPe,"A",{href:!0});var fMt=s(xz);HJo=r(fMt,"QDQBertForTokenClassification"),fMt.forEach(t),UJo=r(CPe," (QDQBert model)"),CPe.forEach(t),JJo=i(J),Hv=n(J,"LI",{});var wPe=s(Hv);Bue=n(wPe,"STRONG",{});var mMt=s(Bue);YJo=r(mMt,"rembert"),mMt.forEach(t),KJo=r(wPe," \u2014 "),$z=n(wPe,"A",{href:!0});var gMt=s($z);ZJo=r(gMt,"RemBertForTokenClassification"),gMt.forEach(t),eYo=r(wPe," (RemBERT model)"),wPe.forEach(t),oYo=i(J),Uv=n(J,"LI",{});var APe=s(Uv);Iue=n(APe,"STRONG",{});var hMt=s(Iue);rYo=r(hMt,"roberta"),hMt.forEach(t),tYo=r(APe," \u2014 "),kz=n(APe,"A",{href:!0});var pMt=s(kz);aYo=r(pMt,"RobertaForTokenClassification"),pMt.forEach(t),nYo=r(APe," (RoBERTa model)"),APe.forEach(t),sYo=i(J),Jv=n(J,"LI",{});var LPe=s(Jv);Nue=n(LPe,"STRONG",{});var _Mt=s(Nue);lYo=r(_Mt,"roformer"),_Mt.forEach(t),iYo=r(LPe," \u2014 "),Sz=n(LPe,"A",{href:!0});var uMt=s(Sz);dYo=r(uMt,"RoFormerForTokenClassification"),uMt.forEach(t),cYo=r(LPe," (RoFormer model)"),LPe.forEach(t),fYo=i(J),Yv=n(J,"LI",{});var yPe=s(Yv);que=n(yPe,"STRONG",{});var bMt=s(que);mYo=r(bMt,"squeezebert"),bMt.forEach(t),gYo=r(yPe," \u2014 "),Rz=n(yPe,"A",{href:!0});var vMt=s(Rz);hYo=r(vMt,"SqueezeBertForTokenClassification"),vMt.forEach(t),pYo=r(yPe," (SqueezeBERT model)"),yPe.forEach(t),_Yo=i(J),Kv=n(J,"LI",{});var xPe=s(Kv);jue=n(xPe,"STRONG",{});var FMt=s(jue);uYo=r(FMt,"xlm"),FMt.forEach(t),bYo=r(xPe," \u2014 "),Pz=n(xPe,"A",{href:!0});var TMt=s(Pz);vYo=r(TMt,"XLMForTokenClassification"),TMt.forEach(t),FYo=r(xPe," (XLM model)"),xPe.forEach(t),TYo=i(J),Zv=n(J,"LI",{});var $Pe=s(Zv);Due=n($Pe,"STRONG",{});var MMt=s(Due);MYo=r(MMt,"xlm-roberta"),MMt.forEach(t),EYo=r($Pe," \u2014 "),Bz=n($Pe,"A",{href:!0});var EMt=s(Bz);CYo=r(EMt,"XLMRobertaForTokenClassification"),EMt.forEach(t),wYo=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),AYo=i(J),eF=n(J,"LI",{});var kPe=s(eF);Gue=n(kPe,"STRONG",{});var CMt=s(Gue);LYo=r(CMt,"xlm-roberta-xl"),CMt.forEach(t),yYo=r(kPe," \u2014 "),Iz=n(kPe,"A",{href:!0});var wMt=s(Iz);xYo=r(wMt,"XLMRobertaXLForTokenClassification"),wMt.forEach(t),$Yo=r(kPe," (XLM-RoBERTa-XL model)"),kPe.forEach(t),kYo=i(J),oF=n(J,"LI",{});var SPe=s(oF);Oue=n(SPe,"STRONG",{});var AMt=s(Oue);SYo=r(AMt,"xlnet"),AMt.forEach(t),RYo=r(SPe," \u2014 "),Nz=n(SPe,"A",{href:!0});var LMt=s(Nz);PYo=r(LMt,"XLNetForTokenClassification"),LMt.forEach(t),BYo=r(SPe," (XLNet model)"),SPe.forEach(t),IYo=i(J),rF=n(J,"LI",{});var RPe=s(rF);Vue=n(RPe,"STRONG",{});var yMt=s(Vue);NYo=r(yMt,"yoso"),yMt.forEach(t),qYo=r(RPe," \u2014 "),qz=n(RPe,"A",{href:!0});var xMt=s(qz);jYo=r(xMt,"YosoForTokenClassification"),xMt.forEach(t),DYo=r(RPe," (YOSO model)"),RPe.forEach(t),J.forEach(t),GYo=i(ga),tF=n(ga,"P",{});var PPe=s(tF);OYo=r(PPe,"The model is set in evaluation mode by default using "),Xue=n(PPe,"CODE",{});var $Mt=s(Xue);VYo=r($Mt,"model.eval()"),$Mt.forEach(t),XYo=r(PPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(PPe,"CODE",{});var kMt=s(zue);zYo=r(kMt,"model.train()"),kMt.forEach(t),PPe.forEach(t),QYo=i(ga),T(aF.$$.fragment,ga),ga.forEach(t),il.forEach(t),iVe=i(f),cd=n(f,"H2",{class:!0});var hze=s(cd);nF=n(hze,"A",{id:!0,class:!0,href:!0});var SMt=s(nF);Que=n(SMt,"SPAN",{});var RMt=s(Que);T(t8.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),WYo=i(hze),Wue=n(hze,"SPAN",{});var PMt=s(Wue);HYo=r(PMt,"AutoModelForQuestionAnswering"),PMt.forEach(t),hze.forEach(t),dVe=i(f),jo=n(f,"DIV",{class:!0});var dl=s(jo);T(a8.$$.fragment,dl),UYo=i(dl),fd=n(dl,"P",{});var dre=s(fd);JYo=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jz=n(dre,"A",{href:!0});var BMt=s(jz);YYo=r(BMt,"from_pretrained()"),BMt.forEach(t),KYo=r(dre," class method or the "),Dz=n(dre,"A",{href:!0});var IMt=s(Dz);ZYo=r(IMt,"from_config()"),IMt.forEach(t),eKo=r(dre,` class
method.`),dre.forEach(t),oKo=i(dl),n8=n(dl,"P",{});var pze=s(n8);rKo=r(pze,"This class cannot be instantiated directly using "),Hue=n(pze,"CODE",{});var NMt=s(Hue);tKo=r(NMt,"__init__()"),NMt.forEach(t),aKo=r(pze," (throws an error)."),pze.forEach(t),nKo=i(dl),ht=n(dl,"DIV",{class:!0});var sA=s(ht);T(s8.$$.fragment,sA),sKo=i(sA),Uue=n(sA,"P",{});var qMt=s(Uue);lKo=r(qMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qMt.forEach(t),iKo=i(sA),md=n(sA,"P",{});var cre=s(md);dKo=r(cre,`Note:
Loading a model from its configuration file does `),Jue=n(cre,"STRONG",{});var jMt=s(Jue);cKo=r(jMt,"not"),jMt.forEach(t),fKo=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(cre,"A",{href:!0});var DMt=s(Gz);mKo=r(DMt,"from_pretrained()"),DMt.forEach(t),gKo=r(cre," to load the model weights."),cre.forEach(t),hKo=i(sA),T(sF.$$.fragment,sA),sA.forEach(t),pKo=i(dl),no=n(dl,"DIV",{class:!0});var ha=s(no);T(l8.$$.fragment,ha),_Ko=i(ha),Yue=n(ha,"P",{});var GMt=s(Yue);uKo=r(GMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GMt.forEach(t),bKo=i(ha),Va=n(ha,"P",{});var lA=s(Va);vKo=r(lA,"The model class to instantiate is selected based on the "),Kue=n(lA,"CODE",{});var OMt=s(Kue);FKo=r(OMt,"model_type"),OMt.forEach(t),TKo=r(lA,` property of the config object (either
passed as an argument or loaded from `),Zue=n(lA,"CODE",{});var VMt=s(Zue);MKo=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),EKo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(lA,"CODE",{});var XMt=s(e1e);CKo=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),wKo=r(lA,":"),lA.forEach(t),AKo=i(ha),V=n(ha,"UL",{});var X=s(V);lF=n(X,"LI",{});var BPe=s(lF);o1e=n(BPe,"STRONG",{});var zMt=s(o1e);LKo=r(zMt,"albert"),zMt.forEach(t),yKo=r(BPe," \u2014 "),Oz=n(BPe,"A",{href:!0});var QMt=s(Oz);xKo=r(QMt,"AlbertForQuestionAnswering"),QMt.forEach(t),$Ko=r(BPe," (ALBERT model)"),BPe.forEach(t),kKo=i(X),iF=n(X,"LI",{});var IPe=s(iF);r1e=n(IPe,"STRONG",{});var WMt=s(r1e);SKo=r(WMt,"bart"),WMt.forEach(t),RKo=r(IPe," \u2014 "),Vz=n(IPe,"A",{href:!0});var HMt=s(Vz);PKo=r(HMt,"BartForQuestionAnswering"),HMt.forEach(t),BKo=r(IPe," (BART model)"),IPe.forEach(t),IKo=i(X),dF=n(X,"LI",{});var NPe=s(dF);t1e=n(NPe,"STRONG",{});var UMt=s(t1e);NKo=r(UMt,"bert"),UMt.forEach(t),qKo=r(NPe," \u2014 "),Xz=n(NPe,"A",{href:!0});var JMt=s(Xz);jKo=r(JMt,"BertForQuestionAnswering"),JMt.forEach(t),DKo=r(NPe," (BERT model)"),NPe.forEach(t),GKo=i(X),cF=n(X,"LI",{});var qPe=s(cF);a1e=n(qPe,"STRONG",{});var YMt=s(a1e);OKo=r(YMt,"big_bird"),YMt.forEach(t),VKo=r(qPe," \u2014 "),zz=n(qPe,"A",{href:!0});var KMt=s(zz);XKo=r(KMt,"BigBirdForQuestionAnswering"),KMt.forEach(t),zKo=r(qPe," (BigBird model)"),qPe.forEach(t),QKo=i(X),fF=n(X,"LI",{});var jPe=s(fF);n1e=n(jPe,"STRONG",{});var ZMt=s(n1e);WKo=r(ZMt,"bigbird_pegasus"),ZMt.forEach(t),HKo=r(jPe," \u2014 "),Qz=n(jPe,"A",{href:!0});var e4t=s(Qz);UKo=r(e4t,"BigBirdPegasusForQuestionAnswering"),e4t.forEach(t),JKo=r(jPe," (BigBird-Pegasus model)"),jPe.forEach(t),YKo=i(X),mF=n(X,"LI",{});var DPe=s(mF);s1e=n(DPe,"STRONG",{});var o4t=s(s1e);KKo=r(o4t,"camembert"),o4t.forEach(t),ZKo=r(DPe," \u2014 "),Wz=n(DPe,"A",{href:!0});var r4t=s(Wz);eZo=r(r4t,"CamembertForQuestionAnswering"),r4t.forEach(t),oZo=r(DPe," (CamemBERT model)"),DPe.forEach(t),rZo=i(X),gF=n(X,"LI",{});var GPe=s(gF);l1e=n(GPe,"STRONG",{});var t4t=s(l1e);tZo=r(t4t,"canine"),t4t.forEach(t),aZo=r(GPe," \u2014 "),Hz=n(GPe,"A",{href:!0});var a4t=s(Hz);nZo=r(a4t,"CanineForQuestionAnswering"),a4t.forEach(t),sZo=r(GPe," (CANINE model)"),GPe.forEach(t),lZo=i(X),hF=n(X,"LI",{});var OPe=s(hF);i1e=n(OPe,"STRONG",{});var n4t=s(i1e);iZo=r(n4t,"convbert"),n4t.forEach(t),dZo=r(OPe," \u2014 "),Uz=n(OPe,"A",{href:!0});var s4t=s(Uz);cZo=r(s4t,"ConvBertForQuestionAnswering"),s4t.forEach(t),fZo=r(OPe," (ConvBERT model)"),OPe.forEach(t),mZo=i(X),pF=n(X,"LI",{});var VPe=s(pF);d1e=n(VPe,"STRONG",{});var l4t=s(d1e);gZo=r(l4t,"data2vec-text"),l4t.forEach(t),hZo=r(VPe," \u2014 "),Jz=n(VPe,"A",{href:!0});var i4t=s(Jz);pZo=r(i4t,"Data2VecTextForQuestionAnswering"),i4t.forEach(t),_Zo=r(VPe," (Data2VecText model)"),VPe.forEach(t),uZo=i(X),_F=n(X,"LI",{});var XPe=s(_F);c1e=n(XPe,"STRONG",{});var d4t=s(c1e);bZo=r(d4t,"deberta"),d4t.forEach(t),vZo=r(XPe," \u2014 "),Yz=n(XPe,"A",{href:!0});var c4t=s(Yz);FZo=r(c4t,"DebertaForQuestionAnswering"),c4t.forEach(t),TZo=r(XPe," (DeBERTa model)"),XPe.forEach(t),MZo=i(X),uF=n(X,"LI",{});var zPe=s(uF);f1e=n(zPe,"STRONG",{});var f4t=s(f1e);EZo=r(f4t,"deberta-v2"),f4t.forEach(t),CZo=r(zPe," \u2014 "),Kz=n(zPe,"A",{href:!0});var m4t=s(Kz);wZo=r(m4t,"DebertaV2ForQuestionAnswering"),m4t.forEach(t),AZo=r(zPe," (DeBERTa-v2 model)"),zPe.forEach(t),LZo=i(X),bF=n(X,"LI",{});var QPe=s(bF);m1e=n(QPe,"STRONG",{});var g4t=s(m1e);yZo=r(g4t,"distilbert"),g4t.forEach(t),xZo=r(QPe," \u2014 "),Zz=n(QPe,"A",{href:!0});var h4t=s(Zz);$Zo=r(h4t,"DistilBertForQuestionAnswering"),h4t.forEach(t),kZo=r(QPe," (DistilBERT model)"),QPe.forEach(t),SZo=i(X),vF=n(X,"LI",{});var WPe=s(vF);g1e=n(WPe,"STRONG",{});var p4t=s(g1e);RZo=r(p4t,"electra"),p4t.forEach(t),PZo=r(WPe," \u2014 "),eQ=n(WPe,"A",{href:!0});var _4t=s(eQ);BZo=r(_4t,"ElectraForQuestionAnswering"),_4t.forEach(t),IZo=r(WPe," (ELECTRA model)"),WPe.forEach(t),NZo=i(X),FF=n(X,"LI",{});var HPe=s(FF);h1e=n(HPe,"STRONG",{});var u4t=s(h1e);qZo=r(u4t,"flaubert"),u4t.forEach(t),jZo=r(HPe," \u2014 "),oQ=n(HPe,"A",{href:!0});var b4t=s(oQ);DZo=r(b4t,"FlaubertForQuestionAnsweringSimple"),b4t.forEach(t),GZo=r(HPe," (FlauBERT model)"),HPe.forEach(t),OZo=i(X),TF=n(X,"LI",{});var UPe=s(TF);p1e=n(UPe,"STRONG",{});var v4t=s(p1e);VZo=r(v4t,"fnet"),v4t.forEach(t),XZo=r(UPe," \u2014 "),rQ=n(UPe,"A",{href:!0});var F4t=s(rQ);zZo=r(F4t,"FNetForQuestionAnswering"),F4t.forEach(t),QZo=r(UPe," (FNet model)"),UPe.forEach(t),WZo=i(X),MF=n(X,"LI",{});var JPe=s(MF);_1e=n(JPe,"STRONG",{});var T4t=s(_1e);HZo=r(T4t,"funnel"),T4t.forEach(t),UZo=r(JPe," \u2014 "),tQ=n(JPe,"A",{href:!0});var M4t=s(tQ);JZo=r(M4t,"FunnelForQuestionAnswering"),M4t.forEach(t),YZo=r(JPe," (Funnel Transformer model)"),JPe.forEach(t),KZo=i(X),EF=n(X,"LI",{});var YPe=s(EF);u1e=n(YPe,"STRONG",{});var E4t=s(u1e);ZZo=r(E4t,"gptj"),E4t.forEach(t),eer=r(YPe," \u2014 "),aQ=n(YPe,"A",{href:!0});var C4t=s(aQ);oer=r(C4t,"GPTJForQuestionAnswering"),C4t.forEach(t),rer=r(YPe," (GPT-J model)"),YPe.forEach(t),ter=i(X),CF=n(X,"LI",{});var KPe=s(CF);b1e=n(KPe,"STRONG",{});var w4t=s(b1e);aer=r(w4t,"ibert"),w4t.forEach(t),ner=r(KPe," \u2014 "),nQ=n(KPe,"A",{href:!0});var A4t=s(nQ);ser=r(A4t,"IBertForQuestionAnswering"),A4t.forEach(t),ler=r(KPe," (I-BERT model)"),KPe.forEach(t),ier=i(X),wF=n(X,"LI",{});var ZPe=s(wF);v1e=n(ZPe,"STRONG",{});var L4t=s(v1e);der=r(L4t,"layoutlmv2"),L4t.forEach(t),cer=r(ZPe," \u2014 "),sQ=n(ZPe,"A",{href:!0});var y4t=s(sQ);fer=r(y4t,"LayoutLMv2ForQuestionAnswering"),y4t.forEach(t),mer=r(ZPe," (LayoutLMv2 model)"),ZPe.forEach(t),ger=i(X),AF=n(X,"LI",{});var eBe=s(AF);F1e=n(eBe,"STRONG",{});var x4t=s(F1e);her=r(x4t,"layoutlmv3"),x4t.forEach(t),per=r(eBe," \u2014 "),lQ=n(eBe,"A",{href:!0});var $4t=s(lQ);_er=r($4t,"LayoutLMv3ForQuestionAnswering"),$4t.forEach(t),uer=r(eBe," (LayoutLMv3 model)"),eBe.forEach(t),ber=i(X),LF=n(X,"LI",{});var oBe=s(LF);T1e=n(oBe,"STRONG",{});var k4t=s(T1e);ver=r(k4t,"led"),k4t.forEach(t),Fer=r(oBe," \u2014 "),iQ=n(oBe,"A",{href:!0});var S4t=s(iQ);Ter=r(S4t,"LEDForQuestionAnswering"),S4t.forEach(t),Mer=r(oBe," (LED model)"),oBe.forEach(t),Eer=i(X),yF=n(X,"LI",{});var rBe=s(yF);M1e=n(rBe,"STRONG",{});var R4t=s(M1e);Cer=r(R4t,"longformer"),R4t.forEach(t),wer=r(rBe," \u2014 "),dQ=n(rBe,"A",{href:!0});var P4t=s(dQ);Aer=r(P4t,"LongformerForQuestionAnswering"),P4t.forEach(t),Ler=r(rBe," (Longformer model)"),rBe.forEach(t),yer=i(X),xF=n(X,"LI",{});var tBe=s(xF);E1e=n(tBe,"STRONG",{});var B4t=s(E1e);xer=r(B4t,"lxmert"),B4t.forEach(t),$er=r(tBe," \u2014 "),cQ=n(tBe,"A",{href:!0});var I4t=s(cQ);ker=r(I4t,"LxmertForQuestionAnswering"),I4t.forEach(t),Ser=r(tBe," (LXMERT model)"),tBe.forEach(t),Rer=i(X),$F=n(X,"LI",{});var aBe=s($F);C1e=n(aBe,"STRONG",{});var N4t=s(C1e);Per=r(N4t,"mbart"),N4t.forEach(t),Ber=r(aBe," \u2014 "),fQ=n(aBe,"A",{href:!0});var q4t=s(fQ);Ier=r(q4t,"MBartForQuestionAnswering"),q4t.forEach(t),Ner=r(aBe," (mBART model)"),aBe.forEach(t),qer=i(X),kF=n(X,"LI",{});var nBe=s(kF);w1e=n(nBe,"STRONG",{});var j4t=s(w1e);jer=r(j4t,"megatron-bert"),j4t.forEach(t),Der=r(nBe," \u2014 "),mQ=n(nBe,"A",{href:!0});var D4t=s(mQ);Ger=r(D4t,"MegatronBertForQuestionAnswering"),D4t.forEach(t),Oer=r(nBe," (Megatron-BERT model)"),nBe.forEach(t),Ver=i(X),SF=n(X,"LI",{});var sBe=s(SF);A1e=n(sBe,"STRONG",{});var G4t=s(A1e);Xer=r(G4t,"mobilebert"),G4t.forEach(t),zer=r(sBe," \u2014 "),gQ=n(sBe,"A",{href:!0});var O4t=s(gQ);Qer=r(O4t,"MobileBertForQuestionAnswering"),O4t.forEach(t),Wer=r(sBe," (MobileBERT model)"),sBe.forEach(t),Her=i(X),RF=n(X,"LI",{});var lBe=s(RF);L1e=n(lBe,"STRONG",{});var V4t=s(L1e);Uer=r(V4t,"mpnet"),V4t.forEach(t),Jer=r(lBe," \u2014 "),hQ=n(lBe,"A",{href:!0});var X4t=s(hQ);Yer=r(X4t,"MPNetForQuestionAnswering"),X4t.forEach(t),Ker=r(lBe," (MPNet model)"),lBe.forEach(t),Zer=i(X),PF=n(X,"LI",{});var iBe=s(PF);y1e=n(iBe,"STRONG",{});var z4t=s(y1e);eor=r(z4t,"nezha"),z4t.forEach(t),oor=r(iBe," \u2014 "),pQ=n(iBe,"A",{href:!0});var Q4t=s(pQ);ror=r(Q4t,"NezhaForQuestionAnswering"),Q4t.forEach(t),tor=r(iBe," (Nezha model)"),iBe.forEach(t),aor=i(X),BF=n(X,"LI",{});var dBe=s(BF);x1e=n(dBe,"STRONG",{});var W4t=s(x1e);nor=r(W4t,"nystromformer"),W4t.forEach(t),sor=r(dBe," \u2014 "),_Q=n(dBe,"A",{href:!0});var H4t=s(_Q);lor=r(H4t,"NystromformerForQuestionAnswering"),H4t.forEach(t),ior=r(dBe," (Nystr\xF6mformer model)"),dBe.forEach(t),dor=i(X),IF=n(X,"LI",{});var cBe=s(IF);$1e=n(cBe,"STRONG",{});var U4t=s($1e);cor=r(U4t,"qdqbert"),U4t.forEach(t),mor=r(cBe," \u2014 "),uQ=n(cBe,"A",{href:!0});var J4t=s(uQ);gor=r(J4t,"QDQBertForQuestionAnswering"),J4t.forEach(t),hor=r(cBe," (QDQBert model)"),cBe.forEach(t),por=i(X),NF=n(X,"LI",{});var fBe=s(NF);k1e=n(fBe,"STRONG",{});var Y4t=s(k1e);_or=r(Y4t,"reformer"),Y4t.forEach(t),uor=r(fBe," \u2014 "),bQ=n(fBe,"A",{href:!0});var K4t=s(bQ);bor=r(K4t,"ReformerForQuestionAnswering"),K4t.forEach(t),vor=r(fBe," (Reformer model)"),fBe.forEach(t),For=i(X),qF=n(X,"LI",{});var mBe=s(qF);S1e=n(mBe,"STRONG",{});var Z4t=s(S1e);Tor=r(Z4t,"rembert"),Z4t.forEach(t),Mor=r(mBe," \u2014 "),vQ=n(mBe,"A",{href:!0});var eEt=s(vQ);Eor=r(eEt,"RemBertForQuestionAnswering"),eEt.forEach(t),Cor=r(mBe," (RemBERT model)"),mBe.forEach(t),wor=i(X),jF=n(X,"LI",{});var gBe=s(jF);R1e=n(gBe,"STRONG",{});var oEt=s(R1e);Aor=r(oEt,"roberta"),oEt.forEach(t),Lor=r(gBe," \u2014 "),FQ=n(gBe,"A",{href:!0});var rEt=s(FQ);yor=r(rEt,"RobertaForQuestionAnswering"),rEt.forEach(t),xor=r(gBe," (RoBERTa model)"),gBe.forEach(t),$or=i(X),DF=n(X,"LI",{});var hBe=s(DF);P1e=n(hBe,"STRONG",{});var tEt=s(P1e);kor=r(tEt,"roformer"),tEt.forEach(t),Sor=r(hBe," \u2014 "),TQ=n(hBe,"A",{href:!0});var aEt=s(TQ);Ror=r(aEt,"RoFormerForQuestionAnswering"),aEt.forEach(t),Por=r(hBe," (RoFormer model)"),hBe.forEach(t),Bor=i(X),GF=n(X,"LI",{});var pBe=s(GF);B1e=n(pBe,"STRONG",{});var nEt=s(B1e);Ior=r(nEt,"splinter"),nEt.forEach(t),Nor=r(pBe," \u2014 "),MQ=n(pBe,"A",{href:!0});var sEt=s(MQ);qor=r(sEt,"SplinterForQuestionAnswering"),sEt.forEach(t),jor=r(pBe," (Splinter model)"),pBe.forEach(t),Dor=i(X),OF=n(X,"LI",{});var _Be=s(OF);I1e=n(_Be,"STRONG",{});var lEt=s(I1e);Gor=r(lEt,"squeezebert"),lEt.forEach(t),Oor=r(_Be," \u2014 "),EQ=n(_Be,"A",{href:!0});var iEt=s(EQ);Vor=r(iEt,"SqueezeBertForQuestionAnswering"),iEt.forEach(t),Xor=r(_Be," (SqueezeBERT model)"),_Be.forEach(t),zor=i(X),VF=n(X,"LI",{});var uBe=s(VF);N1e=n(uBe,"STRONG",{});var dEt=s(N1e);Qor=r(dEt,"xlm"),dEt.forEach(t),Wor=r(uBe," \u2014 "),CQ=n(uBe,"A",{href:!0});var cEt=s(CQ);Hor=r(cEt,"XLMForQuestionAnsweringSimple"),cEt.forEach(t),Uor=r(uBe," (XLM model)"),uBe.forEach(t),Jor=i(X),XF=n(X,"LI",{});var bBe=s(XF);q1e=n(bBe,"STRONG",{});var fEt=s(q1e);Yor=r(fEt,"xlm-roberta"),fEt.forEach(t),Kor=r(bBe," \u2014 "),wQ=n(bBe,"A",{href:!0});var mEt=s(wQ);Zor=r(mEt,"XLMRobertaForQuestionAnswering"),mEt.forEach(t),err=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),orr=i(X),zF=n(X,"LI",{});var vBe=s(zF);j1e=n(vBe,"STRONG",{});var gEt=s(j1e);rrr=r(gEt,"xlm-roberta-xl"),gEt.forEach(t),trr=r(vBe," \u2014 "),AQ=n(vBe,"A",{href:!0});var hEt=s(AQ);arr=r(hEt,"XLMRobertaXLForQuestionAnswering"),hEt.forEach(t),nrr=r(vBe," (XLM-RoBERTa-XL model)"),vBe.forEach(t),srr=i(X),QF=n(X,"LI",{});var FBe=s(QF);D1e=n(FBe,"STRONG",{});var pEt=s(D1e);lrr=r(pEt,"xlnet"),pEt.forEach(t),irr=r(FBe," \u2014 "),LQ=n(FBe,"A",{href:!0});var _Et=s(LQ);drr=r(_Et,"XLNetForQuestionAnsweringSimple"),_Et.forEach(t),crr=r(FBe," (XLNet model)"),FBe.forEach(t),frr=i(X),WF=n(X,"LI",{});var TBe=s(WF);G1e=n(TBe,"STRONG",{});var uEt=s(G1e);mrr=r(uEt,"yoso"),uEt.forEach(t),grr=r(TBe," \u2014 "),yQ=n(TBe,"A",{href:!0});var bEt=s(yQ);hrr=r(bEt,"YosoForQuestionAnswering"),bEt.forEach(t),prr=r(TBe," (YOSO model)"),TBe.forEach(t),X.forEach(t),_rr=i(ha),HF=n(ha,"P",{});var MBe=s(HF);urr=r(MBe,"The model is set in evaluation mode by default using "),O1e=n(MBe,"CODE",{});var vEt=s(O1e);brr=r(vEt,"model.eval()"),vEt.forEach(t),vrr=r(MBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=n(MBe,"CODE",{});var FEt=s(V1e);Frr=r(FEt,"model.train()"),FEt.forEach(t),MBe.forEach(t),Trr=i(ha),T(UF.$$.fragment,ha),ha.forEach(t),dl.forEach(t),cVe=i(f),gd=n(f,"H2",{class:!0});var _ze=s(gd);JF=n(_ze,"A",{id:!0,class:!0,href:!0});var TEt=s(JF);X1e=n(TEt,"SPAN",{});var MEt=s(X1e);T(i8.$$.fragment,MEt),MEt.forEach(t),TEt.forEach(t),Mrr=i(_ze),z1e=n(_ze,"SPAN",{});var EEt=s(z1e);Err=r(EEt,"AutoModelForTableQuestionAnswering"),EEt.forEach(t),_ze.forEach(t),fVe=i(f),Do=n(f,"DIV",{class:!0});var cl=s(Do);T(d8.$$.fragment,cl),Crr=i(cl),hd=n(cl,"P",{});var fre=s(hd);wrr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xQ=n(fre,"A",{href:!0});var CEt=s(xQ);Arr=r(CEt,"from_pretrained()"),CEt.forEach(t),Lrr=r(fre," class method or the "),$Q=n(fre,"A",{href:!0});var wEt=s($Q);yrr=r(wEt,"from_config()"),wEt.forEach(t),xrr=r(fre,` class
method.`),fre.forEach(t),$rr=i(cl),c8=n(cl,"P",{});var uze=s(c8);krr=r(uze,"This class cannot be instantiated directly using "),Q1e=n(uze,"CODE",{});var AEt=s(Q1e);Srr=r(AEt,"__init__()"),AEt.forEach(t),Rrr=r(uze," (throws an error)."),uze.forEach(t),Prr=i(cl),pt=n(cl,"DIV",{class:!0});var iA=s(pt);T(f8.$$.fragment,iA),Brr=i(iA),W1e=n(iA,"P",{});var LEt=s(W1e);Irr=r(LEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),LEt.forEach(t),Nrr=i(iA),pd=n(iA,"P",{});var mre=s(pd);qrr=r(mre,`Note:
Loading a model from its configuration file does `),H1e=n(mre,"STRONG",{});var yEt=s(H1e);jrr=r(yEt,"not"),yEt.forEach(t),Drr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(mre,"A",{href:!0});var xEt=s(kQ);Grr=r(xEt,"from_pretrained()"),xEt.forEach(t),Orr=r(mre," to load the model weights."),mre.forEach(t),Vrr=i(iA),T(YF.$$.fragment,iA),iA.forEach(t),Xrr=i(cl),so=n(cl,"DIV",{class:!0});var pa=s(so);T(m8.$$.fragment,pa),zrr=i(pa),U1e=n(pa,"P",{});var $Et=s(U1e);Qrr=r($Et,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Et.forEach(t),Wrr=i(pa),Xa=n(pa,"P",{});var dA=s(Xa);Hrr=r(dA,"The model class to instantiate is selected based on the "),J1e=n(dA,"CODE",{});var kEt=s(J1e);Urr=r(kEt,"model_type"),kEt.forEach(t),Jrr=r(dA,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(dA,"CODE",{});var SEt=s(Y1e);Yrr=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),Krr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(dA,"CODE",{});var REt=s(K1e);Zrr=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),etr=r(dA,":"),dA.forEach(t),otr=i(pa),Z1e=n(pa,"UL",{});var PEt=s(Z1e);KF=n(PEt,"LI",{});var EBe=s(KF);e7e=n(EBe,"STRONG",{});var BEt=s(e7e);rtr=r(BEt,"tapas"),BEt.forEach(t),ttr=r(EBe," \u2014 "),SQ=n(EBe,"A",{href:!0});var IEt=s(SQ);atr=r(IEt,"TapasForQuestionAnswering"),IEt.forEach(t),ntr=r(EBe," (TAPAS model)"),EBe.forEach(t),PEt.forEach(t),str=i(pa),ZF=n(pa,"P",{});var CBe=s(ZF);ltr=r(CBe,"The model is set in evaluation mode by default using "),o7e=n(CBe,"CODE",{});var NEt=s(o7e);itr=r(NEt,"model.eval()"),NEt.forEach(t),dtr=r(CBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r7e=n(CBe,"CODE",{});var qEt=s(r7e);ctr=r(qEt,"model.train()"),qEt.forEach(t),CBe.forEach(t),ftr=i(pa),T(e6.$$.fragment,pa),pa.forEach(t),cl.forEach(t),mVe=i(f),_d=n(f,"H2",{class:!0});var bze=s(_d);o6=n(bze,"A",{id:!0,class:!0,href:!0});var jEt=s(o6);t7e=n(jEt,"SPAN",{});var DEt=s(t7e);T(g8.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),mtr=i(bze),a7e=n(bze,"SPAN",{});var GEt=s(a7e);gtr=r(GEt,"AutoModelForImageClassification"),GEt.forEach(t),bze.forEach(t),gVe=i(f),Go=n(f,"DIV",{class:!0});var fl=s(Go);T(h8.$$.fragment,fl),htr=i(fl),ud=n(fl,"P",{});var gre=s(ud);ptr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RQ=n(gre,"A",{href:!0});var OEt=s(RQ);_tr=r(OEt,"from_pretrained()"),OEt.forEach(t),utr=r(gre," class method or the "),PQ=n(gre,"A",{href:!0});var VEt=s(PQ);btr=r(VEt,"from_config()"),VEt.forEach(t),vtr=r(gre,` class
method.`),gre.forEach(t),Ftr=i(fl),p8=n(fl,"P",{});var vze=s(p8);Ttr=r(vze,"This class cannot be instantiated directly using "),n7e=n(vze,"CODE",{});var XEt=s(n7e);Mtr=r(XEt,"__init__()"),XEt.forEach(t),Etr=r(vze," (throws an error)."),vze.forEach(t),Ctr=i(fl),_t=n(fl,"DIV",{class:!0});var cA=s(_t);T(_8.$$.fragment,cA),wtr=i(cA),s7e=n(cA,"P",{});var zEt=s(s7e);Atr=r(zEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zEt.forEach(t),Ltr=i(cA),bd=n(cA,"P",{});var hre=s(bd);ytr=r(hre,`Note:
Loading a model from its configuration file does `),l7e=n(hre,"STRONG",{});var QEt=s(l7e);xtr=r(QEt,"not"),QEt.forEach(t),$tr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(hre,"A",{href:!0});var WEt=s(BQ);ktr=r(WEt,"from_pretrained()"),WEt.forEach(t),Str=r(hre," to load the model weights."),hre.forEach(t),Rtr=i(cA),T(r6.$$.fragment,cA),cA.forEach(t),Ptr=i(fl),lo=n(fl,"DIV",{class:!0});var _a=s(lo);T(u8.$$.fragment,_a),Btr=i(_a),i7e=n(_a,"P",{});var HEt=s(i7e);Itr=r(HEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HEt.forEach(t),Ntr=i(_a),za=n(_a,"P",{});var fA=s(za);qtr=r(fA,"The model class to instantiate is selected based on the "),d7e=n(fA,"CODE",{});var UEt=s(d7e);jtr=r(UEt,"model_type"),UEt.forEach(t),Dtr=r(fA,` property of the config object (either
passed as an argument or loaded from `),c7e=n(fA,"CODE",{});var JEt=s(c7e);Gtr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),Otr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(fA,"CODE",{});var YEt=s(f7e);Vtr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),Xtr=r(fA,":"),fA.forEach(t),ztr=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);t6=n(Te,"LI",{});var wBe=s(t6);m7e=n(wBe,"STRONG",{});var KEt=s(m7e);Qtr=r(KEt,"beit"),KEt.forEach(t),Wtr=r(wBe," \u2014 "),IQ=n(wBe,"A",{href:!0});var ZEt=s(IQ);Htr=r(ZEt,"BeitForImageClassification"),ZEt.forEach(t),Utr=r(wBe," (BEiT model)"),wBe.forEach(t),Jtr=i(Te),a6=n(Te,"LI",{});var ABe=s(a6);g7e=n(ABe,"STRONG",{});var eCt=s(g7e);Ytr=r(eCt,"convnext"),eCt.forEach(t),Ktr=r(ABe," \u2014 "),NQ=n(ABe,"A",{href:!0});var oCt=s(NQ);Ztr=r(oCt,"ConvNextForImageClassification"),oCt.forEach(t),ear=r(ABe," (ConvNeXT model)"),ABe.forEach(t),oar=i(Te),n6=n(Te,"LI",{});var LBe=s(n6);h7e=n(LBe,"STRONG",{});var rCt=s(h7e);rar=r(rCt,"cvt"),rCt.forEach(t),tar=r(LBe," \u2014 "),qQ=n(LBe,"A",{href:!0});var tCt=s(qQ);aar=r(tCt,"CvtForImageClassification"),tCt.forEach(t),nar=r(LBe," (CvT model)"),LBe.forEach(t),sar=i(Te),s6=n(Te,"LI",{});var yBe=s(s6);p7e=n(yBe,"STRONG",{});var aCt=s(p7e);lar=r(aCt,"data2vec-vision"),aCt.forEach(t),iar=r(yBe," \u2014 "),jQ=n(yBe,"A",{href:!0});var nCt=s(jQ);dar=r(nCt,"Data2VecVisionForImageClassification"),nCt.forEach(t),car=r(yBe," (Data2VecVision model)"),yBe.forEach(t),far=i(Te),Ws=n(Te,"LI",{});var mS=s(Ws);_7e=n(mS,"STRONG",{});var sCt=s(_7e);mar=r(sCt,"deit"),sCt.forEach(t),gar=r(mS," \u2014 "),DQ=n(mS,"A",{href:!0});var lCt=s(DQ);har=r(lCt,"DeiTForImageClassification"),lCt.forEach(t),par=r(mS," or "),GQ=n(mS,"A",{href:!0});var iCt=s(GQ);_ar=r(iCt,"DeiTForImageClassificationWithTeacher"),iCt.forEach(t),uar=r(mS," (DeiT model)"),mS.forEach(t),bar=i(Te),l6=n(Te,"LI",{});var xBe=s(l6);u7e=n(xBe,"STRONG",{});var dCt=s(u7e);Far=r(dCt,"imagegpt"),dCt.forEach(t),Tar=r(xBe," \u2014 "),OQ=n(xBe,"A",{href:!0});var cCt=s(OQ);Mar=r(cCt,"ImageGPTForImageClassification"),cCt.forEach(t),Ear=r(xBe," (ImageGPT model)"),xBe.forEach(t),Car=i(Te),Hs=n(Te,"LI",{});var gS=s(Hs);b7e=n(gS,"STRONG",{});var fCt=s(b7e);war=r(fCt,"levit"),fCt.forEach(t),Aar=r(gS," \u2014 "),VQ=n(gS,"A",{href:!0});var mCt=s(VQ);Lar=r(mCt,"LevitForImageClassification"),mCt.forEach(t),yar=r(gS," or "),XQ=n(gS,"A",{href:!0});var gCt=s(XQ);xar=r(gCt,"LevitForImageClassificationWithTeacher"),gCt.forEach(t),$ar=r(gS," (LeViT model)"),gS.forEach(t),kar=i(Te),ut=n(Te,"LI",{});var xf=s(ut);v7e=n(xf,"STRONG",{});var hCt=s(v7e);Sar=r(hCt,"perceiver"),hCt.forEach(t),Rar=r(xf," \u2014 "),zQ=n(xf,"A",{href:!0});var pCt=s(zQ);Par=r(pCt,"PerceiverForImageClassificationLearned"),pCt.forEach(t),Bar=r(xf," or "),QQ=n(xf,"A",{href:!0});var _Ct=s(QQ);Iar=r(_Ct,"PerceiverForImageClassificationFourier"),_Ct.forEach(t),Nar=r(xf," or "),WQ=n(xf,"A",{href:!0});var uCt=s(WQ);qar=r(uCt,"PerceiverForImageClassificationConvProcessing"),uCt.forEach(t),jar=r(xf," (Perceiver model)"),xf.forEach(t),Dar=i(Te),i6=n(Te,"LI",{});var $Be=s(i6);F7e=n($Be,"STRONG",{});var bCt=s(F7e);Gar=r(bCt,"poolformer"),bCt.forEach(t),Oar=r($Be," \u2014 "),HQ=n($Be,"A",{href:!0});var vCt=s(HQ);Var=r(vCt,"PoolFormerForImageClassification"),vCt.forEach(t),Xar=r($Be," (PoolFormer model)"),$Be.forEach(t),zar=i(Te),d6=n(Te,"LI",{});var kBe=s(d6);T7e=n(kBe,"STRONG",{});var FCt=s(T7e);Qar=r(FCt,"regnet"),FCt.forEach(t),War=r(kBe," \u2014 "),UQ=n(kBe,"A",{href:!0});var TCt=s(UQ);Har=r(TCt,"RegNetForImageClassification"),TCt.forEach(t),Uar=r(kBe," (RegNet model)"),kBe.forEach(t),Jar=i(Te),c6=n(Te,"LI",{});var SBe=s(c6);M7e=n(SBe,"STRONG",{});var MCt=s(M7e);Yar=r(MCt,"resnet"),MCt.forEach(t),Kar=r(SBe," \u2014 "),JQ=n(SBe,"A",{href:!0});var ECt=s(JQ);Zar=r(ECt,"ResNetForImageClassification"),ECt.forEach(t),enr=r(SBe," (ResNet model)"),SBe.forEach(t),onr=i(Te),f6=n(Te,"LI",{});var RBe=s(f6);E7e=n(RBe,"STRONG",{});var CCt=s(E7e);rnr=r(CCt,"segformer"),CCt.forEach(t),tnr=r(RBe," \u2014 "),YQ=n(RBe,"A",{href:!0});var wCt=s(YQ);anr=r(wCt,"SegformerForImageClassification"),wCt.forEach(t),nnr=r(RBe," (SegFormer model)"),RBe.forEach(t),snr=i(Te),m6=n(Te,"LI",{});var PBe=s(m6);C7e=n(PBe,"STRONG",{});var ACt=s(C7e);lnr=r(ACt,"swin"),ACt.forEach(t),inr=r(PBe," \u2014 "),KQ=n(PBe,"A",{href:!0});var LCt=s(KQ);dnr=r(LCt,"SwinForImageClassification"),LCt.forEach(t),cnr=r(PBe," (Swin Transformer model)"),PBe.forEach(t),fnr=i(Te),g6=n(Te,"LI",{});var BBe=s(g6);w7e=n(BBe,"STRONG",{});var yCt=s(w7e);mnr=r(yCt,"van"),yCt.forEach(t),gnr=r(BBe," \u2014 "),ZQ=n(BBe,"A",{href:!0});var xCt=s(ZQ);hnr=r(xCt,"VanForImageClassification"),xCt.forEach(t),pnr=r(BBe," (VAN model)"),BBe.forEach(t),_nr=i(Te),h6=n(Te,"LI",{});var IBe=s(h6);A7e=n(IBe,"STRONG",{});var $Ct=s(A7e);unr=r($Ct,"vit"),$Ct.forEach(t),bnr=r(IBe," \u2014 "),eW=n(IBe,"A",{href:!0});var kCt=s(eW);vnr=r(kCt,"ViTForImageClassification"),kCt.forEach(t),Fnr=r(IBe," (ViT model)"),IBe.forEach(t),Te.forEach(t),Tnr=i(_a),p6=n(_a,"P",{});var NBe=s(p6);Mnr=r(NBe,"The model is set in evaluation mode by default using "),L7e=n(NBe,"CODE",{});var SCt=s(L7e);Enr=r(SCt,"model.eval()"),SCt.forEach(t),Cnr=r(NBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y7e=n(NBe,"CODE",{});var RCt=s(y7e);wnr=r(RCt,"model.train()"),RCt.forEach(t),NBe.forEach(t),Anr=i(_a),T(_6.$$.fragment,_a),_a.forEach(t),fl.forEach(t),hVe=i(f),vd=n(f,"H2",{class:!0});var Fze=s(vd);u6=n(Fze,"A",{id:!0,class:!0,href:!0});var PCt=s(u6);x7e=n(PCt,"SPAN",{});var BCt=s(x7e);T(b8.$$.fragment,BCt),BCt.forEach(t),PCt.forEach(t),Lnr=i(Fze),$7e=n(Fze,"SPAN",{});var ICt=s($7e);ynr=r(ICt,"AutoModelForVision2Seq"),ICt.forEach(t),Fze.forEach(t),pVe=i(f),Oo=n(f,"DIV",{class:!0});var ml=s(Oo);T(v8.$$.fragment,ml),xnr=i(ml),Fd=n(ml,"P",{});var pre=s(Fd);$nr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oW=n(pre,"A",{href:!0});var NCt=s(oW);knr=r(NCt,"from_pretrained()"),NCt.forEach(t),Snr=r(pre," class method or the "),rW=n(pre,"A",{href:!0});var qCt=s(rW);Rnr=r(qCt,"from_config()"),qCt.forEach(t),Pnr=r(pre,` class
method.`),pre.forEach(t),Bnr=i(ml),F8=n(ml,"P",{});var Tze=s(F8);Inr=r(Tze,"This class cannot be instantiated directly using "),k7e=n(Tze,"CODE",{});var jCt=s(k7e);Nnr=r(jCt,"__init__()"),jCt.forEach(t),qnr=r(Tze," (throws an error)."),Tze.forEach(t),jnr=i(ml),bt=n(ml,"DIV",{class:!0});var mA=s(bt);T(T8.$$.fragment,mA),Dnr=i(mA),S7e=n(mA,"P",{});var DCt=s(S7e);Gnr=r(DCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DCt.forEach(t),Onr=i(mA),Td=n(mA,"P",{});var _re=s(Td);Vnr=r(_re,`Note:
Loading a model from its configuration file does `),R7e=n(_re,"STRONG",{});var GCt=s(R7e);Xnr=r(GCt,"not"),GCt.forEach(t),znr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(_re,"A",{href:!0});var OCt=s(tW);Qnr=r(OCt,"from_pretrained()"),OCt.forEach(t),Wnr=r(_re," to load the model weights."),_re.forEach(t),Hnr=i(mA),T(b6.$$.fragment,mA),mA.forEach(t),Unr=i(ml),io=n(ml,"DIV",{class:!0});var ua=s(io);T(M8.$$.fragment,ua),Jnr=i(ua),P7e=n(ua,"P",{});var VCt=s(P7e);Ynr=r(VCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VCt.forEach(t),Knr=i(ua),Qa=n(ua,"P",{});var gA=s(Qa);Znr=r(gA,"The model class to instantiate is selected based on the "),B7e=n(gA,"CODE",{});var XCt=s(B7e);esr=r(XCt,"model_type"),XCt.forEach(t),osr=r(gA,` property of the config object (either
passed as an argument or loaded from `),I7e=n(gA,"CODE",{});var zCt=s(I7e);rsr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),tsr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=n(gA,"CODE",{});var QCt=s(N7e);asr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),nsr=r(gA,":"),gA.forEach(t),ssr=i(ua),q7e=n(ua,"UL",{});var WCt=s(q7e);v6=n(WCt,"LI",{});var qBe=s(v6);j7e=n(qBe,"STRONG",{});var HCt=s(j7e);lsr=r(HCt,"vision-encoder-decoder"),HCt.forEach(t),isr=r(qBe," \u2014 "),aW=n(qBe,"A",{href:!0});var UCt=s(aW);dsr=r(UCt,"VisionEncoderDecoderModel"),UCt.forEach(t),csr=r(qBe," (Vision Encoder decoder model)"),qBe.forEach(t),WCt.forEach(t),fsr=i(ua),F6=n(ua,"P",{});var jBe=s(F6);msr=r(jBe,"The model is set in evaluation mode by default using "),D7e=n(jBe,"CODE",{});var JCt=s(D7e);gsr=r(JCt,"model.eval()"),JCt.forEach(t),hsr=r(jBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G7e=n(jBe,"CODE",{});var YCt=s(G7e);psr=r(YCt,"model.train()"),YCt.forEach(t),jBe.forEach(t),_sr=i(ua),T(T6.$$.fragment,ua),ua.forEach(t),ml.forEach(t),_Ve=i(f),Md=n(f,"H2",{class:!0});var Mze=s(Md);M6=n(Mze,"A",{id:!0,class:!0,href:!0});var KCt=s(M6);O7e=n(KCt,"SPAN",{});var ZCt=s(O7e);T(E8.$$.fragment,ZCt),ZCt.forEach(t),KCt.forEach(t),usr=i(Mze),V7e=n(Mze,"SPAN",{});var e5t=s(V7e);bsr=r(e5t,"AutoModelForVisualQuestionAnswering"),e5t.forEach(t),Mze.forEach(t),uVe=i(f),Vo=n(f,"DIV",{class:!0});var gl=s(Vo);T(C8.$$.fragment,gl),vsr=i(gl),Ed=n(gl,"P",{});var ure=s(Ed);Fsr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),nW=n(ure,"A",{href:!0});var o5t=s(nW);Tsr=r(o5t,"from_pretrained()"),o5t.forEach(t),Msr=r(ure," class method or the "),sW=n(ure,"A",{href:!0});var r5t=s(sW);Esr=r(r5t,"from_config()"),r5t.forEach(t),Csr=r(ure,` class
method.`),ure.forEach(t),wsr=i(gl),w8=n(gl,"P",{});var Eze=s(w8);Asr=r(Eze,"This class cannot be instantiated directly using "),X7e=n(Eze,"CODE",{});var t5t=s(X7e);Lsr=r(t5t,"__init__()"),t5t.forEach(t),ysr=r(Eze," (throws an error)."),Eze.forEach(t),xsr=i(gl),vt=n(gl,"DIV",{class:!0});var hA=s(vt);T(A8.$$.fragment,hA),$sr=i(hA),z7e=n(hA,"P",{});var a5t=s(z7e);ksr=r(a5t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),a5t.forEach(t),Ssr=i(hA),Cd=n(hA,"P",{});var bre=s(Cd);Rsr=r(bre,`Note:
Loading a model from its configuration file does `),Q7e=n(bre,"STRONG",{});var n5t=s(Q7e);Psr=r(n5t,"not"),n5t.forEach(t),Bsr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(bre,"A",{href:!0});var s5t=s(lW);Isr=r(s5t,"from_pretrained()"),s5t.forEach(t),Nsr=r(bre," to load the model weights."),bre.forEach(t),qsr=i(hA),T(E6.$$.fragment,hA),hA.forEach(t),jsr=i(gl),co=n(gl,"DIV",{class:!0});var ba=s(co);T(L8.$$.fragment,ba),Dsr=i(ba),W7e=n(ba,"P",{});var l5t=s(W7e);Gsr=r(l5t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),l5t.forEach(t),Osr=i(ba),Wa=n(ba,"P",{});var pA=s(Wa);Vsr=r(pA,"The model class to instantiate is selected based on the "),H7e=n(pA,"CODE",{});var i5t=s(H7e);Xsr=r(i5t,"model_type"),i5t.forEach(t),zsr=r(pA,` property of the config object (either
passed as an argument or loaded from `),U7e=n(pA,"CODE",{});var d5t=s(U7e);Qsr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),Wsr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(pA,"CODE",{});var c5t=s(J7e);Hsr=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),Usr=r(pA,":"),pA.forEach(t),Jsr=i(ba),Y7e=n(ba,"UL",{});var f5t=s(Y7e);C6=n(f5t,"LI",{});var DBe=s(C6);K7e=n(DBe,"STRONG",{});var m5t=s(K7e);Ysr=r(m5t,"vilt"),m5t.forEach(t),Ksr=r(DBe," \u2014 "),iW=n(DBe,"A",{href:!0});var g5t=s(iW);Zsr=r(g5t,"ViltForQuestionAnswering"),g5t.forEach(t),elr=r(DBe," (ViLT model)"),DBe.forEach(t),f5t.forEach(t),olr=i(ba),w6=n(ba,"P",{});var GBe=s(w6);rlr=r(GBe,"The model is set in evaluation mode by default using "),Z7e=n(GBe,"CODE",{});var h5t=s(Z7e);tlr=r(h5t,"model.eval()"),h5t.forEach(t),alr=r(GBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(GBe,"CODE",{});var p5t=s(e2e);nlr=r(p5t,"model.train()"),p5t.forEach(t),GBe.forEach(t),slr=i(ba),T(A6.$$.fragment,ba),ba.forEach(t),gl.forEach(t),bVe=i(f),wd=n(f,"H2",{class:!0});var Cze=s(wd);L6=n(Cze,"A",{id:!0,class:!0,href:!0});var _5t=s(L6);o2e=n(_5t,"SPAN",{});var u5t=s(o2e);T(y8.$$.fragment,u5t),u5t.forEach(t),_5t.forEach(t),llr=i(Cze),r2e=n(Cze,"SPAN",{});var b5t=s(r2e);ilr=r(b5t,"AutoModelForAudioClassification"),b5t.forEach(t),Cze.forEach(t),vVe=i(f),Xo=n(f,"DIV",{class:!0});var hl=s(Xo);T(x8.$$.fragment,hl),dlr=i(hl),Ad=n(hl,"P",{});var vre=s(Ad);clr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dW=n(vre,"A",{href:!0});var v5t=s(dW);flr=r(v5t,"from_pretrained()"),v5t.forEach(t),mlr=r(vre," class method or the "),cW=n(vre,"A",{href:!0});var F5t=s(cW);glr=r(F5t,"from_config()"),F5t.forEach(t),hlr=r(vre,` class
method.`),vre.forEach(t),plr=i(hl),$8=n(hl,"P",{});var wze=s($8);_lr=r(wze,"This class cannot be instantiated directly using "),t2e=n(wze,"CODE",{});var T5t=s(t2e);ulr=r(T5t,"__init__()"),T5t.forEach(t),blr=r(wze," (throws an error)."),wze.forEach(t),vlr=i(hl),Ft=n(hl,"DIV",{class:!0});var _A=s(Ft);T(k8.$$.fragment,_A),Flr=i(_A),a2e=n(_A,"P",{});var M5t=s(a2e);Tlr=r(M5t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),M5t.forEach(t),Mlr=i(_A),Ld=n(_A,"P",{});var Fre=s(Ld);Elr=r(Fre,`Note:
Loading a model from its configuration file does `),n2e=n(Fre,"STRONG",{});var E5t=s(n2e);Clr=r(E5t,"not"),E5t.forEach(t),wlr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(Fre,"A",{href:!0});var C5t=s(fW);Alr=r(C5t,"from_pretrained()"),C5t.forEach(t),Llr=r(Fre," to load the model weights."),Fre.forEach(t),ylr=i(_A),T(y6.$$.fragment,_A),_A.forEach(t),xlr=i(hl),fo=n(hl,"DIV",{class:!0});var va=s(fo);T(S8.$$.fragment,va),$lr=i(va),s2e=n(va,"P",{});var w5t=s(s2e);klr=r(w5t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),w5t.forEach(t),Slr=i(va),Ha=n(va,"P",{});var uA=s(Ha);Rlr=r(uA,"The model class to instantiate is selected based on the "),l2e=n(uA,"CODE",{});var A5t=s(l2e);Plr=r(A5t,"model_type"),A5t.forEach(t),Blr=r(uA,` property of the config object (either
passed as an argument or loaded from `),i2e=n(uA,"CODE",{});var L5t=s(i2e);Ilr=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),Nlr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(uA,"CODE",{});var y5t=s(d2e);qlr=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),jlr=r(uA,":"),uA.forEach(t),Dlr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);x6=n(ze,"LI",{});var OBe=s(x6);c2e=n(OBe,"STRONG",{});var x5t=s(c2e);Glr=r(x5t,"data2vec-audio"),x5t.forEach(t),Olr=r(OBe," \u2014 "),mW=n(OBe,"A",{href:!0});var $5t=s(mW);Vlr=r($5t,"Data2VecAudioForSequenceClassification"),$5t.forEach(t),Xlr=r(OBe," (Data2VecAudio model)"),OBe.forEach(t),zlr=i(ze),$6=n(ze,"LI",{});var VBe=s($6);f2e=n(VBe,"STRONG",{});var k5t=s(f2e);Qlr=r(k5t,"hubert"),k5t.forEach(t),Wlr=r(VBe," \u2014 "),gW=n(VBe,"A",{href:!0});var S5t=s(gW);Hlr=r(S5t,"HubertForSequenceClassification"),S5t.forEach(t),Ulr=r(VBe," (Hubert model)"),VBe.forEach(t),Jlr=i(ze),k6=n(ze,"LI",{});var XBe=s(k6);m2e=n(XBe,"STRONG",{});var R5t=s(m2e);Ylr=r(R5t,"sew"),R5t.forEach(t),Klr=r(XBe," \u2014 "),hW=n(XBe,"A",{href:!0});var P5t=s(hW);Zlr=r(P5t,"SEWForSequenceClassification"),P5t.forEach(t),eir=r(XBe," (SEW model)"),XBe.forEach(t),oir=i(ze),S6=n(ze,"LI",{});var zBe=s(S6);g2e=n(zBe,"STRONG",{});var B5t=s(g2e);rir=r(B5t,"sew-d"),B5t.forEach(t),tir=r(zBe," \u2014 "),pW=n(zBe,"A",{href:!0});var I5t=s(pW);air=r(I5t,"SEWDForSequenceClassification"),I5t.forEach(t),nir=r(zBe," (SEW-D model)"),zBe.forEach(t),sir=i(ze),R6=n(ze,"LI",{});var QBe=s(R6);h2e=n(QBe,"STRONG",{});var N5t=s(h2e);lir=r(N5t,"unispeech"),N5t.forEach(t),iir=r(QBe," \u2014 "),_W=n(QBe,"A",{href:!0});var q5t=s(_W);dir=r(q5t,"UniSpeechForSequenceClassification"),q5t.forEach(t),cir=r(QBe," (UniSpeech model)"),QBe.forEach(t),fir=i(ze),P6=n(ze,"LI",{});var WBe=s(P6);p2e=n(WBe,"STRONG",{});var j5t=s(p2e);mir=r(j5t,"unispeech-sat"),j5t.forEach(t),gir=r(WBe," \u2014 "),uW=n(WBe,"A",{href:!0});var D5t=s(uW);hir=r(D5t,"UniSpeechSatForSequenceClassification"),D5t.forEach(t),pir=r(WBe," (UniSpeechSat model)"),WBe.forEach(t),_ir=i(ze),B6=n(ze,"LI",{});var HBe=s(B6);_2e=n(HBe,"STRONG",{});var G5t=s(_2e);uir=r(G5t,"wav2vec2"),G5t.forEach(t),bir=r(HBe," \u2014 "),bW=n(HBe,"A",{href:!0});var O5t=s(bW);vir=r(O5t,"Wav2Vec2ForSequenceClassification"),O5t.forEach(t),Fir=r(HBe," (Wav2Vec2 model)"),HBe.forEach(t),Tir=i(ze),I6=n(ze,"LI",{});var UBe=s(I6);u2e=n(UBe,"STRONG",{});var V5t=s(u2e);Mir=r(V5t,"wav2vec2-conformer"),V5t.forEach(t),Eir=r(UBe," \u2014 "),vW=n(UBe,"A",{href:!0});var X5t=s(vW);Cir=r(X5t,"Wav2Vec2ConformerForSequenceClassification"),X5t.forEach(t),wir=r(UBe," (Wav2Vec2-Conformer model)"),UBe.forEach(t),Air=i(ze),N6=n(ze,"LI",{});var JBe=s(N6);b2e=n(JBe,"STRONG",{});var z5t=s(b2e);Lir=r(z5t,"wavlm"),z5t.forEach(t),yir=r(JBe," \u2014 "),FW=n(JBe,"A",{href:!0});var Q5t=s(FW);xir=r(Q5t,"WavLMForSequenceClassification"),Q5t.forEach(t),$ir=r(JBe," (WavLM model)"),JBe.forEach(t),ze.forEach(t),kir=i(va),q6=n(va,"P",{});var YBe=s(q6);Sir=r(YBe,"The model is set in evaluation mode by default using "),v2e=n(YBe,"CODE",{});var W5t=s(v2e);Rir=r(W5t,"model.eval()"),W5t.forEach(t),Pir=r(YBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=n(YBe,"CODE",{});var H5t=s(F2e);Bir=r(H5t,"model.train()"),H5t.forEach(t),YBe.forEach(t),Iir=i(va),T(j6.$$.fragment,va),va.forEach(t),hl.forEach(t),FVe=i(f),yd=n(f,"H2",{class:!0});var Aze=s(yd);D6=n(Aze,"A",{id:!0,class:!0,href:!0});var U5t=s(D6);T2e=n(U5t,"SPAN",{});var J5t=s(T2e);T(R8.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),Nir=i(Aze),M2e=n(Aze,"SPAN",{});var Y5t=s(M2e);qir=r(Y5t,"AutoModelForAudioFrameClassification"),Y5t.forEach(t),Aze.forEach(t),TVe=i(f),zo=n(f,"DIV",{class:!0});var pl=s(zo);T(P8.$$.fragment,pl),jir=i(pl),xd=n(pl,"P",{});var Tre=s(xd);Dir=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),TW=n(Tre,"A",{href:!0});var K5t=s(TW);Gir=r(K5t,"from_pretrained()"),K5t.forEach(t),Oir=r(Tre," class method or the "),MW=n(Tre,"A",{href:!0});var Z5t=s(MW);Vir=r(Z5t,"from_config()"),Z5t.forEach(t),Xir=r(Tre,` class
method.`),Tre.forEach(t),zir=i(pl),B8=n(pl,"P",{});var Lze=s(B8);Qir=r(Lze,"This class cannot be instantiated directly using "),E2e=n(Lze,"CODE",{});var e3t=s(E2e);Wir=r(e3t,"__init__()"),e3t.forEach(t),Hir=r(Lze," (throws an error)."),Lze.forEach(t),Uir=i(pl),Tt=n(pl,"DIV",{class:!0});var bA=s(Tt);T(I8.$$.fragment,bA),Jir=i(bA),C2e=n(bA,"P",{});var o3t=s(C2e);Yir=r(o3t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),o3t.forEach(t),Kir=i(bA),$d=n(bA,"P",{});var Mre=s($d);Zir=r(Mre,`Note:
Loading a model from its configuration file does `),w2e=n(Mre,"STRONG",{});var r3t=s(w2e);edr=r(r3t,"not"),r3t.forEach(t),odr=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(Mre,"A",{href:!0});var t3t=s(EW);rdr=r(t3t,"from_pretrained()"),t3t.forEach(t),tdr=r(Mre," to load the model weights."),Mre.forEach(t),adr=i(bA),T(G6.$$.fragment,bA),bA.forEach(t),ndr=i(pl),mo=n(pl,"DIV",{class:!0});var Fa=s(mo);T(N8.$$.fragment,Fa),sdr=i(Fa),A2e=n(Fa,"P",{});var a3t=s(A2e);ldr=r(a3t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),a3t.forEach(t),idr=i(Fa),Ua=n(Fa,"P",{});var vA=s(Ua);ddr=r(vA,"The model class to instantiate is selected based on the "),L2e=n(vA,"CODE",{});var n3t=s(L2e);cdr=r(n3t,"model_type"),n3t.forEach(t),fdr=r(vA,` property of the config object (either
passed as an argument or loaded from `),y2e=n(vA,"CODE",{});var s3t=s(y2e);mdr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),gdr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(vA,"CODE",{});var l3t=s(x2e);hdr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),pdr=r(vA,":"),vA.forEach(t),_dr=i(Fa),Qo=n(Fa,"UL",{});var Ta=s(Qo);O6=n(Ta,"LI",{});var KBe=s(O6);$2e=n(KBe,"STRONG",{});var i3t=s($2e);udr=r(i3t,"data2vec-audio"),i3t.forEach(t),bdr=r(KBe," \u2014 "),CW=n(KBe,"A",{href:!0});var d3t=s(CW);vdr=r(d3t,"Data2VecAudioForAudioFrameClassification"),d3t.forEach(t),Fdr=r(KBe," (Data2VecAudio model)"),KBe.forEach(t),Tdr=i(Ta),V6=n(Ta,"LI",{});var ZBe=s(V6);k2e=n(ZBe,"STRONG",{});var c3t=s(k2e);Mdr=r(c3t,"mctct"),c3t.forEach(t),Edr=r(ZBe," \u2014 "),wW=n(ZBe,"A",{href:!0});var f3t=s(wW);Cdr=r(f3t,"MCTCTForAudioFrameClassification"),f3t.forEach(t),wdr=r(ZBe," (M-CTC-T model)"),ZBe.forEach(t),Adr=i(Ta),X6=n(Ta,"LI",{});var eIe=s(X6);S2e=n(eIe,"STRONG",{});var m3t=s(S2e);Ldr=r(m3t,"unispeech-sat"),m3t.forEach(t),ydr=r(eIe," \u2014 "),AW=n(eIe,"A",{href:!0});var g3t=s(AW);xdr=r(g3t,"UniSpeechSatForAudioFrameClassification"),g3t.forEach(t),$dr=r(eIe," (UniSpeechSat model)"),eIe.forEach(t),kdr=i(Ta),z6=n(Ta,"LI",{});var oIe=s(z6);R2e=n(oIe,"STRONG",{});var h3t=s(R2e);Sdr=r(h3t,"wav2vec2"),h3t.forEach(t),Rdr=r(oIe," \u2014 "),LW=n(oIe,"A",{href:!0});var p3t=s(LW);Pdr=r(p3t,"Wav2Vec2ForAudioFrameClassification"),p3t.forEach(t),Bdr=r(oIe," (Wav2Vec2 model)"),oIe.forEach(t),Idr=i(Ta),Q6=n(Ta,"LI",{});var rIe=s(Q6);P2e=n(rIe,"STRONG",{});var _3t=s(P2e);Ndr=r(_3t,"wav2vec2-conformer"),_3t.forEach(t),qdr=r(rIe," \u2014 "),yW=n(rIe,"A",{href:!0});var u3t=s(yW);jdr=r(u3t,"Wav2Vec2ConformerForAudioFrameClassification"),u3t.forEach(t),Ddr=r(rIe," (Wav2Vec2-Conformer model)"),rIe.forEach(t),Gdr=i(Ta),W6=n(Ta,"LI",{});var tIe=s(W6);B2e=n(tIe,"STRONG",{});var b3t=s(B2e);Odr=r(b3t,"wavlm"),b3t.forEach(t),Vdr=r(tIe," \u2014 "),xW=n(tIe,"A",{href:!0});var v3t=s(xW);Xdr=r(v3t,"WavLMForAudioFrameClassification"),v3t.forEach(t),zdr=r(tIe," (WavLM model)"),tIe.forEach(t),Ta.forEach(t),Qdr=i(Fa),H6=n(Fa,"P",{});var aIe=s(H6);Wdr=r(aIe,"The model is set in evaluation mode by default using "),I2e=n(aIe,"CODE",{});var F3t=s(I2e);Hdr=r(F3t,"model.eval()"),F3t.forEach(t),Udr=r(aIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=n(aIe,"CODE",{});var T3t=s(N2e);Jdr=r(T3t,"model.train()"),T3t.forEach(t),aIe.forEach(t),Ydr=i(Fa),T(U6.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),MVe=i(f),kd=n(f,"H2",{class:!0});var yze=s(kd);J6=n(yze,"A",{id:!0,class:!0,href:!0});var M3t=s(J6);q2e=n(M3t,"SPAN",{});var E3t=s(q2e);T(q8.$$.fragment,E3t),E3t.forEach(t),M3t.forEach(t),Kdr=i(yze),j2e=n(yze,"SPAN",{});var C3t=s(j2e);Zdr=r(C3t,"AutoModelForCTC"),C3t.forEach(t),yze.forEach(t),EVe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(j8.$$.fragment,_l),ecr=i(_l),Sd=n(_l,"P",{});var Ere=s(Sd);ocr=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$W=n(Ere,"A",{href:!0});var w3t=s($W);rcr=r(w3t,"from_pretrained()"),w3t.forEach(t),tcr=r(Ere," class method or the "),kW=n(Ere,"A",{href:!0});var A3t=s(kW);acr=r(A3t,"from_config()"),A3t.forEach(t),ncr=r(Ere,` class
method.`),Ere.forEach(t),scr=i(_l),D8=n(_l,"P",{});var xze=s(D8);lcr=r(xze,"This class cannot be instantiated directly using "),D2e=n(xze,"CODE",{});var L3t=s(D2e);icr=r(L3t,"__init__()"),L3t.forEach(t),dcr=r(xze," (throws an error)."),xze.forEach(t),ccr=i(_l),Mt=n(_l,"DIV",{class:!0});var FA=s(Mt);T(G8.$$.fragment,FA),fcr=i(FA),G2e=n(FA,"P",{});var y3t=s(G2e);mcr=r(y3t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),y3t.forEach(t),gcr=i(FA),Rd=n(FA,"P",{});var Cre=s(Rd);hcr=r(Cre,`Note:
Loading a model from its configuration file does `),O2e=n(Cre,"STRONG",{});var x3t=s(O2e);pcr=r(x3t,"not"),x3t.forEach(t),_cr=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(Cre,"A",{href:!0});var $3t=s(SW);ucr=r($3t,"from_pretrained()"),$3t.forEach(t),bcr=r(Cre," to load the model weights."),Cre.forEach(t),vcr=i(FA),T(Y6.$$.fragment,FA),FA.forEach(t),Fcr=i(_l),go=n(_l,"DIV",{class:!0});var Ma=s(go);T(O8.$$.fragment,Ma),Tcr=i(Ma),V2e=n(Ma,"P",{});var k3t=s(V2e);Mcr=r(k3t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),k3t.forEach(t),Ecr=i(Ma),Ja=n(Ma,"P",{});var TA=s(Ja);Ccr=r(TA,"The model class to instantiate is selected based on the "),X2e=n(TA,"CODE",{});var S3t=s(X2e);wcr=r(S3t,"model_type"),S3t.forEach(t),Acr=r(TA,` property of the config object (either
passed as an argument or loaded from `),z2e=n(TA,"CODE",{});var R3t=s(z2e);Lcr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),ycr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(TA,"CODE",{});var P3t=s(Q2e);xcr=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),$cr=r(TA,":"),TA.forEach(t),kcr=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);K6=n(Be,"LI",{});var nIe=s(K6);W2e=n(nIe,"STRONG",{});var B3t=s(W2e);Scr=r(B3t,"data2vec-audio"),B3t.forEach(t),Rcr=r(nIe," \u2014 "),RW=n(nIe,"A",{href:!0});var I3t=s(RW);Pcr=r(I3t,"Data2VecAudioForCTC"),I3t.forEach(t),Bcr=r(nIe," (Data2VecAudio model)"),nIe.forEach(t),Icr=i(Be),Z6=n(Be,"LI",{});var sIe=s(Z6);H2e=n(sIe,"STRONG",{});var N3t=s(H2e);Ncr=r(N3t,"hubert"),N3t.forEach(t),qcr=r(sIe," \u2014 "),PW=n(sIe,"A",{href:!0});var q3t=s(PW);jcr=r(q3t,"HubertForCTC"),q3t.forEach(t),Dcr=r(sIe," (Hubert model)"),sIe.forEach(t),Gcr=i(Be),eT=n(Be,"LI",{});var lIe=s(eT);U2e=n(lIe,"STRONG",{});var j3t=s(U2e);Ocr=r(j3t,"mctct"),j3t.forEach(t),Vcr=r(lIe," \u2014 "),BW=n(lIe,"A",{href:!0});var D3t=s(BW);Xcr=r(D3t,"MCTCTForCTC"),D3t.forEach(t),zcr=r(lIe," (M-CTC-T model)"),lIe.forEach(t),Qcr=i(Be),oT=n(Be,"LI",{});var iIe=s(oT);J2e=n(iIe,"STRONG",{});var G3t=s(J2e);Wcr=r(G3t,"sew"),G3t.forEach(t),Hcr=r(iIe," \u2014 "),IW=n(iIe,"A",{href:!0});var O3t=s(IW);Ucr=r(O3t,"SEWForCTC"),O3t.forEach(t),Jcr=r(iIe," (SEW model)"),iIe.forEach(t),Ycr=i(Be),rT=n(Be,"LI",{});var dIe=s(rT);Y2e=n(dIe,"STRONG",{});var V3t=s(Y2e);Kcr=r(V3t,"sew-d"),V3t.forEach(t),Zcr=r(dIe," \u2014 "),NW=n(dIe,"A",{href:!0});var X3t=s(NW);efr=r(X3t,"SEWDForCTC"),X3t.forEach(t),ofr=r(dIe," (SEW-D model)"),dIe.forEach(t),rfr=i(Be),tT=n(Be,"LI",{});var cIe=s(tT);K2e=n(cIe,"STRONG",{});var z3t=s(K2e);tfr=r(z3t,"unispeech"),z3t.forEach(t),afr=r(cIe," \u2014 "),qW=n(cIe,"A",{href:!0});var Q3t=s(qW);nfr=r(Q3t,"UniSpeechForCTC"),Q3t.forEach(t),sfr=r(cIe," (UniSpeech model)"),cIe.forEach(t),lfr=i(Be),aT=n(Be,"LI",{});var fIe=s(aT);Z2e=n(fIe,"STRONG",{});var W3t=s(Z2e);ifr=r(W3t,"unispeech-sat"),W3t.forEach(t),dfr=r(fIe," \u2014 "),jW=n(fIe,"A",{href:!0});var H3t=s(jW);cfr=r(H3t,"UniSpeechSatForCTC"),H3t.forEach(t),ffr=r(fIe," (UniSpeechSat model)"),fIe.forEach(t),mfr=i(Be),nT=n(Be,"LI",{});var mIe=s(nT);ebe=n(mIe,"STRONG",{});var U3t=s(ebe);gfr=r(U3t,"wav2vec2"),U3t.forEach(t),hfr=r(mIe," \u2014 "),DW=n(mIe,"A",{href:!0});var J3t=s(DW);pfr=r(J3t,"Wav2Vec2ForCTC"),J3t.forEach(t),_fr=r(mIe," (Wav2Vec2 model)"),mIe.forEach(t),ufr=i(Be),sT=n(Be,"LI",{});var gIe=s(sT);obe=n(gIe,"STRONG",{});var Y3t=s(obe);bfr=r(Y3t,"wav2vec2-conformer"),Y3t.forEach(t),vfr=r(gIe," \u2014 "),GW=n(gIe,"A",{href:!0});var K3t=s(GW);Ffr=r(K3t,"Wav2Vec2ConformerForCTC"),K3t.forEach(t),Tfr=r(gIe," (Wav2Vec2-Conformer model)"),gIe.forEach(t),Mfr=i(Be),lT=n(Be,"LI",{});var hIe=s(lT);rbe=n(hIe,"STRONG",{});var Z3t=s(rbe);Efr=r(Z3t,"wavlm"),Z3t.forEach(t),Cfr=r(hIe," \u2014 "),OW=n(hIe,"A",{href:!0});var e0t=s(OW);wfr=r(e0t,"WavLMForCTC"),e0t.forEach(t),Afr=r(hIe," (WavLM model)"),hIe.forEach(t),Be.forEach(t),Lfr=i(Ma),iT=n(Ma,"P",{});var pIe=s(iT);yfr=r(pIe,"The model is set in evaluation mode by default using "),tbe=n(pIe,"CODE",{});var o0t=s(tbe);xfr=r(o0t,"model.eval()"),o0t.forEach(t),$fr=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),abe=n(pIe,"CODE",{});var r0t=s(abe);kfr=r(r0t,"model.train()"),r0t.forEach(t),pIe.forEach(t),Sfr=i(Ma),T(dT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),CVe=i(f),Pd=n(f,"H2",{class:!0});var $ze=s(Pd);cT=n($ze,"A",{id:!0,class:!0,href:!0});var t0t=s(cT);nbe=n(t0t,"SPAN",{});var a0t=s(nbe);T(V8.$$.fragment,a0t),a0t.forEach(t),t0t.forEach(t),Rfr=i($ze),sbe=n($ze,"SPAN",{});var n0t=s(sbe);Pfr=r(n0t,"AutoModelForSpeechSeq2Seq"),n0t.forEach(t),$ze.forEach(t),wVe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(X8.$$.fragment,ul),Bfr=i(ul),Bd=n(ul,"P",{});var wre=s(Bd);Ifr=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VW=n(wre,"A",{href:!0});var s0t=s(VW);Nfr=r(s0t,"from_pretrained()"),s0t.forEach(t),qfr=r(wre," class method or the "),XW=n(wre,"A",{href:!0});var l0t=s(XW);jfr=r(l0t,"from_config()"),l0t.forEach(t),Dfr=r(wre,` class
method.`),wre.forEach(t),Gfr=i(ul),z8=n(ul,"P",{});var kze=s(z8);Ofr=r(kze,"This class cannot be instantiated directly using "),lbe=n(kze,"CODE",{});var i0t=s(lbe);Vfr=r(i0t,"__init__()"),i0t.forEach(t),Xfr=r(kze," (throws an error)."),kze.forEach(t),zfr=i(ul),Et=n(ul,"DIV",{class:!0});var MA=s(Et);T(Q8.$$.fragment,MA),Qfr=i(MA),ibe=n(MA,"P",{});var d0t=s(ibe);Wfr=r(d0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d0t.forEach(t),Hfr=i(MA),Id=n(MA,"P",{});var Are=s(Id);Ufr=r(Are,`Note:
Loading a model from its configuration file does `),dbe=n(Are,"STRONG",{});var c0t=s(dbe);Jfr=r(c0t,"not"),c0t.forEach(t),Yfr=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(Are,"A",{href:!0});var f0t=s(zW);Kfr=r(f0t,"from_pretrained()"),f0t.forEach(t),Zfr=r(Are," to load the model weights."),Are.forEach(t),emr=i(MA),T(fT.$$.fragment,MA),MA.forEach(t),omr=i(ul),ho=n(ul,"DIV",{class:!0});var Ea=s(ho);T(W8.$$.fragment,Ea),rmr=i(Ea),cbe=n(Ea,"P",{});var m0t=s(cbe);tmr=r(m0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m0t.forEach(t),amr=i(Ea),Ya=n(Ea,"P",{});var EA=s(Ya);nmr=r(EA,"The model class to instantiate is selected based on the "),fbe=n(EA,"CODE",{});var g0t=s(fbe);smr=r(g0t,"model_type"),g0t.forEach(t),lmr=r(EA,` property of the config object (either
passed as an argument or loaded from `),mbe=n(EA,"CODE",{});var h0t=s(mbe);imr=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),dmr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(EA,"CODE",{});var p0t=s(gbe);cmr=r(p0t,"pretrained_model_name_or_path"),p0t.forEach(t),fmr=r(EA,":"),EA.forEach(t),mmr=i(Ea),H8=n(Ea,"UL",{});var Sze=s(H8);mT=n(Sze,"LI",{});var _Ie=s(mT);hbe=n(_Ie,"STRONG",{});var _0t=s(hbe);gmr=r(_0t,"speech-encoder-decoder"),_0t.forEach(t),hmr=r(_Ie," \u2014 "),QW=n(_Ie,"A",{href:!0});var u0t=s(QW);pmr=r(u0t,"SpeechEncoderDecoderModel"),u0t.forEach(t),_mr=r(_Ie," (Speech Encoder decoder model)"),_Ie.forEach(t),umr=i(Sze),gT=n(Sze,"LI",{});var uIe=s(gT);pbe=n(uIe,"STRONG",{});var b0t=s(pbe);bmr=r(b0t,"speech_to_text"),b0t.forEach(t),vmr=r(uIe," \u2014 "),WW=n(uIe,"A",{href:!0});var v0t=s(WW);Fmr=r(v0t,"Speech2TextForConditionalGeneration"),v0t.forEach(t),Tmr=r(uIe," (Speech2Text model)"),uIe.forEach(t),Sze.forEach(t),Mmr=i(Ea),hT=n(Ea,"P",{});var bIe=s(hT);Emr=r(bIe,"The model is set in evaluation mode by default using "),_be=n(bIe,"CODE",{});var F0t=s(_be);Cmr=r(F0t,"model.eval()"),F0t.forEach(t),wmr=r(bIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ube=n(bIe,"CODE",{});var T0t=s(ube);Amr=r(T0t,"model.train()"),T0t.forEach(t),bIe.forEach(t),Lmr=i(Ea),T(pT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),AVe=i(f),Nd=n(f,"H2",{class:!0});var Rze=s(Nd);_T=n(Rze,"A",{id:!0,class:!0,href:!0});var M0t=s(_T);bbe=n(M0t,"SPAN",{});var E0t=s(bbe);T(U8.$$.fragment,E0t),E0t.forEach(t),M0t.forEach(t),ymr=i(Rze),vbe=n(Rze,"SPAN",{});var C0t=s(vbe);xmr=r(C0t,"AutoModelForAudioXVector"),C0t.forEach(t),Rze.forEach(t),LVe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(J8.$$.fragment,bl),$mr=i(bl),qd=n(bl,"P",{});var Lre=s(qd);kmr=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),HW=n(Lre,"A",{href:!0});var w0t=s(HW);Smr=r(w0t,"from_pretrained()"),w0t.forEach(t),Rmr=r(Lre," class method or the "),UW=n(Lre,"A",{href:!0});var A0t=s(UW);Pmr=r(A0t,"from_config()"),A0t.forEach(t),Bmr=r(Lre,` class
method.`),Lre.forEach(t),Imr=i(bl),Y8=n(bl,"P",{});var Pze=s(Y8);Nmr=r(Pze,"This class cannot be instantiated directly using "),Fbe=n(Pze,"CODE",{});var L0t=s(Fbe);qmr=r(L0t,"__init__()"),L0t.forEach(t),jmr=r(Pze," (throws an error)."),Pze.forEach(t),Dmr=i(bl),Ct=n(bl,"DIV",{class:!0});var CA=s(Ct);T(K8.$$.fragment,CA),Gmr=i(CA),Tbe=n(CA,"P",{});var y0t=s(Tbe);Omr=r(y0t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),y0t.forEach(t),Vmr=i(CA),jd=n(CA,"P",{});var yre=s(jd);Xmr=r(yre,`Note:
Loading a model from its configuration file does `),Mbe=n(yre,"STRONG",{});var x0t=s(Mbe);zmr=r(x0t,"not"),x0t.forEach(t),Qmr=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(yre,"A",{href:!0});var $0t=s(JW);Wmr=r($0t,"from_pretrained()"),$0t.forEach(t),Hmr=r(yre," to load the model weights."),yre.forEach(t),Umr=i(CA),T(uT.$$.fragment,CA),CA.forEach(t),Jmr=i(bl),po=n(bl,"DIV",{class:!0});var Ca=s(po);T(Z8.$$.fragment,Ca),Ymr=i(Ca),Ebe=n(Ca,"P",{});var k0t=s(Ebe);Kmr=r(k0t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),k0t.forEach(t),Zmr=i(Ca),Ka=n(Ca,"P",{});var wA=s(Ka);egr=r(wA,"The model class to instantiate is selected based on the "),Cbe=n(wA,"CODE",{});var S0t=s(Cbe);ogr=r(S0t,"model_type"),S0t.forEach(t),rgr=r(wA,` property of the config object (either
passed as an argument or loaded from `),wbe=n(wA,"CODE",{});var R0t=s(wbe);tgr=r(R0t,"pretrained_model_name_or_path"),R0t.forEach(t),agr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(wA,"CODE",{});var P0t=s(Abe);ngr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),sgr=r(wA,":"),wA.forEach(t),lgr=i(Ca),ot=n(Ca,"UL",{});var vl=s(ot);bT=n(vl,"LI",{});var vIe=s(bT);Lbe=n(vIe,"STRONG",{});var B0t=s(Lbe);igr=r(B0t,"data2vec-audio"),B0t.forEach(t),dgr=r(vIe," \u2014 "),YW=n(vIe,"A",{href:!0});var I0t=s(YW);cgr=r(I0t,"Data2VecAudioForXVector"),I0t.forEach(t),fgr=r(vIe," (Data2VecAudio model)"),vIe.forEach(t),mgr=i(vl),vT=n(vl,"LI",{});var FIe=s(vT);ybe=n(FIe,"STRONG",{});var N0t=s(ybe);ggr=r(N0t,"unispeech-sat"),N0t.forEach(t),hgr=r(FIe," \u2014 "),KW=n(FIe,"A",{href:!0});var q0t=s(KW);pgr=r(q0t,"UniSpeechSatForXVector"),q0t.forEach(t),_gr=r(FIe," (UniSpeechSat model)"),FIe.forEach(t),ugr=i(vl),FT=n(vl,"LI",{});var TIe=s(FT);xbe=n(TIe,"STRONG",{});var j0t=s(xbe);bgr=r(j0t,"wav2vec2"),j0t.forEach(t),vgr=r(TIe," \u2014 "),ZW=n(TIe,"A",{href:!0});var D0t=s(ZW);Fgr=r(D0t,"Wav2Vec2ForXVector"),D0t.forEach(t),Tgr=r(TIe," (Wav2Vec2 model)"),TIe.forEach(t),Mgr=i(vl),TT=n(vl,"LI",{});var MIe=s(TT);$be=n(MIe,"STRONG",{});var G0t=s($be);Egr=r(G0t,"wav2vec2-conformer"),G0t.forEach(t),Cgr=r(MIe," \u2014 "),eH=n(MIe,"A",{href:!0});var O0t=s(eH);wgr=r(O0t,"Wav2Vec2ConformerForXVector"),O0t.forEach(t),Agr=r(MIe," (Wav2Vec2-Conformer model)"),MIe.forEach(t),Lgr=i(vl),MT=n(vl,"LI",{});var EIe=s(MT);kbe=n(EIe,"STRONG",{});var V0t=s(kbe);ygr=r(V0t,"wavlm"),V0t.forEach(t),xgr=r(EIe," \u2014 "),oH=n(EIe,"A",{href:!0});var X0t=s(oH);$gr=r(X0t,"WavLMForXVector"),X0t.forEach(t),kgr=r(EIe," (WavLM model)"),EIe.forEach(t),vl.forEach(t),Sgr=i(Ca),ET=n(Ca,"P",{});var CIe=s(ET);Rgr=r(CIe,"The model is set in evaluation mode by default using "),Sbe=n(CIe,"CODE",{});var z0t=s(Sbe);Pgr=r(z0t,"model.eval()"),z0t.forEach(t),Bgr=r(CIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rbe=n(CIe,"CODE",{});var Q0t=s(Rbe);Igr=r(Q0t,"model.train()"),Q0t.forEach(t),CIe.forEach(t),Ngr=i(Ca),T(CT.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),yVe=i(f),Dd=n(f,"H2",{class:!0});var Bze=s(Dd);wT=n(Bze,"A",{id:!0,class:!0,href:!0});var W0t=s(wT);Pbe=n(W0t,"SPAN",{});var H0t=s(Pbe);T(e9.$$.fragment,H0t),H0t.forEach(t),W0t.forEach(t),qgr=i(Bze),Bbe=n(Bze,"SPAN",{});var U0t=s(Bbe);jgr=r(U0t,"AutoModelForMaskedImageModeling"),U0t.forEach(t),Bze.forEach(t),xVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(o9.$$.fragment,Fl),Dgr=i(Fl),Gd=n(Fl,"P",{});var xre=s(Gd);Ggr=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rH=n(xre,"A",{href:!0});var J0t=s(rH);Ogr=r(J0t,"from_pretrained()"),J0t.forEach(t),Vgr=r(xre," class method or the "),tH=n(xre,"A",{href:!0});var Y0t=s(tH);Xgr=r(Y0t,"from_config()"),Y0t.forEach(t),zgr=r(xre,` class
method.`),xre.forEach(t),Qgr=i(Fl),r9=n(Fl,"P",{});var Ize=s(r9);Wgr=r(Ize,"This class cannot be instantiated directly using "),Ibe=n(Ize,"CODE",{});var K0t=s(Ibe);Hgr=r(K0t,"__init__()"),K0t.forEach(t),Ugr=r(Ize," (throws an error)."),Ize.forEach(t),Jgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var AA=s(wt);T(t9.$$.fragment,AA),Ygr=i(AA),Nbe=n(AA,"P",{});var Z0t=s(Nbe);Kgr=r(Z0t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Z0t.forEach(t),Zgr=i(AA),Od=n(AA,"P",{});var $re=s(Od);ehr=r($re,`Note:
Loading a model from its configuration file does `),qbe=n($re,"STRONG",{});var ewt=s(qbe);ohr=r(ewt,"not"),ewt.forEach(t),rhr=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n($re,"A",{href:!0});var owt=s(aH);thr=r(owt,"from_pretrained()"),owt.forEach(t),ahr=r($re," to load the model weights."),$re.forEach(t),nhr=i(AA),T(AT.$$.fragment,AA),AA.forEach(t),shr=i(Fl),_o=n(Fl,"DIV",{class:!0});var wa=s(_o);T(a9.$$.fragment,wa),lhr=i(wa),jbe=n(wa,"P",{});var rwt=s(jbe);ihr=r(rwt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rwt.forEach(t),dhr=i(wa),Za=n(wa,"P",{});var LA=s(Za);chr=r(LA,"The model class to instantiate is selected based on the "),Dbe=n(LA,"CODE",{});var twt=s(Dbe);fhr=r(twt,"model_type"),twt.forEach(t),mhr=r(LA,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(LA,"CODE",{});var awt=s(Gbe);ghr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),hhr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(LA,"CODE",{});var nwt=s(Obe);phr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),_hr=r(LA,":"),LA.forEach(t),uhr=i(wa),Vd=n(wa,"UL",{});var kre=s(Vd);LT=n(kre,"LI",{});var wIe=s(LT);Vbe=n(wIe,"STRONG",{});var swt=s(Vbe);bhr=r(swt,"deit"),swt.forEach(t),vhr=r(wIe," \u2014 "),nH=n(wIe,"A",{href:!0});var lwt=s(nH);Fhr=r(lwt,"DeiTForMaskedImageModeling"),lwt.forEach(t),Thr=r(wIe," (DeiT model)"),wIe.forEach(t),Mhr=i(kre),yT=n(kre,"LI",{});var AIe=s(yT);Xbe=n(AIe,"STRONG",{});var iwt=s(Xbe);Ehr=r(iwt,"swin"),iwt.forEach(t),Chr=r(AIe," \u2014 "),sH=n(AIe,"A",{href:!0});var dwt=s(sH);whr=r(dwt,"SwinForMaskedImageModeling"),dwt.forEach(t),Ahr=r(AIe," (Swin Transformer model)"),AIe.forEach(t),Lhr=i(kre),xT=n(kre,"LI",{});var LIe=s(xT);zbe=n(LIe,"STRONG",{});var cwt=s(zbe);yhr=r(cwt,"vit"),cwt.forEach(t),xhr=r(LIe," \u2014 "),lH=n(LIe,"A",{href:!0});var fwt=s(lH);$hr=r(fwt,"ViTForMaskedImageModeling"),fwt.forEach(t),khr=r(LIe," (ViT model)"),LIe.forEach(t),kre.forEach(t),Shr=i(wa),$T=n(wa,"P",{});var yIe=s($T);Rhr=r(yIe,"The model is set in evaluation mode by default using "),Qbe=n(yIe,"CODE",{});var mwt=s(Qbe);Phr=r(mwt,"model.eval()"),mwt.forEach(t),Bhr=r(yIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wbe=n(yIe,"CODE",{});var gwt=s(Wbe);Ihr=r(gwt,"model.train()"),gwt.forEach(t),yIe.forEach(t),Nhr=i(wa),T(kT.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),$Ve=i(f),Xd=n(f,"H2",{class:!0});var Nze=s(Xd);ST=n(Nze,"A",{id:!0,class:!0,href:!0});var hwt=s(ST);Hbe=n(hwt,"SPAN",{});var pwt=s(Hbe);T(n9.$$.fragment,pwt),pwt.forEach(t),hwt.forEach(t),qhr=i(Nze),Ube=n(Nze,"SPAN",{});var _wt=s(Ube);jhr=r(_wt,"AutoModelForObjectDetection"),_wt.forEach(t),Nze.forEach(t),kVe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(s9.$$.fragment,Tl),Dhr=i(Tl),zd=n(Tl,"P",{});var Sre=s(zd);Ghr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iH=n(Sre,"A",{href:!0});var uwt=s(iH);Ohr=r(uwt,"from_pretrained()"),uwt.forEach(t),Vhr=r(Sre," class method or the "),dH=n(Sre,"A",{href:!0});var bwt=s(dH);Xhr=r(bwt,"from_config()"),bwt.forEach(t),zhr=r(Sre,` class
method.`),Sre.forEach(t),Qhr=i(Tl),l9=n(Tl,"P",{});var qze=s(l9);Whr=r(qze,"This class cannot be instantiated directly using "),Jbe=n(qze,"CODE",{});var vwt=s(Jbe);Hhr=r(vwt,"__init__()"),vwt.forEach(t),Uhr=r(qze," (throws an error)."),qze.forEach(t),Jhr=i(Tl),At=n(Tl,"DIV",{class:!0});var yA=s(At);T(i9.$$.fragment,yA),Yhr=i(yA),Ybe=n(yA,"P",{});var Fwt=s(Ybe);Khr=r(Fwt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Fwt.forEach(t),Zhr=i(yA),Qd=n(yA,"P",{});var Rre=s(Qd);epr=r(Rre,`Note:
Loading a model from its configuration file does `),Kbe=n(Rre,"STRONG",{});var Twt=s(Kbe);opr=r(Twt,"not"),Twt.forEach(t),rpr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Rre,"A",{href:!0});var Mwt=s(cH);tpr=r(Mwt,"from_pretrained()"),Mwt.forEach(t),apr=r(Rre," to load the model weights."),Rre.forEach(t),npr=i(yA),T(RT.$$.fragment,yA),yA.forEach(t),spr=i(Tl),uo=n(Tl,"DIV",{class:!0});var Aa=s(uo);T(d9.$$.fragment,Aa),lpr=i(Aa),Zbe=n(Aa,"P",{});var Ewt=s(Zbe);ipr=r(Ewt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ewt.forEach(t),dpr=i(Aa),en=n(Aa,"P",{});var xA=s(en);cpr=r(xA,"The model class to instantiate is selected based on the "),eve=n(xA,"CODE",{});var Cwt=s(eve);fpr=r(Cwt,"model_type"),Cwt.forEach(t),mpr=r(xA,` property of the config object (either
passed as an argument or loaded from `),ove=n(xA,"CODE",{});var wwt=s(ove);gpr=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),hpr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(xA,"CODE",{});var Awt=s(rve);ppr=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),_pr=r(xA,":"),xA.forEach(t),upr=i(Aa),c9=n(Aa,"UL",{});var jze=s(c9);PT=n(jze,"LI",{});var xIe=s(PT);tve=n(xIe,"STRONG",{});var Lwt=s(tve);bpr=r(Lwt,"detr"),Lwt.forEach(t),vpr=r(xIe," \u2014 "),fH=n(xIe,"A",{href:!0});var ywt=s(fH);Fpr=r(ywt,"DetrForObjectDetection"),ywt.forEach(t),Tpr=r(xIe," (DETR model)"),xIe.forEach(t),Mpr=i(jze),BT=n(jze,"LI",{});var $Ie=s(BT);ave=n($Ie,"STRONG",{});var xwt=s(ave);Epr=r(xwt,"yolos"),xwt.forEach(t),Cpr=r($Ie," \u2014 "),mH=n($Ie,"A",{href:!0});var $wt=s(mH);wpr=r($wt,"YolosForObjectDetection"),$wt.forEach(t),Apr=r($Ie," (YOLOS model)"),$Ie.forEach(t),jze.forEach(t),Lpr=i(Aa),IT=n(Aa,"P",{});var kIe=s(IT);ypr=r(kIe,"The model is set in evaluation mode by default using "),nve=n(kIe,"CODE",{});var kwt=s(nve);xpr=r(kwt,"model.eval()"),kwt.forEach(t),$pr=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sve=n(kIe,"CODE",{});var Swt=s(sve);kpr=r(Swt,"model.train()"),Swt.forEach(t),kIe.forEach(t),Spr=i(Aa),T(NT.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),SVe=i(f),Wd=n(f,"H2",{class:!0});var Dze=s(Wd);qT=n(Dze,"A",{id:!0,class:!0,href:!0});var Rwt=s(qT);lve=n(Rwt,"SPAN",{});var Pwt=s(lve);T(f9.$$.fragment,Pwt),Pwt.forEach(t),Rwt.forEach(t),Rpr=i(Dze),ive=n(Dze,"SPAN",{});var Bwt=s(ive);Ppr=r(Bwt,"AutoModelForImageSegmentation"),Bwt.forEach(t),Dze.forEach(t),RVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(m9.$$.fragment,Ml),Bpr=i(Ml),Hd=n(Ml,"P",{});var Pre=s(Hd);Ipr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gH=n(Pre,"A",{href:!0});var Iwt=s(gH);Npr=r(Iwt,"from_pretrained()"),Iwt.forEach(t),qpr=r(Pre," class method or the "),hH=n(Pre,"A",{href:!0});var Nwt=s(hH);jpr=r(Nwt,"from_config()"),Nwt.forEach(t),Dpr=r(Pre,` class
method.`),Pre.forEach(t),Gpr=i(Ml),g9=n(Ml,"P",{});var Gze=s(g9);Opr=r(Gze,"This class cannot be instantiated directly using "),dve=n(Gze,"CODE",{});var qwt=s(dve);Vpr=r(qwt,"__init__()"),qwt.forEach(t),Xpr=r(Gze," (throws an error)."),Gze.forEach(t),zpr=i(Ml),Lt=n(Ml,"DIV",{class:!0});var $A=s(Lt);T(h9.$$.fragment,$A),Qpr=i($A),cve=n($A,"P",{});var jwt=s(cve);Wpr=r(jwt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jwt.forEach(t),Hpr=i($A),Ud=n($A,"P",{});var Bre=s(Ud);Upr=r(Bre,`Note:
Loading a model from its configuration file does `),fve=n(Bre,"STRONG",{});var Dwt=s(fve);Jpr=r(Dwt,"not"),Dwt.forEach(t),Ypr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(Bre,"A",{href:!0});var Gwt=s(pH);Kpr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),Zpr=r(Bre," to load the model weights."),Bre.forEach(t),e_r=i($A),T(jT.$$.fragment,$A),$A.forEach(t),o_r=i(Ml),bo=n(Ml,"DIV",{class:!0});var La=s(bo);T(p9.$$.fragment,La),r_r=i(La),mve=n(La,"P",{});var Owt=s(mve);t_r=r(Owt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Owt.forEach(t),a_r=i(La),on=n(La,"P",{});var kA=s(on);n_r=r(kA,"The model class to instantiate is selected based on the "),gve=n(kA,"CODE",{});var Vwt=s(gve);s_r=r(Vwt,"model_type"),Vwt.forEach(t),l_r=r(kA,` property of the config object (either
passed as an argument or loaded from `),hve=n(kA,"CODE",{});var Xwt=s(hve);i_r=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),d_r=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pve=n(kA,"CODE",{});var zwt=s(pve);c_r=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),f_r=r(kA,":"),kA.forEach(t),m_r=i(La),_ve=n(La,"UL",{});var Qwt=s(_ve);DT=n(Qwt,"LI",{});var SIe=s(DT);uve=n(SIe,"STRONG",{});var Wwt=s(uve);g_r=r(Wwt,"detr"),Wwt.forEach(t),h_r=r(SIe," \u2014 "),_H=n(SIe,"A",{href:!0});var Hwt=s(_H);p_r=r(Hwt,"DetrForSegmentation"),Hwt.forEach(t),__r=r(SIe," (DETR model)"),SIe.forEach(t),Qwt.forEach(t),u_r=i(La),GT=n(La,"P",{});var RIe=s(GT);b_r=r(RIe,"The model is set in evaluation mode by default using "),bve=n(RIe,"CODE",{});var Uwt=s(bve);v_r=r(Uwt,"model.eval()"),Uwt.forEach(t),F_r=r(RIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=n(RIe,"CODE",{});var Jwt=s(vve);T_r=r(Jwt,"model.train()"),Jwt.forEach(t),RIe.forEach(t),M_r=i(La),T(OT.$$.fragment,La),La.forEach(t),Ml.forEach(t),PVe=i(f),Jd=n(f,"H2",{class:!0});var Oze=s(Jd);VT=n(Oze,"A",{id:!0,class:!0,href:!0});var Ywt=s(VT);Fve=n(Ywt,"SPAN",{});var Kwt=s(Fve);T(_9.$$.fragment,Kwt),Kwt.forEach(t),Ywt.forEach(t),E_r=i(Oze),Tve=n(Oze,"SPAN",{});var Zwt=s(Tve);C_r=r(Zwt,"AutoModelForSemanticSegmentation"),Zwt.forEach(t),Oze.forEach(t),BVe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(u9.$$.fragment,El),w_r=i(El),Yd=n(El,"P",{});var Ire=s(Yd);A_r=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uH=n(Ire,"A",{href:!0});var eAt=s(uH);L_r=r(eAt,"from_pretrained()"),eAt.forEach(t),y_r=r(Ire," class method or the "),bH=n(Ire,"A",{href:!0});var oAt=s(bH);x_r=r(oAt,"from_config()"),oAt.forEach(t),$_r=r(Ire,` class
method.`),Ire.forEach(t),k_r=i(El),b9=n(El,"P",{});var Vze=s(b9);S_r=r(Vze,"This class cannot be instantiated directly using "),Mve=n(Vze,"CODE",{});var rAt=s(Mve);R_r=r(rAt,"__init__()"),rAt.forEach(t),P_r=r(Vze," (throws an error)."),Vze.forEach(t),B_r=i(El),yt=n(El,"DIV",{class:!0});var SA=s(yt);T(v9.$$.fragment,SA),I_r=i(SA),Eve=n(SA,"P",{});var tAt=s(Eve);N_r=r(tAt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tAt.forEach(t),q_r=i(SA),Kd=n(SA,"P",{});var Nre=s(Kd);j_r=r(Nre,`Note:
Loading a model from its configuration file does `),Cve=n(Nre,"STRONG",{});var aAt=s(Cve);D_r=r(aAt,"not"),aAt.forEach(t),G_r=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(Nre,"A",{href:!0});var nAt=s(vH);O_r=r(nAt,"from_pretrained()"),nAt.forEach(t),V_r=r(Nre," to load the model weights."),Nre.forEach(t),X_r=i(SA),T(XT.$$.fragment,SA),SA.forEach(t),z_r=i(El),vo=n(El,"DIV",{class:!0});var ya=s(vo);T(F9.$$.fragment,ya),Q_r=i(ya),wve=n(ya,"P",{});var sAt=s(wve);W_r=r(sAt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sAt.forEach(t),H_r=i(ya),rn=n(ya,"P",{});var RA=s(rn);U_r=r(RA,"The model class to instantiate is selected based on the "),Ave=n(RA,"CODE",{});var lAt=s(Ave);J_r=r(lAt,"model_type"),lAt.forEach(t),Y_r=r(RA,` property of the config object (either
passed as an argument or loaded from `),Lve=n(RA,"CODE",{});var iAt=s(Lve);K_r=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),Z_r=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(RA,"CODE",{});var dAt=s(yve);eur=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),our=r(RA,":"),RA.forEach(t),rur=i(ya),tn=n(ya,"UL",{});var PA=s(tn);zT=n(PA,"LI",{});var PIe=s(zT);xve=n(PIe,"STRONG",{});var cAt=s(xve);tur=r(cAt,"beit"),cAt.forEach(t),aur=r(PIe," \u2014 "),FH=n(PIe,"A",{href:!0});var fAt=s(FH);nur=r(fAt,"BeitForSemanticSegmentation"),fAt.forEach(t),sur=r(PIe," (BEiT model)"),PIe.forEach(t),lur=i(PA),QT=n(PA,"LI",{});var BIe=s(QT);$ve=n(BIe,"STRONG",{});var mAt=s($ve);iur=r(mAt,"data2vec-vision"),mAt.forEach(t),dur=r(BIe," \u2014 "),TH=n(BIe,"A",{href:!0});var gAt=s(TH);cur=r(gAt,"Data2VecVisionForSemanticSegmentation"),gAt.forEach(t),fur=r(BIe," (Data2VecVision model)"),BIe.forEach(t),mur=i(PA),WT=n(PA,"LI",{});var IIe=s(WT);kve=n(IIe,"STRONG",{});var hAt=s(kve);gur=r(hAt,"dpt"),hAt.forEach(t),hur=r(IIe," \u2014 "),MH=n(IIe,"A",{href:!0});var pAt=s(MH);pur=r(pAt,"DPTForSemanticSegmentation"),pAt.forEach(t),_ur=r(IIe," (DPT model)"),IIe.forEach(t),uur=i(PA),HT=n(PA,"LI",{});var NIe=s(HT);Sve=n(NIe,"STRONG",{});var _At=s(Sve);bur=r(_At,"segformer"),_At.forEach(t),vur=r(NIe," \u2014 "),EH=n(NIe,"A",{href:!0});var uAt=s(EH);Fur=r(uAt,"SegformerForSemanticSegmentation"),uAt.forEach(t),Tur=r(NIe," (SegFormer model)"),NIe.forEach(t),PA.forEach(t),Mur=i(ya),UT=n(ya,"P",{});var qIe=s(UT);Eur=r(qIe,"The model is set in evaluation mode by default using "),Rve=n(qIe,"CODE",{});var bAt=s(Rve);Cur=r(bAt,"model.eval()"),bAt.forEach(t),wur=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(qIe,"CODE",{});var vAt=s(Pve);Aur=r(vAt,"model.train()"),vAt.forEach(t),qIe.forEach(t),Lur=i(ya),T(JT.$$.fragment,ya),ya.forEach(t),El.forEach(t),IVe=i(f),Zd=n(f,"H2",{class:!0});var Xze=s(Zd);YT=n(Xze,"A",{id:!0,class:!0,href:!0});var FAt=s(YT);Bve=n(FAt,"SPAN",{});var TAt=s(Bve);T(T9.$$.fragment,TAt),TAt.forEach(t),FAt.forEach(t),yur=i(Xze),Ive=n(Xze,"SPAN",{});var MAt=s(Ive);xur=r(MAt,"AutoModelForInstanceSegmentation"),MAt.forEach(t),Xze.forEach(t),NVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(M9.$$.fragment,Cl),$ur=i(Cl),ec=n(Cl,"P",{});var qre=s(ec);kur=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),CH=n(qre,"A",{href:!0});var EAt=s(CH);Sur=r(EAt,"from_pretrained()"),EAt.forEach(t),Rur=r(qre," class method or the "),wH=n(qre,"A",{href:!0});var CAt=s(wH);Pur=r(CAt,"from_config()"),CAt.forEach(t),Bur=r(qre,` class
method.`),qre.forEach(t),Iur=i(Cl),E9=n(Cl,"P",{});var zze=s(E9);Nur=r(zze,"This class cannot be instantiated directly using "),Nve=n(zze,"CODE",{});var wAt=s(Nve);qur=r(wAt,"__init__()"),wAt.forEach(t),jur=r(zze," (throws an error)."),zze.forEach(t),Dur=i(Cl),xt=n(Cl,"DIV",{class:!0});var BA=s(xt);T(C9.$$.fragment,BA),Gur=i(BA),qve=n(BA,"P",{});var AAt=s(qve);Our=r(AAt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),AAt.forEach(t),Vur=i(BA),oc=n(BA,"P",{});var jre=s(oc);Xur=r(jre,`Note:
Loading a model from its configuration file does `),jve=n(jre,"STRONG",{});var LAt=s(jve);zur=r(LAt,"not"),LAt.forEach(t),Qur=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(jre,"A",{href:!0});var yAt=s(AH);Wur=r(yAt,"from_pretrained()"),yAt.forEach(t),Hur=r(jre," to load the model weights."),jre.forEach(t),Uur=i(BA),T(KT.$$.fragment,BA),BA.forEach(t),Jur=i(Cl),Fo=n(Cl,"DIV",{class:!0});var xa=s(Fo);T(w9.$$.fragment,xa),Yur=i(xa),Dve=n(xa,"P",{});var xAt=s(Dve);Kur=r(xAt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xAt.forEach(t),Zur=i(xa),an=n(xa,"P",{});var IA=s(an);e1r=r(IA,"The model class to instantiate is selected based on the "),Gve=n(IA,"CODE",{});var $At=s(Gve);o1r=r($At,"model_type"),$At.forEach(t),r1r=r(IA,` property of the config object (either
passed as an argument or loaded from `),Ove=n(IA,"CODE",{});var kAt=s(Ove);t1r=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),a1r=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(IA,"CODE",{});var SAt=s(Vve);n1r=r(SAt,"pretrained_model_name_or_path"),SAt.forEach(t),s1r=r(IA,":"),IA.forEach(t),l1r=i(xa),Xve=n(xa,"UL",{});var RAt=s(Xve);ZT=n(RAt,"LI",{});var jIe=s(ZT);zve=n(jIe,"STRONG",{});var PAt=s(zve);i1r=r(PAt,"maskformer"),PAt.forEach(t),d1r=r(jIe," \u2014 "),LH=n(jIe,"A",{href:!0});var BAt=s(LH);c1r=r(BAt,"MaskFormerForInstanceSegmentation"),BAt.forEach(t),f1r=r(jIe," (MaskFormer model)"),jIe.forEach(t),RAt.forEach(t),m1r=i(xa),eM=n(xa,"P",{});var DIe=s(eM);g1r=r(DIe,"The model is set in evaluation mode by default using "),Qve=n(DIe,"CODE",{});var IAt=s(Qve);h1r=r(IAt,"model.eval()"),IAt.forEach(t),p1r=r(DIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wve=n(DIe,"CODE",{});var NAt=s(Wve);_1r=r(NAt,"model.train()"),NAt.forEach(t),DIe.forEach(t),u1r=i(xa),T(oM.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),qVe=i(f),rc=n(f,"H2",{class:!0});var Qze=s(rc);rM=n(Qze,"A",{id:!0,class:!0,href:!0});var qAt=s(rM);Hve=n(qAt,"SPAN",{});var jAt=s(Hve);T(A9.$$.fragment,jAt),jAt.forEach(t),qAt.forEach(t),b1r=i(Qze),Uve=n(Qze,"SPAN",{});var DAt=s(Uve);v1r=r(DAt,"TFAutoModel"),DAt.forEach(t),Qze.forEach(t),jVe=i(f),or=n(f,"DIV",{class:!0});var wl=s(or);T(L9.$$.fragment,wl),F1r=i(wl),tc=n(wl,"P",{});var Dre=s(tc);T1r=r(Dre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yH=n(Dre,"A",{href:!0});var GAt=s(yH);M1r=r(GAt,"from_pretrained()"),GAt.forEach(t),E1r=r(Dre," class method or the "),xH=n(Dre,"A",{href:!0});var OAt=s(xH);C1r=r(OAt,"from_config()"),OAt.forEach(t),w1r=r(Dre,` class
method.`),Dre.forEach(t),A1r=i(wl),y9=n(wl,"P",{});var Wze=s(y9);L1r=r(Wze,"This class cannot be instantiated directly using "),Jve=n(Wze,"CODE",{});var VAt=s(Jve);y1r=r(VAt,"__init__()"),VAt.forEach(t),x1r=r(Wze," (throws an error)."),Wze.forEach(t),$1r=i(wl),$t=n(wl,"DIV",{class:!0});var NA=s($t);T(x9.$$.fragment,NA),k1r=i(NA),Yve=n(NA,"P",{});var XAt=s(Yve);S1r=r(XAt,"Instantiates one of the base model classes of the library from a configuration."),XAt.forEach(t),R1r=i(NA),ac=n(NA,"P",{});var Gre=s(ac);P1r=r(Gre,`Note:
Loading a model from its configuration file does `),Kve=n(Gre,"STRONG",{});var zAt=s(Kve);B1r=r(zAt,"not"),zAt.forEach(t),I1r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(Gre,"A",{href:!0});var QAt=s($H);N1r=r(QAt,"from_pretrained()"),QAt.forEach(t),q1r=r(Gre," to load the model weights."),Gre.forEach(t),j1r=i(NA),T(tM.$$.fragment,NA),NA.forEach(t),D1r=i(wl),xr=n(wl,"DIV",{class:!0});var Al=s(xr);T($9.$$.fragment,Al),G1r=i(Al),Zve=n(Al,"P",{});var WAt=s(Zve);O1r=r(WAt,"Instantiate one of the base model classes of the library from a pretrained model."),WAt.forEach(t),V1r=i(Al),nn=n(Al,"P",{});var qA=s(nn);X1r=r(qA,"The model class to instantiate is selected based on the "),eFe=n(qA,"CODE",{});var HAt=s(eFe);z1r=r(HAt,"model_type"),HAt.forEach(t),Q1r=r(qA,` property of the config object (either
passed as an argument or loaded from `),oFe=n(qA,"CODE",{});var UAt=s(oFe);W1r=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),H1r=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(qA,"CODE",{});var JAt=s(rFe);U1r=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),J1r=r(qA,":"),qA.forEach(t),Y1r=i(Al),j=n(Al,"UL",{});var D=s(j);aM=n(D,"LI",{});var GIe=s(aM);tFe=n(GIe,"STRONG",{});var YAt=s(tFe);K1r=r(YAt,"albert"),YAt.forEach(t),Z1r=r(GIe," \u2014 "),kH=n(GIe,"A",{href:!0});var KAt=s(kH);e7r=r(KAt,"TFAlbertModel"),KAt.forEach(t),o7r=r(GIe," (ALBERT model)"),GIe.forEach(t),r7r=i(D),nM=n(D,"LI",{});var OIe=s(nM);aFe=n(OIe,"STRONG",{});var ZAt=s(aFe);t7r=r(ZAt,"bart"),ZAt.forEach(t),a7r=r(OIe," \u2014 "),SH=n(OIe,"A",{href:!0});var eLt=s(SH);n7r=r(eLt,"TFBartModel"),eLt.forEach(t),s7r=r(OIe," (BART model)"),OIe.forEach(t),l7r=i(D),sM=n(D,"LI",{});var VIe=s(sM);nFe=n(VIe,"STRONG",{});var oLt=s(nFe);i7r=r(oLt,"bert"),oLt.forEach(t),d7r=r(VIe," \u2014 "),RH=n(VIe,"A",{href:!0});var rLt=s(RH);c7r=r(rLt,"TFBertModel"),rLt.forEach(t),f7r=r(VIe," (BERT model)"),VIe.forEach(t),m7r=i(D),lM=n(D,"LI",{});var XIe=s(lM);sFe=n(XIe,"STRONG",{});var tLt=s(sFe);g7r=r(tLt,"blenderbot"),tLt.forEach(t),h7r=r(XIe," \u2014 "),PH=n(XIe,"A",{href:!0});var aLt=s(PH);p7r=r(aLt,"TFBlenderbotModel"),aLt.forEach(t),_7r=r(XIe," (Blenderbot model)"),XIe.forEach(t),u7r=i(D),iM=n(D,"LI",{});var zIe=s(iM);lFe=n(zIe,"STRONG",{});var nLt=s(lFe);b7r=r(nLt,"blenderbot-small"),nLt.forEach(t),v7r=r(zIe," \u2014 "),BH=n(zIe,"A",{href:!0});var sLt=s(BH);F7r=r(sLt,"TFBlenderbotSmallModel"),sLt.forEach(t),T7r=r(zIe," (BlenderbotSmall model)"),zIe.forEach(t),M7r=i(D),dM=n(D,"LI",{});var QIe=s(dM);iFe=n(QIe,"STRONG",{});var lLt=s(iFe);E7r=r(lLt,"camembert"),lLt.forEach(t),C7r=r(QIe," \u2014 "),IH=n(QIe,"A",{href:!0});var iLt=s(IH);w7r=r(iLt,"TFCamembertModel"),iLt.forEach(t),A7r=r(QIe," (CamemBERT model)"),QIe.forEach(t),L7r=i(D),cM=n(D,"LI",{});var WIe=s(cM);dFe=n(WIe,"STRONG",{});var dLt=s(dFe);y7r=r(dLt,"clip"),dLt.forEach(t),x7r=r(WIe," \u2014 "),NH=n(WIe,"A",{href:!0});var cLt=s(NH);$7r=r(cLt,"TFCLIPModel"),cLt.forEach(t),k7r=r(WIe," (CLIP model)"),WIe.forEach(t),S7r=i(D),fM=n(D,"LI",{});var HIe=s(fM);cFe=n(HIe,"STRONG",{});var fLt=s(cFe);R7r=r(fLt,"convbert"),fLt.forEach(t),P7r=r(HIe," \u2014 "),qH=n(HIe,"A",{href:!0});var mLt=s(qH);B7r=r(mLt,"TFConvBertModel"),mLt.forEach(t),I7r=r(HIe," (ConvBERT model)"),HIe.forEach(t),N7r=i(D),mM=n(D,"LI",{});var UIe=s(mM);fFe=n(UIe,"STRONG",{});var gLt=s(fFe);q7r=r(gLt,"convnext"),gLt.forEach(t),j7r=r(UIe," \u2014 "),jH=n(UIe,"A",{href:!0});var hLt=s(jH);D7r=r(hLt,"TFConvNextModel"),hLt.forEach(t),G7r=r(UIe," (ConvNeXT model)"),UIe.forEach(t),O7r=i(D),gM=n(D,"LI",{});var JIe=s(gM);mFe=n(JIe,"STRONG",{});var pLt=s(mFe);V7r=r(pLt,"ctrl"),pLt.forEach(t),X7r=r(JIe," \u2014 "),DH=n(JIe,"A",{href:!0});var _Lt=s(DH);z7r=r(_Lt,"TFCTRLModel"),_Lt.forEach(t),Q7r=r(JIe," (CTRL model)"),JIe.forEach(t),W7r=i(D),hM=n(D,"LI",{});var YIe=s(hM);gFe=n(YIe,"STRONG",{});var uLt=s(gFe);H7r=r(uLt,"data2vec-vision"),uLt.forEach(t),U7r=r(YIe," \u2014 "),GH=n(YIe,"A",{href:!0});var bLt=s(GH);J7r=r(bLt,"TFData2VecVisionModel"),bLt.forEach(t),Y7r=r(YIe," (Data2VecVision model)"),YIe.forEach(t),K7r=i(D),pM=n(D,"LI",{});var KIe=s(pM);hFe=n(KIe,"STRONG",{});var vLt=s(hFe);Z7r=r(vLt,"deberta"),vLt.forEach(t),e2r=r(KIe," \u2014 "),OH=n(KIe,"A",{href:!0});var FLt=s(OH);o2r=r(FLt,"TFDebertaModel"),FLt.forEach(t),r2r=r(KIe," (DeBERTa model)"),KIe.forEach(t),t2r=i(D),_M=n(D,"LI",{});var ZIe=s(_M);pFe=n(ZIe,"STRONG",{});var TLt=s(pFe);a2r=r(TLt,"deberta-v2"),TLt.forEach(t),n2r=r(ZIe," \u2014 "),VH=n(ZIe,"A",{href:!0});var MLt=s(VH);s2r=r(MLt,"TFDebertaV2Model"),MLt.forEach(t),l2r=r(ZIe," (DeBERTa-v2 model)"),ZIe.forEach(t),i2r=i(D),uM=n(D,"LI",{});var eNe=s(uM);_Fe=n(eNe,"STRONG",{});var ELt=s(_Fe);d2r=r(ELt,"distilbert"),ELt.forEach(t),c2r=r(eNe," \u2014 "),XH=n(eNe,"A",{href:!0});var CLt=s(XH);f2r=r(CLt,"TFDistilBertModel"),CLt.forEach(t),m2r=r(eNe," (DistilBERT model)"),eNe.forEach(t),g2r=i(D),bM=n(D,"LI",{});var oNe=s(bM);uFe=n(oNe,"STRONG",{});var wLt=s(uFe);h2r=r(wLt,"dpr"),wLt.forEach(t),p2r=r(oNe," \u2014 "),zH=n(oNe,"A",{href:!0});var ALt=s(zH);_2r=r(ALt,"TFDPRQuestionEncoder"),ALt.forEach(t),u2r=r(oNe," (DPR model)"),oNe.forEach(t),b2r=i(D),vM=n(D,"LI",{});var rNe=s(vM);bFe=n(rNe,"STRONG",{});var LLt=s(bFe);v2r=r(LLt,"electra"),LLt.forEach(t),F2r=r(rNe," \u2014 "),QH=n(rNe,"A",{href:!0});var yLt=s(QH);T2r=r(yLt,"TFElectraModel"),yLt.forEach(t),M2r=r(rNe," (ELECTRA model)"),rNe.forEach(t),E2r=i(D),FM=n(D,"LI",{});var tNe=s(FM);vFe=n(tNe,"STRONG",{});var xLt=s(vFe);C2r=r(xLt,"flaubert"),xLt.forEach(t),w2r=r(tNe," \u2014 "),WH=n(tNe,"A",{href:!0});var $Lt=s(WH);A2r=r($Lt,"TFFlaubertModel"),$Lt.forEach(t),L2r=r(tNe," (FlauBERT model)"),tNe.forEach(t),y2r=i(D),Us=n(D,"LI",{});var hS=s(Us);FFe=n(hS,"STRONG",{});var kLt=s(FFe);x2r=r(kLt,"funnel"),kLt.forEach(t),$2r=r(hS," \u2014 "),HH=n(hS,"A",{href:!0});var SLt=s(HH);k2r=r(SLt,"TFFunnelModel"),SLt.forEach(t),S2r=r(hS," or "),UH=n(hS,"A",{href:!0});var RLt=s(UH);R2r=r(RLt,"TFFunnelBaseModel"),RLt.forEach(t),P2r=r(hS," (Funnel Transformer model)"),hS.forEach(t),B2r=i(D),TM=n(D,"LI",{});var aNe=s(TM);TFe=n(aNe,"STRONG",{});var PLt=s(TFe);I2r=r(PLt,"gpt2"),PLt.forEach(t),N2r=r(aNe," \u2014 "),JH=n(aNe,"A",{href:!0});var BLt=s(JH);q2r=r(BLt,"TFGPT2Model"),BLt.forEach(t),j2r=r(aNe," (OpenAI GPT-2 model)"),aNe.forEach(t),D2r=i(D),MM=n(D,"LI",{});var nNe=s(MM);MFe=n(nNe,"STRONG",{});var ILt=s(MFe);G2r=r(ILt,"gptj"),ILt.forEach(t),O2r=r(nNe," \u2014 "),YH=n(nNe,"A",{href:!0});var NLt=s(YH);V2r=r(NLt,"TFGPTJModel"),NLt.forEach(t),X2r=r(nNe," (GPT-J model)"),nNe.forEach(t),z2r=i(D),EM=n(D,"LI",{});var sNe=s(EM);EFe=n(sNe,"STRONG",{});var qLt=s(EFe);Q2r=r(qLt,"hubert"),qLt.forEach(t),W2r=r(sNe," \u2014 "),KH=n(sNe,"A",{href:!0});var jLt=s(KH);H2r=r(jLt,"TFHubertModel"),jLt.forEach(t),U2r=r(sNe," (Hubert model)"),sNe.forEach(t),J2r=i(D),CM=n(D,"LI",{});var lNe=s(CM);CFe=n(lNe,"STRONG",{});var DLt=s(CFe);Y2r=r(DLt,"layoutlm"),DLt.forEach(t),K2r=r(lNe," \u2014 "),ZH=n(lNe,"A",{href:!0});var GLt=s(ZH);Z2r=r(GLt,"TFLayoutLMModel"),GLt.forEach(t),ebr=r(lNe," (LayoutLM model)"),lNe.forEach(t),obr=i(D),wM=n(D,"LI",{});var iNe=s(wM);wFe=n(iNe,"STRONG",{});var OLt=s(wFe);rbr=r(OLt,"led"),OLt.forEach(t),tbr=r(iNe," \u2014 "),eU=n(iNe,"A",{href:!0});var VLt=s(eU);abr=r(VLt,"TFLEDModel"),VLt.forEach(t),nbr=r(iNe," (LED model)"),iNe.forEach(t),sbr=i(D),AM=n(D,"LI",{});var dNe=s(AM);AFe=n(dNe,"STRONG",{});var XLt=s(AFe);lbr=r(XLt,"longformer"),XLt.forEach(t),ibr=r(dNe," \u2014 "),oU=n(dNe,"A",{href:!0});var zLt=s(oU);dbr=r(zLt,"TFLongformerModel"),zLt.forEach(t),cbr=r(dNe," (Longformer model)"),dNe.forEach(t),fbr=i(D),LM=n(D,"LI",{});var cNe=s(LM);LFe=n(cNe,"STRONG",{});var QLt=s(LFe);mbr=r(QLt,"lxmert"),QLt.forEach(t),gbr=r(cNe," \u2014 "),rU=n(cNe,"A",{href:!0});var WLt=s(rU);hbr=r(WLt,"TFLxmertModel"),WLt.forEach(t),pbr=r(cNe," (LXMERT model)"),cNe.forEach(t),_br=i(D),yM=n(D,"LI",{});var fNe=s(yM);yFe=n(fNe,"STRONG",{});var HLt=s(yFe);ubr=r(HLt,"marian"),HLt.forEach(t),bbr=r(fNe," \u2014 "),tU=n(fNe,"A",{href:!0});var ULt=s(tU);vbr=r(ULt,"TFMarianModel"),ULt.forEach(t),Fbr=r(fNe," (Marian model)"),fNe.forEach(t),Tbr=i(D),xM=n(D,"LI",{});var mNe=s(xM);xFe=n(mNe,"STRONG",{});var JLt=s(xFe);Mbr=r(JLt,"mbart"),JLt.forEach(t),Ebr=r(mNe," \u2014 "),aU=n(mNe,"A",{href:!0});var YLt=s(aU);Cbr=r(YLt,"TFMBartModel"),YLt.forEach(t),wbr=r(mNe," (mBART model)"),mNe.forEach(t),Abr=i(D),$M=n(D,"LI",{});var gNe=s($M);$Fe=n(gNe,"STRONG",{});var KLt=s($Fe);Lbr=r(KLt,"mobilebert"),KLt.forEach(t),ybr=r(gNe," \u2014 "),nU=n(gNe,"A",{href:!0});var ZLt=s(nU);xbr=r(ZLt,"TFMobileBertModel"),ZLt.forEach(t),$br=r(gNe," (MobileBERT model)"),gNe.forEach(t),kbr=i(D),kM=n(D,"LI",{});var hNe=s(kM);kFe=n(hNe,"STRONG",{});var eyt=s(kFe);Sbr=r(eyt,"mpnet"),eyt.forEach(t),Rbr=r(hNe," \u2014 "),sU=n(hNe,"A",{href:!0});var oyt=s(sU);Pbr=r(oyt,"TFMPNetModel"),oyt.forEach(t),Bbr=r(hNe," (MPNet model)"),hNe.forEach(t),Ibr=i(D),SM=n(D,"LI",{});var pNe=s(SM);SFe=n(pNe,"STRONG",{});var ryt=s(SFe);Nbr=r(ryt,"mt5"),ryt.forEach(t),qbr=r(pNe," \u2014 "),lU=n(pNe,"A",{href:!0});var tyt=s(lU);jbr=r(tyt,"TFMT5Model"),tyt.forEach(t),Dbr=r(pNe," (MT5 model)"),pNe.forEach(t),Gbr=i(D),RM=n(D,"LI",{});var _Ne=s(RM);RFe=n(_Ne,"STRONG",{});var ayt=s(RFe);Obr=r(ayt,"openai-gpt"),ayt.forEach(t),Vbr=r(_Ne," \u2014 "),iU=n(_Ne,"A",{href:!0});var nyt=s(iU);Xbr=r(nyt,"TFOpenAIGPTModel"),nyt.forEach(t),zbr=r(_Ne," (OpenAI GPT model)"),_Ne.forEach(t),Qbr=i(D),PM=n(D,"LI",{});var uNe=s(PM);PFe=n(uNe,"STRONG",{});var syt=s(PFe);Wbr=r(syt,"opt"),syt.forEach(t),Hbr=r(uNe," \u2014 "),dU=n(uNe,"A",{href:!0});var lyt=s(dU);Ubr=r(lyt,"TFOPTModel"),lyt.forEach(t),Jbr=r(uNe," (OPT model)"),uNe.forEach(t),Ybr=i(D),BM=n(D,"LI",{});var bNe=s(BM);BFe=n(bNe,"STRONG",{});var iyt=s(BFe);Kbr=r(iyt,"pegasus"),iyt.forEach(t),Zbr=r(bNe," \u2014 "),cU=n(bNe,"A",{href:!0});var dyt=s(cU);evr=r(dyt,"TFPegasusModel"),dyt.forEach(t),ovr=r(bNe," (Pegasus model)"),bNe.forEach(t),rvr=i(D),IM=n(D,"LI",{});var vNe=s(IM);IFe=n(vNe,"STRONG",{});var cyt=s(IFe);tvr=r(cyt,"rembert"),cyt.forEach(t),avr=r(vNe," \u2014 "),fU=n(vNe,"A",{href:!0});var fyt=s(fU);nvr=r(fyt,"TFRemBertModel"),fyt.forEach(t),svr=r(vNe," (RemBERT model)"),vNe.forEach(t),lvr=i(D),NM=n(D,"LI",{});var FNe=s(NM);NFe=n(FNe,"STRONG",{});var myt=s(NFe);ivr=r(myt,"roberta"),myt.forEach(t),dvr=r(FNe," \u2014 "),mU=n(FNe,"A",{href:!0});var gyt=s(mU);cvr=r(gyt,"TFRobertaModel"),gyt.forEach(t),fvr=r(FNe," (RoBERTa model)"),FNe.forEach(t),mvr=i(D),qM=n(D,"LI",{});var TNe=s(qM);qFe=n(TNe,"STRONG",{});var hyt=s(qFe);gvr=r(hyt,"roformer"),hyt.forEach(t),hvr=r(TNe," \u2014 "),gU=n(TNe,"A",{href:!0});var pyt=s(gU);pvr=r(pyt,"TFRoFormerModel"),pyt.forEach(t),_vr=r(TNe," (RoFormer model)"),TNe.forEach(t),uvr=i(D),jM=n(D,"LI",{});var MNe=s(jM);jFe=n(MNe,"STRONG",{});var _yt=s(jFe);bvr=r(_yt,"speech_to_text"),_yt.forEach(t),vvr=r(MNe," \u2014 "),hU=n(MNe,"A",{href:!0});var uyt=s(hU);Fvr=r(uyt,"TFSpeech2TextModel"),uyt.forEach(t),Tvr=r(MNe," (Speech2Text model)"),MNe.forEach(t),Mvr=i(D),DM=n(D,"LI",{});var ENe=s(DM);DFe=n(ENe,"STRONG",{});var byt=s(DFe);Evr=r(byt,"swin"),byt.forEach(t),Cvr=r(ENe," \u2014 "),pU=n(ENe,"A",{href:!0});var vyt=s(pU);wvr=r(vyt,"TFSwinModel"),vyt.forEach(t),Avr=r(ENe," (Swin Transformer model)"),ENe.forEach(t),Lvr=i(D),GM=n(D,"LI",{});var CNe=s(GM);GFe=n(CNe,"STRONG",{});var Fyt=s(GFe);yvr=r(Fyt,"t5"),Fyt.forEach(t),xvr=r(CNe," \u2014 "),_U=n(CNe,"A",{href:!0});var Tyt=s(_U);$vr=r(Tyt,"TFT5Model"),Tyt.forEach(t),kvr=r(CNe," (T5 model)"),CNe.forEach(t),Svr=i(D),OM=n(D,"LI",{});var wNe=s(OM);OFe=n(wNe,"STRONG",{});var Myt=s(OFe);Rvr=r(Myt,"tapas"),Myt.forEach(t),Pvr=r(wNe," \u2014 "),uU=n(wNe,"A",{href:!0});var Eyt=s(uU);Bvr=r(Eyt,"TFTapasModel"),Eyt.forEach(t),Ivr=r(wNe," (TAPAS model)"),wNe.forEach(t),Nvr=i(D),VM=n(D,"LI",{});var ANe=s(VM);VFe=n(ANe,"STRONG",{});var Cyt=s(VFe);qvr=r(Cyt,"transfo-xl"),Cyt.forEach(t),jvr=r(ANe," \u2014 "),bU=n(ANe,"A",{href:!0});var wyt=s(bU);Dvr=r(wyt,"TFTransfoXLModel"),wyt.forEach(t),Gvr=r(ANe," (Transformer-XL model)"),ANe.forEach(t),Ovr=i(D),XM=n(D,"LI",{});var LNe=s(XM);XFe=n(LNe,"STRONG",{});var Ayt=s(XFe);Vvr=r(Ayt,"vit"),Ayt.forEach(t),Xvr=r(LNe," \u2014 "),vU=n(LNe,"A",{href:!0});var Lyt=s(vU);zvr=r(Lyt,"TFViTModel"),Lyt.forEach(t),Qvr=r(LNe," (ViT model)"),LNe.forEach(t),Wvr=i(D),zM=n(D,"LI",{});var yNe=s(zM);zFe=n(yNe,"STRONG",{});var yyt=s(zFe);Hvr=r(yyt,"vit_mae"),yyt.forEach(t),Uvr=r(yNe," \u2014 "),FU=n(yNe,"A",{href:!0});var xyt=s(FU);Jvr=r(xyt,"TFViTMAEModel"),xyt.forEach(t),Yvr=r(yNe," (ViTMAE model)"),yNe.forEach(t),Kvr=i(D),QM=n(D,"LI",{});var xNe=s(QM);QFe=n(xNe,"STRONG",{});var $yt=s(QFe);Zvr=r($yt,"wav2vec2"),$yt.forEach(t),eFr=r(xNe," \u2014 "),TU=n(xNe,"A",{href:!0});var kyt=s(TU);oFr=r(kyt,"TFWav2Vec2Model"),kyt.forEach(t),rFr=r(xNe," (Wav2Vec2 model)"),xNe.forEach(t),tFr=i(D),WM=n(D,"LI",{});var $Ne=s(WM);WFe=n($Ne,"STRONG",{});var Syt=s(WFe);aFr=r(Syt,"xlm"),Syt.forEach(t),nFr=r($Ne," \u2014 "),MU=n($Ne,"A",{href:!0});var Ryt=s(MU);sFr=r(Ryt,"TFXLMModel"),Ryt.forEach(t),lFr=r($Ne," (XLM model)"),$Ne.forEach(t),iFr=i(D),HM=n(D,"LI",{});var kNe=s(HM);HFe=n(kNe,"STRONG",{});var Pyt=s(HFe);dFr=r(Pyt,"xlm-roberta"),Pyt.forEach(t),cFr=r(kNe," \u2014 "),EU=n(kNe,"A",{href:!0});var Byt=s(EU);fFr=r(Byt,"TFXLMRobertaModel"),Byt.forEach(t),mFr=r(kNe," (XLM-RoBERTa model)"),kNe.forEach(t),gFr=i(D),UM=n(D,"LI",{});var SNe=s(UM);UFe=n(SNe,"STRONG",{});var Iyt=s(UFe);hFr=r(Iyt,"xlnet"),Iyt.forEach(t),pFr=r(SNe," \u2014 "),CU=n(SNe,"A",{href:!0});var Nyt=s(CU);_Fr=r(Nyt,"TFXLNetModel"),Nyt.forEach(t),uFr=r(SNe," (XLNet model)"),SNe.forEach(t),D.forEach(t),bFr=i(Al),T(JM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),DVe=i(f),nc=n(f,"H2",{class:!0});var Hze=s(nc);YM=n(Hze,"A",{id:!0,class:!0,href:!0});var qyt=s(YM);JFe=n(qyt,"SPAN",{});var jyt=s(JFe);T(k9.$$.fragment,jyt),jyt.forEach(t),qyt.forEach(t),vFr=i(Hze),YFe=n(Hze,"SPAN",{});var Dyt=s(YFe);FFr=r(Dyt,"TFAutoModelForPreTraining"),Dyt.forEach(t),Hze.forEach(t),GVe=i(f),rr=n(f,"DIV",{class:!0});var Ll=s(rr);T(S9.$$.fragment,Ll),TFr=i(Ll),sc=n(Ll,"P",{});var Ore=s(sc);MFr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wU=n(Ore,"A",{href:!0});var Gyt=s(wU);EFr=r(Gyt,"from_pretrained()"),Gyt.forEach(t),CFr=r(Ore," class method or the "),AU=n(Ore,"A",{href:!0});var Oyt=s(AU);wFr=r(Oyt,"from_config()"),Oyt.forEach(t),AFr=r(Ore,` class
method.`),Ore.forEach(t),LFr=i(Ll),R9=n(Ll,"P",{});var Uze=s(R9);yFr=r(Uze,"This class cannot be instantiated directly using "),KFe=n(Uze,"CODE",{});var Vyt=s(KFe);xFr=r(Vyt,"__init__()"),Vyt.forEach(t),$Fr=r(Uze," (throws an error)."),Uze.forEach(t),kFr=i(Ll),kt=n(Ll,"DIV",{class:!0});var jA=s(kt);T(P9.$$.fragment,jA),SFr=i(jA),ZFe=n(jA,"P",{});var Xyt=s(ZFe);RFr=r(Xyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Xyt.forEach(t),PFr=i(jA),lc=n(jA,"P",{});var Vre=s(lc);BFr=r(Vre,`Note:
Loading a model from its configuration file does `),e6e=n(Vre,"STRONG",{});var zyt=s(e6e);IFr=r(zyt,"not"),zyt.forEach(t),NFr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(Vre,"A",{href:!0});var Qyt=s(LU);qFr=r(Qyt,"from_pretrained()"),Qyt.forEach(t),jFr=r(Vre," to load the model weights."),Vre.forEach(t),DFr=i(jA),T(KM.$$.fragment,jA),jA.forEach(t),GFr=i(Ll),$r=n(Ll,"DIV",{class:!0});var yl=s($r);T(B9.$$.fragment,yl),OFr=i(yl),o6e=n(yl,"P",{});var Wyt=s(o6e);VFr=r(Wyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wyt.forEach(t),XFr=i(yl),sn=n(yl,"P",{});var DA=s(sn);zFr=r(DA,"The model class to instantiate is selected based on the "),r6e=n(DA,"CODE",{});var Hyt=s(r6e);QFr=r(Hyt,"model_type"),Hyt.forEach(t),WFr=r(DA,` property of the config object (either
passed as an argument or loaded from `),t6e=n(DA,"CODE",{});var Uyt=s(t6e);HFr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),UFr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(DA,"CODE",{});var Jyt=s(a6e);JFr=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),YFr=r(DA,":"),DA.forEach(t),KFr=i(yl),se=n(yl,"UL",{});var le=s(se);ZM=n(le,"LI",{});var RNe=s(ZM);n6e=n(RNe,"STRONG",{});var Yyt=s(n6e);ZFr=r(Yyt,"albert"),Yyt.forEach(t),e6r=r(RNe," \u2014 "),yU=n(RNe,"A",{href:!0});var Kyt=s(yU);o6r=r(Kyt,"TFAlbertForPreTraining"),Kyt.forEach(t),r6r=r(RNe," (ALBERT model)"),RNe.forEach(t),t6r=i(le),e4=n(le,"LI",{});var PNe=s(e4);s6e=n(PNe,"STRONG",{});var Zyt=s(s6e);a6r=r(Zyt,"bart"),Zyt.forEach(t),n6r=r(PNe," \u2014 "),xU=n(PNe,"A",{href:!0});var e8t=s(xU);s6r=r(e8t,"TFBartForConditionalGeneration"),e8t.forEach(t),l6r=r(PNe," (BART model)"),PNe.forEach(t),i6r=i(le),o4=n(le,"LI",{});var BNe=s(o4);l6e=n(BNe,"STRONG",{});var o8t=s(l6e);d6r=r(o8t,"bert"),o8t.forEach(t),c6r=r(BNe," \u2014 "),$U=n(BNe,"A",{href:!0});var r8t=s($U);f6r=r(r8t,"TFBertForPreTraining"),r8t.forEach(t),m6r=r(BNe," (BERT model)"),BNe.forEach(t),g6r=i(le),r4=n(le,"LI",{});var INe=s(r4);i6e=n(INe,"STRONG",{});var t8t=s(i6e);h6r=r(t8t,"camembert"),t8t.forEach(t),p6r=r(INe," \u2014 "),kU=n(INe,"A",{href:!0});var a8t=s(kU);_6r=r(a8t,"TFCamembertForMaskedLM"),a8t.forEach(t),u6r=r(INe," (CamemBERT model)"),INe.forEach(t),b6r=i(le),t4=n(le,"LI",{});var NNe=s(t4);d6e=n(NNe,"STRONG",{});var n8t=s(d6e);v6r=r(n8t,"ctrl"),n8t.forEach(t),F6r=r(NNe," \u2014 "),SU=n(NNe,"A",{href:!0});var s8t=s(SU);T6r=r(s8t,"TFCTRLLMHeadModel"),s8t.forEach(t),M6r=r(NNe," (CTRL model)"),NNe.forEach(t),E6r=i(le),a4=n(le,"LI",{});var qNe=s(a4);c6e=n(qNe,"STRONG",{});var l8t=s(c6e);C6r=r(l8t,"distilbert"),l8t.forEach(t),w6r=r(qNe," \u2014 "),RU=n(qNe,"A",{href:!0});var i8t=s(RU);A6r=r(i8t,"TFDistilBertForMaskedLM"),i8t.forEach(t),L6r=r(qNe," (DistilBERT model)"),qNe.forEach(t),y6r=i(le),n4=n(le,"LI",{});var jNe=s(n4);f6e=n(jNe,"STRONG",{});var d8t=s(f6e);x6r=r(d8t,"electra"),d8t.forEach(t),$6r=r(jNe," \u2014 "),PU=n(jNe,"A",{href:!0});var c8t=s(PU);k6r=r(c8t,"TFElectraForPreTraining"),c8t.forEach(t),S6r=r(jNe," (ELECTRA model)"),jNe.forEach(t),R6r=i(le),s4=n(le,"LI",{});var DNe=s(s4);m6e=n(DNe,"STRONG",{});var f8t=s(m6e);P6r=r(f8t,"flaubert"),f8t.forEach(t),B6r=r(DNe," \u2014 "),BU=n(DNe,"A",{href:!0});var m8t=s(BU);I6r=r(m8t,"TFFlaubertWithLMHeadModel"),m8t.forEach(t),N6r=r(DNe," (FlauBERT model)"),DNe.forEach(t),q6r=i(le),l4=n(le,"LI",{});var GNe=s(l4);g6e=n(GNe,"STRONG",{});var g8t=s(g6e);j6r=r(g8t,"funnel"),g8t.forEach(t),D6r=r(GNe," \u2014 "),IU=n(GNe,"A",{href:!0});var h8t=s(IU);G6r=r(h8t,"TFFunnelForPreTraining"),h8t.forEach(t),O6r=r(GNe," (Funnel Transformer model)"),GNe.forEach(t),V6r=i(le),i4=n(le,"LI",{});var ONe=s(i4);h6e=n(ONe,"STRONG",{});var p8t=s(h6e);X6r=r(p8t,"gpt2"),p8t.forEach(t),z6r=r(ONe," \u2014 "),NU=n(ONe,"A",{href:!0});var _8t=s(NU);Q6r=r(_8t,"TFGPT2LMHeadModel"),_8t.forEach(t),W6r=r(ONe," (OpenAI GPT-2 model)"),ONe.forEach(t),H6r=i(le),d4=n(le,"LI",{});var VNe=s(d4);p6e=n(VNe,"STRONG",{});var u8t=s(p6e);U6r=r(u8t,"layoutlm"),u8t.forEach(t),J6r=r(VNe," \u2014 "),qU=n(VNe,"A",{href:!0});var b8t=s(qU);Y6r=r(b8t,"TFLayoutLMForMaskedLM"),b8t.forEach(t),K6r=r(VNe," (LayoutLM model)"),VNe.forEach(t),Z6r=i(le),c4=n(le,"LI",{});var XNe=s(c4);_6e=n(XNe,"STRONG",{});var v8t=s(_6e);eTr=r(v8t,"lxmert"),v8t.forEach(t),oTr=r(XNe," \u2014 "),jU=n(XNe,"A",{href:!0});var F8t=s(jU);rTr=r(F8t,"TFLxmertForPreTraining"),F8t.forEach(t),tTr=r(XNe," (LXMERT model)"),XNe.forEach(t),aTr=i(le),f4=n(le,"LI",{});var zNe=s(f4);u6e=n(zNe,"STRONG",{});var T8t=s(u6e);nTr=r(T8t,"mobilebert"),T8t.forEach(t),sTr=r(zNe," \u2014 "),DU=n(zNe,"A",{href:!0});var M8t=s(DU);lTr=r(M8t,"TFMobileBertForPreTraining"),M8t.forEach(t),iTr=r(zNe," (MobileBERT model)"),zNe.forEach(t),dTr=i(le),m4=n(le,"LI",{});var QNe=s(m4);b6e=n(QNe,"STRONG",{});var E8t=s(b6e);cTr=r(E8t,"mpnet"),E8t.forEach(t),fTr=r(QNe," \u2014 "),GU=n(QNe,"A",{href:!0});var C8t=s(GU);mTr=r(C8t,"TFMPNetForMaskedLM"),C8t.forEach(t),gTr=r(QNe," (MPNet model)"),QNe.forEach(t),hTr=i(le),g4=n(le,"LI",{});var WNe=s(g4);v6e=n(WNe,"STRONG",{});var w8t=s(v6e);pTr=r(w8t,"openai-gpt"),w8t.forEach(t),_Tr=r(WNe," \u2014 "),OU=n(WNe,"A",{href:!0});var A8t=s(OU);uTr=r(A8t,"TFOpenAIGPTLMHeadModel"),A8t.forEach(t),bTr=r(WNe," (OpenAI GPT model)"),WNe.forEach(t),vTr=i(le),h4=n(le,"LI",{});var HNe=s(h4);F6e=n(HNe,"STRONG",{});var L8t=s(F6e);FTr=r(L8t,"roberta"),L8t.forEach(t),TTr=r(HNe," \u2014 "),VU=n(HNe,"A",{href:!0});var y8t=s(VU);MTr=r(y8t,"TFRobertaForMaskedLM"),y8t.forEach(t),ETr=r(HNe," (RoBERTa model)"),HNe.forEach(t),CTr=i(le),p4=n(le,"LI",{});var UNe=s(p4);T6e=n(UNe,"STRONG",{});var x8t=s(T6e);wTr=r(x8t,"t5"),x8t.forEach(t),ATr=r(UNe," \u2014 "),XU=n(UNe,"A",{href:!0});var $8t=s(XU);LTr=r($8t,"TFT5ForConditionalGeneration"),$8t.forEach(t),yTr=r(UNe," (T5 model)"),UNe.forEach(t),xTr=i(le),_4=n(le,"LI",{});var JNe=s(_4);M6e=n(JNe,"STRONG",{});var k8t=s(M6e);$Tr=r(k8t,"tapas"),k8t.forEach(t),kTr=r(JNe," \u2014 "),zU=n(JNe,"A",{href:!0});var S8t=s(zU);STr=r(S8t,"TFTapasForMaskedLM"),S8t.forEach(t),RTr=r(JNe," (TAPAS model)"),JNe.forEach(t),PTr=i(le),u4=n(le,"LI",{});var YNe=s(u4);E6e=n(YNe,"STRONG",{});var R8t=s(E6e);BTr=r(R8t,"transfo-xl"),R8t.forEach(t),ITr=r(YNe," \u2014 "),QU=n(YNe,"A",{href:!0});var P8t=s(QU);NTr=r(P8t,"TFTransfoXLLMHeadModel"),P8t.forEach(t),qTr=r(YNe," (Transformer-XL model)"),YNe.forEach(t),jTr=i(le),b4=n(le,"LI",{});var KNe=s(b4);C6e=n(KNe,"STRONG",{});var B8t=s(C6e);DTr=r(B8t,"vit_mae"),B8t.forEach(t),GTr=r(KNe," \u2014 "),WU=n(KNe,"A",{href:!0});var I8t=s(WU);OTr=r(I8t,"TFViTMAEForPreTraining"),I8t.forEach(t),VTr=r(KNe," (ViTMAE model)"),KNe.forEach(t),XTr=i(le),v4=n(le,"LI",{});var ZNe=s(v4);w6e=n(ZNe,"STRONG",{});var N8t=s(w6e);zTr=r(N8t,"xlm"),N8t.forEach(t),QTr=r(ZNe," \u2014 "),HU=n(ZNe,"A",{href:!0});var q8t=s(HU);WTr=r(q8t,"TFXLMWithLMHeadModel"),q8t.forEach(t),HTr=r(ZNe," (XLM model)"),ZNe.forEach(t),UTr=i(le),F4=n(le,"LI",{});var eqe=s(F4);A6e=n(eqe,"STRONG",{});var j8t=s(A6e);JTr=r(j8t,"xlm-roberta"),j8t.forEach(t),YTr=r(eqe," \u2014 "),UU=n(eqe,"A",{href:!0});var D8t=s(UU);KTr=r(D8t,"TFXLMRobertaForMaskedLM"),D8t.forEach(t),ZTr=r(eqe," (XLM-RoBERTa model)"),eqe.forEach(t),eMr=i(le),T4=n(le,"LI",{});var oqe=s(T4);L6e=n(oqe,"STRONG",{});var G8t=s(L6e);oMr=r(G8t,"xlnet"),G8t.forEach(t),rMr=r(oqe," \u2014 "),JU=n(oqe,"A",{href:!0});var O8t=s(JU);tMr=r(O8t,"TFXLNetLMHeadModel"),O8t.forEach(t),aMr=r(oqe," (XLNet model)"),oqe.forEach(t),le.forEach(t),nMr=i(yl),T(M4.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),OVe=i(f),ic=n(f,"H2",{class:!0});var Jze=s(ic);E4=n(Jze,"A",{id:!0,class:!0,href:!0});var V8t=s(E4);y6e=n(V8t,"SPAN",{});var X8t=s(y6e);T(I9.$$.fragment,X8t),X8t.forEach(t),V8t.forEach(t),sMr=i(Jze),x6e=n(Jze,"SPAN",{});var z8t=s(x6e);lMr=r(z8t,"TFAutoModelForCausalLM"),z8t.forEach(t),Jze.forEach(t),VVe=i(f),tr=n(f,"DIV",{class:!0});var xl=s(tr);T(N9.$$.fragment,xl),iMr=i(xl),dc=n(xl,"P",{});var Xre=s(dc);dMr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YU=n(Xre,"A",{href:!0});var Q8t=s(YU);cMr=r(Q8t,"from_pretrained()"),Q8t.forEach(t),fMr=r(Xre," class method or the "),KU=n(Xre,"A",{href:!0});var W8t=s(KU);mMr=r(W8t,"from_config()"),W8t.forEach(t),gMr=r(Xre,` class
method.`),Xre.forEach(t),hMr=i(xl),q9=n(xl,"P",{});var Yze=s(q9);pMr=r(Yze,"This class cannot be instantiated directly using "),$6e=n(Yze,"CODE",{});var H8t=s($6e);_Mr=r(H8t,"__init__()"),H8t.forEach(t),uMr=r(Yze," (throws an error)."),Yze.forEach(t),bMr=i(xl),St=n(xl,"DIV",{class:!0});var GA=s(St);T(j9.$$.fragment,GA),vMr=i(GA),k6e=n(GA,"P",{});var U8t=s(k6e);FMr=r(U8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U8t.forEach(t),TMr=i(GA),cc=n(GA,"P",{});var zre=s(cc);MMr=r(zre,`Note:
Loading a model from its configuration file does `),S6e=n(zre,"STRONG",{});var J8t=s(S6e);EMr=r(J8t,"not"),J8t.forEach(t),CMr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(zre,"A",{href:!0});var Y8t=s(ZU);wMr=r(Y8t,"from_pretrained()"),Y8t.forEach(t),AMr=r(zre," to load the model weights."),zre.forEach(t),LMr=i(GA),T(C4.$$.fragment,GA),GA.forEach(t),yMr=i(xl),kr=n(xl,"DIV",{class:!0});var $l=s(kr);T(D9.$$.fragment,$l),xMr=i($l),R6e=n($l,"P",{});var K8t=s(R6e);$Mr=r(K8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),K8t.forEach(t),kMr=i($l),ln=n($l,"P",{});var OA=s(ln);SMr=r(OA,"The model class to instantiate is selected based on the "),P6e=n(OA,"CODE",{});var Z8t=s(P6e);RMr=r(Z8t,"model_type"),Z8t.forEach(t),PMr=r(OA,` property of the config object (either
passed as an argument or loaded from `),B6e=n(OA,"CODE",{});var e9t=s(B6e);BMr=r(e9t,"pretrained_model_name_or_path"),e9t.forEach(t),IMr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(OA,"CODE",{});var o9t=s(I6e);NMr=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),qMr=r(OA,":"),OA.forEach(t),jMr=i($l),Me=n($l,"UL",{});var Ce=s(Me);w4=n(Ce,"LI",{});var rqe=s(w4);N6e=n(rqe,"STRONG",{});var r9t=s(N6e);DMr=r(r9t,"bert"),r9t.forEach(t),GMr=r(rqe," \u2014 "),eJ=n(rqe,"A",{href:!0});var t9t=s(eJ);OMr=r(t9t,"TFBertLMHeadModel"),t9t.forEach(t),VMr=r(rqe," (BERT model)"),rqe.forEach(t),XMr=i(Ce),A4=n(Ce,"LI",{});var tqe=s(A4);q6e=n(tqe,"STRONG",{});var a9t=s(q6e);zMr=r(a9t,"camembert"),a9t.forEach(t),QMr=r(tqe," \u2014 "),oJ=n(tqe,"A",{href:!0});var n9t=s(oJ);WMr=r(n9t,"TFCamembertForCausalLM"),n9t.forEach(t),HMr=r(tqe," (CamemBERT model)"),tqe.forEach(t),UMr=i(Ce),L4=n(Ce,"LI",{});var aqe=s(L4);j6e=n(aqe,"STRONG",{});var s9t=s(j6e);JMr=r(s9t,"ctrl"),s9t.forEach(t),YMr=r(aqe," \u2014 "),rJ=n(aqe,"A",{href:!0});var l9t=s(rJ);KMr=r(l9t,"TFCTRLLMHeadModel"),l9t.forEach(t),ZMr=r(aqe," (CTRL model)"),aqe.forEach(t),e4r=i(Ce),y4=n(Ce,"LI",{});var nqe=s(y4);D6e=n(nqe,"STRONG",{});var i9t=s(D6e);o4r=r(i9t,"gpt2"),i9t.forEach(t),r4r=r(nqe," \u2014 "),tJ=n(nqe,"A",{href:!0});var d9t=s(tJ);t4r=r(d9t,"TFGPT2LMHeadModel"),d9t.forEach(t),a4r=r(nqe," (OpenAI GPT-2 model)"),nqe.forEach(t),n4r=i(Ce),x4=n(Ce,"LI",{});var sqe=s(x4);G6e=n(sqe,"STRONG",{});var c9t=s(G6e);s4r=r(c9t,"gptj"),c9t.forEach(t),l4r=r(sqe," \u2014 "),aJ=n(sqe,"A",{href:!0});var f9t=s(aJ);i4r=r(f9t,"TFGPTJForCausalLM"),f9t.forEach(t),d4r=r(sqe," (GPT-J model)"),sqe.forEach(t),c4r=i(Ce),$4=n(Ce,"LI",{});var lqe=s($4);O6e=n(lqe,"STRONG",{});var m9t=s(O6e);f4r=r(m9t,"openai-gpt"),m9t.forEach(t),m4r=r(lqe," \u2014 "),nJ=n(lqe,"A",{href:!0});var g9t=s(nJ);g4r=r(g9t,"TFOpenAIGPTLMHeadModel"),g9t.forEach(t),h4r=r(lqe," (OpenAI GPT model)"),lqe.forEach(t),p4r=i(Ce),k4=n(Ce,"LI",{});var iqe=s(k4);V6e=n(iqe,"STRONG",{});var h9t=s(V6e);_4r=r(h9t,"opt"),h9t.forEach(t),u4r=r(iqe," \u2014 "),sJ=n(iqe,"A",{href:!0});var p9t=s(sJ);b4r=r(p9t,"TFOPTForCausalLM"),p9t.forEach(t),v4r=r(iqe," (OPT model)"),iqe.forEach(t),F4r=i(Ce),S4=n(Ce,"LI",{});var dqe=s(S4);X6e=n(dqe,"STRONG",{});var _9t=s(X6e);T4r=r(_9t,"rembert"),_9t.forEach(t),M4r=r(dqe," \u2014 "),lJ=n(dqe,"A",{href:!0});var u9t=s(lJ);E4r=r(u9t,"TFRemBertForCausalLM"),u9t.forEach(t),C4r=r(dqe," (RemBERT model)"),dqe.forEach(t),w4r=i(Ce),R4=n(Ce,"LI",{});var cqe=s(R4);z6e=n(cqe,"STRONG",{});var b9t=s(z6e);A4r=r(b9t,"roberta"),b9t.forEach(t),L4r=r(cqe," \u2014 "),iJ=n(cqe,"A",{href:!0});var v9t=s(iJ);y4r=r(v9t,"TFRobertaForCausalLM"),v9t.forEach(t),x4r=r(cqe," (RoBERTa model)"),cqe.forEach(t),$4r=i(Ce),P4=n(Ce,"LI",{});var fqe=s(P4);Q6e=n(fqe,"STRONG",{});var F9t=s(Q6e);k4r=r(F9t,"roformer"),F9t.forEach(t),S4r=r(fqe," \u2014 "),dJ=n(fqe,"A",{href:!0});var T9t=s(dJ);R4r=r(T9t,"TFRoFormerForCausalLM"),T9t.forEach(t),P4r=r(fqe," (RoFormer model)"),fqe.forEach(t),B4r=i(Ce),B4=n(Ce,"LI",{});var mqe=s(B4);W6e=n(mqe,"STRONG",{});var M9t=s(W6e);I4r=r(M9t,"transfo-xl"),M9t.forEach(t),N4r=r(mqe," \u2014 "),cJ=n(mqe,"A",{href:!0});var E9t=s(cJ);q4r=r(E9t,"TFTransfoXLLMHeadModel"),E9t.forEach(t),j4r=r(mqe," (Transformer-XL model)"),mqe.forEach(t),D4r=i(Ce),I4=n(Ce,"LI",{});var gqe=s(I4);H6e=n(gqe,"STRONG",{});var C9t=s(H6e);G4r=r(C9t,"xlm"),C9t.forEach(t),O4r=r(gqe," \u2014 "),fJ=n(gqe,"A",{href:!0});var w9t=s(fJ);V4r=r(w9t,"TFXLMWithLMHeadModel"),w9t.forEach(t),X4r=r(gqe," (XLM model)"),gqe.forEach(t),z4r=i(Ce),N4=n(Ce,"LI",{});var hqe=s(N4);U6e=n(hqe,"STRONG",{});var A9t=s(U6e);Q4r=r(A9t,"xlnet"),A9t.forEach(t),W4r=r(hqe," \u2014 "),mJ=n(hqe,"A",{href:!0});var L9t=s(mJ);H4r=r(L9t,"TFXLNetLMHeadModel"),L9t.forEach(t),U4r=r(hqe," (XLNet model)"),hqe.forEach(t),Ce.forEach(t),J4r=i($l),T(q4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),XVe=i(f),fc=n(f,"H2",{class:!0});var Kze=s(fc);j4=n(Kze,"A",{id:!0,class:!0,href:!0});var y9t=s(j4);J6e=n(y9t,"SPAN",{});var x9t=s(J6e);T(G9.$$.fragment,x9t),x9t.forEach(t),y9t.forEach(t),Y4r=i(Kze),Y6e=n(Kze,"SPAN",{});var $9t=s(Y6e);K4r=r($9t,"TFAutoModelForImageClassification"),$9t.forEach(t),Kze.forEach(t),zVe=i(f),ar=n(f,"DIV",{class:!0});var kl=s(ar);T(O9.$$.fragment,kl),Z4r=i(kl),mc=n(kl,"P",{});var Qre=s(mc);eEr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gJ=n(Qre,"A",{href:!0});var k9t=s(gJ);oEr=r(k9t,"from_pretrained()"),k9t.forEach(t),rEr=r(Qre," class method or the "),hJ=n(Qre,"A",{href:!0});var S9t=s(hJ);tEr=r(S9t,"from_config()"),S9t.forEach(t),aEr=r(Qre,` class
method.`),Qre.forEach(t),nEr=i(kl),V9=n(kl,"P",{});var Zze=s(V9);sEr=r(Zze,"This class cannot be instantiated directly using "),K6e=n(Zze,"CODE",{});var R9t=s(K6e);lEr=r(R9t,"__init__()"),R9t.forEach(t),iEr=r(Zze," (throws an error)."),Zze.forEach(t),dEr=i(kl),Rt=n(kl,"DIV",{class:!0});var VA=s(Rt);T(X9.$$.fragment,VA),cEr=i(VA),Z6e=n(VA,"P",{});var P9t=s(Z6e);fEr=r(P9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P9t.forEach(t),mEr=i(VA),gc=n(VA,"P",{});var Wre=s(gc);gEr=r(Wre,`Note:
Loading a model from its configuration file does `),eTe=n(Wre,"STRONG",{});var B9t=s(eTe);hEr=r(B9t,"not"),B9t.forEach(t),pEr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(Wre,"A",{href:!0});var I9t=s(pJ);_Er=r(I9t,"from_pretrained()"),I9t.forEach(t),uEr=r(Wre," to load the model weights."),Wre.forEach(t),bEr=i(VA),T(D4.$$.fragment,VA),VA.forEach(t),vEr=i(kl),Sr=n(kl,"DIV",{class:!0});var Sl=s(Sr);T(z9.$$.fragment,Sl),FEr=i(Sl),oTe=n(Sl,"P",{});var N9t=s(oTe);TEr=r(N9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N9t.forEach(t),MEr=i(Sl),dn=n(Sl,"P",{});var XA=s(dn);EEr=r(XA,"The model class to instantiate is selected based on the "),rTe=n(XA,"CODE",{});var q9t=s(rTe);CEr=r(q9t,"model_type"),q9t.forEach(t),wEr=r(XA,` property of the config object (either
passed as an argument or loaded from `),tTe=n(XA,"CODE",{});var j9t=s(tTe);AEr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),LEr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(XA,"CODE",{});var D9t=s(aTe);yEr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),xEr=r(XA,":"),XA.forEach(t),$Er=i(Sl),cn=n(Sl,"UL",{});var zA=s(cn);G4=n(zA,"LI",{});var pqe=s(G4);nTe=n(pqe,"STRONG",{});var G9t=s(nTe);kEr=r(G9t,"convnext"),G9t.forEach(t),SEr=r(pqe," \u2014 "),_J=n(pqe,"A",{href:!0});var O9t=s(_J);REr=r(O9t,"TFConvNextForImageClassification"),O9t.forEach(t),PEr=r(pqe," (ConvNeXT model)"),pqe.forEach(t),BEr=i(zA),O4=n(zA,"LI",{});var _qe=s(O4);sTe=n(_qe,"STRONG",{});var V9t=s(sTe);IEr=r(V9t,"data2vec-vision"),V9t.forEach(t),NEr=r(_qe," \u2014 "),uJ=n(_qe,"A",{href:!0});var X9t=s(uJ);qEr=r(X9t,"TFData2VecVisionForImageClassification"),X9t.forEach(t),jEr=r(_qe," (Data2VecVision model)"),_qe.forEach(t),DEr=i(zA),V4=n(zA,"LI",{});var uqe=s(V4);lTe=n(uqe,"STRONG",{});var z9t=s(lTe);GEr=r(z9t,"swin"),z9t.forEach(t),OEr=r(uqe," \u2014 "),bJ=n(uqe,"A",{href:!0});var Q9t=s(bJ);VEr=r(Q9t,"TFSwinForImageClassification"),Q9t.forEach(t),XEr=r(uqe," (Swin Transformer model)"),uqe.forEach(t),zEr=i(zA),X4=n(zA,"LI",{});var bqe=s(X4);iTe=n(bqe,"STRONG",{});var W9t=s(iTe);QEr=r(W9t,"vit"),W9t.forEach(t),WEr=r(bqe," \u2014 "),vJ=n(bqe,"A",{href:!0});var H9t=s(vJ);HEr=r(H9t,"TFViTForImageClassification"),H9t.forEach(t),UEr=r(bqe," (ViT model)"),bqe.forEach(t),zA.forEach(t),JEr=i(Sl),T(z4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),QVe=i(f),hc=n(f,"H2",{class:!0});var eQe=s(hc);Q4=n(eQe,"A",{id:!0,class:!0,href:!0});var U9t=s(Q4);dTe=n(U9t,"SPAN",{});var J9t=s(dTe);T(Q9.$$.fragment,J9t),J9t.forEach(t),U9t.forEach(t),YEr=i(eQe),cTe=n(eQe,"SPAN",{});var Y9t=s(cTe);KEr=r(Y9t,"TFAutoModelForMaskedLM"),Y9t.forEach(t),eQe.forEach(t),WVe=i(f),nr=n(f,"DIV",{class:!0});var Rl=s(nr);T(W9.$$.fragment,Rl),ZEr=i(Rl),pc=n(Rl,"P",{});var Hre=s(pc);eCr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=n(Hre,"A",{href:!0});var K9t=s(FJ);oCr=r(K9t,"from_pretrained()"),K9t.forEach(t),rCr=r(Hre," class method or the "),TJ=n(Hre,"A",{href:!0});var Z9t=s(TJ);tCr=r(Z9t,"from_config()"),Z9t.forEach(t),aCr=r(Hre,` class
method.`),Hre.forEach(t),nCr=i(Rl),H9=n(Rl,"P",{});var oQe=s(H9);sCr=r(oQe,"This class cannot be instantiated directly using "),fTe=n(oQe,"CODE",{});var ext=s(fTe);lCr=r(ext,"__init__()"),ext.forEach(t),iCr=r(oQe," (throws an error)."),oQe.forEach(t),dCr=i(Rl),Pt=n(Rl,"DIV",{class:!0});var QA=s(Pt);T(U9.$$.fragment,QA),cCr=i(QA),mTe=n(QA,"P",{});var oxt=s(mTe);fCr=r(oxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oxt.forEach(t),mCr=i(QA),_c=n(QA,"P",{});var Ure=s(_c);gCr=r(Ure,`Note:
Loading a model from its configuration file does `),gTe=n(Ure,"STRONG",{});var rxt=s(gTe);hCr=r(rxt,"not"),rxt.forEach(t),pCr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Ure,"A",{href:!0});var txt=s(MJ);_Cr=r(txt,"from_pretrained()"),txt.forEach(t),uCr=r(Ure," to load the model weights."),Ure.forEach(t),bCr=i(QA),T(W4.$$.fragment,QA),QA.forEach(t),vCr=i(Rl),Rr=n(Rl,"DIV",{class:!0});var Pl=s(Rr);T(J9.$$.fragment,Pl),FCr=i(Pl),hTe=n(Pl,"P",{});var axt=s(hTe);TCr=r(axt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),axt.forEach(t),MCr=i(Pl),fn=n(Pl,"P",{});var WA=s(fn);ECr=r(WA,"The model class to instantiate is selected based on the "),pTe=n(WA,"CODE",{});var nxt=s(pTe);CCr=r(nxt,"model_type"),nxt.forEach(t),wCr=r(WA,` property of the config object (either
passed as an argument or loaded from `),_Te=n(WA,"CODE",{});var sxt=s(_Te);ACr=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),LCr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(WA,"CODE",{});var lxt=s(uTe);yCr=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),xCr=r(WA,":"),WA.forEach(t),$Cr=i(Pl),ie=n(Pl,"UL",{});var fe=s(ie);H4=n(fe,"LI",{});var vqe=s(H4);bTe=n(vqe,"STRONG",{});var ixt=s(bTe);kCr=r(ixt,"albert"),ixt.forEach(t),SCr=r(vqe," \u2014 "),EJ=n(vqe,"A",{href:!0});var dxt=s(EJ);RCr=r(dxt,"TFAlbertForMaskedLM"),dxt.forEach(t),PCr=r(vqe," (ALBERT model)"),vqe.forEach(t),BCr=i(fe),U4=n(fe,"LI",{});var Fqe=s(U4);vTe=n(Fqe,"STRONG",{});var cxt=s(vTe);ICr=r(cxt,"bert"),cxt.forEach(t),NCr=r(Fqe," \u2014 "),CJ=n(Fqe,"A",{href:!0});var fxt=s(CJ);qCr=r(fxt,"TFBertForMaskedLM"),fxt.forEach(t),jCr=r(Fqe," (BERT model)"),Fqe.forEach(t),DCr=i(fe),J4=n(fe,"LI",{});var Tqe=s(J4);FTe=n(Tqe,"STRONG",{});var mxt=s(FTe);GCr=r(mxt,"camembert"),mxt.forEach(t),OCr=r(Tqe," \u2014 "),wJ=n(Tqe,"A",{href:!0});var gxt=s(wJ);VCr=r(gxt,"TFCamembertForMaskedLM"),gxt.forEach(t),XCr=r(Tqe," (CamemBERT model)"),Tqe.forEach(t),zCr=i(fe),Y4=n(fe,"LI",{});var Mqe=s(Y4);TTe=n(Mqe,"STRONG",{});var hxt=s(TTe);QCr=r(hxt,"convbert"),hxt.forEach(t),WCr=r(Mqe," \u2014 "),AJ=n(Mqe,"A",{href:!0});var pxt=s(AJ);HCr=r(pxt,"TFConvBertForMaskedLM"),pxt.forEach(t),UCr=r(Mqe," (ConvBERT model)"),Mqe.forEach(t),JCr=i(fe),K4=n(fe,"LI",{});var Eqe=s(K4);MTe=n(Eqe,"STRONG",{});var _xt=s(MTe);YCr=r(_xt,"deberta"),_xt.forEach(t),KCr=r(Eqe," \u2014 "),LJ=n(Eqe,"A",{href:!0});var uxt=s(LJ);ZCr=r(uxt,"TFDebertaForMaskedLM"),uxt.forEach(t),e5r=r(Eqe," (DeBERTa model)"),Eqe.forEach(t),o5r=i(fe),Z4=n(fe,"LI",{});var Cqe=s(Z4);ETe=n(Cqe,"STRONG",{});var bxt=s(ETe);r5r=r(bxt,"deberta-v2"),bxt.forEach(t),t5r=r(Cqe," \u2014 "),yJ=n(Cqe,"A",{href:!0});var vxt=s(yJ);a5r=r(vxt,"TFDebertaV2ForMaskedLM"),vxt.forEach(t),n5r=r(Cqe," (DeBERTa-v2 model)"),Cqe.forEach(t),s5r=i(fe),eE=n(fe,"LI",{});var wqe=s(eE);CTe=n(wqe,"STRONG",{});var Fxt=s(CTe);l5r=r(Fxt,"distilbert"),Fxt.forEach(t),i5r=r(wqe," \u2014 "),xJ=n(wqe,"A",{href:!0});var Txt=s(xJ);d5r=r(Txt,"TFDistilBertForMaskedLM"),Txt.forEach(t),c5r=r(wqe," (DistilBERT model)"),wqe.forEach(t),f5r=i(fe),oE=n(fe,"LI",{});var Aqe=s(oE);wTe=n(Aqe,"STRONG",{});var Mxt=s(wTe);m5r=r(Mxt,"electra"),Mxt.forEach(t),g5r=r(Aqe," \u2014 "),$J=n(Aqe,"A",{href:!0});var Ext=s($J);h5r=r(Ext,"TFElectraForMaskedLM"),Ext.forEach(t),p5r=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),_5r=i(fe),rE=n(fe,"LI",{});var Lqe=s(rE);ATe=n(Lqe,"STRONG",{});var Cxt=s(ATe);u5r=r(Cxt,"flaubert"),Cxt.forEach(t),b5r=r(Lqe," \u2014 "),kJ=n(Lqe,"A",{href:!0});var wxt=s(kJ);v5r=r(wxt,"TFFlaubertWithLMHeadModel"),wxt.forEach(t),F5r=r(Lqe," (FlauBERT model)"),Lqe.forEach(t),T5r=i(fe),tE=n(fe,"LI",{});var yqe=s(tE);LTe=n(yqe,"STRONG",{});var Axt=s(LTe);M5r=r(Axt,"funnel"),Axt.forEach(t),E5r=r(yqe," \u2014 "),SJ=n(yqe,"A",{href:!0});var Lxt=s(SJ);C5r=r(Lxt,"TFFunnelForMaskedLM"),Lxt.forEach(t),w5r=r(yqe," (Funnel Transformer model)"),yqe.forEach(t),A5r=i(fe),aE=n(fe,"LI",{});var xqe=s(aE);yTe=n(xqe,"STRONG",{});var yxt=s(yTe);L5r=r(yxt,"layoutlm"),yxt.forEach(t),y5r=r(xqe," \u2014 "),RJ=n(xqe,"A",{href:!0});var xxt=s(RJ);x5r=r(xxt,"TFLayoutLMForMaskedLM"),xxt.forEach(t),$5r=r(xqe," (LayoutLM model)"),xqe.forEach(t),k5r=i(fe),nE=n(fe,"LI",{});var $qe=s(nE);xTe=n($qe,"STRONG",{});var $xt=s(xTe);S5r=r($xt,"longformer"),$xt.forEach(t),R5r=r($qe," \u2014 "),PJ=n($qe,"A",{href:!0});var kxt=s(PJ);P5r=r(kxt,"TFLongformerForMaskedLM"),kxt.forEach(t),B5r=r($qe," (Longformer model)"),$qe.forEach(t),I5r=i(fe),sE=n(fe,"LI",{});var kqe=s(sE);$Te=n(kqe,"STRONG",{});var Sxt=s($Te);N5r=r(Sxt,"mobilebert"),Sxt.forEach(t),q5r=r(kqe," \u2014 "),BJ=n(kqe,"A",{href:!0});var Rxt=s(BJ);j5r=r(Rxt,"TFMobileBertForMaskedLM"),Rxt.forEach(t),D5r=r(kqe," (MobileBERT model)"),kqe.forEach(t),G5r=i(fe),lE=n(fe,"LI",{});var Sqe=s(lE);kTe=n(Sqe,"STRONG",{});var Pxt=s(kTe);O5r=r(Pxt,"mpnet"),Pxt.forEach(t),V5r=r(Sqe," \u2014 "),IJ=n(Sqe,"A",{href:!0});var Bxt=s(IJ);X5r=r(Bxt,"TFMPNetForMaskedLM"),Bxt.forEach(t),z5r=r(Sqe," (MPNet model)"),Sqe.forEach(t),Q5r=i(fe),iE=n(fe,"LI",{});var Rqe=s(iE);STe=n(Rqe,"STRONG",{});var Ixt=s(STe);W5r=r(Ixt,"rembert"),Ixt.forEach(t),H5r=r(Rqe," \u2014 "),NJ=n(Rqe,"A",{href:!0});var Nxt=s(NJ);U5r=r(Nxt,"TFRemBertForMaskedLM"),Nxt.forEach(t),J5r=r(Rqe," (RemBERT model)"),Rqe.forEach(t),Y5r=i(fe),dE=n(fe,"LI",{});var Pqe=s(dE);RTe=n(Pqe,"STRONG",{});var qxt=s(RTe);K5r=r(qxt,"roberta"),qxt.forEach(t),Z5r=r(Pqe," \u2014 "),qJ=n(Pqe,"A",{href:!0});var jxt=s(qJ);e3r=r(jxt,"TFRobertaForMaskedLM"),jxt.forEach(t),o3r=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),r3r=i(fe),cE=n(fe,"LI",{});var Bqe=s(cE);PTe=n(Bqe,"STRONG",{});var Dxt=s(PTe);t3r=r(Dxt,"roformer"),Dxt.forEach(t),a3r=r(Bqe," \u2014 "),jJ=n(Bqe,"A",{href:!0});var Gxt=s(jJ);n3r=r(Gxt,"TFRoFormerForMaskedLM"),Gxt.forEach(t),s3r=r(Bqe," (RoFormer model)"),Bqe.forEach(t),l3r=i(fe),fE=n(fe,"LI",{});var Iqe=s(fE);BTe=n(Iqe,"STRONG",{});var Oxt=s(BTe);i3r=r(Oxt,"tapas"),Oxt.forEach(t),d3r=r(Iqe," \u2014 "),DJ=n(Iqe,"A",{href:!0});var Vxt=s(DJ);c3r=r(Vxt,"TFTapasForMaskedLM"),Vxt.forEach(t),f3r=r(Iqe," (TAPAS model)"),Iqe.forEach(t),m3r=i(fe),mE=n(fe,"LI",{});var Nqe=s(mE);ITe=n(Nqe,"STRONG",{});var Xxt=s(ITe);g3r=r(Xxt,"xlm"),Xxt.forEach(t),h3r=r(Nqe," \u2014 "),GJ=n(Nqe,"A",{href:!0});var zxt=s(GJ);p3r=r(zxt,"TFXLMWithLMHeadModel"),zxt.forEach(t),_3r=r(Nqe," (XLM model)"),Nqe.forEach(t),u3r=i(fe),gE=n(fe,"LI",{});var qqe=s(gE);NTe=n(qqe,"STRONG",{});var Qxt=s(NTe);b3r=r(Qxt,"xlm-roberta"),Qxt.forEach(t),v3r=r(qqe," \u2014 "),OJ=n(qqe,"A",{href:!0});var Wxt=s(OJ);F3r=r(Wxt,"TFXLMRobertaForMaskedLM"),Wxt.forEach(t),T3r=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),fe.forEach(t),M3r=i(Pl),T(hE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),HVe=i(f),uc=n(f,"H2",{class:!0});var rQe=s(uc);pE=n(rQe,"A",{id:!0,class:!0,href:!0});var Hxt=s(pE);qTe=n(Hxt,"SPAN",{});var Uxt=s(qTe);T(Y9.$$.fragment,Uxt),Uxt.forEach(t),Hxt.forEach(t),E3r=i(rQe),jTe=n(rQe,"SPAN",{});var Jxt=s(jTe);C3r=r(Jxt,"TFAutoModelForSeq2SeqLM"),Jxt.forEach(t),rQe.forEach(t),UVe=i(f),sr=n(f,"DIV",{class:!0});var Bl=s(sr);T(K9.$$.fragment,Bl),w3r=i(Bl),bc=n(Bl,"P",{});var Jre=s(bc);A3r=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=n(Jre,"A",{href:!0});var Yxt=s(VJ);L3r=r(Yxt,"from_pretrained()"),Yxt.forEach(t),y3r=r(Jre," class method or the "),XJ=n(Jre,"A",{href:!0});var Kxt=s(XJ);x3r=r(Kxt,"from_config()"),Kxt.forEach(t),$3r=r(Jre,` class
method.`),Jre.forEach(t),k3r=i(Bl),Z9=n(Bl,"P",{});var tQe=s(Z9);S3r=r(tQe,"This class cannot be instantiated directly using "),DTe=n(tQe,"CODE",{});var Zxt=s(DTe);R3r=r(Zxt,"__init__()"),Zxt.forEach(t),P3r=r(tQe," (throws an error)."),tQe.forEach(t),B3r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var HA=s(Bt);T(ex.$$.fragment,HA),I3r=i(HA),GTe=n(HA,"P",{});var e$t=s(GTe);N3r=r(e$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e$t.forEach(t),q3r=i(HA),vc=n(HA,"P",{});var Yre=s(vc);j3r=r(Yre,`Note:
Loading a model from its configuration file does `),OTe=n(Yre,"STRONG",{});var o$t=s(OTe);D3r=r(o$t,"not"),o$t.forEach(t),G3r=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Yre,"A",{href:!0});var r$t=s(zJ);O3r=r(r$t,"from_pretrained()"),r$t.forEach(t),V3r=r(Yre," to load the model weights."),Yre.forEach(t),X3r=i(HA),T(_E.$$.fragment,HA),HA.forEach(t),z3r=i(Bl),Pr=n(Bl,"DIV",{class:!0});var Il=s(Pr);T(ox.$$.fragment,Il),Q3r=i(Il),VTe=n(Il,"P",{});var t$t=s(VTe);W3r=r(t$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t$t.forEach(t),H3r=i(Il),mn=n(Il,"P",{});var UA=s(mn);U3r=r(UA,"The model class to instantiate is selected based on the "),XTe=n(UA,"CODE",{});var a$t=s(XTe);J3r=r(a$t,"model_type"),a$t.forEach(t),Y3r=r(UA,` property of the config object (either
passed as an argument or loaded from `),zTe=n(UA,"CODE",{});var n$t=s(zTe);K3r=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),Z3r=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(UA,"CODE",{});var s$t=s(QTe);e0r=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),o0r=r(UA,":"),UA.forEach(t),r0r=i(Il),ye=n(Il,"UL",{});var Ie=s(ye);uE=n(Ie,"LI",{});var jqe=s(uE);WTe=n(jqe,"STRONG",{});var l$t=s(WTe);t0r=r(l$t,"bart"),l$t.forEach(t),a0r=r(jqe," \u2014 "),QJ=n(jqe,"A",{href:!0});var i$t=s(QJ);n0r=r(i$t,"TFBartForConditionalGeneration"),i$t.forEach(t),s0r=r(jqe," (BART model)"),jqe.forEach(t),l0r=i(Ie),bE=n(Ie,"LI",{});var Dqe=s(bE);HTe=n(Dqe,"STRONG",{});var d$t=s(HTe);i0r=r(d$t,"blenderbot"),d$t.forEach(t),d0r=r(Dqe," \u2014 "),WJ=n(Dqe,"A",{href:!0});var c$t=s(WJ);c0r=r(c$t,"TFBlenderbotForConditionalGeneration"),c$t.forEach(t),f0r=r(Dqe," (Blenderbot model)"),Dqe.forEach(t),m0r=i(Ie),vE=n(Ie,"LI",{});var Gqe=s(vE);UTe=n(Gqe,"STRONG",{});var f$t=s(UTe);g0r=r(f$t,"blenderbot-small"),f$t.forEach(t),h0r=r(Gqe," \u2014 "),HJ=n(Gqe,"A",{href:!0});var m$t=s(HJ);p0r=r(m$t,"TFBlenderbotSmallForConditionalGeneration"),m$t.forEach(t),_0r=r(Gqe," (BlenderbotSmall model)"),Gqe.forEach(t),u0r=i(Ie),FE=n(Ie,"LI",{});var Oqe=s(FE);JTe=n(Oqe,"STRONG",{});var g$t=s(JTe);b0r=r(g$t,"encoder-decoder"),g$t.forEach(t),v0r=r(Oqe," \u2014 "),UJ=n(Oqe,"A",{href:!0});var h$t=s(UJ);F0r=r(h$t,"TFEncoderDecoderModel"),h$t.forEach(t),T0r=r(Oqe," (Encoder decoder model)"),Oqe.forEach(t),M0r=i(Ie),TE=n(Ie,"LI",{});var Vqe=s(TE);YTe=n(Vqe,"STRONG",{});var p$t=s(YTe);E0r=r(p$t,"led"),p$t.forEach(t),C0r=r(Vqe," \u2014 "),JJ=n(Vqe,"A",{href:!0});var _$t=s(JJ);w0r=r(_$t,"TFLEDForConditionalGeneration"),_$t.forEach(t),A0r=r(Vqe," (LED model)"),Vqe.forEach(t),L0r=i(Ie),ME=n(Ie,"LI",{});var Xqe=s(ME);KTe=n(Xqe,"STRONG",{});var u$t=s(KTe);y0r=r(u$t,"marian"),u$t.forEach(t),x0r=r(Xqe," \u2014 "),YJ=n(Xqe,"A",{href:!0});var b$t=s(YJ);$0r=r(b$t,"TFMarianMTModel"),b$t.forEach(t),k0r=r(Xqe," (Marian model)"),Xqe.forEach(t),S0r=i(Ie),EE=n(Ie,"LI",{});var zqe=s(EE);ZTe=n(zqe,"STRONG",{});var v$t=s(ZTe);R0r=r(v$t,"mbart"),v$t.forEach(t),P0r=r(zqe," \u2014 "),KJ=n(zqe,"A",{href:!0});var F$t=s(KJ);B0r=r(F$t,"TFMBartForConditionalGeneration"),F$t.forEach(t),I0r=r(zqe," (mBART model)"),zqe.forEach(t),N0r=i(Ie),CE=n(Ie,"LI",{});var Qqe=s(CE);eMe=n(Qqe,"STRONG",{});var T$t=s(eMe);q0r=r(T$t,"mt5"),T$t.forEach(t),j0r=r(Qqe," \u2014 "),ZJ=n(Qqe,"A",{href:!0});var M$t=s(ZJ);D0r=r(M$t,"TFMT5ForConditionalGeneration"),M$t.forEach(t),G0r=r(Qqe," (MT5 model)"),Qqe.forEach(t),O0r=i(Ie),wE=n(Ie,"LI",{});var Wqe=s(wE);oMe=n(Wqe,"STRONG",{});var E$t=s(oMe);V0r=r(E$t,"pegasus"),E$t.forEach(t),X0r=r(Wqe," \u2014 "),eY=n(Wqe,"A",{href:!0});var C$t=s(eY);z0r=r(C$t,"TFPegasusForConditionalGeneration"),C$t.forEach(t),Q0r=r(Wqe," (Pegasus model)"),Wqe.forEach(t),W0r=i(Ie),AE=n(Ie,"LI",{});var Hqe=s(AE);rMe=n(Hqe,"STRONG",{});var w$t=s(rMe);H0r=r(w$t,"t5"),w$t.forEach(t),U0r=r(Hqe," \u2014 "),oY=n(Hqe,"A",{href:!0});var A$t=s(oY);J0r=r(A$t,"TFT5ForConditionalGeneration"),A$t.forEach(t),Y0r=r(Hqe," (T5 model)"),Hqe.forEach(t),Ie.forEach(t),K0r=i(Il),T(LE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),JVe=i(f),Fc=n(f,"H2",{class:!0});var aQe=s(Fc);yE=n(aQe,"A",{id:!0,class:!0,href:!0});var L$t=s(yE);tMe=n(L$t,"SPAN",{});var y$t=s(tMe);T(rx.$$.fragment,y$t),y$t.forEach(t),L$t.forEach(t),Z0r=i(aQe),aMe=n(aQe,"SPAN",{});var x$t=s(aMe);ewr=r(x$t,"TFAutoModelForSequenceClassification"),x$t.forEach(t),aQe.forEach(t),YVe=i(f),lr=n(f,"DIV",{class:!0});var Nl=s(lr);T(tx.$$.fragment,Nl),owr=i(Nl),Tc=n(Nl,"P",{});var Kre=s(Tc);rwr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=n(Kre,"A",{href:!0});var $$t=s(rY);twr=r($$t,"from_pretrained()"),$$t.forEach(t),awr=r(Kre," class method or the "),tY=n(Kre,"A",{href:!0});var k$t=s(tY);nwr=r(k$t,"from_config()"),k$t.forEach(t),swr=r(Kre,` class
method.`),Kre.forEach(t),lwr=i(Nl),ax=n(Nl,"P",{});var nQe=s(ax);iwr=r(nQe,"This class cannot be instantiated directly using "),nMe=n(nQe,"CODE",{});var S$t=s(nMe);dwr=r(S$t,"__init__()"),S$t.forEach(t),cwr=r(nQe," (throws an error)."),nQe.forEach(t),fwr=i(Nl),It=n(Nl,"DIV",{class:!0});var JA=s(It);T(nx.$$.fragment,JA),mwr=i(JA),sMe=n(JA,"P",{});var R$t=s(sMe);gwr=r(R$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R$t.forEach(t),hwr=i(JA),Mc=n(JA,"P",{});var Zre=s(Mc);pwr=r(Zre,`Note:
Loading a model from its configuration file does `),lMe=n(Zre,"STRONG",{});var P$t=s(lMe);_wr=r(P$t,"not"),P$t.forEach(t),uwr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(Zre,"A",{href:!0});var B$t=s(aY);bwr=r(B$t,"from_pretrained()"),B$t.forEach(t),vwr=r(Zre," to load the model weights."),Zre.forEach(t),Fwr=i(JA),T(xE.$$.fragment,JA),JA.forEach(t),Twr=i(Nl),Br=n(Nl,"DIV",{class:!0});var ql=s(Br);T(sx.$$.fragment,ql),Mwr=i(ql),iMe=n(ql,"P",{});var I$t=s(iMe);Ewr=r(I$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I$t.forEach(t),Cwr=i(ql),gn=n(ql,"P",{});var YA=s(gn);wwr=r(YA,"The model class to instantiate is selected based on the "),dMe=n(YA,"CODE",{});var N$t=s(dMe);Awr=r(N$t,"model_type"),N$t.forEach(t),Lwr=r(YA,` property of the config object (either
passed as an argument or loaded from `),cMe=n(YA,"CODE",{});var q$t=s(cMe);ywr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),xwr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(YA,"CODE",{});var j$t=s(fMe);$wr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),kwr=r(YA,":"),YA.forEach(t),Swr=i(ql),te=n(ql,"UL",{});var ne=s(te);$E=n(ne,"LI",{});var Uqe=s($E);mMe=n(Uqe,"STRONG",{});var D$t=s(mMe);Rwr=r(D$t,"albert"),D$t.forEach(t),Pwr=r(Uqe," \u2014 "),nY=n(Uqe,"A",{href:!0});var G$t=s(nY);Bwr=r(G$t,"TFAlbertForSequenceClassification"),G$t.forEach(t),Iwr=r(Uqe," (ALBERT model)"),Uqe.forEach(t),Nwr=i(ne),kE=n(ne,"LI",{});var Jqe=s(kE);gMe=n(Jqe,"STRONG",{});var O$t=s(gMe);qwr=r(O$t,"bert"),O$t.forEach(t),jwr=r(Jqe," \u2014 "),sY=n(Jqe,"A",{href:!0});var V$t=s(sY);Dwr=r(V$t,"TFBertForSequenceClassification"),V$t.forEach(t),Gwr=r(Jqe," (BERT model)"),Jqe.forEach(t),Owr=i(ne),SE=n(ne,"LI",{});var Yqe=s(SE);hMe=n(Yqe,"STRONG",{});var X$t=s(hMe);Vwr=r(X$t,"camembert"),X$t.forEach(t),Xwr=r(Yqe," \u2014 "),lY=n(Yqe,"A",{href:!0});var z$t=s(lY);zwr=r(z$t,"TFCamembertForSequenceClassification"),z$t.forEach(t),Qwr=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),Wwr=i(ne),RE=n(ne,"LI",{});var Kqe=s(RE);pMe=n(Kqe,"STRONG",{});var Q$t=s(pMe);Hwr=r(Q$t,"convbert"),Q$t.forEach(t),Uwr=r(Kqe," \u2014 "),iY=n(Kqe,"A",{href:!0});var W$t=s(iY);Jwr=r(W$t,"TFConvBertForSequenceClassification"),W$t.forEach(t),Ywr=r(Kqe," (ConvBERT model)"),Kqe.forEach(t),Kwr=i(ne),PE=n(ne,"LI",{});var Zqe=s(PE);_Me=n(Zqe,"STRONG",{});var H$t=s(_Me);Zwr=r(H$t,"ctrl"),H$t.forEach(t),eAr=r(Zqe," \u2014 "),dY=n(Zqe,"A",{href:!0});var U$t=s(dY);oAr=r(U$t,"TFCTRLForSequenceClassification"),U$t.forEach(t),rAr=r(Zqe," (CTRL model)"),Zqe.forEach(t),tAr=i(ne),BE=n(ne,"LI",{});var eje=s(BE);uMe=n(eje,"STRONG",{});var J$t=s(uMe);aAr=r(J$t,"deberta"),J$t.forEach(t),nAr=r(eje," \u2014 "),cY=n(eje,"A",{href:!0});var Y$t=s(cY);sAr=r(Y$t,"TFDebertaForSequenceClassification"),Y$t.forEach(t),lAr=r(eje," (DeBERTa model)"),eje.forEach(t),iAr=i(ne),IE=n(ne,"LI",{});var oje=s(IE);bMe=n(oje,"STRONG",{});var K$t=s(bMe);dAr=r(K$t,"deberta-v2"),K$t.forEach(t),cAr=r(oje," \u2014 "),fY=n(oje,"A",{href:!0});var Z$t=s(fY);fAr=r(Z$t,"TFDebertaV2ForSequenceClassification"),Z$t.forEach(t),mAr=r(oje," (DeBERTa-v2 model)"),oje.forEach(t),gAr=i(ne),NE=n(ne,"LI",{});var rje=s(NE);vMe=n(rje,"STRONG",{});var ekt=s(vMe);hAr=r(ekt,"distilbert"),ekt.forEach(t),pAr=r(rje," \u2014 "),mY=n(rje,"A",{href:!0});var okt=s(mY);_Ar=r(okt,"TFDistilBertForSequenceClassification"),okt.forEach(t),uAr=r(rje," (DistilBERT model)"),rje.forEach(t),bAr=i(ne),qE=n(ne,"LI",{});var tje=s(qE);FMe=n(tje,"STRONG",{});var rkt=s(FMe);vAr=r(rkt,"electra"),rkt.forEach(t),FAr=r(tje," \u2014 "),gY=n(tje,"A",{href:!0});var tkt=s(gY);TAr=r(tkt,"TFElectraForSequenceClassification"),tkt.forEach(t),MAr=r(tje," (ELECTRA model)"),tje.forEach(t),EAr=i(ne),jE=n(ne,"LI",{});var aje=s(jE);TMe=n(aje,"STRONG",{});var akt=s(TMe);CAr=r(akt,"flaubert"),akt.forEach(t),wAr=r(aje," \u2014 "),hY=n(aje,"A",{href:!0});var nkt=s(hY);AAr=r(nkt,"TFFlaubertForSequenceClassification"),nkt.forEach(t),LAr=r(aje," (FlauBERT model)"),aje.forEach(t),yAr=i(ne),DE=n(ne,"LI",{});var nje=s(DE);MMe=n(nje,"STRONG",{});var skt=s(MMe);xAr=r(skt,"funnel"),skt.forEach(t),$Ar=r(nje," \u2014 "),pY=n(nje,"A",{href:!0});var lkt=s(pY);kAr=r(lkt,"TFFunnelForSequenceClassification"),lkt.forEach(t),SAr=r(nje," (Funnel Transformer model)"),nje.forEach(t),RAr=i(ne),GE=n(ne,"LI",{});var sje=s(GE);EMe=n(sje,"STRONG",{});var ikt=s(EMe);PAr=r(ikt,"gpt2"),ikt.forEach(t),BAr=r(sje," \u2014 "),_Y=n(sje,"A",{href:!0});var dkt=s(_Y);IAr=r(dkt,"TFGPT2ForSequenceClassification"),dkt.forEach(t),NAr=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),qAr=i(ne),OE=n(ne,"LI",{});var lje=s(OE);CMe=n(lje,"STRONG",{});var ckt=s(CMe);jAr=r(ckt,"gptj"),ckt.forEach(t),DAr=r(lje," \u2014 "),uY=n(lje,"A",{href:!0});var fkt=s(uY);GAr=r(fkt,"TFGPTJForSequenceClassification"),fkt.forEach(t),OAr=r(lje," (GPT-J model)"),lje.forEach(t),VAr=i(ne),VE=n(ne,"LI",{});var ije=s(VE);wMe=n(ije,"STRONG",{});var mkt=s(wMe);XAr=r(mkt,"layoutlm"),mkt.forEach(t),zAr=r(ije," \u2014 "),bY=n(ije,"A",{href:!0});var gkt=s(bY);QAr=r(gkt,"TFLayoutLMForSequenceClassification"),gkt.forEach(t),WAr=r(ije," (LayoutLM model)"),ije.forEach(t),HAr=i(ne),XE=n(ne,"LI",{});var dje=s(XE);AMe=n(dje,"STRONG",{});var hkt=s(AMe);UAr=r(hkt,"longformer"),hkt.forEach(t),JAr=r(dje," \u2014 "),vY=n(dje,"A",{href:!0});var pkt=s(vY);YAr=r(pkt,"TFLongformerForSequenceClassification"),pkt.forEach(t),KAr=r(dje," (Longformer model)"),dje.forEach(t),ZAr=i(ne),zE=n(ne,"LI",{});var cje=s(zE);LMe=n(cje,"STRONG",{});var _kt=s(LMe);eLr=r(_kt,"mobilebert"),_kt.forEach(t),oLr=r(cje," \u2014 "),FY=n(cje,"A",{href:!0});var ukt=s(FY);rLr=r(ukt,"TFMobileBertForSequenceClassification"),ukt.forEach(t),tLr=r(cje," (MobileBERT model)"),cje.forEach(t),aLr=i(ne),QE=n(ne,"LI",{});var fje=s(QE);yMe=n(fje,"STRONG",{});var bkt=s(yMe);nLr=r(bkt,"mpnet"),bkt.forEach(t),sLr=r(fje," \u2014 "),TY=n(fje,"A",{href:!0});var vkt=s(TY);lLr=r(vkt,"TFMPNetForSequenceClassification"),vkt.forEach(t),iLr=r(fje," (MPNet model)"),fje.forEach(t),dLr=i(ne),WE=n(ne,"LI",{});var mje=s(WE);xMe=n(mje,"STRONG",{});var Fkt=s(xMe);cLr=r(Fkt,"openai-gpt"),Fkt.forEach(t),fLr=r(mje," \u2014 "),MY=n(mje,"A",{href:!0});var Tkt=s(MY);mLr=r(Tkt,"TFOpenAIGPTForSequenceClassification"),Tkt.forEach(t),gLr=r(mje," (OpenAI GPT model)"),mje.forEach(t),hLr=i(ne),HE=n(ne,"LI",{});var gje=s(HE);$Me=n(gje,"STRONG",{});var Mkt=s($Me);pLr=r(Mkt,"rembert"),Mkt.forEach(t),_Lr=r(gje," \u2014 "),EY=n(gje,"A",{href:!0});var Ekt=s(EY);uLr=r(Ekt,"TFRemBertForSequenceClassification"),Ekt.forEach(t),bLr=r(gje," (RemBERT model)"),gje.forEach(t),vLr=i(ne),UE=n(ne,"LI",{});var hje=s(UE);kMe=n(hje,"STRONG",{});var Ckt=s(kMe);FLr=r(Ckt,"roberta"),Ckt.forEach(t),TLr=r(hje," \u2014 "),CY=n(hje,"A",{href:!0});var wkt=s(CY);MLr=r(wkt,"TFRobertaForSequenceClassification"),wkt.forEach(t),ELr=r(hje," (RoBERTa model)"),hje.forEach(t),CLr=i(ne),JE=n(ne,"LI",{});var pje=s(JE);SMe=n(pje,"STRONG",{});var Akt=s(SMe);wLr=r(Akt,"roformer"),Akt.forEach(t),ALr=r(pje," \u2014 "),wY=n(pje,"A",{href:!0});var Lkt=s(wY);LLr=r(Lkt,"TFRoFormerForSequenceClassification"),Lkt.forEach(t),yLr=r(pje," (RoFormer model)"),pje.forEach(t),xLr=i(ne),YE=n(ne,"LI",{});var _je=s(YE);RMe=n(_je,"STRONG",{});var ykt=s(RMe);$Lr=r(ykt,"tapas"),ykt.forEach(t),kLr=r(_je," \u2014 "),AY=n(_je,"A",{href:!0});var xkt=s(AY);SLr=r(xkt,"TFTapasForSequenceClassification"),xkt.forEach(t),RLr=r(_je," (TAPAS model)"),_je.forEach(t),PLr=i(ne),KE=n(ne,"LI",{});var uje=s(KE);PMe=n(uje,"STRONG",{});var $kt=s(PMe);BLr=r($kt,"transfo-xl"),$kt.forEach(t),ILr=r(uje," \u2014 "),LY=n(uje,"A",{href:!0});var kkt=s(LY);NLr=r(kkt,"TFTransfoXLForSequenceClassification"),kkt.forEach(t),qLr=r(uje," (Transformer-XL model)"),uje.forEach(t),jLr=i(ne),ZE=n(ne,"LI",{});var bje=s(ZE);BMe=n(bje,"STRONG",{});var Skt=s(BMe);DLr=r(Skt,"xlm"),Skt.forEach(t),GLr=r(bje," \u2014 "),yY=n(bje,"A",{href:!0});var Rkt=s(yY);OLr=r(Rkt,"TFXLMForSequenceClassification"),Rkt.forEach(t),VLr=r(bje," (XLM model)"),bje.forEach(t),XLr=i(ne),eC=n(ne,"LI",{});var vje=s(eC);IMe=n(vje,"STRONG",{});var Pkt=s(IMe);zLr=r(Pkt,"xlm-roberta"),Pkt.forEach(t),QLr=r(vje," \u2014 "),xY=n(vje,"A",{href:!0});var Bkt=s(xY);WLr=r(Bkt,"TFXLMRobertaForSequenceClassification"),Bkt.forEach(t),HLr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),ULr=i(ne),oC=n(ne,"LI",{});var Fje=s(oC);NMe=n(Fje,"STRONG",{});var Ikt=s(NMe);JLr=r(Ikt,"xlnet"),Ikt.forEach(t),YLr=r(Fje," \u2014 "),$Y=n(Fje,"A",{href:!0});var Nkt=s($Y);KLr=r(Nkt,"TFXLNetForSequenceClassification"),Nkt.forEach(t),ZLr=r(Fje," (XLNet model)"),Fje.forEach(t),ne.forEach(t),eyr=i(ql),T(rC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),KVe=i(f),Ec=n(f,"H2",{class:!0});var sQe=s(Ec);tC=n(sQe,"A",{id:!0,class:!0,href:!0});var qkt=s(tC);qMe=n(qkt,"SPAN",{});var jkt=s(qMe);T(lx.$$.fragment,jkt),jkt.forEach(t),qkt.forEach(t),oyr=i(sQe),jMe=n(sQe,"SPAN",{});var Dkt=s(jMe);ryr=r(Dkt,"TFAutoModelForMultipleChoice"),Dkt.forEach(t),sQe.forEach(t),ZVe=i(f),ir=n(f,"DIV",{class:!0});var jl=s(ir);T(ix.$$.fragment,jl),tyr=i(jl),Cc=n(jl,"P",{});var ete=s(Cc);ayr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=n(ete,"A",{href:!0});var Gkt=s(kY);nyr=r(Gkt,"from_pretrained()"),Gkt.forEach(t),syr=r(ete," class method or the "),SY=n(ete,"A",{href:!0});var Okt=s(SY);lyr=r(Okt,"from_config()"),Okt.forEach(t),iyr=r(ete,` class
method.`),ete.forEach(t),dyr=i(jl),dx=n(jl,"P",{});var lQe=s(dx);cyr=r(lQe,"This class cannot be instantiated directly using "),DMe=n(lQe,"CODE",{});var Vkt=s(DMe);fyr=r(Vkt,"__init__()"),Vkt.forEach(t),myr=r(lQe," (throws an error)."),lQe.forEach(t),gyr=i(jl),Nt=n(jl,"DIV",{class:!0});var KA=s(Nt);T(cx.$$.fragment,KA),hyr=i(KA),GMe=n(KA,"P",{});var Xkt=s(GMe);pyr=r(Xkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xkt.forEach(t),_yr=i(KA),wc=n(KA,"P",{});var ote=s(wc);uyr=r(ote,`Note:
Loading a model from its configuration file does `),OMe=n(ote,"STRONG",{});var zkt=s(OMe);byr=r(zkt,"not"),zkt.forEach(t),vyr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(ote,"A",{href:!0});var Qkt=s(RY);Fyr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),Tyr=r(ote," to load the model weights."),ote.forEach(t),Myr=i(KA),T(aC.$$.fragment,KA),KA.forEach(t),Eyr=i(jl),Ir=n(jl,"DIV",{class:!0});var Dl=s(Ir);T(fx.$$.fragment,Dl),Cyr=i(Dl),VMe=n(Dl,"P",{});var Wkt=s(VMe);wyr=r(Wkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wkt.forEach(t),Ayr=i(Dl),hn=n(Dl,"P",{});var ZA=s(hn);Lyr=r(ZA,"The model class to instantiate is selected based on the "),XMe=n(ZA,"CODE",{});var Hkt=s(XMe);yyr=r(Hkt,"model_type"),Hkt.forEach(t),xyr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),zMe=n(ZA,"CODE",{});var Ukt=s(zMe);$yr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),kyr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(ZA,"CODE",{});var Jkt=s(QMe);Syr=r(Jkt,"pretrained_model_name_or_path"),Jkt.forEach(t),Ryr=r(ZA,":"),ZA.forEach(t),Pyr=i(Dl),_e=n(Dl,"UL",{});var ve=s(_e);nC=n(ve,"LI",{});var Tje=s(nC);WMe=n(Tje,"STRONG",{});var Ykt=s(WMe);Byr=r(Ykt,"albert"),Ykt.forEach(t),Iyr=r(Tje," \u2014 "),PY=n(Tje,"A",{href:!0});var Kkt=s(PY);Nyr=r(Kkt,"TFAlbertForMultipleChoice"),Kkt.forEach(t),qyr=r(Tje," (ALBERT model)"),Tje.forEach(t),jyr=i(ve),sC=n(ve,"LI",{});var Mje=s(sC);HMe=n(Mje,"STRONG",{});var Zkt=s(HMe);Dyr=r(Zkt,"bert"),Zkt.forEach(t),Gyr=r(Mje," \u2014 "),BY=n(Mje,"A",{href:!0});var eSt=s(BY);Oyr=r(eSt,"TFBertForMultipleChoice"),eSt.forEach(t),Vyr=r(Mje," (BERT model)"),Mje.forEach(t),Xyr=i(ve),lC=n(ve,"LI",{});var Eje=s(lC);UMe=n(Eje,"STRONG",{});var oSt=s(UMe);zyr=r(oSt,"camembert"),oSt.forEach(t),Qyr=r(Eje," \u2014 "),IY=n(Eje,"A",{href:!0});var rSt=s(IY);Wyr=r(rSt,"TFCamembertForMultipleChoice"),rSt.forEach(t),Hyr=r(Eje," (CamemBERT model)"),Eje.forEach(t),Uyr=i(ve),iC=n(ve,"LI",{});var Cje=s(iC);JMe=n(Cje,"STRONG",{});var tSt=s(JMe);Jyr=r(tSt,"convbert"),tSt.forEach(t),Yyr=r(Cje," \u2014 "),NY=n(Cje,"A",{href:!0});var aSt=s(NY);Kyr=r(aSt,"TFConvBertForMultipleChoice"),aSt.forEach(t),Zyr=r(Cje," (ConvBERT model)"),Cje.forEach(t),e8r=i(ve),dC=n(ve,"LI",{});var wje=s(dC);YMe=n(wje,"STRONG",{});var nSt=s(YMe);o8r=r(nSt,"distilbert"),nSt.forEach(t),r8r=r(wje," \u2014 "),qY=n(wje,"A",{href:!0});var sSt=s(qY);t8r=r(sSt,"TFDistilBertForMultipleChoice"),sSt.forEach(t),a8r=r(wje," (DistilBERT model)"),wje.forEach(t),n8r=i(ve),cC=n(ve,"LI",{});var Aje=s(cC);KMe=n(Aje,"STRONG",{});var lSt=s(KMe);s8r=r(lSt,"electra"),lSt.forEach(t),l8r=r(Aje," \u2014 "),jY=n(Aje,"A",{href:!0});var iSt=s(jY);i8r=r(iSt,"TFElectraForMultipleChoice"),iSt.forEach(t),d8r=r(Aje," (ELECTRA model)"),Aje.forEach(t),c8r=i(ve),fC=n(ve,"LI",{});var Lje=s(fC);ZMe=n(Lje,"STRONG",{});var dSt=s(ZMe);f8r=r(dSt,"flaubert"),dSt.forEach(t),m8r=r(Lje," \u2014 "),DY=n(Lje,"A",{href:!0});var cSt=s(DY);g8r=r(cSt,"TFFlaubertForMultipleChoice"),cSt.forEach(t),h8r=r(Lje," (FlauBERT model)"),Lje.forEach(t),p8r=i(ve),mC=n(ve,"LI",{});var yje=s(mC);e4e=n(yje,"STRONG",{});var fSt=s(e4e);_8r=r(fSt,"funnel"),fSt.forEach(t),u8r=r(yje," \u2014 "),GY=n(yje,"A",{href:!0});var mSt=s(GY);b8r=r(mSt,"TFFunnelForMultipleChoice"),mSt.forEach(t),v8r=r(yje," (Funnel Transformer model)"),yje.forEach(t),F8r=i(ve),gC=n(ve,"LI",{});var xje=s(gC);o4e=n(xje,"STRONG",{});var gSt=s(o4e);T8r=r(gSt,"longformer"),gSt.forEach(t),M8r=r(xje," \u2014 "),OY=n(xje,"A",{href:!0});var hSt=s(OY);E8r=r(hSt,"TFLongformerForMultipleChoice"),hSt.forEach(t),C8r=r(xje," (Longformer model)"),xje.forEach(t),w8r=i(ve),hC=n(ve,"LI",{});var $je=s(hC);r4e=n($je,"STRONG",{});var pSt=s(r4e);A8r=r(pSt,"mobilebert"),pSt.forEach(t),L8r=r($je," \u2014 "),VY=n($je,"A",{href:!0});var _St=s(VY);y8r=r(_St,"TFMobileBertForMultipleChoice"),_St.forEach(t),x8r=r($je," (MobileBERT model)"),$je.forEach(t),$8r=i(ve),pC=n(ve,"LI",{});var kje=s(pC);t4e=n(kje,"STRONG",{});var uSt=s(t4e);k8r=r(uSt,"mpnet"),uSt.forEach(t),S8r=r(kje," \u2014 "),XY=n(kje,"A",{href:!0});var bSt=s(XY);R8r=r(bSt,"TFMPNetForMultipleChoice"),bSt.forEach(t),P8r=r(kje," (MPNet model)"),kje.forEach(t),B8r=i(ve),_C=n(ve,"LI",{});var Sje=s(_C);a4e=n(Sje,"STRONG",{});var vSt=s(a4e);I8r=r(vSt,"rembert"),vSt.forEach(t),N8r=r(Sje," \u2014 "),zY=n(Sje,"A",{href:!0});var FSt=s(zY);q8r=r(FSt,"TFRemBertForMultipleChoice"),FSt.forEach(t),j8r=r(Sje," (RemBERT model)"),Sje.forEach(t),D8r=i(ve),uC=n(ve,"LI",{});var Rje=s(uC);n4e=n(Rje,"STRONG",{});var TSt=s(n4e);G8r=r(TSt,"roberta"),TSt.forEach(t),O8r=r(Rje," \u2014 "),QY=n(Rje,"A",{href:!0});var MSt=s(QY);V8r=r(MSt,"TFRobertaForMultipleChoice"),MSt.forEach(t),X8r=r(Rje," (RoBERTa model)"),Rje.forEach(t),z8r=i(ve),bC=n(ve,"LI",{});var Pje=s(bC);s4e=n(Pje,"STRONG",{});var ESt=s(s4e);Q8r=r(ESt,"roformer"),ESt.forEach(t),W8r=r(Pje," \u2014 "),WY=n(Pje,"A",{href:!0});var CSt=s(WY);H8r=r(CSt,"TFRoFormerForMultipleChoice"),CSt.forEach(t),U8r=r(Pje," (RoFormer model)"),Pje.forEach(t),J8r=i(ve),vC=n(ve,"LI",{});var Bje=s(vC);l4e=n(Bje,"STRONG",{});var wSt=s(l4e);Y8r=r(wSt,"xlm"),wSt.forEach(t),K8r=r(Bje," \u2014 "),HY=n(Bje,"A",{href:!0});var ASt=s(HY);Z8r=r(ASt,"TFXLMForMultipleChoice"),ASt.forEach(t),e9r=r(Bje," (XLM model)"),Bje.forEach(t),o9r=i(ve),FC=n(ve,"LI",{});var Ije=s(FC);i4e=n(Ije,"STRONG",{});var LSt=s(i4e);r9r=r(LSt,"xlm-roberta"),LSt.forEach(t),t9r=r(Ije," \u2014 "),UY=n(Ije,"A",{href:!0});var ySt=s(UY);a9r=r(ySt,"TFXLMRobertaForMultipleChoice"),ySt.forEach(t),n9r=r(Ije," (XLM-RoBERTa model)"),Ije.forEach(t),s9r=i(ve),TC=n(ve,"LI",{});var Nje=s(TC);d4e=n(Nje,"STRONG",{});var xSt=s(d4e);l9r=r(xSt,"xlnet"),xSt.forEach(t),i9r=r(Nje," \u2014 "),JY=n(Nje,"A",{href:!0});var $St=s(JY);d9r=r($St,"TFXLNetForMultipleChoice"),$St.forEach(t),c9r=r(Nje," (XLNet model)"),Nje.forEach(t),ve.forEach(t),f9r=i(Dl),T(MC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),eXe=i(f),Ac=n(f,"H2",{class:!0});var iQe=s(Ac);EC=n(iQe,"A",{id:!0,class:!0,href:!0});var kSt=s(EC);c4e=n(kSt,"SPAN",{});var SSt=s(c4e);T(mx.$$.fragment,SSt),SSt.forEach(t),kSt.forEach(t),m9r=i(iQe),f4e=n(iQe,"SPAN",{});var RSt=s(f4e);g9r=r(RSt,"TFAutoModelForNextSentencePrediction"),RSt.forEach(t),iQe.forEach(t),oXe=i(f),dr=n(f,"DIV",{class:!0});var Gl=s(dr);T(gx.$$.fragment,Gl),h9r=i(Gl),Lc=n(Gl,"P",{});var rte=s(Lc);p9r=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=n(rte,"A",{href:!0});var PSt=s(YY);_9r=r(PSt,"from_pretrained()"),PSt.forEach(t),u9r=r(rte," class method or the "),KY=n(rte,"A",{href:!0});var BSt=s(KY);b9r=r(BSt,"from_config()"),BSt.forEach(t),v9r=r(rte,` class
method.`),rte.forEach(t),F9r=i(Gl),hx=n(Gl,"P",{});var dQe=s(hx);T9r=r(dQe,"This class cannot be instantiated directly using "),m4e=n(dQe,"CODE",{});var ISt=s(m4e);M9r=r(ISt,"__init__()"),ISt.forEach(t),E9r=r(dQe," (throws an error)."),dQe.forEach(t),C9r=i(Gl),qt=n(Gl,"DIV",{class:!0});var eL=s(qt);T(px.$$.fragment,eL),w9r=i(eL),g4e=n(eL,"P",{});var NSt=s(g4e);A9r=r(NSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NSt.forEach(t),L9r=i(eL),yc=n(eL,"P",{});var tte=s(yc);y9r=r(tte,`Note:
Loading a model from its configuration file does `),h4e=n(tte,"STRONG",{});var qSt=s(h4e);x9r=r(qSt,"not"),qSt.forEach(t),$9r=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(tte,"A",{href:!0});var jSt=s(ZY);k9r=r(jSt,"from_pretrained()"),jSt.forEach(t),S9r=r(tte," to load the model weights."),tte.forEach(t),R9r=i(eL),T(CC.$$.fragment,eL),eL.forEach(t),P9r=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(_x.$$.fragment,Ol),B9r=i(Ol),p4e=n(Ol,"P",{});var DSt=s(p4e);I9r=r(DSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DSt.forEach(t),N9r=i(Ol),pn=n(Ol,"P",{});var oL=s(pn);q9r=r(oL,"The model class to instantiate is selected based on the "),_4e=n(oL,"CODE",{});var GSt=s(_4e);j9r=r(GSt,"model_type"),GSt.forEach(t),D9r=r(oL,` property of the config object (either
passed as an argument or loaded from `),u4e=n(oL,"CODE",{});var OSt=s(u4e);G9r=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),O9r=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(oL,"CODE",{});var VSt=s(b4e);V9r=r(VSt,"pretrained_model_name_or_path"),VSt.forEach(t),X9r=r(oL,":"),oL.forEach(t),z9r=i(Ol),ux=n(Ol,"UL",{});var cQe=s(ux);wC=n(cQe,"LI",{});var qje=s(wC);v4e=n(qje,"STRONG",{});var XSt=s(v4e);Q9r=r(XSt,"bert"),XSt.forEach(t),W9r=r(qje," \u2014 "),eK=n(qje,"A",{href:!0});var zSt=s(eK);H9r=r(zSt,"TFBertForNextSentencePrediction"),zSt.forEach(t),U9r=r(qje," (BERT model)"),qje.forEach(t),J9r=i(cQe),AC=n(cQe,"LI",{});var jje=s(AC);F4e=n(jje,"STRONG",{});var QSt=s(F4e);Y9r=r(QSt,"mobilebert"),QSt.forEach(t),K9r=r(jje," \u2014 "),oK=n(jje,"A",{href:!0});var WSt=s(oK);Z9r=r(WSt,"TFMobileBertForNextSentencePrediction"),WSt.forEach(t),exr=r(jje," (MobileBERT model)"),jje.forEach(t),cQe.forEach(t),oxr=i(Ol),T(LC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),rXe=i(f),xc=n(f,"H2",{class:!0});var fQe=s(xc);yC=n(fQe,"A",{id:!0,class:!0,href:!0});var HSt=s(yC);T4e=n(HSt,"SPAN",{});var USt=s(T4e);T(bx.$$.fragment,USt),USt.forEach(t),HSt.forEach(t),rxr=i(fQe),M4e=n(fQe,"SPAN",{});var JSt=s(M4e);txr=r(JSt,"TFAutoModelForTableQuestionAnswering"),JSt.forEach(t),fQe.forEach(t),tXe=i(f),cr=n(f,"DIV",{class:!0});var Vl=s(cr);T(vx.$$.fragment,Vl),axr=i(Vl),$c=n(Vl,"P",{});var ate=s($c);nxr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rK=n(ate,"A",{href:!0});var YSt=s(rK);sxr=r(YSt,"from_pretrained()"),YSt.forEach(t),lxr=r(ate," class method or the "),tK=n(ate,"A",{href:!0});var KSt=s(tK);ixr=r(KSt,"from_config()"),KSt.forEach(t),dxr=r(ate,` class
method.`),ate.forEach(t),cxr=i(Vl),Fx=n(Vl,"P",{});var mQe=s(Fx);fxr=r(mQe,"This class cannot be instantiated directly using "),E4e=n(mQe,"CODE",{});var ZSt=s(E4e);mxr=r(ZSt,"__init__()"),ZSt.forEach(t),gxr=r(mQe," (throws an error)."),mQe.forEach(t),hxr=i(Vl),jt=n(Vl,"DIV",{class:!0});var rL=s(jt);T(Tx.$$.fragment,rL),pxr=i(rL),C4e=n(rL,"P",{});var eRt=s(C4e);_xr=r(eRt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eRt.forEach(t),uxr=i(rL),kc=n(rL,"P",{});var nte=s(kc);bxr=r(nte,`Note:
Loading a model from its configuration file does `),w4e=n(nte,"STRONG",{});var oRt=s(w4e);vxr=r(oRt,"not"),oRt.forEach(t),Fxr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(nte,"A",{href:!0});var rRt=s(aK);Txr=r(rRt,"from_pretrained()"),rRt.forEach(t),Mxr=r(nte," to load the model weights."),nte.forEach(t),Exr=i(rL),T(xC.$$.fragment,rL),rL.forEach(t),Cxr=i(Vl),qr=n(Vl,"DIV",{class:!0});var Xl=s(qr);T(Mx.$$.fragment,Xl),wxr=i(Xl),A4e=n(Xl,"P",{});var tRt=s(A4e);Axr=r(tRt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tRt.forEach(t),Lxr=i(Xl),_n=n(Xl,"P",{});var tL=s(_n);yxr=r(tL,"The model class to instantiate is selected based on the "),L4e=n(tL,"CODE",{});var aRt=s(L4e);xxr=r(aRt,"model_type"),aRt.forEach(t),$xr=r(tL,` property of the config object (either
passed as an argument or loaded from `),y4e=n(tL,"CODE",{});var nRt=s(y4e);kxr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),Sxr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(tL,"CODE",{});var sRt=s(x4e);Rxr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),Pxr=r(tL,":"),tL.forEach(t),Bxr=i(Xl),$4e=n(Xl,"UL",{});var lRt=s($4e);$C=n(lRt,"LI",{});var Dje=s($C);k4e=n(Dje,"STRONG",{});var iRt=s(k4e);Ixr=r(iRt,"tapas"),iRt.forEach(t),Nxr=r(Dje," \u2014 "),nK=n(Dje,"A",{href:!0});var dRt=s(nK);qxr=r(dRt,"TFTapasForQuestionAnswering"),dRt.forEach(t),jxr=r(Dje," (TAPAS model)"),Dje.forEach(t),lRt.forEach(t),Dxr=i(Xl),T(kC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),aXe=i(f),Sc=n(f,"H2",{class:!0});var gQe=s(Sc);SC=n(gQe,"A",{id:!0,class:!0,href:!0});var cRt=s(SC);S4e=n(cRt,"SPAN",{});var fRt=s(S4e);T(Ex.$$.fragment,fRt),fRt.forEach(t),cRt.forEach(t),Gxr=i(gQe),R4e=n(gQe,"SPAN",{});var mRt=s(R4e);Oxr=r(mRt,"TFAutoModelForTokenClassification"),mRt.forEach(t),gQe.forEach(t),nXe=i(f),fr=n(f,"DIV",{class:!0});var zl=s(fr);T(Cx.$$.fragment,zl),Vxr=i(zl),Rc=n(zl,"P",{});var ste=s(Rc);Xxr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sK=n(ste,"A",{href:!0});var gRt=s(sK);zxr=r(gRt,"from_pretrained()"),gRt.forEach(t),Qxr=r(ste," class method or the "),lK=n(ste,"A",{href:!0});var hRt=s(lK);Wxr=r(hRt,"from_config()"),hRt.forEach(t),Hxr=r(ste,` class
method.`),ste.forEach(t),Uxr=i(zl),wx=n(zl,"P",{});var hQe=s(wx);Jxr=r(hQe,"This class cannot be instantiated directly using "),P4e=n(hQe,"CODE",{});var pRt=s(P4e);Yxr=r(pRt,"__init__()"),pRt.forEach(t),Kxr=r(hQe," (throws an error)."),hQe.forEach(t),Zxr=i(zl),Dt=n(zl,"DIV",{class:!0});var aL=s(Dt);T(Ax.$$.fragment,aL),e$r=i(aL),B4e=n(aL,"P",{});var _Rt=s(B4e);o$r=r(_Rt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Rt.forEach(t),r$r=i(aL),Pc=n(aL,"P",{});var lte=s(Pc);t$r=r(lte,`Note:
Loading a model from its configuration file does `),I4e=n(lte,"STRONG",{});var uRt=s(I4e);a$r=r(uRt,"not"),uRt.forEach(t),n$r=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(lte,"A",{href:!0});var bRt=s(iK);s$r=r(bRt,"from_pretrained()"),bRt.forEach(t),l$r=r(lte," to load the model weights."),lte.forEach(t),i$r=i(aL),T(RC.$$.fragment,aL),aL.forEach(t),d$r=i(zl),jr=n(zl,"DIV",{class:!0});var Ql=s(jr);T(Lx.$$.fragment,Ql),c$r=i(Ql),N4e=n(Ql,"P",{});var vRt=s(N4e);f$r=r(vRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vRt.forEach(t),m$r=i(Ql),un=n(Ql,"P",{});var nL=s(un);g$r=r(nL,"The model class to instantiate is selected based on the "),q4e=n(nL,"CODE",{});var FRt=s(q4e);h$r=r(FRt,"model_type"),FRt.forEach(t),p$r=r(nL,` property of the config object (either
passed as an argument or loaded from `),j4e=n(nL,"CODE",{});var TRt=s(j4e);_$r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),u$r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(nL,"CODE",{});var MRt=s(D4e);b$r=r(MRt,"pretrained_model_name_or_path"),MRt.forEach(t),v$r=r(nL,":"),nL.forEach(t),F$r=i(Ql),de=n(Ql,"UL",{});var me=s(de);PC=n(me,"LI",{});var Gje=s(PC);G4e=n(Gje,"STRONG",{});var ERt=s(G4e);T$r=r(ERt,"albert"),ERt.forEach(t),M$r=r(Gje," \u2014 "),dK=n(Gje,"A",{href:!0});var CRt=s(dK);E$r=r(CRt,"TFAlbertForTokenClassification"),CRt.forEach(t),C$r=r(Gje," (ALBERT model)"),Gje.forEach(t),w$r=i(me),BC=n(me,"LI",{});var Oje=s(BC);O4e=n(Oje,"STRONG",{});var wRt=s(O4e);A$r=r(wRt,"bert"),wRt.forEach(t),L$r=r(Oje," \u2014 "),cK=n(Oje,"A",{href:!0});var ARt=s(cK);y$r=r(ARt,"TFBertForTokenClassification"),ARt.forEach(t),x$r=r(Oje," (BERT model)"),Oje.forEach(t),$$r=i(me),IC=n(me,"LI",{});var Vje=s(IC);V4e=n(Vje,"STRONG",{});var LRt=s(V4e);k$r=r(LRt,"camembert"),LRt.forEach(t),S$r=r(Vje," \u2014 "),fK=n(Vje,"A",{href:!0});var yRt=s(fK);R$r=r(yRt,"TFCamembertForTokenClassification"),yRt.forEach(t),P$r=r(Vje," (CamemBERT model)"),Vje.forEach(t),B$r=i(me),NC=n(me,"LI",{});var Xje=s(NC);X4e=n(Xje,"STRONG",{});var xRt=s(X4e);I$r=r(xRt,"convbert"),xRt.forEach(t),N$r=r(Xje," \u2014 "),mK=n(Xje,"A",{href:!0});var $Rt=s(mK);q$r=r($Rt,"TFConvBertForTokenClassification"),$Rt.forEach(t),j$r=r(Xje," (ConvBERT model)"),Xje.forEach(t),D$r=i(me),qC=n(me,"LI",{});var zje=s(qC);z4e=n(zje,"STRONG",{});var kRt=s(z4e);G$r=r(kRt,"deberta"),kRt.forEach(t),O$r=r(zje," \u2014 "),gK=n(zje,"A",{href:!0});var SRt=s(gK);V$r=r(SRt,"TFDebertaForTokenClassification"),SRt.forEach(t),X$r=r(zje," (DeBERTa model)"),zje.forEach(t),z$r=i(me),jC=n(me,"LI",{});var Qje=s(jC);Q4e=n(Qje,"STRONG",{});var RRt=s(Q4e);Q$r=r(RRt,"deberta-v2"),RRt.forEach(t),W$r=r(Qje," \u2014 "),hK=n(Qje,"A",{href:!0});var PRt=s(hK);H$r=r(PRt,"TFDebertaV2ForTokenClassification"),PRt.forEach(t),U$r=r(Qje," (DeBERTa-v2 model)"),Qje.forEach(t),J$r=i(me),DC=n(me,"LI",{});var Wje=s(DC);W4e=n(Wje,"STRONG",{});var BRt=s(W4e);Y$r=r(BRt,"distilbert"),BRt.forEach(t),K$r=r(Wje," \u2014 "),pK=n(Wje,"A",{href:!0});var IRt=s(pK);Z$r=r(IRt,"TFDistilBertForTokenClassification"),IRt.forEach(t),ekr=r(Wje," (DistilBERT model)"),Wje.forEach(t),okr=i(me),GC=n(me,"LI",{});var Hje=s(GC);H4e=n(Hje,"STRONG",{});var NRt=s(H4e);rkr=r(NRt,"electra"),NRt.forEach(t),tkr=r(Hje," \u2014 "),_K=n(Hje,"A",{href:!0});var qRt=s(_K);akr=r(qRt,"TFElectraForTokenClassification"),qRt.forEach(t),nkr=r(Hje," (ELECTRA model)"),Hje.forEach(t),skr=i(me),OC=n(me,"LI",{});var Uje=s(OC);U4e=n(Uje,"STRONG",{});var jRt=s(U4e);lkr=r(jRt,"flaubert"),jRt.forEach(t),ikr=r(Uje," \u2014 "),uK=n(Uje,"A",{href:!0});var DRt=s(uK);dkr=r(DRt,"TFFlaubertForTokenClassification"),DRt.forEach(t),ckr=r(Uje," (FlauBERT model)"),Uje.forEach(t),fkr=i(me),VC=n(me,"LI",{});var Jje=s(VC);J4e=n(Jje,"STRONG",{});var GRt=s(J4e);mkr=r(GRt,"funnel"),GRt.forEach(t),gkr=r(Jje," \u2014 "),bK=n(Jje,"A",{href:!0});var ORt=s(bK);hkr=r(ORt,"TFFunnelForTokenClassification"),ORt.forEach(t),pkr=r(Jje," (Funnel Transformer model)"),Jje.forEach(t),_kr=i(me),XC=n(me,"LI",{});var Yje=s(XC);Y4e=n(Yje,"STRONG",{});var VRt=s(Y4e);ukr=r(VRt,"layoutlm"),VRt.forEach(t),bkr=r(Yje," \u2014 "),vK=n(Yje,"A",{href:!0});var XRt=s(vK);vkr=r(XRt,"TFLayoutLMForTokenClassification"),XRt.forEach(t),Fkr=r(Yje," (LayoutLM model)"),Yje.forEach(t),Tkr=i(me),zC=n(me,"LI",{});var Kje=s(zC);K4e=n(Kje,"STRONG",{});var zRt=s(K4e);Mkr=r(zRt,"longformer"),zRt.forEach(t),Ekr=r(Kje," \u2014 "),FK=n(Kje,"A",{href:!0});var QRt=s(FK);Ckr=r(QRt,"TFLongformerForTokenClassification"),QRt.forEach(t),wkr=r(Kje," (Longformer model)"),Kje.forEach(t),Akr=i(me),QC=n(me,"LI",{});var Zje=s(QC);Z4e=n(Zje,"STRONG",{});var WRt=s(Z4e);Lkr=r(WRt,"mobilebert"),WRt.forEach(t),ykr=r(Zje," \u2014 "),TK=n(Zje,"A",{href:!0});var HRt=s(TK);xkr=r(HRt,"TFMobileBertForTokenClassification"),HRt.forEach(t),$kr=r(Zje," (MobileBERT model)"),Zje.forEach(t),kkr=i(me),WC=n(me,"LI",{});var eDe=s(WC);eEe=n(eDe,"STRONG",{});var URt=s(eEe);Skr=r(URt,"mpnet"),URt.forEach(t),Rkr=r(eDe," \u2014 "),MK=n(eDe,"A",{href:!0});var JRt=s(MK);Pkr=r(JRt,"TFMPNetForTokenClassification"),JRt.forEach(t),Bkr=r(eDe," (MPNet model)"),eDe.forEach(t),Ikr=i(me),HC=n(me,"LI",{});var oDe=s(HC);oEe=n(oDe,"STRONG",{});var YRt=s(oEe);Nkr=r(YRt,"rembert"),YRt.forEach(t),qkr=r(oDe," \u2014 "),EK=n(oDe,"A",{href:!0});var KRt=s(EK);jkr=r(KRt,"TFRemBertForTokenClassification"),KRt.forEach(t),Dkr=r(oDe," (RemBERT model)"),oDe.forEach(t),Gkr=i(me),UC=n(me,"LI",{});var rDe=s(UC);rEe=n(rDe,"STRONG",{});var ZRt=s(rEe);Okr=r(ZRt,"roberta"),ZRt.forEach(t),Vkr=r(rDe," \u2014 "),CK=n(rDe,"A",{href:!0});var ePt=s(CK);Xkr=r(ePt,"TFRobertaForTokenClassification"),ePt.forEach(t),zkr=r(rDe," (RoBERTa model)"),rDe.forEach(t),Qkr=i(me),JC=n(me,"LI",{});var tDe=s(JC);tEe=n(tDe,"STRONG",{});var oPt=s(tEe);Wkr=r(oPt,"roformer"),oPt.forEach(t),Hkr=r(tDe," \u2014 "),wK=n(tDe,"A",{href:!0});var rPt=s(wK);Ukr=r(rPt,"TFRoFormerForTokenClassification"),rPt.forEach(t),Jkr=r(tDe," (RoFormer model)"),tDe.forEach(t),Ykr=i(me),YC=n(me,"LI",{});var aDe=s(YC);aEe=n(aDe,"STRONG",{});var tPt=s(aEe);Kkr=r(tPt,"xlm"),tPt.forEach(t),Zkr=r(aDe," \u2014 "),AK=n(aDe,"A",{href:!0});var aPt=s(AK);eSr=r(aPt,"TFXLMForTokenClassification"),aPt.forEach(t),oSr=r(aDe," (XLM model)"),aDe.forEach(t),rSr=i(me),KC=n(me,"LI",{});var nDe=s(KC);nEe=n(nDe,"STRONG",{});var nPt=s(nEe);tSr=r(nPt,"xlm-roberta"),nPt.forEach(t),aSr=r(nDe," \u2014 "),LK=n(nDe,"A",{href:!0});var sPt=s(LK);nSr=r(sPt,"TFXLMRobertaForTokenClassification"),sPt.forEach(t),sSr=r(nDe," (XLM-RoBERTa model)"),nDe.forEach(t),lSr=i(me),ZC=n(me,"LI",{});var sDe=s(ZC);sEe=n(sDe,"STRONG",{});var lPt=s(sEe);iSr=r(lPt,"xlnet"),lPt.forEach(t),dSr=r(sDe," \u2014 "),yK=n(sDe,"A",{href:!0});var iPt=s(yK);cSr=r(iPt,"TFXLNetForTokenClassification"),iPt.forEach(t),fSr=r(sDe," (XLNet model)"),sDe.forEach(t),me.forEach(t),mSr=i(Ql),T(e5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),sXe=i(f),Bc=n(f,"H2",{class:!0});var pQe=s(Bc);o5=n(pQe,"A",{id:!0,class:!0,href:!0});var dPt=s(o5);lEe=n(dPt,"SPAN",{});var cPt=s(lEe);T(yx.$$.fragment,cPt),cPt.forEach(t),dPt.forEach(t),gSr=i(pQe),iEe=n(pQe,"SPAN",{});var fPt=s(iEe);hSr=r(fPt,"TFAutoModelForQuestionAnswering"),fPt.forEach(t),pQe.forEach(t),lXe=i(f),mr=n(f,"DIV",{class:!0});var Wl=s(mr);T(xx.$$.fragment,Wl),pSr=i(Wl),Ic=n(Wl,"P",{});var ite=s(Ic);_Sr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xK=n(ite,"A",{href:!0});var mPt=s(xK);uSr=r(mPt,"from_pretrained()"),mPt.forEach(t),bSr=r(ite," class method or the "),$K=n(ite,"A",{href:!0});var gPt=s($K);vSr=r(gPt,"from_config()"),gPt.forEach(t),FSr=r(ite,` class
method.`),ite.forEach(t),TSr=i(Wl),$x=n(Wl,"P",{});var _Qe=s($x);MSr=r(_Qe,"This class cannot be instantiated directly using "),dEe=n(_Qe,"CODE",{});var hPt=s(dEe);ESr=r(hPt,"__init__()"),hPt.forEach(t),CSr=r(_Qe," (throws an error)."),_Qe.forEach(t),wSr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var sL=s(Gt);T(kx.$$.fragment,sL),ASr=i(sL),cEe=n(sL,"P",{});var pPt=s(cEe);LSr=r(pPt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pPt.forEach(t),ySr=i(sL),Nc=n(sL,"P",{});var dte=s(Nc);xSr=r(dte,`Note:
Loading a model from its configuration file does `),fEe=n(dte,"STRONG",{});var _Pt=s(fEe);$Sr=r(_Pt,"not"),_Pt.forEach(t),kSr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(dte,"A",{href:!0});var uPt=s(kK);SSr=r(uPt,"from_pretrained()"),uPt.forEach(t),RSr=r(dte," to load the model weights."),dte.forEach(t),PSr=i(sL),T(r5.$$.fragment,sL),sL.forEach(t),BSr=i(Wl),Dr=n(Wl,"DIV",{class:!0});var Hl=s(Dr);T(Sx.$$.fragment,Hl),ISr=i(Hl),mEe=n(Hl,"P",{});var bPt=s(mEe);NSr=r(bPt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bPt.forEach(t),qSr=i(Hl),bn=n(Hl,"P",{});var lL=s(bn);jSr=r(lL,"The model class to instantiate is selected based on the "),gEe=n(lL,"CODE",{});var vPt=s(gEe);DSr=r(vPt,"model_type"),vPt.forEach(t),GSr=r(lL,` property of the config object (either
passed as an argument or loaded from `),hEe=n(lL,"CODE",{});var FPt=s(hEe);OSr=r(FPt,"pretrained_model_name_or_path"),FPt.forEach(t),VSr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(lL,"CODE",{});var TPt=s(pEe);XSr=r(TPt,"pretrained_model_name_or_path"),TPt.forEach(t),zSr=r(lL,":"),lL.forEach(t),QSr=i(Hl),ce=n(Hl,"UL",{});var ge=s(ce);t5=n(ge,"LI",{});var lDe=s(t5);_Ee=n(lDe,"STRONG",{});var MPt=s(_Ee);WSr=r(MPt,"albert"),MPt.forEach(t),HSr=r(lDe," \u2014 "),SK=n(lDe,"A",{href:!0});var EPt=s(SK);USr=r(EPt,"TFAlbertForQuestionAnswering"),EPt.forEach(t),JSr=r(lDe," (ALBERT model)"),lDe.forEach(t),YSr=i(ge),a5=n(ge,"LI",{});var iDe=s(a5);uEe=n(iDe,"STRONG",{});var CPt=s(uEe);KSr=r(CPt,"bert"),CPt.forEach(t),ZSr=r(iDe," \u2014 "),RK=n(iDe,"A",{href:!0});var wPt=s(RK);eRr=r(wPt,"TFBertForQuestionAnswering"),wPt.forEach(t),oRr=r(iDe," (BERT model)"),iDe.forEach(t),rRr=i(ge),n5=n(ge,"LI",{});var dDe=s(n5);bEe=n(dDe,"STRONG",{});var APt=s(bEe);tRr=r(APt,"camembert"),APt.forEach(t),aRr=r(dDe," \u2014 "),PK=n(dDe,"A",{href:!0});var LPt=s(PK);nRr=r(LPt,"TFCamembertForQuestionAnswering"),LPt.forEach(t),sRr=r(dDe," (CamemBERT model)"),dDe.forEach(t),lRr=i(ge),s5=n(ge,"LI",{});var cDe=s(s5);vEe=n(cDe,"STRONG",{});var yPt=s(vEe);iRr=r(yPt,"convbert"),yPt.forEach(t),dRr=r(cDe," \u2014 "),BK=n(cDe,"A",{href:!0});var xPt=s(BK);cRr=r(xPt,"TFConvBertForQuestionAnswering"),xPt.forEach(t),fRr=r(cDe," (ConvBERT model)"),cDe.forEach(t),mRr=i(ge),l5=n(ge,"LI",{});var fDe=s(l5);FEe=n(fDe,"STRONG",{});var $Pt=s(FEe);gRr=r($Pt,"deberta"),$Pt.forEach(t),hRr=r(fDe," \u2014 "),IK=n(fDe,"A",{href:!0});var kPt=s(IK);pRr=r(kPt,"TFDebertaForQuestionAnswering"),kPt.forEach(t),_Rr=r(fDe," (DeBERTa model)"),fDe.forEach(t),uRr=i(ge),i5=n(ge,"LI",{});var mDe=s(i5);TEe=n(mDe,"STRONG",{});var SPt=s(TEe);bRr=r(SPt,"deberta-v2"),SPt.forEach(t),vRr=r(mDe," \u2014 "),NK=n(mDe,"A",{href:!0});var RPt=s(NK);FRr=r(RPt,"TFDebertaV2ForQuestionAnswering"),RPt.forEach(t),TRr=r(mDe," (DeBERTa-v2 model)"),mDe.forEach(t),MRr=i(ge),d5=n(ge,"LI",{});var gDe=s(d5);MEe=n(gDe,"STRONG",{});var PPt=s(MEe);ERr=r(PPt,"distilbert"),PPt.forEach(t),CRr=r(gDe," \u2014 "),qK=n(gDe,"A",{href:!0});var BPt=s(qK);wRr=r(BPt,"TFDistilBertForQuestionAnswering"),BPt.forEach(t),ARr=r(gDe," (DistilBERT model)"),gDe.forEach(t),LRr=i(ge),c5=n(ge,"LI",{});var hDe=s(c5);EEe=n(hDe,"STRONG",{});var IPt=s(EEe);yRr=r(IPt,"electra"),IPt.forEach(t),xRr=r(hDe," \u2014 "),jK=n(hDe,"A",{href:!0});var NPt=s(jK);$Rr=r(NPt,"TFElectraForQuestionAnswering"),NPt.forEach(t),kRr=r(hDe," (ELECTRA model)"),hDe.forEach(t),SRr=i(ge),f5=n(ge,"LI",{});var pDe=s(f5);CEe=n(pDe,"STRONG",{});var qPt=s(CEe);RRr=r(qPt,"flaubert"),qPt.forEach(t),PRr=r(pDe," \u2014 "),DK=n(pDe,"A",{href:!0});var jPt=s(DK);BRr=r(jPt,"TFFlaubertForQuestionAnsweringSimple"),jPt.forEach(t),IRr=r(pDe," (FlauBERT model)"),pDe.forEach(t),NRr=i(ge),m5=n(ge,"LI",{});var _De=s(m5);wEe=n(_De,"STRONG",{});var DPt=s(wEe);qRr=r(DPt,"funnel"),DPt.forEach(t),jRr=r(_De," \u2014 "),GK=n(_De,"A",{href:!0});var GPt=s(GK);DRr=r(GPt,"TFFunnelForQuestionAnswering"),GPt.forEach(t),GRr=r(_De," (Funnel Transformer model)"),_De.forEach(t),ORr=i(ge),g5=n(ge,"LI",{});var uDe=s(g5);AEe=n(uDe,"STRONG",{});var OPt=s(AEe);VRr=r(OPt,"gptj"),OPt.forEach(t),XRr=r(uDe," \u2014 "),OK=n(uDe,"A",{href:!0});var VPt=s(OK);zRr=r(VPt,"TFGPTJForQuestionAnswering"),VPt.forEach(t),QRr=r(uDe," (GPT-J model)"),uDe.forEach(t),WRr=i(ge),h5=n(ge,"LI",{});var bDe=s(h5);LEe=n(bDe,"STRONG",{});var XPt=s(LEe);HRr=r(XPt,"longformer"),XPt.forEach(t),URr=r(bDe," \u2014 "),VK=n(bDe,"A",{href:!0});var zPt=s(VK);JRr=r(zPt,"TFLongformerForQuestionAnswering"),zPt.forEach(t),YRr=r(bDe," (Longformer model)"),bDe.forEach(t),KRr=i(ge),p5=n(ge,"LI",{});var vDe=s(p5);yEe=n(vDe,"STRONG",{});var QPt=s(yEe);ZRr=r(QPt,"mobilebert"),QPt.forEach(t),ePr=r(vDe," \u2014 "),XK=n(vDe,"A",{href:!0});var WPt=s(XK);oPr=r(WPt,"TFMobileBertForQuestionAnswering"),WPt.forEach(t),rPr=r(vDe," (MobileBERT model)"),vDe.forEach(t),tPr=i(ge),_5=n(ge,"LI",{});var FDe=s(_5);xEe=n(FDe,"STRONG",{});var HPt=s(xEe);aPr=r(HPt,"mpnet"),HPt.forEach(t),nPr=r(FDe," \u2014 "),zK=n(FDe,"A",{href:!0});var UPt=s(zK);sPr=r(UPt,"TFMPNetForQuestionAnswering"),UPt.forEach(t),lPr=r(FDe," (MPNet model)"),FDe.forEach(t),iPr=i(ge),u5=n(ge,"LI",{});var TDe=s(u5);$Ee=n(TDe,"STRONG",{});var JPt=s($Ee);dPr=r(JPt,"rembert"),JPt.forEach(t),cPr=r(TDe," \u2014 "),QK=n(TDe,"A",{href:!0});var YPt=s(QK);fPr=r(YPt,"TFRemBertForQuestionAnswering"),YPt.forEach(t),mPr=r(TDe," (RemBERT model)"),TDe.forEach(t),gPr=i(ge),b5=n(ge,"LI",{});var MDe=s(b5);kEe=n(MDe,"STRONG",{});var KPt=s(kEe);hPr=r(KPt,"roberta"),KPt.forEach(t),pPr=r(MDe," \u2014 "),WK=n(MDe,"A",{href:!0});var ZPt=s(WK);_Pr=r(ZPt,"TFRobertaForQuestionAnswering"),ZPt.forEach(t),uPr=r(MDe," (RoBERTa model)"),MDe.forEach(t),bPr=i(ge),v5=n(ge,"LI",{});var EDe=s(v5);SEe=n(EDe,"STRONG",{});var eBt=s(SEe);vPr=r(eBt,"roformer"),eBt.forEach(t),FPr=r(EDe," \u2014 "),HK=n(EDe,"A",{href:!0});var oBt=s(HK);TPr=r(oBt,"TFRoFormerForQuestionAnswering"),oBt.forEach(t),MPr=r(EDe," (RoFormer model)"),EDe.forEach(t),EPr=i(ge),F5=n(ge,"LI",{});var CDe=s(F5);REe=n(CDe,"STRONG",{});var rBt=s(REe);CPr=r(rBt,"xlm"),rBt.forEach(t),wPr=r(CDe," \u2014 "),UK=n(CDe,"A",{href:!0});var tBt=s(UK);APr=r(tBt,"TFXLMForQuestionAnsweringSimple"),tBt.forEach(t),LPr=r(CDe," (XLM model)"),CDe.forEach(t),yPr=i(ge),T5=n(ge,"LI",{});var wDe=s(T5);PEe=n(wDe,"STRONG",{});var aBt=s(PEe);xPr=r(aBt,"xlm-roberta"),aBt.forEach(t),$Pr=r(wDe," \u2014 "),JK=n(wDe,"A",{href:!0});var nBt=s(JK);kPr=r(nBt,"TFXLMRobertaForQuestionAnswering"),nBt.forEach(t),SPr=r(wDe," (XLM-RoBERTa model)"),wDe.forEach(t),RPr=i(ge),M5=n(ge,"LI",{});var ADe=s(M5);BEe=n(ADe,"STRONG",{});var sBt=s(BEe);PPr=r(sBt,"xlnet"),sBt.forEach(t),BPr=r(ADe," \u2014 "),YK=n(ADe,"A",{href:!0});var lBt=s(YK);IPr=r(lBt,"TFXLNetForQuestionAnsweringSimple"),lBt.forEach(t),NPr=r(ADe," (XLNet model)"),ADe.forEach(t),ge.forEach(t),qPr=i(Hl),T(E5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),iXe=i(f),qc=n(f,"H2",{class:!0});var uQe=s(qc);C5=n(uQe,"A",{id:!0,class:!0,href:!0});var iBt=s(C5);IEe=n(iBt,"SPAN",{});var dBt=s(IEe);T(Rx.$$.fragment,dBt),dBt.forEach(t),iBt.forEach(t),jPr=i(uQe),NEe=n(uQe,"SPAN",{});var cBt=s(NEe);DPr=r(cBt,"TFAutoModelForVision2Seq"),cBt.forEach(t),uQe.forEach(t),dXe=i(f),gr=n(f,"DIV",{class:!0});var Ul=s(gr);T(Px.$$.fragment,Ul),GPr=i(Ul),jc=n(Ul,"P",{});var cte=s(jc);OPr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KK=n(cte,"A",{href:!0});var fBt=s(KK);VPr=r(fBt,"from_pretrained()"),fBt.forEach(t),XPr=r(cte," class method or the "),ZK=n(cte,"A",{href:!0});var mBt=s(ZK);zPr=r(mBt,"from_config()"),mBt.forEach(t),QPr=r(cte,` class
method.`),cte.forEach(t),WPr=i(Ul),Bx=n(Ul,"P",{});var bQe=s(Bx);HPr=r(bQe,"This class cannot be instantiated directly using "),qEe=n(bQe,"CODE",{});var gBt=s(qEe);UPr=r(gBt,"__init__()"),gBt.forEach(t),JPr=r(bQe," (throws an error)."),bQe.forEach(t),YPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var iL=s(Ot);T(Ix.$$.fragment,iL),KPr=i(iL),jEe=n(iL,"P",{});var hBt=s(jEe);ZPr=r(hBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hBt.forEach(t),eBr=i(iL),Dc=n(iL,"P",{});var fte=s(Dc);oBr=r(fte,`Note:
Loading a model from its configuration file does `),DEe=n(fte,"STRONG",{});var pBt=s(DEe);rBr=r(pBt,"not"),pBt.forEach(t),tBr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(fte,"A",{href:!0});var _Bt=s(eZ);aBr=r(_Bt,"from_pretrained()"),_Bt.forEach(t),nBr=r(fte," to load the model weights."),fte.forEach(t),sBr=i(iL),T(w5.$$.fragment,iL),iL.forEach(t),lBr=i(Ul),Gr=n(Ul,"DIV",{class:!0});var Jl=s(Gr);T(Nx.$$.fragment,Jl),iBr=i(Jl),GEe=n(Jl,"P",{});var uBt=s(GEe);dBr=r(uBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uBt.forEach(t),cBr=i(Jl),vn=n(Jl,"P",{});var dL=s(vn);fBr=r(dL,"The model class to instantiate is selected based on the "),OEe=n(dL,"CODE",{});var bBt=s(OEe);mBr=r(bBt,"model_type"),bBt.forEach(t),gBr=r(dL,` property of the config object (either
passed as an argument or loaded from `),VEe=n(dL,"CODE",{});var vBt=s(VEe);hBr=r(vBt,"pretrained_model_name_or_path"),vBt.forEach(t),pBr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(dL,"CODE",{});var FBt=s(XEe);_Br=r(FBt,"pretrained_model_name_or_path"),FBt.forEach(t),uBr=r(dL,":"),dL.forEach(t),bBr=i(Jl),zEe=n(Jl,"UL",{});var TBt=s(zEe);A5=n(TBt,"LI",{});var LDe=s(A5);QEe=n(LDe,"STRONG",{});var MBt=s(QEe);vBr=r(MBt,"vision-encoder-decoder"),MBt.forEach(t),FBr=r(LDe," \u2014 "),oZ=n(LDe,"A",{href:!0});var EBt=s(oZ);TBr=r(EBt,"TFVisionEncoderDecoderModel"),EBt.forEach(t),MBr=r(LDe," (Vision Encoder decoder model)"),LDe.forEach(t),TBt.forEach(t),EBr=i(Jl),T(L5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),cXe=i(f),Gc=n(f,"H2",{class:!0});var vQe=s(Gc);y5=n(vQe,"A",{id:!0,class:!0,href:!0});var CBt=s(y5);WEe=n(CBt,"SPAN",{});var wBt=s(WEe);T(qx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),CBr=i(vQe),HEe=n(vQe,"SPAN",{});var ABt=s(HEe);wBr=r(ABt,"TFAutoModelForSpeechSeq2Seq"),ABt.forEach(t),vQe.forEach(t),fXe=i(f),hr=n(f,"DIV",{class:!0});var Yl=s(hr);T(jx.$$.fragment,Yl),ABr=i(Yl),Oc=n(Yl,"P",{});var mte=s(Oc);LBr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rZ=n(mte,"A",{href:!0});var LBt=s(rZ);yBr=r(LBt,"from_pretrained()"),LBt.forEach(t),xBr=r(mte," class method or the "),tZ=n(mte,"A",{href:!0});var yBt=s(tZ);$Br=r(yBt,"from_config()"),yBt.forEach(t),kBr=r(mte,` class
method.`),mte.forEach(t),SBr=i(Yl),Dx=n(Yl,"P",{});var FQe=s(Dx);RBr=r(FQe,"This class cannot be instantiated directly using "),UEe=n(FQe,"CODE",{});var xBt=s(UEe);PBr=r(xBt,"__init__()"),xBt.forEach(t),BBr=r(FQe," (throws an error)."),FQe.forEach(t),IBr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var cL=s(Vt);T(Gx.$$.fragment,cL),NBr=i(cL),JEe=n(cL,"P",{});var $Bt=s(JEe);qBr=r($Bt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Bt.forEach(t),jBr=i(cL),Vc=n(cL,"P",{});var gte=s(Vc);DBr=r(gte,`Note:
Loading a model from its configuration file does `),YEe=n(gte,"STRONG",{});var kBt=s(YEe);GBr=r(kBt,"not"),kBt.forEach(t),OBr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(gte,"A",{href:!0});var SBt=s(aZ);VBr=r(SBt,"from_pretrained()"),SBt.forEach(t),XBr=r(gte," to load the model weights."),gte.forEach(t),zBr=i(cL),T(x5.$$.fragment,cL),cL.forEach(t),QBr=i(Yl),Or=n(Yl,"DIV",{class:!0});var Kl=s(Or);T(Ox.$$.fragment,Kl),WBr=i(Kl),KEe=n(Kl,"P",{});var RBt=s(KEe);HBr=r(RBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RBt.forEach(t),UBr=i(Kl),Fn=n(Kl,"P",{});var fL=s(Fn);JBr=r(fL,"The model class to instantiate is selected based on the "),ZEe=n(fL,"CODE",{});var PBt=s(ZEe);YBr=r(PBt,"model_type"),PBt.forEach(t),KBr=r(fL,` property of the config object (either
passed as an argument or loaded from `),eCe=n(fL,"CODE",{});var BBt=s(eCe);ZBr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),eIr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=n(fL,"CODE",{});var IBt=s(oCe);oIr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),rIr=r(fL,":"),fL.forEach(t),tIr=i(Kl),rCe=n(Kl,"UL",{});var NBt=s(rCe);$5=n(NBt,"LI",{});var yDe=s($5);tCe=n(yDe,"STRONG",{});var qBt=s(tCe);aIr=r(qBt,"speech_to_text"),qBt.forEach(t),nIr=r(yDe," \u2014 "),nZ=n(yDe,"A",{href:!0});var jBt=s(nZ);sIr=r(jBt,"TFSpeech2TextForConditionalGeneration"),jBt.forEach(t),lIr=r(yDe," (Speech2Text model)"),yDe.forEach(t),NBt.forEach(t),iIr=i(Kl),T(k5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),mXe=i(f),Xc=n(f,"H2",{class:!0});var TQe=s(Xc);S5=n(TQe,"A",{id:!0,class:!0,href:!0});var DBt=s(S5);aCe=n(DBt,"SPAN",{});var GBt=s(aCe);T(Vx.$$.fragment,GBt),GBt.forEach(t),DBt.forEach(t),dIr=i(TQe),nCe=n(TQe,"SPAN",{});var OBt=s(nCe);cIr=r(OBt,"FlaxAutoModel"),OBt.forEach(t),TQe.forEach(t),gXe=i(f),pr=n(f,"DIV",{class:!0});var Zl=s(pr);T(Xx.$$.fragment,Zl),fIr=i(Zl),zc=n(Zl,"P",{});var hte=s(zc);mIr=r(hte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sZ=n(hte,"A",{href:!0});var VBt=s(sZ);gIr=r(VBt,"from_pretrained()"),VBt.forEach(t),hIr=r(hte," class method or the "),lZ=n(hte,"A",{href:!0});var XBt=s(lZ);pIr=r(XBt,"from_config()"),XBt.forEach(t),_Ir=r(hte,` class
method.`),hte.forEach(t),uIr=i(Zl),zx=n(Zl,"P",{});var MQe=s(zx);bIr=r(MQe,"This class cannot be instantiated directly using "),sCe=n(MQe,"CODE",{});var zBt=s(sCe);vIr=r(zBt,"__init__()"),zBt.forEach(t),FIr=r(MQe," (throws an error)."),MQe.forEach(t),TIr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var mL=s(Xt);T(Qx.$$.fragment,mL),MIr=i(mL),lCe=n(mL,"P",{});var QBt=s(lCe);EIr=r(QBt,"Instantiates one of the base model classes of the library from a configuration."),QBt.forEach(t),CIr=i(mL),Qc=n(mL,"P",{});var pte=s(Qc);wIr=r(pte,`Note:
Loading a model from its configuration file does `),iCe=n(pte,"STRONG",{});var WBt=s(iCe);AIr=r(WBt,"not"),WBt.forEach(t),LIr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(pte,"A",{href:!0});var HBt=s(iZ);yIr=r(HBt,"from_pretrained()"),HBt.forEach(t),xIr=r(pte," to load the model weights."),pte.forEach(t),$Ir=i(mL),T(R5.$$.fragment,mL),mL.forEach(t),kIr=i(Zl),Vr=n(Zl,"DIV",{class:!0});var ei=s(Vr);T(Wx.$$.fragment,ei),SIr=i(ei),dCe=n(ei,"P",{});var UBt=s(dCe);RIr=r(UBt,"Instantiate one of the base model classes of the library from a pretrained model."),UBt.forEach(t),PIr=i(ei),Tn=n(ei,"P",{});var gL=s(Tn);BIr=r(gL,"The model class to instantiate is selected based on the "),cCe=n(gL,"CODE",{});var JBt=s(cCe);IIr=r(JBt,"model_type"),JBt.forEach(t),NIr=r(gL,` property of the config object (either
passed as an argument or loaded from `),fCe=n(gL,"CODE",{});var YBt=s(fCe);qIr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),jIr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(gL,"CODE",{});var KBt=s(mCe);DIr=r(KBt,"pretrained_model_name_or_path"),KBt.forEach(t),GIr=r(gL,":"),gL.forEach(t),OIr=i(ei),oe=n(ei,"UL",{});var ae=s(oe);P5=n(ae,"LI",{});var xDe=s(P5);gCe=n(xDe,"STRONG",{});var ZBt=s(gCe);VIr=r(ZBt,"albert"),ZBt.forEach(t),XIr=r(xDe," \u2014 "),dZ=n(xDe,"A",{href:!0});var eIt=s(dZ);zIr=r(eIt,"FlaxAlbertModel"),eIt.forEach(t),QIr=r(xDe," (ALBERT model)"),xDe.forEach(t),WIr=i(ae),B5=n(ae,"LI",{});var $De=s(B5);hCe=n($De,"STRONG",{});var oIt=s(hCe);HIr=r(oIt,"bart"),oIt.forEach(t),UIr=r($De," \u2014 "),cZ=n($De,"A",{href:!0});var rIt=s(cZ);JIr=r(rIt,"FlaxBartModel"),rIt.forEach(t),YIr=r($De," (BART model)"),$De.forEach(t),KIr=i(ae),I5=n(ae,"LI",{});var kDe=s(I5);pCe=n(kDe,"STRONG",{});var tIt=s(pCe);ZIr=r(tIt,"beit"),tIt.forEach(t),eNr=r(kDe," \u2014 "),fZ=n(kDe,"A",{href:!0});var aIt=s(fZ);oNr=r(aIt,"FlaxBeitModel"),aIt.forEach(t),rNr=r(kDe," (BEiT model)"),kDe.forEach(t),tNr=i(ae),N5=n(ae,"LI",{});var SDe=s(N5);_Ce=n(SDe,"STRONG",{});var nIt=s(_Ce);aNr=r(nIt,"bert"),nIt.forEach(t),nNr=r(SDe," \u2014 "),mZ=n(SDe,"A",{href:!0});var sIt=s(mZ);sNr=r(sIt,"FlaxBertModel"),sIt.forEach(t),lNr=r(SDe," (BERT model)"),SDe.forEach(t),iNr=i(ae),q5=n(ae,"LI",{});var RDe=s(q5);uCe=n(RDe,"STRONG",{});var lIt=s(uCe);dNr=r(lIt,"big_bird"),lIt.forEach(t),cNr=r(RDe," \u2014 "),gZ=n(RDe,"A",{href:!0});var iIt=s(gZ);fNr=r(iIt,"FlaxBigBirdModel"),iIt.forEach(t),mNr=r(RDe," (BigBird model)"),RDe.forEach(t),gNr=i(ae),j5=n(ae,"LI",{});var PDe=s(j5);bCe=n(PDe,"STRONG",{});var dIt=s(bCe);hNr=r(dIt,"blenderbot"),dIt.forEach(t),pNr=r(PDe," \u2014 "),hZ=n(PDe,"A",{href:!0});var cIt=s(hZ);_Nr=r(cIt,"FlaxBlenderbotModel"),cIt.forEach(t),uNr=r(PDe," (Blenderbot model)"),PDe.forEach(t),bNr=i(ae),D5=n(ae,"LI",{});var BDe=s(D5);vCe=n(BDe,"STRONG",{});var fIt=s(vCe);vNr=r(fIt,"blenderbot-small"),fIt.forEach(t),FNr=r(BDe," \u2014 "),pZ=n(BDe,"A",{href:!0});var mIt=s(pZ);TNr=r(mIt,"FlaxBlenderbotSmallModel"),mIt.forEach(t),MNr=r(BDe," (BlenderbotSmall model)"),BDe.forEach(t),ENr=i(ae),G5=n(ae,"LI",{});var IDe=s(G5);FCe=n(IDe,"STRONG",{});var gIt=s(FCe);CNr=r(gIt,"clip"),gIt.forEach(t),wNr=r(IDe," \u2014 "),_Z=n(IDe,"A",{href:!0});var hIt=s(_Z);ANr=r(hIt,"FlaxCLIPModel"),hIt.forEach(t),LNr=r(IDe," (CLIP model)"),IDe.forEach(t),yNr=i(ae),O5=n(ae,"LI",{});var NDe=s(O5);TCe=n(NDe,"STRONG",{});var pIt=s(TCe);xNr=r(pIt,"distilbert"),pIt.forEach(t),$Nr=r(NDe," \u2014 "),uZ=n(NDe,"A",{href:!0});var _It=s(uZ);kNr=r(_It,"FlaxDistilBertModel"),_It.forEach(t),SNr=r(NDe," (DistilBERT model)"),NDe.forEach(t),RNr=i(ae),V5=n(ae,"LI",{});var qDe=s(V5);MCe=n(qDe,"STRONG",{});var uIt=s(MCe);PNr=r(uIt,"electra"),uIt.forEach(t),BNr=r(qDe," \u2014 "),bZ=n(qDe,"A",{href:!0});var bIt=s(bZ);INr=r(bIt,"FlaxElectraModel"),bIt.forEach(t),NNr=r(qDe," (ELECTRA model)"),qDe.forEach(t),qNr=i(ae),X5=n(ae,"LI",{});var jDe=s(X5);ECe=n(jDe,"STRONG",{});var vIt=s(ECe);jNr=r(vIt,"gpt2"),vIt.forEach(t),DNr=r(jDe," \u2014 "),vZ=n(jDe,"A",{href:!0});var FIt=s(vZ);GNr=r(FIt,"FlaxGPT2Model"),FIt.forEach(t),ONr=r(jDe," (OpenAI GPT-2 model)"),jDe.forEach(t),VNr=i(ae),z5=n(ae,"LI",{});var DDe=s(z5);CCe=n(DDe,"STRONG",{});var TIt=s(CCe);XNr=r(TIt,"gpt_neo"),TIt.forEach(t),zNr=r(DDe," \u2014 "),FZ=n(DDe,"A",{href:!0});var MIt=s(FZ);QNr=r(MIt,"FlaxGPTNeoModel"),MIt.forEach(t),WNr=r(DDe," (GPT Neo model)"),DDe.forEach(t),HNr=i(ae),Q5=n(ae,"LI",{});var GDe=s(Q5);wCe=n(GDe,"STRONG",{});var EIt=s(wCe);UNr=r(EIt,"gptj"),EIt.forEach(t),JNr=r(GDe," \u2014 "),TZ=n(GDe,"A",{href:!0});var CIt=s(TZ);YNr=r(CIt,"FlaxGPTJModel"),CIt.forEach(t),KNr=r(GDe," (GPT-J model)"),GDe.forEach(t),ZNr=i(ae),W5=n(ae,"LI",{});var ODe=s(W5);ACe=n(ODe,"STRONG",{});var wIt=s(ACe);eqr=r(wIt,"longt5"),wIt.forEach(t),oqr=r(ODe," \u2014 "),MZ=n(ODe,"A",{href:!0});var AIt=s(MZ);rqr=r(AIt,"FlaxLongT5Model"),AIt.forEach(t),tqr=r(ODe," (LongT5 model)"),ODe.forEach(t),aqr=i(ae),H5=n(ae,"LI",{});var VDe=s(H5);LCe=n(VDe,"STRONG",{});var LIt=s(LCe);nqr=r(LIt,"marian"),LIt.forEach(t),sqr=r(VDe," \u2014 "),EZ=n(VDe,"A",{href:!0});var yIt=s(EZ);lqr=r(yIt,"FlaxMarianModel"),yIt.forEach(t),iqr=r(VDe," (Marian model)"),VDe.forEach(t),dqr=i(ae),U5=n(ae,"LI",{});var XDe=s(U5);yCe=n(XDe,"STRONG",{});var xIt=s(yCe);cqr=r(xIt,"mbart"),xIt.forEach(t),fqr=r(XDe," \u2014 "),CZ=n(XDe,"A",{href:!0});var $It=s(CZ);mqr=r($It,"FlaxMBartModel"),$It.forEach(t),gqr=r(XDe," (mBART model)"),XDe.forEach(t),hqr=i(ae),J5=n(ae,"LI",{});var zDe=s(J5);xCe=n(zDe,"STRONG",{});var kIt=s(xCe);pqr=r(kIt,"mt5"),kIt.forEach(t),_qr=r(zDe," \u2014 "),wZ=n(zDe,"A",{href:!0});var SIt=s(wZ);uqr=r(SIt,"FlaxMT5Model"),SIt.forEach(t),bqr=r(zDe," (MT5 model)"),zDe.forEach(t),vqr=i(ae),Y5=n(ae,"LI",{});var QDe=s(Y5);$Ce=n(QDe,"STRONG",{});var RIt=s($Ce);Fqr=r(RIt,"opt"),RIt.forEach(t),Tqr=r(QDe," \u2014 "),AZ=n(QDe,"A",{href:!0});var PIt=s(AZ);Mqr=r(PIt,"FlaxOPTModel"),PIt.forEach(t),Eqr=r(QDe," (OPT model)"),QDe.forEach(t),Cqr=i(ae),K5=n(ae,"LI",{});var WDe=s(K5);kCe=n(WDe,"STRONG",{});var BIt=s(kCe);wqr=r(BIt,"pegasus"),BIt.forEach(t),Aqr=r(WDe," \u2014 "),LZ=n(WDe,"A",{href:!0});var IIt=s(LZ);Lqr=r(IIt,"FlaxPegasusModel"),IIt.forEach(t),yqr=r(WDe," (Pegasus model)"),WDe.forEach(t),xqr=i(ae),Z5=n(ae,"LI",{});var HDe=s(Z5);SCe=n(HDe,"STRONG",{});var NIt=s(SCe);$qr=r(NIt,"roberta"),NIt.forEach(t),kqr=r(HDe," \u2014 "),yZ=n(HDe,"A",{href:!0});var qIt=s(yZ);Sqr=r(qIt,"FlaxRobertaModel"),qIt.forEach(t),Rqr=r(HDe," (RoBERTa model)"),HDe.forEach(t),Pqr=i(ae),e3=n(ae,"LI",{});var UDe=s(e3);RCe=n(UDe,"STRONG",{});var jIt=s(RCe);Bqr=r(jIt,"roformer"),jIt.forEach(t),Iqr=r(UDe," \u2014 "),xZ=n(UDe,"A",{href:!0});var DIt=s(xZ);Nqr=r(DIt,"FlaxRoFormerModel"),DIt.forEach(t),qqr=r(UDe," (RoFormer model)"),UDe.forEach(t),jqr=i(ae),o3=n(ae,"LI",{});var JDe=s(o3);PCe=n(JDe,"STRONG",{});var GIt=s(PCe);Dqr=r(GIt,"t5"),GIt.forEach(t),Gqr=r(JDe," \u2014 "),$Z=n(JDe,"A",{href:!0});var OIt=s($Z);Oqr=r(OIt,"FlaxT5Model"),OIt.forEach(t),Vqr=r(JDe," (T5 model)"),JDe.forEach(t),Xqr=i(ae),r3=n(ae,"LI",{});var YDe=s(r3);BCe=n(YDe,"STRONG",{});var VIt=s(BCe);zqr=r(VIt,"vision-text-dual-encoder"),VIt.forEach(t),Qqr=r(YDe," \u2014 "),kZ=n(YDe,"A",{href:!0});var XIt=s(kZ);Wqr=r(XIt,"FlaxVisionTextDualEncoderModel"),XIt.forEach(t),Hqr=r(YDe," (VisionTextDualEncoder model)"),YDe.forEach(t),Uqr=i(ae),t3=n(ae,"LI",{});var KDe=s(t3);ICe=n(KDe,"STRONG",{});var zIt=s(ICe);Jqr=r(zIt,"vit"),zIt.forEach(t),Yqr=r(KDe," \u2014 "),SZ=n(KDe,"A",{href:!0});var QIt=s(SZ);Kqr=r(QIt,"FlaxViTModel"),QIt.forEach(t),Zqr=r(KDe," (ViT model)"),KDe.forEach(t),ejr=i(ae),a3=n(ae,"LI",{});var ZDe=s(a3);NCe=n(ZDe,"STRONG",{});var WIt=s(NCe);ojr=r(WIt,"wav2vec2"),WIt.forEach(t),rjr=r(ZDe," \u2014 "),RZ=n(ZDe,"A",{href:!0});var HIt=s(RZ);tjr=r(HIt,"FlaxWav2Vec2Model"),HIt.forEach(t),ajr=r(ZDe," (Wav2Vec2 model)"),ZDe.forEach(t),njr=i(ae),n3=n(ae,"LI",{});var eGe=s(n3);qCe=n(eGe,"STRONG",{});var UIt=s(qCe);sjr=r(UIt,"xglm"),UIt.forEach(t),ljr=r(eGe," \u2014 "),PZ=n(eGe,"A",{href:!0});var JIt=s(PZ);ijr=r(JIt,"FlaxXGLMModel"),JIt.forEach(t),djr=r(eGe," (XGLM model)"),eGe.forEach(t),cjr=i(ae),s3=n(ae,"LI",{});var oGe=s(s3);jCe=n(oGe,"STRONG",{});var YIt=s(jCe);fjr=r(YIt,"xlm-roberta"),YIt.forEach(t),mjr=r(oGe," \u2014 "),BZ=n(oGe,"A",{href:!0});var KIt=s(BZ);gjr=r(KIt,"FlaxXLMRobertaModel"),KIt.forEach(t),hjr=r(oGe," (XLM-RoBERTa model)"),oGe.forEach(t),ae.forEach(t),pjr=i(ei),T(l3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),hXe=i(f),Wc=n(f,"H2",{class:!0});var EQe=s(Wc);i3=n(EQe,"A",{id:!0,class:!0,href:!0});var ZIt=s(i3);DCe=n(ZIt,"SPAN",{});var eNt=s(DCe);T(Hx.$$.fragment,eNt),eNt.forEach(t),ZIt.forEach(t),_jr=i(EQe),GCe=n(EQe,"SPAN",{});var oNt=s(GCe);ujr=r(oNt,"FlaxAutoModelForCausalLM"),oNt.forEach(t),EQe.forEach(t),pXe=i(f),_r=n(f,"DIV",{class:!0});var oi=s(_r);T(Ux.$$.fragment,oi),bjr=i(oi),Hc=n(oi,"P",{});var _te=s(Hc);vjr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IZ=n(_te,"A",{href:!0});var rNt=s(IZ);Fjr=r(rNt,"from_pretrained()"),rNt.forEach(t),Tjr=r(_te," class method or the "),NZ=n(_te,"A",{href:!0});var tNt=s(NZ);Mjr=r(tNt,"from_config()"),tNt.forEach(t),Ejr=r(_te,` class
method.`),_te.forEach(t),Cjr=i(oi),Jx=n(oi,"P",{});var CQe=s(Jx);wjr=r(CQe,"This class cannot be instantiated directly using "),OCe=n(CQe,"CODE",{});var aNt=s(OCe);Ajr=r(aNt,"__init__()"),aNt.forEach(t),Ljr=r(CQe," (throws an error)."),CQe.forEach(t),yjr=i(oi),zt=n(oi,"DIV",{class:!0});var hL=s(zt);T(Yx.$$.fragment,hL),xjr=i(hL),VCe=n(hL,"P",{});var nNt=s(VCe);$jr=r(nNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nNt.forEach(t),kjr=i(hL),Uc=n(hL,"P",{});var ute=s(Uc);Sjr=r(ute,`Note:
Loading a model from its configuration file does `),XCe=n(ute,"STRONG",{});var sNt=s(XCe);Rjr=r(sNt,"not"),sNt.forEach(t),Pjr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(ute,"A",{href:!0});var lNt=s(qZ);Bjr=r(lNt,"from_pretrained()"),lNt.forEach(t),Ijr=r(ute," to load the model weights."),ute.forEach(t),Njr=i(hL),T(d3.$$.fragment,hL),hL.forEach(t),qjr=i(oi),Xr=n(oi,"DIV",{class:!0});var ri=s(Xr);T(Kx.$$.fragment,ri),jjr=i(ri),zCe=n(ri,"P",{});var iNt=s(zCe);Djr=r(iNt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iNt.forEach(t),Gjr=i(ri),Mn=n(ri,"P",{});var pL=s(Mn);Ojr=r(pL,"The model class to instantiate is selected based on the "),QCe=n(pL,"CODE",{});var dNt=s(QCe);Vjr=r(dNt,"model_type"),dNt.forEach(t),Xjr=r(pL,` property of the config object (either
passed as an argument or loaded from `),WCe=n(pL,"CODE",{});var cNt=s(WCe);zjr=r(cNt,"pretrained_model_name_or_path"),cNt.forEach(t),Qjr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HCe=n(pL,"CODE",{});var fNt=s(HCe);Wjr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),Hjr=r(pL,":"),pL.forEach(t),Ujr=i(ri),xe=n(ri,"UL",{});var Ne=s(xe);c3=n(Ne,"LI",{});var rGe=s(c3);UCe=n(rGe,"STRONG",{});var mNt=s(UCe);Jjr=r(mNt,"bart"),mNt.forEach(t),Yjr=r(rGe," \u2014 "),jZ=n(rGe,"A",{href:!0});var gNt=s(jZ);Kjr=r(gNt,"FlaxBartForCausalLM"),gNt.forEach(t),Zjr=r(rGe," (BART model)"),rGe.forEach(t),eDr=i(Ne),f3=n(Ne,"LI",{});var tGe=s(f3);JCe=n(tGe,"STRONG",{});var hNt=s(JCe);oDr=r(hNt,"bert"),hNt.forEach(t),rDr=r(tGe," \u2014 "),DZ=n(tGe,"A",{href:!0});var pNt=s(DZ);tDr=r(pNt,"FlaxBertForCausalLM"),pNt.forEach(t),aDr=r(tGe," (BERT model)"),tGe.forEach(t),nDr=i(Ne),m3=n(Ne,"LI",{});var aGe=s(m3);YCe=n(aGe,"STRONG",{});var _Nt=s(YCe);sDr=r(_Nt,"big_bird"),_Nt.forEach(t),lDr=r(aGe," \u2014 "),GZ=n(aGe,"A",{href:!0});var uNt=s(GZ);iDr=r(uNt,"FlaxBigBirdForCausalLM"),uNt.forEach(t),dDr=r(aGe," (BigBird model)"),aGe.forEach(t),cDr=i(Ne),g3=n(Ne,"LI",{});var nGe=s(g3);KCe=n(nGe,"STRONG",{});var bNt=s(KCe);fDr=r(bNt,"electra"),bNt.forEach(t),mDr=r(nGe," \u2014 "),OZ=n(nGe,"A",{href:!0});var vNt=s(OZ);gDr=r(vNt,"FlaxElectraForCausalLM"),vNt.forEach(t),hDr=r(nGe," (ELECTRA model)"),nGe.forEach(t),pDr=i(Ne),h3=n(Ne,"LI",{});var sGe=s(h3);ZCe=n(sGe,"STRONG",{});var FNt=s(ZCe);_Dr=r(FNt,"gpt2"),FNt.forEach(t),uDr=r(sGe," \u2014 "),VZ=n(sGe,"A",{href:!0});var TNt=s(VZ);bDr=r(TNt,"FlaxGPT2LMHeadModel"),TNt.forEach(t),vDr=r(sGe," (OpenAI GPT-2 model)"),sGe.forEach(t),FDr=i(Ne),p3=n(Ne,"LI",{});var lGe=s(p3);e5e=n(lGe,"STRONG",{});var MNt=s(e5e);TDr=r(MNt,"gpt_neo"),MNt.forEach(t),MDr=r(lGe," \u2014 "),XZ=n(lGe,"A",{href:!0});var ENt=s(XZ);EDr=r(ENt,"FlaxGPTNeoForCausalLM"),ENt.forEach(t),CDr=r(lGe," (GPT Neo model)"),lGe.forEach(t),wDr=i(Ne),_3=n(Ne,"LI",{});var iGe=s(_3);o5e=n(iGe,"STRONG",{});var CNt=s(o5e);ADr=r(CNt,"gptj"),CNt.forEach(t),LDr=r(iGe," \u2014 "),zZ=n(iGe,"A",{href:!0});var wNt=s(zZ);yDr=r(wNt,"FlaxGPTJForCausalLM"),wNt.forEach(t),xDr=r(iGe," (GPT-J model)"),iGe.forEach(t),$Dr=i(Ne),u3=n(Ne,"LI",{});var dGe=s(u3);r5e=n(dGe,"STRONG",{});var ANt=s(r5e);kDr=r(ANt,"opt"),ANt.forEach(t),SDr=r(dGe," \u2014 "),QZ=n(dGe,"A",{href:!0});var LNt=s(QZ);RDr=r(LNt,"FlaxOPTForCausalLM"),LNt.forEach(t),PDr=r(dGe," (OPT model)"),dGe.forEach(t),BDr=i(Ne),b3=n(Ne,"LI",{});var cGe=s(b3);t5e=n(cGe,"STRONG",{});var yNt=s(t5e);IDr=r(yNt,"roberta"),yNt.forEach(t),NDr=r(cGe," \u2014 "),WZ=n(cGe,"A",{href:!0});var xNt=s(WZ);qDr=r(xNt,"FlaxRobertaForCausalLM"),xNt.forEach(t),jDr=r(cGe," (RoBERTa model)"),cGe.forEach(t),DDr=i(Ne),v3=n(Ne,"LI",{});var fGe=s(v3);a5e=n(fGe,"STRONG",{});var $Nt=s(a5e);GDr=r($Nt,"xglm"),$Nt.forEach(t),ODr=r(fGe," \u2014 "),HZ=n(fGe,"A",{href:!0});var kNt=s(HZ);VDr=r(kNt,"FlaxXGLMForCausalLM"),kNt.forEach(t),XDr=r(fGe," (XGLM model)"),fGe.forEach(t),Ne.forEach(t),zDr=i(ri),T(F3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),_Xe=i(f),Jc=n(f,"H2",{class:!0});var wQe=s(Jc);T3=n(wQe,"A",{id:!0,class:!0,href:!0});var SNt=s(T3);n5e=n(SNt,"SPAN",{});var RNt=s(n5e);T(Zx.$$.fragment,RNt),RNt.forEach(t),SNt.forEach(t),QDr=i(wQe),s5e=n(wQe,"SPAN",{});var PNt=s(s5e);WDr=r(PNt,"FlaxAutoModelForPreTraining"),PNt.forEach(t),wQe.forEach(t),uXe=i(f),ur=n(f,"DIV",{class:!0});var ti=s(ur);T(e$.$$.fragment,ti),HDr=i(ti),Yc=n(ti,"P",{});var bte=s(Yc);UDr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=n(bte,"A",{href:!0});var BNt=s(UZ);JDr=r(BNt,"from_pretrained()"),BNt.forEach(t),YDr=r(bte," class method or the "),JZ=n(bte,"A",{href:!0});var INt=s(JZ);KDr=r(INt,"from_config()"),INt.forEach(t),ZDr=r(bte,` class
method.`),bte.forEach(t),eGr=i(ti),o$=n(ti,"P",{});var AQe=s(o$);oGr=r(AQe,"This class cannot be instantiated directly using "),l5e=n(AQe,"CODE",{});var NNt=s(l5e);rGr=r(NNt,"__init__()"),NNt.forEach(t),tGr=r(AQe," (throws an error)."),AQe.forEach(t),aGr=i(ti),Qt=n(ti,"DIV",{class:!0});var _L=s(Qt);T(r$.$$.fragment,_L),nGr=i(_L),i5e=n(_L,"P",{});var qNt=s(i5e);sGr=r(qNt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qNt.forEach(t),lGr=i(_L),Kc=n(_L,"P",{});var vte=s(Kc);iGr=r(vte,`Note:
Loading a model from its configuration file does `),d5e=n(vte,"STRONG",{});var jNt=s(d5e);dGr=r(jNt,"not"),jNt.forEach(t),cGr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(vte,"A",{href:!0});var DNt=s(YZ);fGr=r(DNt,"from_pretrained()"),DNt.forEach(t),mGr=r(vte," to load the model weights."),vte.forEach(t),gGr=i(_L),T(M3.$$.fragment,_L),_L.forEach(t),hGr=i(ti),zr=n(ti,"DIV",{class:!0});var ai=s(zr);T(t$.$$.fragment,ai),pGr=i(ai),c5e=n(ai,"P",{});var GNt=s(c5e);_Gr=r(GNt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GNt.forEach(t),uGr=i(ai),En=n(ai,"P",{});var uL=s(En);bGr=r(uL,"The model class to instantiate is selected based on the "),f5e=n(uL,"CODE",{});var ONt=s(f5e);vGr=r(ONt,"model_type"),ONt.forEach(t),FGr=r(uL,` property of the config object (either
passed as an argument or loaded from `),m5e=n(uL,"CODE",{});var VNt=s(m5e);TGr=r(VNt,"pretrained_model_name_or_path"),VNt.forEach(t),MGr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(uL,"CODE",{});var XNt=s(g5e);EGr=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),CGr=r(uL,":"),uL.forEach(t),wGr=i(ai),Ee=n(ai,"UL",{});var we=s(Ee);E3=n(we,"LI",{});var mGe=s(E3);h5e=n(mGe,"STRONG",{});var zNt=s(h5e);AGr=r(zNt,"albert"),zNt.forEach(t),LGr=r(mGe," \u2014 "),KZ=n(mGe,"A",{href:!0});var QNt=s(KZ);yGr=r(QNt,"FlaxAlbertForPreTraining"),QNt.forEach(t),xGr=r(mGe," (ALBERT model)"),mGe.forEach(t),$Gr=i(we),C3=n(we,"LI",{});var gGe=s(C3);p5e=n(gGe,"STRONG",{});var WNt=s(p5e);kGr=r(WNt,"bart"),WNt.forEach(t),SGr=r(gGe," \u2014 "),ZZ=n(gGe,"A",{href:!0});var HNt=s(ZZ);RGr=r(HNt,"FlaxBartForConditionalGeneration"),HNt.forEach(t),PGr=r(gGe," (BART model)"),gGe.forEach(t),BGr=i(we),w3=n(we,"LI",{});var hGe=s(w3);_5e=n(hGe,"STRONG",{});var UNt=s(_5e);IGr=r(UNt,"bert"),UNt.forEach(t),NGr=r(hGe," \u2014 "),eee=n(hGe,"A",{href:!0});var JNt=s(eee);qGr=r(JNt,"FlaxBertForPreTraining"),JNt.forEach(t),jGr=r(hGe," (BERT model)"),hGe.forEach(t),DGr=i(we),A3=n(we,"LI",{});var pGe=s(A3);u5e=n(pGe,"STRONG",{});var YNt=s(u5e);GGr=r(YNt,"big_bird"),YNt.forEach(t),OGr=r(pGe," \u2014 "),oee=n(pGe,"A",{href:!0});var KNt=s(oee);VGr=r(KNt,"FlaxBigBirdForPreTraining"),KNt.forEach(t),XGr=r(pGe," (BigBird model)"),pGe.forEach(t),zGr=i(we),L3=n(we,"LI",{});var _Ge=s(L3);b5e=n(_Ge,"STRONG",{});var ZNt=s(b5e);QGr=r(ZNt,"electra"),ZNt.forEach(t),WGr=r(_Ge," \u2014 "),ree=n(_Ge,"A",{href:!0});var eqt=s(ree);HGr=r(eqt,"FlaxElectraForPreTraining"),eqt.forEach(t),UGr=r(_Ge," (ELECTRA model)"),_Ge.forEach(t),JGr=i(we),y3=n(we,"LI",{});var uGe=s(y3);v5e=n(uGe,"STRONG",{});var oqt=s(v5e);YGr=r(oqt,"longt5"),oqt.forEach(t),KGr=r(uGe," \u2014 "),tee=n(uGe,"A",{href:!0});var rqt=s(tee);ZGr=r(rqt,"FlaxLongT5ForConditionalGeneration"),rqt.forEach(t),eOr=r(uGe," (LongT5 model)"),uGe.forEach(t),oOr=i(we),x3=n(we,"LI",{});var bGe=s(x3);F5e=n(bGe,"STRONG",{});var tqt=s(F5e);rOr=r(tqt,"mbart"),tqt.forEach(t),tOr=r(bGe," \u2014 "),aee=n(bGe,"A",{href:!0});var aqt=s(aee);aOr=r(aqt,"FlaxMBartForConditionalGeneration"),aqt.forEach(t),nOr=r(bGe," (mBART model)"),bGe.forEach(t),sOr=i(we),$3=n(we,"LI",{});var vGe=s($3);T5e=n(vGe,"STRONG",{});var nqt=s(T5e);lOr=r(nqt,"mt5"),nqt.forEach(t),iOr=r(vGe," \u2014 "),nee=n(vGe,"A",{href:!0});var sqt=s(nee);dOr=r(sqt,"FlaxMT5ForConditionalGeneration"),sqt.forEach(t),cOr=r(vGe," (MT5 model)"),vGe.forEach(t),fOr=i(we),k3=n(we,"LI",{});var FGe=s(k3);M5e=n(FGe,"STRONG",{});var lqt=s(M5e);mOr=r(lqt,"roberta"),lqt.forEach(t),gOr=r(FGe," \u2014 "),see=n(FGe,"A",{href:!0});var iqt=s(see);hOr=r(iqt,"FlaxRobertaForMaskedLM"),iqt.forEach(t),pOr=r(FGe," (RoBERTa model)"),FGe.forEach(t),_Or=i(we),S3=n(we,"LI",{});var TGe=s(S3);E5e=n(TGe,"STRONG",{});var dqt=s(E5e);uOr=r(dqt,"roformer"),dqt.forEach(t),bOr=r(TGe," \u2014 "),lee=n(TGe,"A",{href:!0});var cqt=s(lee);vOr=r(cqt,"FlaxRoFormerForMaskedLM"),cqt.forEach(t),FOr=r(TGe," (RoFormer model)"),TGe.forEach(t),TOr=i(we),R3=n(we,"LI",{});var MGe=s(R3);C5e=n(MGe,"STRONG",{});var fqt=s(C5e);MOr=r(fqt,"t5"),fqt.forEach(t),EOr=r(MGe," \u2014 "),iee=n(MGe,"A",{href:!0});var mqt=s(iee);COr=r(mqt,"FlaxT5ForConditionalGeneration"),mqt.forEach(t),wOr=r(MGe," (T5 model)"),MGe.forEach(t),AOr=i(we),P3=n(we,"LI",{});var EGe=s(P3);w5e=n(EGe,"STRONG",{});var gqt=s(w5e);LOr=r(gqt,"wav2vec2"),gqt.forEach(t),yOr=r(EGe," \u2014 "),dee=n(EGe,"A",{href:!0});var hqt=s(dee);xOr=r(hqt,"FlaxWav2Vec2ForPreTraining"),hqt.forEach(t),$Or=r(EGe," (Wav2Vec2 model)"),EGe.forEach(t),kOr=i(we),B3=n(we,"LI",{});var CGe=s(B3);A5e=n(CGe,"STRONG",{});var pqt=s(A5e);SOr=r(pqt,"xlm-roberta"),pqt.forEach(t),ROr=r(CGe," \u2014 "),cee=n(CGe,"A",{href:!0});var _qt=s(cee);POr=r(_qt,"FlaxXLMRobertaForMaskedLM"),_qt.forEach(t),BOr=r(CGe," (XLM-RoBERTa model)"),CGe.forEach(t),we.forEach(t),IOr=i(ai),T(I3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),bXe=i(f),Zc=n(f,"H2",{class:!0});var LQe=s(Zc);N3=n(LQe,"A",{id:!0,class:!0,href:!0});var uqt=s(N3);L5e=n(uqt,"SPAN",{});var bqt=s(L5e);T(a$.$$.fragment,bqt),bqt.forEach(t),uqt.forEach(t),NOr=i(LQe),y5e=n(LQe,"SPAN",{});var vqt=s(y5e);qOr=r(vqt,"FlaxAutoModelForMaskedLM"),vqt.forEach(t),LQe.forEach(t),vXe=i(f),br=n(f,"DIV",{class:!0});var ni=s(br);T(n$.$$.fragment,ni),jOr=i(ni),ef=n(ni,"P",{});var Fte=s(ef);DOr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fee=n(Fte,"A",{href:!0});var Fqt=s(fee);GOr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),OOr=r(Fte," class method or the "),mee=n(Fte,"A",{href:!0});var Tqt=s(mee);VOr=r(Tqt,"from_config()"),Tqt.forEach(t),XOr=r(Fte,` class
method.`),Fte.forEach(t),zOr=i(ni),s$=n(ni,"P",{});var yQe=s(s$);QOr=r(yQe,"This class cannot be instantiated directly using "),x5e=n(yQe,"CODE",{});var Mqt=s(x5e);WOr=r(Mqt,"__init__()"),Mqt.forEach(t),HOr=r(yQe," (throws an error)."),yQe.forEach(t),UOr=i(ni),Wt=n(ni,"DIV",{class:!0});var bL=s(Wt);T(l$.$$.fragment,bL),JOr=i(bL),$5e=n(bL,"P",{});var Eqt=s($5e);YOr=r(Eqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Eqt.forEach(t),KOr=i(bL),of=n(bL,"P",{});var Tte=s(of);ZOr=r(Tte,`Note:
Loading a model from its configuration file does `),k5e=n(Tte,"STRONG",{});var Cqt=s(k5e);eVr=r(Cqt,"not"),Cqt.forEach(t),oVr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Tte,"A",{href:!0});var wqt=s(gee);rVr=r(wqt,"from_pretrained()"),wqt.forEach(t),tVr=r(Tte," to load the model weights."),Tte.forEach(t),aVr=i(bL),T(q3.$$.fragment,bL),bL.forEach(t),nVr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(i$.$$.fragment,si),sVr=i(si),S5e=n(si,"P",{});var Aqt=s(S5e);lVr=r(Aqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Aqt.forEach(t),iVr=i(si),Cn=n(si,"P",{});var vL=s(Cn);dVr=r(vL,"The model class to instantiate is selected based on the "),R5e=n(vL,"CODE",{});var Lqt=s(R5e);cVr=r(Lqt,"model_type"),Lqt.forEach(t),fVr=r(vL,` property of the config object (either
passed as an argument or loaded from `),P5e=n(vL,"CODE",{});var yqt=s(P5e);mVr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),gVr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(vL,"CODE",{});var xqt=s(B5e);hVr=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),pVr=r(vL,":"),vL.forEach(t),_Vr=i(si),$e=n(si,"UL",{});var qe=s($e);j3=n(qe,"LI",{});var wGe=s(j3);I5e=n(wGe,"STRONG",{});var $qt=s(I5e);uVr=r($qt,"albert"),$qt.forEach(t),bVr=r(wGe," \u2014 "),hee=n(wGe,"A",{href:!0});var kqt=s(hee);vVr=r(kqt,"FlaxAlbertForMaskedLM"),kqt.forEach(t),FVr=r(wGe," (ALBERT model)"),wGe.forEach(t),TVr=i(qe),D3=n(qe,"LI",{});var AGe=s(D3);N5e=n(AGe,"STRONG",{});var Sqt=s(N5e);MVr=r(Sqt,"bart"),Sqt.forEach(t),EVr=r(AGe," \u2014 "),pee=n(AGe,"A",{href:!0});var Rqt=s(pee);CVr=r(Rqt,"FlaxBartForConditionalGeneration"),Rqt.forEach(t),wVr=r(AGe," (BART model)"),AGe.forEach(t),AVr=i(qe),G3=n(qe,"LI",{});var LGe=s(G3);q5e=n(LGe,"STRONG",{});var Pqt=s(q5e);LVr=r(Pqt,"bert"),Pqt.forEach(t),yVr=r(LGe," \u2014 "),_ee=n(LGe,"A",{href:!0});var Bqt=s(_ee);xVr=r(Bqt,"FlaxBertForMaskedLM"),Bqt.forEach(t),$Vr=r(LGe," (BERT model)"),LGe.forEach(t),kVr=i(qe),O3=n(qe,"LI",{});var yGe=s(O3);j5e=n(yGe,"STRONG",{});var Iqt=s(j5e);SVr=r(Iqt,"big_bird"),Iqt.forEach(t),RVr=r(yGe," \u2014 "),uee=n(yGe,"A",{href:!0});var Nqt=s(uee);PVr=r(Nqt,"FlaxBigBirdForMaskedLM"),Nqt.forEach(t),BVr=r(yGe," (BigBird model)"),yGe.forEach(t),IVr=i(qe),V3=n(qe,"LI",{});var xGe=s(V3);D5e=n(xGe,"STRONG",{});var qqt=s(D5e);NVr=r(qqt,"distilbert"),qqt.forEach(t),qVr=r(xGe," \u2014 "),bee=n(xGe,"A",{href:!0});var jqt=s(bee);jVr=r(jqt,"FlaxDistilBertForMaskedLM"),jqt.forEach(t),DVr=r(xGe," (DistilBERT model)"),xGe.forEach(t),GVr=i(qe),X3=n(qe,"LI",{});var $Ge=s(X3);G5e=n($Ge,"STRONG",{});var Dqt=s(G5e);OVr=r(Dqt,"electra"),Dqt.forEach(t),VVr=r($Ge," \u2014 "),vee=n($Ge,"A",{href:!0});var Gqt=s(vee);XVr=r(Gqt,"FlaxElectraForMaskedLM"),Gqt.forEach(t),zVr=r($Ge," (ELECTRA model)"),$Ge.forEach(t),QVr=i(qe),z3=n(qe,"LI",{});var kGe=s(z3);O5e=n(kGe,"STRONG",{});var Oqt=s(O5e);WVr=r(Oqt,"mbart"),Oqt.forEach(t),HVr=r(kGe," \u2014 "),Fee=n(kGe,"A",{href:!0});var Vqt=s(Fee);UVr=r(Vqt,"FlaxMBartForConditionalGeneration"),Vqt.forEach(t),JVr=r(kGe," (mBART model)"),kGe.forEach(t),YVr=i(qe),Q3=n(qe,"LI",{});var SGe=s(Q3);V5e=n(SGe,"STRONG",{});var Xqt=s(V5e);KVr=r(Xqt,"roberta"),Xqt.forEach(t),ZVr=r(SGe," \u2014 "),Tee=n(SGe,"A",{href:!0});var zqt=s(Tee);eXr=r(zqt,"FlaxRobertaForMaskedLM"),zqt.forEach(t),oXr=r(SGe," (RoBERTa model)"),SGe.forEach(t),rXr=i(qe),W3=n(qe,"LI",{});var RGe=s(W3);X5e=n(RGe,"STRONG",{});var Qqt=s(X5e);tXr=r(Qqt,"roformer"),Qqt.forEach(t),aXr=r(RGe," \u2014 "),Mee=n(RGe,"A",{href:!0});var Wqt=s(Mee);nXr=r(Wqt,"FlaxRoFormerForMaskedLM"),Wqt.forEach(t),sXr=r(RGe," (RoFormer model)"),RGe.forEach(t),lXr=i(qe),H3=n(qe,"LI",{});var PGe=s(H3);z5e=n(PGe,"STRONG",{});var Hqt=s(z5e);iXr=r(Hqt,"xlm-roberta"),Hqt.forEach(t),dXr=r(PGe," \u2014 "),Eee=n(PGe,"A",{href:!0});var Uqt=s(Eee);cXr=r(Uqt,"FlaxXLMRobertaForMaskedLM"),Uqt.forEach(t),fXr=r(PGe," (XLM-RoBERTa model)"),PGe.forEach(t),qe.forEach(t),mXr=i(si),T(U3.$$.fragment,si),si.forEach(t),ni.forEach(t),FXe=i(f),rf=n(f,"H2",{class:!0});var xQe=s(rf);J3=n(xQe,"A",{id:!0,class:!0,href:!0});var Jqt=s(J3);Q5e=n(Jqt,"SPAN",{});var Yqt=s(Q5e);T(d$.$$.fragment,Yqt),Yqt.forEach(t),Jqt.forEach(t),gXr=i(xQe),W5e=n(xQe,"SPAN",{});var Kqt=s(W5e);hXr=r(Kqt,"FlaxAutoModelForSeq2SeqLM"),Kqt.forEach(t),xQe.forEach(t),TXe=i(f),vr=n(f,"DIV",{class:!0});var li=s(vr);T(c$.$$.fragment,li),pXr=i(li),tf=n(li,"P",{});var Mte=s(tf);_Xr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cee=n(Mte,"A",{href:!0});var Zqt=s(Cee);uXr=r(Zqt,"from_pretrained()"),Zqt.forEach(t),bXr=r(Mte," class method or the "),wee=n(Mte,"A",{href:!0});var ejt=s(wee);vXr=r(ejt,"from_config()"),ejt.forEach(t),FXr=r(Mte,` class
method.`),Mte.forEach(t),TXr=i(li),f$=n(li,"P",{});var $Qe=s(f$);MXr=r($Qe,"This class cannot be instantiated directly using "),H5e=n($Qe,"CODE",{});var ojt=s(H5e);EXr=r(ojt,"__init__()"),ojt.forEach(t),CXr=r($Qe," (throws an error)."),$Qe.forEach(t),wXr=i(li),Ht=n(li,"DIV",{class:!0});var FL=s(Ht);T(m$.$$.fragment,FL),AXr=i(FL),U5e=n(FL,"P",{});var rjt=s(U5e);LXr=r(rjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rjt.forEach(t),yXr=i(FL),af=n(FL,"P",{});var Ete=s(af);xXr=r(Ete,`Note:
Loading a model from its configuration file does `),J5e=n(Ete,"STRONG",{});var tjt=s(J5e);$Xr=r(tjt,"not"),tjt.forEach(t),kXr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=n(Ete,"A",{href:!0});var ajt=s(Aee);SXr=r(ajt,"from_pretrained()"),ajt.forEach(t),RXr=r(Ete," to load the model weights."),Ete.forEach(t),PXr=i(FL),T(Y3.$$.fragment,FL),FL.forEach(t),BXr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(g$.$$.fragment,ii),IXr=i(ii),Y5e=n(ii,"P",{});var njt=s(Y5e);NXr=r(njt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),njt.forEach(t),qXr=i(ii),wn=n(ii,"P",{});var TL=s(wn);jXr=r(TL,"The model class to instantiate is selected based on the "),K5e=n(TL,"CODE",{});var sjt=s(K5e);DXr=r(sjt,"model_type"),sjt.forEach(t),GXr=r(TL,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(TL,"CODE",{});var ljt=s(Z5e);OXr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),VXr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(TL,"CODE",{});var ijt=s(e3e);XXr=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),zXr=r(TL,":"),TL.forEach(t),QXr=i(ii),ke=n(ii,"UL",{});var je=s(ke);K3=n(je,"LI",{});var BGe=s(K3);o3e=n(BGe,"STRONG",{});var djt=s(o3e);WXr=r(djt,"bart"),djt.forEach(t),HXr=r(BGe," \u2014 "),Lee=n(BGe,"A",{href:!0});var cjt=s(Lee);UXr=r(cjt,"FlaxBartForConditionalGeneration"),cjt.forEach(t),JXr=r(BGe," (BART model)"),BGe.forEach(t),YXr=i(je),Z3=n(je,"LI",{});var IGe=s(Z3);r3e=n(IGe,"STRONG",{});var fjt=s(r3e);KXr=r(fjt,"blenderbot"),fjt.forEach(t),ZXr=r(IGe," \u2014 "),yee=n(IGe,"A",{href:!0});var mjt=s(yee);ezr=r(mjt,"FlaxBlenderbotForConditionalGeneration"),mjt.forEach(t),ozr=r(IGe," (Blenderbot model)"),IGe.forEach(t),rzr=i(je),e0=n(je,"LI",{});var NGe=s(e0);t3e=n(NGe,"STRONG",{});var gjt=s(t3e);tzr=r(gjt,"blenderbot-small"),gjt.forEach(t),azr=r(NGe," \u2014 "),xee=n(NGe,"A",{href:!0});var hjt=s(xee);nzr=r(hjt,"FlaxBlenderbotSmallForConditionalGeneration"),hjt.forEach(t),szr=r(NGe," (BlenderbotSmall model)"),NGe.forEach(t),lzr=i(je),o0=n(je,"LI",{});var qGe=s(o0);a3e=n(qGe,"STRONG",{});var pjt=s(a3e);izr=r(pjt,"encoder-decoder"),pjt.forEach(t),dzr=r(qGe," \u2014 "),$ee=n(qGe,"A",{href:!0});var _jt=s($ee);czr=r(_jt,"FlaxEncoderDecoderModel"),_jt.forEach(t),fzr=r(qGe," (Encoder decoder model)"),qGe.forEach(t),mzr=i(je),r0=n(je,"LI",{});var jGe=s(r0);n3e=n(jGe,"STRONG",{});var ujt=s(n3e);gzr=r(ujt,"longt5"),ujt.forEach(t),hzr=r(jGe," \u2014 "),kee=n(jGe,"A",{href:!0});var bjt=s(kee);pzr=r(bjt,"FlaxLongT5ForConditionalGeneration"),bjt.forEach(t),_zr=r(jGe," (LongT5 model)"),jGe.forEach(t),uzr=i(je),t0=n(je,"LI",{});var DGe=s(t0);s3e=n(DGe,"STRONG",{});var vjt=s(s3e);bzr=r(vjt,"marian"),vjt.forEach(t),vzr=r(DGe," \u2014 "),See=n(DGe,"A",{href:!0});var Fjt=s(See);Fzr=r(Fjt,"FlaxMarianMTModel"),Fjt.forEach(t),Tzr=r(DGe," (Marian model)"),DGe.forEach(t),Mzr=i(je),a0=n(je,"LI",{});var GGe=s(a0);l3e=n(GGe,"STRONG",{});var Tjt=s(l3e);Ezr=r(Tjt,"mbart"),Tjt.forEach(t),Czr=r(GGe," \u2014 "),Ree=n(GGe,"A",{href:!0});var Mjt=s(Ree);wzr=r(Mjt,"FlaxMBartForConditionalGeneration"),Mjt.forEach(t),Azr=r(GGe," (mBART model)"),GGe.forEach(t),Lzr=i(je),n0=n(je,"LI",{});var OGe=s(n0);i3e=n(OGe,"STRONG",{});var Ejt=s(i3e);yzr=r(Ejt,"mt5"),Ejt.forEach(t),xzr=r(OGe," \u2014 "),Pee=n(OGe,"A",{href:!0});var Cjt=s(Pee);$zr=r(Cjt,"FlaxMT5ForConditionalGeneration"),Cjt.forEach(t),kzr=r(OGe," (MT5 model)"),OGe.forEach(t),Szr=i(je),s0=n(je,"LI",{});var VGe=s(s0);d3e=n(VGe,"STRONG",{});var wjt=s(d3e);Rzr=r(wjt,"pegasus"),wjt.forEach(t),Pzr=r(VGe," \u2014 "),Bee=n(VGe,"A",{href:!0});var Ajt=s(Bee);Bzr=r(Ajt,"FlaxPegasusForConditionalGeneration"),Ajt.forEach(t),Izr=r(VGe," (Pegasus model)"),VGe.forEach(t),Nzr=i(je),l0=n(je,"LI",{});var XGe=s(l0);c3e=n(XGe,"STRONG",{});var Ljt=s(c3e);qzr=r(Ljt,"t5"),Ljt.forEach(t),jzr=r(XGe," \u2014 "),Iee=n(XGe,"A",{href:!0});var yjt=s(Iee);Dzr=r(yjt,"FlaxT5ForConditionalGeneration"),yjt.forEach(t),Gzr=r(XGe," (T5 model)"),XGe.forEach(t),je.forEach(t),Ozr=i(ii),T(i0.$$.fragment,ii),ii.forEach(t),li.forEach(t),MXe=i(f),nf=n(f,"H2",{class:!0});var kQe=s(nf);d0=n(kQe,"A",{id:!0,class:!0,href:!0});var xjt=s(d0);f3e=n(xjt,"SPAN",{});var $jt=s(f3e);T(h$.$$.fragment,$jt),$jt.forEach(t),xjt.forEach(t),Vzr=i(kQe),m3e=n(kQe,"SPAN",{});var kjt=s(m3e);Xzr=r(kjt,"FlaxAutoModelForSequenceClassification"),kjt.forEach(t),kQe.forEach(t),EXe=i(f),Fr=n(f,"DIV",{class:!0});var di=s(Fr);T(p$.$$.fragment,di),zzr=i(di),sf=n(di,"P",{});var Cte=s(sf);Qzr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nee=n(Cte,"A",{href:!0});var Sjt=s(Nee);Wzr=r(Sjt,"from_pretrained()"),Sjt.forEach(t),Hzr=r(Cte," class method or the "),qee=n(Cte,"A",{href:!0});var Rjt=s(qee);Uzr=r(Rjt,"from_config()"),Rjt.forEach(t),Jzr=r(Cte,` class
method.`),Cte.forEach(t),Yzr=i(di),_$=n(di,"P",{});var SQe=s(_$);Kzr=r(SQe,"This class cannot be instantiated directly using "),g3e=n(SQe,"CODE",{});var Pjt=s(g3e);Zzr=r(Pjt,"__init__()"),Pjt.forEach(t),eQr=r(SQe," (throws an error)."),SQe.forEach(t),oQr=i(di),Ut=n(di,"DIV",{class:!0});var ML=s(Ut);T(u$.$$.fragment,ML),rQr=i(ML),h3e=n(ML,"P",{});var Bjt=s(h3e);tQr=r(Bjt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bjt.forEach(t),aQr=i(ML),lf=n(ML,"P",{});var wte=s(lf);nQr=r(wte,`Note:
Loading a model from its configuration file does `),p3e=n(wte,"STRONG",{});var Ijt=s(p3e);sQr=r(Ijt,"not"),Ijt.forEach(t),lQr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(wte,"A",{href:!0});var Njt=s(jee);iQr=r(Njt,"from_pretrained()"),Njt.forEach(t),dQr=r(wte," to load the model weights."),wte.forEach(t),cQr=i(ML),T(c0.$$.fragment,ML),ML.forEach(t),fQr=i(di),Hr=n(di,"DIV",{class:!0});var ci=s(Hr);T(b$.$$.fragment,ci),mQr=i(ci),_3e=n(ci,"P",{});var qjt=s(_3e);gQr=r(qjt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qjt.forEach(t),hQr=i(ci),An=n(ci,"P",{});var EL=s(An);pQr=r(EL,"The model class to instantiate is selected based on the "),u3e=n(EL,"CODE",{});var jjt=s(u3e);_Qr=r(jjt,"model_type"),jjt.forEach(t),uQr=r(EL,` property of the config object (either
passed as an argument or loaded from `),b3e=n(EL,"CODE",{});var Djt=s(b3e);bQr=r(Djt,"pretrained_model_name_or_path"),Djt.forEach(t),vQr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=n(EL,"CODE",{});var Gjt=s(v3e);FQr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),TQr=r(EL,":"),EL.forEach(t),MQr=i(ci),Se=n(ci,"UL",{});var De=s(Se);f0=n(De,"LI",{});var zGe=s(f0);F3e=n(zGe,"STRONG",{});var Ojt=s(F3e);EQr=r(Ojt,"albert"),Ojt.forEach(t),CQr=r(zGe," \u2014 "),Dee=n(zGe,"A",{href:!0});var Vjt=s(Dee);wQr=r(Vjt,"FlaxAlbertForSequenceClassification"),Vjt.forEach(t),AQr=r(zGe," (ALBERT model)"),zGe.forEach(t),LQr=i(De),m0=n(De,"LI",{});var QGe=s(m0);T3e=n(QGe,"STRONG",{});var Xjt=s(T3e);yQr=r(Xjt,"bart"),Xjt.forEach(t),xQr=r(QGe," \u2014 "),Gee=n(QGe,"A",{href:!0});var zjt=s(Gee);$Qr=r(zjt,"FlaxBartForSequenceClassification"),zjt.forEach(t),kQr=r(QGe," (BART model)"),QGe.forEach(t),SQr=i(De),g0=n(De,"LI",{});var WGe=s(g0);M3e=n(WGe,"STRONG",{});var Qjt=s(M3e);RQr=r(Qjt,"bert"),Qjt.forEach(t),PQr=r(WGe," \u2014 "),Oee=n(WGe,"A",{href:!0});var Wjt=s(Oee);BQr=r(Wjt,"FlaxBertForSequenceClassification"),Wjt.forEach(t),IQr=r(WGe," (BERT model)"),WGe.forEach(t),NQr=i(De),h0=n(De,"LI",{});var HGe=s(h0);E3e=n(HGe,"STRONG",{});var Hjt=s(E3e);qQr=r(Hjt,"big_bird"),Hjt.forEach(t),jQr=r(HGe," \u2014 "),Vee=n(HGe,"A",{href:!0});var Ujt=s(Vee);DQr=r(Ujt,"FlaxBigBirdForSequenceClassification"),Ujt.forEach(t),GQr=r(HGe," (BigBird model)"),HGe.forEach(t),OQr=i(De),p0=n(De,"LI",{});var UGe=s(p0);C3e=n(UGe,"STRONG",{});var Jjt=s(C3e);VQr=r(Jjt,"distilbert"),Jjt.forEach(t),XQr=r(UGe," \u2014 "),Xee=n(UGe,"A",{href:!0});var Yjt=s(Xee);zQr=r(Yjt,"FlaxDistilBertForSequenceClassification"),Yjt.forEach(t),QQr=r(UGe," (DistilBERT model)"),UGe.forEach(t),WQr=i(De),_0=n(De,"LI",{});var JGe=s(_0);w3e=n(JGe,"STRONG",{});var Kjt=s(w3e);HQr=r(Kjt,"electra"),Kjt.forEach(t),UQr=r(JGe," \u2014 "),zee=n(JGe,"A",{href:!0});var Zjt=s(zee);JQr=r(Zjt,"FlaxElectraForSequenceClassification"),Zjt.forEach(t),YQr=r(JGe," (ELECTRA model)"),JGe.forEach(t),KQr=i(De),u0=n(De,"LI",{});var YGe=s(u0);A3e=n(YGe,"STRONG",{});var eDt=s(A3e);ZQr=r(eDt,"mbart"),eDt.forEach(t),eWr=r(YGe," \u2014 "),Qee=n(YGe,"A",{href:!0});var oDt=s(Qee);oWr=r(oDt,"FlaxMBartForSequenceClassification"),oDt.forEach(t),rWr=r(YGe," (mBART model)"),YGe.forEach(t),tWr=i(De),b0=n(De,"LI",{});var KGe=s(b0);L3e=n(KGe,"STRONG",{});var rDt=s(L3e);aWr=r(rDt,"roberta"),rDt.forEach(t),nWr=r(KGe," \u2014 "),Wee=n(KGe,"A",{href:!0});var tDt=s(Wee);sWr=r(tDt,"FlaxRobertaForSequenceClassification"),tDt.forEach(t),lWr=r(KGe," (RoBERTa model)"),KGe.forEach(t),iWr=i(De),v0=n(De,"LI",{});var ZGe=s(v0);y3e=n(ZGe,"STRONG",{});var aDt=s(y3e);dWr=r(aDt,"roformer"),aDt.forEach(t),cWr=r(ZGe," \u2014 "),Hee=n(ZGe,"A",{href:!0});var nDt=s(Hee);fWr=r(nDt,"FlaxRoFormerForSequenceClassification"),nDt.forEach(t),mWr=r(ZGe," (RoFormer model)"),ZGe.forEach(t),gWr=i(De),F0=n(De,"LI",{});var eOe=s(F0);x3e=n(eOe,"STRONG",{});var sDt=s(x3e);hWr=r(sDt,"xlm-roberta"),sDt.forEach(t),pWr=r(eOe," \u2014 "),Uee=n(eOe,"A",{href:!0});var lDt=s(Uee);_Wr=r(lDt,"FlaxXLMRobertaForSequenceClassification"),lDt.forEach(t),uWr=r(eOe," (XLM-RoBERTa model)"),eOe.forEach(t),De.forEach(t),bWr=i(ci),T(T0.$$.fragment,ci),ci.forEach(t),di.forEach(t),CXe=i(f),df=n(f,"H2",{class:!0});var RQe=s(df);M0=n(RQe,"A",{id:!0,class:!0,href:!0});var iDt=s(M0);$3e=n(iDt,"SPAN",{});var dDt=s($3e);T(v$.$$.fragment,dDt),dDt.forEach(t),iDt.forEach(t),vWr=i(RQe),k3e=n(RQe,"SPAN",{});var cDt=s(k3e);FWr=r(cDt,"FlaxAutoModelForQuestionAnswering"),cDt.forEach(t),RQe.forEach(t),wXe=i(f),Tr=n(f,"DIV",{class:!0});var fi=s(Tr);T(F$.$$.fragment,fi),TWr=i(fi),cf=n(fi,"P",{});var Ate=s(cf);MWr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jee=n(Ate,"A",{href:!0});var fDt=s(Jee);EWr=r(fDt,"from_pretrained()"),fDt.forEach(t),CWr=r(Ate," class method or the "),Yee=n(Ate,"A",{href:!0});var mDt=s(Yee);wWr=r(mDt,"from_config()"),mDt.forEach(t),AWr=r(Ate,` class
method.`),Ate.forEach(t),LWr=i(fi),T$=n(fi,"P",{});var PQe=s(T$);yWr=r(PQe,"This class cannot be instantiated directly using "),S3e=n(PQe,"CODE",{});var gDt=s(S3e);xWr=r(gDt,"__init__()"),gDt.forEach(t),$Wr=r(PQe," (throws an error)."),PQe.forEach(t),kWr=i(fi),Jt=n(fi,"DIV",{class:!0});var CL=s(Jt);T(M$.$$.fragment,CL),SWr=i(CL),R3e=n(CL,"P",{});var hDt=s(R3e);RWr=r(hDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hDt.forEach(t),PWr=i(CL),ff=n(CL,"P",{});var Lte=s(ff);BWr=r(Lte,`Note:
Loading a model from its configuration file does `),P3e=n(Lte,"STRONG",{});var pDt=s(P3e);IWr=r(pDt,"not"),pDt.forEach(t),NWr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Lte,"A",{href:!0});var _Dt=s(Kee);qWr=r(_Dt,"from_pretrained()"),_Dt.forEach(t),jWr=r(Lte," to load the model weights."),Lte.forEach(t),DWr=i(CL),T(E0.$$.fragment,CL),CL.forEach(t),GWr=i(fi),Ur=n(fi,"DIV",{class:!0});var mi=s(Ur);T(E$.$$.fragment,mi),OWr=i(mi),B3e=n(mi,"P",{});var uDt=s(B3e);VWr=r(uDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uDt.forEach(t),XWr=i(mi),Ln=n(mi,"P",{});var wL=s(Ln);zWr=r(wL,"The model class to instantiate is selected based on the "),I3e=n(wL,"CODE",{});var bDt=s(I3e);QWr=r(bDt,"model_type"),bDt.forEach(t),WWr=r(wL,` property of the config object (either
passed as an argument or loaded from `),N3e=n(wL,"CODE",{});var vDt=s(N3e);HWr=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),UWr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=n(wL,"CODE",{});var FDt=s(q3e);JWr=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),YWr=r(wL,":"),wL.forEach(t),KWr=i(mi),Re=n(mi,"UL",{});var Ge=s(Re);C0=n(Ge,"LI",{});var oOe=s(C0);j3e=n(oOe,"STRONG",{});var TDt=s(j3e);ZWr=r(TDt,"albert"),TDt.forEach(t),eHr=r(oOe," \u2014 "),Zee=n(oOe,"A",{href:!0});var MDt=s(Zee);oHr=r(MDt,"FlaxAlbertForQuestionAnswering"),MDt.forEach(t),rHr=r(oOe," (ALBERT model)"),oOe.forEach(t),tHr=i(Ge),w0=n(Ge,"LI",{});var rOe=s(w0);D3e=n(rOe,"STRONG",{});var EDt=s(D3e);aHr=r(EDt,"bart"),EDt.forEach(t),nHr=r(rOe," \u2014 "),eoe=n(rOe,"A",{href:!0});var CDt=s(eoe);sHr=r(CDt,"FlaxBartForQuestionAnswering"),CDt.forEach(t),lHr=r(rOe," (BART model)"),rOe.forEach(t),iHr=i(Ge),A0=n(Ge,"LI",{});var tOe=s(A0);G3e=n(tOe,"STRONG",{});var wDt=s(G3e);dHr=r(wDt,"bert"),wDt.forEach(t),cHr=r(tOe," \u2014 "),ooe=n(tOe,"A",{href:!0});var ADt=s(ooe);fHr=r(ADt,"FlaxBertForQuestionAnswering"),ADt.forEach(t),mHr=r(tOe," (BERT model)"),tOe.forEach(t),gHr=i(Ge),L0=n(Ge,"LI",{});var aOe=s(L0);O3e=n(aOe,"STRONG",{});var LDt=s(O3e);hHr=r(LDt,"big_bird"),LDt.forEach(t),pHr=r(aOe," \u2014 "),roe=n(aOe,"A",{href:!0});var yDt=s(roe);_Hr=r(yDt,"FlaxBigBirdForQuestionAnswering"),yDt.forEach(t),uHr=r(aOe," (BigBird model)"),aOe.forEach(t),bHr=i(Ge),y0=n(Ge,"LI",{});var nOe=s(y0);V3e=n(nOe,"STRONG",{});var xDt=s(V3e);vHr=r(xDt,"distilbert"),xDt.forEach(t),FHr=r(nOe," \u2014 "),toe=n(nOe,"A",{href:!0});var $Dt=s(toe);THr=r($Dt,"FlaxDistilBertForQuestionAnswering"),$Dt.forEach(t),MHr=r(nOe," (DistilBERT model)"),nOe.forEach(t),EHr=i(Ge),x0=n(Ge,"LI",{});var sOe=s(x0);X3e=n(sOe,"STRONG",{});var kDt=s(X3e);CHr=r(kDt,"electra"),kDt.forEach(t),wHr=r(sOe," \u2014 "),aoe=n(sOe,"A",{href:!0});var SDt=s(aoe);AHr=r(SDt,"FlaxElectraForQuestionAnswering"),SDt.forEach(t),LHr=r(sOe," (ELECTRA model)"),sOe.forEach(t),yHr=i(Ge),$0=n(Ge,"LI",{});var lOe=s($0);z3e=n(lOe,"STRONG",{});var RDt=s(z3e);xHr=r(RDt,"mbart"),RDt.forEach(t),$Hr=r(lOe," \u2014 "),noe=n(lOe,"A",{href:!0});var PDt=s(noe);kHr=r(PDt,"FlaxMBartForQuestionAnswering"),PDt.forEach(t),SHr=r(lOe," (mBART model)"),lOe.forEach(t),RHr=i(Ge),k0=n(Ge,"LI",{});var iOe=s(k0);Q3e=n(iOe,"STRONG",{});var BDt=s(Q3e);PHr=r(BDt,"roberta"),BDt.forEach(t),BHr=r(iOe," \u2014 "),soe=n(iOe,"A",{href:!0});var IDt=s(soe);IHr=r(IDt,"FlaxRobertaForQuestionAnswering"),IDt.forEach(t),NHr=r(iOe," (RoBERTa model)"),iOe.forEach(t),qHr=i(Ge),S0=n(Ge,"LI",{});var dOe=s(S0);W3e=n(dOe,"STRONG",{});var NDt=s(W3e);jHr=r(NDt,"roformer"),NDt.forEach(t),DHr=r(dOe," \u2014 "),loe=n(dOe,"A",{href:!0});var qDt=s(loe);GHr=r(qDt,"FlaxRoFormerForQuestionAnswering"),qDt.forEach(t),OHr=r(dOe," (RoFormer model)"),dOe.forEach(t),VHr=i(Ge),R0=n(Ge,"LI",{});var cOe=s(R0);H3e=n(cOe,"STRONG",{});var jDt=s(H3e);XHr=r(jDt,"xlm-roberta"),jDt.forEach(t),zHr=r(cOe," \u2014 "),ioe=n(cOe,"A",{href:!0});var DDt=s(ioe);QHr=r(DDt,"FlaxXLMRobertaForQuestionAnswering"),DDt.forEach(t),WHr=r(cOe," (XLM-RoBERTa model)"),cOe.forEach(t),Ge.forEach(t),HHr=i(mi),T(P0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),AXe=i(f),mf=n(f,"H2",{class:!0});var BQe=s(mf);B0=n(BQe,"A",{id:!0,class:!0,href:!0});var GDt=s(B0);U3e=n(GDt,"SPAN",{});var ODt=s(U3e);T(C$.$$.fragment,ODt),ODt.forEach(t),GDt.forEach(t),UHr=i(BQe),J3e=n(BQe,"SPAN",{});var VDt=s(J3e);JHr=r(VDt,"FlaxAutoModelForTokenClassification"),VDt.forEach(t),BQe.forEach(t),LXe=i(f),Mr=n(f,"DIV",{class:!0});var gi=s(Mr);T(w$.$$.fragment,gi),YHr=i(gi),gf=n(gi,"P",{});var yte=s(gf);KHr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),doe=n(yte,"A",{href:!0});var XDt=s(doe);ZHr=r(XDt,"from_pretrained()"),XDt.forEach(t),eUr=r(yte," class method or the "),coe=n(yte,"A",{href:!0});var zDt=s(coe);oUr=r(zDt,"from_config()"),zDt.forEach(t),rUr=r(yte,` class
method.`),yte.forEach(t),tUr=i(gi),A$=n(gi,"P",{});var IQe=s(A$);aUr=r(IQe,"This class cannot be instantiated directly using "),Y3e=n(IQe,"CODE",{});var QDt=s(Y3e);nUr=r(QDt,"__init__()"),QDt.forEach(t),sUr=r(IQe," (throws an error)."),IQe.forEach(t),lUr=i(gi),Yt=n(gi,"DIV",{class:!0});var AL=s(Yt);T(L$.$$.fragment,AL),iUr=i(AL),K3e=n(AL,"P",{});var WDt=s(K3e);dUr=r(WDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WDt.forEach(t),cUr=i(AL),hf=n(AL,"P",{});var xte=s(hf);fUr=r(xte,`Note:
Loading a model from its configuration file does `),Z3e=n(xte,"STRONG",{});var HDt=s(Z3e);mUr=r(HDt,"not"),HDt.forEach(t),gUr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),foe=n(xte,"A",{href:!0});var UDt=s(foe);hUr=r(UDt,"from_pretrained()"),UDt.forEach(t),pUr=r(xte," to load the model weights."),xte.forEach(t),_Ur=i(AL),T(I0.$$.fragment,AL),AL.forEach(t),uUr=i(gi),Jr=n(gi,"DIV",{class:!0});var hi=s(Jr);T(y$.$$.fragment,hi),bUr=i(hi),e0e=n(hi,"P",{});var JDt=s(e0e);vUr=r(JDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JDt.forEach(t),FUr=i(hi),yn=n(hi,"P",{});var LL=s(yn);TUr=r(LL,"The model class to instantiate is selected based on the "),o0e=n(LL,"CODE",{});var YDt=s(o0e);MUr=r(YDt,"model_type"),YDt.forEach(t),EUr=r(LL,` property of the config object (either
passed as an argument or loaded from `),r0e=n(LL,"CODE",{});var KDt=s(r0e);CUr=r(KDt,"pretrained_model_name_or_path"),KDt.forEach(t),wUr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t0e=n(LL,"CODE",{});var ZDt=s(t0e);AUr=r(ZDt,"pretrained_model_name_or_path"),ZDt.forEach(t),LUr=r(LL,":"),LL.forEach(t),yUr=i(hi),Ve=n(hi,"UL",{});var To=s(Ve);N0=n(To,"LI",{});var fOe=s(N0);a0e=n(fOe,"STRONG",{});var eGt=s(a0e);xUr=r(eGt,"albert"),eGt.forEach(t),$Ur=r(fOe," \u2014 "),moe=n(fOe,"A",{href:!0});var oGt=s(moe);kUr=r(oGt,"FlaxAlbertForTokenClassification"),oGt.forEach(t),SUr=r(fOe," (ALBERT model)"),fOe.forEach(t),RUr=i(To),q0=n(To,"LI",{});var mOe=s(q0);n0e=n(mOe,"STRONG",{});var rGt=s(n0e);PUr=r(rGt,"bert"),rGt.forEach(t),BUr=r(mOe," \u2014 "),goe=n(mOe,"A",{href:!0});var tGt=s(goe);IUr=r(tGt,"FlaxBertForTokenClassification"),tGt.forEach(t),NUr=r(mOe," (BERT model)"),mOe.forEach(t),qUr=i(To),j0=n(To,"LI",{});var gOe=s(j0);s0e=n(gOe,"STRONG",{});var aGt=s(s0e);jUr=r(aGt,"big_bird"),aGt.forEach(t),DUr=r(gOe," \u2014 "),hoe=n(gOe,"A",{href:!0});var nGt=s(hoe);GUr=r(nGt,"FlaxBigBirdForTokenClassification"),nGt.forEach(t),OUr=r(gOe," (BigBird model)"),gOe.forEach(t),VUr=i(To),D0=n(To,"LI",{});var hOe=s(D0);l0e=n(hOe,"STRONG",{});var sGt=s(l0e);XUr=r(sGt,"distilbert"),sGt.forEach(t),zUr=r(hOe," \u2014 "),poe=n(hOe,"A",{href:!0});var lGt=s(poe);QUr=r(lGt,"FlaxDistilBertForTokenClassification"),lGt.forEach(t),WUr=r(hOe," (DistilBERT model)"),hOe.forEach(t),HUr=i(To),G0=n(To,"LI",{});var pOe=s(G0);i0e=n(pOe,"STRONG",{});var iGt=s(i0e);UUr=r(iGt,"electra"),iGt.forEach(t),JUr=r(pOe," \u2014 "),_oe=n(pOe,"A",{href:!0});var dGt=s(_oe);YUr=r(dGt,"FlaxElectraForTokenClassification"),dGt.forEach(t),KUr=r(pOe," (ELECTRA model)"),pOe.forEach(t),ZUr=i(To),O0=n(To,"LI",{});var _Oe=s(O0);d0e=n(_Oe,"STRONG",{});var cGt=s(d0e);eJr=r(cGt,"roberta"),cGt.forEach(t),oJr=r(_Oe," \u2014 "),uoe=n(_Oe,"A",{href:!0});var fGt=s(uoe);rJr=r(fGt,"FlaxRobertaForTokenClassification"),fGt.forEach(t),tJr=r(_Oe," (RoBERTa model)"),_Oe.forEach(t),aJr=i(To),V0=n(To,"LI",{});var uOe=s(V0);c0e=n(uOe,"STRONG",{});var mGt=s(c0e);nJr=r(mGt,"roformer"),mGt.forEach(t),sJr=r(uOe," \u2014 "),boe=n(uOe,"A",{href:!0});var gGt=s(boe);lJr=r(gGt,"FlaxRoFormerForTokenClassification"),gGt.forEach(t),iJr=r(uOe," (RoFormer model)"),uOe.forEach(t),dJr=i(To),X0=n(To,"LI",{});var bOe=s(X0);f0e=n(bOe,"STRONG",{});var hGt=s(f0e);cJr=r(hGt,"xlm-roberta"),hGt.forEach(t),fJr=r(bOe," \u2014 "),voe=n(bOe,"A",{href:!0});var pGt=s(voe);mJr=r(pGt,"FlaxXLMRobertaForTokenClassification"),pGt.forEach(t),gJr=r(bOe," (XLM-RoBERTa model)"),bOe.forEach(t),To.forEach(t),hJr=i(hi),T(z0.$$.fragment,hi),hi.forEach(t),gi.forEach(t),yXe=i(f),pf=n(f,"H2",{class:!0});var NQe=s(pf);Q0=n(NQe,"A",{id:!0,class:!0,href:!0});var _Gt=s(Q0);m0e=n(_Gt,"SPAN",{});var uGt=s(m0e);T(x$.$$.fragment,uGt),uGt.forEach(t),_Gt.forEach(t),pJr=i(NQe),g0e=n(NQe,"SPAN",{});var bGt=s(g0e);_Jr=r(bGt,"FlaxAutoModelForMultipleChoice"),bGt.forEach(t),NQe.forEach(t),xXe=i(f),Er=n(f,"DIV",{class:!0});var pi=s(Er);T($$.$$.fragment,pi),uJr=i(pi),_f=n(pi,"P",{});var $te=s(_f);bJr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Foe=n($te,"A",{href:!0});var vGt=s(Foe);vJr=r(vGt,"from_pretrained()"),vGt.forEach(t),FJr=r($te," class method or the "),Toe=n($te,"A",{href:!0});var FGt=s(Toe);TJr=r(FGt,"from_config()"),FGt.forEach(t),MJr=r($te,` class
method.`),$te.forEach(t),EJr=i(pi),k$=n(pi,"P",{});var qQe=s(k$);CJr=r(qQe,"This class cannot be instantiated directly using "),h0e=n(qQe,"CODE",{});var TGt=s(h0e);wJr=r(TGt,"__init__()"),TGt.forEach(t),AJr=r(qQe," (throws an error)."),qQe.forEach(t),LJr=i(pi),Kt=n(pi,"DIV",{class:!0});var yL=s(Kt);T(S$.$$.fragment,yL),yJr=i(yL),p0e=n(yL,"P",{});var MGt=s(p0e);xJr=r(MGt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MGt.forEach(t),$Jr=i(yL),uf=n(yL,"P",{});var kte=s(uf);kJr=r(kte,`Note:
Loading a model from its configuration file does `),_0e=n(kte,"STRONG",{});var EGt=s(_0e);SJr=r(EGt,"not"),EGt.forEach(t),RJr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n(kte,"A",{href:!0});var CGt=s(Moe);PJr=r(CGt,"from_pretrained()"),CGt.forEach(t),BJr=r(kte," to load the model weights."),kte.forEach(t),IJr=i(yL),T(W0.$$.fragment,yL),yL.forEach(t),NJr=i(pi),Yr=n(pi,"DIV",{class:!0});var _i=s(Yr);T(R$.$$.fragment,_i),qJr=i(_i),u0e=n(_i,"P",{});var wGt=s(u0e);jJr=r(wGt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wGt.forEach(t),DJr=i(_i),xn=n(_i,"P",{});var xL=s(xn);GJr=r(xL,"The model class to instantiate is selected based on the "),b0e=n(xL,"CODE",{});var AGt=s(b0e);OJr=r(AGt,"model_type"),AGt.forEach(t),VJr=r(xL,` property of the config object (either
passed as an argument or loaded from `),v0e=n(xL,"CODE",{});var LGt=s(v0e);XJr=r(LGt,"pretrained_model_name_or_path"),LGt.forEach(t),zJr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(xL,"CODE",{});var yGt=s(F0e);QJr=r(yGt,"pretrained_model_name_or_path"),yGt.forEach(t),WJr=r(xL,":"),xL.forEach(t),HJr=i(_i),Xe=n(_i,"UL",{});var Mo=s(Xe);H0=n(Mo,"LI",{});var vOe=s(H0);T0e=n(vOe,"STRONG",{});var xGt=s(T0e);UJr=r(xGt,"albert"),xGt.forEach(t),JJr=r(vOe," \u2014 "),Eoe=n(vOe,"A",{href:!0});var $Gt=s(Eoe);YJr=r($Gt,"FlaxAlbertForMultipleChoice"),$Gt.forEach(t),KJr=r(vOe," (ALBERT model)"),vOe.forEach(t),ZJr=i(Mo),U0=n(Mo,"LI",{});var FOe=s(U0);M0e=n(FOe,"STRONG",{});var kGt=s(M0e);eYr=r(kGt,"bert"),kGt.forEach(t),oYr=r(FOe," \u2014 "),Coe=n(FOe,"A",{href:!0});var SGt=s(Coe);rYr=r(SGt,"FlaxBertForMultipleChoice"),SGt.forEach(t),tYr=r(FOe," (BERT model)"),FOe.forEach(t),aYr=i(Mo),J0=n(Mo,"LI",{});var TOe=s(J0);E0e=n(TOe,"STRONG",{});var RGt=s(E0e);nYr=r(RGt,"big_bird"),RGt.forEach(t),sYr=r(TOe," \u2014 "),woe=n(TOe,"A",{href:!0});var PGt=s(woe);lYr=r(PGt,"FlaxBigBirdForMultipleChoice"),PGt.forEach(t),iYr=r(TOe," (BigBird model)"),TOe.forEach(t),dYr=i(Mo),Y0=n(Mo,"LI",{});var MOe=s(Y0);C0e=n(MOe,"STRONG",{});var BGt=s(C0e);cYr=r(BGt,"distilbert"),BGt.forEach(t),fYr=r(MOe," \u2014 "),Aoe=n(MOe,"A",{href:!0});var IGt=s(Aoe);mYr=r(IGt,"FlaxDistilBertForMultipleChoice"),IGt.forEach(t),gYr=r(MOe," (DistilBERT model)"),MOe.forEach(t),hYr=i(Mo),K0=n(Mo,"LI",{});var EOe=s(K0);w0e=n(EOe,"STRONG",{});var NGt=s(w0e);pYr=r(NGt,"electra"),NGt.forEach(t),_Yr=r(EOe," \u2014 "),Loe=n(EOe,"A",{href:!0});var qGt=s(Loe);uYr=r(qGt,"FlaxElectraForMultipleChoice"),qGt.forEach(t),bYr=r(EOe," (ELECTRA model)"),EOe.forEach(t),vYr=i(Mo),Z0=n(Mo,"LI",{});var COe=s(Z0);A0e=n(COe,"STRONG",{});var jGt=s(A0e);FYr=r(jGt,"roberta"),jGt.forEach(t),TYr=r(COe," \u2014 "),yoe=n(COe,"A",{href:!0});var DGt=s(yoe);MYr=r(DGt,"FlaxRobertaForMultipleChoice"),DGt.forEach(t),EYr=r(COe," (RoBERTa model)"),COe.forEach(t),CYr=i(Mo),ew=n(Mo,"LI",{});var wOe=s(ew);L0e=n(wOe,"STRONG",{});var GGt=s(L0e);wYr=r(GGt,"roformer"),GGt.forEach(t),AYr=r(wOe," \u2014 "),xoe=n(wOe,"A",{href:!0});var OGt=s(xoe);LYr=r(OGt,"FlaxRoFormerForMultipleChoice"),OGt.forEach(t),yYr=r(wOe," (RoFormer model)"),wOe.forEach(t),xYr=i(Mo),ow=n(Mo,"LI",{});var AOe=s(ow);y0e=n(AOe,"STRONG",{});var VGt=s(y0e);$Yr=r(VGt,"xlm-roberta"),VGt.forEach(t),kYr=r(AOe," \u2014 "),$oe=n(AOe,"A",{href:!0});var XGt=s($oe);SYr=r(XGt,"FlaxXLMRobertaForMultipleChoice"),XGt.forEach(t),RYr=r(AOe," (XLM-RoBERTa model)"),AOe.forEach(t),Mo.forEach(t),PYr=i(_i),T(rw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),$Xe=i(f),bf=n(f,"H2",{class:!0});var jQe=s(bf);tw=n(jQe,"A",{id:!0,class:!0,href:!0});var zGt=s(tw);x0e=n(zGt,"SPAN",{});var QGt=s(x0e);T(P$.$$.fragment,QGt),QGt.forEach(t),zGt.forEach(t),BYr=i(jQe),$0e=n(jQe,"SPAN",{});var WGt=s($0e);IYr=r(WGt,"FlaxAutoModelForNextSentencePrediction"),WGt.forEach(t),jQe.forEach(t),kXe=i(f),Cr=n(f,"DIV",{class:!0});var ui=s(Cr);T(B$.$$.fragment,ui),NYr=i(ui),vf=n(ui,"P",{});var Ste=s(vf);qYr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),koe=n(Ste,"A",{href:!0});var HGt=s(koe);jYr=r(HGt,"from_pretrained()"),HGt.forEach(t),DYr=r(Ste," class method or the "),Soe=n(Ste,"A",{href:!0});var UGt=s(Soe);GYr=r(UGt,"from_config()"),UGt.forEach(t),OYr=r(Ste,` class
method.`),Ste.forEach(t),VYr=i(ui),I$=n(ui,"P",{});var DQe=s(I$);XYr=r(DQe,"This class cannot be instantiated directly using "),k0e=n(DQe,"CODE",{});var JGt=s(k0e);zYr=r(JGt,"__init__()"),JGt.forEach(t),QYr=r(DQe," (throws an error)."),DQe.forEach(t),WYr=i(ui),Zt=n(ui,"DIV",{class:!0});var $L=s(Zt);T(N$.$$.fragment,$L),HYr=i($L),S0e=n($L,"P",{});var YGt=s(S0e);UYr=r(YGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YGt.forEach(t),JYr=i($L),Ff=n($L,"P",{});var Rte=s(Ff);YYr=r(Rte,`Note:
Loading a model from its configuration file does `),R0e=n(Rte,"STRONG",{});var KGt=s(R0e);KYr=r(KGt,"not"),KGt.forEach(t),ZYr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(Rte,"A",{href:!0});var ZGt=s(Roe);eKr=r(ZGt,"from_pretrained()"),ZGt.forEach(t),oKr=r(Rte," to load the model weights."),Rte.forEach(t),rKr=i($L),T(aw.$$.fragment,$L),$L.forEach(t),tKr=i(ui),Kr=n(ui,"DIV",{class:!0});var bi=s(Kr);T(q$.$$.fragment,bi),aKr=i(bi),P0e=n(bi,"P",{});var eOt=s(P0e);nKr=r(eOt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eOt.forEach(t),sKr=i(bi),$n=n(bi,"P",{});var kL=s($n);lKr=r(kL,"The model class to instantiate is selected based on the "),B0e=n(kL,"CODE",{});var oOt=s(B0e);iKr=r(oOt,"model_type"),oOt.forEach(t),dKr=r(kL,` property of the config object (either
passed as an argument or loaded from `),I0e=n(kL,"CODE",{});var rOt=s(I0e);cKr=r(rOt,"pretrained_model_name_or_path"),rOt.forEach(t),fKr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(kL,"CODE",{});var tOt=s(N0e);mKr=r(tOt,"pretrained_model_name_or_path"),tOt.forEach(t),gKr=r(kL,":"),kL.forEach(t),hKr=i(bi),q0e=n(bi,"UL",{});var aOt=s(q0e);nw=n(aOt,"LI",{});var LOe=s(nw);j0e=n(LOe,"STRONG",{});var nOt=s(j0e);pKr=r(nOt,"bert"),nOt.forEach(t),_Kr=r(LOe," \u2014 "),Poe=n(LOe,"A",{href:!0});var sOt=s(Poe);uKr=r(sOt,"FlaxBertForNextSentencePrediction"),sOt.forEach(t),bKr=r(LOe," (BERT model)"),LOe.forEach(t),aOt.forEach(t),vKr=i(bi),T(sw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),SXe=i(f),Tf=n(f,"H2",{class:!0});var GQe=s(Tf);lw=n(GQe,"A",{id:!0,class:!0,href:!0});var lOt=s(lw);D0e=n(lOt,"SPAN",{});var iOt=s(D0e);T(j$.$$.fragment,iOt),iOt.forEach(t),lOt.forEach(t),FKr=i(GQe),G0e=n(GQe,"SPAN",{});var dOt=s(G0e);TKr=r(dOt,"FlaxAutoModelForImageClassification"),dOt.forEach(t),GQe.forEach(t),RXe=i(f),wr=n(f,"DIV",{class:!0});var vi=s(wr);T(D$.$$.fragment,vi),MKr=i(vi),Mf=n(vi,"P",{});var Pte=s(Mf);EKr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Boe=n(Pte,"A",{href:!0});var cOt=s(Boe);CKr=r(cOt,"from_pretrained()"),cOt.forEach(t),wKr=r(Pte," class method or the "),Ioe=n(Pte,"A",{href:!0});var fOt=s(Ioe);AKr=r(fOt,"from_config()"),fOt.forEach(t),LKr=r(Pte,` class
method.`),Pte.forEach(t),yKr=i(vi),G$=n(vi,"P",{});var OQe=s(G$);xKr=r(OQe,"This class cannot be instantiated directly using "),O0e=n(OQe,"CODE",{});var mOt=s(O0e);$Kr=r(mOt,"__init__()"),mOt.forEach(t),kKr=r(OQe," (throws an error)."),OQe.forEach(t),SKr=i(vi),ea=n(vi,"DIV",{class:!0});var SL=s(ea);T(O$.$$.fragment,SL),RKr=i(SL),V0e=n(SL,"P",{});var gOt=s(V0e);PKr=r(gOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gOt.forEach(t),BKr=i(SL),Ef=n(SL,"P",{});var Bte=s(Ef);IKr=r(Bte,`Note:
Loading a model from its configuration file does `),X0e=n(Bte,"STRONG",{});var hOt=s(X0e);NKr=r(hOt,"not"),hOt.forEach(t),qKr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(Bte,"A",{href:!0});var pOt=s(Noe);jKr=r(pOt,"from_pretrained()"),pOt.forEach(t),DKr=r(Bte," to load the model weights."),Bte.forEach(t),GKr=i(SL),T(iw.$$.fragment,SL),SL.forEach(t),OKr=i(vi),Zr=n(vi,"DIV",{class:!0});var Fi=s(Zr);T(V$.$$.fragment,Fi),VKr=i(Fi),z0e=n(Fi,"P",{});var _Ot=s(z0e);XKr=r(_Ot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Ot.forEach(t),zKr=i(Fi),kn=n(Fi,"P",{});var RL=s(kn);QKr=r(RL,"The model class to instantiate is selected based on the "),Q0e=n(RL,"CODE",{});var uOt=s(Q0e);WKr=r(uOt,"model_type"),uOt.forEach(t),HKr=r(RL,` property of the config object (either
passed as an argument or loaded from `),W0e=n(RL,"CODE",{});var bOt=s(W0e);UKr=r(bOt,"pretrained_model_name_or_path"),bOt.forEach(t),JKr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(RL,"CODE",{});var vOt=s(H0e);YKr=r(vOt,"pretrained_model_name_or_path"),vOt.forEach(t),KKr=r(RL,":"),RL.forEach(t),ZKr=i(Fi),X$=n(Fi,"UL",{});var VQe=s(X$);dw=n(VQe,"LI",{});var yOe=s(dw);U0e=n(yOe,"STRONG",{});var FOt=s(U0e);eZr=r(FOt,"beit"),FOt.forEach(t),oZr=r(yOe," \u2014 "),qoe=n(yOe,"A",{href:!0});var TOt=s(qoe);rZr=r(TOt,"FlaxBeitForImageClassification"),TOt.forEach(t),tZr=r(yOe," (BEiT model)"),yOe.forEach(t),aZr=i(VQe),cw=n(VQe,"LI",{});var xOe=s(cw);J0e=n(xOe,"STRONG",{});var MOt=s(J0e);nZr=r(MOt,"vit"),MOt.forEach(t),sZr=r(xOe," \u2014 "),joe=n(xOe,"A",{href:!0});var EOt=s(joe);lZr=r(EOt,"FlaxViTForImageClassification"),EOt.forEach(t),iZr=r(xOe," (ViT model)"),xOe.forEach(t),VQe.forEach(t),dZr=i(Fi),T(fw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),PXe=i(f),Cf=n(f,"H2",{class:!0});var XQe=s(Cf);mw=n(XQe,"A",{id:!0,class:!0,href:!0});var COt=s(mw);Y0e=n(COt,"SPAN",{});var wOt=s(Y0e);T(z$.$$.fragment,wOt),wOt.forEach(t),COt.forEach(t),cZr=i(XQe),K0e=n(XQe,"SPAN",{});var AOt=s(K0e);fZr=r(AOt,"FlaxAutoModelForVision2Seq"),AOt.forEach(t),XQe.forEach(t),BXe=i(f),Ar=n(f,"DIV",{class:!0});var Ti=s(Ar);T(Q$.$$.fragment,Ti),mZr=i(Ti),wf=n(Ti,"P",{});var Ite=s(wf);gZr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Doe=n(Ite,"A",{href:!0});var LOt=s(Doe);hZr=r(LOt,"from_pretrained()"),LOt.forEach(t),pZr=r(Ite," class method or the "),Goe=n(Ite,"A",{href:!0});var yOt=s(Goe);_Zr=r(yOt,"from_config()"),yOt.forEach(t),uZr=r(Ite,` class
method.`),Ite.forEach(t),bZr=i(Ti),W$=n(Ti,"P",{});var zQe=s(W$);vZr=r(zQe,"This class cannot be instantiated directly using "),Z0e=n(zQe,"CODE",{});var xOt=s(Z0e);FZr=r(xOt,"__init__()"),xOt.forEach(t),TZr=r(zQe," (throws an error)."),zQe.forEach(t),MZr=i(Ti),oa=n(Ti,"DIV",{class:!0});var PL=s(oa);T(H$.$$.fragment,PL),EZr=i(PL),ewe=n(PL,"P",{});var $Ot=s(ewe);CZr=r($Ot,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Ot.forEach(t),wZr=i(PL),Af=n(PL,"P",{});var Nte=s(Af);AZr=r(Nte,`Note:
Loading a model from its configuration file does `),owe=n(Nte,"STRONG",{});var kOt=s(owe);LZr=r(kOt,"not"),kOt.forEach(t),yZr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(Nte,"A",{href:!0});var SOt=s(Ooe);xZr=r(SOt,"from_pretrained()"),SOt.forEach(t),$Zr=r(Nte," to load the model weights."),Nte.forEach(t),kZr=i(PL),T(gw.$$.fragment,PL),PL.forEach(t),SZr=i(Ti),et=n(Ti,"DIV",{class:!0});var Mi=s(et);T(U$.$$.fragment,Mi),RZr=i(Mi),rwe=n(Mi,"P",{});var ROt=s(rwe);PZr=r(ROt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ROt.forEach(t),BZr=i(Mi),Sn=n(Mi,"P",{});var BL=s(Sn);IZr=r(BL,"The model class to instantiate is selected based on the "),twe=n(BL,"CODE",{});var POt=s(twe);NZr=r(POt,"model_type"),POt.forEach(t),qZr=r(BL,` property of the config object (either
passed as an argument or loaded from `),awe=n(BL,"CODE",{});var BOt=s(awe);jZr=r(BOt,"pretrained_model_name_or_path"),BOt.forEach(t),DZr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=n(BL,"CODE",{});var IOt=s(nwe);GZr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),OZr=r(BL,":"),BL.forEach(t),VZr=i(Mi),swe=n(Mi,"UL",{});var NOt=s(swe);hw=n(NOt,"LI",{});var $Oe=s(hw);lwe=n($Oe,"STRONG",{});var qOt=s(lwe);XZr=r(qOt,"vision-encoder-decoder"),qOt.forEach(t),zZr=r($Oe," \u2014 "),Voe=n($Oe,"A",{href:!0});var jOt=s(Voe);QZr=r(jOt,"FlaxVisionEncoderDecoderModel"),jOt.forEach(t),WZr=r($Oe," (Vision Encoder decoder model)"),$Oe.forEach(t),NOt.forEach(t),HZr=i(Mi),T(pw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(zXt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoTokenizer"),c(xi,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertModel"),c(Pf,"id","extending-the-auto-classes"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#extending-the-auto-classes"),c($i,"class","relative group"),c(If,"id","transformers.AutoConfig"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#transformers.AutoConfig"),c(ki,"class","relative group"),c(TS,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(MS,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertConfig"),c(ES,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartConfig"),c(CS,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitConfig"),c(wS,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertConfig"),c(AS,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(LS,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdConfig"),c(yS,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(xS,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c($S,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(kS,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomConfig"),c(SS,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertConfig"),c(RS,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineConfig"),c(PS,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPConfig"),c(BS,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenConfig"),c(IS,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertConfig"),c(NS,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextConfig"),c(qS,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLConfig"),c(jS,"href","/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtConfig"),c(DS,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(GS,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(OS,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(VS,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaConfig"),c(XS,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(zS,"href","/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(QS,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTConfig"),c(WS,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrConfig"),c(HS,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertConfig"),c(US,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRConfig"),c(JS,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTConfig"),c(YS,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraConfig"),c(KS,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ZS,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertConfig"),c(eR,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaConfig"),c(oR,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetConfig"),c(rR,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTConfig"),c(tR,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelConfig"),c(aR,"href","/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNConfig"),c(nR,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Config"),c(sR,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(lR,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(iR,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJConfig"),c(dR,"href","/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTConfig"),c(cR,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertConfig"),c(fR,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertConfig"),c(mR,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(gR,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(hR,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(pR,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(_R,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDConfig"),c(uR,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitConfig"),c(bR,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerConfig"),c(vR,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Config"),c(FR,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeConfig"),c(TR,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertConfig"),c(MR,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Config"),c(ER,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianConfig"),c(CR,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(wR,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartConfig"),c(AR,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTConfig"),c(LR,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(yR,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xR,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetConfig"),c($R,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Config"),c(kR,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaConfig"),c(SR,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(RR,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(PR,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTConfig"),c(BR,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusConfig"),c(IR,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverConfig"),c(NR,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartConfig"),c(qR,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jR,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(DR,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(GR,"href","/docs/transformers/pr_17671/en/model_doc/rag#transformers.RagConfig"),c(OR,"href","/docs/transformers/pr_17671/en/model_doc/realm#transformers.RealmConfig"),c(VR,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerConfig"),c(XR,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetConfig"),c(zR,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertConfig"),c(QR,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetConfig"),c(WR,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertConfig"),c(HR,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaConfig"),c(UR,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerConfig"),c(JR,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerConfig"),c(YR,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWConfig"),c(KR,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDConfig"),c(ZR,"href","/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(eP,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(oP,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rP,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterConfig"),c(tP,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(aP,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinConfig"),c(nP,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Config"),c(sP,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasConfig"),c(lP,"href","/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(iP,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(dP,"href","/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRConfig"),c(cP,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(fP,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(mP,"href","/docs/transformers/pr_17671/en/model_doc/van#transformers.VanConfig"),c(gP,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltConfig"),c(hP,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(pP,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(_P,"href","/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uP,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTConfig"),c(bP,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(vP,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(FP,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(TP,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMConfig"),c(MP,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMConfig"),c(EP,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMConfig"),c(CP,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(wP,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(AP,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(LP,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetConfig"),c(yP,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosConfig"),c(xP,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"id","transformers.AutoTokenizer"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoTokenizer"),c(Ri,"class","relative group"),c($P,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kP,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizer"),c(SP,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartTokenizer"),c(PP,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartTokenizerFast"),c(BP,"href","/docs/transformers/pr_17671/en/model_doc/barthez#transformers.BarthezTokenizer"),c(IP,"href","/docs/transformers/pr_17671/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NP,"href","/docs/transformers/pr_17671/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qP,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GP,"href","/docs/transformers/pr_17671/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(OP,"href","/docs/transformers/pr_17671/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VP,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(XP,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zP,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QP,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WP,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(HP,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(UP,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(JP,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(YP,"href","/docs/transformers/pr_17671/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(KP,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ZP,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineTokenizer"),c(oB,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizer"),c(rB,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tB,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(aB,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(nB,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sB,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17671/en/model_doc/cpm#transformers.CpmTokenizer"),c(iB,"href","/docs/transformers/pr_17671/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(dB,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(cB,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaTokenizer"),c(gB,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(pB,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(_B,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uB,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(vB,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(FB,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraTokenizer"),c(TB,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(MB,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(EB,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetTokenizer"),c(CB,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(wB,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(AB,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelTokenizer"),c(LB,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yB,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xB,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($B,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kB,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SB,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(RB,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PB,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BB,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizer"),c(IB,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(NB,"href","/docs/transformers/pr_17671/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qB,"href","/docs/transformers/pr_17671/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DB,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GB,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(VB,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(XB,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(zB,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(QB,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(WB,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(HB,"href","/docs/transformers/pr_17671/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(UB,"href","/docs/transformers/pr_17671/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JB,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDTokenizer"),c(YB,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDTokenizerFast"),c(KB,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZB,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eI,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Tokenizer"),c(oI,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5TokenizerFast"),c(rI,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeTokenizer"),c(tI,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aI,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nI,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sI,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianTokenizer"),c(lI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartTokenizer"),c(iI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cI,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(fI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),c(mI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),c(gI,"href","/docs/transformers/pr_17671/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hI,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(pI,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(uI,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bI,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Tokenizer"),c(vI,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5TokenizerFast"),c(FI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),c(TI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),c(MI,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizer"),c(EI,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wI,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(AI,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LI,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yI,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xI,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($I,"href","/docs/transformers/pr_17671/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kI,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartTokenizer"),c(SI,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(RI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17671/en/model_doc/rag#transformers.RagTokenizer"),c(II,"href","/docs/transformers/pr_17671/en/model_doc/realm#transformers.RealmTokenizer"),c(NI,"href","/docs/transformers/pr_17671/en/model_doc/realm#transformers.RealmTokenizerFast"),c(qI,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerTokenizer"),c(jI,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(DI,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertTokenizer"),c(GI,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(OI,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(VI,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(XI,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zI,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QI,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(WI,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(HI,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(UI,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(JI,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterTokenizer"),c(YI,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(KI,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ZI,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(eN,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Tokenizer"),c(oN,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5TokenizerFast"),c(rN,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasTokenizer"),c(tN,"href","/docs/transformers/pr_17671/en/model_doc/tapex#transformers.TapexTokenizer"),c(aN,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(nN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizer"),c(iN,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertTokenizerFast"),c(dN,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cN,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fN,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(mN,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMTokenizer"),c(gN,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(hN,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMTokenizer"),c(pN,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(_N,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(uN,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(bN,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vN,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FN,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(TN,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(MN,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizer"),c(EN,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoFeatureExtractor"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoFeatureExtractor"),c(Pi,"class","relative group"),c(CN,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(wN,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($N,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qN,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(DN,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(GN,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(XN,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(zN,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(QN,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tq,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"id","transformers.AutoProcessor"),c(mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mp,"href","#transformers.AutoProcessor"),c(Bi,"class","relative group"),c(aq,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(nq,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPProcessor"),c(sq,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPProcessor"),c(lq,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(iq,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(dq,"href","/docs/transformers/pr_17671/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(cq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mq,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(gq,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(hq,"href","/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRProcessor"),c(pq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_q,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uq,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltProcessor"),c(bq,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(vq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Fq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Tq,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pp,"id","transformers.AutoModel"),c(Pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pp,"href","#transformers.AutoModel"),c(Ni,"class","relative group"),c(Mq,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eq,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cq,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wq,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertModel"),c(Aq,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartModel"),c(Lq,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitModel"),c(yq,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertModel"),c(xq,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c($q,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdModel"),c(kq,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Sq,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Rq,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Pq,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomModel"),c(Bq,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertModel"),c(Iq,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineModel"),c(Nq,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.CLIPModel"),c(qq,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenModel"),c(jq,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertModel"),c(Dq,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextModel"),c(Gq,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLModel"),c(Oq,"href","/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtModel"),c(Vq,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Xq,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zq,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Qq,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaModel"),c(Wq,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Hq,"href","/docs/transformers/pr_17671/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Uq,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTModel"),c(Jq,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrModel"),c(Yq,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertModel"),c(Kq,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Zq,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTModel"),c(ej,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraModel"),c(oj,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertModel"),c(rj,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaModel"),c(tj,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetModel"),c(aj,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTModel"),c(nj,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelModel"),c(sj,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lj,"href","/docs/transformers/pr_17671/en/model_doc/glpn#transformers.GLPNModel"),c(ij,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2Model"),c(dj,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(cj,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(fj,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJModel"),c(mj,"href","/docs/transformers/pr_17671/en/model_doc/groupvit#transformers.GroupViTModel"),c(gj,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertModel"),c(hj,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertModel"),c(pj,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(_j,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(uj,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(bj,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(vj,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDModel"),c(Fj,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitModel"),c(Tj,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerModel"),c(Mj,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5Model"),c(Ej,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeModel"),c(Cj,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertModel"),c(wj,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100Model"),c(Aj,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianModel"),c(Lj,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerModel"),c(yj,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartModel"),c(xj,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTModel"),c($j,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(kj,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Sj,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetModel"),c(Rj,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5Model"),c(Pj,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaModel"),c(Bj,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Ij,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Nj,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTModel"),c(qj,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusModel"),c(jj,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverModel"),c(Dj,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartModel"),c(Gj,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Oj,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Vj,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Xj,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModel"),c(zj,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetModel"),c(Qj,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertModel"),c(Wj,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetModel"),c(Hj,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel"),c(Uj,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaModel"),c(Jj,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerModel"),c(Yj,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerModel"),c(Kj,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWModel"),c(Zj,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDModel"),c(eD,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oD,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterModel"),c(rD,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tD,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinModel"),c(aD,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5Model"),c(nD,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasModel"),c(sD,"href","/docs/transformers/pr_17671/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lD,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iD,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dD,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cD,"href","/docs/transformers/pr_17671/en/model_doc/van#transformers.VanModel"),c(fD,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltModel"),c(mD,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gD,"href","/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hD,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTModel"),c(pD,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(_D,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(uD,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bD,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMModel"),c(vD,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMModel"),c(FD,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMModel"),c(TD,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(MD,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ED,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(CD,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetModel"),c(wD,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosModel"),c(AD,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForPreTraining"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForPreTraining"),c(Di,"class","relative group"),c(LD,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yD,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xD,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($D,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kD,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForPreTraining"),c(RD,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(PD,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM"),c(BD,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ND,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qD,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(DD,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForPreTraining"),c(OD,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(VD,"href","/docs/transformers/pr_17671/en/model_doc/flava#transformers.FlavaForPreTraining"),c(XD,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForPreTraining"),c(zD,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(WD,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(HD,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JD,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YD,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(KD,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ZD,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(eG,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oG,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(rG,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tG,"href","/docs/transformers/pr_17671/en/model_doc/retribert#transformers.RetriBertModel"),c(aG,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nG,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(sG,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lG,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dG,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cG,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fG,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mG,"href","/docs/transformers/pr_17671/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gG,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hG,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pG,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(_G,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bG,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vG,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S1,"id","transformers.AutoModelForCausalLM"),c(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S1,"href","#transformers.AutoModelForCausalLM"),c(Vi,"class","relative group"),c(FG,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForCausalLM"),c(CG,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertLMHeadModel"),c(wG,"href","/docs/transformers/pr_17671/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(AG,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(LG,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yG,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xG,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($G,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForCausalLM"),c(kG,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(SG,"href","/docs/transformers/pr_17671/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(RG,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(PG,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(BG,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForCausalLM"),c(IG,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(NG,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qG,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jG,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(DG,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianForCausalLM"),c(GG,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForCausalLM"),c(OG,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(VG,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XG,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.OPTForCausalLM"),c(zG,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(QG,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(WG,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(HG,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(UG,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(JG,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(YG,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(KG,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ZG,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eO,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oO,"href","/docs/transformers/pr_17671/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rO,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tO,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aO,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nO,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sO,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lO,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.AutoModelForMaskedLM"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.AutoModelForMaskedLM"),c(Qi,"class","relative group"),c(iO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mO,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMaskedLM"),c(hO,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pO,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_O,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uO,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bO,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vO,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FO,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TO,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MO,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EO,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CO,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wO,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AO,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LO,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yO,"href","/docs/transformers/pr_17671/en/model_doc/luke#transformers.LukeForMaskedLM"),c(xO,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(kO,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(SO,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(RO,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(PO,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(BO,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(IO,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(NO,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(qO,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(jO,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DO,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(GO,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VO,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XO,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zO,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QO,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i2,"id","transformers.AutoModelForSeq2SeqLM"),c(i2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ui,"class","relative group"),c(WO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(oV,"href","/docs/transformers/pr_17671/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(aV,"href","/docs/transformers/pr_17671/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.MarianMTModel"),c(sV,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_17671/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mV,"href","/docs/transformers/pr_17671/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x2,"id","transformers.AutoModelForSequenceClassification"),c(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x2,"href","#transformers.AutoModelForSequenceClassification"),c(Ki,"class","relative group"),c(gV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c($V,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17671/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xb,"id","transformers.AutoModelForMultipleChoice"),c(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xb,"href","#transformers.AutoModelForMultipleChoice"),c(od,"class","relative group"),c(mX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c($X,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(RX,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(IX,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(qX,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(jX,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(DX,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(GX,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(OX,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(VX,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(XX,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForNextSentencePrediction"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForNextSentencePrediction"),c(ad,"class","relative group"),c(zX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(UX,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(JX,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(YX,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(KX,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(ZX,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForTokenClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForTokenClassification"),c(ld,"class","relative group"),c(ez,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(az,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForTokenClassification"),c(nz,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(sz,"href","/docs/transformers/pr_17671/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(lz,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(iz,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForTokenClassification"),c(dz,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(cz,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(fz,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(mz,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(gz,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(hz,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(pz,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(_z,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(uz,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(bz,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(vz,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(wz,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Az,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(yz,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(xz,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c($z,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(kz,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(qz,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForQuestionAnswering"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForQuestionAnswering"),c(cd,"class","relative group"),c(jz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17671/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17671/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(rQ,"href","/docs/transformers/pr_17671/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17671/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17671/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17671/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17671/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17671/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17671/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17671/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17671/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wQ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yQ,"href","/docs/transformers/pr_17671/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForTableQuestionAnswering"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(gd,"class","relative group"),c(xQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Q,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SQ,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.AutoModelForImageClassification"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.AutoModelForImageClassification"),c(_d,"class","relative group"),c(RQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IQ,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForImageClassification"),c(NQ,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(qQ,"href","/docs/transformers/pr_17671/en/model_doc/cvt#transformers.CvtForImageClassification"),c(jQ,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(DQ,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassification"),c(GQ,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(OQ,"href","/docs/transformers/pr_17671/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(VQ,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassification"),c(XQ,"href","/docs/transformers/pr_17671/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(zQ,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(QQ,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(WQ,"href","/docs/transformers/pr_17671/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(HQ,"href","/docs/transformers/pr_17671/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(UQ,"href","/docs/transformers/pr_17671/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(JQ,"href","/docs/transformers/pr_17671/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(YQ,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(KQ,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForImageClassification"),c(ZQ,"href","/docs/transformers/pr_17671/en/model_doc/van#transformers.VanForImageClassification"),c(eW,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.AutoModelForVision2Seq"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForVision2Seq"),c(vd,"class","relative group"),c(oW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Md,"class","relative group"),c(nW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17671/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L6,"id","transformers.AutoModelForAudioClassification"),c(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L6,"href","#transformers.AutoModelForAudioClassification"),c(wd,"class","relative group"),c(dW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.AutoModelForAudioFrameClassification"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.AutoModelForAudioFrameClassification"),c(yd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(wW,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForAudioFrameClassification"),c(AW,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(LW,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(yW,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(xW,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.AutoModelForCTC"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.AutoModelForCTC"),c(kd,"class","relative group"),c($W,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RW,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(PW,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.HubertForCTC"),c(BW,"href","/docs/transformers/pr_17671/en/model_doc/mctct#transformers.MCTCTForCTC"),c(IW,"href","/docs/transformers/pr_17671/en/model_doc/sew#transformers.SEWForCTC"),c(NW,"href","/docs/transformers/pr_17671/en/model_doc/sew-d#transformers.SEWDForCTC"),c(qW,"href","/docs/transformers/pr_17671/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(jW,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(DW,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(GW,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(OW,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Pd,"class","relative group"),c(VW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_17671/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(WW,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForAudioXVector"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(HW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(KW,"href","/docs/transformers/pr_17671/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(ZW,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(eH,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(oH,"href","/docs/transformers/pr_17671/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForMaskedImageModeling"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Dd,"class","relative group"),c(rH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17671/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(sH,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(lH,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForObjectDetection"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForObjectDetection"),c(Xd,"class","relative group"),c(iH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mH,"href","/docs/transformers/pr_17671/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForImageSegmentation"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForImageSegmentation"),c(Wd,"class","relative group"),c(gH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17671/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForSemanticSegmentation"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Jd,"class","relative group"),c(uH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(TH,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(MH,"href","/docs/transformers/pr_17671/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(EH,"href","/docs/transformers/pr_17671/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForInstanceSegmentation"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Zd,"class","relative group"),c(CH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_17671/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.TFAutoModel"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.TFAutoModel"),c(rc,"class","relative group"),c(yH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertModel"),c(SH,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartModel"),c(RH,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertModel"),c(PH,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(BH,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(IH,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertModel"),c(NH,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.TFCLIPModel"),c(qH,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertModel"),c(jH,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextModel"),c(DH,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLModel"),c(GH,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(OH,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaModel"),c(VH,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(XH,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(zH,"href","/docs/transformers/pr_17671/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(QH,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraModel"),c(WH,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(HH,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelModel"),c(UH,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(JH,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2Model"),c(YH,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJModel"),c(KH,"href","/docs/transformers/pr_17671/en/model_doc/hubert#transformers.TFHubertModel"),c(ZH,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(eU,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDModel"),c(oU,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerModel"),c(rU,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertModel"),c(tU,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianModel"),c(aU,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartModel"),c(nU,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(sU,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetModel"),c(lU,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5Model"),c(iU,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(dU,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTModel"),c(cU,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusModel"),c(fU,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertModel"),c(mU,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaModel"),c(gU,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerModel"),c(hU,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(pU,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinModel"),c(_U,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5Model"),c(uU,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasModel"),c(bU,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(vU,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTModel"),c(FU,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(TU,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(MU,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMModel"),c(EU,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(CU,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForPreTraining"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForPreTraining"),c(nc,"class","relative group"),c(wU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(xU,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c($U,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForPreTraining"),c(kU,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(SU,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(RU,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PU,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(BU,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(IU,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(NU,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(qU,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jU,"href","/docs/transformers/pr_17671/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(DU,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(GU,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OU,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(VU,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(XU,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(zU,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QU,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WU,"href","/docs/transformers/pr_17671/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(HU,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(UU,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(JU,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForCausalLM"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForCausalLM"),c(ic,"class","relative group"),c(YU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(oJ,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(rJ,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tJ,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aJ,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(nJ,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(sJ,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(lJ,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(iJ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(dJ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(cJ,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(fJ,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mJ,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.TFAutoModelForImageClassification"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.TFAutoModelForImageClassification"),c(fc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17671/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(uJ,"href","/docs/transformers/pr_17671/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(bJ,"href","/docs/transformers/pr_17671/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(vJ,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForMaskedLM"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForMaskedLM"),c(hc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($J,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NJ,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OJ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(uc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(JJ,"href","/docs/transformers/pr_17671/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.TFMarianMTModel"),c(KJ,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForSequenceClassification"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fc,"class","relative group"),c(rY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17671/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17671/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(wY,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(AY,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(LY,"href","/docs/transformers/pr_17671/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(yY,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(xY,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c($Y,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForMultipleChoice"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ec,"class","relative group"),c(kY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(HY,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(UY,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(JY,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ac,"class","relative group"),c(YY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(oK,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17671/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.TFAutoModelForTokenClassification"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.TFAutoModelForTokenClassification"),c(Sc,"class","relative group"),c(sK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(cK,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(fK,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(gK,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(hK,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(pK,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(_K,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(uK,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(bK,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(vK,"href","/docs/transformers/pr_17671/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(FK,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(TK,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(MK,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(EK,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(CK,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(wK,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(AK,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(LK,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(yK,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForQuestionAnswering"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(xK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17671/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17671/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17671/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17671/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17671/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(GK,"href","/docs/transformers/pr_17671/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17671/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(XK,"href","/docs/transformers/pr_17671/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17671/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(QK,"href","/docs/transformers/pr_17671/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(WK,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17671/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(JK,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(YK,"href","/docs/transformers/pr_17671/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.TFAutoModelForVision2Seq"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.TFAutoModelForVision2Seq"),c(qc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Gc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17671/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModel"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModel"),c(Xc,"class","relative group"),c(sZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cZ,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartModel"),c(fZ,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitModel"),c(mZ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertModel"),c(gZ,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hZ,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(pZ,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(_Z,"href","/docs/transformers/pr_17671/en/model_doc/clip#transformers.FlaxCLIPModel"),c(uZ,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bZ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraModel"),c(vZ,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(FZ,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(TZ,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(MZ,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(EZ,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianModel"),c(CZ,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wZ,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AZ,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTModel"),c(LZ,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yZ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(xZ,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c($Z,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5Model"),c(kZ,"href","/docs/transformers/pr_17671/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(SZ,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTModel"),c(RZ,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PZ,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(BZ,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.FlaxAutoModelForCausalLM"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Wc,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(DZ,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(GZ,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(OZ,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(VZ,"href","/docs/transformers/pr_17671/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(XZ,"href","/docs/transformers/pr_17671/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zZ,"href","/docs/transformers/pr_17671/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(QZ,"href","/docs/transformers/pr_17671/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(WZ,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HZ,"href","/docs/transformers/pr_17671/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForPreTraining"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Jc,"class","relative group"),c(UZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZZ,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oee,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ree,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tee,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(aee,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nee,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(see,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lee,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iee,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(dee,"href","/docs/transformers/pr_17671/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(cee,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForMaskedLM"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Zc,"class","relative group"),c(fee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hee,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(pee,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(uee,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(bee,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(vee,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Fee,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Mee,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Eee,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(rf,"class","relative group"),c(Cee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lee,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yee,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(xee,"href","/docs/transformers/pr_17671/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c($ee,"href","/docs/transformers/pr_17671/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kee,"href","/docs/transformers/pr_17671/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(See,"href","/docs/transformers/pr_17671/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ree,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Pee,"href","/docs/transformers/pr_17671/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Bee,"href","/docs/transformers/pr_17671/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Iee,"href","/docs/transformers/pr_17671/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(nf,"class","relative group"),c(Nee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Oee,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Vee,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Xee,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zee,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qee,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Wee,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Hee,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Uee,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(df,"class","relative group"),c(Jee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eoe,"href","/docs/transformers/pr_17671/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ooe,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(roe,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(toe,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aoe,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(noe,"href","/docs/transformers/pr_17671/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(soe,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(loe,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ioe,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForTokenClassification"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(mf,"class","relative group"),c(doe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(coe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(foe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(moe,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(goe,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hoe,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(poe,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_oe,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uoe,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(boe,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(voe,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(pf,"class","relative group"),c(Foe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Toe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Moe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eoe,"href","/docs/transformers/pr_17671/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Coe,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(woe,"href","/docs/transformers/pr_17671/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Aoe,"href","/docs/transformers/pr_17671/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Loe,"href","/docs/transformers/pr_17671/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yoe,"href","/docs/transformers/pr_17671/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xoe,"href","/docs/transformers/pr_17671/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($oe,"href","/docs/transformers/pr_17671/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(bf,"class","relative group"),c(koe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/pr_17671/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForImageClassification"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Tf,"class","relative group"),c(Boe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ioe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/pr_17671/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(joe,"href","/docs/transformers/pr_17671/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mw,"id","transformers.FlaxAutoModelForVision2Seq"),c(mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Cf,"class","relative group"),c(Doe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/pr_17671/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/pr_17671/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ei),b(f,$f,u),b(f,at,u),e(at,Ci),e(at,wi),e(wi,IL),e(at,kf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ai),e(Qe,Pn),e(Pn,NL),e(Qe,Bn),e(Qe,In),e(In,qL),e(Qe,Li),e(Qe,Nn),e(Nn,jL),e(Qe,yi),b(f,Sf,u),M($a,f,u),b(f,We,u),b(f,Ae,u),e(Ae,pS),e(Ae,xi),e(xi,_S),e(Ae,uS),b(f,Co,u),b(f,ka,u),e(ka,bS),e(ka,Rf),e(Rf,vS),e(ka,QQe),b(f,kOe,u),b(f,$i,u),e($i,Pf),e(Pf,qte),M(DL,qte,null),e($i,WQe),e($i,jte),e(jte,HQe),b(f,SOe,u),b(f,qn,u),e(qn,UQe),e(qn,Dte),e(Dte,JQe),e(qn,YQe),e(qn,Gte),e(Gte,KQe),e(qn,ZQe),b(f,ROe,u),M(GL,f,u),b(f,POe,u),b(f,FS,u),e(FS,eWe),b(f,BOe,u),M(Bf,f,u),b(f,IOe,u),b(f,ki,u),e(ki,If),e(If,Ote),M(OL,Ote,null),e(ki,oWe),e(ki,Vte),e(Vte,rWe),b(f,NOe,u),b(f,wo,u),M(VL,wo,null),e(wo,tWe),e(wo,XL),e(XL,aWe),e(XL,TS),e(TS,nWe),e(XL,sWe),e(wo,lWe),e(wo,zL),e(zL,iWe),e(zL,Xte),e(Xte,dWe),e(zL,cWe),e(wo,fWe),e(wo,Lr),M(QL,Lr,null),e(Lr,mWe),e(Lr,zte),e(zte,gWe),e(Lr,hWe),e(Lr,Si),e(Si,pWe),e(Si,Qte),e(Qte,_We),e(Si,uWe),e(Si,Wte),e(Wte,bWe),e(Si,vWe),e(Lr,FWe),e(Lr,A),e(A,Nf),e(Nf,Hte),e(Hte,TWe),e(Nf,MWe),e(Nf,MS),e(MS,EWe),e(Nf,CWe),e(A,wWe),e(A,qf),e(qf,Ute),e(Ute,AWe),e(qf,LWe),e(qf,ES),e(ES,yWe),e(qf,xWe),e(A,$We),e(A,jf),e(jf,Jte),e(Jte,kWe),e(jf,SWe),e(jf,CS),e(CS,RWe),e(jf,PWe),e(A,BWe),e(A,Df),e(Df,Yte),e(Yte,IWe),e(Df,NWe),e(Df,wS),e(wS,qWe),e(Df,jWe),e(A,DWe),e(A,Gf),e(Gf,Kte),e(Kte,GWe),e(Gf,OWe),e(Gf,AS),e(AS,VWe),e(Gf,XWe),e(A,zWe),e(A,Of),e(Of,Zte),e(Zte,QWe),e(Of,WWe),e(Of,LS),e(LS,HWe),e(Of,UWe),e(A,JWe),e(A,Vf),e(Vf,eae),e(eae,YWe),e(Vf,KWe),e(Vf,yS),e(yS,ZWe),e(Vf,eHe),e(A,oHe),e(A,Xf),e(Xf,oae),e(oae,rHe),e(Xf,tHe),e(Xf,xS),e(xS,aHe),e(Xf,nHe),e(A,sHe),e(A,zf),e(zf,rae),e(rae,lHe),e(zf,iHe),e(zf,$S),e($S,dHe),e(zf,cHe),e(A,fHe),e(A,Qf),e(Qf,tae),e(tae,mHe),e(Qf,gHe),e(Qf,kS),e(kS,hHe),e(Qf,pHe),e(A,_He),e(A,Wf),e(Wf,aae),e(aae,uHe),e(Wf,bHe),e(Wf,SS),e(SS,vHe),e(Wf,FHe),e(A,THe),e(A,Hf),e(Hf,nae),e(nae,MHe),e(Hf,EHe),e(Hf,RS),e(RS,CHe),e(Hf,wHe),e(A,AHe),e(A,Uf),e(Uf,sae),e(sae,LHe),e(Uf,yHe),e(Uf,PS),e(PS,xHe),e(Uf,$He),e(A,kHe),e(A,Jf),e(Jf,lae),e(lae,SHe),e(Jf,RHe),e(Jf,BS),e(BS,PHe),e(Jf,BHe),e(A,IHe),e(A,Yf),e(Yf,iae),e(iae,NHe),e(Yf,qHe),e(Yf,IS),e(IS,jHe),e(Yf,DHe),e(A,GHe),e(A,Kf),e(Kf,dae),e(dae,OHe),e(Kf,VHe),e(Kf,NS),e(NS,XHe),e(Kf,zHe),e(A,QHe),e(A,Zf),e(Zf,cae),e(cae,WHe),e(Zf,HHe),e(Zf,qS),e(qS,UHe),e(Zf,JHe),e(A,YHe),e(A,em),e(em,fae),e(fae,KHe),e(em,ZHe),e(em,jS),e(jS,eUe),e(em,oUe),e(A,rUe),e(A,om),e(om,mae),e(mae,tUe),e(om,aUe),e(om,DS),e(DS,nUe),e(om,sUe),e(A,lUe),e(A,rm),e(rm,gae),e(gae,iUe),e(rm,dUe),e(rm,GS),e(GS,cUe),e(rm,fUe),e(A,mUe),e(A,tm),e(tm,hae),e(hae,gUe),e(tm,hUe),e(tm,OS),e(OS,pUe),e(tm,_Ue),e(A,uUe),e(A,am),e(am,pae),e(pae,bUe),e(am,vUe),e(am,VS),e(VS,FUe),e(am,TUe),e(A,MUe),e(A,nm),e(nm,_ae),e(_ae,EUe),e(nm,CUe),e(nm,XS),e(XS,wUe),e(nm,AUe),e(A,LUe),e(A,sm),e(sm,uae),e(uae,yUe),e(sm,xUe),e(sm,zS),e(zS,$Ue),e(sm,kUe),e(A,SUe),e(A,lm),e(lm,bae),e(bae,RUe),e(lm,PUe),e(lm,QS),e(QS,BUe),e(lm,IUe),e(A,NUe),e(A,im),e(im,vae),e(vae,qUe),e(im,jUe),e(im,WS),e(WS,DUe),e(im,GUe),e(A,OUe),e(A,dm),e(dm,Fae),e(Fae,VUe),e(dm,XUe),e(dm,HS),e(HS,zUe),e(dm,QUe),e(A,WUe),e(A,cm),e(cm,Tae),e(Tae,HUe),e(cm,UUe),e(cm,US),e(US,JUe),e(cm,YUe),e(A,KUe),e(A,fm),e(fm,Mae),e(Mae,ZUe),e(fm,eJe),e(fm,JS),e(JS,oJe),e(fm,rJe),e(A,tJe),e(A,mm),e(mm,Eae),e(Eae,aJe),e(mm,nJe),e(mm,YS),e(YS,sJe),e(mm,lJe),e(A,iJe),e(A,gm),e(gm,Cae),e(Cae,dJe),e(gm,cJe),e(gm,KS),e(KS,fJe),e(gm,mJe),e(A,gJe),e(A,hm),e(hm,wae),e(wae,hJe),e(hm,pJe),e(hm,ZS),e(ZS,_Je),e(hm,uJe),e(A,bJe),e(A,pm),e(pm,Aae),e(Aae,vJe),e(pm,FJe),e(pm,eR),e(eR,TJe),e(pm,MJe),e(A,EJe),e(A,_m),e(_m,Lae),e(Lae,CJe),e(_m,wJe),e(_m,oR),e(oR,AJe),e(_m,LJe),e(A,yJe),e(A,um),e(um,yae),e(yae,xJe),e(um,$Je),e(um,rR),e(rR,kJe),e(um,SJe),e(A,RJe),e(A,bm),e(bm,xae),e(xae,PJe),e(bm,BJe),e(bm,tR),e(tR,IJe),e(bm,NJe),e(A,qJe),e(A,vm),e(vm,$ae),e($ae,jJe),e(vm,DJe),e(vm,aR),e(aR,GJe),e(vm,OJe),e(A,VJe),e(A,Fm),e(Fm,kae),e(kae,XJe),e(Fm,zJe),e(Fm,nR),e(nR,QJe),e(Fm,WJe),e(A,HJe),e(A,Tm),e(Tm,Sae),e(Sae,UJe),e(Tm,JJe),e(Tm,sR),e(sR,YJe),e(Tm,KJe),e(A,ZJe),e(A,Mm),e(Mm,Rae),e(Rae,eYe),e(Mm,oYe),e(Mm,lR),e(lR,rYe),e(Mm,tYe),e(A,aYe),e(A,Em),e(Em,Pae),e(Pae,nYe),e(Em,sYe),e(Em,iR),e(iR,lYe),e(Em,iYe),e(A,dYe),e(A,Cm),e(Cm,Bae),e(Bae,cYe),e(Cm,fYe),e(Cm,dR),e(dR,mYe),e(Cm,gYe),e(A,hYe),e(A,wm),e(wm,Iae),e(Iae,pYe),e(wm,_Ye),e(wm,cR),e(cR,uYe),e(wm,bYe),e(A,vYe),e(A,Am),e(Am,Nae),e(Nae,FYe),e(Am,TYe),e(Am,fR),e(fR,MYe),e(Am,EYe),e(A,CYe),e(A,Lm),e(Lm,qae),e(qae,wYe),e(Lm,AYe),e(Lm,mR),e(mR,LYe),e(Lm,yYe),e(A,xYe),e(A,ym),e(ym,jae),e(jae,$Ye),e(ym,kYe),e(ym,gR),e(gR,SYe),e(ym,RYe),e(A,PYe),e(A,xm),e(xm,Dae),e(Dae,BYe),e(xm,IYe),e(xm,hR),e(hR,NYe),e(xm,qYe),e(A,jYe),e(A,$m),e($m,Gae),e(Gae,DYe),e($m,GYe),e($m,pR),e(pR,OYe),e($m,VYe),e(A,XYe),e(A,km),e(km,Oae),e(Oae,zYe),e(km,QYe),e(km,_R),e(_R,WYe),e(km,HYe),e(A,UYe),e(A,Sm),e(Sm,Vae),e(Vae,JYe),e(Sm,YYe),e(Sm,uR),e(uR,KYe),e(Sm,ZYe),e(A,eKe),e(A,Rm),e(Rm,Xae),e(Xae,oKe),e(Rm,rKe),e(Rm,bR),e(bR,tKe),e(Rm,aKe),e(A,nKe),e(A,Pm),e(Pm,zae),e(zae,sKe),e(Pm,lKe),e(Pm,vR),e(vR,iKe),e(Pm,dKe),e(A,cKe),e(A,Bm),e(Bm,Qae),e(Qae,fKe),e(Bm,mKe),e(Bm,FR),e(FR,gKe),e(Bm,hKe),e(A,pKe),e(A,Im),e(Im,Wae),e(Wae,_Ke),e(Im,uKe),e(Im,TR),e(TR,bKe),e(Im,vKe),e(A,FKe),e(A,Nm),e(Nm,Hae),e(Hae,TKe),e(Nm,MKe),e(Nm,MR),e(MR,EKe),e(Nm,CKe),e(A,wKe),e(A,qm),e(qm,Uae),e(Uae,AKe),e(qm,LKe),e(qm,ER),e(ER,yKe),e(qm,xKe),e(A,$Ke),e(A,jm),e(jm,Jae),e(Jae,kKe),e(jm,SKe),e(jm,CR),e(CR,RKe),e(jm,PKe),e(A,BKe),e(A,Dm),e(Dm,Yae),e(Yae,IKe),e(Dm,NKe),e(Dm,wR),e(wR,qKe),e(Dm,jKe),e(A,DKe),e(A,Gm),e(Gm,Kae),e(Kae,GKe),e(Gm,OKe),e(Gm,AR),e(AR,VKe),e(Gm,XKe),e(A,zKe),e(A,Om),e(Om,Zae),e(Zae,QKe),e(Om,WKe),e(Om,LR),e(LR,HKe),e(Om,UKe),e(A,JKe),e(A,Vm),e(Vm,ene),e(ene,YKe),e(Vm,KKe),e(Vm,yR),e(yR,ZKe),e(Vm,eZe),e(A,oZe),e(A,Xm),e(Xm,one),e(one,rZe),e(Xm,tZe),e(Xm,xR),e(xR,aZe),e(Xm,nZe),e(A,sZe),e(A,zm),e(zm,rne),e(rne,lZe),e(zm,iZe),e(zm,$R),e($R,dZe),e(zm,cZe),e(A,fZe),e(A,Qm),e(Qm,tne),e(tne,mZe),e(Qm,gZe),e(Qm,kR),e(kR,hZe),e(Qm,pZe),e(A,_Ze),e(A,Wm),e(Wm,ane),e(ane,uZe),e(Wm,bZe),e(Wm,SR),e(SR,vZe),e(Wm,FZe),e(A,TZe),e(A,Hm),e(Hm,nne),e(nne,MZe),e(Hm,EZe),e(Hm,RR),e(RR,CZe),e(Hm,wZe),e(A,AZe),e(A,Um),e(Um,sne),e(sne,LZe),e(Um,yZe),e(Um,PR),e(PR,xZe),e(Um,$Ze),e(A,kZe),e(A,Jm),e(Jm,lne),e(lne,SZe),e(Jm,RZe),e(Jm,BR),e(BR,PZe),e(Jm,BZe),e(A,IZe),e(A,Ym),e(Ym,ine),e(ine,NZe),e(Ym,qZe),e(Ym,IR),e(IR,jZe),e(Ym,DZe),e(A,GZe),e(A,Km),e(Km,dne),e(dne,OZe),e(Km,VZe),e(Km,NR),e(NR,XZe),e(Km,zZe),e(A,QZe),e(A,Zm),e(Zm,cne),e(cne,WZe),e(Zm,HZe),e(Zm,qR),e(qR,UZe),e(Zm,JZe),e(A,YZe),e(A,eg),e(eg,fne),e(fne,KZe),e(eg,ZZe),e(eg,jR),e(jR,eeo),e(eg,oeo),e(A,reo),e(A,og),e(og,mne),e(mne,teo),e(og,aeo),e(og,DR),e(DR,neo),e(og,seo),e(A,leo),e(A,rg),e(rg,gne),e(gne,ieo),e(rg,deo),e(rg,GR),e(GR,ceo),e(rg,feo),e(A,meo),e(A,tg),e(tg,hne),e(hne,geo),e(tg,heo),e(tg,OR),e(OR,peo),e(tg,_eo),e(A,ueo),e(A,ag),e(ag,pne),e(pne,beo),e(ag,veo),e(ag,VR),e(VR,Feo),e(ag,Teo),e(A,Meo),e(A,ng),e(ng,_ne),e(_ne,Eeo),e(ng,Ceo),e(ng,XR),e(XR,weo),e(ng,Aeo),e(A,Leo),e(A,sg),e(sg,une),e(une,yeo),e(sg,xeo),e(sg,zR),e(zR,$eo),e(sg,keo),e(A,Seo),e(A,lg),e(lg,bne),e(bne,Reo),e(lg,Peo),e(lg,QR),e(QR,Beo),e(lg,Ieo),e(A,Neo),e(A,ig),e(ig,vne),e(vne,qeo),e(ig,jeo),e(ig,WR),e(WR,Deo),e(ig,Geo),e(A,Oeo),e(A,dg),e(dg,Fne),e(Fne,Veo),e(dg,Xeo),e(dg,HR),e(HR,zeo),e(dg,Qeo),e(A,Weo),e(A,cg),e(cg,Tne),e(Tne,Heo),e(cg,Ueo),e(cg,UR),e(UR,Jeo),e(cg,Yeo),e(A,Keo),e(A,fg),e(fg,Mne),e(Mne,Zeo),e(fg,eoo),e(fg,JR),e(JR,ooo),e(fg,roo),e(A,too),e(A,mg),e(mg,Ene),e(Ene,aoo),e(mg,noo),e(mg,YR),e(YR,soo),e(mg,loo),e(A,ioo),e(A,gg),e(gg,Cne),e(Cne,doo),e(gg,coo),e(gg,KR),e(KR,foo),e(gg,moo),e(A,goo),e(A,hg),e(hg,wne),e(wne,hoo),e(hg,poo),e(hg,ZR),e(ZR,_oo),e(hg,uoo),e(A,boo),e(A,pg),e(pg,Ane),e(Ane,voo),e(pg,Foo),e(pg,eP),e(eP,Too),e(pg,Moo),e(A,Eoo),e(A,_g),e(_g,Lne),e(Lne,Coo),e(_g,woo),e(_g,oP),e(oP,Aoo),e(_g,Loo),e(A,yoo),e(A,ug),e(ug,yne),e(yne,xoo),e(ug,$oo),e(ug,rP),e(rP,koo),e(ug,Soo),e(A,Roo),e(A,bg),e(bg,xne),e(xne,Poo),e(bg,Boo),e(bg,tP),e(tP,Ioo),e(bg,Noo),e(A,qoo),e(A,vg),e(vg,$ne),e($ne,joo),e(vg,Doo),e(vg,aP),e(aP,Goo),e(vg,Ooo),e(A,Voo),e(A,Fg),e(Fg,kne),e(kne,Xoo),e(Fg,zoo),e(Fg,nP),e(nP,Qoo),e(Fg,Woo),e(A,Hoo),e(A,Tg),e(Tg,Sne),e(Sne,Uoo),e(Tg,Joo),e(Tg,sP),e(sP,Yoo),e(Tg,Koo),e(A,Zoo),e(A,Mg),e(Mg,Rne),e(Rne,ero),e(Mg,oro),e(Mg,lP),e(lP,rro),e(Mg,tro),e(A,aro),e(A,Eg),e(Eg,Pne),e(Pne,nro),e(Eg,sro),e(Eg,iP),e(iP,lro),e(Eg,iro),e(A,dro),e(A,Cg),e(Cg,Bne),e(Bne,cro),e(Cg,fro),e(Cg,dP),e(dP,mro),e(Cg,gro),e(A,hro),e(A,wg),e(wg,Ine),e(Ine,pro),e(wg,_ro),e(wg,cP),e(cP,uro),e(wg,bro),e(A,vro),e(A,Ag),e(Ag,Nne),e(Nne,Fro),e(Ag,Tro),e(Ag,fP),e(fP,Mro),e(Ag,Ero),e(A,Cro),e(A,Lg),e(Lg,qne),e(qne,wro),e(Lg,Aro),e(Lg,mP),e(mP,Lro),e(Lg,yro),e(A,xro),e(A,yg),e(yg,jne),e(jne,$ro),e(yg,kro),e(yg,gP),e(gP,Sro),e(yg,Rro),e(A,Pro),e(A,xg),e(xg,Dne),e(Dne,Bro),e(xg,Iro),e(xg,hP),e(hP,Nro),e(xg,qro),e(A,jro),e(A,$g),e($g,Gne),e(Gne,Dro),e($g,Gro),e($g,pP),e(pP,Oro),e($g,Vro),e(A,Xro),e(A,kg),e(kg,One),e(One,zro),e(kg,Qro),e(kg,_P),e(_P,Wro),e(kg,Hro),e(A,Uro),e(A,Sg),e(Sg,Vne),e(Vne,Jro),e(Sg,Yro),e(Sg,uP),e(uP,Kro),e(Sg,Zro),e(A,eto),e(A,Rg),e(Rg,Xne),e(Xne,oto),e(Rg,rto),e(Rg,bP),e(bP,tto),e(Rg,ato),e(A,nto),e(A,Pg),e(Pg,zne),e(zne,sto),e(Pg,lto),e(Pg,vP),e(vP,ito),e(Pg,dto),e(A,cto),e(A,Bg),e(Bg,Qne),e(Qne,fto),e(Bg,mto),e(Bg,FP),e(FP,gto),e(Bg,hto),e(A,pto),e(A,Ig),e(Ig,Wne),e(Wne,_to),e(Ig,uto),e(Ig,TP),e(TP,bto),e(Ig,vto),e(A,Fto),e(A,Ng),e(Ng,Hne),e(Hne,Tto),e(Ng,Mto),e(Ng,MP),e(MP,Eto),e(Ng,Cto),e(A,wto),e(A,qg),e(qg,Une),e(Une,Ato),e(qg,Lto),e(qg,EP),e(EP,yto),e(qg,xto),e(A,$to),e(A,jg),e(jg,Jne),e(Jne,kto),e(jg,Sto),e(jg,CP),e(CP,Rto),e(jg,Pto),e(A,Bto),e(A,Dg),e(Dg,Yne),e(Yne,Ito),e(Dg,Nto),e(Dg,wP),e(wP,qto),e(Dg,jto),e(A,Dto),e(A,Gg),e(Gg,Kne),e(Kne,Gto),e(Gg,Oto),e(Gg,AP),e(AP,Vto),e(Gg,Xto),e(A,zto),e(A,Og),e(Og,Zne),e(Zne,Qto),e(Og,Wto),e(Og,LP),e(LP,Hto),e(Og,Uto),e(A,Jto),e(A,Vg),e(Vg,ese),e(ese,Yto),e(Vg,Kto),e(Vg,yP),e(yP,Zto),e(Vg,eao),e(A,oao),e(A,Xg),e(Xg,ose),e(ose,rao),e(Xg,tao),e(Xg,xP),e(xP,aao),e(Xg,nao),e(Lr,sao),M(zg,Lr,null),e(wo,lao),e(wo,Qg),M(WL,Qg,null),e(Qg,iao),e(Qg,rse),e(rse,dao),b(f,qOe,u),b(f,Ri,u),e(Ri,Wg),e(Wg,tse),M(HL,tse,null),e(Ri,cao),e(Ri,ase),e(ase,fao),b(f,jOe,u),b(f,Ao,u),M(UL,Ao,null),e(Ao,mao),e(Ao,JL),e(JL,gao),e(JL,$P),e($P,hao),e(JL,pao),e(Ao,_ao),e(Ao,YL),e(YL,uao),e(YL,nse),e(nse,bao),e(YL,vao),e(Ao,Fao),e(Ao,yr),M(KL,yr,null),e(yr,Tao),e(yr,sse),e(sse,Mao),e(yr,Eao),e(yr,Sa),e(Sa,Cao),e(Sa,lse),e(lse,wao),e(Sa,Aao),e(Sa,ise),e(ise,Lao),e(Sa,yao),e(Sa,dse),e(dse,xao),e(Sa,$ao),e(yr,kao),e(yr,k),e(k,jn),e(jn,cse),e(cse,Sao),e(jn,Rao),e(jn,kP),e(kP,Pao),e(jn,Bao),e(jn,SP),e(SP,Iao),e(jn,Nao),e(k,qao),e(k,Dn),e(Dn,fse),e(fse,jao),e(Dn,Dao),e(Dn,RP),e(RP,Gao),e(Dn,Oao),e(Dn,PP),e(PP,Vao),e(Dn,Xao),e(k,zao),e(k,Gn),e(Gn,mse),e(mse,Qao),e(Gn,Wao),e(Gn,BP),e(BP,Hao),e(Gn,Uao),e(Gn,IP),e(IP,Jao),e(Gn,Yao),e(k,Kao),e(k,Hg),e(Hg,gse),e(gse,Zao),e(Hg,eno),e(Hg,NP),e(NP,ono),e(Hg,rno),e(k,tno),e(k,On),e(On,hse),e(hse,ano),e(On,nno),e(On,qP),e(qP,sno),e(On,lno),e(On,jP),e(jP,ino),e(On,dno),e(k,cno),e(k,Ug),e(Ug,pse),e(pse,fno),e(Ug,mno),e(Ug,DP),e(DP,gno),e(Ug,hno),e(k,pno),e(k,Jg),e(Jg,_se),e(_se,_no),e(Jg,uno),e(Jg,GP),e(GP,bno),e(Jg,vno),e(k,Fno),e(k,Yg),e(Yg,use),e(use,Tno),e(Yg,Mno),e(Yg,OP),e(OP,Eno),e(Yg,Cno),e(k,wno),e(k,Vn),e(Vn,bse),e(bse,Ano),e(Vn,Lno),e(Vn,VP),e(VP,yno),e(Vn,xno),e(Vn,XP),e(XP,$no),e(Vn,kno),e(k,Sno),e(k,Xn),e(Xn,vse),e(vse,Rno),e(Xn,Pno),e(Xn,zP),e(zP,Bno),e(Xn,Ino),e(Xn,QP),e(QP,Nno),e(Xn,qno),e(k,jno),e(k,zn),e(zn,Fse),e(Fse,Dno),e(zn,Gno),e(zn,WP),e(WP,Ono),e(zn,Vno),e(zn,HP),e(HP,Xno),e(zn,zno),e(k,Qno),e(k,Kg),e(Kg,Tse),e(Tse,Wno),e(Kg,Hno),e(Kg,UP),e(UP,Uno),e(Kg,Jno),e(k,Yno),e(k,Zg),e(Zg,Mse),e(Mse,Kno),e(Zg,Zno),e(Zg,JP),e(JP,eso),e(Zg,oso),e(k,rso),e(k,eh),e(eh,Ese),e(Ese,tso),e(eh,aso),e(eh,YP),e(YP,nso),e(eh,sso),e(k,lso),e(k,Qn),e(Qn,Cse),e(Cse,iso),e(Qn,dso),e(Qn,KP),e(KP,cso),e(Qn,fso),e(Qn,ZP),e(ZP,mso),e(Qn,gso),e(k,hso),e(k,oh),e(oh,wse),e(wse,pso),e(oh,_so),e(oh,eB),e(eB,uso),e(oh,bso),e(k,vso),e(k,Wn),e(Wn,Ase),e(Ase,Fso),e(Wn,Tso),e(Wn,oB),e(oB,Mso),e(Wn,Eso),e(Wn,rB),e(rB,Cso),e(Wn,wso),e(k,Aso),e(k,Hn),e(Hn,Lse),e(Lse,Lso),e(Hn,yso),e(Hn,tB),e(tB,xso),e(Hn,$so),e(Hn,aB),e(aB,kso),e(Hn,Sso),e(k,Rso),e(k,Un),e(Un,yse),e(yse,Pso),e(Un,Bso),e(Un,nB),e(nB,Iso),e(Un,Nso),e(Un,sB),e(sB,qso),e(Un,jso),e(k,Dso),e(k,Jn),e(Jn,xse),e(xse,Gso),e(Jn,Oso),e(Jn,lB),e(lB,Vso),e(Jn,Xso),e(Jn,iB),e(iB,zso),e(Jn,Qso),e(k,Wso),e(k,rh),e(rh,$se),e($se,Hso),e(rh,Uso),e(rh,dB),e(dB,Jso),e(rh,Yso),e(k,Kso),e(k,Yn),e(Yn,kse),e(kse,Zso),e(Yn,elo),e(Yn,cB),e(cB,olo),e(Yn,rlo),e(Yn,fB),e(fB,tlo),e(Yn,alo),e(k,nlo),e(k,Kn),e(Kn,Sse),e(Sse,slo),e(Kn,llo),e(Kn,mB),e(mB,ilo),e(Kn,dlo),e(Kn,gB),e(gB,clo),e(Kn,flo),e(k,mlo),e(k,Zn),e(Zn,Rse),e(Rse,glo),e(Zn,hlo),e(Zn,hB),e(hB,plo),e(Zn,_lo),e(Zn,pB),e(pB,ulo),e(Zn,blo),e(k,vlo),e(k,es),e(es,Pse),e(Pse,Flo),e(es,Tlo),e(es,_B),e(_B,Mlo),e(es,Elo),e(es,uB),e(uB,Clo),e(es,wlo),e(k,Alo),e(k,os),e(os,Bse),e(Bse,Llo),e(os,ylo),e(os,bB),e(bB,xlo),e(os,$lo),e(os,vB),e(vB,klo),e(os,Slo),e(k,Rlo),e(k,rs),e(rs,Ise),e(Ise,Plo),e(rs,Blo),e(rs,FB),e(FB,Ilo),e(rs,Nlo),e(rs,TB),e(TB,qlo),e(rs,jlo),e(k,Dlo),e(k,th),e(th,Nse),e(Nse,Glo),e(th,Olo),e(th,MB),e(MB,Vlo),e(th,Xlo),e(k,zlo),e(k,ts),e(ts,qse),e(qse,Qlo),e(ts,Wlo),e(ts,EB),e(EB,Hlo),e(ts,Ulo),e(ts,CB),e(CB,Jlo),e(ts,Ylo),e(k,Klo),e(k,ah),e(ah,jse),e(jse,Zlo),e(ah,eio),e(ah,wB),e(wB,oio),e(ah,rio),e(k,tio),e(k,as),e(as,Dse),e(Dse,aio),e(as,nio),e(as,AB),e(AB,sio),e(as,lio),e(as,LB),e(LB,iio),e(as,dio),e(k,cio),e(k,ns),e(ns,Gse),e(Gse,fio),e(ns,mio),e(ns,yB),e(yB,gio),e(ns,hio),e(ns,xB),e(xB,pio),e(ns,_io),e(k,uio),e(k,ss),e(ss,Ose),e(Ose,bio),e(ss,vio),e(ss,$B),e($B,Fio),e(ss,Tio),e(ss,kB),e(kB,Mio),e(ss,Eio),e(k,Cio),e(k,nh),e(nh,Vse),e(Vse,wio),e(nh,Aio),e(nh,SB),e(SB,Lio),e(nh,yio),e(k,xio),e(k,ls),e(ls,Xse),e(Xse,$io),e(ls,kio),e(ls,RB),e(RB,Sio),e(ls,Rio),e(ls,PB),e(PB,Pio),e(ls,Bio),e(k,Iio),e(k,is),e(is,zse),e(zse,Nio),e(is,qio),e(is,BB),e(BB,jio),e(is,Dio),e(is,IB),e(IB,Gio),e(is,Oio),e(k,Vio),e(k,ds),e(ds,Qse),e(Qse,Xio),e(ds,zio),e(ds,NB),e(NB,Qio),e(ds,Wio),e(ds,qB),e(qB,Hio),e(ds,Uio),e(k,Jio),e(k,sh),e(sh,Wse),e(Wse,Yio),e(sh,Kio),e(sh,jB),e(jB,Zio),e(sh,edo),e(k,odo),e(k,cs),e(cs,Hse),e(Hse,rdo),e(cs,tdo),e(cs,DB),e(DB,ado),e(cs,ndo),e(cs,GB),e(GB,sdo),e(cs,ldo),e(k,ido),e(k,fs),e(fs,Use),e(Use,ddo),e(fs,cdo),e(fs,OB),e(OB,fdo),e(fs,mdo),e(fs,VB),e(VB,gdo),e(fs,hdo),e(k,pdo),e(k,ms),e(ms,Jse),e(Jse,_do),e(ms,udo),e(ms,XB),e(XB,bdo),e(ms,vdo),e(ms,zB),e(zB,Fdo),e(ms,Tdo),e(k,Mdo),e(k,gs),e(gs,Yse),e(Yse,Edo),e(gs,Cdo),e(gs,QB),e(QB,wdo),e(gs,Ado),e(gs,WB),e(WB,Ldo),e(gs,ydo),e(k,xdo),e(k,hs),e(hs,Kse),e(Kse,$do),e(hs,kdo),e(hs,HB),e(HB,Sdo),e(hs,Rdo),e(hs,UB),e(UB,Pdo),e(hs,Bdo),e(k,Ido),e(k,ps),e(ps,Zse),e(Zse,Ndo),e(ps,qdo),e(ps,JB),e(JB,jdo),e(ps,Ddo),e(ps,YB),e(YB,Gdo),e(ps,Odo),e(k,Vdo),e(k,_s),e(_s,ele),e(ele,Xdo),e(_s,zdo),e(_s,KB),e(KB,Qdo),e(_s,Wdo),e(_s,ZB),e(ZB,Hdo),e(_s,Udo),e(k,Jdo),e(k,us),e(us,ole),e(ole,Ydo),e(us,Kdo),e(us,eI),e(eI,Zdo),e(us,eco),e(us,oI),e(oI,oco),e(us,rco),e(k,tco),e(k,lh),e(lh,rle),e(rle,aco),e(lh,nco),e(lh,rI),e(rI,sco),e(lh,lco),e(k,ico),e(k,bs),e(bs,tle),e(tle,dco),e(bs,cco),e(bs,tI),e(tI,fco),e(bs,mco),e(bs,aI),e(aI,gco),e(bs,hco),e(k,pco),e(k,ih),e(ih,ale),e(ale,_co),e(ih,uco),e(ih,nI),e(nI,bco),e(ih,vco),e(k,Fco),e(k,dh),e(dh,nle),e(nle,Tco),e(dh,Mco),e(dh,sI),e(sI,Eco),e(dh,Cco),e(k,wco),e(k,vs),e(vs,sle),e(sle,Aco),e(vs,Lco),e(vs,lI),e(lI,yco),e(vs,xco),e(vs,iI),e(iI,$co),e(vs,kco),e(k,Sco),e(k,Fs),e(Fs,lle),e(lle,Rco),e(Fs,Pco),e(Fs,dI),e(dI,Bco),e(Fs,Ico),e(Fs,cI),e(cI,Nco),e(Fs,qco),e(k,jco),e(k,Ts),e(Ts,ile),e(ile,Dco),e(Ts,Gco),e(Ts,fI),e(fI,Oco),e(Ts,Vco),e(Ts,mI),e(mI,Xco),e(Ts,zco),e(k,Qco),e(k,ch),e(ch,dle),e(dle,Wco),e(ch,Hco),e(ch,gI),e(gI,Uco),e(ch,Jco),e(k,Yco),e(k,Ms),e(Ms,cle),e(cle,Kco),e(Ms,Zco),e(Ms,hI),e(hI,efo),e(Ms,ofo),e(Ms,pI),e(pI,rfo),e(Ms,tfo),e(k,afo),e(k,Es),e(Es,fle),e(fle,nfo),e(Es,sfo),e(Es,_I),e(_I,lfo),e(Es,ifo),e(Es,uI),e(uI,dfo),e(Es,cfo),e(k,ffo),e(k,Cs),e(Cs,mle),e(mle,mfo),e(Cs,gfo),e(Cs,bI),e(bI,hfo),e(Cs,pfo),e(Cs,vI),e(vI,_fo),e(Cs,ufo),e(k,bfo),e(k,ws),e(ws,gle),e(gle,vfo),e(ws,Ffo),e(ws,FI),e(FI,Tfo),e(ws,Mfo),e(ws,TI),e(TI,Efo),e(ws,Cfo),e(k,wfo),e(k,As),e(As,hle),e(hle,Afo),e(As,Lfo),e(As,MI),e(MI,yfo),e(As,xfo),e(As,EI),e(EI,$fo),e(As,kfo),e(k,Sfo),e(k,Ls),e(Ls,ple),e(ple,Rfo),e(Ls,Pfo),e(Ls,CI),e(CI,Bfo),e(Ls,Ifo),e(Ls,wI),e(wI,Nfo),e(Ls,qfo),e(k,jfo),e(k,fh),e(fh,_le),e(_le,Dfo),e(fh,Gfo),e(fh,AI),e(AI,Ofo),e(fh,Vfo),e(k,Xfo),e(k,ys),e(ys,ule),e(ule,zfo),e(ys,Qfo),e(ys,LI),e(LI,Wfo),e(ys,Hfo),e(ys,yI),e(yI,Ufo),e(ys,Jfo),e(k,Yfo),e(k,mh),e(mh,ble),e(ble,Kfo),e(mh,Zfo),e(mh,xI),e(xI,emo),e(mh,omo),e(k,rmo),e(k,gh),e(gh,vle),e(vle,tmo),e(gh,amo),e(gh,$I),e($I,nmo),e(gh,smo),e(k,lmo),e(k,hh),e(hh,Fle),e(Fle,imo),e(hh,dmo),e(hh,kI),e(kI,cmo),e(hh,fmo),e(k,mmo),e(k,ph),e(ph,Tle),e(Tle,gmo),e(ph,hmo),e(ph,SI),e(SI,pmo),e(ph,_mo),e(k,umo),e(k,xs),e(xs,Mle),e(Mle,bmo),e(xs,vmo),e(xs,RI),e(RI,Fmo),e(xs,Tmo),e(xs,PI),e(PI,Mmo),e(xs,Emo),e(k,Cmo),e(k,_h),e(_h,Ele),e(Ele,wmo),e(_h,Amo),e(_h,BI),e(BI,Lmo),e(_h,ymo),e(k,xmo),e(k,$s),e($s,Cle),e(Cle,$mo),e($s,kmo),e($s,II),e(II,Smo),e($s,Rmo),e($s,NI),e(NI,Pmo),e($s,Bmo),e(k,Imo),e(k,ks),e(ks,wle),e(wle,Nmo),e(ks,qmo),e(ks,qI),e(qI,jmo),e(ks,Dmo),e(ks,jI),e(jI,Gmo),e(ks,Omo),e(k,Vmo),e(k,Ss),e(Ss,Ale),e(Ale,Xmo),e(Ss,zmo),e(Ss,DI),e(DI,Qmo),e(Ss,Wmo),e(Ss,GI),e(GI,Hmo),e(Ss,Umo),e(k,Jmo),e(k,Rs),e(Rs,Lle),e(Lle,Ymo),e(Rs,Kmo),e(Rs,OI),e(OI,Zmo),e(Rs,ego),e(Rs,VI),e(VI,ogo),e(Rs,rgo),e(k,tgo),e(k,Ps),e(Ps,yle),e(yle,ago),e(Ps,ngo),e(Ps,XI),e(XI,sgo),e(Ps,lgo),e(Ps,zI),e(zI,igo),e(Ps,dgo),e(k,cgo),e(k,Bs),e(Bs,xle),e(xle,fgo),e(Bs,mgo),e(Bs,QI),e(QI,ggo),e(Bs,hgo),e(Bs,WI),e(WI,pgo),e(Bs,_go),e(k,ugo),e(k,uh),e(uh,$le),e($le,bgo),e(uh,vgo),e(uh,HI),e(HI,Fgo),e(uh,Tgo),e(k,Mgo),e(k,bh),e(bh,kle),e(kle,Ego),e(bh,Cgo),e(bh,UI),e(UI,wgo),e(bh,Ago),e(k,Lgo),e(k,Is),e(Is,Sle),e(Sle,ygo),e(Is,xgo),e(Is,JI),e(JI,$go),e(Is,kgo),e(Is,YI),e(YI,Sgo),e(Is,Rgo),e(k,Pgo),e(k,Ns),e(Ns,Rle),e(Rle,Bgo),e(Ns,Igo),e(Ns,KI),e(KI,Ngo),e(Ns,qgo),e(Ns,ZI),e(ZI,jgo),e(Ns,Dgo),e(k,Ggo),e(k,qs),e(qs,Ple),e(Ple,Ogo),e(qs,Vgo),e(qs,eN),e(eN,Xgo),e(qs,zgo),e(qs,oN),e(oN,Qgo),e(qs,Wgo),e(k,Hgo),e(k,vh),e(vh,Ble),e(Ble,Ugo),e(vh,Jgo),e(vh,rN),e(rN,Ygo),e(vh,Kgo),e(k,Zgo),e(k,Fh),e(Fh,Ile),e(Ile,eho),e(Fh,oho),e(Fh,tN),e(tN,rho),e(Fh,tho),e(k,aho),e(k,Th),e(Th,Nle),e(Nle,nho),e(Th,sho),e(Th,aN),e(aN,lho),e(Th,iho),e(k,dho),e(k,js),e(js,qle),e(qle,cho),e(js,fho),e(js,nN),e(nN,mho),e(js,gho),e(js,sN),e(sN,hho),e(js,pho),e(k,_ho),e(k,Ds),e(Ds,jle),e(jle,uho),e(Ds,bho),e(Ds,lN),e(lN,vho),e(Ds,Fho),e(Ds,iN),e(iN,Tho),e(Ds,Mho),e(k,Eho),e(k,Mh),e(Mh,Dle),e(Dle,Cho),e(Mh,who),e(Mh,dN),e(dN,Aho),e(Mh,Lho),e(k,yho),e(k,Eh),e(Eh,Gle),e(Gle,xho),e(Eh,$ho),e(Eh,cN),e(cN,kho),e(Eh,Sho),e(k,Rho),e(k,Ch),e(Ch,Ole),e(Ole,Pho),e(Ch,Bho),e(Ch,fN),e(fN,Iho),e(Ch,Nho),e(k,qho),e(k,Gs),e(Gs,Vle),e(Vle,jho),e(Gs,Dho),e(Gs,mN),e(mN,Gho),e(Gs,Oho),e(Gs,gN),e(gN,Vho),e(Gs,Xho),e(k,zho),e(k,wh),e(wh,Xle),e(Xle,Qho),e(wh,Who),e(wh,hN),e(hN,Hho),e(wh,Uho),e(k,Jho),e(k,Ah),e(Ah,zle),e(zle,Yho),e(Ah,Kho),e(Ah,pN),e(pN,Zho),e(Ah,epo),e(k,opo),e(k,Os),e(Os,Qle),e(Qle,rpo),e(Os,tpo),e(Os,_N),e(_N,apo),e(Os,npo),e(Os,uN),e(uN,spo),e(Os,lpo),e(k,ipo),e(k,Vs),e(Vs,Wle),e(Wle,dpo),e(Vs,cpo),e(Vs,bN),e(bN,fpo),e(Vs,mpo),e(Vs,vN),e(vN,gpo),e(Vs,hpo),e(k,ppo),e(k,Xs),e(Xs,Hle),e(Hle,_po),e(Xs,upo),e(Xs,FN),e(FN,bpo),e(Xs,vpo),e(Xs,TN),e(TN,Fpo),e(Xs,Tpo),e(k,Mpo),e(k,zs),e(zs,Ule),e(Ule,Epo),e(zs,Cpo),e(zs,MN),e(MN,wpo),e(zs,Apo),e(zs,EN),e(EN,Lpo),e(zs,ypo),e(yr,xpo),M(Lh,yr,null),e(Ao,$po),e(Ao,yh),M(ZL,yh,null),e(yh,kpo),e(yh,Jle),e(Jle,Spo),b(f,DOe,u),b(f,Pi,u),e(Pi,xh),e(xh,Yle),M(ey,Yle,null),e(Pi,Rpo),e(Pi,Kle),e(Kle,Ppo),b(f,GOe,u),b(f,Lo,u),M(oy,Lo,null),e(Lo,Bpo),e(Lo,ry),e(ry,Ipo),e(ry,CN),e(CN,Npo),e(ry,qpo),e(Lo,jpo),e(Lo,ty),e(ty,Dpo),e(ty,Zle),e(Zle,Gpo),e(ty,Opo),e(Lo,Vpo),e(Lo,He),M(ay,He,null),e(He,Xpo),e(He,eie),e(eie,zpo),e(He,Qpo),e(He,Ra),e(Ra,Wpo),e(Ra,oie),e(oie,Hpo),e(Ra,Upo),e(Ra,rie),e(rie,Jpo),e(Ra,Ypo),e(Ra,tie),e(tie,Kpo),e(Ra,Zpo),e(He,e_o),e(He,Y),e(Y,$h),e($h,aie),e(aie,o_o),e($h,r_o),e($h,wN),e(wN,t_o),e($h,a_o),e(Y,n_o),e(Y,kh),e(kh,nie),e(nie,s_o),e(kh,l_o),e(kh,AN),e(AN,i_o),e(kh,d_o),e(Y,c_o),e(Y,Sh),e(Sh,sie),e(sie,f_o),e(Sh,m_o),e(Sh,LN),e(LN,g_o),e(Sh,h_o),e(Y,p_o),e(Y,Rh),e(Rh,lie),e(lie,__o),e(Rh,u_o),e(Rh,yN),e(yN,b_o),e(Rh,v_o),e(Y,F_o),e(Y,Ph),e(Ph,iie),e(iie,T_o),e(Ph,M_o),e(Ph,xN),e(xN,E_o),e(Ph,C_o),e(Y,w_o),e(Y,Bh),e(Bh,die),e(die,A_o),e(Bh,L_o),e(Bh,$N),e($N,y_o),e(Bh,x_o),e(Y,$_o),e(Y,Ih),e(Ih,cie),e(cie,k_o),e(Ih,S_o),e(Ih,kN),e(kN,R_o),e(Ih,P_o),e(Y,B_o),e(Y,Nh),e(Nh,fie),e(fie,I_o),e(Nh,N_o),e(Nh,SN),e(SN,q_o),e(Nh,j_o),e(Y,D_o),e(Y,qh),e(qh,mie),e(mie,G_o),e(qh,O_o),e(qh,RN),e(RN,V_o),e(qh,X_o),e(Y,z_o),e(Y,jh),e(jh,gie),e(gie,Q_o),e(jh,W_o),e(jh,PN),e(PN,H_o),e(jh,U_o),e(Y,J_o),e(Y,Dh),e(Dh,hie),e(hie,Y_o),e(Dh,K_o),e(Dh,BN),e(BN,Z_o),e(Dh,euo),e(Y,ouo),e(Y,Gh),e(Gh,pie),e(pie,ruo),e(Gh,tuo),e(Gh,IN),e(IN,auo),e(Gh,nuo),e(Y,suo),e(Y,Oh),e(Oh,_ie),e(_ie,luo),e(Oh,iuo),e(Oh,NN),e(NN,duo),e(Oh,cuo),e(Y,fuo),e(Y,Vh),e(Vh,uie),e(uie,muo),e(Vh,guo),e(Vh,qN),e(qN,huo),e(Vh,puo),e(Y,_uo),e(Y,Xh),e(Xh,bie),e(bie,uuo),e(Xh,buo),e(Xh,jN),e(jN,vuo),e(Xh,Fuo),e(Y,Tuo),e(Y,zh),e(zh,vie),e(vie,Muo),e(zh,Euo),e(zh,DN),e(DN,Cuo),e(zh,wuo),e(Y,Auo),e(Y,Qh),e(Qh,Fie),e(Fie,Luo),e(Qh,yuo),e(Qh,GN),e(GN,xuo),e(Qh,$uo),e(Y,kuo),e(Y,Wh),e(Wh,Tie),e(Tie,Suo),e(Wh,Ruo),e(Wh,ON),e(ON,Puo),e(Wh,Buo),e(Y,Iuo),e(Y,Hh),e(Hh,Mie),e(Mie,Nuo),e(Hh,quo),e(Hh,VN),e(VN,juo),e(Hh,Duo),e(Y,Guo),e(Y,Uh),e(Uh,Eie),e(Eie,Ouo),e(Uh,Vuo),e(Uh,XN),e(XN,Xuo),e(Uh,zuo),e(Y,Quo),e(Y,Jh),e(Jh,Cie),e(Cie,Wuo),e(Jh,Huo),e(Jh,zN),e(zN,Uuo),e(Jh,Juo),e(Y,Yuo),e(Y,Yh),e(Yh,wie),e(wie,Kuo),e(Yh,Zuo),e(Yh,QN),e(QN,e1o),e(Yh,o1o),e(Y,r1o),e(Y,Kh),e(Kh,Aie),e(Aie,t1o),e(Kh,a1o),e(Kh,WN),e(WN,n1o),e(Kh,s1o),e(Y,l1o),e(Y,Zh),e(Zh,Lie),e(Lie,i1o),e(Zh,d1o),e(Zh,HN),e(HN,c1o),e(Zh,f1o),e(Y,m1o),e(Y,ep),e(ep,yie),e(yie,g1o),e(ep,h1o),e(ep,UN),e(UN,p1o),e(ep,_1o),e(Y,u1o),e(Y,op),e(op,xie),e(xie,b1o),e(op,v1o),e(op,JN),e(JN,F1o),e(op,T1o),e(Y,M1o),e(Y,rp),e(rp,$ie),e($ie,E1o),e(rp,C1o),e(rp,YN),e(YN,w1o),e(rp,A1o),e(Y,L1o),e(Y,tp),e(tp,kie),e(kie,y1o),e(tp,x1o),e(tp,KN),e(KN,$1o),e(tp,k1o),e(Y,S1o),e(Y,ap),e(ap,Sie),e(Sie,R1o),e(ap,P1o),e(ap,ZN),e(ZN,B1o),e(ap,I1o),e(Y,N1o),e(Y,np),e(np,Rie),e(Rie,q1o),e(np,j1o),e(np,eq),e(eq,D1o),e(np,G1o),e(Y,O1o),e(Y,sp),e(sp,Pie),e(Pie,V1o),e(sp,X1o),e(sp,oq),e(oq,z1o),e(sp,Q1o),e(Y,W1o),e(Y,lp),e(lp,Bie),e(Bie,H1o),e(lp,U1o),e(lp,rq),e(rq,J1o),e(lp,Y1o),e(Y,K1o),e(Y,ip),e(ip,Iie),e(Iie,Z1o),e(ip,e7o),e(ip,tq),e(tq,o7o),e(ip,r7o),e(He,t7o),M(dp,He,null),e(He,a7o),M(cp,He,null),e(Lo,n7o),e(Lo,fp),M(ny,fp,null),e(fp,s7o),e(fp,Nie),e(Nie,l7o),b(f,OOe,u),b(f,Bi,u),e(Bi,mp),e(mp,qie),M(sy,qie,null),e(Bi,i7o),e(Bi,jie),e(jie,d7o),b(f,VOe,u),b(f,yo,u),M(ly,yo,null),e(yo,c7o),e(yo,iy),e(iy,f7o),e(iy,aq),e(aq,m7o),e(iy,g7o),e(yo,h7o),e(yo,dy),e(dy,p7o),e(dy,Die),e(Die,_7o),e(dy,u7o),e(yo,b7o),e(yo,Ue),M(cy,Ue,null),e(Ue,v7o),e(Ue,Gie),e(Gie,F7o),e(Ue,T7o),e(Ue,Ii),e(Ii,M7o),e(Ii,Oie),e(Oie,E7o),e(Ii,C7o),e(Ii,Vie),e(Vie,w7o),e(Ii,A7o),e(Ue,L7o),e(Ue,he),e(he,gp),e(gp,Xie),e(Xie,y7o),e(gp,x7o),e(gp,nq),e(nq,$7o),e(gp,k7o),e(he,S7o),e(he,hp),e(hp,zie),e(zie,R7o),e(hp,P7o),e(hp,Qie),e(Qie,B7o),e(hp,I7o),e(he,N7o),e(he,pp),e(pp,Wie),e(Wie,q7o),e(pp,j7o),e(pp,sq),e(sq,D7o),e(pp,G7o),e(he,O7o),e(he,_p),e(_p,Hie),e(Hie,V7o),e(_p,X7o),e(_p,lq),e(lq,z7o),e(_p,Q7o),e(he,W7o),e(he,up),e(up,Uie),e(Uie,H7o),e(up,U7o),e(up,iq),e(iq,J7o),e(up,Y7o),e(he,K7o),e(he,bp),e(bp,Jie),e(Jie,Z7o),e(bp,e2o),e(bp,dq),e(dq,o2o),e(bp,r2o),e(he,t2o),e(he,vp),e(vp,Yie),e(Yie,a2o),e(vp,n2o),e(vp,cq),e(cq,s2o),e(vp,l2o),e(he,i2o),e(he,Fp),e(Fp,Kie),e(Kie,d2o),e(Fp,c2o),e(Fp,fq),e(fq,f2o),e(Fp,m2o),e(he,g2o),e(he,Tp),e(Tp,Zie),e(Zie,h2o),e(Tp,p2o),e(Tp,mq),e(mq,_2o),e(Tp,u2o),e(he,b2o),e(he,Mp),e(Mp,ede),e(ede,v2o),e(Mp,F2o),e(Mp,gq),e(gq,T2o),e(Mp,M2o),e(he,E2o),e(he,Ep),e(Ep,ode),e(ode,C2o),e(Ep,w2o),e(Ep,hq),e(hq,A2o),e(Ep,L2o),e(he,y2o),e(he,Cp),e(Cp,rde),e(rde,x2o),e(Cp,$2o),e(Cp,pq),e(pq,k2o),e(Cp,S2o),e(he,R2o),e(he,wp),e(wp,tde),e(tde,P2o),e(wp,B2o),e(wp,_q),e(_q,I2o),e(wp,N2o),e(he,q2o),e(he,Ap),e(Ap,ade),e(ade,j2o),e(Ap,D2o),e(Ap,uq),e(uq,G2o),e(Ap,O2o),e(he,V2o),e(he,Lp),e(Lp,nde),e(nde,X2o),e(Lp,z2o),e(Lp,bq),e(bq,Q2o),e(Lp,W2o),e(he,H2o),e(he,yp),e(yp,sde),e(sde,U2o),e(yp,J2o),e(yp,vq),e(vq,Y2o),e(yp,K2o),e(he,Z2o),e(he,xp),e(xp,lde),e(lde,ebo),e(xp,obo),e(xp,Fq),e(Fq,rbo),e(xp,tbo),e(he,abo),e(he,$p),e($p,ide),e(ide,nbo),e($p,sbo),e($p,Tq),e(Tq,lbo),e($p,ibo),e(Ue,dbo),M(kp,Ue,null),e(Ue,cbo),M(Sp,Ue,null),e(yo,fbo),e(yo,Rp),M(fy,Rp,null),e(Rp,mbo),e(Rp,dde),e(dde,gbo),b(f,XOe,u),b(f,Ni,u),e(Ni,Pp),e(Pp,cde),M(my,cde,null),e(Ni,hbo),e(Ni,fde),e(fde,pbo),b(f,zOe,u),b(f,xo,u),M(gy,xo,null),e(xo,_bo),e(xo,qi),e(qi,ubo),e(qi,Mq),e(Mq,bbo),e(qi,vbo),e(qi,Eq),e(Eq,Fbo),e(qi,Tbo),e(xo,Mbo),e(xo,hy),e(hy,Ebo),e(hy,mde),e(mde,Cbo),e(hy,wbo),e(xo,Abo),e(xo,nt),M(py,nt,null),e(nt,Lbo),e(nt,gde),e(gde,ybo),e(nt,xbo),e(nt,ji),e(ji,$bo),e(ji,hde),e(hde,kbo),e(ji,Sbo),e(ji,Cq),e(Cq,Rbo),e(ji,Pbo),e(nt,Bbo),M(Bp,nt,null),e(xo,Ibo),e(xo,Je),M(_y,Je,null),e(Je,Nbo),e(Je,pde),e(pde,qbo),e(Je,jbo),e(Je,Pa),e(Pa,Dbo),e(Pa,_de),e(_de,Gbo),e(Pa,Obo),e(Pa,ude),e(ude,Vbo),e(Pa,Xbo),e(Pa,bde),e(bde,zbo),e(Pa,Qbo),e(Je,Wbo),e(Je,y),e(y,Ip),e(Ip,vde),e(vde,Hbo),e(Ip,Ubo),e(Ip,wq),e(wq,Jbo),e(Ip,Ybo),e(y,Kbo),e(y,Np),e(Np,Fde),e(Fde,Zbo),e(Np,evo),e(Np,Aq),e(Aq,ovo),e(Np,rvo),e(y,tvo),e(y,qp),e(qp,Tde),e(Tde,avo),e(qp,nvo),e(qp,Lq),e(Lq,svo),e(qp,lvo),e(y,ivo),e(y,jp),e(jp,Mde),e(Mde,dvo),e(jp,cvo),e(jp,yq),e(yq,fvo),e(jp,mvo),e(y,gvo),e(y,Dp),e(Dp,Ede),e(Ede,hvo),e(Dp,pvo),e(Dp,xq),e(xq,_vo),e(Dp,uvo),e(y,bvo),e(y,Gp),e(Gp,Cde),e(Cde,vvo),e(Gp,Fvo),e(Gp,$q),e($q,Tvo),e(Gp,Mvo),e(y,Evo),e(y,Op),e(Op,wde),e(wde,Cvo),e(Op,wvo),e(Op,kq),e(kq,Avo),e(Op,Lvo),e(y,yvo),e(y,Vp),e(Vp,Ade),e(Ade,xvo),e(Vp,$vo),e(Vp,Sq),e(Sq,kvo),e(Vp,Svo),e(y,Rvo),e(y,Xp),e(Xp,Lde),e(Lde,Pvo),e(Xp,Bvo),e(Xp,Rq),e(Rq,Ivo),e(Xp,Nvo),e(y,qvo),e(y,zp),e(zp,yde),e(yde,jvo),e(zp,Dvo),e(zp,Pq),e(Pq,Gvo),e(zp,Ovo),e(y,Vvo),e(y,Qp),e(Qp,xde),e(xde,Xvo),e(Qp,zvo),e(Qp,Bq),e(Bq,Qvo),e(Qp,Wvo),e(y,Hvo),e(y,Wp),e(Wp,$de),e($de,Uvo),e(Wp,Jvo),e(Wp,Iq),e(Iq,Yvo),e(Wp,Kvo),e(y,Zvo),e(y,Hp),e(Hp,kde),e(kde,eFo),e(Hp,oFo),e(Hp,Nq),e(Nq,rFo),e(Hp,tFo),e(y,aFo),e(y,Up),e(Up,Sde),e(Sde,nFo),e(Up,sFo),e(Up,qq),e(qq,lFo),e(Up,iFo),e(y,dFo),e(y,Jp),e(Jp,Rde),e(Rde,cFo),e(Jp,fFo),e(Jp,jq),e(jq,mFo),e(Jp,gFo),e(y,hFo),e(y,Yp),e(Yp,Pde),e(Pde,pFo),e(Yp,_Fo),e(Yp,Dq),e(Dq,uFo),e(Yp,bFo),e(y,vFo),e(y,Kp),e(Kp,Bde),e(Bde,FFo),e(Kp,TFo),e(Kp,Gq),e(Gq,MFo),e(Kp,EFo),e(y,CFo),e(y,Zp),e(Zp,Ide),e(Ide,wFo),e(Zp,AFo),e(Zp,Oq),e(Oq,LFo),e(Zp,yFo),e(y,xFo),e(y,e_),e(e_,Nde),e(Nde,$Fo),e(e_,kFo),e(e_,Vq),e(Vq,SFo),e(e_,RFo),e(y,PFo),e(y,o_),e(o_,qde),e(qde,BFo),e(o_,IFo),e(o_,Xq),e(Xq,NFo),e(o_,qFo),e(y,jFo),e(y,r_),e(r_,jde),e(jde,DFo),e(r_,GFo),e(r_,zq),e(zq,OFo),e(r_,VFo),e(y,XFo),e(y,t_),e(t_,Dde),e(Dde,zFo),e(t_,QFo),e(t_,Qq),e(Qq,WFo),e(t_,HFo),e(y,UFo),e(y,a_),e(a_,Gde),e(Gde,JFo),e(a_,YFo),e(a_,Wq),e(Wq,KFo),e(a_,ZFo),e(y,e6o),e(y,n_),e(n_,Ode),e(Ode,o6o),e(n_,r6o),e(n_,Hq),e(Hq,t6o),e(n_,a6o),e(y,n6o),e(y,s_),e(s_,Vde),e(Vde,s6o),e(s_,l6o),e(s_,Uq),e(Uq,i6o),e(s_,d6o),e(y,c6o),e(y,l_),e(l_,Xde),e(Xde,f6o),e(l_,m6o),e(l_,Jq),e(Jq,g6o),e(l_,h6o),e(y,p6o),e(y,i_),e(i_,zde),e(zde,_6o),e(i_,u6o),e(i_,Yq),e(Yq,b6o),e(i_,v6o),e(y,F6o),e(y,d_),e(d_,Qde),e(Qde,T6o),e(d_,M6o),e(d_,Kq),e(Kq,E6o),e(d_,C6o),e(y,w6o),e(y,c_),e(c_,Wde),e(Wde,A6o),e(c_,L6o),e(c_,Zq),e(Zq,y6o),e(c_,x6o),e(y,$6o),e(y,f_),e(f_,Hde),e(Hde,k6o),e(f_,S6o),e(f_,ej),e(ej,R6o),e(f_,P6o),e(y,B6o),e(y,m_),e(m_,Ude),e(Ude,I6o),e(m_,N6o),e(m_,oj),e(oj,q6o),e(m_,j6o),e(y,D6o),e(y,g_),e(g_,Jde),e(Jde,G6o),e(g_,O6o),e(g_,rj),e(rj,V6o),e(g_,X6o),e(y,z6o),e(y,h_),e(h_,Yde),e(Yde,Q6o),e(h_,W6o),e(h_,tj),e(tj,H6o),e(h_,U6o),e(y,J6o),e(y,p_),e(p_,Kde),e(Kde,Y6o),e(p_,K6o),e(p_,aj),e(aj,Z6o),e(p_,eTo),e(y,oTo),e(y,Qs),e(Qs,Zde),e(Zde,rTo),e(Qs,tTo),e(Qs,nj),e(nj,aTo),e(Qs,nTo),e(Qs,sj),e(sj,sTo),e(Qs,lTo),e(y,iTo),e(y,__),e(__,ece),e(ece,dTo),e(__,cTo),e(__,lj),e(lj,fTo),e(__,mTo),e(y,gTo),e(y,u_),e(u_,oce),e(oce,hTo),e(u_,pTo),e(u_,ij),e(ij,_To),e(u_,uTo),e(y,bTo),e(y,b_),e(b_,rce),e(rce,vTo),e(b_,FTo),e(b_,dj),e(dj,TTo),e(b_,MTo),e(y,ETo),e(y,v_),e(v_,tce),e(tce,CTo),e(v_,wTo),e(v_,cj),e(cj,ATo),e(v_,LTo),e(y,yTo),e(y,F_),e(F_,ace),e(ace,xTo),e(F_,$To),e(F_,fj),e(fj,kTo),e(F_,STo),e(y,RTo),e(y,T_),e(T_,nce),e(nce,PTo),e(T_,BTo),e(T_,mj),e(mj,ITo),e(T_,NTo),e(y,qTo),e(y,M_),e(M_,sce),e(sce,jTo),e(M_,DTo),e(M_,gj),e(gj,GTo),e(M_,OTo),e(y,VTo),e(y,E_),e(E_,lce),e(lce,XTo),e(E_,zTo),e(E_,hj),e(hj,QTo),e(E_,WTo),e(y,HTo),e(y,C_),e(C_,ice),e(ice,UTo),e(C_,JTo),e(C_,pj),e(pj,YTo),e(C_,KTo),e(y,ZTo),e(y,w_),e(w_,dce),e(dce,eMo),e(w_,oMo),e(w_,_j),e(_j,rMo),e(w_,tMo),e(y,aMo),e(y,A_),e(A_,cce),e(cce,nMo),e(A_,sMo),e(A_,uj),e(uj,lMo),e(A_,iMo),e(y,dMo),e(y,L_),e(L_,fce),e(fce,cMo),e(L_,fMo),e(L_,bj),e(bj,mMo),e(L_,gMo),e(y,hMo),e(y,y_),e(y_,mce),e(mce,pMo),e(y_,_Mo),e(y_,vj),e(vj,uMo),e(y_,bMo),e(y,vMo),e(y,x_),e(x_,gce),e(gce,FMo),e(x_,TMo),e(x_,Fj),e(Fj,MMo),e(x_,EMo),e(y,CMo),e(y,$_),e($_,hce),e(hce,wMo),e($_,AMo),e($_,Tj),e(Tj,LMo),e($_,yMo),e(y,xMo),e(y,k_),e(k_,pce),e(pce,$Mo),e(k_,kMo),e(k_,Mj),e(Mj,SMo),e(k_,RMo),e(y,PMo),e(y,S_),e(S_,_ce),e(_ce,BMo),e(S_,IMo),e(S_,Ej),e(Ej,NMo),e(S_,qMo),e(y,jMo),e(y,R_),e(R_,uce),e(uce,DMo),e(R_,GMo),e(R_,Cj),e(Cj,OMo),e(R_,VMo),e(y,XMo),e(y,P_),e(P_,bce),e(bce,zMo),e(P_,QMo),e(P_,wj),e(wj,WMo),e(P_,HMo),e(y,UMo),e(y,B_),e(B_,vce),e(vce,JMo),e(B_,YMo),e(B_,Aj),e(Aj,KMo),e(B_,ZMo),e(y,e4o),e(y,I_),e(I_,Fce),e(Fce,o4o),e(I_,r4o),e(I_,Lj),e(Lj,t4o),e(I_,a4o),e(y,n4o),e(y,N_),e(N_,Tce),e(Tce,s4o),e(N_,l4o),e(N_,yj),e(yj,i4o),e(N_,d4o),e(y,c4o),e(y,q_),e(q_,Mce),e(Mce,f4o),e(q_,m4o),e(q_,xj),e(xj,g4o),e(q_,h4o),e(y,p4o),e(y,j_),e(j_,Ece),e(Ece,_4o),e(j_,u4o),e(j_,$j),e($j,b4o),e(j_,v4o),e(y,F4o),e(y,D_),e(D_,Cce),e(Cce,T4o),e(D_,M4o),e(D_,kj),e(kj,E4o),e(D_,C4o),e(y,w4o),e(y,G_),e(G_,wce),e(wce,A4o),e(G_,L4o),e(G_,Sj),e(Sj,y4o),e(G_,x4o),e(y,$4o),e(y,O_),e(O_,Ace),e(Ace,k4o),e(O_,S4o),e(O_,Rj),e(Rj,R4o),e(O_,P4o),e(y,B4o),e(y,V_),e(V_,Lce),e(Lce,I4o),e(V_,N4o),e(V_,Pj),e(Pj,q4o),e(V_,j4o),e(y,D4o),e(y,X_),e(X_,yce),e(yce,G4o),e(X_,O4o),e(X_,Bj),e(Bj,V4o),e(X_,X4o),e(y,z4o),e(y,z_),e(z_,xce),e(xce,Q4o),e(z_,W4o),e(z_,Ij),e(Ij,H4o),e(z_,U4o),e(y,J4o),e(y,Q_),e(Q_,$ce),e($ce,Y4o),e(Q_,K4o),e(Q_,Nj),e(Nj,Z4o),e(Q_,eEo),e(y,oEo),e(y,W_),e(W_,kce),e(kce,rEo),e(W_,tEo),e(W_,qj),e(qj,aEo),e(W_,nEo),e(y,sEo),e(y,H_),e(H_,Sce),e(Sce,lEo),e(H_,iEo),e(H_,jj),e(jj,dEo),e(H_,cEo),e(y,fEo),e(y,U_),e(U_,Rce),e(Rce,mEo),e(U_,gEo),e(U_,Dj),e(Dj,hEo),e(U_,pEo),e(y,_Eo),e(y,J_),e(J_,Pce),e(Pce,uEo),e(J_,bEo),e(J_,Gj),e(Gj,vEo),e(J_,FEo),e(y,TEo),e(y,Y_),e(Y_,Bce),e(Bce,MEo),e(Y_,EEo),e(Y_,Oj),e(Oj,CEo),e(Y_,wEo),e(y,AEo),e(y,K_),e(K_,Ice),e(Ice,LEo),e(K_,yEo),e(K_,Vj),e(Vj,xEo),e(K_,$Eo),e(y,kEo),e(y,Z_),e(Z_,Nce),e(Nce,SEo),e(Z_,REo),e(Z_,Xj),e(Xj,PEo),e(Z_,BEo),e(y,IEo),e(y,eu),e(eu,qce),e(qce,NEo),e(eu,qEo),e(eu,zj),e(zj,jEo),e(eu,DEo),e(y,GEo),e(y,ou),e(ou,jce),e(jce,OEo),e(ou,VEo),e(ou,Qj),e(Qj,XEo),e(ou,zEo),e(y,QEo),e(y,ru),e(ru,Dce),e(Dce,WEo),e(ru,HEo),e(ru,Wj),e(Wj,UEo),e(ru,JEo),e(y,YEo),e(y,tu),e(tu,Gce),e(Gce,KEo),e(tu,ZEo),e(tu,Hj),e(Hj,eCo),e(tu,oCo),e(y,rCo),e(y,au),e(au,Oce),e(Oce,tCo),e(au,aCo),e(au,Uj),e(Uj,nCo),e(au,sCo),e(y,lCo),e(y,nu),e(nu,Vce),e(Vce,iCo),e(nu,dCo),e(nu,Jj),e(Jj,cCo),e(nu,fCo),e(y,mCo),e(y,su),e(su,Xce),e(Xce,gCo),e(su,hCo),e(su,Yj),e(Yj,pCo),e(su,_Co),e(y,uCo),e(y,lu),e(lu,zce),e(zce,bCo),e(lu,vCo),e(lu,Kj),e(Kj,FCo),e(lu,TCo),e(y,MCo),e(y,iu),e(iu,Qce),e(Qce,ECo),e(iu,CCo),e(iu,Zj),e(Zj,wCo),e(iu,ACo),e(y,LCo),e(y,du),e(du,Wce),e(Wce,yCo),e(du,xCo),e(du,eD),e(eD,$Co),e(du,kCo),e(y,SCo),e(y,cu),e(cu,Hce),e(Hce,RCo),e(cu,PCo),e(cu,oD),e(oD,BCo),e(cu,ICo),e(y,NCo),e(y,fu),e(fu,Uce),e(Uce,qCo),e(fu,jCo),e(fu,rD),e(rD,DCo),e(fu,GCo),e(y,OCo),e(y,mu),e(mu,Jce),e(Jce,VCo),e(mu,XCo),e(mu,tD),e(tD,zCo),e(mu,QCo),e(y,WCo),e(y,gu),e(gu,Yce),e(Yce,HCo),e(gu,UCo),e(gu,aD),e(aD,JCo),e(gu,YCo),e(y,KCo),e(y,hu),e(hu,Kce),e(Kce,ZCo),e(hu,e5o),e(hu,nD),e(nD,o5o),e(hu,r5o),e(y,t5o),e(y,pu),e(pu,Zce),e(Zce,a5o),e(pu,n5o),e(pu,sD),e(sD,s5o),e(pu,l5o),e(y,i5o),e(y,_u),e(_u,efe),e(efe,d5o),e(_u,c5o),e(_u,lD),e(lD,f5o),e(_u,m5o),e(y,g5o),e(y,uu),e(uu,ofe),e(ofe,h5o),e(uu,p5o),e(uu,iD),e(iD,_5o),e(uu,u5o),e(y,b5o),e(y,bu),e(bu,rfe),e(rfe,v5o),e(bu,F5o),e(bu,dD),e(dD,T5o),e(bu,M5o),e(y,E5o),e(y,vu),e(vu,tfe),e(tfe,C5o),e(vu,w5o),e(vu,cD),e(cD,A5o),e(vu,L5o),e(y,y5o),e(y,Fu),e(Fu,afe),e(afe,x5o),e(Fu,$5o),e(Fu,fD),e(fD,k5o),e(Fu,S5o),e(y,R5o),e(y,Tu),e(Tu,nfe),e(nfe,P5o),e(Tu,B5o),e(Tu,mD),e(mD,I5o),e(Tu,N5o),e(y,q5o),e(y,Mu),e(Mu,sfe),e(sfe,j5o),e(Mu,D5o),e(Mu,gD),e(gD,G5o),e(Mu,O5o),e(y,V5o),e(y,Eu),e(Eu,lfe),e(lfe,X5o),e(Eu,z5o),e(Eu,hD),e(hD,Q5o),e(Eu,W5o),e(y,H5o),e(y,Cu),e(Cu,ife),e(ife,U5o),e(Cu,J5o),e(Cu,pD),e(pD,Y5o),e(Cu,K5o),e(y,Z5o),e(y,wu),e(wu,dfe),e(dfe,e3o),e(wu,o3o),e(wu,_D),e(_D,r3o),e(wu,t3o),e(y,a3o),e(y,Au),e(Au,cfe),e(cfe,n3o),e(Au,s3o),e(Au,uD),e(uD,l3o),e(Au,i3o),e(y,d3o),e(y,Lu),e(Lu,ffe),e(ffe,c3o),e(Lu,f3o),e(Lu,bD),e(bD,m3o),e(Lu,g3o),e(y,h3o),e(y,yu),e(yu,mfe),e(mfe,p3o),e(yu,_3o),e(yu,vD),e(vD,u3o),e(yu,b3o),e(y,v3o),e(y,xu),e(xu,gfe),e(gfe,F3o),e(xu,T3o),e(xu,FD),e(FD,M3o),e(xu,E3o),e(y,C3o),e(y,$u),e($u,hfe),e(hfe,w3o),e($u,A3o),e($u,TD),e(TD,L3o),e($u,y3o),e(y,x3o),e(y,ku),e(ku,pfe),e(pfe,$3o),e(ku,k3o),e(ku,MD),e(MD,S3o),e(ku,R3o),e(y,P3o),e(y,Su),e(Su,_fe),e(_fe,B3o),e(Su,I3o),e(Su,ED),e(ED,N3o),e(Su,q3o),e(y,j3o),e(y,Ru),e(Ru,ufe),e(ufe,D3o),e(Ru,G3o),e(Ru,CD),e(CD,O3o),e(Ru,V3o),e(y,X3o),e(y,Pu),e(Pu,bfe),e(bfe,z3o),e(Pu,Q3o),e(Pu,wD),e(wD,W3o),e(Pu,H3o),e(y,U3o),e(y,Bu),e(Bu,vfe),e(vfe,J3o),e(Bu,Y3o),e(Bu,AD),e(AD,K3o),e(Bu,Z3o),e(Je,e0o),e(Je,Iu),e(Iu,o0o),e(Iu,Ffe),e(Ffe,r0o),e(Iu,t0o),e(Iu,Tfe),e(Tfe,a0o),e(Je,n0o),M(Nu,Je,null),b(f,QOe,u),b(f,Di,u),e(Di,qu),e(qu,Mfe),M(uy,Mfe,null),e(Di,s0o),e(Di,Efe),e(Efe,l0o),b(f,WOe,u),b(f,$o,u),M(by,$o,null),e($o,i0o),e($o,Gi),e(Gi,d0o),e(Gi,LD),e(LD,c0o),e(Gi,f0o),e(Gi,yD),e(yD,m0o),e(Gi,g0o),e($o,h0o),e($o,vy),e(vy,p0o),e(vy,Cfe),e(Cfe,_0o),e(vy,u0o),e($o,b0o),e($o,st),M(Fy,st,null),e(st,v0o),e(st,wfe),e(wfe,F0o),e(st,T0o),e(st,Oi),e(Oi,M0o),e(Oi,Afe),e(Afe,E0o),e(Oi,C0o),e(Oi,xD),e(xD,w0o),e(Oi,A0o),e(st,L0o),M(ju,st,null),e($o,y0o),e($o,Ye),M(Ty,Ye,null),e(Ye,x0o),e(Ye,Lfe),e(Lfe,$0o),e(Ye,k0o),e(Ye,Ba),e(Ba,S0o),e(Ba,yfe),e(yfe,R0o),e(Ba,P0o),e(Ba,xfe),e(xfe,B0o),e(Ba,I0o),e(Ba,$fe),e($fe,N0o),e(Ba,q0o),e(Ye,j0o),e(Ye,G),e(G,Du),e(Du,kfe),e(kfe,D0o),e(Du,G0o),e(Du,$D),e($D,O0o),e(Du,V0o),e(G,X0o),e(G,Gu),e(Gu,Sfe),e(Sfe,z0o),e(Gu,Q0o),e(Gu,kD),e(kD,W0o),e(Gu,H0o),e(G,U0o),e(G,Ou),e(Ou,Rfe),e(Rfe,J0o),e(Ou,Y0o),e(Ou,SD),e(SD,K0o),e(Ou,Z0o),e(G,ewo),e(G,Vu),e(Vu,Pfe),e(Pfe,owo),e(Vu,rwo),e(Vu,RD),e(RD,two),e(Vu,awo),e(G,nwo),e(G,Xu),e(Xu,Bfe),e(Bfe,swo),e(Xu,lwo),e(Xu,PD),e(PD,iwo),e(Xu,dwo),e(G,cwo),e(G,zu),e(zu,Ife),e(Ife,fwo),e(zu,mwo),e(zu,BD),e(BD,gwo),e(zu,hwo),e(G,pwo),e(G,Qu),e(Qu,Nfe),e(Nfe,_wo),e(Qu,uwo),e(Qu,ID),e(ID,bwo),e(Qu,vwo),e(G,Fwo),e(G,Wu),e(Wu,qfe),e(qfe,Two),e(Wu,Mwo),e(Wu,ND),e(ND,Ewo),e(Wu,Cwo),e(G,wwo),e(G,Hu),e(Hu,jfe),e(jfe,Awo),e(Hu,Lwo),e(Hu,qD),e(qD,ywo),e(Hu,xwo),e(G,$wo),e(G,Uu),e(Uu,Dfe),e(Dfe,kwo),e(Uu,Swo),e(Uu,jD),e(jD,Rwo),e(Uu,Pwo),e(G,Bwo),e(G,Ju),e(Ju,Gfe),e(Gfe,Iwo),e(Ju,Nwo),e(Ju,DD),e(DD,qwo),e(Ju,jwo),e(G,Dwo),e(G,Yu),e(Yu,Ofe),e(Ofe,Gwo),e(Yu,Owo),e(Yu,GD),e(GD,Vwo),e(Yu,Xwo),e(G,zwo),e(G,Ku),e(Ku,Vfe),e(Vfe,Qwo),e(Ku,Wwo),e(Ku,OD),e(OD,Hwo),e(Ku,Uwo),e(G,Jwo),e(G,Zu),e(Zu,Xfe),e(Xfe,Ywo),e(Zu,Kwo),e(Zu,VD),e(VD,Zwo),e(Zu,eAo),e(G,oAo),e(G,e1),e(e1,zfe),e(zfe,rAo),e(e1,tAo),e(e1,XD),e(XD,aAo),e(e1,nAo),e(G,sAo),e(G,o1),e(o1,Qfe),e(Qfe,lAo),e(o1,iAo),e(o1,zD),e(zD,dAo),e(o1,cAo),e(G,fAo),e(G,r1),e(r1,Wfe),e(Wfe,mAo),e(r1,gAo),e(r1,QD),e(QD,hAo),e(r1,pAo),e(G,_Ao),e(G,t1),e(t1,Hfe),e(Hfe,uAo),e(t1,bAo),e(t1,WD),e(WD,vAo),e(t1,FAo),e(G,TAo),e(G,a1),e(a1,Ufe),e(Ufe,MAo),e(a1,EAo),e(a1,HD),e(HD,CAo),e(a1,wAo),e(G,AAo),e(G,n1),e(n1,Jfe),e(Jfe,LAo),e(n1,yAo),e(n1,UD),e(UD,xAo),e(n1,$Ao),e(G,kAo),e(G,s1),e(s1,Yfe),e(Yfe,SAo),e(s1,RAo),e(s1,JD),e(JD,PAo),e(s1,BAo),e(G,IAo),e(G,l1),e(l1,Kfe),e(Kfe,NAo),e(l1,qAo),e(l1,YD),e(YD,jAo),e(l1,DAo),e(G,GAo),e(G,i1),e(i1,Zfe),e(Zfe,OAo),e(i1,VAo),e(i1,KD),e(KD,XAo),e(i1,zAo),e(G,QAo),e(G,d1),e(d1,eme),e(eme,WAo),e(d1,HAo),e(d1,ZD),e(ZD,UAo),e(d1,JAo),e(G,YAo),e(G,c1),e(c1,ome),e(ome,KAo),e(c1,ZAo),e(c1,eG),e(eG,eLo),e(c1,oLo),e(G,rLo),e(G,f1),e(f1,rme),e(rme,tLo),e(f1,aLo),e(f1,oG),e(oG,nLo),e(f1,sLo),e(G,lLo),e(G,m1),e(m1,tme),e(tme,iLo),e(m1,dLo),e(m1,rG),e(rG,cLo),e(m1,fLo),e(G,mLo),e(G,g1),e(g1,ame),e(ame,gLo),e(g1,hLo),e(g1,tG),e(tG,pLo),e(g1,_Lo),e(G,uLo),e(G,h1),e(h1,nme),e(nme,bLo),e(h1,vLo),e(h1,aG),e(aG,FLo),e(h1,TLo),e(G,MLo),e(G,p1),e(p1,sme),e(sme,ELo),e(p1,CLo),e(p1,nG),e(nG,wLo),e(p1,ALo),e(G,LLo),e(G,_1),e(_1,lme),e(lme,yLo),e(_1,xLo),e(_1,sG),e(sG,$Lo),e(_1,kLo),e(G,SLo),e(G,u1),e(u1,ime),e(ime,RLo),e(u1,PLo),e(u1,lG),e(lG,BLo),e(u1,ILo),e(G,NLo),e(G,b1),e(b1,dme),e(dme,qLo),e(b1,jLo),e(b1,iG),e(iG,DLo),e(b1,GLo),e(G,OLo),e(G,v1),e(v1,cme),e(cme,VLo),e(v1,XLo),e(v1,dG),e(dG,zLo),e(v1,QLo),e(G,WLo),e(G,F1),e(F1,fme),e(fme,HLo),e(F1,ULo),e(F1,cG),e(cG,JLo),e(F1,YLo),e(G,KLo),e(G,T1),e(T1,mme),e(mme,ZLo),e(T1,eyo),e(T1,fG),e(fG,oyo),e(T1,ryo),e(G,tyo),e(G,M1),e(M1,gme),e(gme,ayo),e(M1,nyo),e(M1,mG),e(mG,syo),e(M1,lyo),e(G,iyo),e(G,E1),e(E1,hme),e(hme,dyo),e(E1,cyo),e(E1,gG),e(gG,fyo),e(E1,myo),e(G,gyo),e(G,C1),e(C1,pme),e(pme,hyo),e(C1,pyo),e(C1,hG),e(hG,_yo),e(C1,uyo),e(G,byo),e(G,w1),e(w1,_me),e(_me,vyo),e(w1,Fyo),e(w1,pG),e(pG,Tyo),e(w1,Myo),e(G,Eyo),e(G,A1),e(A1,ume),e(ume,Cyo),e(A1,wyo),e(A1,_G),e(_G,Ayo),e(A1,Lyo),e(G,yyo),e(G,L1),e(L1,bme),e(bme,xyo),e(L1,$yo),e(L1,uG),e(uG,kyo),e(L1,Syo),e(G,Ryo),e(G,y1),e(y1,vme),e(vme,Pyo),e(y1,Byo),e(y1,bG),e(bG,Iyo),e(y1,Nyo),e(G,qyo),e(G,x1),e(x1,Fme),e(Fme,jyo),e(x1,Dyo),e(x1,vG),e(vG,Gyo),e(x1,Oyo),e(Ye,Vyo),e(Ye,$1),e($1,Xyo),e($1,Tme),e(Tme,zyo),e($1,Qyo),e($1,Mme),e(Mme,Wyo),e(Ye,Hyo),M(k1,Ye,null),b(f,HOe,u),b(f,Vi,u),e(Vi,S1),e(S1,Eme),M(My,Eme,null),e(Vi,Uyo),e(Vi,Cme),e(Cme,Jyo),b(f,UOe,u),b(f,ko,u),M(Ey,ko,null),e(ko,Yyo),e(ko,Xi),e(Xi,Kyo),e(Xi,FG),e(FG,Zyo),e(Xi,e8o),e(Xi,TG),e(TG,o8o),e(Xi,r8o),e(ko,t8o),e(ko,Cy),e(Cy,a8o),e(Cy,wme),e(wme,n8o),e(Cy,s8o),e(ko,l8o),e(ko,lt),M(wy,lt,null),e(lt,i8o),e(lt,Ame),e(Ame,d8o),e(lt,c8o),e(lt,zi),e(zi,f8o),e(zi,Lme),e(Lme,m8o),e(zi,g8o),e(zi,MG),e(MG,h8o),e(zi,p8o),e(lt,_8o),M(R1,lt,null),e(ko,u8o),e(ko,Ke),M(Ay,Ke,null),e(Ke,b8o),e(Ke,yme),e(yme,v8o),e(Ke,F8o),e(Ke,Ia),e(Ia,T8o),e(Ia,xme),e(xme,M8o),e(Ia,E8o),e(Ia,$me),e($me,C8o),e(Ia,w8o),e(Ia,kme),e(kme,A8o),e(Ia,L8o),e(Ke,y8o),e(Ke,z),e(z,P1),e(P1,Sme),e(Sme,x8o),e(P1,$8o),e(P1,EG),e(EG,k8o),e(P1,S8o),e(z,R8o),e(z,B1),e(B1,Rme),e(Rme,P8o),e(B1,B8o),e(B1,CG),e(CG,I8o),e(B1,N8o),e(z,q8o),e(z,I1),e(I1,Pme),e(Pme,j8o),e(I1,D8o),e(I1,wG),e(wG,G8o),e(I1,O8o),e(z,V8o),e(z,N1),e(N1,Bme),e(Bme,X8o),e(N1,z8o),e(N1,AG),e(AG,Q8o),e(N1,W8o),e(z,H8o),e(z,q1),e(q1,Ime),e(Ime,U8o),e(q1,J8o),e(q1,LG),e(LG,Y8o),e(q1,K8o),e(z,Z8o),e(z,j1),e(j1,Nme),e(Nme,e9o),e(j1,o9o),e(j1,yG),e(yG,r9o),e(j1,t9o),e(z,a9o),e(z,D1),e(D1,qme),e(qme,n9o),e(D1,s9o),e(D1,xG),e(xG,l9o),e(D1,i9o),e(z,d9o),e(z,G1),e(G1,jme),e(jme,c9o),e(G1,f9o),e(G1,$G),e($G,m9o),e(G1,g9o),e(z,h9o),e(z,O1),e(O1,Dme),e(Dme,p9o),e(O1,_9o),e(O1,kG),e(kG,u9o),e(O1,b9o),e(z,v9o),e(z,V1),e(V1,Gme),e(Gme,F9o),e(V1,T9o),e(V1,SG),e(SG,M9o),e(V1,E9o),e(z,C9o),e(z,X1),e(X1,Ome),e(Ome,w9o),e(X1,A9o),e(X1,RG),e(RG,L9o),e(X1,y9o),e(z,x9o),e(z,z1),e(z1,Vme),e(Vme,$9o),e(z1,k9o),e(z1,PG),e(PG,S9o),e(z1,R9o),e(z,P9o),e(z,Q1),e(Q1,Xme),e(Xme,B9o),e(Q1,I9o),e(Q1,BG),e(BG,N9o),e(Q1,q9o),e(z,j9o),e(z,W1),e(W1,zme),e(zme,D9o),e(W1,G9o),e(W1,IG),e(IG,O9o),e(W1,V9o),e(z,X9o),e(z,H1),e(H1,Qme),e(Qme,z9o),e(H1,Q9o),e(H1,NG),e(NG,W9o),e(H1,H9o),e(z,U9o),e(z,U1),e(U1,Wme),e(Wme,J9o),e(U1,Y9o),e(U1,qG),e(qG,K9o),e(U1,Z9o),e(z,exo),e(z,J1),e(J1,Hme),e(Hme,oxo),e(J1,rxo),e(J1,jG),e(jG,txo),e(J1,axo),e(z,nxo),e(z,Y1),e(Y1,Ume),e(Ume,sxo),e(Y1,lxo),e(Y1,DG),e(DG,ixo),e(Y1,dxo),e(z,cxo),e(z,K1),e(K1,Jme),e(Jme,fxo),e(K1,mxo),e(K1,GG),e(GG,gxo),e(K1,hxo),e(z,pxo),e(z,Z1),e(Z1,Yme),e(Yme,_xo),e(Z1,uxo),e(Z1,OG),e(OG,bxo),e(Z1,vxo),e(z,Fxo),e(z,e7),e(e7,Kme),e(Kme,Txo),e(e7,Mxo),e(e7,VG),e(VG,Exo),e(e7,Cxo),e(z,wxo),e(z,o7),e(o7,Zme),e(Zme,Axo),e(o7,Lxo),e(o7,XG),e(XG,yxo),e(o7,xxo),e(z,$xo),e(z,r7),e(r7,ege),e(ege,kxo),e(r7,Sxo),e(r7,zG),e(zG,Rxo),e(r7,Pxo),e(z,Bxo),e(z,t7),e(t7,oge),e(oge,Ixo),e(t7,Nxo),e(t7,QG),e(QG,qxo),e(t7,jxo),e(z,Dxo),e(z,a7),e(a7,rge),e(rge,Gxo),e(a7,Oxo),e(a7,WG),e(WG,Vxo),e(a7,Xxo),e(z,zxo),e(z,n7),e(n7,tge),e(tge,Qxo),e(n7,Wxo),e(n7,HG),e(HG,Hxo),e(n7,Uxo),e(z,Jxo),e(z,s7),e(s7,age),e(age,Yxo),e(s7,Kxo),e(s7,UG),e(UG,Zxo),e(s7,e$o),e(z,o$o),e(z,l7),e(l7,nge),e(nge,r$o),e(l7,t$o),e(l7,JG),e(JG,a$o),e(l7,n$o),e(z,s$o),e(z,i7),e(i7,sge),e(sge,l$o),e(i7,i$o),e(i7,YG),e(YG,d$o),e(i7,c$o),e(z,f$o),e(z,d7),e(d7,lge),e(lge,m$o),e(d7,g$o),e(d7,KG),e(KG,h$o),e(d7,p$o),e(z,_$o),e(z,c7),e(c7,ige),e(ige,u$o),e(c7,b$o),e(c7,ZG),e(ZG,v$o),e(c7,F$o),e(z,T$o),e(z,f7),e(f7,dge),e(dge,M$o),e(f7,E$o),e(f7,eO),e(eO,C$o),e(f7,w$o),e(z,A$o),e(z,m7),e(m7,cge),e(cge,L$o),e(m7,y$o),e(m7,oO),e(oO,x$o),e(m7,$$o),e(z,k$o),e(z,g7),e(g7,fge),e(fge,S$o),e(g7,R$o),e(g7,rO),e(rO,P$o),e(g7,B$o),e(z,I$o),e(z,h7),e(h7,mge),e(mge,N$o),e(h7,q$o),e(h7,tO),e(tO,j$o),e(h7,D$o),e(z,G$o),e(z,p7),e(p7,gge),e(gge,O$o),e(p7,V$o),e(p7,aO),e(aO,X$o),e(p7,z$o),e(z,Q$o),e(z,_7),e(_7,hge),e(hge,W$o),e(_7,H$o),e(_7,nO),e(nO,U$o),e(_7,J$o),e(z,Y$o),e(z,u7),e(u7,pge),e(pge,K$o),e(u7,Z$o),e(u7,sO),e(sO,eko),e(u7,oko),e(z,rko),e(z,b7),e(b7,_ge),e(_ge,tko),e(b7,ako),e(b7,lO),e(lO,nko),e(b7,sko),e(Ke,lko),e(Ke,v7),e(v7,iko),e(v7,uge),e(uge,dko),e(v7,cko),e(v7,bge),e(bge,fko),e(Ke,mko),M(F7,Ke,null),b(f,JOe,u),b(f,Qi,u),e(Qi,T7),e(T7,vge),M(Ly,vge,null),e(Qi,gko),e(Qi,Fge),e(Fge,hko),b(f,YOe,u),b(f,So,u),M(yy,So,null),e(So,pko),e(So,Wi),e(Wi,_ko),e(Wi,iO),e(iO,uko),e(Wi,bko),e(Wi,dO),e(dO,vko),e(Wi,Fko),e(So,Tko),e(So,xy),e(xy,Mko),e(xy,Tge),e(Tge,Eko),e(xy,Cko),e(So,wko),e(So,it),M($y,it,null),e(it,Ako),e(it,Mge),e(Mge,Lko),e(it,yko),e(it,Hi),e(Hi,xko),e(Hi,Ege),e(Ege,$ko),e(Hi,kko),e(Hi,cO),e(cO,Sko),e(Hi,Rko),e(it,Pko),M(M7,it,null),e(So,Bko),e(So,Ze),M(ky,Ze,null),e(Ze,Iko),e(Ze,Cge),e(Cge,Nko),e(Ze,qko),e(Ze,Na),e(Na,jko),e(Na,wge),e(wge,Dko),e(Na,Gko),e(Na,Age),e(Age,Oko),e(Na,Vko),e(Na,Lge),e(Lge,Xko),e(Na,zko),e(Ze,Qko),e(Ze,W),e(W,E7),e(E7,yge),e(yge,Wko),e(E7,Hko),e(E7,fO),e(fO,Uko),e(E7,Jko),e(W,Yko),e(W,C7),e(C7,xge),e(xge,Kko),e(C7,Zko),e(C7,mO),e(mO,eSo),e(C7,oSo),e(W,rSo),e(W,w7),e(w7,$ge),e($ge,tSo),e(w7,aSo),e(w7,gO),e(gO,nSo),e(w7,sSo),e(W,lSo),e(W,A7),e(A7,kge),e(kge,iSo),e(A7,dSo),e(A7,hO),e(hO,cSo),e(A7,fSo),e(W,mSo),e(W,L7),e(L7,Sge),e(Sge,gSo),e(L7,hSo),e(L7,pO),e(pO,pSo),e(L7,_So),e(W,uSo),e(W,y7),e(y7,Rge),e(Rge,bSo),e(y7,vSo),e(y7,_O),e(_O,FSo),e(y7,TSo),e(W,MSo),e(W,x7),e(x7,Pge),e(Pge,ESo),e(x7,CSo),e(x7,uO),e(uO,wSo),e(x7,ASo),e(W,LSo),e(W,$7),e($7,Bge),e(Bge,ySo),e($7,xSo),e($7,bO),e(bO,$So),e($7,kSo),e(W,SSo),e(W,k7),e(k7,Ige),e(Ige,RSo),e(k7,PSo),e(k7,vO),e(vO,BSo),e(k7,ISo),e(W,NSo),e(W,S7),e(S7,Nge),e(Nge,qSo),e(S7,jSo),e(S7,FO),e(FO,DSo),e(S7,GSo),e(W,OSo),e(W,R7),e(R7,qge),e(qge,VSo),e(R7,XSo),e(R7,TO),e(TO,zSo),e(R7,QSo),e(W,WSo),e(W,P7),e(P7,jge),e(jge,HSo),e(P7,USo),e(P7,MO),e(MO,JSo),e(P7,YSo),e(W,KSo),e(W,B7),e(B7,Dge),e(Dge,ZSo),e(B7,eRo),e(B7,EO),e(EO,oRo),e(B7,rRo),e(W,tRo),e(W,I7),e(I7,Gge),e(Gge,aRo),e(I7,nRo),e(I7,CO),e(CO,sRo),e(I7,lRo),e(W,iRo),e(W,N7),e(N7,Oge),e(Oge,dRo),e(N7,cRo),e(N7,wO),e(wO,fRo),e(N7,mRo),e(W,gRo),e(W,q7),e(q7,Vge),e(Vge,hRo),e(q7,pRo),e(q7,AO),e(AO,_Ro),e(q7,uRo),e(W,bRo),e(W,j7),e(j7,Xge),e(Xge,vRo),e(j7,FRo),e(j7,LO),e(LO,TRo),e(j7,MRo),e(W,ERo),e(W,D7),e(D7,zge),e(zge,CRo),e(D7,wRo),e(D7,yO),e(yO,ARo),e(D7,LRo),e(W,yRo),e(W,G7),e(G7,Qge),e(Qge,xRo),e(G7,$Ro),e(G7,xO),e(xO,kRo),e(G7,SRo),e(W,RRo),e(W,O7),e(O7,Wge),e(Wge,PRo),e(O7,BRo),e(O7,$O),e($O,IRo),e(O7,NRo),e(W,qRo),e(W,V7),e(V7,Hge),e(Hge,jRo),e(V7,DRo),e(V7,kO),e(kO,GRo),e(V7,ORo),e(W,VRo),e(W,X7),e(X7,Uge),e(Uge,XRo),e(X7,zRo),e(X7,SO),e(SO,QRo),e(X7,WRo),e(W,HRo),e(W,z7),e(z7,Jge),e(Jge,URo),e(z7,JRo),e(z7,RO),e(RO,YRo),e(z7,KRo),e(W,ZRo),e(W,Q7),e(Q7,Yge),e(Yge,ePo),e(Q7,oPo),e(Q7,PO),e(PO,rPo),e(Q7,tPo),e(W,aPo),e(W,W7),e(W7,Kge),e(Kge,nPo),e(W7,sPo),e(W7,BO),e(BO,lPo),e(W7,iPo),e(W,dPo),e(W,H7),e(H7,Zge),e(Zge,cPo),e(H7,fPo),e(H7,IO),e(IO,mPo),e(H7,gPo),e(W,hPo),e(W,U7),e(U7,ehe),e(ehe,pPo),e(U7,_Po),e(U7,NO),e(NO,uPo),e(U7,bPo),e(W,vPo),e(W,J7),e(J7,ohe),e(ohe,FPo),e(J7,TPo),e(J7,qO),e(qO,MPo),e(J7,EPo),e(W,CPo),e(W,Y7),e(Y7,rhe),e(rhe,wPo),e(Y7,APo),e(Y7,jO),e(jO,LPo),e(Y7,yPo),e(W,xPo),e(W,K7),e(K7,the),e(the,$Po),e(K7,kPo),e(K7,DO),e(DO,SPo),e(K7,RPo),e(W,PPo),e(W,Z7),e(Z7,ahe),e(ahe,BPo),e(Z7,IPo),e(Z7,GO),e(GO,NPo),e(Z7,qPo),e(W,jPo),e(W,e2),e(e2,nhe),e(nhe,DPo),e(e2,GPo),e(e2,OO),e(OO,OPo),e(e2,VPo),e(W,XPo),e(W,o2),e(o2,she),e(she,zPo),e(o2,QPo),e(o2,lhe),e(lhe,WPo),e(o2,HPo),e(W,UPo),e(W,r2),e(r2,ihe),e(ihe,JPo),e(r2,YPo),e(r2,VO),e(VO,KPo),e(r2,ZPo),e(W,eBo),e(W,t2),e(t2,dhe),e(dhe,oBo),e(t2,rBo),e(t2,XO),e(XO,tBo),e(t2,aBo),e(W,nBo),e(W,a2),e(a2,che),e(che,sBo),e(a2,lBo),e(a2,zO),e(zO,iBo),e(a2,dBo),e(W,cBo),e(W,n2),e(n2,fhe),e(fhe,fBo),e(n2,mBo),e(n2,QO),e(QO,gBo),e(n2,hBo),e(Ze,pBo),e(Ze,s2),e(s2,_Bo),e(s2,mhe),e(mhe,uBo),e(s2,bBo),e(s2,ghe),e(ghe,vBo),e(Ze,FBo),M(l2,Ze,null),b(f,KOe,u),b(f,Ui,u),e(Ui,i2),e(i2,hhe),M(Sy,hhe,null),e(Ui,TBo),e(Ui,phe),e(phe,MBo),b(f,ZOe,u),b(f,Ro,u),M(Ry,Ro,null),e(Ro,EBo),e(Ro,Ji),e(Ji,CBo),e(Ji,WO),e(WO,wBo),e(Ji,ABo),e(Ji,HO),e(HO,LBo),e(Ji,yBo),e(Ro,xBo),e(Ro,Py),e(Py,$Bo),e(Py,_he),e(_he,kBo),e(Py,SBo),e(Ro,RBo),e(Ro,dt),M(By,dt,null),e(dt,PBo),e(dt,uhe),e(uhe,BBo),e(dt,IBo),e(dt,Yi),e(Yi,NBo),e(Yi,bhe),e(bhe,qBo),e(Yi,jBo),e(Yi,UO),e(UO,DBo),e(Yi,GBo),e(dt,OBo),M(d2,dt,null),e(Ro,VBo),e(Ro,eo),M(Iy,eo,null),e(eo,XBo),e(eo,vhe),e(vhe,zBo),e(eo,QBo),e(eo,qa),e(qa,WBo),e(qa,Fhe),e(Fhe,HBo),e(qa,UBo),e(qa,The),e(The,JBo),e(qa,YBo),e(qa,Mhe),e(Mhe,KBo),e(qa,ZBo),e(eo,eIo),e(eo,pe),e(pe,c2),e(c2,Ehe),e(Ehe,oIo),e(c2,rIo),e(c2,JO),e(JO,tIo),e(c2,aIo),e(pe,nIo),e(pe,f2),e(f2,Che),e(Che,sIo),e(f2,lIo),e(f2,YO),e(YO,iIo),e(f2,dIo),e(pe,cIo),e(pe,m2),e(m2,whe),e(whe,fIo),e(m2,mIo),e(m2,KO),e(KO,gIo),e(m2,hIo),e(pe,pIo),e(pe,g2),e(g2,Ahe),e(Ahe,_Io),e(g2,uIo),e(g2,ZO),e(ZO,bIo),e(g2,vIo),e(pe,FIo),e(pe,h2),e(h2,Lhe),e(Lhe,TIo),e(h2,MIo),e(h2,eV),e(eV,EIo),e(h2,CIo),e(pe,wIo),e(pe,p2),e(p2,yhe),e(yhe,AIo),e(p2,LIo),e(p2,oV),e(oV,yIo),e(p2,xIo),e(pe,$Io),e(pe,_2),e(_2,xhe),e(xhe,kIo),e(_2,SIo),e(_2,rV),e(rV,RIo),e(_2,PIo),e(pe,BIo),e(pe,u2),e(u2,$he),e($he,IIo),e(u2,NIo),e(u2,tV),e(tV,qIo),e(u2,jIo),e(pe,DIo),e(pe,b2),e(b2,khe),e(khe,GIo),e(b2,OIo),e(b2,aV),e(aV,VIo),e(b2,XIo),e(pe,zIo),e(pe,v2),e(v2,She),e(She,QIo),e(v2,WIo),e(v2,nV),e(nV,HIo),e(v2,UIo),e(pe,JIo),e(pe,F2),e(F2,Rhe),e(Rhe,YIo),e(F2,KIo),e(F2,sV),e(sV,ZIo),e(F2,eNo),e(pe,oNo),e(pe,T2),e(T2,Phe),e(Phe,rNo),e(T2,tNo),e(T2,lV),e(lV,aNo),e(T2,nNo),e(pe,sNo),e(pe,M2),e(M2,Bhe),e(Bhe,lNo),e(M2,iNo),e(M2,iV),e(iV,dNo),e(M2,cNo),e(pe,fNo),e(pe,E2),e(E2,Ihe),e(Ihe,mNo),e(E2,gNo),e(E2,dV),e(dV,hNo),e(E2,pNo),e(pe,_No),e(pe,C2),e(C2,Nhe),e(Nhe,uNo),e(C2,bNo),e(C2,cV),e(cV,vNo),e(C2,FNo),e(pe,TNo),e(pe,w2),e(w2,qhe),e(qhe,MNo),e(w2,ENo),e(w2,fV),e(fV,CNo),e(w2,wNo),e(pe,ANo),e(pe,A2),e(A2,jhe),e(jhe,LNo),e(A2,yNo),e(A2,mV),e(mV,xNo),e(A2,$No),e(eo,kNo),e(eo,L2),e(L2,SNo),e(L2,Dhe),e(Dhe,RNo),e(L2,PNo),e(L2,Ghe),e(Ghe,BNo),e(eo,INo),M(y2,eo,null),b(f,eVe,u),b(f,Ki,u),e(Ki,x2),e(x2,Ohe),M(Ny,Ohe,null),e(Ki,NNo),e(Ki,Vhe),e(Vhe,qNo),b(f,oVe,u),b(f,Po,u),M(qy,Po,null),e(Po,jNo),e(Po,Zi),e(Zi,DNo),e(Zi,gV),e(gV,GNo),e(Zi,ONo),e(Zi,hV),e(hV,VNo),e(Zi,XNo),e(Po,zNo),e(Po,jy),e(jy,QNo),e(jy,Xhe),e(Xhe,WNo),e(jy,HNo),e(Po,UNo),e(Po,ct),M(Dy,ct,null),e(ct,JNo),e(ct,zhe),e(zhe,YNo),e(ct,KNo),e(ct,ed),e(ed,ZNo),e(ed,Qhe),e(Qhe,eqo),e(ed,oqo),e(ed,pV),e(pV,rqo),e(ed,tqo),e(ct,aqo),M($2,ct,null),e(Po,nqo),e(Po,oo),M(Gy,oo,null),e(oo,sqo),e(oo,Whe),e(Whe,lqo),e(oo,iqo),e(oo,ja),e(ja,dqo),e(ja,Hhe),e(Hhe,cqo),e(ja,fqo),e(ja,Uhe),e(Uhe,mqo),e(ja,gqo),e(ja,Jhe),e(Jhe,hqo),e(ja,pqo),e(oo,_qo),e(oo,N),e(N,k2),e(k2,Yhe),e(Yhe,uqo),e(k2,bqo),e(k2,_V),e(_V,vqo),e(k2,Fqo),e(N,Tqo),e(N,S2),e(S2,Khe),e(Khe,Mqo),e(S2,Eqo),e(S2,uV),e(uV,Cqo),e(S2,wqo),e(N,Aqo),e(N,R2),e(R2,Zhe),e(Zhe,Lqo),e(R2,yqo),e(R2,bV),e(bV,xqo),e(R2,$qo),e(N,kqo),e(N,P2),e(P2,epe),e(epe,Sqo),e(P2,Rqo),e(P2,vV),e(vV,Pqo),e(P2,Bqo),e(N,Iqo),e(N,B2),e(B2,ope),e(ope,Nqo),e(B2,qqo),e(B2,FV),e(FV,jqo),e(B2,Dqo),e(N,Gqo),e(N,I2),e(I2,rpe),e(rpe,Oqo),e(I2,Vqo),e(I2,TV),e(TV,Xqo),e(I2,zqo),e(N,Qqo),e(N,N2),e(N2,tpe),e(tpe,Wqo),e(N2,Hqo),e(N2,MV),e(MV,Uqo),e(N2,Jqo),e(N,Yqo),e(N,q2),e(q2,ape),e(ape,Kqo),e(q2,Zqo),e(q2,EV),e(EV,ejo),e(q2,ojo),e(N,rjo),e(N,j2),e(j2,npe),e(npe,tjo),e(j2,ajo),e(j2,CV),e(CV,njo),e(j2,sjo),e(N,ljo),e(N,D2),e(D2,spe),e(spe,ijo),e(D2,djo),e(D2,wV),e(wV,cjo),e(D2,fjo),e(N,mjo),e(N,G2),e(G2,lpe),e(lpe,gjo),e(G2,hjo),e(G2,AV),e(AV,pjo),e(G2,_jo),e(N,ujo),e(N,O2),e(O2,ipe),e(ipe,bjo),e(O2,vjo),e(O2,LV),e(LV,Fjo),e(O2,Tjo),e(N,Mjo),e(N,V2),e(V2,dpe),e(dpe,Ejo),e(V2,Cjo),e(V2,yV),e(yV,wjo),e(V2,Ajo),e(N,Ljo),e(N,X2),e(X2,cpe),e(cpe,yjo),e(X2,xjo),e(X2,xV),e(xV,$jo),e(X2,kjo),e(N,Sjo),e(N,z2),e(z2,fpe),e(fpe,Rjo),e(z2,Pjo),e(z2,$V),e($V,Bjo),e(z2,Ijo),e(N,Njo),e(N,Q2),e(Q2,mpe),e(mpe,qjo),e(Q2,jjo),e(Q2,kV),e(kV,Djo),e(Q2,Gjo),e(N,Ojo),e(N,W2),e(W2,gpe),e(gpe,Vjo),e(W2,Xjo),e(W2,SV),e(SV,zjo),e(W2,Qjo),e(N,Wjo),e(N,H2),e(H2,hpe),e(hpe,Hjo),e(H2,Ujo),e(H2,RV),e(RV,Jjo),e(H2,Yjo),e(N,Kjo),e(N,U2),e(U2,ppe),e(ppe,Zjo),e(U2,eDo),e(U2,PV),e(PV,oDo),e(U2,rDo),e(N,tDo),e(N,J2),e(J2,_pe),e(_pe,aDo),e(J2,nDo),e(J2,BV),e(BV,sDo),e(J2,lDo),e(N,iDo),e(N,Y2),e(Y2,upe),e(upe,dDo),e(Y2,cDo),e(Y2,IV),e(IV,fDo),e(Y2,mDo),e(N,gDo),e(N,K2),e(K2,bpe),e(bpe,hDo),e(K2,pDo),e(K2,NV),e(NV,_Do),e(K2,uDo),e(N,bDo),e(N,Z2),e(Z2,vpe),e(vpe,vDo),e(Z2,FDo),e(Z2,qV),e(qV,TDo),e(Z2,MDo),e(N,EDo),e(N,eb),e(eb,Fpe),e(Fpe,CDo),e(eb,wDo),e(eb,jV),e(jV,ADo),e(eb,LDo),e(N,yDo),e(N,ob),e(ob,Tpe),e(Tpe,xDo),e(ob,$Do),e(ob,DV),e(DV,kDo),e(ob,SDo),e(N,RDo),e(N,rb),e(rb,Mpe),e(Mpe,PDo),e(rb,BDo),e(rb,GV),e(GV,IDo),e(rb,NDo),e(N,qDo),e(N,tb),e(tb,Epe),e(Epe,jDo),e(tb,DDo),e(tb,OV),e(OV,GDo),e(tb,ODo),e(N,VDo),e(N,ab),e(ab,Cpe),e(Cpe,XDo),e(ab,zDo),e(ab,VV),e(VV,QDo),e(ab,WDo),e(N,HDo),e(N,nb),e(nb,wpe),e(wpe,UDo),e(nb,JDo),e(nb,XV),e(XV,YDo),e(nb,KDo),e(N,ZDo),e(N,sb),e(sb,Ape),e(Ape,eGo),e(sb,oGo),e(sb,zV),e(zV,rGo),e(sb,tGo),e(N,aGo),e(N,lb),e(lb,Lpe),e(Lpe,nGo),e(lb,sGo),e(lb,QV),e(QV,lGo),e(lb,iGo),e(N,dGo),e(N,ib),e(ib,ype),e(ype,cGo),e(ib,fGo),e(ib,WV),e(WV,mGo),e(ib,gGo),e(N,hGo),e(N,db),e(db,xpe),e(xpe,pGo),e(db,_Go),e(db,HV),e(HV,uGo),e(db,bGo),e(N,vGo),e(N,cb),e(cb,$pe),e($pe,FGo),e(cb,TGo),e(cb,UV),e(UV,MGo),e(cb,EGo),e(N,CGo),e(N,fb),e(fb,kpe),e(kpe,wGo),e(fb,AGo),e(fb,JV),e(JV,LGo),e(fb,yGo),e(N,xGo),e(N,mb),e(mb,Spe),e(Spe,$Go),e(mb,kGo),e(mb,YV),e(YV,SGo),e(mb,RGo),e(N,PGo),e(N,gb),e(gb,Rpe),e(Rpe,BGo),e(gb,IGo),e(gb,KV),e(KV,NGo),e(gb,qGo),e(N,jGo),e(N,hb),e(hb,Ppe),e(Ppe,DGo),e(hb,GGo),e(hb,ZV),e(ZV,OGo),e(hb,VGo),e(N,XGo),e(N,pb),e(pb,Bpe),e(Bpe,zGo),e(pb,QGo),e(pb,eX),e(eX,WGo),e(pb,HGo),e(N,UGo),e(N,_b),e(_b,Ipe),e(Ipe,JGo),e(_b,YGo),e(_b,oX),e(oX,KGo),e(_b,ZGo),e(N,eOo),e(N,ub),e(ub,Npe),e(Npe,oOo),e(ub,rOo),e(ub,rX),e(rX,tOo),e(ub,aOo),e(N,nOo),e(N,bb),e(bb,qpe),e(qpe,sOo),e(bb,lOo),e(bb,tX),e(tX,iOo),e(bb,dOo),e(N,cOo),e(N,vb),e(vb,jpe),e(jpe,fOo),e(vb,mOo),e(vb,aX),e(aX,gOo),e(vb,hOo),e(N,pOo),e(N,Fb),e(Fb,Dpe),e(Dpe,_Oo),e(Fb,uOo),e(Fb,nX),e(nX,bOo),e(Fb,vOo),e(N,FOo),e(N,Tb),e(Tb,Gpe),e(Gpe,TOo),e(Tb,MOo),e(Tb,sX),e(sX,EOo),e(Tb,COo),e(N,wOo),e(N,Mb),e(Mb,Ope),e(Ope,AOo),e(Mb,LOo),e(Mb,lX),e(lX,yOo),e(Mb,xOo),e(N,$Oo),e(N,Eb),e(Eb,Vpe),e(Vpe,kOo),e(Eb,SOo),e(Eb,iX),e(iX,ROo),e(Eb,POo),e(N,BOo),e(N,Cb),e(Cb,Xpe),e(Xpe,IOo),e(Cb,NOo),e(Cb,dX),e(dX,qOo),e(Cb,jOo),e(N,DOo),e(N,wb),e(wb,zpe),e(zpe,GOo),e(wb,OOo),e(wb,cX),e(cX,VOo),e(wb,XOo),e(N,zOo),e(N,Ab),e(Ab,Qpe),e(Qpe,QOo),e(Ab,WOo),e(Ab,fX),e(fX,HOo),e(Ab,UOo),e(oo,JOo),e(oo,Lb),e(Lb,YOo),e(Lb,Wpe),e(Wpe,KOo),e(Lb,ZOo),e(Lb,Hpe),e(Hpe,eVo),e(oo,oVo),M(yb,oo,null),b(f,rVe,u),b(f,od,u),e(od,xb),e(xb,Upe),M(Oy,Upe,null),e(od,rVo),e(od,Jpe),e(Jpe,tVo),b(f,tVe,u),b(f,Bo,u),M(Vy,Bo,null),e(Bo,aVo),e(Bo,rd),e(rd,nVo),e(rd,mX),e(mX,sVo),e(rd,lVo),e(rd,gX),e(gX,iVo),e(rd,dVo),e(Bo,cVo),e(Bo,Xy),e(Xy,fVo),e(Xy,Ype),e(Ype,mVo),e(Xy,gVo),e(Bo,hVo),e(Bo,ft),M(zy,ft,null),e(ft,pVo),e(ft,Kpe),e(Kpe,_Vo),e(ft,uVo),e(ft,td),e(td,bVo),e(td,Zpe),e(Zpe,vVo),e(td,FVo),e(td,hX),e(hX,TVo),e(td,MVo),e(ft,EVo),M($b,ft,null),e(Bo,CVo),e(Bo,ro),M(Qy,ro,null),e(ro,wVo),e(ro,e_e),e(e_e,AVo),e(ro,LVo),e(ro,Da),e(Da,yVo),e(Da,o_e),e(o_e,xVo),e(Da,$Vo),e(Da,r_e),e(r_e,kVo),e(Da,SVo),e(Da,t_e),e(t_e,RVo),e(Da,PVo),e(ro,BVo),e(ro,Z),e(Z,kb),e(kb,a_e),e(a_e,IVo),e(kb,NVo),e(kb,pX),e(pX,qVo),e(kb,jVo),e(Z,DVo),e(Z,Sb),e(Sb,n_e),e(n_e,GVo),e(Sb,OVo),e(Sb,_X),e(_X,VVo),e(Sb,XVo),e(Z,zVo),e(Z,Rb),e(Rb,s_e),e(s_e,QVo),e(Rb,WVo),e(Rb,uX),e(uX,HVo),e(Rb,UVo),e(Z,JVo),e(Z,Pb),e(Pb,l_e),e(l_e,YVo),e(Pb,KVo),e(Pb,bX),e(bX,ZVo),e(Pb,eXo),e(Z,oXo),e(Z,Bb),e(Bb,i_e),e(i_e,rXo),e(Bb,tXo),e(Bb,vX),e(vX,aXo),e(Bb,nXo),e(Z,sXo),e(Z,Ib),e(Ib,d_e),e(d_e,lXo),e(Ib,iXo),e(Ib,FX),e(FX,dXo),e(Ib,cXo),e(Z,fXo),e(Z,Nb),e(Nb,c_e),e(c_e,mXo),e(Nb,gXo),e(Nb,TX),e(TX,hXo),e(Nb,pXo),e(Z,_Xo),e(Z,qb),e(qb,f_e),e(f_e,uXo),e(qb,bXo),e(qb,MX),e(MX,vXo),e(qb,FXo),e(Z,TXo),e(Z,jb),e(jb,m_e),e(m_e,MXo),e(jb,EXo),e(jb,EX),e(EX,CXo),e(jb,wXo),e(Z,AXo),e(Z,Db),e(Db,g_e),e(g_e,LXo),e(Db,yXo),e(Db,CX),e(CX,xXo),e(Db,$Xo),e(Z,kXo),e(Z,Gb),e(Gb,h_e),e(h_e,SXo),e(Gb,RXo),e(Gb,wX),e(wX,PXo),e(Gb,BXo),e(Z,IXo),e(Z,Ob),e(Ob,p_e),e(p_e,NXo),e(Ob,qXo),e(Ob,AX),e(AX,jXo),e(Ob,DXo),e(Z,GXo),e(Z,Vb),e(Vb,__e),e(__e,OXo),e(Vb,VXo),e(Vb,LX),e(LX,XXo),e(Vb,zXo),e(Z,QXo),e(Z,Xb),e(Xb,u_e),e(u_e,WXo),e(Xb,HXo),e(Xb,yX),e(yX,UXo),e(Xb,JXo),e(Z,YXo),e(Z,zb),e(zb,b_e),e(b_e,KXo),e(zb,ZXo),e(zb,xX),e(xX,ezo),e(zb,ozo),e(Z,rzo),e(Z,Qb),e(Qb,v_e),e(v_e,tzo),e(Qb,azo),e(Qb,$X),e($X,nzo),e(Qb,szo),e(Z,lzo),e(Z,Wb),e(Wb,F_e),e(F_e,izo),e(Wb,dzo),e(Wb,kX),e(kX,czo),e(Wb,fzo),e(Z,mzo),e(Z,Hb),e(Hb,T_e),e(T_e,gzo),e(Hb,hzo),e(Hb,SX),e(SX,pzo),e(Hb,_zo),e(Z,uzo),e(Z,Ub),e(Ub,M_e),e(M_e,bzo),e(Ub,vzo),e(Ub,RX),e(RX,Fzo),e(Ub,Tzo),e(Z,Mzo),e(Z,Jb),e(Jb,E_e),e(E_e,Ezo),e(Jb,Czo),e(Jb,PX),e(PX,wzo),e(Jb,Azo),e(Z,Lzo),e(Z,Yb),e(Yb,C_e),e(C_e,yzo),e(Yb,xzo),e(Yb,BX),e(BX,$zo),e(Yb,kzo),e(Z,Szo),e(Z,Kb),e(Kb,w_e),e(w_e,Rzo),e(Kb,Pzo),e(Kb,IX),e(IX,Bzo),e(Kb,Izo),e(Z,Nzo),e(Z,Zb),e(Zb,A_e),e(A_e,qzo),e(Zb,jzo),e(Zb,NX),e(NX,Dzo),e(Zb,Gzo),e(Z,Ozo),e(Z,ev),e(ev,L_e),e(L_e,Vzo),e(ev,Xzo),e(ev,qX),e(qX,zzo),e(ev,Qzo),e(Z,Wzo),e(Z,ov),e(ov,y_e),e(y_e,Hzo),e(ov,Uzo),e(ov,jX),e(jX,Jzo),e(ov,Yzo),e(Z,Kzo),e(Z,rv),e(rv,x_e),e(x_e,Zzo),e(rv,eQo),e(rv,DX),e(DX,oQo),e(rv,rQo),e(Z,tQo),e(Z,tv),e(tv,$_e),e($_e,aQo),e(tv,nQo),e(tv,GX),e(GX,sQo),e(tv,lQo),e(Z,iQo),e(Z,av),e(av,k_e),e(k_e,dQo),e(av,cQo),e(av,OX),e(OX,fQo),e(av,mQo),e(Z,gQo),e(Z,nv),e(nv,S_e),e(S_e,hQo),e(nv,pQo),e(nv,VX),e(VX,_Qo),e(nv,uQo),e(Z,bQo),e(Z,sv),e(sv,R_e),e(R_e,vQo),e(sv,FQo),e(sv,XX),e(XX,TQo),e(sv,MQo),e(ro,EQo),e(ro,lv),e(lv,CQo),e(lv,P_e),e(P_e,wQo),e(lv,AQo),e(lv,B_e),e(B_e,LQo),e(ro,yQo),M(iv,ro,null),b(f,aVe,u),b(f,ad,u),e(ad,dv),e(dv,I_e),M(Wy,I_e,null),e(ad,xQo),e(ad,N_e),e(N_e,$Qo),b(f,nVe,u),b(f,Io,u),M(Hy,Io,null),e(Io,kQo),e(Io,nd),e(nd,SQo),e(nd,zX),e(zX,RQo),e(nd,PQo),e(nd,QX),e(QX,BQo),e(nd,IQo),e(Io,NQo),e(Io,Uy),e(Uy,qQo),e(Uy,q_e),e(q_e,jQo),e(Uy,DQo),e(Io,GQo),e(Io,mt),M(Jy,mt,null),e(mt,OQo),e(mt,j_e),e(j_e,VQo),e(mt,XQo),e(mt,sd),e(sd,zQo),e(sd,D_e),e(D_e,QQo),e(sd,WQo),e(sd,WX),e(WX,HQo),e(sd,UQo),e(mt,JQo),M(cv,mt,null),e(Io,YQo),e(Io,to),M(Yy,to,null),e(to,KQo),e(to,G_e),e(G_e,ZQo),e(to,eWo),e(to,Ga),e(Ga,oWo),e(Ga,O_e),e(O_e,rWo),e(Ga,tWo),e(Ga,V_e),e(V_e,aWo),e(Ga,nWo),e(Ga,X_e),e(X_e,sWo),e(Ga,lWo),e(to,iWo),e(to,No),e(No,fv),e(fv,z_e),e(z_e,dWo),e(fv,cWo),e(fv,HX),e(HX,fWo),e(fv,mWo),e(No,gWo),e(No,mv),e(mv,Q_e),e(Q_e,hWo),e(mv,pWo),e(mv,UX),e(UX,_Wo),e(mv,uWo),e(No,bWo),e(No,gv),e(gv,W_e),e(W_e,vWo),e(gv,FWo),e(gv,JX),e(JX,TWo),e(gv,MWo),e(No,EWo),e(No,hv),e(hv,H_e),e(H_e,CWo),e(hv,wWo),e(hv,YX),e(YX,AWo),e(hv,LWo),e(No,yWo),e(No,pv),e(pv,U_e),e(U_e,xWo),e(pv,$Wo),e(pv,KX),e(KX,kWo),e(pv,SWo),e(No,RWo),e(No,_v),e(_v,J_e),e(J_e,PWo),e(_v,BWo),e(_v,ZX),e(ZX,IWo),e(_v,NWo),e(to,qWo),e(to,uv),e(uv,jWo),e(uv,Y_e),e(Y_e,DWo),e(uv,GWo),e(uv,K_e),e(K_e,OWo),e(to,VWo),M(bv,to,null),b(f,sVe,u),b(f,ld,u),e(ld,vv),e(vv,Z_e),M(Ky,Z_e,null),e(ld,XWo),e(ld,eue),e(eue,zWo),b(f,lVe,u),b(f,qo,u),M(Zy,qo,null),e(qo,QWo),e(qo,id),e(id,WWo),e(id,ez),e(ez,HWo),e(id,UWo),e(id,oz),e(oz,JWo),e(id,YWo),e(qo,KWo),e(qo,e8),e(e8,ZWo),e(e8,oue),e(oue,eHo),e(e8,oHo),e(qo,rHo),e(qo,gt),M(o8,gt,null),e(gt,tHo),e(gt,rue),e(rue,aHo),e(gt,nHo),e(gt,dd),e(dd,sHo),e(dd,tue),e(tue,lHo),e(dd,iHo),e(dd,rz),e(rz,dHo),e(dd,cHo),e(gt,fHo),M(Fv,gt,null),e(qo,mHo),e(qo,ao),M(r8,ao,null),e(ao,gHo),e(ao,aue),e(aue,hHo),e(ao,pHo),e(ao,Oa),e(Oa,_Ho),e(Oa,nue),e(nue,uHo),e(Oa,bHo),e(Oa,sue),e(sue,vHo),e(Oa,FHo),e(Oa,lue),e(lue,THo),e(Oa,MHo),e(ao,EHo),e(ao,H),e(H,Tv),e(Tv,iue),e(iue,CHo),e(Tv,wHo),e(Tv,tz),e(tz,AHo),e(Tv,LHo),e(H,yHo),e(H,Mv),e(Mv,due),e(due,xHo),e(Mv,$Ho),e(Mv,az),e(az,kHo),e(Mv,SHo),e(H,RHo),e(H,Ev),e(Ev,cue),e(cue,PHo),e(Ev,BHo),e(Ev,nz),e(nz,IHo),e(Ev,NHo),e(H,qHo),e(H,Cv),e(Cv,fue),e(fue,jHo),e(Cv,DHo),e(Cv,sz),e(sz,GHo),e(Cv,OHo),e(H,VHo),e(H,wv),e(wv,mue),e(mue,XHo),e(wv,zHo),e(wv,lz),e(lz,QHo),e(wv,WHo),e(H,HHo),e(H,Av),e(Av,gue),e(gue,UHo),e(Av,JHo),e(Av,iz),e(iz,YHo),e(Av,KHo),e(H,ZHo),e(H,Lv),e(Lv,hue),e(hue,eUo),e(Lv,oUo),e(Lv,dz),e(dz,rUo),e(Lv,tUo),e(H,aUo),e(H,yv),e(yv,pue),e(pue,nUo),e(yv,sUo),e(yv,cz),e(cz,lUo),e(yv,iUo),e(H,dUo),e(H,xv),e(xv,_ue),e(_ue,cUo),e(xv,fUo),e(xv,fz),e(fz,mUo),e(xv,gUo),e(H,hUo),e(H,$v),e($v,uue),e(uue,pUo),e($v,_Uo),e($v,mz),e(mz,uUo),e($v,bUo),e(H,vUo),e(H,kv),e(kv,bue),e(bue,FUo),e(kv,TUo),e(kv,gz),e(gz,MUo),e(kv,EUo),e(H,CUo),e(H,Sv),e(Sv,vue),e(vue,wUo),e(Sv,AUo),e(Sv,hz),e(hz,LUo),e(Sv,yUo),e(H,xUo),e(H,Rv),e(Rv,Fue),e(Fue,$Uo),e(Rv,kUo),e(Rv,pz),e(pz,SUo),e(Rv,RUo),e(H,PUo),e(H,Pv),e(Pv,Tue),e(Tue,BUo),e(Pv,IUo),e(Pv,_z),e(_z,NUo),e(Pv,qUo),e(H,jUo),e(H,Bv),e(Bv,Mue),e(Mue,DUo),e(Bv,GUo),e(Bv,uz),e(uz,OUo),e(Bv,VUo),e(H,XUo),e(H,Iv),e(Iv,Eue),e(Eue,zUo),e(Iv,QUo),e(Iv,bz),e(bz,WUo),e(Iv,HUo),e(H,UUo),e(H,Nv),e(Nv,Cue),e(Cue,JUo),e(Nv,YUo),e(Nv,vz),e(vz,KUo),e(Nv,ZUo),e(H,eJo),e(H,qv),e(qv,wue),e(wue,oJo),e(qv,rJo),e(qv,Fz),e(Fz,tJo),e(qv,aJo),e(H,nJo),e(H,jv),e(jv,Aue),e(Aue,sJo),e(jv,lJo),e(jv,Tz),e(Tz,iJo),e(jv,dJo),e(H,cJo),e(H,Dv),e(Dv,Lue),e(Lue,fJo),e(Dv,mJo),e(Dv,Mz),e(Mz,gJo),e(Dv,hJo),e(H,pJo),e(H,Gv),e(Gv,yue),e(yue,_Jo),e(Gv,uJo),e(Gv,Ez),e(Ez,bJo),e(Gv,vJo),e(H,FJo),e(H,Ov),e(Ov,xue),e(xue,TJo),e(Ov,MJo),e(Ov,Cz),e(Cz,EJo),e(Ov,CJo),e(H,wJo),e(H,Vv),e(Vv,$ue),e($ue,AJo),e(Vv,LJo),e(Vv,wz),e(wz,yJo),e(Vv,xJo),e(H,$Jo),e(H,Xv),e(Xv,kue),e(kue,kJo),e(Xv,SJo),e(Xv,Az),e(Az,RJo),e(Xv,PJo),e(H,BJo),e(H,zv),e(zv,Sue),e(Sue,IJo),e(zv,NJo),e(zv,Lz),e(Lz,qJo),e(zv,jJo),e(H,DJo),e(H,Qv),e(Qv,Rue),e(Rue,GJo),e(Qv,OJo),e(Qv,yz),e(yz,VJo),e(Qv,XJo),e(H,zJo),e(H,Wv),e(Wv,Pue),e(Pue,QJo),e(Wv,WJo),e(Wv,xz),e(xz,HJo),e(Wv,UJo),e(H,JJo),e(H,Hv),e(Hv,Bue),e(Bue,YJo),e(Hv,KJo),e(Hv,$z),e($z,ZJo),e(Hv,eYo),e(H,oYo),e(H,Uv),e(Uv,Iue),e(Iue,rYo),e(Uv,tYo),e(Uv,kz),e(kz,aYo),e(Uv,nYo),e(H,sYo),e(H,Jv),e(Jv,Nue),e(Nue,lYo),e(Jv,iYo),e(Jv,Sz),e(Sz,dYo),e(Jv,cYo),e(H,fYo),e(H,Yv),e(Yv,que),e(que,mYo),e(Yv,gYo),e(Yv,Rz),e(Rz,hYo),e(Yv,pYo),e(H,_Yo),e(H,Kv),e(Kv,jue),e(jue,uYo),e(Kv,bYo),e(Kv,Pz),e(Pz,vYo),e(Kv,FYo),e(H,TYo),e(H,Zv),e(Zv,Due),e(Due,MYo),e(Zv,EYo),e(Zv,Bz),e(Bz,CYo),e(Zv,wYo),e(H,AYo),e(H,eF),e(eF,Gue),e(Gue,LYo),e(eF,yYo),e(eF,Iz),e(Iz,xYo),e(eF,$Yo),e(H,kYo),e(H,oF),e(oF,Oue),e(Oue,SYo),e(oF,RYo),e(oF,Nz),e(Nz,PYo),e(oF,BYo),e(H,IYo),e(H,rF),e(rF,Vue),e(Vue,NYo),e(rF,qYo),e(rF,qz),e(qz,jYo),e(rF,DYo),e(ao,GYo),e(ao,tF),e(tF,OYo),e(tF,Xue),e(Xue,VYo),e(tF,XYo),e(tF,zue),e(zue,zYo),e(ao,QYo),M(aF,ao,null),b(f,iVe,u),b(f,cd,u),e(cd,nF),e(nF,Que),M(t8,Que,null),e(cd,WYo),e(cd,Wue),e(Wue,HYo),b(f,dVe,u),b(f,jo,u),M(a8,jo,null),e(jo,UYo),e(jo,fd),e(fd,JYo),e(fd,jz),e(jz,YYo),e(fd,KYo),e(fd,Dz),e(Dz,ZYo),e(fd,eKo),e(jo,oKo),e(jo,n8),e(n8,rKo),e(n8,Hue),e(Hue,tKo),e(n8,aKo),e(jo,nKo),e(jo,ht),M(s8,ht,null),e(ht,sKo),e(ht,Uue),e(Uue,lKo),e(ht,iKo),e(ht,md),e(md,dKo),e(md,Jue),e(Jue,cKo),e(md,fKo),e(md,Gz),e(Gz,mKo),e(md,gKo),e(ht,hKo),M(sF,ht,null),e(jo,pKo),e(jo,no),M(l8,no,null),e(no,_Ko),e(no,Yue),e(Yue,uKo),e(no,bKo),e(no,Va),e(Va,vKo),e(Va,Kue),e(Kue,FKo),e(Va,TKo),e(Va,Zue),e(Zue,MKo),e(Va,EKo),e(Va,e1e),e(e1e,CKo),e(Va,wKo),e(no,AKo),e(no,V),e(V,lF),e(lF,o1e),e(o1e,LKo),e(lF,yKo),e(lF,Oz),e(Oz,xKo),e(lF,$Ko),e(V,kKo),e(V,iF),e(iF,r1e),e(r1e,SKo),e(iF,RKo),e(iF,Vz),e(Vz,PKo),e(iF,BKo),e(V,IKo),e(V,dF),e(dF,t1e),e(t1e,NKo),e(dF,qKo),e(dF,Xz),e(Xz,jKo),e(dF,DKo),e(V,GKo),e(V,cF),e(cF,a1e),e(a1e,OKo),e(cF,VKo),e(cF,zz),e(zz,XKo),e(cF,zKo),e(V,QKo),e(V,fF),e(fF,n1e),e(n1e,WKo),e(fF,HKo),e(fF,Qz),e(Qz,UKo),e(fF,JKo),e(V,YKo),e(V,mF),e(mF,s1e),e(s1e,KKo),e(mF,ZKo),e(mF,Wz),e(Wz,eZo),e(mF,oZo),e(V,rZo),e(V,gF),e(gF,l1e),e(l1e,tZo),e(gF,aZo),e(gF,Hz),e(Hz,nZo),e(gF,sZo),e(V,lZo),e(V,hF),e(hF,i1e),e(i1e,iZo),e(hF,dZo),e(hF,Uz),e(Uz,cZo),e(hF,fZo),e(V,mZo),e(V,pF),e(pF,d1e),e(d1e,gZo),e(pF,hZo),e(pF,Jz),e(Jz,pZo),e(pF,_Zo),e(V,uZo),e(V,_F),e(_F,c1e),e(c1e,bZo),e(_F,vZo),e(_F,Yz),e(Yz,FZo),e(_F,TZo),e(V,MZo),e(V,uF),e(uF,f1e),e(f1e,EZo),e(uF,CZo),e(uF,Kz),e(Kz,wZo),e(uF,AZo),e(V,LZo),e(V,bF),e(bF,m1e),e(m1e,yZo),e(bF,xZo),e(bF,Zz),e(Zz,$Zo),e(bF,kZo),e(V,SZo),e(V,vF),e(vF,g1e),e(g1e,RZo),e(vF,PZo),e(vF,eQ),e(eQ,BZo),e(vF,IZo),e(V,NZo),e(V,FF),e(FF,h1e),e(h1e,qZo),e(FF,jZo),e(FF,oQ),e(oQ,DZo),e(FF,GZo),e(V,OZo),e(V,TF),e(TF,p1e),e(p1e,VZo),e(TF,XZo),e(TF,rQ),e(rQ,zZo),e(TF,QZo),e(V,WZo),e(V,MF),e(MF,_1e),e(_1e,HZo),e(MF,UZo),e(MF,tQ),e(tQ,JZo),e(MF,YZo),e(V,KZo),e(V,EF),e(EF,u1e),e(u1e,ZZo),e(EF,eer),e(EF,aQ),e(aQ,oer),e(EF,rer),e(V,ter),e(V,CF),e(CF,b1e),e(b1e,aer),e(CF,ner),e(CF,nQ),e(nQ,ser),e(CF,ler),e(V,ier),e(V,wF),e(wF,v1e),e(v1e,der),e(wF,cer),e(wF,sQ),e(sQ,fer),e(wF,mer),e(V,ger),e(V,AF),e(AF,F1e),e(F1e,her),e(AF,per),e(AF,lQ),e(lQ,_er),e(AF,uer),e(V,ber),e(V,LF),e(LF,T1e),e(T1e,ver),e(LF,Fer),e(LF,iQ),e(iQ,Ter),e(LF,Mer),e(V,Eer),e(V,yF),e(yF,M1e),e(M1e,Cer),e(yF,wer),e(yF,dQ),e(dQ,Aer),e(yF,Ler),e(V,yer),e(V,xF),e(xF,E1e),e(E1e,xer),e(xF,$er),e(xF,cQ),e(cQ,ker),e(xF,Ser),e(V,Rer),e(V,$F),e($F,C1e),e(C1e,Per),e($F,Ber),e($F,fQ),e(fQ,Ier),e($F,Ner),e(V,qer),e(V,kF),e(kF,w1e),e(w1e,jer),e(kF,Der),e(kF,mQ),e(mQ,Ger),e(kF,Oer),e(V,Ver),e(V,SF),e(SF,A1e),e(A1e,Xer),e(SF,zer),e(SF,gQ),e(gQ,Qer),e(SF,Wer),e(V,Her),e(V,RF),e(RF,L1e),e(L1e,Uer),e(RF,Jer),e(RF,hQ),e(hQ,Yer),e(RF,Ker),e(V,Zer),e(V,PF),e(PF,y1e),e(y1e,eor),e(PF,oor),e(PF,pQ),e(pQ,ror),e(PF,tor),e(V,aor),e(V,BF),e(BF,x1e),e(x1e,nor),e(BF,sor),e(BF,_Q),e(_Q,lor),e(BF,ior),e(V,dor),e(V,IF),e(IF,$1e),e($1e,cor),e(IF,mor),e(IF,uQ),e(uQ,gor),e(IF,hor),e(V,por),e(V,NF),e(NF,k1e),e(k1e,_or),e(NF,uor),e(NF,bQ),e(bQ,bor),e(NF,vor),e(V,For),e(V,qF),e(qF,S1e),e(S1e,Tor),e(qF,Mor),e(qF,vQ),e(vQ,Eor),e(qF,Cor),e(V,wor),e(V,jF),e(jF,R1e),e(R1e,Aor),e(jF,Lor),e(jF,FQ),e(FQ,yor),e(jF,xor),e(V,$or),e(V,DF),e(DF,P1e),e(P1e,kor),e(DF,Sor),e(DF,TQ),e(TQ,Ror),e(DF,Por),e(V,Bor),e(V,GF),e(GF,B1e),e(B1e,Ior),e(GF,Nor),e(GF,MQ),e(MQ,qor),e(GF,jor),e(V,Dor),e(V,OF),e(OF,I1e),e(I1e,Gor),e(OF,Oor),e(OF,EQ),e(EQ,Vor),e(OF,Xor),e(V,zor),e(V,VF),e(VF,N1e),e(N1e,Qor),e(VF,Wor),e(VF,CQ),e(CQ,Hor),e(VF,Uor),e(V,Jor),e(V,XF),e(XF,q1e),e(q1e,Yor),e(XF,Kor),e(XF,wQ),e(wQ,Zor),e(XF,err),e(V,orr),e(V,zF),e(zF,j1e),e(j1e,rrr),e(zF,trr),e(zF,AQ),e(AQ,arr),e(zF,nrr),e(V,srr),e(V,QF),e(QF,D1e),e(D1e,lrr),e(QF,irr),e(QF,LQ),e(LQ,drr),e(QF,crr),e(V,frr),e(V,WF),e(WF,G1e),e(G1e,mrr),e(WF,grr),e(WF,yQ),e(yQ,hrr),e(WF,prr),e(no,_rr),e(no,HF),e(HF,urr),e(HF,O1e),e(O1e,brr),e(HF,vrr),e(HF,V1e),e(V1e,Frr),e(no,Trr),M(UF,no,null),b(f,cVe,u),b(f,gd,u),e(gd,JF),e(JF,X1e),M(i8,X1e,null),e(gd,Mrr),e(gd,z1e),e(z1e,Err),b(f,fVe,u),b(f,Do,u),M(d8,Do,null),e(Do,Crr),e(Do,hd),e(hd,wrr),e(hd,xQ),e(xQ,Arr),e(hd,Lrr),e(hd,$Q),e($Q,yrr),e(hd,xrr),e(Do,$rr),e(Do,c8),e(c8,krr),e(c8,Q1e),e(Q1e,Srr),e(c8,Rrr),e(Do,Prr),e(Do,pt),M(f8,pt,null),e(pt,Brr),e(pt,W1e),e(W1e,Irr),e(pt,Nrr),e(pt,pd),e(pd,qrr),e(pd,H1e),e(H1e,jrr),e(pd,Drr),e(pd,kQ),e(kQ,Grr),e(pd,Orr),e(pt,Vrr),M(YF,pt,null),e(Do,Xrr),e(Do,so),M(m8,so,null),e(so,zrr),e(so,U1e),e(U1e,Qrr),e(so,Wrr),e(so,Xa),e(Xa,Hrr),e(Xa,J1e),e(J1e,Urr),e(Xa,Jrr),e(Xa,Y1e),e(Y1e,Yrr),e(Xa,Krr),e(Xa,K1e),e(K1e,Zrr),e(Xa,etr),e(so,otr),e(so,Z1e),e(Z1e,KF),e(KF,e7e),e(e7e,rtr),e(KF,ttr),e(KF,SQ),e(SQ,atr),e(KF,ntr),e(so,str),e(so,ZF),e(ZF,ltr),e(ZF,o7e),e(o7e,itr),e(ZF,dtr),e(ZF,r7e),e(r7e,ctr),e(so,ftr),M(e6,so,null),b(f,mVe,u),b(f,_d,u),e(_d,o6),e(o6,t7e),M(g8,t7e,null),e(_d,mtr),e(_d,a7e),e(a7e,gtr),b(f,gVe,u),b(f,Go,u),M(h8,Go,null),e(Go,htr),e(Go,ud),e(ud,ptr),e(ud,RQ),e(RQ,_tr),e(ud,utr),e(ud,PQ),e(PQ,btr),e(ud,vtr),e(Go,Ftr),e(Go,p8),e(p8,Ttr),e(p8,n7e),e(n7e,Mtr),e(p8,Etr),e(Go,Ctr),e(Go,_t),M(_8,_t,null),e(_t,wtr),e(_t,s7e),e(s7e,Atr),e(_t,Ltr),e(_t,bd),e(bd,ytr),e(bd,l7e),e(l7e,xtr),e(bd,$tr),e(bd,BQ),e(BQ,ktr),e(bd,Str),e(_t,Rtr),M(r6,_t,null),e(Go,Ptr),e(Go,lo),M(u8,lo,null),e(lo,Btr),e(lo,i7e),e(i7e,Itr),e(lo,Ntr),e(lo,za),e(za,qtr),e(za,d7e),e(d7e,jtr),e(za,Dtr),e(za,c7e),e(c7e,Gtr),e(za,Otr),e(za,f7e),e(f7e,Vtr),e(za,Xtr),e(lo,ztr),e(lo,Fe),e(Fe,t6),e(t6,m7e),e(m7e,Qtr),e(t6,Wtr),e(t6,IQ),e(IQ,Htr),e(t6,Utr),e(Fe,Jtr),e(Fe,a6),e(a6,g7e),e(g7e,Ytr),e(a6,Ktr),e(a6,NQ),e(NQ,Ztr),e(a6,ear),e(Fe,oar),e(Fe,n6),e(n6,h7e),e(h7e,rar),e(n6,tar),e(n6,qQ),e(qQ,aar),e(n6,nar),e(Fe,sar),e(Fe,s6),e(s6,p7e),e(p7e,lar),e(s6,iar),e(s6,jQ),e(jQ,dar),e(s6,car),e(Fe,far),e(Fe,Ws),e(Ws,_7e),e(_7e,mar),e(Ws,gar),e(Ws,DQ),e(DQ,har),e(Ws,par),e(Ws,GQ),e(GQ,_ar),e(Ws,uar),e(Fe,bar),e(Fe,l6),e(l6,u7e),e(u7e,Far),e(l6,Tar),e(l6,OQ),e(OQ,Mar),e(l6,Ear),e(Fe,Car),e(Fe,Hs),e(Hs,b7e),e(b7e,war),e(Hs,Aar),e(Hs,VQ),e(VQ,Lar),e(Hs,yar),e(Hs,XQ),e(XQ,xar),e(Hs,$ar),e(Fe,kar),e(Fe,ut),e(ut,v7e),e(v7e,Sar),e(ut,Rar),e(ut,zQ),e(zQ,Par),e(ut,Bar),e(ut,QQ),e(QQ,Iar),e(ut,Nar),e(ut,WQ),e(WQ,qar),e(ut,jar),e(Fe,Dar),e(Fe,i6),e(i6,F7e),e(F7e,Gar),e(i6,Oar),e(i6,HQ),e(HQ,Var),e(i6,Xar),e(Fe,zar),e(Fe,d6),e(d6,T7e),e(T7e,Qar),e(d6,War),e(d6,UQ),e(UQ,Har),e(d6,Uar),e(Fe,Jar),e(Fe,c6),e(c6,M7e),e(M7e,Yar),e(c6,Kar),e(c6,JQ),e(JQ,Zar),e(c6,enr),e(Fe,onr),e(Fe,f6),e(f6,E7e),e(E7e,rnr),e(f6,tnr),e(f6,YQ),e(YQ,anr),e(f6,nnr),e(Fe,snr),e(Fe,m6),e(m6,C7e),e(C7e,lnr),e(m6,inr),e(m6,KQ),e(KQ,dnr),e(m6,cnr),e(Fe,fnr),e(Fe,g6),e(g6,w7e),e(w7e,mnr),e(g6,gnr),e(g6,ZQ),e(ZQ,hnr),e(g6,pnr),e(Fe,_nr),e(Fe,h6),e(h6,A7e),e(A7e,unr),e(h6,bnr),e(h6,eW),e(eW,vnr),e(h6,Fnr),e(lo,Tnr),e(lo,p6),e(p6,Mnr),e(p6,L7e),e(L7e,Enr),e(p6,Cnr),e(p6,y7e),e(y7e,wnr),e(lo,Anr),M(_6,lo,null),b(f,hVe,u),b(f,vd,u),e(vd,u6),e(u6,x7e),M(b8,x7e,null),e(vd,Lnr),e(vd,$7e),e($7e,ynr),b(f,pVe,u),b(f,Oo,u),M(v8,Oo,null),e(Oo,xnr),e(Oo,Fd),e(Fd,$nr),e(Fd,oW),e(oW,knr),e(Fd,Snr),e(Fd,rW),e(rW,Rnr),e(Fd,Pnr),e(Oo,Bnr),e(Oo,F8),e(F8,Inr),e(F8,k7e),e(k7e,Nnr),e(F8,qnr),e(Oo,jnr),e(Oo,bt),M(T8,bt,null),e(bt,Dnr),e(bt,S7e),e(S7e,Gnr),e(bt,Onr),e(bt,Td),e(Td,Vnr),e(Td,R7e),e(R7e,Xnr),e(Td,znr),e(Td,tW),e(tW,Qnr),e(Td,Wnr),e(bt,Hnr),M(b6,bt,null),e(Oo,Unr),e(Oo,io),M(M8,io,null),e(io,Jnr),e(io,P7e),e(P7e,Ynr),e(io,Knr),e(io,Qa),e(Qa,Znr),e(Qa,B7e),e(B7e,esr),e(Qa,osr),e(Qa,I7e),e(I7e,rsr),e(Qa,tsr),e(Qa,N7e),e(N7e,asr),e(Qa,nsr),e(io,ssr),e(io,q7e),e(q7e,v6),e(v6,j7e),e(j7e,lsr),e(v6,isr),e(v6,aW),e(aW,dsr),e(v6,csr),e(io,fsr),e(io,F6),e(F6,msr),e(F6,D7e),e(D7e,gsr),e(F6,hsr),e(F6,G7e),e(G7e,psr),e(io,_sr),M(T6,io,null),b(f,_Ve,u),b(f,Md,u),e(Md,M6),e(M6,O7e),M(E8,O7e,null),e(Md,usr),e(Md,V7e),e(V7e,bsr),b(f,uVe,u),b(f,Vo,u),M(C8,Vo,null),e(Vo,vsr),e(Vo,Ed),e(Ed,Fsr),e(Ed,nW),e(nW,Tsr),e(Ed,Msr),e(Ed,sW),e(sW,Esr),e(Ed,Csr),e(Vo,wsr),e(Vo,w8),e(w8,Asr),e(w8,X7e),e(X7e,Lsr),e(w8,ysr),e(Vo,xsr),e(Vo,vt),M(A8,vt,null),e(vt,$sr),e(vt,z7e),e(z7e,ksr),e(vt,Ssr),e(vt,Cd),e(Cd,Rsr),e(Cd,Q7e),e(Q7e,Psr),e(Cd,Bsr),e(Cd,lW),e(lW,Isr),e(Cd,Nsr),e(vt,qsr),M(E6,vt,null),e(Vo,jsr),e(Vo,co),M(L8,co,null),e(co,Dsr),e(co,W7e),e(W7e,Gsr),e(co,Osr),e(co,Wa),e(Wa,Vsr),e(Wa,H7e),e(H7e,Xsr),e(Wa,zsr),e(Wa,U7e),e(U7e,Qsr),e(Wa,Wsr),e(Wa,J7e),e(J7e,Hsr),e(Wa,Usr),e(co,Jsr),e(co,Y7e),e(Y7e,C6),e(C6,K7e),e(K7e,Ysr),e(C6,Ksr),e(C6,iW),e(iW,Zsr),e(C6,elr),e(co,olr),e(co,w6),e(w6,rlr),e(w6,Z7e),e(Z7e,tlr),e(w6,alr),e(w6,e2e),e(e2e,nlr),e(co,slr),M(A6,co,null),b(f,bVe,u),b(f,wd,u),e(wd,L6),e(L6,o2e),M(y8,o2e,null),e(wd,llr),e(wd,r2e),e(r2e,ilr),b(f,vVe,u),b(f,Xo,u),M(x8,Xo,null),e(Xo,dlr),e(Xo,Ad),e(Ad,clr),e(Ad,dW),e(dW,flr),e(Ad,mlr),e(Ad,cW),e(cW,glr),e(Ad,hlr),e(Xo,plr),e(Xo,$8),e($8,_lr),e($8,t2e),e(t2e,ulr),e($8,blr),e(Xo,vlr),e(Xo,Ft),M(k8,Ft,null),e(Ft,Flr),e(Ft,a2e),e(a2e,Tlr),e(Ft,Mlr),e(Ft,Ld),e(Ld,Elr),e(Ld,n2e),e(n2e,Clr),e(Ld,wlr),e(Ld,fW),e(fW,Alr),e(Ld,Llr),e(Ft,ylr),M(y6,Ft,null),e(Xo,xlr),e(Xo,fo),M(S8,fo,null),e(fo,$lr),e(fo,s2e),e(s2e,klr),e(fo,Slr),e(fo,Ha),e(Ha,Rlr),e(Ha,l2e),e(l2e,Plr),e(Ha,Blr),e(Ha,i2e),e(i2e,Ilr),e(Ha,Nlr),e(Ha,d2e),e(d2e,qlr),e(Ha,jlr),e(fo,Dlr),e(fo,Pe),e(Pe,x6),e(x6,c2e),e(c2e,Glr),e(x6,Olr),e(x6,mW),e(mW,Vlr),e(x6,Xlr),e(Pe,zlr),e(Pe,$6),e($6,f2e),e(f2e,Qlr),e($6,Wlr),e($6,gW),e(gW,Hlr),e($6,Ulr),e(Pe,Jlr),e(Pe,k6),e(k6,m2e),e(m2e,Ylr),e(k6,Klr),e(k6,hW),e(hW,Zlr),e(k6,eir),e(Pe,oir),e(Pe,S6),e(S6,g2e),e(g2e,rir),e(S6,tir),e(S6,pW),e(pW,air),e(S6,nir),e(Pe,sir),e(Pe,R6),e(R6,h2e),e(h2e,lir),e(R6,iir),e(R6,_W),e(_W,dir),e(R6,cir),e(Pe,fir),e(Pe,P6),e(P6,p2e),e(p2e,mir),e(P6,gir),e(P6,uW),e(uW,hir),e(P6,pir),e(Pe,_ir),e(Pe,B6),e(B6,_2e),e(_2e,uir),e(B6,bir),e(B6,bW),e(bW,vir),e(B6,Fir),e(Pe,Tir),e(Pe,I6),e(I6,u2e),e(u2e,Mir),e(I6,Eir),e(I6,vW),e(vW,Cir),e(I6,wir),e(Pe,Air),e(Pe,N6),e(N6,b2e),e(b2e,Lir),e(N6,yir),e(N6,FW),e(FW,xir),e(N6,$ir),e(fo,kir),e(fo,q6),e(q6,Sir),e(q6,v2e),e(v2e,Rir),e(q6,Pir),e(q6,F2e),e(F2e,Bir),e(fo,Iir),M(j6,fo,null),b(f,FVe,u),b(f,yd,u),e(yd,D6),e(D6,T2e),M(R8,T2e,null),e(yd,Nir),e(yd,M2e),e(M2e,qir),b(f,TVe,u),b(f,zo,u),M(P8,zo,null),e(zo,jir),e(zo,xd),e(xd,Dir),e(xd,TW),e(TW,Gir),e(xd,Oir),e(xd,MW),e(MW,Vir),e(xd,Xir),e(zo,zir),e(zo,B8),e(B8,Qir),e(B8,E2e),e(E2e,Wir),e(B8,Hir),e(zo,Uir),e(zo,Tt),M(I8,Tt,null),e(Tt,Jir),e(Tt,C2e),e(C2e,Yir),e(Tt,Kir),e(Tt,$d),e($d,Zir),e($d,w2e),e(w2e,edr),e($d,odr),e($d,EW),e(EW,rdr),e($d,tdr),e(Tt,adr),M(G6,Tt,null),e(zo,ndr),e(zo,mo),M(N8,mo,null),e(mo,sdr),e(mo,A2e),e(A2e,ldr),e(mo,idr),e(mo,Ua),e(Ua,ddr),e(Ua,L2e),e(L2e,cdr),e(Ua,fdr),e(Ua,y2e),e(y2e,mdr),e(Ua,gdr),e(Ua,x2e),e(x2e,hdr),e(Ua,pdr),e(mo,_dr),e(mo,Qo),e(Qo,O6),e(O6,$2e),e($2e,udr),e(O6,bdr),e(O6,CW),e(CW,vdr),e(O6,Fdr),e(Qo,Tdr),e(Qo,V6),e(V6,k2e),e(k2e,Mdr),e(V6,Edr),e(V6,wW),e(wW,Cdr),e(V6,wdr),e(Qo,Adr),e(Qo,X6),e(X6,S2e),e(S2e,Ldr),e(X6,ydr),e(X6,AW),e(AW,xdr),e(X6,$dr),e(Qo,kdr),e(Qo,z6),e(z6,R2e),e(R2e,Sdr),e(z6,Rdr),e(z6,LW),e(LW,Pdr),e(z6,Bdr),e(Qo,Idr),e(Qo,Q6),e(Q6,P2e),e(P2e,Ndr),e(Q6,qdr),e(Q6,yW),e(yW,jdr),e(Q6,Ddr),e(Qo,Gdr),e(Qo,W6),e(W6,B2e),e(B2e,Odr),e(W6,Vdr),e(W6,xW),e(xW,Xdr),e(W6,zdr),e(mo,Qdr),e(mo,H6),e(H6,Wdr),e(H6,I2e),e(I2e,Hdr),e(H6,Udr),e(H6,N2e),e(N2e,Jdr),e(mo,Ydr),M(U6,mo,null),b(f,MVe,u),b(f,kd,u),e(kd,J6),e(J6,q2e),M(q8,q2e,null),e(kd,Kdr),e(kd,j2e),e(j2e,Zdr),b(f,EVe,u),b(f,Wo,u),M(j8,Wo,null),e(Wo,ecr),e(Wo,Sd),e(Sd,ocr),e(Sd,$W),e($W,rcr),e(Sd,tcr),e(Sd,kW),e(kW,acr),e(Sd,ncr),e(Wo,scr),e(Wo,D8),e(D8,lcr),e(D8,D2e),e(D2e,icr),e(D8,dcr),e(Wo,ccr),e(Wo,Mt),M(G8,Mt,null),e(Mt,fcr),e(Mt,G2e),e(G2e,mcr),e(Mt,gcr),e(Mt,Rd),e(Rd,hcr),e(Rd,O2e),e(O2e,pcr),e(Rd,_cr),e(Rd,SW),e(SW,ucr),e(Rd,bcr),e(Mt,vcr),M(Y6,Mt,null),e(Wo,Fcr),e(Wo,go),M(O8,go,null),e(go,Tcr),e(go,V2e),e(V2e,Mcr),e(go,Ecr),e(go,Ja),e(Ja,Ccr),e(Ja,X2e),e(X2e,wcr),e(Ja,Acr),e(Ja,z2e),e(z2e,Lcr),e(Ja,ycr),e(Ja,Q2e),e(Q2e,xcr),e(Ja,$cr),e(go,kcr),e(go,Le),e(Le,K6),e(K6,W2e),e(W2e,Scr),e(K6,Rcr),e(K6,RW),e(RW,Pcr),e(K6,Bcr),e(Le,Icr),e(Le,Z6),e(Z6,H2e),e(H2e,Ncr),e(Z6,qcr),e(Z6,PW),e(PW,jcr),e(Z6,Dcr),e(Le,Gcr),e(Le,eT),e(eT,U2e),e(U2e,Ocr),e(eT,Vcr),e(eT,BW),e(BW,Xcr),e(eT,zcr),e(Le,Qcr),e(Le,oT),e(oT,J2e),e(J2e,Wcr),e(oT,Hcr),e(oT,IW),e(IW,Ucr),e(oT,Jcr),e(Le,Ycr),e(Le,rT),e(rT,Y2e),e(Y2e,Kcr),e(rT,Zcr),e(rT,NW),e(NW,efr),e(rT,ofr),e(Le,rfr),e(Le,tT),e(tT,K2e),e(K2e,tfr),e(tT,afr),e(tT,qW),e(qW,nfr),e(tT,sfr),e(Le,lfr),e(Le,aT),e(aT,Z2e),e(Z2e,ifr),e(aT,dfr),e(aT,jW),e(jW,cfr),e(aT,ffr),e(Le,mfr),e(Le,nT),e(nT,ebe),e(ebe,gfr),e(nT,hfr),e(nT,DW),e(DW,pfr),e(nT,_fr),e(Le,ufr),e(Le,sT),e(sT,obe),e(obe,bfr),e(sT,vfr),e(sT,GW),e(GW,Ffr),e(sT,Tfr),e(Le,Mfr),e(Le,lT),e(lT,rbe),e(rbe,Efr),e(lT,Cfr),e(lT,OW),e(OW,wfr),e(lT,Afr),e(go,Lfr),e(go,iT),e(iT,yfr),e(iT,tbe),e(tbe,xfr),e(iT,$fr),e(iT,abe),e(abe,kfr),e(go,Sfr),M(dT,go,null),b(f,CVe,u),b(f,Pd,u),e(Pd,cT),e(cT,nbe),M(V8,nbe,null),e(Pd,Rfr),e(Pd,sbe),e(sbe,Pfr),b(f,wVe,u),b(f,Ho,u),M(X8,Ho,null),e(Ho,Bfr),e(Ho,Bd),e(Bd,Ifr),e(Bd,VW),e(VW,Nfr),e(Bd,qfr),e(Bd,XW),e(XW,jfr),e(Bd,Dfr),e(Ho,Gfr),e(Ho,z8),e(z8,Ofr),e(z8,lbe),e(lbe,Vfr),e(z8,Xfr),e(Ho,zfr),e(Ho,Et),M(Q8,Et,null),e(Et,Qfr),e(Et,ibe),e(ibe,Wfr),e(Et,Hfr),e(Et,Id),e(Id,Ufr),e(Id,dbe),e(dbe,Jfr),e(Id,Yfr),e(Id,zW),e(zW,Kfr),e(Id,Zfr),e(Et,emr),M(fT,Et,null),e(Ho,omr),e(Ho,ho),M(W8,ho,null),e(ho,rmr),e(ho,cbe),e(cbe,tmr),e(ho,amr),e(ho,Ya),e(Ya,nmr),e(Ya,fbe),e(fbe,smr),e(Ya,lmr),e(Ya,mbe),e(mbe,imr),e(Ya,dmr),e(Ya,gbe),e(gbe,cmr),e(Ya,fmr),e(ho,mmr),e(ho,H8),e(H8,mT),e(mT,hbe),e(hbe,gmr),e(mT,hmr),e(mT,QW),e(QW,pmr),e(mT,_mr),e(H8,umr),e(H8,gT),e(gT,pbe),e(pbe,bmr),e(gT,vmr),e(gT,WW),e(WW,Fmr),e(gT,Tmr),e(ho,Mmr),e(ho,hT),e(hT,Emr),e(hT,_be),e(_be,Cmr),e(hT,wmr),e(hT,ube),e(ube,Amr),e(ho,Lmr),M(pT,ho,null),b(f,AVe,u),b(f,Nd,u),e(Nd,_T),e(_T,bbe),M(U8,bbe,null),e(Nd,ymr),e(Nd,vbe),e(vbe,xmr),b(f,LVe,u),b(f,Uo,u),M(J8,Uo,null),e(Uo,$mr),e(Uo,qd),e(qd,kmr),e(qd,HW),e(HW,Smr),e(qd,Rmr),e(qd,UW),e(UW,Pmr),e(qd,Bmr),e(Uo,Imr),e(Uo,Y8),e(Y8,Nmr),e(Y8,Fbe),e(Fbe,qmr),e(Y8,jmr),e(Uo,Dmr),e(Uo,Ct),M(K8,Ct,null),e(Ct,Gmr),e(Ct,Tbe),e(Tbe,Omr),e(Ct,Vmr),e(Ct,jd),e(jd,Xmr),e(jd,Mbe),e(Mbe,zmr),e(jd,Qmr),e(jd,JW),e(JW,Wmr),e(jd,Hmr),e(Ct,Umr),M(uT,Ct,null),e(Uo,Jmr),e(Uo,po),M(Z8,po,null),e(po,Ymr),e(po,Ebe),e(Ebe,Kmr),e(po,Zmr),e(po,Ka),e(Ka,egr),e(Ka,Cbe),e(Cbe,ogr),e(Ka,rgr),e(Ka,wbe),e(wbe,tgr),e(Ka,agr),e(Ka,Abe),e(Abe,ngr),e(Ka,sgr),e(po,lgr),e(po,ot),e(ot,bT),e(bT,Lbe),e(Lbe,igr),e(bT,dgr),e(bT,YW),e(YW,cgr),e(bT,fgr),e(ot,mgr),e(ot,vT),e(vT,ybe),e(ybe,ggr),e(vT,hgr),e(vT,KW),e(KW,pgr),e(vT,_gr),e(ot,ugr),e(ot,FT),e(FT,xbe),e(xbe,bgr),e(FT,vgr),e(FT,ZW),e(ZW,Fgr),e(FT,Tgr),e(ot,Mgr),e(ot,TT),e(TT,$be),e($be,Egr),e(TT,Cgr),e(TT,eH),e(eH,wgr),e(TT,Agr),e(ot,Lgr),e(ot,MT),e(MT,kbe),e(kbe,ygr),e(MT,xgr),e(MT,oH),e(oH,$gr),e(MT,kgr),e(po,Sgr),e(po,ET),e(ET,Rgr),e(ET,Sbe),e(Sbe,Pgr),e(ET,Bgr),e(ET,Rbe),e(Rbe,Igr),e(po,Ngr),M(CT,po,null),b(f,yVe,u),b(f,Dd,u),e(Dd,wT),e(wT,Pbe),M(e9,Pbe,null),e(Dd,qgr),e(Dd,Bbe),e(Bbe,jgr),b(f,xVe,u),b(f,Jo,u),M(o9,Jo,null),e(Jo,Dgr),e(Jo,Gd),e(Gd,Ggr),e(Gd,rH),e(rH,Ogr),e(Gd,Vgr),e(Gd,tH),e(tH,Xgr),e(Gd,zgr),e(Jo,Qgr),e(Jo,r9),e(r9,Wgr),e(r9,Ibe),e(Ibe,Hgr),e(r9,Ugr),e(Jo,Jgr),e(Jo,wt),M(t9,wt,null),e(wt,Ygr),e(wt,Nbe),e(Nbe,Kgr),e(wt,Zgr),e(wt,Od),e(Od,ehr),e(Od,qbe),e(qbe,ohr),e(Od,rhr),e(Od,aH),e(aH,thr),e(Od,ahr),e(wt,nhr),M(AT,wt,null),e(Jo,shr),e(Jo,_o),M(a9,_o,null),e(_o,lhr),e(_o,jbe),e(jbe,ihr),e(_o,dhr),e(_o,Za),e(Za,chr),e(Za,Dbe),e(Dbe,fhr),e(Za,mhr),e(Za,Gbe),e(Gbe,ghr),e(Za,hhr),e(Za,Obe),e(Obe,phr),e(Za,_hr),e(_o,uhr),e(_o,Vd),e(Vd,LT),e(LT,Vbe),e(Vbe,bhr),e(LT,vhr),e(LT,nH),e(nH,Fhr),e(LT,Thr),e(Vd,Mhr),e(Vd,yT),e(yT,Xbe),e(Xbe,Ehr),e(yT,Chr),e(yT,sH),e(sH,whr),e(yT,Ahr),e(Vd,Lhr),e(Vd,xT),e(xT,zbe),e(zbe,yhr),e(xT,xhr),e(xT,lH),e(lH,$hr),e(xT,khr),e(_o,Shr),e(_o,$T),e($T,Rhr),e($T,Qbe),e(Qbe,Phr),e($T,Bhr),e($T,Wbe),e(Wbe,Ihr),e(_o,Nhr),M(kT,_o,null),b(f,$Ve,u),b(f,Xd,u),e(Xd,ST),e(ST,Hbe),M(n9,Hbe,null),e(Xd,qhr),e(Xd,Ube),e(Ube,jhr),b(f,kVe,u),b(f,Yo,u),M(s9,Yo,null),e(Yo,Dhr),e(Yo,zd),e(zd,Ghr),e(zd,iH),e(iH,Ohr),e(zd,Vhr),e(zd,dH),e(dH,Xhr),e(zd,zhr),e(Yo,Qhr),e(Yo,l9),e(l9,Whr),e(l9,Jbe),e(Jbe,Hhr),e(l9,Uhr),e(Yo,Jhr),e(Yo,At),M(i9,At,null),e(At,Yhr),e(At,Ybe),e(Ybe,Khr),e(At,Zhr),e(At,Qd),e(Qd,epr),e(Qd,Kbe),e(Kbe,opr),e(Qd,rpr),e(Qd,cH),e(cH,tpr),e(Qd,apr),e(At,npr),M(RT,At,null),e(Yo,spr),e(Yo,uo),M(d9,uo,null),e(uo,lpr),e(uo,Zbe),e(Zbe,ipr),e(uo,dpr),e(uo,en),e(en,cpr),e(en,eve),e(eve,fpr),e(en,mpr),e(en,ove),e(ove,gpr),e(en,hpr),e(en,rve),e(rve,ppr),e(en,_pr),e(uo,upr),e(uo,c9),e(c9,PT),e(PT,tve),e(tve,bpr),e(PT,vpr),e(PT,fH),e(fH,Fpr),e(PT,Tpr),e(c9,Mpr),e(c9,BT),e(BT,ave),e(ave,Epr),e(BT,Cpr),e(BT,mH),e(mH,wpr),e(BT,Apr),e(uo,Lpr),e(uo,IT),e(IT,ypr),e(IT,nve),e(nve,xpr),e(IT,$pr),e(IT,sve),e(sve,kpr),e(uo,Spr),M(NT,uo,null),b(f,SVe,u),b(f,Wd,u),e(Wd,qT),e(qT,lve),M(f9,lve,null),e(Wd,Rpr),e(Wd,ive),e(ive,Ppr),b(f,RVe,u),b(f,Ko,u),M(m9,Ko,null),e(Ko,Bpr),e(Ko,Hd),e(Hd,Ipr),e(Hd,gH),e(gH,Npr),e(Hd,qpr),e(Hd,hH),e(hH,jpr),e(Hd,Dpr),e(Ko,Gpr),e(Ko,g9),e(g9,Opr),e(g9,dve),e(dve,Vpr),e(g9,Xpr),e(Ko,zpr),e(Ko,Lt),M(h9,Lt,null),e(Lt,Qpr),e(Lt,cve),e(cve,Wpr),e(Lt,Hpr),e(Lt,Ud),e(Ud,Upr),e(Ud,fve),e(fve,Jpr),e(Ud,Ypr),e(Ud,pH),e(pH,Kpr),e(Ud,Zpr),e(Lt,e_r),M(jT,Lt,null),e(Ko,o_r),e(Ko,bo),M(p9,bo,null),e(bo,r_r),e(bo,mve),e(mve,t_r),e(bo,a_r),e(bo,on),e(on,n_r),e(on,gve),e(gve,s_r),e(on,l_r),e(on,hve),e(hve,i_r),e(on,d_r),e(on,pve),e(pve,c_r),e(on,f_r),e(bo,m_r),e(bo,_ve),e(_ve,DT),e(DT,uve),e(uve,g_r),e(DT,h_r),e(DT,_H),e(_H,p_r),e(DT,__r),e(bo,u_r),e(bo,GT),e(GT,b_r),e(GT,bve),e(bve,v_r),e(GT,F_r),e(GT,vve),e(vve,T_r),e(bo,M_r),M(OT,bo,null),b(f,PVe,u),b(f,Jd,u),e(Jd,VT),e(VT,Fve),M(_9,Fve,null),e(Jd,E_r),e(Jd,Tve),e(Tve,C_r),b(f,BVe,u),b(f,Zo,u),M(u9,Zo,null),e(Zo,w_r),e(Zo,Yd),e(Yd,A_r),e(Yd,uH),e(uH,L_r),e(Yd,y_r),e(Yd,bH),e(bH,x_r),e(Yd,$_r),e(Zo,k_r),e(Zo,b9),e(b9,S_r),e(b9,Mve),e(Mve,R_r),e(b9,P_r),e(Zo,B_r),e(Zo,yt),M(v9,yt,null),e(yt,I_r),e(yt,Eve),e(Eve,N_r),e(yt,q_r),e(yt,Kd),e(Kd,j_r),e(Kd,Cve),e(Cve,D_r),e(Kd,G_r),e(Kd,vH),e(vH,O_r),e(Kd,V_r),e(yt,X_r),M(XT,yt,null),e(Zo,z_r),e(Zo,vo),M(F9,vo,null),e(vo,Q_r),e(vo,wve),e(wve,W_r),e(vo,H_r),e(vo,rn),e(rn,U_r),e(rn,Ave),e(Ave,J_r),e(rn,Y_r),e(rn,Lve),e(Lve,K_r),e(rn,Z_r),e(rn,yve),e(yve,eur),e(rn,our),e(vo,rur),e(vo,tn),e(tn,zT),e(zT,xve),e(xve,tur),e(zT,aur),e(zT,FH),e(FH,nur),e(zT,sur),e(tn,lur),e(tn,QT),e(QT,$ve),e($ve,iur),e(QT,dur),e(QT,TH),e(TH,cur),e(QT,fur),e(tn,mur),e(tn,WT),e(WT,kve),e(kve,gur),e(WT,hur),e(WT,MH),e(MH,pur),e(WT,_ur),e(tn,uur),e(tn,HT),e(HT,Sve),e(Sve,bur),e(HT,vur),e(HT,EH),e(EH,Fur),e(HT,Tur),e(vo,Mur),e(vo,UT),e(UT,Eur),e(UT,Rve),e(Rve,Cur),e(UT,wur),e(UT,Pve),e(Pve,Aur),e(vo,Lur),M(JT,vo,null),b(f,IVe,u),b(f,Zd,u),e(Zd,YT),e(YT,Bve),M(T9,Bve,null),e(Zd,yur),e(Zd,Ive),e(Ive,xur),b(f,NVe,u),b(f,er,u),M(M9,er,null),e(er,$ur),e(er,ec),e(ec,kur),e(ec,CH),e(CH,Sur),e(ec,Rur),e(ec,wH),e(wH,Pur),e(ec,Bur),e(er,Iur),e(er,E9),e(E9,Nur),e(E9,Nve),e(Nve,qur),e(E9,jur),e(er,Dur),e(er,xt),M(C9,xt,null),e(xt,Gur),e(xt,qve),e(qve,Our),e(xt,Vur),e(xt,oc),e(oc,Xur),e(oc,jve),e(jve,zur),e(oc,Qur),e(oc,AH),e(AH,Wur),e(oc,Hur),e(xt,Uur),M(KT,xt,null),e(er,Jur),e(er,Fo),M(w9,Fo,null),e(Fo,Yur),e(Fo,Dve),e(Dve,Kur),e(Fo,Zur),e(Fo,an),e(an,e1r),e(an,Gve),e(Gve,o1r),e(an,r1r),e(an,Ove),e(Ove,t1r),e(an,a1r),e(an,Vve),e(Vve,n1r),e(an,s1r),e(Fo,l1r),e(Fo,Xve),e(Xve,ZT),e(ZT,zve),e(zve,i1r),e(ZT,d1r),e(ZT,LH),e(LH,c1r),e(ZT,f1r),e(Fo,m1r),e(Fo,eM),e(eM,g1r),e(eM,Qve),e(Qve,h1r),e(eM,p1r),e(eM,Wve),e(Wve,_1r),e(Fo,u1r),M(oM,Fo,null),b(f,qVe,u),b(f,rc,u),e(rc,rM),e(rM,Hve),M(A9,Hve,null),e(rc,b1r),e(rc,Uve),e(Uve,v1r),b(f,jVe,u),b(f,or,u),M(L9,or,null),e(or,F1r),e(or,tc),e(tc,T1r),e(tc,yH),e(yH,M1r),e(tc,E1r),e(tc,xH),e(xH,C1r),e(tc,w1r),e(or,A1r),e(or,y9),e(y9,L1r),e(y9,Jve),e(Jve,y1r),e(y9,x1r),e(or,$1r),e(or,$t),M(x9,$t,null),e($t,k1r),e($t,Yve),e(Yve,S1r),e($t,R1r),e($t,ac),e(ac,P1r),e(ac,Kve),e(Kve,B1r),e(ac,I1r),e(ac,$H),e($H,N1r),e(ac,q1r),e($t,j1r),M(tM,$t,null),e(or,D1r),e(or,xr),M($9,xr,null),e(xr,G1r),e(xr,Zve),e(Zve,O1r),e(xr,V1r),e(xr,nn),e(nn,X1r),e(nn,eFe),e(eFe,z1r),e(nn,Q1r),e(nn,oFe),e(oFe,W1r),e(nn,H1r),e(nn,rFe),e(rFe,U1r),e(nn,J1r),e(xr,Y1r),e(xr,j),e(j,aM),e(aM,tFe),e(tFe,K1r),e(aM,Z1r),e(aM,kH),e(kH,e7r),e(aM,o7r),e(j,r7r),e(j,nM),e(nM,aFe),e(aFe,t7r),e(nM,a7r),e(nM,SH),e(SH,n7r),e(nM,s7r),e(j,l7r),e(j,sM),e(sM,nFe),e(nFe,i7r),e(sM,d7r),e(sM,RH),e(RH,c7r),e(sM,f7r),e(j,m7r),e(j,lM),e(lM,sFe),e(sFe,g7r),e(lM,h7r),e(lM,PH),e(PH,p7r),e(lM,_7r),e(j,u7r),e(j,iM),e(iM,lFe),e(lFe,b7r),e(iM,v7r),e(iM,BH),e(BH,F7r),e(iM,T7r),e(j,M7r),e(j,dM),e(dM,iFe),e(iFe,E7r),e(dM,C7r),e(dM,IH),e(IH,w7r),e(dM,A7r),e(j,L7r),e(j,cM),e(cM,dFe),e(dFe,y7r),e(cM,x7r),e(cM,NH),e(NH,$7r),e(cM,k7r),e(j,S7r),e(j,fM),e(fM,cFe),e(cFe,R7r),e(fM,P7r),e(fM,qH),e(qH,B7r),e(fM,I7r),e(j,N7r),e(j,mM),e(mM,fFe),e(fFe,q7r),e(mM,j7r),e(mM,jH),e(jH,D7r),e(mM,G7r),e(j,O7r),e(j,gM),e(gM,mFe),e(mFe,V7r),e(gM,X7r),e(gM,DH),e(DH,z7r),e(gM,Q7r),e(j,W7r),e(j,hM),e(hM,gFe),e(gFe,H7r),e(hM,U7r),e(hM,GH),e(GH,J7r),e(hM,Y7r),e(j,K7r),e(j,pM),e(pM,hFe),e(hFe,Z7r),e(pM,e2r),e(pM,OH),e(OH,o2r),e(pM,r2r),e(j,t2r),e(j,_M),e(_M,pFe),e(pFe,a2r),e(_M,n2r),e(_M,VH),e(VH,s2r),e(_M,l2r),e(j,i2r),e(j,uM),e(uM,_Fe),e(_Fe,d2r),e(uM,c2r),e(uM,XH),e(XH,f2r),e(uM,m2r),e(j,g2r),e(j,bM),e(bM,uFe),e(uFe,h2r),e(bM,p2r),e(bM,zH),e(zH,_2r),e(bM,u2r),e(j,b2r),e(j,vM),e(vM,bFe),e(bFe,v2r),e(vM,F2r),e(vM,QH),e(QH,T2r),e(vM,M2r),e(j,E2r),e(j,FM),e(FM,vFe),e(vFe,C2r),e(FM,w2r),e(FM,WH),e(WH,A2r),e(FM,L2r),e(j,y2r),e(j,Us),e(Us,FFe),e(FFe,x2r),e(Us,$2r),e(Us,HH),e(HH,k2r),e(Us,S2r),e(Us,UH),e(UH,R2r),e(Us,P2r),e(j,B2r),e(j,TM),e(TM,TFe),e(TFe,I2r),e(TM,N2r),e(TM,JH),e(JH,q2r),e(TM,j2r),e(j,D2r),e(j,MM),e(MM,MFe),e(MFe,G2r),e(MM,O2r),e(MM,YH),e(YH,V2r),e(MM,X2r),e(j,z2r),e(j,EM),e(EM,EFe),e(EFe,Q2r),e(EM,W2r),e(EM,KH),e(KH,H2r),e(EM,U2r),e(j,J2r),e(j,CM),e(CM,CFe),e(CFe,Y2r),e(CM,K2r),e(CM,ZH),e(ZH,Z2r),e(CM,ebr),e(j,obr),e(j,wM),e(wM,wFe),e(wFe,rbr),e(wM,tbr),e(wM,eU),e(eU,abr),e(wM,nbr),e(j,sbr),e(j,AM),e(AM,AFe),e(AFe,lbr),e(AM,ibr),e(AM,oU),e(oU,dbr),e(AM,cbr),e(j,fbr),e(j,LM),e(LM,LFe),e(LFe,mbr),e(LM,gbr),e(LM,rU),e(rU,hbr),e(LM,pbr),e(j,_br),e(j,yM),e(yM,yFe),e(yFe,ubr),e(yM,bbr),e(yM,tU),e(tU,vbr),e(yM,Fbr),e(j,Tbr),e(j,xM),e(xM,xFe),e(xFe,Mbr),e(xM,Ebr),e(xM,aU),e(aU,Cbr),e(xM,wbr),e(j,Abr),e(j,$M),e($M,$Fe),e($Fe,Lbr),e($M,ybr),e($M,nU),e(nU,xbr),e($M,$br),e(j,kbr),e(j,kM),e(kM,kFe),e(kFe,Sbr),e(kM,Rbr),e(kM,sU),e(sU,Pbr),e(kM,Bbr),e(j,Ibr),e(j,SM),e(SM,SFe),e(SFe,Nbr),e(SM,qbr),e(SM,lU),e(lU,jbr),e(SM,Dbr),e(j,Gbr),e(j,RM),e(RM,RFe),e(RFe,Obr),e(RM,Vbr),e(RM,iU),e(iU,Xbr),e(RM,zbr),e(j,Qbr),e(j,PM),e(PM,PFe),e(PFe,Wbr),e(PM,Hbr),e(PM,dU),e(dU,Ubr),e(PM,Jbr),e(j,Ybr),e(j,BM),e(BM,BFe),e(BFe,Kbr),e(BM,Zbr),e(BM,cU),e(cU,evr),e(BM,ovr),e(j,rvr),e(j,IM),e(IM,IFe),e(IFe,tvr),e(IM,avr),e(IM,fU),e(fU,nvr),e(IM,svr),e(j,lvr),e(j,NM),e(NM,NFe),e(NFe,ivr),e(NM,dvr),e(NM,mU),e(mU,cvr),e(NM,fvr),e(j,mvr),e(j,qM),e(qM,qFe),e(qFe,gvr),e(qM,hvr),e(qM,gU),e(gU,pvr),e(qM,_vr),e(j,uvr),e(j,jM),e(jM,jFe),e(jFe,bvr),e(jM,vvr),e(jM,hU),e(hU,Fvr),e(jM,Tvr),e(j,Mvr),e(j,DM),e(DM,DFe),e(DFe,Evr),e(DM,Cvr),e(DM,pU),e(pU,wvr),e(DM,Avr),e(j,Lvr),e(j,GM),e(GM,GFe),e(GFe,yvr),e(GM,xvr),e(GM,_U),e(_U,$vr),e(GM,kvr),e(j,Svr),e(j,OM),e(OM,OFe),e(OFe,Rvr),e(OM,Pvr),e(OM,uU),e(uU,Bvr),e(OM,Ivr),e(j,Nvr),e(j,VM),e(VM,VFe),e(VFe,qvr),e(VM,jvr),e(VM,bU),e(bU,Dvr),e(VM,Gvr),e(j,Ovr),e(j,XM),e(XM,XFe),e(XFe,Vvr),e(XM,Xvr),e(XM,vU),e(vU,zvr),e(XM,Qvr),e(j,Wvr),e(j,zM),e(zM,zFe),e(zFe,Hvr),e(zM,Uvr),e(zM,FU),e(FU,Jvr),e(zM,Yvr),e(j,Kvr),e(j,QM),e(QM,QFe),e(QFe,Zvr),e(QM,eFr),e(QM,TU),e(TU,oFr),e(QM,rFr),e(j,tFr),e(j,WM),e(WM,WFe),e(WFe,aFr),e(WM,nFr),e(WM,MU),e(MU,sFr),e(WM,lFr),e(j,iFr),e(j,HM),e(HM,HFe),e(HFe,dFr),e(HM,cFr),e(HM,EU),e(EU,fFr),e(HM,mFr),e(j,gFr),e(j,UM),e(UM,UFe),e(UFe,hFr),e(UM,pFr),e(UM,CU),e(CU,_Fr),e(UM,uFr),e(xr,bFr),M(JM,xr,null),b(f,DVe,u),b(f,nc,u),e(nc,YM),e(YM,JFe),M(k9,JFe,null),e(nc,vFr),e(nc,YFe),e(YFe,FFr),b(f,GVe,u),b(f,rr,u),M(S9,rr,null),e(rr,TFr),e(rr,sc),e(sc,MFr),e(sc,wU),e(wU,EFr),e(sc,CFr),e(sc,AU),e(AU,wFr),e(sc,AFr),e(rr,LFr),e(rr,R9),e(R9,yFr),e(R9,KFe),e(KFe,xFr),e(R9,$Fr),e(rr,kFr),e(rr,kt),M(P9,kt,null),e(kt,SFr),e(kt,ZFe),e(ZFe,RFr),e(kt,PFr),e(kt,lc),e(lc,BFr),e(lc,e6e),e(e6e,IFr),e(lc,NFr),e(lc,LU),e(LU,qFr),e(lc,jFr),e(kt,DFr),M(KM,kt,null),e(rr,GFr),e(rr,$r),M(B9,$r,null),e($r,OFr),e($r,o6e),e(o6e,VFr),e($r,XFr),e($r,sn),e(sn,zFr),e(sn,r6e),e(r6e,QFr),e(sn,WFr),e(sn,t6e),e(t6e,HFr),e(sn,UFr),e(sn,a6e),e(a6e,JFr),e(sn,YFr),e($r,KFr),e($r,se),e(se,ZM),e(ZM,n6e),e(n6e,ZFr),e(ZM,e6r),e(ZM,yU),e(yU,o6r),e(ZM,r6r),e(se,t6r),e(se,e4),e(e4,s6e),e(s6e,a6r),e(e4,n6r),e(e4,xU),e(xU,s6r),e(e4,l6r),e(se,i6r),e(se,o4),e(o4,l6e),e(l6e,d6r),e(o4,c6r),e(o4,$U),e($U,f6r),e(o4,m6r),e(se,g6r),e(se,r4),e(r4,i6e),e(i6e,h6r),e(r4,p6r),e(r4,kU),e(kU,_6r),e(r4,u6r),e(se,b6r),e(se,t4),e(t4,d6e),e(d6e,v6r),e(t4,F6r),e(t4,SU),e(SU,T6r),e(t4,M6r),e(se,E6r),e(se,a4),e(a4,c6e),e(c6e,C6r),e(a4,w6r),e(a4,RU),e(RU,A6r),e(a4,L6r),e(se,y6r),e(se,n4),e(n4,f6e),e(f6e,x6r),e(n4,$6r),e(n4,PU),e(PU,k6r),e(n4,S6r),e(se,R6r),e(se,s4),e(s4,m6e),e(m6e,P6r),e(s4,B6r),e(s4,BU),e(BU,I6r),e(s4,N6r),e(se,q6r),e(se,l4),e(l4,g6e),e(g6e,j6r),e(l4,D6r),e(l4,IU),e(IU,G6r),e(l4,O6r),e(se,V6r),e(se,i4),e(i4,h6e),e(h6e,X6r),e(i4,z6r),e(i4,NU),e(NU,Q6r),e(i4,W6r),e(se,H6r),e(se,d4),e(d4,p6e),e(p6e,U6r),e(d4,J6r),e(d4,qU),e(qU,Y6r),e(d4,K6r),e(se,Z6r),e(se,c4),e(c4,_6e),e(_6e,eTr),e(c4,oTr),e(c4,jU),e(jU,rTr),e(c4,tTr),e(se,aTr),e(se,f4),e(f4,u6e),e(u6e,nTr),e(f4,sTr),e(f4,DU),e(DU,lTr),e(f4,iTr),e(se,dTr),e(se,m4),e(m4,b6e),e(b6e,cTr),e(m4,fTr),e(m4,GU),e(GU,mTr),e(m4,gTr),e(se,hTr),e(se,g4),e(g4,v6e),e(v6e,pTr),e(g4,_Tr),e(g4,OU),e(OU,uTr),e(g4,bTr),e(se,vTr),e(se,h4),e(h4,F6e),e(F6e,FTr),e(h4,TTr),e(h4,VU),e(VU,MTr),e(h4,ETr),e(se,CTr),e(se,p4),e(p4,T6e),e(T6e,wTr),e(p4,ATr),e(p4,XU),e(XU,LTr),e(p4,yTr),e(se,xTr),e(se,_4),e(_4,M6e),e(M6e,$Tr),e(_4,kTr),e(_4,zU),e(zU,STr),e(_4,RTr),e(se,PTr),e(se,u4),e(u4,E6e),e(E6e,BTr),e(u4,ITr),e(u4,QU),e(QU,NTr),e(u4,qTr),e(se,jTr),e(se,b4),e(b4,C6e),e(C6e,DTr),e(b4,GTr),e(b4,WU),e(WU,OTr),e(b4,VTr),e(se,XTr),e(se,v4),e(v4,w6e),e(w6e,zTr),e(v4,QTr),e(v4,HU),e(HU,WTr),e(v4,HTr),e(se,UTr),e(se,F4),e(F4,A6e),e(A6e,JTr),e(F4,YTr),e(F4,UU),e(UU,KTr),e(F4,ZTr),e(se,eMr),e(se,T4),e(T4,L6e),e(L6e,oMr),e(T4,rMr),e(T4,JU),e(JU,tMr),e(T4,aMr),e($r,nMr),M(M4,$r,null),b(f,OVe,u),b(f,ic,u),e(ic,E4),e(E4,y6e),M(I9,y6e,null),e(ic,sMr),e(ic,x6e),e(x6e,lMr),b(f,VVe,u),b(f,tr,u),M(N9,tr,null),e(tr,iMr),e(tr,dc),e(dc,dMr),e(dc,YU),e(YU,cMr),e(dc,fMr),e(dc,KU),e(KU,mMr),e(dc,gMr),e(tr,hMr),e(tr,q9),e(q9,pMr),e(q9,$6e),e($6e,_Mr),e(q9,uMr),e(tr,bMr),e(tr,St),M(j9,St,null),e(St,vMr),e(St,k6e),e(k6e,FMr),e(St,TMr),e(St,cc),e(cc,MMr),e(cc,S6e),e(S6e,EMr),e(cc,CMr),e(cc,ZU),e(ZU,wMr),e(cc,AMr),e(St,LMr),M(C4,St,null),e(tr,yMr),e(tr,kr),M(D9,kr,null),e(kr,xMr),e(kr,R6e),e(R6e,$Mr),e(kr,kMr),e(kr,ln),e(ln,SMr),e(ln,P6e),e(P6e,RMr),e(ln,PMr),e(ln,B6e),e(B6e,BMr),e(ln,IMr),e(ln,I6e),e(I6e,NMr),e(ln,qMr),e(kr,jMr),e(kr,Me),e(Me,w4),e(w4,N6e),e(N6e,DMr),e(w4,GMr),e(w4,eJ),e(eJ,OMr),e(w4,VMr),e(Me,XMr),e(Me,A4),e(A4,q6e),e(q6e,zMr),e(A4,QMr),e(A4,oJ),e(oJ,WMr),e(A4,HMr),e(Me,UMr),e(Me,L4),e(L4,j6e),e(j6e,JMr),e(L4,YMr),e(L4,rJ),e(rJ,KMr),e(L4,ZMr),e(Me,e4r),e(Me,y4),e(y4,D6e),e(D6e,o4r),e(y4,r4r),e(y4,tJ),e(tJ,t4r),e(y4,a4r),e(Me,n4r),e(Me,x4),e(x4,G6e),e(G6e,s4r),e(x4,l4r),e(x4,aJ),e(aJ,i4r),e(x4,d4r),e(Me,c4r),e(Me,$4),e($4,O6e),e(O6e,f4r),e($4,m4r),e($4,nJ),e(nJ,g4r),e($4,h4r),e(Me,p4r),e(Me,k4),e(k4,V6e),e(V6e,_4r),e(k4,u4r),e(k4,sJ),e(sJ,b4r),e(k4,v4r),e(Me,F4r),e(Me,S4),e(S4,X6e),e(X6e,T4r),e(S4,M4r),e(S4,lJ),e(lJ,E4r),e(S4,C4r),e(Me,w4r),e(Me,R4),e(R4,z6e),e(z6e,A4r),e(R4,L4r),e(R4,iJ),e(iJ,y4r),e(R4,x4r),e(Me,$4r),e(Me,P4),e(P4,Q6e),e(Q6e,k4r),e(P4,S4r),e(P4,dJ),e(dJ,R4r),e(P4,P4r),e(Me,B4r),e(Me,B4),e(B4,W6e),e(W6e,I4r),e(B4,N4r),e(B4,cJ),e(cJ,q4r),e(B4,j4r),e(Me,D4r),e(Me,I4),e(I4,H6e),e(H6e,G4r),e(I4,O4r),e(I4,fJ),e(fJ,V4r),e(I4,X4r),e(Me,z4r),e(Me,N4),e(N4,U6e),e(U6e,Q4r),e(N4,W4r),e(N4,mJ),e(mJ,H4r),e(N4,U4r),e(kr,J4r),M(q4,kr,null),b(f,XVe,u),b(f,fc,u),e(fc,j4),e(j4,J6e),M(G9,J6e,null),e(fc,Y4r),e(fc,Y6e),e(Y6e,K4r),b(f,zVe,u),b(f,ar,u),M(O9,ar,null),e(ar,Z4r),e(ar,mc),e(mc,eEr),e(mc,gJ),e(gJ,oEr),e(mc,rEr),e(mc,hJ),e(hJ,tEr),e(mc,aEr),e(ar,nEr),e(ar,V9),e(V9,sEr),e(V9,K6e),e(K6e,lEr),e(V9,iEr),e(ar,dEr),e(ar,Rt),M(X9,Rt,null),e(Rt,cEr),e(Rt,Z6e),e(Z6e,fEr),e(Rt,mEr),e(Rt,gc),e(gc,gEr),e(gc,eTe),e(eTe,hEr),e(gc,pEr),e(gc,pJ),e(pJ,_Er),e(gc,uEr),e(Rt,bEr),M(D4,Rt,null),e(ar,vEr),e(ar,Sr),M(z9,Sr,null),e(Sr,FEr),e(Sr,oTe),e(oTe,TEr),e(Sr,MEr),e(Sr,dn),e(dn,EEr),e(dn,rTe),e(rTe,CEr),e(dn,wEr),e(dn,tTe),e(tTe,AEr),e(dn,LEr),e(dn,aTe),e(aTe,yEr),e(dn,xEr),e(Sr,$Er),e(Sr,cn),e(cn,G4),e(G4,nTe),e(nTe,kEr),e(G4,SEr),e(G4,_J),e(_J,REr),e(G4,PEr),e(cn,BEr),e(cn,O4),e(O4,sTe),e(sTe,IEr),e(O4,NEr),e(O4,uJ),e(uJ,qEr),e(O4,jEr),e(cn,DEr),e(cn,V4),e(V4,lTe),e(lTe,GEr),e(V4,OEr),e(V4,bJ),e(bJ,VEr),e(V4,XEr),e(cn,zEr),e(cn,X4),e(X4,iTe),e(iTe,QEr),e(X4,WEr),e(X4,vJ),e(vJ,HEr),e(X4,UEr),e(Sr,JEr),M(z4,Sr,null),b(f,QVe,u),b(f,hc,u),e(hc,Q4),e(Q4,dTe),M(Q9,dTe,null),e(hc,YEr),e(hc,cTe),e(cTe,KEr),b(f,WVe,u),b(f,nr,u),M(W9,nr,null),e(nr,ZEr),e(nr,pc),e(pc,eCr),e(pc,FJ),e(FJ,oCr),e(pc,rCr),e(pc,TJ),e(TJ,tCr),e(pc,aCr),e(nr,nCr),e(nr,H9),e(H9,sCr),e(H9,fTe),e(fTe,lCr),e(H9,iCr),e(nr,dCr),e(nr,Pt),M(U9,Pt,null),e(Pt,cCr),e(Pt,mTe),e(mTe,fCr),e(Pt,mCr),e(Pt,_c),e(_c,gCr),e(_c,gTe),e(gTe,hCr),e(_c,pCr),e(_c,MJ),e(MJ,_Cr),e(_c,uCr),e(Pt,bCr),M(W4,Pt,null),e(nr,vCr),e(nr,Rr),M(J9,Rr,null),e(Rr,FCr),e(Rr,hTe),e(hTe,TCr),e(Rr,MCr),e(Rr,fn),e(fn,ECr),e(fn,pTe),e(pTe,CCr),e(fn,wCr),e(fn,_Te),e(_Te,ACr),e(fn,LCr),e(fn,uTe),e(uTe,yCr),e(fn,xCr),e(Rr,$Cr),e(Rr,ie),e(ie,H4),e(H4,bTe),e(bTe,kCr),e(H4,SCr),e(H4,EJ),e(EJ,RCr),e(H4,PCr),e(ie,BCr),e(ie,U4),e(U4,vTe),e(vTe,ICr),e(U4,NCr),e(U4,CJ),e(CJ,qCr),e(U4,jCr),e(ie,DCr),e(ie,J4),e(J4,FTe),e(FTe,GCr),e(J4,OCr),e(J4,wJ),e(wJ,VCr),e(J4,XCr),e(ie,zCr),e(ie,Y4),e(Y4,TTe),e(TTe,QCr),e(Y4,WCr),e(Y4,AJ),e(AJ,HCr),e(Y4,UCr),e(ie,JCr),e(ie,K4),e(K4,MTe),e(MTe,YCr),e(K4,KCr),e(K4,LJ),e(LJ,ZCr),e(K4,e5r),e(ie,o5r),e(ie,Z4),e(Z4,ETe),e(ETe,r5r),e(Z4,t5r),e(Z4,yJ),e(yJ,a5r),e(Z4,n5r),e(ie,s5r),e(ie,eE),e(eE,CTe),e(CTe,l5r),e(eE,i5r),e(eE,xJ),e(xJ,d5r),e(eE,c5r),e(ie,f5r),e(ie,oE),e(oE,wTe),e(wTe,m5r),e(oE,g5r),e(oE,$J),e($J,h5r),e(oE,p5r),e(ie,_5r),e(ie,rE),e(rE,ATe),e(ATe,u5r),e(rE,b5r),e(rE,kJ),e(kJ,v5r),e(rE,F5r),e(ie,T5r),e(ie,tE),e(tE,LTe),e(LTe,M5r),e(tE,E5r),e(tE,SJ),e(SJ,C5r),e(tE,w5r),e(ie,A5r),e(ie,aE),e(aE,yTe),e(yTe,L5r),e(aE,y5r),e(aE,RJ),e(RJ,x5r),e(aE,$5r),e(ie,k5r),e(ie,nE),e(nE,xTe),e(xTe,S5r),e(nE,R5r),e(nE,PJ),e(PJ,P5r),e(nE,B5r),e(ie,I5r),e(ie,sE),e(sE,$Te),e($Te,N5r),e(sE,q5r),e(sE,BJ),e(BJ,j5r),e(sE,D5r),e(ie,G5r),e(ie,lE),e(lE,kTe),e(kTe,O5r),e(lE,V5r),e(lE,IJ),e(IJ,X5r),e(lE,z5r),e(ie,Q5r),e(ie,iE),e(iE,STe),e(STe,W5r),e(iE,H5r),e(iE,NJ),e(NJ,U5r),e(iE,J5r),e(ie,Y5r),e(ie,dE),e(dE,RTe),e(RTe,K5r),e(dE,Z5r),e(dE,qJ),e(qJ,e3r),e(dE,o3r),e(ie,r3r),e(ie,cE),e(cE,PTe),e(PTe,t3r),e(cE,a3r),e(cE,jJ),e(jJ,n3r),e(cE,s3r),e(ie,l3r),e(ie,fE),e(fE,BTe),e(BTe,i3r),e(fE,d3r),e(fE,DJ),e(DJ,c3r),e(fE,f3r),e(ie,m3r),e(ie,mE),e(mE,ITe),e(ITe,g3r),e(mE,h3r),e(mE,GJ),e(GJ,p3r),e(mE,_3r),e(ie,u3r),e(ie,gE),e(gE,NTe),e(NTe,b3r),e(gE,v3r),e(gE,OJ),e(OJ,F3r),e(gE,T3r),e(Rr,M3r),M(hE,Rr,null),b(f,HVe,u),b(f,uc,u),e(uc,pE),e(pE,qTe),M(Y9,qTe,null),e(uc,E3r),e(uc,jTe),e(jTe,C3r),b(f,UVe,u),b(f,sr,u),M(K9,sr,null),e(sr,w3r),e(sr,bc),e(bc,A3r),e(bc,VJ),e(VJ,L3r),e(bc,y3r),e(bc,XJ),e(XJ,x3r),e(bc,$3r),e(sr,k3r),e(sr,Z9),e(Z9,S3r),e(Z9,DTe),e(DTe,R3r),e(Z9,P3r),e(sr,B3r),e(sr,Bt),M(ex,Bt,null),e(Bt,I3r),e(Bt,GTe),e(GTe,N3r),e(Bt,q3r),e(Bt,vc),e(vc,j3r),e(vc,OTe),e(OTe,D3r),e(vc,G3r),e(vc,zJ),e(zJ,O3r),e(vc,V3r),e(Bt,X3r),M(_E,Bt,null),e(sr,z3r),e(sr,Pr),M(ox,Pr,null),e(Pr,Q3r),e(Pr,VTe),e(VTe,W3r),e(Pr,H3r),e(Pr,mn),e(mn,U3r),e(mn,XTe),e(XTe,J3r),e(mn,Y3r),e(mn,zTe),e(zTe,K3r),e(mn,Z3r),e(mn,QTe),e(QTe,e0r),e(mn,o0r),e(Pr,r0r),e(Pr,ye),e(ye,uE),e(uE,WTe),e(WTe,t0r),e(uE,a0r),e(uE,QJ),e(QJ,n0r),e(uE,s0r),e(ye,l0r),e(ye,bE),e(bE,HTe),e(HTe,i0r),e(bE,d0r),e(bE,WJ),e(WJ,c0r),e(bE,f0r),e(ye,m0r),e(ye,vE),e(vE,UTe),e(UTe,g0r),e(vE,h0r),e(vE,HJ),e(HJ,p0r),e(vE,_0r),e(ye,u0r),e(ye,FE),e(FE,JTe),e(JTe,b0r),e(FE,v0r),e(FE,UJ),e(UJ,F0r),e(FE,T0r),e(ye,M0r),e(ye,TE),e(TE,YTe),e(YTe,E0r),e(TE,C0r),e(TE,JJ),e(JJ,w0r),e(TE,A0r),e(ye,L0r),e(ye,ME),e(ME,KTe),e(KTe,y0r),e(ME,x0r),e(ME,YJ),e(YJ,$0r),e(ME,k0r),e(ye,S0r),e(ye,EE),e(EE,ZTe),e(ZTe,R0r),e(EE,P0r),e(EE,KJ),e(KJ,B0r),e(EE,I0r),e(ye,N0r),e(ye,CE),e(CE,eMe),e(eMe,q0r),e(CE,j0r),e(CE,ZJ),e(ZJ,D0r),e(CE,G0r),e(ye,O0r),e(ye,wE),e(wE,oMe),e(oMe,V0r),e(wE,X0r),e(wE,eY),e(eY,z0r),e(wE,Q0r),e(ye,W0r),e(ye,AE),e(AE,rMe),e(rMe,H0r),e(AE,U0r),e(AE,oY),e(oY,J0r),e(AE,Y0r),e(Pr,K0r),M(LE,Pr,null),b(f,JVe,u),b(f,Fc,u),e(Fc,yE),e(yE,tMe),M(rx,tMe,null),e(Fc,Z0r),e(Fc,aMe),e(aMe,ewr),b(f,YVe,u),b(f,lr,u),M(tx,lr,null),e(lr,owr),e(lr,Tc),e(Tc,rwr),e(Tc,rY),e(rY,twr),e(Tc,awr),e(Tc,tY),e(tY,nwr),e(Tc,swr),e(lr,lwr),e(lr,ax),e(ax,iwr),e(ax,nMe),e(nMe,dwr),e(ax,cwr),e(lr,fwr),e(lr,It),M(nx,It,null),e(It,mwr),e(It,sMe),e(sMe,gwr),e(It,hwr),e(It,Mc),e(Mc,pwr),e(Mc,lMe),e(lMe,_wr),e(Mc,uwr),e(Mc,aY),e(aY,bwr),e(Mc,vwr),e(It,Fwr),M(xE,It,null),e(lr,Twr),e(lr,Br),M(sx,Br,null),e(Br,Mwr),e(Br,iMe),e(iMe,Ewr),e(Br,Cwr),e(Br,gn),e(gn,wwr),e(gn,dMe),e(dMe,Awr),e(gn,Lwr),e(gn,cMe),e(cMe,ywr),e(gn,xwr),e(gn,fMe),e(fMe,$wr),e(gn,kwr),e(Br,Swr),e(Br,te),e(te,$E),e($E,mMe),e(mMe,Rwr),e($E,Pwr),e($E,nY),e(nY,Bwr),e($E,Iwr),e(te,Nwr),e(te,kE),e(kE,gMe),e(gMe,qwr),e(kE,jwr),e(kE,sY),e(sY,Dwr),e(kE,Gwr),e(te,Owr),e(te,SE),e(SE,hMe),e(hMe,Vwr),e(SE,Xwr),e(SE,lY),e(lY,zwr),e(SE,Qwr),e(te,Wwr),e(te,RE),e(RE,pMe),e(pMe,Hwr),e(RE,Uwr),e(RE,iY),e(iY,Jwr),e(RE,Ywr),e(te,Kwr),e(te,PE),e(PE,_Me),e(_Me,Zwr),e(PE,eAr),e(PE,dY),e(dY,oAr),e(PE,rAr),e(te,tAr),e(te,BE),e(BE,uMe),e(uMe,aAr),e(BE,nAr),e(BE,cY),e(cY,sAr),e(BE,lAr),e(te,iAr),e(te,IE),e(IE,bMe),e(bMe,dAr),e(IE,cAr),e(IE,fY),e(fY,fAr),e(IE,mAr),e(te,gAr),e(te,NE),e(NE,vMe),e(vMe,hAr),e(NE,pAr),e(NE,mY),e(mY,_Ar),e(NE,uAr),e(te,bAr),e(te,qE),e(qE,FMe),e(FMe,vAr),e(qE,FAr),e(qE,gY),e(gY,TAr),e(qE,MAr),e(te,EAr),e(te,jE),e(jE,TMe),e(TMe,CAr),e(jE,wAr),e(jE,hY),e(hY,AAr),e(jE,LAr),e(te,yAr),e(te,DE),e(DE,MMe),e(MMe,xAr),e(DE,$Ar),e(DE,pY),e(pY,kAr),e(DE,SAr),e(te,RAr),e(te,GE),e(GE,EMe),e(EMe,PAr),e(GE,BAr),e(GE,_Y),e(_Y,IAr),e(GE,NAr),e(te,qAr),e(te,OE),e(OE,CMe),e(CMe,jAr),e(OE,DAr),e(OE,uY),e(uY,GAr),e(OE,OAr),e(te,VAr),e(te,VE),e(VE,wMe),e(wMe,XAr),e(VE,zAr),e(VE,bY),e(bY,QAr),e(VE,WAr),e(te,HAr),e(te,XE),e(XE,AMe),e(AMe,UAr),e(XE,JAr),e(XE,vY),e(vY,YAr),e(XE,KAr),e(te,ZAr),e(te,zE),e(zE,LMe),e(LMe,eLr),e(zE,oLr),e(zE,FY),e(FY,rLr),e(zE,tLr),e(te,aLr),e(te,QE),e(QE,yMe),e(yMe,nLr),e(QE,sLr),e(QE,TY),e(TY,lLr),e(QE,iLr),e(te,dLr),e(te,WE),e(WE,xMe),e(xMe,cLr),e(WE,fLr),e(WE,MY),e(MY,mLr),e(WE,gLr),e(te,hLr),e(te,HE),e(HE,$Me),e($Me,pLr),e(HE,_Lr),e(HE,EY),e(EY,uLr),e(HE,bLr),e(te,vLr),e(te,UE),e(UE,kMe),e(kMe,FLr),e(UE,TLr),e(UE,CY),e(CY,MLr),e(UE,ELr),e(te,CLr),e(te,JE),e(JE,SMe),e(SMe,wLr),e(JE,ALr),e(JE,wY),e(wY,LLr),e(JE,yLr),e(te,xLr),e(te,YE),e(YE,RMe),e(RMe,$Lr),e(YE,kLr),e(YE,AY),e(AY,SLr),e(YE,RLr),e(te,PLr),e(te,KE),e(KE,PMe),e(PMe,BLr),e(KE,ILr),e(KE,LY),e(LY,NLr),e(KE,qLr),e(te,jLr),e(te,ZE),e(ZE,BMe),e(BMe,DLr),e(ZE,GLr),e(ZE,yY),e(yY,OLr),e(ZE,VLr),e(te,XLr),e(te,eC),e(eC,IMe),e(IMe,zLr),e(eC,QLr),e(eC,xY),e(xY,WLr),e(eC,HLr),e(te,ULr),e(te,oC),e(oC,NMe),e(NMe,JLr),e(oC,YLr),e(oC,$Y),e($Y,KLr),e(oC,ZLr),e(Br,eyr),M(rC,Br,null),b(f,KVe,u),b(f,Ec,u),e(Ec,tC),e(tC,qMe),M(lx,qMe,null),e(Ec,oyr),e(Ec,jMe),e(jMe,ryr),b(f,ZVe,u),b(f,ir,u),M(ix,ir,null),e(ir,tyr),e(ir,Cc),e(Cc,ayr),e(Cc,kY),e(kY,nyr),e(Cc,syr),e(Cc,SY),e(SY,lyr),e(Cc,iyr),e(ir,dyr),e(ir,dx),e(dx,cyr),e(dx,DMe),e(DMe,fyr),e(dx,myr),e(ir,gyr),e(ir,Nt),M(cx,Nt,null),e(Nt,hyr),e(Nt,GMe),e(GMe,pyr),e(Nt,_yr),e(Nt,wc),e(wc,uyr),e(wc,OMe),e(OMe,byr),e(wc,vyr),e(wc,RY),e(RY,Fyr),e(wc,Tyr),e(Nt,Myr),M(aC,Nt,null),e(ir,Eyr),e(ir,Ir),M(fx,Ir,null),e(Ir,Cyr),e(Ir,VMe),e(VMe,wyr),e(Ir,Ayr),e(Ir,hn),e(hn,Lyr),e(hn,XMe),e(XMe,yyr),e(hn,xyr),e(hn,zMe),e(zMe,$yr),e(hn,kyr),e(hn,QMe),e(QMe,Syr),e(hn,Ryr),e(Ir,Pyr),e(Ir,_e),e(_e,nC),e(nC,WMe),e(WMe,Byr),e(nC,Iyr),e(nC,PY),e(PY,Nyr),e(nC,qyr),e(_e,jyr),e(_e,sC),e(sC,HMe),e(HMe,Dyr),e(sC,Gyr),e(sC,BY),e(BY,Oyr),e(sC,Vyr),e(_e,Xyr),e(_e,lC),e(lC,UMe),e(UMe,zyr),e(lC,Qyr),e(lC,IY),e(IY,Wyr),e(lC,Hyr),e(_e,Uyr),e(_e,iC),e(iC,JMe),e(JMe,Jyr),e(iC,Yyr),e(iC,NY),e(NY,Kyr),e(iC,Zyr),e(_e,e8r),e(_e,dC),e(dC,YMe),e(YMe,o8r),e(dC,r8r),e(dC,qY),e(qY,t8r),e(dC,a8r),e(_e,n8r),e(_e,cC),e(cC,KMe),e(KMe,s8r),e(cC,l8r),e(cC,jY),e(jY,i8r),e(cC,d8r),e(_e,c8r),e(_e,fC),e(fC,ZMe),e(ZMe,f8r),e(fC,m8r),e(fC,DY),e(DY,g8r),e(fC,h8r),e(_e,p8r),e(_e,mC),e(mC,e4e),e(e4e,_8r),e(mC,u8r),e(mC,GY),e(GY,b8r),e(mC,v8r),e(_e,F8r),e(_e,gC),e(gC,o4e),e(o4e,T8r),e(gC,M8r),e(gC,OY),e(OY,E8r),e(gC,C8r),e(_e,w8r),e(_e,hC),e(hC,r4e),e(r4e,A8r),e(hC,L8r),e(hC,VY),e(VY,y8r),e(hC,x8r),e(_e,$8r),e(_e,pC),e(pC,t4e),e(t4e,k8r),e(pC,S8r),e(pC,XY),e(XY,R8r),e(pC,P8r),e(_e,B8r),e(_e,_C),e(_C,a4e),e(a4e,I8r),e(_C,N8r),e(_C,zY),e(zY,q8r),e(_C,j8r),e(_e,D8r),e(_e,uC),e(uC,n4e),e(n4e,G8r),e(uC,O8r),e(uC,QY),e(QY,V8r),e(uC,X8r),e(_e,z8r),e(_e,bC),e(bC,s4e),e(s4e,Q8r),e(bC,W8r),e(bC,WY),e(WY,H8r),e(bC,U8r),e(_e,J8r),e(_e,vC),e(vC,l4e),e(l4e,Y8r),e(vC,K8r),e(vC,HY),e(HY,Z8r),e(vC,e9r),e(_e,o9r),e(_e,FC),e(FC,i4e),e(i4e,r9r),e(FC,t9r),e(FC,UY),e(UY,a9r),e(FC,n9r),e(_e,s9r),e(_e,TC),e(TC,d4e),e(d4e,l9r),e(TC,i9r),e(TC,JY),e(JY,d9r),e(TC,c9r),e(Ir,f9r),M(MC,Ir,null),b(f,eXe,u),b(f,Ac,u),e(Ac,EC),e(EC,c4e),M(mx,c4e,null),e(Ac,m9r),e(Ac,f4e),e(f4e,g9r),b(f,oXe,u),b(f,dr,u),M(gx,dr,null),e(dr,h9r),e(dr,Lc),e(Lc,p9r),e(Lc,YY),e(YY,_9r),e(Lc,u9r),e(Lc,KY),e(KY,b9r),e(Lc,v9r),e(dr,F9r),e(dr,hx),e(hx,T9r),e(hx,m4e),e(m4e,M9r),e(hx,E9r),e(dr,C9r),e(dr,qt),M(px,qt,null),e(qt,w9r),e(qt,g4e),e(g4e,A9r),e(qt,L9r),e(qt,yc),e(yc,y9r),e(yc,h4e),e(h4e,x9r),e(yc,$9r),e(yc,ZY),e(ZY,k9r),e(yc,S9r),e(qt,R9r),M(CC,qt,null),e(dr,P9r),e(dr,Nr),M(_x,Nr,null),e(Nr,B9r),e(Nr,p4e),e(p4e,I9r),e(Nr,N9r),e(Nr,pn),e(pn,q9r),e(pn,_4e),e(_4e,j9r),e(pn,D9r),e(pn,u4e),e(u4e,G9r),e(pn,O9r),e(pn,b4e),e(b4e,V9r),e(pn,X9r),e(Nr,z9r),e(Nr,ux),e(ux,wC),e(wC,v4e),e(v4e,Q9r),e(wC,W9r),e(wC,eK),e(eK,H9r),e(wC,U9r),e(ux,J9r),e(ux,AC),e(AC,F4e),e(F4e,Y9r),e(AC,K9r),e(AC,oK),e(oK,Z9r),e(AC,exr),e(Nr,oxr),M(LC,Nr,null),b(f,rXe,u),b(f,xc,u),e(xc,yC),e(yC,T4e),M(bx,T4e,null),e(xc,rxr),e(xc,M4e),e(M4e,txr),b(f,tXe,u),b(f,cr,u),M(vx,cr,null),e(cr,axr),e(cr,$c),e($c,nxr),e($c,rK),e(rK,sxr),e($c,lxr),e($c,tK),e(tK,ixr),e($c,dxr),e(cr,cxr),e(cr,Fx),e(Fx,fxr),e(Fx,E4e),e(E4e,mxr),e(Fx,gxr),e(cr,hxr),e(cr,jt),M(Tx,jt,null),e(jt,pxr),e(jt,C4e),e(C4e,_xr),e(jt,uxr),e(jt,kc),e(kc,bxr),e(kc,w4e),e(w4e,vxr),e(kc,Fxr),e(kc,aK),e(aK,Txr),e(kc,Mxr),e(jt,Exr),M(xC,jt,null),e(cr,Cxr),e(cr,qr),M(Mx,qr,null),e(qr,wxr),e(qr,A4e),e(A4e,Axr),e(qr,Lxr),e(qr,_n),e(_n,yxr),e(_n,L4e),e(L4e,xxr),e(_n,$xr),e(_n,y4e),e(y4e,kxr),e(_n,Sxr),e(_n,x4e),e(x4e,Rxr),e(_n,Pxr),e(qr,Bxr),e(qr,$4e),e($4e,$C),e($C,k4e),e(k4e,Ixr),e($C,Nxr),e($C,nK),e(nK,qxr),e($C,jxr),e(qr,Dxr),M(kC,qr,null),b(f,aXe,u),b(f,Sc,u),e(Sc,SC),e(SC,S4e),M(Ex,S4e,null),e(Sc,Gxr),e(Sc,R4e),e(R4e,Oxr),b(f,nXe,u),b(f,fr,u),M(Cx,fr,null),e(fr,Vxr),e(fr,Rc),e(Rc,Xxr),e(Rc,sK),e(sK,zxr),e(Rc,Qxr),e(Rc,lK),e(lK,Wxr),e(Rc,Hxr),e(fr,Uxr),e(fr,wx),e(wx,Jxr),e(wx,P4e),e(P4e,Yxr),e(wx,Kxr),e(fr,Zxr),e(fr,Dt),M(Ax,Dt,null),e(Dt,e$r),e(Dt,B4e),e(B4e,o$r),e(Dt,r$r),e(Dt,Pc),e(Pc,t$r),e(Pc,I4e),e(I4e,a$r),e(Pc,n$r),e(Pc,iK),e(iK,s$r),e(Pc,l$r),e(Dt,i$r),M(RC,Dt,null),e(fr,d$r),e(fr,jr),M(Lx,jr,null),e(jr,c$r),e(jr,N4e),e(N4e,f$r),e(jr,m$r),e(jr,un),e(un,g$r),e(un,q4e),e(q4e,h$r),e(un,p$r),e(un,j4e),e(j4e,_$r),e(un,u$r),e(un,D4e),e(D4e,b$r),e(un,v$r),e(jr,F$r),e(jr,de),e(de,PC),e(PC,G4e),e(G4e,T$r),e(PC,M$r),e(PC,dK),e(dK,E$r),e(PC,C$r),e(de,w$r),e(de,BC),e(BC,O4e),e(O4e,A$r),e(BC,L$r),e(BC,cK),e(cK,y$r),e(BC,x$r),e(de,$$r),e(de,IC),e(IC,V4e),e(V4e,k$r),e(IC,S$r),e(IC,fK),e(fK,R$r),e(IC,P$r),e(de,B$r),e(de,NC),e(NC,X4e),e(X4e,I$r),e(NC,N$r),e(NC,mK),e(mK,q$r),e(NC,j$r),e(de,D$r),e(de,qC),e(qC,z4e),e(z4e,G$r),e(qC,O$r),e(qC,gK),e(gK,V$r),e(qC,X$r),e(de,z$r),e(de,jC),e(jC,Q4e),e(Q4e,Q$r),e(jC,W$r),e(jC,hK),e(hK,H$r),e(jC,U$r),e(de,J$r),e(de,DC),e(DC,W4e),e(W4e,Y$r),e(DC,K$r),e(DC,pK),e(pK,Z$r),e(DC,ekr),e(de,okr),e(de,GC),e(GC,H4e),e(H4e,rkr),e(GC,tkr),e(GC,_K),e(_K,akr),e(GC,nkr),e(de,skr),e(de,OC),e(OC,U4e),e(U4e,lkr),e(OC,ikr),e(OC,uK),e(uK,dkr),e(OC,ckr),e(de,fkr),e(de,VC),e(VC,J4e),e(J4e,mkr),e(VC,gkr),e(VC,bK),e(bK,hkr),e(VC,pkr),e(de,_kr),e(de,XC),e(XC,Y4e),e(Y4e,ukr),e(XC,bkr),e(XC,vK),e(vK,vkr),e(XC,Fkr),e(de,Tkr),e(de,zC),e(zC,K4e),e(K4e,Mkr),e(zC,Ekr),e(zC,FK),e(FK,Ckr),e(zC,wkr),e(de,Akr),e(de,QC),e(QC,Z4e),e(Z4e,Lkr),e(QC,ykr),e(QC,TK),e(TK,xkr),e(QC,$kr),e(de,kkr),e(de,WC),e(WC,eEe),e(eEe,Skr),e(WC,Rkr),e(WC,MK),e(MK,Pkr),e(WC,Bkr),e(de,Ikr),e(de,HC),e(HC,oEe),e(oEe,Nkr),e(HC,qkr),e(HC,EK),e(EK,jkr),e(HC,Dkr),e(de,Gkr),e(de,UC),e(UC,rEe),e(rEe,Okr),e(UC,Vkr),e(UC,CK),e(CK,Xkr),e(UC,zkr),e(de,Qkr),e(de,JC),e(JC,tEe),e(tEe,Wkr),e(JC,Hkr),e(JC,wK),e(wK,Ukr),e(JC,Jkr),e(de,Ykr),e(de,YC),e(YC,aEe),e(aEe,Kkr),e(YC,Zkr),e(YC,AK),e(AK,eSr),e(YC,oSr),e(de,rSr),e(de,KC),e(KC,nEe),e(nEe,tSr),e(KC,aSr),e(KC,LK),e(LK,nSr),e(KC,sSr),e(de,lSr),e(de,ZC),e(ZC,sEe),e(sEe,iSr),e(ZC,dSr),e(ZC,yK),e(yK,cSr),e(ZC,fSr),e(jr,mSr),M(e5,jr,null),b(f,sXe,u),b(f,Bc,u),e(Bc,o5),e(o5,lEe),M(yx,lEe,null),e(Bc,gSr),e(Bc,iEe),e(iEe,hSr),b(f,lXe,u),b(f,mr,u),M(xx,mr,null),e(mr,pSr),e(mr,Ic),e(Ic,_Sr),e(Ic,xK),e(xK,uSr),e(Ic,bSr),e(Ic,$K),e($K,vSr),e(Ic,FSr),e(mr,TSr),e(mr,$x),e($x,MSr),e($x,dEe),e(dEe,ESr),e($x,CSr),e(mr,wSr),e(mr,Gt),M(kx,Gt,null),e(Gt,ASr),e(Gt,cEe),e(cEe,LSr),e(Gt,ySr),e(Gt,Nc),e(Nc,xSr),e(Nc,fEe),e(fEe,$Sr),e(Nc,kSr),e(Nc,kK),e(kK,SSr),e(Nc,RSr),e(Gt,PSr),M(r5,Gt,null),e(mr,BSr),e(mr,Dr),M(Sx,Dr,null),e(Dr,ISr),e(Dr,mEe),e(mEe,NSr),e(Dr,qSr),e(Dr,bn),e(bn,jSr),e(bn,gEe),e(gEe,DSr),e(bn,GSr),e(bn,hEe),e(hEe,OSr),e(bn,VSr),e(bn,pEe),e(pEe,XSr),e(bn,zSr),e(Dr,QSr),e(Dr,ce),e(ce,t5),e(t5,_Ee),e(_Ee,WSr),e(t5,HSr),e(t5,SK),e(SK,USr),e(t5,JSr),e(ce,YSr),e(ce,a5),e(a5,uEe),e(uEe,KSr),e(a5,ZSr),e(a5,RK),e(RK,eRr),e(a5,oRr),e(ce,rRr),e(ce,n5),e(n5,bEe),e(bEe,tRr),e(n5,aRr),e(n5,PK),e(PK,nRr),e(n5,sRr),e(ce,lRr),e(ce,s5),e(s5,vEe),e(vEe,iRr),e(s5,dRr),e(s5,BK),e(BK,cRr),e(s5,fRr),e(ce,mRr),e(ce,l5),e(l5,FEe),e(FEe,gRr),e(l5,hRr),e(l5,IK),e(IK,pRr),e(l5,_Rr),e(ce,uRr),e(ce,i5),e(i5,TEe),e(TEe,bRr),e(i5,vRr),e(i5,NK),e(NK,FRr),e(i5,TRr),e(ce,MRr),e(ce,d5),e(d5,MEe),e(MEe,ERr),e(d5,CRr),e(d5,qK),e(qK,wRr),e(d5,ARr),e(ce,LRr),e(ce,c5),e(c5,EEe),e(EEe,yRr),e(c5,xRr),e(c5,jK),e(jK,$Rr),e(c5,kRr),e(ce,SRr),e(ce,f5),e(f5,CEe),e(CEe,RRr),e(f5,PRr),e(f5,DK),e(DK,BRr),e(f5,IRr),e(ce,NRr),e(ce,m5),e(m5,wEe),e(wEe,qRr),e(m5,jRr),e(m5,GK),e(GK,DRr),e(m5,GRr),e(ce,ORr),e(ce,g5),e(g5,AEe),e(AEe,VRr),e(g5,XRr),e(g5,OK),e(OK,zRr),e(g5,QRr),e(ce,WRr),e(ce,h5),e(h5,LEe),e(LEe,HRr),e(h5,URr),e(h5,VK),e(VK,JRr),e(h5,YRr),e(ce,KRr),e(ce,p5),e(p5,yEe),e(yEe,ZRr),e(p5,ePr),e(p5,XK),e(XK,oPr),e(p5,rPr),e(ce,tPr),e(ce,_5),e(_5,xEe),e(xEe,aPr),e(_5,nPr),e(_5,zK),e(zK,sPr),e(_5,lPr),e(ce,iPr),e(ce,u5),e(u5,$Ee),e($Ee,dPr),e(u5,cPr),e(u5,QK),e(QK,fPr),e(u5,mPr),e(ce,gPr),e(ce,b5),e(b5,kEe),e(kEe,hPr),e(b5,pPr),e(b5,WK),e(WK,_Pr),e(b5,uPr),e(ce,bPr),e(ce,v5),e(v5,SEe),e(SEe,vPr),e(v5,FPr),e(v5,HK),e(HK,TPr),e(v5,MPr),e(ce,EPr),e(ce,F5),e(F5,REe),e(REe,CPr),e(F5,wPr),e(F5,UK),e(UK,APr),e(F5,LPr),e(ce,yPr),e(ce,T5),e(T5,PEe),e(PEe,xPr),e(T5,$Pr),e(T5,JK),e(JK,kPr),e(T5,SPr),e(ce,RPr),e(ce,M5),e(M5,BEe),e(BEe,PPr),e(M5,BPr),e(M5,YK),e(YK,IPr),e(M5,NPr),e(Dr,qPr),M(E5,Dr,null),b(f,iXe,u),b(f,qc,u),e(qc,C5),e(C5,IEe),M(Rx,IEe,null),e(qc,jPr),e(qc,NEe),e(NEe,DPr),b(f,dXe,u),b(f,gr,u),M(Px,gr,null),e(gr,GPr),e(gr,jc),e(jc,OPr),e(jc,KK),e(KK,VPr),e(jc,XPr),e(jc,ZK),e(ZK,zPr),e(jc,QPr),e(gr,WPr),e(gr,Bx),e(Bx,HPr),e(Bx,qEe),e(qEe,UPr),e(Bx,JPr),e(gr,YPr),e(gr,Ot),M(Ix,Ot,null),e(Ot,KPr),e(Ot,jEe),e(jEe,ZPr),e(Ot,eBr),e(Ot,Dc),e(Dc,oBr),e(Dc,DEe),e(DEe,rBr),e(Dc,tBr),e(Dc,eZ),e(eZ,aBr),e(Dc,nBr),e(Ot,sBr),M(w5,Ot,null),e(gr,lBr),e(gr,Gr),M(Nx,Gr,null),e(Gr,iBr),e(Gr,GEe),e(GEe,dBr),e(Gr,cBr),e(Gr,vn),e(vn,fBr),e(vn,OEe),e(OEe,mBr),e(vn,gBr),e(vn,VEe),e(VEe,hBr),e(vn,pBr),e(vn,XEe),e(XEe,_Br),e(vn,uBr),e(Gr,bBr),e(Gr,zEe),e(zEe,A5),e(A5,QEe),e(QEe,vBr),e(A5,FBr),e(A5,oZ),e(oZ,TBr),e(A5,MBr),e(Gr,EBr),M(L5,Gr,null),b(f,cXe,u),b(f,Gc,u),e(Gc,y5),e(y5,WEe),M(qx,WEe,null),e(Gc,CBr),e(Gc,HEe),e(HEe,wBr),b(f,fXe,u),b(f,hr,u),M(jx,hr,null),e(hr,ABr),e(hr,Oc),e(Oc,LBr),e(Oc,rZ),e(rZ,yBr),e(Oc,xBr),e(Oc,tZ),e(tZ,$Br),e(Oc,kBr),e(hr,SBr),e(hr,Dx),e(Dx,RBr),e(Dx,UEe),e(UEe,PBr),e(Dx,BBr),e(hr,IBr),e(hr,Vt),M(Gx,Vt,null),e(Vt,NBr),e(Vt,JEe),e(JEe,qBr),e(Vt,jBr),e(Vt,Vc),e(Vc,DBr),e(Vc,YEe),e(YEe,GBr),e(Vc,OBr),e(Vc,aZ),e(aZ,VBr),e(Vc,XBr),e(Vt,zBr),M(x5,Vt,null),e(hr,QBr),e(hr,Or),M(Ox,Or,null),e(Or,WBr),e(Or,KEe),e(KEe,HBr),e(Or,UBr),e(Or,Fn),e(Fn,JBr),e(Fn,ZEe),e(ZEe,YBr),e(Fn,KBr),e(Fn,eCe),e(eCe,ZBr),e(Fn,eIr),e(Fn,oCe),e(oCe,oIr),e(Fn,rIr),e(Or,tIr),e(Or,rCe),e(rCe,$5),e($5,tCe),e(tCe,aIr),e($5,nIr),e($5,nZ),e(nZ,sIr),e($5,lIr),e(Or,iIr),M(k5,Or,null),b(f,mXe,u),b(f,Xc,u),e(Xc,S5),e(S5,aCe),M(Vx,aCe,null),e(Xc,dIr),e(Xc,nCe),e(nCe,cIr),b(f,gXe,u),b(f,pr,u),M(Xx,pr,null),e(pr,fIr),e(pr,zc),e(zc,mIr),e(zc,sZ),e(sZ,gIr),e(zc,hIr),e(zc,lZ),e(lZ,pIr),e(zc,_Ir),e(pr,uIr),e(pr,zx),e(zx,bIr),e(zx,sCe),e(sCe,vIr),e(zx,FIr),e(pr,TIr),e(pr,Xt),M(Qx,Xt,null),e(Xt,MIr),e(Xt,lCe),e(lCe,EIr),e(Xt,CIr),e(Xt,Qc),e(Qc,wIr),e(Qc,iCe),e(iCe,AIr),e(Qc,LIr),e(Qc,iZ),e(iZ,yIr),e(Qc,xIr),e(Xt,$Ir),M(R5,Xt,null),e(pr,kIr),e(pr,Vr),M(Wx,Vr,null),e(Vr,SIr),e(Vr,dCe),e(dCe,RIr),e(Vr,PIr),e(Vr,Tn),e(Tn,BIr),e(Tn,cCe),e(cCe,IIr),e(Tn,NIr),e(Tn,fCe),e(fCe,qIr),e(Tn,jIr),e(Tn,mCe),e(mCe,DIr),e(Tn,GIr),e(Vr,OIr),e(Vr,oe),e(oe,P5),e(P5,gCe),e(gCe,VIr),e(P5,XIr),e(P5,dZ),e(dZ,zIr),e(P5,QIr),e(oe,WIr),e(oe,B5),e(B5,hCe),e(hCe,HIr),e(B5,UIr),e(B5,cZ),e(cZ,JIr),e(B5,YIr),e(oe,KIr),e(oe,I5),e(I5,pCe),e(pCe,ZIr),e(I5,eNr),e(I5,fZ),e(fZ,oNr),e(I5,rNr),e(oe,tNr),e(oe,N5),e(N5,_Ce),e(_Ce,aNr),e(N5,nNr),e(N5,mZ),e(mZ,sNr),e(N5,lNr),e(oe,iNr),e(oe,q5),e(q5,uCe),e(uCe,dNr),e(q5,cNr),e(q5,gZ),e(gZ,fNr),e(q5,mNr),e(oe,gNr),e(oe,j5),e(j5,bCe),e(bCe,hNr),e(j5,pNr),e(j5,hZ),e(hZ,_Nr),e(j5,uNr),e(oe,bNr),e(oe,D5),e(D5,vCe),e(vCe,vNr),e(D5,FNr),e(D5,pZ),e(pZ,TNr),e(D5,MNr),e(oe,ENr),e(oe,G5),e(G5,FCe),e(FCe,CNr),e(G5,wNr),e(G5,_Z),e(_Z,ANr),e(G5,LNr),e(oe,yNr),e(oe,O5),e(O5,TCe),e(TCe,xNr),e(O5,$Nr),e(O5,uZ),e(uZ,kNr),e(O5,SNr),e(oe,RNr),e(oe,V5),e(V5,MCe),e(MCe,PNr),e(V5,BNr),e(V5,bZ),e(bZ,INr),e(V5,NNr),e(oe,qNr),e(oe,X5),e(X5,ECe),e(ECe,jNr),e(X5,DNr),e(X5,vZ),e(vZ,GNr),e(X5,ONr),e(oe,VNr),e(oe,z5),e(z5,CCe),e(CCe,XNr),e(z5,zNr),e(z5,FZ),e(FZ,QNr),e(z5,WNr),e(oe,HNr),e(oe,Q5),e(Q5,wCe),e(wCe,UNr),e(Q5,JNr),e(Q5,TZ),e(TZ,YNr),e(Q5,KNr),e(oe,ZNr),e(oe,W5),e(W5,ACe),e(ACe,eqr),e(W5,oqr),e(W5,MZ),e(MZ,rqr),e(W5,tqr),e(oe,aqr),e(oe,H5),e(H5,LCe),e(LCe,nqr),e(H5,sqr),e(H5,EZ),e(EZ,lqr),e(H5,iqr),e(oe,dqr),e(oe,U5),e(U5,yCe),e(yCe,cqr),e(U5,fqr),e(U5,CZ),e(CZ,mqr),e(U5,gqr),e(oe,hqr),e(oe,J5),e(J5,xCe),e(xCe,pqr),e(J5,_qr),e(J5,wZ),e(wZ,uqr),e(J5,bqr),e(oe,vqr),e(oe,Y5),e(Y5,$Ce),e($Ce,Fqr),e(Y5,Tqr),e(Y5,AZ),e(AZ,Mqr),e(Y5,Eqr),e(oe,Cqr),e(oe,K5),e(K5,kCe),e(kCe,wqr),e(K5,Aqr),e(K5,LZ),e(LZ,Lqr),e(K5,yqr),e(oe,xqr),e(oe,Z5),e(Z5,SCe),e(SCe,$qr),e(Z5,kqr),e(Z5,yZ),e(yZ,Sqr),e(Z5,Rqr),e(oe,Pqr),e(oe,e3),e(e3,RCe),e(RCe,Bqr),e(e3,Iqr),e(e3,xZ),e(xZ,Nqr),e(e3,qqr),e(oe,jqr),e(oe,o3),e(o3,PCe),e(PCe,Dqr),e(o3,Gqr),e(o3,$Z),e($Z,Oqr),e(o3,Vqr),e(oe,Xqr),e(oe,r3),e(r3,BCe),e(BCe,zqr),e(r3,Qqr),e(r3,kZ),e(kZ,Wqr),e(r3,Hqr),e(oe,Uqr),e(oe,t3),e(t3,ICe),e(ICe,Jqr),e(t3,Yqr),e(t3,SZ),e(SZ,Kqr),e(t3,Zqr),e(oe,ejr),e(oe,a3),e(a3,NCe),e(NCe,ojr),e(a3,rjr),e(a3,RZ),e(RZ,tjr),e(a3,ajr),e(oe,njr),e(oe,n3),e(n3,qCe),e(qCe,sjr),e(n3,ljr),e(n3,PZ),e(PZ,ijr),e(n3,djr),e(oe,cjr),e(oe,s3),e(s3,jCe),e(jCe,fjr),e(s3,mjr),e(s3,BZ),e(BZ,gjr),e(s3,hjr),e(Vr,pjr),M(l3,Vr,null),b(f,hXe,u),b(f,Wc,u),e(Wc,i3),e(i3,DCe),M(Hx,DCe,null),e(Wc,_jr),e(Wc,GCe),e(GCe,ujr),b(f,pXe,u),b(f,_r,u),M(Ux,_r,null),e(_r,bjr),e(_r,Hc),e(Hc,vjr),e(Hc,IZ),e(IZ,Fjr),e(Hc,Tjr),e(Hc,NZ),e(NZ,Mjr),e(Hc,Ejr),e(_r,Cjr),e(_r,Jx),e(Jx,wjr),e(Jx,OCe),e(OCe,Ajr),e(Jx,Ljr),e(_r,yjr),e(_r,zt),M(Yx,zt,null),e(zt,xjr),e(zt,VCe),e(VCe,$jr),e(zt,kjr),e(zt,Uc),e(Uc,Sjr),e(Uc,XCe),e(XCe,Rjr),e(Uc,Pjr),e(Uc,qZ),e(qZ,Bjr),e(Uc,Ijr),e(zt,Njr),M(d3,zt,null),e(_r,qjr),e(_r,Xr),M(Kx,Xr,null),e(Xr,jjr),e(Xr,zCe),e(zCe,Djr),e(Xr,Gjr),e(Xr,Mn),e(Mn,Ojr),e(Mn,QCe),e(QCe,Vjr),e(Mn,Xjr),e(Mn,WCe),e(WCe,zjr),e(Mn,Qjr),e(Mn,HCe),e(HCe,Wjr),e(Mn,Hjr),e(Xr,Ujr),e(Xr,xe),e(xe,c3),e(c3,UCe),e(UCe,Jjr),e(c3,Yjr),e(c3,jZ),e(jZ,Kjr),e(c3,Zjr),e(xe,eDr),e(xe,f3),e(f3,JCe),e(JCe,oDr),e(f3,rDr),e(f3,DZ),e(DZ,tDr),e(f3,aDr),e(xe,nDr),e(xe,m3),e(m3,YCe),e(YCe,sDr),e(m3,lDr),e(m3,GZ),e(GZ,iDr),e(m3,dDr),e(xe,cDr),e(xe,g3),e(g3,KCe),e(KCe,fDr),e(g3,mDr),e(g3,OZ),e(OZ,gDr),e(g3,hDr),e(xe,pDr),e(xe,h3),e(h3,ZCe),e(ZCe,_Dr),e(h3,uDr),e(h3,VZ),e(VZ,bDr),e(h3,vDr),e(xe,FDr),e(xe,p3),e(p3,e5e),e(e5e,TDr),e(p3,MDr),e(p3,XZ),e(XZ,EDr),e(p3,CDr),e(xe,wDr),e(xe,_3),e(_3,o5e),e(o5e,ADr),e(_3,LDr),e(_3,zZ),e(zZ,yDr),e(_3,xDr),e(xe,$Dr),e(xe,u3),e(u3,r5e),e(r5e,kDr),e(u3,SDr),e(u3,QZ),e(QZ,RDr),e(u3,PDr),e(xe,BDr),e(xe,b3),e(b3,t5e),e(t5e,IDr),e(b3,NDr),e(b3,WZ),e(WZ,qDr),e(b3,jDr),e(xe,DDr),e(xe,v3),e(v3,a5e),e(a5e,GDr),e(v3,ODr),e(v3,HZ),e(HZ,VDr),e(v3,XDr),e(Xr,zDr),M(F3,Xr,null),b(f,_Xe,u),b(f,Jc,u),e(Jc,T3),e(T3,n5e),M(Zx,n5e,null),e(Jc,QDr),e(Jc,s5e),e(s5e,WDr),b(f,uXe,u),b(f,ur,u),M(e$,ur,null),e(ur,HDr),e(ur,Yc),e(Yc,UDr),e(Yc,UZ),e(UZ,JDr),e(Yc,YDr),e(Yc,JZ),e(JZ,KDr),e(Yc,ZDr),e(ur,eGr),e(ur,o$),e(o$,oGr),e(o$,l5e),e(l5e,rGr),e(o$,tGr),e(ur,aGr),e(ur,Qt),M(r$,Qt,null),e(Qt,nGr),e(Qt,i5e),e(i5e,sGr),e(Qt,lGr),e(Qt,Kc),e(Kc,iGr),e(Kc,d5e),e(d5e,dGr),e(Kc,cGr),e(Kc,YZ),e(YZ,fGr),e(Kc,mGr),e(Qt,gGr),M(M3,Qt,null),e(ur,hGr),e(ur,zr),M(t$,zr,null),e(zr,pGr),e(zr,c5e),e(c5e,_Gr),e(zr,uGr),e(zr,En),e(En,bGr),e(En,f5e),e(f5e,vGr),e(En,FGr),e(En,m5e),e(m5e,TGr),e(En,MGr),e(En,g5e),e(g5e,EGr),e(En,CGr),e(zr,wGr),e(zr,Ee),e(Ee,E3),e(E3,h5e),e(h5e,AGr),e(E3,LGr),e(E3,KZ),e(KZ,yGr),e(E3,xGr),e(Ee,$Gr),e(Ee,C3),e(C3,p5e),e(p5e,kGr),e(C3,SGr),e(C3,ZZ),e(ZZ,RGr),e(C3,PGr),e(Ee,BGr),e(Ee,w3),e(w3,_5e),e(_5e,IGr),e(w3,NGr),e(w3,eee),e(eee,qGr),e(w3,jGr),e(Ee,DGr),e(Ee,A3),e(A3,u5e),e(u5e,GGr),e(A3,OGr),e(A3,oee),e(oee,VGr),e(A3,XGr),e(Ee,zGr),e(Ee,L3),e(L3,b5e),e(b5e,QGr),e(L3,WGr),e(L3,ree),e(ree,HGr),e(L3,UGr),e(Ee,JGr),e(Ee,y3),e(y3,v5e),e(v5e,YGr),e(y3,KGr),e(y3,tee),e(tee,ZGr),e(y3,eOr),e(Ee,oOr),e(Ee,x3),e(x3,F5e),e(F5e,rOr),e(x3,tOr),e(x3,aee),e(aee,aOr),e(x3,nOr),e(Ee,sOr),e(Ee,$3),e($3,T5e),e(T5e,lOr),e($3,iOr),e($3,nee),e(nee,dOr),e($3,cOr),e(Ee,fOr),e(Ee,k3),e(k3,M5e),e(M5e,mOr),e(k3,gOr),e(k3,see),e(see,hOr),e(k3,pOr),e(Ee,_Or),e(Ee,S3),e(S3,E5e),e(E5e,uOr),e(S3,bOr),e(S3,lee),e(lee,vOr),e(S3,FOr),e(Ee,TOr),e(Ee,R3),e(R3,C5e),e(C5e,MOr),e(R3,EOr),e(R3,iee),e(iee,COr),e(R3,wOr),e(Ee,AOr),e(Ee,P3),e(P3,w5e),e(w5e,LOr),e(P3,yOr),e(P3,dee),e(dee,xOr),e(P3,$Or),e(Ee,kOr),e(Ee,B3),e(B3,A5e),e(A5e,SOr),e(B3,ROr),e(B3,cee),e(cee,POr),e(B3,BOr),e(zr,IOr),M(I3,zr,null),b(f,bXe,u),b(f,Zc,u),e(Zc,N3),e(N3,L5e),M(a$,L5e,null),e(Zc,NOr),e(Zc,y5e),e(y5e,qOr),b(f,vXe,u),b(f,br,u),M(n$,br,null),e(br,jOr),e(br,ef),e(ef,DOr),e(ef,fee),e(fee,GOr),e(ef,OOr),e(ef,mee),e(mee,VOr),e(ef,XOr),e(br,zOr),e(br,s$),e(s$,QOr),e(s$,x5e),e(x5e,WOr),e(s$,HOr),e(br,UOr),e(br,Wt),M(l$,Wt,null),e(Wt,JOr),e(Wt,$5e),e($5e,YOr),e(Wt,KOr),e(Wt,of),e(of,ZOr),e(of,k5e),e(k5e,eVr),e(of,oVr),e(of,gee),e(gee,rVr),e(of,tVr),e(Wt,aVr),M(q3,Wt,null),e(br,nVr),e(br,Qr),M(i$,Qr,null),e(Qr,sVr),e(Qr,S5e),e(S5e,lVr),e(Qr,iVr),e(Qr,Cn),e(Cn,dVr),e(Cn,R5e),e(R5e,cVr),e(Cn,fVr),e(Cn,P5e),e(P5e,mVr),e(Cn,gVr),e(Cn,B5e),e(B5e,hVr),e(Cn,pVr),e(Qr,_Vr),e(Qr,$e),e($e,j3),e(j3,I5e),e(I5e,uVr),e(j3,bVr),e(j3,hee),e(hee,vVr),e(j3,FVr),e($e,TVr),e($e,D3),e(D3,N5e),e(N5e,MVr),e(D3,EVr),e(D3,pee),e(pee,CVr),e(D3,wVr),e($e,AVr),e($e,G3),e(G3,q5e),e(q5e,LVr),e(G3,yVr),e(G3,_ee),e(_ee,xVr),e(G3,$Vr),e($e,kVr),e($e,O3),e(O3,j5e),e(j5e,SVr),e(O3,RVr),e(O3,uee),e(uee,PVr),e(O3,BVr),e($e,IVr),e($e,V3),e(V3,D5e),e(D5e,NVr),e(V3,qVr),e(V3,bee),e(bee,jVr),e(V3,DVr),e($e,GVr),e($e,X3),e(X3,G5e),e(G5e,OVr),e(X3,VVr),e(X3,vee),e(vee,XVr),e(X3,zVr),e($e,QVr),e($e,z3),e(z3,O5e),e(O5e,WVr),e(z3,HVr),e(z3,Fee),e(Fee,UVr),e(z3,JVr),e($e,YVr),e($e,Q3),e(Q3,V5e),e(V5e,KVr),e(Q3,ZVr),e(Q3,Tee),e(Tee,eXr),e(Q3,oXr),e($e,rXr),e($e,W3),e(W3,X5e),e(X5e,tXr),e(W3,aXr),e(W3,Mee),e(Mee,nXr),e(W3,sXr),e($e,lXr),e($e,H3),e(H3,z5e),e(z5e,iXr),e(H3,dXr),e(H3,Eee),e(Eee,cXr),e(H3,fXr),e(Qr,mXr),M(U3,Qr,null),b(f,FXe,u),b(f,rf,u),e(rf,J3),e(J3,Q5e),M(d$,Q5e,null),e(rf,gXr),e(rf,W5e),e(W5e,hXr),b(f,TXe,u),b(f,vr,u),M(c$,vr,null),e(vr,pXr),e(vr,tf),e(tf,_Xr),e(tf,Cee),e(Cee,uXr),e(tf,bXr),e(tf,wee),e(wee,vXr),e(tf,FXr),e(vr,TXr),e(vr,f$),e(f$,MXr),e(f$,H5e),e(H5e,EXr),e(f$,CXr),e(vr,wXr),e(vr,Ht),M(m$,Ht,null),e(Ht,AXr),e(Ht,U5e),e(U5e,LXr),e(Ht,yXr),e(Ht,af),e(af,xXr),e(af,J5e),e(J5e,$Xr),e(af,kXr),e(af,Aee),e(Aee,SXr),e(af,RXr),e(Ht,PXr),M(Y3,Ht,null),e(vr,BXr),e(vr,Wr),M(g$,Wr,null),e(Wr,IXr),e(Wr,Y5e),e(Y5e,NXr),e(Wr,qXr),e(Wr,wn),e(wn,jXr),e(wn,K5e),e(K5e,DXr),e(wn,GXr),e(wn,Z5e),e(Z5e,OXr),e(wn,VXr),e(wn,e3e),e(e3e,XXr),e(wn,zXr),e(Wr,QXr),e(Wr,ke),e(ke,K3),e(K3,o3e),e(o3e,WXr),e(K3,HXr),e(K3,Lee),e(Lee,UXr),e(K3,JXr),e(ke,YXr),e(ke,Z3),e(Z3,r3e),e(r3e,KXr),e(Z3,ZXr),e(Z3,yee),e(yee,ezr),e(Z3,ozr),e(ke,rzr),e(ke,e0),e(e0,t3e),e(t3e,tzr),e(e0,azr),e(e0,xee),e(xee,nzr),e(e0,szr),e(ke,lzr),e(ke,o0),e(o0,a3e),e(a3e,izr),e(o0,dzr),e(o0,$ee),e($ee,czr),e(o0,fzr),e(ke,mzr),e(ke,r0),e(r0,n3e),e(n3e,gzr),e(r0,hzr),e(r0,kee),e(kee,pzr),e(r0,_zr),e(ke,uzr),e(ke,t0),e(t0,s3e),e(s3e,bzr),e(t0,vzr),e(t0,See),e(See,Fzr),e(t0,Tzr),e(ke,Mzr),e(ke,a0),e(a0,l3e),e(l3e,Ezr),e(a0,Czr),e(a0,Ree),e(Ree,wzr),e(a0,Azr),e(ke,Lzr),e(ke,n0),e(n0,i3e),e(i3e,yzr),e(n0,xzr),e(n0,Pee),e(Pee,$zr),e(n0,kzr),e(ke,Szr),e(ke,s0),e(s0,d3e),e(d3e,Rzr),e(s0,Pzr),e(s0,Bee),e(Bee,Bzr),e(s0,Izr),e(ke,Nzr),e(ke,l0),e(l0,c3e),e(c3e,qzr),e(l0,jzr),e(l0,Iee),e(Iee,Dzr),e(l0,Gzr),e(Wr,Ozr),M(i0,Wr,null),b(f,MXe,u),b(f,nf,u),e(nf,d0),e(d0,f3e),M(h$,f3e,null),e(nf,Vzr),e(nf,m3e),e(m3e,Xzr),b(f,EXe,u),b(f,Fr,u),M(p$,Fr,null),e(Fr,zzr),e(Fr,sf),e(sf,Qzr),e(sf,Nee),e(Nee,Wzr),e(sf,Hzr),e(sf,qee),e(qee,Uzr),e(sf,Jzr),e(Fr,Yzr),e(Fr,_$),e(_$,Kzr),e(_$,g3e),e(g3e,Zzr),e(_$,eQr),e(Fr,oQr),e(Fr,Ut),M(u$,Ut,null),e(Ut,rQr),e(Ut,h3e),e(h3e,tQr),e(Ut,aQr),e(Ut,lf),e(lf,nQr),e(lf,p3e),e(p3e,sQr),e(lf,lQr),e(lf,jee),e(jee,iQr),e(lf,dQr),e(Ut,cQr),M(c0,Ut,null),e(Fr,fQr),e(Fr,Hr),M(b$,Hr,null),e(Hr,mQr),e(Hr,_3e),e(_3e,gQr),e(Hr,hQr),e(Hr,An),e(An,pQr),e(An,u3e),e(u3e,_Qr),e(An,uQr),e(An,b3e),e(b3e,bQr),e(An,vQr),e(An,v3e),e(v3e,FQr),e(An,TQr),e(Hr,MQr),e(Hr,Se),e(Se,f0),e(f0,F3e),e(F3e,EQr),e(f0,CQr),e(f0,Dee),e(Dee,wQr),e(f0,AQr),e(Se,LQr),e(Se,m0),e(m0,T3e),e(T3e,yQr),e(m0,xQr),e(m0,Gee),e(Gee,$Qr),e(m0,kQr),e(Se,SQr),e(Se,g0),e(g0,M3e),e(M3e,RQr),e(g0,PQr),e(g0,Oee),e(Oee,BQr),e(g0,IQr),e(Se,NQr),e(Se,h0),e(h0,E3e),e(E3e,qQr),e(h0,jQr),e(h0,Vee),e(Vee,DQr),e(h0,GQr),e(Se,OQr),e(Se,p0),e(p0,C3e),e(C3e,VQr),e(p0,XQr),e(p0,Xee),e(Xee,zQr),e(p0,QQr),e(Se,WQr),e(Se,_0),e(_0,w3e),e(w3e,HQr),e(_0,UQr),e(_0,zee),e(zee,JQr),e(_0,YQr),e(Se,KQr),e(Se,u0),e(u0,A3e),e(A3e,ZQr),e(u0,eWr),e(u0,Qee),e(Qee,oWr),e(u0,rWr),e(Se,tWr),e(Se,b0),e(b0,L3e),e(L3e,aWr),e(b0,nWr),e(b0,Wee),e(Wee,sWr),e(b0,lWr),e(Se,iWr),e(Se,v0),e(v0,y3e),e(y3e,dWr),e(v0,cWr),e(v0,Hee),e(Hee,fWr),e(v0,mWr),e(Se,gWr),e(Se,F0),e(F0,x3e),e(x3e,hWr),e(F0,pWr),e(F0,Uee),e(Uee,_Wr),e(F0,uWr),e(Hr,bWr),M(T0,Hr,null),b(f,CXe,u),b(f,df,u),e(df,M0),e(M0,$3e),M(v$,$3e,null),e(df,vWr),e(df,k3e),e(k3e,FWr),b(f,wXe,u),b(f,Tr,u),M(F$,Tr,null),e(Tr,TWr),e(Tr,cf),e(cf,MWr),e(cf,Jee),e(Jee,EWr),e(cf,CWr),e(cf,Yee),e(Yee,wWr),e(cf,AWr),e(Tr,LWr),e(Tr,T$),e(T$,yWr),e(T$,S3e),e(S3e,xWr),e(T$,$Wr),e(Tr,kWr),e(Tr,Jt),M(M$,Jt,null),e(Jt,SWr),e(Jt,R3e),e(R3e,RWr),e(Jt,PWr),e(Jt,ff),e(ff,BWr),e(ff,P3e),e(P3e,IWr),e(ff,NWr),e(ff,Kee),e(Kee,qWr),e(ff,jWr),e(Jt,DWr),M(E0,Jt,null),e(Tr,GWr),e(Tr,Ur),M(E$,Ur,null),e(Ur,OWr),e(Ur,B3e),e(B3e,VWr),e(Ur,XWr),e(Ur,Ln),e(Ln,zWr),e(Ln,I3e),e(I3e,QWr),e(Ln,WWr),e(Ln,N3e),e(N3e,HWr),e(Ln,UWr),e(Ln,q3e),e(q3e,JWr),e(Ln,YWr),e(Ur,KWr),e(Ur,Re),e(Re,C0),e(C0,j3e),e(j3e,ZWr),e(C0,eHr),e(C0,Zee),e(Zee,oHr),e(C0,rHr),e(Re,tHr),e(Re,w0),e(w0,D3e),e(D3e,aHr),e(w0,nHr),e(w0,eoe),e(eoe,sHr),e(w0,lHr),e(Re,iHr),e(Re,A0),e(A0,G3e),e(G3e,dHr),e(A0,cHr),e(A0,ooe),e(ooe,fHr),e(A0,mHr),e(Re,gHr),e(Re,L0),e(L0,O3e),e(O3e,hHr),e(L0,pHr),e(L0,roe),e(roe,_Hr),e(L0,uHr),e(Re,bHr),e(Re,y0),e(y0,V3e),e(V3e,vHr),e(y0,FHr),e(y0,toe),e(toe,THr),e(y0,MHr),e(Re,EHr),e(Re,x0),e(x0,X3e),e(X3e,CHr),e(x0,wHr),e(x0,aoe),e(aoe,AHr),e(x0,LHr),e(Re,yHr),e(Re,$0),e($0,z3e),e(z3e,xHr),e($0,$Hr),e($0,noe),e(noe,kHr),e($0,SHr),e(Re,RHr),e(Re,k0),e(k0,Q3e),e(Q3e,PHr),e(k0,BHr),e(k0,soe),e(soe,IHr),e(k0,NHr),e(Re,qHr),e(Re,S0),e(S0,W3e),e(W3e,jHr),e(S0,DHr),e(S0,loe),e(loe,GHr),e(S0,OHr),e(Re,VHr),e(Re,R0),e(R0,H3e),e(H3e,XHr),e(R0,zHr),e(R0,ioe),e(ioe,QHr),e(R0,WHr),e(Ur,HHr),M(P0,Ur,null),b(f,AXe,u),b(f,mf,u),e(mf,B0),e(B0,U3e),M(C$,U3e,null),e(mf,UHr),e(mf,J3e),e(J3e,JHr),b(f,LXe,u),b(f,Mr,u),M(w$,Mr,null),e(Mr,YHr),e(Mr,gf),e(gf,KHr),e(gf,doe),e(doe,ZHr),e(gf,eUr),e(gf,coe),e(coe,oUr),e(gf,rUr),e(Mr,tUr),e(Mr,A$),e(A$,aUr),e(A$,Y3e),e(Y3e,nUr),e(A$,sUr),e(Mr,lUr),e(Mr,Yt),M(L$,Yt,null),e(Yt,iUr),e(Yt,K3e),e(K3e,dUr),e(Yt,cUr),e(Yt,hf),e(hf,fUr),e(hf,Z3e),e(Z3e,mUr),e(hf,gUr),e(hf,foe),e(foe,hUr),e(hf,pUr),e(Yt,_Ur),M(I0,Yt,null),e(Mr,uUr),e(Mr,Jr),M(y$,Jr,null),e(Jr,bUr),e(Jr,e0e),e(e0e,vUr),e(Jr,FUr),e(Jr,yn),e(yn,TUr),e(yn,o0e),e(o0e,MUr),e(yn,EUr),e(yn,r0e),e(r0e,CUr),e(yn,wUr),e(yn,t0e),e(t0e,AUr),e(yn,LUr),e(Jr,yUr),e(Jr,Ve),e(Ve,N0),e(N0,a0e),e(a0e,xUr),e(N0,$Ur),e(N0,moe),e(moe,kUr),e(N0,SUr),e(Ve,RUr),e(Ve,q0),e(q0,n0e),e(n0e,PUr),e(q0,BUr),e(q0,goe),e(goe,IUr),e(q0,NUr),e(Ve,qUr),e(Ve,j0),e(j0,s0e),e(s0e,jUr),e(j0,DUr),e(j0,hoe),e(hoe,GUr),e(j0,OUr),e(Ve,VUr),e(Ve,D0),e(D0,l0e),e(l0e,XUr),e(D0,zUr),e(D0,poe),e(poe,QUr),e(D0,WUr),e(Ve,HUr),e(Ve,G0),e(G0,i0e),e(i0e,UUr),e(G0,JUr),e(G0,_oe),e(_oe,YUr),e(G0,KUr),e(Ve,ZUr),e(Ve,O0),e(O0,d0e),e(d0e,eJr),e(O0,oJr),e(O0,uoe),e(uoe,rJr),e(O0,tJr),e(Ve,aJr),e(Ve,V0),e(V0,c0e),e(c0e,nJr),e(V0,sJr),e(V0,boe),e(boe,lJr),e(V0,iJr),e(Ve,dJr),e(Ve,X0),e(X0,f0e),e(f0e,cJr),e(X0,fJr),e(X0,voe),e(voe,mJr),e(X0,gJr),e(Jr,hJr),M(z0,Jr,null),b(f,yXe,u),b(f,pf,u),e(pf,Q0),e(Q0,m0e),M(x$,m0e,null),e(pf,pJr),e(pf,g0e),e(g0e,_Jr),b(f,xXe,u),b(f,Er,u),M($$,Er,null),e(Er,uJr),e(Er,_f),e(_f,bJr),e(_f,Foe),e(Foe,vJr),e(_f,FJr),e(_f,Toe),e(Toe,TJr),e(_f,MJr),e(Er,EJr),e(Er,k$),e(k$,CJr),e(k$,h0e),e(h0e,wJr),e(k$,AJr),e(Er,LJr),e(Er,Kt),M(S$,Kt,null),e(Kt,yJr),e(Kt,p0e),e(p0e,xJr),e(Kt,$Jr),e(Kt,uf),e(uf,kJr),e(uf,_0e),e(_0e,SJr),e(uf,RJr),e(uf,Moe),e(Moe,PJr),e(uf,BJr),e(Kt,IJr),M(W0,Kt,null),e(Er,NJr),e(Er,Yr),M(R$,Yr,null),e(Yr,qJr),e(Yr,u0e),e(u0e,jJr),e(Yr,DJr),e(Yr,xn),e(xn,GJr),e(xn,b0e),e(b0e,OJr),e(xn,VJr),e(xn,v0e),e(v0e,XJr),e(xn,zJr),e(xn,F0e),e(F0e,QJr),e(xn,WJr),e(Yr,HJr),e(Yr,Xe),e(Xe,H0),e(H0,T0e),e(T0e,UJr),e(H0,JJr),e(H0,Eoe),e(Eoe,YJr),e(H0,KJr),e(Xe,ZJr),e(Xe,U0),e(U0,M0e),e(M0e,eYr),e(U0,oYr),e(U0,Coe),e(Coe,rYr),e(U0,tYr),e(Xe,aYr),e(Xe,J0),e(J0,E0e),e(E0e,nYr),e(J0,sYr),e(J0,woe),e(woe,lYr),e(J0,iYr),e(Xe,dYr),e(Xe,Y0),e(Y0,C0e),e(C0e,cYr),e(Y0,fYr),e(Y0,Aoe),e(Aoe,mYr),e(Y0,gYr),e(Xe,hYr),e(Xe,K0),e(K0,w0e),e(w0e,pYr),e(K0,_Yr),e(K0,Loe),e(Loe,uYr),e(K0,bYr),e(Xe,vYr),e(Xe,Z0),e(Z0,A0e),e(A0e,FYr),e(Z0,TYr),e(Z0,yoe),e(yoe,MYr),e(Z0,EYr),e(Xe,CYr),e(Xe,ew),e(ew,L0e),e(L0e,wYr),e(ew,AYr),e(ew,xoe),e(xoe,LYr),e(ew,yYr),e(Xe,xYr),e(Xe,ow),e(ow,y0e),e(y0e,$Yr),e(ow,kYr),e(ow,$oe),e($oe,SYr),e(ow,RYr),e(Yr,PYr),M(rw,Yr,null),b(f,$Xe,u),b(f,bf,u),e(bf,tw),e(tw,x0e),M(P$,x0e,null),e(bf,BYr),e(bf,$0e),e($0e,IYr),b(f,kXe,u),b(f,Cr,u),M(B$,Cr,null),e(Cr,NYr),e(Cr,vf),e(vf,qYr),e(vf,koe),e(koe,jYr),e(vf,DYr),e(vf,Soe),e(Soe,GYr),e(vf,OYr),e(Cr,VYr),e(Cr,I$),e(I$,XYr),e(I$,k0e),e(k0e,zYr),e(I$,QYr),e(Cr,WYr),e(Cr,Zt),M(N$,Zt,null),e(Zt,HYr),e(Zt,S0e),e(S0e,UYr),e(Zt,JYr),e(Zt,Ff),e(Ff,YYr),e(Ff,R0e),e(R0e,KYr),e(Ff,ZYr),e(Ff,Roe),e(Roe,eKr),e(Ff,oKr),e(Zt,rKr),M(aw,Zt,null),e(Cr,tKr),e(Cr,Kr),M(q$,Kr,null),e(Kr,aKr),e(Kr,P0e),e(P0e,nKr),e(Kr,sKr),e(Kr,$n),e($n,lKr),e($n,B0e),e(B0e,iKr),e($n,dKr),e($n,I0e),e(I0e,cKr),e($n,fKr),e($n,N0e),e(N0e,mKr),e($n,gKr),e(Kr,hKr),e(Kr,q0e),e(q0e,nw),e(nw,j0e),e(j0e,pKr),e(nw,_Kr),e(nw,Poe),e(Poe,uKr),e(nw,bKr),e(Kr,vKr),M(sw,Kr,null),b(f,SXe,u),b(f,Tf,u),e(Tf,lw),e(lw,D0e),M(j$,D0e,null),e(Tf,FKr),e(Tf,G0e),e(G0e,TKr),b(f,RXe,u),b(f,wr,u),M(D$,wr,null),e(wr,MKr),e(wr,Mf),e(Mf,EKr),e(Mf,Boe),e(Boe,CKr),e(Mf,wKr),e(Mf,Ioe),e(Ioe,AKr),e(Mf,LKr),e(wr,yKr),e(wr,G$),e(G$,xKr),e(G$,O0e),e(O0e,$Kr),e(G$,kKr),e(wr,SKr),e(wr,ea),M(O$,ea,null),e(ea,RKr),e(ea,V0e),e(V0e,PKr),e(ea,BKr),e(ea,Ef),e(Ef,IKr),e(Ef,X0e),e(X0e,NKr),e(Ef,qKr),e(Ef,Noe),e(Noe,jKr),e(Ef,DKr),e(ea,GKr),M(iw,ea,null),e(wr,OKr),e(wr,Zr),M(V$,Zr,null),e(Zr,VKr),e(Zr,z0e),e(z0e,XKr),e(Zr,zKr),e(Zr,kn),e(kn,QKr),e(kn,Q0e),e(Q0e,WKr),e(kn,HKr),e(kn,W0e),e(W0e,UKr),e(kn,JKr),e(kn,H0e),e(H0e,YKr),e(kn,KKr),e(Zr,ZKr),e(Zr,X$),e(X$,dw),e(dw,U0e),e(U0e,eZr),e(dw,oZr),e(dw,qoe),e(qoe,rZr),e(dw,tZr),e(X$,aZr),e(X$,cw),e(cw,J0e),e(J0e,nZr),e(cw,sZr),e(cw,joe),e(joe,lZr),e(cw,iZr),e(Zr,dZr),M(fw,Zr,null),b(f,PXe,u),b(f,Cf,u),e(Cf,mw),e(mw,Y0e),M(z$,Y0e,null),e(Cf,cZr),e(Cf,K0e),e(K0e,fZr),b(f,BXe,u),b(f,Ar,u),M(Q$,Ar,null),e(Ar,mZr),e(Ar,wf),e(wf,gZr),e(wf,Doe),e(Doe,hZr),e(wf,pZr),e(wf,Goe),e(Goe,_Zr),e(wf,uZr),e(Ar,bZr),e(Ar,W$),e(W$,vZr),e(W$,Z0e),e(Z0e,FZr),e(W$,TZr),e(Ar,MZr),e(Ar,oa),M(H$,oa,null),e(oa,EZr),e(oa,ewe),e(ewe,CZr),e(oa,wZr),e(oa,Af),e(Af,AZr),e(Af,owe),e(owe,LZr),e(Af,yZr),e(Af,Ooe),e(Ooe,xZr),e(Af,$Zr),e(oa,kZr),M(gw,oa,null),e(Ar,SZr),e(Ar,et),M(U$,et,null),e(et,RZr),e(et,rwe),e(rwe,PZr),e(et,BZr),e(et,Sn),e(Sn,IZr),e(Sn,twe),e(twe,NZr),e(Sn,qZr),e(Sn,awe),e(awe,jZr),e(Sn,DZr),e(Sn,nwe),e(nwe,GZr),e(Sn,OZr),e(et,VZr),e(et,swe),e(swe,hw),e(hw,lwe),e(lwe,XZr),e(hw,zZr),e(hw,Voe),e(Voe,QZr),e(hw,WZr),e(et,HZr),M(pw,et,null),IXe=!0},p(f,[u]){const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),Bf.$set(J$);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),zg.$set(iwe);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),Lh.$set(dwe);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),dp.$set(cwe);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),cp.$set(Y$);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),kp.$set(fwe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Sp.$set(Rn);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),Bp.$set(mwe);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),Nu.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),ju.$set(hwe);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),k1.$set(K$);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),R1.$set(pwe);const Z$={};u&2&&(Z$.$$scope={dirty:u,ctx:f}),F7.$set(Z$);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),M7.$set(_we);const ek={};u&2&&(ek.$$scope={dirty:u,ctx:f}),l2.$set(ek);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),d2.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),y2.$set(bwe);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),$2.$set(vwe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),yb.$set(Lf);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),$b.$set(Fwe);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),iv.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),cv.$set(Mwe);const ok={};u&2&&(ok.$$scope={dirty:u,ctx:f}),bv.$set(ok);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),Fv.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),aF.$set(Cwe);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),sF.$set(wwe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),UF.$set(rt);const rk={};u&2&&(rk.$$scope={dirty:u,ctx:f}),YF.$set(rk);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),e6.$set(Awe);const tk={};u&2&&(tk.$$scope={dirty:u,ctx:f}),r6.$set(tk);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),_6.$set(Lwe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),b6.$set(tt);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),T6.$set(ywe);const yf={};u&2&&(yf.$$scope={dirty:u,ctx:f}),E6.$set(yf);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),A6.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),y6.$set($we);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),j6.$set(L);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),G6.$set(_w);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),U6.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),Y6.$set(Swe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),dT.$set(uw);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),fT.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),pT.$set(Pwe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),uT.$set(bw);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),CT.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),AT.$set(Iwe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),kT.$set(vw);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),RT.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),NT.$set(qwe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),jT.$set(Fw);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),OT.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),XT.$set(Dwe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),JT.$set(Tw);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),KT.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),oM.$set(Owe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),tM.$set(Mw);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),JM.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),KM.$set(Xwe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),M4.$set(Ew);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),C4.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),q4.$set(Qwe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),D4.$set(Cw);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),z4.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),W4.$set(Hwe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),hE.$set(ww);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),_E.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),LE.$set(Jwe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),xE.$set(Aw);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),rC.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),aC.$set(Kwe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),MC.$set(Lw);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),CC.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),LC.$set(eAe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),xC.$set(yw);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),kC.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),RC.$set(rAe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),e5.$set(xw);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),r5.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),E5.$set(aAe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),w5.$set($w);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),L5.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),x5.$set(sAe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),k5.$set(kw);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),R5.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),l3.$set(iAe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),d3.$set(Sw);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),F3.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),M3.$set(cAe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),I3.$set(Rw);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),q3.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),U3.$set(mAe);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),Y3.$set(Pw);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),i0.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),c0.$set(hAe);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),T0.$set(Bw);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),E0.$set(pAe);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),P0.$set(_Ae);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),I0.$set(Iw);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),z0.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),W0.$set(bAe);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),rw.$set(Nw);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),aw.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),sw.$set(FAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),iw.$set(qw);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),fw.$set(TAe);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),gw.$set(MAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),pw.$set(jw)},i(f){IXe||(E(d.$$.fragment,f),E($a.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(Bf.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(QL.$$.fragment,f),E(zg.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(KL.$$.fragment,f),E(Lh.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ay.$$.fragment,f),E(dp.$$.fragment,f),E(cp.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(cy.$$.fragment,f),E(kp.$$.fragment,f),E(Sp.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Bp.$$.fragment,f),E(_y.$$.fragment,f),E(Nu.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(ju.$$.fragment,f),E(Ty.$$.fragment,f),E(k1.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(R1.$$.fragment,f),E(Ay.$$.fragment,f),E(F7.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(M7.$$.fragment,f),E(ky.$$.fragment,f),E(l2.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(d2.$$.fragment,f),E(Iy.$$.fragment,f),E(y2.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E($2.$$.fragment,f),E(Gy.$$.fragment,f),E(yb.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E($b.$$.fragment,f),E(Qy.$$.fragment,f),E(iv.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(cv.$$.fragment,f),E(Yy.$$.fragment,f),E(bv.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(Fv.$$.fragment,f),E(r8.$$.fragment,f),E(aF.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(sF.$$.fragment,f),E(l8.$$.fragment,f),E(UF.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(YF.$$.fragment,f),E(m8.$$.fragment,f),E(e6.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(r6.$$.fragment,f),E(u8.$$.fragment,f),E(_6.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(b6.$$.fragment,f),E(M8.$$.fragment,f),E(T6.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(E6.$$.fragment,f),E(L8.$$.fragment,f),E(A6.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(y6.$$.fragment,f),E(S8.$$.fragment,f),E(j6.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(G6.$$.fragment,f),E(N8.$$.fragment,f),E(U6.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(Y6.$$.fragment,f),E(O8.$$.fragment,f),E(dT.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(fT.$$.fragment,f),E(W8.$$.fragment,f),E(pT.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(uT.$$.fragment,f),E(Z8.$$.fragment,f),E(CT.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(AT.$$.fragment,f),E(a9.$$.fragment,f),E(kT.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(RT.$$.fragment,f),E(d9.$$.fragment,f),E(NT.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(jT.$$.fragment,f),E(p9.$$.fragment,f),E(OT.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(XT.$$.fragment,f),E(F9.$$.fragment,f),E(JT.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(KT.$$.fragment,f),E(w9.$$.fragment,f),E(oM.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(tM.$$.fragment,f),E($9.$$.fragment,f),E(JM.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(KM.$$.fragment,f),E(B9.$$.fragment,f),E(M4.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(C4.$$.fragment,f),E(D9.$$.fragment,f),E(q4.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(D4.$$.fragment,f),E(z9.$$.fragment,f),E(z4.$$.fragment,f),E(Q9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(W4.$$.fragment,f),E(J9.$$.fragment,f),E(hE.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(_E.$$.fragment,f),E(ox.$$.fragment,f),E(LE.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(xE.$$.fragment,f),E(sx.$$.fragment,f),E(rC.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(aC.$$.fragment,f),E(fx.$$.fragment,f),E(MC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(CC.$$.fragment,f),E(_x.$$.fragment,f),E(LC.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(xC.$$.fragment,f),E(Mx.$$.fragment,f),E(kC.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(RC.$$.fragment,f),E(Lx.$$.fragment,f),E(e5.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(r5.$$.fragment,f),E(Sx.$$.fragment,f),E(E5.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(w5.$$.fragment,f),E(Nx.$$.fragment,f),E(L5.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(x5.$$.fragment,f),E(Ox.$$.fragment,f),E(k5.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(R5.$$.fragment,f),E(Wx.$$.fragment,f),E(l3.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(d3.$$.fragment,f),E(Kx.$$.fragment,f),E(F3.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(M3.$$.fragment,f),E(t$.$$.fragment,f),E(I3.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(q3.$$.fragment,f),E(i$.$$.fragment,f),E(U3.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(Y3.$$.fragment,f),E(g$.$$.fragment,f),E(i0.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(c0.$$.fragment,f),E(b$.$$.fragment,f),E(T0.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(E0.$$.fragment,f),E(E$.$$.fragment,f),E(P0.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(I0.$$.fragment,f),E(y$.$$.fragment,f),E(z0.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(W0.$$.fragment,f),E(R$.$$.fragment,f),E(rw.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(aw.$$.fragment,f),E(q$.$$.fragment,f),E(sw.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(iw.$$.fragment,f),E(V$.$$.fragment,f),E(fw.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(gw.$$.fragment,f),E(U$.$$.fragment,f),E(pw.$$.fragment,f),IXe=!0)},o(f){C(d.$$.fragment,f),C($a.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(Bf.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(QL.$$.fragment,f),C(zg.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(KL.$$.fragment,f),C(Lh.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ay.$$.fragment,f),C(dp.$$.fragment,f),C(cp.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(cy.$$.fragment,f),C(kp.$$.fragment,f),C(Sp.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Bp.$$.fragment,f),C(_y.$$.fragment,f),C(Nu.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(ju.$$.fragment,f),C(Ty.$$.fragment,f),C(k1.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(R1.$$.fragment,f),C(Ay.$$.fragment,f),C(F7.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(M7.$$.fragment,f),C(ky.$$.fragment,f),C(l2.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(d2.$$.fragment,f),C(Iy.$$.fragment,f),C(y2.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C($2.$$.fragment,f),C(Gy.$$.fragment,f),C(yb.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C($b.$$.fragment,f),C(Qy.$$.fragment,f),C(iv.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(cv.$$.fragment,f),C(Yy.$$.fragment,f),C(bv.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(Fv.$$.fragment,f),C(r8.$$.fragment,f),C(aF.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(sF.$$.fragment,f),C(l8.$$.fragment,f),C(UF.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(YF.$$.fragment,f),C(m8.$$.fragment,f),C(e6.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(r6.$$.fragment,f),C(u8.$$.fragment,f),C(_6.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(b6.$$.fragment,f),C(M8.$$.fragment,f),C(T6.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(E6.$$.fragment,f),C(L8.$$.fragment,f),C(A6.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(y6.$$.fragment,f),C(S8.$$.fragment,f),C(j6.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(G6.$$.fragment,f),C(N8.$$.fragment,f),C(U6.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(Y6.$$.fragment,f),C(O8.$$.fragment,f),C(dT.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(fT.$$.fragment,f),C(W8.$$.fragment,f),C(pT.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(uT.$$.fragment,f),C(Z8.$$.fragment,f),C(CT.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(AT.$$.fragment,f),C(a9.$$.fragment,f),C(kT.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(RT.$$.fragment,f),C(d9.$$.fragment,f),C(NT.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(jT.$$.fragment,f),C(p9.$$.fragment,f),C(OT.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(XT.$$.fragment,f),C(F9.$$.fragment,f),C(JT.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(KT.$$.fragment,f),C(w9.$$.fragment,f),C(oM.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(tM.$$.fragment,f),C($9.$$.fragment,f),C(JM.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(KM.$$.fragment,f),C(B9.$$.fragment,f),C(M4.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(C4.$$.fragment,f),C(D9.$$.fragment,f),C(q4.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(D4.$$.fragment,f),C(z9.$$.fragment,f),C(z4.$$.fragment,f),C(Q9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(W4.$$.fragment,f),C(J9.$$.fragment,f),C(hE.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(_E.$$.fragment,f),C(ox.$$.fragment,f),C(LE.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(xE.$$.fragment,f),C(sx.$$.fragment,f),C(rC.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(aC.$$.fragment,f),C(fx.$$.fragment,f),C(MC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(CC.$$.fragment,f),C(_x.$$.fragment,f),C(LC.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(xC.$$.fragment,f),C(Mx.$$.fragment,f),C(kC.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(RC.$$.fragment,f),C(Lx.$$.fragment,f),C(e5.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(r5.$$.fragment,f),C(Sx.$$.fragment,f),C(E5.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(w5.$$.fragment,f),C(Nx.$$.fragment,f),C(L5.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(x5.$$.fragment,f),C(Ox.$$.fragment,f),C(k5.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(R5.$$.fragment,f),C(Wx.$$.fragment,f),C(l3.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(d3.$$.fragment,f),C(Kx.$$.fragment,f),C(F3.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(M3.$$.fragment,f),C(t$.$$.fragment,f),C(I3.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(q3.$$.fragment,f),C(i$.$$.fragment,f),C(U3.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(Y3.$$.fragment,f),C(g$.$$.fragment,f),C(i0.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(c0.$$.fragment,f),C(b$.$$.fragment,f),C(T0.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(E0.$$.fragment,f),C(E$.$$.fragment,f),C(P0.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(I0.$$.fragment,f),C(y$.$$.fragment,f),C(z0.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(W0.$$.fragment,f),C(R$.$$.fragment,f),C(rw.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(aw.$$.fragment,f),C(q$.$$.fragment,f),C(sw.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(iw.$$.fragment,f),C(V$.$$.fragment,f),C(fw.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(gw.$$.fragment,f),C(U$.$$.fragment,f),C(pw.$$.fragment,f),IXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t($f),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(Sf),w($a,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(ka),f&&t(kOe),f&&t($i),w(DL),f&&t(SOe),f&&t(qn),f&&t(ROe),w(GL,f),f&&t(POe),f&&t(FS),f&&t(BOe),w(Bf,f),f&&t(IOe),f&&t(ki),w(OL),f&&t(NOe),f&&t(wo),w(VL),w(QL),w(zg),w(WL),f&&t(qOe),f&&t(Ri),w(HL),f&&t(jOe),f&&t(Ao),w(UL),w(KL),w(Lh),w(ZL),f&&t(DOe),f&&t(Pi),w(ey),f&&t(GOe),f&&t(Lo),w(oy),w(ay),w(dp),w(cp),w(ny),f&&t(OOe),f&&t(Bi),w(sy),f&&t(VOe),f&&t(yo),w(ly),w(cy),w(kp),w(Sp),w(fy),f&&t(XOe),f&&t(Ni),w(my),f&&t(zOe),f&&t(xo),w(gy),w(py),w(Bp),w(_y),w(Nu),f&&t(QOe),f&&t(Di),w(uy),f&&t(WOe),f&&t($o),w(by),w(Fy),w(ju),w(Ty),w(k1),f&&t(HOe),f&&t(Vi),w(My),f&&t(UOe),f&&t(ko),w(Ey),w(wy),w(R1),w(Ay),w(F7),f&&t(JOe),f&&t(Qi),w(Ly),f&&t(YOe),f&&t(So),w(yy),w($y),w(M7),w(ky),w(l2),f&&t(KOe),f&&t(Ui),w(Sy),f&&t(ZOe),f&&t(Ro),w(Ry),w(By),w(d2),w(Iy),w(y2),f&&t(eVe),f&&t(Ki),w(Ny),f&&t(oVe),f&&t(Po),w(qy),w(Dy),w($2),w(Gy),w(yb),f&&t(rVe),f&&t(od),w(Oy),f&&t(tVe),f&&t(Bo),w(Vy),w(zy),w($b),w(Qy),w(iv),f&&t(aVe),f&&t(ad),w(Wy),f&&t(nVe),f&&t(Io),w(Hy),w(Jy),w(cv),w(Yy),w(bv),f&&t(sVe),f&&t(ld),w(Ky),f&&t(lVe),f&&t(qo),w(Zy),w(o8),w(Fv),w(r8),w(aF),f&&t(iVe),f&&t(cd),w(t8),f&&t(dVe),f&&t(jo),w(a8),w(s8),w(sF),w(l8),w(UF),f&&t(cVe),f&&t(gd),w(i8),f&&t(fVe),f&&t(Do),w(d8),w(f8),w(YF),w(m8),w(e6),f&&t(mVe),f&&t(_d),w(g8),f&&t(gVe),f&&t(Go),w(h8),w(_8),w(r6),w(u8),w(_6),f&&t(hVe),f&&t(vd),w(b8),f&&t(pVe),f&&t(Oo),w(v8),w(T8),w(b6),w(M8),w(T6),f&&t(_Ve),f&&t(Md),w(E8),f&&t(uVe),f&&t(Vo),w(C8),w(A8),w(E6),w(L8),w(A6),f&&t(bVe),f&&t(wd),w(y8),f&&t(vVe),f&&t(Xo),w(x8),w(k8),w(y6),w(S8),w(j6),f&&t(FVe),f&&t(yd),w(R8),f&&t(TVe),f&&t(zo),w(P8),w(I8),w(G6),w(N8),w(U6),f&&t(MVe),f&&t(kd),w(q8),f&&t(EVe),f&&t(Wo),w(j8),w(G8),w(Y6),w(O8),w(dT),f&&t(CVe),f&&t(Pd),w(V8),f&&t(wVe),f&&t(Ho),w(X8),w(Q8),w(fT),w(W8),w(pT),f&&t(AVe),f&&t(Nd),w(U8),f&&t(LVe),f&&t(Uo),w(J8),w(K8),w(uT),w(Z8),w(CT),f&&t(yVe),f&&t(Dd),w(e9),f&&t(xVe),f&&t(Jo),w(o9),w(t9),w(AT),w(a9),w(kT),f&&t($Ve),f&&t(Xd),w(n9),f&&t(kVe),f&&t(Yo),w(s9),w(i9),w(RT),w(d9),w(NT),f&&t(SVe),f&&t(Wd),w(f9),f&&t(RVe),f&&t(Ko),w(m9),w(h9),w(jT),w(p9),w(OT),f&&t(PVe),f&&t(Jd),w(_9),f&&t(BVe),f&&t(Zo),w(u9),w(v9),w(XT),w(F9),w(JT),f&&t(IVe),f&&t(Zd),w(T9),f&&t(NVe),f&&t(er),w(M9),w(C9),w(KT),w(w9),w(oM),f&&t(qVe),f&&t(rc),w(A9),f&&t(jVe),f&&t(or),w(L9),w(x9),w(tM),w($9),w(JM),f&&t(DVe),f&&t(nc),w(k9),f&&t(GVe),f&&t(rr),w(S9),w(P9),w(KM),w(B9),w(M4),f&&t(OVe),f&&t(ic),w(I9),f&&t(VVe),f&&t(tr),w(N9),w(j9),w(C4),w(D9),w(q4),f&&t(XVe),f&&t(fc),w(G9),f&&t(zVe),f&&t(ar),w(O9),w(X9),w(D4),w(z9),w(z4),f&&t(QVe),f&&t(hc),w(Q9),f&&t(WVe),f&&t(nr),w(W9),w(U9),w(W4),w(J9),w(hE),f&&t(HVe),f&&t(uc),w(Y9),f&&t(UVe),f&&t(sr),w(K9),w(ex),w(_E),w(ox),w(LE),f&&t(JVe),f&&t(Fc),w(rx),f&&t(YVe),f&&t(lr),w(tx),w(nx),w(xE),w(sx),w(rC),f&&t(KVe),f&&t(Ec),w(lx),f&&t(ZVe),f&&t(ir),w(ix),w(cx),w(aC),w(fx),w(MC),f&&t(eXe),f&&t(Ac),w(mx),f&&t(oXe),f&&t(dr),w(gx),w(px),w(CC),w(_x),w(LC),f&&t(rXe),f&&t(xc),w(bx),f&&t(tXe),f&&t(cr),w(vx),w(Tx),w(xC),w(Mx),w(kC),f&&t(aXe),f&&t(Sc),w(Ex),f&&t(nXe),f&&t(fr),w(Cx),w(Ax),w(RC),w(Lx),w(e5),f&&t(sXe),f&&t(Bc),w(yx),f&&t(lXe),f&&t(mr),w(xx),w(kx),w(r5),w(Sx),w(E5),f&&t(iXe),f&&t(qc),w(Rx),f&&t(dXe),f&&t(gr),w(Px),w(Ix),w(w5),w(Nx),w(L5),f&&t(cXe),f&&t(Gc),w(qx),f&&t(fXe),f&&t(hr),w(jx),w(Gx),w(x5),w(Ox),w(k5),f&&t(mXe),f&&t(Xc),w(Vx),f&&t(gXe),f&&t(pr),w(Xx),w(Qx),w(R5),w(Wx),w(l3),f&&t(hXe),f&&t(Wc),w(Hx),f&&t(pXe),f&&t(_r),w(Ux),w(Yx),w(d3),w(Kx),w(F3),f&&t(_Xe),f&&t(Jc),w(Zx),f&&t(uXe),f&&t(ur),w(e$),w(r$),w(M3),w(t$),w(I3),f&&t(bXe),f&&t(Zc),w(a$),f&&t(vXe),f&&t(br),w(n$),w(l$),w(q3),w(i$),w(U3),f&&t(FXe),f&&t(rf),w(d$),f&&t(TXe),f&&t(vr),w(c$),w(m$),w(Y3),w(g$),w(i0),f&&t(MXe),f&&t(nf),w(h$),f&&t(EXe),f&&t(Fr),w(p$),w(u$),w(c0),w(b$),w(T0),f&&t(CXe),f&&t(df),w(v$),f&&t(wXe),f&&t(Tr),w(F$),w(M$),w(E0),w(E$),w(P0),f&&t(AXe),f&&t(mf),w(C$),f&&t(LXe),f&&t(Mr),w(w$),w(L$),w(I0),w(y$),w(z0),f&&t(yXe),f&&t(pf),w(x$),f&&t(xXe),f&&t(Er),w($$),w(S$),w(W0),w(R$),w(rw),f&&t($Xe),f&&t(bf),w(P$),f&&t(kXe),f&&t(Cr),w(B$),w(N$),w(aw),w(q$),w(sw),f&&t(SXe),f&&t(Tf),w(j$),f&&t(RXe),f&&t(wr),w(D$),w(O$),w(iw),w(V$),w(fw),f&&t(PXe),f&&t(Cf),w(z$),f&&t(BXe),f&&t(Ar),w(Q$),w(H$),w(gw),w(U$),w(pw)}}}const zXt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function QXt($){return XOt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ZXt extends DOt{constructor(g){super();GOt(this,g,QXt,XXt,OOt,{})}}export{ZXt as default,zXt as metadata};
