import{S as GQt,i as OQt,s as VQt,e as a,k as l,w as F,t as o,M as XQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as zQt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as ftt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function QQt($){let g,v,p,m,_,d,h,Co,Li,Pf,lt,yi,xi,oL,Bf,Oe,We,$i,Pn,rL,Bn,In,tL,ki,Nn,aL,Si,If,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),Li=a("code"),Pf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),oL=o(")."),Bf=l(),Oe=a("p"),We=o("Likewise, if your "),$i=a("code"),Pn=o("NewModel"),rL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),tL=o(`, make sure its
`),ki=a("code"),Nn=o("config_class"),aL=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),If=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var IS=s(p);m=r(IS,"NewModelConfig"),IS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),Co=r(Ae,`, make sure its
`),Li=n(Ae,"CODE",{});var NS=s(Li);Pf=r(NS,"model_type"),NS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),yi=n(Ae,"CODE",{});var qS=s(yi);xi=r(qS,'"new-model"'),qS.forEach(t),oL=r(Ae,")."),Ae.forEach(t),Bf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),$i=n(wo,"CODE",{});var Ra=s($i);Pn=r(Ra,"NewModel"),Ra.forEach(t),rL=r(wo," is a subclass of "),Bn=n(wo,"A",{href:!0});var jS=s(Bn);In=r(jS,"PreTrainedModel"),jS.forEach(t),tL=r(wo,`, make sure its
`),ki=n(wo,"CODE",{});var Nf=s(ki);Nn=r(Nf,"config_class"),Nf.forEach(t),aL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Si=n(wo,"CODE",{});var DS=s(Si);If=r(DS,"NewModelConfig"),DS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,Li),e(Li,Pf),e(g,lt),e(g,yi),e(yi,xi),e(g,oL),b(He,Bf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,$i),e($i,Pn),e(Oe,rL),e(Oe,Bn),e(Bn,In),e(Oe,tL),e(Oe,ki),e(ki,Nn),e(Oe,aL),e(Oe,Si),e(Si,If),e(Oe,Sa)},d(He){He&&t(g),He&&t(Bf),He&&t(Oe)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_,d,h,Co,Li,Pf,lt,yi,xi,oL,Bf,Oe,We,$i,Pn,rL,Bn,In,tL,ki,Nn,aL,Si,If,Sa,He,Ae,IS,Ri,NS,qS,wo,Ra,jS,Nf,DS,_He,oXe,Pi,qf,Aae,nL,uHe,Lae,bHe,rXe,qn,vHe,yae,FHe,THe,xae,MHe,EHe,tXe,sL,aXe,GS,CHe,nXe,jf,sXe,Bi,Df,$ae,lL,wHe,kae,AHe,lXe,Ao,iL,LHe,dL,yHe,OS,xHe,$He,kHe,cL,SHe,Sae,RHe,PHe,BHe,Lr,fL,IHe,Rae,NHe,qHe,Ii,jHe,Pae,DHe,GHe,Bae,OHe,VHe,XHe,A,Gf,Iae,zHe,QHe,VS,WHe,HHe,UHe,Of,Nae,JHe,YHe,XS,KHe,ZHe,eUe,Vf,qae,oUe,rUe,zS,tUe,aUe,nUe,Xf,jae,sUe,lUe,QS,iUe,dUe,cUe,zf,Dae,fUe,mUe,WS,gUe,hUe,pUe,Qf,Gae,_Ue,uUe,HS,bUe,vUe,FUe,Wf,Oae,TUe,MUe,US,EUe,CUe,wUe,Hf,Vae,AUe,LUe,JS,yUe,xUe,$Ue,Uf,Xae,kUe,SUe,YS,RUe,PUe,BUe,Jf,zae,IUe,NUe,KS,qUe,jUe,DUe,Yf,Qae,GUe,OUe,ZS,VUe,XUe,zUe,Kf,Wae,QUe,WUe,eR,HUe,UUe,JUe,Zf,Hae,YUe,KUe,oR,ZUe,eJe,oJe,em,Uae,rJe,tJe,rR,aJe,nJe,sJe,om,Jae,lJe,iJe,tR,dJe,cJe,fJe,rm,Yae,mJe,gJe,aR,hJe,pJe,_Je,tm,Kae,uJe,bJe,nR,vJe,FJe,TJe,am,Zae,MJe,EJe,sR,CJe,wJe,AJe,nm,ene,LJe,yJe,lR,xJe,$Je,kJe,sm,one,SJe,RJe,iR,PJe,BJe,IJe,lm,rne,NJe,qJe,dR,jJe,DJe,GJe,im,tne,OJe,VJe,cR,XJe,zJe,QJe,dm,ane,WJe,HJe,fR,UJe,JJe,YJe,cm,nne,KJe,ZJe,mR,eYe,oYe,rYe,fm,sne,tYe,aYe,gR,nYe,sYe,lYe,mm,lne,iYe,dYe,hR,cYe,fYe,mYe,gm,ine,gYe,hYe,pR,pYe,_Ye,uYe,hm,dne,bYe,vYe,_R,FYe,TYe,MYe,pm,cne,EYe,CYe,uR,wYe,AYe,LYe,_m,fne,yYe,xYe,bR,$Ye,kYe,SYe,um,mne,RYe,PYe,vR,BYe,IYe,NYe,bm,gne,qYe,jYe,FR,DYe,GYe,OYe,vm,hne,VYe,XYe,TR,zYe,QYe,WYe,Fm,pne,HYe,UYe,MR,JYe,YYe,KYe,Tm,_ne,ZYe,eKe,ER,oKe,rKe,tKe,Mm,une,aKe,nKe,CR,sKe,lKe,iKe,Em,bne,dKe,cKe,wR,fKe,mKe,gKe,Cm,vne,hKe,pKe,AR,_Ke,uKe,bKe,wm,Fne,vKe,FKe,LR,TKe,MKe,EKe,Am,Tne,CKe,wKe,yR,AKe,LKe,yKe,Lm,Mne,xKe,$Ke,xR,kKe,SKe,RKe,ym,Ene,PKe,BKe,$R,IKe,NKe,qKe,xm,Cne,jKe,DKe,kR,GKe,OKe,VKe,$m,wne,XKe,zKe,SR,QKe,WKe,HKe,km,Ane,UKe,JKe,RR,YKe,KKe,ZKe,Sm,Lne,eZe,oZe,PR,rZe,tZe,aZe,Rm,yne,nZe,sZe,BR,lZe,iZe,dZe,Pm,xne,cZe,fZe,IR,mZe,gZe,hZe,Bm,$ne,pZe,_Ze,NR,uZe,bZe,vZe,Im,kne,FZe,TZe,qR,MZe,EZe,CZe,Nm,Sne,wZe,AZe,jR,LZe,yZe,xZe,qm,Rne,$Ze,kZe,DR,SZe,RZe,PZe,jm,Pne,BZe,IZe,GR,NZe,qZe,jZe,Dm,Bne,DZe,GZe,OR,OZe,VZe,XZe,Gm,Ine,zZe,QZe,VR,WZe,HZe,UZe,Om,Nne,JZe,YZe,XR,KZe,ZZe,eeo,Vm,qne,oeo,reo,zR,teo,aeo,neo,Xm,jne,seo,leo,QR,ieo,deo,ceo,zm,Dne,feo,meo,WR,geo,heo,peo,Qm,Gne,_eo,ueo,HR,beo,veo,Feo,Wm,One,Teo,Meo,UR,Eeo,Ceo,weo,Hm,Vne,Aeo,Leo,JR,yeo,xeo,$eo,Um,Xne,keo,Seo,YR,Reo,Peo,Beo,Jm,zne,Ieo,Neo,KR,qeo,jeo,Deo,Ym,Qne,Geo,Oeo,ZR,Veo,Xeo,zeo,Km,Wne,Qeo,Weo,eP,Heo,Ueo,Jeo,Zm,Hne,Yeo,Keo,oP,Zeo,eoo,ooo,eg,Une,roo,too,rP,aoo,noo,soo,og,Jne,loo,ioo,tP,doo,coo,foo,rg,Yne,moo,goo,aP,hoo,poo,_oo,tg,Kne,uoo,boo,nP,voo,Foo,Too,ag,Zne,Moo,Eoo,sP,Coo,woo,Aoo,ng,ese,Loo,yoo,lP,xoo,$oo,koo,sg,ose,Soo,Roo,iP,Poo,Boo,Ioo,lg,rse,Noo,qoo,dP,joo,Doo,Goo,ig,tse,Ooo,Voo,cP,Xoo,zoo,Qoo,dg,ase,Woo,Hoo,fP,Uoo,Joo,Yoo,cg,nse,Koo,Zoo,mP,ero,oro,rro,fg,sse,tro,aro,gP,nro,sro,lro,mg,lse,iro,dro,hP,cro,fro,mro,gg,ise,gro,hro,pP,pro,_ro,uro,hg,dse,bro,vro,_P,Fro,Tro,Mro,pg,cse,Ero,Cro,uP,wro,Aro,Lro,_g,fse,yro,xro,bP,$ro,kro,Sro,ug,mse,Rro,Pro,vP,Bro,Iro,Nro,bg,gse,qro,jro,FP,Dro,Gro,Oro,vg,hse,Vro,Xro,TP,zro,Qro,Wro,Fg,pse,Hro,Uro,MP,Jro,Yro,Kro,Tg,_se,Zro,eto,EP,oto,rto,tto,Mg,use,ato,nto,CP,sto,lto,ito,Eg,bse,dto,cto,wP,fto,mto,gto,Cg,vse,hto,pto,AP,_to,uto,bto,wg,Fse,vto,Fto,LP,Tto,Mto,Eto,Ag,Tse,Cto,wto,yP,Ato,Lto,yto,Lg,Mse,xto,$to,xP,kto,Sto,Rto,yg,Ese,Pto,Bto,$P,Ito,Nto,qto,xg,Cse,jto,Dto,kP,Gto,Oto,Vto,$g,wse,Xto,zto,SP,Qto,Wto,Hto,kg,Ase,Uto,Jto,RP,Yto,Kto,Zto,Sg,Lse,eao,oao,PP,rao,tao,aao,Rg,yse,nao,sao,BP,lao,iao,dao,Pg,xse,cao,fao,IP,mao,gao,hao,Bg,$se,pao,_ao,NP,uao,bao,vao,Ig,kse,Fao,Tao,qP,Mao,Eao,Cao,Ng,Sse,wao,Aao,jP,Lao,yao,xao,qg,Rse,$ao,kao,DP,Sao,Rao,Pao,jg,Pse,Bao,Iao,GP,Nao,qao,jao,Dg,Bse,Dao,Gao,OP,Oao,Vao,Xao,Gg,Ise,zao,Qao,VP,Wao,Hao,Uao,Og,Nse,Jao,Yao,XP,Kao,Zao,eno,Vg,qse,ono,rno,zP,tno,ano,nno,Xg,jse,sno,lno,QP,ino,dno,cno,zg,Dse,fno,mno,WP,gno,hno,pno,Qg,Gse,_no,uno,HP,bno,vno,Fno,Wg,Ose,Tno,Mno,UP,Eno,Cno,wno,Hg,Vse,Ano,Lno,JP,yno,xno,$no,Ug,Xse,kno,Sno,YP,Rno,Pno,Bno,Jg,zse,Ino,Nno,KP,qno,jno,Dno,Yg,Gno,Kg,mL,Ono,Qse,Vno,iXe,Ni,Zg,Wse,gL,Xno,Hse,zno,dXe,Lo,hL,Qno,pL,Wno,ZP,Hno,Uno,Jno,_L,Yno,Use,Kno,Zno,eso,yr,uL,oso,Jse,rso,tso,Pa,aso,Yse,nso,sso,Kse,lso,iso,Zse,dso,cso,fso,k,jn,ele,mso,gso,eB,hso,pso,oB,_so,uso,bso,Dn,ole,vso,Fso,rB,Tso,Mso,tB,Eso,Cso,wso,Gn,rle,Aso,Lso,aB,yso,xso,nB,$so,kso,Sso,eh,tle,Rso,Pso,sB,Bso,Iso,Nso,On,ale,qso,jso,lB,Dso,Gso,iB,Oso,Vso,Xso,oh,nle,zso,Qso,dB,Wso,Hso,Uso,rh,sle,Jso,Yso,cB,Kso,Zso,elo,th,lle,olo,rlo,fB,tlo,alo,nlo,Vn,ile,slo,llo,mB,ilo,dlo,gB,clo,flo,mlo,Xn,dle,glo,hlo,hB,plo,_lo,pB,ulo,blo,vlo,zn,cle,Flo,Tlo,_B,Mlo,Elo,uB,Clo,wlo,Alo,ah,fle,Llo,ylo,bB,xlo,$lo,klo,nh,mle,Slo,Rlo,vB,Plo,Blo,Ilo,sh,gle,Nlo,qlo,FB,jlo,Dlo,Glo,Qn,hle,Olo,Vlo,TB,Xlo,zlo,MB,Qlo,Wlo,Hlo,lh,ple,Ulo,Jlo,EB,Ylo,Klo,Zlo,Wn,_le,eio,oio,CB,rio,tio,wB,aio,nio,sio,Hn,ule,lio,iio,AB,dio,cio,LB,fio,mio,gio,Un,ble,hio,pio,yB,_io,uio,xB,bio,vio,Fio,Jn,vle,Tio,Mio,$B,Eio,Cio,kB,wio,Aio,Lio,ih,Fle,yio,xio,SB,$io,kio,Sio,Yn,Tle,Rio,Pio,RB,Bio,Iio,PB,Nio,qio,jio,Kn,Mle,Dio,Gio,BB,Oio,Vio,IB,Xio,zio,Qio,Zn,Ele,Wio,Hio,NB,Uio,Jio,qB,Yio,Kio,Zio,es,Cle,edo,odo,jB,rdo,tdo,DB,ado,ndo,sdo,os,wle,ldo,ido,GB,ddo,cdo,OB,fdo,mdo,gdo,rs,Ale,hdo,pdo,VB,_do,udo,XB,bdo,vdo,Fdo,dh,Lle,Tdo,Mdo,zB,Edo,Cdo,wdo,ts,yle,Ado,Ldo,QB,ydo,xdo,WB,$do,kdo,Sdo,ch,xle,Rdo,Pdo,HB,Bdo,Ido,Ndo,as,$le,qdo,jdo,UB,Ddo,Gdo,JB,Odo,Vdo,Xdo,ns,kle,zdo,Qdo,YB,Wdo,Hdo,KB,Udo,Jdo,Ydo,ss,Sle,Kdo,Zdo,ZB,eco,oco,eI,rco,tco,aco,fh,Rle,nco,sco,oI,lco,ico,dco,ls,Ple,cco,fco,rI,mco,gco,tI,hco,pco,_co,is,Ble,uco,bco,aI,vco,Fco,nI,Tco,Mco,Eco,ds,Ile,Cco,wco,sI,Aco,Lco,lI,yco,xco,$co,mh,Nle,kco,Sco,iI,Rco,Pco,Bco,cs,qle,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,fs,jle,Vco,Xco,fI,zco,Qco,mI,Wco,Hco,Uco,ms,Dle,Jco,Yco,gI,Kco,Zco,hI,efo,ofo,rfo,gs,Gle,tfo,afo,pI,nfo,sfo,_I,lfo,ifo,dfo,hs,Ole,cfo,ffo,uI,mfo,gfo,bI,hfo,pfo,_fo,ps,Vle,ufo,bfo,vI,vfo,Ffo,FI,Tfo,Mfo,Efo,_s,Xle,Cfo,wfo,TI,Afo,Lfo,MI,yfo,xfo,$fo,us,zle,kfo,Sfo,EI,Rfo,Pfo,CI,Bfo,Ifo,Nfo,gh,Qle,qfo,jfo,wI,Dfo,Gfo,Ofo,bs,Wle,Vfo,Xfo,AI,zfo,Qfo,LI,Wfo,Hfo,Ufo,hh,Hle,Jfo,Yfo,yI,Kfo,Zfo,emo,ph,Ule,omo,rmo,xI,tmo,amo,nmo,vs,Jle,smo,lmo,$I,imo,dmo,kI,cmo,fmo,mmo,Fs,Yle,gmo,hmo,SI,pmo,_mo,RI,umo,bmo,vmo,Ts,Kle,Fmo,Tmo,PI,Mmo,Emo,BI,Cmo,wmo,Amo,_h,Zle,Lmo,ymo,II,xmo,$mo,kmo,Ms,eie,Smo,Rmo,NI,Pmo,Bmo,qI,Imo,Nmo,qmo,Es,oie,jmo,Dmo,jI,Gmo,Omo,DI,Vmo,Xmo,zmo,Cs,rie,Qmo,Wmo,GI,Hmo,Umo,OI,Jmo,Ymo,Kmo,ws,tie,Zmo,ego,VI,ogo,rgo,XI,tgo,ago,ngo,As,aie,sgo,lgo,zI,igo,dgo,QI,cgo,fgo,mgo,Ls,nie,ggo,hgo,WI,pgo,_go,HI,ugo,bgo,vgo,ys,sie,Fgo,Tgo,UI,Mgo,Ego,JI,Cgo,wgo,Ago,uh,lie,Lgo,ygo,YI,xgo,$go,kgo,xs,iie,Sgo,Rgo,KI,Pgo,Bgo,ZI,Igo,Ngo,qgo,bh,die,jgo,Dgo,eN,Ggo,Ogo,Vgo,vh,cie,Xgo,zgo,oN,Qgo,Wgo,Hgo,Fh,fie,Ugo,Jgo,rN,Ygo,Kgo,Zgo,Th,mie,eho,oho,tN,rho,tho,aho,$s,gie,nho,sho,aN,lho,iho,nN,dho,cho,fho,Mh,hie,mho,gho,sN,hho,pho,_ho,ks,pie,uho,bho,lN,vho,Fho,iN,Tho,Mho,Eho,Ss,_ie,Cho,who,dN,Aho,Lho,cN,yho,xho,$ho,Rs,uie,kho,Sho,fN,Rho,Pho,mN,Bho,Iho,Nho,Ps,bie,qho,jho,gN,Dho,Gho,hN,Oho,Vho,Xho,Bs,vie,zho,Qho,pN,Who,Hho,_N,Uho,Jho,Yho,Is,Fie,Kho,Zho,uN,epo,opo,bN,rpo,tpo,apo,Eh,Tie,npo,spo,vN,lpo,ipo,dpo,Ch,Mie,cpo,fpo,FN,mpo,gpo,hpo,Ns,Eie,ppo,_po,TN,upo,bpo,MN,vpo,Fpo,Tpo,qs,Cie,Mpo,Epo,EN,Cpo,wpo,CN,Apo,Lpo,ypo,js,wie,xpo,$po,wN,kpo,Spo,AN,Rpo,Ppo,Bpo,wh,Aie,Ipo,Npo,LN,qpo,jpo,Dpo,Ah,Lie,Gpo,Opo,yN,Vpo,Xpo,zpo,Lh,yie,Qpo,Wpo,xN,Hpo,Upo,Jpo,Ds,xie,Ypo,Kpo,$N,Zpo,e_o,kN,o_o,r_o,t_o,Gs,$ie,a_o,n_o,SN,s_o,l_o,RN,i_o,d_o,c_o,yh,kie,f_o,m_o,PN,g_o,h_o,p_o,xh,Sie,__o,u_o,BN,b_o,v_o,F_o,$h,Rie,T_o,M_o,IN,E_o,C_o,w_o,Os,Pie,A_o,L_o,NN,y_o,x_o,qN,$_o,k_o,S_o,kh,Bie,R_o,P_o,jN,B_o,I_o,N_o,Sh,Iie,q_o,j_o,DN,D_o,G_o,O_o,Vs,Nie,V_o,X_o,GN,z_o,Q_o,ON,W_o,H_o,U_o,Xs,qie,J_o,Y_o,VN,K_o,Z_o,XN,euo,ouo,ruo,zs,jie,tuo,auo,zN,nuo,suo,QN,luo,iuo,duo,Qs,Die,cuo,fuo,WN,muo,guo,HN,huo,puo,_uo,Rh,uuo,Ph,bL,buo,Gie,vuo,cXe,qi,Bh,Oie,vL,Fuo,Vie,Tuo,fXe,yo,FL,Muo,TL,Euo,UN,Cuo,wuo,Auo,ML,Luo,Xie,yuo,xuo,$uo,Ue,EL,kuo,zie,Suo,Ruo,Ba,Puo,Qie,Buo,Iuo,Wie,Nuo,quo,Hie,juo,Duo,Guo,Y,Ih,Uie,Ouo,Vuo,JN,Xuo,zuo,Quo,Nh,Jie,Wuo,Huo,YN,Uuo,Juo,Yuo,qh,Yie,Kuo,Zuo,KN,e1o,o1o,r1o,jh,Kie,t1o,a1o,ZN,n1o,s1o,l1o,Dh,Zie,i1o,d1o,eq,c1o,f1o,m1o,Gh,ede,g1o,h1o,oq,p1o,_1o,u1o,Oh,ode,b1o,v1o,rq,F1o,T1o,M1o,Vh,rde,E1o,C1o,tq,w1o,A1o,L1o,Xh,tde,y1o,x1o,aq,$1o,k1o,S1o,zh,ade,R1o,P1o,nq,B1o,I1o,N1o,Qh,nde,q1o,j1o,sq,D1o,G1o,O1o,Wh,sde,V1o,X1o,lq,z1o,Q1o,W1o,Hh,lde,H1o,U1o,iq,J1o,Y1o,K1o,Uh,ide,Z1o,e2o,dq,o2o,r2o,t2o,Jh,dde,a2o,n2o,cq,s2o,l2o,i2o,Yh,cde,d2o,c2o,fq,f2o,m2o,g2o,Kh,fde,h2o,p2o,mq,_2o,u2o,b2o,Zh,mde,v2o,F2o,gq,T2o,M2o,E2o,ep,gde,C2o,w2o,hq,A2o,L2o,y2o,op,hde,x2o,$2o,pq,k2o,S2o,R2o,rp,pde,P2o,B2o,_q,I2o,N2o,q2o,tp,_de,j2o,D2o,uq,G2o,O2o,V2o,ap,ude,X2o,z2o,bq,Q2o,W2o,H2o,np,bde,U2o,J2o,vq,Y2o,K2o,Z2o,sp,vde,ebo,obo,Fq,rbo,tbo,abo,lp,Fde,nbo,sbo,Tq,lbo,ibo,dbo,ip,Tde,cbo,fbo,Mq,mbo,gbo,hbo,dp,Mde,pbo,_bo,Eq,ubo,bbo,vbo,cp,Ede,Fbo,Tbo,Cq,Mbo,Ebo,Cbo,fp,Cde,wbo,Abo,wq,Lbo,ybo,xbo,mp,wde,$bo,kbo,Aq,Sbo,Rbo,Pbo,gp,Ade,Bbo,Ibo,Lq,Nbo,qbo,jbo,hp,Lde,Dbo,Gbo,yq,Obo,Vbo,Xbo,pp,yde,zbo,Qbo,xq,Wbo,Hbo,Ubo,_p,Jbo,up,Ybo,bp,CL,Kbo,xde,Zbo,mXe,ji,vp,$de,wL,e3o,kde,o3o,gXe,xo,AL,r3o,LL,t3o,$q,a3o,n3o,s3o,yL,l3o,Sde,i3o,d3o,c3o,Je,xL,f3o,Rde,m3o,g3o,Di,h3o,Pde,p3o,_3o,Bde,u3o,b3o,v3o,he,Fp,Ide,F3o,T3o,kq,M3o,E3o,C3o,Tp,Nde,w3o,A3o,qde,L3o,y3o,x3o,Mp,jde,$3o,k3o,Sq,S3o,R3o,P3o,Ep,Dde,B3o,I3o,Rq,N3o,q3o,j3o,Cp,Gde,D3o,G3o,Pq,O3o,V3o,X3o,wp,Ode,z3o,Q3o,Bq,W3o,H3o,U3o,Ap,Vde,J3o,Y3o,Iq,K3o,Z3o,evo,Lp,Xde,ovo,rvo,Nq,tvo,avo,nvo,yp,zde,svo,lvo,qq,ivo,dvo,cvo,xp,Qde,fvo,mvo,jq,gvo,hvo,pvo,$p,Wde,_vo,uvo,Dq,bvo,vvo,Fvo,kp,Hde,Tvo,Mvo,Gq,Evo,Cvo,wvo,Sp,Ude,Avo,Lvo,Oq,yvo,xvo,$vo,Rp,Jde,kvo,Svo,Vq,Rvo,Pvo,Bvo,Pp,Yde,Ivo,Nvo,Xq,qvo,jvo,Dvo,Bp,Kde,Gvo,Ovo,zq,Vvo,Xvo,zvo,Ip,Zde,Qvo,Wvo,Qq,Hvo,Uvo,Jvo,Np,ece,Yvo,Kvo,Wq,Zvo,eFo,oFo,qp,rFo,jp,tFo,Dp,$L,aFo,oce,nFo,hXe,Gi,Gp,rce,kL,sFo,tce,lFo,pXe,$o,SL,iFo,Oi,dFo,Hq,cFo,fFo,Uq,mFo,gFo,hFo,RL,pFo,ace,_Fo,uFo,bFo,it,PL,vFo,nce,FFo,TFo,Vi,MFo,sce,EFo,CFo,Jq,wFo,AFo,LFo,Op,yFo,Ye,BL,xFo,lce,$Fo,kFo,Ia,SFo,ice,RFo,PFo,dce,BFo,IFo,cce,NFo,qFo,jFo,y,Vp,fce,DFo,GFo,Yq,OFo,VFo,XFo,Xp,mce,zFo,QFo,Kq,WFo,HFo,UFo,zp,gce,JFo,YFo,Zq,KFo,ZFo,eTo,Qp,hce,oTo,rTo,ej,tTo,aTo,nTo,Wp,pce,sTo,lTo,oj,iTo,dTo,cTo,Hp,_ce,fTo,mTo,rj,gTo,hTo,pTo,Up,uce,_To,uTo,tj,bTo,vTo,FTo,Jp,bce,TTo,MTo,aj,ETo,CTo,wTo,Yp,vce,ATo,LTo,nj,yTo,xTo,$To,Kp,Fce,kTo,STo,sj,RTo,PTo,BTo,Zp,Tce,ITo,NTo,lj,qTo,jTo,DTo,e_,Mce,GTo,OTo,ij,VTo,XTo,zTo,o_,Ece,QTo,WTo,dj,HTo,UTo,JTo,r_,Cce,YTo,KTo,cj,ZTo,e8o,o8o,t_,wce,r8o,t8o,fj,a8o,n8o,s8o,a_,Ace,l8o,i8o,mj,d8o,c8o,f8o,n_,Lce,m8o,g8o,gj,h8o,p8o,_8o,s_,yce,u8o,b8o,hj,v8o,F8o,T8o,l_,xce,M8o,E8o,pj,C8o,w8o,A8o,i_,$ce,L8o,y8o,_j,x8o,$8o,k8o,d_,kce,S8o,R8o,uj,P8o,B8o,I8o,c_,Sce,N8o,q8o,bj,j8o,D8o,G8o,f_,Rce,O8o,V8o,vj,X8o,z8o,Q8o,m_,Pce,W8o,H8o,Fj,U8o,J8o,Y8o,g_,Bce,K8o,Z8o,Tj,eMo,oMo,rMo,h_,Ice,tMo,aMo,Mj,nMo,sMo,lMo,p_,Nce,iMo,dMo,Ej,cMo,fMo,mMo,__,qce,gMo,hMo,Cj,pMo,_Mo,uMo,u_,jce,bMo,vMo,wj,FMo,TMo,MMo,b_,Dce,EMo,CMo,Aj,wMo,AMo,LMo,v_,Gce,yMo,xMo,Lj,$Mo,kMo,SMo,F_,Oce,RMo,PMo,yj,BMo,IMo,NMo,T_,Vce,qMo,jMo,xj,DMo,GMo,OMo,M_,Xce,VMo,XMo,$j,zMo,QMo,WMo,Ws,zce,HMo,UMo,kj,JMo,YMo,Sj,KMo,ZMo,e4o,E_,Qce,o4o,r4o,Rj,t4o,a4o,n4o,C_,Wce,s4o,l4o,Pj,i4o,d4o,c4o,w_,Hce,f4o,m4o,Bj,g4o,h4o,p4o,A_,Uce,_4o,u4o,Ij,b4o,v4o,F4o,L_,Jce,T4o,M4o,Nj,E4o,C4o,w4o,y_,Yce,A4o,L4o,qj,y4o,x4o,$4o,x_,Kce,k4o,S4o,jj,R4o,P4o,B4o,$_,Zce,I4o,N4o,Dj,q4o,j4o,D4o,k_,efe,G4o,O4o,Gj,V4o,X4o,z4o,S_,ofe,Q4o,W4o,Oj,H4o,U4o,J4o,R_,rfe,Y4o,K4o,Vj,Z4o,eEo,oEo,P_,tfe,rEo,tEo,Xj,aEo,nEo,sEo,B_,afe,lEo,iEo,zj,dEo,cEo,fEo,I_,nfe,mEo,gEo,Qj,hEo,pEo,_Eo,N_,sfe,uEo,bEo,Wj,vEo,FEo,TEo,q_,lfe,MEo,EEo,Hj,CEo,wEo,AEo,j_,ife,LEo,yEo,Uj,xEo,$Eo,kEo,D_,dfe,SEo,REo,Jj,PEo,BEo,IEo,G_,cfe,NEo,qEo,Yj,jEo,DEo,GEo,O_,ffe,OEo,VEo,Kj,XEo,zEo,QEo,V_,mfe,WEo,HEo,Zj,UEo,JEo,YEo,X_,gfe,KEo,ZEo,eD,eCo,oCo,rCo,z_,hfe,tCo,aCo,oD,nCo,sCo,lCo,Q_,pfe,iCo,dCo,rD,cCo,fCo,mCo,W_,_fe,gCo,hCo,tD,pCo,_Co,uCo,H_,ufe,bCo,vCo,aD,FCo,TCo,MCo,U_,bfe,ECo,CCo,nD,wCo,ACo,LCo,J_,vfe,yCo,xCo,sD,$Co,kCo,SCo,Y_,Ffe,RCo,PCo,lD,BCo,ICo,NCo,K_,Tfe,qCo,jCo,iD,DCo,GCo,OCo,Z_,Mfe,VCo,XCo,dD,zCo,QCo,WCo,eu,Efe,HCo,UCo,cD,JCo,YCo,KCo,ou,Cfe,ZCo,e5o,fD,o5o,r5o,t5o,ru,wfe,a5o,n5o,mD,s5o,l5o,i5o,tu,Afe,d5o,c5o,gD,f5o,m5o,g5o,au,Lfe,h5o,p5o,hD,_5o,u5o,b5o,nu,yfe,v5o,F5o,pD,T5o,M5o,E5o,su,xfe,C5o,w5o,_D,A5o,L5o,y5o,lu,$fe,x5o,$5o,uD,k5o,S5o,R5o,iu,kfe,P5o,B5o,bD,I5o,N5o,q5o,du,Sfe,j5o,D5o,vD,G5o,O5o,V5o,cu,Rfe,X5o,z5o,FD,Q5o,W5o,H5o,fu,Pfe,U5o,J5o,TD,Y5o,K5o,Z5o,mu,Bfe,e0o,o0o,MD,r0o,t0o,a0o,gu,Ife,n0o,s0o,ED,l0o,i0o,d0o,hu,Nfe,c0o,f0o,CD,m0o,g0o,h0o,pu,qfe,p0o,_0o,wD,u0o,b0o,v0o,_u,jfe,F0o,T0o,AD,M0o,E0o,C0o,uu,Dfe,w0o,A0o,LD,L0o,y0o,x0o,bu,Gfe,$0o,k0o,yD,S0o,R0o,P0o,vu,Ofe,B0o,I0o,xD,N0o,q0o,j0o,Fu,Vfe,D0o,G0o,$D,O0o,V0o,X0o,Tu,Xfe,z0o,Q0o,kD,W0o,H0o,U0o,Mu,zfe,J0o,Y0o,SD,K0o,Z0o,ewo,Eu,Qfe,owo,rwo,RD,two,awo,nwo,Cu,Wfe,swo,lwo,PD,iwo,dwo,cwo,wu,Hfe,fwo,mwo,BD,gwo,hwo,pwo,Au,Ufe,_wo,uwo,ID,bwo,vwo,Fwo,Lu,Jfe,Two,Mwo,ND,Ewo,Cwo,wwo,yu,Yfe,Awo,Lwo,qD,ywo,xwo,$wo,xu,Kfe,kwo,Swo,jD,Rwo,Pwo,Bwo,$u,Zfe,Iwo,Nwo,DD,qwo,jwo,Dwo,ku,eme,Gwo,Owo,GD,Vwo,Xwo,zwo,Su,ome,Qwo,Wwo,OD,Hwo,Uwo,Jwo,Ru,rme,Ywo,Kwo,VD,Zwo,eAo,oAo,Pu,tme,rAo,tAo,XD,aAo,nAo,sAo,Bu,ame,lAo,iAo,zD,dAo,cAo,fAo,Iu,nme,mAo,gAo,QD,hAo,pAo,_Ao,Nu,sme,uAo,bAo,WD,vAo,FAo,TAo,qu,lme,MAo,EAo,HD,CAo,wAo,AAo,ju,ime,LAo,yAo,UD,xAo,$Ao,kAo,Du,dme,SAo,RAo,JD,PAo,BAo,IAo,Gu,cme,NAo,qAo,YD,jAo,DAo,GAo,Ou,fme,OAo,VAo,KD,XAo,zAo,QAo,Vu,mme,WAo,HAo,ZD,UAo,JAo,YAo,Xu,gme,KAo,ZAo,eG,e6o,o6o,r6o,zu,t6o,hme,a6o,n6o,pme,s6o,l6o,Qu,_Xe,Xi,Wu,_me,IL,i6o,ume,d6o,uXe,ko,NL,c6o,zi,f6o,oG,m6o,g6o,rG,h6o,p6o,_6o,qL,u6o,bme,b6o,v6o,F6o,dt,jL,T6o,vme,M6o,E6o,Qi,C6o,Fme,w6o,A6o,tG,L6o,y6o,x6o,Hu,$6o,Ke,DL,k6o,Tme,S6o,R6o,Na,P6o,Mme,B6o,I6o,Eme,N6o,q6o,Cme,j6o,D6o,G6o,G,Uu,wme,O6o,V6o,aG,X6o,z6o,Q6o,Ju,Ame,W6o,H6o,nG,U6o,J6o,Y6o,Yu,Lme,K6o,Z6o,sG,e7o,o7o,r7o,Ku,yme,t7o,a7o,lG,n7o,s7o,l7o,Zu,xme,i7o,d7o,iG,c7o,f7o,m7o,e1,$me,g7o,h7o,dG,p7o,_7o,u7o,o1,kme,b7o,v7o,cG,F7o,T7o,M7o,r1,Sme,E7o,C7o,fG,w7o,A7o,L7o,t1,Rme,y7o,x7o,mG,$7o,k7o,S7o,a1,Pme,R7o,P7o,gG,B7o,I7o,N7o,n1,Bme,q7o,j7o,hG,D7o,G7o,O7o,s1,Ime,V7o,X7o,pG,z7o,Q7o,W7o,l1,Nme,H7o,U7o,_G,J7o,Y7o,K7o,i1,qme,Z7o,eLo,uG,oLo,rLo,tLo,d1,jme,aLo,nLo,bG,sLo,lLo,iLo,c1,Dme,dLo,cLo,vG,fLo,mLo,gLo,f1,Gme,hLo,pLo,FG,_Lo,uLo,bLo,m1,Ome,vLo,FLo,TG,TLo,MLo,ELo,g1,Vme,CLo,wLo,MG,ALo,LLo,yLo,h1,Xme,xLo,$Lo,EG,kLo,SLo,RLo,p1,zme,PLo,BLo,CG,ILo,NLo,qLo,_1,Qme,jLo,DLo,wG,GLo,OLo,VLo,u1,Wme,XLo,zLo,AG,QLo,WLo,HLo,b1,Hme,ULo,JLo,LG,YLo,KLo,ZLo,v1,Ume,eyo,oyo,yG,ryo,tyo,ayo,F1,Jme,nyo,syo,xG,lyo,iyo,dyo,T1,Yme,cyo,fyo,$G,myo,gyo,hyo,M1,Kme,pyo,_yo,kG,uyo,byo,vyo,E1,Zme,Fyo,Tyo,SG,Myo,Eyo,Cyo,C1,ege,wyo,Ayo,RG,Lyo,yyo,xyo,w1,oge,$yo,kyo,PG,Syo,Ryo,Pyo,A1,rge,Byo,Iyo,BG,Nyo,qyo,jyo,L1,tge,Dyo,Gyo,IG,Oyo,Vyo,Xyo,y1,age,zyo,Qyo,NG,Wyo,Hyo,Uyo,x1,nge,Jyo,Yyo,qG,Kyo,Zyo,e9o,$1,sge,o9o,r9o,jG,t9o,a9o,n9o,k1,lge,s9o,l9o,DG,i9o,d9o,c9o,S1,ige,f9o,m9o,GG,g9o,h9o,p9o,R1,dge,_9o,u9o,OG,b9o,v9o,F9o,P1,cge,T9o,M9o,VG,E9o,C9o,w9o,B1,fge,A9o,L9o,XG,y9o,x9o,$9o,I1,mge,k9o,S9o,zG,R9o,P9o,B9o,N1,gge,I9o,N9o,QG,q9o,j9o,D9o,q1,hge,G9o,O9o,WG,V9o,X9o,z9o,j1,pge,Q9o,W9o,HG,H9o,U9o,J9o,D1,Y9o,_ge,K9o,Z9o,uge,exo,oxo,G1,bXe,Wi,O1,bge,GL,rxo,vge,txo,vXe,So,OL,axo,Hi,nxo,UG,sxo,lxo,JG,ixo,dxo,cxo,VL,fxo,Fge,mxo,gxo,hxo,ct,XL,pxo,Tge,_xo,uxo,Ui,bxo,Mge,vxo,Fxo,YG,Txo,Mxo,Exo,V1,Cxo,Ze,zL,wxo,Ege,Axo,Lxo,qa,yxo,Cge,xxo,$xo,wge,kxo,Sxo,Age,Rxo,Pxo,Bxo,z,X1,Lge,Ixo,Nxo,KG,qxo,jxo,Dxo,z1,yge,Gxo,Oxo,ZG,Vxo,Xxo,zxo,Q1,xge,Qxo,Wxo,eO,Hxo,Uxo,Jxo,W1,$ge,Yxo,Kxo,oO,Zxo,e$o,o$o,H1,kge,r$o,t$o,rO,a$o,n$o,s$o,U1,Sge,l$o,i$o,tO,d$o,c$o,f$o,J1,Rge,m$o,g$o,aO,h$o,p$o,_$o,Y1,Pge,u$o,b$o,nO,v$o,F$o,T$o,K1,Bge,M$o,E$o,sO,C$o,w$o,A$o,Z1,Ige,L$o,y$o,lO,x$o,$$o,k$o,e2,Nge,S$o,R$o,iO,P$o,B$o,I$o,o2,qge,N$o,q$o,dO,j$o,D$o,G$o,r2,jge,O$o,V$o,cO,X$o,z$o,Q$o,t2,Dge,W$o,H$o,fO,U$o,J$o,Y$o,a2,Gge,K$o,Z$o,mO,eko,oko,rko,n2,Oge,tko,ako,gO,nko,sko,lko,s2,Vge,iko,dko,hO,cko,fko,mko,l2,Xge,gko,hko,pO,pko,_ko,uko,i2,zge,bko,vko,_O,Fko,Tko,Mko,d2,Qge,Eko,Cko,uO,wko,Ako,Lko,c2,Wge,yko,xko,bO,$ko,kko,Sko,f2,Hge,Rko,Pko,vO,Bko,Iko,Nko,m2,Uge,qko,jko,FO,Dko,Gko,Oko,g2,Jge,Vko,Xko,TO,zko,Qko,Wko,h2,Yge,Hko,Uko,MO,Jko,Yko,Kko,p2,Kge,Zko,eSo,EO,oSo,rSo,tSo,_2,Zge,aSo,nSo,CO,sSo,lSo,iSo,u2,ehe,dSo,cSo,wO,fSo,mSo,gSo,b2,ohe,hSo,pSo,AO,_So,uSo,bSo,v2,rhe,vSo,FSo,LO,TSo,MSo,ESo,F2,the,CSo,wSo,yO,ASo,LSo,ySo,T2,ahe,xSo,$So,xO,kSo,SSo,RSo,M2,nhe,PSo,BSo,$O,ISo,NSo,qSo,E2,she,jSo,DSo,kO,GSo,OSo,VSo,C2,lhe,XSo,zSo,SO,QSo,WSo,HSo,w2,ihe,USo,JSo,RO,YSo,KSo,ZSo,A2,dhe,eRo,oRo,PO,rRo,tRo,aRo,L2,che,nRo,sRo,BO,lRo,iRo,dRo,y2,fhe,cRo,fRo,IO,mRo,gRo,hRo,x2,mhe,pRo,_Ro,NO,uRo,bRo,vRo,$2,FRo,ghe,TRo,MRo,hhe,ERo,CRo,k2,FXe,Ji,S2,phe,QL,wRo,_he,ARo,TXe,Ro,WL,LRo,Yi,yRo,qO,xRo,$Ro,jO,kRo,SRo,RRo,HL,PRo,uhe,BRo,IRo,NRo,ft,UL,qRo,bhe,jRo,DRo,Ki,GRo,vhe,ORo,VRo,DO,XRo,zRo,QRo,R2,WRo,eo,JL,HRo,Fhe,URo,JRo,ja,YRo,The,KRo,ZRo,Mhe,ePo,oPo,Ehe,rPo,tPo,aPo,W,P2,Che,nPo,sPo,GO,lPo,iPo,dPo,B2,whe,cPo,fPo,OO,mPo,gPo,hPo,I2,Ahe,pPo,_Po,VO,uPo,bPo,vPo,N2,Lhe,FPo,TPo,XO,MPo,EPo,CPo,q2,yhe,wPo,APo,zO,LPo,yPo,xPo,j2,xhe,$Po,kPo,QO,SPo,RPo,PPo,D2,$he,BPo,IPo,WO,NPo,qPo,jPo,G2,khe,DPo,GPo,HO,OPo,VPo,XPo,O2,She,zPo,QPo,UO,WPo,HPo,UPo,V2,Rhe,JPo,YPo,JO,KPo,ZPo,eBo,X2,Phe,oBo,rBo,YO,tBo,aBo,nBo,z2,Bhe,sBo,lBo,KO,iBo,dBo,cBo,Q2,Ihe,fBo,mBo,ZO,gBo,hBo,pBo,W2,Nhe,_Bo,uBo,eV,bBo,vBo,FBo,H2,qhe,TBo,MBo,oV,EBo,CBo,wBo,U2,jhe,ABo,LBo,rV,yBo,xBo,$Bo,J2,Dhe,kBo,SBo,tV,RBo,PBo,BBo,Y2,Ghe,IBo,NBo,aV,qBo,jBo,DBo,K2,Ohe,GBo,OBo,nV,VBo,XBo,zBo,Z2,Vhe,QBo,WBo,sV,HBo,UBo,JBo,eb,Xhe,YBo,KBo,lV,ZBo,eIo,oIo,ob,zhe,rIo,tIo,iV,aIo,nIo,sIo,rb,Qhe,lIo,iIo,dV,dIo,cIo,fIo,tb,Whe,mIo,gIo,cV,hIo,pIo,_Io,ab,Hhe,uIo,bIo,fV,vIo,FIo,TIo,nb,Uhe,MIo,EIo,mV,CIo,wIo,AIo,sb,Jhe,LIo,yIo,gV,xIo,$Io,kIo,lb,Yhe,SIo,RIo,hV,PIo,BIo,IIo,ib,Khe,NIo,qIo,pV,jIo,DIo,GIo,db,Zhe,OIo,VIo,_V,XIo,zIo,QIo,cb,epe,WIo,HIo,uV,UIo,JIo,YIo,fb,ope,KIo,ZIo,bV,eNo,oNo,rNo,mb,rpe,tNo,aNo,vV,nNo,sNo,lNo,gb,tpe,iNo,dNo,ape,cNo,fNo,mNo,hb,npe,gNo,hNo,FV,pNo,_No,uNo,pb,spe,bNo,vNo,TV,FNo,TNo,MNo,_b,lpe,ENo,CNo,MV,wNo,ANo,LNo,ub,ipe,yNo,xNo,EV,$No,kNo,SNo,bb,RNo,dpe,PNo,BNo,cpe,INo,NNo,vb,MXe,Zi,Fb,fpe,YL,qNo,mpe,jNo,EXe,Po,KL,DNo,ed,GNo,CV,ONo,VNo,wV,XNo,zNo,QNo,ZL,WNo,gpe,HNo,UNo,JNo,mt,ey,YNo,hpe,KNo,ZNo,od,eqo,ppe,oqo,rqo,AV,tqo,aqo,nqo,Tb,sqo,oo,oy,lqo,_pe,iqo,dqo,Da,cqo,upe,fqo,mqo,bpe,gqo,hqo,vpe,pqo,_qo,uqo,pe,Mb,Fpe,bqo,vqo,LV,Fqo,Tqo,Mqo,Eb,Tpe,Eqo,Cqo,yV,wqo,Aqo,Lqo,Cb,Mpe,yqo,xqo,xV,$qo,kqo,Sqo,wb,Epe,Rqo,Pqo,$V,Bqo,Iqo,Nqo,Ab,Cpe,qqo,jqo,kV,Dqo,Gqo,Oqo,Lb,wpe,Vqo,Xqo,SV,zqo,Qqo,Wqo,yb,Ape,Hqo,Uqo,RV,Jqo,Yqo,Kqo,xb,Lpe,Zqo,ejo,PV,ojo,rjo,tjo,$b,ype,ajo,njo,BV,sjo,ljo,ijo,kb,xpe,djo,cjo,IV,fjo,mjo,gjo,Sb,$pe,hjo,pjo,NV,_jo,ujo,bjo,Rb,kpe,vjo,Fjo,qV,Tjo,Mjo,Ejo,Pb,Spe,Cjo,wjo,jV,Ajo,Ljo,yjo,Bb,Rpe,xjo,$jo,DV,kjo,Sjo,Rjo,Ib,Ppe,Pjo,Bjo,GV,Ijo,Njo,qjo,Nb,Bpe,jjo,Djo,OV,Gjo,Ojo,Vjo,qb,Ipe,Xjo,zjo,VV,Qjo,Wjo,Hjo,jb,Npe,Ujo,Jjo,XV,Yjo,Kjo,Zjo,Db,eDo,qpe,oDo,rDo,jpe,tDo,aDo,Gb,CXe,rd,Ob,Dpe,ry,nDo,Gpe,sDo,wXe,Bo,ty,lDo,td,iDo,zV,dDo,cDo,QV,fDo,mDo,gDo,ay,hDo,Ope,pDo,_Do,uDo,gt,ny,bDo,Vpe,vDo,FDo,ad,TDo,Xpe,MDo,EDo,WV,CDo,wDo,ADo,Vb,LDo,ro,sy,yDo,zpe,xDo,$Do,Ga,kDo,Qpe,SDo,RDo,Wpe,PDo,BDo,Hpe,IDo,NDo,qDo,B,Xb,Upe,jDo,DDo,HV,GDo,ODo,VDo,zb,Jpe,XDo,zDo,UV,QDo,WDo,HDo,Qb,Ype,UDo,JDo,JV,YDo,KDo,ZDo,Wb,Kpe,eGo,oGo,YV,rGo,tGo,aGo,Hb,Zpe,nGo,sGo,KV,lGo,iGo,dGo,Ub,e_e,cGo,fGo,ZV,mGo,gGo,hGo,Jb,o_e,pGo,_Go,eX,uGo,bGo,vGo,Yb,r_e,FGo,TGo,oX,MGo,EGo,CGo,Kb,t_e,wGo,AGo,rX,LGo,yGo,xGo,Zb,a_e,$Go,kGo,tX,SGo,RGo,PGo,e3,n_e,BGo,IGo,aX,NGo,qGo,jGo,o3,s_e,DGo,GGo,nX,OGo,VGo,XGo,r3,l_e,zGo,QGo,sX,WGo,HGo,UGo,t3,i_e,JGo,YGo,lX,KGo,ZGo,eOo,a3,d_e,oOo,rOo,iX,tOo,aOo,nOo,n3,c_e,sOo,lOo,dX,iOo,dOo,cOo,s3,f_e,fOo,mOo,cX,gOo,hOo,pOo,l3,m_e,_Oo,uOo,fX,bOo,vOo,FOo,i3,g_e,TOo,MOo,mX,EOo,COo,wOo,d3,h_e,AOo,LOo,gX,yOo,xOo,$Oo,c3,p_e,kOo,SOo,hX,ROo,POo,BOo,f3,__e,IOo,NOo,pX,qOo,jOo,DOo,m3,u_e,GOo,OOo,_X,VOo,XOo,zOo,g3,b_e,QOo,WOo,uX,HOo,UOo,JOo,h3,v_e,YOo,KOo,bX,ZOo,eVo,oVo,p3,F_e,rVo,tVo,vX,aVo,nVo,sVo,_3,T_e,lVo,iVo,FX,dVo,cVo,fVo,u3,M_e,mVo,gVo,TX,hVo,pVo,_Vo,b3,E_e,uVo,bVo,MX,vVo,FVo,TVo,v3,C_e,MVo,EVo,EX,CVo,wVo,AVo,F3,w_e,LVo,yVo,CX,xVo,$Vo,kVo,T3,A_e,SVo,RVo,wX,PVo,BVo,IVo,M3,L_e,NVo,qVo,AX,jVo,DVo,GVo,E3,y_e,OVo,VVo,LX,XVo,zVo,QVo,C3,x_e,WVo,HVo,yX,UVo,JVo,YVo,w3,$_e,KVo,ZVo,xX,eXo,oXo,rXo,A3,k_e,tXo,aXo,$X,nXo,sXo,lXo,L3,S_e,iXo,dXo,kX,cXo,fXo,mXo,y3,R_e,gXo,hXo,SX,pXo,_Xo,uXo,x3,P_e,bXo,vXo,RX,FXo,TXo,MXo,$3,B_e,EXo,CXo,PX,wXo,AXo,LXo,k3,I_e,yXo,xXo,BX,$Xo,kXo,SXo,S3,N_e,RXo,PXo,IX,BXo,IXo,NXo,R3,q_e,qXo,jXo,NX,DXo,GXo,OXo,P3,j_e,VXo,XXo,qX,zXo,QXo,WXo,B3,D_e,HXo,UXo,jX,JXo,YXo,KXo,I3,G_e,ZXo,ezo,DX,ozo,rzo,tzo,N3,O_e,azo,nzo,GX,szo,lzo,izo,q3,V_e,dzo,czo,OX,fzo,mzo,gzo,j3,X_e,hzo,pzo,VX,_zo,uzo,bzo,D3,z_e,vzo,Fzo,XX,Tzo,Mzo,Ezo,G3,Czo,Q_e,wzo,Azo,W_e,Lzo,yzo,O3,AXe,nd,V3,H_e,ly,xzo,U_e,$zo,LXe,Io,iy,kzo,sd,Szo,zX,Rzo,Pzo,QX,Bzo,Izo,Nzo,dy,qzo,J_e,jzo,Dzo,Gzo,ht,cy,Ozo,Y_e,Vzo,Xzo,ld,zzo,K_e,Qzo,Wzo,WX,Hzo,Uzo,Jzo,X3,Yzo,to,fy,Kzo,Z_e,Zzo,eQo,Oa,oQo,eue,rQo,tQo,oue,aQo,nQo,rue,sQo,lQo,iQo,Z,z3,tue,dQo,cQo,HX,fQo,mQo,gQo,Q3,aue,hQo,pQo,UX,_Qo,uQo,bQo,W3,nue,vQo,FQo,JX,TQo,MQo,EQo,H3,sue,CQo,wQo,YX,AQo,LQo,yQo,U3,lue,xQo,$Qo,KX,kQo,SQo,RQo,J3,iue,PQo,BQo,ZX,IQo,NQo,qQo,Y3,due,jQo,DQo,ez,GQo,OQo,VQo,K3,cue,XQo,zQo,oz,QQo,WQo,HQo,Z3,fue,UQo,JQo,rz,YQo,KQo,ZQo,ev,mue,eWo,oWo,tz,rWo,tWo,aWo,ov,gue,nWo,sWo,az,lWo,iWo,dWo,rv,hue,cWo,fWo,nz,mWo,gWo,hWo,tv,pue,pWo,_Wo,sz,uWo,bWo,vWo,av,_ue,FWo,TWo,lz,MWo,EWo,CWo,nv,uue,wWo,AWo,iz,LWo,yWo,xWo,sv,bue,$Wo,kWo,dz,SWo,RWo,PWo,lv,vue,BWo,IWo,cz,NWo,qWo,jWo,iv,Fue,DWo,GWo,fz,OWo,VWo,XWo,dv,Tue,zWo,QWo,mz,WWo,HWo,UWo,cv,Mue,JWo,YWo,gz,KWo,ZWo,eHo,fv,Eue,oHo,rHo,hz,tHo,aHo,nHo,mv,Cue,sHo,lHo,pz,iHo,dHo,cHo,gv,wue,fHo,mHo,_z,gHo,hHo,pHo,hv,Aue,_Ho,uHo,uz,bHo,vHo,FHo,pv,Lue,THo,MHo,bz,EHo,CHo,wHo,_v,yue,AHo,LHo,vz,yHo,xHo,$Ho,uv,xue,kHo,SHo,Fz,RHo,PHo,BHo,bv,$ue,IHo,NHo,Tz,qHo,jHo,DHo,vv,kue,GHo,OHo,Mz,VHo,XHo,zHo,Fv,Sue,QHo,WHo,Ez,HHo,UHo,JHo,Tv,YHo,Rue,KHo,ZHo,Pue,eUo,oUo,Mv,yXe,id,Ev,Bue,my,rUo,Iue,tUo,xXe,No,gy,aUo,dd,nUo,Cz,sUo,lUo,wz,iUo,dUo,cUo,hy,fUo,Nue,mUo,gUo,hUo,pt,py,pUo,que,_Uo,uUo,cd,bUo,jue,vUo,FUo,Az,TUo,MUo,EUo,Cv,CUo,ao,_y,wUo,Due,AUo,LUo,Va,yUo,Gue,xUo,$Uo,Oue,kUo,SUo,Vue,RUo,PUo,BUo,qo,wv,Xue,IUo,NUo,Lz,qUo,jUo,DUo,Av,zue,GUo,OUo,yz,VUo,XUo,zUo,Lv,Que,QUo,WUo,xz,HUo,UUo,JUo,yv,Wue,YUo,KUo,$z,ZUo,eJo,oJo,xv,Hue,rJo,tJo,kz,aJo,nJo,sJo,$v,Uue,lJo,iJo,Sz,dJo,cJo,fJo,kv,mJo,Jue,gJo,hJo,Yue,pJo,_Jo,Sv,$Xe,fd,Rv,Kue,uy,uJo,Zue,bJo,kXe,jo,by,vJo,md,FJo,Rz,TJo,MJo,Pz,EJo,CJo,wJo,vy,AJo,e1e,LJo,yJo,xJo,_t,Fy,$Jo,o1e,kJo,SJo,gd,RJo,r1e,PJo,BJo,Bz,IJo,NJo,qJo,Pv,jJo,no,Ty,DJo,t1e,GJo,OJo,Xa,VJo,a1e,XJo,zJo,n1e,QJo,WJo,s1e,HJo,UJo,JJo,U,Bv,l1e,YJo,KJo,Iz,ZJo,eYo,oYo,Iv,i1e,rYo,tYo,Nz,aYo,nYo,sYo,Nv,d1e,lYo,iYo,qz,dYo,cYo,fYo,qv,c1e,mYo,gYo,jz,hYo,pYo,_Yo,jv,f1e,uYo,bYo,Dz,vYo,FYo,TYo,Dv,m1e,MYo,EYo,Gz,CYo,wYo,AYo,Gv,g1e,LYo,yYo,Oz,xYo,$Yo,kYo,Ov,h1e,SYo,RYo,Vz,PYo,BYo,IYo,Vv,p1e,NYo,qYo,Xz,jYo,DYo,GYo,Xv,_1e,OYo,VYo,zz,XYo,zYo,QYo,zv,u1e,WYo,HYo,Qz,UYo,JYo,YYo,Qv,b1e,KYo,ZYo,Wz,eKo,oKo,rKo,Wv,v1e,tKo,aKo,Hz,nKo,sKo,lKo,Hv,F1e,iKo,dKo,Uz,cKo,fKo,mKo,Uv,T1e,gKo,hKo,Jz,pKo,_Ko,uKo,Jv,M1e,bKo,vKo,Yz,FKo,TKo,MKo,Yv,E1e,EKo,CKo,Kz,wKo,AKo,LKo,Kv,C1e,yKo,xKo,Zz,$Ko,kKo,SKo,Zv,w1e,RKo,PKo,eQ,BKo,IKo,NKo,eF,A1e,qKo,jKo,oQ,DKo,GKo,OKo,oF,L1e,VKo,XKo,rQ,zKo,QKo,WKo,rF,y1e,HKo,UKo,tQ,JKo,YKo,KKo,tF,x1e,ZKo,eZo,aQ,oZo,rZo,tZo,aF,$1e,aZo,nZo,nQ,sZo,lZo,iZo,nF,k1e,dZo,cZo,sQ,fZo,mZo,gZo,sF,S1e,hZo,pZo,lQ,_Zo,uZo,bZo,lF,R1e,vZo,FZo,iQ,TZo,MZo,EZo,iF,P1e,CZo,wZo,dQ,AZo,LZo,yZo,dF,B1e,xZo,$Zo,cQ,kZo,SZo,RZo,cF,I1e,PZo,BZo,fQ,IZo,NZo,qZo,fF,N1e,jZo,DZo,mQ,GZo,OZo,VZo,mF,q1e,XZo,zZo,gQ,QZo,WZo,HZo,gF,j1e,UZo,JZo,hQ,YZo,KZo,ZZo,hF,D1e,eer,oer,pQ,rer,ter,aer,pF,G1e,ner,ser,_Q,ler,ier,der,_F,O1e,cer,fer,uQ,mer,ger,her,uF,per,V1e,_er,uer,X1e,ber,ver,bF,SXe,hd,vF,z1e,My,Fer,Q1e,Ter,RXe,Do,Ey,Mer,pd,Eer,bQ,Cer,wer,vQ,Aer,Ler,yer,Cy,xer,W1e,$er,ker,Ser,ut,wy,Rer,H1e,Per,Ber,_d,Ier,U1e,Ner,qer,FQ,jer,Der,Ger,FF,Oer,so,Ay,Ver,J1e,Xer,zer,za,Qer,Y1e,Wer,Her,K1e,Uer,Jer,Z1e,Yer,Ker,Zer,V,TF,e2e,eor,oor,TQ,ror,tor,aor,MF,o2e,nor,sor,MQ,lor,ior,dor,EF,r2e,cor,mor,EQ,gor,hor,por,CF,t2e,_or,uor,CQ,bor,vor,For,wF,a2e,Tor,Mor,wQ,Eor,Cor,wor,AF,n2e,Aor,Lor,AQ,yor,xor,$or,LF,s2e,kor,Sor,LQ,Ror,Por,Bor,yF,l2e,Ior,Nor,yQ,qor,jor,Dor,xF,i2e,Gor,Oor,xQ,Vor,Xor,zor,$F,d2e,Qor,Wor,$Q,Hor,Uor,Jor,kF,c2e,Yor,Kor,kQ,Zor,err,orr,SF,f2e,rrr,trr,SQ,arr,nrr,srr,RF,m2e,lrr,irr,RQ,drr,crr,frr,PF,g2e,mrr,grr,PQ,hrr,prr,_rr,BF,h2e,urr,brr,BQ,vrr,Frr,Trr,IF,p2e,Mrr,Err,IQ,Crr,wrr,Arr,NF,_2e,Lrr,yrr,NQ,xrr,$rr,krr,qF,u2e,Srr,Rrr,qQ,Prr,Brr,Irr,jF,b2e,Nrr,qrr,jQ,jrr,Drr,Grr,DF,v2e,Orr,Vrr,DQ,Xrr,zrr,Qrr,GF,F2e,Wrr,Hrr,GQ,Urr,Jrr,Yrr,OF,T2e,Krr,Zrr,OQ,etr,otr,rtr,VF,M2e,ttr,atr,VQ,ntr,str,ltr,XF,E2e,itr,dtr,XQ,ctr,ftr,mtr,zF,C2e,gtr,htr,zQ,ptr,_tr,utr,QF,w2e,btr,vtr,QQ,Ftr,Ttr,Mtr,WF,A2e,Etr,Ctr,WQ,wtr,Atr,Ltr,HF,L2e,ytr,xtr,HQ,$tr,ktr,Str,UF,y2e,Rtr,Ptr,UQ,Btr,Itr,Ntr,JF,x2e,qtr,jtr,JQ,Dtr,Gtr,Otr,YF,$2e,Vtr,Xtr,YQ,ztr,Qtr,Wtr,KF,k2e,Htr,Utr,KQ,Jtr,Ytr,Ktr,ZF,S2e,Ztr,ear,ZQ,oar,rar,tar,eT,R2e,aar,nar,eW,sar,lar,iar,oT,P2e,dar,car,oW,far,mar,gar,rT,B2e,har,par,rW,_ar,uar,bar,tT,I2e,Far,Tar,tW,Mar,Ear,Car,aT,N2e,war,Aar,aW,Lar,yar,xar,nT,q2e,$ar,kar,nW,Sar,Rar,Par,sT,j2e,Bar,Iar,sW,Nar,qar,jar,lT,D2e,Dar,Gar,lW,Oar,Var,Xar,iT,G2e,zar,Qar,iW,War,Har,Uar,dT,Jar,O2e,Yar,Kar,V2e,Zar,enr,cT,PXe,ud,fT,X2e,Ly,onr,z2e,rnr,BXe,Go,yy,tnr,bd,anr,dW,nnr,snr,cW,lnr,inr,dnr,xy,cnr,Q2e,fnr,mnr,gnr,bt,$y,hnr,W2e,pnr,_nr,vd,unr,H2e,bnr,vnr,fW,Fnr,Tnr,Mnr,mT,Enr,lo,ky,Cnr,U2e,wnr,Anr,Qa,Lnr,J2e,ynr,xnr,Y2e,$nr,knr,K2e,Snr,Rnr,Pnr,Z2e,gT,ebe,Bnr,Inr,mW,Nnr,qnr,jnr,hT,Dnr,obe,Gnr,Onr,rbe,Vnr,Xnr,pT,IXe,Fd,_T,tbe,Sy,znr,abe,Qnr,NXe,Oo,Ry,Wnr,Td,Hnr,gW,Unr,Jnr,hW,Ynr,Knr,Znr,Py,esr,nbe,osr,rsr,tsr,vt,By,asr,sbe,nsr,ssr,Md,lsr,lbe,isr,dsr,pW,csr,fsr,msr,uT,gsr,io,Iy,hsr,ibe,psr,_sr,Wa,usr,dbe,bsr,vsr,cbe,Fsr,Tsr,fbe,Msr,Esr,Csr,ve,bT,mbe,wsr,Asr,_W,Lsr,ysr,xsr,vT,gbe,$sr,ksr,uW,Ssr,Rsr,Psr,FT,hbe,Bsr,Isr,bW,Nsr,qsr,jsr,TT,pbe,Dsr,Gsr,vW,Osr,Vsr,Xsr,Hs,_be,zsr,Qsr,FW,Wsr,Hsr,TW,Usr,Jsr,Ysr,MT,ube,Ksr,Zsr,MW,elr,olr,rlr,Us,bbe,tlr,alr,EW,nlr,slr,CW,llr,ilr,dlr,ET,vbe,clr,flr,wW,mlr,glr,hlr,Ft,Fbe,plr,_lr,AW,ulr,blr,LW,vlr,Flr,yW,Tlr,Mlr,Elr,CT,Tbe,Clr,wlr,xW,Alr,Llr,ylr,wT,Mbe,xlr,$lr,$W,klr,Slr,Rlr,AT,Ebe,Plr,Blr,kW,Ilr,Nlr,qlr,LT,Cbe,jlr,Dlr,SW,Glr,Olr,Vlr,yT,wbe,Xlr,zlr,RW,Qlr,Wlr,Hlr,xT,Abe,Ulr,Jlr,PW,Ylr,Klr,Zlr,$T,Lbe,eir,oir,BW,rir,tir,air,kT,nir,ybe,sir,lir,xbe,iir,dir,ST,qXe,Ed,RT,$be,Ny,cir,kbe,fir,jXe,Vo,qy,mir,Cd,gir,IW,hir,pir,NW,_ir,uir,bir,jy,vir,Sbe,Fir,Tir,Mir,Tt,Dy,Eir,Rbe,Cir,wir,wd,Air,Pbe,Lir,yir,qW,xir,$ir,kir,PT,Sir,co,Gy,Rir,Bbe,Pir,Bir,Ha,Iir,Ibe,Nir,qir,Nbe,jir,Dir,qbe,Gir,Oir,Vir,jbe,BT,Dbe,Xir,zir,jW,Qir,Wir,Hir,IT,Uir,Gbe,Jir,Yir,Obe,Kir,Zir,NT,DXe,Ad,qT,Vbe,Oy,edr,Xbe,odr,GXe,Xo,Vy,rdr,Ld,tdr,DW,adr,ndr,GW,sdr,ldr,idr,Xy,ddr,zbe,cdr,fdr,mdr,Mt,zy,gdr,Qbe,hdr,pdr,yd,_dr,Wbe,udr,bdr,OW,vdr,Fdr,Tdr,jT,Mdr,fo,Qy,Edr,Hbe,Cdr,wdr,Ua,Adr,Ube,Ldr,ydr,Jbe,xdr,$dr,Ybe,kdr,Sdr,Rdr,Kbe,DT,Zbe,Pdr,Bdr,VW,Idr,Ndr,qdr,GT,jdr,e3e,Ddr,Gdr,o3e,Odr,Vdr,OT,OXe,xd,VT,r3e,Wy,Xdr,t3e,zdr,VXe,zo,Hy,Qdr,$d,Wdr,XW,Hdr,Udr,zW,Jdr,Ydr,Kdr,Uy,Zdr,a3e,ecr,ocr,rcr,Et,Jy,tcr,n3e,acr,ncr,kd,scr,s3e,lcr,icr,QW,dcr,ccr,fcr,XT,mcr,mo,Yy,gcr,l3e,hcr,pcr,Ja,_cr,i3e,ucr,bcr,d3e,vcr,Fcr,c3e,Tcr,Mcr,Ecr,Pe,zT,f3e,Ccr,wcr,WW,Acr,Lcr,ycr,QT,m3e,xcr,$cr,HW,kcr,Scr,Rcr,WT,g3e,Pcr,Bcr,UW,Icr,Ncr,qcr,HT,h3e,jcr,Dcr,JW,Gcr,Ocr,Vcr,UT,p3e,Xcr,zcr,YW,Qcr,Wcr,Hcr,JT,_3e,Ucr,Jcr,KW,Ycr,Kcr,Zcr,YT,u3e,efr,ofr,ZW,rfr,tfr,afr,KT,b3e,nfr,sfr,eH,lfr,ifr,dfr,ZT,v3e,cfr,ffr,oH,mfr,gfr,hfr,e8,pfr,F3e,_fr,ufr,T3e,bfr,vfr,o8,XXe,Sd,r8,M3e,Ky,Ffr,E3e,Tfr,zXe,Qo,Zy,Mfr,Rd,Efr,rH,Cfr,wfr,tH,Afr,Lfr,yfr,e9,xfr,C3e,$fr,kfr,Sfr,Ct,o9,Rfr,w3e,Pfr,Bfr,Pd,Ifr,A3e,Nfr,qfr,aH,jfr,Dfr,Gfr,t8,Ofr,go,r9,Vfr,L3e,Xfr,zfr,Ya,Qfr,y3e,Wfr,Hfr,x3e,Ufr,Jfr,$3e,Yfr,Kfr,Zfr,rt,a8,k3e,emr,omr,nH,rmr,tmr,amr,n8,S3e,nmr,smr,sH,lmr,imr,dmr,s8,R3e,cmr,fmr,lH,mmr,gmr,hmr,l8,P3e,pmr,_mr,iH,umr,bmr,vmr,i8,B3e,Fmr,Tmr,dH,Mmr,Emr,Cmr,d8,wmr,I3e,Amr,Lmr,N3e,ymr,xmr,c8,QXe,Bd,f8,q3e,t9,$mr,j3e,kmr,WXe,Wo,a9,Smr,Id,Rmr,cH,Pmr,Bmr,fH,Imr,Nmr,qmr,n9,jmr,D3e,Dmr,Gmr,Omr,wt,s9,Vmr,G3e,Xmr,zmr,Nd,Qmr,O3e,Wmr,Hmr,mH,Umr,Jmr,Ymr,m8,Kmr,ho,l9,Zmr,V3e,egr,ogr,Ka,rgr,X3e,tgr,agr,z3e,ngr,sgr,Q3e,lgr,igr,dgr,Le,g8,W3e,cgr,fgr,gH,mgr,ggr,hgr,h8,H3e,pgr,_gr,hH,ugr,bgr,vgr,p8,U3e,Fgr,Tgr,pH,Mgr,Egr,Cgr,_8,J3e,wgr,Agr,_H,Lgr,ygr,xgr,u8,Y3e,$gr,kgr,uH,Sgr,Rgr,Pgr,b8,K3e,Bgr,Igr,bH,Ngr,qgr,jgr,v8,Z3e,Dgr,Ggr,vH,Ogr,Vgr,Xgr,F8,eve,zgr,Qgr,FH,Wgr,Hgr,Ugr,T8,ove,Jgr,Ygr,TH,Kgr,Zgr,ehr,M8,rve,ohr,rhr,MH,thr,ahr,nhr,E8,shr,tve,lhr,ihr,ave,dhr,chr,C8,HXe,qd,w8,nve,i9,fhr,sve,mhr,UXe,Ho,d9,ghr,jd,hhr,EH,phr,_hr,CH,uhr,bhr,vhr,c9,Fhr,lve,Thr,Mhr,Ehr,At,f9,Chr,ive,whr,Ahr,Dd,Lhr,dve,yhr,xhr,wH,$hr,khr,Shr,A8,Rhr,po,m9,Phr,cve,Bhr,Ihr,Za,Nhr,fve,qhr,jhr,mve,Dhr,Ghr,gve,Ohr,Vhr,Xhr,g9,L8,hve,zhr,Qhr,AH,Whr,Hhr,Uhr,y8,pve,Jhr,Yhr,LH,Khr,Zhr,epr,x8,opr,_ve,rpr,tpr,uve,apr,npr,$8,JXe,Gd,k8,bve,h9,spr,vve,lpr,YXe,Uo,p9,ipr,Od,dpr,yH,cpr,fpr,xH,mpr,gpr,hpr,_9,ppr,Fve,_pr,upr,bpr,Lt,u9,vpr,Tve,Fpr,Tpr,Vd,Mpr,Mve,Epr,Cpr,$H,wpr,Apr,Lpr,S8,ypr,_o,b9,xpr,Eve,$pr,kpr,en,Spr,Cve,Rpr,Ppr,wve,Bpr,Ipr,Ave,Npr,qpr,jpr,tt,R8,Lve,Dpr,Gpr,kH,Opr,Vpr,Xpr,P8,yve,zpr,Qpr,SH,Wpr,Hpr,Upr,B8,xve,Jpr,Ypr,RH,Kpr,Zpr,e_r,I8,$ve,o_r,r_r,PH,t_r,a_r,n_r,N8,kve,s_r,l_r,BH,i_r,d_r,c_r,q8,f_r,Sve,m_r,g_r,Rve,h_r,p_r,j8,KXe,Xd,D8,Pve,v9,__r,Bve,u_r,ZXe,Jo,F9,b_r,zd,v_r,IH,F_r,T_r,NH,M_r,E_r,C_r,T9,w_r,Ive,A_r,L_r,y_r,yt,M9,x_r,Nve,$_r,k_r,Qd,S_r,qve,R_r,P_r,qH,B_r,I_r,N_r,G8,q_r,uo,E9,j_r,jve,D_r,G_r,on,O_r,Dve,V_r,X_r,Gve,z_r,Q_r,Ove,W_r,H_r,U_r,Wd,O8,Vve,J_r,Y_r,jH,K_r,Z_r,eur,V8,Xve,our,rur,DH,tur,aur,nur,X8,zve,sur,lur,GH,iur,dur,cur,z8,fur,Qve,mur,gur,Wve,hur,pur,Q8,eze,Hd,W8,Hve,C9,_ur,Uve,uur,oze,Yo,w9,bur,Ud,vur,OH,Fur,Tur,VH,Mur,Eur,Cur,A9,wur,Jve,Aur,Lur,yur,xt,L9,xur,Yve,$ur,kur,Jd,Sur,Kve,Rur,Pur,XH,Bur,Iur,Nur,H8,qur,bo,y9,jur,Zve,Dur,Gur,rn,Our,eFe,Vur,Xur,oFe,zur,Qur,rFe,Wur,Hur,Uur,x9,U8,tFe,Jur,Yur,zH,Kur,Zur,e1r,J8,aFe,o1r,r1r,QH,t1r,a1r,n1r,Y8,s1r,nFe,l1r,i1r,sFe,d1r,c1r,K8,rze,Yd,Z8,lFe,$9,f1r,iFe,m1r,tze,Ko,k9,g1r,Kd,h1r,WH,p1r,_1r,HH,u1r,b1r,v1r,S9,F1r,dFe,T1r,M1r,E1r,$t,R9,C1r,cFe,w1r,A1r,Zd,L1r,fFe,y1r,x1r,UH,$1r,k1r,S1r,eM,R1r,vo,P9,P1r,mFe,B1r,I1r,tn,N1r,gFe,q1r,j1r,hFe,D1r,G1r,pFe,O1r,V1r,X1r,_Fe,oM,uFe,z1r,Q1r,JH,W1r,H1r,U1r,rM,J1r,bFe,Y1r,K1r,vFe,Z1r,e2r,tM,aze,ec,aM,FFe,B9,o2r,TFe,r2r,nze,Zo,I9,t2r,oc,a2r,YH,n2r,s2r,KH,l2r,i2r,d2r,N9,c2r,MFe,f2r,m2r,g2r,kt,q9,h2r,EFe,p2r,_2r,rc,u2r,CFe,b2r,v2r,ZH,F2r,T2r,M2r,nM,E2r,Fo,j9,C2r,wFe,w2r,A2r,an,L2r,AFe,y2r,x2r,LFe,$2r,k2r,yFe,S2r,R2r,P2r,at,sM,xFe,B2r,I2r,eU,N2r,q2r,j2r,lM,$Fe,D2r,G2r,oU,O2r,V2r,X2r,iM,kFe,z2r,Q2r,rU,W2r,H2r,U2r,dM,SFe,J2r,Y2r,tU,K2r,Z2r,ebr,cM,RFe,obr,rbr,aU,tbr,abr,nbr,fM,sbr,PFe,lbr,ibr,BFe,dbr,cbr,mM,sze,tc,gM,IFe,D9,fbr,NFe,mbr,lze,er,G9,gbr,ac,hbr,nU,pbr,_br,sU,ubr,bbr,vbr,O9,Fbr,qFe,Tbr,Mbr,Ebr,St,V9,Cbr,jFe,wbr,Abr,nc,Lbr,DFe,ybr,xbr,lU,$br,kbr,Sbr,hM,Rbr,To,X9,Pbr,GFe,Bbr,Ibr,nn,Nbr,OFe,qbr,jbr,VFe,Dbr,Gbr,XFe,Obr,Vbr,Xbr,zFe,pM,QFe,zbr,Qbr,iU,Wbr,Hbr,Ubr,_M,Jbr,WFe,Ybr,Kbr,HFe,Zbr,e3r,uM,ize,sc,bM,UFe,z9,o3r,JFe,r3r,dze,or,Q9,t3r,lc,a3r,dU,n3r,s3r,cU,l3r,i3r,d3r,W9,c3r,YFe,f3r,m3r,g3r,Rt,H9,h3r,KFe,p3r,_3r,ic,u3r,ZFe,b3r,v3r,fU,F3r,T3r,M3r,vM,E3r,xr,U9,C3r,eTe,w3r,A3r,sn,L3r,oTe,y3r,x3r,rTe,$3r,k3r,tTe,S3r,R3r,P3r,q,FM,aTe,B3r,I3r,mU,N3r,q3r,j3r,TM,nTe,D3r,G3r,gU,O3r,V3r,X3r,MM,sTe,z3r,Q3r,hU,W3r,H3r,U3r,EM,lTe,J3r,Y3r,pU,K3r,Z3r,evr,CM,iTe,ovr,rvr,_U,tvr,avr,nvr,wM,dTe,svr,lvr,uU,ivr,dvr,cvr,AM,cTe,fvr,mvr,bU,gvr,hvr,pvr,LM,fTe,_vr,uvr,vU,bvr,vvr,Fvr,yM,mTe,Tvr,Mvr,FU,Evr,Cvr,wvr,xM,gTe,Avr,Lvr,TU,yvr,xvr,$vr,$M,hTe,kvr,Svr,MU,Rvr,Pvr,Bvr,kM,pTe,Ivr,Nvr,EU,qvr,jvr,Dvr,SM,_Te,Gvr,Ovr,CU,Vvr,Xvr,zvr,RM,uTe,Qvr,Wvr,wU,Hvr,Uvr,Jvr,PM,bTe,Yvr,Kvr,AU,Zvr,eFr,oFr,BM,vTe,rFr,tFr,LU,aFr,nFr,sFr,IM,FTe,lFr,iFr,yU,dFr,cFr,fFr,NM,TTe,mFr,gFr,xU,hFr,pFr,_Fr,Js,MTe,uFr,bFr,$U,vFr,FFr,kU,TFr,MFr,EFr,qM,ETe,CFr,wFr,SU,AFr,LFr,yFr,jM,CTe,xFr,$Fr,RU,kFr,SFr,RFr,DM,wTe,PFr,BFr,PU,IFr,NFr,qFr,GM,ATe,jFr,DFr,BU,GFr,OFr,VFr,OM,LTe,XFr,zFr,IU,QFr,WFr,HFr,VM,yTe,UFr,JFr,NU,YFr,KFr,ZFr,XM,xTe,eTr,oTr,qU,rTr,tTr,aTr,zM,$Te,nTr,sTr,jU,lTr,iTr,dTr,QM,kTe,cTr,fTr,DU,mTr,gTr,hTr,WM,STe,pTr,_Tr,GU,uTr,bTr,vTr,HM,RTe,FTr,TTr,OU,MTr,ETr,CTr,UM,PTe,wTr,ATr,VU,LTr,yTr,xTr,JM,BTe,$Tr,kTr,XU,STr,RTr,PTr,YM,ITe,BTr,ITr,zU,NTr,qTr,jTr,KM,NTe,DTr,GTr,QU,OTr,VTr,XTr,ZM,qTe,zTr,QTr,WU,WTr,HTr,UTr,e4,jTe,JTr,YTr,HU,KTr,ZTr,e8r,o4,DTe,o8r,r8r,UU,t8r,a8r,n8r,r4,GTe,s8r,l8r,JU,i8r,d8r,c8r,t4,OTe,f8r,m8r,YU,g8r,h8r,p8r,a4,VTe,_8r,u8r,KU,b8r,v8r,F8r,n4,XTe,T8r,M8r,ZU,E8r,C8r,w8r,s4,zTe,A8r,L8r,eJ,y8r,x8r,$8r,l4,QTe,k8r,S8r,oJ,R8r,P8r,B8r,i4,WTe,I8r,N8r,rJ,q8r,j8r,D8r,d4,HTe,G8r,O8r,tJ,V8r,X8r,z8r,c4,UTe,Q8r,W8r,aJ,H8r,U8r,J8r,f4,JTe,Y8r,K8r,nJ,Z8r,eMr,oMr,m4,YTe,rMr,tMr,sJ,aMr,nMr,sMr,g4,KTe,lMr,iMr,lJ,dMr,cMr,fMr,h4,ZTe,mMr,gMr,iJ,hMr,pMr,_Mr,p4,cze,dc,_4,e8e,J9,uMr,o8e,bMr,fze,rr,Y9,vMr,cc,FMr,dJ,TMr,MMr,cJ,EMr,CMr,wMr,K9,AMr,r8e,LMr,yMr,xMr,Pt,Z9,$Mr,t8e,kMr,SMr,fc,RMr,a8e,PMr,BMr,fJ,IMr,NMr,qMr,u4,jMr,$r,ex,DMr,n8e,GMr,OMr,ln,VMr,s8e,XMr,zMr,l8e,QMr,WMr,i8e,HMr,UMr,JMr,se,b4,d8e,YMr,KMr,mJ,ZMr,e4r,o4r,v4,c8e,r4r,t4r,gJ,a4r,n4r,s4r,F4,f8e,l4r,i4r,hJ,d4r,c4r,f4r,T4,m8e,m4r,g4r,pJ,h4r,p4r,_4r,M4,g8e,u4r,b4r,_J,v4r,F4r,T4r,E4,h8e,M4r,E4r,uJ,C4r,w4r,A4r,C4,p8e,L4r,y4r,bJ,x4r,$4r,k4r,w4,_8e,S4r,R4r,vJ,P4r,B4r,I4r,A4,u8e,N4r,q4r,FJ,j4r,D4r,G4r,L4,b8e,O4r,V4r,TJ,X4r,z4r,Q4r,y4,v8e,W4r,H4r,MJ,U4r,J4r,Y4r,x4,F8e,K4r,Z4r,EJ,eEr,oEr,rEr,$4,T8e,tEr,aEr,CJ,nEr,sEr,lEr,k4,M8e,iEr,dEr,wJ,cEr,fEr,mEr,S4,E8e,gEr,hEr,AJ,pEr,_Er,uEr,R4,C8e,bEr,vEr,LJ,FEr,TEr,MEr,P4,w8e,EEr,CEr,yJ,wEr,AEr,LEr,B4,A8e,yEr,xEr,xJ,$Er,kEr,SEr,I4,L8e,REr,PEr,$J,BEr,IEr,NEr,N4,y8e,qEr,jEr,kJ,DEr,GEr,OEr,q4,x8e,VEr,XEr,SJ,zEr,QEr,WEr,j4,$8e,HEr,UEr,RJ,JEr,YEr,KEr,D4,k8e,ZEr,eCr,PJ,oCr,rCr,tCr,G4,mze,mc,O4,S8e,ox,aCr,R8e,nCr,gze,tr,rx,sCr,gc,lCr,BJ,iCr,dCr,IJ,cCr,fCr,mCr,tx,gCr,P8e,hCr,pCr,_Cr,Bt,ax,uCr,B8e,bCr,vCr,hc,FCr,I8e,TCr,MCr,NJ,ECr,CCr,wCr,V4,ACr,kr,nx,LCr,N8e,yCr,xCr,dn,$Cr,q8e,kCr,SCr,j8e,RCr,PCr,D8e,BCr,ICr,NCr,Me,X4,G8e,qCr,jCr,qJ,DCr,GCr,OCr,z4,O8e,VCr,XCr,jJ,zCr,QCr,WCr,Q4,V8e,HCr,UCr,DJ,JCr,YCr,KCr,W4,X8e,ZCr,e5r,GJ,o5r,r5r,t5r,H4,z8e,a5r,n5r,OJ,s5r,l5r,i5r,U4,Q8e,d5r,c5r,VJ,f5r,m5r,g5r,J4,W8e,h5r,p5r,XJ,_5r,u5r,b5r,Y4,H8e,v5r,F5r,zJ,T5r,M5r,E5r,K4,U8e,C5r,w5r,QJ,A5r,L5r,y5r,Z4,J8e,x5r,$5r,WJ,k5r,S5r,R5r,eE,Y8e,P5r,B5r,HJ,I5r,N5r,q5r,oE,K8e,j5r,D5r,UJ,G5r,O5r,V5r,rE,Z8e,X5r,z5r,JJ,Q5r,W5r,H5r,tE,hze,pc,aE,eMe,sx,U5r,oMe,J5r,pze,ar,lx,Y5r,_c,K5r,YJ,Z5r,e0r,KJ,o0r,r0r,t0r,ix,a0r,rMe,n0r,s0r,l0r,It,dx,i0r,tMe,d0r,c0r,uc,f0r,aMe,m0r,g0r,ZJ,h0r,p0r,_0r,nE,u0r,Sr,cx,b0r,nMe,v0r,F0r,cn,T0r,sMe,M0r,E0r,lMe,C0r,w0r,iMe,A0r,L0r,y0r,Qe,sE,dMe,x0r,$0r,eY,k0r,S0r,R0r,lE,cMe,P0r,B0r,oY,I0r,N0r,q0r,Ys,fMe,j0r,D0r,rY,G0r,O0r,tY,V0r,X0r,z0r,iE,mMe,Q0r,W0r,aY,H0r,U0r,J0r,dE,gMe,Y0r,K0r,nY,Z0r,ewr,owr,cE,hMe,rwr,twr,sY,awr,nwr,swr,fE,pMe,lwr,iwr,lY,dwr,cwr,fwr,mE,_ze,bc,gE,_Me,fx,mwr,uMe,gwr,uze,nr,mx,hwr,vc,pwr,iY,_wr,uwr,dY,bwr,vwr,Fwr,gx,Twr,bMe,Mwr,Ewr,Cwr,Nt,hx,wwr,vMe,Awr,Lwr,Fc,ywr,FMe,xwr,$wr,cY,kwr,Swr,Rwr,hE,Pwr,Rr,px,Bwr,TMe,Iwr,Nwr,fn,qwr,MMe,jwr,Dwr,EMe,Gwr,Owr,CMe,Vwr,Xwr,zwr,ie,pE,wMe,Qwr,Wwr,fY,Hwr,Uwr,Jwr,_E,AMe,Ywr,Kwr,mY,Zwr,eAr,oAr,uE,LMe,rAr,tAr,gY,aAr,nAr,sAr,bE,yMe,lAr,iAr,hY,dAr,cAr,fAr,vE,xMe,mAr,gAr,pY,hAr,pAr,_Ar,FE,$Me,uAr,bAr,_Y,vAr,FAr,TAr,TE,kMe,MAr,EAr,uY,CAr,wAr,AAr,ME,SMe,LAr,yAr,bY,xAr,$Ar,kAr,EE,RMe,SAr,RAr,vY,PAr,BAr,IAr,CE,PMe,NAr,qAr,FY,jAr,DAr,GAr,wE,BMe,OAr,VAr,TY,XAr,zAr,QAr,AE,IMe,WAr,HAr,MY,UAr,JAr,YAr,LE,NMe,KAr,ZAr,EY,e6r,o6r,r6r,yE,qMe,t6r,a6r,CY,n6r,s6r,l6r,xE,jMe,i6r,d6r,wY,c6r,f6r,m6r,$E,DMe,g6r,h6r,AY,p6r,_6r,u6r,kE,GMe,b6r,v6r,LY,F6r,T6r,M6r,SE,OMe,E6r,C6r,yY,w6r,A6r,L6r,RE,VMe,y6r,x6r,xY,$6r,k6r,S6r,PE,XMe,R6r,P6r,$Y,B6r,I6r,N6r,BE,bze,Tc,IE,zMe,_x,q6r,QMe,j6r,vze,sr,ux,D6r,Mc,G6r,kY,O6r,V6r,SY,X6r,z6r,Q6r,bx,W6r,WMe,H6r,U6r,J6r,qt,vx,Y6r,HMe,K6r,Z6r,Ec,e7r,UMe,o7r,r7r,RY,t7r,a7r,n7r,NE,s7r,Pr,Fx,l7r,JMe,i7r,d7r,mn,c7r,YMe,f7r,m7r,KMe,g7r,h7r,ZMe,p7r,_7r,u7r,ye,qE,e4e,b7r,v7r,PY,F7r,T7r,M7r,jE,o4e,E7r,C7r,BY,w7r,A7r,L7r,DE,r4e,y7r,x7r,IY,$7r,k7r,S7r,GE,t4e,R7r,P7r,NY,B7r,I7r,N7r,OE,a4e,q7r,j7r,qY,D7r,G7r,O7r,VE,n4e,V7r,X7r,jY,z7r,Q7r,W7r,XE,s4e,H7r,U7r,DY,J7r,Y7r,K7r,zE,l4e,Z7r,eLr,GY,oLr,rLr,tLr,QE,i4e,aLr,nLr,OY,sLr,lLr,iLr,WE,d4e,dLr,cLr,VY,fLr,mLr,gLr,HE,Fze,Cc,UE,c4e,Tx,hLr,f4e,pLr,Tze,lr,Mx,_Lr,wc,uLr,XY,bLr,vLr,zY,FLr,TLr,MLr,Ex,ELr,m4e,CLr,wLr,ALr,jt,Cx,LLr,g4e,yLr,xLr,Ac,$Lr,h4e,kLr,SLr,QY,RLr,PLr,BLr,JE,ILr,Br,wx,NLr,p4e,qLr,jLr,gn,DLr,_4e,GLr,OLr,u4e,VLr,XLr,b4e,zLr,QLr,WLr,te,YE,v4e,HLr,ULr,WY,JLr,YLr,KLr,KE,F4e,ZLr,eyr,HY,oyr,ryr,tyr,ZE,T4e,ayr,nyr,UY,syr,lyr,iyr,eC,M4e,dyr,cyr,JY,fyr,myr,gyr,oC,E4e,hyr,pyr,YY,_yr,uyr,byr,rC,C4e,vyr,Fyr,KY,Tyr,Myr,Eyr,tC,w4e,Cyr,wyr,ZY,Ayr,Lyr,yyr,aC,A4e,xyr,$yr,eK,kyr,Syr,Ryr,nC,L4e,Pyr,Byr,oK,Iyr,Nyr,qyr,sC,y4e,jyr,Dyr,rK,Gyr,Oyr,Vyr,lC,x4e,Xyr,zyr,tK,Qyr,Wyr,Hyr,iC,$4e,Uyr,Jyr,aK,Yyr,Kyr,Zyr,dC,k4e,e9r,o9r,nK,r9r,t9r,a9r,cC,S4e,n9r,s9r,sK,l9r,i9r,d9r,fC,R4e,c9r,f9r,lK,m9r,g9r,h9r,mC,P4e,p9r,_9r,iK,u9r,b9r,v9r,gC,B4e,F9r,T9r,dK,M9r,E9r,C9r,hC,I4e,w9r,A9r,cK,L9r,y9r,x9r,pC,N4e,$9r,k9r,fK,S9r,R9r,P9r,_C,q4e,B9r,I9r,mK,N9r,q9r,j9r,uC,j4e,D9r,G9r,gK,O9r,V9r,X9r,bC,D4e,z9r,Q9r,hK,W9r,H9r,U9r,vC,G4e,J9r,Y9r,pK,K9r,Z9r,exr,FC,O4e,oxr,rxr,_K,txr,axr,nxr,TC,V4e,sxr,lxr,uK,ixr,dxr,cxr,MC,X4e,fxr,mxr,bK,gxr,hxr,pxr,EC,Mze,Lc,CC,z4e,Ax,_xr,Q4e,uxr,Eze,ir,Lx,bxr,yc,vxr,vK,Fxr,Txr,FK,Mxr,Exr,Cxr,yx,wxr,W4e,Axr,Lxr,yxr,Dt,xx,xxr,H4e,$xr,kxr,xc,Sxr,U4e,Rxr,Pxr,TK,Bxr,Ixr,Nxr,wC,qxr,Ir,$x,jxr,J4e,Dxr,Gxr,hn,Oxr,Y4e,Vxr,Xxr,K4e,zxr,Qxr,Z4e,Wxr,Hxr,Uxr,_e,AC,eEe,Jxr,Yxr,MK,Kxr,Zxr,e$r,LC,oEe,o$r,r$r,EK,t$r,a$r,n$r,yC,rEe,s$r,l$r,CK,i$r,d$r,c$r,xC,tEe,f$r,m$r,wK,g$r,h$r,p$r,$C,aEe,_$r,u$r,AK,b$r,v$r,F$r,kC,nEe,T$r,M$r,LK,E$r,C$r,w$r,SC,sEe,A$r,L$r,yK,y$r,x$r,$$r,RC,lEe,k$r,S$r,xK,R$r,P$r,B$r,PC,iEe,I$r,N$r,$K,q$r,j$r,D$r,BC,dEe,G$r,O$r,kK,V$r,X$r,z$r,IC,cEe,Q$r,W$r,SK,H$r,U$r,J$r,NC,fEe,Y$r,K$r,RK,Z$r,ekr,okr,qC,mEe,rkr,tkr,PK,akr,nkr,skr,jC,gEe,lkr,ikr,BK,dkr,ckr,fkr,DC,hEe,mkr,gkr,IK,hkr,pkr,_kr,GC,pEe,ukr,bkr,NK,vkr,Fkr,Tkr,OC,_Ee,Mkr,Ekr,qK,Ckr,wkr,Akr,VC,Cze,$c,XC,uEe,kx,Lkr,bEe,ykr,wze,dr,Sx,xkr,kc,$kr,jK,kkr,Skr,DK,Rkr,Pkr,Bkr,Rx,Ikr,vEe,Nkr,qkr,jkr,Gt,Px,Dkr,FEe,Gkr,Okr,Sc,Vkr,TEe,Xkr,zkr,GK,Qkr,Wkr,Hkr,zC,Ukr,Nr,Bx,Jkr,MEe,Ykr,Kkr,pn,Zkr,EEe,eSr,oSr,CEe,rSr,tSr,wEe,aSr,nSr,sSr,Ix,QC,AEe,lSr,iSr,OK,dSr,cSr,fSr,WC,LEe,mSr,gSr,VK,hSr,pSr,_Sr,HC,Aze,Rc,UC,yEe,Nx,uSr,xEe,bSr,Lze,cr,qx,vSr,Pc,FSr,XK,TSr,MSr,zK,ESr,CSr,wSr,jx,ASr,$Ee,LSr,ySr,xSr,Ot,Dx,$Sr,kEe,kSr,SSr,Bc,RSr,SEe,PSr,BSr,QK,ISr,NSr,qSr,JC,jSr,qr,Gx,DSr,REe,GSr,OSr,_n,VSr,PEe,XSr,zSr,BEe,QSr,WSr,IEe,HSr,USr,JSr,NEe,YC,qEe,YSr,KSr,WK,ZSr,eRr,oRr,KC,yze,Ic,ZC,jEe,Ox,rRr,DEe,tRr,xze,fr,Vx,aRr,Nc,nRr,HK,sRr,lRr,UK,iRr,dRr,cRr,Xx,fRr,GEe,mRr,gRr,hRr,Vt,zx,pRr,OEe,_Rr,uRr,qc,bRr,VEe,vRr,FRr,JK,TRr,MRr,ERr,e5,CRr,jr,Qx,wRr,XEe,ARr,LRr,un,yRr,zEe,xRr,$Rr,QEe,kRr,SRr,WEe,RRr,PRr,BRr,de,o5,HEe,IRr,NRr,YK,qRr,jRr,DRr,r5,UEe,GRr,ORr,KK,VRr,XRr,zRr,t5,JEe,QRr,WRr,ZK,HRr,URr,JRr,a5,YEe,YRr,KRr,eZ,ZRr,ePr,oPr,n5,KEe,rPr,tPr,oZ,aPr,nPr,sPr,s5,ZEe,lPr,iPr,rZ,dPr,cPr,fPr,l5,eCe,mPr,gPr,tZ,hPr,pPr,_Pr,i5,oCe,uPr,bPr,aZ,vPr,FPr,TPr,d5,rCe,MPr,EPr,nZ,CPr,wPr,APr,c5,tCe,LPr,yPr,sZ,xPr,$Pr,kPr,f5,aCe,SPr,RPr,lZ,PPr,BPr,IPr,m5,nCe,NPr,qPr,iZ,jPr,DPr,GPr,g5,sCe,OPr,VPr,dZ,XPr,zPr,QPr,h5,lCe,WPr,HPr,cZ,UPr,JPr,YPr,p5,iCe,KPr,ZPr,fZ,eBr,oBr,rBr,_5,dCe,tBr,aBr,mZ,nBr,sBr,lBr,u5,cCe,iBr,dBr,gZ,cBr,fBr,mBr,b5,fCe,gBr,hBr,hZ,pBr,_Br,uBr,v5,mCe,bBr,vBr,pZ,FBr,TBr,MBr,F5,gCe,EBr,CBr,_Z,wBr,ABr,LBr,T5,$ze,jc,M5,hCe,Wx,yBr,pCe,xBr,kze,mr,Hx,$Br,Dc,kBr,uZ,SBr,RBr,bZ,PBr,BBr,IBr,Ux,NBr,_Ce,qBr,jBr,DBr,Xt,Jx,GBr,uCe,OBr,VBr,Gc,XBr,bCe,zBr,QBr,vZ,WBr,HBr,UBr,E5,JBr,Dr,Yx,YBr,vCe,KBr,ZBr,bn,eIr,FCe,oIr,rIr,TCe,tIr,aIr,MCe,nIr,sIr,lIr,ce,C5,ECe,iIr,dIr,FZ,cIr,fIr,mIr,w5,CCe,gIr,hIr,TZ,pIr,_Ir,uIr,A5,wCe,bIr,vIr,MZ,FIr,TIr,MIr,L5,ACe,EIr,CIr,EZ,wIr,AIr,LIr,y5,LCe,yIr,xIr,CZ,$Ir,kIr,SIr,x5,yCe,RIr,PIr,wZ,BIr,IIr,NIr,$5,xCe,qIr,jIr,AZ,DIr,GIr,OIr,k5,$Ce,VIr,XIr,LZ,zIr,QIr,WIr,S5,kCe,HIr,UIr,yZ,JIr,YIr,KIr,R5,SCe,ZIr,eNr,xZ,oNr,rNr,tNr,P5,RCe,aNr,nNr,$Z,sNr,lNr,iNr,B5,PCe,dNr,cNr,kZ,fNr,mNr,gNr,I5,BCe,hNr,pNr,SZ,_Nr,uNr,bNr,N5,ICe,vNr,FNr,RZ,TNr,MNr,ENr,q5,NCe,CNr,wNr,PZ,ANr,LNr,yNr,j5,qCe,xNr,$Nr,BZ,kNr,SNr,RNr,D5,jCe,PNr,BNr,IZ,INr,NNr,qNr,G5,DCe,jNr,DNr,NZ,GNr,ONr,VNr,O5,GCe,XNr,zNr,qZ,QNr,WNr,HNr,V5,OCe,UNr,JNr,jZ,YNr,KNr,ZNr,X5,Sze,Oc,z5,VCe,Kx,eqr,XCe,oqr,Rze,gr,Zx,rqr,Vc,tqr,DZ,aqr,nqr,GZ,sqr,lqr,iqr,e$,dqr,zCe,cqr,fqr,mqr,zt,o$,gqr,QCe,hqr,pqr,Xc,_qr,WCe,uqr,bqr,OZ,vqr,Fqr,Tqr,Q5,Mqr,Gr,r$,Eqr,HCe,Cqr,wqr,vn,Aqr,UCe,Lqr,yqr,JCe,xqr,$qr,YCe,kqr,Sqr,Rqr,KCe,W5,ZCe,Pqr,Bqr,VZ,Iqr,Nqr,qqr,H5,Pze,zc,U5,e5e,t$,jqr,o5e,Dqr,Bze,hr,a$,Gqr,Qc,Oqr,XZ,Vqr,Xqr,zZ,zqr,Qqr,Wqr,n$,Hqr,r5e,Uqr,Jqr,Yqr,Qt,s$,Kqr,t5e,Zqr,ejr,Wc,ojr,a5e,rjr,tjr,QZ,ajr,njr,sjr,J5,ljr,Or,l$,ijr,n5e,djr,cjr,Fn,fjr,s5e,mjr,gjr,l5e,hjr,pjr,i5e,_jr,ujr,bjr,d5e,Y5,c5e,vjr,Fjr,WZ,Tjr,Mjr,Ejr,K5,Ize,Hc,Z5,f5e,i$,Cjr,m5e,wjr,Nze,pr,d$,Ajr,Uc,Ljr,HZ,yjr,xjr,UZ,$jr,kjr,Sjr,c$,Rjr,g5e,Pjr,Bjr,Ijr,Wt,f$,Njr,h5e,qjr,jjr,Jc,Djr,p5e,Gjr,Ojr,JZ,Vjr,Xjr,zjr,e0,Qjr,Vr,m$,Wjr,_5e,Hjr,Ujr,Tn,Jjr,u5e,Yjr,Kjr,b5e,Zjr,eDr,v5e,oDr,rDr,tDr,oe,o0,F5e,aDr,nDr,YZ,sDr,lDr,iDr,r0,T5e,dDr,cDr,KZ,fDr,mDr,gDr,t0,M5e,hDr,pDr,ZZ,_Dr,uDr,bDr,a0,E5e,vDr,FDr,eee,TDr,MDr,EDr,n0,C5e,CDr,wDr,oee,ADr,LDr,yDr,s0,w5e,xDr,$Dr,ree,kDr,SDr,RDr,l0,A5e,PDr,BDr,tee,IDr,NDr,qDr,i0,L5e,jDr,DDr,aee,GDr,ODr,VDr,d0,y5e,XDr,zDr,nee,QDr,WDr,HDr,c0,x5e,UDr,JDr,see,YDr,KDr,ZDr,f0,$5e,eGr,oGr,lee,rGr,tGr,aGr,m0,k5e,nGr,sGr,iee,lGr,iGr,dGr,g0,S5e,cGr,fGr,dee,mGr,gGr,hGr,h0,R5e,pGr,_Gr,cee,uGr,bGr,vGr,p0,P5e,FGr,TGr,fee,MGr,EGr,CGr,_0,B5e,wGr,AGr,mee,LGr,yGr,xGr,u0,I5e,$Gr,kGr,gee,SGr,RGr,PGr,b0,N5e,BGr,IGr,hee,NGr,qGr,jGr,v0,q5e,DGr,GGr,pee,OGr,VGr,XGr,F0,j5e,zGr,QGr,_ee,WGr,HGr,UGr,T0,D5e,JGr,YGr,uee,KGr,ZGr,eOr,M0,G5e,oOr,rOr,bee,tOr,aOr,nOr,E0,O5e,sOr,lOr,vee,iOr,dOr,cOr,C0,V5e,fOr,mOr,Fee,gOr,hOr,pOr,w0,X5e,_Or,uOr,Tee,bOr,vOr,FOr,A0,z5e,TOr,MOr,Mee,EOr,COr,wOr,L0,Q5e,AOr,LOr,Eee,yOr,xOr,$Or,y0,qze,Yc,x0,W5e,g$,kOr,H5e,SOr,jze,_r,h$,ROr,Kc,POr,Cee,BOr,IOr,wee,NOr,qOr,jOr,p$,DOr,U5e,GOr,OOr,VOr,Ht,_$,XOr,J5e,zOr,QOr,Zc,WOr,Y5e,HOr,UOr,Aee,JOr,YOr,KOr,$0,ZOr,Xr,u$,eVr,K5e,oVr,rVr,Mn,tVr,Z5e,aVr,nVr,e0e,sVr,lVr,o0e,iVr,dVr,cVr,xe,k0,r0e,fVr,mVr,Lee,gVr,hVr,pVr,S0,t0e,_Vr,uVr,yee,bVr,vVr,FVr,R0,a0e,TVr,MVr,xee,EVr,CVr,wVr,P0,n0e,AVr,LVr,$ee,yVr,xVr,$Vr,B0,s0e,kVr,SVr,kee,RVr,PVr,BVr,I0,l0e,IVr,NVr,See,qVr,jVr,DVr,N0,i0e,GVr,OVr,Ree,VVr,XVr,zVr,q0,d0e,QVr,WVr,Pee,HVr,UVr,JVr,j0,c0e,YVr,KVr,Bee,ZVr,eXr,oXr,D0,f0e,rXr,tXr,Iee,aXr,nXr,sXr,G0,Dze,ef,O0,m0e,b$,lXr,g0e,iXr,Gze,ur,v$,dXr,of,cXr,Nee,fXr,mXr,qee,gXr,hXr,pXr,F$,_Xr,h0e,uXr,bXr,vXr,Ut,T$,FXr,p0e,TXr,MXr,rf,EXr,_0e,CXr,wXr,jee,AXr,LXr,yXr,V0,xXr,zr,M$,$Xr,u0e,kXr,SXr,En,RXr,b0e,PXr,BXr,v0e,IXr,NXr,F0e,qXr,jXr,DXr,Ee,X0,T0e,GXr,OXr,Dee,VXr,XXr,zXr,z0,M0e,QXr,WXr,Gee,HXr,UXr,JXr,Q0,E0e,YXr,KXr,Oee,ZXr,ezr,ozr,W0,C0e,rzr,tzr,Vee,azr,nzr,szr,H0,w0e,lzr,izr,Xee,dzr,czr,fzr,U0,A0e,mzr,gzr,zee,hzr,pzr,_zr,J0,L0e,uzr,bzr,Qee,vzr,Fzr,Tzr,Y0,y0e,Mzr,Ezr,Wee,Czr,wzr,Azr,K0,x0e,Lzr,yzr,Hee,xzr,$zr,kzr,Z0,$0e,Szr,Rzr,Uee,Pzr,Bzr,Izr,ew,k0e,Nzr,qzr,Jee,jzr,Dzr,Gzr,ow,S0e,Ozr,Vzr,Yee,Xzr,zzr,Qzr,rw,R0e,Wzr,Hzr,Kee,Uzr,Jzr,Yzr,tw,Oze,tf,aw,P0e,E$,Kzr,B0e,Zzr,Vze,br,C$,eQr,af,oQr,Zee,rQr,tQr,eoe,aQr,nQr,sQr,w$,lQr,I0e,iQr,dQr,cQr,Jt,A$,fQr,N0e,mQr,gQr,nf,hQr,q0e,pQr,_Qr,ooe,uQr,bQr,vQr,nw,FQr,Qr,L$,TQr,j0e,MQr,EQr,Cn,CQr,D0e,wQr,AQr,G0e,LQr,yQr,O0e,xQr,$Qr,kQr,$e,sw,V0e,SQr,RQr,roe,PQr,BQr,IQr,lw,X0e,NQr,qQr,toe,jQr,DQr,GQr,iw,z0e,OQr,VQr,aoe,XQr,zQr,QQr,dw,Q0e,WQr,HQr,noe,UQr,JQr,YQr,cw,W0e,KQr,ZQr,soe,eWr,oWr,rWr,fw,H0e,tWr,aWr,loe,nWr,sWr,lWr,mw,U0e,iWr,dWr,ioe,cWr,fWr,mWr,gw,J0e,gWr,hWr,doe,pWr,_Wr,uWr,hw,Y0e,bWr,vWr,coe,FWr,TWr,MWr,pw,K0e,EWr,CWr,foe,wWr,AWr,LWr,_w,Xze,sf,uw,Z0e,y$,yWr,ewe,xWr,zze,vr,x$,$Wr,lf,kWr,moe,SWr,RWr,goe,PWr,BWr,IWr,$$,NWr,owe,qWr,jWr,DWr,Yt,k$,GWr,rwe,OWr,VWr,df,XWr,twe,zWr,QWr,hoe,WWr,HWr,UWr,bw,JWr,Wr,S$,YWr,awe,KWr,ZWr,wn,eHr,nwe,oHr,rHr,swe,tHr,aHr,lwe,nHr,sHr,lHr,ke,vw,iwe,iHr,dHr,poe,cHr,fHr,mHr,Fw,dwe,gHr,hHr,_oe,pHr,_Hr,uHr,Tw,cwe,bHr,vHr,uoe,FHr,THr,MHr,Mw,fwe,EHr,CHr,boe,wHr,AHr,LHr,Ew,mwe,yHr,xHr,voe,$Hr,kHr,SHr,Cw,gwe,RHr,PHr,Foe,BHr,IHr,NHr,ww,hwe,qHr,jHr,Toe,DHr,GHr,OHr,Aw,pwe,VHr,XHr,Moe,zHr,QHr,WHr,Lw,_we,HHr,UHr,Eoe,JHr,YHr,KHr,yw,uwe,ZHr,eUr,Coe,oUr,rUr,tUr,xw,Qze,cf,$w,bwe,R$,aUr,vwe,nUr,Wze,Fr,P$,sUr,ff,lUr,woe,iUr,dUr,Aoe,cUr,fUr,mUr,B$,gUr,Fwe,hUr,pUr,_Ur,Kt,I$,uUr,Twe,bUr,vUr,mf,FUr,Mwe,TUr,MUr,Loe,EUr,CUr,wUr,kw,AUr,Hr,N$,LUr,Ewe,yUr,xUr,An,$Ur,Cwe,kUr,SUr,wwe,RUr,PUr,Awe,BUr,IUr,NUr,Se,Sw,Lwe,qUr,jUr,yoe,DUr,GUr,OUr,Rw,ywe,VUr,XUr,xoe,zUr,QUr,WUr,Pw,xwe,HUr,UUr,$oe,JUr,YUr,KUr,Bw,$we,ZUr,eJr,koe,oJr,rJr,tJr,Iw,kwe,aJr,nJr,Soe,sJr,lJr,iJr,Nw,Swe,dJr,cJr,Roe,fJr,mJr,gJr,qw,Rwe,hJr,pJr,Poe,_Jr,uJr,bJr,jw,Pwe,vJr,FJr,Boe,TJr,MJr,EJr,Dw,Bwe,CJr,wJr,Ioe,AJr,LJr,yJr,Gw,Iwe,xJr,$Jr,Noe,kJr,SJr,RJr,Ow,Hze,gf,Vw,Nwe,q$,PJr,qwe,BJr,Uze,Tr,j$,IJr,hf,NJr,qoe,qJr,jJr,joe,DJr,GJr,OJr,D$,VJr,jwe,XJr,zJr,QJr,Zt,G$,WJr,Dwe,HJr,UJr,pf,JJr,Gwe,YJr,KJr,Doe,ZJr,eYr,oYr,Xw,rYr,Ur,O$,tYr,Owe,aYr,nYr,Ln,sYr,Vwe,lYr,iYr,Xwe,dYr,cYr,zwe,fYr,mYr,gYr,Re,zw,Qwe,hYr,pYr,Goe,_Yr,uYr,bYr,Qw,Wwe,vYr,FYr,Ooe,TYr,MYr,EYr,Ww,Hwe,CYr,wYr,Voe,AYr,LYr,yYr,Hw,Uwe,xYr,$Yr,Xoe,kYr,SYr,RYr,Uw,Jwe,PYr,BYr,zoe,IYr,NYr,qYr,Jw,Ywe,jYr,DYr,Qoe,GYr,OYr,VYr,Yw,Kwe,XYr,zYr,Woe,QYr,WYr,HYr,Kw,Zwe,UYr,JYr,Hoe,YYr,KYr,ZYr,Zw,eAe,eKr,oKr,Uoe,rKr,tKr,aKr,eA,oAe,nKr,sKr,Joe,lKr,iKr,dKr,oA,Jze,_f,rA,rAe,V$,cKr,tAe,fKr,Yze,Mr,X$,mKr,uf,gKr,Yoe,hKr,pKr,Koe,_Kr,uKr,bKr,z$,vKr,aAe,FKr,TKr,MKr,ea,Q$,EKr,nAe,CKr,wKr,bf,AKr,sAe,LKr,yKr,Zoe,xKr,$Kr,kKr,tA,SKr,Jr,W$,RKr,lAe,PKr,BKr,yn,IKr,iAe,NKr,qKr,dAe,jKr,DKr,cAe,GKr,OKr,VKr,Ve,aA,fAe,XKr,zKr,ere,QKr,WKr,HKr,nA,mAe,UKr,JKr,ore,YKr,KKr,ZKr,sA,gAe,eZr,oZr,rre,rZr,tZr,aZr,lA,hAe,nZr,sZr,tre,lZr,iZr,dZr,iA,pAe,cZr,fZr,are,mZr,gZr,hZr,dA,_Ae,pZr,_Zr,nre,uZr,bZr,vZr,cA,uAe,FZr,TZr,sre,MZr,EZr,CZr,fA,bAe,wZr,AZr,lre,LZr,yZr,xZr,mA,Kze,vf,gA,vAe,H$,$Zr,FAe,kZr,Zze,Er,U$,SZr,Ff,RZr,ire,PZr,BZr,dre,IZr,NZr,qZr,J$,jZr,TAe,DZr,GZr,OZr,oa,Y$,VZr,MAe,XZr,zZr,Tf,QZr,EAe,WZr,HZr,cre,UZr,JZr,YZr,hA,KZr,Yr,K$,ZZr,CAe,eet,oet,xn,ret,wAe,tet,aet,AAe,net,set,LAe,iet,det,cet,Xe,pA,yAe,fet,met,fre,get,het,pet,_A,xAe,_et,uet,mre,bet,vet,Fet,uA,$Ae,Tet,Met,gre,Eet,Cet,wet,bA,kAe,Aet,Let,hre,yet,xet,$et,vA,SAe,ket,Set,pre,Ret,Pet,Bet,FA,RAe,Iet,Net,_re,qet,jet,Det,TA,PAe,Get,Oet,ure,Vet,Xet,zet,MA,BAe,Qet,Wet,bre,Het,Uet,Jet,EA,eQe,Mf,CA,IAe,Z$,Yet,NAe,Ket,oQe,Cr,ek,Zet,Ef,eot,vre,oot,rot,Fre,tot,aot,not,ok,sot,qAe,lot,iot,dot,ra,rk,cot,jAe,fot,mot,Cf,got,DAe,hot,pot,Tre,_ot,uot,bot,wA,vot,Kr,tk,Fot,GAe,Tot,Mot,$n,Eot,OAe,Cot,wot,VAe,Aot,Lot,XAe,yot,xot,$ot,zAe,AA,QAe,kot,Sot,Mre,Rot,Pot,Bot,LA,rQe,wf,yA,WAe,ak,Iot,HAe,Not,tQe,wr,nk,qot,Af,jot,Ere,Dot,Got,Cre,Oot,Vot,Xot,sk,zot,UAe,Qot,Wot,Hot,ta,lk,Uot,JAe,Jot,Yot,Lf,Kot,YAe,Zot,ert,wre,ort,rrt,trt,xA,art,Zr,ik,nrt,KAe,srt,lrt,kn,irt,ZAe,drt,crt,e6e,frt,mrt,o6e,grt,hrt,prt,dk,$A,r6e,_rt,urt,Are,brt,vrt,Frt,kA,t6e,Trt,Mrt,Lre,Ert,Crt,wrt,SA,aQe,yf,RA,a6e,ck,Art,n6e,Lrt,nQe,Ar,fk,yrt,xf,xrt,yre,$rt,krt,xre,Srt,Rrt,Prt,mk,Brt,s6e,Irt,Nrt,qrt,aa,gk,jrt,l6e,Drt,Grt,$f,Ort,i6e,Vrt,Xrt,$re,zrt,Qrt,Wrt,PA,Hrt,et,hk,Urt,d6e,Jrt,Yrt,Sn,Krt,c6e,Zrt,ett,f6e,ott,rtt,m6e,ttt,att,ntt,g6e,BA,h6e,stt,ltt,kre,itt,dtt,ctt,IA,sQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nL=new re({}),sL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),jf=new ftt({props:{warning:!0,$$slots:{default:[QQt]},$$scope:{ctx:$}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L610"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L633"}}),Yg=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L756"}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L403"}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18123/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L616"}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18123/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),_p=new ftt({props:{$$slots:{default:[UQt]},$$scope:{ctx:$}}}),up=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),CL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L89"}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L103"}}),qp=new ftt({props:{$$slots:{default:[YQt]},$$scope:{ctx:$}}}),jp=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L256"}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L783"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Op=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Qu=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L790"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Hu=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),G1=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L805"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),V1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),k2=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L812"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),R2=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),vb=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L819"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Tb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L828"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L873"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Mv=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L880"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Cv=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Sv=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L866"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L837"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L844"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L889"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),uT=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L928"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L855"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L935"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L958"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),t8=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L942"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L949"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L967"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),S8=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),j8=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L974"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L921"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L896"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L903"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L912"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),mA=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),wA=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),Li=o("Auto Classes"),Pf=l(),lt=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),oL=o("from_pretrained()"),Bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),$i=o("Instantiating one of "),Pn=a("a"),rL=o("AutoConfig"),Bn=o(", "),In=a("a"),tL=o("AutoModel"),ki=o(`, and
`),Nn=a("a"),aL=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),If=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),IS=o("will create a model that is an instance of "),Ri=a("a"),NS=o("BertModel"),qS=o("."),wo=l(),Ra=a("p"),jS=o("There is one class of "),Nf=a("code"),DS=o("AutoModel"),_He=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),oXe=l(),Pi=a("h2"),qf=a("a"),Aae=a("span"),F(nL.$$.fragment),uHe=l(),Lae=a("span"),bHe=o("Extending the Auto Classes"),rXe=l(),qn=a("p"),vHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yae=a("code"),FHe=o("NewModel"),THe=o(", make sure you have a "),xae=a("code"),MHe=o("NewModelConfig"),EHe=o(` then you can add those to the auto
classes like this:`),tXe=l(),F(sL.$$.fragment),aXe=l(),GS=a("p"),CHe=o("You will then be able to use the auto classes like you would usually do!"),nXe=l(),F(jf.$$.fragment),sXe=l(),Bi=a("h2"),Df=a("a"),$ae=a("span"),F(lL.$$.fragment),wHe=l(),kae=a("span"),AHe=o("AutoConfig"),lXe=l(),Ao=a("div"),F(iL.$$.fragment),LHe=l(),dL=a("p"),yHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),OS=a("a"),xHe=o("from_pretrained()"),$He=o(" class method."),kHe=l(),cL=a("p"),SHe=o("This class cannot be instantiated directly using "),Sae=a("code"),RHe=o("__init__()"),PHe=o(" (throws an error)."),BHe=l(),Lr=a("div"),F(fL.$$.fragment),IHe=l(),Rae=a("p"),NHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),qHe=l(),Ii=a("p"),jHe=o("The configuration class to instantiate is selected based on the "),Pae=a("code"),DHe=o("model_type"),GHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bae=a("code"),OHe=o("pretrained_model_name_or_path"),VHe=o(":"),XHe=l(),A=a("ul"),Gf=a("li"),Iae=a("strong"),zHe=o("albert"),QHe=o(" \u2014 "),VS=a("a"),WHe=o("AlbertConfig"),HHe=o(" (ALBERT model)"),UHe=l(),Of=a("li"),Nae=a("strong"),JHe=o("bart"),YHe=o(" \u2014 "),XS=a("a"),KHe=o("BartConfig"),ZHe=o(" (BART model)"),eUe=l(),Vf=a("li"),qae=a("strong"),oUe=o("beit"),rUe=o(" \u2014 "),zS=a("a"),tUe=o("BeitConfig"),aUe=o(" (BEiT model)"),nUe=l(),Xf=a("li"),jae=a("strong"),sUe=o("bert"),lUe=o(" \u2014 "),QS=a("a"),iUe=o("BertConfig"),dUe=o(" (BERT model)"),cUe=l(),zf=a("li"),Dae=a("strong"),fUe=o("bert-generation"),mUe=o(" \u2014 "),WS=a("a"),gUe=o("BertGenerationConfig"),hUe=o(" (Bert Generation model)"),pUe=l(),Qf=a("li"),Gae=a("strong"),_Ue=o("big_bird"),uUe=o(" \u2014 "),HS=a("a"),bUe=o("BigBirdConfig"),vUe=o(" (BigBird model)"),FUe=l(),Wf=a("li"),Oae=a("strong"),TUe=o("bigbird_pegasus"),MUe=o(" \u2014 "),US=a("a"),EUe=o("BigBirdPegasusConfig"),CUe=o(" (BigBird-Pegasus model)"),wUe=l(),Hf=a("li"),Vae=a("strong"),AUe=o("blenderbot"),LUe=o(" \u2014 "),JS=a("a"),yUe=o("BlenderbotConfig"),xUe=o(" (Blenderbot model)"),$Ue=l(),Uf=a("li"),Xae=a("strong"),kUe=o("blenderbot-small"),SUe=o(" \u2014 "),YS=a("a"),RUe=o("BlenderbotSmallConfig"),PUe=o(" (BlenderbotSmall model)"),BUe=l(),Jf=a("li"),zae=a("strong"),IUe=o("bloom"),NUe=o(" \u2014 "),KS=a("a"),qUe=o("BloomConfig"),jUe=o(" (BLOOM model)"),DUe=l(),Yf=a("li"),Qae=a("strong"),GUe=o("camembert"),OUe=o(" \u2014 "),ZS=a("a"),VUe=o("CamembertConfig"),XUe=o(" (CamemBERT model)"),zUe=l(),Kf=a("li"),Wae=a("strong"),QUe=o("canine"),WUe=o(" \u2014 "),eR=a("a"),HUe=o("CanineConfig"),UUe=o(" (CANINE model)"),JUe=l(),Zf=a("li"),Hae=a("strong"),YUe=o("clip"),KUe=o(" \u2014 "),oR=a("a"),ZUe=o("CLIPConfig"),eJe=o(" (CLIP model)"),oJe=l(),em=a("li"),Uae=a("strong"),rJe=o("codegen"),tJe=o(" \u2014 "),rR=a("a"),aJe=o("CodeGenConfig"),nJe=o(" (CodeGen model)"),sJe=l(),om=a("li"),Jae=a("strong"),lJe=o("convbert"),iJe=o(" \u2014 "),tR=a("a"),dJe=o("ConvBertConfig"),cJe=o(" (ConvBERT model)"),fJe=l(),rm=a("li"),Yae=a("strong"),mJe=o("convnext"),gJe=o(" \u2014 "),aR=a("a"),hJe=o("ConvNextConfig"),pJe=o(" (ConvNeXT model)"),_Je=l(),tm=a("li"),Kae=a("strong"),uJe=o("ctrl"),bJe=o(" \u2014 "),nR=a("a"),vJe=o("CTRLConfig"),FJe=o(" (CTRL model)"),TJe=l(),am=a("li"),Zae=a("strong"),MJe=o("cvt"),EJe=o(" \u2014 "),sR=a("a"),CJe=o("CvtConfig"),wJe=o(" (CvT model)"),AJe=l(),nm=a("li"),ene=a("strong"),LJe=o("data2vec-audio"),yJe=o(" \u2014 "),lR=a("a"),xJe=o("Data2VecAudioConfig"),$Je=o(" (Data2VecAudio model)"),kJe=l(),sm=a("li"),one=a("strong"),SJe=o("data2vec-text"),RJe=o(" \u2014 "),iR=a("a"),PJe=o("Data2VecTextConfig"),BJe=o(" (Data2VecText model)"),IJe=l(),lm=a("li"),rne=a("strong"),NJe=o("data2vec-vision"),qJe=o(" \u2014 "),dR=a("a"),jJe=o("Data2VecVisionConfig"),DJe=o(" (Data2VecVision model)"),GJe=l(),im=a("li"),tne=a("strong"),OJe=o("deberta"),VJe=o(" \u2014 "),cR=a("a"),XJe=o("DebertaConfig"),zJe=o(" (DeBERTa model)"),QJe=l(),dm=a("li"),ane=a("strong"),WJe=o("deberta-v2"),HJe=o(" \u2014 "),fR=a("a"),UJe=o("DebertaV2Config"),JJe=o(" (DeBERTa-v2 model)"),YJe=l(),cm=a("li"),nne=a("strong"),KJe=o("decision_transformer"),ZJe=o(" \u2014 "),mR=a("a"),eYe=o("DecisionTransformerConfig"),oYe=o(" (Decision Transformer model)"),rYe=l(),fm=a("li"),sne=a("strong"),tYe=o("deit"),aYe=o(" \u2014 "),gR=a("a"),nYe=o("DeiTConfig"),sYe=o(" (DeiT model)"),lYe=l(),mm=a("li"),lne=a("strong"),iYe=o("detr"),dYe=o(" \u2014 "),hR=a("a"),cYe=o("DetrConfig"),fYe=o(" (DETR model)"),mYe=l(),gm=a("li"),ine=a("strong"),gYe=o("distilbert"),hYe=o(" \u2014 "),pR=a("a"),pYe=o("DistilBertConfig"),_Ye=o(" (DistilBERT model)"),uYe=l(),hm=a("li"),dne=a("strong"),bYe=o("dpr"),vYe=o(" \u2014 "),_R=a("a"),FYe=o("DPRConfig"),TYe=o(" (DPR model)"),MYe=l(),pm=a("li"),cne=a("strong"),EYe=o("dpt"),CYe=o(" \u2014 "),uR=a("a"),wYe=o("DPTConfig"),AYe=o(" (DPT model)"),LYe=l(),_m=a("li"),fne=a("strong"),yYe=o("electra"),xYe=o(" \u2014 "),bR=a("a"),$Ye=o("ElectraConfig"),kYe=o(" (ELECTRA model)"),SYe=l(),um=a("li"),mne=a("strong"),RYe=o("encoder-decoder"),PYe=o(" \u2014 "),vR=a("a"),BYe=o("EncoderDecoderConfig"),IYe=o(" (Encoder decoder model)"),NYe=l(),bm=a("li"),gne=a("strong"),qYe=o("flaubert"),jYe=o(" \u2014 "),FR=a("a"),DYe=o("FlaubertConfig"),GYe=o(" (FlauBERT model)"),OYe=l(),vm=a("li"),hne=a("strong"),VYe=o("flava"),XYe=o(" \u2014 "),TR=a("a"),zYe=o("FlavaConfig"),QYe=o(" (FLAVA model)"),WYe=l(),Fm=a("li"),pne=a("strong"),HYe=o("fnet"),UYe=o(" \u2014 "),MR=a("a"),JYe=o("FNetConfig"),YYe=o(" (FNet model)"),KYe=l(),Tm=a("li"),_ne=a("strong"),ZYe=o("fsmt"),eKe=o(" \u2014 "),ER=a("a"),oKe=o("FSMTConfig"),rKe=o(" (FairSeq Machine-Translation model)"),tKe=l(),Mm=a("li"),une=a("strong"),aKe=o("funnel"),nKe=o(" \u2014 "),CR=a("a"),sKe=o("FunnelConfig"),lKe=o(" (Funnel Transformer model)"),iKe=l(),Em=a("li"),bne=a("strong"),dKe=o("glpn"),cKe=o(" \u2014 "),wR=a("a"),fKe=o("GLPNConfig"),mKe=o(" (GLPN model)"),gKe=l(),Cm=a("li"),vne=a("strong"),hKe=o("gpt2"),pKe=o(" \u2014 "),AR=a("a"),_Ke=o("GPT2Config"),uKe=o(" (OpenAI GPT-2 model)"),bKe=l(),wm=a("li"),Fne=a("strong"),vKe=o("gpt_neo"),FKe=o(" \u2014 "),LR=a("a"),TKe=o("GPTNeoConfig"),MKe=o(" (GPT Neo model)"),EKe=l(),Am=a("li"),Tne=a("strong"),CKe=o("gpt_neox"),wKe=o(" \u2014 "),yR=a("a"),AKe=o("GPTNeoXConfig"),LKe=o(" (GPT NeoX model)"),yKe=l(),Lm=a("li"),Mne=a("strong"),xKe=o("gptj"),$Ke=o(" \u2014 "),xR=a("a"),kKe=o("GPTJConfig"),SKe=o(" (GPT-J model)"),RKe=l(),ym=a("li"),Ene=a("strong"),PKe=o("groupvit"),BKe=o(" \u2014 "),$R=a("a"),IKe=o("GroupViTConfig"),NKe=o(" (GroupViT model)"),qKe=l(),xm=a("li"),Cne=a("strong"),jKe=o("hubert"),DKe=o(" \u2014 "),kR=a("a"),GKe=o("HubertConfig"),OKe=o(" (Hubert model)"),VKe=l(),$m=a("li"),wne=a("strong"),XKe=o("ibert"),zKe=o(" \u2014 "),SR=a("a"),QKe=o("IBertConfig"),WKe=o(" (I-BERT model)"),HKe=l(),km=a("li"),Ane=a("strong"),UKe=o("imagegpt"),JKe=o(" \u2014 "),RR=a("a"),YKe=o("ImageGPTConfig"),KKe=o(" (ImageGPT model)"),ZKe=l(),Sm=a("li"),Lne=a("strong"),eZe=o("layoutlm"),oZe=o(" \u2014 "),PR=a("a"),rZe=o("LayoutLMConfig"),tZe=o(" (LayoutLM model)"),aZe=l(),Rm=a("li"),yne=a("strong"),nZe=o("layoutlmv2"),sZe=o(" \u2014 "),BR=a("a"),lZe=o("LayoutLMv2Config"),iZe=o(" (LayoutLMv2 model)"),dZe=l(),Pm=a("li"),xne=a("strong"),cZe=o("layoutlmv3"),fZe=o(" \u2014 "),IR=a("a"),mZe=o("LayoutLMv3Config"),gZe=o(" (LayoutLMv3 model)"),hZe=l(),Bm=a("li"),$ne=a("strong"),pZe=o("led"),_Ze=o(" \u2014 "),NR=a("a"),uZe=o("LEDConfig"),bZe=o(" (LED model)"),vZe=l(),Im=a("li"),kne=a("strong"),FZe=o("levit"),TZe=o(" \u2014 "),qR=a("a"),MZe=o("LevitConfig"),EZe=o(" (LeViT model)"),CZe=l(),Nm=a("li"),Sne=a("strong"),wZe=o("longformer"),AZe=o(" \u2014 "),jR=a("a"),LZe=o("LongformerConfig"),yZe=o(" (Longformer model)"),xZe=l(),qm=a("li"),Rne=a("strong"),$Ze=o("longt5"),kZe=o(" \u2014 "),DR=a("a"),SZe=o("LongT5Config"),RZe=o(" (LongT5 model)"),PZe=l(),jm=a("li"),Pne=a("strong"),BZe=o("luke"),IZe=o(" \u2014 "),GR=a("a"),NZe=o("LukeConfig"),qZe=o(" (LUKE model)"),jZe=l(),Dm=a("li"),Bne=a("strong"),DZe=o("lxmert"),GZe=o(" \u2014 "),OR=a("a"),OZe=o("LxmertConfig"),VZe=o(" (LXMERT model)"),XZe=l(),Gm=a("li"),Ine=a("strong"),zZe=o("m2m_100"),QZe=o(" \u2014 "),VR=a("a"),WZe=o("M2M100Config"),HZe=o(" (M2M100 model)"),UZe=l(),Om=a("li"),Nne=a("strong"),JZe=o("marian"),YZe=o(" \u2014 "),XR=a("a"),KZe=o("MarianConfig"),ZZe=o(" (Marian model)"),eeo=l(),Vm=a("li"),qne=a("strong"),oeo=o("maskformer"),reo=o(" \u2014 "),zR=a("a"),teo=o("MaskFormerConfig"),aeo=o(" (MaskFormer model)"),neo=l(),Xm=a("li"),jne=a("strong"),seo=o("mbart"),leo=o(" \u2014 "),QR=a("a"),ieo=o("MBartConfig"),deo=o(" (mBART model)"),ceo=l(),zm=a("li"),Dne=a("strong"),feo=o("mctct"),meo=o(" \u2014 "),WR=a("a"),geo=o("MCTCTConfig"),heo=o(" (M-CTC-T model)"),peo=l(),Qm=a("li"),Gne=a("strong"),_eo=o("megatron-bert"),ueo=o(" \u2014 "),HR=a("a"),beo=o("MegatronBertConfig"),veo=o(" (Megatron-BERT model)"),Feo=l(),Wm=a("li"),One=a("strong"),Teo=o("mobilebert"),Meo=o(" \u2014 "),UR=a("a"),Eeo=o("MobileBertConfig"),Ceo=o(" (MobileBERT model)"),weo=l(),Hm=a("li"),Vne=a("strong"),Aeo=o("mobilevit"),Leo=o(" \u2014 "),JR=a("a"),yeo=o("MobileViTConfig"),xeo=o(" (MobileViT model)"),$eo=l(),Um=a("li"),Xne=a("strong"),keo=o("mpnet"),Seo=o(" \u2014 "),YR=a("a"),Reo=o("MPNetConfig"),Peo=o(" (MPNet model)"),Beo=l(),Jm=a("li"),zne=a("strong"),Ieo=o("mt5"),Neo=o(" \u2014 "),KR=a("a"),qeo=o("MT5Config"),jeo=o(" (MT5 model)"),Deo=l(),Ym=a("li"),Qne=a("strong"),Geo=o("mvp"),Oeo=o(" \u2014 "),ZR=a("a"),Veo=o("MvpConfig"),Xeo=o(" (MVP model)"),zeo=l(),Km=a("li"),Wne=a("strong"),Qeo=o("nezha"),Weo=o(" \u2014 "),eP=a("a"),Heo=o("NezhaConfig"),Ueo=o(" (Nezha model)"),Jeo=l(),Zm=a("li"),Hne=a("strong"),Yeo=o("nystromformer"),Keo=o(" \u2014 "),oP=a("a"),Zeo=o("NystromformerConfig"),eoo=o(" (Nystr\xF6mformer model)"),ooo=l(),eg=a("li"),Une=a("strong"),roo=o("openai-gpt"),too=o(" \u2014 "),rP=a("a"),aoo=o("OpenAIGPTConfig"),noo=o(" (OpenAI GPT model)"),soo=l(),og=a("li"),Jne=a("strong"),loo=o("opt"),ioo=o(" \u2014 "),tP=a("a"),doo=o("OPTConfig"),coo=o(" (OPT model)"),foo=l(),rg=a("li"),Yne=a("strong"),moo=o("pegasus"),goo=o(" \u2014 "),aP=a("a"),hoo=o("PegasusConfig"),poo=o(" (Pegasus model)"),_oo=l(),tg=a("li"),Kne=a("strong"),uoo=o("perceiver"),boo=o(" \u2014 "),nP=a("a"),voo=o("PerceiverConfig"),Foo=o(" (Perceiver model)"),Too=l(),ag=a("li"),Zne=a("strong"),Moo=o("plbart"),Eoo=o(" \u2014 "),sP=a("a"),Coo=o("PLBartConfig"),woo=o(" (PLBart model)"),Aoo=l(),ng=a("li"),ese=a("strong"),Loo=o("poolformer"),yoo=o(" \u2014 "),lP=a("a"),xoo=o("PoolFormerConfig"),$oo=o(" (PoolFormer model)"),koo=l(),sg=a("li"),ose=a("strong"),Soo=o("prophetnet"),Roo=o(" \u2014 "),iP=a("a"),Poo=o("ProphetNetConfig"),Boo=o(" (ProphetNet model)"),Ioo=l(),lg=a("li"),rse=a("strong"),Noo=o("qdqbert"),qoo=o(" \u2014 "),dP=a("a"),joo=o("QDQBertConfig"),Doo=o(" (QDQBert model)"),Goo=l(),ig=a("li"),tse=a("strong"),Ooo=o("rag"),Voo=o(" \u2014 "),cP=a("a"),Xoo=o("RagConfig"),zoo=o(" (RAG model)"),Qoo=l(),dg=a("li"),ase=a("strong"),Woo=o("realm"),Hoo=o(" \u2014 "),fP=a("a"),Uoo=o("RealmConfig"),Joo=o(" (REALM model)"),Yoo=l(),cg=a("li"),nse=a("strong"),Koo=o("reformer"),Zoo=o(" \u2014 "),mP=a("a"),ero=o("ReformerConfig"),oro=o(" (Reformer model)"),rro=l(),fg=a("li"),sse=a("strong"),tro=o("regnet"),aro=o(" \u2014 "),gP=a("a"),nro=o("RegNetConfig"),sro=o(" (RegNet model)"),lro=l(),mg=a("li"),lse=a("strong"),iro=o("rembert"),dro=o(" \u2014 "),hP=a("a"),cro=o("RemBertConfig"),fro=o(" (RemBERT model)"),mro=l(),gg=a("li"),ise=a("strong"),gro=o("resnet"),hro=o(" \u2014 "),pP=a("a"),pro=o("ResNetConfig"),_ro=o(" (ResNet model)"),uro=l(),hg=a("li"),dse=a("strong"),bro=o("retribert"),vro=o(" \u2014 "),_P=a("a"),Fro=o("RetriBertConfig"),Tro=o(" (RetriBERT model)"),Mro=l(),pg=a("li"),cse=a("strong"),Ero=o("roberta"),Cro=o(" \u2014 "),uP=a("a"),wro=o("RobertaConfig"),Aro=o(" (RoBERTa model)"),Lro=l(),_g=a("li"),fse=a("strong"),yro=o("roformer"),xro=o(" \u2014 "),bP=a("a"),$ro=o("RoFormerConfig"),kro=o(" (RoFormer model)"),Sro=l(),ug=a("li"),mse=a("strong"),Rro=o("segformer"),Pro=o(" \u2014 "),vP=a("a"),Bro=o("SegformerConfig"),Iro=o(" (SegFormer model)"),Nro=l(),bg=a("li"),gse=a("strong"),qro=o("sew"),jro=o(" \u2014 "),FP=a("a"),Dro=o("SEWConfig"),Gro=o(" (SEW model)"),Oro=l(),vg=a("li"),hse=a("strong"),Vro=o("sew-d"),Xro=o(" \u2014 "),TP=a("a"),zro=o("SEWDConfig"),Qro=o(" (SEW-D model)"),Wro=l(),Fg=a("li"),pse=a("strong"),Hro=o("speech-encoder-decoder"),Uro=o(" \u2014 "),MP=a("a"),Jro=o("SpeechEncoderDecoderConfig"),Yro=o(" (Speech Encoder decoder model)"),Kro=l(),Tg=a("li"),_se=a("strong"),Zro=o("speech_to_text"),eto=o(" \u2014 "),EP=a("a"),oto=o("Speech2TextConfig"),rto=o(" (Speech2Text model)"),tto=l(),Mg=a("li"),use=a("strong"),ato=o("speech_to_text_2"),nto=o(" \u2014 "),CP=a("a"),sto=o("Speech2Text2Config"),lto=o(" (Speech2Text2 model)"),ito=l(),Eg=a("li"),bse=a("strong"),dto=o("splinter"),cto=o(" \u2014 "),wP=a("a"),fto=o("SplinterConfig"),mto=o(" (Splinter model)"),gto=l(),Cg=a("li"),vse=a("strong"),hto=o("squeezebert"),pto=o(" \u2014 "),AP=a("a"),_to=o("SqueezeBertConfig"),uto=o(" (SqueezeBERT model)"),bto=l(),wg=a("li"),Fse=a("strong"),vto=o("swin"),Fto=o(" \u2014 "),LP=a("a"),Tto=o("SwinConfig"),Mto=o(" (Swin Transformer model)"),Eto=l(),Ag=a("li"),Tse=a("strong"),Cto=o("t5"),wto=o(" \u2014 "),yP=a("a"),Ato=o("T5Config"),Lto=o(" (T5 model)"),yto=l(),Lg=a("li"),Mse=a("strong"),xto=o("tapas"),$to=o(" \u2014 "),xP=a("a"),kto=o("TapasConfig"),Sto=o(" (TAPAS model)"),Rto=l(),yg=a("li"),Ese=a("strong"),Pto=o("trajectory_transformer"),Bto=o(" \u2014 "),$P=a("a"),Ito=o("TrajectoryTransformerConfig"),Nto=o(" (Trajectory Transformer model)"),qto=l(),xg=a("li"),Cse=a("strong"),jto=o("transfo-xl"),Dto=o(" \u2014 "),kP=a("a"),Gto=o("TransfoXLConfig"),Oto=o(" (Transformer-XL model)"),Vto=l(),$g=a("li"),wse=a("strong"),Xto=o("trocr"),zto=o(" \u2014 "),SP=a("a"),Qto=o("TrOCRConfig"),Wto=o(" (TrOCR model)"),Hto=l(),kg=a("li"),Ase=a("strong"),Uto=o("unispeech"),Jto=o(" \u2014 "),RP=a("a"),Yto=o("UniSpeechConfig"),Kto=o(" (UniSpeech model)"),Zto=l(),Sg=a("li"),Lse=a("strong"),eao=o("unispeech-sat"),oao=o(" \u2014 "),PP=a("a"),rao=o("UniSpeechSatConfig"),tao=o(" (UniSpeechSat model)"),aao=l(),Rg=a("li"),yse=a("strong"),nao=o("van"),sao=o(" \u2014 "),BP=a("a"),lao=o("VanConfig"),iao=o(" (VAN model)"),dao=l(),Pg=a("li"),xse=a("strong"),cao=o("vilt"),fao=o(" \u2014 "),IP=a("a"),mao=o("ViltConfig"),gao=o(" (ViLT model)"),hao=l(),Bg=a("li"),$se=a("strong"),pao=o("vision-encoder-decoder"),_ao=o(" \u2014 "),NP=a("a"),uao=o("VisionEncoderDecoderConfig"),bao=o(" (Vision Encoder decoder model)"),vao=l(),Ig=a("li"),kse=a("strong"),Fao=o("vision-text-dual-encoder"),Tao=o(" \u2014 "),qP=a("a"),Mao=o("VisionTextDualEncoderConfig"),Eao=o(" (VisionTextDualEncoder model)"),Cao=l(),Ng=a("li"),Sse=a("strong"),wao=o("visual_bert"),Aao=o(" \u2014 "),jP=a("a"),Lao=o("VisualBertConfig"),yao=o(" (VisualBERT model)"),xao=l(),qg=a("li"),Rse=a("strong"),$ao=o("vit"),kao=o(" \u2014 "),DP=a("a"),Sao=o("ViTConfig"),Rao=o(" (ViT model)"),Pao=l(),jg=a("li"),Pse=a("strong"),Bao=o("vit_mae"),Iao=o(" \u2014 "),GP=a("a"),Nao=o("ViTMAEConfig"),qao=o(" (ViTMAE model)"),jao=l(),Dg=a("li"),Bse=a("strong"),Dao=o("wav2vec2"),Gao=o(" \u2014 "),OP=a("a"),Oao=o("Wav2Vec2Config"),Vao=o(" (Wav2Vec2 model)"),Xao=l(),Gg=a("li"),Ise=a("strong"),zao=o("wav2vec2-conformer"),Qao=o(" \u2014 "),VP=a("a"),Wao=o("Wav2Vec2ConformerConfig"),Hao=o(" (Wav2Vec2-Conformer model)"),Uao=l(),Og=a("li"),Nse=a("strong"),Jao=o("wavlm"),Yao=o(" \u2014 "),XP=a("a"),Kao=o("WavLMConfig"),Zao=o(" (WavLM model)"),eno=l(),Vg=a("li"),qse=a("strong"),ono=o("xglm"),rno=o(" \u2014 "),zP=a("a"),tno=o("XGLMConfig"),ano=o(" (XGLM model)"),nno=l(),Xg=a("li"),jse=a("strong"),sno=o("xlm"),lno=o(" \u2014 "),QP=a("a"),ino=o("XLMConfig"),dno=o(" (XLM model)"),cno=l(),zg=a("li"),Dse=a("strong"),fno=o("xlm-prophetnet"),mno=o(" \u2014 "),WP=a("a"),gno=o("XLMProphetNetConfig"),hno=o(" (XLM-ProphetNet model)"),pno=l(),Qg=a("li"),Gse=a("strong"),_no=o("xlm-roberta"),uno=o(" \u2014 "),HP=a("a"),bno=o("XLMRobertaConfig"),vno=o(" (XLM-RoBERTa model)"),Fno=l(),Wg=a("li"),Ose=a("strong"),Tno=o("xlm-roberta-xl"),Mno=o(" \u2014 "),UP=a("a"),Eno=o("XLMRobertaXLConfig"),Cno=o(" (XLM-RoBERTa-XL model)"),wno=l(),Hg=a("li"),Vse=a("strong"),Ano=o("xlnet"),Lno=o(" \u2014 "),JP=a("a"),yno=o("XLNetConfig"),xno=o(" (XLNet model)"),$no=l(),Ug=a("li"),Xse=a("strong"),kno=o("yolos"),Sno=o(" \u2014 "),YP=a("a"),Rno=o("YolosConfig"),Pno=o(" (YOLOS model)"),Bno=l(),Jg=a("li"),zse=a("strong"),Ino=o("yoso"),Nno=o(" \u2014 "),KP=a("a"),qno=o("YosoConfig"),jno=o(" (YOSO model)"),Dno=l(),F(Yg.$$.fragment),Gno=l(),Kg=a("div"),F(mL.$$.fragment),Ono=l(),Qse=a("p"),Vno=o("Register a new configuration for this class."),iXe=l(),Ni=a("h2"),Zg=a("a"),Wse=a("span"),F(gL.$$.fragment),Xno=l(),Hse=a("span"),zno=o("AutoTokenizer"),dXe=l(),Lo=a("div"),F(hL.$$.fragment),Qno=l(),pL=a("p"),Wno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZP=a("a"),Hno=o("AutoTokenizer.from_pretrained()"),Uno=o(" class method."),Jno=l(),_L=a("p"),Yno=o("This class cannot be instantiated directly using "),Use=a("code"),Kno=o("__init__()"),Zno=o(" (throws an error)."),eso=l(),yr=a("div"),F(uL.$$.fragment),oso=l(),Jse=a("p"),rso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tso=l(),Pa=a("p"),aso=o("The tokenizer class to instantiate is selected based on the "),Yse=a("code"),nso=o("model_type"),sso=o(` property of the config object (either
passed as an argument or loaded from `),Kse=a("code"),lso=o("pretrained_model_name_or_path"),iso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zse=a("code"),dso=o("pretrained_model_name_or_path"),cso=o(":"),fso=l(),k=a("ul"),jn=a("li"),ele=a("strong"),mso=o("albert"),gso=o(" \u2014 "),eB=a("a"),hso=o("AlbertTokenizer"),pso=o(" or "),oB=a("a"),_so=o("AlbertTokenizerFast"),uso=o(" (ALBERT model)"),bso=l(),Dn=a("li"),ole=a("strong"),vso=o("bart"),Fso=o(" \u2014 "),rB=a("a"),Tso=o("BartTokenizer"),Mso=o(" or "),tB=a("a"),Eso=o("BartTokenizerFast"),Cso=o(" (BART model)"),wso=l(),Gn=a("li"),rle=a("strong"),Aso=o("barthez"),Lso=o(" \u2014 "),aB=a("a"),yso=o("BarthezTokenizer"),xso=o(" or "),nB=a("a"),$so=o("BarthezTokenizerFast"),kso=o(" (BARThez model)"),Sso=l(),eh=a("li"),tle=a("strong"),Rso=o("bartpho"),Pso=o(" \u2014 "),sB=a("a"),Bso=o("BartphoTokenizer"),Iso=o(" (BARTpho model)"),Nso=l(),On=a("li"),ale=a("strong"),qso=o("bert"),jso=o(" \u2014 "),lB=a("a"),Dso=o("BertTokenizer"),Gso=o(" or "),iB=a("a"),Oso=o("BertTokenizerFast"),Vso=o(" (BERT model)"),Xso=l(),oh=a("li"),nle=a("strong"),zso=o("bert-generation"),Qso=o(" \u2014 "),dB=a("a"),Wso=o("BertGenerationTokenizer"),Hso=o(" (Bert Generation model)"),Uso=l(),rh=a("li"),sle=a("strong"),Jso=o("bert-japanese"),Yso=o(" \u2014 "),cB=a("a"),Kso=o("BertJapaneseTokenizer"),Zso=o(" (BertJapanese model)"),elo=l(),th=a("li"),lle=a("strong"),olo=o("bertweet"),rlo=o(" \u2014 "),fB=a("a"),tlo=o("BertweetTokenizer"),alo=o(" (BERTweet model)"),nlo=l(),Vn=a("li"),ile=a("strong"),slo=o("big_bird"),llo=o(" \u2014 "),mB=a("a"),ilo=o("BigBirdTokenizer"),dlo=o(" or "),gB=a("a"),clo=o("BigBirdTokenizerFast"),flo=o(" (BigBird model)"),mlo=l(),Xn=a("li"),dle=a("strong"),glo=o("bigbird_pegasus"),hlo=o(" \u2014 "),hB=a("a"),plo=o("PegasusTokenizer"),_lo=o(" or "),pB=a("a"),ulo=o("PegasusTokenizerFast"),blo=o(" (BigBird-Pegasus model)"),vlo=l(),zn=a("li"),cle=a("strong"),Flo=o("blenderbot"),Tlo=o(" \u2014 "),_B=a("a"),Mlo=o("BlenderbotTokenizer"),Elo=o(" or "),uB=a("a"),Clo=o("BlenderbotTokenizerFast"),wlo=o(" (Blenderbot model)"),Alo=l(),ah=a("li"),fle=a("strong"),Llo=o("blenderbot-small"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("BlenderbotSmallTokenizer"),$lo=o(" (BlenderbotSmall model)"),klo=l(),nh=a("li"),mle=a("strong"),Slo=o("bloom"),Rlo=o(" \u2014 "),vB=a("a"),Plo=o("BloomTokenizerFast"),Blo=o(" (BLOOM model)"),Ilo=l(),sh=a("li"),gle=a("strong"),Nlo=o("byt5"),qlo=o(" \u2014 "),FB=a("a"),jlo=o("ByT5Tokenizer"),Dlo=o(" (ByT5 model)"),Glo=l(),Qn=a("li"),hle=a("strong"),Olo=o("camembert"),Vlo=o(" \u2014 "),TB=a("a"),Xlo=o("CamembertTokenizer"),zlo=o(" or "),MB=a("a"),Qlo=o("CamembertTokenizerFast"),Wlo=o(" (CamemBERT model)"),Hlo=l(),lh=a("li"),ple=a("strong"),Ulo=o("canine"),Jlo=o(" \u2014 "),EB=a("a"),Ylo=o("CanineTokenizer"),Klo=o(" (CANINE model)"),Zlo=l(),Wn=a("li"),_le=a("strong"),eio=o("clip"),oio=o(" \u2014 "),CB=a("a"),rio=o("CLIPTokenizer"),tio=o(" or "),wB=a("a"),aio=o("CLIPTokenizerFast"),nio=o(" (CLIP model)"),sio=l(),Hn=a("li"),ule=a("strong"),lio=o("codegen"),iio=o(" \u2014 "),AB=a("a"),dio=o("CodeGenTokenizer"),cio=o(" or "),LB=a("a"),fio=o("CodeGenTokenizerFast"),mio=o(" (CodeGen model)"),gio=l(),Un=a("li"),ble=a("strong"),hio=o("convbert"),pio=o(" \u2014 "),yB=a("a"),_io=o("ConvBertTokenizer"),uio=o(" or "),xB=a("a"),bio=o("ConvBertTokenizerFast"),vio=o(" (ConvBERT model)"),Fio=l(),Jn=a("li"),vle=a("strong"),Tio=o("cpm"),Mio=o(" \u2014 "),$B=a("a"),Eio=o("CpmTokenizer"),Cio=o(" or "),kB=a("a"),wio=o("CpmTokenizerFast"),Aio=o(" (CPM model)"),Lio=l(),ih=a("li"),Fle=a("strong"),yio=o("ctrl"),xio=o(" \u2014 "),SB=a("a"),$io=o("CTRLTokenizer"),kio=o(" (CTRL model)"),Sio=l(),Yn=a("li"),Tle=a("strong"),Rio=o("data2vec-text"),Pio=o(" \u2014 "),RB=a("a"),Bio=o("RobertaTokenizer"),Iio=o(" or "),PB=a("a"),Nio=o("RobertaTokenizerFast"),qio=o(" (Data2VecText model)"),jio=l(),Kn=a("li"),Mle=a("strong"),Dio=o("deberta"),Gio=o(" \u2014 "),BB=a("a"),Oio=o("DebertaTokenizer"),Vio=o(" or "),IB=a("a"),Xio=o("DebertaTokenizerFast"),zio=o(" (DeBERTa model)"),Qio=l(),Zn=a("li"),Ele=a("strong"),Wio=o("deberta-v2"),Hio=o(" \u2014 "),NB=a("a"),Uio=o("DebertaV2Tokenizer"),Jio=o(" or "),qB=a("a"),Yio=o("DebertaV2TokenizerFast"),Kio=o(" (DeBERTa-v2 model)"),Zio=l(),es=a("li"),Cle=a("strong"),edo=o("distilbert"),odo=o(" \u2014 "),jB=a("a"),rdo=o("DistilBertTokenizer"),tdo=o(" or "),DB=a("a"),ado=o("DistilBertTokenizerFast"),ndo=o(" (DistilBERT model)"),sdo=l(),os=a("li"),wle=a("strong"),ldo=o("dpr"),ido=o(" \u2014 "),GB=a("a"),ddo=o("DPRQuestionEncoderTokenizer"),cdo=o(" or "),OB=a("a"),fdo=o("DPRQuestionEncoderTokenizerFast"),mdo=o(" (DPR model)"),gdo=l(),rs=a("li"),Ale=a("strong"),hdo=o("electra"),pdo=o(" \u2014 "),VB=a("a"),_do=o("ElectraTokenizer"),udo=o(" or "),XB=a("a"),bdo=o("ElectraTokenizerFast"),vdo=o(" (ELECTRA model)"),Fdo=l(),dh=a("li"),Lle=a("strong"),Tdo=o("flaubert"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("FlaubertTokenizer"),Cdo=o(" (FlauBERT model)"),wdo=l(),ts=a("li"),yle=a("strong"),Ado=o("fnet"),Ldo=o(" \u2014 "),QB=a("a"),ydo=o("FNetTokenizer"),xdo=o(" or "),WB=a("a"),$do=o("FNetTokenizerFast"),kdo=o(" (FNet model)"),Sdo=l(),ch=a("li"),xle=a("strong"),Rdo=o("fsmt"),Pdo=o(" \u2014 "),HB=a("a"),Bdo=o("FSMTTokenizer"),Ido=o(" (FairSeq Machine-Translation model)"),Ndo=l(),as=a("li"),$le=a("strong"),qdo=o("funnel"),jdo=o(" \u2014 "),UB=a("a"),Ddo=o("FunnelTokenizer"),Gdo=o(" or "),JB=a("a"),Odo=o("FunnelTokenizerFast"),Vdo=o(" (Funnel Transformer model)"),Xdo=l(),ns=a("li"),kle=a("strong"),zdo=o("gpt2"),Qdo=o(" \u2014 "),YB=a("a"),Wdo=o("GPT2Tokenizer"),Hdo=o(" or "),KB=a("a"),Udo=o("GPT2TokenizerFast"),Jdo=o(" (OpenAI GPT-2 model)"),Ydo=l(),ss=a("li"),Sle=a("strong"),Kdo=o("gpt_neo"),Zdo=o(" \u2014 "),ZB=a("a"),eco=o("GPT2Tokenizer"),oco=o(" or "),eI=a("a"),rco=o("GPT2TokenizerFast"),tco=o(" (GPT Neo model)"),aco=l(),fh=a("li"),Rle=a("strong"),nco=o("gpt_neox"),sco=o(" \u2014 "),oI=a("a"),lco=o("GPTNeoXTokenizerFast"),ico=o(" (GPT NeoX model)"),dco=l(),ls=a("li"),Ple=a("strong"),cco=o("gptj"),fco=o(" \u2014 "),rI=a("a"),mco=o("GPT2Tokenizer"),gco=o(" or "),tI=a("a"),hco=o("GPT2TokenizerFast"),pco=o(" (GPT-J model)"),_co=l(),is=a("li"),Ble=a("strong"),uco=o("groupvit"),bco=o(" \u2014 "),aI=a("a"),vco=o("CLIPTokenizer"),Fco=o(" or "),nI=a("a"),Tco=o("CLIPTokenizerFast"),Mco=o(" (GroupViT model)"),Eco=l(),ds=a("li"),Ile=a("strong"),Cco=o("herbert"),wco=o(" \u2014 "),sI=a("a"),Aco=o("HerbertTokenizer"),Lco=o(" or "),lI=a("a"),yco=o("HerbertTokenizerFast"),xco=o(" (HerBERT model)"),$co=l(),mh=a("li"),Nle=a("strong"),kco=o("hubert"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("Wav2Vec2CTCTokenizer"),Pco=o(" (Hubert model)"),Bco=l(),cs=a("li"),qle=a("strong"),Ico=o("ibert"),Nco=o(" \u2014 "),dI=a("a"),qco=o("RobertaTokenizer"),jco=o(" or "),cI=a("a"),Dco=o("RobertaTokenizerFast"),Gco=o(" (I-BERT model)"),Oco=l(),fs=a("li"),jle=a("strong"),Vco=o("layoutlm"),Xco=o(" \u2014 "),fI=a("a"),zco=o("LayoutLMTokenizer"),Qco=o(" or "),mI=a("a"),Wco=o("LayoutLMTokenizerFast"),Hco=o(" (LayoutLM model)"),Uco=l(),ms=a("li"),Dle=a("strong"),Jco=o("layoutlmv2"),Yco=o(" \u2014 "),gI=a("a"),Kco=o("LayoutLMv2Tokenizer"),Zco=o(" or "),hI=a("a"),efo=o("LayoutLMv2TokenizerFast"),ofo=o(" (LayoutLMv2 model)"),rfo=l(),gs=a("li"),Gle=a("strong"),tfo=o("layoutlmv3"),afo=o(" \u2014 "),pI=a("a"),nfo=o("LayoutLMv3Tokenizer"),sfo=o(" or "),_I=a("a"),lfo=o("LayoutLMv3TokenizerFast"),ifo=o(" (LayoutLMv3 model)"),dfo=l(),hs=a("li"),Ole=a("strong"),cfo=o("layoutxlm"),ffo=o(" \u2014 "),uI=a("a"),mfo=o("LayoutXLMTokenizer"),gfo=o(" or "),bI=a("a"),hfo=o("LayoutXLMTokenizerFast"),pfo=o(" (LayoutXLM model)"),_fo=l(),ps=a("li"),Vle=a("strong"),ufo=o("led"),bfo=o(" \u2014 "),vI=a("a"),vfo=o("LEDTokenizer"),Ffo=o(" or "),FI=a("a"),Tfo=o("LEDTokenizerFast"),Mfo=o(" (LED model)"),Efo=l(),_s=a("li"),Xle=a("strong"),Cfo=o("longformer"),wfo=o(" \u2014 "),TI=a("a"),Afo=o("LongformerTokenizer"),Lfo=o(" or "),MI=a("a"),yfo=o("LongformerTokenizerFast"),xfo=o(" (Longformer model)"),$fo=l(),us=a("li"),zle=a("strong"),kfo=o("longt5"),Sfo=o(" \u2014 "),EI=a("a"),Rfo=o("T5Tokenizer"),Pfo=o(" or "),CI=a("a"),Bfo=o("T5TokenizerFast"),Ifo=o(" (LongT5 model)"),Nfo=l(),gh=a("li"),Qle=a("strong"),qfo=o("luke"),jfo=o(" \u2014 "),wI=a("a"),Dfo=o("LukeTokenizer"),Gfo=o(" (LUKE model)"),Ofo=l(),bs=a("li"),Wle=a("strong"),Vfo=o("lxmert"),Xfo=o(" \u2014 "),AI=a("a"),zfo=o("LxmertTokenizer"),Qfo=o(" or "),LI=a("a"),Wfo=o("LxmertTokenizerFast"),Hfo=o(" (LXMERT model)"),Ufo=l(),hh=a("li"),Hle=a("strong"),Jfo=o("m2m_100"),Yfo=o(" \u2014 "),yI=a("a"),Kfo=o("M2M100Tokenizer"),Zfo=o(" (M2M100 model)"),emo=l(),ph=a("li"),Ule=a("strong"),omo=o("marian"),rmo=o(" \u2014 "),xI=a("a"),tmo=o("MarianTokenizer"),amo=o(" (Marian model)"),nmo=l(),vs=a("li"),Jle=a("strong"),smo=o("mbart"),lmo=o(" \u2014 "),$I=a("a"),imo=o("MBartTokenizer"),dmo=o(" or "),kI=a("a"),cmo=o("MBartTokenizerFast"),fmo=o(" (mBART model)"),mmo=l(),Fs=a("li"),Yle=a("strong"),gmo=o("mbart50"),hmo=o(" \u2014 "),SI=a("a"),pmo=o("MBart50Tokenizer"),_mo=o(" or "),RI=a("a"),umo=o("MBart50TokenizerFast"),bmo=o(" (mBART-50 model)"),vmo=l(),Ts=a("li"),Kle=a("strong"),Fmo=o("megatron-bert"),Tmo=o(" \u2014 "),PI=a("a"),Mmo=o("BertTokenizer"),Emo=o(" or "),BI=a("a"),Cmo=o("BertTokenizerFast"),wmo=o(" (Megatron-BERT model)"),Amo=l(),_h=a("li"),Zle=a("strong"),Lmo=o("mluke"),ymo=o(" \u2014 "),II=a("a"),xmo=o("MLukeTokenizer"),$mo=o(" (mLUKE model)"),kmo=l(),Ms=a("li"),eie=a("strong"),Smo=o("mobilebert"),Rmo=o(" \u2014 "),NI=a("a"),Pmo=o("MobileBertTokenizer"),Bmo=o(" or "),qI=a("a"),Imo=o("MobileBertTokenizerFast"),Nmo=o(" (MobileBERT model)"),qmo=l(),Es=a("li"),oie=a("strong"),jmo=o("mpnet"),Dmo=o(" \u2014 "),jI=a("a"),Gmo=o("MPNetTokenizer"),Omo=o(" or "),DI=a("a"),Vmo=o("MPNetTokenizerFast"),Xmo=o(" (MPNet model)"),zmo=l(),Cs=a("li"),rie=a("strong"),Qmo=o("mt5"),Wmo=o(" \u2014 "),GI=a("a"),Hmo=o("MT5Tokenizer"),Umo=o(" or "),OI=a("a"),Jmo=o("MT5TokenizerFast"),Ymo=o(" (MT5 model)"),Kmo=l(),ws=a("li"),tie=a("strong"),Zmo=o("mvp"),ego=o(" \u2014 "),VI=a("a"),ogo=o("MvpTokenizer"),rgo=o(" or "),XI=a("a"),tgo=o("MvpTokenizerFast"),ago=o(" (MVP model)"),ngo=l(),As=a("li"),aie=a("strong"),sgo=o("nezha"),lgo=o(" \u2014 "),zI=a("a"),igo=o("BertTokenizer"),dgo=o(" or "),QI=a("a"),cgo=o("BertTokenizerFast"),fgo=o(" (Nezha model)"),mgo=l(),Ls=a("li"),nie=a("strong"),ggo=o("nystromformer"),hgo=o(" \u2014 "),WI=a("a"),pgo=o("AlbertTokenizer"),_go=o(" or "),HI=a("a"),ugo=o("AlbertTokenizerFast"),bgo=o(" (Nystr\xF6mformer model)"),vgo=l(),ys=a("li"),sie=a("strong"),Fgo=o("openai-gpt"),Tgo=o(" \u2014 "),UI=a("a"),Mgo=o("OpenAIGPTTokenizer"),Ego=o(" or "),JI=a("a"),Cgo=o("OpenAIGPTTokenizerFast"),wgo=o(" (OpenAI GPT model)"),Ago=l(),uh=a("li"),lie=a("strong"),Lgo=o("opt"),ygo=o(" \u2014 "),YI=a("a"),xgo=o("GPT2Tokenizer"),$go=o(" (OPT model)"),kgo=l(),xs=a("li"),iie=a("strong"),Sgo=o("pegasus"),Rgo=o(" \u2014 "),KI=a("a"),Pgo=o("PegasusTokenizer"),Bgo=o(" or "),ZI=a("a"),Igo=o("PegasusTokenizerFast"),Ngo=o(" (Pegasus model)"),qgo=l(),bh=a("li"),die=a("strong"),jgo=o("perceiver"),Dgo=o(" \u2014 "),eN=a("a"),Ggo=o("PerceiverTokenizer"),Ogo=o(" (Perceiver model)"),Vgo=l(),vh=a("li"),cie=a("strong"),Xgo=o("phobert"),zgo=o(" \u2014 "),oN=a("a"),Qgo=o("PhobertTokenizer"),Wgo=o(" (PhoBERT model)"),Hgo=l(),Fh=a("li"),fie=a("strong"),Ugo=o("plbart"),Jgo=o(" \u2014 "),rN=a("a"),Ygo=o("PLBartTokenizer"),Kgo=o(" (PLBart model)"),Zgo=l(),Th=a("li"),mie=a("strong"),eho=o("prophetnet"),oho=o(" \u2014 "),tN=a("a"),rho=o("ProphetNetTokenizer"),tho=o(" (ProphetNet model)"),aho=l(),$s=a("li"),gie=a("strong"),nho=o("qdqbert"),sho=o(" \u2014 "),aN=a("a"),lho=o("BertTokenizer"),iho=o(" or "),nN=a("a"),dho=o("BertTokenizerFast"),cho=o(" (QDQBert model)"),fho=l(),Mh=a("li"),hie=a("strong"),mho=o("rag"),gho=o(" \u2014 "),sN=a("a"),hho=o("RagTokenizer"),pho=o(" (RAG model)"),_ho=l(),ks=a("li"),pie=a("strong"),uho=o("realm"),bho=o(" \u2014 "),lN=a("a"),vho=o("RealmTokenizer"),Fho=o(" or "),iN=a("a"),Tho=o("RealmTokenizerFast"),Mho=o(" (REALM model)"),Eho=l(),Ss=a("li"),_ie=a("strong"),Cho=o("reformer"),who=o(" \u2014 "),dN=a("a"),Aho=o("ReformerTokenizer"),Lho=o(" or "),cN=a("a"),yho=o("ReformerTokenizerFast"),xho=o(" (Reformer model)"),$ho=l(),Rs=a("li"),uie=a("strong"),kho=o("rembert"),Sho=o(" \u2014 "),fN=a("a"),Rho=o("RemBertTokenizer"),Pho=o(" or "),mN=a("a"),Bho=o("RemBertTokenizerFast"),Iho=o(" (RemBERT model)"),Nho=l(),Ps=a("li"),bie=a("strong"),qho=o("retribert"),jho=o(" \u2014 "),gN=a("a"),Dho=o("RetriBertTokenizer"),Gho=o(" or "),hN=a("a"),Oho=o("RetriBertTokenizerFast"),Vho=o(" (RetriBERT model)"),Xho=l(),Bs=a("li"),vie=a("strong"),zho=o("roberta"),Qho=o(" \u2014 "),pN=a("a"),Who=o("RobertaTokenizer"),Hho=o(" or "),_N=a("a"),Uho=o("RobertaTokenizerFast"),Jho=o(" (RoBERTa model)"),Yho=l(),Is=a("li"),Fie=a("strong"),Kho=o("roformer"),Zho=o(" \u2014 "),uN=a("a"),epo=o("RoFormerTokenizer"),opo=o(" or "),bN=a("a"),rpo=o("RoFormerTokenizerFast"),tpo=o(" (RoFormer model)"),apo=l(),Eh=a("li"),Tie=a("strong"),npo=o("speech_to_text"),spo=o(" \u2014 "),vN=a("a"),lpo=o("Speech2TextTokenizer"),ipo=o(" (Speech2Text model)"),dpo=l(),Ch=a("li"),Mie=a("strong"),cpo=o("speech_to_text_2"),fpo=o(" \u2014 "),FN=a("a"),mpo=o("Speech2Text2Tokenizer"),gpo=o(" (Speech2Text2 model)"),hpo=l(),Ns=a("li"),Eie=a("strong"),ppo=o("splinter"),_po=o(" \u2014 "),TN=a("a"),upo=o("SplinterTokenizer"),bpo=o(" or "),MN=a("a"),vpo=o("SplinterTokenizerFast"),Fpo=o(" (Splinter model)"),Tpo=l(),qs=a("li"),Cie=a("strong"),Mpo=o("squeezebert"),Epo=o(" \u2014 "),EN=a("a"),Cpo=o("SqueezeBertTokenizer"),wpo=o(" or "),CN=a("a"),Apo=o("SqueezeBertTokenizerFast"),Lpo=o(" (SqueezeBERT model)"),ypo=l(),js=a("li"),wie=a("strong"),xpo=o("t5"),$po=o(" \u2014 "),wN=a("a"),kpo=o("T5Tokenizer"),Spo=o(" or "),AN=a("a"),Rpo=o("T5TokenizerFast"),Ppo=o(" (T5 model)"),Bpo=l(),wh=a("li"),Aie=a("strong"),Ipo=o("tapas"),Npo=o(" \u2014 "),LN=a("a"),qpo=o("TapasTokenizer"),jpo=o(" (TAPAS model)"),Dpo=l(),Ah=a("li"),Lie=a("strong"),Gpo=o("tapex"),Opo=o(" \u2014 "),yN=a("a"),Vpo=o("TapexTokenizer"),Xpo=o(" (TAPEX model)"),zpo=l(),Lh=a("li"),yie=a("strong"),Qpo=o("transfo-xl"),Wpo=o(" \u2014 "),xN=a("a"),Hpo=o("TransfoXLTokenizer"),Upo=o(" (Transformer-XL model)"),Jpo=l(),Ds=a("li"),xie=a("strong"),Ypo=o("vilt"),Kpo=o(" \u2014 "),$N=a("a"),Zpo=o("BertTokenizer"),e_o=o(" or "),kN=a("a"),o_o=o("BertTokenizerFast"),r_o=o(" (ViLT model)"),t_o=l(),Gs=a("li"),$ie=a("strong"),a_o=o("visual_bert"),n_o=o(" \u2014 "),SN=a("a"),s_o=o("BertTokenizer"),l_o=o(" or "),RN=a("a"),i_o=o("BertTokenizerFast"),d_o=o(" (VisualBERT model)"),c_o=l(),yh=a("li"),kie=a("strong"),f_o=o("wav2vec2"),m_o=o(" \u2014 "),PN=a("a"),g_o=o("Wav2Vec2CTCTokenizer"),h_o=o(" (Wav2Vec2 model)"),p_o=l(),xh=a("li"),Sie=a("strong"),__o=o("wav2vec2-conformer"),u_o=o(" \u2014 "),BN=a("a"),b_o=o("Wav2Vec2CTCTokenizer"),v_o=o(" (Wav2Vec2-Conformer model)"),F_o=l(),$h=a("li"),Rie=a("strong"),T_o=o("wav2vec2_phoneme"),M_o=o(" \u2014 "),IN=a("a"),E_o=o("Wav2Vec2PhonemeCTCTokenizer"),C_o=o(" (Wav2Vec2Phoneme model)"),w_o=l(),Os=a("li"),Pie=a("strong"),A_o=o("xglm"),L_o=o(" \u2014 "),NN=a("a"),y_o=o("XGLMTokenizer"),x_o=o(" or "),qN=a("a"),$_o=o("XGLMTokenizerFast"),k_o=o(" (XGLM model)"),S_o=l(),kh=a("li"),Bie=a("strong"),R_o=o("xlm"),P_o=o(" \u2014 "),jN=a("a"),B_o=o("XLMTokenizer"),I_o=o(" (XLM model)"),N_o=l(),Sh=a("li"),Iie=a("strong"),q_o=o("xlm-prophetnet"),j_o=o(" \u2014 "),DN=a("a"),D_o=o("XLMProphetNetTokenizer"),G_o=o(" (XLM-ProphetNet model)"),O_o=l(),Vs=a("li"),Nie=a("strong"),V_o=o("xlm-roberta"),X_o=o(" \u2014 "),GN=a("a"),z_o=o("XLMRobertaTokenizer"),Q_o=o(" or "),ON=a("a"),W_o=o("XLMRobertaTokenizerFast"),H_o=o(" (XLM-RoBERTa model)"),U_o=l(),Xs=a("li"),qie=a("strong"),J_o=o("xlm-roberta-xl"),Y_o=o(" \u2014 "),VN=a("a"),K_o=o("RobertaTokenizer"),Z_o=o(" or "),XN=a("a"),euo=o("RobertaTokenizerFast"),ouo=o(" (XLM-RoBERTa-XL model)"),ruo=l(),zs=a("li"),jie=a("strong"),tuo=o("xlnet"),auo=o(" \u2014 "),zN=a("a"),nuo=o("XLNetTokenizer"),suo=o(" or "),QN=a("a"),luo=o("XLNetTokenizerFast"),iuo=o(" (XLNet model)"),duo=l(),Qs=a("li"),Die=a("strong"),cuo=o("yoso"),fuo=o(" \u2014 "),WN=a("a"),muo=o("AlbertTokenizer"),guo=o(" or "),HN=a("a"),huo=o("AlbertTokenizerFast"),puo=o(" (YOSO model)"),_uo=l(),F(Rh.$$.fragment),uuo=l(),Ph=a("div"),F(bL.$$.fragment),buo=l(),Gie=a("p"),vuo=o("Register a new tokenizer in this mapping."),cXe=l(),qi=a("h2"),Bh=a("a"),Oie=a("span"),F(vL.$$.fragment),Fuo=l(),Vie=a("span"),Tuo=o("AutoFeatureExtractor"),fXe=l(),yo=a("div"),F(FL.$$.fragment),Muo=l(),TL=a("p"),Euo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UN=a("a"),Cuo=o("AutoFeatureExtractor.from_pretrained()"),wuo=o(" class method."),Auo=l(),ML=a("p"),Luo=o("This class cannot be instantiated directly using "),Xie=a("code"),yuo=o("__init__()"),xuo=o(" (throws an error)."),$uo=l(),Ue=a("div"),F(EL.$$.fragment),kuo=l(),zie=a("p"),Suo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ruo=l(),Ba=a("p"),Puo=o("The feature extractor class to instantiate is selected based on the "),Qie=a("code"),Buo=o("model_type"),Iuo=o(` property of the config object
(either passed as an argument or loaded from `),Wie=a("code"),Nuo=o("pretrained_model_name_or_path"),quo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hie=a("code"),juo=o("pretrained_model_name_or_path"),Duo=o(":"),Guo=l(),Y=a("ul"),Ih=a("li"),Uie=a("strong"),Ouo=o("beit"),Vuo=o(" \u2014 "),JN=a("a"),Xuo=o("BeitFeatureExtractor"),zuo=o(" (BEiT model)"),Quo=l(),Nh=a("li"),Jie=a("strong"),Wuo=o("clip"),Huo=o(" \u2014 "),YN=a("a"),Uuo=o("CLIPFeatureExtractor"),Juo=o(" (CLIP model)"),Yuo=l(),qh=a("li"),Yie=a("strong"),Kuo=o("convnext"),Zuo=o(" \u2014 "),KN=a("a"),e1o=o("ConvNextFeatureExtractor"),o1o=o(" (ConvNeXT model)"),r1o=l(),jh=a("li"),Kie=a("strong"),t1o=o("cvt"),a1o=o(" \u2014 "),ZN=a("a"),n1o=o("ConvNextFeatureExtractor"),s1o=o(" (CvT model)"),l1o=l(),Dh=a("li"),Zie=a("strong"),i1o=o("data2vec-audio"),d1o=o(" \u2014 "),eq=a("a"),c1o=o("Wav2Vec2FeatureExtractor"),f1o=o(" (Data2VecAudio model)"),m1o=l(),Gh=a("li"),ede=a("strong"),g1o=o("data2vec-vision"),h1o=o(" \u2014 "),oq=a("a"),p1o=o("BeitFeatureExtractor"),_1o=o(" (Data2VecVision model)"),u1o=l(),Oh=a("li"),ode=a("strong"),b1o=o("deit"),v1o=o(" \u2014 "),rq=a("a"),F1o=o("DeiTFeatureExtractor"),T1o=o(" (DeiT model)"),M1o=l(),Vh=a("li"),rde=a("strong"),E1o=o("detr"),C1o=o(" \u2014 "),tq=a("a"),w1o=o("DetrFeatureExtractor"),A1o=o(" (DETR model)"),L1o=l(),Xh=a("li"),tde=a("strong"),y1o=o("dpt"),x1o=o(" \u2014 "),aq=a("a"),$1o=o("DPTFeatureExtractor"),k1o=o(" (DPT model)"),S1o=l(),zh=a("li"),ade=a("strong"),R1o=o("flava"),P1o=o(" \u2014 "),nq=a("a"),B1o=o("FlavaFeatureExtractor"),I1o=o(" (FLAVA model)"),N1o=l(),Qh=a("li"),nde=a("strong"),q1o=o("glpn"),j1o=o(" \u2014 "),sq=a("a"),D1o=o("GLPNFeatureExtractor"),G1o=o(" (GLPN model)"),O1o=l(),Wh=a("li"),sde=a("strong"),V1o=o("groupvit"),X1o=o(" \u2014 "),lq=a("a"),z1o=o("CLIPFeatureExtractor"),Q1o=o(" (GroupViT model)"),W1o=l(),Hh=a("li"),lde=a("strong"),H1o=o("hubert"),U1o=o(" \u2014 "),iq=a("a"),J1o=o("Wav2Vec2FeatureExtractor"),Y1o=o(" (Hubert model)"),K1o=l(),Uh=a("li"),ide=a("strong"),Z1o=o("imagegpt"),e2o=o(" \u2014 "),dq=a("a"),o2o=o("ImageGPTFeatureExtractor"),r2o=o(" (ImageGPT model)"),t2o=l(),Jh=a("li"),dde=a("strong"),a2o=o("layoutlmv2"),n2o=o(" \u2014 "),cq=a("a"),s2o=o("LayoutLMv2FeatureExtractor"),l2o=o(" (LayoutLMv2 model)"),i2o=l(),Yh=a("li"),cde=a("strong"),d2o=o("layoutlmv3"),c2o=o(" \u2014 "),fq=a("a"),f2o=o("LayoutLMv3FeatureExtractor"),m2o=o(" (LayoutLMv3 model)"),g2o=l(),Kh=a("li"),fde=a("strong"),h2o=o("levit"),p2o=o(" \u2014 "),mq=a("a"),_2o=o("LevitFeatureExtractor"),u2o=o(" (LeViT model)"),b2o=l(),Zh=a("li"),mde=a("strong"),v2o=o("maskformer"),F2o=o(" \u2014 "),gq=a("a"),T2o=o("MaskFormerFeatureExtractor"),M2o=o(" (MaskFormer model)"),E2o=l(),ep=a("li"),gde=a("strong"),C2o=o("mctct"),w2o=o(" \u2014 "),hq=a("a"),A2o=o("MCTCTFeatureExtractor"),L2o=o(" (M-CTC-T model)"),y2o=l(),op=a("li"),hde=a("strong"),x2o=o("mobilevit"),$2o=o(" \u2014 "),pq=a("a"),k2o=o("MobileViTFeatureExtractor"),S2o=o(" (MobileViT model)"),R2o=l(),rp=a("li"),pde=a("strong"),P2o=o("perceiver"),B2o=o(" \u2014 "),_q=a("a"),I2o=o("PerceiverFeatureExtractor"),N2o=o(" (Perceiver model)"),q2o=l(),tp=a("li"),_de=a("strong"),j2o=o("poolformer"),D2o=o(" \u2014 "),uq=a("a"),G2o=o("PoolFormerFeatureExtractor"),O2o=o(" (PoolFormer model)"),V2o=l(),ap=a("li"),ude=a("strong"),X2o=o("regnet"),z2o=o(" \u2014 "),bq=a("a"),Q2o=o("ConvNextFeatureExtractor"),W2o=o(" (RegNet model)"),H2o=l(),np=a("li"),bde=a("strong"),U2o=o("resnet"),J2o=o(" \u2014 "),vq=a("a"),Y2o=o("ConvNextFeatureExtractor"),K2o=o(" (ResNet model)"),Z2o=l(),sp=a("li"),vde=a("strong"),ebo=o("segformer"),obo=o(" \u2014 "),Fq=a("a"),rbo=o("SegformerFeatureExtractor"),tbo=o(" (SegFormer model)"),abo=l(),lp=a("li"),Fde=a("strong"),nbo=o("speech_to_text"),sbo=o(" \u2014 "),Tq=a("a"),lbo=o("Speech2TextFeatureExtractor"),ibo=o(" (Speech2Text model)"),dbo=l(),ip=a("li"),Tde=a("strong"),cbo=o("swin"),fbo=o(" \u2014 "),Mq=a("a"),mbo=o("ViTFeatureExtractor"),gbo=o(" (Swin Transformer model)"),hbo=l(),dp=a("li"),Mde=a("strong"),pbo=o("van"),_bo=o(" \u2014 "),Eq=a("a"),ubo=o("ConvNextFeatureExtractor"),bbo=o(" (VAN model)"),vbo=l(),cp=a("li"),Ede=a("strong"),Fbo=o("vilt"),Tbo=o(" \u2014 "),Cq=a("a"),Mbo=o("ViltFeatureExtractor"),Ebo=o(" (ViLT model)"),Cbo=l(),fp=a("li"),Cde=a("strong"),wbo=o("vit"),Abo=o(" \u2014 "),wq=a("a"),Lbo=o("ViTFeatureExtractor"),ybo=o(" (ViT model)"),xbo=l(),mp=a("li"),wde=a("strong"),$bo=o("vit_mae"),kbo=o(" \u2014 "),Aq=a("a"),Sbo=o("ViTFeatureExtractor"),Rbo=o(" (ViTMAE model)"),Pbo=l(),gp=a("li"),Ade=a("strong"),Bbo=o("wav2vec2"),Ibo=o(" \u2014 "),Lq=a("a"),Nbo=o("Wav2Vec2FeatureExtractor"),qbo=o(" (Wav2Vec2 model)"),jbo=l(),hp=a("li"),Lde=a("strong"),Dbo=o("wav2vec2-conformer"),Gbo=o(" \u2014 "),yq=a("a"),Obo=o("Wav2Vec2FeatureExtractor"),Vbo=o(" (Wav2Vec2-Conformer model)"),Xbo=l(),pp=a("li"),yde=a("strong"),zbo=o("yolos"),Qbo=o(" \u2014 "),xq=a("a"),Wbo=o("YolosFeatureExtractor"),Hbo=o(" (YOLOS model)"),Ubo=l(),F(_p.$$.fragment),Jbo=l(),F(up.$$.fragment),Ybo=l(),bp=a("div"),F(CL.$$.fragment),Kbo=l(),xde=a("p"),Zbo=o("Register a new feature extractor for this class."),mXe=l(),ji=a("h2"),vp=a("a"),$de=a("span"),F(wL.$$.fragment),e3o=l(),kde=a("span"),o3o=o("AutoProcessor"),gXe=l(),xo=a("div"),F(AL.$$.fragment),r3o=l(),LL=a("p"),t3o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$q=a("a"),a3o=o("AutoProcessor.from_pretrained()"),n3o=o(" class method."),s3o=l(),yL=a("p"),l3o=o("This class cannot be instantiated directly using "),Sde=a("code"),i3o=o("__init__()"),d3o=o(" (throws an error)."),c3o=l(),Je=a("div"),F(xL.$$.fragment),f3o=l(),Rde=a("p"),m3o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),g3o=l(),Di=a("p"),h3o=o("The processor class to instantiate is selected based on the "),Pde=a("code"),p3o=o("model_type"),_3o=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),u3o=o("pretrained_model_name_or_path"),b3o=o(" if possible):"),v3o=l(),he=a("ul"),Fp=a("li"),Ide=a("strong"),F3o=o("clip"),T3o=o(" \u2014 "),kq=a("a"),M3o=o("CLIPProcessor"),E3o=o(" (CLIP model)"),C3o=l(),Tp=a("li"),Nde=a("strong"),w3o=o("flava"),A3o=o(" \u2014 "),qde=a("code"),L3o=o("FLAVAProcessor"),y3o=o(" (FLAVA model)"),x3o=l(),Mp=a("li"),jde=a("strong"),$3o=o("groupvit"),k3o=o(" \u2014 "),Sq=a("a"),S3o=o("CLIPProcessor"),R3o=o(" (GroupViT model)"),P3o=l(),Ep=a("li"),Dde=a("strong"),B3o=o("layoutlmv2"),I3o=o(" \u2014 "),Rq=a("a"),N3o=o("LayoutLMv2Processor"),q3o=o(" (LayoutLMv2 model)"),j3o=l(),Cp=a("li"),Gde=a("strong"),D3o=o("layoutlmv3"),G3o=o(" \u2014 "),Pq=a("a"),O3o=o("LayoutLMv3Processor"),V3o=o(" (LayoutLMv3 model)"),X3o=l(),wp=a("li"),Ode=a("strong"),z3o=o("layoutxlm"),Q3o=o(" \u2014 "),Bq=a("a"),W3o=o("LayoutXLMProcessor"),H3o=o(" (LayoutXLM model)"),U3o=l(),Ap=a("li"),Vde=a("strong"),J3o=o("sew"),Y3o=o(" \u2014 "),Iq=a("a"),K3o=o("Wav2Vec2Processor"),Z3o=o(" (SEW model)"),evo=l(),Lp=a("li"),Xde=a("strong"),ovo=o("sew-d"),rvo=o(" \u2014 "),Nq=a("a"),tvo=o("Wav2Vec2Processor"),avo=o(" (SEW-D model)"),nvo=l(),yp=a("li"),zde=a("strong"),svo=o("speech_to_text"),lvo=o(" \u2014 "),qq=a("a"),ivo=o("Speech2TextProcessor"),dvo=o(" (Speech2Text model)"),cvo=l(),xp=a("li"),Qde=a("strong"),fvo=o("speech_to_text_2"),mvo=o(" \u2014 "),jq=a("a"),gvo=o("Speech2Text2Processor"),hvo=o(" (Speech2Text2 model)"),pvo=l(),$p=a("li"),Wde=a("strong"),_vo=o("trocr"),uvo=o(" \u2014 "),Dq=a("a"),bvo=o("TrOCRProcessor"),vvo=o(" (TrOCR model)"),Fvo=l(),kp=a("li"),Hde=a("strong"),Tvo=o("unispeech"),Mvo=o(" \u2014 "),Gq=a("a"),Evo=o("Wav2Vec2Processor"),Cvo=o(" (UniSpeech model)"),wvo=l(),Sp=a("li"),Ude=a("strong"),Avo=o("unispeech-sat"),Lvo=o(" \u2014 "),Oq=a("a"),yvo=o("Wav2Vec2Processor"),xvo=o(" (UniSpeechSat model)"),$vo=l(),Rp=a("li"),Jde=a("strong"),kvo=o("vilt"),Svo=o(" \u2014 "),Vq=a("a"),Rvo=o("ViltProcessor"),Pvo=o(" (ViLT model)"),Bvo=l(),Pp=a("li"),Yde=a("strong"),Ivo=o("vision-text-dual-encoder"),Nvo=o(" \u2014 "),Xq=a("a"),qvo=o("VisionTextDualEncoderProcessor"),jvo=o(" (VisionTextDualEncoder model)"),Dvo=l(),Bp=a("li"),Kde=a("strong"),Gvo=o("wav2vec2"),Ovo=o(" \u2014 "),zq=a("a"),Vvo=o("Wav2Vec2Processor"),Xvo=o(" (Wav2Vec2 model)"),zvo=l(),Ip=a("li"),Zde=a("strong"),Qvo=o("wav2vec2-conformer"),Wvo=o(" \u2014 "),Qq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (Wav2Vec2-Conformer model)"),Jvo=l(),Np=a("li"),ece=a("strong"),Yvo=o("wavlm"),Kvo=o(" \u2014 "),Wq=a("a"),Zvo=o("Wav2Vec2Processor"),eFo=o(" (WavLM model)"),oFo=l(),F(qp.$$.fragment),rFo=l(),F(jp.$$.fragment),tFo=l(),Dp=a("div"),F($L.$$.fragment),aFo=l(),oce=a("p"),nFo=o("Register a new processor for this class."),hXe=l(),Gi=a("h2"),Gp=a("a"),rce=a("span"),F(kL.$$.fragment),sFo=l(),tce=a("span"),lFo=o("AutoModel"),pXe=l(),$o=a("div"),F(SL.$$.fragment),iFo=l(),Oi=a("p"),dFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hq=a("a"),cFo=o("from_pretrained()"),fFo=o(" class method or the "),Uq=a("a"),mFo=o("from_config()"),gFo=o(` class
method.`),hFo=l(),RL=a("p"),pFo=o("This class cannot be instantiated directly using "),ace=a("code"),_Fo=o("__init__()"),uFo=o(" (throws an error)."),bFo=l(),it=a("div"),F(PL.$$.fragment),vFo=l(),nce=a("p"),FFo=o("Instantiates one of the base model classes of the library from a configuration."),TFo=l(),Vi=a("p"),MFo=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),EFo=o("not"),CFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=a("a"),wFo=o("from_pretrained()"),AFo=o(" to load the model weights."),LFo=l(),F(Op.$$.fragment),yFo=l(),Ye=a("div"),F(BL.$$.fragment),xFo=l(),lce=a("p"),$Fo=o("Instantiate one of the base model classes of the library from a pretrained model."),kFo=l(),Ia=a("p"),SFo=o("The model class to instantiate is selected based on the "),ice=a("code"),RFo=o("model_type"),PFo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),BFo=o("pretrained_model_name_or_path"),IFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),NFo=o("pretrained_model_name_or_path"),qFo=o(":"),jFo=l(),y=a("ul"),Vp=a("li"),fce=a("strong"),DFo=o("albert"),GFo=o(" \u2014 "),Yq=a("a"),OFo=o("AlbertModel"),VFo=o(" (ALBERT model)"),XFo=l(),Xp=a("li"),mce=a("strong"),zFo=o("bart"),QFo=o(" \u2014 "),Kq=a("a"),WFo=o("BartModel"),HFo=o(" (BART model)"),UFo=l(),zp=a("li"),gce=a("strong"),JFo=o("beit"),YFo=o(" \u2014 "),Zq=a("a"),KFo=o("BeitModel"),ZFo=o(" (BEiT model)"),eTo=l(),Qp=a("li"),hce=a("strong"),oTo=o("bert"),rTo=o(" \u2014 "),ej=a("a"),tTo=o("BertModel"),aTo=o(" (BERT model)"),nTo=l(),Wp=a("li"),pce=a("strong"),sTo=o("bert-generation"),lTo=o(" \u2014 "),oj=a("a"),iTo=o("BertGenerationEncoder"),dTo=o(" (Bert Generation model)"),cTo=l(),Hp=a("li"),_ce=a("strong"),fTo=o("big_bird"),mTo=o(" \u2014 "),rj=a("a"),gTo=o("BigBirdModel"),hTo=o(" (BigBird model)"),pTo=l(),Up=a("li"),uce=a("strong"),_To=o("bigbird_pegasus"),uTo=o(" \u2014 "),tj=a("a"),bTo=o("BigBirdPegasusModel"),vTo=o(" (BigBird-Pegasus model)"),FTo=l(),Jp=a("li"),bce=a("strong"),TTo=o("blenderbot"),MTo=o(" \u2014 "),aj=a("a"),ETo=o("BlenderbotModel"),CTo=o(" (Blenderbot model)"),wTo=l(),Yp=a("li"),vce=a("strong"),ATo=o("blenderbot-small"),LTo=o(" \u2014 "),nj=a("a"),yTo=o("BlenderbotSmallModel"),xTo=o(" (BlenderbotSmall model)"),$To=l(),Kp=a("li"),Fce=a("strong"),kTo=o("bloom"),STo=o(" \u2014 "),sj=a("a"),RTo=o("BloomModel"),PTo=o(" (BLOOM model)"),BTo=l(),Zp=a("li"),Tce=a("strong"),ITo=o("camembert"),NTo=o(" \u2014 "),lj=a("a"),qTo=o("CamembertModel"),jTo=o(" (CamemBERT model)"),DTo=l(),e_=a("li"),Mce=a("strong"),GTo=o("canine"),OTo=o(" \u2014 "),ij=a("a"),VTo=o("CanineModel"),XTo=o(" (CANINE model)"),zTo=l(),o_=a("li"),Ece=a("strong"),QTo=o("clip"),WTo=o(" \u2014 "),dj=a("a"),HTo=o("CLIPModel"),UTo=o(" (CLIP model)"),JTo=l(),r_=a("li"),Cce=a("strong"),YTo=o("codegen"),KTo=o(" \u2014 "),cj=a("a"),ZTo=o("CodeGenModel"),e8o=o(" (CodeGen model)"),o8o=l(),t_=a("li"),wce=a("strong"),r8o=o("convbert"),t8o=o(" \u2014 "),fj=a("a"),a8o=o("ConvBertModel"),n8o=o(" (ConvBERT model)"),s8o=l(),a_=a("li"),Ace=a("strong"),l8o=o("convnext"),i8o=o(" \u2014 "),mj=a("a"),d8o=o("ConvNextModel"),c8o=o(" (ConvNeXT model)"),f8o=l(),n_=a("li"),Lce=a("strong"),m8o=o("ctrl"),g8o=o(" \u2014 "),gj=a("a"),h8o=o("CTRLModel"),p8o=o(" (CTRL model)"),_8o=l(),s_=a("li"),yce=a("strong"),u8o=o("cvt"),b8o=o(" \u2014 "),hj=a("a"),v8o=o("CvtModel"),F8o=o(" (CvT model)"),T8o=l(),l_=a("li"),xce=a("strong"),M8o=o("data2vec-audio"),E8o=o(" \u2014 "),pj=a("a"),C8o=o("Data2VecAudioModel"),w8o=o(" (Data2VecAudio model)"),A8o=l(),i_=a("li"),$ce=a("strong"),L8o=o("data2vec-text"),y8o=o(" \u2014 "),_j=a("a"),x8o=o("Data2VecTextModel"),$8o=o(" (Data2VecText model)"),k8o=l(),d_=a("li"),kce=a("strong"),S8o=o("data2vec-vision"),R8o=o(" \u2014 "),uj=a("a"),P8o=o("Data2VecVisionModel"),B8o=o(" (Data2VecVision model)"),I8o=l(),c_=a("li"),Sce=a("strong"),N8o=o("deberta"),q8o=o(" \u2014 "),bj=a("a"),j8o=o("DebertaModel"),D8o=o(" (DeBERTa model)"),G8o=l(),f_=a("li"),Rce=a("strong"),O8o=o("deberta-v2"),V8o=o(" \u2014 "),vj=a("a"),X8o=o("DebertaV2Model"),z8o=o(" (DeBERTa-v2 model)"),Q8o=l(),m_=a("li"),Pce=a("strong"),W8o=o("decision_transformer"),H8o=o(" \u2014 "),Fj=a("a"),U8o=o("DecisionTransformerModel"),J8o=o(" (Decision Transformer model)"),Y8o=l(),g_=a("li"),Bce=a("strong"),K8o=o("deit"),Z8o=o(" \u2014 "),Tj=a("a"),eMo=o("DeiTModel"),oMo=o(" (DeiT model)"),rMo=l(),h_=a("li"),Ice=a("strong"),tMo=o("detr"),aMo=o(" \u2014 "),Mj=a("a"),nMo=o("DetrModel"),sMo=o(" (DETR model)"),lMo=l(),p_=a("li"),Nce=a("strong"),iMo=o("distilbert"),dMo=o(" \u2014 "),Ej=a("a"),cMo=o("DistilBertModel"),fMo=o(" (DistilBERT model)"),mMo=l(),__=a("li"),qce=a("strong"),gMo=o("dpr"),hMo=o(" \u2014 "),Cj=a("a"),pMo=o("DPRQuestionEncoder"),_Mo=o(" (DPR model)"),uMo=l(),u_=a("li"),jce=a("strong"),bMo=o("dpt"),vMo=o(" \u2014 "),wj=a("a"),FMo=o("DPTModel"),TMo=o(" (DPT model)"),MMo=l(),b_=a("li"),Dce=a("strong"),EMo=o("electra"),CMo=o(" \u2014 "),Aj=a("a"),wMo=o("ElectraModel"),AMo=o(" (ELECTRA model)"),LMo=l(),v_=a("li"),Gce=a("strong"),yMo=o("flaubert"),xMo=o(" \u2014 "),Lj=a("a"),$Mo=o("FlaubertModel"),kMo=o(" (FlauBERT model)"),SMo=l(),F_=a("li"),Oce=a("strong"),RMo=o("flava"),PMo=o(" \u2014 "),yj=a("a"),BMo=o("FlavaModel"),IMo=o(" (FLAVA model)"),NMo=l(),T_=a("li"),Vce=a("strong"),qMo=o("fnet"),jMo=o(" \u2014 "),xj=a("a"),DMo=o("FNetModel"),GMo=o(" (FNet model)"),OMo=l(),M_=a("li"),Xce=a("strong"),VMo=o("fsmt"),XMo=o(" \u2014 "),$j=a("a"),zMo=o("FSMTModel"),QMo=o(" (FairSeq Machine-Translation model)"),WMo=l(),Ws=a("li"),zce=a("strong"),HMo=o("funnel"),UMo=o(" \u2014 "),kj=a("a"),JMo=o("FunnelModel"),YMo=o(" or "),Sj=a("a"),KMo=o("FunnelBaseModel"),ZMo=o(" (Funnel Transformer model)"),e4o=l(),E_=a("li"),Qce=a("strong"),o4o=o("glpn"),r4o=o(" \u2014 "),Rj=a("a"),t4o=o("GLPNModel"),a4o=o(" (GLPN model)"),n4o=l(),C_=a("li"),Wce=a("strong"),s4o=o("gpt2"),l4o=o(" \u2014 "),Pj=a("a"),i4o=o("GPT2Model"),d4o=o(" (OpenAI GPT-2 model)"),c4o=l(),w_=a("li"),Hce=a("strong"),f4o=o("gpt_neo"),m4o=o(" \u2014 "),Bj=a("a"),g4o=o("GPTNeoModel"),h4o=o(" (GPT Neo model)"),p4o=l(),A_=a("li"),Uce=a("strong"),_4o=o("gpt_neox"),u4o=o(" \u2014 "),Ij=a("a"),b4o=o("GPTNeoXModel"),v4o=o(" (GPT NeoX model)"),F4o=l(),L_=a("li"),Jce=a("strong"),T4o=o("gptj"),M4o=o(" \u2014 "),Nj=a("a"),E4o=o("GPTJModel"),C4o=o(" (GPT-J model)"),w4o=l(),y_=a("li"),Yce=a("strong"),A4o=o("groupvit"),L4o=o(" \u2014 "),qj=a("a"),y4o=o("GroupViTModel"),x4o=o(" (GroupViT model)"),$4o=l(),x_=a("li"),Kce=a("strong"),k4o=o("hubert"),S4o=o(" \u2014 "),jj=a("a"),R4o=o("HubertModel"),P4o=o(" (Hubert model)"),B4o=l(),$_=a("li"),Zce=a("strong"),I4o=o("ibert"),N4o=o(" \u2014 "),Dj=a("a"),q4o=o("IBertModel"),j4o=o(" (I-BERT model)"),D4o=l(),k_=a("li"),efe=a("strong"),G4o=o("imagegpt"),O4o=o(" \u2014 "),Gj=a("a"),V4o=o("ImageGPTModel"),X4o=o(" (ImageGPT model)"),z4o=l(),S_=a("li"),ofe=a("strong"),Q4o=o("layoutlm"),W4o=o(" \u2014 "),Oj=a("a"),H4o=o("LayoutLMModel"),U4o=o(" (LayoutLM model)"),J4o=l(),R_=a("li"),rfe=a("strong"),Y4o=o("layoutlmv2"),K4o=o(" \u2014 "),Vj=a("a"),Z4o=o("LayoutLMv2Model"),eEo=o(" (LayoutLMv2 model)"),oEo=l(),P_=a("li"),tfe=a("strong"),rEo=o("layoutlmv3"),tEo=o(" \u2014 "),Xj=a("a"),aEo=o("LayoutLMv3Model"),nEo=o(" (LayoutLMv3 model)"),sEo=l(),B_=a("li"),afe=a("strong"),lEo=o("led"),iEo=o(" \u2014 "),zj=a("a"),dEo=o("LEDModel"),cEo=o(" (LED model)"),fEo=l(),I_=a("li"),nfe=a("strong"),mEo=o("levit"),gEo=o(" \u2014 "),Qj=a("a"),hEo=o("LevitModel"),pEo=o(" (LeViT model)"),_Eo=l(),N_=a("li"),sfe=a("strong"),uEo=o("longformer"),bEo=o(" \u2014 "),Wj=a("a"),vEo=o("LongformerModel"),FEo=o(" (Longformer model)"),TEo=l(),q_=a("li"),lfe=a("strong"),MEo=o("longt5"),EEo=o(" \u2014 "),Hj=a("a"),CEo=o("LongT5Model"),wEo=o(" (LongT5 model)"),AEo=l(),j_=a("li"),ife=a("strong"),LEo=o("luke"),yEo=o(" \u2014 "),Uj=a("a"),xEo=o("LukeModel"),$Eo=o(" (LUKE model)"),kEo=l(),D_=a("li"),dfe=a("strong"),SEo=o("lxmert"),REo=o(" \u2014 "),Jj=a("a"),PEo=o("LxmertModel"),BEo=o(" (LXMERT model)"),IEo=l(),G_=a("li"),cfe=a("strong"),NEo=o("m2m_100"),qEo=o(" \u2014 "),Yj=a("a"),jEo=o("M2M100Model"),DEo=o(" (M2M100 model)"),GEo=l(),O_=a("li"),ffe=a("strong"),OEo=o("marian"),VEo=o(" \u2014 "),Kj=a("a"),XEo=o("MarianModel"),zEo=o(" (Marian model)"),QEo=l(),V_=a("li"),mfe=a("strong"),WEo=o("maskformer"),HEo=o(" \u2014 "),Zj=a("a"),UEo=o("MaskFormerModel"),JEo=o(" (MaskFormer model)"),YEo=l(),X_=a("li"),gfe=a("strong"),KEo=o("mbart"),ZEo=o(" \u2014 "),eD=a("a"),eCo=o("MBartModel"),oCo=o(" (mBART model)"),rCo=l(),z_=a("li"),hfe=a("strong"),tCo=o("mctct"),aCo=o(" \u2014 "),oD=a("a"),nCo=o("MCTCTModel"),sCo=o(" (M-CTC-T model)"),lCo=l(),Q_=a("li"),pfe=a("strong"),iCo=o("megatron-bert"),dCo=o(" \u2014 "),rD=a("a"),cCo=o("MegatronBertModel"),fCo=o(" (Megatron-BERT model)"),mCo=l(),W_=a("li"),_fe=a("strong"),gCo=o("mobilebert"),hCo=o(" \u2014 "),tD=a("a"),pCo=o("MobileBertModel"),_Co=o(" (MobileBERT model)"),uCo=l(),H_=a("li"),ufe=a("strong"),bCo=o("mobilevit"),vCo=o(" \u2014 "),aD=a("a"),FCo=o("MobileViTModel"),TCo=o(" (MobileViT model)"),MCo=l(),U_=a("li"),bfe=a("strong"),ECo=o("mpnet"),CCo=o(" \u2014 "),nD=a("a"),wCo=o("MPNetModel"),ACo=o(" (MPNet model)"),LCo=l(),J_=a("li"),vfe=a("strong"),yCo=o("mt5"),xCo=o(" \u2014 "),sD=a("a"),$Co=o("MT5Model"),kCo=o(" (MT5 model)"),SCo=l(),Y_=a("li"),Ffe=a("strong"),RCo=o("mvp"),PCo=o(" \u2014 "),lD=a("a"),BCo=o("MvpModel"),ICo=o(" (MVP model)"),NCo=l(),K_=a("li"),Tfe=a("strong"),qCo=o("nezha"),jCo=o(" \u2014 "),iD=a("a"),DCo=o("NezhaModel"),GCo=o(" (Nezha model)"),OCo=l(),Z_=a("li"),Mfe=a("strong"),VCo=o("nystromformer"),XCo=o(" \u2014 "),dD=a("a"),zCo=o("NystromformerModel"),QCo=o(" (Nystr\xF6mformer model)"),WCo=l(),eu=a("li"),Efe=a("strong"),HCo=o("openai-gpt"),UCo=o(" \u2014 "),cD=a("a"),JCo=o("OpenAIGPTModel"),YCo=o(" (OpenAI GPT model)"),KCo=l(),ou=a("li"),Cfe=a("strong"),ZCo=o("opt"),e5o=o(" \u2014 "),fD=a("a"),o5o=o("OPTModel"),r5o=o(" (OPT model)"),t5o=l(),ru=a("li"),wfe=a("strong"),a5o=o("pegasus"),n5o=o(" \u2014 "),mD=a("a"),s5o=o("PegasusModel"),l5o=o(" (Pegasus model)"),i5o=l(),tu=a("li"),Afe=a("strong"),d5o=o("perceiver"),c5o=o(" \u2014 "),gD=a("a"),f5o=o("PerceiverModel"),m5o=o(" (Perceiver model)"),g5o=l(),au=a("li"),Lfe=a("strong"),h5o=o("plbart"),p5o=o(" \u2014 "),hD=a("a"),_5o=o("PLBartModel"),u5o=o(" (PLBart model)"),b5o=l(),nu=a("li"),yfe=a("strong"),v5o=o("poolformer"),F5o=o(" \u2014 "),pD=a("a"),T5o=o("PoolFormerModel"),M5o=o(" (PoolFormer model)"),E5o=l(),su=a("li"),xfe=a("strong"),C5o=o("prophetnet"),w5o=o(" \u2014 "),_D=a("a"),A5o=o("ProphetNetModel"),L5o=o(" (ProphetNet model)"),y5o=l(),lu=a("li"),$fe=a("strong"),x5o=o("qdqbert"),$5o=o(" \u2014 "),uD=a("a"),k5o=o("QDQBertModel"),S5o=o(" (QDQBert model)"),R5o=l(),iu=a("li"),kfe=a("strong"),P5o=o("reformer"),B5o=o(" \u2014 "),bD=a("a"),I5o=o("ReformerModel"),N5o=o(" (Reformer model)"),q5o=l(),du=a("li"),Sfe=a("strong"),j5o=o("regnet"),D5o=o(" \u2014 "),vD=a("a"),G5o=o("RegNetModel"),O5o=o(" (RegNet model)"),V5o=l(),cu=a("li"),Rfe=a("strong"),X5o=o("rembert"),z5o=o(" \u2014 "),FD=a("a"),Q5o=o("RemBertModel"),W5o=o(" (RemBERT model)"),H5o=l(),fu=a("li"),Pfe=a("strong"),U5o=o("resnet"),J5o=o(" \u2014 "),TD=a("a"),Y5o=o("ResNetModel"),K5o=o(" (ResNet model)"),Z5o=l(),mu=a("li"),Bfe=a("strong"),e0o=o("retribert"),o0o=o(" \u2014 "),MD=a("a"),r0o=o("RetriBertModel"),t0o=o(" (RetriBERT model)"),a0o=l(),gu=a("li"),Ife=a("strong"),n0o=o("roberta"),s0o=o(" \u2014 "),ED=a("a"),l0o=o("RobertaModel"),i0o=o(" (RoBERTa model)"),d0o=l(),hu=a("li"),Nfe=a("strong"),c0o=o("roformer"),f0o=o(" \u2014 "),CD=a("a"),m0o=o("RoFormerModel"),g0o=o(" (RoFormer model)"),h0o=l(),pu=a("li"),qfe=a("strong"),p0o=o("segformer"),_0o=o(" \u2014 "),wD=a("a"),u0o=o("SegformerModel"),b0o=o(" (SegFormer model)"),v0o=l(),_u=a("li"),jfe=a("strong"),F0o=o("sew"),T0o=o(" \u2014 "),AD=a("a"),M0o=o("SEWModel"),E0o=o(" (SEW model)"),C0o=l(),uu=a("li"),Dfe=a("strong"),w0o=o("sew-d"),A0o=o(" \u2014 "),LD=a("a"),L0o=o("SEWDModel"),y0o=o(" (SEW-D model)"),x0o=l(),bu=a("li"),Gfe=a("strong"),$0o=o("speech_to_text"),k0o=o(" \u2014 "),yD=a("a"),S0o=o("Speech2TextModel"),R0o=o(" (Speech2Text model)"),P0o=l(),vu=a("li"),Ofe=a("strong"),B0o=o("splinter"),I0o=o(" \u2014 "),xD=a("a"),N0o=o("SplinterModel"),q0o=o(" (Splinter model)"),j0o=l(),Fu=a("li"),Vfe=a("strong"),D0o=o("squeezebert"),G0o=o(" \u2014 "),$D=a("a"),O0o=o("SqueezeBertModel"),V0o=o(" (SqueezeBERT model)"),X0o=l(),Tu=a("li"),Xfe=a("strong"),z0o=o("swin"),Q0o=o(" \u2014 "),kD=a("a"),W0o=o("SwinModel"),H0o=o(" (Swin Transformer model)"),U0o=l(),Mu=a("li"),zfe=a("strong"),J0o=o("t5"),Y0o=o(" \u2014 "),SD=a("a"),K0o=o("T5Model"),Z0o=o(" (T5 model)"),ewo=l(),Eu=a("li"),Qfe=a("strong"),owo=o("tapas"),rwo=o(" \u2014 "),RD=a("a"),two=o("TapasModel"),awo=o(" (TAPAS model)"),nwo=l(),Cu=a("li"),Wfe=a("strong"),swo=o("trajectory_transformer"),lwo=o(" \u2014 "),PD=a("a"),iwo=o("TrajectoryTransformerModel"),dwo=o(" (Trajectory Transformer model)"),cwo=l(),wu=a("li"),Hfe=a("strong"),fwo=o("transfo-xl"),mwo=o(" \u2014 "),BD=a("a"),gwo=o("TransfoXLModel"),hwo=o(" (Transformer-XL model)"),pwo=l(),Au=a("li"),Ufe=a("strong"),_wo=o("unispeech"),uwo=o(" \u2014 "),ID=a("a"),bwo=o("UniSpeechModel"),vwo=o(" (UniSpeech model)"),Fwo=l(),Lu=a("li"),Jfe=a("strong"),Two=o("unispeech-sat"),Mwo=o(" \u2014 "),ND=a("a"),Ewo=o("UniSpeechSatModel"),Cwo=o(" (UniSpeechSat model)"),wwo=l(),yu=a("li"),Yfe=a("strong"),Awo=o("van"),Lwo=o(" \u2014 "),qD=a("a"),ywo=o("VanModel"),xwo=o(" (VAN model)"),$wo=l(),xu=a("li"),Kfe=a("strong"),kwo=o("vilt"),Swo=o(" \u2014 "),jD=a("a"),Rwo=o("ViltModel"),Pwo=o(" (ViLT model)"),Bwo=l(),$u=a("li"),Zfe=a("strong"),Iwo=o("vision-text-dual-encoder"),Nwo=o(" \u2014 "),DD=a("a"),qwo=o("VisionTextDualEncoderModel"),jwo=o(" (VisionTextDualEncoder model)"),Dwo=l(),ku=a("li"),eme=a("strong"),Gwo=o("visual_bert"),Owo=o(" \u2014 "),GD=a("a"),Vwo=o("VisualBertModel"),Xwo=o(" (VisualBERT model)"),zwo=l(),Su=a("li"),ome=a("strong"),Qwo=o("vit"),Wwo=o(" \u2014 "),OD=a("a"),Hwo=o("ViTModel"),Uwo=o(" (ViT model)"),Jwo=l(),Ru=a("li"),rme=a("strong"),Ywo=o("vit_mae"),Kwo=o(" \u2014 "),VD=a("a"),Zwo=o("ViTMAEModel"),eAo=o(" (ViTMAE model)"),oAo=l(),Pu=a("li"),tme=a("strong"),rAo=o("wav2vec2"),tAo=o(" \u2014 "),XD=a("a"),aAo=o("Wav2Vec2Model"),nAo=o(" (Wav2Vec2 model)"),sAo=l(),Bu=a("li"),ame=a("strong"),lAo=o("wav2vec2-conformer"),iAo=o(" \u2014 "),zD=a("a"),dAo=o("Wav2Vec2ConformerModel"),cAo=o(" (Wav2Vec2-Conformer model)"),fAo=l(),Iu=a("li"),nme=a("strong"),mAo=o("wavlm"),gAo=o(" \u2014 "),QD=a("a"),hAo=o("WavLMModel"),pAo=o(" (WavLM model)"),_Ao=l(),Nu=a("li"),sme=a("strong"),uAo=o("xglm"),bAo=o(" \u2014 "),WD=a("a"),vAo=o("XGLMModel"),FAo=o(" (XGLM model)"),TAo=l(),qu=a("li"),lme=a("strong"),MAo=o("xlm"),EAo=o(" \u2014 "),HD=a("a"),CAo=o("XLMModel"),wAo=o(" (XLM model)"),AAo=l(),ju=a("li"),ime=a("strong"),LAo=o("xlm-prophetnet"),yAo=o(" \u2014 "),UD=a("a"),xAo=o("XLMProphetNetModel"),$Ao=o(" (XLM-ProphetNet model)"),kAo=l(),Du=a("li"),dme=a("strong"),SAo=o("xlm-roberta"),RAo=o(" \u2014 "),JD=a("a"),PAo=o("XLMRobertaModel"),BAo=o(" (XLM-RoBERTa model)"),IAo=l(),Gu=a("li"),cme=a("strong"),NAo=o("xlm-roberta-xl"),qAo=o(" \u2014 "),YD=a("a"),jAo=o("XLMRobertaXLModel"),DAo=o(" (XLM-RoBERTa-XL model)"),GAo=l(),Ou=a("li"),fme=a("strong"),OAo=o("xlnet"),VAo=o(" \u2014 "),KD=a("a"),XAo=o("XLNetModel"),zAo=o(" (XLNet model)"),QAo=l(),Vu=a("li"),mme=a("strong"),WAo=o("yolos"),HAo=o(" \u2014 "),ZD=a("a"),UAo=o("YolosModel"),JAo=o(" (YOLOS model)"),YAo=l(),Xu=a("li"),gme=a("strong"),KAo=o("yoso"),ZAo=o(" \u2014 "),eG=a("a"),e6o=o("YosoModel"),o6o=o(" (YOSO model)"),r6o=l(),zu=a("p"),t6o=o("The model is set in evaluation mode by default using "),hme=a("code"),a6o=o("model.eval()"),n6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),s6o=o("model.train()"),l6o=l(),F(Qu.$$.fragment),_Xe=l(),Xi=a("h2"),Wu=a("a"),_me=a("span"),F(IL.$$.fragment),i6o=l(),ume=a("span"),d6o=o("AutoModelForPreTraining"),uXe=l(),ko=a("div"),F(NL.$$.fragment),c6o=l(),zi=a("p"),f6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oG=a("a"),m6o=o("from_pretrained()"),g6o=o(" class method or the "),rG=a("a"),h6o=o("from_config()"),p6o=o(` class
method.`),_6o=l(),qL=a("p"),u6o=o("This class cannot be instantiated directly using "),bme=a("code"),b6o=o("__init__()"),v6o=o(" (throws an error)."),F6o=l(),dt=a("div"),F(jL.$$.fragment),T6o=l(),vme=a("p"),M6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E6o=l(),Qi=a("p"),C6o=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),w6o=o("not"),A6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),L6o=o("from_pretrained()"),y6o=o(" to load the model weights."),x6o=l(),F(Hu.$$.fragment),$6o=l(),Ke=a("div"),F(DL.$$.fragment),k6o=l(),Tme=a("p"),S6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R6o=l(),Na=a("p"),P6o=o("The model class to instantiate is selected based on the "),Mme=a("code"),B6o=o("model_type"),I6o=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),N6o=o("pretrained_model_name_or_path"),q6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),j6o=o("pretrained_model_name_or_path"),D6o=o(":"),G6o=l(),G=a("ul"),Uu=a("li"),wme=a("strong"),O6o=o("albert"),V6o=o(" \u2014 "),aG=a("a"),X6o=o("AlbertForPreTraining"),z6o=o(" (ALBERT model)"),Q6o=l(),Ju=a("li"),Ame=a("strong"),W6o=o("bart"),H6o=o(" \u2014 "),nG=a("a"),U6o=o("BartForConditionalGeneration"),J6o=o(" (BART model)"),Y6o=l(),Yu=a("li"),Lme=a("strong"),K6o=o("bert"),Z6o=o(" \u2014 "),sG=a("a"),e7o=o("BertForPreTraining"),o7o=o(" (BERT model)"),r7o=l(),Ku=a("li"),yme=a("strong"),t7o=o("big_bird"),a7o=o(" \u2014 "),lG=a("a"),n7o=o("BigBirdForPreTraining"),s7o=o(" (BigBird model)"),l7o=l(),Zu=a("li"),xme=a("strong"),i7o=o("bloom"),d7o=o(" \u2014 "),iG=a("a"),c7o=o("BloomForCausalLM"),f7o=o(" (BLOOM model)"),m7o=l(),e1=a("li"),$me=a("strong"),g7o=o("camembert"),h7o=o(" \u2014 "),dG=a("a"),p7o=o("CamembertForMaskedLM"),_7o=o(" (CamemBERT model)"),u7o=l(),o1=a("li"),kme=a("strong"),b7o=o("ctrl"),v7o=o(" \u2014 "),cG=a("a"),F7o=o("CTRLLMHeadModel"),T7o=o(" (CTRL model)"),M7o=l(),r1=a("li"),Sme=a("strong"),E7o=o("data2vec-text"),C7o=o(" \u2014 "),fG=a("a"),w7o=o("Data2VecTextForMaskedLM"),A7o=o(" (Data2VecText model)"),L7o=l(),t1=a("li"),Rme=a("strong"),y7o=o("deberta"),x7o=o(" \u2014 "),mG=a("a"),$7o=o("DebertaForMaskedLM"),k7o=o(" (DeBERTa model)"),S7o=l(),a1=a("li"),Pme=a("strong"),R7o=o("deberta-v2"),P7o=o(" \u2014 "),gG=a("a"),B7o=o("DebertaV2ForMaskedLM"),I7o=o(" (DeBERTa-v2 model)"),N7o=l(),n1=a("li"),Bme=a("strong"),q7o=o("distilbert"),j7o=o(" \u2014 "),hG=a("a"),D7o=o("DistilBertForMaskedLM"),G7o=o(" (DistilBERT model)"),O7o=l(),s1=a("li"),Ime=a("strong"),V7o=o("electra"),X7o=o(" \u2014 "),pG=a("a"),z7o=o("ElectraForPreTraining"),Q7o=o(" (ELECTRA model)"),W7o=l(),l1=a("li"),Nme=a("strong"),H7o=o("flaubert"),U7o=o(" \u2014 "),_G=a("a"),J7o=o("FlaubertWithLMHeadModel"),Y7o=o(" (FlauBERT model)"),K7o=l(),i1=a("li"),qme=a("strong"),Z7o=o("flava"),eLo=o(" \u2014 "),uG=a("a"),oLo=o("FlavaForPreTraining"),rLo=o(" (FLAVA model)"),tLo=l(),d1=a("li"),jme=a("strong"),aLo=o("fnet"),nLo=o(" \u2014 "),bG=a("a"),sLo=o("FNetForPreTraining"),lLo=o(" (FNet model)"),iLo=l(),c1=a("li"),Dme=a("strong"),dLo=o("fsmt"),cLo=o(" \u2014 "),vG=a("a"),fLo=o("FSMTForConditionalGeneration"),mLo=o(" (FairSeq Machine-Translation model)"),gLo=l(),f1=a("li"),Gme=a("strong"),hLo=o("funnel"),pLo=o(" \u2014 "),FG=a("a"),_Lo=o("FunnelForPreTraining"),uLo=o(" (Funnel Transformer model)"),bLo=l(),m1=a("li"),Ome=a("strong"),vLo=o("gpt2"),FLo=o(" \u2014 "),TG=a("a"),TLo=o("GPT2LMHeadModel"),MLo=o(" (OpenAI GPT-2 model)"),ELo=l(),g1=a("li"),Vme=a("strong"),CLo=o("ibert"),wLo=o(" \u2014 "),MG=a("a"),ALo=o("IBertForMaskedLM"),LLo=o(" (I-BERT model)"),yLo=l(),h1=a("li"),Xme=a("strong"),xLo=o("layoutlm"),$Lo=o(" \u2014 "),EG=a("a"),kLo=o("LayoutLMForMaskedLM"),SLo=o(" (LayoutLM model)"),RLo=l(),p1=a("li"),zme=a("strong"),PLo=o("longformer"),BLo=o(" \u2014 "),CG=a("a"),ILo=o("LongformerForMaskedLM"),NLo=o(" (Longformer model)"),qLo=l(),_1=a("li"),Qme=a("strong"),jLo=o("lxmert"),DLo=o(" \u2014 "),wG=a("a"),GLo=o("LxmertForPreTraining"),OLo=o(" (LXMERT model)"),VLo=l(),u1=a("li"),Wme=a("strong"),XLo=o("megatron-bert"),zLo=o(" \u2014 "),AG=a("a"),QLo=o("MegatronBertForPreTraining"),WLo=o(" (Megatron-BERT model)"),HLo=l(),b1=a("li"),Hme=a("strong"),ULo=o("mobilebert"),JLo=o(" \u2014 "),LG=a("a"),YLo=o("MobileBertForPreTraining"),KLo=o(" (MobileBERT model)"),ZLo=l(),v1=a("li"),Ume=a("strong"),eyo=o("mpnet"),oyo=o(" \u2014 "),yG=a("a"),ryo=o("MPNetForMaskedLM"),tyo=o(" (MPNet model)"),ayo=l(),F1=a("li"),Jme=a("strong"),nyo=o("mvp"),syo=o(" \u2014 "),xG=a("a"),lyo=o("MvpForConditionalGeneration"),iyo=o(" (MVP model)"),dyo=l(),T1=a("li"),Yme=a("strong"),cyo=o("nezha"),fyo=o(" \u2014 "),$G=a("a"),myo=o("NezhaForPreTraining"),gyo=o(" (Nezha model)"),hyo=l(),M1=a("li"),Kme=a("strong"),pyo=o("openai-gpt"),_yo=o(" \u2014 "),kG=a("a"),uyo=o("OpenAIGPTLMHeadModel"),byo=o(" (OpenAI GPT model)"),vyo=l(),E1=a("li"),Zme=a("strong"),Fyo=o("retribert"),Tyo=o(" \u2014 "),SG=a("a"),Myo=o("RetriBertModel"),Eyo=o(" (RetriBERT model)"),Cyo=l(),C1=a("li"),ege=a("strong"),wyo=o("roberta"),Ayo=o(" \u2014 "),RG=a("a"),Lyo=o("RobertaForMaskedLM"),yyo=o(" (RoBERTa model)"),xyo=l(),w1=a("li"),oge=a("strong"),$yo=o("splinter"),kyo=o(" \u2014 "),PG=a("a"),Syo=o("SplinterForPreTraining"),Ryo=o(" (Splinter model)"),Pyo=l(),A1=a("li"),rge=a("strong"),Byo=o("squeezebert"),Iyo=o(" \u2014 "),BG=a("a"),Nyo=o("SqueezeBertForMaskedLM"),qyo=o(" (SqueezeBERT model)"),jyo=l(),L1=a("li"),tge=a("strong"),Dyo=o("t5"),Gyo=o(" \u2014 "),IG=a("a"),Oyo=o("T5ForConditionalGeneration"),Vyo=o(" (T5 model)"),Xyo=l(),y1=a("li"),age=a("strong"),zyo=o("tapas"),Qyo=o(" \u2014 "),NG=a("a"),Wyo=o("TapasForMaskedLM"),Hyo=o(" (TAPAS model)"),Uyo=l(),x1=a("li"),nge=a("strong"),Jyo=o("transfo-xl"),Yyo=o(" \u2014 "),qG=a("a"),Kyo=o("TransfoXLLMHeadModel"),Zyo=o(" (Transformer-XL model)"),e9o=l(),$1=a("li"),sge=a("strong"),o9o=o("unispeech"),r9o=o(" \u2014 "),jG=a("a"),t9o=o("UniSpeechForPreTraining"),a9o=o(" (UniSpeech model)"),n9o=l(),k1=a("li"),lge=a("strong"),s9o=o("unispeech-sat"),l9o=o(" \u2014 "),DG=a("a"),i9o=o("UniSpeechSatForPreTraining"),d9o=o(" (UniSpeechSat model)"),c9o=l(),S1=a("li"),ige=a("strong"),f9o=o("visual_bert"),m9o=o(" \u2014 "),GG=a("a"),g9o=o("VisualBertForPreTraining"),h9o=o(" (VisualBERT model)"),p9o=l(),R1=a("li"),dge=a("strong"),_9o=o("vit_mae"),u9o=o(" \u2014 "),OG=a("a"),b9o=o("ViTMAEForPreTraining"),v9o=o(" (ViTMAE model)"),F9o=l(),P1=a("li"),cge=a("strong"),T9o=o("wav2vec2"),M9o=o(" \u2014 "),VG=a("a"),E9o=o("Wav2Vec2ForPreTraining"),C9o=o(" (Wav2Vec2 model)"),w9o=l(),B1=a("li"),fge=a("strong"),A9o=o("wav2vec2-conformer"),L9o=o(" \u2014 "),XG=a("a"),y9o=o("Wav2Vec2ConformerForPreTraining"),x9o=o(" (Wav2Vec2-Conformer model)"),$9o=l(),I1=a("li"),mge=a("strong"),k9o=o("xlm"),S9o=o(" \u2014 "),zG=a("a"),R9o=o("XLMWithLMHeadModel"),P9o=o(" (XLM model)"),B9o=l(),N1=a("li"),gge=a("strong"),I9o=o("xlm-roberta"),N9o=o(" \u2014 "),QG=a("a"),q9o=o("XLMRobertaForMaskedLM"),j9o=o(" (XLM-RoBERTa model)"),D9o=l(),q1=a("li"),hge=a("strong"),G9o=o("xlm-roberta-xl"),O9o=o(" \u2014 "),WG=a("a"),V9o=o("XLMRobertaXLForMaskedLM"),X9o=o(" (XLM-RoBERTa-XL model)"),z9o=l(),j1=a("li"),pge=a("strong"),Q9o=o("xlnet"),W9o=o(" \u2014 "),HG=a("a"),H9o=o("XLNetLMHeadModel"),U9o=o(" (XLNet model)"),J9o=l(),D1=a("p"),Y9o=o("The model is set in evaluation mode by default using "),_ge=a("code"),K9o=o("model.eval()"),Z9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),exo=o("model.train()"),oxo=l(),F(G1.$$.fragment),bXe=l(),Wi=a("h2"),O1=a("a"),bge=a("span"),F(GL.$$.fragment),rxo=l(),vge=a("span"),txo=o("AutoModelForCausalLM"),vXe=l(),So=a("div"),F(OL.$$.fragment),axo=l(),Hi=a("p"),nxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UG=a("a"),sxo=o("from_pretrained()"),lxo=o(" class method or the "),JG=a("a"),ixo=o("from_config()"),dxo=o(` class
method.`),cxo=l(),VL=a("p"),fxo=o("This class cannot be instantiated directly using "),Fge=a("code"),mxo=o("__init__()"),gxo=o(" (throws an error)."),hxo=l(),ct=a("div"),F(XL.$$.fragment),pxo=l(),Tge=a("p"),_xo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uxo=l(),Ui=a("p"),bxo=o(`Note:
Loading a model from its configuration file does `),Mge=a("strong"),vxo=o("not"),Fxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),Txo=o("from_pretrained()"),Mxo=o(" to load the model weights."),Exo=l(),F(V1.$$.fragment),Cxo=l(),Ze=a("div"),F(zL.$$.fragment),wxo=l(),Ege=a("p"),Axo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lxo=l(),qa=a("p"),yxo=o("The model class to instantiate is selected based on the "),Cge=a("code"),xxo=o("model_type"),$xo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),kxo=o("pretrained_model_name_or_path"),Sxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),Rxo=o("pretrained_model_name_or_path"),Pxo=o(":"),Bxo=l(),z=a("ul"),X1=a("li"),Lge=a("strong"),Ixo=o("bart"),Nxo=o(" \u2014 "),KG=a("a"),qxo=o("BartForCausalLM"),jxo=o(" (BART model)"),Dxo=l(),z1=a("li"),yge=a("strong"),Gxo=o("bert"),Oxo=o(" \u2014 "),ZG=a("a"),Vxo=o("BertLMHeadModel"),Xxo=o(" (BERT model)"),zxo=l(),Q1=a("li"),xge=a("strong"),Qxo=o("bert-generation"),Wxo=o(" \u2014 "),eO=a("a"),Hxo=o("BertGenerationDecoder"),Uxo=o(" (Bert Generation model)"),Jxo=l(),W1=a("li"),$ge=a("strong"),Yxo=o("big_bird"),Kxo=o(" \u2014 "),oO=a("a"),Zxo=o("BigBirdForCausalLM"),e$o=o(" (BigBird model)"),o$o=l(),H1=a("li"),kge=a("strong"),r$o=o("bigbird_pegasus"),t$o=o(" \u2014 "),rO=a("a"),a$o=o("BigBirdPegasusForCausalLM"),n$o=o(" (BigBird-Pegasus model)"),s$o=l(),U1=a("li"),Sge=a("strong"),l$o=o("blenderbot"),i$o=o(" \u2014 "),tO=a("a"),d$o=o("BlenderbotForCausalLM"),c$o=o(" (Blenderbot model)"),f$o=l(),J1=a("li"),Rge=a("strong"),m$o=o("blenderbot-small"),g$o=o(" \u2014 "),aO=a("a"),h$o=o("BlenderbotSmallForCausalLM"),p$o=o(" (BlenderbotSmall model)"),_$o=l(),Y1=a("li"),Pge=a("strong"),u$o=o("bloom"),b$o=o(" \u2014 "),nO=a("a"),v$o=o("BloomForCausalLM"),F$o=o(" (BLOOM model)"),T$o=l(),K1=a("li"),Bge=a("strong"),M$o=o("camembert"),E$o=o(" \u2014 "),sO=a("a"),C$o=o("CamembertForCausalLM"),w$o=o(" (CamemBERT model)"),A$o=l(),Z1=a("li"),Ige=a("strong"),L$o=o("codegen"),y$o=o(" \u2014 "),lO=a("a"),x$o=o("CodeGenForCausalLM"),$$o=o(" (CodeGen model)"),k$o=l(),e2=a("li"),Nge=a("strong"),S$o=o("ctrl"),R$o=o(" \u2014 "),iO=a("a"),P$o=o("CTRLLMHeadModel"),B$o=o(" (CTRL model)"),I$o=l(),o2=a("li"),qge=a("strong"),N$o=o("data2vec-text"),q$o=o(" \u2014 "),dO=a("a"),j$o=o("Data2VecTextForCausalLM"),D$o=o(" (Data2VecText model)"),G$o=l(),r2=a("li"),jge=a("strong"),O$o=o("electra"),V$o=o(" \u2014 "),cO=a("a"),X$o=o("ElectraForCausalLM"),z$o=o(" (ELECTRA model)"),Q$o=l(),t2=a("li"),Dge=a("strong"),W$o=o("gpt2"),H$o=o(" \u2014 "),fO=a("a"),U$o=o("GPT2LMHeadModel"),J$o=o(" (OpenAI GPT-2 model)"),Y$o=l(),a2=a("li"),Gge=a("strong"),K$o=o("gpt_neo"),Z$o=o(" \u2014 "),mO=a("a"),eko=o("GPTNeoForCausalLM"),oko=o(" (GPT Neo model)"),rko=l(),n2=a("li"),Oge=a("strong"),tko=o("gpt_neox"),ako=o(" \u2014 "),gO=a("a"),nko=o("GPTNeoXForCausalLM"),sko=o(" (GPT NeoX model)"),lko=l(),s2=a("li"),Vge=a("strong"),iko=o("gptj"),dko=o(" \u2014 "),hO=a("a"),cko=o("GPTJForCausalLM"),fko=o(" (GPT-J model)"),mko=l(),l2=a("li"),Xge=a("strong"),gko=o("marian"),hko=o(" \u2014 "),pO=a("a"),pko=o("MarianForCausalLM"),_ko=o(" (Marian model)"),uko=l(),i2=a("li"),zge=a("strong"),bko=o("mbart"),vko=o(" \u2014 "),_O=a("a"),Fko=o("MBartForCausalLM"),Tko=o(" (mBART model)"),Mko=l(),d2=a("li"),Qge=a("strong"),Eko=o("megatron-bert"),Cko=o(" \u2014 "),uO=a("a"),wko=o("MegatronBertForCausalLM"),Ako=o(" (Megatron-BERT model)"),Lko=l(),c2=a("li"),Wge=a("strong"),yko=o("mvp"),xko=o(" \u2014 "),bO=a("a"),$ko=o("MvpForCausalLM"),kko=o(" (MVP model)"),Sko=l(),f2=a("li"),Hge=a("strong"),Rko=o("openai-gpt"),Pko=o(" \u2014 "),vO=a("a"),Bko=o("OpenAIGPTLMHeadModel"),Iko=o(" (OpenAI GPT model)"),Nko=l(),m2=a("li"),Uge=a("strong"),qko=o("opt"),jko=o(" \u2014 "),FO=a("a"),Dko=o("OPTForCausalLM"),Gko=o(" (OPT model)"),Oko=l(),g2=a("li"),Jge=a("strong"),Vko=o("pegasus"),Xko=o(" \u2014 "),TO=a("a"),zko=o("PegasusForCausalLM"),Qko=o(" (Pegasus model)"),Wko=l(),h2=a("li"),Yge=a("strong"),Hko=o("plbart"),Uko=o(" \u2014 "),MO=a("a"),Jko=o("PLBartForCausalLM"),Yko=o(" (PLBart model)"),Kko=l(),p2=a("li"),Kge=a("strong"),Zko=o("prophetnet"),eSo=o(" \u2014 "),EO=a("a"),oSo=o("ProphetNetForCausalLM"),rSo=o(" (ProphetNet model)"),tSo=l(),_2=a("li"),Zge=a("strong"),aSo=o("qdqbert"),nSo=o(" \u2014 "),CO=a("a"),sSo=o("QDQBertLMHeadModel"),lSo=o(" (QDQBert model)"),iSo=l(),u2=a("li"),ehe=a("strong"),dSo=o("reformer"),cSo=o(" \u2014 "),wO=a("a"),fSo=o("ReformerModelWithLMHead"),mSo=o(" (Reformer model)"),gSo=l(),b2=a("li"),ohe=a("strong"),hSo=o("rembert"),pSo=o(" \u2014 "),AO=a("a"),_So=o("RemBertForCausalLM"),uSo=o(" (RemBERT model)"),bSo=l(),v2=a("li"),rhe=a("strong"),vSo=o("roberta"),FSo=o(" \u2014 "),LO=a("a"),TSo=o("RobertaForCausalLM"),MSo=o(" (RoBERTa model)"),ESo=l(),F2=a("li"),the=a("strong"),CSo=o("roformer"),wSo=o(" \u2014 "),yO=a("a"),ASo=o("RoFormerForCausalLM"),LSo=o(" (RoFormer model)"),ySo=l(),T2=a("li"),ahe=a("strong"),xSo=o("speech_to_text_2"),$So=o(" \u2014 "),xO=a("a"),kSo=o("Speech2Text2ForCausalLM"),SSo=o(" (Speech2Text2 model)"),RSo=l(),M2=a("li"),nhe=a("strong"),PSo=o("transfo-xl"),BSo=o(" \u2014 "),$O=a("a"),ISo=o("TransfoXLLMHeadModel"),NSo=o(" (Transformer-XL model)"),qSo=l(),E2=a("li"),she=a("strong"),jSo=o("trocr"),DSo=o(" \u2014 "),kO=a("a"),GSo=o("TrOCRForCausalLM"),OSo=o(" (TrOCR model)"),VSo=l(),C2=a("li"),lhe=a("strong"),XSo=o("xglm"),zSo=o(" \u2014 "),SO=a("a"),QSo=o("XGLMForCausalLM"),WSo=o(" (XGLM model)"),HSo=l(),w2=a("li"),ihe=a("strong"),USo=o("xlm"),JSo=o(" \u2014 "),RO=a("a"),YSo=o("XLMWithLMHeadModel"),KSo=o(" (XLM model)"),ZSo=l(),A2=a("li"),dhe=a("strong"),eRo=o("xlm-prophetnet"),oRo=o(" \u2014 "),PO=a("a"),rRo=o("XLMProphetNetForCausalLM"),tRo=o(" (XLM-ProphetNet model)"),aRo=l(),L2=a("li"),che=a("strong"),nRo=o("xlm-roberta"),sRo=o(" \u2014 "),BO=a("a"),lRo=o("XLMRobertaForCausalLM"),iRo=o(" (XLM-RoBERTa model)"),dRo=l(),y2=a("li"),fhe=a("strong"),cRo=o("xlm-roberta-xl"),fRo=o(" \u2014 "),IO=a("a"),mRo=o("XLMRobertaXLForCausalLM"),gRo=o(" (XLM-RoBERTa-XL model)"),hRo=l(),x2=a("li"),mhe=a("strong"),pRo=o("xlnet"),_Ro=o(" \u2014 "),NO=a("a"),uRo=o("XLNetLMHeadModel"),bRo=o(" (XLNet model)"),vRo=l(),$2=a("p"),FRo=o("The model is set in evaluation mode by default using "),ghe=a("code"),TRo=o("model.eval()"),MRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=a("code"),ERo=o("model.train()"),CRo=l(),F(k2.$$.fragment),FXe=l(),Ji=a("h2"),S2=a("a"),phe=a("span"),F(QL.$$.fragment),wRo=l(),_he=a("span"),ARo=o("AutoModelForMaskedLM"),TXe=l(),Ro=a("div"),F(WL.$$.fragment),LRo=l(),Yi=a("p"),yRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qO=a("a"),xRo=o("from_pretrained()"),$Ro=o(" class method or the "),jO=a("a"),kRo=o("from_config()"),SRo=o(` class
method.`),RRo=l(),HL=a("p"),PRo=o("This class cannot be instantiated directly using "),uhe=a("code"),BRo=o("__init__()"),IRo=o(" (throws an error)."),NRo=l(),ft=a("div"),F(UL.$$.fragment),qRo=l(),bhe=a("p"),jRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DRo=l(),Ki=a("p"),GRo=o(`Note:
Loading a model from its configuration file does `),vhe=a("strong"),ORo=o("not"),VRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),XRo=o("from_pretrained()"),zRo=o(" to load the model weights."),QRo=l(),F(R2.$$.fragment),WRo=l(),eo=a("div"),F(JL.$$.fragment),HRo=l(),Fhe=a("p"),URo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JRo=l(),ja=a("p"),YRo=o("The model class to instantiate is selected based on the "),The=a("code"),KRo=o("model_type"),ZRo=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),ePo=o("pretrained_model_name_or_path"),oPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),rPo=o("pretrained_model_name_or_path"),tPo=o(":"),aPo=l(),W=a("ul"),P2=a("li"),Che=a("strong"),nPo=o("albert"),sPo=o(" \u2014 "),GO=a("a"),lPo=o("AlbertForMaskedLM"),iPo=o(" (ALBERT model)"),dPo=l(),B2=a("li"),whe=a("strong"),cPo=o("bart"),fPo=o(" \u2014 "),OO=a("a"),mPo=o("BartForConditionalGeneration"),gPo=o(" (BART model)"),hPo=l(),I2=a("li"),Ahe=a("strong"),pPo=o("bert"),_Po=o(" \u2014 "),VO=a("a"),uPo=o("BertForMaskedLM"),bPo=o(" (BERT model)"),vPo=l(),N2=a("li"),Lhe=a("strong"),FPo=o("big_bird"),TPo=o(" \u2014 "),XO=a("a"),MPo=o("BigBirdForMaskedLM"),EPo=o(" (BigBird model)"),CPo=l(),q2=a("li"),yhe=a("strong"),wPo=o("camembert"),APo=o(" \u2014 "),zO=a("a"),LPo=o("CamembertForMaskedLM"),yPo=o(" (CamemBERT model)"),xPo=l(),j2=a("li"),xhe=a("strong"),$Po=o("convbert"),kPo=o(" \u2014 "),QO=a("a"),SPo=o("ConvBertForMaskedLM"),RPo=o(" (ConvBERT model)"),PPo=l(),D2=a("li"),$he=a("strong"),BPo=o("data2vec-text"),IPo=o(" \u2014 "),WO=a("a"),NPo=o("Data2VecTextForMaskedLM"),qPo=o(" (Data2VecText model)"),jPo=l(),G2=a("li"),khe=a("strong"),DPo=o("deberta"),GPo=o(" \u2014 "),HO=a("a"),OPo=o("DebertaForMaskedLM"),VPo=o(" (DeBERTa model)"),XPo=l(),O2=a("li"),She=a("strong"),zPo=o("deberta-v2"),QPo=o(" \u2014 "),UO=a("a"),WPo=o("DebertaV2ForMaskedLM"),HPo=o(" (DeBERTa-v2 model)"),UPo=l(),V2=a("li"),Rhe=a("strong"),JPo=o("distilbert"),YPo=o(" \u2014 "),JO=a("a"),KPo=o("DistilBertForMaskedLM"),ZPo=o(" (DistilBERT model)"),eBo=l(),X2=a("li"),Phe=a("strong"),oBo=o("electra"),rBo=o(" \u2014 "),YO=a("a"),tBo=o("ElectraForMaskedLM"),aBo=o(" (ELECTRA model)"),nBo=l(),z2=a("li"),Bhe=a("strong"),sBo=o("flaubert"),lBo=o(" \u2014 "),KO=a("a"),iBo=o("FlaubertWithLMHeadModel"),dBo=o(" (FlauBERT model)"),cBo=l(),Q2=a("li"),Ihe=a("strong"),fBo=o("fnet"),mBo=o(" \u2014 "),ZO=a("a"),gBo=o("FNetForMaskedLM"),hBo=o(" (FNet model)"),pBo=l(),W2=a("li"),Nhe=a("strong"),_Bo=o("funnel"),uBo=o(" \u2014 "),eV=a("a"),bBo=o("FunnelForMaskedLM"),vBo=o(" (Funnel Transformer model)"),FBo=l(),H2=a("li"),qhe=a("strong"),TBo=o("ibert"),MBo=o(" \u2014 "),oV=a("a"),EBo=o("IBertForMaskedLM"),CBo=o(" (I-BERT model)"),wBo=l(),U2=a("li"),jhe=a("strong"),ABo=o("layoutlm"),LBo=o(" \u2014 "),rV=a("a"),yBo=o("LayoutLMForMaskedLM"),xBo=o(" (LayoutLM model)"),$Bo=l(),J2=a("li"),Dhe=a("strong"),kBo=o("longformer"),SBo=o(" \u2014 "),tV=a("a"),RBo=o("LongformerForMaskedLM"),PBo=o(" (Longformer model)"),BBo=l(),Y2=a("li"),Ghe=a("strong"),IBo=o("luke"),NBo=o(" \u2014 "),aV=a("a"),qBo=o("LukeForMaskedLM"),jBo=o(" (LUKE model)"),DBo=l(),K2=a("li"),Ohe=a("strong"),GBo=o("mbart"),OBo=o(" \u2014 "),nV=a("a"),VBo=o("MBartForConditionalGeneration"),XBo=o(" (mBART model)"),zBo=l(),Z2=a("li"),Vhe=a("strong"),QBo=o("megatron-bert"),WBo=o(" \u2014 "),sV=a("a"),HBo=o("MegatronBertForMaskedLM"),UBo=o(" (Megatron-BERT model)"),JBo=l(),eb=a("li"),Xhe=a("strong"),YBo=o("mobilebert"),KBo=o(" \u2014 "),lV=a("a"),ZBo=o("MobileBertForMaskedLM"),eIo=o(" (MobileBERT model)"),oIo=l(),ob=a("li"),zhe=a("strong"),rIo=o("mpnet"),tIo=o(" \u2014 "),iV=a("a"),aIo=o("MPNetForMaskedLM"),nIo=o(" (MPNet model)"),sIo=l(),rb=a("li"),Qhe=a("strong"),lIo=o("mvp"),iIo=o(" \u2014 "),dV=a("a"),dIo=o("MvpForConditionalGeneration"),cIo=o(" (MVP model)"),fIo=l(),tb=a("li"),Whe=a("strong"),mIo=o("nezha"),gIo=o(" \u2014 "),cV=a("a"),hIo=o("NezhaForMaskedLM"),pIo=o(" (Nezha model)"),_Io=l(),ab=a("li"),Hhe=a("strong"),uIo=o("nystromformer"),bIo=o(" \u2014 "),fV=a("a"),vIo=o("NystromformerForMaskedLM"),FIo=o(" (Nystr\xF6mformer model)"),TIo=l(),nb=a("li"),Uhe=a("strong"),MIo=o("perceiver"),EIo=o(" \u2014 "),mV=a("a"),CIo=o("PerceiverForMaskedLM"),wIo=o(" (Perceiver model)"),AIo=l(),sb=a("li"),Jhe=a("strong"),LIo=o("qdqbert"),yIo=o(" \u2014 "),gV=a("a"),xIo=o("QDQBertForMaskedLM"),$Io=o(" (QDQBert model)"),kIo=l(),lb=a("li"),Yhe=a("strong"),SIo=o("reformer"),RIo=o(" \u2014 "),hV=a("a"),PIo=o("ReformerForMaskedLM"),BIo=o(" (Reformer model)"),IIo=l(),ib=a("li"),Khe=a("strong"),NIo=o("rembert"),qIo=o(" \u2014 "),pV=a("a"),jIo=o("RemBertForMaskedLM"),DIo=o(" (RemBERT model)"),GIo=l(),db=a("li"),Zhe=a("strong"),OIo=o("roberta"),VIo=o(" \u2014 "),_V=a("a"),XIo=o("RobertaForMaskedLM"),zIo=o(" (RoBERTa model)"),QIo=l(),cb=a("li"),epe=a("strong"),WIo=o("roformer"),HIo=o(" \u2014 "),uV=a("a"),UIo=o("RoFormerForMaskedLM"),JIo=o(" (RoFormer model)"),YIo=l(),fb=a("li"),ope=a("strong"),KIo=o("squeezebert"),ZIo=o(" \u2014 "),bV=a("a"),eNo=o("SqueezeBertForMaskedLM"),oNo=o(" (SqueezeBERT model)"),rNo=l(),mb=a("li"),rpe=a("strong"),tNo=o("tapas"),aNo=o(" \u2014 "),vV=a("a"),nNo=o("TapasForMaskedLM"),sNo=o(" (TAPAS model)"),lNo=l(),gb=a("li"),tpe=a("strong"),iNo=o("wav2vec2"),dNo=o(" \u2014 "),ape=a("code"),cNo=o("Wav2Vec2ForMaskedLM"),fNo=o(" (Wav2Vec2 model)"),mNo=l(),hb=a("li"),npe=a("strong"),gNo=o("xlm"),hNo=o(" \u2014 "),FV=a("a"),pNo=o("XLMWithLMHeadModel"),_No=o(" (XLM model)"),uNo=l(),pb=a("li"),spe=a("strong"),bNo=o("xlm-roberta"),vNo=o(" \u2014 "),TV=a("a"),FNo=o("XLMRobertaForMaskedLM"),TNo=o(" (XLM-RoBERTa model)"),MNo=l(),_b=a("li"),lpe=a("strong"),ENo=o("xlm-roberta-xl"),CNo=o(" \u2014 "),MV=a("a"),wNo=o("XLMRobertaXLForMaskedLM"),ANo=o(" (XLM-RoBERTa-XL model)"),LNo=l(),ub=a("li"),ipe=a("strong"),yNo=o("yoso"),xNo=o(" \u2014 "),EV=a("a"),$No=o("YosoForMaskedLM"),kNo=o(" (YOSO model)"),SNo=l(),bb=a("p"),RNo=o("The model is set in evaluation mode by default using "),dpe=a("code"),PNo=o("model.eval()"),BNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),INo=o("model.train()"),NNo=l(),F(vb.$$.fragment),MXe=l(),Zi=a("h2"),Fb=a("a"),fpe=a("span"),F(YL.$$.fragment),qNo=l(),mpe=a("span"),jNo=o("AutoModelForSeq2SeqLM"),EXe=l(),Po=a("div"),F(KL.$$.fragment),DNo=l(),ed=a("p"),GNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CV=a("a"),ONo=o("from_pretrained()"),VNo=o(" class method or the "),wV=a("a"),XNo=o("from_config()"),zNo=o(` class
method.`),QNo=l(),ZL=a("p"),WNo=o("This class cannot be instantiated directly using "),gpe=a("code"),HNo=o("__init__()"),UNo=o(" (throws an error)."),JNo=l(),mt=a("div"),F(ey.$$.fragment),YNo=l(),hpe=a("p"),KNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZNo=l(),od=a("p"),eqo=o(`Note:
Loading a model from its configuration file does `),ppe=a("strong"),oqo=o("not"),rqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),tqo=o("from_pretrained()"),aqo=o(" to load the model weights."),nqo=l(),F(Tb.$$.fragment),sqo=l(),oo=a("div"),F(oy.$$.fragment),lqo=l(),_pe=a("p"),iqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dqo=l(),Da=a("p"),cqo=o("The model class to instantiate is selected based on the "),upe=a("code"),fqo=o("model_type"),mqo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),gqo=o("pretrained_model_name_or_path"),hqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),pqo=o("pretrained_model_name_or_path"),_qo=o(":"),uqo=l(),pe=a("ul"),Mb=a("li"),Fpe=a("strong"),bqo=o("bart"),vqo=o(" \u2014 "),LV=a("a"),Fqo=o("BartForConditionalGeneration"),Tqo=o(" (BART model)"),Mqo=l(),Eb=a("li"),Tpe=a("strong"),Eqo=o("bigbird_pegasus"),Cqo=o(" \u2014 "),yV=a("a"),wqo=o("BigBirdPegasusForConditionalGeneration"),Aqo=o(" (BigBird-Pegasus model)"),Lqo=l(),Cb=a("li"),Mpe=a("strong"),yqo=o("blenderbot"),xqo=o(" \u2014 "),xV=a("a"),$qo=o("BlenderbotForConditionalGeneration"),kqo=o(" (Blenderbot model)"),Sqo=l(),wb=a("li"),Epe=a("strong"),Rqo=o("blenderbot-small"),Pqo=o(" \u2014 "),$V=a("a"),Bqo=o("BlenderbotSmallForConditionalGeneration"),Iqo=o(" (BlenderbotSmall model)"),Nqo=l(),Ab=a("li"),Cpe=a("strong"),qqo=o("encoder-decoder"),jqo=o(" \u2014 "),kV=a("a"),Dqo=o("EncoderDecoderModel"),Gqo=o(" (Encoder decoder model)"),Oqo=l(),Lb=a("li"),wpe=a("strong"),Vqo=o("fsmt"),Xqo=o(" \u2014 "),SV=a("a"),zqo=o("FSMTForConditionalGeneration"),Qqo=o(" (FairSeq Machine-Translation model)"),Wqo=l(),yb=a("li"),Ape=a("strong"),Hqo=o("led"),Uqo=o(" \u2014 "),RV=a("a"),Jqo=o("LEDForConditionalGeneration"),Yqo=o(" (LED model)"),Kqo=l(),xb=a("li"),Lpe=a("strong"),Zqo=o("longt5"),ejo=o(" \u2014 "),PV=a("a"),ojo=o("LongT5ForConditionalGeneration"),rjo=o(" (LongT5 model)"),tjo=l(),$b=a("li"),ype=a("strong"),ajo=o("m2m_100"),njo=o(" \u2014 "),BV=a("a"),sjo=o("M2M100ForConditionalGeneration"),ljo=o(" (M2M100 model)"),ijo=l(),kb=a("li"),xpe=a("strong"),djo=o("marian"),cjo=o(" \u2014 "),IV=a("a"),fjo=o("MarianMTModel"),mjo=o(" (Marian model)"),gjo=l(),Sb=a("li"),$pe=a("strong"),hjo=o("mbart"),pjo=o(" \u2014 "),NV=a("a"),_jo=o("MBartForConditionalGeneration"),ujo=o(" (mBART model)"),bjo=l(),Rb=a("li"),kpe=a("strong"),vjo=o("mt5"),Fjo=o(" \u2014 "),qV=a("a"),Tjo=o("MT5ForConditionalGeneration"),Mjo=o(" (MT5 model)"),Ejo=l(),Pb=a("li"),Spe=a("strong"),Cjo=o("mvp"),wjo=o(" \u2014 "),jV=a("a"),Ajo=o("MvpForConditionalGeneration"),Ljo=o(" (MVP model)"),yjo=l(),Bb=a("li"),Rpe=a("strong"),xjo=o("pegasus"),$jo=o(" \u2014 "),DV=a("a"),kjo=o("PegasusForConditionalGeneration"),Sjo=o(" (Pegasus model)"),Rjo=l(),Ib=a("li"),Ppe=a("strong"),Pjo=o("plbart"),Bjo=o(" \u2014 "),GV=a("a"),Ijo=o("PLBartForConditionalGeneration"),Njo=o(" (PLBart model)"),qjo=l(),Nb=a("li"),Bpe=a("strong"),jjo=o("prophetnet"),Djo=o(" \u2014 "),OV=a("a"),Gjo=o("ProphetNetForConditionalGeneration"),Ojo=o(" (ProphetNet model)"),Vjo=l(),qb=a("li"),Ipe=a("strong"),Xjo=o("t5"),zjo=o(" \u2014 "),VV=a("a"),Qjo=o("T5ForConditionalGeneration"),Wjo=o(" (T5 model)"),Hjo=l(),jb=a("li"),Npe=a("strong"),Ujo=o("xlm-prophetnet"),Jjo=o(" \u2014 "),XV=a("a"),Yjo=o("XLMProphetNetForConditionalGeneration"),Kjo=o(" (XLM-ProphetNet model)"),Zjo=l(),Db=a("p"),eDo=o("The model is set in evaluation mode by default using "),qpe=a("code"),oDo=o("model.eval()"),rDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),tDo=o("model.train()"),aDo=l(),F(Gb.$$.fragment),CXe=l(),rd=a("h2"),Ob=a("a"),Dpe=a("span"),F(ry.$$.fragment),nDo=l(),Gpe=a("span"),sDo=o("AutoModelForSequenceClassification"),wXe=l(),Bo=a("div"),F(ty.$$.fragment),lDo=l(),td=a("p"),iDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zV=a("a"),dDo=o("from_pretrained()"),cDo=o(" class method or the "),QV=a("a"),fDo=o("from_config()"),mDo=o(` class
method.`),gDo=l(),ay=a("p"),hDo=o("This class cannot be instantiated directly using "),Ope=a("code"),pDo=o("__init__()"),_Do=o(" (throws an error)."),uDo=l(),gt=a("div"),F(ny.$$.fragment),bDo=l(),Vpe=a("p"),vDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FDo=l(),ad=a("p"),TDo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),MDo=o("not"),EDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),CDo=o("from_pretrained()"),wDo=o(" to load the model weights."),ADo=l(),F(Vb.$$.fragment),LDo=l(),ro=a("div"),F(sy.$$.fragment),yDo=l(),zpe=a("p"),xDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Do=l(),Ga=a("p"),kDo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),SDo=o("model_type"),RDo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),PDo=o("pretrained_model_name_or_path"),BDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),IDo=o("pretrained_model_name_or_path"),NDo=o(":"),qDo=l(),B=a("ul"),Xb=a("li"),Upe=a("strong"),jDo=o("albert"),DDo=o(" \u2014 "),HV=a("a"),GDo=o("AlbertForSequenceClassification"),ODo=o(" (ALBERT model)"),VDo=l(),zb=a("li"),Jpe=a("strong"),XDo=o("bart"),zDo=o(" \u2014 "),UV=a("a"),QDo=o("BartForSequenceClassification"),WDo=o(" (BART model)"),HDo=l(),Qb=a("li"),Ype=a("strong"),UDo=o("bert"),JDo=o(" \u2014 "),JV=a("a"),YDo=o("BertForSequenceClassification"),KDo=o(" (BERT model)"),ZDo=l(),Wb=a("li"),Kpe=a("strong"),eGo=o("big_bird"),oGo=o(" \u2014 "),YV=a("a"),rGo=o("BigBirdForSequenceClassification"),tGo=o(" (BigBird model)"),aGo=l(),Hb=a("li"),Zpe=a("strong"),nGo=o("bigbird_pegasus"),sGo=o(" \u2014 "),KV=a("a"),lGo=o("BigBirdPegasusForSequenceClassification"),iGo=o(" (BigBird-Pegasus model)"),dGo=l(),Ub=a("li"),e_e=a("strong"),cGo=o("bloom"),fGo=o(" \u2014 "),ZV=a("a"),mGo=o("BloomForSequenceClassification"),gGo=o(" (BLOOM model)"),hGo=l(),Jb=a("li"),o_e=a("strong"),pGo=o("camembert"),_Go=o(" \u2014 "),eX=a("a"),uGo=o("CamembertForSequenceClassification"),bGo=o(" (CamemBERT model)"),vGo=l(),Yb=a("li"),r_e=a("strong"),FGo=o("canine"),TGo=o(" \u2014 "),oX=a("a"),MGo=o("CanineForSequenceClassification"),EGo=o(" (CANINE model)"),CGo=l(),Kb=a("li"),t_e=a("strong"),wGo=o("convbert"),AGo=o(" \u2014 "),rX=a("a"),LGo=o("ConvBertForSequenceClassification"),yGo=o(" (ConvBERT model)"),xGo=l(),Zb=a("li"),a_e=a("strong"),$Go=o("ctrl"),kGo=o(" \u2014 "),tX=a("a"),SGo=o("CTRLForSequenceClassification"),RGo=o(" (CTRL model)"),PGo=l(),e3=a("li"),n_e=a("strong"),BGo=o("data2vec-text"),IGo=o(" \u2014 "),aX=a("a"),NGo=o("Data2VecTextForSequenceClassification"),qGo=o(" (Data2VecText model)"),jGo=l(),o3=a("li"),s_e=a("strong"),DGo=o("deberta"),GGo=o(" \u2014 "),nX=a("a"),OGo=o("DebertaForSequenceClassification"),VGo=o(" (DeBERTa model)"),XGo=l(),r3=a("li"),l_e=a("strong"),zGo=o("deberta-v2"),QGo=o(" \u2014 "),sX=a("a"),WGo=o("DebertaV2ForSequenceClassification"),HGo=o(" (DeBERTa-v2 model)"),UGo=l(),t3=a("li"),i_e=a("strong"),JGo=o("distilbert"),YGo=o(" \u2014 "),lX=a("a"),KGo=o("DistilBertForSequenceClassification"),ZGo=o(" (DistilBERT model)"),eOo=l(),a3=a("li"),d_e=a("strong"),oOo=o("electra"),rOo=o(" \u2014 "),iX=a("a"),tOo=o("ElectraForSequenceClassification"),aOo=o(" (ELECTRA model)"),nOo=l(),n3=a("li"),c_e=a("strong"),sOo=o("flaubert"),lOo=o(" \u2014 "),dX=a("a"),iOo=o("FlaubertForSequenceClassification"),dOo=o(" (FlauBERT model)"),cOo=l(),s3=a("li"),f_e=a("strong"),fOo=o("fnet"),mOo=o(" \u2014 "),cX=a("a"),gOo=o("FNetForSequenceClassification"),hOo=o(" (FNet model)"),pOo=l(),l3=a("li"),m_e=a("strong"),_Oo=o("funnel"),uOo=o(" \u2014 "),fX=a("a"),bOo=o("FunnelForSequenceClassification"),vOo=o(" (Funnel Transformer model)"),FOo=l(),i3=a("li"),g_e=a("strong"),TOo=o("gpt2"),MOo=o(" \u2014 "),mX=a("a"),EOo=o("GPT2ForSequenceClassification"),COo=o(" (OpenAI GPT-2 model)"),wOo=l(),d3=a("li"),h_e=a("strong"),AOo=o("gpt_neo"),LOo=o(" \u2014 "),gX=a("a"),yOo=o("GPTNeoForSequenceClassification"),xOo=o(" (GPT Neo model)"),$Oo=l(),c3=a("li"),p_e=a("strong"),kOo=o("gptj"),SOo=o(" \u2014 "),hX=a("a"),ROo=o("GPTJForSequenceClassification"),POo=o(" (GPT-J model)"),BOo=l(),f3=a("li"),__e=a("strong"),IOo=o("ibert"),NOo=o(" \u2014 "),pX=a("a"),qOo=o("IBertForSequenceClassification"),jOo=o(" (I-BERT model)"),DOo=l(),m3=a("li"),u_e=a("strong"),GOo=o("layoutlm"),OOo=o(" \u2014 "),_X=a("a"),VOo=o("LayoutLMForSequenceClassification"),XOo=o(" (LayoutLM model)"),zOo=l(),g3=a("li"),b_e=a("strong"),QOo=o("layoutlmv2"),WOo=o(" \u2014 "),uX=a("a"),HOo=o("LayoutLMv2ForSequenceClassification"),UOo=o(" (LayoutLMv2 model)"),JOo=l(),h3=a("li"),v_e=a("strong"),YOo=o("layoutlmv3"),KOo=o(" \u2014 "),bX=a("a"),ZOo=o("LayoutLMv3ForSequenceClassification"),eVo=o(" (LayoutLMv3 model)"),oVo=l(),p3=a("li"),F_e=a("strong"),rVo=o("led"),tVo=o(" \u2014 "),vX=a("a"),aVo=o("LEDForSequenceClassification"),nVo=o(" (LED model)"),sVo=l(),_3=a("li"),T_e=a("strong"),lVo=o("longformer"),iVo=o(" \u2014 "),FX=a("a"),dVo=o("LongformerForSequenceClassification"),cVo=o(" (Longformer model)"),fVo=l(),u3=a("li"),M_e=a("strong"),mVo=o("mbart"),gVo=o(" \u2014 "),TX=a("a"),hVo=o("MBartForSequenceClassification"),pVo=o(" (mBART model)"),_Vo=l(),b3=a("li"),E_e=a("strong"),uVo=o("megatron-bert"),bVo=o(" \u2014 "),MX=a("a"),vVo=o("MegatronBertForSequenceClassification"),FVo=o(" (Megatron-BERT model)"),TVo=l(),v3=a("li"),C_e=a("strong"),MVo=o("mobilebert"),EVo=o(" \u2014 "),EX=a("a"),CVo=o("MobileBertForSequenceClassification"),wVo=o(" (MobileBERT model)"),AVo=l(),F3=a("li"),w_e=a("strong"),LVo=o("mpnet"),yVo=o(" \u2014 "),CX=a("a"),xVo=o("MPNetForSequenceClassification"),$Vo=o(" (MPNet model)"),kVo=l(),T3=a("li"),A_e=a("strong"),SVo=o("mvp"),RVo=o(" \u2014 "),wX=a("a"),PVo=o("MvpForSequenceClassification"),BVo=o(" (MVP model)"),IVo=l(),M3=a("li"),L_e=a("strong"),NVo=o("nezha"),qVo=o(" \u2014 "),AX=a("a"),jVo=o("NezhaForSequenceClassification"),DVo=o(" (Nezha model)"),GVo=l(),E3=a("li"),y_e=a("strong"),OVo=o("nystromformer"),VVo=o(" \u2014 "),LX=a("a"),XVo=o("NystromformerForSequenceClassification"),zVo=o(" (Nystr\xF6mformer model)"),QVo=l(),C3=a("li"),x_e=a("strong"),WVo=o("openai-gpt"),HVo=o(" \u2014 "),yX=a("a"),UVo=o("OpenAIGPTForSequenceClassification"),JVo=o(" (OpenAI GPT model)"),YVo=l(),w3=a("li"),$_e=a("strong"),KVo=o("opt"),ZVo=o(" \u2014 "),xX=a("a"),eXo=o("OPTForSequenceClassification"),oXo=o(" (OPT model)"),rXo=l(),A3=a("li"),k_e=a("strong"),tXo=o("perceiver"),aXo=o(" \u2014 "),$X=a("a"),nXo=o("PerceiverForSequenceClassification"),sXo=o(" (Perceiver model)"),lXo=l(),L3=a("li"),S_e=a("strong"),iXo=o("plbart"),dXo=o(" \u2014 "),kX=a("a"),cXo=o("PLBartForSequenceClassification"),fXo=o(" (PLBart model)"),mXo=l(),y3=a("li"),R_e=a("strong"),gXo=o("qdqbert"),hXo=o(" \u2014 "),SX=a("a"),pXo=o("QDQBertForSequenceClassification"),_Xo=o(" (QDQBert model)"),uXo=l(),x3=a("li"),P_e=a("strong"),bXo=o("reformer"),vXo=o(" \u2014 "),RX=a("a"),FXo=o("ReformerForSequenceClassification"),TXo=o(" (Reformer model)"),MXo=l(),$3=a("li"),B_e=a("strong"),EXo=o("rembert"),CXo=o(" \u2014 "),PX=a("a"),wXo=o("RemBertForSequenceClassification"),AXo=o(" (RemBERT model)"),LXo=l(),k3=a("li"),I_e=a("strong"),yXo=o("roberta"),xXo=o(" \u2014 "),BX=a("a"),$Xo=o("RobertaForSequenceClassification"),kXo=o(" (RoBERTa model)"),SXo=l(),S3=a("li"),N_e=a("strong"),RXo=o("roformer"),PXo=o(" \u2014 "),IX=a("a"),BXo=o("RoFormerForSequenceClassification"),IXo=o(" (RoFormer model)"),NXo=l(),R3=a("li"),q_e=a("strong"),qXo=o("squeezebert"),jXo=o(" \u2014 "),NX=a("a"),DXo=o("SqueezeBertForSequenceClassification"),GXo=o(" (SqueezeBERT model)"),OXo=l(),P3=a("li"),j_e=a("strong"),VXo=o("tapas"),XXo=o(" \u2014 "),qX=a("a"),zXo=o("TapasForSequenceClassification"),QXo=o(" (TAPAS model)"),WXo=l(),B3=a("li"),D_e=a("strong"),HXo=o("transfo-xl"),UXo=o(" \u2014 "),jX=a("a"),JXo=o("TransfoXLForSequenceClassification"),YXo=o(" (Transformer-XL model)"),KXo=l(),I3=a("li"),G_e=a("strong"),ZXo=o("xlm"),ezo=o(" \u2014 "),DX=a("a"),ozo=o("XLMForSequenceClassification"),rzo=o(" (XLM model)"),tzo=l(),N3=a("li"),O_e=a("strong"),azo=o("xlm-roberta"),nzo=o(" \u2014 "),GX=a("a"),szo=o("XLMRobertaForSequenceClassification"),lzo=o(" (XLM-RoBERTa model)"),izo=l(),q3=a("li"),V_e=a("strong"),dzo=o("xlm-roberta-xl"),czo=o(" \u2014 "),OX=a("a"),fzo=o("XLMRobertaXLForSequenceClassification"),mzo=o(" (XLM-RoBERTa-XL model)"),gzo=l(),j3=a("li"),X_e=a("strong"),hzo=o("xlnet"),pzo=o(" \u2014 "),VX=a("a"),_zo=o("XLNetForSequenceClassification"),uzo=o(" (XLNet model)"),bzo=l(),D3=a("li"),z_e=a("strong"),vzo=o("yoso"),Fzo=o(" \u2014 "),XX=a("a"),Tzo=o("YosoForSequenceClassification"),Mzo=o(" (YOSO model)"),Ezo=l(),G3=a("p"),Czo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),wzo=o("model.eval()"),Azo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),Lzo=o("model.train()"),yzo=l(),F(O3.$$.fragment),AXe=l(),nd=a("h2"),V3=a("a"),H_e=a("span"),F(ly.$$.fragment),xzo=l(),U_e=a("span"),$zo=o("AutoModelForMultipleChoice"),LXe=l(),Io=a("div"),F(iy.$$.fragment),kzo=l(),sd=a("p"),Szo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=a("a"),Rzo=o("from_pretrained()"),Pzo=o(" class method or the "),QX=a("a"),Bzo=o("from_config()"),Izo=o(` class
method.`),Nzo=l(),dy=a("p"),qzo=o("This class cannot be instantiated directly using "),J_e=a("code"),jzo=o("__init__()"),Dzo=o(" (throws an error)."),Gzo=l(),ht=a("div"),F(cy.$$.fragment),Ozo=l(),Y_e=a("p"),Vzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xzo=l(),ld=a("p"),zzo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),Qzo=o("not"),Wzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Hzo=o("from_pretrained()"),Uzo=o(" to load the model weights."),Jzo=l(),F(X3.$$.fragment),Yzo=l(),to=a("div"),F(fy.$$.fragment),Kzo=l(),Z_e=a("p"),Zzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eQo=l(),Oa=a("p"),oQo=o("The model class to instantiate is selected based on the "),eue=a("code"),rQo=o("model_type"),tQo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),aQo=o("pretrained_model_name_or_path"),nQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(":"),iQo=l(),Z=a("ul"),z3=a("li"),tue=a("strong"),dQo=o("albert"),cQo=o(" \u2014 "),HX=a("a"),fQo=o("AlbertForMultipleChoice"),mQo=o(" (ALBERT model)"),gQo=l(),Q3=a("li"),aue=a("strong"),hQo=o("bert"),pQo=o(" \u2014 "),UX=a("a"),_Qo=o("BertForMultipleChoice"),uQo=o(" (BERT model)"),bQo=l(),W3=a("li"),nue=a("strong"),vQo=o("big_bird"),FQo=o(" \u2014 "),JX=a("a"),TQo=o("BigBirdForMultipleChoice"),MQo=o(" (BigBird model)"),EQo=l(),H3=a("li"),sue=a("strong"),CQo=o("camembert"),wQo=o(" \u2014 "),YX=a("a"),AQo=o("CamembertForMultipleChoice"),LQo=o(" (CamemBERT model)"),yQo=l(),U3=a("li"),lue=a("strong"),xQo=o("canine"),$Qo=o(" \u2014 "),KX=a("a"),kQo=o("CanineForMultipleChoice"),SQo=o(" (CANINE model)"),RQo=l(),J3=a("li"),iue=a("strong"),PQo=o("convbert"),BQo=o(" \u2014 "),ZX=a("a"),IQo=o("ConvBertForMultipleChoice"),NQo=o(" (ConvBERT model)"),qQo=l(),Y3=a("li"),due=a("strong"),jQo=o("data2vec-text"),DQo=o(" \u2014 "),ez=a("a"),GQo=o("Data2VecTextForMultipleChoice"),OQo=o(" (Data2VecText model)"),VQo=l(),K3=a("li"),cue=a("strong"),XQo=o("deberta-v2"),zQo=o(" \u2014 "),oz=a("a"),QQo=o("DebertaV2ForMultipleChoice"),WQo=o(" (DeBERTa-v2 model)"),HQo=l(),Z3=a("li"),fue=a("strong"),UQo=o("distilbert"),JQo=o(" \u2014 "),rz=a("a"),YQo=o("DistilBertForMultipleChoice"),KQo=o(" (DistilBERT model)"),ZQo=l(),ev=a("li"),mue=a("strong"),eWo=o("electra"),oWo=o(" \u2014 "),tz=a("a"),rWo=o("ElectraForMultipleChoice"),tWo=o(" (ELECTRA model)"),aWo=l(),ov=a("li"),gue=a("strong"),nWo=o("flaubert"),sWo=o(" \u2014 "),az=a("a"),lWo=o("FlaubertForMultipleChoice"),iWo=o(" (FlauBERT model)"),dWo=l(),rv=a("li"),hue=a("strong"),cWo=o("fnet"),fWo=o(" \u2014 "),nz=a("a"),mWo=o("FNetForMultipleChoice"),gWo=o(" (FNet model)"),hWo=l(),tv=a("li"),pue=a("strong"),pWo=o("funnel"),_Wo=o(" \u2014 "),sz=a("a"),uWo=o("FunnelForMultipleChoice"),bWo=o(" (Funnel Transformer model)"),vWo=l(),av=a("li"),_ue=a("strong"),FWo=o("ibert"),TWo=o(" \u2014 "),lz=a("a"),MWo=o("IBertForMultipleChoice"),EWo=o(" (I-BERT model)"),CWo=l(),nv=a("li"),uue=a("strong"),wWo=o("longformer"),AWo=o(" \u2014 "),iz=a("a"),LWo=o("LongformerForMultipleChoice"),yWo=o(" (Longformer model)"),xWo=l(),sv=a("li"),bue=a("strong"),$Wo=o("megatron-bert"),kWo=o(" \u2014 "),dz=a("a"),SWo=o("MegatronBertForMultipleChoice"),RWo=o(" (Megatron-BERT model)"),PWo=l(),lv=a("li"),vue=a("strong"),BWo=o("mobilebert"),IWo=o(" \u2014 "),cz=a("a"),NWo=o("MobileBertForMultipleChoice"),qWo=o(" (MobileBERT model)"),jWo=l(),iv=a("li"),Fue=a("strong"),DWo=o("mpnet"),GWo=o(" \u2014 "),fz=a("a"),OWo=o("MPNetForMultipleChoice"),VWo=o(" (MPNet model)"),XWo=l(),dv=a("li"),Tue=a("strong"),zWo=o("nezha"),QWo=o(" \u2014 "),mz=a("a"),WWo=o("NezhaForMultipleChoice"),HWo=o(" (Nezha model)"),UWo=l(),cv=a("li"),Mue=a("strong"),JWo=o("nystromformer"),YWo=o(" \u2014 "),gz=a("a"),KWo=o("NystromformerForMultipleChoice"),ZWo=o(" (Nystr\xF6mformer model)"),eHo=l(),fv=a("li"),Eue=a("strong"),oHo=o("qdqbert"),rHo=o(" \u2014 "),hz=a("a"),tHo=o("QDQBertForMultipleChoice"),aHo=o(" (QDQBert model)"),nHo=l(),mv=a("li"),Cue=a("strong"),sHo=o("rembert"),lHo=o(" \u2014 "),pz=a("a"),iHo=o("RemBertForMultipleChoice"),dHo=o(" (RemBERT model)"),cHo=l(),gv=a("li"),wue=a("strong"),fHo=o("roberta"),mHo=o(" \u2014 "),_z=a("a"),gHo=o("RobertaForMultipleChoice"),hHo=o(" (RoBERTa model)"),pHo=l(),hv=a("li"),Aue=a("strong"),_Ho=o("roformer"),uHo=o(" \u2014 "),uz=a("a"),bHo=o("RoFormerForMultipleChoice"),vHo=o(" (RoFormer model)"),FHo=l(),pv=a("li"),Lue=a("strong"),THo=o("squeezebert"),MHo=o(" \u2014 "),bz=a("a"),EHo=o("SqueezeBertForMultipleChoice"),CHo=o(" (SqueezeBERT model)"),wHo=l(),_v=a("li"),yue=a("strong"),AHo=o("xlm"),LHo=o(" \u2014 "),vz=a("a"),yHo=o("XLMForMultipleChoice"),xHo=o(" (XLM model)"),$Ho=l(),uv=a("li"),xue=a("strong"),kHo=o("xlm-roberta"),SHo=o(" \u2014 "),Fz=a("a"),RHo=o("XLMRobertaForMultipleChoice"),PHo=o(" (XLM-RoBERTa model)"),BHo=l(),bv=a("li"),$ue=a("strong"),IHo=o("xlm-roberta-xl"),NHo=o(" \u2014 "),Tz=a("a"),qHo=o("XLMRobertaXLForMultipleChoice"),jHo=o(" (XLM-RoBERTa-XL model)"),DHo=l(),vv=a("li"),kue=a("strong"),GHo=o("xlnet"),OHo=o(" \u2014 "),Mz=a("a"),VHo=o("XLNetForMultipleChoice"),XHo=o(" (XLNet model)"),zHo=l(),Fv=a("li"),Sue=a("strong"),QHo=o("yoso"),WHo=o(" \u2014 "),Ez=a("a"),HHo=o("YosoForMultipleChoice"),UHo=o(" (YOSO model)"),JHo=l(),Tv=a("p"),YHo=o("The model is set in evaluation mode by default using "),Rue=a("code"),KHo=o("model.eval()"),ZHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),eUo=o("model.train()"),oUo=l(),F(Mv.$$.fragment),yXe=l(),id=a("h2"),Ev=a("a"),Bue=a("span"),F(my.$$.fragment),rUo=l(),Iue=a("span"),tUo=o("AutoModelForNextSentencePrediction"),xXe=l(),No=a("div"),F(gy.$$.fragment),aUo=l(),dd=a("p"),nUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=a("a"),sUo=o("from_pretrained()"),lUo=o(" class method or the "),wz=a("a"),iUo=o("from_config()"),dUo=o(` class
method.`),cUo=l(),hy=a("p"),fUo=o("This class cannot be instantiated directly using "),Nue=a("code"),mUo=o("__init__()"),gUo=o(" (throws an error)."),hUo=l(),pt=a("div"),F(py.$$.fragment),pUo=l(),que=a("p"),_Uo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uUo=l(),cd=a("p"),bUo=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),vUo=o("not"),FUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),TUo=o("from_pretrained()"),MUo=o(" to load the model weights."),EUo=l(),F(Cv.$$.fragment),CUo=l(),ao=a("div"),F(_y.$$.fragment),wUo=l(),Due=a("p"),AUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LUo=l(),Va=a("p"),yUo=o("The model class to instantiate is selected based on the "),Gue=a("code"),xUo=o("model_type"),$Uo=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),kUo=o("pretrained_model_name_or_path"),SUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),RUo=o("pretrained_model_name_or_path"),PUo=o(":"),BUo=l(),qo=a("ul"),wv=a("li"),Xue=a("strong"),IUo=o("bert"),NUo=o(" \u2014 "),Lz=a("a"),qUo=o("BertForNextSentencePrediction"),jUo=o(" (BERT model)"),DUo=l(),Av=a("li"),zue=a("strong"),GUo=o("fnet"),OUo=o(" \u2014 "),yz=a("a"),VUo=o("FNetForNextSentencePrediction"),XUo=o(" (FNet model)"),zUo=l(),Lv=a("li"),Que=a("strong"),QUo=o("megatron-bert"),WUo=o(" \u2014 "),xz=a("a"),HUo=o("MegatronBertForNextSentencePrediction"),UUo=o(" (Megatron-BERT model)"),JUo=l(),yv=a("li"),Wue=a("strong"),YUo=o("mobilebert"),KUo=o(" \u2014 "),$z=a("a"),ZUo=o("MobileBertForNextSentencePrediction"),eJo=o(" (MobileBERT model)"),oJo=l(),xv=a("li"),Hue=a("strong"),rJo=o("nezha"),tJo=o(" \u2014 "),kz=a("a"),aJo=o("NezhaForNextSentencePrediction"),nJo=o(" (Nezha model)"),sJo=l(),$v=a("li"),Uue=a("strong"),lJo=o("qdqbert"),iJo=o(" \u2014 "),Sz=a("a"),dJo=o("QDQBertForNextSentencePrediction"),cJo=o(" (QDQBert model)"),fJo=l(),kv=a("p"),mJo=o("The model is set in evaluation mode by default using "),Jue=a("code"),gJo=o("model.eval()"),hJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),pJo=o("model.train()"),_Jo=l(),F(Sv.$$.fragment),$Xe=l(),fd=a("h2"),Rv=a("a"),Kue=a("span"),F(uy.$$.fragment),uJo=l(),Zue=a("span"),bJo=o("AutoModelForTokenClassification"),kXe=l(),jo=a("div"),F(by.$$.fragment),vJo=l(),md=a("p"),FJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=a("a"),TJo=o("from_pretrained()"),MJo=o(" class method or the "),Pz=a("a"),EJo=o("from_config()"),CJo=o(` class
method.`),wJo=l(),vy=a("p"),AJo=o("This class cannot be instantiated directly using "),e1e=a("code"),LJo=o("__init__()"),yJo=o(" (throws an error)."),xJo=l(),_t=a("div"),F(Fy.$$.fragment),$Jo=l(),o1e=a("p"),kJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SJo=l(),gd=a("p"),RJo=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),PJo=o("not"),BJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),IJo=o("from_pretrained()"),NJo=o(" to load the model weights."),qJo=l(),F(Pv.$$.fragment),jJo=l(),no=a("div"),F(Ty.$$.fragment),DJo=l(),t1e=a("p"),GJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OJo=l(),Xa=a("p"),VJo=o("The model class to instantiate is selected based on the "),a1e=a("code"),XJo=o("model_type"),zJo=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),QJo=o("pretrained_model_name_or_path"),WJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),HJo=o("pretrained_model_name_or_path"),UJo=o(":"),JJo=l(),U=a("ul"),Bv=a("li"),l1e=a("strong"),YJo=o("albert"),KJo=o(" \u2014 "),Iz=a("a"),ZJo=o("AlbertForTokenClassification"),eYo=o(" (ALBERT model)"),oYo=l(),Iv=a("li"),i1e=a("strong"),rYo=o("bert"),tYo=o(" \u2014 "),Nz=a("a"),aYo=o("BertForTokenClassification"),nYo=o(" (BERT model)"),sYo=l(),Nv=a("li"),d1e=a("strong"),lYo=o("big_bird"),iYo=o(" \u2014 "),qz=a("a"),dYo=o("BigBirdForTokenClassification"),cYo=o(" (BigBird model)"),fYo=l(),qv=a("li"),c1e=a("strong"),mYo=o("bloom"),gYo=o(" \u2014 "),jz=a("a"),hYo=o("BloomForTokenClassification"),pYo=o(" (BLOOM model)"),_Yo=l(),jv=a("li"),f1e=a("strong"),uYo=o("camembert"),bYo=o(" \u2014 "),Dz=a("a"),vYo=o("CamembertForTokenClassification"),FYo=o(" (CamemBERT model)"),TYo=l(),Dv=a("li"),m1e=a("strong"),MYo=o("canine"),EYo=o(" \u2014 "),Gz=a("a"),CYo=o("CanineForTokenClassification"),wYo=o(" (CANINE model)"),AYo=l(),Gv=a("li"),g1e=a("strong"),LYo=o("convbert"),yYo=o(" \u2014 "),Oz=a("a"),xYo=o("ConvBertForTokenClassification"),$Yo=o(" (ConvBERT model)"),kYo=l(),Ov=a("li"),h1e=a("strong"),SYo=o("data2vec-text"),RYo=o(" \u2014 "),Vz=a("a"),PYo=o("Data2VecTextForTokenClassification"),BYo=o(" (Data2VecText model)"),IYo=l(),Vv=a("li"),p1e=a("strong"),NYo=o("deberta"),qYo=o(" \u2014 "),Xz=a("a"),jYo=o("DebertaForTokenClassification"),DYo=o(" (DeBERTa model)"),GYo=l(),Xv=a("li"),_1e=a("strong"),OYo=o("deberta-v2"),VYo=o(" \u2014 "),zz=a("a"),XYo=o("DebertaV2ForTokenClassification"),zYo=o(" (DeBERTa-v2 model)"),QYo=l(),zv=a("li"),u1e=a("strong"),WYo=o("distilbert"),HYo=o(" \u2014 "),Qz=a("a"),UYo=o("DistilBertForTokenClassification"),JYo=o(" (DistilBERT model)"),YYo=l(),Qv=a("li"),b1e=a("strong"),KYo=o("electra"),ZYo=o(" \u2014 "),Wz=a("a"),eKo=o("ElectraForTokenClassification"),oKo=o(" (ELECTRA model)"),rKo=l(),Wv=a("li"),v1e=a("strong"),tKo=o("flaubert"),aKo=o(" \u2014 "),Hz=a("a"),nKo=o("FlaubertForTokenClassification"),sKo=o(" (FlauBERT model)"),lKo=l(),Hv=a("li"),F1e=a("strong"),iKo=o("fnet"),dKo=o(" \u2014 "),Uz=a("a"),cKo=o("FNetForTokenClassification"),fKo=o(" (FNet model)"),mKo=l(),Uv=a("li"),T1e=a("strong"),gKo=o("funnel"),hKo=o(" \u2014 "),Jz=a("a"),pKo=o("FunnelForTokenClassification"),_Ko=o(" (Funnel Transformer model)"),uKo=l(),Jv=a("li"),M1e=a("strong"),bKo=o("gpt2"),vKo=o(" \u2014 "),Yz=a("a"),FKo=o("GPT2ForTokenClassification"),TKo=o(" (OpenAI GPT-2 model)"),MKo=l(),Yv=a("li"),E1e=a("strong"),EKo=o("ibert"),CKo=o(" \u2014 "),Kz=a("a"),wKo=o("IBertForTokenClassification"),AKo=o(" (I-BERT model)"),LKo=l(),Kv=a("li"),C1e=a("strong"),yKo=o("layoutlm"),xKo=o(" \u2014 "),Zz=a("a"),$Ko=o("LayoutLMForTokenClassification"),kKo=o(" (LayoutLM model)"),SKo=l(),Zv=a("li"),w1e=a("strong"),RKo=o("layoutlmv2"),PKo=o(" \u2014 "),eQ=a("a"),BKo=o("LayoutLMv2ForTokenClassification"),IKo=o(" (LayoutLMv2 model)"),NKo=l(),eF=a("li"),A1e=a("strong"),qKo=o("layoutlmv3"),jKo=o(" \u2014 "),oQ=a("a"),DKo=o("LayoutLMv3ForTokenClassification"),GKo=o(" (LayoutLMv3 model)"),OKo=l(),oF=a("li"),L1e=a("strong"),VKo=o("longformer"),XKo=o(" \u2014 "),rQ=a("a"),zKo=o("LongformerForTokenClassification"),QKo=o(" (Longformer model)"),WKo=l(),rF=a("li"),y1e=a("strong"),HKo=o("megatron-bert"),UKo=o(" \u2014 "),tQ=a("a"),JKo=o("MegatronBertForTokenClassification"),YKo=o(" (Megatron-BERT model)"),KKo=l(),tF=a("li"),x1e=a("strong"),ZKo=o("mobilebert"),eZo=o(" \u2014 "),aQ=a("a"),oZo=o("MobileBertForTokenClassification"),rZo=o(" (MobileBERT model)"),tZo=l(),aF=a("li"),$1e=a("strong"),aZo=o("mpnet"),nZo=o(" \u2014 "),nQ=a("a"),sZo=o("MPNetForTokenClassification"),lZo=o(" (MPNet model)"),iZo=l(),nF=a("li"),k1e=a("strong"),dZo=o("nezha"),cZo=o(" \u2014 "),sQ=a("a"),fZo=o("NezhaForTokenClassification"),mZo=o(" (Nezha model)"),gZo=l(),sF=a("li"),S1e=a("strong"),hZo=o("nystromformer"),pZo=o(" \u2014 "),lQ=a("a"),_Zo=o("NystromformerForTokenClassification"),uZo=o(" (Nystr\xF6mformer model)"),bZo=l(),lF=a("li"),R1e=a("strong"),vZo=o("qdqbert"),FZo=o(" \u2014 "),iQ=a("a"),TZo=o("QDQBertForTokenClassification"),MZo=o(" (QDQBert model)"),EZo=l(),iF=a("li"),P1e=a("strong"),CZo=o("rembert"),wZo=o(" \u2014 "),dQ=a("a"),AZo=o("RemBertForTokenClassification"),LZo=o(" (RemBERT model)"),yZo=l(),dF=a("li"),B1e=a("strong"),xZo=o("roberta"),$Zo=o(" \u2014 "),cQ=a("a"),kZo=o("RobertaForTokenClassification"),SZo=o(" (RoBERTa model)"),RZo=l(),cF=a("li"),I1e=a("strong"),PZo=o("roformer"),BZo=o(" \u2014 "),fQ=a("a"),IZo=o("RoFormerForTokenClassification"),NZo=o(" (RoFormer model)"),qZo=l(),fF=a("li"),N1e=a("strong"),jZo=o("squeezebert"),DZo=o(" \u2014 "),mQ=a("a"),GZo=o("SqueezeBertForTokenClassification"),OZo=o(" (SqueezeBERT model)"),VZo=l(),mF=a("li"),q1e=a("strong"),XZo=o("xlm"),zZo=o(" \u2014 "),gQ=a("a"),QZo=o("XLMForTokenClassification"),WZo=o(" (XLM model)"),HZo=l(),gF=a("li"),j1e=a("strong"),UZo=o("xlm-roberta"),JZo=o(" \u2014 "),hQ=a("a"),YZo=o("XLMRobertaForTokenClassification"),KZo=o(" (XLM-RoBERTa model)"),ZZo=l(),hF=a("li"),D1e=a("strong"),eer=o("xlm-roberta-xl"),oer=o(" \u2014 "),pQ=a("a"),rer=o("XLMRobertaXLForTokenClassification"),ter=o(" (XLM-RoBERTa-XL model)"),aer=l(),pF=a("li"),G1e=a("strong"),ner=o("xlnet"),ser=o(" \u2014 "),_Q=a("a"),ler=o("XLNetForTokenClassification"),ier=o(" (XLNet model)"),der=l(),_F=a("li"),O1e=a("strong"),cer=o("yoso"),fer=o(" \u2014 "),uQ=a("a"),mer=o("YosoForTokenClassification"),ger=o(" (YOSO model)"),her=l(),uF=a("p"),per=o("The model is set in evaluation mode by default using "),V1e=a("code"),_er=o("model.eval()"),uer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=a("code"),ber=o("model.train()"),ver=l(),F(bF.$$.fragment),SXe=l(),hd=a("h2"),vF=a("a"),z1e=a("span"),F(My.$$.fragment),Fer=l(),Q1e=a("span"),Ter=o("AutoModelForQuestionAnswering"),RXe=l(),Do=a("div"),F(Ey.$$.fragment),Mer=l(),pd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),vQ=a("a"),Aer=o("from_config()"),Ler=o(` class
method.`),yer=l(),Cy=a("p"),xer=o("This class cannot be instantiated directly using "),W1e=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),ut=a("div"),F(wy.$$.fragment),Rer=l(),H1e=a("p"),Per=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ber=l(),_d=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),Ner=o("not"),qer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),F(FF.$$.fragment),Oer=l(),so=a("div"),F(Ay.$$.fragment),Ver=l(),J1e=a("p"),Xer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zer=l(),za=a("p"),Qer=o("The model class to instantiate is selected based on the "),Y1e=a("code"),Wer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),V=a("ul"),TF=a("li"),e2e=a("strong"),eor=o("albert"),oor=o(" \u2014 "),TQ=a("a"),ror=o("AlbertForQuestionAnswering"),tor=o(" (ALBERT model)"),aor=l(),MF=a("li"),o2e=a("strong"),nor=o("bart"),sor=o(" \u2014 "),MQ=a("a"),lor=o("BartForQuestionAnswering"),ior=o(" (BART model)"),dor=l(),EF=a("li"),r2e=a("strong"),cor=o("bert"),mor=o(" \u2014 "),EQ=a("a"),gor=o("BertForQuestionAnswering"),hor=o(" (BERT model)"),por=l(),CF=a("li"),t2e=a("strong"),_or=o("big_bird"),uor=o(" \u2014 "),CQ=a("a"),bor=o("BigBirdForQuestionAnswering"),vor=o(" (BigBird model)"),For=l(),wF=a("li"),a2e=a("strong"),Tor=o("bigbird_pegasus"),Mor=o(" \u2014 "),wQ=a("a"),Eor=o("BigBirdPegasusForQuestionAnswering"),Cor=o(" (BigBird-Pegasus model)"),wor=l(),AF=a("li"),n2e=a("strong"),Aor=o("camembert"),Lor=o(" \u2014 "),AQ=a("a"),yor=o("CamembertForQuestionAnswering"),xor=o(" (CamemBERT model)"),$or=l(),LF=a("li"),s2e=a("strong"),kor=o("canine"),Sor=o(" \u2014 "),LQ=a("a"),Ror=o("CanineForQuestionAnswering"),Por=o(" (CANINE model)"),Bor=l(),yF=a("li"),l2e=a("strong"),Ior=o("convbert"),Nor=o(" \u2014 "),yQ=a("a"),qor=o("ConvBertForQuestionAnswering"),jor=o(" (ConvBERT model)"),Dor=l(),xF=a("li"),i2e=a("strong"),Gor=o("data2vec-text"),Oor=o(" \u2014 "),xQ=a("a"),Vor=o("Data2VecTextForQuestionAnswering"),Xor=o(" (Data2VecText model)"),zor=l(),$F=a("li"),d2e=a("strong"),Qor=o("deberta"),Wor=o(" \u2014 "),$Q=a("a"),Hor=o("DebertaForQuestionAnswering"),Uor=o(" (DeBERTa model)"),Jor=l(),kF=a("li"),c2e=a("strong"),Yor=o("deberta-v2"),Kor=o(" \u2014 "),kQ=a("a"),Zor=o("DebertaV2ForQuestionAnswering"),err=o(" (DeBERTa-v2 model)"),orr=l(),SF=a("li"),f2e=a("strong"),rrr=o("distilbert"),trr=o(" \u2014 "),SQ=a("a"),arr=o("DistilBertForQuestionAnswering"),nrr=o(" (DistilBERT model)"),srr=l(),RF=a("li"),m2e=a("strong"),lrr=o("electra"),irr=o(" \u2014 "),RQ=a("a"),drr=o("ElectraForQuestionAnswering"),crr=o(" (ELECTRA model)"),frr=l(),PF=a("li"),g2e=a("strong"),mrr=o("flaubert"),grr=o(" \u2014 "),PQ=a("a"),hrr=o("FlaubertForQuestionAnsweringSimple"),prr=o(" (FlauBERT model)"),_rr=l(),BF=a("li"),h2e=a("strong"),urr=o("fnet"),brr=o(" \u2014 "),BQ=a("a"),vrr=o("FNetForQuestionAnswering"),Frr=o(" (FNet model)"),Trr=l(),IF=a("li"),p2e=a("strong"),Mrr=o("funnel"),Err=o(" \u2014 "),IQ=a("a"),Crr=o("FunnelForQuestionAnswering"),wrr=o(" (Funnel Transformer model)"),Arr=l(),NF=a("li"),_2e=a("strong"),Lrr=o("gptj"),yrr=o(" \u2014 "),NQ=a("a"),xrr=o("GPTJForQuestionAnswering"),$rr=o(" (GPT-J model)"),krr=l(),qF=a("li"),u2e=a("strong"),Srr=o("ibert"),Rrr=o(" \u2014 "),qQ=a("a"),Prr=o("IBertForQuestionAnswering"),Brr=o(" (I-BERT model)"),Irr=l(),jF=a("li"),b2e=a("strong"),Nrr=o("layoutlmv2"),qrr=o(" \u2014 "),jQ=a("a"),jrr=o("LayoutLMv2ForQuestionAnswering"),Drr=o(" (LayoutLMv2 model)"),Grr=l(),DF=a("li"),v2e=a("strong"),Orr=o("layoutlmv3"),Vrr=o(" \u2014 "),DQ=a("a"),Xrr=o("LayoutLMv3ForQuestionAnswering"),zrr=o(" (LayoutLMv3 model)"),Qrr=l(),GF=a("li"),F2e=a("strong"),Wrr=o("led"),Hrr=o(" \u2014 "),GQ=a("a"),Urr=o("LEDForQuestionAnswering"),Jrr=o(" (LED model)"),Yrr=l(),OF=a("li"),T2e=a("strong"),Krr=o("longformer"),Zrr=o(" \u2014 "),OQ=a("a"),etr=o("LongformerForQuestionAnswering"),otr=o(" (Longformer model)"),rtr=l(),VF=a("li"),M2e=a("strong"),ttr=o("lxmert"),atr=o(" \u2014 "),VQ=a("a"),ntr=o("LxmertForQuestionAnswering"),str=o(" (LXMERT model)"),ltr=l(),XF=a("li"),E2e=a("strong"),itr=o("mbart"),dtr=o(" \u2014 "),XQ=a("a"),ctr=o("MBartForQuestionAnswering"),ftr=o(" (mBART model)"),mtr=l(),zF=a("li"),C2e=a("strong"),gtr=o("megatron-bert"),htr=o(" \u2014 "),zQ=a("a"),ptr=o("MegatronBertForQuestionAnswering"),_tr=o(" (Megatron-BERT model)"),utr=l(),QF=a("li"),w2e=a("strong"),btr=o("mobilebert"),vtr=o(" \u2014 "),QQ=a("a"),Ftr=o("MobileBertForQuestionAnswering"),Ttr=o(" (MobileBERT model)"),Mtr=l(),WF=a("li"),A2e=a("strong"),Etr=o("mpnet"),Ctr=o(" \u2014 "),WQ=a("a"),wtr=o("MPNetForQuestionAnswering"),Atr=o(" (MPNet model)"),Ltr=l(),HF=a("li"),L2e=a("strong"),ytr=o("mvp"),xtr=o(" \u2014 "),HQ=a("a"),$tr=o("MvpForQuestionAnswering"),ktr=o(" (MVP model)"),Str=l(),UF=a("li"),y2e=a("strong"),Rtr=o("nezha"),Ptr=o(" \u2014 "),UQ=a("a"),Btr=o("NezhaForQuestionAnswering"),Itr=o(" (Nezha model)"),Ntr=l(),JF=a("li"),x2e=a("strong"),qtr=o("nystromformer"),jtr=o(" \u2014 "),JQ=a("a"),Dtr=o("NystromformerForQuestionAnswering"),Gtr=o(" (Nystr\xF6mformer model)"),Otr=l(),YF=a("li"),$2e=a("strong"),Vtr=o("qdqbert"),Xtr=o(" \u2014 "),YQ=a("a"),ztr=o("QDQBertForQuestionAnswering"),Qtr=o(" (QDQBert model)"),Wtr=l(),KF=a("li"),k2e=a("strong"),Htr=o("reformer"),Utr=o(" \u2014 "),KQ=a("a"),Jtr=o("ReformerForQuestionAnswering"),Ytr=o(" (Reformer model)"),Ktr=l(),ZF=a("li"),S2e=a("strong"),Ztr=o("rembert"),ear=o(" \u2014 "),ZQ=a("a"),oar=o("RemBertForQuestionAnswering"),rar=o(" (RemBERT model)"),tar=l(),eT=a("li"),R2e=a("strong"),aar=o("roberta"),nar=o(" \u2014 "),eW=a("a"),sar=o("RobertaForQuestionAnswering"),lar=o(" (RoBERTa model)"),iar=l(),oT=a("li"),P2e=a("strong"),dar=o("roformer"),car=o(" \u2014 "),oW=a("a"),far=o("RoFormerForQuestionAnswering"),mar=o(" (RoFormer model)"),gar=l(),rT=a("li"),B2e=a("strong"),har=o("splinter"),par=o(" \u2014 "),rW=a("a"),_ar=o("SplinterForQuestionAnswering"),uar=o(" (Splinter model)"),bar=l(),tT=a("li"),I2e=a("strong"),Far=o("squeezebert"),Tar=o(" \u2014 "),tW=a("a"),Mar=o("SqueezeBertForQuestionAnswering"),Ear=o(" (SqueezeBERT model)"),Car=l(),aT=a("li"),N2e=a("strong"),war=o("xlm"),Aar=o(" \u2014 "),aW=a("a"),Lar=o("XLMForQuestionAnsweringSimple"),yar=o(" (XLM model)"),xar=l(),nT=a("li"),q2e=a("strong"),$ar=o("xlm-roberta"),kar=o(" \u2014 "),nW=a("a"),Sar=o("XLMRobertaForQuestionAnswering"),Rar=o(" (XLM-RoBERTa model)"),Par=l(),sT=a("li"),j2e=a("strong"),Bar=o("xlm-roberta-xl"),Iar=o(" \u2014 "),sW=a("a"),Nar=o("XLMRobertaXLForQuestionAnswering"),qar=o(" (XLM-RoBERTa-XL model)"),jar=l(),lT=a("li"),D2e=a("strong"),Dar=o("xlnet"),Gar=o(" \u2014 "),lW=a("a"),Oar=o("XLNetForQuestionAnsweringSimple"),Var=o(" (XLNet model)"),Xar=l(),iT=a("li"),G2e=a("strong"),zar=o("yoso"),Qar=o(" \u2014 "),iW=a("a"),War=o("YosoForQuestionAnswering"),Har=o(" (YOSO model)"),Uar=l(),dT=a("p"),Jar=o("The model is set in evaluation mode by default using "),O2e=a("code"),Yar=o("model.eval()"),Kar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=a("code"),Zar=o("model.train()"),enr=l(),F(cT.$$.fragment),PXe=l(),ud=a("h2"),fT=a("a"),X2e=a("span"),F(Ly.$$.fragment),onr=l(),z2e=a("span"),rnr=o("AutoModelForTableQuestionAnswering"),BXe=l(),Go=a("div"),F(yy.$$.fragment),tnr=l(),bd=a("p"),anr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=a("a"),nnr=o("from_pretrained()"),snr=o(" class method or the "),cW=a("a"),lnr=o("from_config()"),inr=o(` class
method.`),dnr=l(),xy=a("p"),cnr=o("This class cannot be instantiated directly using "),Q2e=a("code"),fnr=o("__init__()"),mnr=o(" (throws an error)."),gnr=l(),bt=a("div"),F($y.$$.fragment),hnr=l(),W2e=a("p"),pnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_nr=l(),vd=a("p"),unr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),bnr=o("not"),vnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" to load the model weights."),Mnr=l(),F(mT.$$.fragment),Enr=l(),lo=a("div"),F(ky.$$.fragment),Cnr=l(),U2e=a("p"),wnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Anr=l(),Qa=a("p"),Lnr=o("The model class to instantiate is selected based on the "),J2e=a("code"),ynr=o("model_type"),xnr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(":"),Pnr=l(),Z2e=a("ul"),gT=a("li"),ebe=a("strong"),Bnr=o("tapas"),Inr=o(" \u2014 "),mW=a("a"),Nnr=o("TapasForQuestionAnswering"),qnr=o(" (TAPAS model)"),jnr=l(),hT=a("p"),Dnr=o("The model is set in evaluation mode by default using "),obe=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),Vnr=o("model.train()"),Xnr=l(),F(pT.$$.fragment),IXe=l(),Fd=a("h2"),_T=a("a"),tbe=a("span"),F(Sy.$$.fragment),znr=l(),abe=a("span"),Qnr=o("AutoModelForImageClassification"),NXe=l(),Oo=a("div"),F(Ry.$$.fragment),Wnr=l(),Td=a("p"),Hnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=a("a"),Unr=o("from_pretrained()"),Jnr=o(" class method or the "),hW=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),Py=a("p"),esr=o("This class cannot be instantiated directly using "),nbe=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),vt=a("div"),F(By.$$.fragment),asr=l(),sbe=a("p"),nsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ssr=l(),Md=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),csr=o("from_pretrained()"),fsr=o(" to load the model weights."),msr=l(),F(uT.$$.fragment),gsr=l(),io=a("div"),F(Iy.$$.fragment),hsr=l(),ibe=a("p"),psr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_sr=l(),Wa=a("p"),usr=o("The model class to instantiate is selected based on the "),dbe=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),ve=a("ul"),bT=a("li"),mbe=a("strong"),wsr=o("beit"),Asr=o(" \u2014 "),_W=a("a"),Lsr=o("BeitForImageClassification"),ysr=o(" (BEiT model)"),xsr=l(),vT=a("li"),gbe=a("strong"),$sr=o("convnext"),ksr=o(" \u2014 "),uW=a("a"),Ssr=o("ConvNextForImageClassification"),Rsr=o(" (ConvNeXT model)"),Psr=l(),FT=a("li"),hbe=a("strong"),Bsr=o("cvt"),Isr=o(" \u2014 "),bW=a("a"),Nsr=o("CvtForImageClassification"),qsr=o(" (CvT model)"),jsr=l(),TT=a("li"),pbe=a("strong"),Dsr=o("data2vec-vision"),Gsr=o(" \u2014 "),vW=a("a"),Osr=o("Data2VecVisionForImageClassification"),Vsr=o(" (Data2VecVision model)"),Xsr=l(),Hs=a("li"),_be=a("strong"),zsr=o("deit"),Qsr=o(" \u2014 "),FW=a("a"),Wsr=o("DeiTForImageClassification"),Hsr=o(" or "),TW=a("a"),Usr=o("DeiTForImageClassificationWithTeacher"),Jsr=o(" (DeiT model)"),Ysr=l(),MT=a("li"),ube=a("strong"),Ksr=o("imagegpt"),Zsr=o(" \u2014 "),MW=a("a"),elr=o("ImageGPTForImageClassification"),olr=o(" (ImageGPT model)"),rlr=l(),Us=a("li"),bbe=a("strong"),tlr=o("levit"),alr=o(" \u2014 "),EW=a("a"),nlr=o("LevitForImageClassification"),slr=o(" or "),CW=a("a"),llr=o("LevitForImageClassificationWithTeacher"),ilr=o(" (LeViT model)"),dlr=l(),ET=a("li"),vbe=a("strong"),clr=o("mobilevit"),flr=o(" \u2014 "),wW=a("a"),mlr=o("MobileViTForImageClassification"),glr=o(" (MobileViT model)"),hlr=l(),Ft=a("li"),Fbe=a("strong"),plr=o("perceiver"),_lr=o(" \u2014 "),AW=a("a"),ulr=o("PerceiverForImageClassificationLearned"),blr=o(" or "),LW=a("a"),vlr=o("PerceiverForImageClassificationFourier"),Flr=o(" or "),yW=a("a"),Tlr=o("PerceiverForImageClassificationConvProcessing"),Mlr=o(" (Perceiver model)"),Elr=l(),CT=a("li"),Tbe=a("strong"),Clr=o("poolformer"),wlr=o(" \u2014 "),xW=a("a"),Alr=o("PoolFormerForImageClassification"),Llr=o(" (PoolFormer model)"),ylr=l(),wT=a("li"),Mbe=a("strong"),xlr=o("regnet"),$lr=o(" \u2014 "),$W=a("a"),klr=o("RegNetForImageClassification"),Slr=o(" (RegNet model)"),Rlr=l(),AT=a("li"),Ebe=a("strong"),Plr=o("resnet"),Blr=o(" \u2014 "),kW=a("a"),Ilr=o("ResNetForImageClassification"),Nlr=o(" (ResNet model)"),qlr=l(),LT=a("li"),Cbe=a("strong"),jlr=o("segformer"),Dlr=o(" \u2014 "),SW=a("a"),Glr=o("SegformerForImageClassification"),Olr=o(" (SegFormer model)"),Vlr=l(),yT=a("li"),wbe=a("strong"),Xlr=o("swin"),zlr=o(" \u2014 "),RW=a("a"),Qlr=o("SwinForImageClassification"),Wlr=o(" (Swin Transformer model)"),Hlr=l(),xT=a("li"),Abe=a("strong"),Ulr=o("van"),Jlr=o(" \u2014 "),PW=a("a"),Ylr=o("VanForImageClassification"),Klr=o(" (VAN model)"),Zlr=l(),$T=a("li"),Lbe=a("strong"),eir=o("vit"),oir=o(" \u2014 "),BW=a("a"),rir=o("ViTForImageClassification"),tir=o(" (ViT model)"),air=l(),kT=a("p"),nir=o("The model is set in evaluation mode by default using "),ybe=a("code"),sir=o("model.eval()"),lir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=a("code"),iir=o("model.train()"),dir=l(),F(ST.$$.fragment),qXe=l(),Ed=a("h2"),RT=a("a"),$be=a("span"),F(Ny.$$.fragment),cir=l(),kbe=a("span"),fir=o("AutoModelForVision2Seq"),jXe=l(),Vo=a("div"),F(qy.$$.fragment),mir=l(),Cd=a("p"),gir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=a("a"),hir=o("from_pretrained()"),pir=o(" class method or the "),NW=a("a"),_ir=o("from_config()"),uir=o(` class
method.`),bir=l(),jy=a("p"),vir=o("This class cannot be instantiated directly using "),Sbe=a("code"),Fir=o("__init__()"),Tir=o(" (throws an error)."),Mir=l(),Tt=a("div"),F(Dy.$$.fragment),Eir=l(),Rbe=a("p"),Cir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wir=l(),wd=a("p"),Air=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),Lir=o("not"),yir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),xir=o("from_pretrained()"),$ir=o(" to load the model weights."),kir=l(),F(PT.$$.fragment),Sir=l(),co=a("div"),F(Gy.$$.fragment),Rir=l(),Bbe=a("p"),Pir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bir=l(),Ha=a("p"),Iir=o("The model class to instantiate is selected based on the "),Ibe=a("code"),Nir=o("model_type"),qir=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),jir=o("pretrained_model_name_or_path"),Dir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),Gir=o("pretrained_model_name_or_path"),Oir=o(":"),Vir=l(),jbe=a("ul"),BT=a("li"),Dbe=a("strong"),Xir=o("vision-encoder-decoder"),zir=o(" \u2014 "),jW=a("a"),Qir=o("VisionEncoderDecoderModel"),Wir=o(" (Vision Encoder decoder model)"),Hir=l(),IT=a("p"),Uir=o("The model is set in evaluation mode by default using "),Gbe=a("code"),Jir=o("model.eval()"),Yir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=a("code"),Kir=o("model.train()"),Zir=l(),F(NT.$$.fragment),DXe=l(),Ad=a("h2"),qT=a("a"),Vbe=a("span"),F(Oy.$$.fragment),edr=l(),Xbe=a("span"),odr=o("AutoModelForVisualQuestionAnswering"),GXe=l(),Xo=a("div"),F(Vy.$$.fragment),rdr=l(),Ld=a("p"),tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=a("a"),adr=o("from_pretrained()"),ndr=o(" class method or the "),GW=a("a"),sdr=o("from_config()"),ldr=o(` class
method.`),idr=l(),Xy=a("p"),ddr=o("This class cannot be instantiated directly using "),zbe=a("code"),cdr=o("__init__()"),fdr=o(" (throws an error)."),mdr=l(),Mt=a("div"),F(zy.$$.fragment),gdr=l(),Qbe=a("p"),hdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),pdr=l(),yd=a("p"),_dr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),udr=o("not"),bdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),vdr=o("from_pretrained()"),Fdr=o(" to load the model weights."),Tdr=l(),F(jT.$$.fragment),Mdr=l(),fo=a("div"),F(Qy.$$.fragment),Edr=l(),Hbe=a("p"),Cdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),wdr=l(),Ua=a("p"),Adr=o("The model class to instantiate is selected based on the "),Ube=a("code"),Ldr=o("model_type"),ydr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),xdr=o("pretrained_model_name_or_path"),$dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),kdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Rdr=l(),Kbe=a("ul"),DT=a("li"),Zbe=a("strong"),Pdr=o("vilt"),Bdr=o(" \u2014 "),VW=a("a"),Idr=o("ViltForQuestionAnswering"),Ndr=o(" (ViLT model)"),qdr=l(),GT=a("p"),jdr=o("The model is set in evaluation mode by default using "),e3e=a("code"),Ddr=o("model.eval()"),Gdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=a("code"),Odr=o("model.train()"),Vdr=l(),F(OT.$$.fragment),OXe=l(),xd=a("h2"),VT=a("a"),r3e=a("span"),F(Wy.$$.fragment),Xdr=l(),t3e=a("span"),zdr=o("AutoModelForAudioClassification"),VXe=l(),zo=a("div"),F(Hy.$$.fragment),Qdr=l(),$d=a("p"),Wdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=a("a"),Hdr=o("from_pretrained()"),Udr=o(" class method or the "),zW=a("a"),Jdr=o("from_config()"),Ydr=o(` class
method.`),Kdr=l(),Uy=a("p"),Zdr=o("This class cannot be instantiated directly using "),a3e=a("code"),ecr=o("__init__()"),ocr=o(" (throws an error)."),rcr=l(),Et=a("div"),F(Jy.$$.fragment),tcr=l(),n3e=a("p"),acr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ncr=l(),kd=a("p"),scr=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),lcr=o("not"),icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),dcr=o("from_pretrained()"),ccr=o(" to load the model weights."),fcr=l(),F(XT.$$.fragment),mcr=l(),mo=a("div"),F(Yy.$$.fragment),gcr=l(),l3e=a("p"),hcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),pcr=l(),Ja=a("p"),_cr=o("The model class to instantiate is selected based on the "),i3e=a("code"),ucr=o("model_type"),bcr=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(":"),Ecr=l(),Pe=a("ul"),zT=a("li"),f3e=a("strong"),Ccr=o("data2vec-audio"),wcr=o(" \u2014 "),WW=a("a"),Acr=o("Data2VecAudioForSequenceClassification"),Lcr=o(" (Data2VecAudio model)"),ycr=l(),QT=a("li"),m3e=a("strong"),xcr=o("hubert"),$cr=o(" \u2014 "),HW=a("a"),kcr=o("HubertForSequenceClassification"),Scr=o(" (Hubert model)"),Rcr=l(),WT=a("li"),g3e=a("strong"),Pcr=o("sew"),Bcr=o(" \u2014 "),UW=a("a"),Icr=o("SEWForSequenceClassification"),Ncr=o(" (SEW model)"),qcr=l(),HT=a("li"),h3e=a("strong"),jcr=o("sew-d"),Dcr=o(" \u2014 "),JW=a("a"),Gcr=o("SEWDForSequenceClassification"),Ocr=o(" (SEW-D model)"),Vcr=l(),UT=a("li"),p3e=a("strong"),Xcr=o("unispeech"),zcr=o(" \u2014 "),YW=a("a"),Qcr=o("UniSpeechForSequenceClassification"),Wcr=o(" (UniSpeech model)"),Hcr=l(),JT=a("li"),_3e=a("strong"),Ucr=o("unispeech-sat"),Jcr=o(" \u2014 "),KW=a("a"),Ycr=o("UniSpeechSatForSequenceClassification"),Kcr=o(" (UniSpeechSat model)"),Zcr=l(),YT=a("li"),u3e=a("strong"),efr=o("wav2vec2"),ofr=o(" \u2014 "),ZW=a("a"),rfr=o("Wav2Vec2ForSequenceClassification"),tfr=o(" (Wav2Vec2 model)"),afr=l(),KT=a("li"),b3e=a("strong"),nfr=o("wav2vec2-conformer"),sfr=o(" \u2014 "),eH=a("a"),lfr=o("Wav2Vec2ConformerForSequenceClassification"),ifr=o(" (Wav2Vec2-Conformer model)"),dfr=l(),ZT=a("li"),v3e=a("strong"),cfr=o("wavlm"),ffr=o(" \u2014 "),oH=a("a"),mfr=o("WavLMForSequenceClassification"),gfr=o(" (WavLM model)"),hfr=l(),e8=a("p"),pfr=o("The model is set in evaluation mode by default using "),F3e=a("code"),_fr=o("model.eval()"),ufr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T3e=a("code"),bfr=o("model.train()"),vfr=l(),F(o8.$$.fragment),XXe=l(),Sd=a("h2"),r8=a("a"),M3e=a("span"),F(Ky.$$.fragment),Ffr=l(),E3e=a("span"),Tfr=o("AutoModelForAudioFrameClassification"),zXe=l(),Qo=a("div"),F(Zy.$$.fragment),Mfr=l(),Rd=a("p"),Efr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=a("a"),Cfr=o("from_pretrained()"),wfr=o(" class method or the "),tH=a("a"),Afr=o("from_config()"),Lfr=o(` class
method.`),yfr=l(),e9=a("p"),xfr=o("This class cannot be instantiated directly using "),C3e=a("code"),$fr=o("__init__()"),kfr=o(" (throws an error)."),Sfr=l(),Ct=a("div"),F(o9.$$.fragment),Rfr=l(),w3e=a("p"),Pfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Bfr=l(),Pd=a("p"),Ifr=o(`Note:
Loading a model from its configuration file does `),A3e=a("strong"),Nfr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),jfr=o("from_pretrained()"),Dfr=o(" to load the model weights."),Gfr=l(),F(t8.$$.fragment),Ofr=l(),go=a("div"),F(r9.$$.fragment),Vfr=l(),L3e=a("p"),Xfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),zfr=l(),Ya=a("p"),Qfr=o("The model class to instantiate is selected based on the "),y3e=a("code"),Wfr=o("model_type"),Hfr=o(` property of the config object (either
passed as an argument or loaded from `),x3e=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),rt=a("ul"),a8=a("li"),k3e=a("strong"),emr=o("data2vec-audio"),omr=o(" \u2014 "),nH=a("a"),rmr=o("Data2VecAudioForAudioFrameClassification"),tmr=o(" (Data2VecAudio model)"),amr=l(),n8=a("li"),S3e=a("strong"),nmr=o("unispeech-sat"),smr=o(" \u2014 "),sH=a("a"),lmr=o("UniSpeechSatForAudioFrameClassification"),imr=o(" (UniSpeechSat model)"),dmr=l(),s8=a("li"),R3e=a("strong"),cmr=o("wav2vec2"),fmr=o(" \u2014 "),lH=a("a"),mmr=o("Wav2Vec2ForAudioFrameClassification"),gmr=o(" (Wav2Vec2 model)"),hmr=l(),l8=a("li"),P3e=a("strong"),pmr=o("wav2vec2-conformer"),_mr=o(" \u2014 "),iH=a("a"),umr=o("Wav2Vec2ConformerForAudioFrameClassification"),bmr=o(" (Wav2Vec2-Conformer model)"),vmr=l(),i8=a("li"),B3e=a("strong"),Fmr=o("wavlm"),Tmr=o(" \u2014 "),dH=a("a"),Mmr=o("WavLMForAudioFrameClassification"),Emr=o(" (WavLM model)"),Cmr=l(),d8=a("p"),wmr=o("The model is set in evaluation mode by default using "),I3e=a("code"),Amr=o("model.eval()"),Lmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N3e=a("code"),ymr=o("model.train()"),xmr=l(),F(c8.$$.fragment),QXe=l(),Bd=a("h2"),f8=a("a"),q3e=a("span"),F(t9.$$.fragment),$mr=l(),j3e=a("span"),kmr=o("AutoModelForCTC"),WXe=l(),Wo=a("div"),F(a9.$$.fragment),Smr=l(),Id=a("p"),Rmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=a("a"),Pmr=o("from_pretrained()"),Bmr=o(" class method or the "),fH=a("a"),Imr=o("from_config()"),Nmr=o(` class
method.`),qmr=l(),n9=a("p"),jmr=o("This class cannot be instantiated directly using "),D3e=a("code"),Dmr=o("__init__()"),Gmr=o(" (throws an error)."),Omr=l(),wt=a("div"),F(s9.$$.fragment),Vmr=l(),G3e=a("p"),Xmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zmr=l(),Nd=a("p"),Qmr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),Wmr=o("not"),Hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Umr=o("from_pretrained()"),Jmr=o(" to load the model weights."),Ymr=l(),F(m8.$$.fragment),Kmr=l(),ho=a("div"),F(l9.$$.fragment),Zmr=l(),V3e=a("p"),egr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ogr=l(),Ka=a("p"),rgr=o("The model class to instantiate is selected based on the "),X3e=a("code"),tgr=o("model_type"),agr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),ngr=o("pretrained_model_name_or_path"),sgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=a("code"),lgr=o("pretrained_model_name_or_path"),igr=o(":"),dgr=l(),Le=a("ul"),g8=a("li"),W3e=a("strong"),cgr=o("data2vec-audio"),fgr=o(" \u2014 "),gH=a("a"),mgr=o("Data2VecAudioForCTC"),ggr=o(" (Data2VecAudio model)"),hgr=l(),h8=a("li"),H3e=a("strong"),pgr=o("hubert"),_gr=o(" \u2014 "),hH=a("a"),ugr=o("HubertForCTC"),bgr=o(" (Hubert model)"),vgr=l(),p8=a("li"),U3e=a("strong"),Fgr=o("mctct"),Tgr=o(" \u2014 "),pH=a("a"),Mgr=o("MCTCTForCTC"),Egr=o(" (M-CTC-T model)"),Cgr=l(),_8=a("li"),J3e=a("strong"),wgr=o("sew"),Agr=o(" \u2014 "),_H=a("a"),Lgr=o("SEWForCTC"),ygr=o(" (SEW model)"),xgr=l(),u8=a("li"),Y3e=a("strong"),$gr=o("sew-d"),kgr=o(" \u2014 "),uH=a("a"),Sgr=o("SEWDForCTC"),Rgr=o(" (SEW-D model)"),Pgr=l(),b8=a("li"),K3e=a("strong"),Bgr=o("unispeech"),Igr=o(" \u2014 "),bH=a("a"),Ngr=o("UniSpeechForCTC"),qgr=o(" (UniSpeech model)"),jgr=l(),v8=a("li"),Z3e=a("strong"),Dgr=o("unispeech-sat"),Ggr=o(" \u2014 "),vH=a("a"),Ogr=o("UniSpeechSatForCTC"),Vgr=o(" (UniSpeechSat model)"),Xgr=l(),F8=a("li"),eve=a("strong"),zgr=o("wav2vec2"),Qgr=o(" \u2014 "),FH=a("a"),Wgr=o("Wav2Vec2ForCTC"),Hgr=o(" (Wav2Vec2 model)"),Ugr=l(),T8=a("li"),ove=a("strong"),Jgr=o("wav2vec2-conformer"),Ygr=o(" \u2014 "),TH=a("a"),Kgr=o("Wav2Vec2ConformerForCTC"),Zgr=o(" (Wav2Vec2-Conformer model)"),ehr=l(),M8=a("li"),rve=a("strong"),ohr=o("wavlm"),rhr=o(" \u2014 "),MH=a("a"),thr=o("WavLMForCTC"),ahr=o(" (WavLM model)"),nhr=l(),E8=a("p"),shr=o("The model is set in evaluation mode by default using "),tve=a("code"),lhr=o("model.eval()"),ihr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=a("code"),dhr=o("model.train()"),chr=l(),F(C8.$$.fragment),HXe=l(),qd=a("h2"),w8=a("a"),nve=a("span"),F(i9.$$.fragment),fhr=l(),sve=a("span"),mhr=o("AutoModelForSpeechSeq2Seq"),UXe=l(),Ho=a("div"),F(d9.$$.fragment),ghr=l(),jd=a("p"),hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=a("a"),phr=o("from_pretrained()"),_hr=o(" class method or the "),CH=a("a"),uhr=o("from_config()"),bhr=o(` class
method.`),vhr=l(),c9=a("p"),Fhr=o("This class cannot be instantiated directly using "),lve=a("code"),Thr=o("__init__()"),Mhr=o(" (throws an error)."),Ehr=l(),At=a("div"),F(f9.$$.fragment),Chr=l(),ive=a("p"),whr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ahr=l(),Dd=a("p"),Lhr=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),yhr=o("not"),xhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),$hr=o("from_pretrained()"),khr=o(" to load the model weights."),Shr=l(),F(A8.$$.fragment),Rhr=l(),po=a("div"),F(m9.$$.fragment),Phr=l(),cve=a("p"),Bhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ihr=l(),Za=a("p"),Nhr=o("The model class to instantiate is selected based on the "),fve=a("code"),qhr=o("model_type"),jhr=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),Dhr=o("pretrained_model_name_or_path"),Ghr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),Ohr=o("pretrained_model_name_or_path"),Vhr=o(":"),Xhr=l(),g9=a("ul"),L8=a("li"),hve=a("strong"),zhr=o("speech-encoder-decoder"),Qhr=o(" \u2014 "),AH=a("a"),Whr=o("SpeechEncoderDecoderModel"),Hhr=o(" (Speech Encoder decoder model)"),Uhr=l(),y8=a("li"),pve=a("strong"),Jhr=o("speech_to_text"),Yhr=o(" \u2014 "),LH=a("a"),Khr=o("Speech2TextForConditionalGeneration"),Zhr=o(" (Speech2Text model)"),epr=l(),x8=a("p"),opr=o("The model is set in evaluation mode by default using "),_ve=a("code"),rpr=o("model.eval()"),tpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uve=a("code"),apr=o("model.train()"),npr=l(),F($8.$$.fragment),JXe=l(),Gd=a("h2"),k8=a("a"),bve=a("span"),F(h9.$$.fragment),spr=l(),vve=a("span"),lpr=o("AutoModelForAudioXVector"),YXe=l(),Uo=a("div"),F(p9.$$.fragment),ipr=l(),Od=a("p"),dpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=a("a"),cpr=o("from_pretrained()"),fpr=o(" class method or the "),xH=a("a"),mpr=o("from_config()"),gpr=o(` class
method.`),hpr=l(),_9=a("p"),ppr=o("This class cannot be instantiated directly using "),Fve=a("code"),_pr=o("__init__()"),upr=o(" (throws an error)."),bpr=l(),Lt=a("div"),F(u9.$$.fragment),vpr=l(),Tve=a("p"),Fpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Tpr=l(),Vd=a("p"),Mpr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),Epr=o("not"),Cpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),wpr=o("from_pretrained()"),Apr=o(" to load the model weights."),Lpr=l(),F(S8.$$.fragment),ypr=l(),_o=a("div"),F(b9.$$.fragment),xpr=l(),Eve=a("p"),$pr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),kpr=l(),en=a("p"),Spr=o("The model class to instantiate is selected based on the "),Cve=a("code"),Rpr=o("model_type"),Ppr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),Bpr=o("pretrained_model_name_or_path"),Ipr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),Npr=o("pretrained_model_name_or_path"),qpr=o(":"),jpr=l(),tt=a("ul"),R8=a("li"),Lve=a("strong"),Dpr=o("data2vec-audio"),Gpr=o(" \u2014 "),kH=a("a"),Opr=o("Data2VecAudioForXVector"),Vpr=o(" (Data2VecAudio model)"),Xpr=l(),P8=a("li"),yve=a("strong"),zpr=o("unispeech-sat"),Qpr=o(" \u2014 "),SH=a("a"),Wpr=o("UniSpeechSatForXVector"),Hpr=o(" (UniSpeechSat model)"),Upr=l(),B8=a("li"),xve=a("strong"),Jpr=o("wav2vec2"),Ypr=o(" \u2014 "),RH=a("a"),Kpr=o("Wav2Vec2ForXVector"),Zpr=o(" (Wav2Vec2 model)"),e_r=l(),I8=a("li"),$ve=a("strong"),o_r=o("wav2vec2-conformer"),r_r=o(" \u2014 "),PH=a("a"),t_r=o("Wav2Vec2ConformerForXVector"),a_r=o(" (Wav2Vec2-Conformer model)"),n_r=l(),N8=a("li"),kve=a("strong"),s_r=o("wavlm"),l_r=o(" \u2014 "),BH=a("a"),i_r=o("WavLMForXVector"),d_r=o(" (WavLM model)"),c_r=l(),q8=a("p"),f_r=o("The model is set in evaluation mode by default using "),Sve=a("code"),m_r=o("model.eval()"),g_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=a("code"),h_r=o("model.train()"),p_r=l(),F(j8.$$.fragment),KXe=l(),Xd=a("h2"),D8=a("a"),Pve=a("span"),F(v9.$$.fragment),__r=l(),Bve=a("span"),u_r=o("AutoModelForMaskedImageModeling"),ZXe=l(),Jo=a("div"),F(F9.$$.fragment),b_r=l(),zd=a("p"),v_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=a("a"),F_r=o("from_pretrained()"),T_r=o(" class method or the "),NH=a("a"),M_r=o("from_config()"),E_r=o(` class
method.`),C_r=l(),T9=a("p"),w_r=o("This class cannot be instantiated directly using "),Ive=a("code"),A_r=o("__init__()"),L_r=o(" (throws an error)."),y_r=l(),yt=a("div"),F(M9.$$.fragment),x_r=l(),Nve=a("p"),$_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),k_r=l(),Qd=a("p"),S_r=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),R_r=o("not"),P_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),B_r=o("from_pretrained()"),I_r=o(" to load the model weights."),N_r=l(),F(G8.$$.fragment),q_r=l(),uo=a("div"),F(E9.$$.fragment),j_r=l(),jve=a("p"),D_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),G_r=l(),on=a("p"),O_r=o("The model class to instantiate is selected based on the "),Dve=a("code"),V_r=o("model_type"),X_r=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),z_r=o("pretrained_model_name_or_path"),Q_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),W_r=o("pretrained_model_name_or_path"),H_r=o(":"),U_r=l(),Wd=a("ul"),O8=a("li"),Vve=a("strong"),J_r=o("deit"),Y_r=o(" \u2014 "),jH=a("a"),K_r=o("DeiTForMaskedImageModeling"),Z_r=o(" (DeiT model)"),eur=l(),V8=a("li"),Xve=a("strong"),our=o("swin"),rur=o(" \u2014 "),DH=a("a"),tur=o("SwinForMaskedImageModeling"),aur=o(" (Swin Transformer model)"),nur=l(),X8=a("li"),zve=a("strong"),sur=o("vit"),lur=o(" \u2014 "),GH=a("a"),iur=o("ViTForMaskedImageModeling"),dur=o(" (ViT model)"),cur=l(),z8=a("p"),fur=o("The model is set in evaluation mode by default using "),Qve=a("code"),mur=o("model.eval()"),gur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wve=a("code"),hur=o("model.train()"),pur=l(),F(Q8.$$.fragment),eze=l(),Hd=a("h2"),W8=a("a"),Hve=a("span"),F(C9.$$.fragment),_ur=l(),Uve=a("span"),uur=o("AutoModelForObjectDetection"),oze=l(),Yo=a("div"),F(w9.$$.fragment),bur=l(),Ud=a("p"),vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=a("a"),Fur=o("from_pretrained()"),Tur=o(" class method or the "),VH=a("a"),Mur=o("from_config()"),Eur=o(` class
method.`),Cur=l(),A9=a("p"),wur=o("This class cannot be instantiated directly using "),Jve=a("code"),Aur=o("__init__()"),Lur=o(" (throws an error)."),yur=l(),xt=a("div"),F(L9.$$.fragment),xur=l(),Yve=a("p"),$ur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),kur=l(),Jd=a("p"),Sur=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),Rur=o("not"),Pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Bur=o("from_pretrained()"),Iur=o(" to load the model weights."),Nur=l(),F(H8.$$.fragment),qur=l(),bo=a("div"),F(y9.$$.fragment),jur=l(),Zve=a("p"),Dur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Gur=l(),rn=a("p"),Our=o("The model class to instantiate is selected based on the "),eFe=a("code"),Vur=o("model_type"),Xur=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),zur=o("pretrained_model_name_or_path"),Qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),Wur=o("pretrained_model_name_or_path"),Hur=o(":"),Uur=l(),x9=a("ul"),U8=a("li"),tFe=a("strong"),Jur=o("detr"),Yur=o(" \u2014 "),zH=a("a"),Kur=o("DetrForObjectDetection"),Zur=o(" (DETR model)"),e1r=l(),J8=a("li"),aFe=a("strong"),o1r=o("yolos"),r1r=o(" \u2014 "),QH=a("a"),t1r=o("YolosForObjectDetection"),a1r=o(" (YOLOS model)"),n1r=l(),Y8=a("p"),s1r=o("The model is set in evaluation mode by default using "),nFe=a("code"),l1r=o("model.eval()"),i1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=a("code"),d1r=o("model.train()"),c1r=l(),F(K8.$$.fragment),rze=l(),Yd=a("h2"),Z8=a("a"),lFe=a("span"),F($9.$$.fragment),f1r=l(),iFe=a("span"),m1r=o("AutoModelForImageSegmentation"),tze=l(),Ko=a("div"),F(k9.$$.fragment),g1r=l(),Kd=a("p"),h1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WH=a("a"),p1r=o("from_pretrained()"),_1r=o(" class method or the "),HH=a("a"),u1r=o("from_config()"),b1r=o(` class
method.`),v1r=l(),S9=a("p"),F1r=o("This class cannot be instantiated directly using "),dFe=a("code"),T1r=o("__init__()"),M1r=o(" (throws an error)."),E1r=l(),$t=a("div"),F(R9.$$.fragment),C1r=l(),cFe=a("p"),w1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),A1r=l(),Zd=a("p"),L1r=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),y1r=o("not"),x1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),$1r=o("from_pretrained()"),k1r=o(" to load the model weights."),S1r=l(),F(eM.$$.fragment),R1r=l(),vo=a("div"),F(P9.$$.fragment),P1r=l(),mFe=a("p"),B1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),I1r=l(),tn=a("p"),N1r=o("The model class to instantiate is selected based on the "),gFe=a("code"),q1r=o("model_type"),j1r=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),D1r=o("pretrained_model_name_or_path"),G1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),O1r=o("pretrained_model_name_or_path"),V1r=o(":"),X1r=l(),_Fe=a("ul"),oM=a("li"),uFe=a("strong"),z1r=o("detr"),Q1r=o(" \u2014 "),JH=a("a"),W1r=o("DetrForSegmentation"),H1r=o(" (DETR model)"),U1r=l(),rM=a("p"),J1r=o("The model is set in evaluation mode by default using "),bFe=a("code"),Y1r=o("model.eval()"),K1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=a("code"),Z1r=o("model.train()"),e2r=l(),F(tM.$$.fragment),aze=l(),ec=a("h2"),aM=a("a"),FFe=a("span"),F(B9.$$.fragment),o2r=l(),TFe=a("span"),r2r=o("AutoModelForSemanticSegmentation"),nze=l(),Zo=a("div"),F(I9.$$.fragment),t2r=l(),oc=a("p"),a2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YH=a("a"),n2r=o("from_pretrained()"),s2r=o(" class method or the "),KH=a("a"),l2r=o("from_config()"),i2r=o(` class
method.`),d2r=l(),N9=a("p"),c2r=o("This class cannot be instantiated directly using "),MFe=a("code"),f2r=o("__init__()"),m2r=o(" (throws an error)."),g2r=l(),kt=a("div"),F(q9.$$.fragment),h2r=l(),EFe=a("p"),p2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),_2r=l(),rc=a("p"),u2r=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),b2r=o("not"),v2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),F2r=o("from_pretrained()"),T2r=o(" to load the model weights."),M2r=l(),F(nM.$$.fragment),E2r=l(),Fo=a("div"),F(j9.$$.fragment),C2r=l(),wFe=a("p"),w2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),A2r=l(),an=a("p"),L2r=o("The model class to instantiate is selected based on the "),AFe=a("code"),y2r=o("model_type"),x2r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),$2r=o("pretrained_model_name_or_path"),k2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),S2r=o("pretrained_model_name_or_path"),R2r=o(":"),P2r=l(),at=a("ul"),sM=a("li"),xFe=a("strong"),B2r=o("beit"),I2r=o(" \u2014 "),eU=a("a"),N2r=o("BeitForSemanticSegmentation"),q2r=o(" (BEiT model)"),j2r=l(),lM=a("li"),$Fe=a("strong"),D2r=o("data2vec-vision"),G2r=o(" \u2014 "),oU=a("a"),O2r=o("Data2VecVisionForSemanticSegmentation"),V2r=o(" (Data2VecVision model)"),X2r=l(),iM=a("li"),kFe=a("strong"),z2r=o("dpt"),Q2r=o(" \u2014 "),rU=a("a"),W2r=o("DPTForSemanticSegmentation"),H2r=o(" (DPT model)"),U2r=l(),dM=a("li"),SFe=a("strong"),J2r=o("mobilevit"),Y2r=o(" \u2014 "),tU=a("a"),K2r=o("MobileViTForSemanticSegmentation"),Z2r=o(" (MobileViT model)"),ebr=l(),cM=a("li"),RFe=a("strong"),obr=o("segformer"),rbr=o(" \u2014 "),aU=a("a"),tbr=o("SegformerForSemanticSegmentation"),abr=o(" (SegFormer model)"),nbr=l(),fM=a("p"),sbr=o("The model is set in evaluation mode by default using "),PFe=a("code"),lbr=o("model.eval()"),ibr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=a("code"),dbr=o("model.train()"),cbr=l(),F(mM.$$.fragment),sze=l(),tc=a("h2"),gM=a("a"),IFe=a("span"),F(D9.$$.fragment),fbr=l(),NFe=a("span"),mbr=o("AutoModelForInstanceSegmentation"),lze=l(),er=a("div"),F(G9.$$.fragment),gbr=l(),ac=a("p"),hbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nU=a("a"),pbr=o("from_pretrained()"),_br=o(" class method or the "),sU=a("a"),ubr=o("from_config()"),bbr=o(` class
method.`),vbr=l(),O9=a("p"),Fbr=o("This class cannot be instantiated directly using "),qFe=a("code"),Tbr=o("__init__()"),Mbr=o(" (throws an error)."),Ebr=l(),St=a("div"),F(V9.$$.fragment),Cbr=l(),jFe=a("p"),wbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Abr=l(),nc=a("p"),Lbr=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),ybr=o("not"),xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),$br=o("from_pretrained()"),kbr=o(" to load the model weights."),Sbr=l(),F(hM.$$.fragment),Rbr=l(),To=a("div"),F(X9.$$.fragment),Pbr=l(),GFe=a("p"),Bbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ibr=l(),nn=a("p"),Nbr=o("The model class to instantiate is selected based on the "),OFe=a("code"),qbr=o("model_type"),jbr=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),Dbr=o("pretrained_model_name_or_path"),Gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(":"),Xbr=l(),zFe=a("ul"),pM=a("li"),QFe=a("strong"),zbr=o("maskformer"),Qbr=o(" \u2014 "),iU=a("a"),Wbr=o("MaskFormerForInstanceSegmentation"),Hbr=o(" (MaskFormer model)"),Ubr=l(),_M=a("p"),Jbr=o("The model is set in evaluation mode by default using "),WFe=a("code"),Ybr=o("model.eval()"),Kbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HFe=a("code"),Zbr=o("model.train()"),e3r=l(),F(uM.$$.fragment),ize=l(),sc=a("h2"),bM=a("a"),UFe=a("span"),F(z9.$$.fragment),o3r=l(),JFe=a("span"),r3r=o("TFAutoModel"),dze=l(),or=a("div"),F(Q9.$$.fragment),t3r=l(),lc=a("p"),a3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=a("a"),n3r=o("from_pretrained()"),s3r=o(" class method or the "),cU=a("a"),l3r=o("from_config()"),i3r=o(` class
method.`),d3r=l(),W9=a("p"),c3r=o("This class cannot be instantiated directly using "),YFe=a("code"),f3r=o("__init__()"),m3r=o(" (throws an error)."),g3r=l(),Rt=a("div"),F(H9.$$.fragment),h3r=l(),KFe=a("p"),p3r=o("Instantiates one of the base model classes of the library from a configuration."),_3r=l(),ic=a("p"),u3r=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),b3r=o("not"),v3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),F3r=o("from_pretrained()"),T3r=o(" to load the model weights."),M3r=l(),F(vM.$$.fragment),E3r=l(),xr=a("div"),F(U9.$$.fragment),C3r=l(),eTe=a("p"),w3r=o("Instantiate one of the base model classes of the library from a pretrained model."),A3r=l(),sn=a("p"),L3r=o("The model class to instantiate is selected based on the "),oTe=a("code"),y3r=o("model_type"),x3r=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),S3r=o("pretrained_model_name_or_path"),R3r=o(":"),P3r=l(),q=a("ul"),FM=a("li"),aTe=a("strong"),B3r=o("albert"),I3r=o(" \u2014 "),mU=a("a"),N3r=o("TFAlbertModel"),q3r=o(" (ALBERT model)"),j3r=l(),TM=a("li"),nTe=a("strong"),D3r=o("bart"),G3r=o(" \u2014 "),gU=a("a"),O3r=o("TFBartModel"),V3r=o(" (BART model)"),X3r=l(),MM=a("li"),sTe=a("strong"),z3r=o("bert"),Q3r=o(" \u2014 "),hU=a("a"),W3r=o("TFBertModel"),H3r=o(" (BERT model)"),U3r=l(),EM=a("li"),lTe=a("strong"),J3r=o("blenderbot"),Y3r=o(" \u2014 "),pU=a("a"),K3r=o("TFBlenderbotModel"),Z3r=o(" (Blenderbot model)"),evr=l(),CM=a("li"),iTe=a("strong"),ovr=o("blenderbot-small"),rvr=o(" \u2014 "),_U=a("a"),tvr=o("TFBlenderbotSmallModel"),avr=o(" (BlenderbotSmall model)"),nvr=l(),wM=a("li"),dTe=a("strong"),svr=o("camembert"),lvr=o(" \u2014 "),uU=a("a"),ivr=o("TFCamembertModel"),dvr=o(" (CamemBERT model)"),cvr=l(),AM=a("li"),cTe=a("strong"),fvr=o("clip"),mvr=o(" \u2014 "),bU=a("a"),gvr=o("TFCLIPModel"),hvr=o(" (CLIP model)"),pvr=l(),LM=a("li"),fTe=a("strong"),_vr=o("convbert"),uvr=o(" \u2014 "),vU=a("a"),bvr=o("TFConvBertModel"),vvr=o(" (ConvBERT model)"),Fvr=l(),yM=a("li"),mTe=a("strong"),Tvr=o("convnext"),Mvr=o(" \u2014 "),FU=a("a"),Evr=o("TFConvNextModel"),Cvr=o(" (ConvNeXT model)"),wvr=l(),xM=a("li"),gTe=a("strong"),Avr=o("ctrl"),Lvr=o(" \u2014 "),TU=a("a"),yvr=o("TFCTRLModel"),xvr=o(" (CTRL model)"),$vr=l(),$M=a("li"),hTe=a("strong"),kvr=o("data2vec-vision"),Svr=o(" \u2014 "),MU=a("a"),Rvr=o("TFData2VecVisionModel"),Pvr=o(" (Data2VecVision model)"),Bvr=l(),kM=a("li"),pTe=a("strong"),Ivr=o("deberta"),Nvr=o(" \u2014 "),EU=a("a"),qvr=o("TFDebertaModel"),jvr=o(" (DeBERTa model)"),Dvr=l(),SM=a("li"),_Te=a("strong"),Gvr=o("deberta-v2"),Ovr=o(" \u2014 "),CU=a("a"),Vvr=o("TFDebertaV2Model"),Xvr=o(" (DeBERTa-v2 model)"),zvr=l(),RM=a("li"),uTe=a("strong"),Qvr=o("deit"),Wvr=o(" \u2014 "),wU=a("a"),Hvr=o("TFDeiTModel"),Uvr=o(" (DeiT model)"),Jvr=l(),PM=a("li"),bTe=a("strong"),Yvr=o("distilbert"),Kvr=o(" \u2014 "),AU=a("a"),Zvr=o("TFDistilBertModel"),eFr=o(" (DistilBERT model)"),oFr=l(),BM=a("li"),vTe=a("strong"),rFr=o("dpr"),tFr=o(" \u2014 "),LU=a("a"),aFr=o("TFDPRQuestionEncoder"),nFr=o(" (DPR model)"),sFr=l(),IM=a("li"),FTe=a("strong"),lFr=o("electra"),iFr=o(" \u2014 "),yU=a("a"),dFr=o("TFElectraModel"),cFr=o(" (ELECTRA model)"),fFr=l(),NM=a("li"),TTe=a("strong"),mFr=o("flaubert"),gFr=o(" \u2014 "),xU=a("a"),hFr=o("TFFlaubertModel"),pFr=o(" (FlauBERT model)"),_Fr=l(),Js=a("li"),MTe=a("strong"),uFr=o("funnel"),bFr=o(" \u2014 "),$U=a("a"),vFr=o("TFFunnelModel"),FFr=o(" or "),kU=a("a"),TFr=o("TFFunnelBaseModel"),MFr=o(" (Funnel Transformer model)"),EFr=l(),qM=a("li"),ETe=a("strong"),CFr=o("gpt2"),wFr=o(" \u2014 "),SU=a("a"),AFr=o("TFGPT2Model"),LFr=o(" (OpenAI GPT-2 model)"),yFr=l(),jM=a("li"),CTe=a("strong"),xFr=o("gptj"),$Fr=o(" \u2014 "),RU=a("a"),kFr=o("TFGPTJModel"),SFr=o(" (GPT-J model)"),RFr=l(),DM=a("li"),wTe=a("strong"),PFr=o("hubert"),BFr=o(" \u2014 "),PU=a("a"),IFr=o("TFHubertModel"),NFr=o(" (Hubert model)"),qFr=l(),GM=a("li"),ATe=a("strong"),jFr=o("layoutlm"),DFr=o(" \u2014 "),BU=a("a"),GFr=o("TFLayoutLMModel"),OFr=o(" (LayoutLM model)"),VFr=l(),OM=a("li"),LTe=a("strong"),XFr=o("led"),zFr=o(" \u2014 "),IU=a("a"),QFr=o("TFLEDModel"),WFr=o(" (LED model)"),HFr=l(),VM=a("li"),yTe=a("strong"),UFr=o("longformer"),JFr=o(" \u2014 "),NU=a("a"),YFr=o("TFLongformerModel"),KFr=o(" (Longformer model)"),ZFr=l(),XM=a("li"),xTe=a("strong"),eTr=o("lxmert"),oTr=o(" \u2014 "),qU=a("a"),rTr=o("TFLxmertModel"),tTr=o(" (LXMERT model)"),aTr=l(),zM=a("li"),$Te=a("strong"),nTr=o("marian"),sTr=o(" \u2014 "),jU=a("a"),lTr=o("TFMarianModel"),iTr=o(" (Marian model)"),dTr=l(),QM=a("li"),kTe=a("strong"),cTr=o("mbart"),fTr=o(" \u2014 "),DU=a("a"),mTr=o("TFMBartModel"),gTr=o(" (mBART model)"),hTr=l(),WM=a("li"),STe=a("strong"),pTr=o("mobilebert"),_Tr=o(" \u2014 "),GU=a("a"),uTr=o("TFMobileBertModel"),bTr=o(" (MobileBERT model)"),vTr=l(),HM=a("li"),RTe=a("strong"),FTr=o("mpnet"),TTr=o(" \u2014 "),OU=a("a"),MTr=o("TFMPNetModel"),ETr=o(" (MPNet model)"),CTr=l(),UM=a("li"),PTe=a("strong"),wTr=o("mt5"),ATr=o(" \u2014 "),VU=a("a"),LTr=o("TFMT5Model"),yTr=o(" (MT5 model)"),xTr=l(),JM=a("li"),BTe=a("strong"),$Tr=o("openai-gpt"),kTr=o(" \u2014 "),XU=a("a"),STr=o("TFOpenAIGPTModel"),RTr=o(" (OpenAI GPT model)"),PTr=l(),YM=a("li"),ITe=a("strong"),BTr=o("opt"),ITr=o(" \u2014 "),zU=a("a"),NTr=o("TFOPTModel"),qTr=o(" (OPT model)"),jTr=l(),KM=a("li"),NTe=a("strong"),DTr=o("pegasus"),GTr=o(" \u2014 "),QU=a("a"),OTr=o("TFPegasusModel"),VTr=o(" (Pegasus model)"),XTr=l(),ZM=a("li"),qTe=a("strong"),zTr=o("regnet"),QTr=o(" \u2014 "),WU=a("a"),WTr=o("TFRegNetModel"),HTr=o(" (RegNet model)"),UTr=l(),e4=a("li"),jTe=a("strong"),JTr=o("rembert"),YTr=o(" \u2014 "),HU=a("a"),KTr=o("TFRemBertModel"),ZTr=o(" (RemBERT model)"),e8r=l(),o4=a("li"),DTe=a("strong"),o8r=o("resnet"),r8r=o(" \u2014 "),UU=a("a"),t8r=o("TFResNetModel"),a8r=o(" (ResNet model)"),n8r=l(),r4=a("li"),GTe=a("strong"),s8r=o("roberta"),l8r=o(" \u2014 "),JU=a("a"),i8r=o("TFRobertaModel"),d8r=o(" (RoBERTa model)"),c8r=l(),t4=a("li"),OTe=a("strong"),f8r=o("roformer"),m8r=o(" \u2014 "),YU=a("a"),g8r=o("TFRoFormerModel"),h8r=o(" (RoFormer model)"),p8r=l(),a4=a("li"),VTe=a("strong"),_8r=o("speech_to_text"),u8r=o(" \u2014 "),KU=a("a"),b8r=o("TFSpeech2TextModel"),v8r=o(" (Speech2Text model)"),F8r=l(),n4=a("li"),XTe=a("strong"),T8r=o("swin"),M8r=o(" \u2014 "),ZU=a("a"),E8r=o("TFSwinModel"),C8r=o(" (Swin Transformer model)"),w8r=l(),s4=a("li"),zTe=a("strong"),A8r=o("t5"),L8r=o(" \u2014 "),eJ=a("a"),y8r=o("TFT5Model"),x8r=o(" (T5 model)"),$8r=l(),l4=a("li"),QTe=a("strong"),k8r=o("tapas"),S8r=o(" \u2014 "),oJ=a("a"),R8r=o("TFTapasModel"),P8r=o(" (TAPAS model)"),B8r=l(),i4=a("li"),WTe=a("strong"),I8r=o("transfo-xl"),N8r=o(" \u2014 "),rJ=a("a"),q8r=o("TFTransfoXLModel"),j8r=o(" (Transformer-XL model)"),D8r=l(),d4=a("li"),HTe=a("strong"),G8r=o("vit"),O8r=o(" \u2014 "),tJ=a("a"),V8r=o("TFViTModel"),X8r=o(" (ViT model)"),z8r=l(),c4=a("li"),UTe=a("strong"),Q8r=o("vit_mae"),W8r=o(" \u2014 "),aJ=a("a"),H8r=o("TFViTMAEModel"),U8r=o(" (ViTMAE model)"),J8r=l(),f4=a("li"),JTe=a("strong"),Y8r=o("wav2vec2"),K8r=o(" \u2014 "),nJ=a("a"),Z8r=o("TFWav2Vec2Model"),eMr=o(" (Wav2Vec2 model)"),oMr=l(),m4=a("li"),YTe=a("strong"),rMr=o("xlm"),tMr=o(" \u2014 "),sJ=a("a"),aMr=o("TFXLMModel"),nMr=o(" (XLM model)"),sMr=l(),g4=a("li"),KTe=a("strong"),lMr=o("xlm-roberta"),iMr=o(" \u2014 "),lJ=a("a"),dMr=o("TFXLMRobertaModel"),cMr=o(" (XLM-RoBERTa model)"),fMr=l(),h4=a("li"),ZTe=a("strong"),mMr=o("xlnet"),gMr=o(" \u2014 "),iJ=a("a"),hMr=o("TFXLNetModel"),pMr=o(" (XLNet model)"),_Mr=l(),F(p4.$$.fragment),cze=l(),dc=a("h2"),_4=a("a"),e8e=a("span"),F(J9.$$.fragment),uMr=l(),o8e=a("span"),bMr=o("TFAutoModelForPreTraining"),fze=l(),rr=a("div"),F(Y9.$$.fragment),vMr=l(),cc=a("p"),FMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dJ=a("a"),TMr=o("from_pretrained()"),MMr=o(" class method or the "),cJ=a("a"),EMr=o("from_config()"),CMr=o(` class
method.`),wMr=l(),K9=a("p"),AMr=o("This class cannot be instantiated directly using "),r8e=a("code"),LMr=o("__init__()"),yMr=o(" (throws an error)."),xMr=l(),Pt=a("div"),F(Z9.$$.fragment),$Mr=l(),t8e=a("p"),kMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SMr=l(),fc=a("p"),RMr=o(`Note:
Loading a model from its configuration file does `),a8e=a("strong"),PMr=o("not"),BMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),IMr=o("from_pretrained()"),NMr=o(" to load the model weights."),qMr=l(),F(u4.$$.fragment),jMr=l(),$r=a("div"),F(ex.$$.fragment),DMr=l(),n8e=a("p"),GMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OMr=l(),ln=a("p"),VMr=o("The model class to instantiate is selected based on the "),s8e=a("code"),XMr=o("model_type"),zMr=o(` property of the config object (either
passed as an argument or loaded from `),l8e=a("code"),QMr=o("pretrained_model_name_or_path"),WMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=a("code"),HMr=o("pretrained_model_name_or_path"),UMr=o(":"),JMr=l(),se=a("ul"),b4=a("li"),d8e=a("strong"),YMr=o("albert"),KMr=o(" \u2014 "),mJ=a("a"),ZMr=o("TFAlbertForPreTraining"),e4r=o(" (ALBERT model)"),o4r=l(),v4=a("li"),c8e=a("strong"),r4r=o("bart"),t4r=o(" \u2014 "),gJ=a("a"),a4r=o("TFBartForConditionalGeneration"),n4r=o(" (BART model)"),s4r=l(),F4=a("li"),f8e=a("strong"),l4r=o("bert"),i4r=o(" \u2014 "),hJ=a("a"),d4r=o("TFBertForPreTraining"),c4r=o(" (BERT model)"),f4r=l(),T4=a("li"),m8e=a("strong"),m4r=o("camembert"),g4r=o(" \u2014 "),pJ=a("a"),h4r=o("TFCamembertForMaskedLM"),p4r=o(" (CamemBERT model)"),_4r=l(),M4=a("li"),g8e=a("strong"),u4r=o("ctrl"),b4r=o(" \u2014 "),_J=a("a"),v4r=o("TFCTRLLMHeadModel"),F4r=o(" (CTRL model)"),T4r=l(),E4=a("li"),h8e=a("strong"),M4r=o("distilbert"),E4r=o(" \u2014 "),uJ=a("a"),C4r=o("TFDistilBertForMaskedLM"),w4r=o(" (DistilBERT model)"),A4r=l(),C4=a("li"),p8e=a("strong"),L4r=o("electra"),y4r=o(" \u2014 "),bJ=a("a"),x4r=o("TFElectraForPreTraining"),$4r=o(" (ELECTRA model)"),k4r=l(),w4=a("li"),_8e=a("strong"),S4r=o("flaubert"),R4r=o(" \u2014 "),vJ=a("a"),P4r=o("TFFlaubertWithLMHeadModel"),B4r=o(" (FlauBERT model)"),I4r=l(),A4=a("li"),u8e=a("strong"),N4r=o("funnel"),q4r=o(" \u2014 "),FJ=a("a"),j4r=o("TFFunnelForPreTraining"),D4r=o(" (Funnel Transformer model)"),G4r=l(),L4=a("li"),b8e=a("strong"),O4r=o("gpt2"),V4r=o(" \u2014 "),TJ=a("a"),X4r=o("TFGPT2LMHeadModel"),z4r=o(" (OpenAI GPT-2 model)"),Q4r=l(),y4=a("li"),v8e=a("strong"),W4r=o("layoutlm"),H4r=o(" \u2014 "),MJ=a("a"),U4r=o("TFLayoutLMForMaskedLM"),J4r=o(" (LayoutLM model)"),Y4r=l(),x4=a("li"),F8e=a("strong"),K4r=o("lxmert"),Z4r=o(" \u2014 "),EJ=a("a"),eEr=o("TFLxmertForPreTraining"),oEr=o(" (LXMERT model)"),rEr=l(),$4=a("li"),T8e=a("strong"),tEr=o("mobilebert"),aEr=o(" \u2014 "),CJ=a("a"),nEr=o("TFMobileBertForPreTraining"),sEr=o(" (MobileBERT model)"),lEr=l(),k4=a("li"),M8e=a("strong"),iEr=o("mpnet"),dEr=o(" \u2014 "),wJ=a("a"),cEr=o("TFMPNetForMaskedLM"),fEr=o(" (MPNet model)"),mEr=l(),S4=a("li"),E8e=a("strong"),gEr=o("openai-gpt"),hEr=o(" \u2014 "),AJ=a("a"),pEr=o("TFOpenAIGPTLMHeadModel"),_Er=o(" (OpenAI GPT model)"),uEr=l(),R4=a("li"),C8e=a("strong"),bEr=o("roberta"),vEr=o(" \u2014 "),LJ=a("a"),FEr=o("TFRobertaForMaskedLM"),TEr=o(" (RoBERTa model)"),MEr=l(),P4=a("li"),w8e=a("strong"),EEr=o("t5"),CEr=o(" \u2014 "),yJ=a("a"),wEr=o("TFT5ForConditionalGeneration"),AEr=o(" (T5 model)"),LEr=l(),B4=a("li"),A8e=a("strong"),yEr=o("tapas"),xEr=o(" \u2014 "),xJ=a("a"),$Er=o("TFTapasForMaskedLM"),kEr=o(" (TAPAS model)"),SEr=l(),I4=a("li"),L8e=a("strong"),REr=o("transfo-xl"),PEr=o(" \u2014 "),$J=a("a"),BEr=o("TFTransfoXLLMHeadModel"),IEr=o(" (Transformer-XL model)"),NEr=l(),N4=a("li"),y8e=a("strong"),qEr=o("vit_mae"),jEr=o(" \u2014 "),kJ=a("a"),DEr=o("TFViTMAEForPreTraining"),GEr=o(" (ViTMAE model)"),OEr=l(),q4=a("li"),x8e=a("strong"),VEr=o("xlm"),XEr=o(" \u2014 "),SJ=a("a"),zEr=o("TFXLMWithLMHeadModel"),QEr=o(" (XLM model)"),WEr=l(),j4=a("li"),$8e=a("strong"),HEr=o("xlm-roberta"),UEr=o(" \u2014 "),RJ=a("a"),JEr=o("TFXLMRobertaForMaskedLM"),YEr=o(" (XLM-RoBERTa model)"),KEr=l(),D4=a("li"),k8e=a("strong"),ZEr=o("xlnet"),eCr=o(" \u2014 "),PJ=a("a"),oCr=o("TFXLNetLMHeadModel"),rCr=o(" (XLNet model)"),tCr=l(),F(G4.$$.fragment),mze=l(),mc=a("h2"),O4=a("a"),S8e=a("span"),F(ox.$$.fragment),aCr=l(),R8e=a("span"),nCr=o("TFAutoModelForCausalLM"),gze=l(),tr=a("div"),F(rx.$$.fragment),sCr=l(),gc=a("p"),lCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=a("a"),iCr=o("from_pretrained()"),dCr=o(" class method or the "),IJ=a("a"),cCr=o("from_config()"),fCr=o(` class
method.`),mCr=l(),tx=a("p"),gCr=o("This class cannot be instantiated directly using "),P8e=a("code"),hCr=o("__init__()"),pCr=o(" (throws an error)."),_Cr=l(),Bt=a("div"),F(ax.$$.fragment),uCr=l(),B8e=a("p"),bCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vCr=l(),hc=a("p"),FCr=o(`Note:
Loading a model from its configuration file does `),I8e=a("strong"),TCr=o("not"),MCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),ECr=o("from_pretrained()"),CCr=o(" to load the model weights."),wCr=l(),F(V4.$$.fragment),ACr=l(),kr=a("div"),F(nx.$$.fragment),LCr=l(),N8e=a("p"),yCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xCr=l(),dn=a("p"),$Cr=o("The model class to instantiate is selected based on the "),q8e=a("code"),kCr=o("model_type"),SCr=o(` property of the config object (either
passed as an argument or loaded from `),j8e=a("code"),RCr=o("pretrained_model_name_or_path"),PCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D8e=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(":"),NCr=l(),Me=a("ul"),X4=a("li"),G8e=a("strong"),qCr=o("bert"),jCr=o(" \u2014 "),qJ=a("a"),DCr=o("TFBertLMHeadModel"),GCr=o(" (BERT model)"),OCr=l(),z4=a("li"),O8e=a("strong"),VCr=o("camembert"),XCr=o(" \u2014 "),jJ=a("a"),zCr=o("TFCamembertForCausalLM"),QCr=o(" (CamemBERT model)"),WCr=l(),Q4=a("li"),V8e=a("strong"),HCr=o("ctrl"),UCr=o(" \u2014 "),DJ=a("a"),JCr=o("TFCTRLLMHeadModel"),YCr=o(" (CTRL model)"),KCr=l(),W4=a("li"),X8e=a("strong"),ZCr=o("gpt2"),e5r=o(" \u2014 "),GJ=a("a"),o5r=o("TFGPT2LMHeadModel"),r5r=o(" (OpenAI GPT-2 model)"),t5r=l(),H4=a("li"),z8e=a("strong"),a5r=o("gptj"),n5r=o(" \u2014 "),OJ=a("a"),s5r=o("TFGPTJForCausalLM"),l5r=o(" (GPT-J model)"),i5r=l(),U4=a("li"),Q8e=a("strong"),d5r=o("openai-gpt"),c5r=o(" \u2014 "),VJ=a("a"),f5r=o("TFOpenAIGPTLMHeadModel"),m5r=o(" (OpenAI GPT model)"),g5r=l(),J4=a("li"),W8e=a("strong"),h5r=o("opt"),p5r=o(" \u2014 "),XJ=a("a"),_5r=o("TFOPTForCausalLM"),u5r=o(" (OPT model)"),b5r=l(),Y4=a("li"),H8e=a("strong"),v5r=o("rembert"),F5r=o(" \u2014 "),zJ=a("a"),T5r=o("TFRemBertForCausalLM"),M5r=o(" (RemBERT model)"),E5r=l(),K4=a("li"),U8e=a("strong"),C5r=o("roberta"),w5r=o(" \u2014 "),QJ=a("a"),A5r=o("TFRobertaForCausalLM"),L5r=o(" (RoBERTa model)"),y5r=l(),Z4=a("li"),J8e=a("strong"),x5r=o("roformer"),$5r=o(" \u2014 "),WJ=a("a"),k5r=o("TFRoFormerForCausalLM"),S5r=o(" (RoFormer model)"),R5r=l(),eE=a("li"),Y8e=a("strong"),P5r=o("transfo-xl"),B5r=o(" \u2014 "),HJ=a("a"),I5r=o("TFTransfoXLLMHeadModel"),N5r=o(" (Transformer-XL model)"),q5r=l(),oE=a("li"),K8e=a("strong"),j5r=o("xlm"),D5r=o(" \u2014 "),UJ=a("a"),G5r=o("TFXLMWithLMHeadModel"),O5r=o(" (XLM model)"),V5r=l(),rE=a("li"),Z8e=a("strong"),X5r=o("xlnet"),z5r=o(" \u2014 "),JJ=a("a"),Q5r=o("TFXLNetLMHeadModel"),W5r=o(" (XLNet model)"),H5r=l(),F(tE.$$.fragment),hze=l(),pc=a("h2"),aE=a("a"),eMe=a("span"),F(sx.$$.fragment),U5r=l(),oMe=a("span"),J5r=o("TFAutoModelForImageClassification"),pze=l(),ar=a("div"),F(lx.$$.fragment),Y5r=l(),_c=a("p"),K5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YJ=a("a"),Z5r=o("from_pretrained()"),e0r=o(" class method or the "),KJ=a("a"),o0r=o("from_config()"),r0r=o(` class
method.`),t0r=l(),ix=a("p"),a0r=o("This class cannot be instantiated directly using "),rMe=a("code"),n0r=o("__init__()"),s0r=o(" (throws an error)."),l0r=l(),It=a("div"),F(dx.$$.fragment),i0r=l(),tMe=a("p"),d0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),c0r=l(),uc=a("p"),f0r=o(`Note:
Loading a model from its configuration file does `),aMe=a("strong"),m0r=o("not"),g0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),h0r=o("from_pretrained()"),p0r=o(" to load the model weights."),_0r=l(),F(nE.$$.fragment),u0r=l(),Sr=a("div"),F(cx.$$.fragment),b0r=l(),nMe=a("p"),v0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),F0r=l(),cn=a("p"),T0r=o("The model class to instantiate is selected based on the "),sMe=a("code"),M0r=o("model_type"),E0r=o(` property of the config object (either
passed as an argument or loaded from `),lMe=a("code"),C0r=o("pretrained_model_name_or_path"),w0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=a("code"),A0r=o("pretrained_model_name_or_path"),L0r=o(":"),y0r=l(),Qe=a("ul"),sE=a("li"),dMe=a("strong"),x0r=o("convnext"),$0r=o(" \u2014 "),eY=a("a"),k0r=o("TFConvNextForImageClassification"),S0r=o(" (ConvNeXT model)"),R0r=l(),lE=a("li"),cMe=a("strong"),P0r=o("data2vec-vision"),B0r=o(" \u2014 "),oY=a("a"),I0r=o("TFData2VecVisionForImageClassification"),N0r=o(" (Data2VecVision model)"),q0r=l(),Ys=a("li"),fMe=a("strong"),j0r=o("deit"),D0r=o(" \u2014 "),rY=a("a"),G0r=o("TFDeiTForImageClassification"),O0r=o(" or "),tY=a("a"),V0r=o("TFDeiTForImageClassificationWithTeacher"),X0r=o(" (DeiT model)"),z0r=l(),iE=a("li"),mMe=a("strong"),Q0r=o("regnet"),W0r=o(" \u2014 "),aY=a("a"),H0r=o("TFRegNetForImageClassification"),U0r=o(" (RegNet model)"),J0r=l(),dE=a("li"),gMe=a("strong"),Y0r=o("resnet"),K0r=o(" \u2014 "),nY=a("a"),Z0r=o("TFResNetForImageClassification"),ewr=o(" (ResNet model)"),owr=l(),cE=a("li"),hMe=a("strong"),rwr=o("swin"),twr=o(" \u2014 "),sY=a("a"),awr=o("TFSwinForImageClassification"),nwr=o(" (Swin Transformer model)"),swr=l(),fE=a("li"),pMe=a("strong"),lwr=o("vit"),iwr=o(" \u2014 "),lY=a("a"),dwr=o("TFViTForImageClassification"),cwr=o(" (ViT model)"),fwr=l(),F(mE.$$.fragment),_ze=l(),bc=a("h2"),gE=a("a"),_Me=a("span"),F(fx.$$.fragment),mwr=l(),uMe=a("span"),gwr=o("TFAutoModelForMaskedLM"),uze=l(),nr=a("div"),F(mx.$$.fragment),hwr=l(),vc=a("p"),pwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=a("a"),_wr=o("from_pretrained()"),uwr=o(" class method or the "),dY=a("a"),bwr=o("from_config()"),vwr=o(` class
method.`),Fwr=l(),gx=a("p"),Twr=o("This class cannot be instantiated directly using "),bMe=a("code"),Mwr=o("__init__()"),Ewr=o(" (throws an error)."),Cwr=l(),Nt=a("div"),F(hx.$$.fragment),wwr=l(),vMe=a("p"),Awr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lwr=l(),Fc=a("p"),ywr=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),xwr=o("not"),$wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),kwr=o("from_pretrained()"),Swr=o(" to load the model weights."),Rwr=l(),F(hE.$$.fragment),Pwr=l(),Rr=a("div"),F(px.$$.fragment),Bwr=l(),TMe=a("p"),Iwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nwr=l(),fn=a("p"),qwr=o("The model class to instantiate is selected based on the "),MMe=a("code"),jwr=o("model_type"),Dwr=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),Vwr=o("pretrained_model_name_or_path"),Xwr=o(":"),zwr=l(),ie=a("ul"),pE=a("li"),wMe=a("strong"),Qwr=o("albert"),Wwr=o(" \u2014 "),fY=a("a"),Hwr=o("TFAlbertForMaskedLM"),Uwr=o(" (ALBERT model)"),Jwr=l(),_E=a("li"),AMe=a("strong"),Ywr=o("bert"),Kwr=o(" \u2014 "),mY=a("a"),Zwr=o("TFBertForMaskedLM"),eAr=o(" (BERT model)"),oAr=l(),uE=a("li"),LMe=a("strong"),rAr=o("camembert"),tAr=o(" \u2014 "),gY=a("a"),aAr=o("TFCamembertForMaskedLM"),nAr=o(" (CamemBERT model)"),sAr=l(),bE=a("li"),yMe=a("strong"),lAr=o("convbert"),iAr=o(" \u2014 "),hY=a("a"),dAr=o("TFConvBertForMaskedLM"),cAr=o(" (ConvBERT model)"),fAr=l(),vE=a("li"),xMe=a("strong"),mAr=o("deberta"),gAr=o(" \u2014 "),pY=a("a"),hAr=o("TFDebertaForMaskedLM"),pAr=o(" (DeBERTa model)"),_Ar=l(),FE=a("li"),$Me=a("strong"),uAr=o("deberta-v2"),bAr=o(" \u2014 "),_Y=a("a"),vAr=o("TFDebertaV2ForMaskedLM"),FAr=o(" (DeBERTa-v2 model)"),TAr=l(),TE=a("li"),kMe=a("strong"),MAr=o("distilbert"),EAr=o(" \u2014 "),uY=a("a"),CAr=o("TFDistilBertForMaskedLM"),wAr=o(" (DistilBERT model)"),AAr=l(),ME=a("li"),SMe=a("strong"),LAr=o("electra"),yAr=o(" \u2014 "),bY=a("a"),xAr=o("TFElectraForMaskedLM"),$Ar=o(" (ELECTRA model)"),kAr=l(),EE=a("li"),RMe=a("strong"),SAr=o("flaubert"),RAr=o(" \u2014 "),vY=a("a"),PAr=o("TFFlaubertWithLMHeadModel"),BAr=o(" (FlauBERT model)"),IAr=l(),CE=a("li"),PMe=a("strong"),NAr=o("funnel"),qAr=o(" \u2014 "),FY=a("a"),jAr=o("TFFunnelForMaskedLM"),DAr=o(" (Funnel Transformer model)"),GAr=l(),wE=a("li"),BMe=a("strong"),OAr=o("layoutlm"),VAr=o(" \u2014 "),TY=a("a"),XAr=o("TFLayoutLMForMaskedLM"),zAr=o(" (LayoutLM model)"),QAr=l(),AE=a("li"),IMe=a("strong"),WAr=o("longformer"),HAr=o(" \u2014 "),MY=a("a"),UAr=o("TFLongformerForMaskedLM"),JAr=o(" (Longformer model)"),YAr=l(),LE=a("li"),NMe=a("strong"),KAr=o("mobilebert"),ZAr=o(" \u2014 "),EY=a("a"),e6r=o("TFMobileBertForMaskedLM"),o6r=o(" (MobileBERT model)"),r6r=l(),yE=a("li"),qMe=a("strong"),t6r=o("mpnet"),a6r=o(" \u2014 "),CY=a("a"),n6r=o("TFMPNetForMaskedLM"),s6r=o(" (MPNet model)"),l6r=l(),xE=a("li"),jMe=a("strong"),i6r=o("rembert"),d6r=o(" \u2014 "),wY=a("a"),c6r=o("TFRemBertForMaskedLM"),f6r=o(" (RemBERT model)"),m6r=l(),$E=a("li"),DMe=a("strong"),g6r=o("roberta"),h6r=o(" \u2014 "),AY=a("a"),p6r=o("TFRobertaForMaskedLM"),_6r=o(" (RoBERTa model)"),u6r=l(),kE=a("li"),GMe=a("strong"),b6r=o("roformer"),v6r=o(" \u2014 "),LY=a("a"),F6r=o("TFRoFormerForMaskedLM"),T6r=o(" (RoFormer model)"),M6r=l(),SE=a("li"),OMe=a("strong"),E6r=o("tapas"),C6r=o(" \u2014 "),yY=a("a"),w6r=o("TFTapasForMaskedLM"),A6r=o(" (TAPAS model)"),L6r=l(),RE=a("li"),VMe=a("strong"),y6r=o("xlm"),x6r=o(" \u2014 "),xY=a("a"),$6r=o("TFXLMWithLMHeadModel"),k6r=o(" (XLM model)"),S6r=l(),PE=a("li"),XMe=a("strong"),R6r=o("xlm-roberta"),P6r=o(" \u2014 "),$Y=a("a"),B6r=o("TFXLMRobertaForMaskedLM"),I6r=o(" (XLM-RoBERTa model)"),N6r=l(),F(BE.$$.fragment),bze=l(),Tc=a("h2"),IE=a("a"),zMe=a("span"),F(_x.$$.fragment),q6r=l(),QMe=a("span"),j6r=o("TFAutoModelForSeq2SeqLM"),vze=l(),sr=a("div"),F(ux.$$.fragment),D6r=l(),Mc=a("p"),G6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=a("a"),O6r=o("from_pretrained()"),V6r=o(" class method or the "),SY=a("a"),X6r=o("from_config()"),z6r=o(` class
method.`),Q6r=l(),bx=a("p"),W6r=o("This class cannot be instantiated directly using "),WMe=a("code"),H6r=o("__init__()"),U6r=o(" (throws an error)."),J6r=l(),qt=a("div"),F(vx.$$.fragment),Y6r=l(),HMe=a("p"),K6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z6r=l(),Ec=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),UMe=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),F(NE.$$.fragment),s7r=l(),Pr=a("div"),F(Fx.$$.fragment),l7r=l(),JMe=a("p"),i7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d7r=l(),mn=a("p"),c7r=o("The model class to instantiate is selected based on the "),YMe=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(":"),u7r=l(),ye=a("ul"),qE=a("li"),e4e=a("strong"),b7r=o("bart"),v7r=o(" \u2014 "),PY=a("a"),F7r=o("TFBartForConditionalGeneration"),T7r=o(" (BART model)"),M7r=l(),jE=a("li"),o4e=a("strong"),E7r=o("blenderbot"),C7r=o(" \u2014 "),BY=a("a"),w7r=o("TFBlenderbotForConditionalGeneration"),A7r=o(" (Blenderbot model)"),L7r=l(),DE=a("li"),r4e=a("strong"),y7r=o("blenderbot-small"),x7r=o(" \u2014 "),IY=a("a"),$7r=o("TFBlenderbotSmallForConditionalGeneration"),k7r=o(" (BlenderbotSmall model)"),S7r=l(),GE=a("li"),t4e=a("strong"),R7r=o("encoder-decoder"),P7r=o(" \u2014 "),NY=a("a"),B7r=o("TFEncoderDecoderModel"),I7r=o(" (Encoder decoder model)"),N7r=l(),OE=a("li"),a4e=a("strong"),q7r=o("led"),j7r=o(" \u2014 "),qY=a("a"),D7r=o("TFLEDForConditionalGeneration"),G7r=o(" (LED model)"),O7r=l(),VE=a("li"),n4e=a("strong"),V7r=o("marian"),X7r=o(" \u2014 "),jY=a("a"),z7r=o("TFMarianMTModel"),Q7r=o(" (Marian model)"),W7r=l(),XE=a("li"),s4e=a("strong"),H7r=o("mbart"),U7r=o(" \u2014 "),DY=a("a"),J7r=o("TFMBartForConditionalGeneration"),Y7r=o(" (mBART model)"),K7r=l(),zE=a("li"),l4e=a("strong"),Z7r=o("mt5"),eLr=o(" \u2014 "),GY=a("a"),oLr=o("TFMT5ForConditionalGeneration"),rLr=o(" (MT5 model)"),tLr=l(),QE=a("li"),i4e=a("strong"),aLr=o("pegasus"),nLr=o(" \u2014 "),OY=a("a"),sLr=o("TFPegasusForConditionalGeneration"),lLr=o(" (Pegasus model)"),iLr=l(),WE=a("li"),d4e=a("strong"),dLr=o("t5"),cLr=o(" \u2014 "),VY=a("a"),fLr=o("TFT5ForConditionalGeneration"),mLr=o(" (T5 model)"),gLr=l(),F(HE.$$.fragment),Fze=l(),Cc=a("h2"),UE=a("a"),c4e=a("span"),F(Tx.$$.fragment),hLr=l(),f4e=a("span"),pLr=o("TFAutoModelForSequenceClassification"),Tze=l(),lr=a("div"),F(Mx.$$.fragment),_Lr=l(),wc=a("p"),uLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XY=a("a"),bLr=o("from_pretrained()"),vLr=o(" class method or the "),zY=a("a"),FLr=o("from_config()"),TLr=o(` class
method.`),MLr=l(),Ex=a("p"),ELr=o("This class cannot be instantiated directly using "),m4e=a("code"),CLr=o("__init__()"),wLr=o(" (throws an error)."),ALr=l(),jt=a("div"),F(Cx.$$.fragment),LLr=l(),g4e=a("p"),yLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xLr=l(),Ac=a("p"),$Lr=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),kLr=o("not"),SLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),RLr=o("from_pretrained()"),PLr=o(" to load the model weights."),BLr=l(),F(JE.$$.fragment),ILr=l(),Br=a("div"),F(wx.$$.fragment),NLr=l(),p4e=a("p"),qLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jLr=l(),gn=a("p"),DLr=o("The model class to instantiate is selected based on the "),_4e=a("code"),GLr=o("model_type"),OLr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),VLr=o("pretrained_model_name_or_path"),XLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),zLr=o("pretrained_model_name_or_path"),QLr=o(":"),WLr=l(),te=a("ul"),YE=a("li"),v4e=a("strong"),HLr=o("albert"),ULr=o(" \u2014 "),WY=a("a"),JLr=o("TFAlbertForSequenceClassification"),YLr=o(" (ALBERT model)"),KLr=l(),KE=a("li"),F4e=a("strong"),ZLr=o("bert"),eyr=o(" \u2014 "),HY=a("a"),oyr=o("TFBertForSequenceClassification"),ryr=o(" (BERT model)"),tyr=l(),ZE=a("li"),T4e=a("strong"),ayr=o("camembert"),nyr=o(" \u2014 "),UY=a("a"),syr=o("TFCamembertForSequenceClassification"),lyr=o(" (CamemBERT model)"),iyr=l(),eC=a("li"),M4e=a("strong"),dyr=o("convbert"),cyr=o(" \u2014 "),JY=a("a"),fyr=o("TFConvBertForSequenceClassification"),myr=o(" (ConvBERT model)"),gyr=l(),oC=a("li"),E4e=a("strong"),hyr=o("ctrl"),pyr=o(" \u2014 "),YY=a("a"),_yr=o("TFCTRLForSequenceClassification"),uyr=o(" (CTRL model)"),byr=l(),rC=a("li"),C4e=a("strong"),vyr=o("deberta"),Fyr=o(" \u2014 "),KY=a("a"),Tyr=o("TFDebertaForSequenceClassification"),Myr=o(" (DeBERTa model)"),Eyr=l(),tC=a("li"),w4e=a("strong"),Cyr=o("deberta-v2"),wyr=o(" \u2014 "),ZY=a("a"),Ayr=o("TFDebertaV2ForSequenceClassification"),Lyr=o(" (DeBERTa-v2 model)"),yyr=l(),aC=a("li"),A4e=a("strong"),xyr=o("distilbert"),$yr=o(" \u2014 "),eK=a("a"),kyr=o("TFDistilBertForSequenceClassification"),Syr=o(" (DistilBERT model)"),Ryr=l(),nC=a("li"),L4e=a("strong"),Pyr=o("electra"),Byr=o(" \u2014 "),oK=a("a"),Iyr=o("TFElectraForSequenceClassification"),Nyr=o(" (ELECTRA model)"),qyr=l(),sC=a("li"),y4e=a("strong"),jyr=o("flaubert"),Dyr=o(" \u2014 "),rK=a("a"),Gyr=o("TFFlaubertForSequenceClassification"),Oyr=o(" (FlauBERT model)"),Vyr=l(),lC=a("li"),x4e=a("strong"),Xyr=o("funnel"),zyr=o(" \u2014 "),tK=a("a"),Qyr=o("TFFunnelForSequenceClassification"),Wyr=o(" (Funnel Transformer model)"),Hyr=l(),iC=a("li"),$4e=a("strong"),Uyr=o("gpt2"),Jyr=o(" \u2014 "),aK=a("a"),Yyr=o("TFGPT2ForSequenceClassification"),Kyr=o(" (OpenAI GPT-2 model)"),Zyr=l(),dC=a("li"),k4e=a("strong"),e9r=o("gptj"),o9r=o(" \u2014 "),nK=a("a"),r9r=o("TFGPTJForSequenceClassification"),t9r=o(" (GPT-J model)"),a9r=l(),cC=a("li"),S4e=a("strong"),n9r=o("layoutlm"),s9r=o(" \u2014 "),sK=a("a"),l9r=o("TFLayoutLMForSequenceClassification"),i9r=o(" (LayoutLM model)"),d9r=l(),fC=a("li"),R4e=a("strong"),c9r=o("longformer"),f9r=o(" \u2014 "),lK=a("a"),m9r=o("TFLongformerForSequenceClassification"),g9r=o(" (Longformer model)"),h9r=l(),mC=a("li"),P4e=a("strong"),p9r=o("mobilebert"),_9r=o(" \u2014 "),iK=a("a"),u9r=o("TFMobileBertForSequenceClassification"),b9r=o(" (MobileBERT model)"),v9r=l(),gC=a("li"),B4e=a("strong"),F9r=o("mpnet"),T9r=o(" \u2014 "),dK=a("a"),M9r=o("TFMPNetForSequenceClassification"),E9r=o(" (MPNet model)"),C9r=l(),hC=a("li"),I4e=a("strong"),w9r=o("openai-gpt"),A9r=o(" \u2014 "),cK=a("a"),L9r=o("TFOpenAIGPTForSequenceClassification"),y9r=o(" (OpenAI GPT model)"),x9r=l(),pC=a("li"),N4e=a("strong"),$9r=o("rembert"),k9r=o(" \u2014 "),fK=a("a"),S9r=o("TFRemBertForSequenceClassification"),R9r=o(" (RemBERT model)"),P9r=l(),_C=a("li"),q4e=a("strong"),B9r=o("roberta"),I9r=o(" \u2014 "),mK=a("a"),N9r=o("TFRobertaForSequenceClassification"),q9r=o(" (RoBERTa model)"),j9r=l(),uC=a("li"),j4e=a("strong"),D9r=o("roformer"),G9r=o(" \u2014 "),gK=a("a"),O9r=o("TFRoFormerForSequenceClassification"),V9r=o(" (RoFormer model)"),X9r=l(),bC=a("li"),D4e=a("strong"),z9r=o("tapas"),Q9r=o(" \u2014 "),hK=a("a"),W9r=o("TFTapasForSequenceClassification"),H9r=o(" (TAPAS model)"),U9r=l(),vC=a("li"),G4e=a("strong"),J9r=o("transfo-xl"),Y9r=o(" \u2014 "),pK=a("a"),K9r=o("TFTransfoXLForSequenceClassification"),Z9r=o(" (Transformer-XL model)"),exr=l(),FC=a("li"),O4e=a("strong"),oxr=o("xlm"),rxr=o(" \u2014 "),_K=a("a"),txr=o("TFXLMForSequenceClassification"),axr=o(" (XLM model)"),nxr=l(),TC=a("li"),V4e=a("strong"),sxr=o("xlm-roberta"),lxr=o(" \u2014 "),uK=a("a"),ixr=o("TFXLMRobertaForSequenceClassification"),dxr=o(" (XLM-RoBERTa model)"),cxr=l(),MC=a("li"),X4e=a("strong"),fxr=o("xlnet"),mxr=o(" \u2014 "),bK=a("a"),gxr=o("TFXLNetForSequenceClassification"),hxr=o(" (XLNet model)"),pxr=l(),F(EC.$$.fragment),Mze=l(),Lc=a("h2"),CC=a("a"),z4e=a("span"),F(Ax.$$.fragment),_xr=l(),Q4e=a("span"),uxr=o("TFAutoModelForMultipleChoice"),Eze=l(),ir=a("div"),F(Lx.$$.fragment),bxr=l(),yc=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vK=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),FK=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),yx=a("p"),wxr=o("This class cannot be instantiated directly using "),W4e=a("code"),Axr=o("__init__()"),Lxr=o(" (throws an error)."),yxr=l(),Dt=a("div"),F(xx.$$.fragment),xxr=l(),H4e=a("p"),$xr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kxr=l(),xc=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),Rxr=o("not"),Pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),Bxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),Nxr=l(),F(wC.$$.fragment),qxr=l(),Ir=a("div"),F($x.$$.fragment),jxr=l(),J4e=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Gxr=l(),hn=a("p"),Oxr=o("The model class to instantiate is selected based on the "),Y4e=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),Wxr=o("pretrained_model_name_or_path"),Hxr=o(":"),Uxr=l(),_e=a("ul"),AC=a("li"),eEe=a("strong"),Jxr=o("albert"),Yxr=o(" \u2014 "),MK=a("a"),Kxr=o("TFAlbertForMultipleChoice"),Zxr=o(" (ALBERT model)"),e$r=l(),LC=a("li"),oEe=a("strong"),o$r=o("bert"),r$r=o(" \u2014 "),EK=a("a"),t$r=o("TFBertForMultipleChoice"),a$r=o(" (BERT model)"),n$r=l(),yC=a("li"),rEe=a("strong"),s$r=o("camembert"),l$r=o(" \u2014 "),CK=a("a"),i$r=o("TFCamembertForMultipleChoice"),d$r=o(" (CamemBERT model)"),c$r=l(),xC=a("li"),tEe=a("strong"),f$r=o("convbert"),m$r=o(" \u2014 "),wK=a("a"),g$r=o("TFConvBertForMultipleChoice"),h$r=o(" (ConvBERT model)"),p$r=l(),$C=a("li"),aEe=a("strong"),_$r=o("distilbert"),u$r=o(" \u2014 "),AK=a("a"),b$r=o("TFDistilBertForMultipleChoice"),v$r=o(" (DistilBERT model)"),F$r=l(),kC=a("li"),nEe=a("strong"),T$r=o("electra"),M$r=o(" \u2014 "),LK=a("a"),E$r=o("TFElectraForMultipleChoice"),C$r=o(" (ELECTRA model)"),w$r=l(),SC=a("li"),sEe=a("strong"),A$r=o("flaubert"),L$r=o(" \u2014 "),yK=a("a"),y$r=o("TFFlaubertForMultipleChoice"),x$r=o(" (FlauBERT model)"),$$r=l(),RC=a("li"),lEe=a("strong"),k$r=o("funnel"),S$r=o(" \u2014 "),xK=a("a"),R$r=o("TFFunnelForMultipleChoice"),P$r=o(" (Funnel Transformer model)"),B$r=l(),PC=a("li"),iEe=a("strong"),I$r=o("longformer"),N$r=o(" \u2014 "),$K=a("a"),q$r=o("TFLongformerForMultipleChoice"),j$r=o(" (Longformer model)"),D$r=l(),BC=a("li"),dEe=a("strong"),G$r=o("mobilebert"),O$r=o(" \u2014 "),kK=a("a"),V$r=o("TFMobileBertForMultipleChoice"),X$r=o(" (MobileBERT model)"),z$r=l(),IC=a("li"),cEe=a("strong"),Q$r=o("mpnet"),W$r=o(" \u2014 "),SK=a("a"),H$r=o("TFMPNetForMultipleChoice"),U$r=o(" (MPNet model)"),J$r=l(),NC=a("li"),fEe=a("strong"),Y$r=o("rembert"),K$r=o(" \u2014 "),RK=a("a"),Z$r=o("TFRemBertForMultipleChoice"),ekr=o(" (RemBERT model)"),okr=l(),qC=a("li"),mEe=a("strong"),rkr=o("roberta"),tkr=o(" \u2014 "),PK=a("a"),akr=o("TFRobertaForMultipleChoice"),nkr=o(" (RoBERTa model)"),skr=l(),jC=a("li"),gEe=a("strong"),lkr=o("roformer"),ikr=o(" \u2014 "),BK=a("a"),dkr=o("TFRoFormerForMultipleChoice"),ckr=o(" (RoFormer model)"),fkr=l(),DC=a("li"),hEe=a("strong"),mkr=o("xlm"),gkr=o(" \u2014 "),IK=a("a"),hkr=o("TFXLMForMultipleChoice"),pkr=o(" (XLM model)"),_kr=l(),GC=a("li"),pEe=a("strong"),ukr=o("xlm-roberta"),bkr=o(" \u2014 "),NK=a("a"),vkr=o("TFXLMRobertaForMultipleChoice"),Fkr=o(" (XLM-RoBERTa model)"),Tkr=l(),OC=a("li"),_Ee=a("strong"),Mkr=o("xlnet"),Ekr=o(" \u2014 "),qK=a("a"),Ckr=o("TFXLNetForMultipleChoice"),wkr=o(" (XLNet model)"),Akr=l(),F(VC.$$.fragment),Cze=l(),$c=a("h2"),XC=a("a"),uEe=a("span"),F(kx.$$.fragment),Lkr=l(),bEe=a("span"),ykr=o("TFAutoModelForNextSentencePrediction"),wze=l(),dr=a("div"),F(Sx.$$.fragment),xkr=l(),kc=a("p"),$kr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=a("a"),kkr=o("from_pretrained()"),Skr=o(" class method or the "),DK=a("a"),Rkr=o("from_config()"),Pkr=o(` class
method.`),Bkr=l(),Rx=a("p"),Ikr=o("This class cannot be instantiated directly using "),vEe=a("code"),Nkr=o("__init__()"),qkr=o(" (throws an error)."),jkr=l(),Gt=a("div"),F(Px.$$.fragment),Dkr=l(),FEe=a("p"),Gkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Okr=l(),Sc=a("p"),Vkr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),Xkr=o("not"),zkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),Qkr=o("from_pretrained()"),Wkr=o(" to load the model weights."),Hkr=l(),F(zC.$$.fragment),Ukr=l(),Nr=a("div"),F(Bx.$$.fragment),Jkr=l(),MEe=a("p"),Ykr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kkr=l(),pn=a("p"),Zkr=o("The model class to instantiate is selected based on the "),EEe=a("code"),eSr=o("model_type"),oSr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),rSr=o("pretrained_model_name_or_path"),tSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),aSr=o("pretrained_model_name_or_path"),nSr=o(":"),sSr=l(),Ix=a("ul"),QC=a("li"),AEe=a("strong"),lSr=o("bert"),iSr=o(" \u2014 "),OK=a("a"),dSr=o("TFBertForNextSentencePrediction"),cSr=o(" (BERT model)"),fSr=l(),WC=a("li"),LEe=a("strong"),mSr=o("mobilebert"),gSr=o(" \u2014 "),VK=a("a"),hSr=o("TFMobileBertForNextSentencePrediction"),pSr=o(" (MobileBERT model)"),_Sr=l(),F(HC.$$.fragment),Aze=l(),Rc=a("h2"),UC=a("a"),yEe=a("span"),F(Nx.$$.fragment),uSr=l(),xEe=a("span"),bSr=o("TFAutoModelForTableQuestionAnswering"),Lze=l(),cr=a("div"),F(qx.$$.fragment),vSr=l(),Pc=a("p"),FSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XK=a("a"),TSr=o("from_pretrained()"),MSr=o(" class method or the "),zK=a("a"),ESr=o("from_config()"),CSr=o(` class
method.`),wSr=l(),jx=a("p"),ASr=o("This class cannot be instantiated directly using "),$Ee=a("code"),LSr=o("__init__()"),ySr=o(" (throws an error)."),xSr=l(),Ot=a("div"),F(Dx.$$.fragment),$Sr=l(),kEe=a("p"),kSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SSr=l(),Bc=a("p"),RSr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),PSr=o("not"),BSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),ISr=o("from_pretrained()"),NSr=o(" to load the model weights."),qSr=l(),F(JC.$$.fragment),jSr=l(),qr=a("div"),F(Gx.$$.fragment),DSr=l(),REe=a("p"),GSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OSr=l(),_n=a("p"),VSr=o("The model class to instantiate is selected based on the "),PEe=a("code"),XSr=o("model_type"),zSr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),QSr=o("pretrained_model_name_or_path"),WSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),HSr=o("pretrained_model_name_or_path"),USr=o(":"),JSr=l(),NEe=a("ul"),YC=a("li"),qEe=a("strong"),YSr=o("tapas"),KSr=o(" \u2014 "),WK=a("a"),ZSr=o("TFTapasForQuestionAnswering"),eRr=o(" (TAPAS model)"),oRr=l(),F(KC.$$.fragment),yze=l(),Ic=a("h2"),ZC=a("a"),jEe=a("span"),F(Ox.$$.fragment),rRr=l(),DEe=a("span"),tRr=o("TFAutoModelForTokenClassification"),xze=l(),fr=a("div"),F(Vx.$$.fragment),aRr=l(),Nc=a("p"),nRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HK=a("a"),sRr=o("from_pretrained()"),lRr=o(" class method or the "),UK=a("a"),iRr=o("from_config()"),dRr=o(` class
method.`),cRr=l(),Xx=a("p"),fRr=o("This class cannot be instantiated directly using "),GEe=a("code"),mRr=o("__init__()"),gRr=o(" (throws an error)."),hRr=l(),Vt=a("div"),F(zx.$$.fragment),pRr=l(),OEe=a("p"),_Rr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uRr=l(),qc=a("p"),bRr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),vRr=o("not"),FRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),TRr=o("from_pretrained()"),MRr=o(" to load the model weights."),ERr=l(),F(e5.$$.fragment),CRr=l(),jr=a("div"),F(Qx.$$.fragment),wRr=l(),XEe=a("p"),ARr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LRr=l(),un=a("p"),yRr=o("The model class to instantiate is selected based on the "),zEe=a("code"),xRr=o("model_type"),$Rr=o(` property of the config object (either
passed as an argument or loaded from `),QEe=a("code"),kRr=o("pretrained_model_name_or_path"),SRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=a("code"),RRr=o("pretrained_model_name_or_path"),PRr=o(":"),BRr=l(),de=a("ul"),o5=a("li"),HEe=a("strong"),IRr=o("albert"),NRr=o(" \u2014 "),YK=a("a"),qRr=o("TFAlbertForTokenClassification"),jRr=o(" (ALBERT model)"),DRr=l(),r5=a("li"),UEe=a("strong"),GRr=o("bert"),ORr=o(" \u2014 "),KK=a("a"),VRr=o("TFBertForTokenClassification"),XRr=o(" (BERT model)"),zRr=l(),t5=a("li"),JEe=a("strong"),QRr=o("camembert"),WRr=o(" \u2014 "),ZK=a("a"),HRr=o("TFCamembertForTokenClassification"),URr=o(" (CamemBERT model)"),JRr=l(),a5=a("li"),YEe=a("strong"),YRr=o("convbert"),KRr=o(" \u2014 "),eZ=a("a"),ZRr=o("TFConvBertForTokenClassification"),ePr=o(" (ConvBERT model)"),oPr=l(),n5=a("li"),KEe=a("strong"),rPr=o("deberta"),tPr=o(" \u2014 "),oZ=a("a"),aPr=o("TFDebertaForTokenClassification"),nPr=o(" (DeBERTa model)"),sPr=l(),s5=a("li"),ZEe=a("strong"),lPr=o("deberta-v2"),iPr=o(" \u2014 "),rZ=a("a"),dPr=o("TFDebertaV2ForTokenClassification"),cPr=o(" (DeBERTa-v2 model)"),fPr=l(),l5=a("li"),eCe=a("strong"),mPr=o("distilbert"),gPr=o(" \u2014 "),tZ=a("a"),hPr=o("TFDistilBertForTokenClassification"),pPr=o(" (DistilBERT model)"),_Pr=l(),i5=a("li"),oCe=a("strong"),uPr=o("electra"),bPr=o(" \u2014 "),aZ=a("a"),vPr=o("TFElectraForTokenClassification"),FPr=o(" (ELECTRA model)"),TPr=l(),d5=a("li"),rCe=a("strong"),MPr=o("flaubert"),EPr=o(" \u2014 "),nZ=a("a"),CPr=o("TFFlaubertForTokenClassification"),wPr=o(" (FlauBERT model)"),APr=l(),c5=a("li"),tCe=a("strong"),LPr=o("funnel"),yPr=o(" \u2014 "),sZ=a("a"),xPr=o("TFFunnelForTokenClassification"),$Pr=o(" (Funnel Transformer model)"),kPr=l(),f5=a("li"),aCe=a("strong"),SPr=o("layoutlm"),RPr=o(" \u2014 "),lZ=a("a"),PPr=o("TFLayoutLMForTokenClassification"),BPr=o(" (LayoutLM model)"),IPr=l(),m5=a("li"),nCe=a("strong"),NPr=o("longformer"),qPr=o(" \u2014 "),iZ=a("a"),jPr=o("TFLongformerForTokenClassification"),DPr=o(" (Longformer model)"),GPr=l(),g5=a("li"),sCe=a("strong"),OPr=o("mobilebert"),VPr=o(" \u2014 "),dZ=a("a"),XPr=o("TFMobileBertForTokenClassification"),zPr=o(" (MobileBERT model)"),QPr=l(),h5=a("li"),lCe=a("strong"),WPr=o("mpnet"),HPr=o(" \u2014 "),cZ=a("a"),UPr=o("TFMPNetForTokenClassification"),JPr=o(" (MPNet model)"),YPr=l(),p5=a("li"),iCe=a("strong"),KPr=o("rembert"),ZPr=o(" \u2014 "),fZ=a("a"),eBr=o("TFRemBertForTokenClassification"),oBr=o(" (RemBERT model)"),rBr=l(),_5=a("li"),dCe=a("strong"),tBr=o("roberta"),aBr=o(" \u2014 "),mZ=a("a"),nBr=o("TFRobertaForTokenClassification"),sBr=o(" (RoBERTa model)"),lBr=l(),u5=a("li"),cCe=a("strong"),iBr=o("roformer"),dBr=o(" \u2014 "),gZ=a("a"),cBr=o("TFRoFormerForTokenClassification"),fBr=o(" (RoFormer model)"),mBr=l(),b5=a("li"),fCe=a("strong"),gBr=o("xlm"),hBr=o(" \u2014 "),hZ=a("a"),pBr=o("TFXLMForTokenClassification"),_Br=o(" (XLM model)"),uBr=l(),v5=a("li"),mCe=a("strong"),bBr=o("xlm-roberta"),vBr=o(" \u2014 "),pZ=a("a"),FBr=o("TFXLMRobertaForTokenClassification"),TBr=o(" (XLM-RoBERTa model)"),MBr=l(),F5=a("li"),gCe=a("strong"),EBr=o("xlnet"),CBr=o(" \u2014 "),_Z=a("a"),wBr=o("TFXLNetForTokenClassification"),ABr=o(" (XLNet model)"),LBr=l(),F(T5.$$.fragment),$ze=l(),jc=a("h2"),M5=a("a"),hCe=a("span"),F(Wx.$$.fragment),yBr=l(),pCe=a("span"),xBr=o("TFAutoModelForQuestionAnswering"),kze=l(),mr=a("div"),F(Hx.$$.fragment),$Br=l(),Dc=a("p"),kBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=a("a"),SBr=o("from_pretrained()"),RBr=o(" class method or the "),bZ=a("a"),PBr=o("from_config()"),BBr=o(` class
method.`),IBr=l(),Ux=a("p"),NBr=o("This class cannot be instantiated directly using "),_Ce=a("code"),qBr=o("__init__()"),jBr=o(" (throws an error)."),DBr=l(),Xt=a("div"),F(Jx.$$.fragment),GBr=l(),uCe=a("p"),OBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VBr=l(),Gc=a("p"),XBr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),zBr=o("not"),QBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),WBr=o("from_pretrained()"),HBr=o(" to load the model weights."),UBr=l(),F(E5.$$.fragment),JBr=l(),Dr=a("div"),F(Yx.$$.fragment),YBr=l(),vCe=a("p"),KBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZBr=l(),bn=a("p"),eIr=o("The model class to instantiate is selected based on the "),FCe=a("code"),oIr=o("model_type"),rIr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),tIr=o("pretrained_model_name_or_path"),aIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),nIr=o("pretrained_model_name_or_path"),sIr=o(":"),lIr=l(),ce=a("ul"),C5=a("li"),ECe=a("strong"),iIr=o("albert"),dIr=o(" \u2014 "),FZ=a("a"),cIr=o("TFAlbertForQuestionAnswering"),fIr=o(" (ALBERT model)"),mIr=l(),w5=a("li"),CCe=a("strong"),gIr=o("bert"),hIr=o(" \u2014 "),TZ=a("a"),pIr=o("TFBertForQuestionAnswering"),_Ir=o(" (BERT model)"),uIr=l(),A5=a("li"),wCe=a("strong"),bIr=o("camembert"),vIr=o(" \u2014 "),MZ=a("a"),FIr=o("TFCamembertForQuestionAnswering"),TIr=o(" (CamemBERT model)"),MIr=l(),L5=a("li"),ACe=a("strong"),EIr=o("convbert"),CIr=o(" \u2014 "),EZ=a("a"),wIr=o("TFConvBertForQuestionAnswering"),AIr=o(" (ConvBERT model)"),LIr=l(),y5=a("li"),LCe=a("strong"),yIr=o("deberta"),xIr=o(" \u2014 "),CZ=a("a"),$Ir=o("TFDebertaForQuestionAnswering"),kIr=o(" (DeBERTa model)"),SIr=l(),x5=a("li"),yCe=a("strong"),RIr=o("deberta-v2"),PIr=o(" \u2014 "),wZ=a("a"),BIr=o("TFDebertaV2ForQuestionAnswering"),IIr=o(" (DeBERTa-v2 model)"),NIr=l(),$5=a("li"),xCe=a("strong"),qIr=o("distilbert"),jIr=o(" \u2014 "),AZ=a("a"),DIr=o("TFDistilBertForQuestionAnswering"),GIr=o(" (DistilBERT model)"),OIr=l(),k5=a("li"),$Ce=a("strong"),VIr=o("electra"),XIr=o(" \u2014 "),LZ=a("a"),zIr=o("TFElectraForQuestionAnswering"),QIr=o(" (ELECTRA model)"),WIr=l(),S5=a("li"),kCe=a("strong"),HIr=o("flaubert"),UIr=o(" \u2014 "),yZ=a("a"),JIr=o("TFFlaubertForQuestionAnsweringSimple"),YIr=o(" (FlauBERT model)"),KIr=l(),R5=a("li"),SCe=a("strong"),ZIr=o("funnel"),eNr=o(" \u2014 "),xZ=a("a"),oNr=o("TFFunnelForQuestionAnswering"),rNr=o(" (Funnel Transformer model)"),tNr=l(),P5=a("li"),RCe=a("strong"),aNr=o("gptj"),nNr=o(" \u2014 "),$Z=a("a"),sNr=o("TFGPTJForQuestionAnswering"),lNr=o(" (GPT-J model)"),iNr=l(),B5=a("li"),PCe=a("strong"),dNr=o("longformer"),cNr=o(" \u2014 "),kZ=a("a"),fNr=o("TFLongformerForQuestionAnswering"),mNr=o(" (Longformer model)"),gNr=l(),I5=a("li"),BCe=a("strong"),hNr=o("mobilebert"),pNr=o(" \u2014 "),SZ=a("a"),_Nr=o("TFMobileBertForQuestionAnswering"),uNr=o(" (MobileBERT model)"),bNr=l(),N5=a("li"),ICe=a("strong"),vNr=o("mpnet"),FNr=o(" \u2014 "),RZ=a("a"),TNr=o("TFMPNetForQuestionAnswering"),MNr=o(" (MPNet model)"),ENr=l(),q5=a("li"),NCe=a("strong"),CNr=o("rembert"),wNr=o(" \u2014 "),PZ=a("a"),ANr=o("TFRemBertForQuestionAnswering"),LNr=o(" (RemBERT model)"),yNr=l(),j5=a("li"),qCe=a("strong"),xNr=o("roberta"),$Nr=o(" \u2014 "),BZ=a("a"),kNr=o("TFRobertaForQuestionAnswering"),SNr=o(" (RoBERTa model)"),RNr=l(),D5=a("li"),jCe=a("strong"),PNr=o("roformer"),BNr=o(" \u2014 "),IZ=a("a"),INr=o("TFRoFormerForQuestionAnswering"),NNr=o(" (RoFormer model)"),qNr=l(),G5=a("li"),DCe=a("strong"),jNr=o("xlm"),DNr=o(" \u2014 "),NZ=a("a"),GNr=o("TFXLMForQuestionAnsweringSimple"),ONr=o(" (XLM model)"),VNr=l(),O5=a("li"),GCe=a("strong"),XNr=o("xlm-roberta"),zNr=o(" \u2014 "),qZ=a("a"),QNr=o("TFXLMRobertaForQuestionAnswering"),WNr=o(" (XLM-RoBERTa model)"),HNr=l(),V5=a("li"),OCe=a("strong"),UNr=o("xlnet"),JNr=o(" \u2014 "),jZ=a("a"),YNr=o("TFXLNetForQuestionAnsweringSimple"),KNr=o(" (XLNet model)"),ZNr=l(),F(X5.$$.fragment),Sze=l(),Oc=a("h2"),z5=a("a"),VCe=a("span"),F(Kx.$$.fragment),eqr=l(),XCe=a("span"),oqr=o("TFAutoModelForVision2Seq"),Rze=l(),gr=a("div"),F(Zx.$$.fragment),rqr=l(),Vc=a("p"),tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=a("a"),aqr=o("from_pretrained()"),nqr=o(" class method or the "),GZ=a("a"),sqr=o("from_config()"),lqr=o(` class
method.`),iqr=l(),e$=a("p"),dqr=o("This class cannot be instantiated directly using "),zCe=a("code"),cqr=o("__init__()"),fqr=o(" (throws an error)."),mqr=l(),zt=a("div"),F(o$.$$.fragment),gqr=l(),QCe=a("p"),hqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pqr=l(),Xc=a("p"),_qr=o(`Note:
Loading a model from its configuration file does `),WCe=a("strong"),uqr=o("not"),bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),vqr=o("from_pretrained()"),Fqr=o(" to load the model weights."),Tqr=l(),F(Q5.$$.fragment),Mqr=l(),Gr=a("div"),F(r$.$$.fragment),Eqr=l(),HCe=a("p"),Cqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wqr=l(),vn=a("p"),Aqr=o("The model class to instantiate is selected based on the "),UCe=a("code"),Lqr=o("model_type"),yqr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(":"),Rqr=l(),KCe=a("ul"),W5=a("li"),ZCe=a("strong"),Pqr=o("vision-encoder-decoder"),Bqr=o(" \u2014 "),VZ=a("a"),Iqr=o("TFVisionEncoderDecoderModel"),Nqr=o(" (Vision Encoder decoder model)"),qqr=l(),F(H5.$$.fragment),Pze=l(),zc=a("h2"),U5=a("a"),e5e=a("span"),F(t$.$$.fragment),jqr=l(),o5e=a("span"),Dqr=o("TFAutoModelForSpeechSeq2Seq"),Bze=l(),hr=a("div"),F(a$.$$.fragment),Gqr=l(),Qc=a("p"),Oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XZ=a("a"),Vqr=o("from_pretrained()"),Xqr=o(" class method or the "),zZ=a("a"),zqr=o("from_config()"),Qqr=o(` class
method.`),Wqr=l(),n$=a("p"),Hqr=o("This class cannot be instantiated directly using "),r5e=a("code"),Uqr=o("__init__()"),Jqr=o(" (throws an error)."),Yqr=l(),Qt=a("div"),F(s$.$$.fragment),Kqr=l(),t5e=a("p"),Zqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ejr=l(),Wc=a("p"),ojr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),rjr=o("not"),tjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),ajr=o("from_pretrained()"),njr=o(" to load the model weights."),sjr=l(),F(J5.$$.fragment),ljr=l(),Or=a("div"),F(l$.$$.fragment),ijr=l(),n5e=a("p"),djr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cjr=l(),Fn=a("p"),fjr=o("The model class to instantiate is selected based on the "),s5e=a("code"),mjr=o("model_type"),gjr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),hjr=o("pretrained_model_name_or_path"),pjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),_jr=o("pretrained_model_name_or_path"),ujr=o(":"),bjr=l(),d5e=a("ul"),Y5=a("li"),c5e=a("strong"),vjr=o("speech_to_text"),Fjr=o(" \u2014 "),WZ=a("a"),Tjr=o("TFSpeech2TextForConditionalGeneration"),Mjr=o(" (Speech2Text model)"),Ejr=l(),F(K5.$$.fragment),Ize=l(),Hc=a("h2"),Z5=a("a"),f5e=a("span"),F(i$.$$.fragment),Cjr=l(),m5e=a("span"),wjr=o("FlaxAutoModel"),Nze=l(),pr=a("div"),F(d$.$$.fragment),Ajr=l(),Uc=a("p"),Ljr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HZ=a("a"),yjr=o("from_pretrained()"),xjr=o(" class method or the "),UZ=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),c$=a("p"),Rjr=o("This class cannot be instantiated directly using "),g5e=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Wt=a("div"),F(f$.$$.fragment),Njr=l(),h5e=a("p"),qjr=o("Instantiates one of the base model classes of the library from a configuration."),jjr=l(),Jc=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(e0.$$.fragment),Qjr=l(),Vr=a("div"),F(m$.$$.fragment),Wjr=l(),_5e=a("p"),Hjr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ujr=l(),Tn=a("p"),Jjr=o("The model class to instantiate is selected based on the "),u5e=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),oe=a("ul"),o0=a("li"),F5e=a("strong"),aDr=o("albert"),nDr=o(" \u2014 "),YZ=a("a"),sDr=o("FlaxAlbertModel"),lDr=o(" (ALBERT model)"),iDr=l(),r0=a("li"),T5e=a("strong"),dDr=o("bart"),cDr=o(" \u2014 "),KZ=a("a"),fDr=o("FlaxBartModel"),mDr=o(" (BART model)"),gDr=l(),t0=a("li"),M5e=a("strong"),hDr=o("beit"),pDr=o(" \u2014 "),ZZ=a("a"),_Dr=o("FlaxBeitModel"),uDr=o(" (BEiT model)"),bDr=l(),a0=a("li"),E5e=a("strong"),vDr=o("bert"),FDr=o(" \u2014 "),eee=a("a"),TDr=o("FlaxBertModel"),MDr=o(" (BERT model)"),EDr=l(),n0=a("li"),C5e=a("strong"),CDr=o("big_bird"),wDr=o(" \u2014 "),oee=a("a"),ADr=o("FlaxBigBirdModel"),LDr=o(" (BigBird model)"),yDr=l(),s0=a("li"),w5e=a("strong"),xDr=o("blenderbot"),$Dr=o(" \u2014 "),ree=a("a"),kDr=o("FlaxBlenderbotModel"),SDr=o(" (Blenderbot model)"),RDr=l(),l0=a("li"),A5e=a("strong"),PDr=o("blenderbot-small"),BDr=o(" \u2014 "),tee=a("a"),IDr=o("FlaxBlenderbotSmallModel"),NDr=o(" (BlenderbotSmall model)"),qDr=l(),i0=a("li"),L5e=a("strong"),jDr=o("clip"),DDr=o(" \u2014 "),aee=a("a"),GDr=o("FlaxCLIPModel"),ODr=o(" (CLIP model)"),VDr=l(),d0=a("li"),y5e=a("strong"),XDr=o("distilbert"),zDr=o(" \u2014 "),nee=a("a"),QDr=o("FlaxDistilBertModel"),WDr=o(" (DistilBERT model)"),HDr=l(),c0=a("li"),x5e=a("strong"),UDr=o("electra"),JDr=o(" \u2014 "),see=a("a"),YDr=o("FlaxElectraModel"),KDr=o(" (ELECTRA model)"),ZDr=l(),f0=a("li"),$5e=a("strong"),eGr=o("gpt2"),oGr=o(" \u2014 "),lee=a("a"),rGr=o("FlaxGPT2Model"),tGr=o(" (OpenAI GPT-2 model)"),aGr=l(),m0=a("li"),k5e=a("strong"),nGr=o("gpt_neo"),sGr=o(" \u2014 "),iee=a("a"),lGr=o("FlaxGPTNeoModel"),iGr=o(" (GPT Neo model)"),dGr=l(),g0=a("li"),S5e=a("strong"),cGr=o("gptj"),fGr=o(" \u2014 "),dee=a("a"),mGr=o("FlaxGPTJModel"),gGr=o(" (GPT-J model)"),hGr=l(),h0=a("li"),R5e=a("strong"),pGr=o("longt5"),_Gr=o(" \u2014 "),cee=a("a"),uGr=o("FlaxLongT5Model"),bGr=o(" (LongT5 model)"),vGr=l(),p0=a("li"),P5e=a("strong"),FGr=o("marian"),TGr=o(" \u2014 "),fee=a("a"),MGr=o("FlaxMarianModel"),EGr=o(" (Marian model)"),CGr=l(),_0=a("li"),B5e=a("strong"),wGr=o("mbart"),AGr=o(" \u2014 "),mee=a("a"),LGr=o("FlaxMBartModel"),yGr=o(" (mBART model)"),xGr=l(),u0=a("li"),I5e=a("strong"),$Gr=o("mt5"),kGr=o(" \u2014 "),gee=a("a"),SGr=o("FlaxMT5Model"),RGr=o(" (MT5 model)"),PGr=l(),b0=a("li"),N5e=a("strong"),BGr=o("opt"),IGr=o(" \u2014 "),hee=a("a"),NGr=o("FlaxOPTModel"),qGr=o(" (OPT model)"),jGr=l(),v0=a("li"),q5e=a("strong"),DGr=o("pegasus"),GGr=o(" \u2014 "),pee=a("a"),OGr=o("FlaxPegasusModel"),VGr=o(" (Pegasus model)"),XGr=l(),F0=a("li"),j5e=a("strong"),zGr=o("roberta"),QGr=o(" \u2014 "),_ee=a("a"),WGr=o("FlaxRobertaModel"),HGr=o(" (RoBERTa model)"),UGr=l(),T0=a("li"),D5e=a("strong"),JGr=o("roformer"),YGr=o(" \u2014 "),uee=a("a"),KGr=o("FlaxRoFormerModel"),ZGr=o(" (RoFormer model)"),eOr=l(),M0=a("li"),G5e=a("strong"),oOr=o("t5"),rOr=o(" \u2014 "),bee=a("a"),tOr=o("FlaxT5Model"),aOr=o(" (T5 model)"),nOr=l(),E0=a("li"),O5e=a("strong"),sOr=o("vision-text-dual-encoder"),lOr=o(" \u2014 "),vee=a("a"),iOr=o("FlaxVisionTextDualEncoderModel"),dOr=o(" (VisionTextDualEncoder model)"),cOr=l(),C0=a("li"),V5e=a("strong"),fOr=o("vit"),mOr=o(" \u2014 "),Fee=a("a"),gOr=o("FlaxViTModel"),hOr=o(" (ViT model)"),pOr=l(),w0=a("li"),X5e=a("strong"),_Or=o("wav2vec2"),uOr=o(" \u2014 "),Tee=a("a"),bOr=o("FlaxWav2Vec2Model"),vOr=o(" (Wav2Vec2 model)"),FOr=l(),A0=a("li"),z5e=a("strong"),TOr=o("xglm"),MOr=o(" \u2014 "),Mee=a("a"),EOr=o("FlaxXGLMModel"),COr=o(" (XGLM model)"),wOr=l(),L0=a("li"),Q5e=a("strong"),AOr=o("xlm-roberta"),LOr=o(" \u2014 "),Eee=a("a"),yOr=o("FlaxXLMRobertaModel"),xOr=o(" (XLM-RoBERTa model)"),$Or=l(),F(y0.$$.fragment),qze=l(),Yc=a("h2"),x0=a("a"),W5e=a("span"),F(g$.$$.fragment),kOr=l(),H5e=a("span"),SOr=o("FlaxAutoModelForCausalLM"),jze=l(),_r=a("div"),F(h$.$$.fragment),ROr=l(),Kc=a("p"),POr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cee=a("a"),BOr=o("from_pretrained()"),IOr=o(" class method or the "),wee=a("a"),NOr=o("from_config()"),qOr=o(` class
method.`),jOr=l(),p$=a("p"),DOr=o("This class cannot be instantiated directly using "),U5e=a("code"),GOr=o("__init__()"),OOr=o(" (throws an error)."),VOr=l(),Ht=a("div"),F(_$.$$.fragment),XOr=l(),J5e=a("p"),zOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QOr=l(),Zc=a("p"),WOr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),HOr=o("not"),UOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=a("a"),JOr=o("from_pretrained()"),YOr=o(" to load the model weights."),KOr=l(),F($0.$$.fragment),ZOr=l(),Xr=a("div"),F(u$.$$.fragment),eVr=l(),K5e=a("p"),oVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rVr=l(),Mn=a("p"),tVr=o("The model class to instantiate is selected based on the "),Z5e=a("code"),aVr=o("model_type"),nVr=o(` property of the config object (either
passed as an argument or loaded from `),e0e=a("code"),sVr=o("pretrained_model_name_or_path"),lVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=a("code"),iVr=o("pretrained_model_name_or_path"),dVr=o(":"),cVr=l(),xe=a("ul"),k0=a("li"),r0e=a("strong"),fVr=o("bart"),mVr=o(" \u2014 "),Lee=a("a"),gVr=o("FlaxBartForCausalLM"),hVr=o(" (BART model)"),pVr=l(),S0=a("li"),t0e=a("strong"),_Vr=o("bert"),uVr=o(" \u2014 "),yee=a("a"),bVr=o("FlaxBertForCausalLM"),vVr=o(" (BERT model)"),FVr=l(),R0=a("li"),a0e=a("strong"),TVr=o("big_bird"),MVr=o(" \u2014 "),xee=a("a"),EVr=o("FlaxBigBirdForCausalLM"),CVr=o(" (BigBird model)"),wVr=l(),P0=a("li"),n0e=a("strong"),AVr=o("electra"),LVr=o(" \u2014 "),$ee=a("a"),yVr=o("FlaxElectraForCausalLM"),xVr=o(" (ELECTRA model)"),$Vr=l(),B0=a("li"),s0e=a("strong"),kVr=o("gpt2"),SVr=o(" \u2014 "),kee=a("a"),RVr=o("FlaxGPT2LMHeadModel"),PVr=o(" (OpenAI GPT-2 model)"),BVr=l(),I0=a("li"),l0e=a("strong"),IVr=o("gpt_neo"),NVr=o(" \u2014 "),See=a("a"),qVr=o("FlaxGPTNeoForCausalLM"),jVr=o(" (GPT Neo model)"),DVr=l(),N0=a("li"),i0e=a("strong"),GVr=o("gptj"),OVr=o(" \u2014 "),Ree=a("a"),VVr=o("FlaxGPTJForCausalLM"),XVr=o(" (GPT-J model)"),zVr=l(),q0=a("li"),d0e=a("strong"),QVr=o("opt"),WVr=o(" \u2014 "),Pee=a("a"),HVr=o("FlaxOPTForCausalLM"),UVr=o(" (OPT model)"),JVr=l(),j0=a("li"),c0e=a("strong"),YVr=o("roberta"),KVr=o(" \u2014 "),Bee=a("a"),ZVr=o("FlaxRobertaForCausalLM"),eXr=o(" (RoBERTa model)"),oXr=l(),D0=a("li"),f0e=a("strong"),rXr=o("xglm"),tXr=o(" \u2014 "),Iee=a("a"),aXr=o("FlaxXGLMForCausalLM"),nXr=o(" (XGLM model)"),sXr=l(),F(G0.$$.fragment),Dze=l(),ef=a("h2"),O0=a("a"),m0e=a("span"),F(b$.$$.fragment),lXr=l(),g0e=a("span"),iXr=o("FlaxAutoModelForPreTraining"),Gze=l(),ur=a("div"),F(v$.$$.fragment),dXr=l(),of=a("p"),cXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nee=a("a"),fXr=o("from_pretrained()"),mXr=o(" class method or the "),qee=a("a"),gXr=o("from_config()"),hXr=o(` class
method.`),pXr=l(),F$=a("p"),_Xr=o("This class cannot be instantiated directly using "),h0e=a("code"),uXr=o("__init__()"),bXr=o(" (throws an error)."),vXr=l(),Ut=a("div"),F(T$.$$.fragment),FXr=l(),p0e=a("p"),TXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MXr=l(),rf=a("p"),EXr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),CXr=o("not"),wXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),AXr=o("from_pretrained()"),LXr=o(" to load the model weights."),yXr=l(),F(V0.$$.fragment),xXr=l(),zr=a("div"),F(M$.$$.fragment),$Xr=l(),u0e=a("p"),kXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SXr=l(),En=a("p"),RXr=o("The model class to instantiate is selected based on the "),b0e=a("code"),PXr=o("model_type"),BXr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),IXr=o("pretrained_model_name_or_path"),NXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),qXr=o("pretrained_model_name_or_path"),jXr=o(":"),DXr=l(),Ee=a("ul"),X0=a("li"),T0e=a("strong"),GXr=o("albert"),OXr=o(" \u2014 "),Dee=a("a"),VXr=o("FlaxAlbertForPreTraining"),XXr=o(" (ALBERT model)"),zXr=l(),z0=a("li"),M0e=a("strong"),QXr=o("bart"),WXr=o(" \u2014 "),Gee=a("a"),HXr=o("FlaxBartForConditionalGeneration"),UXr=o(" (BART model)"),JXr=l(),Q0=a("li"),E0e=a("strong"),YXr=o("bert"),KXr=o(" \u2014 "),Oee=a("a"),ZXr=o("FlaxBertForPreTraining"),ezr=o(" (BERT model)"),ozr=l(),W0=a("li"),C0e=a("strong"),rzr=o("big_bird"),tzr=o(" \u2014 "),Vee=a("a"),azr=o("FlaxBigBirdForPreTraining"),nzr=o(" (BigBird model)"),szr=l(),H0=a("li"),w0e=a("strong"),lzr=o("electra"),izr=o(" \u2014 "),Xee=a("a"),dzr=o("FlaxElectraForPreTraining"),czr=o(" (ELECTRA model)"),fzr=l(),U0=a("li"),A0e=a("strong"),mzr=o("longt5"),gzr=o(" \u2014 "),zee=a("a"),hzr=o("FlaxLongT5ForConditionalGeneration"),pzr=o(" (LongT5 model)"),_zr=l(),J0=a("li"),L0e=a("strong"),uzr=o("mbart"),bzr=o(" \u2014 "),Qee=a("a"),vzr=o("FlaxMBartForConditionalGeneration"),Fzr=o(" (mBART model)"),Tzr=l(),Y0=a("li"),y0e=a("strong"),Mzr=o("mt5"),Ezr=o(" \u2014 "),Wee=a("a"),Czr=o("FlaxMT5ForConditionalGeneration"),wzr=o(" (MT5 model)"),Azr=l(),K0=a("li"),x0e=a("strong"),Lzr=o("roberta"),yzr=o(" \u2014 "),Hee=a("a"),xzr=o("FlaxRobertaForMaskedLM"),$zr=o(" (RoBERTa model)"),kzr=l(),Z0=a("li"),$0e=a("strong"),Szr=o("roformer"),Rzr=o(" \u2014 "),Uee=a("a"),Pzr=o("FlaxRoFormerForMaskedLM"),Bzr=o(" (RoFormer model)"),Izr=l(),ew=a("li"),k0e=a("strong"),Nzr=o("t5"),qzr=o(" \u2014 "),Jee=a("a"),jzr=o("FlaxT5ForConditionalGeneration"),Dzr=o(" (T5 model)"),Gzr=l(),ow=a("li"),S0e=a("strong"),Ozr=o("wav2vec2"),Vzr=o(" \u2014 "),Yee=a("a"),Xzr=o("FlaxWav2Vec2ForPreTraining"),zzr=o(" (Wav2Vec2 model)"),Qzr=l(),rw=a("li"),R0e=a("strong"),Wzr=o("xlm-roberta"),Hzr=o(" \u2014 "),Kee=a("a"),Uzr=o("FlaxXLMRobertaForMaskedLM"),Jzr=o(" (XLM-RoBERTa model)"),Yzr=l(),F(tw.$$.fragment),Oze=l(),tf=a("h2"),aw=a("a"),P0e=a("span"),F(E$.$$.fragment),Kzr=l(),B0e=a("span"),Zzr=o("FlaxAutoModelForMaskedLM"),Vze=l(),br=a("div"),F(C$.$$.fragment),eQr=l(),af=a("p"),oQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Zee=a("a"),rQr=o("from_pretrained()"),tQr=o(" class method or the "),eoe=a("a"),aQr=o("from_config()"),nQr=o(` class
method.`),sQr=l(),w$=a("p"),lQr=o("This class cannot be instantiated directly using "),I0e=a("code"),iQr=o("__init__()"),dQr=o(" (throws an error)."),cQr=l(),Jt=a("div"),F(A$.$$.fragment),fQr=l(),N0e=a("p"),mQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gQr=l(),nf=a("p"),hQr=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),pQr=o("not"),_Qr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=a("a"),uQr=o("from_pretrained()"),bQr=o(" to load the model weights."),vQr=l(),F(nw.$$.fragment),FQr=l(),Qr=a("div"),F(L$.$$.fragment),TQr=l(),j0e=a("p"),MQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EQr=l(),Cn=a("p"),CQr=o("The model class to instantiate is selected based on the "),D0e=a("code"),wQr=o("model_type"),AQr=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),LQr=o("pretrained_model_name_or_path"),yQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),xQr=o("pretrained_model_name_or_path"),$Qr=o(":"),kQr=l(),$e=a("ul"),sw=a("li"),V0e=a("strong"),SQr=o("albert"),RQr=o(" \u2014 "),roe=a("a"),PQr=o("FlaxAlbertForMaskedLM"),BQr=o(" (ALBERT model)"),IQr=l(),lw=a("li"),X0e=a("strong"),NQr=o("bart"),qQr=o(" \u2014 "),toe=a("a"),jQr=o("FlaxBartForConditionalGeneration"),DQr=o(" (BART model)"),GQr=l(),iw=a("li"),z0e=a("strong"),OQr=o("bert"),VQr=o(" \u2014 "),aoe=a("a"),XQr=o("FlaxBertForMaskedLM"),zQr=o(" (BERT model)"),QQr=l(),dw=a("li"),Q0e=a("strong"),WQr=o("big_bird"),HQr=o(" \u2014 "),noe=a("a"),UQr=o("FlaxBigBirdForMaskedLM"),JQr=o(" (BigBird model)"),YQr=l(),cw=a("li"),W0e=a("strong"),KQr=o("distilbert"),ZQr=o(" \u2014 "),soe=a("a"),eWr=o("FlaxDistilBertForMaskedLM"),oWr=o(" (DistilBERT model)"),rWr=l(),fw=a("li"),H0e=a("strong"),tWr=o("electra"),aWr=o(" \u2014 "),loe=a("a"),nWr=o("FlaxElectraForMaskedLM"),sWr=o(" (ELECTRA model)"),lWr=l(),mw=a("li"),U0e=a("strong"),iWr=o("mbart"),dWr=o(" \u2014 "),ioe=a("a"),cWr=o("FlaxMBartForConditionalGeneration"),fWr=o(" (mBART model)"),mWr=l(),gw=a("li"),J0e=a("strong"),gWr=o("roberta"),hWr=o(" \u2014 "),doe=a("a"),pWr=o("FlaxRobertaForMaskedLM"),_Wr=o(" (RoBERTa model)"),uWr=l(),hw=a("li"),Y0e=a("strong"),bWr=o("roformer"),vWr=o(" \u2014 "),coe=a("a"),FWr=o("FlaxRoFormerForMaskedLM"),TWr=o(" (RoFormer model)"),MWr=l(),pw=a("li"),K0e=a("strong"),EWr=o("xlm-roberta"),CWr=o(" \u2014 "),foe=a("a"),wWr=o("FlaxXLMRobertaForMaskedLM"),AWr=o(" (XLM-RoBERTa model)"),LWr=l(),F(_w.$$.fragment),Xze=l(),sf=a("h2"),uw=a("a"),Z0e=a("span"),F(y$.$$.fragment),yWr=l(),ewe=a("span"),xWr=o("FlaxAutoModelForSeq2SeqLM"),zze=l(),vr=a("div"),F(x$.$$.fragment),$Wr=l(),lf=a("p"),kWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),moe=a("a"),SWr=o("from_pretrained()"),RWr=o(" class method or the "),goe=a("a"),PWr=o("from_config()"),BWr=o(` class
method.`),IWr=l(),$$=a("p"),NWr=o("This class cannot be instantiated directly using "),owe=a("code"),qWr=o("__init__()"),jWr=o(" (throws an error)."),DWr=l(),Yt=a("div"),F(k$.$$.fragment),GWr=l(),rwe=a("p"),OWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VWr=l(),df=a("p"),XWr=o(`Note:
Loading a model from its configuration file does `),twe=a("strong"),zWr=o("not"),QWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),WWr=o("from_pretrained()"),HWr=o(" to load the model weights."),UWr=l(),F(bw.$$.fragment),JWr=l(),Wr=a("div"),F(S$.$$.fragment),YWr=l(),awe=a("p"),KWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZWr=l(),wn=a("p"),eHr=o("The model class to instantiate is selected based on the "),nwe=a("code"),oHr=o("model_type"),rHr=o(` property of the config object (either
passed as an argument or loaded from `),swe=a("code"),tHr=o("pretrained_model_name_or_path"),aHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=a("code"),nHr=o("pretrained_model_name_or_path"),sHr=o(":"),lHr=l(),ke=a("ul"),vw=a("li"),iwe=a("strong"),iHr=o("bart"),dHr=o(" \u2014 "),poe=a("a"),cHr=o("FlaxBartForConditionalGeneration"),fHr=o(" (BART model)"),mHr=l(),Fw=a("li"),dwe=a("strong"),gHr=o("blenderbot"),hHr=o(" \u2014 "),_oe=a("a"),pHr=o("FlaxBlenderbotForConditionalGeneration"),_Hr=o(" (Blenderbot model)"),uHr=l(),Tw=a("li"),cwe=a("strong"),bHr=o("blenderbot-small"),vHr=o(" \u2014 "),uoe=a("a"),FHr=o("FlaxBlenderbotSmallForConditionalGeneration"),THr=o(" (BlenderbotSmall model)"),MHr=l(),Mw=a("li"),fwe=a("strong"),EHr=o("encoder-decoder"),CHr=o(" \u2014 "),boe=a("a"),wHr=o("FlaxEncoderDecoderModel"),AHr=o(" (Encoder decoder model)"),LHr=l(),Ew=a("li"),mwe=a("strong"),yHr=o("longt5"),xHr=o(" \u2014 "),voe=a("a"),$Hr=o("FlaxLongT5ForConditionalGeneration"),kHr=o(" (LongT5 model)"),SHr=l(),Cw=a("li"),gwe=a("strong"),RHr=o("marian"),PHr=o(" \u2014 "),Foe=a("a"),BHr=o("FlaxMarianMTModel"),IHr=o(" (Marian model)"),NHr=l(),ww=a("li"),hwe=a("strong"),qHr=o("mbart"),jHr=o(" \u2014 "),Toe=a("a"),DHr=o("FlaxMBartForConditionalGeneration"),GHr=o(" (mBART model)"),OHr=l(),Aw=a("li"),pwe=a("strong"),VHr=o("mt5"),XHr=o(" \u2014 "),Moe=a("a"),zHr=o("FlaxMT5ForConditionalGeneration"),QHr=o(" (MT5 model)"),WHr=l(),Lw=a("li"),_we=a("strong"),HHr=o("pegasus"),UHr=o(" \u2014 "),Eoe=a("a"),JHr=o("FlaxPegasusForConditionalGeneration"),YHr=o(" (Pegasus model)"),KHr=l(),yw=a("li"),uwe=a("strong"),ZHr=o("t5"),eUr=o(" \u2014 "),Coe=a("a"),oUr=o("FlaxT5ForConditionalGeneration"),rUr=o(" (T5 model)"),tUr=l(),F(xw.$$.fragment),Qze=l(),cf=a("h2"),$w=a("a"),bwe=a("span"),F(R$.$$.fragment),aUr=l(),vwe=a("span"),nUr=o("FlaxAutoModelForSequenceClassification"),Wze=l(),Fr=a("div"),F(P$.$$.fragment),sUr=l(),ff=a("p"),lUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),woe=a("a"),iUr=o("from_pretrained()"),dUr=o(" class method or the "),Aoe=a("a"),cUr=o("from_config()"),fUr=o(` class
method.`),mUr=l(),B$=a("p"),gUr=o("This class cannot be instantiated directly using "),Fwe=a("code"),hUr=o("__init__()"),pUr=o(" (throws an error)."),_Ur=l(),Kt=a("div"),F(I$.$$.fragment),uUr=l(),Twe=a("p"),bUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vUr=l(),mf=a("p"),FUr=o(`Note:
Loading a model from its configuration file does `),Mwe=a("strong"),TUr=o("not"),MUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),EUr=o("from_pretrained()"),CUr=o(" to load the model weights."),wUr=l(),F(kw.$$.fragment),AUr=l(),Hr=a("div"),F(N$.$$.fragment),LUr=l(),Ewe=a("p"),yUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xUr=l(),An=a("p"),$Ur=o("The model class to instantiate is selected based on the "),Cwe=a("code"),kUr=o("model_type"),SUr=o(` property of the config object (either
passed as an argument or loaded from `),wwe=a("code"),RUr=o("pretrained_model_name_or_path"),PUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=a("code"),BUr=o("pretrained_model_name_or_path"),IUr=o(":"),NUr=l(),Se=a("ul"),Sw=a("li"),Lwe=a("strong"),qUr=o("albert"),jUr=o(" \u2014 "),yoe=a("a"),DUr=o("FlaxAlbertForSequenceClassification"),GUr=o(" (ALBERT model)"),OUr=l(),Rw=a("li"),ywe=a("strong"),VUr=o("bart"),XUr=o(" \u2014 "),xoe=a("a"),zUr=o("FlaxBartForSequenceClassification"),QUr=o(" (BART model)"),WUr=l(),Pw=a("li"),xwe=a("strong"),HUr=o("bert"),UUr=o(" \u2014 "),$oe=a("a"),JUr=o("FlaxBertForSequenceClassification"),YUr=o(" (BERT model)"),KUr=l(),Bw=a("li"),$we=a("strong"),ZUr=o("big_bird"),eJr=o(" \u2014 "),koe=a("a"),oJr=o("FlaxBigBirdForSequenceClassification"),rJr=o(" (BigBird model)"),tJr=l(),Iw=a("li"),kwe=a("strong"),aJr=o("distilbert"),nJr=o(" \u2014 "),Soe=a("a"),sJr=o("FlaxDistilBertForSequenceClassification"),lJr=o(" (DistilBERT model)"),iJr=l(),Nw=a("li"),Swe=a("strong"),dJr=o("electra"),cJr=o(" \u2014 "),Roe=a("a"),fJr=o("FlaxElectraForSequenceClassification"),mJr=o(" (ELECTRA model)"),gJr=l(),qw=a("li"),Rwe=a("strong"),hJr=o("mbart"),pJr=o(" \u2014 "),Poe=a("a"),_Jr=o("FlaxMBartForSequenceClassification"),uJr=o(" (mBART model)"),bJr=l(),jw=a("li"),Pwe=a("strong"),vJr=o("roberta"),FJr=o(" \u2014 "),Boe=a("a"),TJr=o("FlaxRobertaForSequenceClassification"),MJr=o(" (RoBERTa model)"),EJr=l(),Dw=a("li"),Bwe=a("strong"),CJr=o("roformer"),wJr=o(" \u2014 "),Ioe=a("a"),AJr=o("FlaxRoFormerForSequenceClassification"),LJr=o(" (RoFormer model)"),yJr=l(),Gw=a("li"),Iwe=a("strong"),xJr=o("xlm-roberta"),$Jr=o(" \u2014 "),Noe=a("a"),kJr=o("FlaxXLMRobertaForSequenceClassification"),SJr=o(" (XLM-RoBERTa model)"),RJr=l(),F(Ow.$$.fragment),Hze=l(),gf=a("h2"),Vw=a("a"),Nwe=a("span"),F(q$.$$.fragment),PJr=l(),qwe=a("span"),BJr=o("FlaxAutoModelForQuestionAnswering"),Uze=l(),Tr=a("div"),F(j$.$$.fragment),IJr=l(),hf=a("p"),NJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qoe=a("a"),qJr=o("from_pretrained()"),jJr=o(" class method or the "),joe=a("a"),DJr=o("from_config()"),GJr=o(` class
method.`),OJr=l(),D$=a("p"),VJr=o("This class cannot be instantiated directly using "),jwe=a("code"),XJr=o("__init__()"),zJr=o(" (throws an error)."),QJr=l(),Zt=a("div"),F(G$.$$.fragment),WJr=l(),Dwe=a("p"),HJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UJr=l(),pf=a("p"),JJr=o(`Note:
Loading a model from its configuration file does `),Gwe=a("strong"),YJr=o("not"),KJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=a("a"),ZJr=o("from_pretrained()"),eYr=o(" to load the model weights."),oYr=l(),F(Xw.$$.fragment),rYr=l(),Ur=a("div"),F(O$.$$.fragment),tYr=l(),Owe=a("p"),aYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nYr=l(),Ln=a("p"),sYr=o("The model class to instantiate is selected based on the "),Vwe=a("code"),lYr=o("model_type"),iYr=o(` property of the config object (either
passed as an argument or loaded from `),Xwe=a("code"),dYr=o("pretrained_model_name_or_path"),cYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zwe=a("code"),fYr=o("pretrained_model_name_or_path"),mYr=o(":"),gYr=l(),Re=a("ul"),zw=a("li"),Qwe=a("strong"),hYr=o("albert"),pYr=o(" \u2014 "),Goe=a("a"),_Yr=o("FlaxAlbertForQuestionAnswering"),uYr=o(" (ALBERT model)"),bYr=l(),Qw=a("li"),Wwe=a("strong"),vYr=o("bart"),FYr=o(" \u2014 "),Ooe=a("a"),TYr=o("FlaxBartForQuestionAnswering"),MYr=o(" (BART model)"),EYr=l(),Ww=a("li"),Hwe=a("strong"),CYr=o("bert"),wYr=o(" \u2014 "),Voe=a("a"),AYr=o("FlaxBertForQuestionAnswering"),LYr=o(" (BERT model)"),yYr=l(),Hw=a("li"),Uwe=a("strong"),xYr=o("big_bird"),$Yr=o(" \u2014 "),Xoe=a("a"),kYr=o("FlaxBigBirdForQuestionAnswering"),SYr=o(" (BigBird model)"),RYr=l(),Uw=a("li"),Jwe=a("strong"),PYr=o("distilbert"),BYr=o(" \u2014 "),zoe=a("a"),IYr=o("FlaxDistilBertForQuestionAnswering"),NYr=o(" (DistilBERT model)"),qYr=l(),Jw=a("li"),Ywe=a("strong"),jYr=o("electra"),DYr=o(" \u2014 "),Qoe=a("a"),GYr=o("FlaxElectraForQuestionAnswering"),OYr=o(" (ELECTRA model)"),VYr=l(),Yw=a("li"),Kwe=a("strong"),XYr=o("mbart"),zYr=o(" \u2014 "),Woe=a("a"),QYr=o("FlaxMBartForQuestionAnswering"),WYr=o(" (mBART model)"),HYr=l(),Kw=a("li"),Zwe=a("strong"),UYr=o("roberta"),JYr=o(" \u2014 "),Hoe=a("a"),YYr=o("FlaxRobertaForQuestionAnswering"),KYr=o(" (RoBERTa model)"),ZYr=l(),Zw=a("li"),eAe=a("strong"),eKr=o("roformer"),oKr=o(" \u2014 "),Uoe=a("a"),rKr=o("FlaxRoFormerForQuestionAnswering"),tKr=o(" (RoFormer model)"),aKr=l(),eA=a("li"),oAe=a("strong"),nKr=o("xlm-roberta"),sKr=o(" \u2014 "),Joe=a("a"),lKr=o("FlaxXLMRobertaForQuestionAnswering"),iKr=o(" (XLM-RoBERTa model)"),dKr=l(),F(oA.$$.fragment),Jze=l(),_f=a("h2"),rA=a("a"),rAe=a("span"),F(V$.$$.fragment),cKr=l(),tAe=a("span"),fKr=o("FlaxAutoModelForTokenClassification"),Yze=l(),Mr=a("div"),F(X$.$$.fragment),mKr=l(),uf=a("p"),gKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yoe=a("a"),hKr=o("from_pretrained()"),pKr=o(" class method or the "),Koe=a("a"),_Kr=o("from_config()"),uKr=o(` class
method.`),bKr=l(),z$=a("p"),vKr=o("This class cannot be instantiated directly using "),aAe=a("code"),FKr=o("__init__()"),TKr=o(" (throws an error)."),MKr=l(),ea=a("div"),F(Q$.$$.fragment),EKr=l(),nAe=a("p"),CKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wKr=l(),bf=a("p"),AKr=o(`Note:
Loading a model from its configuration file does `),sAe=a("strong"),LKr=o("not"),yKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),xKr=o("from_pretrained()"),$Kr=o(" to load the model weights."),kKr=l(),F(tA.$$.fragment),SKr=l(),Jr=a("div"),F(W$.$$.fragment),RKr=l(),lAe=a("p"),PKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BKr=l(),yn=a("p"),IKr=o("The model class to instantiate is selected based on the "),iAe=a("code"),NKr=o("model_type"),qKr=o(` property of the config object (either
passed as an argument or loaded from `),dAe=a("code"),jKr=o("pretrained_model_name_or_path"),DKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=a("code"),GKr=o("pretrained_model_name_or_path"),OKr=o(":"),VKr=l(),Ve=a("ul"),aA=a("li"),fAe=a("strong"),XKr=o("albert"),zKr=o(" \u2014 "),ere=a("a"),QKr=o("FlaxAlbertForTokenClassification"),WKr=o(" (ALBERT model)"),HKr=l(),nA=a("li"),mAe=a("strong"),UKr=o("bert"),JKr=o(" \u2014 "),ore=a("a"),YKr=o("FlaxBertForTokenClassification"),KKr=o(" (BERT model)"),ZKr=l(),sA=a("li"),gAe=a("strong"),eZr=o("big_bird"),oZr=o(" \u2014 "),rre=a("a"),rZr=o("FlaxBigBirdForTokenClassification"),tZr=o(" (BigBird model)"),aZr=l(),lA=a("li"),hAe=a("strong"),nZr=o("distilbert"),sZr=o(" \u2014 "),tre=a("a"),lZr=o("FlaxDistilBertForTokenClassification"),iZr=o(" (DistilBERT model)"),dZr=l(),iA=a("li"),pAe=a("strong"),cZr=o("electra"),fZr=o(" \u2014 "),are=a("a"),mZr=o("FlaxElectraForTokenClassification"),gZr=o(" (ELECTRA model)"),hZr=l(),dA=a("li"),_Ae=a("strong"),pZr=o("roberta"),_Zr=o(" \u2014 "),nre=a("a"),uZr=o("FlaxRobertaForTokenClassification"),bZr=o(" (RoBERTa model)"),vZr=l(),cA=a("li"),uAe=a("strong"),FZr=o("roformer"),TZr=o(" \u2014 "),sre=a("a"),MZr=o("FlaxRoFormerForTokenClassification"),EZr=o(" (RoFormer model)"),CZr=l(),fA=a("li"),bAe=a("strong"),wZr=o("xlm-roberta"),AZr=o(" \u2014 "),lre=a("a"),LZr=o("FlaxXLMRobertaForTokenClassification"),yZr=o(" (XLM-RoBERTa model)"),xZr=l(),F(mA.$$.fragment),Kze=l(),vf=a("h2"),gA=a("a"),vAe=a("span"),F(H$.$$.fragment),$Zr=l(),FAe=a("span"),kZr=o("FlaxAutoModelForMultipleChoice"),Zze=l(),Er=a("div"),F(U$.$$.fragment),SZr=l(),Ff=a("p"),RZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ire=a("a"),PZr=o("from_pretrained()"),BZr=o(" class method or the "),dre=a("a"),IZr=o("from_config()"),NZr=o(` class
method.`),qZr=l(),J$=a("p"),jZr=o("This class cannot be instantiated directly using "),TAe=a("code"),DZr=o("__init__()"),GZr=o(" (throws an error)."),OZr=l(),oa=a("div"),F(Y$.$$.fragment),VZr=l(),MAe=a("p"),XZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zZr=l(),Tf=a("p"),QZr=o(`Note:
Loading a model from its configuration file does `),EAe=a("strong"),WZr=o("not"),HZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=a("a"),UZr=o("from_pretrained()"),JZr=o(" to load the model weights."),YZr=l(),F(hA.$$.fragment),KZr=l(),Yr=a("div"),F(K$.$$.fragment),ZZr=l(),CAe=a("p"),eet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oet=l(),xn=a("p"),ret=o("The model class to instantiate is selected based on the "),wAe=a("code"),tet=o("model_type"),aet=o(` property of the config object (either
passed as an argument or loaded from `),AAe=a("code"),net=o("pretrained_model_name_or_path"),set=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LAe=a("code"),iet=o("pretrained_model_name_or_path"),det=o(":"),cet=l(),Xe=a("ul"),pA=a("li"),yAe=a("strong"),fet=o("albert"),met=o(" \u2014 "),fre=a("a"),get=o("FlaxAlbertForMultipleChoice"),het=o(" (ALBERT model)"),pet=l(),_A=a("li"),xAe=a("strong"),_et=o("bert"),uet=o(" \u2014 "),mre=a("a"),bet=o("FlaxBertForMultipleChoice"),vet=o(" (BERT model)"),Fet=l(),uA=a("li"),$Ae=a("strong"),Tet=o("big_bird"),Met=o(" \u2014 "),gre=a("a"),Eet=o("FlaxBigBirdForMultipleChoice"),Cet=o(" (BigBird model)"),wet=l(),bA=a("li"),kAe=a("strong"),Aet=o("distilbert"),Let=o(" \u2014 "),hre=a("a"),yet=o("FlaxDistilBertForMultipleChoice"),xet=o(" (DistilBERT model)"),$et=l(),vA=a("li"),SAe=a("strong"),ket=o("electra"),Set=o(" \u2014 "),pre=a("a"),Ret=o("FlaxElectraForMultipleChoice"),Pet=o(" (ELECTRA model)"),Bet=l(),FA=a("li"),RAe=a("strong"),Iet=o("roberta"),Net=o(" \u2014 "),_re=a("a"),qet=o("FlaxRobertaForMultipleChoice"),jet=o(" (RoBERTa model)"),Det=l(),TA=a("li"),PAe=a("strong"),Get=o("roformer"),Oet=o(" \u2014 "),ure=a("a"),Vet=o("FlaxRoFormerForMultipleChoice"),Xet=o(" (RoFormer model)"),zet=l(),MA=a("li"),BAe=a("strong"),Qet=o("xlm-roberta"),Wet=o(" \u2014 "),bre=a("a"),Het=o("FlaxXLMRobertaForMultipleChoice"),Uet=o(" (XLM-RoBERTa model)"),Jet=l(),F(EA.$$.fragment),eQe=l(),Mf=a("h2"),CA=a("a"),IAe=a("span"),F(Z$.$$.fragment),Yet=l(),NAe=a("span"),Ket=o("FlaxAutoModelForNextSentencePrediction"),oQe=l(),Cr=a("div"),F(ek.$$.fragment),Zet=l(),Ef=a("p"),eot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vre=a("a"),oot=o("from_pretrained()"),rot=o(" class method or the "),Fre=a("a"),tot=o("from_config()"),aot=o(` class
method.`),not=l(),ok=a("p"),sot=o("This class cannot be instantiated directly using "),qAe=a("code"),lot=o("__init__()"),iot=o(" (throws an error)."),dot=l(),ra=a("div"),F(rk.$$.fragment),cot=l(),jAe=a("p"),fot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mot=l(),Cf=a("p"),got=o(`Note:
Loading a model from its configuration file does `),DAe=a("strong"),hot=o("not"),pot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("a"),_ot=o("from_pretrained()"),uot=o(" to load the model weights."),bot=l(),F(wA.$$.fragment),vot=l(),Kr=a("div"),F(tk.$$.fragment),Fot=l(),GAe=a("p"),Tot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mot=l(),$n=a("p"),Eot=o("The model class to instantiate is selected based on the "),OAe=a("code"),Cot=o("model_type"),wot=o(` property of the config object (either
passed as an argument or loaded from `),VAe=a("code"),Aot=o("pretrained_model_name_or_path"),Lot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XAe=a("code"),yot=o("pretrained_model_name_or_path"),xot=o(":"),$ot=l(),zAe=a("ul"),AA=a("li"),QAe=a("strong"),kot=o("bert"),Sot=o(" \u2014 "),Mre=a("a"),Rot=o("FlaxBertForNextSentencePrediction"),Pot=o(" (BERT model)"),Bot=l(),F(LA.$$.fragment),rQe=l(),wf=a("h2"),yA=a("a"),WAe=a("span"),F(ak.$$.fragment),Iot=l(),HAe=a("span"),Not=o("FlaxAutoModelForImageClassification"),tQe=l(),wr=a("div"),F(nk.$$.fragment),qot=l(),Af=a("p"),jot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ere=a("a"),Dot=o("from_pretrained()"),Got=o(" class method or the "),Cre=a("a"),Oot=o("from_config()"),Vot=o(` class
method.`),Xot=l(),sk=a("p"),zot=o("This class cannot be instantiated directly using "),UAe=a("code"),Qot=o("__init__()"),Wot=o(" (throws an error)."),Hot=l(),ta=a("div"),F(lk.$$.fragment),Uot=l(),JAe=a("p"),Jot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yot=l(),Lf=a("p"),Kot=o(`Note:
Loading a model from its configuration file does `),YAe=a("strong"),Zot=o("not"),ert=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=a("a"),ort=o("from_pretrained()"),rrt=o(" to load the model weights."),trt=l(),F(xA.$$.fragment),art=l(),Zr=a("div"),F(ik.$$.fragment),nrt=l(),KAe=a("p"),srt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lrt=l(),kn=a("p"),irt=o("The model class to instantiate is selected based on the "),ZAe=a("code"),drt=o("model_type"),crt=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),frt=o("pretrained_model_name_or_path"),mrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),grt=o("pretrained_model_name_or_path"),hrt=o(":"),prt=l(),dk=a("ul"),$A=a("li"),r6e=a("strong"),_rt=o("beit"),urt=o(" \u2014 "),Are=a("a"),brt=o("FlaxBeitForImageClassification"),vrt=o(" (BEiT model)"),Frt=l(),kA=a("li"),t6e=a("strong"),Trt=o("vit"),Mrt=o(" \u2014 "),Lre=a("a"),Ert=o("FlaxViTForImageClassification"),Crt=o(" (ViT model)"),wrt=l(),F(SA.$$.fragment),aQe=l(),yf=a("h2"),RA=a("a"),a6e=a("span"),F(ck.$$.fragment),Art=l(),n6e=a("span"),Lrt=o("FlaxAutoModelForVision2Seq"),nQe=l(),Ar=a("div"),F(fk.$$.fragment),yrt=l(),xf=a("p"),xrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yre=a("a"),$rt=o("from_pretrained()"),krt=o(" class method or the "),xre=a("a"),Srt=o("from_config()"),Rrt=o(` class
method.`),Prt=l(),mk=a("p"),Brt=o("This class cannot be instantiated directly using "),s6e=a("code"),Irt=o("__init__()"),Nrt=o(" (throws an error)."),qrt=l(),aa=a("div"),F(gk.$$.fragment),jrt=l(),l6e=a("p"),Drt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Grt=l(),$f=a("p"),Ort=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),Vrt=o("not"),Xrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=a("a"),zrt=o("from_pretrained()"),Qrt=o(" to load the model weights."),Wrt=l(),F(PA.$$.fragment),Hrt=l(),et=a("div"),F(hk.$$.fragment),Urt=l(),d6e=a("p"),Jrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yrt=l(),Sn=a("p"),Krt=o("The model class to instantiate is selected based on the "),c6e=a("code"),Zrt=o("model_type"),ett=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),ott=o("pretrained_model_name_or_path"),rtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),ttt=o("pretrained_model_name_or_path"),att=o(":"),ntt=l(),g6e=a("ul"),BA=a("li"),h6e=a("strong"),stt=o("vision-encoder-decoder"),ltt=o(" \u2014 "),kre=a("a"),itt=o("FlaxVisionEncoderDecoderModel"),dtt=o(" (Vision Encoder decoder model)"),ctt=l(),F(IA.$$.fragment),this.h()},l(f){const u=XQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var pk=s(p);m=n(pk,"A",{id:!0,class:!0,href:!0});var p6e=s(m);_=n(p6e,"SPAN",{});var _6e=s(_);T(d.$$.fragment,_6e),_6e.forEach(t),p6e.forEach(t),h=i(pk),Co=n(pk,"SPAN",{});var u6e=s(Co);Li=r(u6e,"Auto Classes"),u6e.forEach(t),pk.forEach(t),Pf=i(f),lt=n(f,"P",{});var _k=s(lt);yi=r(_k,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(_k,"CODE",{});var b6e=s(xi);oL=r(b6e,"from_pretrained()"),b6e.forEach(t),Bf=r(_k,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_k.forEach(t),Oe=i(f),We=n(f,"P",{});var Rn=s(We);$i=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var v6e=s(Pn);rL=r(v6e,"AutoConfig"),v6e.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var F6e=s(In);tL=r(F6e,"AutoModel"),F6e.forEach(t),ki=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var T6e=s(Nn);aL=r(T6e,"AutoTokenizer"),T6e.forEach(t),Si=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),If=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var uk=s(Ae);IS=r(uk,"will create a model that is an instance of "),Ri=n(uk,"A",{href:!0});var M6e=s(Ri);NS=r(M6e,"BertModel"),M6e.forEach(t),qS=r(uk,"."),uk.forEach(t),wo=i(f),Ra=n(f,"P",{});var bk=s(Ra);jS=r(bk,"There is one class of "),Nf=n(bk,"CODE",{});var E6e=s(Nf);DS=r(E6e,"AutoModel"),E6e.forEach(t),_He=r(bk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bk.forEach(t),oXe=i(f),Pi=n(f,"H2",{class:!0});var vk=s(Pi);qf=n(vk,"A",{id:!0,class:!0,href:!0});var C6e=s(qf);Aae=n(C6e,"SPAN",{});var w6e=s(Aae);T(nL.$$.fragment,w6e),w6e.forEach(t),C6e.forEach(t),uHe=i(vk),Lae=n(vk,"SPAN",{});var A6e=s(Lae);bHe=r(A6e,"Extending the Auto Classes"),A6e.forEach(t),vk.forEach(t),rXe=i(f),qn=n(f,"P",{});var kf=s(qn);vHe=r(kf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yae=n(kf,"CODE",{});var L6e=s(yae);FHe=r(L6e,"NewModel"),L6e.forEach(t),THe=r(kf,", make sure you have a "),xae=n(kf,"CODE",{});var y6e=s(xae);MHe=r(y6e,"NewModelConfig"),y6e.forEach(t),EHe=r(kf,` then you can add those to the auto
classes like this:`),kf.forEach(t),tXe=i(f),T(sL.$$.fragment,f),aXe=i(f),GS=n(f,"P",{});var x6e=s(GS);CHe=r(x6e,"You will then be able to use the auto classes like you would usually do!"),x6e.forEach(t),nXe=i(f),T(jf.$$.fragment,f),sXe=i(f),Bi=n(f,"H2",{class:!0});var Fk=s(Bi);Df=n(Fk,"A",{id:!0,class:!0,href:!0});var $6e=s(Df);$ae=n($6e,"SPAN",{});var k6e=s($ae);T(lL.$$.fragment,k6e),k6e.forEach(t),$6e.forEach(t),wHe=i(Fk),kae=n(Fk,"SPAN",{});var S6e=s(kae);AHe=r(S6e,"AutoConfig"),S6e.forEach(t),Fk.forEach(t),lXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(iL.$$.fragment,nt),LHe=i(nt),dL=n(nt,"P",{});var Tk=s(dL);yHe=r(Tk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),OS=n(Tk,"A",{href:!0});var R6e=s(OS);xHe=r(R6e,"from_pretrained()"),R6e.forEach(t),$He=r(Tk," class method."),Tk.forEach(t),kHe=i(nt),cL=n(nt,"P",{});var Mk=s(cL);SHe=r(Mk,"This class cannot be instantiated directly using "),Sae=n(Mk,"CODE",{});var P6e=s(Sae);RHe=r(P6e,"__init__()"),P6e.forEach(t),PHe=r(Mk," (throws an error)."),Mk.forEach(t),BHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(fL.$$.fragment,st),IHe=i(st),Rae=n(st,"P",{});var B6e=s(Rae);NHe=r(B6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),B6e.forEach(t),qHe=i(st),Ii=n(st,"P",{});var Sf=s(Ii);jHe=r(Sf,"The configuration class to instantiate is selected based on the "),Pae=n(Sf,"CODE",{});var I6e=s(Pae);DHe=r(I6e,"model_type"),I6e.forEach(t),GHe=r(Sf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bae=n(Sf,"CODE",{});var N6e=s(Bae);OHe=r(N6e,"pretrained_model_name_or_path"),N6e.forEach(t),VHe=r(Sf,":"),Sf.forEach(t),XHe=i(st),A=n(st,"UL",{});var L=s(A);Gf=n(L,"LI",{});var NA=s(Gf);Iae=n(NA,"STRONG",{});var q6e=s(Iae);zHe=r(q6e,"albert"),q6e.forEach(t),QHe=r(NA," \u2014 "),VS=n(NA,"A",{href:!0});var j6e=s(VS);WHe=r(j6e,"AlbertConfig"),j6e.forEach(t),HHe=r(NA," (ALBERT model)"),NA.forEach(t),UHe=i(L),Of=n(L,"LI",{});var qA=s(Of);Nae=n(qA,"STRONG",{});var D6e=s(Nae);JHe=r(D6e,"bart"),D6e.forEach(t),YHe=r(qA," \u2014 "),XS=n(qA,"A",{href:!0});var G6e=s(XS);KHe=r(G6e,"BartConfig"),G6e.forEach(t),ZHe=r(qA," (BART model)"),qA.forEach(t),eUe=i(L),Vf=n(L,"LI",{});var jA=s(Vf);qae=n(jA,"STRONG",{});var O6e=s(qae);oUe=r(O6e,"beit"),O6e.forEach(t),rUe=r(jA," \u2014 "),zS=n(jA,"A",{href:!0});var V6e=s(zS);tUe=r(V6e,"BeitConfig"),V6e.forEach(t),aUe=r(jA," (BEiT model)"),jA.forEach(t),nUe=i(L),Xf=n(L,"LI",{});var DA=s(Xf);jae=n(DA,"STRONG",{});var X6e=s(jae);sUe=r(X6e,"bert"),X6e.forEach(t),lUe=r(DA," \u2014 "),QS=n(DA,"A",{href:!0});var z6e=s(QS);iUe=r(z6e,"BertConfig"),z6e.forEach(t),dUe=r(DA," (BERT model)"),DA.forEach(t),cUe=i(L),zf=n(L,"LI",{});var GA=s(zf);Dae=n(GA,"STRONG",{});var Q6e=s(Dae);fUe=r(Q6e,"bert-generation"),Q6e.forEach(t),mUe=r(GA," \u2014 "),WS=n(GA,"A",{href:!0});var W6e=s(WS);gUe=r(W6e,"BertGenerationConfig"),W6e.forEach(t),hUe=r(GA," (Bert Generation model)"),GA.forEach(t),pUe=i(L),Qf=n(L,"LI",{});var OA=s(Qf);Gae=n(OA,"STRONG",{});var H6e=s(Gae);_Ue=r(H6e,"big_bird"),H6e.forEach(t),uUe=r(OA," \u2014 "),HS=n(OA,"A",{href:!0});var U6e=s(HS);bUe=r(U6e,"BigBirdConfig"),U6e.forEach(t),vUe=r(OA," (BigBird model)"),OA.forEach(t),FUe=i(L),Wf=n(L,"LI",{});var VA=s(Wf);Oae=n(VA,"STRONG",{});var J6e=s(Oae);TUe=r(J6e,"bigbird_pegasus"),J6e.forEach(t),MUe=r(VA," \u2014 "),US=n(VA,"A",{href:!0});var Y6e=s(US);EUe=r(Y6e,"BigBirdPegasusConfig"),Y6e.forEach(t),CUe=r(VA," (BigBird-Pegasus model)"),VA.forEach(t),wUe=i(L),Hf=n(L,"LI",{});var XA=s(Hf);Vae=n(XA,"STRONG",{});var K6e=s(Vae);AUe=r(K6e,"blenderbot"),K6e.forEach(t),LUe=r(XA," \u2014 "),JS=n(XA,"A",{href:!0});var Z6e=s(JS);yUe=r(Z6e,"BlenderbotConfig"),Z6e.forEach(t),xUe=r(XA," (Blenderbot model)"),XA.forEach(t),$Ue=i(L),Uf=n(L,"LI",{});var zA=s(Uf);Xae=n(zA,"STRONG",{});var e7e=s(Xae);kUe=r(e7e,"blenderbot-small"),e7e.forEach(t),SUe=r(zA," \u2014 "),YS=n(zA,"A",{href:!0});var o7e=s(YS);RUe=r(o7e,"BlenderbotSmallConfig"),o7e.forEach(t),PUe=r(zA," (BlenderbotSmall model)"),zA.forEach(t),BUe=i(L),Jf=n(L,"LI",{});var QA=s(Jf);zae=n(QA,"STRONG",{});var r7e=s(zae);IUe=r(r7e,"bloom"),r7e.forEach(t),NUe=r(QA," \u2014 "),KS=n(QA,"A",{href:!0});var t7e=s(KS);qUe=r(t7e,"BloomConfig"),t7e.forEach(t),jUe=r(QA," (BLOOM model)"),QA.forEach(t),DUe=i(L),Yf=n(L,"LI",{});var WA=s(Yf);Qae=n(WA,"STRONG",{});var a7e=s(Qae);GUe=r(a7e,"camembert"),a7e.forEach(t),OUe=r(WA," \u2014 "),ZS=n(WA,"A",{href:!0});var n7e=s(ZS);VUe=r(n7e,"CamembertConfig"),n7e.forEach(t),XUe=r(WA," (CamemBERT model)"),WA.forEach(t),zUe=i(L),Kf=n(L,"LI",{});var HA=s(Kf);Wae=n(HA,"STRONG",{});var s7e=s(Wae);QUe=r(s7e,"canine"),s7e.forEach(t),WUe=r(HA," \u2014 "),eR=n(HA,"A",{href:!0});var l7e=s(eR);HUe=r(l7e,"CanineConfig"),l7e.forEach(t),UUe=r(HA," (CANINE model)"),HA.forEach(t),JUe=i(L),Zf=n(L,"LI",{});var UA=s(Zf);Hae=n(UA,"STRONG",{});var i7e=s(Hae);YUe=r(i7e,"clip"),i7e.forEach(t),KUe=r(UA," \u2014 "),oR=n(UA,"A",{href:!0});var d7e=s(oR);ZUe=r(d7e,"CLIPConfig"),d7e.forEach(t),eJe=r(UA," (CLIP model)"),UA.forEach(t),oJe=i(L),em=n(L,"LI",{});var JA=s(em);Uae=n(JA,"STRONG",{});var c7e=s(Uae);rJe=r(c7e,"codegen"),c7e.forEach(t),tJe=r(JA," \u2014 "),rR=n(JA,"A",{href:!0});var f7e=s(rR);aJe=r(f7e,"CodeGenConfig"),f7e.forEach(t),nJe=r(JA," (CodeGen model)"),JA.forEach(t),sJe=i(L),om=n(L,"LI",{});var YA=s(om);Jae=n(YA,"STRONG",{});var m7e=s(Jae);lJe=r(m7e,"convbert"),m7e.forEach(t),iJe=r(YA," \u2014 "),tR=n(YA,"A",{href:!0});var g7e=s(tR);dJe=r(g7e,"ConvBertConfig"),g7e.forEach(t),cJe=r(YA," (ConvBERT model)"),YA.forEach(t),fJe=i(L),rm=n(L,"LI",{});var KA=s(rm);Yae=n(KA,"STRONG",{});var h7e=s(Yae);mJe=r(h7e,"convnext"),h7e.forEach(t),gJe=r(KA," \u2014 "),aR=n(KA,"A",{href:!0});var p7e=s(aR);hJe=r(p7e,"ConvNextConfig"),p7e.forEach(t),pJe=r(KA," (ConvNeXT model)"),KA.forEach(t),_Je=i(L),tm=n(L,"LI",{});var ZA=s(tm);Kae=n(ZA,"STRONG",{});var _7e=s(Kae);uJe=r(_7e,"ctrl"),_7e.forEach(t),bJe=r(ZA," \u2014 "),nR=n(ZA,"A",{href:!0});var u7e=s(nR);vJe=r(u7e,"CTRLConfig"),u7e.forEach(t),FJe=r(ZA," (CTRL model)"),ZA.forEach(t),TJe=i(L),am=n(L,"LI",{});var e6=s(am);Zae=n(e6,"STRONG",{});var b7e=s(Zae);MJe=r(b7e,"cvt"),b7e.forEach(t),EJe=r(e6," \u2014 "),sR=n(e6,"A",{href:!0});var v7e=s(sR);CJe=r(v7e,"CvtConfig"),v7e.forEach(t),wJe=r(e6," (CvT model)"),e6.forEach(t),AJe=i(L),nm=n(L,"LI",{});var o6=s(nm);ene=n(o6,"STRONG",{});var F7e=s(ene);LJe=r(F7e,"data2vec-audio"),F7e.forEach(t),yJe=r(o6," \u2014 "),lR=n(o6,"A",{href:!0});var T7e=s(lR);xJe=r(T7e,"Data2VecAudioConfig"),T7e.forEach(t),$Je=r(o6," (Data2VecAudio model)"),o6.forEach(t),kJe=i(L),sm=n(L,"LI",{});var r6=s(sm);one=n(r6,"STRONG",{});var M7e=s(one);SJe=r(M7e,"data2vec-text"),M7e.forEach(t),RJe=r(r6," \u2014 "),iR=n(r6,"A",{href:!0});var E7e=s(iR);PJe=r(E7e,"Data2VecTextConfig"),E7e.forEach(t),BJe=r(r6," (Data2VecText model)"),r6.forEach(t),IJe=i(L),lm=n(L,"LI",{});var t6=s(lm);rne=n(t6,"STRONG",{});var C7e=s(rne);NJe=r(C7e,"data2vec-vision"),C7e.forEach(t),qJe=r(t6," \u2014 "),dR=n(t6,"A",{href:!0});var w7e=s(dR);jJe=r(w7e,"Data2VecVisionConfig"),w7e.forEach(t),DJe=r(t6," (Data2VecVision model)"),t6.forEach(t),GJe=i(L),im=n(L,"LI",{});var a6=s(im);tne=n(a6,"STRONG",{});var A7e=s(tne);OJe=r(A7e,"deberta"),A7e.forEach(t),VJe=r(a6," \u2014 "),cR=n(a6,"A",{href:!0});var L7e=s(cR);XJe=r(L7e,"DebertaConfig"),L7e.forEach(t),zJe=r(a6," (DeBERTa model)"),a6.forEach(t),QJe=i(L),dm=n(L,"LI",{});var n6=s(dm);ane=n(n6,"STRONG",{});var y7e=s(ane);WJe=r(y7e,"deberta-v2"),y7e.forEach(t),HJe=r(n6," \u2014 "),fR=n(n6,"A",{href:!0});var x7e=s(fR);UJe=r(x7e,"DebertaV2Config"),x7e.forEach(t),JJe=r(n6," (DeBERTa-v2 model)"),n6.forEach(t),YJe=i(L),cm=n(L,"LI",{});var s6=s(cm);nne=n(s6,"STRONG",{});var mtt=s(nne);KJe=r(mtt,"decision_transformer"),mtt.forEach(t),ZJe=r(s6," \u2014 "),mR=n(s6,"A",{href:!0});var gtt=s(mR);eYe=r(gtt,"DecisionTransformerConfig"),gtt.forEach(t),oYe=r(s6," (Decision Transformer model)"),s6.forEach(t),rYe=i(L),fm=n(L,"LI",{});var $7e=s(fm);sne=n($7e,"STRONG",{});var htt=s(sne);tYe=r(htt,"deit"),htt.forEach(t),aYe=r($7e," \u2014 "),gR=n($7e,"A",{href:!0});var ptt=s(gR);nYe=r(ptt,"DeiTConfig"),ptt.forEach(t),sYe=r($7e," (DeiT model)"),$7e.forEach(t),lYe=i(L),mm=n(L,"LI",{});var k7e=s(mm);lne=n(k7e,"STRONG",{});var _tt=s(lne);iYe=r(_tt,"detr"),_tt.forEach(t),dYe=r(k7e," \u2014 "),hR=n(k7e,"A",{href:!0});var utt=s(hR);cYe=r(utt,"DetrConfig"),utt.forEach(t),fYe=r(k7e," (DETR model)"),k7e.forEach(t),mYe=i(L),gm=n(L,"LI",{});var S7e=s(gm);ine=n(S7e,"STRONG",{});var btt=s(ine);gYe=r(btt,"distilbert"),btt.forEach(t),hYe=r(S7e," \u2014 "),pR=n(S7e,"A",{href:!0});var vtt=s(pR);pYe=r(vtt,"DistilBertConfig"),vtt.forEach(t),_Ye=r(S7e," (DistilBERT model)"),S7e.forEach(t),uYe=i(L),hm=n(L,"LI",{});var R7e=s(hm);dne=n(R7e,"STRONG",{});var Ftt=s(dne);bYe=r(Ftt,"dpr"),Ftt.forEach(t),vYe=r(R7e," \u2014 "),_R=n(R7e,"A",{href:!0});var Ttt=s(_R);FYe=r(Ttt,"DPRConfig"),Ttt.forEach(t),TYe=r(R7e," (DPR model)"),R7e.forEach(t),MYe=i(L),pm=n(L,"LI",{});var P7e=s(pm);cne=n(P7e,"STRONG",{});var Mtt=s(cne);EYe=r(Mtt,"dpt"),Mtt.forEach(t),CYe=r(P7e," \u2014 "),uR=n(P7e,"A",{href:!0});var Ett=s(uR);wYe=r(Ett,"DPTConfig"),Ett.forEach(t),AYe=r(P7e," (DPT model)"),P7e.forEach(t),LYe=i(L),_m=n(L,"LI",{});var B7e=s(_m);fne=n(B7e,"STRONG",{});var Ctt=s(fne);yYe=r(Ctt,"electra"),Ctt.forEach(t),xYe=r(B7e," \u2014 "),bR=n(B7e,"A",{href:!0});var wtt=s(bR);$Ye=r(wtt,"ElectraConfig"),wtt.forEach(t),kYe=r(B7e," (ELECTRA model)"),B7e.forEach(t),SYe=i(L),um=n(L,"LI",{});var I7e=s(um);mne=n(I7e,"STRONG",{});var Att=s(mne);RYe=r(Att,"encoder-decoder"),Att.forEach(t),PYe=r(I7e," \u2014 "),vR=n(I7e,"A",{href:!0});var Ltt=s(vR);BYe=r(Ltt,"EncoderDecoderConfig"),Ltt.forEach(t),IYe=r(I7e," (Encoder decoder model)"),I7e.forEach(t),NYe=i(L),bm=n(L,"LI",{});var N7e=s(bm);gne=n(N7e,"STRONG",{});var ytt=s(gne);qYe=r(ytt,"flaubert"),ytt.forEach(t),jYe=r(N7e," \u2014 "),FR=n(N7e,"A",{href:!0});var xtt=s(FR);DYe=r(xtt,"FlaubertConfig"),xtt.forEach(t),GYe=r(N7e," (FlauBERT model)"),N7e.forEach(t),OYe=i(L),vm=n(L,"LI",{});var q7e=s(vm);hne=n(q7e,"STRONG",{});var $tt=s(hne);VYe=r($tt,"flava"),$tt.forEach(t),XYe=r(q7e," \u2014 "),TR=n(q7e,"A",{href:!0});var ktt=s(TR);zYe=r(ktt,"FlavaConfig"),ktt.forEach(t),QYe=r(q7e," (FLAVA model)"),q7e.forEach(t),WYe=i(L),Fm=n(L,"LI",{});var j7e=s(Fm);pne=n(j7e,"STRONG",{});var Stt=s(pne);HYe=r(Stt,"fnet"),Stt.forEach(t),UYe=r(j7e," \u2014 "),MR=n(j7e,"A",{href:!0});var Rtt=s(MR);JYe=r(Rtt,"FNetConfig"),Rtt.forEach(t),YYe=r(j7e," (FNet model)"),j7e.forEach(t),KYe=i(L),Tm=n(L,"LI",{});var D7e=s(Tm);_ne=n(D7e,"STRONG",{});var Ptt=s(_ne);ZYe=r(Ptt,"fsmt"),Ptt.forEach(t),eKe=r(D7e," \u2014 "),ER=n(D7e,"A",{href:!0});var Btt=s(ER);oKe=r(Btt,"FSMTConfig"),Btt.forEach(t),rKe=r(D7e," (FairSeq Machine-Translation model)"),D7e.forEach(t),tKe=i(L),Mm=n(L,"LI",{});var G7e=s(Mm);une=n(G7e,"STRONG",{});var Itt=s(une);aKe=r(Itt,"funnel"),Itt.forEach(t),nKe=r(G7e," \u2014 "),CR=n(G7e,"A",{href:!0});var Ntt=s(CR);sKe=r(Ntt,"FunnelConfig"),Ntt.forEach(t),lKe=r(G7e," (Funnel Transformer model)"),G7e.forEach(t),iKe=i(L),Em=n(L,"LI",{});var O7e=s(Em);bne=n(O7e,"STRONG",{});var qtt=s(bne);dKe=r(qtt,"glpn"),qtt.forEach(t),cKe=r(O7e," \u2014 "),wR=n(O7e,"A",{href:!0});var jtt=s(wR);fKe=r(jtt,"GLPNConfig"),jtt.forEach(t),mKe=r(O7e," (GLPN model)"),O7e.forEach(t),gKe=i(L),Cm=n(L,"LI",{});var V7e=s(Cm);vne=n(V7e,"STRONG",{});var Dtt=s(vne);hKe=r(Dtt,"gpt2"),Dtt.forEach(t),pKe=r(V7e," \u2014 "),AR=n(V7e,"A",{href:!0});var Gtt=s(AR);_Ke=r(Gtt,"GPT2Config"),Gtt.forEach(t),uKe=r(V7e," (OpenAI GPT-2 model)"),V7e.forEach(t),bKe=i(L),wm=n(L,"LI",{});var X7e=s(wm);Fne=n(X7e,"STRONG",{});var Ott=s(Fne);vKe=r(Ott,"gpt_neo"),Ott.forEach(t),FKe=r(X7e," \u2014 "),LR=n(X7e,"A",{href:!0});var Vtt=s(LR);TKe=r(Vtt,"GPTNeoConfig"),Vtt.forEach(t),MKe=r(X7e," (GPT Neo model)"),X7e.forEach(t),EKe=i(L),Am=n(L,"LI",{});var z7e=s(Am);Tne=n(z7e,"STRONG",{});var Xtt=s(Tne);CKe=r(Xtt,"gpt_neox"),Xtt.forEach(t),wKe=r(z7e," \u2014 "),yR=n(z7e,"A",{href:!0});var ztt=s(yR);AKe=r(ztt,"GPTNeoXConfig"),ztt.forEach(t),LKe=r(z7e," (GPT NeoX model)"),z7e.forEach(t),yKe=i(L),Lm=n(L,"LI",{});var Q7e=s(Lm);Mne=n(Q7e,"STRONG",{});var Qtt=s(Mne);xKe=r(Qtt,"gptj"),Qtt.forEach(t),$Ke=r(Q7e," \u2014 "),xR=n(Q7e,"A",{href:!0});var Wtt=s(xR);kKe=r(Wtt,"GPTJConfig"),Wtt.forEach(t),SKe=r(Q7e," (GPT-J model)"),Q7e.forEach(t),RKe=i(L),ym=n(L,"LI",{});var W7e=s(ym);Ene=n(W7e,"STRONG",{});var Htt=s(Ene);PKe=r(Htt,"groupvit"),Htt.forEach(t),BKe=r(W7e," \u2014 "),$R=n(W7e,"A",{href:!0});var Utt=s($R);IKe=r(Utt,"GroupViTConfig"),Utt.forEach(t),NKe=r(W7e," (GroupViT model)"),W7e.forEach(t),qKe=i(L),xm=n(L,"LI",{});var H7e=s(xm);Cne=n(H7e,"STRONG",{});var Jtt=s(Cne);jKe=r(Jtt,"hubert"),Jtt.forEach(t),DKe=r(H7e," \u2014 "),kR=n(H7e,"A",{href:!0});var Ytt=s(kR);GKe=r(Ytt,"HubertConfig"),Ytt.forEach(t),OKe=r(H7e," (Hubert model)"),H7e.forEach(t),VKe=i(L),$m=n(L,"LI",{});var U7e=s($m);wne=n(U7e,"STRONG",{});var Ktt=s(wne);XKe=r(Ktt,"ibert"),Ktt.forEach(t),zKe=r(U7e," \u2014 "),SR=n(U7e,"A",{href:!0});var Ztt=s(SR);QKe=r(Ztt,"IBertConfig"),Ztt.forEach(t),WKe=r(U7e," (I-BERT model)"),U7e.forEach(t),HKe=i(L),km=n(L,"LI",{});var J7e=s(km);Ane=n(J7e,"STRONG",{});var eat=s(Ane);UKe=r(eat,"imagegpt"),eat.forEach(t),JKe=r(J7e," \u2014 "),RR=n(J7e,"A",{href:!0});var oat=s(RR);YKe=r(oat,"ImageGPTConfig"),oat.forEach(t),KKe=r(J7e," (ImageGPT model)"),J7e.forEach(t),ZKe=i(L),Sm=n(L,"LI",{});var Y7e=s(Sm);Lne=n(Y7e,"STRONG",{});var rat=s(Lne);eZe=r(rat,"layoutlm"),rat.forEach(t),oZe=r(Y7e," \u2014 "),PR=n(Y7e,"A",{href:!0});var tat=s(PR);rZe=r(tat,"LayoutLMConfig"),tat.forEach(t),tZe=r(Y7e," (LayoutLM model)"),Y7e.forEach(t),aZe=i(L),Rm=n(L,"LI",{});var K7e=s(Rm);yne=n(K7e,"STRONG",{});var aat=s(yne);nZe=r(aat,"layoutlmv2"),aat.forEach(t),sZe=r(K7e," \u2014 "),BR=n(K7e,"A",{href:!0});var nat=s(BR);lZe=r(nat,"LayoutLMv2Config"),nat.forEach(t),iZe=r(K7e," (LayoutLMv2 model)"),K7e.forEach(t),dZe=i(L),Pm=n(L,"LI",{});var Z7e=s(Pm);xne=n(Z7e,"STRONG",{});var sat=s(xne);cZe=r(sat,"layoutlmv3"),sat.forEach(t),fZe=r(Z7e," \u2014 "),IR=n(Z7e,"A",{href:!0});var lat=s(IR);mZe=r(lat,"LayoutLMv3Config"),lat.forEach(t),gZe=r(Z7e," (LayoutLMv3 model)"),Z7e.forEach(t),hZe=i(L),Bm=n(L,"LI",{});var eLe=s(Bm);$ne=n(eLe,"STRONG",{});var iat=s($ne);pZe=r(iat,"led"),iat.forEach(t),_Ze=r(eLe," \u2014 "),NR=n(eLe,"A",{href:!0});var dat=s(NR);uZe=r(dat,"LEDConfig"),dat.forEach(t),bZe=r(eLe," (LED model)"),eLe.forEach(t),vZe=i(L),Im=n(L,"LI",{});var oLe=s(Im);kne=n(oLe,"STRONG",{});var cat=s(kne);FZe=r(cat,"levit"),cat.forEach(t),TZe=r(oLe," \u2014 "),qR=n(oLe,"A",{href:!0});var fat=s(qR);MZe=r(fat,"LevitConfig"),fat.forEach(t),EZe=r(oLe," (LeViT model)"),oLe.forEach(t),CZe=i(L),Nm=n(L,"LI",{});var rLe=s(Nm);Sne=n(rLe,"STRONG",{});var mat=s(Sne);wZe=r(mat,"longformer"),mat.forEach(t),AZe=r(rLe," \u2014 "),jR=n(rLe,"A",{href:!0});var gat=s(jR);LZe=r(gat,"LongformerConfig"),gat.forEach(t),yZe=r(rLe," (Longformer model)"),rLe.forEach(t),xZe=i(L),qm=n(L,"LI",{});var tLe=s(qm);Rne=n(tLe,"STRONG",{});var hat=s(Rne);$Ze=r(hat,"longt5"),hat.forEach(t),kZe=r(tLe," \u2014 "),DR=n(tLe,"A",{href:!0});var pat=s(DR);SZe=r(pat,"LongT5Config"),pat.forEach(t),RZe=r(tLe," (LongT5 model)"),tLe.forEach(t),PZe=i(L),jm=n(L,"LI",{});var aLe=s(jm);Pne=n(aLe,"STRONG",{});var _at=s(Pne);BZe=r(_at,"luke"),_at.forEach(t),IZe=r(aLe," \u2014 "),GR=n(aLe,"A",{href:!0});var uat=s(GR);NZe=r(uat,"LukeConfig"),uat.forEach(t),qZe=r(aLe," (LUKE model)"),aLe.forEach(t),jZe=i(L),Dm=n(L,"LI",{});var nLe=s(Dm);Bne=n(nLe,"STRONG",{});var bat=s(Bne);DZe=r(bat,"lxmert"),bat.forEach(t),GZe=r(nLe," \u2014 "),OR=n(nLe,"A",{href:!0});var vat=s(OR);OZe=r(vat,"LxmertConfig"),vat.forEach(t),VZe=r(nLe," (LXMERT model)"),nLe.forEach(t),XZe=i(L),Gm=n(L,"LI",{});var sLe=s(Gm);Ine=n(sLe,"STRONG",{});var Fat=s(Ine);zZe=r(Fat,"m2m_100"),Fat.forEach(t),QZe=r(sLe," \u2014 "),VR=n(sLe,"A",{href:!0});var Tat=s(VR);WZe=r(Tat,"M2M100Config"),Tat.forEach(t),HZe=r(sLe," (M2M100 model)"),sLe.forEach(t),UZe=i(L),Om=n(L,"LI",{});var lLe=s(Om);Nne=n(lLe,"STRONG",{});var Mat=s(Nne);JZe=r(Mat,"marian"),Mat.forEach(t),YZe=r(lLe," \u2014 "),XR=n(lLe,"A",{href:!0});var Eat=s(XR);KZe=r(Eat,"MarianConfig"),Eat.forEach(t),ZZe=r(lLe," (Marian model)"),lLe.forEach(t),eeo=i(L),Vm=n(L,"LI",{});var iLe=s(Vm);qne=n(iLe,"STRONG",{});var Cat=s(qne);oeo=r(Cat,"maskformer"),Cat.forEach(t),reo=r(iLe," \u2014 "),zR=n(iLe,"A",{href:!0});var wat=s(zR);teo=r(wat,"MaskFormerConfig"),wat.forEach(t),aeo=r(iLe," (MaskFormer model)"),iLe.forEach(t),neo=i(L),Xm=n(L,"LI",{});var dLe=s(Xm);jne=n(dLe,"STRONG",{});var Aat=s(jne);seo=r(Aat,"mbart"),Aat.forEach(t),leo=r(dLe," \u2014 "),QR=n(dLe,"A",{href:!0});var Lat=s(QR);ieo=r(Lat,"MBartConfig"),Lat.forEach(t),deo=r(dLe," (mBART model)"),dLe.forEach(t),ceo=i(L),zm=n(L,"LI",{});var cLe=s(zm);Dne=n(cLe,"STRONG",{});var yat=s(Dne);feo=r(yat,"mctct"),yat.forEach(t),meo=r(cLe," \u2014 "),WR=n(cLe,"A",{href:!0});var xat=s(WR);geo=r(xat,"MCTCTConfig"),xat.forEach(t),heo=r(cLe," (M-CTC-T model)"),cLe.forEach(t),peo=i(L),Qm=n(L,"LI",{});var fLe=s(Qm);Gne=n(fLe,"STRONG",{});var $at=s(Gne);_eo=r($at,"megatron-bert"),$at.forEach(t),ueo=r(fLe," \u2014 "),HR=n(fLe,"A",{href:!0});var kat=s(HR);beo=r(kat,"MegatronBertConfig"),kat.forEach(t),veo=r(fLe," (Megatron-BERT model)"),fLe.forEach(t),Feo=i(L),Wm=n(L,"LI",{});var mLe=s(Wm);One=n(mLe,"STRONG",{});var Sat=s(One);Teo=r(Sat,"mobilebert"),Sat.forEach(t),Meo=r(mLe," \u2014 "),UR=n(mLe,"A",{href:!0});var Rat=s(UR);Eeo=r(Rat,"MobileBertConfig"),Rat.forEach(t),Ceo=r(mLe," (MobileBERT model)"),mLe.forEach(t),weo=i(L),Hm=n(L,"LI",{});var gLe=s(Hm);Vne=n(gLe,"STRONG",{});var Pat=s(Vne);Aeo=r(Pat,"mobilevit"),Pat.forEach(t),Leo=r(gLe," \u2014 "),JR=n(gLe,"A",{href:!0});var Bat=s(JR);yeo=r(Bat,"MobileViTConfig"),Bat.forEach(t),xeo=r(gLe," (MobileViT model)"),gLe.forEach(t),$eo=i(L),Um=n(L,"LI",{});var hLe=s(Um);Xne=n(hLe,"STRONG",{});var Iat=s(Xne);keo=r(Iat,"mpnet"),Iat.forEach(t),Seo=r(hLe," \u2014 "),YR=n(hLe,"A",{href:!0});var Nat=s(YR);Reo=r(Nat,"MPNetConfig"),Nat.forEach(t),Peo=r(hLe," (MPNet model)"),hLe.forEach(t),Beo=i(L),Jm=n(L,"LI",{});var pLe=s(Jm);zne=n(pLe,"STRONG",{});var qat=s(zne);Ieo=r(qat,"mt5"),qat.forEach(t),Neo=r(pLe," \u2014 "),KR=n(pLe,"A",{href:!0});var jat=s(KR);qeo=r(jat,"MT5Config"),jat.forEach(t),jeo=r(pLe," (MT5 model)"),pLe.forEach(t),Deo=i(L),Ym=n(L,"LI",{});var _Le=s(Ym);Qne=n(_Le,"STRONG",{});var Dat=s(Qne);Geo=r(Dat,"mvp"),Dat.forEach(t),Oeo=r(_Le," \u2014 "),ZR=n(_Le,"A",{href:!0});var Gat=s(ZR);Veo=r(Gat,"MvpConfig"),Gat.forEach(t),Xeo=r(_Le," (MVP model)"),_Le.forEach(t),zeo=i(L),Km=n(L,"LI",{});var uLe=s(Km);Wne=n(uLe,"STRONG",{});var Oat=s(Wne);Qeo=r(Oat,"nezha"),Oat.forEach(t),Weo=r(uLe," \u2014 "),eP=n(uLe,"A",{href:!0});var Vat=s(eP);Heo=r(Vat,"NezhaConfig"),Vat.forEach(t),Ueo=r(uLe," (Nezha model)"),uLe.forEach(t),Jeo=i(L),Zm=n(L,"LI",{});var bLe=s(Zm);Hne=n(bLe,"STRONG",{});var Xat=s(Hne);Yeo=r(Xat,"nystromformer"),Xat.forEach(t),Keo=r(bLe," \u2014 "),oP=n(bLe,"A",{href:!0});var zat=s(oP);Zeo=r(zat,"NystromformerConfig"),zat.forEach(t),eoo=r(bLe," (Nystr\xF6mformer model)"),bLe.forEach(t),ooo=i(L),eg=n(L,"LI",{});var vLe=s(eg);Une=n(vLe,"STRONG",{});var Qat=s(Une);roo=r(Qat,"openai-gpt"),Qat.forEach(t),too=r(vLe," \u2014 "),rP=n(vLe,"A",{href:!0});var Wat=s(rP);aoo=r(Wat,"OpenAIGPTConfig"),Wat.forEach(t),noo=r(vLe," (OpenAI GPT model)"),vLe.forEach(t),soo=i(L),og=n(L,"LI",{});var FLe=s(og);Jne=n(FLe,"STRONG",{});var Hat=s(Jne);loo=r(Hat,"opt"),Hat.forEach(t),ioo=r(FLe," \u2014 "),tP=n(FLe,"A",{href:!0});var Uat=s(tP);doo=r(Uat,"OPTConfig"),Uat.forEach(t),coo=r(FLe," (OPT model)"),FLe.forEach(t),foo=i(L),rg=n(L,"LI",{});var TLe=s(rg);Yne=n(TLe,"STRONG",{});var Jat=s(Yne);moo=r(Jat,"pegasus"),Jat.forEach(t),goo=r(TLe," \u2014 "),aP=n(TLe,"A",{href:!0});var Yat=s(aP);hoo=r(Yat,"PegasusConfig"),Yat.forEach(t),poo=r(TLe," (Pegasus model)"),TLe.forEach(t),_oo=i(L),tg=n(L,"LI",{});var MLe=s(tg);Kne=n(MLe,"STRONG",{});var Kat=s(Kne);uoo=r(Kat,"perceiver"),Kat.forEach(t),boo=r(MLe," \u2014 "),nP=n(MLe,"A",{href:!0});var Zat=s(nP);voo=r(Zat,"PerceiverConfig"),Zat.forEach(t),Foo=r(MLe," (Perceiver model)"),MLe.forEach(t),Too=i(L),ag=n(L,"LI",{});var ELe=s(ag);Zne=n(ELe,"STRONG",{});var ent=s(Zne);Moo=r(ent,"plbart"),ent.forEach(t),Eoo=r(ELe," \u2014 "),sP=n(ELe,"A",{href:!0});var ont=s(sP);Coo=r(ont,"PLBartConfig"),ont.forEach(t),woo=r(ELe," (PLBart model)"),ELe.forEach(t),Aoo=i(L),ng=n(L,"LI",{});var CLe=s(ng);ese=n(CLe,"STRONG",{});var rnt=s(ese);Loo=r(rnt,"poolformer"),rnt.forEach(t),yoo=r(CLe," \u2014 "),lP=n(CLe,"A",{href:!0});var tnt=s(lP);xoo=r(tnt,"PoolFormerConfig"),tnt.forEach(t),$oo=r(CLe," (PoolFormer model)"),CLe.forEach(t),koo=i(L),sg=n(L,"LI",{});var wLe=s(sg);ose=n(wLe,"STRONG",{});var ant=s(ose);Soo=r(ant,"prophetnet"),ant.forEach(t),Roo=r(wLe," \u2014 "),iP=n(wLe,"A",{href:!0});var nnt=s(iP);Poo=r(nnt,"ProphetNetConfig"),nnt.forEach(t),Boo=r(wLe," (ProphetNet model)"),wLe.forEach(t),Ioo=i(L),lg=n(L,"LI",{});var ALe=s(lg);rse=n(ALe,"STRONG",{});var snt=s(rse);Noo=r(snt,"qdqbert"),snt.forEach(t),qoo=r(ALe," \u2014 "),dP=n(ALe,"A",{href:!0});var lnt=s(dP);joo=r(lnt,"QDQBertConfig"),lnt.forEach(t),Doo=r(ALe," (QDQBert model)"),ALe.forEach(t),Goo=i(L),ig=n(L,"LI",{});var LLe=s(ig);tse=n(LLe,"STRONG",{});var int=s(tse);Ooo=r(int,"rag"),int.forEach(t),Voo=r(LLe," \u2014 "),cP=n(LLe,"A",{href:!0});var dnt=s(cP);Xoo=r(dnt,"RagConfig"),dnt.forEach(t),zoo=r(LLe," (RAG model)"),LLe.forEach(t),Qoo=i(L),dg=n(L,"LI",{});var yLe=s(dg);ase=n(yLe,"STRONG",{});var cnt=s(ase);Woo=r(cnt,"realm"),cnt.forEach(t),Hoo=r(yLe," \u2014 "),fP=n(yLe,"A",{href:!0});var fnt=s(fP);Uoo=r(fnt,"RealmConfig"),fnt.forEach(t),Joo=r(yLe," (REALM model)"),yLe.forEach(t),Yoo=i(L),cg=n(L,"LI",{});var xLe=s(cg);nse=n(xLe,"STRONG",{});var mnt=s(nse);Koo=r(mnt,"reformer"),mnt.forEach(t),Zoo=r(xLe," \u2014 "),mP=n(xLe,"A",{href:!0});var gnt=s(mP);ero=r(gnt,"ReformerConfig"),gnt.forEach(t),oro=r(xLe," (Reformer model)"),xLe.forEach(t),rro=i(L),fg=n(L,"LI",{});var $Le=s(fg);sse=n($Le,"STRONG",{});var hnt=s(sse);tro=r(hnt,"regnet"),hnt.forEach(t),aro=r($Le," \u2014 "),gP=n($Le,"A",{href:!0});var pnt=s(gP);nro=r(pnt,"RegNetConfig"),pnt.forEach(t),sro=r($Le," (RegNet model)"),$Le.forEach(t),lro=i(L),mg=n(L,"LI",{});var kLe=s(mg);lse=n(kLe,"STRONG",{});var _nt=s(lse);iro=r(_nt,"rembert"),_nt.forEach(t),dro=r(kLe," \u2014 "),hP=n(kLe,"A",{href:!0});var unt=s(hP);cro=r(unt,"RemBertConfig"),unt.forEach(t),fro=r(kLe," (RemBERT model)"),kLe.forEach(t),mro=i(L),gg=n(L,"LI",{});var SLe=s(gg);ise=n(SLe,"STRONG",{});var bnt=s(ise);gro=r(bnt,"resnet"),bnt.forEach(t),hro=r(SLe," \u2014 "),pP=n(SLe,"A",{href:!0});var vnt=s(pP);pro=r(vnt,"ResNetConfig"),vnt.forEach(t),_ro=r(SLe," (ResNet model)"),SLe.forEach(t),uro=i(L),hg=n(L,"LI",{});var RLe=s(hg);dse=n(RLe,"STRONG",{});var Fnt=s(dse);bro=r(Fnt,"retribert"),Fnt.forEach(t),vro=r(RLe," \u2014 "),_P=n(RLe,"A",{href:!0});var Tnt=s(_P);Fro=r(Tnt,"RetriBertConfig"),Tnt.forEach(t),Tro=r(RLe," (RetriBERT model)"),RLe.forEach(t),Mro=i(L),pg=n(L,"LI",{});var PLe=s(pg);cse=n(PLe,"STRONG",{});var Mnt=s(cse);Ero=r(Mnt,"roberta"),Mnt.forEach(t),Cro=r(PLe," \u2014 "),uP=n(PLe,"A",{href:!0});var Ent=s(uP);wro=r(Ent,"RobertaConfig"),Ent.forEach(t),Aro=r(PLe," (RoBERTa model)"),PLe.forEach(t),Lro=i(L),_g=n(L,"LI",{});var BLe=s(_g);fse=n(BLe,"STRONG",{});var Cnt=s(fse);yro=r(Cnt,"roformer"),Cnt.forEach(t),xro=r(BLe," \u2014 "),bP=n(BLe,"A",{href:!0});var wnt=s(bP);$ro=r(wnt,"RoFormerConfig"),wnt.forEach(t),kro=r(BLe," (RoFormer model)"),BLe.forEach(t),Sro=i(L),ug=n(L,"LI",{});var ILe=s(ug);mse=n(ILe,"STRONG",{});var Ant=s(mse);Rro=r(Ant,"segformer"),Ant.forEach(t),Pro=r(ILe," \u2014 "),vP=n(ILe,"A",{href:!0});var Lnt=s(vP);Bro=r(Lnt,"SegformerConfig"),Lnt.forEach(t),Iro=r(ILe," (SegFormer model)"),ILe.forEach(t),Nro=i(L),bg=n(L,"LI",{});var NLe=s(bg);gse=n(NLe,"STRONG",{});var ynt=s(gse);qro=r(ynt,"sew"),ynt.forEach(t),jro=r(NLe," \u2014 "),FP=n(NLe,"A",{href:!0});var xnt=s(FP);Dro=r(xnt,"SEWConfig"),xnt.forEach(t),Gro=r(NLe," (SEW model)"),NLe.forEach(t),Oro=i(L),vg=n(L,"LI",{});var qLe=s(vg);hse=n(qLe,"STRONG",{});var $nt=s(hse);Vro=r($nt,"sew-d"),$nt.forEach(t),Xro=r(qLe," \u2014 "),TP=n(qLe,"A",{href:!0});var knt=s(TP);zro=r(knt,"SEWDConfig"),knt.forEach(t),Qro=r(qLe," (SEW-D model)"),qLe.forEach(t),Wro=i(L),Fg=n(L,"LI",{});var jLe=s(Fg);pse=n(jLe,"STRONG",{});var Snt=s(pse);Hro=r(Snt,"speech-encoder-decoder"),Snt.forEach(t),Uro=r(jLe," \u2014 "),MP=n(jLe,"A",{href:!0});var Rnt=s(MP);Jro=r(Rnt,"SpeechEncoderDecoderConfig"),Rnt.forEach(t),Yro=r(jLe," (Speech Encoder decoder model)"),jLe.forEach(t),Kro=i(L),Tg=n(L,"LI",{});var DLe=s(Tg);_se=n(DLe,"STRONG",{});var Pnt=s(_se);Zro=r(Pnt,"speech_to_text"),Pnt.forEach(t),eto=r(DLe," \u2014 "),EP=n(DLe,"A",{href:!0});var Bnt=s(EP);oto=r(Bnt,"Speech2TextConfig"),Bnt.forEach(t),rto=r(DLe," (Speech2Text model)"),DLe.forEach(t),tto=i(L),Mg=n(L,"LI",{});var GLe=s(Mg);use=n(GLe,"STRONG",{});var Int=s(use);ato=r(Int,"speech_to_text_2"),Int.forEach(t),nto=r(GLe," \u2014 "),CP=n(GLe,"A",{href:!0});var Nnt=s(CP);sto=r(Nnt,"Speech2Text2Config"),Nnt.forEach(t),lto=r(GLe," (Speech2Text2 model)"),GLe.forEach(t),ito=i(L),Eg=n(L,"LI",{});var OLe=s(Eg);bse=n(OLe,"STRONG",{});var qnt=s(bse);dto=r(qnt,"splinter"),qnt.forEach(t),cto=r(OLe," \u2014 "),wP=n(OLe,"A",{href:!0});var jnt=s(wP);fto=r(jnt,"SplinterConfig"),jnt.forEach(t),mto=r(OLe," (Splinter model)"),OLe.forEach(t),gto=i(L),Cg=n(L,"LI",{});var VLe=s(Cg);vse=n(VLe,"STRONG",{});var Dnt=s(vse);hto=r(Dnt,"squeezebert"),Dnt.forEach(t),pto=r(VLe," \u2014 "),AP=n(VLe,"A",{href:!0});var Gnt=s(AP);_to=r(Gnt,"SqueezeBertConfig"),Gnt.forEach(t),uto=r(VLe," (SqueezeBERT model)"),VLe.forEach(t),bto=i(L),wg=n(L,"LI",{});var XLe=s(wg);Fse=n(XLe,"STRONG",{});var Ont=s(Fse);vto=r(Ont,"swin"),Ont.forEach(t),Fto=r(XLe," \u2014 "),LP=n(XLe,"A",{href:!0});var Vnt=s(LP);Tto=r(Vnt,"SwinConfig"),Vnt.forEach(t),Mto=r(XLe," (Swin Transformer model)"),XLe.forEach(t),Eto=i(L),Ag=n(L,"LI",{});var zLe=s(Ag);Tse=n(zLe,"STRONG",{});var Xnt=s(Tse);Cto=r(Xnt,"t5"),Xnt.forEach(t),wto=r(zLe," \u2014 "),yP=n(zLe,"A",{href:!0});var znt=s(yP);Ato=r(znt,"T5Config"),znt.forEach(t),Lto=r(zLe," (T5 model)"),zLe.forEach(t),yto=i(L),Lg=n(L,"LI",{});var QLe=s(Lg);Mse=n(QLe,"STRONG",{});var Qnt=s(Mse);xto=r(Qnt,"tapas"),Qnt.forEach(t),$to=r(QLe," \u2014 "),xP=n(QLe,"A",{href:!0});var Wnt=s(xP);kto=r(Wnt,"TapasConfig"),Wnt.forEach(t),Sto=r(QLe," (TAPAS model)"),QLe.forEach(t),Rto=i(L),yg=n(L,"LI",{});var WLe=s(yg);Ese=n(WLe,"STRONG",{});var Hnt=s(Ese);Pto=r(Hnt,"trajectory_transformer"),Hnt.forEach(t),Bto=r(WLe," \u2014 "),$P=n(WLe,"A",{href:!0});var Unt=s($P);Ito=r(Unt,"TrajectoryTransformerConfig"),Unt.forEach(t),Nto=r(WLe," (Trajectory Transformer model)"),WLe.forEach(t),qto=i(L),xg=n(L,"LI",{});var HLe=s(xg);Cse=n(HLe,"STRONG",{});var Jnt=s(Cse);jto=r(Jnt,"transfo-xl"),Jnt.forEach(t),Dto=r(HLe," \u2014 "),kP=n(HLe,"A",{href:!0});var Ynt=s(kP);Gto=r(Ynt,"TransfoXLConfig"),Ynt.forEach(t),Oto=r(HLe," (Transformer-XL model)"),HLe.forEach(t),Vto=i(L),$g=n(L,"LI",{});var ULe=s($g);wse=n(ULe,"STRONG",{});var Knt=s(wse);Xto=r(Knt,"trocr"),Knt.forEach(t),zto=r(ULe," \u2014 "),SP=n(ULe,"A",{href:!0});var Znt=s(SP);Qto=r(Znt,"TrOCRConfig"),Znt.forEach(t),Wto=r(ULe," (TrOCR model)"),ULe.forEach(t),Hto=i(L),kg=n(L,"LI",{});var JLe=s(kg);Ase=n(JLe,"STRONG",{});var est=s(Ase);Uto=r(est,"unispeech"),est.forEach(t),Jto=r(JLe," \u2014 "),RP=n(JLe,"A",{href:!0});var ost=s(RP);Yto=r(ost,"UniSpeechConfig"),ost.forEach(t),Kto=r(JLe," (UniSpeech model)"),JLe.forEach(t),Zto=i(L),Sg=n(L,"LI",{});var YLe=s(Sg);Lse=n(YLe,"STRONG",{});var rst=s(Lse);eao=r(rst,"unispeech-sat"),rst.forEach(t),oao=r(YLe," \u2014 "),PP=n(YLe,"A",{href:!0});var tst=s(PP);rao=r(tst,"UniSpeechSatConfig"),tst.forEach(t),tao=r(YLe," (UniSpeechSat model)"),YLe.forEach(t),aao=i(L),Rg=n(L,"LI",{});var KLe=s(Rg);yse=n(KLe,"STRONG",{});var ast=s(yse);nao=r(ast,"van"),ast.forEach(t),sao=r(KLe," \u2014 "),BP=n(KLe,"A",{href:!0});var nst=s(BP);lao=r(nst,"VanConfig"),nst.forEach(t),iao=r(KLe," (VAN model)"),KLe.forEach(t),dao=i(L),Pg=n(L,"LI",{});var ZLe=s(Pg);xse=n(ZLe,"STRONG",{});var sst=s(xse);cao=r(sst,"vilt"),sst.forEach(t),fao=r(ZLe," \u2014 "),IP=n(ZLe,"A",{href:!0});var lst=s(IP);mao=r(lst,"ViltConfig"),lst.forEach(t),gao=r(ZLe," (ViLT model)"),ZLe.forEach(t),hao=i(L),Bg=n(L,"LI",{});var eye=s(Bg);$se=n(eye,"STRONG",{});var ist=s($se);pao=r(ist,"vision-encoder-decoder"),ist.forEach(t),_ao=r(eye," \u2014 "),NP=n(eye,"A",{href:!0});var dst=s(NP);uao=r(dst,"VisionEncoderDecoderConfig"),dst.forEach(t),bao=r(eye," (Vision Encoder decoder model)"),eye.forEach(t),vao=i(L),Ig=n(L,"LI",{});var oye=s(Ig);kse=n(oye,"STRONG",{});var cst=s(kse);Fao=r(cst,"vision-text-dual-encoder"),cst.forEach(t),Tao=r(oye," \u2014 "),qP=n(oye,"A",{href:!0});var fst=s(qP);Mao=r(fst,"VisionTextDualEncoderConfig"),fst.forEach(t),Eao=r(oye," (VisionTextDualEncoder model)"),oye.forEach(t),Cao=i(L),Ng=n(L,"LI",{});var rye=s(Ng);Sse=n(rye,"STRONG",{});var mst=s(Sse);wao=r(mst,"visual_bert"),mst.forEach(t),Aao=r(rye," \u2014 "),jP=n(rye,"A",{href:!0});var gst=s(jP);Lao=r(gst,"VisualBertConfig"),gst.forEach(t),yao=r(rye," (VisualBERT model)"),rye.forEach(t),xao=i(L),qg=n(L,"LI",{});var tye=s(qg);Rse=n(tye,"STRONG",{});var hst=s(Rse);$ao=r(hst,"vit"),hst.forEach(t),kao=r(tye," \u2014 "),DP=n(tye,"A",{href:!0});var pst=s(DP);Sao=r(pst,"ViTConfig"),pst.forEach(t),Rao=r(tye," (ViT model)"),tye.forEach(t),Pao=i(L),jg=n(L,"LI",{});var aye=s(jg);Pse=n(aye,"STRONG",{});var _st=s(Pse);Bao=r(_st,"vit_mae"),_st.forEach(t),Iao=r(aye," \u2014 "),GP=n(aye,"A",{href:!0});var ust=s(GP);Nao=r(ust,"ViTMAEConfig"),ust.forEach(t),qao=r(aye," (ViTMAE model)"),aye.forEach(t),jao=i(L),Dg=n(L,"LI",{});var nye=s(Dg);Bse=n(nye,"STRONG",{});var bst=s(Bse);Dao=r(bst,"wav2vec2"),bst.forEach(t),Gao=r(nye," \u2014 "),OP=n(nye,"A",{href:!0});var vst=s(OP);Oao=r(vst,"Wav2Vec2Config"),vst.forEach(t),Vao=r(nye," (Wav2Vec2 model)"),nye.forEach(t),Xao=i(L),Gg=n(L,"LI",{});var sye=s(Gg);Ise=n(sye,"STRONG",{});var Fst=s(Ise);zao=r(Fst,"wav2vec2-conformer"),Fst.forEach(t),Qao=r(sye," \u2014 "),VP=n(sye,"A",{href:!0});var Tst=s(VP);Wao=r(Tst,"Wav2Vec2ConformerConfig"),Tst.forEach(t),Hao=r(sye," (Wav2Vec2-Conformer model)"),sye.forEach(t),Uao=i(L),Og=n(L,"LI",{});var lye=s(Og);Nse=n(lye,"STRONG",{});var Mst=s(Nse);Jao=r(Mst,"wavlm"),Mst.forEach(t),Yao=r(lye," \u2014 "),XP=n(lye,"A",{href:!0});var Est=s(XP);Kao=r(Est,"WavLMConfig"),Est.forEach(t),Zao=r(lye," (WavLM model)"),lye.forEach(t),eno=i(L),Vg=n(L,"LI",{});var iye=s(Vg);qse=n(iye,"STRONG",{});var Cst=s(qse);ono=r(Cst,"xglm"),Cst.forEach(t),rno=r(iye," \u2014 "),zP=n(iye,"A",{href:!0});var wst=s(zP);tno=r(wst,"XGLMConfig"),wst.forEach(t),ano=r(iye," (XGLM model)"),iye.forEach(t),nno=i(L),Xg=n(L,"LI",{});var dye=s(Xg);jse=n(dye,"STRONG",{});var Ast=s(jse);sno=r(Ast,"xlm"),Ast.forEach(t),lno=r(dye," \u2014 "),QP=n(dye,"A",{href:!0});var Lst=s(QP);ino=r(Lst,"XLMConfig"),Lst.forEach(t),dno=r(dye," (XLM model)"),dye.forEach(t),cno=i(L),zg=n(L,"LI",{});var cye=s(zg);Dse=n(cye,"STRONG",{});var yst=s(Dse);fno=r(yst,"xlm-prophetnet"),yst.forEach(t),mno=r(cye," \u2014 "),WP=n(cye,"A",{href:!0});var xst=s(WP);gno=r(xst,"XLMProphetNetConfig"),xst.forEach(t),hno=r(cye," (XLM-ProphetNet model)"),cye.forEach(t),pno=i(L),Qg=n(L,"LI",{});var fye=s(Qg);Gse=n(fye,"STRONG",{});var $st=s(Gse);_no=r($st,"xlm-roberta"),$st.forEach(t),uno=r(fye," \u2014 "),HP=n(fye,"A",{href:!0});var kst=s(HP);bno=r(kst,"XLMRobertaConfig"),kst.forEach(t),vno=r(fye," (XLM-RoBERTa model)"),fye.forEach(t),Fno=i(L),Wg=n(L,"LI",{});var mye=s(Wg);Ose=n(mye,"STRONG",{});var Sst=s(Ose);Tno=r(Sst,"xlm-roberta-xl"),Sst.forEach(t),Mno=r(mye," \u2014 "),UP=n(mye,"A",{href:!0});var Rst=s(UP);Eno=r(Rst,"XLMRobertaXLConfig"),Rst.forEach(t),Cno=r(mye," (XLM-RoBERTa-XL model)"),mye.forEach(t),wno=i(L),Hg=n(L,"LI",{});var gye=s(Hg);Vse=n(gye,"STRONG",{});var Pst=s(Vse);Ano=r(Pst,"xlnet"),Pst.forEach(t),Lno=r(gye," \u2014 "),JP=n(gye,"A",{href:!0});var Bst=s(JP);yno=r(Bst,"XLNetConfig"),Bst.forEach(t),xno=r(gye," (XLNet model)"),gye.forEach(t),$no=i(L),Ug=n(L,"LI",{});var hye=s(Ug);Xse=n(hye,"STRONG",{});var Ist=s(Xse);kno=r(Ist,"yolos"),Ist.forEach(t),Sno=r(hye," \u2014 "),YP=n(hye,"A",{href:!0});var Nst=s(YP);Rno=r(Nst,"YolosConfig"),Nst.forEach(t),Pno=r(hye," (YOLOS model)"),hye.forEach(t),Bno=i(L),Jg=n(L,"LI",{});var pye=s(Jg);zse=n(pye,"STRONG",{});var qst=s(zse);Ino=r(qst,"yoso"),qst.forEach(t),Nno=r(pye," \u2014 "),KP=n(pye,"A",{href:!0});var jst=s(KP);qno=r(jst,"YosoConfig"),jst.forEach(t),jno=r(pye," (YOSO model)"),pye.forEach(t),L.forEach(t),Dno=i(st),T(Yg.$$.fragment,st),st.forEach(t),Gno=i(nt),Kg=n(nt,"DIV",{class:!0});var lQe=s(Kg);T(mL.$$.fragment,lQe),Ono=i(lQe),Qse=n(lQe,"P",{});var Dst=s(Qse);Vno=r(Dst,"Register a new configuration for this class."),Dst.forEach(t),lQe.forEach(t),nt.forEach(t),iXe=i(f),Ni=n(f,"H2",{class:!0});var iQe=s(Ni);Zg=n(iQe,"A",{id:!0,class:!0,href:!0});var Gst=s(Zg);Wse=n(Gst,"SPAN",{});var Ost=s(Wse);T(gL.$$.fragment,Ost),Ost.forEach(t),Gst.forEach(t),Xno=i(iQe),Hse=n(iQe,"SPAN",{});var Vst=s(Hse);zno=r(Vst,"AutoTokenizer"),Vst.forEach(t),iQe.forEach(t),dXe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(hL.$$.fragment,Ks),Qno=i(Ks),pL=n(Ks,"P",{});var dQe=s(pL);Wno=r(dQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZP=n(dQe,"A",{href:!0});var Xst=s(ZP);Hno=r(Xst,"AutoTokenizer.from_pretrained()"),Xst.forEach(t),Uno=r(dQe," class method."),dQe.forEach(t),Jno=i(Ks),_L=n(Ks,"P",{});var cQe=s(_L);Yno=r(cQe,"This class cannot be instantiated directly using "),Use=n(cQe,"CODE",{});var zst=s(Use);Kno=r(zst,"__init__()"),zst.forEach(t),Zno=r(cQe," (throws an error)."),cQe.forEach(t),eso=i(Ks),yr=n(Ks,"DIV",{class:!0});var Zs=s(yr);T(uL.$$.fragment,Zs),oso=i(Zs),Jse=n(Zs,"P",{});var Qst=s(Jse);rso=r(Qst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Qst.forEach(t),tso=i(Zs),Pa=n(Zs,"P",{});var l6=s(Pa);aso=r(l6,"The tokenizer class to instantiate is selected based on the "),Yse=n(l6,"CODE",{});var Wst=s(Yse);nso=r(Wst,"model_type"),Wst.forEach(t),sso=r(l6,` property of the config object (either
passed as an argument or loaded from `),Kse=n(l6,"CODE",{});var Hst=s(Kse);lso=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),iso=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zse=n(l6,"CODE",{});var Ust=s(Zse);dso=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),cso=r(l6,":"),l6.forEach(t),fso=i(Zs),k=n(Zs,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ek=s(jn);ele=n(Ek,"STRONG",{});var Jst=s(ele);mso=r(Jst,"albert"),Jst.forEach(t),gso=r(Ek," \u2014 "),eB=n(Ek,"A",{href:!0});var Yst=s(eB);hso=r(Yst,"AlbertTokenizer"),Yst.forEach(t),pso=r(Ek," or "),oB=n(Ek,"A",{href:!0});var Kst=s(oB);_so=r(Kst,"AlbertTokenizerFast"),Kst.forEach(t),uso=r(Ek," (ALBERT model)"),Ek.forEach(t),bso=i(S),Dn=n(S,"LI",{});var Ck=s(Dn);ole=n(Ck,"STRONG",{});var Zst=s(ole);vso=r(Zst,"bart"),Zst.forEach(t),Fso=r(Ck," \u2014 "),rB=n(Ck,"A",{href:!0});var elt=s(rB);Tso=r(elt,"BartTokenizer"),elt.forEach(t),Mso=r(Ck," or "),tB=n(Ck,"A",{href:!0});var olt=s(tB);Eso=r(olt,"BartTokenizerFast"),olt.forEach(t),Cso=r(Ck," (BART model)"),Ck.forEach(t),wso=i(S),Gn=n(S,"LI",{});var wk=s(Gn);rle=n(wk,"STRONG",{});var rlt=s(rle);Aso=r(rlt,"barthez"),rlt.forEach(t),Lso=r(wk," \u2014 "),aB=n(wk,"A",{href:!0});var tlt=s(aB);yso=r(tlt,"BarthezTokenizer"),tlt.forEach(t),xso=r(wk," or "),nB=n(wk,"A",{href:!0});var alt=s(nB);$so=r(alt,"BarthezTokenizerFast"),alt.forEach(t),kso=r(wk," (BARThez model)"),wk.forEach(t),Sso=i(S),eh=n(S,"LI",{});var _ye=s(eh);tle=n(_ye,"STRONG",{});var nlt=s(tle);Rso=r(nlt,"bartpho"),nlt.forEach(t),Pso=r(_ye," \u2014 "),sB=n(_ye,"A",{href:!0});var slt=s(sB);Bso=r(slt,"BartphoTokenizer"),slt.forEach(t),Iso=r(_ye," (BARTpho model)"),_ye.forEach(t),Nso=i(S),On=n(S,"LI",{});var Ak=s(On);ale=n(Ak,"STRONG",{});var llt=s(ale);qso=r(llt,"bert"),llt.forEach(t),jso=r(Ak," \u2014 "),lB=n(Ak,"A",{href:!0});var ilt=s(lB);Dso=r(ilt,"BertTokenizer"),ilt.forEach(t),Gso=r(Ak," or "),iB=n(Ak,"A",{href:!0});var dlt=s(iB);Oso=r(dlt,"BertTokenizerFast"),dlt.forEach(t),Vso=r(Ak," (BERT model)"),Ak.forEach(t),Xso=i(S),oh=n(S,"LI",{});var uye=s(oh);nle=n(uye,"STRONG",{});var clt=s(nle);zso=r(clt,"bert-generation"),clt.forEach(t),Qso=r(uye," \u2014 "),dB=n(uye,"A",{href:!0});var flt=s(dB);Wso=r(flt,"BertGenerationTokenizer"),flt.forEach(t),Hso=r(uye," (Bert Generation model)"),uye.forEach(t),Uso=i(S),rh=n(S,"LI",{});var bye=s(rh);sle=n(bye,"STRONG",{});var mlt=s(sle);Jso=r(mlt,"bert-japanese"),mlt.forEach(t),Yso=r(bye," \u2014 "),cB=n(bye,"A",{href:!0});var glt=s(cB);Kso=r(glt,"BertJapaneseTokenizer"),glt.forEach(t),Zso=r(bye," (BertJapanese model)"),bye.forEach(t),elo=i(S),th=n(S,"LI",{});var vye=s(th);lle=n(vye,"STRONG",{});var hlt=s(lle);olo=r(hlt,"bertweet"),hlt.forEach(t),rlo=r(vye," \u2014 "),fB=n(vye,"A",{href:!0});var plt=s(fB);tlo=r(plt,"BertweetTokenizer"),plt.forEach(t),alo=r(vye," (BERTweet model)"),vye.forEach(t),nlo=i(S),Vn=n(S,"LI",{});var Lk=s(Vn);ile=n(Lk,"STRONG",{});var _lt=s(ile);slo=r(_lt,"big_bird"),_lt.forEach(t),llo=r(Lk," \u2014 "),mB=n(Lk,"A",{href:!0});var ult=s(mB);ilo=r(ult,"BigBirdTokenizer"),ult.forEach(t),dlo=r(Lk," or "),gB=n(Lk,"A",{href:!0});var blt=s(gB);clo=r(blt,"BigBirdTokenizerFast"),blt.forEach(t),flo=r(Lk," (BigBird model)"),Lk.forEach(t),mlo=i(S),Xn=n(S,"LI",{});var yk=s(Xn);dle=n(yk,"STRONG",{});var vlt=s(dle);glo=r(vlt,"bigbird_pegasus"),vlt.forEach(t),hlo=r(yk," \u2014 "),hB=n(yk,"A",{href:!0});var Flt=s(hB);plo=r(Flt,"PegasusTokenizer"),Flt.forEach(t),_lo=r(yk," or "),pB=n(yk,"A",{href:!0});var Tlt=s(pB);ulo=r(Tlt,"PegasusTokenizerFast"),Tlt.forEach(t),blo=r(yk," (BigBird-Pegasus model)"),yk.forEach(t),vlo=i(S),zn=n(S,"LI",{});var xk=s(zn);cle=n(xk,"STRONG",{});var Mlt=s(cle);Flo=r(Mlt,"blenderbot"),Mlt.forEach(t),Tlo=r(xk," \u2014 "),_B=n(xk,"A",{href:!0});var Elt=s(_B);Mlo=r(Elt,"BlenderbotTokenizer"),Elt.forEach(t),Elo=r(xk," or "),uB=n(xk,"A",{href:!0});var Clt=s(uB);Clo=r(Clt,"BlenderbotTokenizerFast"),Clt.forEach(t),wlo=r(xk," (Blenderbot model)"),xk.forEach(t),Alo=i(S),ah=n(S,"LI",{});var Fye=s(ah);fle=n(Fye,"STRONG",{});var wlt=s(fle);Llo=r(wlt,"blenderbot-small"),wlt.forEach(t),ylo=r(Fye," \u2014 "),bB=n(Fye,"A",{href:!0});var Alt=s(bB);xlo=r(Alt,"BlenderbotSmallTokenizer"),Alt.forEach(t),$lo=r(Fye," (BlenderbotSmall model)"),Fye.forEach(t),klo=i(S),nh=n(S,"LI",{});var Tye=s(nh);mle=n(Tye,"STRONG",{});var Llt=s(mle);Slo=r(Llt,"bloom"),Llt.forEach(t),Rlo=r(Tye," \u2014 "),vB=n(Tye,"A",{href:!0});var ylt=s(vB);Plo=r(ylt,"BloomTokenizerFast"),ylt.forEach(t),Blo=r(Tye," (BLOOM model)"),Tye.forEach(t),Ilo=i(S),sh=n(S,"LI",{});var Mye=s(sh);gle=n(Mye,"STRONG",{});var xlt=s(gle);Nlo=r(xlt,"byt5"),xlt.forEach(t),qlo=r(Mye," \u2014 "),FB=n(Mye,"A",{href:!0});var $lt=s(FB);jlo=r($lt,"ByT5Tokenizer"),$lt.forEach(t),Dlo=r(Mye," (ByT5 model)"),Mye.forEach(t),Glo=i(S),Qn=n(S,"LI",{});var $k=s(Qn);hle=n($k,"STRONG",{});var klt=s(hle);Olo=r(klt,"camembert"),klt.forEach(t),Vlo=r($k," \u2014 "),TB=n($k,"A",{href:!0});var Slt=s(TB);Xlo=r(Slt,"CamembertTokenizer"),Slt.forEach(t),zlo=r($k," or "),MB=n($k,"A",{href:!0});var Rlt=s(MB);Qlo=r(Rlt,"CamembertTokenizerFast"),Rlt.forEach(t),Wlo=r($k," (CamemBERT model)"),$k.forEach(t),Hlo=i(S),lh=n(S,"LI",{});var Eye=s(lh);ple=n(Eye,"STRONG",{});var Plt=s(ple);Ulo=r(Plt,"canine"),Plt.forEach(t),Jlo=r(Eye," \u2014 "),EB=n(Eye,"A",{href:!0});var Blt=s(EB);Ylo=r(Blt,"CanineTokenizer"),Blt.forEach(t),Klo=r(Eye," (CANINE model)"),Eye.forEach(t),Zlo=i(S),Wn=n(S,"LI",{});var kk=s(Wn);_le=n(kk,"STRONG",{});var Ilt=s(_le);eio=r(Ilt,"clip"),Ilt.forEach(t),oio=r(kk," \u2014 "),CB=n(kk,"A",{href:!0});var Nlt=s(CB);rio=r(Nlt,"CLIPTokenizer"),Nlt.forEach(t),tio=r(kk," or "),wB=n(kk,"A",{href:!0});var qlt=s(wB);aio=r(qlt,"CLIPTokenizerFast"),qlt.forEach(t),nio=r(kk," (CLIP model)"),kk.forEach(t),sio=i(S),Hn=n(S,"LI",{});var Sk=s(Hn);ule=n(Sk,"STRONG",{});var jlt=s(ule);lio=r(jlt,"codegen"),jlt.forEach(t),iio=r(Sk," \u2014 "),AB=n(Sk,"A",{href:!0});var Dlt=s(AB);dio=r(Dlt,"CodeGenTokenizer"),Dlt.forEach(t),cio=r(Sk," or "),LB=n(Sk,"A",{href:!0});var Glt=s(LB);fio=r(Glt,"CodeGenTokenizerFast"),Glt.forEach(t),mio=r(Sk," (CodeGen model)"),Sk.forEach(t),gio=i(S),Un=n(S,"LI",{});var Rk=s(Un);ble=n(Rk,"STRONG",{});var Olt=s(ble);hio=r(Olt,"convbert"),Olt.forEach(t),pio=r(Rk," \u2014 "),yB=n(Rk,"A",{href:!0});var Vlt=s(yB);_io=r(Vlt,"ConvBertTokenizer"),Vlt.forEach(t),uio=r(Rk," or "),xB=n(Rk,"A",{href:!0});var Xlt=s(xB);bio=r(Xlt,"ConvBertTokenizerFast"),Xlt.forEach(t),vio=r(Rk," (ConvBERT model)"),Rk.forEach(t),Fio=i(S),Jn=n(S,"LI",{});var Pk=s(Jn);vle=n(Pk,"STRONG",{});var zlt=s(vle);Tio=r(zlt,"cpm"),zlt.forEach(t),Mio=r(Pk," \u2014 "),$B=n(Pk,"A",{href:!0});var Qlt=s($B);Eio=r(Qlt,"CpmTokenizer"),Qlt.forEach(t),Cio=r(Pk," or "),kB=n(Pk,"A",{href:!0});var Wlt=s(kB);wio=r(Wlt,"CpmTokenizerFast"),Wlt.forEach(t),Aio=r(Pk," (CPM model)"),Pk.forEach(t),Lio=i(S),ih=n(S,"LI",{});var Cye=s(ih);Fle=n(Cye,"STRONG",{});var Hlt=s(Fle);yio=r(Hlt,"ctrl"),Hlt.forEach(t),xio=r(Cye," \u2014 "),SB=n(Cye,"A",{href:!0});var Ult=s(SB);$io=r(Ult,"CTRLTokenizer"),Ult.forEach(t),kio=r(Cye," (CTRL model)"),Cye.forEach(t),Sio=i(S),Yn=n(S,"LI",{});var Bk=s(Yn);Tle=n(Bk,"STRONG",{});var Jlt=s(Tle);Rio=r(Jlt,"data2vec-text"),Jlt.forEach(t),Pio=r(Bk," \u2014 "),RB=n(Bk,"A",{href:!0});var Ylt=s(RB);Bio=r(Ylt,"RobertaTokenizer"),Ylt.forEach(t),Iio=r(Bk," or "),PB=n(Bk,"A",{href:!0});var Klt=s(PB);Nio=r(Klt,"RobertaTokenizerFast"),Klt.forEach(t),qio=r(Bk," (Data2VecText model)"),Bk.forEach(t),jio=i(S),Kn=n(S,"LI",{});var Ik=s(Kn);Mle=n(Ik,"STRONG",{});var Zlt=s(Mle);Dio=r(Zlt,"deberta"),Zlt.forEach(t),Gio=r(Ik," \u2014 "),BB=n(Ik,"A",{href:!0});var eit=s(BB);Oio=r(eit,"DebertaTokenizer"),eit.forEach(t),Vio=r(Ik," or "),IB=n(Ik,"A",{href:!0});var oit=s(IB);Xio=r(oit,"DebertaTokenizerFast"),oit.forEach(t),zio=r(Ik," (DeBERTa model)"),Ik.forEach(t),Qio=i(S),Zn=n(S,"LI",{});var Nk=s(Zn);Ele=n(Nk,"STRONG",{});var rit=s(Ele);Wio=r(rit,"deberta-v2"),rit.forEach(t),Hio=r(Nk," \u2014 "),NB=n(Nk,"A",{href:!0});var tit=s(NB);Uio=r(tit,"DebertaV2Tokenizer"),tit.forEach(t),Jio=r(Nk," or "),qB=n(Nk,"A",{href:!0});var ait=s(qB);Yio=r(ait,"DebertaV2TokenizerFast"),ait.forEach(t),Kio=r(Nk," (DeBERTa-v2 model)"),Nk.forEach(t),Zio=i(S),es=n(S,"LI",{});var qk=s(es);Cle=n(qk,"STRONG",{});var nit=s(Cle);edo=r(nit,"distilbert"),nit.forEach(t),odo=r(qk," \u2014 "),jB=n(qk,"A",{href:!0});var sit=s(jB);rdo=r(sit,"DistilBertTokenizer"),sit.forEach(t),tdo=r(qk," or "),DB=n(qk,"A",{href:!0});var lit=s(DB);ado=r(lit,"DistilBertTokenizerFast"),lit.forEach(t),ndo=r(qk," (DistilBERT model)"),qk.forEach(t),sdo=i(S),os=n(S,"LI",{});var jk=s(os);wle=n(jk,"STRONG",{});var iit=s(wle);ldo=r(iit,"dpr"),iit.forEach(t),ido=r(jk," \u2014 "),GB=n(jk,"A",{href:!0});var dit=s(GB);ddo=r(dit,"DPRQuestionEncoderTokenizer"),dit.forEach(t),cdo=r(jk," or "),OB=n(jk,"A",{href:!0});var cit=s(OB);fdo=r(cit,"DPRQuestionEncoderTokenizerFast"),cit.forEach(t),mdo=r(jk," (DPR model)"),jk.forEach(t),gdo=i(S),rs=n(S,"LI",{});var Dk=s(rs);Ale=n(Dk,"STRONG",{});var fit=s(Ale);hdo=r(fit,"electra"),fit.forEach(t),pdo=r(Dk," \u2014 "),VB=n(Dk,"A",{href:!0});var mit=s(VB);_do=r(mit,"ElectraTokenizer"),mit.forEach(t),udo=r(Dk," or "),XB=n(Dk,"A",{href:!0});var git=s(XB);bdo=r(git,"ElectraTokenizerFast"),git.forEach(t),vdo=r(Dk," (ELECTRA model)"),Dk.forEach(t),Fdo=i(S),dh=n(S,"LI",{});var wye=s(dh);Lle=n(wye,"STRONG",{});var hit=s(Lle);Tdo=r(hit,"flaubert"),hit.forEach(t),Mdo=r(wye," \u2014 "),zB=n(wye,"A",{href:!0});var pit=s(zB);Edo=r(pit,"FlaubertTokenizer"),pit.forEach(t),Cdo=r(wye," (FlauBERT model)"),wye.forEach(t),wdo=i(S),ts=n(S,"LI",{});var Gk=s(ts);yle=n(Gk,"STRONG",{});var _it=s(yle);Ado=r(_it,"fnet"),_it.forEach(t),Ldo=r(Gk," \u2014 "),QB=n(Gk,"A",{href:!0});var uit=s(QB);ydo=r(uit,"FNetTokenizer"),uit.forEach(t),xdo=r(Gk," or "),WB=n(Gk,"A",{href:!0});var bit=s(WB);$do=r(bit,"FNetTokenizerFast"),bit.forEach(t),kdo=r(Gk," (FNet model)"),Gk.forEach(t),Sdo=i(S),ch=n(S,"LI",{});var Aye=s(ch);xle=n(Aye,"STRONG",{});var vit=s(xle);Rdo=r(vit,"fsmt"),vit.forEach(t),Pdo=r(Aye," \u2014 "),HB=n(Aye,"A",{href:!0});var Fit=s(HB);Bdo=r(Fit,"FSMTTokenizer"),Fit.forEach(t),Ido=r(Aye," (FairSeq Machine-Translation model)"),Aye.forEach(t),Ndo=i(S),as=n(S,"LI",{});var Ok=s(as);$le=n(Ok,"STRONG",{});var Tit=s($le);qdo=r(Tit,"funnel"),Tit.forEach(t),jdo=r(Ok," \u2014 "),UB=n(Ok,"A",{href:!0});var Mit=s(UB);Ddo=r(Mit,"FunnelTokenizer"),Mit.forEach(t),Gdo=r(Ok," or "),JB=n(Ok,"A",{href:!0});var Eit=s(JB);Odo=r(Eit,"FunnelTokenizerFast"),Eit.forEach(t),Vdo=r(Ok," (Funnel Transformer model)"),Ok.forEach(t),Xdo=i(S),ns=n(S,"LI",{});var Vk=s(ns);kle=n(Vk,"STRONG",{});var Cit=s(kle);zdo=r(Cit,"gpt2"),Cit.forEach(t),Qdo=r(Vk," \u2014 "),YB=n(Vk,"A",{href:!0});var wit=s(YB);Wdo=r(wit,"GPT2Tokenizer"),wit.forEach(t),Hdo=r(Vk," or "),KB=n(Vk,"A",{href:!0});var Ait=s(KB);Udo=r(Ait,"GPT2TokenizerFast"),Ait.forEach(t),Jdo=r(Vk," (OpenAI GPT-2 model)"),Vk.forEach(t),Ydo=i(S),ss=n(S,"LI",{});var Xk=s(ss);Sle=n(Xk,"STRONG",{});var Lit=s(Sle);Kdo=r(Lit,"gpt_neo"),Lit.forEach(t),Zdo=r(Xk," \u2014 "),ZB=n(Xk,"A",{href:!0});var yit=s(ZB);eco=r(yit,"GPT2Tokenizer"),yit.forEach(t),oco=r(Xk," or "),eI=n(Xk,"A",{href:!0});var xit=s(eI);rco=r(xit,"GPT2TokenizerFast"),xit.forEach(t),tco=r(Xk," (GPT Neo model)"),Xk.forEach(t),aco=i(S),fh=n(S,"LI",{});var Lye=s(fh);Rle=n(Lye,"STRONG",{});var $it=s(Rle);nco=r($it,"gpt_neox"),$it.forEach(t),sco=r(Lye," \u2014 "),oI=n(Lye,"A",{href:!0});var kit=s(oI);lco=r(kit,"GPTNeoXTokenizerFast"),kit.forEach(t),ico=r(Lye," (GPT NeoX model)"),Lye.forEach(t),dco=i(S),ls=n(S,"LI",{});var zk=s(ls);Ple=n(zk,"STRONG",{});var Sit=s(Ple);cco=r(Sit,"gptj"),Sit.forEach(t),fco=r(zk," \u2014 "),rI=n(zk,"A",{href:!0});var Rit=s(rI);mco=r(Rit,"GPT2Tokenizer"),Rit.forEach(t),gco=r(zk," or "),tI=n(zk,"A",{href:!0});var Pit=s(tI);hco=r(Pit,"GPT2TokenizerFast"),Pit.forEach(t),pco=r(zk," (GPT-J model)"),zk.forEach(t),_co=i(S),is=n(S,"LI",{});var Qk=s(is);Ble=n(Qk,"STRONG",{});var Bit=s(Ble);uco=r(Bit,"groupvit"),Bit.forEach(t),bco=r(Qk," \u2014 "),aI=n(Qk,"A",{href:!0});var Iit=s(aI);vco=r(Iit,"CLIPTokenizer"),Iit.forEach(t),Fco=r(Qk," or "),nI=n(Qk,"A",{href:!0});var Nit=s(nI);Tco=r(Nit,"CLIPTokenizerFast"),Nit.forEach(t),Mco=r(Qk," (GroupViT model)"),Qk.forEach(t),Eco=i(S),ds=n(S,"LI",{});var Wk=s(ds);Ile=n(Wk,"STRONG",{});var qit=s(Ile);Cco=r(qit,"herbert"),qit.forEach(t),wco=r(Wk," \u2014 "),sI=n(Wk,"A",{href:!0});var jit=s(sI);Aco=r(jit,"HerbertTokenizer"),jit.forEach(t),Lco=r(Wk," or "),lI=n(Wk,"A",{href:!0});var Dit=s(lI);yco=r(Dit,"HerbertTokenizerFast"),Dit.forEach(t),xco=r(Wk," (HerBERT model)"),Wk.forEach(t),$co=i(S),mh=n(S,"LI",{});var yye=s(mh);Nle=n(yye,"STRONG",{});var Git=s(Nle);kco=r(Git,"hubert"),Git.forEach(t),Sco=r(yye," \u2014 "),iI=n(yye,"A",{href:!0});var Oit=s(iI);Rco=r(Oit,"Wav2Vec2CTCTokenizer"),Oit.forEach(t),Pco=r(yye," (Hubert model)"),yye.forEach(t),Bco=i(S),cs=n(S,"LI",{});var Hk=s(cs);qle=n(Hk,"STRONG",{});var Vit=s(qle);Ico=r(Vit,"ibert"),Vit.forEach(t),Nco=r(Hk," \u2014 "),dI=n(Hk,"A",{href:!0});var Xit=s(dI);qco=r(Xit,"RobertaTokenizer"),Xit.forEach(t),jco=r(Hk," or "),cI=n(Hk,"A",{href:!0});var zit=s(cI);Dco=r(zit,"RobertaTokenizerFast"),zit.forEach(t),Gco=r(Hk," (I-BERT model)"),Hk.forEach(t),Oco=i(S),fs=n(S,"LI",{});var Uk=s(fs);jle=n(Uk,"STRONG",{});var Qit=s(jle);Vco=r(Qit,"layoutlm"),Qit.forEach(t),Xco=r(Uk," \u2014 "),fI=n(Uk,"A",{href:!0});var Wit=s(fI);zco=r(Wit,"LayoutLMTokenizer"),Wit.forEach(t),Qco=r(Uk," or "),mI=n(Uk,"A",{href:!0});var Hit=s(mI);Wco=r(Hit,"LayoutLMTokenizerFast"),Hit.forEach(t),Hco=r(Uk," (LayoutLM model)"),Uk.forEach(t),Uco=i(S),ms=n(S,"LI",{});var Jk=s(ms);Dle=n(Jk,"STRONG",{});var Uit=s(Dle);Jco=r(Uit,"layoutlmv2"),Uit.forEach(t),Yco=r(Jk," \u2014 "),gI=n(Jk,"A",{href:!0});var Jit=s(gI);Kco=r(Jit,"LayoutLMv2Tokenizer"),Jit.forEach(t),Zco=r(Jk," or "),hI=n(Jk,"A",{href:!0});var Yit=s(hI);efo=r(Yit,"LayoutLMv2TokenizerFast"),Yit.forEach(t),ofo=r(Jk," (LayoutLMv2 model)"),Jk.forEach(t),rfo=i(S),gs=n(S,"LI",{});var Yk=s(gs);Gle=n(Yk,"STRONG",{});var Kit=s(Gle);tfo=r(Kit,"layoutlmv3"),Kit.forEach(t),afo=r(Yk," \u2014 "),pI=n(Yk,"A",{href:!0});var Zit=s(pI);nfo=r(Zit,"LayoutLMv3Tokenizer"),Zit.forEach(t),sfo=r(Yk," or "),_I=n(Yk,"A",{href:!0});var edt=s(_I);lfo=r(edt,"LayoutLMv3TokenizerFast"),edt.forEach(t),ifo=r(Yk," (LayoutLMv3 model)"),Yk.forEach(t),dfo=i(S),hs=n(S,"LI",{});var Kk=s(hs);Ole=n(Kk,"STRONG",{});var odt=s(Ole);cfo=r(odt,"layoutxlm"),odt.forEach(t),ffo=r(Kk," \u2014 "),uI=n(Kk,"A",{href:!0});var rdt=s(uI);mfo=r(rdt,"LayoutXLMTokenizer"),rdt.forEach(t),gfo=r(Kk," or "),bI=n(Kk,"A",{href:!0});var tdt=s(bI);hfo=r(tdt,"LayoutXLMTokenizerFast"),tdt.forEach(t),pfo=r(Kk," (LayoutXLM model)"),Kk.forEach(t),_fo=i(S),ps=n(S,"LI",{});var Zk=s(ps);Vle=n(Zk,"STRONG",{});var adt=s(Vle);ufo=r(adt,"led"),adt.forEach(t),bfo=r(Zk," \u2014 "),vI=n(Zk,"A",{href:!0});var ndt=s(vI);vfo=r(ndt,"LEDTokenizer"),ndt.forEach(t),Ffo=r(Zk," or "),FI=n(Zk,"A",{href:!0});var sdt=s(FI);Tfo=r(sdt,"LEDTokenizerFast"),sdt.forEach(t),Mfo=r(Zk," (LED model)"),Zk.forEach(t),Efo=i(S),_s=n(S,"LI",{});var eS=s(_s);Xle=n(eS,"STRONG",{});var ldt=s(Xle);Cfo=r(ldt,"longformer"),ldt.forEach(t),wfo=r(eS," \u2014 "),TI=n(eS,"A",{href:!0});var idt=s(TI);Afo=r(idt,"LongformerTokenizer"),idt.forEach(t),Lfo=r(eS," or "),MI=n(eS,"A",{href:!0});var ddt=s(MI);yfo=r(ddt,"LongformerTokenizerFast"),ddt.forEach(t),xfo=r(eS," (Longformer model)"),eS.forEach(t),$fo=i(S),us=n(S,"LI",{});var oS=s(us);zle=n(oS,"STRONG",{});var cdt=s(zle);kfo=r(cdt,"longt5"),cdt.forEach(t),Sfo=r(oS," \u2014 "),EI=n(oS,"A",{href:!0});var fdt=s(EI);Rfo=r(fdt,"T5Tokenizer"),fdt.forEach(t),Pfo=r(oS," or "),CI=n(oS,"A",{href:!0});var mdt=s(CI);Bfo=r(mdt,"T5TokenizerFast"),mdt.forEach(t),Ifo=r(oS," (LongT5 model)"),oS.forEach(t),Nfo=i(S),gh=n(S,"LI",{});var xye=s(gh);Qle=n(xye,"STRONG",{});var gdt=s(Qle);qfo=r(gdt,"luke"),gdt.forEach(t),jfo=r(xye," \u2014 "),wI=n(xye,"A",{href:!0});var hdt=s(wI);Dfo=r(hdt,"LukeTokenizer"),hdt.forEach(t),Gfo=r(xye," (LUKE model)"),xye.forEach(t),Ofo=i(S),bs=n(S,"LI",{});var rS=s(bs);Wle=n(rS,"STRONG",{});var pdt=s(Wle);Vfo=r(pdt,"lxmert"),pdt.forEach(t),Xfo=r(rS," \u2014 "),AI=n(rS,"A",{href:!0});var _dt=s(AI);zfo=r(_dt,"LxmertTokenizer"),_dt.forEach(t),Qfo=r(rS," or "),LI=n(rS,"A",{href:!0});var udt=s(LI);Wfo=r(udt,"LxmertTokenizerFast"),udt.forEach(t),Hfo=r(rS," (LXMERT model)"),rS.forEach(t),Ufo=i(S),hh=n(S,"LI",{});var $ye=s(hh);Hle=n($ye,"STRONG",{});var bdt=s(Hle);Jfo=r(bdt,"m2m_100"),bdt.forEach(t),Yfo=r($ye," \u2014 "),yI=n($ye,"A",{href:!0});var vdt=s(yI);Kfo=r(vdt,"M2M100Tokenizer"),vdt.forEach(t),Zfo=r($ye," (M2M100 model)"),$ye.forEach(t),emo=i(S),ph=n(S,"LI",{});var kye=s(ph);Ule=n(kye,"STRONG",{});var Fdt=s(Ule);omo=r(Fdt,"marian"),Fdt.forEach(t),rmo=r(kye," \u2014 "),xI=n(kye,"A",{href:!0});var Tdt=s(xI);tmo=r(Tdt,"MarianTokenizer"),Tdt.forEach(t),amo=r(kye," (Marian model)"),kye.forEach(t),nmo=i(S),vs=n(S,"LI",{});var tS=s(vs);Jle=n(tS,"STRONG",{});var Mdt=s(Jle);smo=r(Mdt,"mbart"),Mdt.forEach(t),lmo=r(tS," \u2014 "),$I=n(tS,"A",{href:!0});var Edt=s($I);imo=r(Edt,"MBartTokenizer"),Edt.forEach(t),dmo=r(tS," or "),kI=n(tS,"A",{href:!0});var Cdt=s(kI);cmo=r(Cdt,"MBartTokenizerFast"),Cdt.forEach(t),fmo=r(tS," (mBART model)"),tS.forEach(t),mmo=i(S),Fs=n(S,"LI",{});var aS=s(Fs);Yle=n(aS,"STRONG",{});var wdt=s(Yle);gmo=r(wdt,"mbart50"),wdt.forEach(t),hmo=r(aS," \u2014 "),SI=n(aS,"A",{href:!0});var Adt=s(SI);pmo=r(Adt,"MBart50Tokenizer"),Adt.forEach(t),_mo=r(aS," or "),RI=n(aS,"A",{href:!0});var Ldt=s(RI);umo=r(Ldt,"MBart50TokenizerFast"),Ldt.forEach(t),bmo=r(aS," (mBART-50 model)"),aS.forEach(t),vmo=i(S),Ts=n(S,"LI",{});var nS=s(Ts);Kle=n(nS,"STRONG",{});var ydt=s(Kle);Fmo=r(ydt,"megatron-bert"),ydt.forEach(t),Tmo=r(nS," \u2014 "),PI=n(nS,"A",{href:!0});var xdt=s(PI);Mmo=r(xdt,"BertTokenizer"),xdt.forEach(t),Emo=r(nS," or "),BI=n(nS,"A",{href:!0});var $dt=s(BI);Cmo=r($dt,"BertTokenizerFast"),$dt.forEach(t),wmo=r(nS," (Megatron-BERT model)"),nS.forEach(t),Amo=i(S),_h=n(S,"LI",{});var Sye=s(_h);Zle=n(Sye,"STRONG",{});var kdt=s(Zle);Lmo=r(kdt,"mluke"),kdt.forEach(t),ymo=r(Sye," \u2014 "),II=n(Sye,"A",{href:!0});var Sdt=s(II);xmo=r(Sdt,"MLukeTokenizer"),Sdt.forEach(t),$mo=r(Sye," (mLUKE model)"),Sye.forEach(t),kmo=i(S),Ms=n(S,"LI",{});var sS=s(Ms);eie=n(sS,"STRONG",{});var Rdt=s(eie);Smo=r(Rdt,"mobilebert"),Rdt.forEach(t),Rmo=r(sS," \u2014 "),NI=n(sS,"A",{href:!0});var Pdt=s(NI);Pmo=r(Pdt,"MobileBertTokenizer"),Pdt.forEach(t),Bmo=r(sS," or "),qI=n(sS,"A",{href:!0});var Bdt=s(qI);Imo=r(Bdt,"MobileBertTokenizerFast"),Bdt.forEach(t),Nmo=r(sS," (MobileBERT model)"),sS.forEach(t),qmo=i(S),Es=n(S,"LI",{});var lS=s(Es);oie=n(lS,"STRONG",{});var Idt=s(oie);jmo=r(Idt,"mpnet"),Idt.forEach(t),Dmo=r(lS," \u2014 "),jI=n(lS,"A",{href:!0});var Ndt=s(jI);Gmo=r(Ndt,"MPNetTokenizer"),Ndt.forEach(t),Omo=r(lS," or "),DI=n(lS,"A",{href:!0});var qdt=s(DI);Vmo=r(qdt,"MPNetTokenizerFast"),qdt.forEach(t),Xmo=r(lS," (MPNet model)"),lS.forEach(t),zmo=i(S),Cs=n(S,"LI",{});var iS=s(Cs);rie=n(iS,"STRONG",{});var jdt=s(rie);Qmo=r(jdt,"mt5"),jdt.forEach(t),Wmo=r(iS," \u2014 "),GI=n(iS,"A",{href:!0});var Ddt=s(GI);Hmo=r(Ddt,"MT5Tokenizer"),Ddt.forEach(t),Umo=r(iS," or "),OI=n(iS,"A",{href:!0});var Gdt=s(OI);Jmo=r(Gdt,"MT5TokenizerFast"),Gdt.forEach(t),Ymo=r(iS," (MT5 model)"),iS.forEach(t),Kmo=i(S),ws=n(S,"LI",{});var dS=s(ws);tie=n(dS,"STRONG",{});var Odt=s(tie);Zmo=r(Odt,"mvp"),Odt.forEach(t),ego=r(dS," \u2014 "),VI=n(dS,"A",{href:!0});var Vdt=s(VI);ogo=r(Vdt,"MvpTokenizer"),Vdt.forEach(t),rgo=r(dS," or "),XI=n(dS,"A",{href:!0});var Xdt=s(XI);tgo=r(Xdt,"MvpTokenizerFast"),Xdt.forEach(t),ago=r(dS," (MVP model)"),dS.forEach(t),ngo=i(S),As=n(S,"LI",{});var cS=s(As);aie=n(cS,"STRONG",{});var zdt=s(aie);sgo=r(zdt,"nezha"),zdt.forEach(t),lgo=r(cS," \u2014 "),zI=n(cS,"A",{href:!0});var Qdt=s(zI);igo=r(Qdt,"BertTokenizer"),Qdt.forEach(t),dgo=r(cS," or "),QI=n(cS,"A",{href:!0});var Wdt=s(QI);cgo=r(Wdt,"BertTokenizerFast"),Wdt.forEach(t),fgo=r(cS," (Nezha model)"),cS.forEach(t),mgo=i(S),Ls=n(S,"LI",{});var fS=s(Ls);nie=n(fS,"STRONG",{});var Hdt=s(nie);ggo=r(Hdt,"nystromformer"),Hdt.forEach(t),hgo=r(fS," \u2014 "),WI=n(fS,"A",{href:!0});var Udt=s(WI);pgo=r(Udt,"AlbertTokenizer"),Udt.forEach(t),_go=r(fS," or "),HI=n(fS,"A",{href:!0});var Jdt=s(HI);ugo=r(Jdt,"AlbertTokenizerFast"),Jdt.forEach(t),bgo=r(fS," (Nystr\xF6mformer model)"),fS.forEach(t),vgo=i(S),ys=n(S,"LI",{});var mS=s(ys);sie=n(mS,"STRONG",{});var Ydt=s(sie);Fgo=r(Ydt,"openai-gpt"),Ydt.forEach(t),Tgo=r(mS," \u2014 "),UI=n(mS,"A",{href:!0});var Kdt=s(UI);Mgo=r(Kdt,"OpenAIGPTTokenizer"),Kdt.forEach(t),Ego=r(mS," or "),JI=n(mS,"A",{href:!0});var Zdt=s(JI);Cgo=r(Zdt,"OpenAIGPTTokenizerFast"),Zdt.forEach(t),wgo=r(mS," (OpenAI GPT model)"),mS.forEach(t),Ago=i(S),uh=n(S,"LI",{});var Rye=s(uh);lie=n(Rye,"STRONG",{});var ect=s(lie);Lgo=r(ect,"opt"),ect.forEach(t),ygo=r(Rye," \u2014 "),YI=n(Rye,"A",{href:!0});var oct=s(YI);xgo=r(oct,"GPT2Tokenizer"),oct.forEach(t),$go=r(Rye," (OPT model)"),Rye.forEach(t),kgo=i(S),xs=n(S,"LI",{});var gS=s(xs);iie=n(gS,"STRONG",{});var rct=s(iie);Sgo=r(rct,"pegasus"),rct.forEach(t),Rgo=r(gS," \u2014 "),KI=n(gS,"A",{href:!0});var tct=s(KI);Pgo=r(tct,"PegasusTokenizer"),tct.forEach(t),Bgo=r(gS," or "),ZI=n(gS,"A",{href:!0});var act=s(ZI);Igo=r(act,"PegasusTokenizerFast"),act.forEach(t),Ngo=r(gS," (Pegasus model)"),gS.forEach(t),qgo=i(S),bh=n(S,"LI",{});var Pye=s(bh);die=n(Pye,"STRONG",{});var nct=s(die);jgo=r(nct,"perceiver"),nct.forEach(t),Dgo=r(Pye," \u2014 "),eN=n(Pye,"A",{href:!0});var sct=s(eN);Ggo=r(sct,"PerceiverTokenizer"),sct.forEach(t),Ogo=r(Pye," (Perceiver model)"),Pye.forEach(t),Vgo=i(S),vh=n(S,"LI",{});var Bye=s(vh);cie=n(Bye,"STRONG",{});var lct=s(cie);Xgo=r(lct,"phobert"),lct.forEach(t),zgo=r(Bye," \u2014 "),oN=n(Bye,"A",{href:!0});var ict=s(oN);Qgo=r(ict,"PhobertTokenizer"),ict.forEach(t),Wgo=r(Bye," (PhoBERT model)"),Bye.forEach(t),Hgo=i(S),Fh=n(S,"LI",{});var Iye=s(Fh);fie=n(Iye,"STRONG",{});var dct=s(fie);Ugo=r(dct,"plbart"),dct.forEach(t),Jgo=r(Iye," \u2014 "),rN=n(Iye,"A",{href:!0});var cct=s(rN);Ygo=r(cct,"PLBartTokenizer"),cct.forEach(t),Kgo=r(Iye," (PLBart model)"),Iye.forEach(t),Zgo=i(S),Th=n(S,"LI",{});var Nye=s(Th);mie=n(Nye,"STRONG",{});var fct=s(mie);eho=r(fct,"prophetnet"),fct.forEach(t),oho=r(Nye," \u2014 "),tN=n(Nye,"A",{href:!0});var mct=s(tN);rho=r(mct,"ProphetNetTokenizer"),mct.forEach(t),tho=r(Nye," (ProphetNet model)"),Nye.forEach(t),aho=i(S),$s=n(S,"LI",{});var hS=s($s);gie=n(hS,"STRONG",{});var gct=s(gie);nho=r(gct,"qdqbert"),gct.forEach(t),sho=r(hS," \u2014 "),aN=n(hS,"A",{href:!0});var hct=s(aN);lho=r(hct,"BertTokenizer"),hct.forEach(t),iho=r(hS," or "),nN=n(hS,"A",{href:!0});var pct=s(nN);dho=r(pct,"BertTokenizerFast"),pct.forEach(t),cho=r(hS," (QDQBert model)"),hS.forEach(t),fho=i(S),Mh=n(S,"LI",{});var qye=s(Mh);hie=n(qye,"STRONG",{});var _ct=s(hie);mho=r(_ct,"rag"),_ct.forEach(t),gho=r(qye," \u2014 "),sN=n(qye,"A",{href:!0});var uct=s(sN);hho=r(uct,"RagTokenizer"),uct.forEach(t),pho=r(qye," (RAG model)"),qye.forEach(t),_ho=i(S),ks=n(S,"LI",{});var pS=s(ks);pie=n(pS,"STRONG",{});var bct=s(pie);uho=r(bct,"realm"),bct.forEach(t),bho=r(pS," \u2014 "),lN=n(pS,"A",{href:!0});var vct=s(lN);vho=r(vct,"RealmTokenizer"),vct.forEach(t),Fho=r(pS," or "),iN=n(pS,"A",{href:!0});var Fct=s(iN);Tho=r(Fct,"RealmTokenizerFast"),Fct.forEach(t),Mho=r(pS," (REALM model)"),pS.forEach(t),Eho=i(S),Ss=n(S,"LI",{});var _S=s(Ss);_ie=n(_S,"STRONG",{});var Tct=s(_ie);Cho=r(Tct,"reformer"),Tct.forEach(t),who=r(_S," \u2014 "),dN=n(_S,"A",{href:!0});var Mct=s(dN);Aho=r(Mct,"ReformerTokenizer"),Mct.forEach(t),Lho=r(_S," or "),cN=n(_S,"A",{href:!0});var Ect=s(cN);yho=r(Ect,"ReformerTokenizerFast"),Ect.forEach(t),xho=r(_S," (Reformer model)"),_S.forEach(t),$ho=i(S),Rs=n(S,"LI",{});var uS=s(Rs);uie=n(uS,"STRONG",{});var Cct=s(uie);kho=r(Cct,"rembert"),Cct.forEach(t),Sho=r(uS," \u2014 "),fN=n(uS,"A",{href:!0});var wct=s(fN);Rho=r(wct,"RemBertTokenizer"),wct.forEach(t),Pho=r(uS," or "),mN=n(uS,"A",{href:!0});var Act=s(mN);Bho=r(Act,"RemBertTokenizerFast"),Act.forEach(t),Iho=r(uS," (RemBERT model)"),uS.forEach(t),Nho=i(S),Ps=n(S,"LI",{});var bS=s(Ps);bie=n(bS,"STRONG",{});var Lct=s(bie);qho=r(Lct,"retribert"),Lct.forEach(t),jho=r(bS," \u2014 "),gN=n(bS,"A",{href:!0});var yct=s(gN);Dho=r(yct,"RetriBertTokenizer"),yct.forEach(t),Gho=r(bS," or "),hN=n(bS,"A",{href:!0});var xct=s(hN);Oho=r(xct,"RetriBertTokenizerFast"),xct.forEach(t),Vho=r(bS," (RetriBERT model)"),bS.forEach(t),Xho=i(S),Bs=n(S,"LI",{});var vS=s(Bs);vie=n(vS,"STRONG",{});var $ct=s(vie);zho=r($ct,"roberta"),$ct.forEach(t),Qho=r(vS," \u2014 "),pN=n(vS,"A",{href:!0});var kct=s(pN);Who=r(kct,"RobertaTokenizer"),kct.forEach(t),Hho=r(vS," or "),_N=n(vS,"A",{href:!0});var Sct=s(_N);Uho=r(Sct,"RobertaTokenizerFast"),Sct.forEach(t),Jho=r(vS," (RoBERTa model)"),vS.forEach(t),Yho=i(S),Is=n(S,"LI",{});var FS=s(Is);Fie=n(FS,"STRONG",{});var Rct=s(Fie);Kho=r(Rct,"roformer"),Rct.forEach(t),Zho=r(FS," \u2014 "),uN=n(FS,"A",{href:!0});var Pct=s(uN);epo=r(Pct,"RoFormerTokenizer"),Pct.forEach(t),opo=r(FS," or "),bN=n(FS,"A",{href:!0});var Bct=s(bN);rpo=r(Bct,"RoFormerTokenizerFast"),Bct.forEach(t),tpo=r(FS," (RoFormer model)"),FS.forEach(t),apo=i(S),Eh=n(S,"LI",{});var jye=s(Eh);Tie=n(jye,"STRONG",{});var Ict=s(Tie);npo=r(Ict,"speech_to_text"),Ict.forEach(t),spo=r(jye," \u2014 "),vN=n(jye,"A",{href:!0});var Nct=s(vN);lpo=r(Nct,"Speech2TextTokenizer"),Nct.forEach(t),ipo=r(jye," (Speech2Text model)"),jye.forEach(t),dpo=i(S),Ch=n(S,"LI",{});var Dye=s(Ch);Mie=n(Dye,"STRONG",{});var qct=s(Mie);cpo=r(qct,"speech_to_text_2"),qct.forEach(t),fpo=r(Dye," \u2014 "),FN=n(Dye,"A",{href:!0});var jct=s(FN);mpo=r(jct,"Speech2Text2Tokenizer"),jct.forEach(t),gpo=r(Dye," (Speech2Text2 model)"),Dye.forEach(t),hpo=i(S),Ns=n(S,"LI",{});var TS=s(Ns);Eie=n(TS,"STRONG",{});var Dct=s(Eie);ppo=r(Dct,"splinter"),Dct.forEach(t),_po=r(TS," \u2014 "),TN=n(TS,"A",{href:!0});var Gct=s(TN);upo=r(Gct,"SplinterTokenizer"),Gct.forEach(t),bpo=r(TS," or "),MN=n(TS,"A",{href:!0});var Oct=s(MN);vpo=r(Oct,"SplinterTokenizerFast"),Oct.forEach(t),Fpo=r(TS," (Splinter model)"),TS.forEach(t),Tpo=i(S),qs=n(S,"LI",{});var MS=s(qs);Cie=n(MS,"STRONG",{});var Vct=s(Cie);Mpo=r(Vct,"squeezebert"),Vct.forEach(t),Epo=r(MS," \u2014 "),EN=n(MS,"A",{href:!0});var Xct=s(EN);Cpo=r(Xct,"SqueezeBertTokenizer"),Xct.forEach(t),wpo=r(MS," or "),CN=n(MS,"A",{href:!0});var zct=s(CN);Apo=r(zct,"SqueezeBertTokenizerFast"),zct.forEach(t),Lpo=r(MS," (SqueezeBERT model)"),MS.forEach(t),ypo=i(S),js=n(S,"LI",{});var ES=s(js);wie=n(ES,"STRONG",{});var Qct=s(wie);xpo=r(Qct,"t5"),Qct.forEach(t),$po=r(ES," \u2014 "),wN=n(ES,"A",{href:!0});var Wct=s(wN);kpo=r(Wct,"T5Tokenizer"),Wct.forEach(t),Spo=r(ES," or "),AN=n(ES,"A",{href:!0});var Hct=s(AN);Rpo=r(Hct,"T5TokenizerFast"),Hct.forEach(t),Ppo=r(ES," (T5 model)"),ES.forEach(t),Bpo=i(S),wh=n(S,"LI",{});var Gye=s(wh);Aie=n(Gye,"STRONG",{});var Uct=s(Aie);Ipo=r(Uct,"tapas"),Uct.forEach(t),Npo=r(Gye," \u2014 "),LN=n(Gye,"A",{href:!0});var Jct=s(LN);qpo=r(Jct,"TapasTokenizer"),Jct.forEach(t),jpo=r(Gye," (TAPAS model)"),Gye.forEach(t),Dpo=i(S),Ah=n(S,"LI",{});var Oye=s(Ah);Lie=n(Oye,"STRONG",{});var Yct=s(Lie);Gpo=r(Yct,"tapex"),Yct.forEach(t),Opo=r(Oye," \u2014 "),yN=n(Oye,"A",{href:!0});var Kct=s(yN);Vpo=r(Kct,"TapexTokenizer"),Kct.forEach(t),Xpo=r(Oye," (TAPEX model)"),Oye.forEach(t),zpo=i(S),Lh=n(S,"LI",{});var Vye=s(Lh);yie=n(Vye,"STRONG",{});var Zct=s(yie);Qpo=r(Zct,"transfo-xl"),Zct.forEach(t),Wpo=r(Vye," \u2014 "),xN=n(Vye,"A",{href:!0});var eft=s(xN);Hpo=r(eft,"TransfoXLTokenizer"),eft.forEach(t),Upo=r(Vye," (Transformer-XL model)"),Vye.forEach(t),Jpo=i(S),Ds=n(S,"LI",{});var CS=s(Ds);xie=n(CS,"STRONG",{});var oft=s(xie);Ypo=r(oft,"vilt"),oft.forEach(t),Kpo=r(CS," \u2014 "),$N=n(CS,"A",{href:!0});var rft=s($N);Zpo=r(rft,"BertTokenizer"),rft.forEach(t),e_o=r(CS," or "),kN=n(CS,"A",{href:!0});var tft=s(kN);o_o=r(tft,"BertTokenizerFast"),tft.forEach(t),r_o=r(CS," (ViLT model)"),CS.forEach(t),t_o=i(S),Gs=n(S,"LI",{});var wS=s(Gs);$ie=n(wS,"STRONG",{});var aft=s($ie);a_o=r(aft,"visual_bert"),aft.forEach(t),n_o=r(wS," \u2014 "),SN=n(wS,"A",{href:!0});var nft=s(SN);s_o=r(nft,"BertTokenizer"),nft.forEach(t),l_o=r(wS," or "),RN=n(wS,"A",{href:!0});var sft=s(RN);i_o=r(sft,"BertTokenizerFast"),sft.forEach(t),d_o=r(wS," (VisualBERT model)"),wS.forEach(t),c_o=i(S),yh=n(S,"LI",{});var Xye=s(yh);kie=n(Xye,"STRONG",{});var lft=s(kie);f_o=r(lft,"wav2vec2"),lft.forEach(t),m_o=r(Xye," \u2014 "),PN=n(Xye,"A",{href:!0});var ift=s(PN);g_o=r(ift,"Wav2Vec2CTCTokenizer"),ift.forEach(t),h_o=r(Xye," (Wav2Vec2 model)"),Xye.forEach(t),p_o=i(S),xh=n(S,"LI",{});var zye=s(xh);Sie=n(zye,"STRONG",{});var dft=s(Sie);__o=r(dft,"wav2vec2-conformer"),dft.forEach(t),u_o=r(zye," \u2014 "),BN=n(zye,"A",{href:!0});var cft=s(BN);b_o=r(cft,"Wav2Vec2CTCTokenizer"),cft.forEach(t),v_o=r(zye," (Wav2Vec2-Conformer model)"),zye.forEach(t),F_o=i(S),$h=n(S,"LI",{});var Qye=s($h);Rie=n(Qye,"STRONG",{});var fft=s(Rie);T_o=r(fft,"wav2vec2_phoneme"),fft.forEach(t),M_o=r(Qye," \u2014 "),IN=n(Qye,"A",{href:!0});var mft=s(IN);E_o=r(mft,"Wav2Vec2PhonemeCTCTokenizer"),mft.forEach(t),C_o=r(Qye," (Wav2Vec2Phoneme model)"),Qye.forEach(t),w_o=i(S),Os=n(S,"LI",{});var AS=s(Os);Pie=n(AS,"STRONG",{});var gft=s(Pie);A_o=r(gft,"xglm"),gft.forEach(t),L_o=r(AS," \u2014 "),NN=n(AS,"A",{href:!0});var hft=s(NN);y_o=r(hft,"XGLMTokenizer"),hft.forEach(t),x_o=r(AS," or "),qN=n(AS,"A",{href:!0});var pft=s(qN);$_o=r(pft,"XGLMTokenizerFast"),pft.forEach(t),k_o=r(AS," (XGLM model)"),AS.forEach(t),S_o=i(S),kh=n(S,"LI",{});var Wye=s(kh);Bie=n(Wye,"STRONG",{});var _ft=s(Bie);R_o=r(_ft,"xlm"),_ft.forEach(t),P_o=r(Wye," \u2014 "),jN=n(Wye,"A",{href:!0});var uft=s(jN);B_o=r(uft,"XLMTokenizer"),uft.forEach(t),I_o=r(Wye," (XLM model)"),Wye.forEach(t),N_o=i(S),Sh=n(S,"LI",{});var Hye=s(Sh);Iie=n(Hye,"STRONG",{});var bft=s(Iie);q_o=r(bft,"xlm-prophetnet"),bft.forEach(t),j_o=r(Hye," \u2014 "),DN=n(Hye,"A",{href:!0});var vft=s(DN);D_o=r(vft,"XLMProphetNetTokenizer"),vft.forEach(t),G_o=r(Hye," (XLM-ProphetNet model)"),Hye.forEach(t),O_o=i(S),Vs=n(S,"LI",{});var LS=s(Vs);Nie=n(LS,"STRONG",{});var Fft=s(Nie);V_o=r(Fft,"xlm-roberta"),Fft.forEach(t),X_o=r(LS," \u2014 "),GN=n(LS,"A",{href:!0});var Tft=s(GN);z_o=r(Tft,"XLMRobertaTokenizer"),Tft.forEach(t),Q_o=r(LS," or "),ON=n(LS,"A",{href:!0});var Mft=s(ON);W_o=r(Mft,"XLMRobertaTokenizerFast"),Mft.forEach(t),H_o=r(LS," (XLM-RoBERTa model)"),LS.forEach(t),U_o=i(S),Xs=n(S,"LI",{});var yS=s(Xs);qie=n(yS,"STRONG",{});var Eft=s(qie);J_o=r(Eft,"xlm-roberta-xl"),Eft.forEach(t),Y_o=r(yS," \u2014 "),VN=n(yS,"A",{href:!0});var Cft=s(VN);K_o=r(Cft,"RobertaTokenizer"),Cft.forEach(t),Z_o=r(yS," or "),XN=n(yS,"A",{href:!0});var wft=s(XN);euo=r(wft,"RobertaTokenizerFast"),wft.forEach(t),ouo=r(yS," (XLM-RoBERTa-XL model)"),yS.forEach(t),ruo=i(S),zs=n(S,"LI",{});var xS=s(zs);jie=n(xS,"STRONG",{});var Aft=s(jie);tuo=r(Aft,"xlnet"),Aft.forEach(t),auo=r(xS," \u2014 "),zN=n(xS,"A",{href:!0});var Lft=s(zN);nuo=r(Lft,"XLNetTokenizer"),Lft.forEach(t),suo=r(xS," or "),QN=n(xS,"A",{href:!0});var yft=s(QN);luo=r(yft,"XLNetTokenizerFast"),yft.forEach(t),iuo=r(xS," (XLNet model)"),xS.forEach(t),duo=i(S),Qs=n(S,"LI",{});var $S=s(Qs);Die=n($S,"STRONG",{});var xft=s(Die);cuo=r(xft,"yoso"),xft.forEach(t),fuo=r($S," \u2014 "),WN=n($S,"A",{href:!0});var $ft=s(WN);muo=r($ft,"AlbertTokenizer"),$ft.forEach(t),guo=r($S," or "),HN=n($S,"A",{href:!0});var kft=s(HN);huo=r(kft,"AlbertTokenizerFast"),kft.forEach(t),puo=r($S," (YOSO model)"),$S.forEach(t),S.forEach(t),_uo=i(Zs),T(Rh.$$.fragment,Zs),Zs.forEach(t),uuo=i(Ks),Ph=n(Ks,"DIV",{class:!0});var fQe=s(Ph);T(bL.$$.fragment,fQe),buo=i(fQe),Gie=n(fQe,"P",{});var Sft=s(Gie);vuo=r(Sft,"Register a new tokenizer in this mapping."),Sft.forEach(t),fQe.forEach(t),Ks.forEach(t),cXe=i(f),qi=n(f,"H2",{class:!0});var mQe=s(qi);Bh=n(mQe,"A",{id:!0,class:!0,href:!0});var Rft=s(Bh);Oie=n(Rft,"SPAN",{});var Pft=s(Oie);T(vL.$$.fragment,Pft),Pft.forEach(t),Rft.forEach(t),Fuo=i(mQe),Vie=n(mQe,"SPAN",{});var Bft=s(Vie);Tuo=r(Bft,"AutoFeatureExtractor"),Bft.forEach(t),mQe.forEach(t),fXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(FL.$$.fragment,el),Muo=i(el),TL=n(el,"P",{});var gQe=s(TL);Euo=r(gQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UN=n(gQe,"A",{href:!0});var Ift=s(UN);Cuo=r(Ift,"AutoFeatureExtractor.from_pretrained()"),Ift.forEach(t),wuo=r(gQe," class method."),gQe.forEach(t),Auo=i(el),ML=n(el,"P",{});var hQe=s(ML);Luo=r(hQe,"This class cannot be instantiated directly using "),Xie=n(hQe,"CODE",{});var Nft=s(Xie);yuo=r(Nft,"__init__()"),Nft.forEach(t),xuo=r(hQe," (throws an error)."),hQe.forEach(t),$uo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(EL.$$.fragment,na),kuo=i(na),zie=n(na,"P",{});var qft=s(zie);Suo=r(qft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qft.forEach(t),Ruo=i(na),Ba=n(na,"P",{});var i6=s(Ba);Puo=r(i6,"The feature extractor class to instantiate is selected based on the "),Qie=n(i6,"CODE",{});var jft=s(Qie);Buo=r(jft,"model_type"),jft.forEach(t),Iuo=r(i6,` property of the config object
(either passed as an argument or loaded from `),Wie=n(i6,"CODE",{});var Dft=s(Wie);Nuo=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),quo=r(i6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hie=n(i6,"CODE",{});var Gft=s(Hie);juo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),Duo=r(i6,":"),i6.forEach(t),Guo=i(na),Y=n(na,"UL",{});var K=s(Y);Ih=n(K,"LI",{});var Uye=s(Ih);Uie=n(Uye,"STRONG",{});var Oft=s(Uie);Ouo=r(Oft,"beit"),Oft.forEach(t),Vuo=r(Uye," \u2014 "),JN=n(Uye,"A",{href:!0});var Vft=s(JN);Xuo=r(Vft,"BeitFeatureExtractor"),Vft.forEach(t),zuo=r(Uye," (BEiT model)"),Uye.forEach(t),Quo=i(K),Nh=n(K,"LI",{});var Jye=s(Nh);Jie=n(Jye,"STRONG",{});var Xft=s(Jie);Wuo=r(Xft,"clip"),Xft.forEach(t),Huo=r(Jye," \u2014 "),YN=n(Jye,"A",{href:!0});var zft=s(YN);Uuo=r(zft,"CLIPFeatureExtractor"),zft.forEach(t),Juo=r(Jye," (CLIP model)"),Jye.forEach(t),Yuo=i(K),qh=n(K,"LI",{});var Yye=s(qh);Yie=n(Yye,"STRONG",{});var Qft=s(Yie);Kuo=r(Qft,"convnext"),Qft.forEach(t),Zuo=r(Yye," \u2014 "),KN=n(Yye,"A",{href:!0});var Wft=s(KN);e1o=r(Wft,"ConvNextFeatureExtractor"),Wft.forEach(t),o1o=r(Yye," (ConvNeXT model)"),Yye.forEach(t),r1o=i(K),jh=n(K,"LI",{});var Kye=s(jh);Kie=n(Kye,"STRONG",{});var Hft=s(Kie);t1o=r(Hft,"cvt"),Hft.forEach(t),a1o=r(Kye," \u2014 "),ZN=n(Kye,"A",{href:!0});var Uft=s(ZN);n1o=r(Uft,"ConvNextFeatureExtractor"),Uft.forEach(t),s1o=r(Kye," (CvT model)"),Kye.forEach(t),l1o=i(K),Dh=n(K,"LI",{});var Zye=s(Dh);Zie=n(Zye,"STRONG",{});var Jft=s(Zie);i1o=r(Jft,"data2vec-audio"),Jft.forEach(t),d1o=r(Zye," \u2014 "),eq=n(Zye,"A",{href:!0});var Yft=s(eq);c1o=r(Yft,"Wav2Vec2FeatureExtractor"),Yft.forEach(t),f1o=r(Zye," (Data2VecAudio model)"),Zye.forEach(t),m1o=i(K),Gh=n(K,"LI",{});var e9e=s(Gh);ede=n(e9e,"STRONG",{});var Kft=s(ede);g1o=r(Kft,"data2vec-vision"),Kft.forEach(t),h1o=r(e9e," \u2014 "),oq=n(e9e,"A",{href:!0});var Zft=s(oq);p1o=r(Zft,"BeitFeatureExtractor"),Zft.forEach(t),_1o=r(e9e," (Data2VecVision model)"),e9e.forEach(t),u1o=i(K),Oh=n(K,"LI",{});var o9e=s(Oh);ode=n(o9e,"STRONG",{});var emt=s(ode);b1o=r(emt,"deit"),emt.forEach(t),v1o=r(o9e," \u2014 "),rq=n(o9e,"A",{href:!0});var omt=s(rq);F1o=r(omt,"DeiTFeatureExtractor"),omt.forEach(t),T1o=r(o9e," (DeiT model)"),o9e.forEach(t),M1o=i(K),Vh=n(K,"LI",{});var r9e=s(Vh);rde=n(r9e,"STRONG",{});var rmt=s(rde);E1o=r(rmt,"detr"),rmt.forEach(t),C1o=r(r9e," \u2014 "),tq=n(r9e,"A",{href:!0});var tmt=s(tq);w1o=r(tmt,"DetrFeatureExtractor"),tmt.forEach(t),A1o=r(r9e," (DETR model)"),r9e.forEach(t),L1o=i(K),Xh=n(K,"LI",{});var t9e=s(Xh);tde=n(t9e,"STRONG",{});var amt=s(tde);y1o=r(amt,"dpt"),amt.forEach(t),x1o=r(t9e," \u2014 "),aq=n(t9e,"A",{href:!0});var nmt=s(aq);$1o=r(nmt,"DPTFeatureExtractor"),nmt.forEach(t),k1o=r(t9e," (DPT model)"),t9e.forEach(t),S1o=i(K),zh=n(K,"LI",{});var a9e=s(zh);ade=n(a9e,"STRONG",{});var smt=s(ade);R1o=r(smt,"flava"),smt.forEach(t),P1o=r(a9e," \u2014 "),nq=n(a9e,"A",{href:!0});var lmt=s(nq);B1o=r(lmt,"FlavaFeatureExtractor"),lmt.forEach(t),I1o=r(a9e," (FLAVA model)"),a9e.forEach(t),N1o=i(K),Qh=n(K,"LI",{});var n9e=s(Qh);nde=n(n9e,"STRONG",{});var imt=s(nde);q1o=r(imt,"glpn"),imt.forEach(t),j1o=r(n9e," \u2014 "),sq=n(n9e,"A",{href:!0});var dmt=s(sq);D1o=r(dmt,"GLPNFeatureExtractor"),dmt.forEach(t),G1o=r(n9e," (GLPN model)"),n9e.forEach(t),O1o=i(K),Wh=n(K,"LI",{});var s9e=s(Wh);sde=n(s9e,"STRONG",{});var cmt=s(sde);V1o=r(cmt,"groupvit"),cmt.forEach(t),X1o=r(s9e," \u2014 "),lq=n(s9e,"A",{href:!0});var fmt=s(lq);z1o=r(fmt,"CLIPFeatureExtractor"),fmt.forEach(t),Q1o=r(s9e," (GroupViT model)"),s9e.forEach(t),W1o=i(K),Hh=n(K,"LI",{});var l9e=s(Hh);lde=n(l9e,"STRONG",{});var mmt=s(lde);H1o=r(mmt,"hubert"),mmt.forEach(t),U1o=r(l9e," \u2014 "),iq=n(l9e,"A",{href:!0});var gmt=s(iq);J1o=r(gmt,"Wav2Vec2FeatureExtractor"),gmt.forEach(t),Y1o=r(l9e," (Hubert model)"),l9e.forEach(t),K1o=i(K),Uh=n(K,"LI",{});var i9e=s(Uh);ide=n(i9e,"STRONG",{});var hmt=s(ide);Z1o=r(hmt,"imagegpt"),hmt.forEach(t),e2o=r(i9e," \u2014 "),dq=n(i9e,"A",{href:!0});var pmt=s(dq);o2o=r(pmt,"ImageGPTFeatureExtractor"),pmt.forEach(t),r2o=r(i9e," (ImageGPT model)"),i9e.forEach(t),t2o=i(K),Jh=n(K,"LI",{});var d9e=s(Jh);dde=n(d9e,"STRONG",{});var _mt=s(dde);a2o=r(_mt,"layoutlmv2"),_mt.forEach(t),n2o=r(d9e," \u2014 "),cq=n(d9e,"A",{href:!0});var umt=s(cq);s2o=r(umt,"LayoutLMv2FeatureExtractor"),umt.forEach(t),l2o=r(d9e," (LayoutLMv2 model)"),d9e.forEach(t),i2o=i(K),Yh=n(K,"LI",{});var c9e=s(Yh);cde=n(c9e,"STRONG",{});var bmt=s(cde);d2o=r(bmt,"layoutlmv3"),bmt.forEach(t),c2o=r(c9e," \u2014 "),fq=n(c9e,"A",{href:!0});var vmt=s(fq);f2o=r(vmt,"LayoutLMv3FeatureExtractor"),vmt.forEach(t),m2o=r(c9e," (LayoutLMv3 model)"),c9e.forEach(t),g2o=i(K),Kh=n(K,"LI",{});var f9e=s(Kh);fde=n(f9e,"STRONG",{});var Fmt=s(fde);h2o=r(Fmt,"levit"),Fmt.forEach(t),p2o=r(f9e," \u2014 "),mq=n(f9e,"A",{href:!0});var Tmt=s(mq);_2o=r(Tmt,"LevitFeatureExtractor"),Tmt.forEach(t),u2o=r(f9e," (LeViT model)"),f9e.forEach(t),b2o=i(K),Zh=n(K,"LI",{});var m9e=s(Zh);mde=n(m9e,"STRONG",{});var Mmt=s(mde);v2o=r(Mmt,"maskformer"),Mmt.forEach(t),F2o=r(m9e," \u2014 "),gq=n(m9e,"A",{href:!0});var Emt=s(gq);T2o=r(Emt,"MaskFormerFeatureExtractor"),Emt.forEach(t),M2o=r(m9e," (MaskFormer model)"),m9e.forEach(t),E2o=i(K),ep=n(K,"LI",{});var g9e=s(ep);gde=n(g9e,"STRONG",{});var Cmt=s(gde);C2o=r(Cmt,"mctct"),Cmt.forEach(t),w2o=r(g9e," \u2014 "),hq=n(g9e,"A",{href:!0});var wmt=s(hq);A2o=r(wmt,"MCTCTFeatureExtractor"),wmt.forEach(t),L2o=r(g9e," (M-CTC-T model)"),g9e.forEach(t),y2o=i(K),op=n(K,"LI",{});var h9e=s(op);hde=n(h9e,"STRONG",{});var Amt=s(hde);x2o=r(Amt,"mobilevit"),Amt.forEach(t),$2o=r(h9e," \u2014 "),pq=n(h9e,"A",{href:!0});var Lmt=s(pq);k2o=r(Lmt,"MobileViTFeatureExtractor"),Lmt.forEach(t),S2o=r(h9e," (MobileViT model)"),h9e.forEach(t),R2o=i(K),rp=n(K,"LI",{});var p9e=s(rp);pde=n(p9e,"STRONG",{});var ymt=s(pde);P2o=r(ymt,"perceiver"),ymt.forEach(t),B2o=r(p9e," \u2014 "),_q=n(p9e,"A",{href:!0});var xmt=s(_q);I2o=r(xmt,"PerceiverFeatureExtractor"),xmt.forEach(t),N2o=r(p9e," (Perceiver model)"),p9e.forEach(t),q2o=i(K),tp=n(K,"LI",{});var _9e=s(tp);_de=n(_9e,"STRONG",{});var $mt=s(_de);j2o=r($mt,"poolformer"),$mt.forEach(t),D2o=r(_9e," \u2014 "),uq=n(_9e,"A",{href:!0});var kmt=s(uq);G2o=r(kmt,"PoolFormerFeatureExtractor"),kmt.forEach(t),O2o=r(_9e," (PoolFormer model)"),_9e.forEach(t),V2o=i(K),ap=n(K,"LI",{});var u9e=s(ap);ude=n(u9e,"STRONG",{});var Smt=s(ude);X2o=r(Smt,"regnet"),Smt.forEach(t),z2o=r(u9e," \u2014 "),bq=n(u9e,"A",{href:!0});var Rmt=s(bq);Q2o=r(Rmt,"ConvNextFeatureExtractor"),Rmt.forEach(t),W2o=r(u9e," (RegNet model)"),u9e.forEach(t),H2o=i(K),np=n(K,"LI",{});var b9e=s(np);bde=n(b9e,"STRONG",{});var Pmt=s(bde);U2o=r(Pmt,"resnet"),Pmt.forEach(t),J2o=r(b9e," \u2014 "),vq=n(b9e,"A",{href:!0});var Bmt=s(vq);Y2o=r(Bmt,"ConvNextFeatureExtractor"),Bmt.forEach(t),K2o=r(b9e," (ResNet model)"),b9e.forEach(t),Z2o=i(K),sp=n(K,"LI",{});var v9e=s(sp);vde=n(v9e,"STRONG",{});var Imt=s(vde);ebo=r(Imt,"segformer"),Imt.forEach(t),obo=r(v9e," \u2014 "),Fq=n(v9e,"A",{href:!0});var Nmt=s(Fq);rbo=r(Nmt,"SegformerFeatureExtractor"),Nmt.forEach(t),tbo=r(v9e," (SegFormer model)"),v9e.forEach(t),abo=i(K),lp=n(K,"LI",{});var F9e=s(lp);Fde=n(F9e,"STRONG",{});var qmt=s(Fde);nbo=r(qmt,"speech_to_text"),qmt.forEach(t),sbo=r(F9e," \u2014 "),Tq=n(F9e,"A",{href:!0});var jmt=s(Tq);lbo=r(jmt,"Speech2TextFeatureExtractor"),jmt.forEach(t),ibo=r(F9e," (Speech2Text model)"),F9e.forEach(t),dbo=i(K),ip=n(K,"LI",{});var T9e=s(ip);Tde=n(T9e,"STRONG",{});var Dmt=s(Tde);cbo=r(Dmt,"swin"),Dmt.forEach(t),fbo=r(T9e," \u2014 "),Mq=n(T9e,"A",{href:!0});var Gmt=s(Mq);mbo=r(Gmt,"ViTFeatureExtractor"),Gmt.forEach(t),gbo=r(T9e," (Swin Transformer model)"),T9e.forEach(t),hbo=i(K),dp=n(K,"LI",{});var M9e=s(dp);Mde=n(M9e,"STRONG",{});var Omt=s(Mde);pbo=r(Omt,"van"),Omt.forEach(t),_bo=r(M9e," \u2014 "),Eq=n(M9e,"A",{href:!0});var Vmt=s(Eq);ubo=r(Vmt,"ConvNextFeatureExtractor"),Vmt.forEach(t),bbo=r(M9e," (VAN model)"),M9e.forEach(t),vbo=i(K),cp=n(K,"LI",{});var E9e=s(cp);Ede=n(E9e,"STRONG",{});var Xmt=s(Ede);Fbo=r(Xmt,"vilt"),Xmt.forEach(t),Tbo=r(E9e," \u2014 "),Cq=n(E9e,"A",{href:!0});var zmt=s(Cq);Mbo=r(zmt,"ViltFeatureExtractor"),zmt.forEach(t),Ebo=r(E9e," (ViLT model)"),E9e.forEach(t),Cbo=i(K),fp=n(K,"LI",{});var C9e=s(fp);Cde=n(C9e,"STRONG",{});var Qmt=s(Cde);wbo=r(Qmt,"vit"),Qmt.forEach(t),Abo=r(C9e," \u2014 "),wq=n(C9e,"A",{href:!0});var Wmt=s(wq);Lbo=r(Wmt,"ViTFeatureExtractor"),Wmt.forEach(t),ybo=r(C9e," (ViT model)"),C9e.forEach(t),xbo=i(K),mp=n(K,"LI",{});var w9e=s(mp);wde=n(w9e,"STRONG",{});var Hmt=s(wde);$bo=r(Hmt,"vit_mae"),Hmt.forEach(t),kbo=r(w9e," \u2014 "),Aq=n(w9e,"A",{href:!0});var Umt=s(Aq);Sbo=r(Umt,"ViTFeatureExtractor"),Umt.forEach(t),Rbo=r(w9e," (ViTMAE model)"),w9e.forEach(t),Pbo=i(K),gp=n(K,"LI",{});var A9e=s(gp);Ade=n(A9e,"STRONG",{});var Jmt=s(Ade);Bbo=r(Jmt,"wav2vec2"),Jmt.forEach(t),Ibo=r(A9e," \u2014 "),Lq=n(A9e,"A",{href:!0});var Ymt=s(Lq);Nbo=r(Ymt,"Wav2Vec2FeatureExtractor"),Ymt.forEach(t),qbo=r(A9e," (Wav2Vec2 model)"),A9e.forEach(t),jbo=i(K),hp=n(K,"LI",{});var L9e=s(hp);Lde=n(L9e,"STRONG",{});var Kmt=s(Lde);Dbo=r(Kmt,"wav2vec2-conformer"),Kmt.forEach(t),Gbo=r(L9e," \u2014 "),yq=n(L9e,"A",{href:!0});var Zmt=s(yq);Obo=r(Zmt,"Wav2Vec2FeatureExtractor"),Zmt.forEach(t),Vbo=r(L9e," (Wav2Vec2-Conformer model)"),L9e.forEach(t),Xbo=i(K),pp=n(K,"LI",{});var y9e=s(pp);yde=n(y9e,"STRONG",{});var egt=s(yde);zbo=r(egt,"yolos"),egt.forEach(t),Qbo=r(y9e," \u2014 "),xq=n(y9e,"A",{href:!0});var ogt=s(xq);Wbo=r(ogt,"YolosFeatureExtractor"),ogt.forEach(t),Hbo=r(y9e," (YOLOS model)"),y9e.forEach(t),K.forEach(t),Ubo=i(na),T(_p.$$.fragment,na),Jbo=i(na),T(up.$$.fragment,na),na.forEach(t),Ybo=i(el),bp=n(el,"DIV",{class:!0});var pQe=s(bp);T(CL.$$.fragment,pQe),Kbo=i(pQe),xde=n(pQe,"P",{});var rgt=s(xde);Zbo=r(rgt,"Register a new feature extractor for this class."),rgt.forEach(t),pQe.forEach(t),el.forEach(t),mXe=i(f),ji=n(f,"H2",{class:!0});var _Qe=s(ji);vp=n(_Qe,"A",{id:!0,class:!0,href:!0});var tgt=s(vp);$de=n(tgt,"SPAN",{});var agt=s($de);T(wL.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),e3o=i(_Qe),kde=n(_Qe,"SPAN",{});var ngt=s(kde);o3o=r(ngt,"AutoProcessor"),ngt.forEach(t),_Qe.forEach(t),gXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(AL.$$.fragment,ol),r3o=i(ol),LL=n(ol,"P",{});var uQe=s(LL);t3o=r(uQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$q=n(uQe,"A",{href:!0});var sgt=s($q);a3o=r(sgt,"AutoProcessor.from_pretrained()"),sgt.forEach(t),n3o=r(uQe," class method."),uQe.forEach(t),s3o=i(ol),yL=n(ol,"P",{});var bQe=s(yL);l3o=r(bQe,"This class cannot be instantiated directly using "),Sde=n(bQe,"CODE",{});var lgt=s(Sde);i3o=r(lgt,"__init__()"),lgt.forEach(t),d3o=r(bQe," (throws an error)."),bQe.forEach(t),c3o=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(xL.$$.fragment,sa),f3o=i(sa),Rde=n(sa,"P",{});var igt=s(Rde);m3o=r(igt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),igt.forEach(t),g3o=i(sa),Di=n(sa,"P",{});var Sre=s(Di);h3o=r(Sre,"The processor class to instantiate is selected based on the "),Pde=n(Sre,"CODE",{});var dgt=s(Pde);p3o=r(dgt,"model_type"),dgt.forEach(t),_3o=r(Sre,` property of the config object (either
passed as an argument or loaded from `),Bde=n(Sre,"CODE",{});var cgt=s(Bde);u3o=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),b3o=r(Sre," if possible):"),Sre.forEach(t),v3o=i(sa),he=n(sa,"UL",{});var ue=s(he);Fp=n(ue,"LI",{});var x9e=s(Fp);Ide=n(x9e,"STRONG",{});var fgt=s(Ide);F3o=r(fgt,"clip"),fgt.forEach(t),T3o=r(x9e," \u2014 "),kq=n(x9e,"A",{href:!0});var mgt=s(kq);M3o=r(mgt,"CLIPProcessor"),mgt.forEach(t),E3o=r(x9e," (CLIP model)"),x9e.forEach(t),C3o=i(ue),Tp=n(ue,"LI",{});var $9e=s(Tp);Nde=n($9e,"STRONG",{});var ggt=s(Nde);w3o=r(ggt,"flava"),ggt.forEach(t),A3o=r($9e," \u2014 "),qde=n($9e,"CODE",{});var hgt=s(qde);L3o=r(hgt,"FLAVAProcessor"),hgt.forEach(t),y3o=r($9e," (FLAVA model)"),$9e.forEach(t),x3o=i(ue),Mp=n(ue,"LI",{});var k9e=s(Mp);jde=n(k9e,"STRONG",{});var pgt=s(jde);$3o=r(pgt,"groupvit"),pgt.forEach(t),k3o=r(k9e," \u2014 "),Sq=n(k9e,"A",{href:!0});var _gt=s(Sq);S3o=r(_gt,"CLIPProcessor"),_gt.forEach(t),R3o=r(k9e," (GroupViT model)"),k9e.forEach(t),P3o=i(ue),Ep=n(ue,"LI",{});var S9e=s(Ep);Dde=n(S9e,"STRONG",{});var ugt=s(Dde);B3o=r(ugt,"layoutlmv2"),ugt.forEach(t),I3o=r(S9e," \u2014 "),Rq=n(S9e,"A",{href:!0});var bgt=s(Rq);N3o=r(bgt,"LayoutLMv2Processor"),bgt.forEach(t),q3o=r(S9e," (LayoutLMv2 model)"),S9e.forEach(t),j3o=i(ue),Cp=n(ue,"LI",{});var R9e=s(Cp);Gde=n(R9e,"STRONG",{});var vgt=s(Gde);D3o=r(vgt,"layoutlmv3"),vgt.forEach(t),G3o=r(R9e," \u2014 "),Pq=n(R9e,"A",{href:!0});var Fgt=s(Pq);O3o=r(Fgt,"LayoutLMv3Processor"),Fgt.forEach(t),V3o=r(R9e," (LayoutLMv3 model)"),R9e.forEach(t),X3o=i(ue),wp=n(ue,"LI",{});var P9e=s(wp);Ode=n(P9e,"STRONG",{});var Tgt=s(Ode);z3o=r(Tgt,"layoutxlm"),Tgt.forEach(t),Q3o=r(P9e," \u2014 "),Bq=n(P9e,"A",{href:!0});var Mgt=s(Bq);W3o=r(Mgt,"LayoutXLMProcessor"),Mgt.forEach(t),H3o=r(P9e," (LayoutXLM model)"),P9e.forEach(t),U3o=i(ue),Ap=n(ue,"LI",{});var B9e=s(Ap);Vde=n(B9e,"STRONG",{});var Egt=s(Vde);J3o=r(Egt,"sew"),Egt.forEach(t),Y3o=r(B9e," \u2014 "),Iq=n(B9e,"A",{href:!0});var Cgt=s(Iq);K3o=r(Cgt,"Wav2Vec2Processor"),Cgt.forEach(t),Z3o=r(B9e," (SEW model)"),B9e.forEach(t),evo=i(ue),Lp=n(ue,"LI",{});var I9e=s(Lp);Xde=n(I9e,"STRONG",{});var wgt=s(Xde);ovo=r(wgt,"sew-d"),wgt.forEach(t),rvo=r(I9e," \u2014 "),Nq=n(I9e,"A",{href:!0});var Agt=s(Nq);tvo=r(Agt,"Wav2Vec2Processor"),Agt.forEach(t),avo=r(I9e," (SEW-D model)"),I9e.forEach(t),nvo=i(ue),yp=n(ue,"LI",{});var N9e=s(yp);zde=n(N9e,"STRONG",{});var Lgt=s(zde);svo=r(Lgt,"speech_to_text"),Lgt.forEach(t),lvo=r(N9e," \u2014 "),qq=n(N9e,"A",{href:!0});var ygt=s(qq);ivo=r(ygt,"Speech2TextProcessor"),ygt.forEach(t),dvo=r(N9e," (Speech2Text model)"),N9e.forEach(t),cvo=i(ue),xp=n(ue,"LI",{});var q9e=s(xp);Qde=n(q9e,"STRONG",{});var xgt=s(Qde);fvo=r(xgt,"speech_to_text_2"),xgt.forEach(t),mvo=r(q9e," \u2014 "),jq=n(q9e,"A",{href:!0});var $gt=s(jq);gvo=r($gt,"Speech2Text2Processor"),$gt.forEach(t),hvo=r(q9e," (Speech2Text2 model)"),q9e.forEach(t),pvo=i(ue),$p=n(ue,"LI",{});var j9e=s($p);Wde=n(j9e,"STRONG",{});var kgt=s(Wde);_vo=r(kgt,"trocr"),kgt.forEach(t),uvo=r(j9e," \u2014 "),Dq=n(j9e,"A",{href:!0});var Sgt=s(Dq);bvo=r(Sgt,"TrOCRProcessor"),Sgt.forEach(t),vvo=r(j9e," (TrOCR model)"),j9e.forEach(t),Fvo=i(ue),kp=n(ue,"LI",{});var D9e=s(kp);Hde=n(D9e,"STRONG",{});var Rgt=s(Hde);Tvo=r(Rgt,"unispeech"),Rgt.forEach(t),Mvo=r(D9e," \u2014 "),Gq=n(D9e,"A",{href:!0});var Pgt=s(Gq);Evo=r(Pgt,"Wav2Vec2Processor"),Pgt.forEach(t),Cvo=r(D9e," (UniSpeech model)"),D9e.forEach(t),wvo=i(ue),Sp=n(ue,"LI",{});var G9e=s(Sp);Ude=n(G9e,"STRONG",{});var Bgt=s(Ude);Avo=r(Bgt,"unispeech-sat"),Bgt.forEach(t),Lvo=r(G9e," \u2014 "),Oq=n(G9e,"A",{href:!0});var Igt=s(Oq);yvo=r(Igt,"Wav2Vec2Processor"),Igt.forEach(t),xvo=r(G9e," (UniSpeechSat model)"),G9e.forEach(t),$vo=i(ue),Rp=n(ue,"LI",{});var O9e=s(Rp);Jde=n(O9e,"STRONG",{});var Ngt=s(Jde);kvo=r(Ngt,"vilt"),Ngt.forEach(t),Svo=r(O9e," \u2014 "),Vq=n(O9e,"A",{href:!0});var qgt=s(Vq);Rvo=r(qgt,"ViltProcessor"),qgt.forEach(t),Pvo=r(O9e," (ViLT model)"),O9e.forEach(t),Bvo=i(ue),Pp=n(ue,"LI",{});var V9e=s(Pp);Yde=n(V9e,"STRONG",{});var jgt=s(Yde);Ivo=r(jgt,"vision-text-dual-encoder"),jgt.forEach(t),Nvo=r(V9e," \u2014 "),Xq=n(V9e,"A",{href:!0});var Dgt=s(Xq);qvo=r(Dgt,"VisionTextDualEncoderProcessor"),Dgt.forEach(t),jvo=r(V9e," (VisionTextDualEncoder model)"),V9e.forEach(t),Dvo=i(ue),Bp=n(ue,"LI",{});var X9e=s(Bp);Kde=n(X9e,"STRONG",{});var Ggt=s(Kde);Gvo=r(Ggt,"wav2vec2"),Ggt.forEach(t),Ovo=r(X9e," \u2014 "),zq=n(X9e,"A",{href:!0});var Ogt=s(zq);Vvo=r(Ogt,"Wav2Vec2Processor"),Ogt.forEach(t),Xvo=r(X9e," (Wav2Vec2 model)"),X9e.forEach(t),zvo=i(ue),Ip=n(ue,"LI",{});var z9e=s(Ip);Zde=n(z9e,"STRONG",{});var Vgt=s(Zde);Qvo=r(Vgt,"wav2vec2-conformer"),Vgt.forEach(t),Wvo=r(z9e," \u2014 "),Qq=n(z9e,"A",{href:!0});var Xgt=s(Qq);Hvo=r(Xgt,"Wav2Vec2Processor"),Xgt.forEach(t),Uvo=r(z9e," (Wav2Vec2-Conformer model)"),z9e.forEach(t),Jvo=i(ue),Np=n(ue,"LI",{});var Q9e=s(Np);ece=n(Q9e,"STRONG",{});var zgt=s(ece);Yvo=r(zgt,"wavlm"),zgt.forEach(t),Kvo=r(Q9e," \u2014 "),Wq=n(Q9e,"A",{href:!0});var Qgt=s(Wq);Zvo=r(Qgt,"Wav2Vec2Processor"),Qgt.forEach(t),eFo=r(Q9e," (WavLM model)"),Q9e.forEach(t),ue.forEach(t),oFo=i(sa),T(qp.$$.fragment,sa),rFo=i(sa),T(jp.$$.fragment,sa),sa.forEach(t),tFo=i(ol),Dp=n(ol,"DIV",{class:!0});var vQe=s(Dp);T($L.$$.fragment,vQe),aFo=i(vQe),oce=n(vQe,"P",{});var Wgt=s(oce);nFo=r(Wgt,"Register a new processor for this class."),Wgt.forEach(t),vQe.forEach(t),ol.forEach(t),hXe=i(f),Gi=n(f,"H2",{class:!0});var FQe=s(Gi);Gp=n(FQe,"A",{id:!0,class:!0,href:!0});var Hgt=s(Gp);rce=n(Hgt,"SPAN",{});var Ugt=s(rce);T(kL.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),sFo=i(FQe),tce=n(FQe,"SPAN",{});var Jgt=s(tce);lFo=r(Jgt,"AutoModel"),Jgt.forEach(t),FQe.forEach(t),pXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(SL.$$.fragment,rl),iFo=i(rl),Oi=n(rl,"P",{});var Rre=s(Oi);dFo=r(Rre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hq=n(Rre,"A",{href:!0});var Ygt=s(Hq);cFo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),fFo=r(Rre," class method or the "),Uq=n(Rre,"A",{href:!0});var Kgt=s(Uq);mFo=r(Kgt,"from_config()"),Kgt.forEach(t),gFo=r(Rre,` class
method.`),Rre.forEach(t),hFo=i(rl),RL=n(rl,"P",{});var TQe=s(RL);pFo=r(TQe,"This class cannot be instantiated directly using "),ace=n(TQe,"CODE",{});var Zgt=s(ace);_Fo=r(Zgt,"__init__()"),Zgt.forEach(t),uFo=r(TQe," (throws an error)."),TQe.forEach(t),bFo=i(rl),it=n(rl,"DIV",{class:!0});var d6=s(it);T(PL.$$.fragment,d6),vFo=i(d6),nce=n(d6,"P",{});var eht=s(nce);FFo=r(eht,"Instantiates one of the base model classes of the library from a configuration."),eht.forEach(t),TFo=i(d6),Vi=n(d6,"P",{});var Pre=s(Vi);MFo=r(Pre,`Note:
Loading a model from its configuration file does `),sce=n(Pre,"STRONG",{});var oht=s(sce);EFo=r(oht,"not"),oht.forEach(t),CFo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=n(Pre,"A",{href:!0});var rht=s(Jq);wFo=r(rht,"from_pretrained()"),rht.forEach(t),AFo=r(Pre," to load the model weights."),Pre.forEach(t),LFo=i(d6),T(Op.$$.fragment,d6),d6.forEach(t),yFo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(BL.$$.fragment,la),xFo=i(la),lce=n(la,"P",{});var tht=s(lce);$Fo=r(tht,"Instantiate one of the base model classes of the library from a pretrained model."),tht.forEach(t),kFo=i(la),Ia=n(la,"P",{});var c6=s(Ia);SFo=r(c6,"The model class to instantiate is selected based on the "),ice=n(c6,"CODE",{});var aht=s(ice);RFo=r(aht,"model_type"),aht.forEach(t),PFo=r(c6,` property of the config object (either
passed as an argument or loaded from `),dce=n(c6,"CODE",{});var nht=s(dce);BFo=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),IFo=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(c6,"CODE",{});var sht=s(cce);NFo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),qFo=r(c6,":"),c6.forEach(t),jFo=i(la),y=n(la,"UL",{});var x=s(y);Vp=n(x,"LI",{});var W9e=s(Vp);fce=n(W9e,"STRONG",{});var lht=s(fce);DFo=r(lht,"albert"),lht.forEach(t),GFo=r(W9e," \u2014 "),Yq=n(W9e,"A",{href:!0});var iht=s(Yq);OFo=r(iht,"AlbertModel"),iht.forEach(t),VFo=r(W9e," (ALBERT model)"),W9e.forEach(t),XFo=i(x),Xp=n(x,"LI",{});var H9e=s(Xp);mce=n(H9e,"STRONG",{});var dht=s(mce);zFo=r(dht,"bart"),dht.forEach(t),QFo=r(H9e," \u2014 "),Kq=n(H9e,"A",{href:!0});var cht=s(Kq);WFo=r(cht,"BartModel"),cht.forEach(t),HFo=r(H9e," (BART model)"),H9e.forEach(t),UFo=i(x),zp=n(x,"LI",{});var U9e=s(zp);gce=n(U9e,"STRONG",{});var fht=s(gce);JFo=r(fht,"beit"),fht.forEach(t),YFo=r(U9e," \u2014 "),Zq=n(U9e,"A",{href:!0});var mht=s(Zq);KFo=r(mht,"BeitModel"),mht.forEach(t),ZFo=r(U9e," (BEiT model)"),U9e.forEach(t),eTo=i(x),Qp=n(x,"LI",{});var J9e=s(Qp);hce=n(J9e,"STRONG",{});var ght=s(hce);oTo=r(ght,"bert"),ght.forEach(t),rTo=r(J9e," \u2014 "),ej=n(J9e,"A",{href:!0});var hht=s(ej);tTo=r(hht,"BertModel"),hht.forEach(t),aTo=r(J9e," (BERT model)"),J9e.forEach(t),nTo=i(x),Wp=n(x,"LI",{});var Y9e=s(Wp);pce=n(Y9e,"STRONG",{});var pht=s(pce);sTo=r(pht,"bert-generation"),pht.forEach(t),lTo=r(Y9e," \u2014 "),oj=n(Y9e,"A",{href:!0});var _ht=s(oj);iTo=r(_ht,"BertGenerationEncoder"),_ht.forEach(t),dTo=r(Y9e," (Bert Generation model)"),Y9e.forEach(t),cTo=i(x),Hp=n(x,"LI",{});var K9e=s(Hp);_ce=n(K9e,"STRONG",{});var uht=s(_ce);fTo=r(uht,"big_bird"),uht.forEach(t),mTo=r(K9e," \u2014 "),rj=n(K9e,"A",{href:!0});var bht=s(rj);gTo=r(bht,"BigBirdModel"),bht.forEach(t),hTo=r(K9e," (BigBird model)"),K9e.forEach(t),pTo=i(x),Up=n(x,"LI",{});var Z9e=s(Up);uce=n(Z9e,"STRONG",{});var vht=s(uce);_To=r(vht,"bigbird_pegasus"),vht.forEach(t),uTo=r(Z9e," \u2014 "),tj=n(Z9e,"A",{href:!0});var Fht=s(tj);bTo=r(Fht,"BigBirdPegasusModel"),Fht.forEach(t),vTo=r(Z9e," (BigBird-Pegasus model)"),Z9e.forEach(t),FTo=i(x),Jp=n(x,"LI",{});var exe=s(Jp);bce=n(exe,"STRONG",{});var Tht=s(bce);TTo=r(Tht,"blenderbot"),Tht.forEach(t),MTo=r(exe," \u2014 "),aj=n(exe,"A",{href:!0});var Mht=s(aj);ETo=r(Mht,"BlenderbotModel"),Mht.forEach(t),CTo=r(exe," (Blenderbot model)"),exe.forEach(t),wTo=i(x),Yp=n(x,"LI",{});var oxe=s(Yp);vce=n(oxe,"STRONG",{});var Eht=s(vce);ATo=r(Eht,"blenderbot-small"),Eht.forEach(t),LTo=r(oxe," \u2014 "),nj=n(oxe,"A",{href:!0});var Cht=s(nj);yTo=r(Cht,"BlenderbotSmallModel"),Cht.forEach(t),xTo=r(oxe," (BlenderbotSmall model)"),oxe.forEach(t),$To=i(x),Kp=n(x,"LI",{});var rxe=s(Kp);Fce=n(rxe,"STRONG",{});var wht=s(Fce);kTo=r(wht,"bloom"),wht.forEach(t),STo=r(rxe," \u2014 "),sj=n(rxe,"A",{href:!0});var Aht=s(sj);RTo=r(Aht,"BloomModel"),Aht.forEach(t),PTo=r(rxe," (BLOOM model)"),rxe.forEach(t),BTo=i(x),Zp=n(x,"LI",{});var txe=s(Zp);Tce=n(txe,"STRONG",{});var Lht=s(Tce);ITo=r(Lht,"camembert"),Lht.forEach(t),NTo=r(txe," \u2014 "),lj=n(txe,"A",{href:!0});var yht=s(lj);qTo=r(yht,"CamembertModel"),yht.forEach(t),jTo=r(txe," (CamemBERT model)"),txe.forEach(t),DTo=i(x),e_=n(x,"LI",{});var axe=s(e_);Mce=n(axe,"STRONG",{});var xht=s(Mce);GTo=r(xht,"canine"),xht.forEach(t),OTo=r(axe," \u2014 "),ij=n(axe,"A",{href:!0});var $ht=s(ij);VTo=r($ht,"CanineModel"),$ht.forEach(t),XTo=r(axe," (CANINE model)"),axe.forEach(t),zTo=i(x),o_=n(x,"LI",{});var nxe=s(o_);Ece=n(nxe,"STRONG",{});var kht=s(Ece);QTo=r(kht,"clip"),kht.forEach(t),WTo=r(nxe," \u2014 "),dj=n(nxe,"A",{href:!0});var Sht=s(dj);HTo=r(Sht,"CLIPModel"),Sht.forEach(t),UTo=r(nxe," (CLIP model)"),nxe.forEach(t),JTo=i(x),r_=n(x,"LI",{});var sxe=s(r_);Cce=n(sxe,"STRONG",{});var Rht=s(Cce);YTo=r(Rht,"codegen"),Rht.forEach(t),KTo=r(sxe," \u2014 "),cj=n(sxe,"A",{href:!0});var Pht=s(cj);ZTo=r(Pht,"CodeGenModel"),Pht.forEach(t),e8o=r(sxe," (CodeGen model)"),sxe.forEach(t),o8o=i(x),t_=n(x,"LI",{});var lxe=s(t_);wce=n(lxe,"STRONG",{});var Bht=s(wce);r8o=r(Bht,"convbert"),Bht.forEach(t),t8o=r(lxe," \u2014 "),fj=n(lxe,"A",{href:!0});var Iht=s(fj);a8o=r(Iht,"ConvBertModel"),Iht.forEach(t),n8o=r(lxe," (ConvBERT model)"),lxe.forEach(t),s8o=i(x),a_=n(x,"LI",{});var ixe=s(a_);Ace=n(ixe,"STRONG",{});var Nht=s(Ace);l8o=r(Nht,"convnext"),Nht.forEach(t),i8o=r(ixe," \u2014 "),mj=n(ixe,"A",{href:!0});var qht=s(mj);d8o=r(qht,"ConvNextModel"),qht.forEach(t),c8o=r(ixe," (ConvNeXT model)"),ixe.forEach(t),f8o=i(x),n_=n(x,"LI",{});var dxe=s(n_);Lce=n(dxe,"STRONG",{});var jht=s(Lce);m8o=r(jht,"ctrl"),jht.forEach(t),g8o=r(dxe," \u2014 "),gj=n(dxe,"A",{href:!0});var Dht=s(gj);h8o=r(Dht,"CTRLModel"),Dht.forEach(t),p8o=r(dxe," (CTRL model)"),dxe.forEach(t),_8o=i(x),s_=n(x,"LI",{});var cxe=s(s_);yce=n(cxe,"STRONG",{});var Ght=s(yce);u8o=r(Ght,"cvt"),Ght.forEach(t),b8o=r(cxe," \u2014 "),hj=n(cxe,"A",{href:!0});var Oht=s(hj);v8o=r(Oht,"CvtModel"),Oht.forEach(t),F8o=r(cxe," (CvT model)"),cxe.forEach(t),T8o=i(x),l_=n(x,"LI",{});var fxe=s(l_);xce=n(fxe,"STRONG",{});var Vht=s(xce);M8o=r(Vht,"data2vec-audio"),Vht.forEach(t),E8o=r(fxe," \u2014 "),pj=n(fxe,"A",{href:!0});var Xht=s(pj);C8o=r(Xht,"Data2VecAudioModel"),Xht.forEach(t),w8o=r(fxe," (Data2VecAudio model)"),fxe.forEach(t),A8o=i(x),i_=n(x,"LI",{});var mxe=s(i_);$ce=n(mxe,"STRONG",{});var zht=s($ce);L8o=r(zht,"data2vec-text"),zht.forEach(t),y8o=r(mxe," \u2014 "),_j=n(mxe,"A",{href:!0});var Qht=s(_j);x8o=r(Qht,"Data2VecTextModel"),Qht.forEach(t),$8o=r(mxe," (Data2VecText model)"),mxe.forEach(t),k8o=i(x),d_=n(x,"LI",{});var gxe=s(d_);kce=n(gxe,"STRONG",{});var Wht=s(kce);S8o=r(Wht,"data2vec-vision"),Wht.forEach(t),R8o=r(gxe," \u2014 "),uj=n(gxe,"A",{href:!0});var Hht=s(uj);P8o=r(Hht,"Data2VecVisionModel"),Hht.forEach(t),B8o=r(gxe," (Data2VecVision model)"),gxe.forEach(t),I8o=i(x),c_=n(x,"LI",{});var hxe=s(c_);Sce=n(hxe,"STRONG",{});var Uht=s(Sce);N8o=r(Uht,"deberta"),Uht.forEach(t),q8o=r(hxe," \u2014 "),bj=n(hxe,"A",{href:!0});var Jht=s(bj);j8o=r(Jht,"DebertaModel"),Jht.forEach(t),D8o=r(hxe," (DeBERTa model)"),hxe.forEach(t),G8o=i(x),f_=n(x,"LI",{});var pxe=s(f_);Rce=n(pxe,"STRONG",{});var Yht=s(Rce);O8o=r(Yht,"deberta-v2"),Yht.forEach(t),V8o=r(pxe," \u2014 "),vj=n(pxe,"A",{href:!0});var Kht=s(vj);X8o=r(Kht,"DebertaV2Model"),Kht.forEach(t),z8o=r(pxe," (DeBERTa-v2 model)"),pxe.forEach(t),Q8o=i(x),m_=n(x,"LI",{});var _xe=s(m_);Pce=n(_xe,"STRONG",{});var Zht=s(Pce);W8o=r(Zht,"decision_transformer"),Zht.forEach(t),H8o=r(_xe," \u2014 "),Fj=n(_xe,"A",{href:!0});var ept=s(Fj);U8o=r(ept,"DecisionTransformerModel"),ept.forEach(t),J8o=r(_xe," (Decision Transformer model)"),_xe.forEach(t),Y8o=i(x),g_=n(x,"LI",{});var uxe=s(g_);Bce=n(uxe,"STRONG",{});var opt=s(Bce);K8o=r(opt,"deit"),opt.forEach(t),Z8o=r(uxe," \u2014 "),Tj=n(uxe,"A",{href:!0});var rpt=s(Tj);eMo=r(rpt,"DeiTModel"),rpt.forEach(t),oMo=r(uxe," (DeiT model)"),uxe.forEach(t),rMo=i(x),h_=n(x,"LI",{});var bxe=s(h_);Ice=n(bxe,"STRONG",{});var tpt=s(Ice);tMo=r(tpt,"detr"),tpt.forEach(t),aMo=r(bxe," \u2014 "),Mj=n(bxe,"A",{href:!0});var apt=s(Mj);nMo=r(apt,"DetrModel"),apt.forEach(t),sMo=r(bxe," (DETR model)"),bxe.forEach(t),lMo=i(x),p_=n(x,"LI",{});var vxe=s(p_);Nce=n(vxe,"STRONG",{});var npt=s(Nce);iMo=r(npt,"distilbert"),npt.forEach(t),dMo=r(vxe," \u2014 "),Ej=n(vxe,"A",{href:!0});var spt=s(Ej);cMo=r(spt,"DistilBertModel"),spt.forEach(t),fMo=r(vxe," (DistilBERT model)"),vxe.forEach(t),mMo=i(x),__=n(x,"LI",{});var Fxe=s(__);qce=n(Fxe,"STRONG",{});var lpt=s(qce);gMo=r(lpt,"dpr"),lpt.forEach(t),hMo=r(Fxe," \u2014 "),Cj=n(Fxe,"A",{href:!0});var ipt=s(Cj);pMo=r(ipt,"DPRQuestionEncoder"),ipt.forEach(t),_Mo=r(Fxe," (DPR model)"),Fxe.forEach(t),uMo=i(x),u_=n(x,"LI",{});var Txe=s(u_);jce=n(Txe,"STRONG",{});var dpt=s(jce);bMo=r(dpt,"dpt"),dpt.forEach(t),vMo=r(Txe," \u2014 "),wj=n(Txe,"A",{href:!0});var cpt=s(wj);FMo=r(cpt,"DPTModel"),cpt.forEach(t),TMo=r(Txe," (DPT model)"),Txe.forEach(t),MMo=i(x),b_=n(x,"LI",{});var Mxe=s(b_);Dce=n(Mxe,"STRONG",{});var fpt=s(Dce);EMo=r(fpt,"electra"),fpt.forEach(t),CMo=r(Mxe," \u2014 "),Aj=n(Mxe,"A",{href:!0});var mpt=s(Aj);wMo=r(mpt,"ElectraModel"),mpt.forEach(t),AMo=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),LMo=i(x),v_=n(x,"LI",{});var Exe=s(v_);Gce=n(Exe,"STRONG",{});var gpt=s(Gce);yMo=r(gpt,"flaubert"),gpt.forEach(t),xMo=r(Exe," \u2014 "),Lj=n(Exe,"A",{href:!0});var hpt=s(Lj);$Mo=r(hpt,"FlaubertModel"),hpt.forEach(t),kMo=r(Exe," (FlauBERT model)"),Exe.forEach(t),SMo=i(x),F_=n(x,"LI",{});var Cxe=s(F_);Oce=n(Cxe,"STRONG",{});var ppt=s(Oce);RMo=r(ppt,"flava"),ppt.forEach(t),PMo=r(Cxe," \u2014 "),yj=n(Cxe,"A",{href:!0});var _pt=s(yj);BMo=r(_pt,"FlavaModel"),_pt.forEach(t),IMo=r(Cxe," (FLAVA model)"),Cxe.forEach(t),NMo=i(x),T_=n(x,"LI",{});var wxe=s(T_);Vce=n(wxe,"STRONG",{});var upt=s(Vce);qMo=r(upt,"fnet"),upt.forEach(t),jMo=r(wxe," \u2014 "),xj=n(wxe,"A",{href:!0});var bpt=s(xj);DMo=r(bpt,"FNetModel"),bpt.forEach(t),GMo=r(wxe," (FNet model)"),wxe.forEach(t),OMo=i(x),M_=n(x,"LI",{});var Axe=s(M_);Xce=n(Axe,"STRONG",{});var vpt=s(Xce);VMo=r(vpt,"fsmt"),vpt.forEach(t),XMo=r(Axe," \u2014 "),$j=n(Axe,"A",{href:!0});var Fpt=s($j);zMo=r(Fpt,"FSMTModel"),Fpt.forEach(t),QMo=r(Axe," (FairSeq Machine-Translation model)"),Axe.forEach(t),WMo=i(x),Ws=n(x,"LI",{});var kS=s(Ws);zce=n(kS,"STRONG",{});var Tpt=s(zce);HMo=r(Tpt,"funnel"),Tpt.forEach(t),UMo=r(kS," \u2014 "),kj=n(kS,"A",{href:!0});var Mpt=s(kj);JMo=r(Mpt,"FunnelModel"),Mpt.forEach(t),YMo=r(kS," or "),Sj=n(kS,"A",{href:!0});var Ept=s(Sj);KMo=r(Ept,"FunnelBaseModel"),Ept.forEach(t),ZMo=r(kS," (Funnel Transformer model)"),kS.forEach(t),e4o=i(x),E_=n(x,"LI",{});var Lxe=s(E_);Qce=n(Lxe,"STRONG",{});var Cpt=s(Qce);o4o=r(Cpt,"glpn"),Cpt.forEach(t),r4o=r(Lxe," \u2014 "),Rj=n(Lxe,"A",{href:!0});var wpt=s(Rj);t4o=r(wpt,"GLPNModel"),wpt.forEach(t),a4o=r(Lxe," (GLPN model)"),Lxe.forEach(t),n4o=i(x),C_=n(x,"LI",{});var yxe=s(C_);Wce=n(yxe,"STRONG",{});var Apt=s(Wce);s4o=r(Apt,"gpt2"),Apt.forEach(t),l4o=r(yxe," \u2014 "),Pj=n(yxe,"A",{href:!0});var Lpt=s(Pj);i4o=r(Lpt,"GPT2Model"),Lpt.forEach(t),d4o=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),c4o=i(x),w_=n(x,"LI",{});var xxe=s(w_);Hce=n(xxe,"STRONG",{});var ypt=s(Hce);f4o=r(ypt,"gpt_neo"),ypt.forEach(t),m4o=r(xxe," \u2014 "),Bj=n(xxe,"A",{href:!0});var xpt=s(Bj);g4o=r(xpt,"GPTNeoModel"),xpt.forEach(t),h4o=r(xxe," (GPT Neo model)"),xxe.forEach(t),p4o=i(x),A_=n(x,"LI",{});var $xe=s(A_);Uce=n($xe,"STRONG",{});var $pt=s(Uce);_4o=r($pt,"gpt_neox"),$pt.forEach(t),u4o=r($xe," \u2014 "),Ij=n($xe,"A",{href:!0});var kpt=s(Ij);b4o=r(kpt,"GPTNeoXModel"),kpt.forEach(t),v4o=r($xe," (GPT NeoX model)"),$xe.forEach(t),F4o=i(x),L_=n(x,"LI",{});var kxe=s(L_);Jce=n(kxe,"STRONG",{});var Spt=s(Jce);T4o=r(Spt,"gptj"),Spt.forEach(t),M4o=r(kxe," \u2014 "),Nj=n(kxe,"A",{href:!0});var Rpt=s(Nj);E4o=r(Rpt,"GPTJModel"),Rpt.forEach(t),C4o=r(kxe," (GPT-J model)"),kxe.forEach(t),w4o=i(x),y_=n(x,"LI",{});var Sxe=s(y_);Yce=n(Sxe,"STRONG",{});var Ppt=s(Yce);A4o=r(Ppt,"groupvit"),Ppt.forEach(t),L4o=r(Sxe," \u2014 "),qj=n(Sxe,"A",{href:!0});var Bpt=s(qj);y4o=r(Bpt,"GroupViTModel"),Bpt.forEach(t),x4o=r(Sxe," (GroupViT model)"),Sxe.forEach(t),$4o=i(x),x_=n(x,"LI",{});var Rxe=s(x_);Kce=n(Rxe,"STRONG",{});var Ipt=s(Kce);k4o=r(Ipt,"hubert"),Ipt.forEach(t),S4o=r(Rxe," \u2014 "),jj=n(Rxe,"A",{href:!0});var Npt=s(jj);R4o=r(Npt,"HubertModel"),Npt.forEach(t),P4o=r(Rxe," (Hubert model)"),Rxe.forEach(t),B4o=i(x),$_=n(x,"LI",{});var Pxe=s($_);Zce=n(Pxe,"STRONG",{});var qpt=s(Zce);I4o=r(qpt,"ibert"),qpt.forEach(t),N4o=r(Pxe," \u2014 "),Dj=n(Pxe,"A",{href:!0});var jpt=s(Dj);q4o=r(jpt,"IBertModel"),jpt.forEach(t),j4o=r(Pxe," (I-BERT model)"),Pxe.forEach(t),D4o=i(x),k_=n(x,"LI",{});var Bxe=s(k_);efe=n(Bxe,"STRONG",{});var Dpt=s(efe);G4o=r(Dpt,"imagegpt"),Dpt.forEach(t),O4o=r(Bxe," \u2014 "),Gj=n(Bxe,"A",{href:!0});var Gpt=s(Gj);V4o=r(Gpt,"ImageGPTModel"),Gpt.forEach(t),X4o=r(Bxe," (ImageGPT model)"),Bxe.forEach(t),z4o=i(x),S_=n(x,"LI",{});var Ixe=s(S_);ofe=n(Ixe,"STRONG",{});var Opt=s(ofe);Q4o=r(Opt,"layoutlm"),Opt.forEach(t),W4o=r(Ixe," \u2014 "),Oj=n(Ixe,"A",{href:!0});var Vpt=s(Oj);H4o=r(Vpt,"LayoutLMModel"),Vpt.forEach(t),U4o=r(Ixe," (LayoutLM model)"),Ixe.forEach(t),J4o=i(x),R_=n(x,"LI",{});var Nxe=s(R_);rfe=n(Nxe,"STRONG",{});var Xpt=s(rfe);Y4o=r(Xpt,"layoutlmv2"),Xpt.forEach(t),K4o=r(Nxe," \u2014 "),Vj=n(Nxe,"A",{href:!0});var zpt=s(Vj);Z4o=r(zpt,"LayoutLMv2Model"),zpt.forEach(t),eEo=r(Nxe," (LayoutLMv2 model)"),Nxe.forEach(t),oEo=i(x),P_=n(x,"LI",{});var qxe=s(P_);tfe=n(qxe,"STRONG",{});var Qpt=s(tfe);rEo=r(Qpt,"layoutlmv3"),Qpt.forEach(t),tEo=r(qxe," \u2014 "),Xj=n(qxe,"A",{href:!0});var Wpt=s(Xj);aEo=r(Wpt,"LayoutLMv3Model"),Wpt.forEach(t),nEo=r(qxe," (LayoutLMv3 model)"),qxe.forEach(t),sEo=i(x),B_=n(x,"LI",{});var jxe=s(B_);afe=n(jxe,"STRONG",{});var Hpt=s(afe);lEo=r(Hpt,"led"),Hpt.forEach(t),iEo=r(jxe," \u2014 "),zj=n(jxe,"A",{href:!0});var Upt=s(zj);dEo=r(Upt,"LEDModel"),Upt.forEach(t),cEo=r(jxe," (LED model)"),jxe.forEach(t),fEo=i(x),I_=n(x,"LI",{});var Dxe=s(I_);nfe=n(Dxe,"STRONG",{});var Jpt=s(nfe);mEo=r(Jpt,"levit"),Jpt.forEach(t),gEo=r(Dxe," \u2014 "),Qj=n(Dxe,"A",{href:!0});var Ypt=s(Qj);hEo=r(Ypt,"LevitModel"),Ypt.forEach(t),pEo=r(Dxe," (LeViT model)"),Dxe.forEach(t),_Eo=i(x),N_=n(x,"LI",{});var Gxe=s(N_);sfe=n(Gxe,"STRONG",{});var Kpt=s(sfe);uEo=r(Kpt,"longformer"),Kpt.forEach(t),bEo=r(Gxe," \u2014 "),Wj=n(Gxe,"A",{href:!0});var Zpt=s(Wj);vEo=r(Zpt,"LongformerModel"),Zpt.forEach(t),FEo=r(Gxe," (Longformer model)"),Gxe.forEach(t),TEo=i(x),q_=n(x,"LI",{});var Oxe=s(q_);lfe=n(Oxe,"STRONG",{});var e_t=s(lfe);MEo=r(e_t,"longt5"),e_t.forEach(t),EEo=r(Oxe," \u2014 "),Hj=n(Oxe,"A",{href:!0});var o_t=s(Hj);CEo=r(o_t,"LongT5Model"),o_t.forEach(t),wEo=r(Oxe," (LongT5 model)"),Oxe.forEach(t),AEo=i(x),j_=n(x,"LI",{});var Vxe=s(j_);ife=n(Vxe,"STRONG",{});var r_t=s(ife);LEo=r(r_t,"luke"),r_t.forEach(t),yEo=r(Vxe," \u2014 "),Uj=n(Vxe,"A",{href:!0});var t_t=s(Uj);xEo=r(t_t,"LukeModel"),t_t.forEach(t),$Eo=r(Vxe," (LUKE model)"),Vxe.forEach(t),kEo=i(x),D_=n(x,"LI",{});var Xxe=s(D_);dfe=n(Xxe,"STRONG",{});var a_t=s(dfe);SEo=r(a_t,"lxmert"),a_t.forEach(t),REo=r(Xxe," \u2014 "),Jj=n(Xxe,"A",{href:!0});var n_t=s(Jj);PEo=r(n_t,"LxmertModel"),n_t.forEach(t),BEo=r(Xxe," (LXMERT model)"),Xxe.forEach(t),IEo=i(x),G_=n(x,"LI",{});var zxe=s(G_);cfe=n(zxe,"STRONG",{});var s_t=s(cfe);NEo=r(s_t,"m2m_100"),s_t.forEach(t),qEo=r(zxe," \u2014 "),Yj=n(zxe,"A",{href:!0});var l_t=s(Yj);jEo=r(l_t,"M2M100Model"),l_t.forEach(t),DEo=r(zxe," (M2M100 model)"),zxe.forEach(t),GEo=i(x),O_=n(x,"LI",{});var Qxe=s(O_);ffe=n(Qxe,"STRONG",{});var i_t=s(ffe);OEo=r(i_t,"marian"),i_t.forEach(t),VEo=r(Qxe," \u2014 "),Kj=n(Qxe,"A",{href:!0});var d_t=s(Kj);XEo=r(d_t,"MarianModel"),d_t.forEach(t),zEo=r(Qxe," (Marian model)"),Qxe.forEach(t),QEo=i(x),V_=n(x,"LI",{});var Wxe=s(V_);mfe=n(Wxe,"STRONG",{});var c_t=s(mfe);WEo=r(c_t,"maskformer"),c_t.forEach(t),HEo=r(Wxe," \u2014 "),Zj=n(Wxe,"A",{href:!0});var f_t=s(Zj);UEo=r(f_t,"MaskFormerModel"),f_t.forEach(t),JEo=r(Wxe," (MaskFormer model)"),Wxe.forEach(t),YEo=i(x),X_=n(x,"LI",{});var Hxe=s(X_);gfe=n(Hxe,"STRONG",{});var m_t=s(gfe);KEo=r(m_t,"mbart"),m_t.forEach(t),ZEo=r(Hxe," \u2014 "),eD=n(Hxe,"A",{href:!0});var g_t=s(eD);eCo=r(g_t,"MBartModel"),g_t.forEach(t),oCo=r(Hxe," (mBART model)"),Hxe.forEach(t),rCo=i(x),z_=n(x,"LI",{});var Uxe=s(z_);hfe=n(Uxe,"STRONG",{});var h_t=s(hfe);tCo=r(h_t,"mctct"),h_t.forEach(t),aCo=r(Uxe," \u2014 "),oD=n(Uxe,"A",{href:!0});var p_t=s(oD);nCo=r(p_t,"MCTCTModel"),p_t.forEach(t),sCo=r(Uxe," (M-CTC-T model)"),Uxe.forEach(t),lCo=i(x),Q_=n(x,"LI",{});var Jxe=s(Q_);pfe=n(Jxe,"STRONG",{});var __t=s(pfe);iCo=r(__t,"megatron-bert"),__t.forEach(t),dCo=r(Jxe," \u2014 "),rD=n(Jxe,"A",{href:!0});var u_t=s(rD);cCo=r(u_t,"MegatronBertModel"),u_t.forEach(t),fCo=r(Jxe," (Megatron-BERT model)"),Jxe.forEach(t),mCo=i(x),W_=n(x,"LI",{});var Yxe=s(W_);_fe=n(Yxe,"STRONG",{});var b_t=s(_fe);gCo=r(b_t,"mobilebert"),b_t.forEach(t),hCo=r(Yxe," \u2014 "),tD=n(Yxe,"A",{href:!0});var v_t=s(tD);pCo=r(v_t,"MobileBertModel"),v_t.forEach(t),_Co=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),uCo=i(x),H_=n(x,"LI",{});var Kxe=s(H_);ufe=n(Kxe,"STRONG",{});var F_t=s(ufe);bCo=r(F_t,"mobilevit"),F_t.forEach(t),vCo=r(Kxe," \u2014 "),aD=n(Kxe,"A",{href:!0});var T_t=s(aD);FCo=r(T_t,"MobileViTModel"),T_t.forEach(t),TCo=r(Kxe," (MobileViT model)"),Kxe.forEach(t),MCo=i(x),U_=n(x,"LI",{});var Zxe=s(U_);bfe=n(Zxe,"STRONG",{});var M_t=s(bfe);ECo=r(M_t,"mpnet"),M_t.forEach(t),CCo=r(Zxe," \u2014 "),nD=n(Zxe,"A",{href:!0});var E_t=s(nD);wCo=r(E_t,"MPNetModel"),E_t.forEach(t),ACo=r(Zxe," (MPNet model)"),Zxe.forEach(t),LCo=i(x),J_=n(x,"LI",{});var e$e=s(J_);vfe=n(e$e,"STRONG",{});var C_t=s(vfe);yCo=r(C_t,"mt5"),C_t.forEach(t),xCo=r(e$e," \u2014 "),sD=n(e$e,"A",{href:!0});var w_t=s(sD);$Co=r(w_t,"MT5Model"),w_t.forEach(t),kCo=r(e$e," (MT5 model)"),e$e.forEach(t),SCo=i(x),Y_=n(x,"LI",{});var o$e=s(Y_);Ffe=n(o$e,"STRONG",{});var A_t=s(Ffe);RCo=r(A_t,"mvp"),A_t.forEach(t),PCo=r(o$e," \u2014 "),lD=n(o$e,"A",{href:!0});var L_t=s(lD);BCo=r(L_t,"MvpModel"),L_t.forEach(t),ICo=r(o$e," (MVP model)"),o$e.forEach(t),NCo=i(x),K_=n(x,"LI",{});var r$e=s(K_);Tfe=n(r$e,"STRONG",{});var y_t=s(Tfe);qCo=r(y_t,"nezha"),y_t.forEach(t),jCo=r(r$e," \u2014 "),iD=n(r$e,"A",{href:!0});var x_t=s(iD);DCo=r(x_t,"NezhaModel"),x_t.forEach(t),GCo=r(r$e," (Nezha model)"),r$e.forEach(t),OCo=i(x),Z_=n(x,"LI",{});var t$e=s(Z_);Mfe=n(t$e,"STRONG",{});var $_t=s(Mfe);VCo=r($_t,"nystromformer"),$_t.forEach(t),XCo=r(t$e," \u2014 "),dD=n(t$e,"A",{href:!0});var k_t=s(dD);zCo=r(k_t,"NystromformerModel"),k_t.forEach(t),QCo=r(t$e," (Nystr\xF6mformer model)"),t$e.forEach(t),WCo=i(x),eu=n(x,"LI",{});var a$e=s(eu);Efe=n(a$e,"STRONG",{});var S_t=s(Efe);HCo=r(S_t,"openai-gpt"),S_t.forEach(t),UCo=r(a$e," \u2014 "),cD=n(a$e,"A",{href:!0});var R_t=s(cD);JCo=r(R_t,"OpenAIGPTModel"),R_t.forEach(t),YCo=r(a$e," (OpenAI GPT model)"),a$e.forEach(t),KCo=i(x),ou=n(x,"LI",{});var n$e=s(ou);Cfe=n(n$e,"STRONG",{});var P_t=s(Cfe);ZCo=r(P_t,"opt"),P_t.forEach(t),e5o=r(n$e," \u2014 "),fD=n(n$e,"A",{href:!0});var B_t=s(fD);o5o=r(B_t,"OPTModel"),B_t.forEach(t),r5o=r(n$e," (OPT model)"),n$e.forEach(t),t5o=i(x),ru=n(x,"LI",{});var s$e=s(ru);wfe=n(s$e,"STRONG",{});var I_t=s(wfe);a5o=r(I_t,"pegasus"),I_t.forEach(t),n5o=r(s$e," \u2014 "),mD=n(s$e,"A",{href:!0});var N_t=s(mD);s5o=r(N_t,"PegasusModel"),N_t.forEach(t),l5o=r(s$e," (Pegasus model)"),s$e.forEach(t),i5o=i(x),tu=n(x,"LI",{});var l$e=s(tu);Afe=n(l$e,"STRONG",{});var q_t=s(Afe);d5o=r(q_t,"perceiver"),q_t.forEach(t),c5o=r(l$e," \u2014 "),gD=n(l$e,"A",{href:!0});var j_t=s(gD);f5o=r(j_t,"PerceiverModel"),j_t.forEach(t),m5o=r(l$e," (Perceiver model)"),l$e.forEach(t),g5o=i(x),au=n(x,"LI",{});var i$e=s(au);Lfe=n(i$e,"STRONG",{});var D_t=s(Lfe);h5o=r(D_t,"plbart"),D_t.forEach(t),p5o=r(i$e," \u2014 "),hD=n(i$e,"A",{href:!0});var G_t=s(hD);_5o=r(G_t,"PLBartModel"),G_t.forEach(t),u5o=r(i$e," (PLBart model)"),i$e.forEach(t),b5o=i(x),nu=n(x,"LI",{});var d$e=s(nu);yfe=n(d$e,"STRONG",{});var O_t=s(yfe);v5o=r(O_t,"poolformer"),O_t.forEach(t),F5o=r(d$e," \u2014 "),pD=n(d$e,"A",{href:!0});var V_t=s(pD);T5o=r(V_t,"PoolFormerModel"),V_t.forEach(t),M5o=r(d$e," (PoolFormer model)"),d$e.forEach(t),E5o=i(x),su=n(x,"LI",{});var c$e=s(su);xfe=n(c$e,"STRONG",{});var X_t=s(xfe);C5o=r(X_t,"prophetnet"),X_t.forEach(t),w5o=r(c$e," \u2014 "),_D=n(c$e,"A",{href:!0});var z_t=s(_D);A5o=r(z_t,"ProphetNetModel"),z_t.forEach(t),L5o=r(c$e," (ProphetNet model)"),c$e.forEach(t),y5o=i(x),lu=n(x,"LI",{});var f$e=s(lu);$fe=n(f$e,"STRONG",{});var Q_t=s($fe);x5o=r(Q_t,"qdqbert"),Q_t.forEach(t),$5o=r(f$e," \u2014 "),uD=n(f$e,"A",{href:!0});var W_t=s(uD);k5o=r(W_t,"QDQBertModel"),W_t.forEach(t),S5o=r(f$e," (QDQBert model)"),f$e.forEach(t),R5o=i(x),iu=n(x,"LI",{});var m$e=s(iu);kfe=n(m$e,"STRONG",{});var H_t=s(kfe);P5o=r(H_t,"reformer"),H_t.forEach(t),B5o=r(m$e," \u2014 "),bD=n(m$e,"A",{href:!0});var U_t=s(bD);I5o=r(U_t,"ReformerModel"),U_t.forEach(t),N5o=r(m$e," (Reformer model)"),m$e.forEach(t),q5o=i(x),du=n(x,"LI",{});var g$e=s(du);Sfe=n(g$e,"STRONG",{});var J_t=s(Sfe);j5o=r(J_t,"regnet"),J_t.forEach(t),D5o=r(g$e," \u2014 "),vD=n(g$e,"A",{href:!0});var Y_t=s(vD);G5o=r(Y_t,"RegNetModel"),Y_t.forEach(t),O5o=r(g$e," (RegNet model)"),g$e.forEach(t),V5o=i(x),cu=n(x,"LI",{});var h$e=s(cu);Rfe=n(h$e,"STRONG",{});var K_t=s(Rfe);X5o=r(K_t,"rembert"),K_t.forEach(t),z5o=r(h$e," \u2014 "),FD=n(h$e,"A",{href:!0});var Z_t=s(FD);Q5o=r(Z_t,"RemBertModel"),Z_t.forEach(t),W5o=r(h$e," (RemBERT model)"),h$e.forEach(t),H5o=i(x),fu=n(x,"LI",{});var p$e=s(fu);Pfe=n(p$e,"STRONG",{});var eut=s(Pfe);U5o=r(eut,"resnet"),eut.forEach(t),J5o=r(p$e," \u2014 "),TD=n(p$e,"A",{href:!0});var out=s(TD);Y5o=r(out,"ResNetModel"),out.forEach(t),K5o=r(p$e," (ResNet model)"),p$e.forEach(t),Z5o=i(x),mu=n(x,"LI",{});var _$e=s(mu);Bfe=n(_$e,"STRONG",{});var rut=s(Bfe);e0o=r(rut,"retribert"),rut.forEach(t),o0o=r(_$e," \u2014 "),MD=n(_$e,"A",{href:!0});var tut=s(MD);r0o=r(tut,"RetriBertModel"),tut.forEach(t),t0o=r(_$e," (RetriBERT model)"),_$e.forEach(t),a0o=i(x),gu=n(x,"LI",{});var u$e=s(gu);Ife=n(u$e,"STRONG",{});var aut=s(Ife);n0o=r(aut,"roberta"),aut.forEach(t),s0o=r(u$e," \u2014 "),ED=n(u$e,"A",{href:!0});var nut=s(ED);l0o=r(nut,"RobertaModel"),nut.forEach(t),i0o=r(u$e," (RoBERTa model)"),u$e.forEach(t),d0o=i(x),hu=n(x,"LI",{});var b$e=s(hu);Nfe=n(b$e,"STRONG",{});var sut=s(Nfe);c0o=r(sut,"roformer"),sut.forEach(t),f0o=r(b$e," \u2014 "),CD=n(b$e,"A",{href:!0});var lut=s(CD);m0o=r(lut,"RoFormerModel"),lut.forEach(t),g0o=r(b$e," (RoFormer model)"),b$e.forEach(t),h0o=i(x),pu=n(x,"LI",{});var v$e=s(pu);qfe=n(v$e,"STRONG",{});var iut=s(qfe);p0o=r(iut,"segformer"),iut.forEach(t),_0o=r(v$e," \u2014 "),wD=n(v$e,"A",{href:!0});var dut=s(wD);u0o=r(dut,"SegformerModel"),dut.forEach(t),b0o=r(v$e," (SegFormer model)"),v$e.forEach(t),v0o=i(x),_u=n(x,"LI",{});var F$e=s(_u);jfe=n(F$e,"STRONG",{});var cut=s(jfe);F0o=r(cut,"sew"),cut.forEach(t),T0o=r(F$e," \u2014 "),AD=n(F$e,"A",{href:!0});var fut=s(AD);M0o=r(fut,"SEWModel"),fut.forEach(t),E0o=r(F$e," (SEW model)"),F$e.forEach(t),C0o=i(x),uu=n(x,"LI",{});var T$e=s(uu);Dfe=n(T$e,"STRONG",{});var mut=s(Dfe);w0o=r(mut,"sew-d"),mut.forEach(t),A0o=r(T$e," \u2014 "),LD=n(T$e,"A",{href:!0});var gut=s(LD);L0o=r(gut,"SEWDModel"),gut.forEach(t),y0o=r(T$e," (SEW-D model)"),T$e.forEach(t),x0o=i(x),bu=n(x,"LI",{});var M$e=s(bu);Gfe=n(M$e,"STRONG",{});var hut=s(Gfe);$0o=r(hut,"speech_to_text"),hut.forEach(t),k0o=r(M$e," \u2014 "),yD=n(M$e,"A",{href:!0});var put=s(yD);S0o=r(put,"Speech2TextModel"),put.forEach(t),R0o=r(M$e," (Speech2Text model)"),M$e.forEach(t),P0o=i(x),vu=n(x,"LI",{});var E$e=s(vu);Ofe=n(E$e,"STRONG",{});var _ut=s(Ofe);B0o=r(_ut,"splinter"),_ut.forEach(t),I0o=r(E$e," \u2014 "),xD=n(E$e,"A",{href:!0});var uut=s(xD);N0o=r(uut,"SplinterModel"),uut.forEach(t),q0o=r(E$e," (Splinter model)"),E$e.forEach(t),j0o=i(x),Fu=n(x,"LI",{});var C$e=s(Fu);Vfe=n(C$e,"STRONG",{});var but=s(Vfe);D0o=r(but,"squeezebert"),but.forEach(t),G0o=r(C$e," \u2014 "),$D=n(C$e,"A",{href:!0});var vut=s($D);O0o=r(vut,"SqueezeBertModel"),vut.forEach(t),V0o=r(C$e," (SqueezeBERT model)"),C$e.forEach(t),X0o=i(x),Tu=n(x,"LI",{});var w$e=s(Tu);Xfe=n(w$e,"STRONG",{});var Fut=s(Xfe);z0o=r(Fut,"swin"),Fut.forEach(t),Q0o=r(w$e," \u2014 "),kD=n(w$e,"A",{href:!0});var Tut=s(kD);W0o=r(Tut,"SwinModel"),Tut.forEach(t),H0o=r(w$e," (Swin Transformer model)"),w$e.forEach(t),U0o=i(x),Mu=n(x,"LI",{});var A$e=s(Mu);zfe=n(A$e,"STRONG",{});var Mut=s(zfe);J0o=r(Mut,"t5"),Mut.forEach(t),Y0o=r(A$e," \u2014 "),SD=n(A$e,"A",{href:!0});var Eut=s(SD);K0o=r(Eut,"T5Model"),Eut.forEach(t),Z0o=r(A$e," (T5 model)"),A$e.forEach(t),ewo=i(x),Eu=n(x,"LI",{});var L$e=s(Eu);Qfe=n(L$e,"STRONG",{});var Cut=s(Qfe);owo=r(Cut,"tapas"),Cut.forEach(t),rwo=r(L$e," \u2014 "),RD=n(L$e,"A",{href:!0});var wut=s(RD);two=r(wut,"TapasModel"),wut.forEach(t),awo=r(L$e," (TAPAS model)"),L$e.forEach(t),nwo=i(x),Cu=n(x,"LI",{});var y$e=s(Cu);Wfe=n(y$e,"STRONG",{});var Aut=s(Wfe);swo=r(Aut,"trajectory_transformer"),Aut.forEach(t),lwo=r(y$e," \u2014 "),PD=n(y$e,"A",{href:!0});var Lut=s(PD);iwo=r(Lut,"TrajectoryTransformerModel"),Lut.forEach(t),dwo=r(y$e," (Trajectory Transformer model)"),y$e.forEach(t),cwo=i(x),wu=n(x,"LI",{});var x$e=s(wu);Hfe=n(x$e,"STRONG",{});var yut=s(Hfe);fwo=r(yut,"transfo-xl"),yut.forEach(t),mwo=r(x$e," \u2014 "),BD=n(x$e,"A",{href:!0});var xut=s(BD);gwo=r(xut,"TransfoXLModel"),xut.forEach(t),hwo=r(x$e," (Transformer-XL model)"),x$e.forEach(t),pwo=i(x),Au=n(x,"LI",{});var $$e=s(Au);Ufe=n($$e,"STRONG",{});var $ut=s(Ufe);_wo=r($ut,"unispeech"),$ut.forEach(t),uwo=r($$e," \u2014 "),ID=n($$e,"A",{href:!0});var kut=s(ID);bwo=r(kut,"UniSpeechModel"),kut.forEach(t),vwo=r($$e," (UniSpeech model)"),$$e.forEach(t),Fwo=i(x),Lu=n(x,"LI",{});var k$e=s(Lu);Jfe=n(k$e,"STRONG",{});var Sut=s(Jfe);Two=r(Sut,"unispeech-sat"),Sut.forEach(t),Mwo=r(k$e," \u2014 "),ND=n(k$e,"A",{href:!0});var Rut=s(ND);Ewo=r(Rut,"UniSpeechSatModel"),Rut.forEach(t),Cwo=r(k$e," (UniSpeechSat model)"),k$e.forEach(t),wwo=i(x),yu=n(x,"LI",{});var S$e=s(yu);Yfe=n(S$e,"STRONG",{});var Put=s(Yfe);Awo=r(Put,"van"),Put.forEach(t),Lwo=r(S$e," \u2014 "),qD=n(S$e,"A",{href:!0});var But=s(qD);ywo=r(But,"VanModel"),But.forEach(t),xwo=r(S$e," (VAN model)"),S$e.forEach(t),$wo=i(x),xu=n(x,"LI",{});var R$e=s(xu);Kfe=n(R$e,"STRONG",{});var Iut=s(Kfe);kwo=r(Iut,"vilt"),Iut.forEach(t),Swo=r(R$e," \u2014 "),jD=n(R$e,"A",{href:!0});var Nut=s(jD);Rwo=r(Nut,"ViltModel"),Nut.forEach(t),Pwo=r(R$e," (ViLT model)"),R$e.forEach(t),Bwo=i(x),$u=n(x,"LI",{});var P$e=s($u);Zfe=n(P$e,"STRONG",{});var qut=s(Zfe);Iwo=r(qut,"vision-text-dual-encoder"),qut.forEach(t),Nwo=r(P$e," \u2014 "),DD=n(P$e,"A",{href:!0});var jut=s(DD);qwo=r(jut,"VisionTextDualEncoderModel"),jut.forEach(t),jwo=r(P$e," (VisionTextDualEncoder model)"),P$e.forEach(t),Dwo=i(x),ku=n(x,"LI",{});var B$e=s(ku);eme=n(B$e,"STRONG",{});var Dut=s(eme);Gwo=r(Dut,"visual_bert"),Dut.forEach(t),Owo=r(B$e," \u2014 "),GD=n(B$e,"A",{href:!0});var Gut=s(GD);Vwo=r(Gut,"VisualBertModel"),Gut.forEach(t),Xwo=r(B$e," (VisualBERT model)"),B$e.forEach(t),zwo=i(x),Su=n(x,"LI",{});var I$e=s(Su);ome=n(I$e,"STRONG",{});var Out=s(ome);Qwo=r(Out,"vit"),Out.forEach(t),Wwo=r(I$e," \u2014 "),OD=n(I$e,"A",{href:!0});var Vut=s(OD);Hwo=r(Vut,"ViTModel"),Vut.forEach(t),Uwo=r(I$e," (ViT model)"),I$e.forEach(t),Jwo=i(x),Ru=n(x,"LI",{});var N$e=s(Ru);rme=n(N$e,"STRONG",{});var Xut=s(rme);Ywo=r(Xut,"vit_mae"),Xut.forEach(t),Kwo=r(N$e," \u2014 "),VD=n(N$e,"A",{href:!0});var zut=s(VD);Zwo=r(zut,"ViTMAEModel"),zut.forEach(t),eAo=r(N$e," (ViTMAE model)"),N$e.forEach(t),oAo=i(x),Pu=n(x,"LI",{});var q$e=s(Pu);tme=n(q$e,"STRONG",{});var Qut=s(tme);rAo=r(Qut,"wav2vec2"),Qut.forEach(t),tAo=r(q$e," \u2014 "),XD=n(q$e,"A",{href:!0});var Wut=s(XD);aAo=r(Wut,"Wav2Vec2Model"),Wut.forEach(t),nAo=r(q$e," (Wav2Vec2 model)"),q$e.forEach(t),sAo=i(x),Bu=n(x,"LI",{});var j$e=s(Bu);ame=n(j$e,"STRONG",{});var Hut=s(ame);lAo=r(Hut,"wav2vec2-conformer"),Hut.forEach(t),iAo=r(j$e," \u2014 "),zD=n(j$e,"A",{href:!0});var Uut=s(zD);dAo=r(Uut,"Wav2Vec2ConformerModel"),Uut.forEach(t),cAo=r(j$e," (Wav2Vec2-Conformer model)"),j$e.forEach(t),fAo=i(x),Iu=n(x,"LI",{});var D$e=s(Iu);nme=n(D$e,"STRONG",{});var Jut=s(nme);mAo=r(Jut,"wavlm"),Jut.forEach(t),gAo=r(D$e," \u2014 "),QD=n(D$e,"A",{href:!0});var Yut=s(QD);hAo=r(Yut,"WavLMModel"),Yut.forEach(t),pAo=r(D$e," (WavLM model)"),D$e.forEach(t),_Ao=i(x),Nu=n(x,"LI",{});var G$e=s(Nu);sme=n(G$e,"STRONG",{});var Kut=s(sme);uAo=r(Kut,"xglm"),Kut.forEach(t),bAo=r(G$e," \u2014 "),WD=n(G$e,"A",{href:!0});var Zut=s(WD);vAo=r(Zut,"XGLMModel"),Zut.forEach(t),FAo=r(G$e," (XGLM model)"),G$e.forEach(t),TAo=i(x),qu=n(x,"LI",{});var O$e=s(qu);lme=n(O$e,"STRONG",{});var e1t=s(lme);MAo=r(e1t,"xlm"),e1t.forEach(t),EAo=r(O$e," \u2014 "),HD=n(O$e,"A",{href:!0});var o1t=s(HD);CAo=r(o1t,"XLMModel"),o1t.forEach(t),wAo=r(O$e," (XLM model)"),O$e.forEach(t),AAo=i(x),ju=n(x,"LI",{});var V$e=s(ju);ime=n(V$e,"STRONG",{});var r1t=s(ime);LAo=r(r1t,"xlm-prophetnet"),r1t.forEach(t),yAo=r(V$e," \u2014 "),UD=n(V$e,"A",{href:!0});var t1t=s(UD);xAo=r(t1t,"XLMProphetNetModel"),t1t.forEach(t),$Ao=r(V$e," (XLM-ProphetNet model)"),V$e.forEach(t),kAo=i(x),Du=n(x,"LI",{});var X$e=s(Du);dme=n(X$e,"STRONG",{});var a1t=s(dme);SAo=r(a1t,"xlm-roberta"),a1t.forEach(t),RAo=r(X$e," \u2014 "),JD=n(X$e,"A",{href:!0});var n1t=s(JD);PAo=r(n1t,"XLMRobertaModel"),n1t.forEach(t),BAo=r(X$e," (XLM-RoBERTa model)"),X$e.forEach(t),IAo=i(x),Gu=n(x,"LI",{});var z$e=s(Gu);cme=n(z$e,"STRONG",{});var s1t=s(cme);NAo=r(s1t,"xlm-roberta-xl"),s1t.forEach(t),qAo=r(z$e," \u2014 "),YD=n(z$e,"A",{href:!0});var l1t=s(YD);jAo=r(l1t,"XLMRobertaXLModel"),l1t.forEach(t),DAo=r(z$e," (XLM-RoBERTa-XL model)"),z$e.forEach(t),GAo=i(x),Ou=n(x,"LI",{});var Q$e=s(Ou);fme=n(Q$e,"STRONG",{});var i1t=s(fme);OAo=r(i1t,"xlnet"),i1t.forEach(t),VAo=r(Q$e," \u2014 "),KD=n(Q$e,"A",{href:!0});var d1t=s(KD);XAo=r(d1t,"XLNetModel"),d1t.forEach(t),zAo=r(Q$e," (XLNet model)"),Q$e.forEach(t),QAo=i(x),Vu=n(x,"LI",{});var W$e=s(Vu);mme=n(W$e,"STRONG",{});var c1t=s(mme);WAo=r(c1t,"yolos"),c1t.forEach(t),HAo=r(W$e," \u2014 "),ZD=n(W$e,"A",{href:!0});var f1t=s(ZD);UAo=r(f1t,"YolosModel"),f1t.forEach(t),JAo=r(W$e," (YOLOS model)"),W$e.forEach(t),YAo=i(x),Xu=n(x,"LI",{});var H$e=s(Xu);gme=n(H$e,"STRONG",{});var m1t=s(gme);KAo=r(m1t,"yoso"),m1t.forEach(t),ZAo=r(H$e," \u2014 "),eG=n(H$e,"A",{href:!0});var g1t=s(eG);e6o=r(g1t,"YosoModel"),g1t.forEach(t),o6o=r(H$e," (YOSO model)"),H$e.forEach(t),x.forEach(t),r6o=i(la),zu=n(la,"P",{});var U$e=s(zu);t6o=r(U$e,"The model is set in evaluation mode by default using "),hme=n(U$e,"CODE",{});var h1t=s(hme);a6o=r(h1t,"model.eval()"),h1t.forEach(t),n6o=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(U$e,"CODE",{});var p1t=s(pme);s6o=r(p1t,"model.train()"),p1t.forEach(t),U$e.forEach(t),l6o=i(la),T(Qu.$$.fragment,la),la.forEach(t),rl.forEach(t),_Xe=i(f),Xi=n(f,"H2",{class:!0});var MQe=s(Xi);Wu=n(MQe,"A",{id:!0,class:!0,href:!0});var _1t=s(Wu);_me=n(_1t,"SPAN",{});var u1t=s(_me);T(IL.$$.fragment,u1t),u1t.forEach(t),_1t.forEach(t),i6o=i(MQe),ume=n(MQe,"SPAN",{});var b1t=s(ume);d6o=r(b1t,"AutoModelForPreTraining"),b1t.forEach(t),MQe.forEach(t),uXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(NL.$$.fragment,tl),c6o=i(tl),zi=n(tl,"P",{});var Bre=s(zi);f6o=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oG=n(Bre,"A",{href:!0});var v1t=s(oG);m6o=r(v1t,"from_pretrained()"),v1t.forEach(t),g6o=r(Bre," class method or the "),rG=n(Bre,"A",{href:!0});var F1t=s(rG);h6o=r(F1t,"from_config()"),F1t.forEach(t),p6o=r(Bre,` class
method.`),Bre.forEach(t),_6o=i(tl),qL=n(tl,"P",{});var EQe=s(qL);u6o=r(EQe,"This class cannot be instantiated directly using "),bme=n(EQe,"CODE",{});var T1t=s(bme);b6o=r(T1t,"__init__()"),T1t.forEach(t),v6o=r(EQe," (throws an error)."),EQe.forEach(t),F6o=i(tl),dt=n(tl,"DIV",{class:!0});var f6=s(dt);T(jL.$$.fragment,f6),T6o=i(f6),vme=n(f6,"P",{});var M1t=s(vme);M6o=r(M1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),M1t.forEach(t),E6o=i(f6),Qi=n(f6,"P",{});var Ire=s(Qi);C6o=r(Ire,`Note:
Loading a model from its configuration file does `),Fme=n(Ire,"STRONG",{});var E1t=s(Fme);w6o=r(E1t,"not"),E1t.forEach(t),A6o=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(Ire,"A",{href:!0});var C1t=s(tG);L6o=r(C1t,"from_pretrained()"),C1t.forEach(t),y6o=r(Ire," to load the model weights."),Ire.forEach(t),x6o=i(f6),T(Hu.$$.fragment,f6),f6.forEach(t),$6o=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(DL.$$.fragment,ia),k6o=i(ia),Tme=n(ia,"P",{});var w1t=s(Tme);S6o=r(w1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),w1t.forEach(t),R6o=i(ia),Na=n(ia,"P",{});var m6=s(Na);P6o=r(m6,"The model class to instantiate is selected based on the "),Mme=n(m6,"CODE",{});var A1t=s(Mme);B6o=r(A1t,"model_type"),A1t.forEach(t),I6o=r(m6,` property of the config object (either
passed as an argument or loaded from `),Eme=n(m6,"CODE",{});var L1t=s(Eme);N6o=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),q6o=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(m6,"CODE",{});var y1t=s(Cme);j6o=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),D6o=r(m6,":"),m6.forEach(t),G6o=i(ia),G=n(ia,"UL",{});var O=s(G);Uu=n(O,"LI",{});var J$e=s(Uu);wme=n(J$e,"STRONG",{});var x1t=s(wme);O6o=r(x1t,"albert"),x1t.forEach(t),V6o=r(J$e," \u2014 "),aG=n(J$e,"A",{href:!0});var $1t=s(aG);X6o=r($1t,"AlbertForPreTraining"),$1t.forEach(t),z6o=r(J$e," (ALBERT model)"),J$e.forEach(t),Q6o=i(O),Ju=n(O,"LI",{});var Y$e=s(Ju);Ame=n(Y$e,"STRONG",{});var k1t=s(Ame);W6o=r(k1t,"bart"),k1t.forEach(t),H6o=r(Y$e," \u2014 "),nG=n(Y$e,"A",{href:!0});var S1t=s(nG);U6o=r(S1t,"BartForConditionalGeneration"),S1t.forEach(t),J6o=r(Y$e," (BART model)"),Y$e.forEach(t),Y6o=i(O),Yu=n(O,"LI",{});var K$e=s(Yu);Lme=n(K$e,"STRONG",{});var R1t=s(Lme);K6o=r(R1t,"bert"),R1t.forEach(t),Z6o=r(K$e," \u2014 "),sG=n(K$e,"A",{href:!0});var P1t=s(sG);e7o=r(P1t,"BertForPreTraining"),P1t.forEach(t),o7o=r(K$e," (BERT model)"),K$e.forEach(t),r7o=i(O),Ku=n(O,"LI",{});var Z$e=s(Ku);yme=n(Z$e,"STRONG",{});var B1t=s(yme);t7o=r(B1t,"big_bird"),B1t.forEach(t),a7o=r(Z$e," \u2014 "),lG=n(Z$e,"A",{href:!0});var I1t=s(lG);n7o=r(I1t,"BigBirdForPreTraining"),I1t.forEach(t),s7o=r(Z$e," (BigBird model)"),Z$e.forEach(t),l7o=i(O),Zu=n(O,"LI",{});var eke=s(Zu);xme=n(eke,"STRONG",{});var N1t=s(xme);i7o=r(N1t,"bloom"),N1t.forEach(t),d7o=r(eke," \u2014 "),iG=n(eke,"A",{href:!0});var q1t=s(iG);c7o=r(q1t,"BloomForCausalLM"),q1t.forEach(t),f7o=r(eke," (BLOOM model)"),eke.forEach(t),m7o=i(O),e1=n(O,"LI",{});var oke=s(e1);$me=n(oke,"STRONG",{});var j1t=s($me);g7o=r(j1t,"camembert"),j1t.forEach(t),h7o=r(oke," \u2014 "),dG=n(oke,"A",{href:!0});var D1t=s(dG);p7o=r(D1t,"CamembertForMaskedLM"),D1t.forEach(t),_7o=r(oke," (CamemBERT model)"),oke.forEach(t),u7o=i(O),o1=n(O,"LI",{});var rke=s(o1);kme=n(rke,"STRONG",{});var G1t=s(kme);b7o=r(G1t,"ctrl"),G1t.forEach(t),v7o=r(rke," \u2014 "),cG=n(rke,"A",{href:!0});var O1t=s(cG);F7o=r(O1t,"CTRLLMHeadModel"),O1t.forEach(t),T7o=r(rke," (CTRL model)"),rke.forEach(t),M7o=i(O),r1=n(O,"LI",{});var tke=s(r1);Sme=n(tke,"STRONG",{});var V1t=s(Sme);E7o=r(V1t,"data2vec-text"),V1t.forEach(t),C7o=r(tke," \u2014 "),fG=n(tke,"A",{href:!0});var X1t=s(fG);w7o=r(X1t,"Data2VecTextForMaskedLM"),X1t.forEach(t),A7o=r(tke," (Data2VecText model)"),tke.forEach(t),L7o=i(O),t1=n(O,"LI",{});var ake=s(t1);Rme=n(ake,"STRONG",{});var z1t=s(Rme);y7o=r(z1t,"deberta"),z1t.forEach(t),x7o=r(ake," \u2014 "),mG=n(ake,"A",{href:!0});var Q1t=s(mG);$7o=r(Q1t,"DebertaForMaskedLM"),Q1t.forEach(t),k7o=r(ake," (DeBERTa model)"),ake.forEach(t),S7o=i(O),a1=n(O,"LI",{});var nke=s(a1);Pme=n(nke,"STRONG",{});var W1t=s(Pme);R7o=r(W1t,"deberta-v2"),W1t.forEach(t),P7o=r(nke," \u2014 "),gG=n(nke,"A",{href:!0});var H1t=s(gG);B7o=r(H1t,"DebertaV2ForMaskedLM"),H1t.forEach(t),I7o=r(nke," (DeBERTa-v2 model)"),nke.forEach(t),N7o=i(O),n1=n(O,"LI",{});var ske=s(n1);Bme=n(ske,"STRONG",{});var U1t=s(Bme);q7o=r(U1t,"distilbert"),U1t.forEach(t),j7o=r(ske," \u2014 "),hG=n(ske,"A",{href:!0});var J1t=s(hG);D7o=r(J1t,"DistilBertForMaskedLM"),J1t.forEach(t),G7o=r(ske," (DistilBERT model)"),ske.forEach(t),O7o=i(O),s1=n(O,"LI",{});var lke=s(s1);Ime=n(lke,"STRONG",{});var Y1t=s(Ime);V7o=r(Y1t,"electra"),Y1t.forEach(t),X7o=r(lke," \u2014 "),pG=n(lke,"A",{href:!0});var K1t=s(pG);z7o=r(K1t,"ElectraForPreTraining"),K1t.forEach(t),Q7o=r(lke," (ELECTRA model)"),lke.forEach(t),W7o=i(O),l1=n(O,"LI",{});var ike=s(l1);Nme=n(ike,"STRONG",{});var Z1t=s(Nme);H7o=r(Z1t,"flaubert"),Z1t.forEach(t),U7o=r(ike," \u2014 "),_G=n(ike,"A",{href:!0});var e2t=s(_G);J7o=r(e2t,"FlaubertWithLMHeadModel"),e2t.forEach(t),Y7o=r(ike," (FlauBERT model)"),ike.forEach(t),K7o=i(O),i1=n(O,"LI",{});var dke=s(i1);qme=n(dke,"STRONG",{});var o2t=s(qme);Z7o=r(o2t,"flava"),o2t.forEach(t),eLo=r(dke," \u2014 "),uG=n(dke,"A",{href:!0});var r2t=s(uG);oLo=r(r2t,"FlavaForPreTraining"),r2t.forEach(t),rLo=r(dke," (FLAVA model)"),dke.forEach(t),tLo=i(O),d1=n(O,"LI",{});var cke=s(d1);jme=n(cke,"STRONG",{});var t2t=s(jme);aLo=r(t2t,"fnet"),t2t.forEach(t),nLo=r(cke," \u2014 "),bG=n(cke,"A",{href:!0});var a2t=s(bG);sLo=r(a2t,"FNetForPreTraining"),a2t.forEach(t),lLo=r(cke," (FNet model)"),cke.forEach(t),iLo=i(O),c1=n(O,"LI",{});var fke=s(c1);Dme=n(fke,"STRONG",{});var n2t=s(Dme);dLo=r(n2t,"fsmt"),n2t.forEach(t),cLo=r(fke," \u2014 "),vG=n(fke,"A",{href:!0});var s2t=s(vG);fLo=r(s2t,"FSMTForConditionalGeneration"),s2t.forEach(t),mLo=r(fke," (FairSeq Machine-Translation model)"),fke.forEach(t),gLo=i(O),f1=n(O,"LI",{});var mke=s(f1);Gme=n(mke,"STRONG",{});var l2t=s(Gme);hLo=r(l2t,"funnel"),l2t.forEach(t),pLo=r(mke," \u2014 "),FG=n(mke,"A",{href:!0});var i2t=s(FG);_Lo=r(i2t,"FunnelForPreTraining"),i2t.forEach(t),uLo=r(mke," (Funnel Transformer model)"),mke.forEach(t),bLo=i(O),m1=n(O,"LI",{});var gke=s(m1);Ome=n(gke,"STRONG",{});var d2t=s(Ome);vLo=r(d2t,"gpt2"),d2t.forEach(t),FLo=r(gke," \u2014 "),TG=n(gke,"A",{href:!0});var c2t=s(TG);TLo=r(c2t,"GPT2LMHeadModel"),c2t.forEach(t),MLo=r(gke," (OpenAI GPT-2 model)"),gke.forEach(t),ELo=i(O),g1=n(O,"LI",{});var hke=s(g1);Vme=n(hke,"STRONG",{});var f2t=s(Vme);CLo=r(f2t,"ibert"),f2t.forEach(t),wLo=r(hke," \u2014 "),MG=n(hke,"A",{href:!0});var m2t=s(MG);ALo=r(m2t,"IBertForMaskedLM"),m2t.forEach(t),LLo=r(hke," (I-BERT model)"),hke.forEach(t),yLo=i(O),h1=n(O,"LI",{});var pke=s(h1);Xme=n(pke,"STRONG",{});var g2t=s(Xme);xLo=r(g2t,"layoutlm"),g2t.forEach(t),$Lo=r(pke," \u2014 "),EG=n(pke,"A",{href:!0});var h2t=s(EG);kLo=r(h2t,"LayoutLMForMaskedLM"),h2t.forEach(t),SLo=r(pke," (LayoutLM model)"),pke.forEach(t),RLo=i(O),p1=n(O,"LI",{});var _ke=s(p1);zme=n(_ke,"STRONG",{});var p2t=s(zme);PLo=r(p2t,"longformer"),p2t.forEach(t),BLo=r(_ke," \u2014 "),CG=n(_ke,"A",{href:!0});var _2t=s(CG);ILo=r(_2t,"LongformerForMaskedLM"),_2t.forEach(t),NLo=r(_ke," (Longformer model)"),_ke.forEach(t),qLo=i(O),_1=n(O,"LI",{});var uke=s(_1);Qme=n(uke,"STRONG",{});var u2t=s(Qme);jLo=r(u2t,"lxmert"),u2t.forEach(t),DLo=r(uke," \u2014 "),wG=n(uke,"A",{href:!0});var b2t=s(wG);GLo=r(b2t,"LxmertForPreTraining"),b2t.forEach(t),OLo=r(uke," (LXMERT model)"),uke.forEach(t),VLo=i(O),u1=n(O,"LI",{});var bke=s(u1);Wme=n(bke,"STRONG",{});var v2t=s(Wme);XLo=r(v2t,"megatron-bert"),v2t.forEach(t),zLo=r(bke," \u2014 "),AG=n(bke,"A",{href:!0});var F2t=s(AG);QLo=r(F2t,"MegatronBertForPreTraining"),F2t.forEach(t),WLo=r(bke," (Megatron-BERT model)"),bke.forEach(t),HLo=i(O),b1=n(O,"LI",{});var vke=s(b1);Hme=n(vke,"STRONG",{});var T2t=s(Hme);ULo=r(T2t,"mobilebert"),T2t.forEach(t),JLo=r(vke," \u2014 "),LG=n(vke,"A",{href:!0});var M2t=s(LG);YLo=r(M2t,"MobileBertForPreTraining"),M2t.forEach(t),KLo=r(vke," (MobileBERT model)"),vke.forEach(t),ZLo=i(O),v1=n(O,"LI",{});var Fke=s(v1);Ume=n(Fke,"STRONG",{});var E2t=s(Ume);eyo=r(E2t,"mpnet"),E2t.forEach(t),oyo=r(Fke," \u2014 "),yG=n(Fke,"A",{href:!0});var C2t=s(yG);ryo=r(C2t,"MPNetForMaskedLM"),C2t.forEach(t),tyo=r(Fke," (MPNet model)"),Fke.forEach(t),ayo=i(O),F1=n(O,"LI",{});var Tke=s(F1);Jme=n(Tke,"STRONG",{});var w2t=s(Jme);nyo=r(w2t,"mvp"),w2t.forEach(t),syo=r(Tke," \u2014 "),xG=n(Tke,"A",{href:!0});var A2t=s(xG);lyo=r(A2t,"MvpForConditionalGeneration"),A2t.forEach(t),iyo=r(Tke," (MVP model)"),Tke.forEach(t),dyo=i(O),T1=n(O,"LI",{});var Mke=s(T1);Yme=n(Mke,"STRONG",{});var L2t=s(Yme);cyo=r(L2t,"nezha"),L2t.forEach(t),fyo=r(Mke," \u2014 "),$G=n(Mke,"A",{href:!0});var y2t=s($G);myo=r(y2t,"NezhaForPreTraining"),y2t.forEach(t),gyo=r(Mke," (Nezha model)"),Mke.forEach(t),hyo=i(O),M1=n(O,"LI",{});var Eke=s(M1);Kme=n(Eke,"STRONG",{});var x2t=s(Kme);pyo=r(x2t,"openai-gpt"),x2t.forEach(t),_yo=r(Eke," \u2014 "),kG=n(Eke,"A",{href:!0});var $2t=s(kG);uyo=r($2t,"OpenAIGPTLMHeadModel"),$2t.forEach(t),byo=r(Eke," (OpenAI GPT model)"),Eke.forEach(t),vyo=i(O),E1=n(O,"LI",{});var Cke=s(E1);Zme=n(Cke,"STRONG",{});var k2t=s(Zme);Fyo=r(k2t,"retribert"),k2t.forEach(t),Tyo=r(Cke," \u2014 "),SG=n(Cke,"A",{href:!0});var S2t=s(SG);Myo=r(S2t,"RetriBertModel"),S2t.forEach(t),Eyo=r(Cke," (RetriBERT model)"),Cke.forEach(t),Cyo=i(O),C1=n(O,"LI",{});var wke=s(C1);ege=n(wke,"STRONG",{});var R2t=s(ege);wyo=r(R2t,"roberta"),R2t.forEach(t),Ayo=r(wke," \u2014 "),RG=n(wke,"A",{href:!0});var P2t=s(RG);Lyo=r(P2t,"RobertaForMaskedLM"),P2t.forEach(t),yyo=r(wke," (RoBERTa model)"),wke.forEach(t),xyo=i(O),w1=n(O,"LI",{});var Ake=s(w1);oge=n(Ake,"STRONG",{});var B2t=s(oge);$yo=r(B2t,"splinter"),B2t.forEach(t),kyo=r(Ake," \u2014 "),PG=n(Ake,"A",{href:!0});var I2t=s(PG);Syo=r(I2t,"SplinterForPreTraining"),I2t.forEach(t),Ryo=r(Ake," (Splinter model)"),Ake.forEach(t),Pyo=i(O),A1=n(O,"LI",{});var Lke=s(A1);rge=n(Lke,"STRONG",{});var N2t=s(rge);Byo=r(N2t,"squeezebert"),N2t.forEach(t),Iyo=r(Lke," \u2014 "),BG=n(Lke,"A",{href:!0});var q2t=s(BG);Nyo=r(q2t,"SqueezeBertForMaskedLM"),q2t.forEach(t),qyo=r(Lke," (SqueezeBERT model)"),Lke.forEach(t),jyo=i(O),L1=n(O,"LI",{});var yke=s(L1);tge=n(yke,"STRONG",{});var j2t=s(tge);Dyo=r(j2t,"t5"),j2t.forEach(t),Gyo=r(yke," \u2014 "),IG=n(yke,"A",{href:!0});var D2t=s(IG);Oyo=r(D2t,"T5ForConditionalGeneration"),D2t.forEach(t),Vyo=r(yke," (T5 model)"),yke.forEach(t),Xyo=i(O),y1=n(O,"LI",{});var xke=s(y1);age=n(xke,"STRONG",{});var G2t=s(age);zyo=r(G2t,"tapas"),G2t.forEach(t),Qyo=r(xke," \u2014 "),NG=n(xke,"A",{href:!0});var O2t=s(NG);Wyo=r(O2t,"TapasForMaskedLM"),O2t.forEach(t),Hyo=r(xke," (TAPAS model)"),xke.forEach(t),Uyo=i(O),x1=n(O,"LI",{});var $ke=s(x1);nge=n($ke,"STRONG",{});var V2t=s(nge);Jyo=r(V2t,"transfo-xl"),V2t.forEach(t),Yyo=r($ke," \u2014 "),qG=n($ke,"A",{href:!0});var X2t=s(qG);Kyo=r(X2t,"TransfoXLLMHeadModel"),X2t.forEach(t),Zyo=r($ke," (Transformer-XL model)"),$ke.forEach(t),e9o=i(O),$1=n(O,"LI",{});var kke=s($1);sge=n(kke,"STRONG",{});var z2t=s(sge);o9o=r(z2t,"unispeech"),z2t.forEach(t),r9o=r(kke," \u2014 "),jG=n(kke,"A",{href:!0});var Q2t=s(jG);t9o=r(Q2t,"UniSpeechForPreTraining"),Q2t.forEach(t),a9o=r(kke," (UniSpeech model)"),kke.forEach(t),n9o=i(O),k1=n(O,"LI",{});var Ske=s(k1);lge=n(Ske,"STRONG",{});var W2t=s(lge);s9o=r(W2t,"unispeech-sat"),W2t.forEach(t),l9o=r(Ske," \u2014 "),DG=n(Ske,"A",{href:!0});var H2t=s(DG);i9o=r(H2t,"UniSpeechSatForPreTraining"),H2t.forEach(t),d9o=r(Ske," (UniSpeechSat model)"),Ske.forEach(t),c9o=i(O),S1=n(O,"LI",{});var Rke=s(S1);ige=n(Rke,"STRONG",{});var U2t=s(ige);f9o=r(U2t,"visual_bert"),U2t.forEach(t),m9o=r(Rke," \u2014 "),GG=n(Rke,"A",{href:!0});var J2t=s(GG);g9o=r(J2t,"VisualBertForPreTraining"),J2t.forEach(t),h9o=r(Rke," (VisualBERT model)"),Rke.forEach(t),p9o=i(O),R1=n(O,"LI",{});var Pke=s(R1);dge=n(Pke,"STRONG",{});var Y2t=s(dge);_9o=r(Y2t,"vit_mae"),Y2t.forEach(t),u9o=r(Pke," \u2014 "),OG=n(Pke,"A",{href:!0});var K2t=s(OG);b9o=r(K2t,"ViTMAEForPreTraining"),K2t.forEach(t),v9o=r(Pke," (ViTMAE model)"),Pke.forEach(t),F9o=i(O),P1=n(O,"LI",{});var Bke=s(P1);cge=n(Bke,"STRONG",{});var Z2t=s(cge);T9o=r(Z2t,"wav2vec2"),Z2t.forEach(t),M9o=r(Bke," \u2014 "),VG=n(Bke,"A",{href:!0});var ebt=s(VG);E9o=r(ebt,"Wav2Vec2ForPreTraining"),ebt.forEach(t),C9o=r(Bke," (Wav2Vec2 model)"),Bke.forEach(t),w9o=i(O),B1=n(O,"LI",{});var Ike=s(B1);fge=n(Ike,"STRONG",{});var obt=s(fge);A9o=r(obt,"wav2vec2-conformer"),obt.forEach(t),L9o=r(Ike," \u2014 "),XG=n(Ike,"A",{href:!0});var rbt=s(XG);y9o=r(rbt,"Wav2Vec2ConformerForPreTraining"),rbt.forEach(t),x9o=r(Ike," (Wav2Vec2-Conformer model)"),Ike.forEach(t),$9o=i(O),I1=n(O,"LI",{});var Nke=s(I1);mge=n(Nke,"STRONG",{});var tbt=s(mge);k9o=r(tbt,"xlm"),tbt.forEach(t),S9o=r(Nke," \u2014 "),zG=n(Nke,"A",{href:!0});var abt=s(zG);R9o=r(abt,"XLMWithLMHeadModel"),abt.forEach(t),P9o=r(Nke," (XLM model)"),Nke.forEach(t),B9o=i(O),N1=n(O,"LI",{});var qke=s(N1);gge=n(qke,"STRONG",{});var nbt=s(gge);I9o=r(nbt,"xlm-roberta"),nbt.forEach(t),N9o=r(qke," \u2014 "),QG=n(qke,"A",{href:!0});var sbt=s(QG);q9o=r(sbt,"XLMRobertaForMaskedLM"),sbt.forEach(t),j9o=r(qke," (XLM-RoBERTa model)"),qke.forEach(t),D9o=i(O),q1=n(O,"LI",{});var jke=s(q1);hge=n(jke,"STRONG",{});var lbt=s(hge);G9o=r(lbt,"xlm-roberta-xl"),lbt.forEach(t),O9o=r(jke," \u2014 "),WG=n(jke,"A",{href:!0});var ibt=s(WG);V9o=r(ibt,"XLMRobertaXLForMaskedLM"),ibt.forEach(t),X9o=r(jke," (XLM-RoBERTa-XL model)"),jke.forEach(t),z9o=i(O),j1=n(O,"LI",{});var Dke=s(j1);pge=n(Dke,"STRONG",{});var dbt=s(pge);Q9o=r(dbt,"xlnet"),dbt.forEach(t),W9o=r(Dke," \u2014 "),HG=n(Dke,"A",{href:!0});var cbt=s(HG);H9o=r(cbt,"XLNetLMHeadModel"),cbt.forEach(t),U9o=r(Dke," (XLNet model)"),Dke.forEach(t),O.forEach(t),J9o=i(ia),D1=n(ia,"P",{});var Gke=s(D1);Y9o=r(Gke,"The model is set in evaluation mode by default using "),_ge=n(Gke,"CODE",{});var fbt=s(_ge);K9o=r(fbt,"model.eval()"),fbt.forEach(t),Z9o=r(Gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(Gke,"CODE",{});var mbt=s(uge);exo=r(mbt,"model.train()"),mbt.forEach(t),Gke.forEach(t),oxo=i(ia),T(G1.$$.fragment,ia),ia.forEach(t),tl.forEach(t),bXe=i(f),Wi=n(f,"H2",{class:!0});var CQe=s(Wi);O1=n(CQe,"A",{id:!0,class:!0,href:!0});var gbt=s(O1);bge=n(gbt,"SPAN",{});var hbt=s(bge);T(GL.$$.fragment,hbt),hbt.forEach(t),gbt.forEach(t),rxo=i(CQe),vge=n(CQe,"SPAN",{});var pbt=s(vge);txo=r(pbt,"AutoModelForCausalLM"),pbt.forEach(t),CQe.forEach(t),vXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(OL.$$.fragment,al),axo=i(al),Hi=n(al,"P",{});var Nre=s(Hi);nxo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UG=n(Nre,"A",{href:!0});var _bt=s(UG);sxo=r(_bt,"from_pretrained()"),_bt.forEach(t),lxo=r(Nre," class method or the "),JG=n(Nre,"A",{href:!0});var ubt=s(JG);ixo=r(ubt,"from_config()"),ubt.forEach(t),dxo=r(Nre,` class
method.`),Nre.forEach(t),cxo=i(al),VL=n(al,"P",{});var wQe=s(VL);fxo=r(wQe,"This class cannot be instantiated directly using "),Fge=n(wQe,"CODE",{});var bbt=s(Fge);mxo=r(bbt,"__init__()"),bbt.forEach(t),gxo=r(wQe," (throws an error)."),wQe.forEach(t),hxo=i(al),ct=n(al,"DIV",{class:!0});var g6=s(ct);T(XL.$$.fragment,g6),pxo=i(g6),Tge=n(g6,"P",{});var vbt=s(Tge);_xo=r(vbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vbt.forEach(t),uxo=i(g6),Ui=n(g6,"P",{});var qre=s(Ui);bxo=r(qre,`Note:
Loading a model from its configuration file does `),Mge=n(qre,"STRONG",{});var Fbt=s(Mge);vxo=r(Fbt,"not"),Fbt.forEach(t),Fxo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(qre,"A",{href:!0});var Tbt=s(YG);Txo=r(Tbt,"from_pretrained()"),Tbt.forEach(t),Mxo=r(qre," to load the model weights."),qre.forEach(t),Exo=i(g6),T(V1.$$.fragment,g6),g6.forEach(t),Cxo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(zL.$$.fragment,da),wxo=i(da),Ege=n(da,"P",{});var Mbt=s(Ege);Axo=r(Mbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mbt.forEach(t),Lxo=i(da),qa=n(da,"P",{});var h6=s(qa);yxo=r(h6,"The model class to instantiate is selected based on the "),Cge=n(h6,"CODE",{});var Ebt=s(Cge);xxo=r(Ebt,"model_type"),Ebt.forEach(t),$xo=r(h6,` property of the config object (either
passed as an argument or loaded from `),wge=n(h6,"CODE",{});var Cbt=s(wge);kxo=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Sxo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(h6,"CODE",{});var wbt=s(Age);Rxo=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),Pxo=r(h6,":"),h6.forEach(t),Bxo=i(da),z=n(da,"UL",{});var Q=s(z);X1=n(Q,"LI",{});var Oke=s(X1);Lge=n(Oke,"STRONG",{});var Abt=s(Lge);Ixo=r(Abt,"bart"),Abt.forEach(t),Nxo=r(Oke," \u2014 "),KG=n(Oke,"A",{href:!0});var Lbt=s(KG);qxo=r(Lbt,"BartForCausalLM"),Lbt.forEach(t),jxo=r(Oke," (BART model)"),Oke.forEach(t),Dxo=i(Q),z1=n(Q,"LI",{});var Vke=s(z1);yge=n(Vke,"STRONG",{});var ybt=s(yge);Gxo=r(ybt,"bert"),ybt.forEach(t),Oxo=r(Vke," \u2014 "),ZG=n(Vke,"A",{href:!0});var xbt=s(ZG);Vxo=r(xbt,"BertLMHeadModel"),xbt.forEach(t),Xxo=r(Vke," (BERT model)"),Vke.forEach(t),zxo=i(Q),Q1=n(Q,"LI",{});var Xke=s(Q1);xge=n(Xke,"STRONG",{});var $bt=s(xge);Qxo=r($bt,"bert-generation"),$bt.forEach(t),Wxo=r(Xke," \u2014 "),eO=n(Xke,"A",{href:!0});var kbt=s(eO);Hxo=r(kbt,"BertGenerationDecoder"),kbt.forEach(t),Uxo=r(Xke," (Bert Generation model)"),Xke.forEach(t),Jxo=i(Q),W1=n(Q,"LI",{});var zke=s(W1);$ge=n(zke,"STRONG",{});var Sbt=s($ge);Yxo=r(Sbt,"big_bird"),Sbt.forEach(t),Kxo=r(zke," \u2014 "),oO=n(zke,"A",{href:!0});var Rbt=s(oO);Zxo=r(Rbt,"BigBirdForCausalLM"),Rbt.forEach(t),e$o=r(zke," (BigBird model)"),zke.forEach(t),o$o=i(Q),H1=n(Q,"LI",{});var Qke=s(H1);kge=n(Qke,"STRONG",{});var Pbt=s(kge);r$o=r(Pbt,"bigbird_pegasus"),Pbt.forEach(t),t$o=r(Qke," \u2014 "),rO=n(Qke,"A",{href:!0});var Bbt=s(rO);a$o=r(Bbt,"BigBirdPegasusForCausalLM"),Bbt.forEach(t),n$o=r(Qke," (BigBird-Pegasus model)"),Qke.forEach(t),s$o=i(Q),U1=n(Q,"LI",{});var Wke=s(U1);Sge=n(Wke,"STRONG",{});var Ibt=s(Sge);l$o=r(Ibt,"blenderbot"),Ibt.forEach(t),i$o=r(Wke," \u2014 "),tO=n(Wke,"A",{href:!0});var Nbt=s(tO);d$o=r(Nbt,"BlenderbotForCausalLM"),Nbt.forEach(t),c$o=r(Wke," (Blenderbot model)"),Wke.forEach(t),f$o=i(Q),J1=n(Q,"LI",{});var Hke=s(J1);Rge=n(Hke,"STRONG",{});var qbt=s(Rge);m$o=r(qbt,"blenderbot-small"),qbt.forEach(t),g$o=r(Hke," \u2014 "),aO=n(Hke,"A",{href:!0});var jbt=s(aO);h$o=r(jbt,"BlenderbotSmallForCausalLM"),jbt.forEach(t),p$o=r(Hke," (BlenderbotSmall model)"),Hke.forEach(t),_$o=i(Q),Y1=n(Q,"LI",{});var Uke=s(Y1);Pge=n(Uke,"STRONG",{});var Dbt=s(Pge);u$o=r(Dbt,"bloom"),Dbt.forEach(t),b$o=r(Uke," \u2014 "),nO=n(Uke,"A",{href:!0});var Gbt=s(nO);v$o=r(Gbt,"BloomForCausalLM"),Gbt.forEach(t),F$o=r(Uke," (BLOOM model)"),Uke.forEach(t),T$o=i(Q),K1=n(Q,"LI",{});var Jke=s(K1);Bge=n(Jke,"STRONG",{});var Obt=s(Bge);M$o=r(Obt,"camembert"),Obt.forEach(t),E$o=r(Jke," \u2014 "),sO=n(Jke,"A",{href:!0});var Vbt=s(sO);C$o=r(Vbt,"CamembertForCausalLM"),Vbt.forEach(t),w$o=r(Jke," (CamemBERT model)"),Jke.forEach(t),A$o=i(Q),Z1=n(Q,"LI",{});var Yke=s(Z1);Ige=n(Yke,"STRONG",{});var Xbt=s(Ige);L$o=r(Xbt,"codegen"),Xbt.forEach(t),y$o=r(Yke," \u2014 "),lO=n(Yke,"A",{href:!0});var zbt=s(lO);x$o=r(zbt,"CodeGenForCausalLM"),zbt.forEach(t),$$o=r(Yke," (CodeGen model)"),Yke.forEach(t),k$o=i(Q),e2=n(Q,"LI",{});var Kke=s(e2);Nge=n(Kke,"STRONG",{});var Qbt=s(Nge);S$o=r(Qbt,"ctrl"),Qbt.forEach(t),R$o=r(Kke," \u2014 "),iO=n(Kke,"A",{href:!0});var Wbt=s(iO);P$o=r(Wbt,"CTRLLMHeadModel"),Wbt.forEach(t),B$o=r(Kke," (CTRL model)"),Kke.forEach(t),I$o=i(Q),o2=n(Q,"LI",{});var Zke=s(o2);qge=n(Zke,"STRONG",{});var Hbt=s(qge);N$o=r(Hbt,"data2vec-text"),Hbt.forEach(t),q$o=r(Zke," \u2014 "),dO=n(Zke,"A",{href:!0});var Ubt=s(dO);j$o=r(Ubt,"Data2VecTextForCausalLM"),Ubt.forEach(t),D$o=r(Zke," (Data2VecText model)"),Zke.forEach(t),G$o=i(Q),r2=n(Q,"LI",{});var eSe=s(r2);jge=n(eSe,"STRONG",{});var Jbt=s(jge);O$o=r(Jbt,"electra"),Jbt.forEach(t),V$o=r(eSe," \u2014 "),cO=n(eSe,"A",{href:!0});var Ybt=s(cO);X$o=r(Ybt,"ElectraForCausalLM"),Ybt.forEach(t),z$o=r(eSe," (ELECTRA model)"),eSe.forEach(t),Q$o=i(Q),t2=n(Q,"LI",{});var oSe=s(t2);Dge=n(oSe,"STRONG",{});var Kbt=s(Dge);W$o=r(Kbt,"gpt2"),Kbt.forEach(t),H$o=r(oSe," \u2014 "),fO=n(oSe,"A",{href:!0});var Zbt=s(fO);U$o=r(Zbt,"GPT2LMHeadModel"),Zbt.forEach(t),J$o=r(oSe," (OpenAI GPT-2 model)"),oSe.forEach(t),Y$o=i(Q),a2=n(Q,"LI",{});var rSe=s(a2);Gge=n(rSe,"STRONG",{});var e3t=s(Gge);K$o=r(e3t,"gpt_neo"),e3t.forEach(t),Z$o=r(rSe," \u2014 "),mO=n(rSe,"A",{href:!0});var o3t=s(mO);eko=r(o3t,"GPTNeoForCausalLM"),o3t.forEach(t),oko=r(rSe," (GPT Neo model)"),rSe.forEach(t),rko=i(Q),n2=n(Q,"LI",{});var tSe=s(n2);Oge=n(tSe,"STRONG",{});var r3t=s(Oge);tko=r(r3t,"gpt_neox"),r3t.forEach(t),ako=r(tSe," \u2014 "),gO=n(tSe,"A",{href:!0});var t3t=s(gO);nko=r(t3t,"GPTNeoXForCausalLM"),t3t.forEach(t),sko=r(tSe," (GPT NeoX model)"),tSe.forEach(t),lko=i(Q),s2=n(Q,"LI",{});var aSe=s(s2);Vge=n(aSe,"STRONG",{});var a3t=s(Vge);iko=r(a3t,"gptj"),a3t.forEach(t),dko=r(aSe," \u2014 "),hO=n(aSe,"A",{href:!0});var n3t=s(hO);cko=r(n3t,"GPTJForCausalLM"),n3t.forEach(t),fko=r(aSe," (GPT-J model)"),aSe.forEach(t),mko=i(Q),l2=n(Q,"LI",{});var nSe=s(l2);Xge=n(nSe,"STRONG",{});var s3t=s(Xge);gko=r(s3t,"marian"),s3t.forEach(t),hko=r(nSe," \u2014 "),pO=n(nSe,"A",{href:!0});var l3t=s(pO);pko=r(l3t,"MarianForCausalLM"),l3t.forEach(t),_ko=r(nSe," (Marian model)"),nSe.forEach(t),uko=i(Q),i2=n(Q,"LI",{});var sSe=s(i2);zge=n(sSe,"STRONG",{});var i3t=s(zge);bko=r(i3t,"mbart"),i3t.forEach(t),vko=r(sSe," \u2014 "),_O=n(sSe,"A",{href:!0});var d3t=s(_O);Fko=r(d3t,"MBartForCausalLM"),d3t.forEach(t),Tko=r(sSe," (mBART model)"),sSe.forEach(t),Mko=i(Q),d2=n(Q,"LI",{});var lSe=s(d2);Qge=n(lSe,"STRONG",{});var c3t=s(Qge);Eko=r(c3t,"megatron-bert"),c3t.forEach(t),Cko=r(lSe," \u2014 "),uO=n(lSe,"A",{href:!0});var f3t=s(uO);wko=r(f3t,"MegatronBertForCausalLM"),f3t.forEach(t),Ako=r(lSe," (Megatron-BERT model)"),lSe.forEach(t),Lko=i(Q),c2=n(Q,"LI",{});var iSe=s(c2);Wge=n(iSe,"STRONG",{});var m3t=s(Wge);yko=r(m3t,"mvp"),m3t.forEach(t),xko=r(iSe," \u2014 "),bO=n(iSe,"A",{href:!0});var g3t=s(bO);$ko=r(g3t,"MvpForCausalLM"),g3t.forEach(t),kko=r(iSe," (MVP model)"),iSe.forEach(t),Sko=i(Q),f2=n(Q,"LI",{});var dSe=s(f2);Hge=n(dSe,"STRONG",{});var h3t=s(Hge);Rko=r(h3t,"openai-gpt"),h3t.forEach(t),Pko=r(dSe," \u2014 "),vO=n(dSe,"A",{href:!0});var p3t=s(vO);Bko=r(p3t,"OpenAIGPTLMHeadModel"),p3t.forEach(t),Iko=r(dSe," (OpenAI GPT model)"),dSe.forEach(t),Nko=i(Q),m2=n(Q,"LI",{});var cSe=s(m2);Uge=n(cSe,"STRONG",{});var _3t=s(Uge);qko=r(_3t,"opt"),_3t.forEach(t),jko=r(cSe," \u2014 "),FO=n(cSe,"A",{href:!0});var u3t=s(FO);Dko=r(u3t,"OPTForCausalLM"),u3t.forEach(t),Gko=r(cSe," (OPT model)"),cSe.forEach(t),Oko=i(Q),g2=n(Q,"LI",{});var fSe=s(g2);Jge=n(fSe,"STRONG",{});var b3t=s(Jge);Vko=r(b3t,"pegasus"),b3t.forEach(t),Xko=r(fSe," \u2014 "),TO=n(fSe,"A",{href:!0});var v3t=s(TO);zko=r(v3t,"PegasusForCausalLM"),v3t.forEach(t),Qko=r(fSe," (Pegasus model)"),fSe.forEach(t),Wko=i(Q),h2=n(Q,"LI",{});var mSe=s(h2);Yge=n(mSe,"STRONG",{});var F3t=s(Yge);Hko=r(F3t,"plbart"),F3t.forEach(t),Uko=r(mSe," \u2014 "),MO=n(mSe,"A",{href:!0});var T3t=s(MO);Jko=r(T3t,"PLBartForCausalLM"),T3t.forEach(t),Yko=r(mSe," (PLBart model)"),mSe.forEach(t),Kko=i(Q),p2=n(Q,"LI",{});var gSe=s(p2);Kge=n(gSe,"STRONG",{});var M3t=s(Kge);Zko=r(M3t,"prophetnet"),M3t.forEach(t),eSo=r(gSe," \u2014 "),EO=n(gSe,"A",{href:!0});var E3t=s(EO);oSo=r(E3t,"ProphetNetForCausalLM"),E3t.forEach(t),rSo=r(gSe," (ProphetNet model)"),gSe.forEach(t),tSo=i(Q),_2=n(Q,"LI",{});var hSe=s(_2);Zge=n(hSe,"STRONG",{});var C3t=s(Zge);aSo=r(C3t,"qdqbert"),C3t.forEach(t),nSo=r(hSe," \u2014 "),CO=n(hSe,"A",{href:!0});var w3t=s(CO);sSo=r(w3t,"QDQBertLMHeadModel"),w3t.forEach(t),lSo=r(hSe," (QDQBert model)"),hSe.forEach(t),iSo=i(Q),u2=n(Q,"LI",{});var pSe=s(u2);ehe=n(pSe,"STRONG",{});var A3t=s(ehe);dSo=r(A3t,"reformer"),A3t.forEach(t),cSo=r(pSe," \u2014 "),wO=n(pSe,"A",{href:!0});var L3t=s(wO);fSo=r(L3t,"ReformerModelWithLMHead"),L3t.forEach(t),mSo=r(pSe," (Reformer model)"),pSe.forEach(t),gSo=i(Q),b2=n(Q,"LI",{});var _Se=s(b2);ohe=n(_Se,"STRONG",{});var y3t=s(ohe);hSo=r(y3t,"rembert"),y3t.forEach(t),pSo=r(_Se," \u2014 "),AO=n(_Se,"A",{href:!0});var x3t=s(AO);_So=r(x3t,"RemBertForCausalLM"),x3t.forEach(t),uSo=r(_Se," (RemBERT model)"),_Se.forEach(t),bSo=i(Q),v2=n(Q,"LI",{});var uSe=s(v2);rhe=n(uSe,"STRONG",{});var $3t=s(rhe);vSo=r($3t,"roberta"),$3t.forEach(t),FSo=r(uSe," \u2014 "),LO=n(uSe,"A",{href:!0});var k3t=s(LO);TSo=r(k3t,"RobertaForCausalLM"),k3t.forEach(t),MSo=r(uSe," (RoBERTa model)"),uSe.forEach(t),ESo=i(Q),F2=n(Q,"LI",{});var bSe=s(F2);the=n(bSe,"STRONG",{});var S3t=s(the);CSo=r(S3t,"roformer"),S3t.forEach(t),wSo=r(bSe," \u2014 "),yO=n(bSe,"A",{href:!0});var R3t=s(yO);ASo=r(R3t,"RoFormerForCausalLM"),R3t.forEach(t),LSo=r(bSe," (RoFormer model)"),bSe.forEach(t),ySo=i(Q),T2=n(Q,"LI",{});var vSe=s(T2);ahe=n(vSe,"STRONG",{});var P3t=s(ahe);xSo=r(P3t,"speech_to_text_2"),P3t.forEach(t),$So=r(vSe," \u2014 "),xO=n(vSe,"A",{href:!0});var B3t=s(xO);kSo=r(B3t,"Speech2Text2ForCausalLM"),B3t.forEach(t),SSo=r(vSe," (Speech2Text2 model)"),vSe.forEach(t),RSo=i(Q),M2=n(Q,"LI",{});var FSe=s(M2);nhe=n(FSe,"STRONG",{});var I3t=s(nhe);PSo=r(I3t,"transfo-xl"),I3t.forEach(t),BSo=r(FSe," \u2014 "),$O=n(FSe,"A",{href:!0});var N3t=s($O);ISo=r(N3t,"TransfoXLLMHeadModel"),N3t.forEach(t),NSo=r(FSe," (Transformer-XL model)"),FSe.forEach(t),qSo=i(Q),E2=n(Q,"LI",{});var TSe=s(E2);she=n(TSe,"STRONG",{});var q3t=s(she);jSo=r(q3t,"trocr"),q3t.forEach(t),DSo=r(TSe," \u2014 "),kO=n(TSe,"A",{href:!0});var j3t=s(kO);GSo=r(j3t,"TrOCRForCausalLM"),j3t.forEach(t),OSo=r(TSe," (TrOCR model)"),TSe.forEach(t),VSo=i(Q),C2=n(Q,"LI",{});var MSe=s(C2);lhe=n(MSe,"STRONG",{});var D3t=s(lhe);XSo=r(D3t,"xglm"),D3t.forEach(t),zSo=r(MSe," \u2014 "),SO=n(MSe,"A",{href:!0});var G3t=s(SO);QSo=r(G3t,"XGLMForCausalLM"),G3t.forEach(t),WSo=r(MSe," (XGLM model)"),MSe.forEach(t),HSo=i(Q),w2=n(Q,"LI",{});var ESe=s(w2);ihe=n(ESe,"STRONG",{});var O3t=s(ihe);USo=r(O3t,"xlm"),O3t.forEach(t),JSo=r(ESe," \u2014 "),RO=n(ESe,"A",{href:!0});var V3t=s(RO);YSo=r(V3t,"XLMWithLMHeadModel"),V3t.forEach(t),KSo=r(ESe," (XLM model)"),ESe.forEach(t),ZSo=i(Q),A2=n(Q,"LI",{});var CSe=s(A2);dhe=n(CSe,"STRONG",{});var X3t=s(dhe);eRo=r(X3t,"xlm-prophetnet"),X3t.forEach(t),oRo=r(CSe," \u2014 "),PO=n(CSe,"A",{href:!0});var z3t=s(PO);rRo=r(z3t,"XLMProphetNetForCausalLM"),z3t.forEach(t),tRo=r(CSe," (XLM-ProphetNet model)"),CSe.forEach(t),aRo=i(Q),L2=n(Q,"LI",{});var wSe=s(L2);che=n(wSe,"STRONG",{});var Q3t=s(che);nRo=r(Q3t,"xlm-roberta"),Q3t.forEach(t),sRo=r(wSe," \u2014 "),BO=n(wSe,"A",{href:!0});var W3t=s(BO);lRo=r(W3t,"XLMRobertaForCausalLM"),W3t.forEach(t),iRo=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),dRo=i(Q),y2=n(Q,"LI",{});var ASe=s(y2);fhe=n(ASe,"STRONG",{});var H3t=s(fhe);cRo=r(H3t,"xlm-roberta-xl"),H3t.forEach(t),fRo=r(ASe," \u2014 "),IO=n(ASe,"A",{href:!0});var U3t=s(IO);mRo=r(U3t,"XLMRobertaXLForCausalLM"),U3t.forEach(t),gRo=r(ASe," (XLM-RoBERTa-XL model)"),ASe.forEach(t),hRo=i(Q),x2=n(Q,"LI",{});var LSe=s(x2);mhe=n(LSe,"STRONG",{});var J3t=s(mhe);pRo=r(J3t,"xlnet"),J3t.forEach(t),_Ro=r(LSe," \u2014 "),NO=n(LSe,"A",{href:!0});var Y3t=s(NO);uRo=r(Y3t,"XLNetLMHeadModel"),Y3t.forEach(t),bRo=r(LSe," (XLNet model)"),LSe.forEach(t),Q.forEach(t),vRo=i(da),$2=n(da,"P",{});var ySe=s($2);FRo=r(ySe,"The model is set in evaluation mode by default using "),ghe=n(ySe,"CODE",{});var K3t=s(ghe);TRo=r(K3t,"model.eval()"),K3t.forEach(t),MRo=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=n(ySe,"CODE",{});var Z3t=s(hhe);ERo=r(Z3t,"model.train()"),Z3t.forEach(t),ySe.forEach(t),CRo=i(da),T(k2.$$.fragment,da),da.forEach(t),al.forEach(t),FXe=i(f),Ji=n(f,"H2",{class:!0});var AQe=s(Ji);S2=n(AQe,"A",{id:!0,class:!0,href:!0});var evt=s(S2);phe=n(evt,"SPAN",{});var ovt=s(phe);T(QL.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),wRo=i(AQe),_he=n(AQe,"SPAN",{});var rvt=s(_he);ARo=r(rvt,"AutoModelForMaskedLM"),rvt.forEach(t),AQe.forEach(t),TXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(WL.$$.fragment,nl),LRo=i(nl),Yi=n(nl,"P",{});var jre=s(Yi);yRo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qO=n(jre,"A",{href:!0});var tvt=s(qO);xRo=r(tvt,"from_pretrained()"),tvt.forEach(t),$Ro=r(jre," class method or the "),jO=n(jre,"A",{href:!0});var avt=s(jO);kRo=r(avt,"from_config()"),avt.forEach(t),SRo=r(jre,` class
method.`),jre.forEach(t),RRo=i(nl),HL=n(nl,"P",{});var LQe=s(HL);PRo=r(LQe,"This class cannot be instantiated directly using "),uhe=n(LQe,"CODE",{});var nvt=s(uhe);BRo=r(nvt,"__init__()"),nvt.forEach(t),IRo=r(LQe," (throws an error)."),LQe.forEach(t),NRo=i(nl),ft=n(nl,"DIV",{class:!0});var p6=s(ft);T(UL.$$.fragment,p6),qRo=i(p6),bhe=n(p6,"P",{});var svt=s(bhe);jRo=r(svt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),svt.forEach(t),DRo=i(p6),Ki=n(p6,"P",{});var Dre=s(Ki);GRo=r(Dre,`Note:
Loading a model from its configuration file does `),vhe=n(Dre,"STRONG",{});var lvt=s(vhe);ORo=r(lvt,"not"),lvt.forEach(t),VRo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(Dre,"A",{href:!0});var ivt=s(DO);XRo=r(ivt,"from_pretrained()"),ivt.forEach(t),zRo=r(Dre," to load the model weights."),Dre.forEach(t),QRo=i(p6),T(R2.$$.fragment,p6),p6.forEach(t),WRo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(JL.$$.fragment,ca),HRo=i(ca),Fhe=n(ca,"P",{});var dvt=s(Fhe);URo=r(dvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dvt.forEach(t),JRo=i(ca),ja=n(ca,"P",{});var _6=s(ja);YRo=r(_6,"The model class to instantiate is selected based on the "),The=n(_6,"CODE",{});var cvt=s(The);KRo=r(cvt,"model_type"),cvt.forEach(t),ZRo=r(_6,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(_6,"CODE",{});var fvt=s(Mhe);ePo=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),oPo=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(_6,"CODE",{});var mvt=s(Ehe);rPo=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),tPo=r(_6,":"),_6.forEach(t),aPo=i(ca),W=n(ca,"UL",{});var H=s(W);P2=n(H,"LI",{});var xSe=s(P2);Che=n(xSe,"STRONG",{});var gvt=s(Che);nPo=r(gvt,"albert"),gvt.forEach(t),sPo=r(xSe," \u2014 "),GO=n(xSe,"A",{href:!0});var hvt=s(GO);lPo=r(hvt,"AlbertForMaskedLM"),hvt.forEach(t),iPo=r(xSe," (ALBERT model)"),xSe.forEach(t),dPo=i(H),B2=n(H,"LI",{});var $Se=s(B2);whe=n($Se,"STRONG",{});var pvt=s(whe);cPo=r(pvt,"bart"),pvt.forEach(t),fPo=r($Se," \u2014 "),OO=n($Se,"A",{href:!0});var _vt=s(OO);mPo=r(_vt,"BartForConditionalGeneration"),_vt.forEach(t),gPo=r($Se," (BART model)"),$Se.forEach(t),hPo=i(H),I2=n(H,"LI",{});var kSe=s(I2);Ahe=n(kSe,"STRONG",{});var uvt=s(Ahe);pPo=r(uvt,"bert"),uvt.forEach(t),_Po=r(kSe," \u2014 "),VO=n(kSe,"A",{href:!0});var bvt=s(VO);uPo=r(bvt,"BertForMaskedLM"),bvt.forEach(t),bPo=r(kSe," (BERT model)"),kSe.forEach(t),vPo=i(H),N2=n(H,"LI",{});var SSe=s(N2);Lhe=n(SSe,"STRONG",{});var vvt=s(Lhe);FPo=r(vvt,"big_bird"),vvt.forEach(t),TPo=r(SSe," \u2014 "),XO=n(SSe,"A",{href:!0});var Fvt=s(XO);MPo=r(Fvt,"BigBirdForMaskedLM"),Fvt.forEach(t),EPo=r(SSe," (BigBird model)"),SSe.forEach(t),CPo=i(H),q2=n(H,"LI",{});var RSe=s(q2);yhe=n(RSe,"STRONG",{});var Tvt=s(yhe);wPo=r(Tvt,"camembert"),Tvt.forEach(t),APo=r(RSe," \u2014 "),zO=n(RSe,"A",{href:!0});var Mvt=s(zO);LPo=r(Mvt,"CamembertForMaskedLM"),Mvt.forEach(t),yPo=r(RSe," (CamemBERT model)"),RSe.forEach(t),xPo=i(H),j2=n(H,"LI",{});var PSe=s(j2);xhe=n(PSe,"STRONG",{});var Evt=s(xhe);$Po=r(Evt,"convbert"),Evt.forEach(t),kPo=r(PSe," \u2014 "),QO=n(PSe,"A",{href:!0});var Cvt=s(QO);SPo=r(Cvt,"ConvBertForMaskedLM"),Cvt.forEach(t),RPo=r(PSe," (ConvBERT model)"),PSe.forEach(t),PPo=i(H),D2=n(H,"LI",{});var BSe=s(D2);$he=n(BSe,"STRONG",{});var wvt=s($he);BPo=r(wvt,"data2vec-text"),wvt.forEach(t),IPo=r(BSe," \u2014 "),WO=n(BSe,"A",{href:!0});var Avt=s(WO);NPo=r(Avt,"Data2VecTextForMaskedLM"),Avt.forEach(t),qPo=r(BSe," (Data2VecText model)"),BSe.forEach(t),jPo=i(H),G2=n(H,"LI",{});var ISe=s(G2);khe=n(ISe,"STRONG",{});var Lvt=s(khe);DPo=r(Lvt,"deberta"),Lvt.forEach(t),GPo=r(ISe," \u2014 "),HO=n(ISe,"A",{href:!0});var yvt=s(HO);OPo=r(yvt,"DebertaForMaskedLM"),yvt.forEach(t),VPo=r(ISe," (DeBERTa model)"),ISe.forEach(t),XPo=i(H),O2=n(H,"LI",{});var NSe=s(O2);She=n(NSe,"STRONG",{});var xvt=s(She);zPo=r(xvt,"deberta-v2"),xvt.forEach(t),QPo=r(NSe," \u2014 "),UO=n(NSe,"A",{href:!0});var $vt=s(UO);WPo=r($vt,"DebertaV2ForMaskedLM"),$vt.forEach(t),HPo=r(NSe," (DeBERTa-v2 model)"),NSe.forEach(t),UPo=i(H),V2=n(H,"LI",{});var qSe=s(V2);Rhe=n(qSe,"STRONG",{});var kvt=s(Rhe);JPo=r(kvt,"distilbert"),kvt.forEach(t),YPo=r(qSe," \u2014 "),JO=n(qSe,"A",{href:!0});var Svt=s(JO);KPo=r(Svt,"DistilBertForMaskedLM"),Svt.forEach(t),ZPo=r(qSe," (DistilBERT model)"),qSe.forEach(t),eBo=i(H),X2=n(H,"LI",{});var jSe=s(X2);Phe=n(jSe,"STRONG",{});var Rvt=s(Phe);oBo=r(Rvt,"electra"),Rvt.forEach(t),rBo=r(jSe," \u2014 "),YO=n(jSe,"A",{href:!0});var Pvt=s(YO);tBo=r(Pvt,"ElectraForMaskedLM"),Pvt.forEach(t),aBo=r(jSe," (ELECTRA model)"),jSe.forEach(t),nBo=i(H),z2=n(H,"LI",{});var DSe=s(z2);Bhe=n(DSe,"STRONG",{});var Bvt=s(Bhe);sBo=r(Bvt,"flaubert"),Bvt.forEach(t),lBo=r(DSe," \u2014 "),KO=n(DSe,"A",{href:!0});var Ivt=s(KO);iBo=r(Ivt,"FlaubertWithLMHeadModel"),Ivt.forEach(t),dBo=r(DSe," (FlauBERT model)"),DSe.forEach(t),cBo=i(H),Q2=n(H,"LI",{});var GSe=s(Q2);Ihe=n(GSe,"STRONG",{});var Nvt=s(Ihe);fBo=r(Nvt,"fnet"),Nvt.forEach(t),mBo=r(GSe," \u2014 "),ZO=n(GSe,"A",{href:!0});var qvt=s(ZO);gBo=r(qvt,"FNetForMaskedLM"),qvt.forEach(t),hBo=r(GSe," (FNet model)"),GSe.forEach(t),pBo=i(H),W2=n(H,"LI",{});var OSe=s(W2);Nhe=n(OSe,"STRONG",{});var jvt=s(Nhe);_Bo=r(jvt,"funnel"),jvt.forEach(t),uBo=r(OSe," \u2014 "),eV=n(OSe,"A",{href:!0});var Dvt=s(eV);bBo=r(Dvt,"FunnelForMaskedLM"),Dvt.forEach(t),vBo=r(OSe," (Funnel Transformer model)"),OSe.forEach(t),FBo=i(H),H2=n(H,"LI",{});var VSe=s(H2);qhe=n(VSe,"STRONG",{});var Gvt=s(qhe);TBo=r(Gvt,"ibert"),Gvt.forEach(t),MBo=r(VSe," \u2014 "),oV=n(VSe,"A",{href:!0});var Ovt=s(oV);EBo=r(Ovt,"IBertForMaskedLM"),Ovt.forEach(t),CBo=r(VSe," (I-BERT model)"),VSe.forEach(t),wBo=i(H),U2=n(H,"LI",{});var XSe=s(U2);jhe=n(XSe,"STRONG",{});var Vvt=s(jhe);ABo=r(Vvt,"layoutlm"),Vvt.forEach(t),LBo=r(XSe," \u2014 "),rV=n(XSe,"A",{href:!0});var Xvt=s(rV);yBo=r(Xvt,"LayoutLMForMaskedLM"),Xvt.forEach(t),xBo=r(XSe," (LayoutLM model)"),XSe.forEach(t),$Bo=i(H),J2=n(H,"LI",{});var zSe=s(J2);Dhe=n(zSe,"STRONG",{});var zvt=s(Dhe);kBo=r(zvt,"longformer"),zvt.forEach(t),SBo=r(zSe," \u2014 "),tV=n(zSe,"A",{href:!0});var Qvt=s(tV);RBo=r(Qvt,"LongformerForMaskedLM"),Qvt.forEach(t),PBo=r(zSe," (Longformer model)"),zSe.forEach(t),BBo=i(H),Y2=n(H,"LI",{});var QSe=s(Y2);Ghe=n(QSe,"STRONG",{});var Wvt=s(Ghe);IBo=r(Wvt,"luke"),Wvt.forEach(t),NBo=r(QSe," \u2014 "),aV=n(QSe,"A",{href:!0});var Hvt=s(aV);qBo=r(Hvt,"LukeForMaskedLM"),Hvt.forEach(t),jBo=r(QSe," (LUKE model)"),QSe.forEach(t),DBo=i(H),K2=n(H,"LI",{});var WSe=s(K2);Ohe=n(WSe,"STRONG",{});var Uvt=s(Ohe);GBo=r(Uvt,"mbart"),Uvt.forEach(t),OBo=r(WSe," \u2014 "),nV=n(WSe,"A",{href:!0});var Jvt=s(nV);VBo=r(Jvt,"MBartForConditionalGeneration"),Jvt.forEach(t),XBo=r(WSe," (mBART model)"),WSe.forEach(t),zBo=i(H),Z2=n(H,"LI",{});var HSe=s(Z2);Vhe=n(HSe,"STRONG",{});var Yvt=s(Vhe);QBo=r(Yvt,"megatron-bert"),Yvt.forEach(t),WBo=r(HSe," \u2014 "),sV=n(HSe,"A",{href:!0});var Kvt=s(sV);HBo=r(Kvt,"MegatronBertForMaskedLM"),Kvt.forEach(t),UBo=r(HSe," (Megatron-BERT model)"),HSe.forEach(t),JBo=i(H),eb=n(H,"LI",{});var USe=s(eb);Xhe=n(USe,"STRONG",{});var Zvt=s(Xhe);YBo=r(Zvt,"mobilebert"),Zvt.forEach(t),KBo=r(USe," \u2014 "),lV=n(USe,"A",{href:!0});var eFt=s(lV);ZBo=r(eFt,"MobileBertForMaskedLM"),eFt.forEach(t),eIo=r(USe," (MobileBERT model)"),USe.forEach(t),oIo=i(H),ob=n(H,"LI",{});var JSe=s(ob);zhe=n(JSe,"STRONG",{});var oFt=s(zhe);rIo=r(oFt,"mpnet"),oFt.forEach(t),tIo=r(JSe," \u2014 "),iV=n(JSe,"A",{href:!0});var rFt=s(iV);aIo=r(rFt,"MPNetForMaskedLM"),rFt.forEach(t),nIo=r(JSe," (MPNet model)"),JSe.forEach(t),sIo=i(H),rb=n(H,"LI",{});var YSe=s(rb);Qhe=n(YSe,"STRONG",{});var tFt=s(Qhe);lIo=r(tFt,"mvp"),tFt.forEach(t),iIo=r(YSe," \u2014 "),dV=n(YSe,"A",{href:!0});var aFt=s(dV);dIo=r(aFt,"MvpForConditionalGeneration"),aFt.forEach(t),cIo=r(YSe," (MVP model)"),YSe.forEach(t),fIo=i(H),tb=n(H,"LI",{});var KSe=s(tb);Whe=n(KSe,"STRONG",{});var nFt=s(Whe);mIo=r(nFt,"nezha"),nFt.forEach(t),gIo=r(KSe," \u2014 "),cV=n(KSe,"A",{href:!0});var sFt=s(cV);hIo=r(sFt,"NezhaForMaskedLM"),sFt.forEach(t),pIo=r(KSe," (Nezha model)"),KSe.forEach(t),_Io=i(H),ab=n(H,"LI",{});var ZSe=s(ab);Hhe=n(ZSe,"STRONG",{});var lFt=s(Hhe);uIo=r(lFt,"nystromformer"),lFt.forEach(t),bIo=r(ZSe," \u2014 "),fV=n(ZSe,"A",{href:!0});var iFt=s(fV);vIo=r(iFt,"NystromformerForMaskedLM"),iFt.forEach(t),FIo=r(ZSe," (Nystr\xF6mformer model)"),ZSe.forEach(t),TIo=i(H),nb=n(H,"LI",{});var eRe=s(nb);Uhe=n(eRe,"STRONG",{});var dFt=s(Uhe);MIo=r(dFt,"perceiver"),dFt.forEach(t),EIo=r(eRe," \u2014 "),mV=n(eRe,"A",{href:!0});var cFt=s(mV);CIo=r(cFt,"PerceiverForMaskedLM"),cFt.forEach(t),wIo=r(eRe," (Perceiver model)"),eRe.forEach(t),AIo=i(H),sb=n(H,"LI",{});var oRe=s(sb);Jhe=n(oRe,"STRONG",{});var fFt=s(Jhe);LIo=r(fFt,"qdqbert"),fFt.forEach(t),yIo=r(oRe," \u2014 "),gV=n(oRe,"A",{href:!0});var mFt=s(gV);xIo=r(mFt,"QDQBertForMaskedLM"),mFt.forEach(t),$Io=r(oRe," (QDQBert model)"),oRe.forEach(t),kIo=i(H),lb=n(H,"LI",{});var rRe=s(lb);Yhe=n(rRe,"STRONG",{});var gFt=s(Yhe);SIo=r(gFt,"reformer"),gFt.forEach(t),RIo=r(rRe," \u2014 "),hV=n(rRe,"A",{href:!0});var hFt=s(hV);PIo=r(hFt,"ReformerForMaskedLM"),hFt.forEach(t),BIo=r(rRe," (Reformer model)"),rRe.forEach(t),IIo=i(H),ib=n(H,"LI",{});var tRe=s(ib);Khe=n(tRe,"STRONG",{});var pFt=s(Khe);NIo=r(pFt,"rembert"),pFt.forEach(t),qIo=r(tRe," \u2014 "),pV=n(tRe,"A",{href:!0});var _Ft=s(pV);jIo=r(_Ft,"RemBertForMaskedLM"),_Ft.forEach(t),DIo=r(tRe," (RemBERT model)"),tRe.forEach(t),GIo=i(H),db=n(H,"LI",{});var aRe=s(db);Zhe=n(aRe,"STRONG",{});var uFt=s(Zhe);OIo=r(uFt,"roberta"),uFt.forEach(t),VIo=r(aRe," \u2014 "),_V=n(aRe,"A",{href:!0});var bFt=s(_V);XIo=r(bFt,"RobertaForMaskedLM"),bFt.forEach(t),zIo=r(aRe," (RoBERTa model)"),aRe.forEach(t),QIo=i(H),cb=n(H,"LI",{});var nRe=s(cb);epe=n(nRe,"STRONG",{});var vFt=s(epe);WIo=r(vFt,"roformer"),vFt.forEach(t),HIo=r(nRe," \u2014 "),uV=n(nRe,"A",{href:!0});var FFt=s(uV);UIo=r(FFt,"RoFormerForMaskedLM"),FFt.forEach(t),JIo=r(nRe," (RoFormer model)"),nRe.forEach(t),YIo=i(H),fb=n(H,"LI",{});var sRe=s(fb);ope=n(sRe,"STRONG",{});var TFt=s(ope);KIo=r(TFt,"squeezebert"),TFt.forEach(t),ZIo=r(sRe," \u2014 "),bV=n(sRe,"A",{href:!0});var MFt=s(bV);eNo=r(MFt,"SqueezeBertForMaskedLM"),MFt.forEach(t),oNo=r(sRe," (SqueezeBERT model)"),sRe.forEach(t),rNo=i(H),mb=n(H,"LI",{});var lRe=s(mb);rpe=n(lRe,"STRONG",{});var EFt=s(rpe);tNo=r(EFt,"tapas"),EFt.forEach(t),aNo=r(lRe," \u2014 "),vV=n(lRe,"A",{href:!0});var CFt=s(vV);nNo=r(CFt,"TapasForMaskedLM"),CFt.forEach(t),sNo=r(lRe," (TAPAS model)"),lRe.forEach(t),lNo=i(H),gb=n(H,"LI",{});var iRe=s(gb);tpe=n(iRe,"STRONG",{});var wFt=s(tpe);iNo=r(wFt,"wav2vec2"),wFt.forEach(t),dNo=r(iRe," \u2014 "),ape=n(iRe,"CODE",{});var AFt=s(ape);cNo=r(AFt,"Wav2Vec2ForMaskedLM"),AFt.forEach(t),fNo=r(iRe," (Wav2Vec2 model)"),iRe.forEach(t),mNo=i(H),hb=n(H,"LI",{});var dRe=s(hb);npe=n(dRe,"STRONG",{});var LFt=s(npe);gNo=r(LFt,"xlm"),LFt.forEach(t),hNo=r(dRe," \u2014 "),FV=n(dRe,"A",{href:!0});var yFt=s(FV);pNo=r(yFt,"XLMWithLMHeadModel"),yFt.forEach(t),_No=r(dRe," (XLM model)"),dRe.forEach(t),uNo=i(H),pb=n(H,"LI",{});var cRe=s(pb);spe=n(cRe,"STRONG",{});var xFt=s(spe);bNo=r(xFt,"xlm-roberta"),xFt.forEach(t),vNo=r(cRe," \u2014 "),TV=n(cRe,"A",{href:!0});var $Ft=s(TV);FNo=r($Ft,"XLMRobertaForMaskedLM"),$Ft.forEach(t),TNo=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),MNo=i(H),_b=n(H,"LI",{});var fRe=s(_b);lpe=n(fRe,"STRONG",{});var kFt=s(lpe);ENo=r(kFt,"xlm-roberta-xl"),kFt.forEach(t),CNo=r(fRe," \u2014 "),MV=n(fRe,"A",{href:!0});var SFt=s(MV);wNo=r(SFt,"XLMRobertaXLForMaskedLM"),SFt.forEach(t),ANo=r(fRe," (XLM-RoBERTa-XL model)"),fRe.forEach(t),LNo=i(H),ub=n(H,"LI",{});var mRe=s(ub);ipe=n(mRe,"STRONG",{});var RFt=s(ipe);yNo=r(RFt,"yoso"),RFt.forEach(t),xNo=r(mRe," \u2014 "),EV=n(mRe,"A",{href:!0});var PFt=s(EV);$No=r(PFt,"YosoForMaskedLM"),PFt.forEach(t),kNo=r(mRe," (YOSO model)"),mRe.forEach(t),H.forEach(t),SNo=i(ca),bb=n(ca,"P",{});var gRe=s(bb);RNo=r(gRe,"The model is set in evaluation mode by default using "),dpe=n(gRe,"CODE",{});var BFt=s(dpe);PNo=r(BFt,"model.eval()"),BFt.forEach(t),BNo=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(gRe,"CODE",{});var IFt=s(cpe);INo=r(IFt,"model.train()"),IFt.forEach(t),gRe.forEach(t),NNo=i(ca),T(vb.$$.fragment,ca),ca.forEach(t),nl.forEach(t),MXe=i(f),Zi=n(f,"H2",{class:!0});var yQe=s(Zi);Fb=n(yQe,"A",{id:!0,class:!0,href:!0});var NFt=s(Fb);fpe=n(NFt,"SPAN",{});var qFt=s(fpe);T(YL.$$.fragment,qFt),qFt.forEach(t),NFt.forEach(t),qNo=i(yQe),mpe=n(yQe,"SPAN",{});var jFt=s(mpe);jNo=r(jFt,"AutoModelForSeq2SeqLM"),jFt.forEach(t),yQe.forEach(t),EXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(KL.$$.fragment,sl),DNo=i(sl),ed=n(sl,"P",{});var Gre=s(ed);GNo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CV=n(Gre,"A",{href:!0});var DFt=s(CV);ONo=r(DFt,"from_pretrained()"),DFt.forEach(t),VNo=r(Gre," class method or the "),wV=n(Gre,"A",{href:!0});var GFt=s(wV);XNo=r(GFt,"from_config()"),GFt.forEach(t),zNo=r(Gre,` class
method.`),Gre.forEach(t),QNo=i(sl),ZL=n(sl,"P",{});var xQe=s(ZL);WNo=r(xQe,"This class cannot be instantiated directly using "),gpe=n(xQe,"CODE",{});var OFt=s(gpe);HNo=r(OFt,"__init__()"),OFt.forEach(t),UNo=r(xQe," (throws an error)."),xQe.forEach(t),JNo=i(sl),mt=n(sl,"DIV",{class:!0});var u6=s(mt);T(ey.$$.fragment,u6),YNo=i(u6),hpe=n(u6,"P",{});var VFt=s(hpe);KNo=r(VFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VFt.forEach(t),ZNo=i(u6),od=n(u6,"P",{});var Ore=s(od);eqo=r(Ore,`Note:
Loading a model from its configuration file does `),ppe=n(Ore,"STRONG",{});var XFt=s(ppe);oqo=r(XFt,"not"),XFt.forEach(t),rqo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(Ore,"A",{href:!0});var zFt=s(AV);tqo=r(zFt,"from_pretrained()"),zFt.forEach(t),aqo=r(Ore," to load the model weights."),Ore.forEach(t),nqo=i(u6),T(Tb.$$.fragment,u6),u6.forEach(t),sqo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(oy.$$.fragment,fa),lqo=i(fa),_pe=n(fa,"P",{});var QFt=s(_pe);iqo=r(QFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QFt.forEach(t),dqo=i(fa),Da=n(fa,"P",{});var b6=s(Da);cqo=r(b6,"The model class to instantiate is selected based on the "),upe=n(b6,"CODE",{});var WFt=s(upe);fqo=r(WFt,"model_type"),WFt.forEach(t),mqo=r(b6,` property of the config object (either
passed as an argument or loaded from `),bpe=n(b6,"CODE",{});var HFt=s(bpe);gqo=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),hqo=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(b6,"CODE",{});var UFt=s(vpe);pqo=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),_qo=r(b6,":"),b6.forEach(t),uqo=i(fa),pe=n(fa,"UL",{});var be=s(pe);Mb=n(be,"LI",{});var hRe=s(Mb);Fpe=n(hRe,"STRONG",{});var JFt=s(Fpe);bqo=r(JFt,"bart"),JFt.forEach(t),vqo=r(hRe," \u2014 "),LV=n(hRe,"A",{href:!0});var YFt=s(LV);Fqo=r(YFt,"BartForConditionalGeneration"),YFt.forEach(t),Tqo=r(hRe," (BART model)"),hRe.forEach(t),Mqo=i(be),Eb=n(be,"LI",{});var pRe=s(Eb);Tpe=n(pRe,"STRONG",{});var KFt=s(Tpe);Eqo=r(KFt,"bigbird_pegasus"),KFt.forEach(t),Cqo=r(pRe," \u2014 "),yV=n(pRe,"A",{href:!0});var ZFt=s(yV);wqo=r(ZFt,"BigBirdPegasusForConditionalGeneration"),ZFt.forEach(t),Aqo=r(pRe," (BigBird-Pegasus model)"),pRe.forEach(t),Lqo=i(be),Cb=n(be,"LI",{});var _Re=s(Cb);Mpe=n(_Re,"STRONG",{});var eTt=s(Mpe);yqo=r(eTt,"blenderbot"),eTt.forEach(t),xqo=r(_Re," \u2014 "),xV=n(_Re,"A",{href:!0});var oTt=s(xV);$qo=r(oTt,"BlenderbotForConditionalGeneration"),oTt.forEach(t),kqo=r(_Re," (Blenderbot model)"),_Re.forEach(t),Sqo=i(be),wb=n(be,"LI",{});var uRe=s(wb);Epe=n(uRe,"STRONG",{});var rTt=s(Epe);Rqo=r(rTt,"blenderbot-small"),rTt.forEach(t),Pqo=r(uRe," \u2014 "),$V=n(uRe,"A",{href:!0});var tTt=s($V);Bqo=r(tTt,"BlenderbotSmallForConditionalGeneration"),tTt.forEach(t),Iqo=r(uRe," (BlenderbotSmall model)"),uRe.forEach(t),Nqo=i(be),Ab=n(be,"LI",{});var bRe=s(Ab);Cpe=n(bRe,"STRONG",{});var aTt=s(Cpe);qqo=r(aTt,"encoder-decoder"),aTt.forEach(t),jqo=r(bRe," \u2014 "),kV=n(bRe,"A",{href:!0});var nTt=s(kV);Dqo=r(nTt,"EncoderDecoderModel"),nTt.forEach(t),Gqo=r(bRe," (Encoder decoder model)"),bRe.forEach(t),Oqo=i(be),Lb=n(be,"LI",{});var vRe=s(Lb);wpe=n(vRe,"STRONG",{});var sTt=s(wpe);Vqo=r(sTt,"fsmt"),sTt.forEach(t),Xqo=r(vRe," \u2014 "),SV=n(vRe,"A",{href:!0});var lTt=s(SV);zqo=r(lTt,"FSMTForConditionalGeneration"),lTt.forEach(t),Qqo=r(vRe," (FairSeq Machine-Translation model)"),vRe.forEach(t),Wqo=i(be),yb=n(be,"LI",{});var FRe=s(yb);Ape=n(FRe,"STRONG",{});var iTt=s(Ape);Hqo=r(iTt,"led"),iTt.forEach(t),Uqo=r(FRe," \u2014 "),RV=n(FRe,"A",{href:!0});var dTt=s(RV);Jqo=r(dTt,"LEDForConditionalGeneration"),dTt.forEach(t),Yqo=r(FRe," (LED model)"),FRe.forEach(t),Kqo=i(be),xb=n(be,"LI",{});var TRe=s(xb);Lpe=n(TRe,"STRONG",{});var cTt=s(Lpe);Zqo=r(cTt,"longt5"),cTt.forEach(t),ejo=r(TRe," \u2014 "),PV=n(TRe,"A",{href:!0});var fTt=s(PV);ojo=r(fTt,"LongT5ForConditionalGeneration"),fTt.forEach(t),rjo=r(TRe," (LongT5 model)"),TRe.forEach(t),tjo=i(be),$b=n(be,"LI",{});var MRe=s($b);ype=n(MRe,"STRONG",{});var mTt=s(ype);ajo=r(mTt,"m2m_100"),mTt.forEach(t),njo=r(MRe," \u2014 "),BV=n(MRe,"A",{href:!0});var gTt=s(BV);sjo=r(gTt,"M2M100ForConditionalGeneration"),gTt.forEach(t),ljo=r(MRe," (M2M100 model)"),MRe.forEach(t),ijo=i(be),kb=n(be,"LI",{});var ERe=s(kb);xpe=n(ERe,"STRONG",{});var hTt=s(xpe);djo=r(hTt,"marian"),hTt.forEach(t),cjo=r(ERe," \u2014 "),IV=n(ERe,"A",{href:!0});var pTt=s(IV);fjo=r(pTt,"MarianMTModel"),pTt.forEach(t),mjo=r(ERe," (Marian model)"),ERe.forEach(t),gjo=i(be),Sb=n(be,"LI",{});var CRe=s(Sb);$pe=n(CRe,"STRONG",{});var _Tt=s($pe);hjo=r(_Tt,"mbart"),_Tt.forEach(t),pjo=r(CRe," \u2014 "),NV=n(CRe,"A",{href:!0});var uTt=s(NV);_jo=r(uTt,"MBartForConditionalGeneration"),uTt.forEach(t),ujo=r(CRe," (mBART model)"),CRe.forEach(t),bjo=i(be),Rb=n(be,"LI",{});var wRe=s(Rb);kpe=n(wRe,"STRONG",{});var bTt=s(kpe);vjo=r(bTt,"mt5"),bTt.forEach(t),Fjo=r(wRe," \u2014 "),qV=n(wRe,"A",{href:!0});var vTt=s(qV);Tjo=r(vTt,"MT5ForConditionalGeneration"),vTt.forEach(t),Mjo=r(wRe," (MT5 model)"),wRe.forEach(t),Ejo=i(be),Pb=n(be,"LI",{});var ARe=s(Pb);Spe=n(ARe,"STRONG",{});var FTt=s(Spe);Cjo=r(FTt,"mvp"),FTt.forEach(t),wjo=r(ARe," \u2014 "),jV=n(ARe,"A",{href:!0});var TTt=s(jV);Ajo=r(TTt,"MvpForConditionalGeneration"),TTt.forEach(t),Ljo=r(ARe," (MVP model)"),ARe.forEach(t),yjo=i(be),Bb=n(be,"LI",{});var LRe=s(Bb);Rpe=n(LRe,"STRONG",{});var MTt=s(Rpe);xjo=r(MTt,"pegasus"),MTt.forEach(t),$jo=r(LRe," \u2014 "),DV=n(LRe,"A",{href:!0});var ETt=s(DV);kjo=r(ETt,"PegasusForConditionalGeneration"),ETt.forEach(t),Sjo=r(LRe," (Pegasus model)"),LRe.forEach(t),Rjo=i(be),Ib=n(be,"LI",{});var yRe=s(Ib);Ppe=n(yRe,"STRONG",{});var CTt=s(Ppe);Pjo=r(CTt,"plbart"),CTt.forEach(t),Bjo=r(yRe," \u2014 "),GV=n(yRe,"A",{href:!0});var wTt=s(GV);Ijo=r(wTt,"PLBartForConditionalGeneration"),wTt.forEach(t),Njo=r(yRe," (PLBart model)"),yRe.forEach(t),qjo=i(be),Nb=n(be,"LI",{});var xRe=s(Nb);Bpe=n(xRe,"STRONG",{});var ATt=s(Bpe);jjo=r(ATt,"prophetnet"),ATt.forEach(t),Djo=r(xRe," \u2014 "),OV=n(xRe,"A",{href:!0});var LTt=s(OV);Gjo=r(LTt,"ProphetNetForConditionalGeneration"),LTt.forEach(t),Ojo=r(xRe," (ProphetNet model)"),xRe.forEach(t),Vjo=i(be),qb=n(be,"LI",{});var $Re=s(qb);Ipe=n($Re,"STRONG",{});var yTt=s(Ipe);Xjo=r(yTt,"t5"),yTt.forEach(t),zjo=r($Re," \u2014 "),VV=n($Re,"A",{href:!0});var xTt=s(VV);Qjo=r(xTt,"T5ForConditionalGeneration"),xTt.forEach(t),Wjo=r($Re," (T5 model)"),$Re.forEach(t),Hjo=i(be),jb=n(be,"LI",{});var kRe=s(jb);Npe=n(kRe,"STRONG",{});var $Tt=s(Npe);Ujo=r($Tt,"xlm-prophetnet"),$Tt.forEach(t),Jjo=r(kRe," \u2014 "),XV=n(kRe,"A",{href:!0});var kTt=s(XV);Yjo=r(kTt,"XLMProphetNetForConditionalGeneration"),kTt.forEach(t),Kjo=r(kRe," (XLM-ProphetNet model)"),kRe.forEach(t),be.forEach(t),Zjo=i(fa),Db=n(fa,"P",{});var SRe=s(Db);eDo=r(SRe,"The model is set in evaluation mode by default using "),qpe=n(SRe,"CODE",{});var STt=s(qpe);oDo=r(STt,"model.eval()"),STt.forEach(t),rDo=r(SRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(SRe,"CODE",{});var RTt=s(jpe);tDo=r(RTt,"model.train()"),RTt.forEach(t),SRe.forEach(t),aDo=i(fa),T(Gb.$$.fragment,fa),fa.forEach(t),sl.forEach(t),CXe=i(f),rd=n(f,"H2",{class:!0});var $Qe=s(rd);Ob=n($Qe,"A",{id:!0,class:!0,href:!0});var PTt=s(Ob);Dpe=n(PTt,"SPAN",{});var BTt=s(Dpe);T(ry.$$.fragment,BTt),BTt.forEach(t),PTt.forEach(t),nDo=i($Qe),Gpe=n($Qe,"SPAN",{});var ITt=s(Gpe);sDo=r(ITt,"AutoModelForSequenceClassification"),ITt.forEach(t),$Qe.forEach(t),wXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(ty.$$.fragment,ll),lDo=i(ll),td=n(ll,"P",{});var Vre=s(td);iDo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zV=n(Vre,"A",{href:!0});var NTt=s(zV);dDo=r(NTt,"from_pretrained()"),NTt.forEach(t),cDo=r(Vre," class method or the "),QV=n(Vre,"A",{href:!0});var qTt=s(QV);fDo=r(qTt,"from_config()"),qTt.forEach(t),mDo=r(Vre,` class
method.`),Vre.forEach(t),gDo=i(ll),ay=n(ll,"P",{});var kQe=s(ay);hDo=r(kQe,"This class cannot be instantiated directly using "),Ope=n(kQe,"CODE",{});var jTt=s(Ope);pDo=r(jTt,"__init__()"),jTt.forEach(t),_Do=r(kQe," (throws an error)."),kQe.forEach(t),uDo=i(ll),gt=n(ll,"DIV",{class:!0});var v6=s(gt);T(ny.$$.fragment,v6),bDo=i(v6),Vpe=n(v6,"P",{});var DTt=s(Vpe);vDo=r(DTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DTt.forEach(t),FDo=i(v6),ad=n(v6,"P",{});var Xre=s(ad);TDo=r(Xre,`Note:
Loading a model from its configuration file does `),Xpe=n(Xre,"STRONG",{});var GTt=s(Xpe);MDo=r(GTt,"not"),GTt.forEach(t),EDo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(Xre,"A",{href:!0});var OTt=s(WV);CDo=r(OTt,"from_pretrained()"),OTt.forEach(t),wDo=r(Xre," to load the model weights."),Xre.forEach(t),ADo=i(v6),T(Vb.$$.fragment,v6),v6.forEach(t),LDo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(sy.$$.fragment,ma),yDo=i(ma),zpe=n(ma,"P",{});var VTt=s(zpe);xDo=r(VTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VTt.forEach(t),$Do=i(ma),Ga=n(ma,"P",{});var F6=s(Ga);kDo=r(F6,"The model class to instantiate is selected based on the "),Qpe=n(F6,"CODE",{});var XTt=s(Qpe);SDo=r(XTt,"model_type"),XTt.forEach(t),RDo=r(F6,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(F6,"CODE",{});var zTt=s(Wpe);PDo=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),BDo=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(F6,"CODE",{});var QTt=s(Hpe);IDo=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),NDo=r(F6,":"),F6.forEach(t),qDo=i(ma),B=n(ma,"UL",{});var j=s(B);Xb=n(j,"LI",{});var RRe=s(Xb);Upe=n(RRe,"STRONG",{});var WTt=s(Upe);jDo=r(WTt,"albert"),WTt.forEach(t),DDo=r(RRe," \u2014 "),HV=n(RRe,"A",{href:!0});var HTt=s(HV);GDo=r(HTt,"AlbertForSequenceClassification"),HTt.forEach(t),ODo=r(RRe," (ALBERT model)"),RRe.forEach(t),VDo=i(j),zb=n(j,"LI",{});var PRe=s(zb);Jpe=n(PRe,"STRONG",{});var UTt=s(Jpe);XDo=r(UTt,"bart"),UTt.forEach(t),zDo=r(PRe," \u2014 "),UV=n(PRe,"A",{href:!0});var JTt=s(UV);QDo=r(JTt,"BartForSequenceClassification"),JTt.forEach(t),WDo=r(PRe," (BART model)"),PRe.forEach(t),HDo=i(j),Qb=n(j,"LI",{});var BRe=s(Qb);Ype=n(BRe,"STRONG",{});var YTt=s(Ype);UDo=r(YTt,"bert"),YTt.forEach(t),JDo=r(BRe," \u2014 "),JV=n(BRe,"A",{href:!0});var KTt=s(JV);YDo=r(KTt,"BertForSequenceClassification"),KTt.forEach(t),KDo=r(BRe," (BERT model)"),BRe.forEach(t),ZDo=i(j),Wb=n(j,"LI",{});var IRe=s(Wb);Kpe=n(IRe,"STRONG",{});var ZTt=s(Kpe);eGo=r(ZTt,"big_bird"),ZTt.forEach(t),oGo=r(IRe," \u2014 "),YV=n(IRe,"A",{href:!0});var e8t=s(YV);rGo=r(e8t,"BigBirdForSequenceClassification"),e8t.forEach(t),tGo=r(IRe," (BigBird model)"),IRe.forEach(t),aGo=i(j),Hb=n(j,"LI",{});var NRe=s(Hb);Zpe=n(NRe,"STRONG",{});var o8t=s(Zpe);nGo=r(o8t,"bigbird_pegasus"),o8t.forEach(t),sGo=r(NRe," \u2014 "),KV=n(NRe,"A",{href:!0});var r8t=s(KV);lGo=r(r8t,"BigBirdPegasusForSequenceClassification"),r8t.forEach(t),iGo=r(NRe," (BigBird-Pegasus model)"),NRe.forEach(t),dGo=i(j),Ub=n(j,"LI",{});var qRe=s(Ub);e_e=n(qRe,"STRONG",{});var t8t=s(e_e);cGo=r(t8t,"bloom"),t8t.forEach(t),fGo=r(qRe," \u2014 "),ZV=n(qRe,"A",{href:!0});var a8t=s(ZV);mGo=r(a8t,"BloomForSequenceClassification"),a8t.forEach(t),gGo=r(qRe," (BLOOM model)"),qRe.forEach(t),hGo=i(j),Jb=n(j,"LI",{});var jRe=s(Jb);o_e=n(jRe,"STRONG",{});var n8t=s(o_e);pGo=r(n8t,"camembert"),n8t.forEach(t),_Go=r(jRe," \u2014 "),eX=n(jRe,"A",{href:!0});var s8t=s(eX);uGo=r(s8t,"CamembertForSequenceClassification"),s8t.forEach(t),bGo=r(jRe," (CamemBERT model)"),jRe.forEach(t),vGo=i(j),Yb=n(j,"LI",{});var DRe=s(Yb);r_e=n(DRe,"STRONG",{});var l8t=s(r_e);FGo=r(l8t,"canine"),l8t.forEach(t),TGo=r(DRe," \u2014 "),oX=n(DRe,"A",{href:!0});var i8t=s(oX);MGo=r(i8t,"CanineForSequenceClassification"),i8t.forEach(t),EGo=r(DRe," (CANINE model)"),DRe.forEach(t),CGo=i(j),Kb=n(j,"LI",{});var GRe=s(Kb);t_e=n(GRe,"STRONG",{});var d8t=s(t_e);wGo=r(d8t,"convbert"),d8t.forEach(t),AGo=r(GRe," \u2014 "),rX=n(GRe,"A",{href:!0});var c8t=s(rX);LGo=r(c8t,"ConvBertForSequenceClassification"),c8t.forEach(t),yGo=r(GRe," (ConvBERT model)"),GRe.forEach(t),xGo=i(j),Zb=n(j,"LI",{});var ORe=s(Zb);a_e=n(ORe,"STRONG",{});var f8t=s(a_e);$Go=r(f8t,"ctrl"),f8t.forEach(t),kGo=r(ORe," \u2014 "),tX=n(ORe,"A",{href:!0});var m8t=s(tX);SGo=r(m8t,"CTRLForSequenceClassification"),m8t.forEach(t),RGo=r(ORe," (CTRL model)"),ORe.forEach(t),PGo=i(j),e3=n(j,"LI",{});var VRe=s(e3);n_e=n(VRe,"STRONG",{});var g8t=s(n_e);BGo=r(g8t,"data2vec-text"),g8t.forEach(t),IGo=r(VRe," \u2014 "),aX=n(VRe,"A",{href:!0});var h8t=s(aX);NGo=r(h8t,"Data2VecTextForSequenceClassification"),h8t.forEach(t),qGo=r(VRe," (Data2VecText model)"),VRe.forEach(t),jGo=i(j),o3=n(j,"LI",{});var XRe=s(o3);s_e=n(XRe,"STRONG",{});var p8t=s(s_e);DGo=r(p8t,"deberta"),p8t.forEach(t),GGo=r(XRe," \u2014 "),nX=n(XRe,"A",{href:!0});var _8t=s(nX);OGo=r(_8t,"DebertaForSequenceClassification"),_8t.forEach(t),VGo=r(XRe," (DeBERTa model)"),XRe.forEach(t),XGo=i(j),r3=n(j,"LI",{});var zRe=s(r3);l_e=n(zRe,"STRONG",{});var u8t=s(l_e);zGo=r(u8t,"deberta-v2"),u8t.forEach(t),QGo=r(zRe," \u2014 "),sX=n(zRe,"A",{href:!0});var b8t=s(sX);WGo=r(b8t,"DebertaV2ForSequenceClassification"),b8t.forEach(t),HGo=r(zRe," (DeBERTa-v2 model)"),zRe.forEach(t),UGo=i(j),t3=n(j,"LI",{});var QRe=s(t3);i_e=n(QRe,"STRONG",{});var v8t=s(i_e);JGo=r(v8t,"distilbert"),v8t.forEach(t),YGo=r(QRe," \u2014 "),lX=n(QRe,"A",{href:!0});var F8t=s(lX);KGo=r(F8t,"DistilBertForSequenceClassification"),F8t.forEach(t),ZGo=r(QRe," (DistilBERT model)"),QRe.forEach(t),eOo=i(j),a3=n(j,"LI",{});var WRe=s(a3);d_e=n(WRe,"STRONG",{});var T8t=s(d_e);oOo=r(T8t,"electra"),T8t.forEach(t),rOo=r(WRe," \u2014 "),iX=n(WRe,"A",{href:!0});var M8t=s(iX);tOo=r(M8t,"ElectraForSequenceClassification"),M8t.forEach(t),aOo=r(WRe," (ELECTRA model)"),WRe.forEach(t),nOo=i(j),n3=n(j,"LI",{});var HRe=s(n3);c_e=n(HRe,"STRONG",{});var E8t=s(c_e);sOo=r(E8t,"flaubert"),E8t.forEach(t),lOo=r(HRe," \u2014 "),dX=n(HRe,"A",{href:!0});var C8t=s(dX);iOo=r(C8t,"FlaubertForSequenceClassification"),C8t.forEach(t),dOo=r(HRe," (FlauBERT model)"),HRe.forEach(t),cOo=i(j),s3=n(j,"LI",{});var URe=s(s3);f_e=n(URe,"STRONG",{});var w8t=s(f_e);fOo=r(w8t,"fnet"),w8t.forEach(t),mOo=r(URe," \u2014 "),cX=n(URe,"A",{href:!0});var A8t=s(cX);gOo=r(A8t,"FNetForSequenceClassification"),A8t.forEach(t),hOo=r(URe," (FNet model)"),URe.forEach(t),pOo=i(j),l3=n(j,"LI",{});var JRe=s(l3);m_e=n(JRe,"STRONG",{});var L8t=s(m_e);_Oo=r(L8t,"funnel"),L8t.forEach(t),uOo=r(JRe," \u2014 "),fX=n(JRe,"A",{href:!0});var y8t=s(fX);bOo=r(y8t,"FunnelForSequenceClassification"),y8t.forEach(t),vOo=r(JRe," (Funnel Transformer model)"),JRe.forEach(t),FOo=i(j),i3=n(j,"LI",{});var YRe=s(i3);g_e=n(YRe,"STRONG",{});var x8t=s(g_e);TOo=r(x8t,"gpt2"),x8t.forEach(t),MOo=r(YRe," \u2014 "),mX=n(YRe,"A",{href:!0});var $8t=s(mX);EOo=r($8t,"GPT2ForSequenceClassification"),$8t.forEach(t),COo=r(YRe," (OpenAI GPT-2 model)"),YRe.forEach(t),wOo=i(j),d3=n(j,"LI",{});var KRe=s(d3);h_e=n(KRe,"STRONG",{});var k8t=s(h_e);AOo=r(k8t,"gpt_neo"),k8t.forEach(t),LOo=r(KRe," \u2014 "),gX=n(KRe,"A",{href:!0});var S8t=s(gX);yOo=r(S8t,"GPTNeoForSequenceClassification"),S8t.forEach(t),xOo=r(KRe," (GPT Neo model)"),KRe.forEach(t),$Oo=i(j),c3=n(j,"LI",{});var ZRe=s(c3);p_e=n(ZRe,"STRONG",{});var R8t=s(p_e);kOo=r(R8t,"gptj"),R8t.forEach(t),SOo=r(ZRe," \u2014 "),hX=n(ZRe,"A",{href:!0});var P8t=s(hX);ROo=r(P8t,"GPTJForSequenceClassification"),P8t.forEach(t),POo=r(ZRe," (GPT-J model)"),ZRe.forEach(t),BOo=i(j),f3=n(j,"LI",{});var ePe=s(f3);__e=n(ePe,"STRONG",{});var B8t=s(__e);IOo=r(B8t,"ibert"),B8t.forEach(t),NOo=r(ePe," \u2014 "),pX=n(ePe,"A",{href:!0});var I8t=s(pX);qOo=r(I8t,"IBertForSequenceClassification"),I8t.forEach(t),jOo=r(ePe," (I-BERT model)"),ePe.forEach(t),DOo=i(j),m3=n(j,"LI",{});var oPe=s(m3);u_e=n(oPe,"STRONG",{});var N8t=s(u_e);GOo=r(N8t,"layoutlm"),N8t.forEach(t),OOo=r(oPe," \u2014 "),_X=n(oPe,"A",{href:!0});var q8t=s(_X);VOo=r(q8t,"LayoutLMForSequenceClassification"),q8t.forEach(t),XOo=r(oPe," (LayoutLM model)"),oPe.forEach(t),zOo=i(j),g3=n(j,"LI",{});var rPe=s(g3);b_e=n(rPe,"STRONG",{});var j8t=s(b_e);QOo=r(j8t,"layoutlmv2"),j8t.forEach(t),WOo=r(rPe," \u2014 "),uX=n(rPe,"A",{href:!0});var D8t=s(uX);HOo=r(D8t,"LayoutLMv2ForSequenceClassification"),D8t.forEach(t),UOo=r(rPe," (LayoutLMv2 model)"),rPe.forEach(t),JOo=i(j),h3=n(j,"LI",{});var tPe=s(h3);v_e=n(tPe,"STRONG",{});var G8t=s(v_e);YOo=r(G8t,"layoutlmv3"),G8t.forEach(t),KOo=r(tPe," \u2014 "),bX=n(tPe,"A",{href:!0});var O8t=s(bX);ZOo=r(O8t,"LayoutLMv3ForSequenceClassification"),O8t.forEach(t),eVo=r(tPe," (LayoutLMv3 model)"),tPe.forEach(t),oVo=i(j),p3=n(j,"LI",{});var aPe=s(p3);F_e=n(aPe,"STRONG",{});var V8t=s(F_e);rVo=r(V8t,"led"),V8t.forEach(t),tVo=r(aPe," \u2014 "),vX=n(aPe,"A",{href:!0});var X8t=s(vX);aVo=r(X8t,"LEDForSequenceClassification"),X8t.forEach(t),nVo=r(aPe," (LED model)"),aPe.forEach(t),sVo=i(j),_3=n(j,"LI",{});var nPe=s(_3);T_e=n(nPe,"STRONG",{});var z8t=s(T_e);lVo=r(z8t,"longformer"),z8t.forEach(t),iVo=r(nPe," \u2014 "),FX=n(nPe,"A",{href:!0});var Q8t=s(FX);dVo=r(Q8t,"LongformerForSequenceClassification"),Q8t.forEach(t),cVo=r(nPe," (Longformer model)"),nPe.forEach(t),fVo=i(j),u3=n(j,"LI",{});var sPe=s(u3);M_e=n(sPe,"STRONG",{});var W8t=s(M_e);mVo=r(W8t,"mbart"),W8t.forEach(t),gVo=r(sPe," \u2014 "),TX=n(sPe,"A",{href:!0});var H8t=s(TX);hVo=r(H8t,"MBartForSequenceClassification"),H8t.forEach(t),pVo=r(sPe," (mBART model)"),sPe.forEach(t),_Vo=i(j),b3=n(j,"LI",{});var lPe=s(b3);E_e=n(lPe,"STRONG",{});var U8t=s(E_e);uVo=r(U8t,"megatron-bert"),U8t.forEach(t),bVo=r(lPe," \u2014 "),MX=n(lPe,"A",{href:!0});var J8t=s(MX);vVo=r(J8t,"MegatronBertForSequenceClassification"),J8t.forEach(t),FVo=r(lPe," (Megatron-BERT model)"),lPe.forEach(t),TVo=i(j),v3=n(j,"LI",{});var iPe=s(v3);C_e=n(iPe,"STRONG",{});var Y8t=s(C_e);MVo=r(Y8t,"mobilebert"),Y8t.forEach(t),EVo=r(iPe," \u2014 "),EX=n(iPe,"A",{href:!0});var K8t=s(EX);CVo=r(K8t,"MobileBertForSequenceClassification"),K8t.forEach(t),wVo=r(iPe," (MobileBERT model)"),iPe.forEach(t),AVo=i(j),F3=n(j,"LI",{});var dPe=s(F3);w_e=n(dPe,"STRONG",{});var Z8t=s(w_e);LVo=r(Z8t,"mpnet"),Z8t.forEach(t),yVo=r(dPe," \u2014 "),CX=n(dPe,"A",{href:!0});var eMt=s(CX);xVo=r(eMt,"MPNetForSequenceClassification"),eMt.forEach(t),$Vo=r(dPe," (MPNet model)"),dPe.forEach(t),kVo=i(j),T3=n(j,"LI",{});var cPe=s(T3);A_e=n(cPe,"STRONG",{});var oMt=s(A_e);SVo=r(oMt,"mvp"),oMt.forEach(t),RVo=r(cPe," \u2014 "),wX=n(cPe,"A",{href:!0});var rMt=s(wX);PVo=r(rMt,"MvpForSequenceClassification"),rMt.forEach(t),BVo=r(cPe," (MVP model)"),cPe.forEach(t),IVo=i(j),M3=n(j,"LI",{});var fPe=s(M3);L_e=n(fPe,"STRONG",{});var tMt=s(L_e);NVo=r(tMt,"nezha"),tMt.forEach(t),qVo=r(fPe," \u2014 "),AX=n(fPe,"A",{href:!0});var aMt=s(AX);jVo=r(aMt,"NezhaForSequenceClassification"),aMt.forEach(t),DVo=r(fPe," (Nezha model)"),fPe.forEach(t),GVo=i(j),E3=n(j,"LI",{});var mPe=s(E3);y_e=n(mPe,"STRONG",{});var nMt=s(y_e);OVo=r(nMt,"nystromformer"),nMt.forEach(t),VVo=r(mPe," \u2014 "),LX=n(mPe,"A",{href:!0});var sMt=s(LX);XVo=r(sMt,"NystromformerForSequenceClassification"),sMt.forEach(t),zVo=r(mPe," (Nystr\xF6mformer model)"),mPe.forEach(t),QVo=i(j),C3=n(j,"LI",{});var gPe=s(C3);x_e=n(gPe,"STRONG",{});var lMt=s(x_e);WVo=r(lMt,"openai-gpt"),lMt.forEach(t),HVo=r(gPe," \u2014 "),yX=n(gPe,"A",{href:!0});var iMt=s(yX);UVo=r(iMt,"OpenAIGPTForSequenceClassification"),iMt.forEach(t),JVo=r(gPe," (OpenAI GPT model)"),gPe.forEach(t),YVo=i(j),w3=n(j,"LI",{});var hPe=s(w3);$_e=n(hPe,"STRONG",{});var dMt=s($_e);KVo=r(dMt,"opt"),dMt.forEach(t),ZVo=r(hPe," \u2014 "),xX=n(hPe,"A",{href:!0});var cMt=s(xX);eXo=r(cMt,"OPTForSequenceClassification"),cMt.forEach(t),oXo=r(hPe," (OPT model)"),hPe.forEach(t),rXo=i(j),A3=n(j,"LI",{});var pPe=s(A3);k_e=n(pPe,"STRONG",{});var fMt=s(k_e);tXo=r(fMt,"perceiver"),fMt.forEach(t),aXo=r(pPe," \u2014 "),$X=n(pPe,"A",{href:!0});var mMt=s($X);nXo=r(mMt,"PerceiverForSequenceClassification"),mMt.forEach(t),sXo=r(pPe," (Perceiver model)"),pPe.forEach(t),lXo=i(j),L3=n(j,"LI",{});var _Pe=s(L3);S_e=n(_Pe,"STRONG",{});var gMt=s(S_e);iXo=r(gMt,"plbart"),gMt.forEach(t),dXo=r(_Pe," \u2014 "),kX=n(_Pe,"A",{href:!0});var hMt=s(kX);cXo=r(hMt,"PLBartForSequenceClassification"),hMt.forEach(t),fXo=r(_Pe," (PLBart model)"),_Pe.forEach(t),mXo=i(j),y3=n(j,"LI",{});var uPe=s(y3);R_e=n(uPe,"STRONG",{});var pMt=s(R_e);gXo=r(pMt,"qdqbert"),pMt.forEach(t),hXo=r(uPe," \u2014 "),SX=n(uPe,"A",{href:!0});var _Mt=s(SX);pXo=r(_Mt,"QDQBertForSequenceClassification"),_Mt.forEach(t),_Xo=r(uPe," (QDQBert model)"),uPe.forEach(t),uXo=i(j),x3=n(j,"LI",{});var bPe=s(x3);P_e=n(bPe,"STRONG",{});var uMt=s(P_e);bXo=r(uMt,"reformer"),uMt.forEach(t),vXo=r(bPe," \u2014 "),RX=n(bPe,"A",{href:!0});var bMt=s(RX);FXo=r(bMt,"ReformerForSequenceClassification"),bMt.forEach(t),TXo=r(bPe," (Reformer model)"),bPe.forEach(t),MXo=i(j),$3=n(j,"LI",{});var vPe=s($3);B_e=n(vPe,"STRONG",{});var vMt=s(B_e);EXo=r(vMt,"rembert"),vMt.forEach(t),CXo=r(vPe," \u2014 "),PX=n(vPe,"A",{href:!0});var FMt=s(PX);wXo=r(FMt,"RemBertForSequenceClassification"),FMt.forEach(t),AXo=r(vPe," (RemBERT model)"),vPe.forEach(t),LXo=i(j),k3=n(j,"LI",{});var FPe=s(k3);I_e=n(FPe,"STRONG",{});var TMt=s(I_e);yXo=r(TMt,"roberta"),TMt.forEach(t),xXo=r(FPe," \u2014 "),BX=n(FPe,"A",{href:!0});var MMt=s(BX);$Xo=r(MMt,"RobertaForSequenceClassification"),MMt.forEach(t),kXo=r(FPe," (RoBERTa model)"),FPe.forEach(t),SXo=i(j),S3=n(j,"LI",{});var TPe=s(S3);N_e=n(TPe,"STRONG",{});var EMt=s(N_e);RXo=r(EMt,"roformer"),EMt.forEach(t),PXo=r(TPe," \u2014 "),IX=n(TPe,"A",{href:!0});var CMt=s(IX);BXo=r(CMt,"RoFormerForSequenceClassification"),CMt.forEach(t),IXo=r(TPe," (RoFormer model)"),TPe.forEach(t),NXo=i(j),R3=n(j,"LI",{});var MPe=s(R3);q_e=n(MPe,"STRONG",{});var wMt=s(q_e);qXo=r(wMt,"squeezebert"),wMt.forEach(t),jXo=r(MPe," \u2014 "),NX=n(MPe,"A",{href:!0});var AMt=s(NX);DXo=r(AMt,"SqueezeBertForSequenceClassification"),AMt.forEach(t),GXo=r(MPe," (SqueezeBERT model)"),MPe.forEach(t),OXo=i(j),P3=n(j,"LI",{});var EPe=s(P3);j_e=n(EPe,"STRONG",{});var LMt=s(j_e);VXo=r(LMt,"tapas"),LMt.forEach(t),XXo=r(EPe," \u2014 "),qX=n(EPe,"A",{href:!0});var yMt=s(qX);zXo=r(yMt,"TapasForSequenceClassification"),yMt.forEach(t),QXo=r(EPe," (TAPAS model)"),EPe.forEach(t),WXo=i(j),B3=n(j,"LI",{});var CPe=s(B3);D_e=n(CPe,"STRONG",{});var xMt=s(D_e);HXo=r(xMt,"transfo-xl"),xMt.forEach(t),UXo=r(CPe," \u2014 "),jX=n(CPe,"A",{href:!0});var $Mt=s(jX);JXo=r($Mt,"TransfoXLForSequenceClassification"),$Mt.forEach(t),YXo=r(CPe," (Transformer-XL model)"),CPe.forEach(t),KXo=i(j),I3=n(j,"LI",{});var wPe=s(I3);G_e=n(wPe,"STRONG",{});var kMt=s(G_e);ZXo=r(kMt,"xlm"),kMt.forEach(t),ezo=r(wPe," \u2014 "),DX=n(wPe,"A",{href:!0});var SMt=s(DX);ozo=r(SMt,"XLMForSequenceClassification"),SMt.forEach(t),rzo=r(wPe," (XLM model)"),wPe.forEach(t),tzo=i(j),N3=n(j,"LI",{});var APe=s(N3);O_e=n(APe,"STRONG",{});var RMt=s(O_e);azo=r(RMt,"xlm-roberta"),RMt.forEach(t),nzo=r(APe," \u2014 "),GX=n(APe,"A",{href:!0});var PMt=s(GX);szo=r(PMt,"XLMRobertaForSequenceClassification"),PMt.forEach(t),lzo=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),izo=i(j),q3=n(j,"LI",{});var LPe=s(q3);V_e=n(LPe,"STRONG",{});var BMt=s(V_e);dzo=r(BMt,"xlm-roberta-xl"),BMt.forEach(t),czo=r(LPe," \u2014 "),OX=n(LPe,"A",{href:!0});var IMt=s(OX);fzo=r(IMt,"XLMRobertaXLForSequenceClassification"),IMt.forEach(t),mzo=r(LPe," (XLM-RoBERTa-XL model)"),LPe.forEach(t),gzo=i(j),j3=n(j,"LI",{});var yPe=s(j3);X_e=n(yPe,"STRONG",{});var NMt=s(X_e);hzo=r(NMt,"xlnet"),NMt.forEach(t),pzo=r(yPe," \u2014 "),VX=n(yPe,"A",{href:!0});var qMt=s(VX);_zo=r(qMt,"XLNetForSequenceClassification"),qMt.forEach(t),uzo=r(yPe," (XLNet model)"),yPe.forEach(t),bzo=i(j),D3=n(j,"LI",{});var xPe=s(D3);z_e=n(xPe,"STRONG",{});var jMt=s(z_e);vzo=r(jMt,"yoso"),jMt.forEach(t),Fzo=r(xPe," \u2014 "),XX=n(xPe,"A",{href:!0});var DMt=s(XX);Tzo=r(DMt,"YosoForSequenceClassification"),DMt.forEach(t),Mzo=r(xPe," (YOSO model)"),xPe.forEach(t),j.forEach(t),Ezo=i(ma),G3=n(ma,"P",{});var $Pe=s(G3);Czo=r($Pe,"The model is set in evaluation mode by default using "),Q_e=n($Pe,"CODE",{});var GMt=s(Q_e);wzo=r(GMt,"model.eval()"),GMt.forEach(t),Azo=r($Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n($Pe,"CODE",{});var OMt=s(W_e);Lzo=r(OMt,"model.train()"),OMt.forEach(t),$Pe.forEach(t),yzo=i(ma),T(O3.$$.fragment,ma),ma.forEach(t),ll.forEach(t),AXe=i(f),nd=n(f,"H2",{class:!0});var SQe=s(nd);V3=n(SQe,"A",{id:!0,class:!0,href:!0});var VMt=s(V3);H_e=n(VMt,"SPAN",{});var XMt=s(H_e);T(ly.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),xzo=i(SQe),U_e=n(SQe,"SPAN",{});var zMt=s(U_e);$zo=r(zMt,"AutoModelForMultipleChoice"),zMt.forEach(t),SQe.forEach(t),LXe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(iy.$$.fragment,il),kzo=i(il),sd=n(il,"P",{});var zre=s(sd);Szo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zX=n(zre,"A",{href:!0});var QMt=s(zX);Rzo=r(QMt,"from_pretrained()"),QMt.forEach(t),Pzo=r(zre," class method or the "),QX=n(zre,"A",{href:!0});var WMt=s(QX);Bzo=r(WMt,"from_config()"),WMt.forEach(t),Izo=r(zre,` class
method.`),zre.forEach(t),Nzo=i(il),dy=n(il,"P",{});var RQe=s(dy);qzo=r(RQe,"This class cannot be instantiated directly using "),J_e=n(RQe,"CODE",{});var HMt=s(J_e);jzo=r(HMt,"__init__()"),HMt.forEach(t),Dzo=r(RQe," (throws an error)."),RQe.forEach(t),Gzo=i(il),ht=n(il,"DIV",{class:!0});var T6=s(ht);T(cy.$$.fragment,T6),Ozo=i(T6),Y_e=n(T6,"P",{});var UMt=s(Y_e);Vzo=r(UMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UMt.forEach(t),Xzo=i(T6),ld=n(T6,"P",{});var Qre=s(ld);zzo=r(Qre,`Note:
Loading a model from its configuration file does `),K_e=n(Qre,"STRONG",{});var JMt=s(K_e);Qzo=r(JMt,"not"),JMt.forEach(t),Wzo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(Qre,"A",{href:!0});var YMt=s(WX);Hzo=r(YMt,"from_pretrained()"),YMt.forEach(t),Uzo=r(Qre," to load the model weights."),Qre.forEach(t),Jzo=i(T6),T(X3.$$.fragment,T6),T6.forEach(t),Yzo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(fy.$$.fragment,ga),Kzo=i(ga),Z_e=n(ga,"P",{});var KMt=s(Z_e);Zzo=r(KMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KMt.forEach(t),eQo=i(ga),Oa=n(ga,"P",{});var M6=s(Oa);oQo=r(M6,"The model class to instantiate is selected based on the "),eue=n(M6,"CODE",{});var ZMt=s(eue);rQo=r(ZMt,"model_type"),ZMt.forEach(t),tQo=r(M6,` property of the config object (either
passed as an argument or loaded from `),oue=n(M6,"CODE",{});var e4t=s(oue);aQo=r(e4t,"pretrained_model_name_or_path"),e4t.forEach(t),nQo=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(M6,"CODE",{});var o4t=s(rue);sQo=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),lQo=r(M6,":"),M6.forEach(t),iQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);z3=n(ee,"LI",{});var kPe=s(z3);tue=n(kPe,"STRONG",{});var r4t=s(tue);dQo=r(r4t,"albert"),r4t.forEach(t),cQo=r(kPe," \u2014 "),HX=n(kPe,"A",{href:!0});var t4t=s(HX);fQo=r(t4t,"AlbertForMultipleChoice"),t4t.forEach(t),mQo=r(kPe," (ALBERT model)"),kPe.forEach(t),gQo=i(ee),Q3=n(ee,"LI",{});var SPe=s(Q3);aue=n(SPe,"STRONG",{});var a4t=s(aue);hQo=r(a4t,"bert"),a4t.forEach(t),pQo=r(SPe," \u2014 "),UX=n(SPe,"A",{href:!0});var n4t=s(UX);_Qo=r(n4t,"BertForMultipleChoice"),n4t.forEach(t),uQo=r(SPe," (BERT model)"),SPe.forEach(t),bQo=i(ee),W3=n(ee,"LI",{});var RPe=s(W3);nue=n(RPe,"STRONG",{});var s4t=s(nue);vQo=r(s4t,"big_bird"),s4t.forEach(t),FQo=r(RPe," \u2014 "),JX=n(RPe,"A",{href:!0});var l4t=s(JX);TQo=r(l4t,"BigBirdForMultipleChoice"),l4t.forEach(t),MQo=r(RPe," (BigBird model)"),RPe.forEach(t),EQo=i(ee),H3=n(ee,"LI",{});var PPe=s(H3);sue=n(PPe,"STRONG",{});var i4t=s(sue);CQo=r(i4t,"camembert"),i4t.forEach(t),wQo=r(PPe," \u2014 "),YX=n(PPe,"A",{href:!0});var d4t=s(YX);AQo=r(d4t,"CamembertForMultipleChoice"),d4t.forEach(t),LQo=r(PPe," (CamemBERT model)"),PPe.forEach(t),yQo=i(ee),U3=n(ee,"LI",{});var BPe=s(U3);lue=n(BPe,"STRONG",{});var c4t=s(lue);xQo=r(c4t,"canine"),c4t.forEach(t),$Qo=r(BPe," \u2014 "),KX=n(BPe,"A",{href:!0});var f4t=s(KX);kQo=r(f4t,"CanineForMultipleChoice"),f4t.forEach(t),SQo=r(BPe," (CANINE model)"),BPe.forEach(t),RQo=i(ee),J3=n(ee,"LI",{});var IPe=s(J3);iue=n(IPe,"STRONG",{});var m4t=s(iue);PQo=r(m4t,"convbert"),m4t.forEach(t),BQo=r(IPe," \u2014 "),ZX=n(IPe,"A",{href:!0});var g4t=s(ZX);IQo=r(g4t,"ConvBertForMultipleChoice"),g4t.forEach(t),NQo=r(IPe," (ConvBERT model)"),IPe.forEach(t),qQo=i(ee),Y3=n(ee,"LI",{});var NPe=s(Y3);due=n(NPe,"STRONG",{});var h4t=s(due);jQo=r(h4t,"data2vec-text"),h4t.forEach(t),DQo=r(NPe," \u2014 "),ez=n(NPe,"A",{href:!0});var p4t=s(ez);GQo=r(p4t,"Data2VecTextForMultipleChoice"),p4t.forEach(t),OQo=r(NPe," (Data2VecText model)"),NPe.forEach(t),VQo=i(ee),K3=n(ee,"LI",{});var qPe=s(K3);cue=n(qPe,"STRONG",{});var _4t=s(cue);XQo=r(_4t,"deberta-v2"),_4t.forEach(t),zQo=r(qPe," \u2014 "),oz=n(qPe,"A",{href:!0});var u4t=s(oz);QQo=r(u4t,"DebertaV2ForMultipleChoice"),u4t.forEach(t),WQo=r(qPe," (DeBERTa-v2 model)"),qPe.forEach(t),HQo=i(ee),Z3=n(ee,"LI",{});var jPe=s(Z3);fue=n(jPe,"STRONG",{});var b4t=s(fue);UQo=r(b4t,"distilbert"),b4t.forEach(t),JQo=r(jPe," \u2014 "),rz=n(jPe,"A",{href:!0});var v4t=s(rz);YQo=r(v4t,"DistilBertForMultipleChoice"),v4t.forEach(t),KQo=r(jPe," (DistilBERT model)"),jPe.forEach(t),ZQo=i(ee),ev=n(ee,"LI",{});var DPe=s(ev);mue=n(DPe,"STRONG",{});var F4t=s(mue);eWo=r(F4t,"electra"),F4t.forEach(t),oWo=r(DPe," \u2014 "),tz=n(DPe,"A",{href:!0});var T4t=s(tz);rWo=r(T4t,"ElectraForMultipleChoice"),T4t.forEach(t),tWo=r(DPe," (ELECTRA model)"),DPe.forEach(t),aWo=i(ee),ov=n(ee,"LI",{});var GPe=s(ov);gue=n(GPe,"STRONG",{});var M4t=s(gue);nWo=r(M4t,"flaubert"),M4t.forEach(t),sWo=r(GPe," \u2014 "),az=n(GPe,"A",{href:!0});var E4t=s(az);lWo=r(E4t,"FlaubertForMultipleChoice"),E4t.forEach(t),iWo=r(GPe," (FlauBERT model)"),GPe.forEach(t),dWo=i(ee),rv=n(ee,"LI",{});var OPe=s(rv);hue=n(OPe,"STRONG",{});var C4t=s(hue);cWo=r(C4t,"fnet"),C4t.forEach(t),fWo=r(OPe," \u2014 "),nz=n(OPe,"A",{href:!0});var w4t=s(nz);mWo=r(w4t,"FNetForMultipleChoice"),w4t.forEach(t),gWo=r(OPe," (FNet model)"),OPe.forEach(t),hWo=i(ee),tv=n(ee,"LI",{});var VPe=s(tv);pue=n(VPe,"STRONG",{});var A4t=s(pue);pWo=r(A4t,"funnel"),A4t.forEach(t),_Wo=r(VPe," \u2014 "),sz=n(VPe,"A",{href:!0});var L4t=s(sz);uWo=r(L4t,"FunnelForMultipleChoice"),L4t.forEach(t),bWo=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),vWo=i(ee),av=n(ee,"LI",{});var XPe=s(av);_ue=n(XPe,"STRONG",{});var y4t=s(_ue);FWo=r(y4t,"ibert"),y4t.forEach(t),TWo=r(XPe," \u2014 "),lz=n(XPe,"A",{href:!0});var x4t=s(lz);MWo=r(x4t,"IBertForMultipleChoice"),x4t.forEach(t),EWo=r(XPe," (I-BERT model)"),XPe.forEach(t),CWo=i(ee),nv=n(ee,"LI",{});var zPe=s(nv);uue=n(zPe,"STRONG",{});var $4t=s(uue);wWo=r($4t,"longformer"),$4t.forEach(t),AWo=r(zPe," \u2014 "),iz=n(zPe,"A",{href:!0});var k4t=s(iz);LWo=r(k4t,"LongformerForMultipleChoice"),k4t.forEach(t),yWo=r(zPe," (Longformer model)"),zPe.forEach(t),xWo=i(ee),sv=n(ee,"LI",{});var QPe=s(sv);bue=n(QPe,"STRONG",{});var S4t=s(bue);$Wo=r(S4t,"megatron-bert"),S4t.forEach(t),kWo=r(QPe," \u2014 "),dz=n(QPe,"A",{href:!0});var R4t=s(dz);SWo=r(R4t,"MegatronBertForMultipleChoice"),R4t.forEach(t),RWo=r(QPe," (Megatron-BERT model)"),QPe.forEach(t),PWo=i(ee),lv=n(ee,"LI",{});var WPe=s(lv);vue=n(WPe,"STRONG",{});var P4t=s(vue);BWo=r(P4t,"mobilebert"),P4t.forEach(t),IWo=r(WPe," \u2014 "),cz=n(WPe,"A",{href:!0});var B4t=s(cz);NWo=r(B4t,"MobileBertForMultipleChoice"),B4t.forEach(t),qWo=r(WPe," (MobileBERT model)"),WPe.forEach(t),jWo=i(ee),iv=n(ee,"LI",{});var HPe=s(iv);Fue=n(HPe,"STRONG",{});var I4t=s(Fue);DWo=r(I4t,"mpnet"),I4t.forEach(t),GWo=r(HPe," \u2014 "),fz=n(HPe,"A",{href:!0});var N4t=s(fz);OWo=r(N4t,"MPNetForMultipleChoice"),N4t.forEach(t),VWo=r(HPe," (MPNet model)"),HPe.forEach(t),XWo=i(ee),dv=n(ee,"LI",{});var UPe=s(dv);Tue=n(UPe,"STRONG",{});var q4t=s(Tue);zWo=r(q4t,"nezha"),q4t.forEach(t),QWo=r(UPe," \u2014 "),mz=n(UPe,"A",{href:!0});var j4t=s(mz);WWo=r(j4t,"NezhaForMultipleChoice"),j4t.forEach(t),HWo=r(UPe," (Nezha model)"),UPe.forEach(t),UWo=i(ee),cv=n(ee,"LI",{});var JPe=s(cv);Mue=n(JPe,"STRONG",{});var D4t=s(Mue);JWo=r(D4t,"nystromformer"),D4t.forEach(t),YWo=r(JPe," \u2014 "),gz=n(JPe,"A",{href:!0});var G4t=s(gz);KWo=r(G4t,"NystromformerForMultipleChoice"),G4t.forEach(t),ZWo=r(JPe," (Nystr\xF6mformer model)"),JPe.forEach(t),eHo=i(ee),fv=n(ee,"LI",{});var YPe=s(fv);Eue=n(YPe,"STRONG",{});var O4t=s(Eue);oHo=r(O4t,"qdqbert"),O4t.forEach(t),rHo=r(YPe," \u2014 "),hz=n(YPe,"A",{href:!0});var V4t=s(hz);tHo=r(V4t,"QDQBertForMultipleChoice"),V4t.forEach(t),aHo=r(YPe," (QDQBert model)"),YPe.forEach(t),nHo=i(ee),mv=n(ee,"LI",{});var KPe=s(mv);Cue=n(KPe,"STRONG",{});var X4t=s(Cue);sHo=r(X4t,"rembert"),X4t.forEach(t),lHo=r(KPe," \u2014 "),pz=n(KPe,"A",{href:!0});var z4t=s(pz);iHo=r(z4t,"RemBertForMultipleChoice"),z4t.forEach(t),dHo=r(KPe," (RemBERT model)"),KPe.forEach(t),cHo=i(ee),gv=n(ee,"LI",{});var ZPe=s(gv);wue=n(ZPe,"STRONG",{});var Q4t=s(wue);fHo=r(Q4t,"roberta"),Q4t.forEach(t),mHo=r(ZPe," \u2014 "),_z=n(ZPe,"A",{href:!0});var W4t=s(_z);gHo=r(W4t,"RobertaForMultipleChoice"),W4t.forEach(t),hHo=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),pHo=i(ee),hv=n(ee,"LI",{});var eBe=s(hv);Aue=n(eBe,"STRONG",{});var H4t=s(Aue);_Ho=r(H4t,"roformer"),H4t.forEach(t),uHo=r(eBe," \u2014 "),uz=n(eBe,"A",{href:!0});var U4t=s(uz);bHo=r(U4t,"RoFormerForMultipleChoice"),U4t.forEach(t),vHo=r(eBe," (RoFormer model)"),eBe.forEach(t),FHo=i(ee),pv=n(ee,"LI",{});var oBe=s(pv);Lue=n(oBe,"STRONG",{});var J4t=s(Lue);THo=r(J4t,"squeezebert"),J4t.forEach(t),MHo=r(oBe," \u2014 "),bz=n(oBe,"A",{href:!0});var Y4t=s(bz);EHo=r(Y4t,"SqueezeBertForMultipleChoice"),Y4t.forEach(t),CHo=r(oBe," (SqueezeBERT model)"),oBe.forEach(t),wHo=i(ee),_v=n(ee,"LI",{});var rBe=s(_v);yue=n(rBe,"STRONG",{});var K4t=s(yue);AHo=r(K4t,"xlm"),K4t.forEach(t),LHo=r(rBe," \u2014 "),vz=n(rBe,"A",{href:!0});var Z4t=s(vz);yHo=r(Z4t,"XLMForMultipleChoice"),Z4t.forEach(t),xHo=r(rBe," (XLM model)"),rBe.forEach(t),$Ho=i(ee),uv=n(ee,"LI",{});var tBe=s(uv);xue=n(tBe,"STRONG",{});var eEt=s(xue);kHo=r(eEt,"xlm-roberta"),eEt.forEach(t),SHo=r(tBe," \u2014 "),Fz=n(tBe,"A",{href:!0});var oEt=s(Fz);RHo=r(oEt,"XLMRobertaForMultipleChoice"),oEt.forEach(t),PHo=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),BHo=i(ee),bv=n(ee,"LI",{});var aBe=s(bv);$ue=n(aBe,"STRONG",{});var rEt=s($ue);IHo=r(rEt,"xlm-roberta-xl"),rEt.forEach(t),NHo=r(aBe," \u2014 "),Tz=n(aBe,"A",{href:!0});var tEt=s(Tz);qHo=r(tEt,"XLMRobertaXLForMultipleChoice"),tEt.forEach(t),jHo=r(aBe," (XLM-RoBERTa-XL model)"),aBe.forEach(t),DHo=i(ee),vv=n(ee,"LI",{});var nBe=s(vv);kue=n(nBe,"STRONG",{});var aEt=s(kue);GHo=r(aEt,"xlnet"),aEt.forEach(t),OHo=r(nBe," \u2014 "),Mz=n(nBe,"A",{href:!0});var nEt=s(Mz);VHo=r(nEt,"XLNetForMultipleChoice"),nEt.forEach(t),XHo=r(nBe," (XLNet model)"),nBe.forEach(t),zHo=i(ee),Fv=n(ee,"LI",{});var sBe=s(Fv);Sue=n(sBe,"STRONG",{});var sEt=s(Sue);QHo=r(sEt,"yoso"),sEt.forEach(t),WHo=r(sBe," \u2014 "),Ez=n(sBe,"A",{href:!0});var lEt=s(Ez);HHo=r(lEt,"YosoForMultipleChoice"),lEt.forEach(t),UHo=r(sBe," (YOSO model)"),sBe.forEach(t),ee.forEach(t),JHo=i(ga),Tv=n(ga,"P",{});var lBe=s(Tv);YHo=r(lBe,"The model is set in evaluation mode by default using "),Rue=n(lBe,"CODE",{});var iEt=s(Rue);KHo=r(iEt,"model.eval()"),iEt.forEach(t),ZHo=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(lBe,"CODE",{});var dEt=s(Pue);eUo=r(dEt,"model.train()"),dEt.forEach(t),lBe.forEach(t),oUo=i(ga),T(Mv.$$.fragment,ga),ga.forEach(t),il.forEach(t),yXe=i(f),id=n(f,"H2",{class:!0});var PQe=s(id);Ev=n(PQe,"A",{id:!0,class:!0,href:!0});var cEt=s(Ev);Bue=n(cEt,"SPAN",{});var fEt=s(Bue);T(my.$$.fragment,fEt),fEt.forEach(t),cEt.forEach(t),rUo=i(PQe),Iue=n(PQe,"SPAN",{});var mEt=s(Iue);tUo=r(mEt,"AutoModelForNextSentencePrediction"),mEt.forEach(t),PQe.forEach(t),xXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(gy.$$.fragment,dl),aUo=i(dl),dd=n(dl,"P",{});var Wre=s(dd);nUo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cz=n(Wre,"A",{href:!0});var gEt=s(Cz);sUo=r(gEt,"from_pretrained()"),gEt.forEach(t),lUo=r(Wre," class method or the "),wz=n(Wre,"A",{href:!0});var hEt=s(wz);iUo=r(hEt,"from_config()"),hEt.forEach(t),dUo=r(Wre,` class
method.`),Wre.forEach(t),cUo=i(dl),hy=n(dl,"P",{});var BQe=s(hy);fUo=r(BQe,"This class cannot be instantiated directly using "),Nue=n(BQe,"CODE",{});var pEt=s(Nue);mUo=r(pEt,"__init__()"),pEt.forEach(t),gUo=r(BQe," (throws an error)."),BQe.forEach(t),hUo=i(dl),pt=n(dl,"DIV",{class:!0});var E6=s(pt);T(py.$$.fragment,E6),pUo=i(E6),que=n(E6,"P",{});var _Et=s(que);_Uo=r(_Et,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Et.forEach(t),uUo=i(E6),cd=n(E6,"P",{});var Hre=s(cd);bUo=r(Hre,`Note:
Loading a model from its configuration file does `),jue=n(Hre,"STRONG",{});var uEt=s(jue);vUo=r(uEt,"not"),uEt.forEach(t),FUo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(Hre,"A",{href:!0});var bEt=s(Az);TUo=r(bEt,"from_pretrained()"),bEt.forEach(t),MUo=r(Hre," to load the model weights."),Hre.forEach(t),EUo=i(E6),T(Cv.$$.fragment,E6),E6.forEach(t),CUo=i(dl),ao=n(dl,"DIV",{class:!0});var ha=s(ao);T(_y.$$.fragment,ha),wUo=i(ha),Due=n(ha,"P",{});var vEt=s(Due);AUo=r(vEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vEt.forEach(t),LUo=i(ha),Va=n(ha,"P",{});var C6=s(Va);yUo=r(C6,"The model class to instantiate is selected based on the "),Gue=n(C6,"CODE",{});var FEt=s(Gue);xUo=r(FEt,"model_type"),FEt.forEach(t),$Uo=r(C6,` property of the config object (either
passed as an argument or loaded from `),Oue=n(C6,"CODE",{});var TEt=s(Oue);kUo=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),SUo=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(C6,"CODE",{});var MEt=s(Vue);RUo=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),PUo=r(C6,":"),C6.forEach(t),BUo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);wv=n(pa,"LI",{});var iBe=s(wv);Xue=n(iBe,"STRONG",{});var EEt=s(Xue);IUo=r(EEt,"bert"),EEt.forEach(t),NUo=r(iBe," \u2014 "),Lz=n(iBe,"A",{href:!0});var CEt=s(Lz);qUo=r(CEt,"BertForNextSentencePrediction"),CEt.forEach(t),jUo=r(iBe," (BERT model)"),iBe.forEach(t),DUo=i(pa),Av=n(pa,"LI",{});var dBe=s(Av);zue=n(dBe,"STRONG",{});var wEt=s(zue);GUo=r(wEt,"fnet"),wEt.forEach(t),OUo=r(dBe," \u2014 "),yz=n(dBe,"A",{href:!0});var AEt=s(yz);VUo=r(AEt,"FNetForNextSentencePrediction"),AEt.forEach(t),XUo=r(dBe," (FNet model)"),dBe.forEach(t),zUo=i(pa),Lv=n(pa,"LI",{});var cBe=s(Lv);Que=n(cBe,"STRONG",{});var LEt=s(Que);QUo=r(LEt,"megatron-bert"),LEt.forEach(t),WUo=r(cBe," \u2014 "),xz=n(cBe,"A",{href:!0});var yEt=s(xz);HUo=r(yEt,"MegatronBertForNextSentencePrediction"),yEt.forEach(t),UUo=r(cBe," (Megatron-BERT model)"),cBe.forEach(t),JUo=i(pa),yv=n(pa,"LI",{});var fBe=s(yv);Wue=n(fBe,"STRONG",{});var xEt=s(Wue);YUo=r(xEt,"mobilebert"),xEt.forEach(t),KUo=r(fBe," \u2014 "),$z=n(fBe,"A",{href:!0});var $Et=s($z);ZUo=r($Et,"MobileBertForNextSentencePrediction"),$Et.forEach(t),eJo=r(fBe," (MobileBERT model)"),fBe.forEach(t),oJo=i(pa),xv=n(pa,"LI",{});var mBe=s(xv);Hue=n(mBe,"STRONG",{});var kEt=s(Hue);rJo=r(kEt,"nezha"),kEt.forEach(t),tJo=r(mBe," \u2014 "),kz=n(mBe,"A",{href:!0});var SEt=s(kz);aJo=r(SEt,"NezhaForNextSentencePrediction"),SEt.forEach(t),nJo=r(mBe," (Nezha model)"),mBe.forEach(t),sJo=i(pa),$v=n(pa,"LI",{});var gBe=s($v);Uue=n(gBe,"STRONG",{});var REt=s(Uue);lJo=r(REt,"qdqbert"),REt.forEach(t),iJo=r(gBe," \u2014 "),Sz=n(gBe,"A",{href:!0});var PEt=s(Sz);dJo=r(PEt,"QDQBertForNextSentencePrediction"),PEt.forEach(t),cJo=r(gBe," (QDQBert model)"),gBe.forEach(t),pa.forEach(t),fJo=i(ha),kv=n(ha,"P",{});var hBe=s(kv);mJo=r(hBe,"The model is set in evaluation mode by default using "),Jue=n(hBe,"CODE",{});var BEt=s(Jue);gJo=r(BEt,"model.eval()"),BEt.forEach(t),hJo=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(hBe,"CODE",{});var IEt=s(Yue);pJo=r(IEt,"model.train()"),IEt.forEach(t),hBe.forEach(t),_Jo=i(ha),T(Sv.$$.fragment,ha),ha.forEach(t),dl.forEach(t),$Xe=i(f),fd=n(f,"H2",{class:!0});var IQe=s(fd);Rv=n(IQe,"A",{id:!0,class:!0,href:!0});var NEt=s(Rv);Kue=n(NEt,"SPAN",{});var qEt=s(Kue);T(uy.$$.fragment,qEt),qEt.forEach(t),NEt.forEach(t),uJo=i(IQe),Zue=n(IQe,"SPAN",{});var jEt=s(Zue);bJo=r(jEt,"AutoModelForTokenClassification"),jEt.forEach(t),IQe.forEach(t),kXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(by.$$.fragment,cl),vJo=i(cl),md=n(cl,"P",{});var Ure=s(md);FJo=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rz=n(Ure,"A",{href:!0});var DEt=s(Rz);TJo=r(DEt,"from_pretrained()"),DEt.forEach(t),MJo=r(Ure," class method or the "),Pz=n(Ure,"A",{href:!0});var GEt=s(Pz);EJo=r(GEt,"from_config()"),GEt.forEach(t),CJo=r(Ure,` class
method.`),Ure.forEach(t),wJo=i(cl),vy=n(cl,"P",{});var NQe=s(vy);AJo=r(NQe,"This class cannot be instantiated directly using "),e1e=n(NQe,"CODE",{});var OEt=s(e1e);LJo=r(OEt,"__init__()"),OEt.forEach(t),yJo=r(NQe," (throws an error)."),NQe.forEach(t),xJo=i(cl),_t=n(cl,"DIV",{class:!0});var w6=s(_t);T(Fy.$$.fragment,w6),$Jo=i(w6),o1e=n(w6,"P",{});var VEt=s(o1e);kJo=r(VEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VEt.forEach(t),SJo=i(w6),gd=n(w6,"P",{});var Jre=s(gd);RJo=r(Jre,`Note:
Loading a model from its configuration file does `),r1e=n(Jre,"STRONG",{});var XEt=s(r1e);PJo=r(XEt,"not"),XEt.forEach(t),BJo=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(Jre,"A",{href:!0});var zEt=s(Bz);IJo=r(zEt,"from_pretrained()"),zEt.forEach(t),NJo=r(Jre," to load the model weights."),Jre.forEach(t),qJo=i(w6),T(Pv.$$.fragment,w6),w6.forEach(t),jJo=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(Ty.$$.fragment,_a),DJo=i(_a),t1e=n(_a,"P",{});var QEt=s(t1e);GJo=r(QEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QEt.forEach(t),OJo=i(_a),Xa=n(_a,"P",{});var A6=s(Xa);VJo=r(A6,"The model class to instantiate is selected based on the "),a1e=n(A6,"CODE",{});var WEt=s(a1e);XJo=r(WEt,"model_type"),WEt.forEach(t),zJo=r(A6,` property of the config object (either
passed as an argument or loaded from `),n1e=n(A6,"CODE",{});var HEt=s(n1e);QJo=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),WJo=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(A6,"CODE",{});var UEt=s(s1e);HJo=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),UJo=r(A6,":"),A6.forEach(t),JJo=i(_a),U=n(_a,"UL",{});var J=s(U);Bv=n(J,"LI",{});var pBe=s(Bv);l1e=n(pBe,"STRONG",{});var JEt=s(l1e);YJo=r(JEt,"albert"),JEt.forEach(t),KJo=r(pBe," \u2014 "),Iz=n(pBe,"A",{href:!0});var YEt=s(Iz);ZJo=r(YEt,"AlbertForTokenClassification"),YEt.forEach(t),eYo=r(pBe," (ALBERT model)"),pBe.forEach(t),oYo=i(J),Iv=n(J,"LI",{});var _Be=s(Iv);i1e=n(_Be,"STRONG",{});var KEt=s(i1e);rYo=r(KEt,"bert"),KEt.forEach(t),tYo=r(_Be," \u2014 "),Nz=n(_Be,"A",{href:!0});var ZEt=s(Nz);aYo=r(ZEt,"BertForTokenClassification"),ZEt.forEach(t),nYo=r(_Be," (BERT model)"),_Be.forEach(t),sYo=i(J),Nv=n(J,"LI",{});var uBe=s(Nv);d1e=n(uBe,"STRONG",{});var eCt=s(d1e);lYo=r(eCt,"big_bird"),eCt.forEach(t),iYo=r(uBe," \u2014 "),qz=n(uBe,"A",{href:!0});var oCt=s(qz);dYo=r(oCt,"BigBirdForTokenClassification"),oCt.forEach(t),cYo=r(uBe," (BigBird model)"),uBe.forEach(t),fYo=i(J),qv=n(J,"LI",{});var bBe=s(qv);c1e=n(bBe,"STRONG",{});var rCt=s(c1e);mYo=r(rCt,"bloom"),rCt.forEach(t),gYo=r(bBe," \u2014 "),jz=n(bBe,"A",{href:!0});var tCt=s(jz);hYo=r(tCt,"BloomForTokenClassification"),tCt.forEach(t),pYo=r(bBe," (BLOOM model)"),bBe.forEach(t),_Yo=i(J),jv=n(J,"LI",{});var vBe=s(jv);f1e=n(vBe,"STRONG",{});var aCt=s(f1e);uYo=r(aCt,"camembert"),aCt.forEach(t),bYo=r(vBe," \u2014 "),Dz=n(vBe,"A",{href:!0});var nCt=s(Dz);vYo=r(nCt,"CamembertForTokenClassification"),nCt.forEach(t),FYo=r(vBe," (CamemBERT model)"),vBe.forEach(t),TYo=i(J),Dv=n(J,"LI",{});var FBe=s(Dv);m1e=n(FBe,"STRONG",{});var sCt=s(m1e);MYo=r(sCt,"canine"),sCt.forEach(t),EYo=r(FBe," \u2014 "),Gz=n(FBe,"A",{href:!0});var lCt=s(Gz);CYo=r(lCt,"CanineForTokenClassification"),lCt.forEach(t),wYo=r(FBe," (CANINE model)"),FBe.forEach(t),AYo=i(J),Gv=n(J,"LI",{});var TBe=s(Gv);g1e=n(TBe,"STRONG",{});var iCt=s(g1e);LYo=r(iCt,"convbert"),iCt.forEach(t),yYo=r(TBe," \u2014 "),Oz=n(TBe,"A",{href:!0});var dCt=s(Oz);xYo=r(dCt,"ConvBertForTokenClassification"),dCt.forEach(t),$Yo=r(TBe," (ConvBERT model)"),TBe.forEach(t),kYo=i(J),Ov=n(J,"LI",{});var MBe=s(Ov);h1e=n(MBe,"STRONG",{});var cCt=s(h1e);SYo=r(cCt,"data2vec-text"),cCt.forEach(t),RYo=r(MBe," \u2014 "),Vz=n(MBe,"A",{href:!0});var fCt=s(Vz);PYo=r(fCt,"Data2VecTextForTokenClassification"),fCt.forEach(t),BYo=r(MBe," (Data2VecText model)"),MBe.forEach(t),IYo=i(J),Vv=n(J,"LI",{});var EBe=s(Vv);p1e=n(EBe,"STRONG",{});var mCt=s(p1e);NYo=r(mCt,"deberta"),mCt.forEach(t),qYo=r(EBe," \u2014 "),Xz=n(EBe,"A",{href:!0});var gCt=s(Xz);jYo=r(gCt,"DebertaForTokenClassification"),gCt.forEach(t),DYo=r(EBe," (DeBERTa model)"),EBe.forEach(t),GYo=i(J),Xv=n(J,"LI",{});var CBe=s(Xv);_1e=n(CBe,"STRONG",{});var hCt=s(_1e);OYo=r(hCt,"deberta-v2"),hCt.forEach(t),VYo=r(CBe," \u2014 "),zz=n(CBe,"A",{href:!0});var pCt=s(zz);XYo=r(pCt,"DebertaV2ForTokenClassification"),pCt.forEach(t),zYo=r(CBe," (DeBERTa-v2 model)"),CBe.forEach(t),QYo=i(J),zv=n(J,"LI",{});var wBe=s(zv);u1e=n(wBe,"STRONG",{});var _Ct=s(u1e);WYo=r(_Ct,"distilbert"),_Ct.forEach(t),HYo=r(wBe," \u2014 "),Qz=n(wBe,"A",{href:!0});var uCt=s(Qz);UYo=r(uCt,"DistilBertForTokenClassification"),uCt.forEach(t),JYo=r(wBe," (DistilBERT model)"),wBe.forEach(t),YYo=i(J),Qv=n(J,"LI",{});var ABe=s(Qv);b1e=n(ABe,"STRONG",{});var bCt=s(b1e);KYo=r(bCt,"electra"),bCt.forEach(t),ZYo=r(ABe," \u2014 "),Wz=n(ABe,"A",{href:!0});var vCt=s(Wz);eKo=r(vCt,"ElectraForTokenClassification"),vCt.forEach(t),oKo=r(ABe," (ELECTRA model)"),ABe.forEach(t),rKo=i(J),Wv=n(J,"LI",{});var LBe=s(Wv);v1e=n(LBe,"STRONG",{});var FCt=s(v1e);tKo=r(FCt,"flaubert"),FCt.forEach(t),aKo=r(LBe," \u2014 "),Hz=n(LBe,"A",{href:!0});var TCt=s(Hz);nKo=r(TCt,"FlaubertForTokenClassification"),TCt.forEach(t),sKo=r(LBe," (FlauBERT model)"),LBe.forEach(t),lKo=i(J),Hv=n(J,"LI",{});var yBe=s(Hv);F1e=n(yBe,"STRONG",{});var MCt=s(F1e);iKo=r(MCt,"fnet"),MCt.forEach(t),dKo=r(yBe," \u2014 "),Uz=n(yBe,"A",{href:!0});var ECt=s(Uz);cKo=r(ECt,"FNetForTokenClassification"),ECt.forEach(t),fKo=r(yBe," (FNet model)"),yBe.forEach(t),mKo=i(J),Uv=n(J,"LI",{});var xBe=s(Uv);T1e=n(xBe,"STRONG",{});var CCt=s(T1e);gKo=r(CCt,"funnel"),CCt.forEach(t),hKo=r(xBe," \u2014 "),Jz=n(xBe,"A",{href:!0});var wCt=s(Jz);pKo=r(wCt,"FunnelForTokenClassification"),wCt.forEach(t),_Ko=r(xBe," (Funnel Transformer model)"),xBe.forEach(t),uKo=i(J),Jv=n(J,"LI",{});var $Be=s(Jv);M1e=n($Be,"STRONG",{});var ACt=s(M1e);bKo=r(ACt,"gpt2"),ACt.forEach(t),vKo=r($Be," \u2014 "),Yz=n($Be,"A",{href:!0});var LCt=s(Yz);FKo=r(LCt,"GPT2ForTokenClassification"),LCt.forEach(t),TKo=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),MKo=i(J),Yv=n(J,"LI",{});var kBe=s(Yv);E1e=n(kBe,"STRONG",{});var yCt=s(E1e);EKo=r(yCt,"ibert"),yCt.forEach(t),CKo=r(kBe," \u2014 "),Kz=n(kBe,"A",{href:!0});var xCt=s(Kz);wKo=r(xCt,"IBertForTokenClassification"),xCt.forEach(t),AKo=r(kBe," (I-BERT model)"),kBe.forEach(t),LKo=i(J),Kv=n(J,"LI",{});var SBe=s(Kv);C1e=n(SBe,"STRONG",{});var $Ct=s(C1e);yKo=r($Ct,"layoutlm"),$Ct.forEach(t),xKo=r(SBe," \u2014 "),Zz=n(SBe,"A",{href:!0});var kCt=s(Zz);$Ko=r(kCt,"LayoutLMForTokenClassification"),kCt.forEach(t),kKo=r(SBe," (LayoutLM model)"),SBe.forEach(t),SKo=i(J),Zv=n(J,"LI",{});var RBe=s(Zv);w1e=n(RBe,"STRONG",{});var SCt=s(w1e);RKo=r(SCt,"layoutlmv2"),SCt.forEach(t),PKo=r(RBe," \u2014 "),eQ=n(RBe,"A",{href:!0});var RCt=s(eQ);BKo=r(RCt,"LayoutLMv2ForTokenClassification"),RCt.forEach(t),IKo=r(RBe," (LayoutLMv2 model)"),RBe.forEach(t),NKo=i(J),eF=n(J,"LI",{});var PBe=s(eF);A1e=n(PBe,"STRONG",{});var PCt=s(A1e);qKo=r(PCt,"layoutlmv3"),PCt.forEach(t),jKo=r(PBe," \u2014 "),oQ=n(PBe,"A",{href:!0});var BCt=s(oQ);DKo=r(BCt,"LayoutLMv3ForTokenClassification"),BCt.forEach(t),GKo=r(PBe," (LayoutLMv3 model)"),PBe.forEach(t),OKo=i(J),oF=n(J,"LI",{});var BBe=s(oF);L1e=n(BBe,"STRONG",{});var ICt=s(L1e);VKo=r(ICt,"longformer"),ICt.forEach(t),XKo=r(BBe," \u2014 "),rQ=n(BBe,"A",{href:!0});var NCt=s(rQ);zKo=r(NCt,"LongformerForTokenClassification"),NCt.forEach(t),QKo=r(BBe," (Longformer model)"),BBe.forEach(t),WKo=i(J),rF=n(J,"LI",{});var IBe=s(rF);y1e=n(IBe,"STRONG",{});var qCt=s(y1e);HKo=r(qCt,"megatron-bert"),qCt.forEach(t),UKo=r(IBe," \u2014 "),tQ=n(IBe,"A",{href:!0});var jCt=s(tQ);JKo=r(jCt,"MegatronBertForTokenClassification"),jCt.forEach(t),YKo=r(IBe," (Megatron-BERT model)"),IBe.forEach(t),KKo=i(J),tF=n(J,"LI",{});var NBe=s(tF);x1e=n(NBe,"STRONG",{});var DCt=s(x1e);ZKo=r(DCt,"mobilebert"),DCt.forEach(t),eZo=r(NBe," \u2014 "),aQ=n(NBe,"A",{href:!0});var GCt=s(aQ);oZo=r(GCt,"MobileBertForTokenClassification"),GCt.forEach(t),rZo=r(NBe," (MobileBERT model)"),NBe.forEach(t),tZo=i(J),aF=n(J,"LI",{});var qBe=s(aF);$1e=n(qBe,"STRONG",{});var OCt=s($1e);aZo=r(OCt,"mpnet"),OCt.forEach(t),nZo=r(qBe," \u2014 "),nQ=n(qBe,"A",{href:!0});var VCt=s(nQ);sZo=r(VCt,"MPNetForTokenClassification"),VCt.forEach(t),lZo=r(qBe," (MPNet model)"),qBe.forEach(t),iZo=i(J),nF=n(J,"LI",{});var jBe=s(nF);k1e=n(jBe,"STRONG",{});var XCt=s(k1e);dZo=r(XCt,"nezha"),XCt.forEach(t),cZo=r(jBe," \u2014 "),sQ=n(jBe,"A",{href:!0});var zCt=s(sQ);fZo=r(zCt,"NezhaForTokenClassification"),zCt.forEach(t),mZo=r(jBe," (Nezha model)"),jBe.forEach(t),gZo=i(J),sF=n(J,"LI",{});var DBe=s(sF);S1e=n(DBe,"STRONG",{});var QCt=s(S1e);hZo=r(QCt,"nystromformer"),QCt.forEach(t),pZo=r(DBe," \u2014 "),lQ=n(DBe,"A",{href:!0});var WCt=s(lQ);_Zo=r(WCt,"NystromformerForTokenClassification"),WCt.forEach(t),uZo=r(DBe," (Nystr\xF6mformer model)"),DBe.forEach(t),bZo=i(J),lF=n(J,"LI",{});var GBe=s(lF);R1e=n(GBe,"STRONG",{});var HCt=s(R1e);vZo=r(HCt,"qdqbert"),HCt.forEach(t),FZo=r(GBe," \u2014 "),iQ=n(GBe,"A",{href:!0});var UCt=s(iQ);TZo=r(UCt,"QDQBertForTokenClassification"),UCt.forEach(t),MZo=r(GBe," (QDQBert model)"),GBe.forEach(t),EZo=i(J),iF=n(J,"LI",{});var OBe=s(iF);P1e=n(OBe,"STRONG",{});var JCt=s(P1e);CZo=r(JCt,"rembert"),JCt.forEach(t),wZo=r(OBe," \u2014 "),dQ=n(OBe,"A",{href:!0});var YCt=s(dQ);AZo=r(YCt,"RemBertForTokenClassification"),YCt.forEach(t),LZo=r(OBe," (RemBERT model)"),OBe.forEach(t),yZo=i(J),dF=n(J,"LI",{});var VBe=s(dF);B1e=n(VBe,"STRONG",{});var KCt=s(B1e);xZo=r(KCt,"roberta"),KCt.forEach(t),$Zo=r(VBe," \u2014 "),cQ=n(VBe,"A",{href:!0});var ZCt=s(cQ);kZo=r(ZCt,"RobertaForTokenClassification"),ZCt.forEach(t),SZo=r(VBe," (RoBERTa model)"),VBe.forEach(t),RZo=i(J),cF=n(J,"LI",{});var XBe=s(cF);I1e=n(XBe,"STRONG",{});var e5t=s(I1e);PZo=r(e5t,"roformer"),e5t.forEach(t),BZo=r(XBe," \u2014 "),fQ=n(XBe,"A",{href:!0});var o5t=s(fQ);IZo=r(o5t,"RoFormerForTokenClassification"),o5t.forEach(t),NZo=r(XBe," (RoFormer model)"),XBe.forEach(t),qZo=i(J),fF=n(J,"LI",{});var zBe=s(fF);N1e=n(zBe,"STRONG",{});var r5t=s(N1e);jZo=r(r5t,"squeezebert"),r5t.forEach(t),DZo=r(zBe," \u2014 "),mQ=n(zBe,"A",{href:!0});var t5t=s(mQ);GZo=r(t5t,"SqueezeBertForTokenClassification"),t5t.forEach(t),OZo=r(zBe," (SqueezeBERT model)"),zBe.forEach(t),VZo=i(J),mF=n(J,"LI",{});var QBe=s(mF);q1e=n(QBe,"STRONG",{});var a5t=s(q1e);XZo=r(a5t,"xlm"),a5t.forEach(t),zZo=r(QBe," \u2014 "),gQ=n(QBe,"A",{href:!0});var n5t=s(gQ);QZo=r(n5t,"XLMForTokenClassification"),n5t.forEach(t),WZo=r(QBe," (XLM model)"),QBe.forEach(t),HZo=i(J),gF=n(J,"LI",{});var WBe=s(gF);j1e=n(WBe,"STRONG",{});var s5t=s(j1e);UZo=r(s5t,"xlm-roberta"),s5t.forEach(t),JZo=r(WBe," \u2014 "),hQ=n(WBe,"A",{href:!0});var l5t=s(hQ);YZo=r(l5t,"XLMRobertaForTokenClassification"),l5t.forEach(t),KZo=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),ZZo=i(J),hF=n(J,"LI",{});var HBe=s(hF);D1e=n(HBe,"STRONG",{});var i5t=s(D1e);eer=r(i5t,"xlm-roberta-xl"),i5t.forEach(t),oer=r(HBe," \u2014 "),pQ=n(HBe,"A",{href:!0});var d5t=s(pQ);rer=r(d5t,"XLMRobertaXLForTokenClassification"),d5t.forEach(t),ter=r(HBe," (XLM-RoBERTa-XL model)"),HBe.forEach(t),aer=i(J),pF=n(J,"LI",{});var UBe=s(pF);G1e=n(UBe,"STRONG",{});var c5t=s(G1e);ner=r(c5t,"xlnet"),c5t.forEach(t),ser=r(UBe," \u2014 "),_Q=n(UBe,"A",{href:!0});var f5t=s(_Q);ler=r(f5t,"XLNetForTokenClassification"),f5t.forEach(t),ier=r(UBe," (XLNet model)"),UBe.forEach(t),der=i(J),_F=n(J,"LI",{});var JBe=s(_F);O1e=n(JBe,"STRONG",{});var m5t=s(O1e);cer=r(m5t,"yoso"),m5t.forEach(t),fer=r(JBe," \u2014 "),uQ=n(JBe,"A",{href:!0});var g5t=s(uQ);mer=r(g5t,"YosoForTokenClassification"),g5t.forEach(t),ger=r(JBe," (YOSO model)"),JBe.forEach(t),J.forEach(t),her=i(_a),uF=n(_a,"P",{});var YBe=s(uF);per=r(YBe,"The model is set in evaluation mode by default using "),V1e=n(YBe,"CODE",{});var h5t=s(V1e);_er=r(h5t,"model.eval()"),h5t.forEach(t),uer=r(YBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=n(YBe,"CODE",{});var p5t=s(X1e);ber=r(p5t,"model.train()"),p5t.forEach(t),YBe.forEach(t),ver=i(_a),T(bF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),SXe=i(f),hd=n(f,"H2",{class:!0});var qQe=s(hd);vF=n(qQe,"A",{id:!0,class:!0,href:!0});var _5t=s(vF);z1e=n(_5t,"SPAN",{});var u5t=s(z1e);T(My.$$.fragment,u5t),u5t.forEach(t),_5t.forEach(t),Fer=i(qQe),Q1e=n(qQe,"SPAN",{});var b5t=s(Q1e);Ter=r(b5t,"AutoModelForQuestionAnswering"),b5t.forEach(t),qQe.forEach(t),RXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(Ey.$$.fragment,fl),Mer=i(fl),pd=n(fl,"P",{});var Yre=s(pd);Eer=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=n(Yre,"A",{href:!0});var v5t=s(bQ);Cer=r(v5t,"from_pretrained()"),v5t.forEach(t),wer=r(Yre," class method or the "),vQ=n(Yre,"A",{href:!0});var F5t=s(vQ);Aer=r(F5t,"from_config()"),F5t.forEach(t),Ler=r(Yre,` class
method.`),Yre.forEach(t),yer=i(fl),Cy=n(fl,"P",{});var jQe=s(Cy);xer=r(jQe,"This class cannot be instantiated directly using "),W1e=n(jQe,"CODE",{});var T5t=s(W1e);$er=r(T5t,"__init__()"),T5t.forEach(t),ker=r(jQe," (throws an error)."),jQe.forEach(t),Ser=i(fl),ut=n(fl,"DIV",{class:!0});var L6=s(ut);T(wy.$$.fragment,L6),Rer=i(L6),H1e=n(L6,"P",{});var M5t=s(H1e);Per=r(M5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M5t.forEach(t),Ber=i(L6),_d=n(L6,"P",{});var Kre=s(_d);Ier=r(Kre,`Note:
Loading a model from its configuration file does `),U1e=n(Kre,"STRONG",{});var E5t=s(U1e);Ner=r(E5t,"not"),E5t.forEach(t),qer=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Kre,"A",{href:!0});var C5t=s(FQ);jer=r(C5t,"from_pretrained()"),C5t.forEach(t),Der=r(Kre," to load the model weights."),Kre.forEach(t),Ger=i(L6),T(FF.$$.fragment,L6),L6.forEach(t),Oer=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(Ay.$$.fragment,ua),Ver=i(ua),J1e=n(ua,"P",{});var w5t=s(J1e);Xer=r(w5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w5t.forEach(t),zer=i(ua),za=n(ua,"P",{});var y6=s(za);Qer=r(y6,"The model class to instantiate is selected based on the "),Y1e=n(y6,"CODE",{});var A5t=s(Y1e);Wer=r(A5t,"model_type"),A5t.forEach(t),Her=r(y6,` property of the config object (either
passed as an argument or loaded from `),K1e=n(y6,"CODE",{});var L5t=s(K1e);Uer=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),Jer=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(y6,"CODE",{});var y5t=s(Z1e);Yer=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),Ker=r(y6,":"),y6.forEach(t),Zer=i(ua),V=n(ua,"UL",{});var X=s(V);TF=n(X,"LI",{});var KBe=s(TF);e2e=n(KBe,"STRONG",{});var x5t=s(e2e);eor=r(x5t,"albert"),x5t.forEach(t),oor=r(KBe," \u2014 "),TQ=n(KBe,"A",{href:!0});var $5t=s(TQ);ror=r($5t,"AlbertForQuestionAnswering"),$5t.forEach(t),tor=r(KBe," (ALBERT model)"),KBe.forEach(t),aor=i(X),MF=n(X,"LI",{});var ZBe=s(MF);o2e=n(ZBe,"STRONG",{});var k5t=s(o2e);nor=r(k5t,"bart"),k5t.forEach(t),sor=r(ZBe," \u2014 "),MQ=n(ZBe,"A",{href:!0});var S5t=s(MQ);lor=r(S5t,"BartForQuestionAnswering"),S5t.forEach(t),ior=r(ZBe," (BART model)"),ZBe.forEach(t),dor=i(X),EF=n(X,"LI",{});var eIe=s(EF);r2e=n(eIe,"STRONG",{});var R5t=s(r2e);cor=r(R5t,"bert"),R5t.forEach(t),mor=r(eIe," \u2014 "),EQ=n(eIe,"A",{href:!0});var P5t=s(EQ);gor=r(P5t,"BertForQuestionAnswering"),P5t.forEach(t),hor=r(eIe," (BERT model)"),eIe.forEach(t),por=i(X),CF=n(X,"LI",{});var oIe=s(CF);t2e=n(oIe,"STRONG",{});var B5t=s(t2e);_or=r(B5t,"big_bird"),B5t.forEach(t),uor=r(oIe," \u2014 "),CQ=n(oIe,"A",{href:!0});var I5t=s(CQ);bor=r(I5t,"BigBirdForQuestionAnswering"),I5t.forEach(t),vor=r(oIe," (BigBird model)"),oIe.forEach(t),For=i(X),wF=n(X,"LI",{});var rIe=s(wF);a2e=n(rIe,"STRONG",{});var N5t=s(a2e);Tor=r(N5t,"bigbird_pegasus"),N5t.forEach(t),Mor=r(rIe," \u2014 "),wQ=n(rIe,"A",{href:!0});var q5t=s(wQ);Eor=r(q5t,"BigBirdPegasusForQuestionAnswering"),q5t.forEach(t),Cor=r(rIe," (BigBird-Pegasus model)"),rIe.forEach(t),wor=i(X),AF=n(X,"LI",{});var tIe=s(AF);n2e=n(tIe,"STRONG",{});var j5t=s(n2e);Aor=r(j5t,"camembert"),j5t.forEach(t),Lor=r(tIe," \u2014 "),AQ=n(tIe,"A",{href:!0});var D5t=s(AQ);yor=r(D5t,"CamembertForQuestionAnswering"),D5t.forEach(t),xor=r(tIe," (CamemBERT model)"),tIe.forEach(t),$or=i(X),LF=n(X,"LI",{});var aIe=s(LF);s2e=n(aIe,"STRONG",{});var G5t=s(s2e);kor=r(G5t,"canine"),G5t.forEach(t),Sor=r(aIe," \u2014 "),LQ=n(aIe,"A",{href:!0});var O5t=s(LQ);Ror=r(O5t,"CanineForQuestionAnswering"),O5t.forEach(t),Por=r(aIe," (CANINE model)"),aIe.forEach(t),Bor=i(X),yF=n(X,"LI",{});var nIe=s(yF);l2e=n(nIe,"STRONG",{});var V5t=s(l2e);Ior=r(V5t,"convbert"),V5t.forEach(t),Nor=r(nIe," \u2014 "),yQ=n(nIe,"A",{href:!0});var X5t=s(yQ);qor=r(X5t,"ConvBertForQuestionAnswering"),X5t.forEach(t),jor=r(nIe," (ConvBERT model)"),nIe.forEach(t),Dor=i(X),xF=n(X,"LI",{});var sIe=s(xF);i2e=n(sIe,"STRONG",{});var z5t=s(i2e);Gor=r(z5t,"data2vec-text"),z5t.forEach(t),Oor=r(sIe," \u2014 "),xQ=n(sIe,"A",{href:!0});var Q5t=s(xQ);Vor=r(Q5t,"Data2VecTextForQuestionAnswering"),Q5t.forEach(t),Xor=r(sIe," (Data2VecText model)"),sIe.forEach(t),zor=i(X),$F=n(X,"LI",{});var lIe=s($F);d2e=n(lIe,"STRONG",{});var W5t=s(d2e);Qor=r(W5t,"deberta"),W5t.forEach(t),Wor=r(lIe," \u2014 "),$Q=n(lIe,"A",{href:!0});var H5t=s($Q);Hor=r(H5t,"DebertaForQuestionAnswering"),H5t.forEach(t),Uor=r(lIe," (DeBERTa model)"),lIe.forEach(t),Jor=i(X),kF=n(X,"LI",{});var iIe=s(kF);c2e=n(iIe,"STRONG",{});var U5t=s(c2e);Yor=r(U5t,"deberta-v2"),U5t.forEach(t),Kor=r(iIe," \u2014 "),kQ=n(iIe,"A",{href:!0});var J5t=s(kQ);Zor=r(J5t,"DebertaV2ForQuestionAnswering"),J5t.forEach(t),err=r(iIe," (DeBERTa-v2 model)"),iIe.forEach(t),orr=i(X),SF=n(X,"LI",{});var dIe=s(SF);f2e=n(dIe,"STRONG",{});var Y5t=s(f2e);rrr=r(Y5t,"distilbert"),Y5t.forEach(t),trr=r(dIe," \u2014 "),SQ=n(dIe,"A",{href:!0});var K5t=s(SQ);arr=r(K5t,"DistilBertForQuestionAnswering"),K5t.forEach(t),nrr=r(dIe," (DistilBERT model)"),dIe.forEach(t),srr=i(X),RF=n(X,"LI",{});var cIe=s(RF);m2e=n(cIe,"STRONG",{});var Z5t=s(m2e);lrr=r(Z5t,"electra"),Z5t.forEach(t),irr=r(cIe," \u2014 "),RQ=n(cIe,"A",{href:!0});var e0t=s(RQ);drr=r(e0t,"ElectraForQuestionAnswering"),e0t.forEach(t),crr=r(cIe," (ELECTRA model)"),cIe.forEach(t),frr=i(X),PF=n(X,"LI",{});var fIe=s(PF);g2e=n(fIe,"STRONG",{});var o0t=s(g2e);mrr=r(o0t,"flaubert"),o0t.forEach(t),grr=r(fIe," \u2014 "),PQ=n(fIe,"A",{href:!0});var r0t=s(PQ);hrr=r(r0t,"FlaubertForQuestionAnsweringSimple"),r0t.forEach(t),prr=r(fIe," (FlauBERT model)"),fIe.forEach(t),_rr=i(X),BF=n(X,"LI",{});var mIe=s(BF);h2e=n(mIe,"STRONG",{});var t0t=s(h2e);urr=r(t0t,"fnet"),t0t.forEach(t),brr=r(mIe," \u2014 "),BQ=n(mIe,"A",{href:!0});var a0t=s(BQ);vrr=r(a0t,"FNetForQuestionAnswering"),a0t.forEach(t),Frr=r(mIe," (FNet model)"),mIe.forEach(t),Trr=i(X),IF=n(X,"LI",{});var gIe=s(IF);p2e=n(gIe,"STRONG",{});var n0t=s(p2e);Mrr=r(n0t,"funnel"),n0t.forEach(t),Err=r(gIe," \u2014 "),IQ=n(gIe,"A",{href:!0});var s0t=s(IQ);Crr=r(s0t,"FunnelForQuestionAnswering"),s0t.forEach(t),wrr=r(gIe," (Funnel Transformer model)"),gIe.forEach(t),Arr=i(X),NF=n(X,"LI",{});var hIe=s(NF);_2e=n(hIe,"STRONG",{});var l0t=s(_2e);Lrr=r(l0t,"gptj"),l0t.forEach(t),yrr=r(hIe," \u2014 "),NQ=n(hIe,"A",{href:!0});var i0t=s(NQ);xrr=r(i0t,"GPTJForQuestionAnswering"),i0t.forEach(t),$rr=r(hIe," (GPT-J model)"),hIe.forEach(t),krr=i(X),qF=n(X,"LI",{});var pIe=s(qF);u2e=n(pIe,"STRONG",{});var d0t=s(u2e);Srr=r(d0t,"ibert"),d0t.forEach(t),Rrr=r(pIe," \u2014 "),qQ=n(pIe,"A",{href:!0});var c0t=s(qQ);Prr=r(c0t,"IBertForQuestionAnswering"),c0t.forEach(t),Brr=r(pIe," (I-BERT model)"),pIe.forEach(t),Irr=i(X),jF=n(X,"LI",{});var _Ie=s(jF);b2e=n(_Ie,"STRONG",{});var f0t=s(b2e);Nrr=r(f0t,"layoutlmv2"),f0t.forEach(t),qrr=r(_Ie," \u2014 "),jQ=n(_Ie,"A",{href:!0});var m0t=s(jQ);jrr=r(m0t,"LayoutLMv2ForQuestionAnswering"),m0t.forEach(t),Drr=r(_Ie," (LayoutLMv2 model)"),_Ie.forEach(t),Grr=i(X),DF=n(X,"LI",{});var uIe=s(DF);v2e=n(uIe,"STRONG",{});var g0t=s(v2e);Orr=r(g0t,"layoutlmv3"),g0t.forEach(t),Vrr=r(uIe," \u2014 "),DQ=n(uIe,"A",{href:!0});var h0t=s(DQ);Xrr=r(h0t,"LayoutLMv3ForQuestionAnswering"),h0t.forEach(t),zrr=r(uIe," (LayoutLMv3 model)"),uIe.forEach(t),Qrr=i(X),GF=n(X,"LI",{});var bIe=s(GF);F2e=n(bIe,"STRONG",{});var p0t=s(F2e);Wrr=r(p0t,"led"),p0t.forEach(t),Hrr=r(bIe," \u2014 "),GQ=n(bIe,"A",{href:!0});var _0t=s(GQ);Urr=r(_0t,"LEDForQuestionAnswering"),_0t.forEach(t),Jrr=r(bIe," (LED model)"),bIe.forEach(t),Yrr=i(X),OF=n(X,"LI",{});var vIe=s(OF);T2e=n(vIe,"STRONG",{});var u0t=s(T2e);Krr=r(u0t,"longformer"),u0t.forEach(t),Zrr=r(vIe," \u2014 "),OQ=n(vIe,"A",{href:!0});var b0t=s(OQ);etr=r(b0t,"LongformerForQuestionAnswering"),b0t.forEach(t),otr=r(vIe," (Longformer model)"),vIe.forEach(t),rtr=i(X),VF=n(X,"LI",{});var FIe=s(VF);M2e=n(FIe,"STRONG",{});var v0t=s(M2e);ttr=r(v0t,"lxmert"),v0t.forEach(t),atr=r(FIe," \u2014 "),VQ=n(FIe,"A",{href:!0});var F0t=s(VQ);ntr=r(F0t,"LxmertForQuestionAnswering"),F0t.forEach(t),str=r(FIe," (LXMERT model)"),FIe.forEach(t),ltr=i(X),XF=n(X,"LI",{});var TIe=s(XF);E2e=n(TIe,"STRONG",{});var T0t=s(E2e);itr=r(T0t,"mbart"),T0t.forEach(t),dtr=r(TIe," \u2014 "),XQ=n(TIe,"A",{href:!0});var M0t=s(XQ);ctr=r(M0t,"MBartForQuestionAnswering"),M0t.forEach(t),ftr=r(TIe," (mBART model)"),TIe.forEach(t),mtr=i(X),zF=n(X,"LI",{});var MIe=s(zF);C2e=n(MIe,"STRONG",{});var E0t=s(C2e);gtr=r(E0t,"megatron-bert"),E0t.forEach(t),htr=r(MIe," \u2014 "),zQ=n(MIe,"A",{href:!0});var C0t=s(zQ);ptr=r(C0t,"MegatronBertForQuestionAnswering"),C0t.forEach(t),_tr=r(MIe," (Megatron-BERT model)"),MIe.forEach(t),utr=i(X),QF=n(X,"LI",{});var EIe=s(QF);w2e=n(EIe,"STRONG",{});var w0t=s(w2e);btr=r(w0t,"mobilebert"),w0t.forEach(t),vtr=r(EIe," \u2014 "),QQ=n(EIe,"A",{href:!0});var A0t=s(QQ);Ftr=r(A0t,"MobileBertForQuestionAnswering"),A0t.forEach(t),Ttr=r(EIe," (MobileBERT model)"),EIe.forEach(t),Mtr=i(X),WF=n(X,"LI",{});var CIe=s(WF);A2e=n(CIe,"STRONG",{});var L0t=s(A2e);Etr=r(L0t,"mpnet"),L0t.forEach(t),Ctr=r(CIe," \u2014 "),WQ=n(CIe,"A",{href:!0});var y0t=s(WQ);wtr=r(y0t,"MPNetForQuestionAnswering"),y0t.forEach(t),Atr=r(CIe," (MPNet model)"),CIe.forEach(t),Ltr=i(X),HF=n(X,"LI",{});var wIe=s(HF);L2e=n(wIe,"STRONG",{});var x0t=s(L2e);ytr=r(x0t,"mvp"),x0t.forEach(t),xtr=r(wIe," \u2014 "),HQ=n(wIe,"A",{href:!0});var $0t=s(HQ);$tr=r($0t,"MvpForQuestionAnswering"),$0t.forEach(t),ktr=r(wIe," (MVP model)"),wIe.forEach(t),Str=i(X),UF=n(X,"LI",{});var AIe=s(UF);y2e=n(AIe,"STRONG",{});var k0t=s(y2e);Rtr=r(k0t,"nezha"),k0t.forEach(t),Ptr=r(AIe," \u2014 "),UQ=n(AIe,"A",{href:!0});var S0t=s(UQ);Btr=r(S0t,"NezhaForQuestionAnswering"),S0t.forEach(t),Itr=r(AIe," (Nezha model)"),AIe.forEach(t),Ntr=i(X),JF=n(X,"LI",{});var LIe=s(JF);x2e=n(LIe,"STRONG",{});var R0t=s(x2e);qtr=r(R0t,"nystromformer"),R0t.forEach(t),jtr=r(LIe," \u2014 "),JQ=n(LIe,"A",{href:!0});var P0t=s(JQ);Dtr=r(P0t,"NystromformerForQuestionAnswering"),P0t.forEach(t),Gtr=r(LIe," (Nystr\xF6mformer model)"),LIe.forEach(t),Otr=i(X),YF=n(X,"LI",{});var yIe=s(YF);$2e=n(yIe,"STRONG",{});var B0t=s($2e);Vtr=r(B0t,"qdqbert"),B0t.forEach(t),Xtr=r(yIe," \u2014 "),YQ=n(yIe,"A",{href:!0});var I0t=s(YQ);ztr=r(I0t,"QDQBertForQuestionAnswering"),I0t.forEach(t),Qtr=r(yIe," (QDQBert model)"),yIe.forEach(t),Wtr=i(X),KF=n(X,"LI",{});var xIe=s(KF);k2e=n(xIe,"STRONG",{});var N0t=s(k2e);Htr=r(N0t,"reformer"),N0t.forEach(t),Utr=r(xIe," \u2014 "),KQ=n(xIe,"A",{href:!0});var q0t=s(KQ);Jtr=r(q0t,"ReformerForQuestionAnswering"),q0t.forEach(t),Ytr=r(xIe," (Reformer model)"),xIe.forEach(t),Ktr=i(X),ZF=n(X,"LI",{});var $Ie=s(ZF);S2e=n($Ie,"STRONG",{});var j0t=s(S2e);Ztr=r(j0t,"rembert"),j0t.forEach(t),ear=r($Ie," \u2014 "),ZQ=n($Ie,"A",{href:!0});var D0t=s(ZQ);oar=r(D0t,"RemBertForQuestionAnswering"),D0t.forEach(t),rar=r($Ie," (RemBERT model)"),$Ie.forEach(t),tar=i(X),eT=n(X,"LI",{});var kIe=s(eT);R2e=n(kIe,"STRONG",{});var G0t=s(R2e);aar=r(G0t,"roberta"),G0t.forEach(t),nar=r(kIe," \u2014 "),eW=n(kIe,"A",{href:!0});var O0t=s(eW);sar=r(O0t,"RobertaForQuestionAnswering"),O0t.forEach(t),lar=r(kIe," (RoBERTa model)"),kIe.forEach(t),iar=i(X),oT=n(X,"LI",{});var SIe=s(oT);P2e=n(SIe,"STRONG",{});var V0t=s(P2e);dar=r(V0t,"roformer"),V0t.forEach(t),car=r(SIe," \u2014 "),oW=n(SIe,"A",{href:!0});var X0t=s(oW);far=r(X0t,"RoFormerForQuestionAnswering"),X0t.forEach(t),mar=r(SIe," (RoFormer model)"),SIe.forEach(t),gar=i(X),rT=n(X,"LI",{});var RIe=s(rT);B2e=n(RIe,"STRONG",{});var z0t=s(B2e);har=r(z0t,"splinter"),z0t.forEach(t),par=r(RIe," \u2014 "),rW=n(RIe,"A",{href:!0});var Q0t=s(rW);_ar=r(Q0t,"SplinterForQuestionAnswering"),Q0t.forEach(t),uar=r(RIe," (Splinter model)"),RIe.forEach(t),bar=i(X),tT=n(X,"LI",{});var PIe=s(tT);I2e=n(PIe,"STRONG",{});var W0t=s(I2e);Far=r(W0t,"squeezebert"),W0t.forEach(t),Tar=r(PIe," \u2014 "),tW=n(PIe,"A",{href:!0});var H0t=s(tW);Mar=r(H0t,"SqueezeBertForQuestionAnswering"),H0t.forEach(t),Ear=r(PIe," (SqueezeBERT model)"),PIe.forEach(t),Car=i(X),aT=n(X,"LI",{});var BIe=s(aT);N2e=n(BIe,"STRONG",{});var U0t=s(N2e);war=r(U0t,"xlm"),U0t.forEach(t),Aar=r(BIe," \u2014 "),aW=n(BIe,"A",{href:!0});var J0t=s(aW);Lar=r(J0t,"XLMForQuestionAnsweringSimple"),J0t.forEach(t),yar=r(BIe," (XLM model)"),BIe.forEach(t),xar=i(X),nT=n(X,"LI",{});var IIe=s(nT);q2e=n(IIe,"STRONG",{});var Y0t=s(q2e);$ar=r(Y0t,"xlm-roberta"),Y0t.forEach(t),kar=r(IIe," \u2014 "),nW=n(IIe,"A",{href:!0});var K0t=s(nW);Sar=r(K0t,"XLMRobertaForQuestionAnswering"),K0t.forEach(t),Rar=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),Par=i(X),sT=n(X,"LI",{});var NIe=s(sT);j2e=n(NIe,"STRONG",{});var Z0t=s(j2e);Bar=r(Z0t,"xlm-roberta-xl"),Z0t.forEach(t),Iar=r(NIe," \u2014 "),sW=n(NIe,"A",{href:!0});var ewt=s(sW);Nar=r(ewt,"XLMRobertaXLForQuestionAnswering"),ewt.forEach(t),qar=r(NIe," (XLM-RoBERTa-XL model)"),NIe.forEach(t),jar=i(X),lT=n(X,"LI",{});var qIe=s(lT);D2e=n(qIe,"STRONG",{});var owt=s(D2e);Dar=r(owt,"xlnet"),owt.forEach(t),Gar=r(qIe," \u2014 "),lW=n(qIe,"A",{href:!0});var rwt=s(lW);Oar=r(rwt,"XLNetForQuestionAnsweringSimple"),rwt.forEach(t),Var=r(qIe," (XLNet model)"),qIe.forEach(t),Xar=i(X),iT=n(X,"LI",{});var jIe=s(iT);G2e=n(jIe,"STRONG",{});var twt=s(G2e);zar=r(twt,"yoso"),twt.forEach(t),Qar=r(jIe," \u2014 "),iW=n(jIe,"A",{href:!0});var awt=s(iW);War=r(awt,"YosoForQuestionAnswering"),awt.forEach(t),Har=r(jIe," (YOSO model)"),jIe.forEach(t),X.forEach(t),Uar=i(ua),dT=n(ua,"P",{});var DIe=s(dT);Jar=r(DIe,"The model is set in evaluation mode by default using "),O2e=n(DIe,"CODE",{});var nwt=s(O2e);Yar=r(nwt,"model.eval()"),nwt.forEach(t),Kar=r(DIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=n(DIe,"CODE",{});var swt=s(V2e);Zar=r(swt,"model.train()"),swt.forEach(t),DIe.forEach(t),enr=i(ua),T(cT.$$.fragment,ua),ua.forEach(t),fl.forEach(t),PXe=i(f),ud=n(f,"H2",{class:!0});var DQe=s(ud);fT=n(DQe,"A",{id:!0,class:!0,href:!0});var lwt=s(fT);X2e=n(lwt,"SPAN",{});var iwt=s(X2e);T(Ly.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),onr=i(DQe),z2e=n(DQe,"SPAN",{});var dwt=s(z2e);rnr=r(dwt,"AutoModelForTableQuestionAnswering"),dwt.forEach(t),DQe.forEach(t),BXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(yy.$$.fragment,ml),tnr=i(ml),bd=n(ml,"P",{});var Zre=s(bd);anr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dW=n(Zre,"A",{href:!0});var cwt=s(dW);nnr=r(cwt,"from_pretrained()"),cwt.forEach(t),snr=r(Zre," class method or the "),cW=n(Zre,"A",{href:!0});var fwt=s(cW);lnr=r(fwt,"from_config()"),fwt.forEach(t),inr=r(Zre,` class
method.`),Zre.forEach(t),dnr=i(ml),xy=n(ml,"P",{});var GQe=s(xy);cnr=r(GQe,"This class cannot be instantiated directly using "),Q2e=n(GQe,"CODE",{});var mwt=s(Q2e);fnr=r(mwt,"__init__()"),mwt.forEach(t),mnr=r(GQe," (throws an error)."),GQe.forEach(t),gnr=i(ml),bt=n(ml,"DIV",{class:!0});var x6=s(bt);T($y.$$.fragment,x6),hnr=i(x6),W2e=n(x6,"P",{});var gwt=s(W2e);pnr=r(gwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gwt.forEach(t),_nr=i(x6),vd=n(x6,"P",{});var ete=s(vd);unr=r(ete,`Note:
Loading a model from its configuration file does `),H2e=n(ete,"STRONG",{});var hwt=s(H2e);bnr=r(hwt,"not"),hwt.forEach(t),vnr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(ete,"A",{href:!0});var pwt=s(fW);Fnr=r(pwt,"from_pretrained()"),pwt.forEach(t),Tnr=r(ete," to load the model weights."),ete.forEach(t),Mnr=i(x6),T(mT.$$.fragment,x6),x6.forEach(t),Enr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(ky.$$.fragment,ba),Cnr=i(ba),U2e=n(ba,"P",{});var _wt=s(U2e);wnr=r(_wt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_wt.forEach(t),Anr=i(ba),Qa=n(ba,"P",{});var $6=s(Qa);Lnr=r($6,"The model class to instantiate is selected based on the "),J2e=n($6,"CODE",{});var uwt=s(J2e);ynr=r(uwt,"model_type"),uwt.forEach(t),xnr=r($6,` property of the config object (either
passed as an argument or loaded from `),Y2e=n($6,"CODE",{});var bwt=s(Y2e);$nr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),knr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n($6,"CODE",{});var vwt=s(K2e);Snr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),Rnr=r($6,":"),$6.forEach(t),Pnr=i(ba),Z2e=n(ba,"UL",{});var Fwt=s(Z2e);gT=n(Fwt,"LI",{});var GIe=s(gT);ebe=n(GIe,"STRONG",{});var Twt=s(ebe);Bnr=r(Twt,"tapas"),Twt.forEach(t),Inr=r(GIe," \u2014 "),mW=n(GIe,"A",{href:!0});var Mwt=s(mW);Nnr=r(Mwt,"TapasForQuestionAnswering"),Mwt.forEach(t),qnr=r(GIe," (TAPAS model)"),GIe.forEach(t),Fwt.forEach(t),jnr=i(ba),hT=n(ba,"P",{});var OIe=s(hT);Dnr=r(OIe,"The model is set in evaluation mode by default using "),obe=n(OIe,"CODE",{});var Ewt=s(obe);Gnr=r(Ewt,"model.eval()"),Ewt.forEach(t),Onr=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(OIe,"CODE",{});var Cwt=s(rbe);Vnr=r(Cwt,"model.train()"),Cwt.forEach(t),OIe.forEach(t),Xnr=i(ba),T(pT.$$.fragment,ba),ba.forEach(t),ml.forEach(t),IXe=i(f),Fd=n(f,"H2",{class:!0});var OQe=s(Fd);_T=n(OQe,"A",{id:!0,class:!0,href:!0});var wwt=s(_T);tbe=n(wwt,"SPAN",{});var Awt=s(tbe);T(Sy.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),znr=i(OQe),abe=n(OQe,"SPAN",{});var Lwt=s(abe);Qnr=r(Lwt,"AutoModelForImageClassification"),Lwt.forEach(t),OQe.forEach(t),NXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(Ry.$$.fragment,gl),Wnr=i(gl),Td=n(gl,"P",{});var ote=s(Td);Hnr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gW=n(ote,"A",{href:!0});var ywt=s(gW);Unr=r(ywt,"from_pretrained()"),ywt.forEach(t),Jnr=r(ote," class method or the "),hW=n(ote,"A",{href:!0});var xwt=s(hW);Ynr=r(xwt,"from_config()"),xwt.forEach(t),Knr=r(ote,` class
method.`),ote.forEach(t),Znr=i(gl),Py=n(gl,"P",{});var VQe=s(Py);esr=r(VQe,"This class cannot be instantiated directly using "),nbe=n(VQe,"CODE",{});var $wt=s(nbe);osr=r($wt,"__init__()"),$wt.forEach(t),rsr=r(VQe," (throws an error)."),VQe.forEach(t),tsr=i(gl),vt=n(gl,"DIV",{class:!0});var k6=s(vt);T(By.$$.fragment,k6),asr=i(k6),sbe=n(k6,"P",{});var kwt=s(sbe);nsr=r(kwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kwt.forEach(t),ssr=i(k6),Md=n(k6,"P",{});var rte=s(Md);lsr=r(rte,`Note:
Loading a model from its configuration file does `),lbe=n(rte,"STRONG",{});var Swt=s(lbe);isr=r(Swt,"not"),Swt.forEach(t),dsr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(rte,"A",{href:!0});var Rwt=s(pW);csr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),fsr=r(rte," to load the model weights."),rte.forEach(t),msr=i(k6),T(uT.$$.fragment,k6),k6.forEach(t),gsr=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(Iy.$$.fragment,va),hsr=i(va),ibe=n(va,"P",{});var Pwt=s(ibe);psr=r(Pwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pwt.forEach(t),_sr=i(va),Wa=n(va,"P",{});var S6=s(Wa);usr=r(S6,"The model class to instantiate is selected based on the "),dbe=n(S6,"CODE",{});var Bwt=s(dbe);bsr=r(Bwt,"model_type"),Bwt.forEach(t),vsr=r(S6,` property of the config object (either
passed as an argument or loaded from `),cbe=n(S6,"CODE",{});var Iwt=s(cbe);Fsr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),Tsr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(S6,"CODE",{});var Nwt=s(fbe);Msr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),Esr=r(S6,":"),S6.forEach(t),Csr=i(va),ve=n(va,"UL",{});var Te=s(ve);bT=n(Te,"LI",{});var VIe=s(bT);mbe=n(VIe,"STRONG",{});var qwt=s(mbe);wsr=r(qwt,"beit"),qwt.forEach(t),Asr=r(VIe," \u2014 "),_W=n(VIe,"A",{href:!0});var jwt=s(_W);Lsr=r(jwt,"BeitForImageClassification"),jwt.forEach(t),ysr=r(VIe," (BEiT model)"),VIe.forEach(t),xsr=i(Te),vT=n(Te,"LI",{});var XIe=s(vT);gbe=n(XIe,"STRONG",{});var Dwt=s(gbe);$sr=r(Dwt,"convnext"),Dwt.forEach(t),ksr=r(XIe," \u2014 "),uW=n(XIe,"A",{href:!0});var Gwt=s(uW);Ssr=r(Gwt,"ConvNextForImageClassification"),Gwt.forEach(t),Rsr=r(XIe," (ConvNeXT model)"),XIe.forEach(t),Psr=i(Te),FT=n(Te,"LI",{});var zIe=s(FT);hbe=n(zIe,"STRONG",{});var Owt=s(hbe);Bsr=r(Owt,"cvt"),Owt.forEach(t),Isr=r(zIe," \u2014 "),bW=n(zIe,"A",{href:!0});var Vwt=s(bW);Nsr=r(Vwt,"CvtForImageClassification"),Vwt.forEach(t),qsr=r(zIe," (CvT model)"),zIe.forEach(t),jsr=i(Te),TT=n(Te,"LI",{});var QIe=s(TT);pbe=n(QIe,"STRONG",{});var Xwt=s(pbe);Dsr=r(Xwt,"data2vec-vision"),Xwt.forEach(t),Gsr=r(QIe," \u2014 "),vW=n(QIe,"A",{href:!0});var zwt=s(vW);Osr=r(zwt,"Data2VecVisionForImageClassification"),zwt.forEach(t),Vsr=r(QIe," (Data2VecVision model)"),QIe.forEach(t),Xsr=i(Te),Hs=n(Te,"LI",{});var SS=s(Hs);_be=n(SS,"STRONG",{});var Qwt=s(_be);zsr=r(Qwt,"deit"),Qwt.forEach(t),Qsr=r(SS," \u2014 "),FW=n(SS,"A",{href:!0});var Wwt=s(FW);Wsr=r(Wwt,"DeiTForImageClassification"),Wwt.forEach(t),Hsr=r(SS," or "),TW=n(SS,"A",{href:!0});var Hwt=s(TW);Usr=r(Hwt,"DeiTForImageClassificationWithTeacher"),Hwt.forEach(t),Jsr=r(SS," (DeiT model)"),SS.forEach(t),Ysr=i(Te),MT=n(Te,"LI",{});var WIe=s(MT);ube=n(WIe,"STRONG",{});var Uwt=s(ube);Ksr=r(Uwt,"imagegpt"),Uwt.forEach(t),Zsr=r(WIe," \u2014 "),MW=n(WIe,"A",{href:!0});var Jwt=s(MW);elr=r(Jwt,"ImageGPTForImageClassification"),Jwt.forEach(t),olr=r(WIe," (ImageGPT model)"),WIe.forEach(t),rlr=i(Te),Us=n(Te,"LI",{});var RS=s(Us);bbe=n(RS,"STRONG",{});var Ywt=s(bbe);tlr=r(Ywt,"levit"),Ywt.forEach(t),alr=r(RS," \u2014 "),EW=n(RS,"A",{href:!0});var Kwt=s(EW);nlr=r(Kwt,"LevitForImageClassification"),Kwt.forEach(t),slr=r(RS," or "),CW=n(RS,"A",{href:!0});var Zwt=s(CW);llr=r(Zwt,"LevitForImageClassificationWithTeacher"),Zwt.forEach(t),ilr=r(RS," (LeViT model)"),RS.forEach(t),dlr=i(Te),ET=n(Te,"LI",{});var HIe=s(ET);vbe=n(HIe,"STRONG",{});var eAt=s(vbe);clr=r(eAt,"mobilevit"),eAt.forEach(t),flr=r(HIe," \u2014 "),wW=n(HIe,"A",{href:!0});var oAt=s(wW);mlr=r(oAt,"MobileViTForImageClassification"),oAt.forEach(t),glr=r(HIe," (MobileViT model)"),HIe.forEach(t),hlr=i(Te),Ft=n(Te,"LI",{});var Rf=s(Ft);Fbe=n(Rf,"STRONG",{});var rAt=s(Fbe);plr=r(rAt,"perceiver"),rAt.forEach(t),_lr=r(Rf," \u2014 "),AW=n(Rf,"A",{href:!0});var tAt=s(AW);ulr=r(tAt,"PerceiverForImageClassificationLearned"),tAt.forEach(t),blr=r(Rf," or "),LW=n(Rf,"A",{href:!0});var aAt=s(LW);vlr=r(aAt,"PerceiverForImageClassificationFourier"),aAt.forEach(t),Flr=r(Rf," or "),yW=n(Rf,"A",{href:!0});var nAt=s(yW);Tlr=r(nAt,"PerceiverForImageClassificationConvProcessing"),nAt.forEach(t),Mlr=r(Rf," (Perceiver model)"),Rf.forEach(t),Elr=i(Te),CT=n(Te,"LI",{});var UIe=s(CT);Tbe=n(UIe,"STRONG",{});var sAt=s(Tbe);Clr=r(sAt,"poolformer"),sAt.forEach(t),wlr=r(UIe," \u2014 "),xW=n(UIe,"A",{href:!0});var lAt=s(xW);Alr=r(lAt,"PoolFormerForImageClassification"),lAt.forEach(t),Llr=r(UIe," (PoolFormer model)"),UIe.forEach(t),ylr=i(Te),wT=n(Te,"LI",{});var JIe=s(wT);Mbe=n(JIe,"STRONG",{});var iAt=s(Mbe);xlr=r(iAt,"regnet"),iAt.forEach(t),$lr=r(JIe," \u2014 "),$W=n(JIe,"A",{href:!0});var dAt=s($W);klr=r(dAt,"RegNetForImageClassification"),dAt.forEach(t),Slr=r(JIe," (RegNet model)"),JIe.forEach(t),Rlr=i(Te),AT=n(Te,"LI",{});var YIe=s(AT);Ebe=n(YIe,"STRONG",{});var cAt=s(Ebe);Plr=r(cAt,"resnet"),cAt.forEach(t),Blr=r(YIe," \u2014 "),kW=n(YIe,"A",{href:!0});var fAt=s(kW);Ilr=r(fAt,"ResNetForImageClassification"),fAt.forEach(t),Nlr=r(YIe," (ResNet model)"),YIe.forEach(t),qlr=i(Te),LT=n(Te,"LI",{});var KIe=s(LT);Cbe=n(KIe,"STRONG",{});var mAt=s(Cbe);jlr=r(mAt,"segformer"),mAt.forEach(t),Dlr=r(KIe," \u2014 "),SW=n(KIe,"A",{href:!0});var gAt=s(SW);Glr=r(gAt,"SegformerForImageClassification"),gAt.forEach(t),Olr=r(KIe," (SegFormer model)"),KIe.forEach(t),Vlr=i(Te),yT=n(Te,"LI",{});var ZIe=s(yT);wbe=n(ZIe,"STRONG",{});var hAt=s(wbe);Xlr=r(hAt,"swin"),hAt.forEach(t),zlr=r(ZIe," \u2014 "),RW=n(ZIe,"A",{href:!0});var pAt=s(RW);Qlr=r(pAt,"SwinForImageClassification"),pAt.forEach(t),Wlr=r(ZIe," (Swin Transformer model)"),ZIe.forEach(t),Hlr=i(Te),xT=n(Te,"LI",{});var eNe=s(xT);Abe=n(eNe,"STRONG",{});var _At=s(Abe);Ulr=r(_At,"van"),_At.forEach(t),Jlr=r(eNe," \u2014 "),PW=n(eNe,"A",{href:!0});var uAt=s(PW);Ylr=r(uAt,"VanForImageClassification"),uAt.forEach(t),Klr=r(eNe," (VAN model)"),eNe.forEach(t),Zlr=i(Te),$T=n(Te,"LI",{});var oNe=s($T);Lbe=n(oNe,"STRONG",{});var bAt=s(Lbe);eir=r(bAt,"vit"),bAt.forEach(t),oir=r(oNe," \u2014 "),BW=n(oNe,"A",{href:!0});var vAt=s(BW);rir=r(vAt,"ViTForImageClassification"),vAt.forEach(t),tir=r(oNe," (ViT model)"),oNe.forEach(t),Te.forEach(t),air=i(va),kT=n(va,"P",{});var rNe=s(kT);nir=r(rNe,"The model is set in evaluation mode by default using "),ybe=n(rNe,"CODE",{});var FAt=s(ybe);sir=r(FAt,"model.eval()"),FAt.forEach(t),lir=r(rNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=n(rNe,"CODE",{});var TAt=s(xbe);iir=r(TAt,"model.train()"),TAt.forEach(t),rNe.forEach(t),dir=i(va),T(ST.$$.fragment,va),va.forEach(t),gl.forEach(t),qXe=i(f),Ed=n(f,"H2",{class:!0});var XQe=s(Ed);RT=n(XQe,"A",{id:!0,class:!0,href:!0});var MAt=s(RT);$be=n(MAt,"SPAN",{});var EAt=s($be);T(Ny.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),cir=i(XQe),kbe=n(XQe,"SPAN",{});var CAt=s(kbe);fir=r(CAt,"AutoModelForVision2Seq"),CAt.forEach(t),XQe.forEach(t),jXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(qy.$$.fragment,hl),mir=i(hl),Cd=n(hl,"P",{});var tte=s(Cd);gir=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IW=n(tte,"A",{href:!0});var wAt=s(IW);hir=r(wAt,"from_pretrained()"),wAt.forEach(t),pir=r(tte," class method or the "),NW=n(tte,"A",{href:!0});var AAt=s(NW);_ir=r(AAt,"from_config()"),AAt.forEach(t),uir=r(tte,` class
method.`),tte.forEach(t),bir=i(hl),jy=n(hl,"P",{});var zQe=s(jy);vir=r(zQe,"This class cannot be instantiated directly using "),Sbe=n(zQe,"CODE",{});var LAt=s(Sbe);Fir=r(LAt,"__init__()"),LAt.forEach(t),Tir=r(zQe," (throws an error)."),zQe.forEach(t),Mir=i(hl),Tt=n(hl,"DIV",{class:!0});var R6=s(Tt);T(Dy.$$.fragment,R6),Eir=i(R6),Rbe=n(R6,"P",{});var yAt=s(Rbe);Cir=r(yAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yAt.forEach(t),wir=i(R6),wd=n(R6,"P",{});var ate=s(wd);Air=r(ate,`Note:
Loading a model from its configuration file does `),Pbe=n(ate,"STRONG",{});var xAt=s(Pbe);Lir=r(xAt,"not"),xAt.forEach(t),yir=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(ate,"A",{href:!0});var $At=s(qW);xir=r($At,"from_pretrained()"),$At.forEach(t),$ir=r(ate," to load the model weights."),ate.forEach(t),kir=i(R6),T(PT.$$.fragment,R6),R6.forEach(t),Sir=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Gy.$$.fragment,Fa),Rir=i(Fa),Bbe=n(Fa,"P",{});var kAt=s(Bbe);Pir=r(kAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kAt.forEach(t),Bir=i(Fa),Ha=n(Fa,"P",{});var P6=s(Ha);Iir=r(P6,"The model class to instantiate is selected based on the "),Ibe=n(P6,"CODE",{});var SAt=s(Ibe);Nir=r(SAt,"model_type"),SAt.forEach(t),qir=r(P6,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(P6,"CODE",{});var RAt=s(Nbe);jir=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),Dir=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(P6,"CODE",{});var PAt=s(qbe);Gir=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),Oir=r(P6,":"),P6.forEach(t),Vir=i(Fa),jbe=n(Fa,"UL",{});var BAt=s(jbe);BT=n(BAt,"LI",{});var tNe=s(BT);Dbe=n(tNe,"STRONG",{});var IAt=s(Dbe);Xir=r(IAt,"vision-encoder-decoder"),IAt.forEach(t),zir=r(tNe," \u2014 "),jW=n(tNe,"A",{href:!0});var NAt=s(jW);Qir=r(NAt,"VisionEncoderDecoderModel"),NAt.forEach(t),Wir=r(tNe," (Vision Encoder decoder model)"),tNe.forEach(t),BAt.forEach(t),Hir=i(Fa),IT=n(Fa,"P",{});var aNe=s(IT);Uir=r(aNe,"The model is set in evaluation mode by default using "),Gbe=n(aNe,"CODE",{});var qAt=s(Gbe);Jir=r(qAt,"model.eval()"),qAt.forEach(t),Yir=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=n(aNe,"CODE",{});var jAt=s(Obe);Kir=r(jAt,"model.train()"),jAt.forEach(t),aNe.forEach(t),Zir=i(Fa),T(NT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),DXe=i(f),Ad=n(f,"H2",{class:!0});var QQe=s(Ad);qT=n(QQe,"A",{id:!0,class:!0,href:!0});var DAt=s(qT);Vbe=n(DAt,"SPAN",{});var GAt=s(Vbe);T(Oy.$$.fragment,GAt),GAt.forEach(t),DAt.forEach(t),edr=i(QQe),Xbe=n(QQe,"SPAN",{});var OAt=s(Xbe);odr=r(OAt,"AutoModelForVisualQuestionAnswering"),OAt.forEach(t),QQe.forEach(t),GXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Vy.$$.fragment,pl),rdr=i(pl),Ld=n(pl,"P",{});var nte=s(Ld);tdr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),DW=n(nte,"A",{href:!0});var VAt=s(DW);adr=r(VAt,"from_pretrained()"),VAt.forEach(t),ndr=r(nte," class method or the "),GW=n(nte,"A",{href:!0});var XAt=s(GW);sdr=r(XAt,"from_config()"),XAt.forEach(t),ldr=r(nte,` class
method.`),nte.forEach(t),idr=i(pl),Xy=n(pl,"P",{});var WQe=s(Xy);ddr=r(WQe,"This class cannot be instantiated directly using "),zbe=n(WQe,"CODE",{});var zAt=s(zbe);cdr=r(zAt,"__init__()"),zAt.forEach(t),fdr=r(WQe," (throws an error)."),WQe.forEach(t),mdr=i(pl),Mt=n(pl,"DIV",{class:!0});var B6=s(Mt);T(zy.$$.fragment,B6),gdr=i(B6),Qbe=n(B6,"P",{});var QAt=s(Qbe);hdr=r(QAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),QAt.forEach(t),pdr=i(B6),yd=n(B6,"P",{});var ste=s(yd);_dr=r(ste,`Note:
Loading a model from its configuration file does `),Wbe=n(ste,"STRONG",{});var WAt=s(Wbe);udr=r(WAt,"not"),WAt.forEach(t),bdr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(ste,"A",{href:!0});var HAt=s(OW);vdr=r(HAt,"from_pretrained()"),HAt.forEach(t),Fdr=r(ste," to load the model weights."),ste.forEach(t),Tdr=i(B6),T(jT.$$.fragment,B6),B6.forEach(t),Mdr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Qy.$$.fragment,Ta),Edr=i(Ta),Hbe=n(Ta,"P",{});var UAt=s(Hbe);Cdr=r(UAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),UAt.forEach(t),wdr=i(Ta),Ua=n(Ta,"P",{});var I6=s(Ua);Adr=r(I6,"The model class to instantiate is selected based on the "),Ube=n(I6,"CODE",{});var JAt=s(Ube);Ldr=r(JAt,"model_type"),JAt.forEach(t),ydr=r(I6,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(I6,"CODE",{});var YAt=s(Jbe);xdr=r(YAt,"pretrained_model_name_or_path"),YAt.forEach(t),$dr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(I6,"CODE",{});var KAt=s(Ybe);kdr=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),Sdr=r(I6,":"),I6.forEach(t),Rdr=i(Ta),Kbe=n(Ta,"UL",{});var ZAt=s(Kbe);DT=n(ZAt,"LI",{});var nNe=s(DT);Zbe=n(nNe,"STRONG",{});var e6t=s(Zbe);Pdr=r(e6t,"vilt"),e6t.forEach(t),Bdr=r(nNe," \u2014 "),VW=n(nNe,"A",{href:!0});var o6t=s(VW);Idr=r(o6t,"ViltForQuestionAnswering"),o6t.forEach(t),Ndr=r(nNe," (ViLT model)"),nNe.forEach(t),ZAt.forEach(t),qdr=i(Ta),GT=n(Ta,"P",{});var sNe=s(GT);jdr=r(sNe,"The model is set in evaluation mode by default using "),e3e=n(sNe,"CODE",{});var r6t=s(e3e);Ddr=r(r6t,"model.eval()"),r6t.forEach(t),Gdr=r(sNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=n(sNe,"CODE",{});var t6t=s(o3e);Odr=r(t6t,"model.train()"),t6t.forEach(t),sNe.forEach(t),Vdr=i(Ta),T(OT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),OXe=i(f),xd=n(f,"H2",{class:!0});var HQe=s(xd);VT=n(HQe,"A",{id:!0,class:!0,href:!0});var a6t=s(VT);r3e=n(a6t,"SPAN",{});var n6t=s(r3e);T(Wy.$$.fragment,n6t),n6t.forEach(t),a6t.forEach(t),Xdr=i(HQe),t3e=n(HQe,"SPAN",{});var s6t=s(t3e);zdr=r(s6t,"AutoModelForAudioClassification"),s6t.forEach(t),HQe.forEach(t),VXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Hy.$$.fragment,_l),Qdr=i(_l),$d=n(_l,"P",{});var lte=s($d);Wdr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XW=n(lte,"A",{href:!0});var l6t=s(XW);Hdr=r(l6t,"from_pretrained()"),l6t.forEach(t),Udr=r(lte," class method or the "),zW=n(lte,"A",{href:!0});var i6t=s(zW);Jdr=r(i6t,"from_config()"),i6t.forEach(t),Ydr=r(lte,` class
method.`),lte.forEach(t),Kdr=i(_l),Uy=n(_l,"P",{});var UQe=s(Uy);Zdr=r(UQe,"This class cannot be instantiated directly using "),a3e=n(UQe,"CODE",{});var d6t=s(a3e);ecr=r(d6t,"__init__()"),d6t.forEach(t),ocr=r(UQe," (throws an error)."),UQe.forEach(t),rcr=i(_l),Et=n(_l,"DIV",{class:!0});var N6=s(Et);T(Jy.$$.fragment,N6),tcr=i(N6),n3e=n(N6,"P",{});var c6t=s(n3e);acr=r(c6t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),c6t.forEach(t),ncr=i(N6),kd=n(N6,"P",{});var ite=s(kd);scr=r(ite,`Note:
Loading a model from its configuration file does `),s3e=n(ite,"STRONG",{});var f6t=s(s3e);lcr=r(f6t,"not"),f6t.forEach(t),icr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(ite,"A",{href:!0});var m6t=s(QW);dcr=r(m6t,"from_pretrained()"),m6t.forEach(t),ccr=r(ite," to load the model weights."),ite.forEach(t),fcr=i(N6),T(XT.$$.fragment,N6),N6.forEach(t),mcr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(Yy.$$.fragment,Ma),gcr=i(Ma),l3e=n(Ma,"P",{});var g6t=s(l3e);hcr=r(g6t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),g6t.forEach(t),pcr=i(Ma),Ja=n(Ma,"P",{});var q6=s(Ja);_cr=r(q6,"The model class to instantiate is selected based on the "),i3e=n(q6,"CODE",{});var h6t=s(i3e);ucr=r(h6t,"model_type"),h6t.forEach(t),bcr=r(q6,` property of the config object (either
passed as an argument or loaded from `),d3e=n(q6,"CODE",{});var p6t=s(d3e);vcr=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),Fcr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(q6,"CODE",{});var _6t=s(c3e);Tcr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),Mcr=r(q6,":"),q6.forEach(t),Ecr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);zT=n(ze,"LI",{});var lNe=s(zT);f3e=n(lNe,"STRONG",{});var u6t=s(f3e);Ccr=r(u6t,"data2vec-audio"),u6t.forEach(t),wcr=r(lNe," \u2014 "),WW=n(lNe,"A",{href:!0});var b6t=s(WW);Acr=r(b6t,"Data2VecAudioForSequenceClassification"),b6t.forEach(t),Lcr=r(lNe," (Data2VecAudio model)"),lNe.forEach(t),ycr=i(ze),QT=n(ze,"LI",{});var iNe=s(QT);m3e=n(iNe,"STRONG",{});var v6t=s(m3e);xcr=r(v6t,"hubert"),v6t.forEach(t),$cr=r(iNe," \u2014 "),HW=n(iNe,"A",{href:!0});var F6t=s(HW);kcr=r(F6t,"HubertForSequenceClassification"),F6t.forEach(t),Scr=r(iNe," (Hubert model)"),iNe.forEach(t),Rcr=i(ze),WT=n(ze,"LI",{});var dNe=s(WT);g3e=n(dNe,"STRONG",{});var T6t=s(g3e);Pcr=r(T6t,"sew"),T6t.forEach(t),Bcr=r(dNe," \u2014 "),UW=n(dNe,"A",{href:!0});var M6t=s(UW);Icr=r(M6t,"SEWForSequenceClassification"),M6t.forEach(t),Ncr=r(dNe," (SEW model)"),dNe.forEach(t),qcr=i(ze),HT=n(ze,"LI",{});var cNe=s(HT);h3e=n(cNe,"STRONG",{});var E6t=s(h3e);jcr=r(E6t,"sew-d"),E6t.forEach(t),Dcr=r(cNe," \u2014 "),JW=n(cNe,"A",{href:!0});var C6t=s(JW);Gcr=r(C6t,"SEWDForSequenceClassification"),C6t.forEach(t),Ocr=r(cNe," (SEW-D model)"),cNe.forEach(t),Vcr=i(ze),UT=n(ze,"LI",{});var fNe=s(UT);p3e=n(fNe,"STRONG",{});var w6t=s(p3e);Xcr=r(w6t,"unispeech"),w6t.forEach(t),zcr=r(fNe," \u2014 "),YW=n(fNe,"A",{href:!0});var A6t=s(YW);Qcr=r(A6t,"UniSpeechForSequenceClassification"),A6t.forEach(t),Wcr=r(fNe," (UniSpeech model)"),fNe.forEach(t),Hcr=i(ze),JT=n(ze,"LI",{});var mNe=s(JT);_3e=n(mNe,"STRONG",{});var L6t=s(_3e);Ucr=r(L6t,"unispeech-sat"),L6t.forEach(t),Jcr=r(mNe," \u2014 "),KW=n(mNe,"A",{href:!0});var y6t=s(KW);Ycr=r(y6t,"UniSpeechSatForSequenceClassification"),y6t.forEach(t),Kcr=r(mNe," (UniSpeechSat model)"),mNe.forEach(t),Zcr=i(ze),YT=n(ze,"LI",{});var gNe=s(YT);u3e=n(gNe,"STRONG",{});var x6t=s(u3e);efr=r(x6t,"wav2vec2"),x6t.forEach(t),ofr=r(gNe," \u2014 "),ZW=n(gNe,"A",{href:!0});var $6t=s(ZW);rfr=r($6t,"Wav2Vec2ForSequenceClassification"),$6t.forEach(t),tfr=r(gNe," (Wav2Vec2 model)"),gNe.forEach(t),afr=i(ze),KT=n(ze,"LI",{});var hNe=s(KT);b3e=n(hNe,"STRONG",{});var k6t=s(b3e);nfr=r(k6t,"wav2vec2-conformer"),k6t.forEach(t),sfr=r(hNe," \u2014 "),eH=n(hNe,"A",{href:!0});var S6t=s(eH);lfr=r(S6t,"Wav2Vec2ConformerForSequenceClassification"),S6t.forEach(t),ifr=r(hNe," (Wav2Vec2-Conformer model)"),hNe.forEach(t),dfr=i(ze),ZT=n(ze,"LI",{});var pNe=s(ZT);v3e=n(pNe,"STRONG",{});var R6t=s(v3e);cfr=r(R6t,"wavlm"),R6t.forEach(t),ffr=r(pNe," \u2014 "),oH=n(pNe,"A",{href:!0});var P6t=s(oH);mfr=r(P6t,"WavLMForSequenceClassification"),P6t.forEach(t),gfr=r(pNe," (WavLM model)"),pNe.forEach(t),ze.forEach(t),hfr=i(Ma),e8=n(Ma,"P",{});var _Ne=s(e8);pfr=r(_Ne,"The model is set in evaluation mode by default using "),F3e=n(_Ne,"CODE",{});var B6t=s(F3e);_fr=r(B6t,"model.eval()"),B6t.forEach(t),ufr=r(_Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T3e=n(_Ne,"CODE",{});var I6t=s(T3e);bfr=r(I6t,"model.train()"),I6t.forEach(t),_Ne.forEach(t),vfr=i(Ma),T(o8.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),XXe=i(f),Sd=n(f,"H2",{class:!0});var JQe=s(Sd);r8=n(JQe,"A",{id:!0,class:!0,href:!0});var N6t=s(r8);M3e=n(N6t,"SPAN",{});var q6t=s(M3e);T(Ky.$$.fragment,q6t),q6t.forEach(t),N6t.forEach(t),Ffr=i(JQe),E3e=n(JQe,"SPAN",{});var j6t=s(E3e);Tfr=r(j6t,"AutoModelForAudioFrameClassification"),j6t.forEach(t),JQe.forEach(t),zXe=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(Zy.$$.fragment,ul),Mfr=i(ul),Rd=n(ul,"P",{});var dte=s(Rd);Efr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rH=n(dte,"A",{href:!0});var D6t=s(rH);Cfr=r(D6t,"from_pretrained()"),D6t.forEach(t),wfr=r(dte," class method or the "),tH=n(dte,"A",{href:!0});var G6t=s(tH);Afr=r(G6t,"from_config()"),G6t.forEach(t),Lfr=r(dte,` class
method.`),dte.forEach(t),yfr=i(ul),e9=n(ul,"P",{});var YQe=s(e9);xfr=r(YQe,"This class cannot be instantiated directly using "),C3e=n(YQe,"CODE",{});var O6t=s(C3e);$fr=r(O6t,"__init__()"),O6t.forEach(t),kfr=r(YQe," (throws an error)."),YQe.forEach(t),Sfr=i(ul),Ct=n(ul,"DIV",{class:!0});var j6=s(Ct);T(o9.$$.fragment,j6),Rfr=i(j6),w3e=n(j6,"P",{});var V6t=s(w3e);Pfr=r(V6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),V6t.forEach(t),Bfr=i(j6),Pd=n(j6,"P",{});var cte=s(Pd);Ifr=r(cte,`Note:
Loading a model from its configuration file does `),A3e=n(cte,"STRONG",{});var X6t=s(A3e);Nfr=r(X6t,"not"),X6t.forEach(t),qfr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(cte,"A",{href:!0});var z6t=s(aH);jfr=r(z6t,"from_pretrained()"),z6t.forEach(t),Dfr=r(cte," to load the model weights."),cte.forEach(t),Gfr=i(j6),T(t8.$$.fragment,j6),j6.forEach(t),Ofr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(r9.$$.fragment,Ea),Vfr=i(Ea),L3e=n(Ea,"P",{});var Q6t=s(L3e);Xfr=r(Q6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Q6t.forEach(t),zfr=i(Ea),Ya=n(Ea,"P",{});var D6=s(Ya);Qfr=r(D6,"The model class to instantiate is selected based on the "),y3e=n(D6,"CODE",{});var W6t=s(y3e);Wfr=r(W6t,"model_type"),W6t.forEach(t),Hfr=r(D6,` property of the config object (either
passed as an argument or loaded from `),x3e=n(D6,"CODE",{});var H6t=s(x3e);Ufr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),Jfr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(D6,"CODE",{});var U6t=s($3e);Yfr=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),Kfr=r(D6,":"),D6.forEach(t),Zfr=i(Ea),rt=n(Ea,"UL",{});var bl=s(rt);a8=n(bl,"LI",{});var uNe=s(a8);k3e=n(uNe,"STRONG",{});var J6t=s(k3e);emr=r(J6t,"data2vec-audio"),J6t.forEach(t),omr=r(uNe," \u2014 "),nH=n(uNe,"A",{href:!0});var Y6t=s(nH);rmr=r(Y6t,"Data2VecAudioForAudioFrameClassification"),Y6t.forEach(t),tmr=r(uNe," (Data2VecAudio model)"),uNe.forEach(t),amr=i(bl),n8=n(bl,"LI",{});var bNe=s(n8);S3e=n(bNe,"STRONG",{});var K6t=s(S3e);nmr=r(K6t,"unispeech-sat"),K6t.forEach(t),smr=r(bNe," \u2014 "),sH=n(bNe,"A",{href:!0});var Z6t=s(sH);lmr=r(Z6t,"UniSpeechSatForAudioFrameClassification"),Z6t.forEach(t),imr=r(bNe," (UniSpeechSat model)"),bNe.forEach(t),dmr=i(bl),s8=n(bl,"LI",{});var vNe=s(s8);R3e=n(vNe,"STRONG",{});var e7t=s(R3e);cmr=r(e7t,"wav2vec2"),e7t.forEach(t),fmr=r(vNe," \u2014 "),lH=n(vNe,"A",{href:!0});var o7t=s(lH);mmr=r(o7t,"Wav2Vec2ForAudioFrameClassification"),o7t.forEach(t),gmr=r(vNe," (Wav2Vec2 model)"),vNe.forEach(t),hmr=i(bl),l8=n(bl,"LI",{});var FNe=s(l8);P3e=n(FNe,"STRONG",{});var r7t=s(P3e);pmr=r(r7t,"wav2vec2-conformer"),r7t.forEach(t),_mr=r(FNe," \u2014 "),iH=n(FNe,"A",{href:!0});var t7t=s(iH);umr=r(t7t,"Wav2Vec2ConformerForAudioFrameClassification"),t7t.forEach(t),bmr=r(FNe," (Wav2Vec2-Conformer model)"),FNe.forEach(t),vmr=i(bl),i8=n(bl,"LI",{});var TNe=s(i8);B3e=n(TNe,"STRONG",{});var a7t=s(B3e);Fmr=r(a7t,"wavlm"),a7t.forEach(t),Tmr=r(TNe," \u2014 "),dH=n(TNe,"A",{href:!0});var n7t=s(dH);Mmr=r(n7t,"WavLMForAudioFrameClassification"),n7t.forEach(t),Emr=r(TNe," (WavLM model)"),TNe.forEach(t),bl.forEach(t),Cmr=i(Ea),d8=n(Ea,"P",{});var MNe=s(d8);wmr=r(MNe,"The model is set in evaluation mode by default using "),I3e=n(MNe,"CODE",{});var s7t=s(I3e);Amr=r(s7t,"model.eval()"),s7t.forEach(t),Lmr=r(MNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N3e=n(MNe,"CODE",{});var l7t=s(N3e);ymr=r(l7t,"model.train()"),l7t.forEach(t),MNe.forEach(t),xmr=i(Ea),T(c8.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),QXe=i(f),Bd=n(f,"H2",{class:!0});var KQe=s(Bd);f8=n(KQe,"A",{id:!0,class:!0,href:!0});var i7t=s(f8);q3e=n(i7t,"SPAN",{});var d7t=s(q3e);T(t9.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),$mr=i(KQe),j3e=n(KQe,"SPAN",{});var c7t=s(j3e);kmr=r(c7t,"AutoModelForCTC"),c7t.forEach(t),KQe.forEach(t),WXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(a9.$$.fragment,vl),Smr=i(vl),Id=n(vl,"P",{});var fte=s(Id);Rmr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cH=n(fte,"A",{href:!0});var f7t=s(cH);Pmr=r(f7t,"from_pretrained()"),f7t.forEach(t),Bmr=r(fte," class method or the "),fH=n(fte,"A",{href:!0});var m7t=s(fH);Imr=r(m7t,"from_config()"),m7t.forEach(t),Nmr=r(fte,` class
method.`),fte.forEach(t),qmr=i(vl),n9=n(vl,"P",{});var ZQe=s(n9);jmr=r(ZQe,"This class cannot be instantiated directly using "),D3e=n(ZQe,"CODE",{});var g7t=s(D3e);Dmr=r(g7t,"__init__()"),g7t.forEach(t),Gmr=r(ZQe," (throws an error)."),ZQe.forEach(t),Omr=i(vl),wt=n(vl,"DIV",{class:!0});var G6=s(wt);T(s9.$$.fragment,G6),Vmr=i(G6),G3e=n(G6,"P",{});var h7t=s(G3e);Xmr=r(h7t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),h7t.forEach(t),zmr=i(G6),Nd=n(G6,"P",{});var mte=s(Nd);Qmr=r(mte,`Note:
Loading a model from its configuration file does `),O3e=n(mte,"STRONG",{});var p7t=s(O3e);Wmr=r(p7t,"not"),p7t.forEach(t),Hmr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(mte,"A",{href:!0});var _7t=s(mH);Umr=r(_7t,"from_pretrained()"),_7t.forEach(t),Jmr=r(mte," to load the model weights."),mte.forEach(t),Ymr=i(G6),T(m8.$$.fragment,G6),G6.forEach(t),Kmr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(l9.$$.fragment,Ca),Zmr=i(Ca),V3e=n(Ca,"P",{});var u7t=s(V3e);egr=r(u7t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),u7t.forEach(t),ogr=i(Ca),Ka=n(Ca,"P",{});var O6=s(Ka);rgr=r(O6,"The model class to instantiate is selected based on the "),X3e=n(O6,"CODE",{});var b7t=s(X3e);tgr=r(b7t,"model_type"),b7t.forEach(t),agr=r(O6,` property of the config object (either
passed as an argument or loaded from `),z3e=n(O6,"CODE",{});var v7t=s(z3e);ngr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),sgr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=n(O6,"CODE",{});var F7t=s(Q3e);lgr=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),igr=r(O6,":"),O6.forEach(t),dgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);g8=n(Be,"LI",{});var ENe=s(g8);W3e=n(ENe,"STRONG",{});var T7t=s(W3e);cgr=r(T7t,"data2vec-audio"),T7t.forEach(t),fgr=r(ENe," \u2014 "),gH=n(ENe,"A",{href:!0});var M7t=s(gH);mgr=r(M7t,"Data2VecAudioForCTC"),M7t.forEach(t),ggr=r(ENe," (Data2VecAudio model)"),ENe.forEach(t),hgr=i(Be),h8=n(Be,"LI",{});var CNe=s(h8);H3e=n(CNe,"STRONG",{});var E7t=s(H3e);pgr=r(E7t,"hubert"),E7t.forEach(t),_gr=r(CNe," \u2014 "),hH=n(CNe,"A",{href:!0});var C7t=s(hH);ugr=r(C7t,"HubertForCTC"),C7t.forEach(t),bgr=r(CNe," (Hubert model)"),CNe.forEach(t),vgr=i(Be),p8=n(Be,"LI",{});var wNe=s(p8);U3e=n(wNe,"STRONG",{});var w7t=s(U3e);Fgr=r(w7t,"mctct"),w7t.forEach(t),Tgr=r(wNe," \u2014 "),pH=n(wNe,"A",{href:!0});var A7t=s(pH);Mgr=r(A7t,"MCTCTForCTC"),A7t.forEach(t),Egr=r(wNe," (M-CTC-T model)"),wNe.forEach(t),Cgr=i(Be),_8=n(Be,"LI",{});var ANe=s(_8);J3e=n(ANe,"STRONG",{});var L7t=s(J3e);wgr=r(L7t,"sew"),L7t.forEach(t),Agr=r(ANe," \u2014 "),_H=n(ANe,"A",{href:!0});var y7t=s(_H);Lgr=r(y7t,"SEWForCTC"),y7t.forEach(t),ygr=r(ANe," (SEW model)"),ANe.forEach(t),xgr=i(Be),u8=n(Be,"LI",{});var LNe=s(u8);Y3e=n(LNe,"STRONG",{});var x7t=s(Y3e);$gr=r(x7t,"sew-d"),x7t.forEach(t),kgr=r(LNe," \u2014 "),uH=n(LNe,"A",{href:!0});var $7t=s(uH);Sgr=r($7t,"SEWDForCTC"),$7t.forEach(t),Rgr=r(LNe," (SEW-D model)"),LNe.forEach(t),Pgr=i(Be),b8=n(Be,"LI",{});var yNe=s(b8);K3e=n(yNe,"STRONG",{});var k7t=s(K3e);Bgr=r(k7t,"unispeech"),k7t.forEach(t),Igr=r(yNe," \u2014 "),bH=n(yNe,"A",{href:!0});var S7t=s(bH);Ngr=r(S7t,"UniSpeechForCTC"),S7t.forEach(t),qgr=r(yNe," (UniSpeech model)"),yNe.forEach(t),jgr=i(Be),v8=n(Be,"LI",{});var xNe=s(v8);Z3e=n(xNe,"STRONG",{});var R7t=s(Z3e);Dgr=r(R7t,"unispeech-sat"),R7t.forEach(t),Ggr=r(xNe," \u2014 "),vH=n(xNe,"A",{href:!0});var P7t=s(vH);Ogr=r(P7t,"UniSpeechSatForCTC"),P7t.forEach(t),Vgr=r(xNe," (UniSpeechSat model)"),xNe.forEach(t),Xgr=i(Be),F8=n(Be,"LI",{});var $Ne=s(F8);eve=n($Ne,"STRONG",{});var B7t=s(eve);zgr=r(B7t,"wav2vec2"),B7t.forEach(t),Qgr=r($Ne," \u2014 "),FH=n($Ne,"A",{href:!0});var I7t=s(FH);Wgr=r(I7t,"Wav2Vec2ForCTC"),I7t.forEach(t),Hgr=r($Ne," (Wav2Vec2 model)"),$Ne.forEach(t),Ugr=i(Be),T8=n(Be,"LI",{});var kNe=s(T8);ove=n(kNe,"STRONG",{});var N7t=s(ove);Jgr=r(N7t,"wav2vec2-conformer"),N7t.forEach(t),Ygr=r(kNe," \u2014 "),TH=n(kNe,"A",{href:!0});var q7t=s(TH);Kgr=r(q7t,"Wav2Vec2ConformerForCTC"),q7t.forEach(t),Zgr=r(kNe," (Wav2Vec2-Conformer model)"),kNe.forEach(t),ehr=i(Be),M8=n(Be,"LI",{});var SNe=s(M8);rve=n(SNe,"STRONG",{});var j7t=s(rve);ohr=r(j7t,"wavlm"),j7t.forEach(t),rhr=r(SNe," \u2014 "),MH=n(SNe,"A",{href:!0});var D7t=s(MH);thr=r(D7t,"WavLMForCTC"),D7t.forEach(t),ahr=r(SNe," (WavLM model)"),SNe.forEach(t),Be.forEach(t),nhr=i(Ca),E8=n(Ca,"P",{});var RNe=s(E8);shr=r(RNe,"The model is set in evaluation mode by default using "),tve=n(RNe,"CODE",{});var G7t=s(tve);lhr=r(G7t,"model.eval()"),G7t.forEach(t),ihr=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ave=n(RNe,"CODE",{});var O7t=s(ave);dhr=r(O7t,"model.train()"),O7t.forEach(t),RNe.forEach(t),chr=i(Ca),T(C8.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),HXe=i(f),qd=n(f,"H2",{class:!0});var eWe=s(qd);w8=n(eWe,"A",{id:!0,class:!0,href:!0});var V7t=s(w8);nve=n(V7t,"SPAN",{});var X7t=s(nve);T(i9.$$.fragment,X7t),X7t.forEach(t),V7t.forEach(t),fhr=i(eWe),sve=n(eWe,"SPAN",{});var z7t=s(sve);mhr=r(z7t,"AutoModelForSpeechSeq2Seq"),z7t.forEach(t),eWe.forEach(t),UXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(d9.$$.fragment,Fl),ghr=i(Fl),jd=n(Fl,"P",{});var gte=s(jd);hhr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=n(gte,"A",{href:!0});var Q7t=s(EH);phr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),_hr=r(gte," class method or the "),CH=n(gte,"A",{href:!0});var W7t=s(CH);uhr=r(W7t,"from_config()"),W7t.forEach(t),bhr=r(gte,` class
method.`),gte.forEach(t),vhr=i(Fl),c9=n(Fl,"P",{});var oWe=s(c9);Fhr=r(oWe,"This class cannot be instantiated directly using "),lve=n(oWe,"CODE",{});var H7t=s(lve);Thr=r(H7t,"__init__()"),H7t.forEach(t),Mhr=r(oWe," (throws an error)."),oWe.forEach(t),Ehr=i(Fl),At=n(Fl,"DIV",{class:!0});var V6=s(At);T(f9.$$.fragment,V6),Chr=i(V6),ive=n(V6,"P",{});var U7t=s(ive);whr=r(U7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),U7t.forEach(t),Ahr=i(V6),Dd=n(V6,"P",{});var hte=s(Dd);Lhr=r(hte,`Note:
Loading a model from its configuration file does `),dve=n(hte,"STRONG",{});var J7t=s(dve);yhr=r(J7t,"not"),J7t.forEach(t),xhr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(hte,"A",{href:!0});var Y7t=s(wH);$hr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),khr=r(hte," to load the model weights."),hte.forEach(t),Shr=i(V6),T(A8.$$.fragment,V6),V6.forEach(t),Rhr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(m9.$$.fragment,wa),Phr=i(wa),cve=n(wa,"P",{});var K7t=s(cve);Bhr=r(K7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),K7t.forEach(t),Ihr=i(wa),Za=n(wa,"P",{});var X6=s(Za);Nhr=r(X6,"The model class to instantiate is selected based on the "),fve=n(X6,"CODE",{});var Z7t=s(fve);qhr=r(Z7t,"model_type"),Z7t.forEach(t),jhr=r(X6,` property of the config object (either
passed as an argument or loaded from `),mve=n(X6,"CODE",{});var eLt=s(mve);Dhr=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),Ghr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(X6,"CODE",{});var oLt=s(gve);Ohr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),Vhr=r(X6,":"),X6.forEach(t),Xhr=i(wa),g9=n(wa,"UL",{});var rWe=s(g9);L8=n(rWe,"LI",{});var PNe=s(L8);hve=n(PNe,"STRONG",{});var rLt=s(hve);zhr=r(rLt,"speech-encoder-decoder"),rLt.forEach(t),Qhr=r(PNe," \u2014 "),AH=n(PNe,"A",{href:!0});var tLt=s(AH);Whr=r(tLt,"SpeechEncoderDecoderModel"),tLt.forEach(t),Hhr=r(PNe," (Speech Encoder decoder model)"),PNe.forEach(t),Uhr=i(rWe),y8=n(rWe,"LI",{});var BNe=s(y8);pve=n(BNe,"STRONG",{});var aLt=s(pve);Jhr=r(aLt,"speech_to_text"),aLt.forEach(t),Yhr=r(BNe," \u2014 "),LH=n(BNe,"A",{href:!0});var nLt=s(LH);Khr=r(nLt,"Speech2TextForConditionalGeneration"),nLt.forEach(t),Zhr=r(BNe," (Speech2Text model)"),BNe.forEach(t),rWe.forEach(t),epr=i(wa),x8=n(wa,"P",{});var INe=s(x8);opr=r(INe,"The model is set in evaluation mode by default using "),_ve=n(INe,"CODE",{});var sLt=s(_ve);rpr=r(sLt,"model.eval()"),sLt.forEach(t),tpr=r(INe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uve=n(INe,"CODE",{});var lLt=s(uve);apr=r(lLt,"model.train()"),lLt.forEach(t),INe.forEach(t),npr=i(wa),T($8.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),JXe=i(f),Gd=n(f,"H2",{class:!0});var tWe=s(Gd);k8=n(tWe,"A",{id:!0,class:!0,href:!0});var iLt=s(k8);bve=n(iLt,"SPAN",{});var dLt=s(bve);T(h9.$$.fragment,dLt),dLt.forEach(t),iLt.forEach(t),spr=i(tWe),vve=n(tWe,"SPAN",{});var cLt=s(vve);lpr=r(cLt,"AutoModelForAudioXVector"),cLt.forEach(t),tWe.forEach(t),YXe=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(p9.$$.fragment,Tl),ipr=i(Tl),Od=n(Tl,"P",{});var pte=s(Od);dpr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yH=n(pte,"A",{href:!0});var fLt=s(yH);cpr=r(fLt,"from_pretrained()"),fLt.forEach(t),fpr=r(pte," class method or the "),xH=n(pte,"A",{href:!0});var mLt=s(xH);mpr=r(mLt,"from_config()"),mLt.forEach(t),gpr=r(pte,` class
method.`),pte.forEach(t),hpr=i(Tl),_9=n(Tl,"P",{});var aWe=s(_9);ppr=r(aWe,"This class cannot be instantiated directly using "),Fve=n(aWe,"CODE",{});var gLt=s(Fve);_pr=r(gLt,"__init__()"),gLt.forEach(t),upr=r(aWe," (throws an error)."),aWe.forEach(t),bpr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var z6=s(Lt);T(u9.$$.fragment,z6),vpr=i(z6),Tve=n(z6,"P",{});var hLt=s(Tve);Fpr=r(hLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),hLt.forEach(t),Tpr=i(z6),Vd=n(z6,"P",{});var _te=s(Vd);Mpr=r(_te,`Note:
Loading a model from its configuration file does `),Mve=n(_te,"STRONG",{});var pLt=s(Mve);Epr=r(pLt,"not"),pLt.forEach(t),Cpr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(_te,"A",{href:!0});var _Lt=s($H);wpr=r(_Lt,"from_pretrained()"),_Lt.forEach(t),Apr=r(_te," to load the model weights."),_te.forEach(t),Lpr=i(z6),T(S8.$$.fragment,z6),z6.forEach(t),ypr=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(b9.$$.fragment,Aa),xpr=i(Aa),Eve=n(Aa,"P",{});var uLt=s(Eve);$pr=r(uLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uLt.forEach(t),kpr=i(Aa),en=n(Aa,"P",{});var Q6=s(en);Spr=r(Q6,"The model class to instantiate is selected based on the "),Cve=n(Q6,"CODE",{});var bLt=s(Cve);Rpr=r(bLt,"model_type"),bLt.forEach(t),Ppr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),wve=n(Q6,"CODE",{});var vLt=s(wve);Bpr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),Ipr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(Q6,"CODE",{});var FLt=s(Ave);Npr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),qpr=r(Q6,":"),Q6.forEach(t),jpr=i(Aa),tt=n(Aa,"UL",{});var Ml=s(tt);R8=n(Ml,"LI",{});var NNe=s(R8);Lve=n(NNe,"STRONG",{});var TLt=s(Lve);Dpr=r(TLt,"data2vec-audio"),TLt.forEach(t),Gpr=r(NNe," \u2014 "),kH=n(NNe,"A",{href:!0});var MLt=s(kH);Opr=r(MLt,"Data2VecAudioForXVector"),MLt.forEach(t),Vpr=r(NNe," (Data2VecAudio model)"),NNe.forEach(t),Xpr=i(Ml),P8=n(Ml,"LI",{});var qNe=s(P8);yve=n(qNe,"STRONG",{});var ELt=s(yve);zpr=r(ELt,"unispeech-sat"),ELt.forEach(t),Qpr=r(qNe," \u2014 "),SH=n(qNe,"A",{href:!0});var CLt=s(SH);Wpr=r(CLt,"UniSpeechSatForXVector"),CLt.forEach(t),Hpr=r(qNe," (UniSpeechSat model)"),qNe.forEach(t),Upr=i(Ml),B8=n(Ml,"LI",{});var jNe=s(B8);xve=n(jNe,"STRONG",{});var wLt=s(xve);Jpr=r(wLt,"wav2vec2"),wLt.forEach(t),Ypr=r(jNe," \u2014 "),RH=n(jNe,"A",{href:!0});var ALt=s(RH);Kpr=r(ALt,"Wav2Vec2ForXVector"),ALt.forEach(t),Zpr=r(jNe," (Wav2Vec2 model)"),jNe.forEach(t),e_r=i(Ml),I8=n(Ml,"LI",{});var DNe=s(I8);$ve=n(DNe,"STRONG",{});var LLt=s($ve);o_r=r(LLt,"wav2vec2-conformer"),LLt.forEach(t),r_r=r(DNe," \u2014 "),PH=n(DNe,"A",{href:!0});var yLt=s(PH);t_r=r(yLt,"Wav2Vec2ConformerForXVector"),yLt.forEach(t),a_r=r(DNe," (Wav2Vec2-Conformer model)"),DNe.forEach(t),n_r=i(Ml),N8=n(Ml,"LI",{});var GNe=s(N8);kve=n(GNe,"STRONG",{});var xLt=s(kve);s_r=r(xLt,"wavlm"),xLt.forEach(t),l_r=r(GNe," \u2014 "),BH=n(GNe,"A",{href:!0});var $Lt=s(BH);i_r=r($Lt,"WavLMForXVector"),$Lt.forEach(t),d_r=r(GNe," (WavLM model)"),GNe.forEach(t),Ml.forEach(t),c_r=i(Aa),q8=n(Aa,"P",{});var ONe=s(q8);f_r=r(ONe,"The model is set in evaluation mode by default using "),Sve=n(ONe,"CODE",{});var kLt=s(Sve);m_r=r(kLt,"model.eval()"),kLt.forEach(t),g_r=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rve=n(ONe,"CODE",{});var SLt=s(Rve);h_r=r(SLt,"model.train()"),SLt.forEach(t),ONe.forEach(t),p_r=i(Aa),T(j8.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),KXe=i(f),Xd=n(f,"H2",{class:!0});var nWe=s(Xd);D8=n(nWe,"A",{id:!0,class:!0,href:!0});var RLt=s(D8);Pve=n(RLt,"SPAN",{});var PLt=s(Pve);T(v9.$$.fragment,PLt),PLt.forEach(t),RLt.forEach(t),__r=i(nWe),Bve=n(nWe,"SPAN",{});var BLt=s(Bve);u_r=r(BLt,"AutoModelForMaskedImageModeling"),BLt.forEach(t),nWe.forEach(t),ZXe=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(F9.$$.fragment,El),b_r=i(El),zd=n(El,"P",{});var ute=s(zd);v_r=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),IH=n(ute,"A",{href:!0});var ILt=s(IH);F_r=r(ILt,"from_pretrained()"),ILt.forEach(t),T_r=r(ute," class method or the "),NH=n(ute,"A",{href:!0});var NLt=s(NH);M_r=r(NLt,"from_config()"),NLt.forEach(t),E_r=r(ute,` class
method.`),ute.forEach(t),C_r=i(El),T9=n(El,"P",{});var sWe=s(T9);w_r=r(sWe,"This class cannot be instantiated directly using "),Ive=n(sWe,"CODE",{});var qLt=s(Ive);A_r=r(qLt,"__init__()"),qLt.forEach(t),L_r=r(sWe," (throws an error)."),sWe.forEach(t),y_r=i(El),yt=n(El,"DIV",{class:!0});var W6=s(yt);T(M9.$$.fragment,W6),x_r=i(W6),Nve=n(W6,"P",{});var jLt=s(Nve);$_r=r(jLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),jLt.forEach(t),k_r=i(W6),Qd=n(W6,"P",{});var bte=s(Qd);S_r=r(bte,`Note:
Loading a model from its configuration file does `),qve=n(bte,"STRONG",{});var DLt=s(qve);R_r=r(DLt,"not"),DLt.forEach(t),P_r=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(bte,"A",{href:!0});var GLt=s(qH);B_r=r(GLt,"from_pretrained()"),GLt.forEach(t),I_r=r(bte," to load the model weights."),bte.forEach(t),N_r=i(W6),T(G8.$$.fragment,W6),W6.forEach(t),q_r=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(E9.$$.fragment,La),j_r=i(La),jve=n(La,"P",{});var OLt=s(jve);D_r=r(OLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),OLt.forEach(t),G_r=i(La),on=n(La,"P",{});var H6=s(on);O_r=r(H6,"The model class to instantiate is selected based on the "),Dve=n(H6,"CODE",{});var VLt=s(Dve);V_r=r(VLt,"model_type"),VLt.forEach(t),X_r=r(H6,` property of the config object (either
passed as an argument or loaded from `),Gve=n(H6,"CODE",{});var XLt=s(Gve);z_r=r(XLt,"pretrained_model_name_or_path"),XLt.forEach(t),Q_r=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(H6,"CODE",{});var zLt=s(Ove);W_r=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),H_r=r(H6,":"),H6.forEach(t),U_r=i(La),Wd=n(La,"UL",{});var vte=s(Wd);O8=n(vte,"LI",{});var VNe=s(O8);Vve=n(VNe,"STRONG",{});var QLt=s(Vve);J_r=r(QLt,"deit"),QLt.forEach(t),Y_r=r(VNe," \u2014 "),jH=n(VNe,"A",{href:!0});var WLt=s(jH);K_r=r(WLt,"DeiTForMaskedImageModeling"),WLt.forEach(t),Z_r=r(VNe," (DeiT model)"),VNe.forEach(t),eur=i(vte),V8=n(vte,"LI",{});var XNe=s(V8);Xve=n(XNe,"STRONG",{});var HLt=s(Xve);our=r(HLt,"swin"),HLt.forEach(t),rur=r(XNe," \u2014 "),DH=n(XNe,"A",{href:!0});var ULt=s(DH);tur=r(ULt,"SwinForMaskedImageModeling"),ULt.forEach(t),aur=r(XNe," (Swin Transformer model)"),XNe.forEach(t),nur=i(vte),X8=n(vte,"LI",{});var zNe=s(X8);zve=n(zNe,"STRONG",{});var JLt=s(zve);sur=r(JLt,"vit"),JLt.forEach(t),lur=r(zNe," \u2014 "),GH=n(zNe,"A",{href:!0});var YLt=s(GH);iur=r(YLt,"ViTForMaskedImageModeling"),YLt.forEach(t),dur=r(zNe," (ViT model)"),zNe.forEach(t),vte.forEach(t),cur=i(La),z8=n(La,"P",{});var QNe=s(z8);fur=r(QNe,"The model is set in evaluation mode by default using "),Qve=n(QNe,"CODE",{});var KLt=s(Qve);mur=r(KLt,"model.eval()"),KLt.forEach(t),gur=r(QNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wve=n(QNe,"CODE",{});var ZLt=s(Wve);hur=r(ZLt,"model.train()"),ZLt.forEach(t),QNe.forEach(t),pur=i(La),T(Q8.$$.fragment,La),La.forEach(t),El.forEach(t),eze=i(f),Hd=n(f,"H2",{class:!0});var lWe=s(Hd);W8=n(lWe,"A",{id:!0,class:!0,href:!0});var eyt=s(W8);Hve=n(eyt,"SPAN",{});var oyt=s(Hve);T(C9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),_ur=i(lWe),Uve=n(lWe,"SPAN",{});var ryt=s(Uve);uur=r(ryt,"AutoModelForObjectDetection"),ryt.forEach(t),lWe.forEach(t),oze=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(w9.$$.fragment,Cl),bur=i(Cl),Ud=n(Cl,"P",{});var Fte=s(Ud);vur=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),OH=n(Fte,"A",{href:!0});var tyt=s(OH);Fur=r(tyt,"from_pretrained()"),tyt.forEach(t),Tur=r(Fte," class method or the "),VH=n(Fte,"A",{href:!0});var ayt=s(VH);Mur=r(ayt,"from_config()"),ayt.forEach(t),Eur=r(Fte,` class
method.`),Fte.forEach(t),Cur=i(Cl),A9=n(Cl,"P",{});var iWe=s(A9);wur=r(iWe,"This class cannot be instantiated directly using "),Jve=n(iWe,"CODE",{});var nyt=s(Jve);Aur=r(nyt,"__init__()"),nyt.forEach(t),Lur=r(iWe," (throws an error)."),iWe.forEach(t),yur=i(Cl),xt=n(Cl,"DIV",{class:!0});var U6=s(xt);T(L9.$$.fragment,U6),xur=i(U6),Yve=n(U6,"P",{});var syt=s(Yve);$ur=r(syt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),syt.forEach(t),kur=i(U6),Jd=n(U6,"P",{});var Tte=s(Jd);Sur=r(Tte,`Note:
Loading a model from its configuration file does `),Kve=n(Tte,"STRONG",{});var lyt=s(Kve);Rur=r(lyt,"not"),lyt.forEach(t),Pur=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Tte,"A",{href:!0});var iyt=s(XH);Bur=r(iyt,"from_pretrained()"),iyt.forEach(t),Iur=r(Tte," to load the model weights."),Tte.forEach(t),Nur=i(U6),T(H8.$$.fragment,U6),U6.forEach(t),qur=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(y9.$$.fragment,ya),jur=i(ya),Zve=n(ya,"P",{});var dyt=s(Zve);Dur=r(dyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dyt.forEach(t),Gur=i(ya),rn=n(ya,"P",{});var J6=s(rn);Our=r(J6,"The model class to instantiate is selected based on the "),eFe=n(J6,"CODE",{});var cyt=s(eFe);Vur=r(cyt,"model_type"),cyt.forEach(t),Xur=r(J6,` property of the config object (either
passed as an argument or loaded from `),oFe=n(J6,"CODE",{});var fyt=s(oFe);zur=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),Qur=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(J6,"CODE",{});var myt=s(rFe);Wur=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),Hur=r(J6,":"),J6.forEach(t),Uur=i(ya),x9=n(ya,"UL",{});var dWe=s(x9);U8=n(dWe,"LI",{});var WNe=s(U8);tFe=n(WNe,"STRONG",{});var gyt=s(tFe);Jur=r(gyt,"detr"),gyt.forEach(t),Yur=r(WNe," \u2014 "),zH=n(WNe,"A",{href:!0});var hyt=s(zH);Kur=r(hyt,"DetrForObjectDetection"),hyt.forEach(t),Zur=r(WNe," (DETR model)"),WNe.forEach(t),e1r=i(dWe),J8=n(dWe,"LI",{});var HNe=s(J8);aFe=n(HNe,"STRONG",{});var pyt=s(aFe);o1r=r(pyt,"yolos"),pyt.forEach(t),r1r=r(HNe," \u2014 "),QH=n(HNe,"A",{href:!0});var _yt=s(QH);t1r=r(_yt,"YolosForObjectDetection"),_yt.forEach(t),a1r=r(HNe," (YOLOS model)"),HNe.forEach(t),dWe.forEach(t),n1r=i(ya),Y8=n(ya,"P",{});var UNe=s(Y8);s1r=r(UNe,"The model is set in evaluation mode by default using "),nFe=n(UNe,"CODE",{});var uyt=s(nFe);l1r=r(uyt,"model.eval()"),uyt.forEach(t),i1r=r(UNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=n(UNe,"CODE",{});var byt=s(sFe);d1r=r(byt,"model.train()"),byt.forEach(t),UNe.forEach(t),c1r=i(ya),T(K8.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),rze=i(f),Yd=n(f,"H2",{class:!0});var cWe=s(Yd);Z8=n(cWe,"A",{id:!0,class:!0,href:!0});var vyt=s(Z8);lFe=n(vyt,"SPAN",{});var Fyt=s(lFe);T($9.$$.fragment,Fyt),Fyt.forEach(t),vyt.forEach(t),f1r=i(cWe),iFe=n(cWe,"SPAN",{});var Tyt=s(iFe);m1r=r(Tyt,"AutoModelForImageSegmentation"),Tyt.forEach(t),cWe.forEach(t),tze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(k9.$$.fragment,wl),g1r=i(wl),Kd=n(wl,"P",{});var Mte=s(Kd);h1r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),WH=n(Mte,"A",{href:!0});var Myt=s(WH);p1r=r(Myt,"from_pretrained()"),Myt.forEach(t),_1r=r(Mte," class method or the "),HH=n(Mte,"A",{href:!0});var Eyt=s(HH);u1r=r(Eyt,"from_config()"),Eyt.forEach(t),b1r=r(Mte,` class
method.`),Mte.forEach(t),v1r=i(wl),S9=n(wl,"P",{});var fWe=s(S9);F1r=r(fWe,"This class cannot be instantiated directly using "),dFe=n(fWe,"CODE",{});var Cyt=s(dFe);T1r=r(Cyt,"__init__()"),Cyt.forEach(t),M1r=r(fWe," (throws an error)."),fWe.forEach(t),E1r=i(wl),$t=n(wl,"DIV",{class:!0});var Y6=s($t);T(R9.$$.fragment,Y6),C1r=i(Y6),cFe=n(Y6,"P",{});var wyt=s(cFe);w1r=r(wyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),wyt.forEach(t),A1r=i(Y6),Zd=n(Y6,"P",{});var Ete=s(Zd);L1r=r(Ete,`Note:
Loading a model from its configuration file does `),fFe=n(Ete,"STRONG",{});var Ayt=s(fFe);y1r=r(Ayt,"not"),Ayt.forEach(t),x1r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(Ete,"A",{href:!0});var Lyt=s(UH);$1r=r(Lyt,"from_pretrained()"),Lyt.forEach(t),k1r=r(Ete," to load the model weights."),Ete.forEach(t),S1r=i(Y6),T(eM.$$.fragment,Y6),Y6.forEach(t),R1r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(P9.$$.fragment,xa),P1r=i(xa),mFe=n(xa,"P",{});var yyt=s(mFe);B1r=r(yyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),yyt.forEach(t),I1r=i(xa),tn=n(xa,"P",{});var K6=s(tn);N1r=r(K6,"The model class to instantiate is selected based on the "),gFe=n(K6,"CODE",{});var xyt=s(gFe);q1r=r(xyt,"model_type"),xyt.forEach(t),j1r=r(K6,` property of the config object (either
passed as an argument or loaded from `),hFe=n(K6,"CODE",{});var $yt=s(hFe);D1r=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),G1r=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(K6,"CODE",{});var kyt=s(pFe);O1r=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),V1r=r(K6,":"),K6.forEach(t),X1r=i(xa),_Fe=n(xa,"UL",{});var Syt=s(_Fe);oM=n(Syt,"LI",{});var JNe=s(oM);uFe=n(JNe,"STRONG",{});var Ryt=s(uFe);z1r=r(Ryt,"detr"),Ryt.forEach(t),Q1r=r(JNe," \u2014 "),JH=n(JNe,"A",{href:!0});var Pyt=s(JH);W1r=r(Pyt,"DetrForSegmentation"),Pyt.forEach(t),H1r=r(JNe," (DETR model)"),JNe.forEach(t),Syt.forEach(t),U1r=i(xa),rM=n(xa,"P",{});var YNe=s(rM);J1r=r(YNe,"The model is set in evaluation mode by default using "),bFe=n(YNe,"CODE",{});var Byt=s(bFe);Y1r=r(Byt,"model.eval()"),Byt.forEach(t),K1r=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=n(YNe,"CODE",{});var Iyt=s(vFe);Z1r=r(Iyt,"model.train()"),Iyt.forEach(t),YNe.forEach(t),e2r=i(xa),T(tM.$$.fragment,xa),xa.forEach(t),wl.forEach(t),aze=i(f),ec=n(f,"H2",{class:!0});var mWe=s(ec);aM=n(mWe,"A",{id:!0,class:!0,href:!0});var Nyt=s(aM);FFe=n(Nyt,"SPAN",{});var qyt=s(FFe);T(B9.$$.fragment,qyt),qyt.forEach(t),Nyt.forEach(t),o2r=i(mWe),TFe=n(mWe,"SPAN",{});var jyt=s(TFe);r2r=r(jyt,"AutoModelForSemanticSegmentation"),jyt.forEach(t),mWe.forEach(t),nze=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(I9.$$.fragment,Al),t2r=i(Al),oc=n(Al,"P",{});var Cte=s(oc);a2r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),YH=n(Cte,"A",{href:!0});var Dyt=s(YH);n2r=r(Dyt,"from_pretrained()"),Dyt.forEach(t),s2r=r(Cte," class method or the "),KH=n(Cte,"A",{href:!0});var Gyt=s(KH);l2r=r(Gyt,"from_config()"),Gyt.forEach(t),i2r=r(Cte,` class
method.`),Cte.forEach(t),d2r=i(Al),N9=n(Al,"P",{});var gWe=s(N9);c2r=r(gWe,"This class cannot be instantiated directly using "),MFe=n(gWe,"CODE",{});var Oyt=s(MFe);f2r=r(Oyt,"__init__()"),Oyt.forEach(t),m2r=r(gWe," (throws an error)."),gWe.forEach(t),g2r=i(Al),kt=n(Al,"DIV",{class:!0});var Z6=s(kt);T(q9.$$.fragment,Z6),h2r=i(Z6),EFe=n(Z6,"P",{});var Vyt=s(EFe);p2r=r(Vyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Vyt.forEach(t),_2r=i(Z6),rc=n(Z6,"P",{});var wte=s(rc);u2r=r(wte,`Note:
Loading a model from its configuration file does `),CFe=n(wte,"STRONG",{});var Xyt=s(CFe);b2r=r(Xyt,"not"),Xyt.forEach(t),v2r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(wte,"A",{href:!0});var zyt=s(ZH);F2r=r(zyt,"from_pretrained()"),zyt.forEach(t),T2r=r(wte," to load the model weights."),wte.forEach(t),M2r=i(Z6),T(nM.$$.fragment,Z6),Z6.forEach(t),E2r=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(j9.$$.fragment,$a),C2r=i($a),wFe=n($a,"P",{});var Qyt=s(wFe);w2r=r(Qyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qyt.forEach(t),A2r=i($a),an=n($a,"P",{});var e7=s(an);L2r=r(e7,"The model class to instantiate is selected based on the "),AFe=n(e7,"CODE",{});var Wyt=s(AFe);y2r=r(Wyt,"model_type"),Wyt.forEach(t),x2r=r(e7,` property of the config object (either
passed as an argument or loaded from `),LFe=n(e7,"CODE",{});var Hyt=s(LFe);$2r=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),k2r=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(e7,"CODE",{});var Uyt=s(yFe);S2r=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),R2r=r(e7,":"),e7.forEach(t),P2r=i($a),at=n($a,"UL",{});var Ll=s(at);sM=n(Ll,"LI",{});var KNe=s(sM);xFe=n(KNe,"STRONG",{});var Jyt=s(xFe);B2r=r(Jyt,"beit"),Jyt.forEach(t),I2r=r(KNe," \u2014 "),eU=n(KNe,"A",{href:!0});var Yyt=s(eU);N2r=r(Yyt,"BeitForSemanticSegmentation"),Yyt.forEach(t),q2r=r(KNe," (BEiT model)"),KNe.forEach(t),j2r=i(Ll),lM=n(Ll,"LI",{});var ZNe=s(lM);$Fe=n(ZNe,"STRONG",{});var Kyt=s($Fe);D2r=r(Kyt,"data2vec-vision"),Kyt.forEach(t),G2r=r(ZNe," \u2014 "),oU=n(ZNe,"A",{href:!0});var Zyt=s(oU);O2r=r(Zyt,"Data2VecVisionForSemanticSegmentation"),Zyt.forEach(t),V2r=r(ZNe," (Data2VecVision model)"),ZNe.forEach(t),X2r=i(Ll),iM=n(Ll,"LI",{});var eqe=s(iM);kFe=n(eqe,"STRONG",{});var e9t=s(kFe);z2r=r(e9t,"dpt"),e9t.forEach(t),Q2r=r(eqe," \u2014 "),rU=n(eqe,"A",{href:!0});var o9t=s(rU);W2r=r(o9t,"DPTForSemanticSegmentation"),o9t.forEach(t),H2r=r(eqe," (DPT model)"),eqe.forEach(t),U2r=i(Ll),dM=n(Ll,"LI",{});var oqe=s(dM);SFe=n(oqe,"STRONG",{});var r9t=s(SFe);J2r=r(r9t,"mobilevit"),r9t.forEach(t),Y2r=r(oqe," \u2014 "),tU=n(oqe,"A",{href:!0});var t9t=s(tU);K2r=r(t9t,"MobileViTForSemanticSegmentation"),t9t.forEach(t),Z2r=r(oqe," (MobileViT model)"),oqe.forEach(t),ebr=i(Ll),cM=n(Ll,"LI",{});var rqe=s(cM);RFe=n(rqe,"STRONG",{});var a9t=s(RFe);obr=r(a9t,"segformer"),a9t.forEach(t),rbr=r(rqe," \u2014 "),aU=n(rqe,"A",{href:!0});var n9t=s(aU);tbr=r(n9t,"SegformerForSemanticSegmentation"),n9t.forEach(t),abr=r(rqe," (SegFormer model)"),rqe.forEach(t),Ll.forEach(t),nbr=i($a),fM=n($a,"P",{});var tqe=s(fM);sbr=r(tqe,"The model is set in evaluation mode by default using "),PFe=n(tqe,"CODE",{});var s9t=s(PFe);lbr=r(s9t,"model.eval()"),s9t.forEach(t),ibr=r(tqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BFe=n(tqe,"CODE",{});var l9t=s(BFe);dbr=r(l9t,"model.train()"),l9t.forEach(t),tqe.forEach(t),cbr=i($a),T(mM.$$.fragment,$a),$a.forEach(t),Al.forEach(t),sze=i(f),tc=n(f,"H2",{class:!0});var hWe=s(tc);gM=n(hWe,"A",{id:!0,class:!0,href:!0});var i9t=s(gM);IFe=n(i9t,"SPAN",{});var d9t=s(IFe);T(D9.$$.fragment,d9t),d9t.forEach(t),i9t.forEach(t),fbr=i(hWe),NFe=n(hWe,"SPAN",{});var c9t=s(NFe);mbr=r(c9t,"AutoModelForInstanceSegmentation"),c9t.forEach(t),hWe.forEach(t),lze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(G9.$$.fragment,yl),gbr=i(yl),ac=n(yl,"P",{});var Ate=s(ac);hbr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nU=n(Ate,"A",{href:!0});var f9t=s(nU);pbr=r(f9t,"from_pretrained()"),f9t.forEach(t),_br=r(Ate," class method or the "),sU=n(Ate,"A",{href:!0});var m9t=s(sU);ubr=r(m9t,"from_config()"),m9t.forEach(t),bbr=r(Ate,` class
method.`),Ate.forEach(t),vbr=i(yl),O9=n(yl,"P",{});var pWe=s(O9);Fbr=r(pWe,"This class cannot be instantiated directly using "),qFe=n(pWe,"CODE",{});var g9t=s(qFe);Tbr=r(g9t,"__init__()"),g9t.forEach(t),Mbr=r(pWe," (throws an error)."),pWe.forEach(t),Ebr=i(yl),St=n(yl,"DIV",{class:!0});var o7=s(St);T(V9.$$.fragment,o7),Cbr=i(o7),jFe=n(o7,"P",{});var h9t=s(jFe);wbr=r(h9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),h9t.forEach(t),Abr=i(o7),nc=n(o7,"P",{});var Lte=s(nc);Lbr=r(Lte,`Note:
Loading a model from its configuration file does `),DFe=n(Lte,"STRONG",{});var p9t=s(DFe);ybr=r(p9t,"not"),p9t.forEach(t),xbr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Lte,"A",{href:!0});var _9t=s(lU);$br=r(_9t,"from_pretrained()"),_9t.forEach(t),kbr=r(Lte," to load the model weights."),Lte.forEach(t),Sbr=i(o7),T(hM.$$.fragment,o7),o7.forEach(t),Rbr=i(yl),To=n(yl,"DIV",{class:!0});var ka=s(To);T(X9.$$.fragment,ka),Pbr=i(ka),GFe=n(ka,"P",{});var u9t=s(GFe);Bbr=r(u9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),u9t.forEach(t),Ibr=i(ka),nn=n(ka,"P",{});var r7=s(nn);Nbr=r(r7,"The model class to instantiate is selected based on the "),OFe=n(r7,"CODE",{});var b9t=s(OFe);qbr=r(b9t,"model_type"),b9t.forEach(t),jbr=r(r7,` property of the config object (either
passed as an argument or loaded from `),VFe=n(r7,"CODE",{});var v9t=s(VFe);Dbr=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),Gbr=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(r7,"CODE",{});var F9t=s(XFe);Obr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),Vbr=r(r7,":"),r7.forEach(t),Xbr=i(ka),zFe=n(ka,"UL",{});var T9t=s(zFe);pM=n(T9t,"LI",{});var aqe=s(pM);QFe=n(aqe,"STRONG",{});var M9t=s(QFe);zbr=r(M9t,"maskformer"),M9t.forEach(t),Qbr=r(aqe," \u2014 "),iU=n(aqe,"A",{href:!0});var E9t=s(iU);Wbr=r(E9t,"MaskFormerForInstanceSegmentation"),E9t.forEach(t),Hbr=r(aqe," (MaskFormer model)"),aqe.forEach(t),T9t.forEach(t),Ubr=i(ka),_M=n(ka,"P",{});var nqe=s(_M);Jbr=r(nqe,"The model is set in evaluation mode by default using "),WFe=n(nqe,"CODE",{});var C9t=s(WFe);Ybr=r(C9t,"model.eval()"),C9t.forEach(t),Kbr=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),HFe=n(nqe,"CODE",{});var w9t=s(HFe);Zbr=r(w9t,"model.train()"),w9t.forEach(t),nqe.forEach(t),e3r=i(ka),T(uM.$$.fragment,ka),ka.forEach(t),yl.forEach(t),ize=i(f),sc=n(f,"H2",{class:!0});var _We=s(sc);bM=n(_We,"A",{id:!0,class:!0,href:!0});var A9t=s(bM);UFe=n(A9t,"SPAN",{});var L9t=s(UFe);T(z9.$$.fragment,L9t),L9t.forEach(t),A9t.forEach(t),o3r=i(_We),JFe=n(_We,"SPAN",{});var y9t=s(JFe);r3r=r(y9t,"TFAutoModel"),y9t.forEach(t),_We.forEach(t),dze=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(Q9.$$.fragment,xl),t3r=i(xl),lc=n(xl,"P",{});var yte=s(lc);a3r=r(yte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=n(yte,"A",{href:!0});var x9t=s(dU);n3r=r(x9t,"from_pretrained()"),x9t.forEach(t),s3r=r(yte," class method or the "),cU=n(yte,"A",{href:!0});var $9t=s(cU);l3r=r($9t,"from_config()"),$9t.forEach(t),i3r=r(yte,` class
method.`),yte.forEach(t),d3r=i(xl),W9=n(xl,"P",{});var uWe=s(W9);c3r=r(uWe,"This class cannot be instantiated directly using "),YFe=n(uWe,"CODE",{});var k9t=s(YFe);f3r=r(k9t,"__init__()"),k9t.forEach(t),m3r=r(uWe," (throws an error)."),uWe.forEach(t),g3r=i(xl),Rt=n(xl,"DIV",{class:!0});var t7=s(Rt);T(H9.$$.fragment,t7),h3r=i(t7),KFe=n(t7,"P",{});var S9t=s(KFe);p3r=r(S9t,"Instantiates one of the base model classes of the library from a configuration."),S9t.forEach(t),_3r=i(t7),ic=n(t7,"P",{});var xte=s(ic);u3r=r(xte,`Note:
Loading a model from its configuration file does `),ZFe=n(xte,"STRONG",{});var R9t=s(ZFe);b3r=r(R9t,"not"),R9t.forEach(t),v3r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(xte,"A",{href:!0});var P9t=s(fU);F3r=r(P9t,"from_pretrained()"),P9t.forEach(t),T3r=r(xte," to load the model weights."),xte.forEach(t),M3r=i(t7),T(vM.$$.fragment,t7),t7.forEach(t),E3r=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(U9.$$.fragment,$l),C3r=i($l),eTe=n($l,"P",{});var B9t=s(eTe);w3r=r(B9t,"Instantiate one of the base model classes of the library from a pretrained model."),B9t.forEach(t),A3r=i($l),sn=n($l,"P",{});var a7=s(sn);L3r=r(a7,"The model class to instantiate is selected based on the "),oTe=n(a7,"CODE",{});var I9t=s(oTe);y3r=r(I9t,"model_type"),I9t.forEach(t),x3r=r(a7,` property of the config object (either
passed as an argument or loaded from `),rTe=n(a7,"CODE",{});var N9t=s(rTe);$3r=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),k3r=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(a7,"CODE",{});var q9t=s(tTe);S3r=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),R3r=r(a7,":"),a7.forEach(t),P3r=i($l),q=n($l,"UL",{});var D=s(q);FM=n(D,"LI",{});var sqe=s(FM);aTe=n(sqe,"STRONG",{});var j9t=s(aTe);B3r=r(j9t,"albert"),j9t.forEach(t),I3r=r(sqe," \u2014 "),mU=n(sqe,"A",{href:!0});var D9t=s(mU);N3r=r(D9t,"TFAlbertModel"),D9t.forEach(t),q3r=r(sqe," (ALBERT model)"),sqe.forEach(t),j3r=i(D),TM=n(D,"LI",{});var lqe=s(TM);nTe=n(lqe,"STRONG",{});var G9t=s(nTe);D3r=r(G9t,"bart"),G9t.forEach(t),G3r=r(lqe," \u2014 "),gU=n(lqe,"A",{href:!0});var O9t=s(gU);O3r=r(O9t,"TFBartModel"),O9t.forEach(t),V3r=r(lqe," (BART model)"),lqe.forEach(t),X3r=i(D),MM=n(D,"LI",{});var iqe=s(MM);sTe=n(iqe,"STRONG",{});var V9t=s(sTe);z3r=r(V9t,"bert"),V9t.forEach(t),Q3r=r(iqe," \u2014 "),hU=n(iqe,"A",{href:!0});var X9t=s(hU);W3r=r(X9t,"TFBertModel"),X9t.forEach(t),H3r=r(iqe," (BERT model)"),iqe.forEach(t),U3r=i(D),EM=n(D,"LI",{});var dqe=s(EM);lTe=n(dqe,"STRONG",{});var z9t=s(lTe);J3r=r(z9t,"blenderbot"),z9t.forEach(t),Y3r=r(dqe," \u2014 "),pU=n(dqe,"A",{href:!0});var Q9t=s(pU);K3r=r(Q9t,"TFBlenderbotModel"),Q9t.forEach(t),Z3r=r(dqe," (Blenderbot model)"),dqe.forEach(t),evr=i(D),CM=n(D,"LI",{});var cqe=s(CM);iTe=n(cqe,"STRONG",{});var W9t=s(iTe);ovr=r(W9t,"blenderbot-small"),W9t.forEach(t),rvr=r(cqe," \u2014 "),_U=n(cqe,"A",{href:!0});var H9t=s(_U);tvr=r(H9t,"TFBlenderbotSmallModel"),H9t.forEach(t),avr=r(cqe," (BlenderbotSmall model)"),cqe.forEach(t),nvr=i(D),wM=n(D,"LI",{});var fqe=s(wM);dTe=n(fqe,"STRONG",{});var U9t=s(dTe);svr=r(U9t,"camembert"),U9t.forEach(t),lvr=r(fqe," \u2014 "),uU=n(fqe,"A",{href:!0});var J9t=s(uU);ivr=r(J9t,"TFCamembertModel"),J9t.forEach(t),dvr=r(fqe," (CamemBERT model)"),fqe.forEach(t),cvr=i(D),AM=n(D,"LI",{});var mqe=s(AM);cTe=n(mqe,"STRONG",{});var Y9t=s(cTe);fvr=r(Y9t,"clip"),Y9t.forEach(t),mvr=r(mqe," \u2014 "),bU=n(mqe,"A",{href:!0});var K9t=s(bU);gvr=r(K9t,"TFCLIPModel"),K9t.forEach(t),hvr=r(mqe," (CLIP model)"),mqe.forEach(t),pvr=i(D),LM=n(D,"LI",{});var gqe=s(LM);fTe=n(gqe,"STRONG",{});var Z9t=s(fTe);_vr=r(Z9t,"convbert"),Z9t.forEach(t),uvr=r(gqe," \u2014 "),vU=n(gqe,"A",{href:!0});var ext=s(vU);bvr=r(ext,"TFConvBertModel"),ext.forEach(t),vvr=r(gqe," (ConvBERT model)"),gqe.forEach(t),Fvr=i(D),yM=n(D,"LI",{});var hqe=s(yM);mTe=n(hqe,"STRONG",{});var oxt=s(mTe);Tvr=r(oxt,"convnext"),oxt.forEach(t),Mvr=r(hqe," \u2014 "),FU=n(hqe,"A",{href:!0});var rxt=s(FU);Evr=r(rxt,"TFConvNextModel"),rxt.forEach(t),Cvr=r(hqe," (ConvNeXT model)"),hqe.forEach(t),wvr=i(D),xM=n(D,"LI",{});var pqe=s(xM);gTe=n(pqe,"STRONG",{});var txt=s(gTe);Avr=r(txt,"ctrl"),txt.forEach(t),Lvr=r(pqe," \u2014 "),TU=n(pqe,"A",{href:!0});var axt=s(TU);yvr=r(axt,"TFCTRLModel"),axt.forEach(t),xvr=r(pqe," (CTRL model)"),pqe.forEach(t),$vr=i(D),$M=n(D,"LI",{});var _qe=s($M);hTe=n(_qe,"STRONG",{});var nxt=s(hTe);kvr=r(nxt,"data2vec-vision"),nxt.forEach(t),Svr=r(_qe," \u2014 "),MU=n(_qe,"A",{href:!0});var sxt=s(MU);Rvr=r(sxt,"TFData2VecVisionModel"),sxt.forEach(t),Pvr=r(_qe," (Data2VecVision model)"),_qe.forEach(t),Bvr=i(D),kM=n(D,"LI",{});var uqe=s(kM);pTe=n(uqe,"STRONG",{});var lxt=s(pTe);Ivr=r(lxt,"deberta"),lxt.forEach(t),Nvr=r(uqe," \u2014 "),EU=n(uqe,"A",{href:!0});var ixt=s(EU);qvr=r(ixt,"TFDebertaModel"),ixt.forEach(t),jvr=r(uqe," (DeBERTa model)"),uqe.forEach(t),Dvr=i(D),SM=n(D,"LI",{});var bqe=s(SM);_Te=n(bqe,"STRONG",{});var dxt=s(_Te);Gvr=r(dxt,"deberta-v2"),dxt.forEach(t),Ovr=r(bqe," \u2014 "),CU=n(bqe,"A",{href:!0});var cxt=s(CU);Vvr=r(cxt,"TFDebertaV2Model"),cxt.forEach(t),Xvr=r(bqe," (DeBERTa-v2 model)"),bqe.forEach(t),zvr=i(D),RM=n(D,"LI",{});var vqe=s(RM);uTe=n(vqe,"STRONG",{});var fxt=s(uTe);Qvr=r(fxt,"deit"),fxt.forEach(t),Wvr=r(vqe," \u2014 "),wU=n(vqe,"A",{href:!0});var mxt=s(wU);Hvr=r(mxt,"TFDeiTModel"),mxt.forEach(t),Uvr=r(vqe," (DeiT model)"),vqe.forEach(t),Jvr=i(D),PM=n(D,"LI",{});var Fqe=s(PM);bTe=n(Fqe,"STRONG",{});var gxt=s(bTe);Yvr=r(gxt,"distilbert"),gxt.forEach(t),Kvr=r(Fqe," \u2014 "),AU=n(Fqe,"A",{href:!0});var hxt=s(AU);Zvr=r(hxt,"TFDistilBertModel"),hxt.forEach(t),eFr=r(Fqe," (DistilBERT model)"),Fqe.forEach(t),oFr=i(D),BM=n(D,"LI",{});var Tqe=s(BM);vTe=n(Tqe,"STRONG",{});var pxt=s(vTe);rFr=r(pxt,"dpr"),pxt.forEach(t),tFr=r(Tqe," \u2014 "),LU=n(Tqe,"A",{href:!0});var _xt=s(LU);aFr=r(_xt,"TFDPRQuestionEncoder"),_xt.forEach(t),nFr=r(Tqe," (DPR model)"),Tqe.forEach(t),sFr=i(D),IM=n(D,"LI",{});var Mqe=s(IM);FTe=n(Mqe,"STRONG",{});var uxt=s(FTe);lFr=r(uxt,"electra"),uxt.forEach(t),iFr=r(Mqe," \u2014 "),yU=n(Mqe,"A",{href:!0});var bxt=s(yU);dFr=r(bxt,"TFElectraModel"),bxt.forEach(t),cFr=r(Mqe," (ELECTRA model)"),Mqe.forEach(t),fFr=i(D),NM=n(D,"LI",{});var Eqe=s(NM);TTe=n(Eqe,"STRONG",{});var vxt=s(TTe);mFr=r(vxt,"flaubert"),vxt.forEach(t),gFr=r(Eqe," \u2014 "),xU=n(Eqe,"A",{href:!0});var Fxt=s(xU);hFr=r(Fxt,"TFFlaubertModel"),Fxt.forEach(t),pFr=r(Eqe," (FlauBERT model)"),Eqe.forEach(t),_Fr=i(D),Js=n(D,"LI",{});var PS=s(Js);MTe=n(PS,"STRONG",{});var Txt=s(MTe);uFr=r(Txt,"funnel"),Txt.forEach(t),bFr=r(PS," \u2014 "),$U=n(PS,"A",{href:!0});var Mxt=s($U);vFr=r(Mxt,"TFFunnelModel"),Mxt.forEach(t),FFr=r(PS," or "),kU=n(PS,"A",{href:!0});var Ext=s(kU);TFr=r(Ext,"TFFunnelBaseModel"),Ext.forEach(t),MFr=r(PS," (Funnel Transformer model)"),PS.forEach(t),EFr=i(D),qM=n(D,"LI",{});var Cqe=s(qM);ETe=n(Cqe,"STRONG",{});var Cxt=s(ETe);CFr=r(Cxt,"gpt2"),Cxt.forEach(t),wFr=r(Cqe," \u2014 "),SU=n(Cqe,"A",{href:!0});var wxt=s(SU);AFr=r(wxt,"TFGPT2Model"),wxt.forEach(t),LFr=r(Cqe," (OpenAI GPT-2 model)"),Cqe.forEach(t),yFr=i(D),jM=n(D,"LI",{});var wqe=s(jM);CTe=n(wqe,"STRONG",{});var Axt=s(CTe);xFr=r(Axt,"gptj"),Axt.forEach(t),$Fr=r(wqe," \u2014 "),RU=n(wqe,"A",{href:!0});var Lxt=s(RU);kFr=r(Lxt,"TFGPTJModel"),Lxt.forEach(t),SFr=r(wqe," (GPT-J model)"),wqe.forEach(t),RFr=i(D),DM=n(D,"LI",{});var Aqe=s(DM);wTe=n(Aqe,"STRONG",{});var yxt=s(wTe);PFr=r(yxt,"hubert"),yxt.forEach(t),BFr=r(Aqe," \u2014 "),PU=n(Aqe,"A",{href:!0});var xxt=s(PU);IFr=r(xxt,"TFHubertModel"),xxt.forEach(t),NFr=r(Aqe," (Hubert model)"),Aqe.forEach(t),qFr=i(D),GM=n(D,"LI",{});var Lqe=s(GM);ATe=n(Lqe,"STRONG",{});var $xt=s(ATe);jFr=r($xt,"layoutlm"),$xt.forEach(t),DFr=r(Lqe," \u2014 "),BU=n(Lqe,"A",{href:!0});var kxt=s(BU);GFr=r(kxt,"TFLayoutLMModel"),kxt.forEach(t),OFr=r(Lqe," (LayoutLM model)"),Lqe.forEach(t),VFr=i(D),OM=n(D,"LI",{});var yqe=s(OM);LTe=n(yqe,"STRONG",{});var Sxt=s(LTe);XFr=r(Sxt,"led"),Sxt.forEach(t),zFr=r(yqe," \u2014 "),IU=n(yqe,"A",{href:!0});var Rxt=s(IU);QFr=r(Rxt,"TFLEDModel"),Rxt.forEach(t),WFr=r(yqe," (LED model)"),yqe.forEach(t),HFr=i(D),VM=n(D,"LI",{});var xqe=s(VM);yTe=n(xqe,"STRONG",{});var Pxt=s(yTe);UFr=r(Pxt,"longformer"),Pxt.forEach(t),JFr=r(xqe," \u2014 "),NU=n(xqe,"A",{href:!0});var Bxt=s(NU);YFr=r(Bxt,"TFLongformerModel"),Bxt.forEach(t),KFr=r(xqe," (Longformer model)"),xqe.forEach(t),ZFr=i(D),XM=n(D,"LI",{});var $qe=s(XM);xTe=n($qe,"STRONG",{});var Ixt=s(xTe);eTr=r(Ixt,"lxmert"),Ixt.forEach(t),oTr=r($qe," \u2014 "),qU=n($qe,"A",{href:!0});var Nxt=s(qU);rTr=r(Nxt,"TFLxmertModel"),Nxt.forEach(t),tTr=r($qe," (LXMERT model)"),$qe.forEach(t),aTr=i(D),zM=n(D,"LI",{});var kqe=s(zM);$Te=n(kqe,"STRONG",{});var qxt=s($Te);nTr=r(qxt,"marian"),qxt.forEach(t),sTr=r(kqe," \u2014 "),jU=n(kqe,"A",{href:!0});var jxt=s(jU);lTr=r(jxt,"TFMarianModel"),jxt.forEach(t),iTr=r(kqe," (Marian model)"),kqe.forEach(t),dTr=i(D),QM=n(D,"LI",{});var Sqe=s(QM);kTe=n(Sqe,"STRONG",{});var Dxt=s(kTe);cTr=r(Dxt,"mbart"),Dxt.forEach(t),fTr=r(Sqe," \u2014 "),DU=n(Sqe,"A",{href:!0});var Gxt=s(DU);mTr=r(Gxt,"TFMBartModel"),Gxt.forEach(t),gTr=r(Sqe," (mBART model)"),Sqe.forEach(t),hTr=i(D),WM=n(D,"LI",{});var Rqe=s(WM);STe=n(Rqe,"STRONG",{});var Oxt=s(STe);pTr=r(Oxt,"mobilebert"),Oxt.forEach(t),_Tr=r(Rqe," \u2014 "),GU=n(Rqe,"A",{href:!0});var Vxt=s(GU);uTr=r(Vxt,"TFMobileBertModel"),Vxt.forEach(t),bTr=r(Rqe," (MobileBERT model)"),Rqe.forEach(t),vTr=i(D),HM=n(D,"LI",{});var Pqe=s(HM);RTe=n(Pqe,"STRONG",{});var Xxt=s(RTe);FTr=r(Xxt,"mpnet"),Xxt.forEach(t),TTr=r(Pqe," \u2014 "),OU=n(Pqe,"A",{href:!0});var zxt=s(OU);MTr=r(zxt,"TFMPNetModel"),zxt.forEach(t),ETr=r(Pqe," (MPNet model)"),Pqe.forEach(t),CTr=i(D),UM=n(D,"LI",{});var Bqe=s(UM);PTe=n(Bqe,"STRONG",{});var Qxt=s(PTe);wTr=r(Qxt,"mt5"),Qxt.forEach(t),ATr=r(Bqe," \u2014 "),VU=n(Bqe,"A",{href:!0});var Wxt=s(VU);LTr=r(Wxt,"TFMT5Model"),Wxt.forEach(t),yTr=r(Bqe," (MT5 model)"),Bqe.forEach(t),xTr=i(D),JM=n(D,"LI",{});var Iqe=s(JM);BTe=n(Iqe,"STRONG",{});var Hxt=s(BTe);$Tr=r(Hxt,"openai-gpt"),Hxt.forEach(t),kTr=r(Iqe," \u2014 "),XU=n(Iqe,"A",{href:!0});var Uxt=s(XU);STr=r(Uxt,"TFOpenAIGPTModel"),Uxt.forEach(t),RTr=r(Iqe," (OpenAI GPT model)"),Iqe.forEach(t),PTr=i(D),YM=n(D,"LI",{});var Nqe=s(YM);ITe=n(Nqe,"STRONG",{});var Jxt=s(ITe);BTr=r(Jxt,"opt"),Jxt.forEach(t),ITr=r(Nqe," \u2014 "),zU=n(Nqe,"A",{href:!0});var Yxt=s(zU);NTr=r(Yxt,"TFOPTModel"),Yxt.forEach(t),qTr=r(Nqe," (OPT model)"),Nqe.forEach(t),jTr=i(D),KM=n(D,"LI",{});var qqe=s(KM);NTe=n(qqe,"STRONG",{});var Kxt=s(NTe);DTr=r(Kxt,"pegasus"),Kxt.forEach(t),GTr=r(qqe," \u2014 "),QU=n(qqe,"A",{href:!0});var Zxt=s(QU);OTr=r(Zxt,"TFPegasusModel"),Zxt.forEach(t),VTr=r(qqe," (Pegasus model)"),qqe.forEach(t),XTr=i(D),ZM=n(D,"LI",{});var jqe=s(ZM);qTe=n(jqe,"STRONG",{});var e$t=s(qTe);zTr=r(e$t,"regnet"),e$t.forEach(t),QTr=r(jqe," \u2014 "),WU=n(jqe,"A",{href:!0});var o$t=s(WU);WTr=r(o$t,"TFRegNetModel"),o$t.forEach(t),HTr=r(jqe," (RegNet model)"),jqe.forEach(t),UTr=i(D),e4=n(D,"LI",{});var Dqe=s(e4);jTe=n(Dqe,"STRONG",{});var r$t=s(jTe);JTr=r(r$t,"rembert"),r$t.forEach(t),YTr=r(Dqe," \u2014 "),HU=n(Dqe,"A",{href:!0});var t$t=s(HU);KTr=r(t$t,"TFRemBertModel"),t$t.forEach(t),ZTr=r(Dqe," (RemBERT model)"),Dqe.forEach(t),e8r=i(D),o4=n(D,"LI",{});var Gqe=s(o4);DTe=n(Gqe,"STRONG",{});var a$t=s(DTe);o8r=r(a$t,"resnet"),a$t.forEach(t),r8r=r(Gqe," \u2014 "),UU=n(Gqe,"A",{href:!0});var n$t=s(UU);t8r=r(n$t,"TFResNetModel"),n$t.forEach(t),a8r=r(Gqe," (ResNet model)"),Gqe.forEach(t),n8r=i(D),r4=n(D,"LI",{});var Oqe=s(r4);GTe=n(Oqe,"STRONG",{});var s$t=s(GTe);s8r=r(s$t,"roberta"),s$t.forEach(t),l8r=r(Oqe," \u2014 "),JU=n(Oqe,"A",{href:!0});var l$t=s(JU);i8r=r(l$t,"TFRobertaModel"),l$t.forEach(t),d8r=r(Oqe," (RoBERTa model)"),Oqe.forEach(t),c8r=i(D),t4=n(D,"LI",{});var Vqe=s(t4);OTe=n(Vqe,"STRONG",{});var i$t=s(OTe);f8r=r(i$t,"roformer"),i$t.forEach(t),m8r=r(Vqe," \u2014 "),YU=n(Vqe,"A",{href:!0});var d$t=s(YU);g8r=r(d$t,"TFRoFormerModel"),d$t.forEach(t),h8r=r(Vqe," (RoFormer model)"),Vqe.forEach(t),p8r=i(D),a4=n(D,"LI",{});var Xqe=s(a4);VTe=n(Xqe,"STRONG",{});var c$t=s(VTe);_8r=r(c$t,"speech_to_text"),c$t.forEach(t),u8r=r(Xqe," \u2014 "),KU=n(Xqe,"A",{href:!0});var f$t=s(KU);b8r=r(f$t,"TFSpeech2TextModel"),f$t.forEach(t),v8r=r(Xqe," (Speech2Text model)"),Xqe.forEach(t),F8r=i(D),n4=n(D,"LI",{});var zqe=s(n4);XTe=n(zqe,"STRONG",{});var m$t=s(XTe);T8r=r(m$t,"swin"),m$t.forEach(t),M8r=r(zqe," \u2014 "),ZU=n(zqe,"A",{href:!0});var g$t=s(ZU);E8r=r(g$t,"TFSwinModel"),g$t.forEach(t),C8r=r(zqe," (Swin Transformer model)"),zqe.forEach(t),w8r=i(D),s4=n(D,"LI",{});var Qqe=s(s4);zTe=n(Qqe,"STRONG",{});var h$t=s(zTe);A8r=r(h$t,"t5"),h$t.forEach(t),L8r=r(Qqe," \u2014 "),eJ=n(Qqe,"A",{href:!0});var p$t=s(eJ);y8r=r(p$t,"TFT5Model"),p$t.forEach(t),x8r=r(Qqe," (T5 model)"),Qqe.forEach(t),$8r=i(D),l4=n(D,"LI",{});var Wqe=s(l4);QTe=n(Wqe,"STRONG",{});var _$t=s(QTe);k8r=r(_$t,"tapas"),_$t.forEach(t),S8r=r(Wqe," \u2014 "),oJ=n(Wqe,"A",{href:!0});var u$t=s(oJ);R8r=r(u$t,"TFTapasModel"),u$t.forEach(t),P8r=r(Wqe," (TAPAS model)"),Wqe.forEach(t),B8r=i(D),i4=n(D,"LI",{});var Hqe=s(i4);WTe=n(Hqe,"STRONG",{});var b$t=s(WTe);I8r=r(b$t,"transfo-xl"),b$t.forEach(t),N8r=r(Hqe," \u2014 "),rJ=n(Hqe,"A",{href:!0});var v$t=s(rJ);q8r=r(v$t,"TFTransfoXLModel"),v$t.forEach(t),j8r=r(Hqe," (Transformer-XL model)"),Hqe.forEach(t),D8r=i(D),d4=n(D,"LI",{});var Uqe=s(d4);HTe=n(Uqe,"STRONG",{});var F$t=s(HTe);G8r=r(F$t,"vit"),F$t.forEach(t),O8r=r(Uqe," \u2014 "),tJ=n(Uqe,"A",{href:!0});var T$t=s(tJ);V8r=r(T$t,"TFViTModel"),T$t.forEach(t),X8r=r(Uqe," (ViT model)"),Uqe.forEach(t),z8r=i(D),c4=n(D,"LI",{});var Jqe=s(c4);UTe=n(Jqe,"STRONG",{});var M$t=s(UTe);Q8r=r(M$t,"vit_mae"),M$t.forEach(t),W8r=r(Jqe," \u2014 "),aJ=n(Jqe,"A",{href:!0});var E$t=s(aJ);H8r=r(E$t,"TFViTMAEModel"),E$t.forEach(t),U8r=r(Jqe," (ViTMAE model)"),Jqe.forEach(t),J8r=i(D),f4=n(D,"LI",{});var Yqe=s(f4);JTe=n(Yqe,"STRONG",{});var C$t=s(JTe);Y8r=r(C$t,"wav2vec2"),C$t.forEach(t),K8r=r(Yqe," \u2014 "),nJ=n(Yqe,"A",{href:!0});var w$t=s(nJ);Z8r=r(w$t,"TFWav2Vec2Model"),w$t.forEach(t),eMr=r(Yqe," (Wav2Vec2 model)"),Yqe.forEach(t),oMr=i(D),m4=n(D,"LI",{});var Kqe=s(m4);YTe=n(Kqe,"STRONG",{});var A$t=s(YTe);rMr=r(A$t,"xlm"),A$t.forEach(t),tMr=r(Kqe," \u2014 "),sJ=n(Kqe,"A",{href:!0});var L$t=s(sJ);aMr=r(L$t,"TFXLMModel"),L$t.forEach(t),nMr=r(Kqe," (XLM model)"),Kqe.forEach(t),sMr=i(D),g4=n(D,"LI",{});var Zqe=s(g4);KTe=n(Zqe,"STRONG",{});var y$t=s(KTe);lMr=r(y$t,"xlm-roberta"),y$t.forEach(t),iMr=r(Zqe," \u2014 "),lJ=n(Zqe,"A",{href:!0});var x$t=s(lJ);dMr=r(x$t,"TFXLMRobertaModel"),x$t.forEach(t),cMr=r(Zqe," (XLM-RoBERTa model)"),Zqe.forEach(t),fMr=i(D),h4=n(D,"LI",{});var eje=s(h4);ZTe=n(eje,"STRONG",{});var $$t=s(ZTe);mMr=r($$t,"xlnet"),$$t.forEach(t),gMr=r(eje," \u2014 "),iJ=n(eje,"A",{href:!0});var k$t=s(iJ);hMr=r(k$t,"TFXLNetModel"),k$t.forEach(t),pMr=r(eje," (XLNet model)"),eje.forEach(t),D.forEach(t),_Mr=i($l),T(p4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),cze=i(f),dc=n(f,"H2",{class:!0});var bWe=s(dc);_4=n(bWe,"A",{id:!0,class:!0,href:!0});var S$t=s(_4);e8e=n(S$t,"SPAN",{});var R$t=s(e8e);T(J9.$$.fragment,R$t),R$t.forEach(t),S$t.forEach(t),uMr=i(bWe),o8e=n(bWe,"SPAN",{});var P$t=s(o8e);bMr=r(P$t,"TFAutoModelForPreTraining"),P$t.forEach(t),bWe.forEach(t),fze=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(Y9.$$.fragment,kl),vMr=i(kl),cc=n(kl,"P",{});var $te=s(cc);FMr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dJ=n($te,"A",{href:!0});var B$t=s(dJ);TMr=r(B$t,"from_pretrained()"),B$t.forEach(t),MMr=r($te," class method or the "),cJ=n($te,"A",{href:!0});var I$t=s(cJ);EMr=r(I$t,"from_config()"),I$t.forEach(t),CMr=r($te,` class
method.`),$te.forEach(t),wMr=i(kl),K9=n(kl,"P",{});var vWe=s(K9);AMr=r(vWe,"This class cannot be instantiated directly using "),r8e=n(vWe,"CODE",{});var N$t=s(r8e);LMr=r(N$t,"__init__()"),N$t.forEach(t),yMr=r(vWe," (throws an error)."),vWe.forEach(t),xMr=i(kl),Pt=n(kl,"DIV",{class:!0});var n7=s(Pt);T(Z9.$$.fragment,n7),$Mr=i(n7),t8e=n(n7,"P",{});var q$t=s(t8e);kMr=r(q$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),q$t.forEach(t),SMr=i(n7),fc=n(n7,"P",{});var kte=s(fc);RMr=r(kte,`Note:
Loading a model from its configuration file does `),a8e=n(kte,"STRONG",{});var j$t=s(a8e);PMr=r(j$t,"not"),j$t.forEach(t),BMr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(kte,"A",{href:!0});var D$t=s(fJ);IMr=r(D$t,"from_pretrained()"),D$t.forEach(t),NMr=r(kte," to load the model weights."),kte.forEach(t),qMr=i(n7),T(u4.$$.fragment,n7),n7.forEach(t),jMr=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(ex.$$.fragment,Sl),DMr=i(Sl),n8e=n(Sl,"P",{});var G$t=s(n8e);GMr=r(G$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G$t.forEach(t),OMr=i(Sl),ln=n(Sl,"P",{});var s7=s(ln);VMr=r(s7,"The model class to instantiate is selected based on the "),s8e=n(s7,"CODE",{});var O$t=s(s8e);XMr=r(O$t,"model_type"),O$t.forEach(t),zMr=r(s7,` property of the config object (either
passed as an argument or loaded from `),l8e=n(s7,"CODE",{});var V$t=s(l8e);QMr=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),WMr=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=n(s7,"CODE",{});var X$t=s(i8e);HMr=r(X$t,"pretrained_model_name_or_path"),X$t.forEach(t),UMr=r(s7,":"),s7.forEach(t),JMr=i(Sl),se=n(Sl,"UL",{});var le=s(se);b4=n(le,"LI",{});var oje=s(b4);d8e=n(oje,"STRONG",{});var z$t=s(d8e);YMr=r(z$t,"albert"),z$t.forEach(t),KMr=r(oje," \u2014 "),mJ=n(oje,"A",{href:!0});var Q$t=s(mJ);ZMr=r(Q$t,"TFAlbertForPreTraining"),Q$t.forEach(t),e4r=r(oje," (ALBERT model)"),oje.forEach(t),o4r=i(le),v4=n(le,"LI",{});var rje=s(v4);c8e=n(rje,"STRONG",{});var W$t=s(c8e);r4r=r(W$t,"bart"),W$t.forEach(t),t4r=r(rje," \u2014 "),gJ=n(rje,"A",{href:!0});var H$t=s(gJ);a4r=r(H$t,"TFBartForConditionalGeneration"),H$t.forEach(t),n4r=r(rje," (BART model)"),rje.forEach(t),s4r=i(le),F4=n(le,"LI",{});var tje=s(F4);f8e=n(tje,"STRONG",{});var U$t=s(f8e);l4r=r(U$t,"bert"),U$t.forEach(t),i4r=r(tje," \u2014 "),hJ=n(tje,"A",{href:!0});var J$t=s(hJ);d4r=r(J$t,"TFBertForPreTraining"),J$t.forEach(t),c4r=r(tje," (BERT model)"),tje.forEach(t),f4r=i(le),T4=n(le,"LI",{});var aje=s(T4);m8e=n(aje,"STRONG",{});var Y$t=s(m8e);m4r=r(Y$t,"camembert"),Y$t.forEach(t),g4r=r(aje," \u2014 "),pJ=n(aje,"A",{href:!0});var K$t=s(pJ);h4r=r(K$t,"TFCamembertForMaskedLM"),K$t.forEach(t),p4r=r(aje," (CamemBERT model)"),aje.forEach(t),_4r=i(le),M4=n(le,"LI",{});var nje=s(M4);g8e=n(nje,"STRONG",{});var Z$t=s(g8e);u4r=r(Z$t,"ctrl"),Z$t.forEach(t),b4r=r(nje," \u2014 "),_J=n(nje,"A",{href:!0});var ekt=s(_J);v4r=r(ekt,"TFCTRLLMHeadModel"),ekt.forEach(t),F4r=r(nje," (CTRL model)"),nje.forEach(t),T4r=i(le),E4=n(le,"LI",{});var sje=s(E4);h8e=n(sje,"STRONG",{});var okt=s(h8e);M4r=r(okt,"distilbert"),okt.forEach(t),E4r=r(sje," \u2014 "),uJ=n(sje,"A",{href:!0});var rkt=s(uJ);C4r=r(rkt,"TFDistilBertForMaskedLM"),rkt.forEach(t),w4r=r(sje," (DistilBERT model)"),sje.forEach(t),A4r=i(le),C4=n(le,"LI",{});var lje=s(C4);p8e=n(lje,"STRONG",{});var tkt=s(p8e);L4r=r(tkt,"electra"),tkt.forEach(t),y4r=r(lje," \u2014 "),bJ=n(lje,"A",{href:!0});var akt=s(bJ);x4r=r(akt,"TFElectraForPreTraining"),akt.forEach(t),$4r=r(lje," (ELECTRA model)"),lje.forEach(t),k4r=i(le),w4=n(le,"LI",{});var ije=s(w4);_8e=n(ije,"STRONG",{});var nkt=s(_8e);S4r=r(nkt,"flaubert"),nkt.forEach(t),R4r=r(ije," \u2014 "),vJ=n(ije,"A",{href:!0});var skt=s(vJ);P4r=r(skt,"TFFlaubertWithLMHeadModel"),skt.forEach(t),B4r=r(ije," (FlauBERT model)"),ije.forEach(t),I4r=i(le),A4=n(le,"LI",{});var dje=s(A4);u8e=n(dje,"STRONG",{});var lkt=s(u8e);N4r=r(lkt,"funnel"),lkt.forEach(t),q4r=r(dje," \u2014 "),FJ=n(dje,"A",{href:!0});var ikt=s(FJ);j4r=r(ikt,"TFFunnelForPreTraining"),ikt.forEach(t),D4r=r(dje," (Funnel Transformer model)"),dje.forEach(t),G4r=i(le),L4=n(le,"LI",{});var cje=s(L4);b8e=n(cje,"STRONG",{});var dkt=s(b8e);O4r=r(dkt,"gpt2"),dkt.forEach(t),V4r=r(cje," \u2014 "),TJ=n(cje,"A",{href:!0});var ckt=s(TJ);X4r=r(ckt,"TFGPT2LMHeadModel"),ckt.forEach(t),z4r=r(cje," (OpenAI GPT-2 model)"),cje.forEach(t),Q4r=i(le),y4=n(le,"LI",{});var fje=s(y4);v8e=n(fje,"STRONG",{});var fkt=s(v8e);W4r=r(fkt,"layoutlm"),fkt.forEach(t),H4r=r(fje," \u2014 "),MJ=n(fje,"A",{href:!0});var mkt=s(MJ);U4r=r(mkt,"TFLayoutLMForMaskedLM"),mkt.forEach(t),J4r=r(fje," (LayoutLM model)"),fje.forEach(t),Y4r=i(le),x4=n(le,"LI",{});var mje=s(x4);F8e=n(mje,"STRONG",{});var gkt=s(F8e);K4r=r(gkt,"lxmert"),gkt.forEach(t),Z4r=r(mje," \u2014 "),EJ=n(mje,"A",{href:!0});var hkt=s(EJ);eEr=r(hkt,"TFLxmertForPreTraining"),hkt.forEach(t),oEr=r(mje," (LXMERT model)"),mje.forEach(t),rEr=i(le),$4=n(le,"LI",{});var gje=s($4);T8e=n(gje,"STRONG",{});var pkt=s(T8e);tEr=r(pkt,"mobilebert"),pkt.forEach(t),aEr=r(gje," \u2014 "),CJ=n(gje,"A",{href:!0});var _kt=s(CJ);nEr=r(_kt,"TFMobileBertForPreTraining"),_kt.forEach(t),sEr=r(gje," (MobileBERT model)"),gje.forEach(t),lEr=i(le),k4=n(le,"LI",{});var hje=s(k4);M8e=n(hje,"STRONG",{});var ukt=s(M8e);iEr=r(ukt,"mpnet"),ukt.forEach(t),dEr=r(hje," \u2014 "),wJ=n(hje,"A",{href:!0});var bkt=s(wJ);cEr=r(bkt,"TFMPNetForMaskedLM"),bkt.forEach(t),fEr=r(hje," (MPNet model)"),hje.forEach(t),mEr=i(le),S4=n(le,"LI",{});var pje=s(S4);E8e=n(pje,"STRONG",{});var vkt=s(E8e);gEr=r(vkt,"openai-gpt"),vkt.forEach(t),hEr=r(pje," \u2014 "),AJ=n(pje,"A",{href:!0});var Fkt=s(AJ);pEr=r(Fkt,"TFOpenAIGPTLMHeadModel"),Fkt.forEach(t),_Er=r(pje," (OpenAI GPT model)"),pje.forEach(t),uEr=i(le),R4=n(le,"LI",{});var _je=s(R4);C8e=n(_je,"STRONG",{});var Tkt=s(C8e);bEr=r(Tkt,"roberta"),Tkt.forEach(t),vEr=r(_je," \u2014 "),LJ=n(_je,"A",{href:!0});var Mkt=s(LJ);FEr=r(Mkt,"TFRobertaForMaskedLM"),Mkt.forEach(t),TEr=r(_je," (RoBERTa model)"),_je.forEach(t),MEr=i(le),P4=n(le,"LI",{});var uje=s(P4);w8e=n(uje,"STRONG",{});var Ekt=s(w8e);EEr=r(Ekt,"t5"),Ekt.forEach(t),CEr=r(uje," \u2014 "),yJ=n(uje,"A",{href:!0});var Ckt=s(yJ);wEr=r(Ckt,"TFT5ForConditionalGeneration"),Ckt.forEach(t),AEr=r(uje," (T5 model)"),uje.forEach(t),LEr=i(le),B4=n(le,"LI",{});var bje=s(B4);A8e=n(bje,"STRONG",{});var wkt=s(A8e);yEr=r(wkt,"tapas"),wkt.forEach(t),xEr=r(bje," \u2014 "),xJ=n(bje,"A",{href:!0});var Akt=s(xJ);$Er=r(Akt,"TFTapasForMaskedLM"),Akt.forEach(t),kEr=r(bje," (TAPAS model)"),bje.forEach(t),SEr=i(le),I4=n(le,"LI",{});var vje=s(I4);L8e=n(vje,"STRONG",{});var Lkt=s(L8e);REr=r(Lkt,"transfo-xl"),Lkt.forEach(t),PEr=r(vje," \u2014 "),$J=n(vje,"A",{href:!0});var ykt=s($J);BEr=r(ykt,"TFTransfoXLLMHeadModel"),ykt.forEach(t),IEr=r(vje," (Transformer-XL model)"),vje.forEach(t),NEr=i(le),N4=n(le,"LI",{});var Fje=s(N4);y8e=n(Fje,"STRONG",{});var xkt=s(y8e);qEr=r(xkt,"vit_mae"),xkt.forEach(t),jEr=r(Fje," \u2014 "),kJ=n(Fje,"A",{href:!0});var $kt=s(kJ);DEr=r($kt,"TFViTMAEForPreTraining"),$kt.forEach(t),GEr=r(Fje," (ViTMAE model)"),Fje.forEach(t),OEr=i(le),q4=n(le,"LI",{});var Tje=s(q4);x8e=n(Tje,"STRONG",{});var kkt=s(x8e);VEr=r(kkt,"xlm"),kkt.forEach(t),XEr=r(Tje," \u2014 "),SJ=n(Tje,"A",{href:!0});var Skt=s(SJ);zEr=r(Skt,"TFXLMWithLMHeadModel"),Skt.forEach(t),QEr=r(Tje," (XLM model)"),Tje.forEach(t),WEr=i(le),j4=n(le,"LI",{});var Mje=s(j4);$8e=n(Mje,"STRONG",{});var Rkt=s($8e);HEr=r(Rkt,"xlm-roberta"),Rkt.forEach(t),UEr=r(Mje," \u2014 "),RJ=n(Mje,"A",{href:!0});var Pkt=s(RJ);JEr=r(Pkt,"TFXLMRobertaForMaskedLM"),Pkt.forEach(t),YEr=r(Mje," (XLM-RoBERTa model)"),Mje.forEach(t),KEr=i(le),D4=n(le,"LI",{});var Eje=s(D4);k8e=n(Eje,"STRONG",{});var Bkt=s(k8e);ZEr=r(Bkt,"xlnet"),Bkt.forEach(t),eCr=r(Eje," \u2014 "),PJ=n(Eje,"A",{href:!0});var Ikt=s(PJ);oCr=r(Ikt,"TFXLNetLMHeadModel"),Ikt.forEach(t),rCr=r(Eje," (XLNet model)"),Eje.forEach(t),le.forEach(t),tCr=i(Sl),T(G4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),mze=i(f),mc=n(f,"H2",{class:!0});var FWe=s(mc);O4=n(FWe,"A",{id:!0,class:!0,href:!0});var Nkt=s(O4);S8e=n(Nkt,"SPAN",{});var qkt=s(S8e);T(ox.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),aCr=i(FWe),R8e=n(FWe,"SPAN",{});var jkt=s(R8e);nCr=r(jkt,"TFAutoModelForCausalLM"),jkt.forEach(t),FWe.forEach(t),gze=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(rx.$$.fragment,Rl),sCr=i(Rl),gc=n(Rl,"P",{});var Ste=s(gc);lCr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=n(Ste,"A",{href:!0});var Dkt=s(BJ);iCr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),dCr=r(Ste," class method or the "),IJ=n(Ste,"A",{href:!0});var Gkt=s(IJ);cCr=r(Gkt,"from_config()"),Gkt.forEach(t),fCr=r(Ste,` class
method.`),Ste.forEach(t),mCr=i(Rl),tx=n(Rl,"P",{});var TWe=s(tx);gCr=r(TWe,"This class cannot be instantiated directly using "),P8e=n(TWe,"CODE",{});var Okt=s(P8e);hCr=r(Okt,"__init__()"),Okt.forEach(t),pCr=r(TWe," (throws an error)."),TWe.forEach(t),_Cr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var l7=s(Bt);T(ax.$$.fragment,l7),uCr=i(l7),B8e=n(l7,"P",{});var Vkt=s(B8e);bCr=r(Vkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vkt.forEach(t),vCr=i(l7),hc=n(l7,"P",{});var Rte=s(hc);FCr=r(Rte,`Note:
Loading a model from its configuration file does `),I8e=n(Rte,"STRONG",{});var Xkt=s(I8e);TCr=r(Xkt,"not"),Xkt.forEach(t),MCr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(Rte,"A",{href:!0});var zkt=s(NJ);ECr=r(zkt,"from_pretrained()"),zkt.forEach(t),CCr=r(Rte," to load the model weights."),Rte.forEach(t),wCr=i(l7),T(V4.$$.fragment,l7),l7.forEach(t),ACr=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(nx.$$.fragment,Pl),LCr=i(Pl),N8e=n(Pl,"P",{});var Qkt=s(N8e);yCr=r(Qkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qkt.forEach(t),xCr=i(Pl),dn=n(Pl,"P",{});var i7=s(dn);$Cr=r(i7,"The model class to instantiate is selected based on the "),q8e=n(i7,"CODE",{});var Wkt=s(q8e);kCr=r(Wkt,"model_type"),Wkt.forEach(t),SCr=r(i7,` property of the config object (either
passed as an argument or loaded from `),j8e=n(i7,"CODE",{});var Hkt=s(j8e);RCr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),PCr=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D8e=n(i7,"CODE",{});var Ukt=s(D8e);BCr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),ICr=r(i7,":"),i7.forEach(t),NCr=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);X4=n(Ce,"LI",{});var Cje=s(X4);G8e=n(Cje,"STRONG",{});var Jkt=s(G8e);qCr=r(Jkt,"bert"),Jkt.forEach(t),jCr=r(Cje," \u2014 "),qJ=n(Cje,"A",{href:!0});var Ykt=s(qJ);DCr=r(Ykt,"TFBertLMHeadModel"),Ykt.forEach(t),GCr=r(Cje," (BERT model)"),Cje.forEach(t),OCr=i(Ce),z4=n(Ce,"LI",{});var wje=s(z4);O8e=n(wje,"STRONG",{});var Kkt=s(O8e);VCr=r(Kkt,"camembert"),Kkt.forEach(t),XCr=r(wje," \u2014 "),jJ=n(wje,"A",{href:!0});var Zkt=s(jJ);zCr=r(Zkt,"TFCamembertForCausalLM"),Zkt.forEach(t),QCr=r(wje," (CamemBERT model)"),wje.forEach(t),WCr=i(Ce),Q4=n(Ce,"LI",{});var Aje=s(Q4);V8e=n(Aje,"STRONG",{});var eSt=s(V8e);HCr=r(eSt,"ctrl"),eSt.forEach(t),UCr=r(Aje," \u2014 "),DJ=n(Aje,"A",{href:!0});var oSt=s(DJ);JCr=r(oSt,"TFCTRLLMHeadModel"),oSt.forEach(t),YCr=r(Aje," (CTRL model)"),Aje.forEach(t),KCr=i(Ce),W4=n(Ce,"LI",{});var Lje=s(W4);X8e=n(Lje,"STRONG",{});var rSt=s(X8e);ZCr=r(rSt,"gpt2"),rSt.forEach(t),e5r=r(Lje," \u2014 "),GJ=n(Lje,"A",{href:!0});var tSt=s(GJ);o5r=r(tSt,"TFGPT2LMHeadModel"),tSt.forEach(t),r5r=r(Lje," (OpenAI GPT-2 model)"),Lje.forEach(t),t5r=i(Ce),H4=n(Ce,"LI",{});var yje=s(H4);z8e=n(yje,"STRONG",{});var aSt=s(z8e);a5r=r(aSt,"gptj"),aSt.forEach(t),n5r=r(yje," \u2014 "),OJ=n(yje,"A",{href:!0});var nSt=s(OJ);s5r=r(nSt,"TFGPTJForCausalLM"),nSt.forEach(t),l5r=r(yje," (GPT-J model)"),yje.forEach(t),i5r=i(Ce),U4=n(Ce,"LI",{});var xje=s(U4);Q8e=n(xje,"STRONG",{});var sSt=s(Q8e);d5r=r(sSt,"openai-gpt"),sSt.forEach(t),c5r=r(xje," \u2014 "),VJ=n(xje,"A",{href:!0});var lSt=s(VJ);f5r=r(lSt,"TFOpenAIGPTLMHeadModel"),lSt.forEach(t),m5r=r(xje," (OpenAI GPT model)"),xje.forEach(t),g5r=i(Ce),J4=n(Ce,"LI",{});var $je=s(J4);W8e=n($je,"STRONG",{});var iSt=s(W8e);h5r=r(iSt,"opt"),iSt.forEach(t),p5r=r($je," \u2014 "),XJ=n($je,"A",{href:!0});var dSt=s(XJ);_5r=r(dSt,"TFOPTForCausalLM"),dSt.forEach(t),u5r=r($je," (OPT model)"),$je.forEach(t),b5r=i(Ce),Y4=n(Ce,"LI",{});var kje=s(Y4);H8e=n(kje,"STRONG",{});var cSt=s(H8e);v5r=r(cSt,"rembert"),cSt.forEach(t),F5r=r(kje," \u2014 "),zJ=n(kje,"A",{href:!0});var fSt=s(zJ);T5r=r(fSt,"TFRemBertForCausalLM"),fSt.forEach(t),M5r=r(kje," (RemBERT model)"),kje.forEach(t),E5r=i(Ce),K4=n(Ce,"LI",{});var Sje=s(K4);U8e=n(Sje,"STRONG",{});var mSt=s(U8e);C5r=r(mSt,"roberta"),mSt.forEach(t),w5r=r(Sje," \u2014 "),QJ=n(Sje,"A",{href:!0});var gSt=s(QJ);A5r=r(gSt,"TFRobertaForCausalLM"),gSt.forEach(t),L5r=r(Sje," (RoBERTa model)"),Sje.forEach(t),y5r=i(Ce),Z4=n(Ce,"LI",{});var Rje=s(Z4);J8e=n(Rje,"STRONG",{});var hSt=s(J8e);x5r=r(hSt,"roformer"),hSt.forEach(t),$5r=r(Rje," \u2014 "),WJ=n(Rje,"A",{href:!0});var pSt=s(WJ);k5r=r(pSt,"TFRoFormerForCausalLM"),pSt.forEach(t),S5r=r(Rje," (RoFormer model)"),Rje.forEach(t),R5r=i(Ce),eE=n(Ce,"LI",{});var Pje=s(eE);Y8e=n(Pje,"STRONG",{});var _St=s(Y8e);P5r=r(_St,"transfo-xl"),_St.forEach(t),B5r=r(Pje," \u2014 "),HJ=n(Pje,"A",{href:!0});var uSt=s(HJ);I5r=r(uSt,"TFTransfoXLLMHeadModel"),uSt.forEach(t),N5r=r(Pje," (Transformer-XL model)"),Pje.forEach(t),q5r=i(Ce),oE=n(Ce,"LI",{});var Bje=s(oE);K8e=n(Bje,"STRONG",{});var bSt=s(K8e);j5r=r(bSt,"xlm"),bSt.forEach(t),D5r=r(Bje," \u2014 "),UJ=n(Bje,"A",{href:!0});var vSt=s(UJ);G5r=r(vSt,"TFXLMWithLMHeadModel"),vSt.forEach(t),O5r=r(Bje," (XLM model)"),Bje.forEach(t),V5r=i(Ce),rE=n(Ce,"LI",{});var Ije=s(rE);Z8e=n(Ije,"STRONG",{});var FSt=s(Z8e);X5r=r(FSt,"xlnet"),FSt.forEach(t),z5r=r(Ije," \u2014 "),JJ=n(Ije,"A",{href:!0});var TSt=s(JJ);Q5r=r(TSt,"TFXLNetLMHeadModel"),TSt.forEach(t),W5r=r(Ije," (XLNet model)"),Ije.forEach(t),Ce.forEach(t),H5r=i(Pl),T(tE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),hze=i(f),pc=n(f,"H2",{class:!0});var MWe=s(pc);aE=n(MWe,"A",{id:!0,class:!0,href:!0});var MSt=s(aE);eMe=n(MSt,"SPAN",{});var ESt=s(eMe);T(sx.$$.fragment,ESt),ESt.forEach(t),MSt.forEach(t),U5r=i(MWe),oMe=n(MWe,"SPAN",{});var CSt=s(oMe);J5r=r(CSt,"TFAutoModelForImageClassification"),CSt.forEach(t),MWe.forEach(t),pze=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(lx.$$.fragment,Bl),Y5r=i(Bl),_c=n(Bl,"P",{});var Pte=s(_c);K5r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YJ=n(Pte,"A",{href:!0});var wSt=s(YJ);Z5r=r(wSt,"from_pretrained()"),wSt.forEach(t),e0r=r(Pte," class method or the "),KJ=n(Pte,"A",{href:!0});var ASt=s(KJ);o0r=r(ASt,"from_config()"),ASt.forEach(t),r0r=r(Pte,` class
method.`),Pte.forEach(t),t0r=i(Bl),ix=n(Bl,"P",{});var EWe=s(ix);a0r=r(EWe,"This class cannot be instantiated directly using "),rMe=n(EWe,"CODE",{});var LSt=s(rMe);n0r=r(LSt,"__init__()"),LSt.forEach(t),s0r=r(EWe," (throws an error)."),EWe.forEach(t),l0r=i(Bl),It=n(Bl,"DIV",{class:!0});var d7=s(It);T(dx.$$.fragment,d7),i0r=i(d7),tMe=n(d7,"P",{});var ySt=s(tMe);d0r=r(ySt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ySt.forEach(t),c0r=i(d7),uc=n(d7,"P",{});var Bte=s(uc);f0r=r(Bte,`Note:
Loading a model from its configuration file does `),aMe=n(Bte,"STRONG",{});var xSt=s(aMe);m0r=r(xSt,"not"),xSt.forEach(t),g0r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Bte,"A",{href:!0});var $St=s(ZJ);h0r=r($St,"from_pretrained()"),$St.forEach(t),p0r=r(Bte," to load the model weights."),Bte.forEach(t),_0r=i(d7),T(nE.$$.fragment,d7),d7.forEach(t),u0r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(cx.$$.fragment,Il),b0r=i(Il),nMe=n(Il,"P",{});var kSt=s(nMe);v0r=r(kSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kSt.forEach(t),F0r=i(Il),cn=n(Il,"P",{});var c7=s(cn);T0r=r(c7,"The model class to instantiate is selected based on the "),sMe=n(c7,"CODE",{});var SSt=s(sMe);M0r=r(SSt,"model_type"),SSt.forEach(t),E0r=r(c7,` property of the config object (either
passed as an argument or loaded from `),lMe=n(c7,"CODE",{});var RSt=s(lMe);C0r=r(RSt,"pretrained_model_name_or_path"),RSt.forEach(t),w0r=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iMe=n(c7,"CODE",{});var PSt=s(iMe);A0r=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),L0r=r(c7,":"),c7.forEach(t),y0r=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);sE=n(ot,"LI",{});var Nje=s(sE);dMe=n(Nje,"STRONG",{});var BSt=s(dMe);x0r=r(BSt,"convnext"),BSt.forEach(t),$0r=r(Nje," \u2014 "),eY=n(Nje,"A",{href:!0});var ISt=s(eY);k0r=r(ISt,"TFConvNextForImageClassification"),ISt.forEach(t),S0r=r(Nje," (ConvNeXT model)"),Nje.forEach(t),R0r=i(ot),lE=n(ot,"LI",{});var qje=s(lE);cMe=n(qje,"STRONG",{});var NSt=s(cMe);P0r=r(NSt,"data2vec-vision"),NSt.forEach(t),B0r=r(qje," \u2014 "),oY=n(qje,"A",{href:!0});var qSt=s(oY);I0r=r(qSt,"TFData2VecVisionForImageClassification"),qSt.forEach(t),N0r=r(qje," (Data2VecVision model)"),qje.forEach(t),q0r=i(ot),Ys=n(ot,"LI",{});var BS=s(Ys);fMe=n(BS,"STRONG",{});var jSt=s(fMe);j0r=r(jSt,"deit"),jSt.forEach(t),D0r=r(BS," \u2014 "),rY=n(BS,"A",{href:!0});var DSt=s(rY);G0r=r(DSt,"TFDeiTForImageClassification"),DSt.forEach(t),O0r=r(BS," or "),tY=n(BS,"A",{href:!0});var GSt=s(tY);V0r=r(GSt,"TFDeiTForImageClassificationWithTeacher"),GSt.forEach(t),X0r=r(BS," (DeiT model)"),BS.forEach(t),z0r=i(ot),iE=n(ot,"LI",{});var jje=s(iE);mMe=n(jje,"STRONG",{});var OSt=s(mMe);Q0r=r(OSt,"regnet"),OSt.forEach(t),W0r=r(jje," \u2014 "),aY=n(jje,"A",{href:!0});var VSt=s(aY);H0r=r(VSt,"TFRegNetForImageClassification"),VSt.forEach(t),U0r=r(jje," (RegNet model)"),jje.forEach(t),J0r=i(ot),dE=n(ot,"LI",{});var Dje=s(dE);gMe=n(Dje,"STRONG",{});var XSt=s(gMe);Y0r=r(XSt,"resnet"),XSt.forEach(t),K0r=r(Dje," \u2014 "),nY=n(Dje,"A",{href:!0});var zSt=s(nY);Z0r=r(zSt,"TFResNetForImageClassification"),zSt.forEach(t),ewr=r(Dje," (ResNet model)"),Dje.forEach(t),owr=i(ot),cE=n(ot,"LI",{});var Gje=s(cE);hMe=n(Gje,"STRONG",{});var QSt=s(hMe);rwr=r(QSt,"swin"),QSt.forEach(t),twr=r(Gje," \u2014 "),sY=n(Gje,"A",{href:!0});var WSt=s(sY);awr=r(WSt,"TFSwinForImageClassification"),WSt.forEach(t),nwr=r(Gje," (Swin Transformer model)"),Gje.forEach(t),swr=i(ot),fE=n(ot,"LI",{});var Oje=s(fE);pMe=n(Oje,"STRONG",{});var HSt=s(pMe);lwr=r(HSt,"vit"),HSt.forEach(t),iwr=r(Oje," \u2014 "),lY=n(Oje,"A",{href:!0});var USt=s(lY);dwr=r(USt,"TFViTForImageClassification"),USt.forEach(t),cwr=r(Oje," (ViT model)"),Oje.forEach(t),ot.forEach(t),fwr=i(Il),T(mE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),_ze=i(f),bc=n(f,"H2",{class:!0});var CWe=s(bc);gE=n(CWe,"A",{id:!0,class:!0,href:!0});var JSt=s(gE);_Me=n(JSt,"SPAN",{});var YSt=s(_Me);T(fx.$$.fragment,YSt),YSt.forEach(t),JSt.forEach(t),mwr=i(CWe),uMe=n(CWe,"SPAN",{});var KSt=s(uMe);gwr=r(KSt,"TFAutoModelForMaskedLM"),KSt.forEach(t),CWe.forEach(t),uze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(mx.$$.fragment,Nl),hwr=i(Nl),vc=n(Nl,"P",{});var Ite=s(vc);pwr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=n(Ite,"A",{href:!0});var ZSt=s(iY);_wr=r(ZSt,"from_pretrained()"),ZSt.forEach(t),uwr=r(Ite," class method or the "),dY=n(Ite,"A",{href:!0});var eRt=s(dY);bwr=r(eRt,"from_config()"),eRt.forEach(t),vwr=r(Ite,` class
method.`),Ite.forEach(t),Fwr=i(Nl),gx=n(Nl,"P",{});var wWe=s(gx);Twr=r(wWe,"This class cannot be instantiated directly using "),bMe=n(wWe,"CODE",{});var oRt=s(bMe);Mwr=r(oRt,"__init__()"),oRt.forEach(t),Ewr=r(wWe," (throws an error)."),wWe.forEach(t),Cwr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var f7=s(Nt);T(hx.$$.fragment,f7),wwr=i(f7),vMe=n(f7,"P",{});var rRt=s(vMe);Awr=r(rRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rRt.forEach(t),Lwr=i(f7),Fc=n(f7,"P",{});var Nte=s(Fc);ywr=r(Nte,`Note:
Loading a model from its configuration file does `),FMe=n(Nte,"STRONG",{});var tRt=s(FMe);xwr=r(tRt,"not"),tRt.forEach(t),$wr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(Nte,"A",{href:!0});var aRt=s(cY);kwr=r(aRt,"from_pretrained()"),aRt.forEach(t),Swr=r(Nte," to load the model weights."),Nte.forEach(t),Rwr=i(f7),T(hE.$$.fragment,f7),f7.forEach(t),Pwr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(px.$$.fragment,ql),Bwr=i(ql),TMe=n(ql,"P",{});var nRt=s(TMe);Iwr=r(nRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nRt.forEach(t),Nwr=i(ql),fn=n(ql,"P",{});var m7=s(fn);qwr=r(m7,"The model class to instantiate is selected based on the "),MMe=n(m7,"CODE",{});var sRt=s(MMe);jwr=r(sRt,"model_type"),sRt.forEach(t),Dwr=r(m7,` property of the config object (either
passed as an argument or loaded from `),EMe=n(m7,"CODE",{});var lRt=s(EMe);Gwr=r(lRt,"pretrained_model_name_or_path"),lRt.forEach(t),Owr=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(m7,"CODE",{});var iRt=s(CMe);Vwr=r(iRt,"pretrained_model_name_or_path"),iRt.forEach(t),Xwr=r(m7,":"),m7.forEach(t),zwr=i(ql),ie=n(ql,"UL",{});var fe=s(ie);pE=n(fe,"LI",{});var Vje=s(pE);wMe=n(Vje,"STRONG",{});var dRt=s(wMe);Qwr=r(dRt,"albert"),dRt.forEach(t),Wwr=r(Vje," \u2014 "),fY=n(Vje,"A",{href:!0});var cRt=s(fY);Hwr=r(cRt,"TFAlbertForMaskedLM"),cRt.forEach(t),Uwr=r(Vje," (ALBERT model)"),Vje.forEach(t),Jwr=i(fe),_E=n(fe,"LI",{});var Xje=s(_E);AMe=n(Xje,"STRONG",{});var fRt=s(AMe);Ywr=r(fRt,"bert"),fRt.forEach(t),Kwr=r(Xje," \u2014 "),mY=n(Xje,"A",{href:!0});var mRt=s(mY);Zwr=r(mRt,"TFBertForMaskedLM"),mRt.forEach(t),eAr=r(Xje," (BERT model)"),Xje.forEach(t),oAr=i(fe),uE=n(fe,"LI",{});var zje=s(uE);LMe=n(zje,"STRONG",{});var gRt=s(LMe);rAr=r(gRt,"camembert"),gRt.forEach(t),tAr=r(zje," \u2014 "),gY=n(zje,"A",{href:!0});var hRt=s(gY);aAr=r(hRt,"TFCamembertForMaskedLM"),hRt.forEach(t),nAr=r(zje," (CamemBERT model)"),zje.forEach(t),sAr=i(fe),bE=n(fe,"LI",{});var Qje=s(bE);yMe=n(Qje,"STRONG",{});var pRt=s(yMe);lAr=r(pRt,"convbert"),pRt.forEach(t),iAr=r(Qje," \u2014 "),hY=n(Qje,"A",{href:!0});var _Rt=s(hY);dAr=r(_Rt,"TFConvBertForMaskedLM"),_Rt.forEach(t),cAr=r(Qje," (ConvBERT model)"),Qje.forEach(t),fAr=i(fe),vE=n(fe,"LI",{});var Wje=s(vE);xMe=n(Wje,"STRONG",{});var uRt=s(xMe);mAr=r(uRt,"deberta"),uRt.forEach(t),gAr=r(Wje," \u2014 "),pY=n(Wje,"A",{href:!0});var bRt=s(pY);hAr=r(bRt,"TFDebertaForMaskedLM"),bRt.forEach(t),pAr=r(Wje," (DeBERTa model)"),Wje.forEach(t),_Ar=i(fe),FE=n(fe,"LI",{});var Hje=s(FE);$Me=n(Hje,"STRONG",{});var vRt=s($Me);uAr=r(vRt,"deberta-v2"),vRt.forEach(t),bAr=r(Hje," \u2014 "),_Y=n(Hje,"A",{href:!0});var FRt=s(_Y);vAr=r(FRt,"TFDebertaV2ForMaskedLM"),FRt.forEach(t),FAr=r(Hje," (DeBERTa-v2 model)"),Hje.forEach(t),TAr=i(fe),TE=n(fe,"LI",{});var Uje=s(TE);kMe=n(Uje,"STRONG",{});var TRt=s(kMe);MAr=r(TRt,"distilbert"),TRt.forEach(t),EAr=r(Uje," \u2014 "),uY=n(Uje,"A",{href:!0});var MRt=s(uY);CAr=r(MRt,"TFDistilBertForMaskedLM"),MRt.forEach(t),wAr=r(Uje," (DistilBERT model)"),Uje.forEach(t),AAr=i(fe),ME=n(fe,"LI",{});var Jje=s(ME);SMe=n(Jje,"STRONG",{});var ERt=s(SMe);LAr=r(ERt,"electra"),ERt.forEach(t),yAr=r(Jje," \u2014 "),bY=n(Jje,"A",{href:!0});var CRt=s(bY);xAr=r(CRt,"TFElectraForMaskedLM"),CRt.forEach(t),$Ar=r(Jje," (ELECTRA model)"),Jje.forEach(t),kAr=i(fe),EE=n(fe,"LI",{});var Yje=s(EE);RMe=n(Yje,"STRONG",{});var wRt=s(RMe);SAr=r(wRt,"flaubert"),wRt.forEach(t),RAr=r(Yje," \u2014 "),vY=n(Yje,"A",{href:!0});var ARt=s(vY);PAr=r(ARt,"TFFlaubertWithLMHeadModel"),ARt.forEach(t),BAr=r(Yje," (FlauBERT model)"),Yje.forEach(t),IAr=i(fe),CE=n(fe,"LI",{});var Kje=s(CE);PMe=n(Kje,"STRONG",{});var LRt=s(PMe);NAr=r(LRt,"funnel"),LRt.forEach(t),qAr=r(Kje," \u2014 "),FY=n(Kje,"A",{href:!0});var yRt=s(FY);jAr=r(yRt,"TFFunnelForMaskedLM"),yRt.forEach(t),DAr=r(Kje," (Funnel Transformer model)"),Kje.forEach(t),GAr=i(fe),wE=n(fe,"LI",{});var Zje=s(wE);BMe=n(Zje,"STRONG",{});var xRt=s(BMe);OAr=r(xRt,"layoutlm"),xRt.forEach(t),VAr=r(Zje," \u2014 "),TY=n(Zje,"A",{href:!0});var $Rt=s(TY);XAr=r($Rt,"TFLayoutLMForMaskedLM"),$Rt.forEach(t),zAr=r(Zje," (LayoutLM model)"),Zje.forEach(t),QAr=i(fe),AE=n(fe,"LI",{});var eDe=s(AE);IMe=n(eDe,"STRONG",{});var kRt=s(IMe);WAr=r(kRt,"longformer"),kRt.forEach(t),HAr=r(eDe," \u2014 "),MY=n(eDe,"A",{href:!0});var SRt=s(MY);UAr=r(SRt,"TFLongformerForMaskedLM"),SRt.forEach(t),JAr=r(eDe," (Longformer model)"),eDe.forEach(t),YAr=i(fe),LE=n(fe,"LI",{});var oDe=s(LE);NMe=n(oDe,"STRONG",{});var RRt=s(NMe);KAr=r(RRt,"mobilebert"),RRt.forEach(t),ZAr=r(oDe," \u2014 "),EY=n(oDe,"A",{href:!0});var PRt=s(EY);e6r=r(PRt,"TFMobileBertForMaskedLM"),PRt.forEach(t),o6r=r(oDe," (MobileBERT model)"),oDe.forEach(t),r6r=i(fe),yE=n(fe,"LI",{});var rDe=s(yE);qMe=n(rDe,"STRONG",{});var BRt=s(qMe);t6r=r(BRt,"mpnet"),BRt.forEach(t),a6r=r(rDe," \u2014 "),CY=n(rDe,"A",{href:!0});var IRt=s(CY);n6r=r(IRt,"TFMPNetForMaskedLM"),IRt.forEach(t),s6r=r(rDe," (MPNet model)"),rDe.forEach(t),l6r=i(fe),xE=n(fe,"LI",{});var tDe=s(xE);jMe=n(tDe,"STRONG",{});var NRt=s(jMe);i6r=r(NRt,"rembert"),NRt.forEach(t),d6r=r(tDe," \u2014 "),wY=n(tDe,"A",{href:!0});var qRt=s(wY);c6r=r(qRt,"TFRemBertForMaskedLM"),qRt.forEach(t),f6r=r(tDe," (RemBERT model)"),tDe.forEach(t),m6r=i(fe),$E=n(fe,"LI",{});var aDe=s($E);DMe=n(aDe,"STRONG",{});var jRt=s(DMe);g6r=r(jRt,"roberta"),jRt.forEach(t),h6r=r(aDe," \u2014 "),AY=n(aDe,"A",{href:!0});var DRt=s(AY);p6r=r(DRt,"TFRobertaForMaskedLM"),DRt.forEach(t),_6r=r(aDe," (RoBERTa model)"),aDe.forEach(t),u6r=i(fe),kE=n(fe,"LI",{});var nDe=s(kE);GMe=n(nDe,"STRONG",{});var GRt=s(GMe);b6r=r(GRt,"roformer"),GRt.forEach(t),v6r=r(nDe," \u2014 "),LY=n(nDe,"A",{href:!0});var ORt=s(LY);F6r=r(ORt,"TFRoFormerForMaskedLM"),ORt.forEach(t),T6r=r(nDe," (RoFormer model)"),nDe.forEach(t),M6r=i(fe),SE=n(fe,"LI",{});var sDe=s(SE);OMe=n(sDe,"STRONG",{});var VRt=s(OMe);E6r=r(VRt,"tapas"),VRt.forEach(t),C6r=r(sDe," \u2014 "),yY=n(sDe,"A",{href:!0});var XRt=s(yY);w6r=r(XRt,"TFTapasForMaskedLM"),XRt.forEach(t),A6r=r(sDe," (TAPAS model)"),sDe.forEach(t),L6r=i(fe),RE=n(fe,"LI",{});var lDe=s(RE);VMe=n(lDe,"STRONG",{});var zRt=s(VMe);y6r=r(zRt,"xlm"),zRt.forEach(t),x6r=r(lDe," \u2014 "),xY=n(lDe,"A",{href:!0});var QRt=s(xY);$6r=r(QRt,"TFXLMWithLMHeadModel"),QRt.forEach(t),k6r=r(lDe," (XLM model)"),lDe.forEach(t),S6r=i(fe),PE=n(fe,"LI",{});var iDe=s(PE);XMe=n(iDe,"STRONG",{});var WRt=s(XMe);R6r=r(WRt,"xlm-roberta"),WRt.forEach(t),P6r=r(iDe," \u2014 "),$Y=n(iDe,"A",{href:!0});var HRt=s($Y);B6r=r(HRt,"TFXLMRobertaForMaskedLM"),HRt.forEach(t),I6r=r(iDe," (XLM-RoBERTa model)"),iDe.forEach(t),fe.forEach(t),N6r=i(ql),T(BE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),bze=i(f),Tc=n(f,"H2",{class:!0});var AWe=s(Tc);IE=n(AWe,"A",{id:!0,class:!0,href:!0});var URt=s(IE);zMe=n(URt,"SPAN",{});var JRt=s(zMe);T(_x.$$.fragment,JRt),JRt.forEach(t),URt.forEach(t),q6r=i(AWe),QMe=n(AWe,"SPAN",{});var YRt=s(QMe);j6r=r(YRt,"TFAutoModelForSeq2SeqLM"),YRt.forEach(t),AWe.forEach(t),vze=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(ux.$$.fragment,jl),D6r=i(jl),Mc=n(jl,"P",{});var qte=s(Mc);G6r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=n(qte,"A",{href:!0});var KRt=s(kY);O6r=r(KRt,"from_pretrained()"),KRt.forEach(t),V6r=r(qte," class method or the "),SY=n(qte,"A",{href:!0});var ZRt=s(SY);X6r=r(ZRt,"from_config()"),ZRt.forEach(t),z6r=r(qte,` class
method.`),qte.forEach(t),Q6r=i(jl),bx=n(jl,"P",{});var LWe=s(bx);W6r=r(LWe,"This class cannot be instantiated directly using "),WMe=n(LWe,"CODE",{});var ePt=s(WMe);H6r=r(ePt,"__init__()"),ePt.forEach(t),U6r=r(LWe," (throws an error)."),LWe.forEach(t),J6r=i(jl),qt=n(jl,"DIV",{class:!0});var g7=s(qt);T(vx.$$.fragment,g7),Y6r=i(g7),HMe=n(g7,"P",{});var oPt=s(HMe);K6r=r(oPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oPt.forEach(t),Z6r=i(g7),Ec=n(g7,"P",{});var jte=s(Ec);e7r=r(jte,`Note:
Loading a model from its configuration file does `),UMe=n(jte,"STRONG",{});var rPt=s(UMe);o7r=r(rPt,"not"),rPt.forEach(t),r7r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(jte,"A",{href:!0});var tPt=s(RY);t7r=r(tPt,"from_pretrained()"),tPt.forEach(t),a7r=r(jte," to load the model weights."),jte.forEach(t),n7r=i(g7),T(NE.$$.fragment,g7),g7.forEach(t),s7r=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(Fx.$$.fragment,Dl),l7r=i(Dl),JMe=n(Dl,"P",{});var aPt=s(JMe);i7r=r(aPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aPt.forEach(t),d7r=i(Dl),mn=n(Dl,"P",{});var h7=s(mn);c7r=r(h7,"The model class to instantiate is selected based on the "),YMe=n(h7,"CODE",{});var nPt=s(YMe);f7r=r(nPt,"model_type"),nPt.forEach(t),m7r=r(h7,` property of the config object (either
passed as an argument or loaded from `),KMe=n(h7,"CODE",{});var sPt=s(KMe);g7r=r(sPt,"pretrained_model_name_or_path"),sPt.forEach(t),h7r=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(h7,"CODE",{});var lPt=s(ZMe);p7r=r(lPt,"pretrained_model_name_or_path"),lPt.forEach(t),_7r=r(h7,":"),h7.forEach(t),u7r=i(Dl),ye=n(Dl,"UL",{});var Ie=s(ye);qE=n(Ie,"LI",{});var dDe=s(qE);e4e=n(dDe,"STRONG",{});var iPt=s(e4e);b7r=r(iPt,"bart"),iPt.forEach(t),v7r=r(dDe," \u2014 "),PY=n(dDe,"A",{href:!0});var dPt=s(PY);F7r=r(dPt,"TFBartForConditionalGeneration"),dPt.forEach(t),T7r=r(dDe," (BART model)"),dDe.forEach(t),M7r=i(Ie),jE=n(Ie,"LI",{});var cDe=s(jE);o4e=n(cDe,"STRONG",{});var cPt=s(o4e);E7r=r(cPt,"blenderbot"),cPt.forEach(t),C7r=r(cDe," \u2014 "),BY=n(cDe,"A",{href:!0});var fPt=s(BY);w7r=r(fPt,"TFBlenderbotForConditionalGeneration"),fPt.forEach(t),A7r=r(cDe," (Blenderbot model)"),cDe.forEach(t),L7r=i(Ie),DE=n(Ie,"LI",{});var fDe=s(DE);r4e=n(fDe,"STRONG",{});var mPt=s(r4e);y7r=r(mPt,"blenderbot-small"),mPt.forEach(t),x7r=r(fDe," \u2014 "),IY=n(fDe,"A",{href:!0});var gPt=s(IY);$7r=r(gPt,"TFBlenderbotSmallForConditionalGeneration"),gPt.forEach(t),k7r=r(fDe," (BlenderbotSmall model)"),fDe.forEach(t),S7r=i(Ie),GE=n(Ie,"LI",{});var mDe=s(GE);t4e=n(mDe,"STRONG",{});var hPt=s(t4e);R7r=r(hPt,"encoder-decoder"),hPt.forEach(t),P7r=r(mDe," \u2014 "),NY=n(mDe,"A",{href:!0});var pPt=s(NY);B7r=r(pPt,"TFEncoderDecoderModel"),pPt.forEach(t),I7r=r(mDe," (Encoder decoder model)"),mDe.forEach(t),N7r=i(Ie),OE=n(Ie,"LI",{});var gDe=s(OE);a4e=n(gDe,"STRONG",{});var _Pt=s(a4e);q7r=r(_Pt,"led"),_Pt.forEach(t),j7r=r(gDe," \u2014 "),qY=n(gDe,"A",{href:!0});var uPt=s(qY);D7r=r(uPt,"TFLEDForConditionalGeneration"),uPt.forEach(t),G7r=r(gDe," (LED model)"),gDe.forEach(t),O7r=i(Ie),VE=n(Ie,"LI",{});var hDe=s(VE);n4e=n(hDe,"STRONG",{});var bPt=s(n4e);V7r=r(bPt,"marian"),bPt.forEach(t),X7r=r(hDe," \u2014 "),jY=n(hDe,"A",{href:!0});var vPt=s(jY);z7r=r(vPt,"TFMarianMTModel"),vPt.forEach(t),Q7r=r(hDe," (Marian model)"),hDe.forEach(t),W7r=i(Ie),XE=n(Ie,"LI",{});var pDe=s(XE);s4e=n(pDe,"STRONG",{});var FPt=s(s4e);H7r=r(FPt,"mbart"),FPt.forEach(t),U7r=r(pDe," \u2014 "),DY=n(pDe,"A",{href:!0});var TPt=s(DY);J7r=r(TPt,"TFMBartForConditionalGeneration"),TPt.forEach(t),Y7r=r(pDe," (mBART model)"),pDe.forEach(t),K7r=i(Ie),zE=n(Ie,"LI",{});var _De=s(zE);l4e=n(_De,"STRONG",{});var MPt=s(l4e);Z7r=r(MPt,"mt5"),MPt.forEach(t),eLr=r(_De," \u2014 "),GY=n(_De,"A",{href:!0});var EPt=s(GY);oLr=r(EPt,"TFMT5ForConditionalGeneration"),EPt.forEach(t),rLr=r(_De," (MT5 model)"),_De.forEach(t),tLr=i(Ie),QE=n(Ie,"LI",{});var uDe=s(QE);i4e=n(uDe,"STRONG",{});var CPt=s(i4e);aLr=r(CPt,"pegasus"),CPt.forEach(t),nLr=r(uDe," \u2014 "),OY=n(uDe,"A",{href:!0});var wPt=s(OY);sLr=r(wPt,"TFPegasusForConditionalGeneration"),wPt.forEach(t),lLr=r(uDe," (Pegasus model)"),uDe.forEach(t),iLr=i(Ie),WE=n(Ie,"LI",{});var bDe=s(WE);d4e=n(bDe,"STRONG",{});var APt=s(d4e);dLr=r(APt,"t5"),APt.forEach(t),cLr=r(bDe," \u2014 "),VY=n(bDe,"A",{href:!0});var LPt=s(VY);fLr=r(LPt,"TFT5ForConditionalGeneration"),LPt.forEach(t),mLr=r(bDe," (T5 model)"),bDe.forEach(t),Ie.forEach(t),gLr=i(Dl),T(HE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Fze=i(f),Cc=n(f,"H2",{class:!0});var yWe=s(Cc);UE=n(yWe,"A",{id:!0,class:!0,href:!0});var yPt=s(UE);c4e=n(yPt,"SPAN",{});var xPt=s(c4e);T(Tx.$$.fragment,xPt),xPt.forEach(t),yPt.forEach(t),hLr=i(yWe),f4e=n(yWe,"SPAN",{});var $Pt=s(f4e);pLr=r($Pt,"TFAutoModelForSequenceClassification"),$Pt.forEach(t),yWe.forEach(t),Tze=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(Mx.$$.fragment,Gl),_Lr=i(Gl),wc=n(Gl,"P",{});var Dte=s(wc);uLr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XY=n(Dte,"A",{href:!0});var kPt=s(XY);bLr=r(kPt,"from_pretrained()"),kPt.forEach(t),vLr=r(Dte," class method or the "),zY=n(Dte,"A",{href:!0});var SPt=s(zY);FLr=r(SPt,"from_config()"),SPt.forEach(t),TLr=r(Dte,` class
method.`),Dte.forEach(t),MLr=i(Gl),Ex=n(Gl,"P",{});var xWe=s(Ex);ELr=r(xWe,"This class cannot be instantiated directly using "),m4e=n(xWe,"CODE",{});var RPt=s(m4e);CLr=r(RPt,"__init__()"),RPt.forEach(t),wLr=r(xWe," (throws an error)."),xWe.forEach(t),ALr=i(Gl),jt=n(Gl,"DIV",{class:!0});var p7=s(jt);T(Cx.$$.fragment,p7),LLr=i(p7),g4e=n(p7,"P",{});var PPt=s(g4e);yLr=r(PPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PPt.forEach(t),xLr=i(p7),Ac=n(p7,"P",{});var Gte=s(Ac);$Lr=r(Gte,`Note:
Loading a model from its configuration file does `),h4e=n(Gte,"STRONG",{});var BPt=s(h4e);kLr=r(BPt,"not"),BPt.forEach(t),SLr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Gte,"A",{href:!0});var IPt=s(QY);RLr=r(IPt,"from_pretrained()"),IPt.forEach(t),PLr=r(Gte," to load the model weights."),Gte.forEach(t),BLr=i(p7),T(JE.$$.fragment,p7),p7.forEach(t),ILr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(wx.$$.fragment,Ol),NLr=i(Ol),p4e=n(Ol,"P",{});var NPt=s(p4e);qLr=r(NPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NPt.forEach(t),jLr=i(Ol),gn=n(Ol,"P",{});var _7=s(gn);DLr=r(_7,"The model class to instantiate is selected based on the "),_4e=n(_7,"CODE",{});var qPt=s(_4e);GLr=r(qPt,"model_type"),qPt.forEach(t),OLr=r(_7,` property of the config object (either
passed as an argument or loaded from `),u4e=n(_7,"CODE",{});var jPt=s(u4e);VLr=r(jPt,"pretrained_model_name_or_path"),jPt.forEach(t),XLr=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(_7,"CODE",{});var DPt=s(b4e);zLr=r(DPt,"pretrained_model_name_or_path"),DPt.forEach(t),QLr=r(_7,":"),_7.forEach(t),WLr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);YE=n(ne,"LI",{});var vDe=s(YE);v4e=n(vDe,"STRONG",{});var GPt=s(v4e);HLr=r(GPt,"albert"),GPt.forEach(t),ULr=r(vDe," \u2014 "),WY=n(vDe,"A",{href:!0});var OPt=s(WY);JLr=r(OPt,"TFAlbertForSequenceClassification"),OPt.forEach(t),YLr=r(vDe," (ALBERT model)"),vDe.forEach(t),KLr=i(ne),KE=n(ne,"LI",{});var FDe=s(KE);F4e=n(FDe,"STRONG",{});var VPt=s(F4e);ZLr=r(VPt,"bert"),VPt.forEach(t),eyr=r(FDe," \u2014 "),HY=n(FDe,"A",{href:!0});var XPt=s(HY);oyr=r(XPt,"TFBertForSequenceClassification"),XPt.forEach(t),ryr=r(FDe," (BERT model)"),FDe.forEach(t),tyr=i(ne),ZE=n(ne,"LI",{});var TDe=s(ZE);T4e=n(TDe,"STRONG",{});var zPt=s(T4e);ayr=r(zPt,"camembert"),zPt.forEach(t),nyr=r(TDe," \u2014 "),UY=n(TDe,"A",{href:!0});var QPt=s(UY);syr=r(QPt,"TFCamembertForSequenceClassification"),QPt.forEach(t),lyr=r(TDe," (CamemBERT model)"),TDe.forEach(t),iyr=i(ne),eC=n(ne,"LI",{});var MDe=s(eC);M4e=n(MDe,"STRONG",{});var WPt=s(M4e);dyr=r(WPt,"convbert"),WPt.forEach(t),cyr=r(MDe," \u2014 "),JY=n(MDe,"A",{href:!0});var HPt=s(JY);fyr=r(HPt,"TFConvBertForSequenceClassification"),HPt.forEach(t),myr=r(MDe," (ConvBERT model)"),MDe.forEach(t),gyr=i(ne),oC=n(ne,"LI",{});var EDe=s(oC);E4e=n(EDe,"STRONG",{});var UPt=s(E4e);hyr=r(UPt,"ctrl"),UPt.forEach(t),pyr=r(EDe," \u2014 "),YY=n(EDe,"A",{href:!0});var JPt=s(YY);_yr=r(JPt,"TFCTRLForSequenceClassification"),JPt.forEach(t),uyr=r(EDe," (CTRL model)"),EDe.forEach(t),byr=i(ne),rC=n(ne,"LI",{});var CDe=s(rC);C4e=n(CDe,"STRONG",{});var YPt=s(C4e);vyr=r(YPt,"deberta"),YPt.forEach(t),Fyr=r(CDe," \u2014 "),KY=n(CDe,"A",{href:!0});var KPt=s(KY);Tyr=r(KPt,"TFDebertaForSequenceClassification"),KPt.forEach(t),Myr=r(CDe," (DeBERTa model)"),CDe.forEach(t),Eyr=i(ne),tC=n(ne,"LI",{});var wDe=s(tC);w4e=n(wDe,"STRONG",{});var ZPt=s(w4e);Cyr=r(ZPt,"deberta-v2"),ZPt.forEach(t),wyr=r(wDe," \u2014 "),ZY=n(wDe,"A",{href:!0});var eBt=s(ZY);Ayr=r(eBt,"TFDebertaV2ForSequenceClassification"),eBt.forEach(t),Lyr=r(wDe," (DeBERTa-v2 model)"),wDe.forEach(t),yyr=i(ne),aC=n(ne,"LI",{});var ADe=s(aC);A4e=n(ADe,"STRONG",{});var oBt=s(A4e);xyr=r(oBt,"distilbert"),oBt.forEach(t),$yr=r(ADe," \u2014 "),eK=n(ADe,"A",{href:!0});var rBt=s(eK);kyr=r(rBt,"TFDistilBertForSequenceClassification"),rBt.forEach(t),Syr=r(ADe," (DistilBERT model)"),ADe.forEach(t),Ryr=i(ne),nC=n(ne,"LI",{});var LDe=s(nC);L4e=n(LDe,"STRONG",{});var tBt=s(L4e);Pyr=r(tBt,"electra"),tBt.forEach(t),Byr=r(LDe," \u2014 "),oK=n(LDe,"A",{href:!0});var aBt=s(oK);Iyr=r(aBt,"TFElectraForSequenceClassification"),aBt.forEach(t),Nyr=r(LDe," (ELECTRA model)"),LDe.forEach(t),qyr=i(ne),sC=n(ne,"LI",{});var yDe=s(sC);y4e=n(yDe,"STRONG",{});var nBt=s(y4e);jyr=r(nBt,"flaubert"),nBt.forEach(t),Dyr=r(yDe," \u2014 "),rK=n(yDe,"A",{href:!0});var sBt=s(rK);Gyr=r(sBt,"TFFlaubertForSequenceClassification"),sBt.forEach(t),Oyr=r(yDe," (FlauBERT model)"),yDe.forEach(t),Vyr=i(ne),lC=n(ne,"LI",{});var xDe=s(lC);x4e=n(xDe,"STRONG",{});var lBt=s(x4e);Xyr=r(lBt,"funnel"),lBt.forEach(t),zyr=r(xDe," \u2014 "),tK=n(xDe,"A",{href:!0});var iBt=s(tK);Qyr=r(iBt,"TFFunnelForSequenceClassification"),iBt.forEach(t),Wyr=r(xDe," (Funnel Transformer model)"),xDe.forEach(t),Hyr=i(ne),iC=n(ne,"LI",{});var $De=s(iC);$4e=n($De,"STRONG",{});var dBt=s($4e);Uyr=r(dBt,"gpt2"),dBt.forEach(t),Jyr=r($De," \u2014 "),aK=n($De,"A",{href:!0});var cBt=s(aK);Yyr=r(cBt,"TFGPT2ForSequenceClassification"),cBt.forEach(t),Kyr=r($De," (OpenAI GPT-2 model)"),$De.forEach(t),Zyr=i(ne),dC=n(ne,"LI",{});var kDe=s(dC);k4e=n(kDe,"STRONG",{});var fBt=s(k4e);e9r=r(fBt,"gptj"),fBt.forEach(t),o9r=r(kDe," \u2014 "),nK=n(kDe,"A",{href:!0});var mBt=s(nK);r9r=r(mBt,"TFGPTJForSequenceClassification"),mBt.forEach(t),t9r=r(kDe," (GPT-J model)"),kDe.forEach(t),a9r=i(ne),cC=n(ne,"LI",{});var SDe=s(cC);S4e=n(SDe,"STRONG",{});var gBt=s(S4e);n9r=r(gBt,"layoutlm"),gBt.forEach(t),s9r=r(SDe," \u2014 "),sK=n(SDe,"A",{href:!0});var hBt=s(sK);l9r=r(hBt,"TFLayoutLMForSequenceClassification"),hBt.forEach(t),i9r=r(SDe," (LayoutLM model)"),SDe.forEach(t),d9r=i(ne),fC=n(ne,"LI",{});var RDe=s(fC);R4e=n(RDe,"STRONG",{});var pBt=s(R4e);c9r=r(pBt,"longformer"),pBt.forEach(t),f9r=r(RDe," \u2014 "),lK=n(RDe,"A",{href:!0});var _Bt=s(lK);m9r=r(_Bt,"TFLongformerForSequenceClassification"),_Bt.forEach(t),g9r=r(RDe," (Longformer model)"),RDe.forEach(t),h9r=i(ne),mC=n(ne,"LI",{});var PDe=s(mC);P4e=n(PDe,"STRONG",{});var uBt=s(P4e);p9r=r(uBt,"mobilebert"),uBt.forEach(t),_9r=r(PDe," \u2014 "),iK=n(PDe,"A",{href:!0});var bBt=s(iK);u9r=r(bBt,"TFMobileBertForSequenceClassification"),bBt.forEach(t),b9r=r(PDe," (MobileBERT model)"),PDe.forEach(t),v9r=i(ne),gC=n(ne,"LI",{});var BDe=s(gC);B4e=n(BDe,"STRONG",{});var vBt=s(B4e);F9r=r(vBt,"mpnet"),vBt.forEach(t),T9r=r(BDe," \u2014 "),dK=n(BDe,"A",{href:!0});var FBt=s(dK);M9r=r(FBt,"TFMPNetForSequenceClassification"),FBt.forEach(t),E9r=r(BDe," (MPNet model)"),BDe.forEach(t),C9r=i(ne),hC=n(ne,"LI",{});var IDe=s(hC);I4e=n(IDe,"STRONG",{});var TBt=s(I4e);w9r=r(TBt,"openai-gpt"),TBt.forEach(t),A9r=r(IDe," \u2014 "),cK=n(IDe,"A",{href:!0});var MBt=s(cK);L9r=r(MBt,"TFOpenAIGPTForSequenceClassification"),MBt.forEach(t),y9r=r(IDe," (OpenAI GPT model)"),IDe.forEach(t),x9r=i(ne),pC=n(ne,"LI",{});var NDe=s(pC);N4e=n(NDe,"STRONG",{});var EBt=s(N4e);$9r=r(EBt,"rembert"),EBt.forEach(t),k9r=r(NDe," \u2014 "),fK=n(NDe,"A",{href:!0});var CBt=s(fK);S9r=r(CBt,"TFRemBertForSequenceClassification"),CBt.forEach(t),R9r=r(NDe," (RemBERT model)"),NDe.forEach(t),P9r=i(ne),_C=n(ne,"LI",{});var qDe=s(_C);q4e=n(qDe,"STRONG",{});var wBt=s(q4e);B9r=r(wBt,"roberta"),wBt.forEach(t),I9r=r(qDe," \u2014 "),mK=n(qDe,"A",{href:!0});var ABt=s(mK);N9r=r(ABt,"TFRobertaForSequenceClassification"),ABt.forEach(t),q9r=r(qDe," (RoBERTa model)"),qDe.forEach(t),j9r=i(ne),uC=n(ne,"LI",{});var jDe=s(uC);j4e=n(jDe,"STRONG",{});var LBt=s(j4e);D9r=r(LBt,"roformer"),LBt.forEach(t),G9r=r(jDe," \u2014 "),gK=n(jDe,"A",{href:!0});var yBt=s(gK);O9r=r(yBt,"TFRoFormerForSequenceClassification"),yBt.forEach(t),V9r=r(jDe," (RoFormer model)"),jDe.forEach(t),X9r=i(ne),bC=n(ne,"LI",{});var DDe=s(bC);D4e=n(DDe,"STRONG",{});var xBt=s(D4e);z9r=r(xBt,"tapas"),xBt.forEach(t),Q9r=r(DDe," \u2014 "),hK=n(DDe,"A",{href:!0});var $Bt=s(hK);W9r=r($Bt,"TFTapasForSequenceClassification"),$Bt.forEach(t),H9r=r(DDe," (TAPAS model)"),DDe.forEach(t),U9r=i(ne),vC=n(ne,"LI",{});var GDe=s(vC);G4e=n(GDe,"STRONG",{});var kBt=s(G4e);J9r=r(kBt,"transfo-xl"),kBt.forEach(t),Y9r=r(GDe," \u2014 "),pK=n(GDe,"A",{href:!0});var SBt=s(pK);K9r=r(SBt,"TFTransfoXLForSequenceClassification"),SBt.forEach(t),Z9r=r(GDe," (Transformer-XL model)"),GDe.forEach(t),exr=i(ne),FC=n(ne,"LI",{});var ODe=s(FC);O4e=n(ODe,"STRONG",{});var RBt=s(O4e);oxr=r(RBt,"xlm"),RBt.forEach(t),rxr=r(ODe," \u2014 "),_K=n(ODe,"A",{href:!0});var PBt=s(_K);txr=r(PBt,"TFXLMForSequenceClassification"),PBt.forEach(t),axr=r(ODe," (XLM model)"),ODe.forEach(t),nxr=i(ne),TC=n(ne,"LI",{});var VDe=s(TC);V4e=n(VDe,"STRONG",{});var BBt=s(V4e);sxr=r(BBt,"xlm-roberta"),BBt.forEach(t),lxr=r(VDe," \u2014 "),uK=n(VDe,"A",{href:!0});var IBt=s(uK);ixr=r(IBt,"TFXLMRobertaForSequenceClassification"),IBt.forEach(t),dxr=r(VDe," (XLM-RoBERTa model)"),VDe.forEach(t),cxr=i(ne),MC=n(ne,"LI",{});var XDe=s(MC);X4e=n(XDe,"STRONG",{});var NBt=s(X4e);fxr=r(NBt,"xlnet"),NBt.forEach(t),mxr=r(XDe," \u2014 "),bK=n(XDe,"A",{href:!0});var qBt=s(bK);gxr=r(qBt,"TFXLNetForSequenceClassification"),qBt.forEach(t),hxr=r(XDe," (XLNet model)"),XDe.forEach(t),ne.forEach(t),pxr=i(Ol),T(EC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Mze=i(f),Lc=n(f,"H2",{class:!0});var $We=s(Lc);CC=n($We,"A",{id:!0,class:!0,href:!0});var jBt=s(CC);z4e=n(jBt,"SPAN",{});var DBt=s(z4e);T(Ax.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),_xr=i($We),Q4e=n($We,"SPAN",{});var GBt=s(Q4e);uxr=r(GBt,"TFAutoModelForMultipleChoice"),GBt.forEach(t),$We.forEach(t),Eze=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(Lx.$$.fragment,Vl),bxr=i(Vl),yc=n(Vl,"P",{});var Ote=s(yc);vxr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vK=n(Ote,"A",{href:!0});var OBt=s(vK);Fxr=r(OBt,"from_pretrained()"),OBt.forEach(t),Txr=r(Ote," class method or the "),FK=n(Ote,"A",{href:!0});var VBt=s(FK);Mxr=r(VBt,"from_config()"),VBt.forEach(t),Exr=r(Ote,` class
method.`),Ote.forEach(t),Cxr=i(Vl),yx=n(Vl,"P",{});var kWe=s(yx);wxr=r(kWe,"This class cannot be instantiated directly using "),W4e=n(kWe,"CODE",{});var XBt=s(W4e);Axr=r(XBt,"__init__()"),XBt.forEach(t),Lxr=r(kWe," (throws an error)."),kWe.forEach(t),yxr=i(Vl),Dt=n(Vl,"DIV",{class:!0});var u7=s(Dt);T(xx.$$.fragment,u7),xxr=i(u7),H4e=n(u7,"P",{});var zBt=s(H4e);$xr=r(zBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zBt.forEach(t),kxr=i(u7),xc=n(u7,"P",{});var Vte=s(xc);Sxr=r(Vte,`Note:
Loading a model from its configuration file does `),U4e=n(Vte,"STRONG",{});var QBt=s(U4e);Rxr=r(QBt,"not"),QBt.forEach(t),Pxr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(Vte,"A",{href:!0});var WBt=s(TK);Bxr=r(WBt,"from_pretrained()"),WBt.forEach(t),Ixr=r(Vte," to load the model weights."),Vte.forEach(t),Nxr=i(u7),T(wC.$$.fragment,u7),u7.forEach(t),qxr=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T($x.$$.fragment,Xl),jxr=i(Xl),J4e=n(Xl,"P",{});var HBt=s(J4e);Dxr=r(HBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HBt.forEach(t),Gxr=i(Xl),hn=n(Xl,"P",{});var b7=s(hn);Oxr=r(b7,"The model class to instantiate is selected based on the "),Y4e=n(b7,"CODE",{});var UBt=s(Y4e);Vxr=r(UBt,"model_type"),UBt.forEach(t),Xxr=r(b7,` property of the config object (either
passed as an argument or loaded from `),K4e=n(b7,"CODE",{});var JBt=s(K4e);zxr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),Qxr=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(b7,"CODE",{});var YBt=s(Z4e);Wxr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),Hxr=r(b7,":"),b7.forEach(t),Uxr=i(Xl),_e=n(Xl,"UL",{});var Fe=s(_e);AC=n(Fe,"LI",{});var zDe=s(AC);eEe=n(zDe,"STRONG",{});var KBt=s(eEe);Jxr=r(KBt,"albert"),KBt.forEach(t),Yxr=r(zDe," \u2014 "),MK=n(zDe,"A",{href:!0});var ZBt=s(MK);Kxr=r(ZBt,"TFAlbertForMultipleChoice"),ZBt.forEach(t),Zxr=r(zDe," (ALBERT model)"),zDe.forEach(t),e$r=i(Fe),LC=n(Fe,"LI",{});var QDe=s(LC);oEe=n(QDe,"STRONG",{});var eIt=s(oEe);o$r=r(eIt,"bert"),eIt.forEach(t),r$r=r(QDe," \u2014 "),EK=n(QDe,"A",{href:!0});var oIt=s(EK);t$r=r(oIt,"TFBertForMultipleChoice"),oIt.forEach(t),a$r=r(QDe," (BERT model)"),QDe.forEach(t),n$r=i(Fe),yC=n(Fe,"LI",{});var WDe=s(yC);rEe=n(WDe,"STRONG",{});var rIt=s(rEe);s$r=r(rIt,"camembert"),rIt.forEach(t),l$r=r(WDe," \u2014 "),CK=n(WDe,"A",{href:!0});var tIt=s(CK);i$r=r(tIt,"TFCamembertForMultipleChoice"),tIt.forEach(t),d$r=r(WDe," (CamemBERT model)"),WDe.forEach(t),c$r=i(Fe),xC=n(Fe,"LI",{});var HDe=s(xC);tEe=n(HDe,"STRONG",{});var aIt=s(tEe);f$r=r(aIt,"convbert"),aIt.forEach(t),m$r=r(HDe," \u2014 "),wK=n(HDe,"A",{href:!0});var nIt=s(wK);g$r=r(nIt,"TFConvBertForMultipleChoice"),nIt.forEach(t),h$r=r(HDe," (ConvBERT model)"),HDe.forEach(t),p$r=i(Fe),$C=n(Fe,"LI",{});var UDe=s($C);aEe=n(UDe,"STRONG",{});var sIt=s(aEe);_$r=r(sIt,"distilbert"),sIt.forEach(t),u$r=r(UDe," \u2014 "),AK=n(UDe,"A",{href:!0});var lIt=s(AK);b$r=r(lIt,"TFDistilBertForMultipleChoice"),lIt.forEach(t),v$r=r(UDe," (DistilBERT model)"),UDe.forEach(t),F$r=i(Fe),kC=n(Fe,"LI",{});var JDe=s(kC);nEe=n(JDe,"STRONG",{});var iIt=s(nEe);T$r=r(iIt,"electra"),iIt.forEach(t),M$r=r(JDe," \u2014 "),LK=n(JDe,"A",{href:!0});var dIt=s(LK);E$r=r(dIt,"TFElectraForMultipleChoice"),dIt.forEach(t),C$r=r(JDe," (ELECTRA model)"),JDe.forEach(t),w$r=i(Fe),SC=n(Fe,"LI",{});var YDe=s(SC);sEe=n(YDe,"STRONG",{});var cIt=s(sEe);A$r=r(cIt,"flaubert"),cIt.forEach(t),L$r=r(YDe," \u2014 "),yK=n(YDe,"A",{href:!0});var fIt=s(yK);y$r=r(fIt,"TFFlaubertForMultipleChoice"),fIt.forEach(t),x$r=r(YDe," (FlauBERT model)"),YDe.forEach(t),$$r=i(Fe),RC=n(Fe,"LI",{});var KDe=s(RC);lEe=n(KDe,"STRONG",{});var mIt=s(lEe);k$r=r(mIt,"funnel"),mIt.forEach(t),S$r=r(KDe," \u2014 "),xK=n(KDe,"A",{href:!0});var gIt=s(xK);R$r=r(gIt,"TFFunnelForMultipleChoice"),gIt.forEach(t),P$r=r(KDe," (Funnel Transformer model)"),KDe.forEach(t),B$r=i(Fe),PC=n(Fe,"LI",{});var ZDe=s(PC);iEe=n(ZDe,"STRONG",{});var hIt=s(iEe);I$r=r(hIt,"longformer"),hIt.forEach(t),N$r=r(ZDe," \u2014 "),$K=n(ZDe,"A",{href:!0});var pIt=s($K);q$r=r(pIt,"TFLongformerForMultipleChoice"),pIt.forEach(t),j$r=r(ZDe," (Longformer model)"),ZDe.forEach(t),D$r=i(Fe),BC=n(Fe,"LI",{});var eGe=s(BC);dEe=n(eGe,"STRONG",{});var _It=s(dEe);G$r=r(_It,"mobilebert"),_It.forEach(t),O$r=r(eGe," \u2014 "),kK=n(eGe,"A",{href:!0});var uIt=s(kK);V$r=r(uIt,"TFMobileBertForMultipleChoice"),uIt.forEach(t),X$r=r(eGe," (MobileBERT model)"),eGe.forEach(t),z$r=i(Fe),IC=n(Fe,"LI",{});var oGe=s(IC);cEe=n(oGe,"STRONG",{});var bIt=s(cEe);Q$r=r(bIt,"mpnet"),bIt.forEach(t),W$r=r(oGe," \u2014 "),SK=n(oGe,"A",{href:!0});var vIt=s(SK);H$r=r(vIt,"TFMPNetForMultipleChoice"),vIt.forEach(t),U$r=r(oGe," (MPNet model)"),oGe.forEach(t),J$r=i(Fe),NC=n(Fe,"LI",{});var rGe=s(NC);fEe=n(rGe,"STRONG",{});var FIt=s(fEe);Y$r=r(FIt,"rembert"),FIt.forEach(t),K$r=r(rGe," \u2014 "),RK=n(rGe,"A",{href:!0});var TIt=s(RK);Z$r=r(TIt,"TFRemBertForMultipleChoice"),TIt.forEach(t),ekr=r(rGe," (RemBERT model)"),rGe.forEach(t),okr=i(Fe),qC=n(Fe,"LI",{});var tGe=s(qC);mEe=n(tGe,"STRONG",{});var MIt=s(mEe);rkr=r(MIt,"roberta"),MIt.forEach(t),tkr=r(tGe," \u2014 "),PK=n(tGe,"A",{href:!0});var EIt=s(PK);akr=r(EIt,"TFRobertaForMultipleChoice"),EIt.forEach(t),nkr=r(tGe," (RoBERTa model)"),tGe.forEach(t),skr=i(Fe),jC=n(Fe,"LI",{});var aGe=s(jC);gEe=n(aGe,"STRONG",{});var CIt=s(gEe);lkr=r(CIt,"roformer"),CIt.forEach(t),ikr=r(aGe," \u2014 "),BK=n(aGe,"A",{href:!0});var wIt=s(BK);dkr=r(wIt,"TFRoFormerForMultipleChoice"),wIt.forEach(t),ckr=r(aGe," (RoFormer model)"),aGe.forEach(t),fkr=i(Fe),DC=n(Fe,"LI",{});var nGe=s(DC);hEe=n(nGe,"STRONG",{});var AIt=s(hEe);mkr=r(AIt,"xlm"),AIt.forEach(t),gkr=r(nGe," \u2014 "),IK=n(nGe,"A",{href:!0});var LIt=s(IK);hkr=r(LIt,"TFXLMForMultipleChoice"),LIt.forEach(t),pkr=r(nGe," (XLM model)"),nGe.forEach(t),_kr=i(Fe),GC=n(Fe,"LI",{});var sGe=s(GC);pEe=n(sGe,"STRONG",{});var yIt=s(pEe);ukr=r(yIt,"xlm-roberta"),yIt.forEach(t),bkr=r(sGe," \u2014 "),NK=n(sGe,"A",{href:!0});var xIt=s(NK);vkr=r(xIt,"TFXLMRobertaForMultipleChoice"),xIt.forEach(t),Fkr=r(sGe," (XLM-RoBERTa model)"),sGe.forEach(t),Tkr=i(Fe),OC=n(Fe,"LI",{});var lGe=s(OC);_Ee=n(lGe,"STRONG",{});var $It=s(_Ee);Mkr=r($It,"xlnet"),$It.forEach(t),Ekr=r(lGe," \u2014 "),qK=n(lGe,"A",{href:!0});var kIt=s(qK);Ckr=r(kIt,"TFXLNetForMultipleChoice"),kIt.forEach(t),wkr=r(lGe," (XLNet model)"),lGe.forEach(t),Fe.forEach(t),Akr=i(Xl),T(VC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Cze=i(f),$c=n(f,"H2",{class:!0});var SWe=s($c);XC=n(SWe,"A",{id:!0,class:!0,href:!0});var SIt=s(XC);uEe=n(SIt,"SPAN",{});var RIt=s(uEe);T(kx.$$.fragment,RIt),RIt.forEach(t),SIt.forEach(t),Lkr=i(SWe),bEe=n(SWe,"SPAN",{});var PIt=s(bEe);ykr=r(PIt,"TFAutoModelForNextSentencePrediction"),PIt.forEach(t),SWe.forEach(t),wze=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(Sx.$$.fragment,zl),xkr=i(zl),kc=n(zl,"P",{});var Xte=s(kc);$kr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jK=n(Xte,"A",{href:!0});var BIt=s(jK);kkr=r(BIt,"from_pretrained()"),BIt.forEach(t),Skr=r(Xte," class method or the "),DK=n(Xte,"A",{href:!0});var IIt=s(DK);Rkr=r(IIt,"from_config()"),IIt.forEach(t),Pkr=r(Xte,` class
method.`),Xte.forEach(t),Bkr=i(zl),Rx=n(zl,"P",{});var RWe=s(Rx);Ikr=r(RWe,"This class cannot be instantiated directly using "),vEe=n(RWe,"CODE",{});var NIt=s(vEe);Nkr=r(NIt,"__init__()"),NIt.forEach(t),qkr=r(RWe," (throws an error)."),RWe.forEach(t),jkr=i(zl),Gt=n(zl,"DIV",{class:!0});var v7=s(Gt);T(Px.$$.fragment,v7),Dkr=i(v7),FEe=n(v7,"P",{});var qIt=s(FEe);Gkr=r(qIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qIt.forEach(t),Okr=i(v7),Sc=n(v7,"P",{});var zte=s(Sc);Vkr=r(zte,`Note:
Loading a model from its configuration file does `),TEe=n(zte,"STRONG",{});var jIt=s(TEe);Xkr=r(jIt,"not"),jIt.forEach(t),zkr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(zte,"A",{href:!0});var DIt=s(GK);Qkr=r(DIt,"from_pretrained()"),DIt.forEach(t),Wkr=r(zte," to load the model weights."),zte.forEach(t),Hkr=i(v7),T(zC.$$.fragment,v7),v7.forEach(t),Ukr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(Bx.$$.fragment,Ql),Jkr=i(Ql),MEe=n(Ql,"P",{});var GIt=s(MEe);Ykr=r(GIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GIt.forEach(t),Kkr=i(Ql),pn=n(Ql,"P",{});var F7=s(pn);Zkr=r(F7,"The model class to instantiate is selected based on the "),EEe=n(F7,"CODE",{});var OIt=s(EEe);eSr=r(OIt,"model_type"),OIt.forEach(t),oSr=r(F7,` property of the config object (either
passed as an argument or loaded from `),CEe=n(F7,"CODE",{});var VIt=s(CEe);rSr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),tSr=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(F7,"CODE",{});var XIt=s(wEe);aSr=r(XIt,"pretrained_model_name_or_path"),XIt.forEach(t),nSr=r(F7,":"),F7.forEach(t),sSr=i(Ql),Ix=n(Ql,"UL",{});var PWe=s(Ix);QC=n(PWe,"LI",{});var iGe=s(QC);AEe=n(iGe,"STRONG",{});var zIt=s(AEe);lSr=r(zIt,"bert"),zIt.forEach(t),iSr=r(iGe," \u2014 "),OK=n(iGe,"A",{href:!0});var QIt=s(OK);dSr=r(QIt,"TFBertForNextSentencePrediction"),QIt.forEach(t),cSr=r(iGe," (BERT model)"),iGe.forEach(t),fSr=i(PWe),WC=n(PWe,"LI",{});var dGe=s(WC);LEe=n(dGe,"STRONG",{});var WIt=s(LEe);mSr=r(WIt,"mobilebert"),WIt.forEach(t),gSr=r(dGe," \u2014 "),VK=n(dGe,"A",{href:!0});var HIt=s(VK);hSr=r(HIt,"TFMobileBertForNextSentencePrediction"),HIt.forEach(t),pSr=r(dGe," (MobileBERT model)"),dGe.forEach(t),PWe.forEach(t),_Sr=i(Ql),T(HC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Aze=i(f),Rc=n(f,"H2",{class:!0});var BWe=s(Rc);UC=n(BWe,"A",{id:!0,class:!0,href:!0});var UIt=s(UC);yEe=n(UIt,"SPAN",{});var JIt=s(yEe);T(Nx.$$.fragment,JIt),JIt.forEach(t),UIt.forEach(t),uSr=i(BWe),xEe=n(BWe,"SPAN",{});var YIt=s(xEe);bSr=r(YIt,"TFAutoModelForTableQuestionAnswering"),YIt.forEach(t),BWe.forEach(t),Lze=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(qx.$$.fragment,Wl),vSr=i(Wl),Pc=n(Wl,"P",{});var Qte=s(Pc);FSr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XK=n(Qte,"A",{href:!0});var KIt=s(XK);TSr=r(KIt,"from_pretrained()"),KIt.forEach(t),MSr=r(Qte," class method or the "),zK=n(Qte,"A",{href:!0});var ZIt=s(zK);ESr=r(ZIt,"from_config()"),ZIt.forEach(t),CSr=r(Qte,` class
method.`),Qte.forEach(t),wSr=i(Wl),jx=n(Wl,"P",{});var IWe=s(jx);ASr=r(IWe,"This class cannot be instantiated directly using "),$Ee=n(IWe,"CODE",{});var eNt=s($Ee);LSr=r(eNt,"__init__()"),eNt.forEach(t),ySr=r(IWe," (throws an error)."),IWe.forEach(t),xSr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var T7=s(Ot);T(Dx.$$.fragment,T7),$Sr=i(T7),kEe=n(T7,"P",{});var oNt=s(kEe);kSr=r(oNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oNt.forEach(t),SSr=i(T7),Bc=n(T7,"P",{});var Wte=s(Bc);RSr=r(Wte,`Note:
Loading a model from its configuration file does `),SEe=n(Wte,"STRONG",{});var rNt=s(SEe);PSr=r(rNt,"not"),rNt.forEach(t),BSr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Wte,"A",{href:!0});var tNt=s(QK);ISr=r(tNt,"from_pretrained()"),tNt.forEach(t),NSr=r(Wte," to load the model weights."),Wte.forEach(t),qSr=i(T7),T(JC.$$.fragment,T7),T7.forEach(t),jSr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Gx.$$.fragment,Hl),DSr=i(Hl),REe=n(Hl,"P",{});var aNt=s(REe);GSr=r(aNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aNt.forEach(t),OSr=i(Hl),_n=n(Hl,"P",{});var M7=s(_n);VSr=r(M7,"The model class to instantiate is selected based on the "),PEe=n(M7,"CODE",{});var nNt=s(PEe);XSr=r(nNt,"model_type"),nNt.forEach(t),zSr=r(M7,` property of the config object (either
passed as an argument or loaded from `),BEe=n(M7,"CODE",{});var sNt=s(BEe);QSr=r(sNt,"pretrained_model_name_or_path"),sNt.forEach(t),WSr=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(M7,"CODE",{});var lNt=s(IEe);HSr=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),USr=r(M7,":"),M7.forEach(t),JSr=i(Hl),NEe=n(Hl,"UL",{});var iNt=s(NEe);YC=n(iNt,"LI",{});var cGe=s(YC);qEe=n(cGe,"STRONG",{});var dNt=s(qEe);YSr=r(dNt,"tapas"),dNt.forEach(t),KSr=r(cGe," \u2014 "),WK=n(cGe,"A",{href:!0});var cNt=s(WK);ZSr=r(cNt,"TFTapasForQuestionAnswering"),cNt.forEach(t),eRr=r(cGe," (TAPAS model)"),cGe.forEach(t),iNt.forEach(t),oRr=i(Hl),T(KC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),yze=i(f),Ic=n(f,"H2",{class:!0});var NWe=s(Ic);ZC=n(NWe,"A",{id:!0,class:!0,href:!0});var fNt=s(ZC);jEe=n(fNt,"SPAN",{});var mNt=s(jEe);T(Ox.$$.fragment,mNt),mNt.forEach(t),fNt.forEach(t),rRr=i(NWe),DEe=n(NWe,"SPAN",{});var gNt=s(DEe);tRr=r(gNt,"TFAutoModelForTokenClassification"),gNt.forEach(t),NWe.forEach(t),xze=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(Vx.$$.fragment,Ul),aRr=i(Ul),Nc=n(Ul,"P",{});var Hte=s(Nc);nRr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HK=n(Hte,"A",{href:!0});var hNt=s(HK);sRr=r(hNt,"from_pretrained()"),hNt.forEach(t),lRr=r(Hte," class method or the "),UK=n(Hte,"A",{href:!0});var pNt=s(UK);iRr=r(pNt,"from_config()"),pNt.forEach(t),dRr=r(Hte,` class
method.`),Hte.forEach(t),cRr=i(Ul),Xx=n(Ul,"P",{});var qWe=s(Xx);fRr=r(qWe,"This class cannot be instantiated directly using "),GEe=n(qWe,"CODE",{});var _Nt=s(GEe);mRr=r(_Nt,"__init__()"),_Nt.forEach(t),gRr=r(qWe," (throws an error)."),qWe.forEach(t),hRr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var E7=s(Vt);T(zx.$$.fragment,E7),pRr=i(E7),OEe=n(E7,"P",{});var uNt=s(OEe);_Rr=r(uNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uNt.forEach(t),uRr=i(E7),qc=n(E7,"P",{});var Ute=s(qc);bRr=r(Ute,`Note:
Loading a model from its configuration file does `),VEe=n(Ute,"STRONG",{});var bNt=s(VEe);vRr=r(bNt,"not"),bNt.forEach(t),FRr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(Ute,"A",{href:!0});var vNt=s(JK);TRr=r(vNt,"from_pretrained()"),vNt.forEach(t),MRr=r(Ute," to load the model weights."),Ute.forEach(t),ERr=i(E7),T(e5.$$.fragment,E7),E7.forEach(t),CRr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Qx.$$.fragment,Jl),wRr=i(Jl),XEe=n(Jl,"P",{});var FNt=s(XEe);ARr=r(FNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FNt.forEach(t),LRr=i(Jl),un=n(Jl,"P",{});var C7=s(un);yRr=r(C7,"The model class to instantiate is selected based on the "),zEe=n(C7,"CODE",{});var TNt=s(zEe);xRr=r(TNt,"model_type"),TNt.forEach(t),$Rr=r(C7,` property of the config object (either
passed as an argument or loaded from `),QEe=n(C7,"CODE",{});var MNt=s(QEe);kRr=r(MNt,"pretrained_model_name_or_path"),MNt.forEach(t),SRr=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=n(C7,"CODE",{});var ENt=s(WEe);RRr=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),PRr=r(C7,":"),C7.forEach(t),BRr=i(Jl),de=n(Jl,"UL",{});var me=s(de);o5=n(me,"LI",{});var fGe=s(o5);HEe=n(fGe,"STRONG",{});var CNt=s(HEe);IRr=r(CNt,"albert"),CNt.forEach(t),NRr=r(fGe," \u2014 "),YK=n(fGe,"A",{href:!0});var wNt=s(YK);qRr=r(wNt,"TFAlbertForTokenClassification"),wNt.forEach(t),jRr=r(fGe," (ALBERT model)"),fGe.forEach(t),DRr=i(me),r5=n(me,"LI",{});var mGe=s(r5);UEe=n(mGe,"STRONG",{});var ANt=s(UEe);GRr=r(ANt,"bert"),ANt.forEach(t),ORr=r(mGe," \u2014 "),KK=n(mGe,"A",{href:!0});var LNt=s(KK);VRr=r(LNt,"TFBertForTokenClassification"),LNt.forEach(t),XRr=r(mGe," (BERT model)"),mGe.forEach(t),zRr=i(me),t5=n(me,"LI",{});var gGe=s(t5);JEe=n(gGe,"STRONG",{});var yNt=s(JEe);QRr=r(yNt,"camembert"),yNt.forEach(t),WRr=r(gGe," \u2014 "),ZK=n(gGe,"A",{href:!0});var xNt=s(ZK);HRr=r(xNt,"TFCamembertForTokenClassification"),xNt.forEach(t),URr=r(gGe," (CamemBERT model)"),gGe.forEach(t),JRr=i(me),a5=n(me,"LI",{});var hGe=s(a5);YEe=n(hGe,"STRONG",{});var $Nt=s(YEe);YRr=r($Nt,"convbert"),$Nt.forEach(t),KRr=r(hGe," \u2014 "),eZ=n(hGe,"A",{href:!0});var kNt=s(eZ);ZRr=r(kNt,"TFConvBertForTokenClassification"),kNt.forEach(t),ePr=r(hGe," (ConvBERT model)"),hGe.forEach(t),oPr=i(me),n5=n(me,"LI",{});var pGe=s(n5);KEe=n(pGe,"STRONG",{});var SNt=s(KEe);rPr=r(SNt,"deberta"),SNt.forEach(t),tPr=r(pGe," \u2014 "),oZ=n(pGe,"A",{href:!0});var RNt=s(oZ);aPr=r(RNt,"TFDebertaForTokenClassification"),RNt.forEach(t),nPr=r(pGe," (DeBERTa model)"),pGe.forEach(t),sPr=i(me),s5=n(me,"LI",{});var _Ge=s(s5);ZEe=n(_Ge,"STRONG",{});var PNt=s(ZEe);lPr=r(PNt,"deberta-v2"),PNt.forEach(t),iPr=r(_Ge," \u2014 "),rZ=n(_Ge,"A",{href:!0});var BNt=s(rZ);dPr=r(BNt,"TFDebertaV2ForTokenClassification"),BNt.forEach(t),cPr=r(_Ge," (DeBERTa-v2 model)"),_Ge.forEach(t),fPr=i(me),l5=n(me,"LI",{});var uGe=s(l5);eCe=n(uGe,"STRONG",{});var INt=s(eCe);mPr=r(INt,"distilbert"),INt.forEach(t),gPr=r(uGe," \u2014 "),tZ=n(uGe,"A",{href:!0});var NNt=s(tZ);hPr=r(NNt,"TFDistilBertForTokenClassification"),NNt.forEach(t),pPr=r(uGe," (DistilBERT model)"),uGe.forEach(t),_Pr=i(me),i5=n(me,"LI",{});var bGe=s(i5);oCe=n(bGe,"STRONG",{});var qNt=s(oCe);uPr=r(qNt,"electra"),qNt.forEach(t),bPr=r(bGe," \u2014 "),aZ=n(bGe,"A",{href:!0});var jNt=s(aZ);vPr=r(jNt,"TFElectraForTokenClassification"),jNt.forEach(t),FPr=r(bGe," (ELECTRA model)"),bGe.forEach(t),TPr=i(me),d5=n(me,"LI",{});var vGe=s(d5);rCe=n(vGe,"STRONG",{});var DNt=s(rCe);MPr=r(DNt,"flaubert"),DNt.forEach(t),EPr=r(vGe," \u2014 "),nZ=n(vGe,"A",{href:!0});var GNt=s(nZ);CPr=r(GNt,"TFFlaubertForTokenClassification"),GNt.forEach(t),wPr=r(vGe," (FlauBERT model)"),vGe.forEach(t),APr=i(me),c5=n(me,"LI",{});var FGe=s(c5);tCe=n(FGe,"STRONG",{});var ONt=s(tCe);LPr=r(ONt,"funnel"),ONt.forEach(t),yPr=r(FGe," \u2014 "),sZ=n(FGe,"A",{href:!0});var VNt=s(sZ);xPr=r(VNt,"TFFunnelForTokenClassification"),VNt.forEach(t),$Pr=r(FGe," (Funnel Transformer model)"),FGe.forEach(t),kPr=i(me),f5=n(me,"LI",{});var TGe=s(f5);aCe=n(TGe,"STRONG",{});var XNt=s(aCe);SPr=r(XNt,"layoutlm"),XNt.forEach(t),RPr=r(TGe," \u2014 "),lZ=n(TGe,"A",{href:!0});var zNt=s(lZ);PPr=r(zNt,"TFLayoutLMForTokenClassification"),zNt.forEach(t),BPr=r(TGe," (LayoutLM model)"),TGe.forEach(t),IPr=i(me),m5=n(me,"LI",{});var MGe=s(m5);nCe=n(MGe,"STRONG",{});var QNt=s(nCe);NPr=r(QNt,"longformer"),QNt.forEach(t),qPr=r(MGe," \u2014 "),iZ=n(MGe,"A",{href:!0});var WNt=s(iZ);jPr=r(WNt,"TFLongformerForTokenClassification"),WNt.forEach(t),DPr=r(MGe," (Longformer model)"),MGe.forEach(t),GPr=i(me),g5=n(me,"LI",{});var EGe=s(g5);sCe=n(EGe,"STRONG",{});var HNt=s(sCe);OPr=r(HNt,"mobilebert"),HNt.forEach(t),VPr=r(EGe," \u2014 "),dZ=n(EGe,"A",{href:!0});var UNt=s(dZ);XPr=r(UNt,"TFMobileBertForTokenClassification"),UNt.forEach(t),zPr=r(EGe," (MobileBERT model)"),EGe.forEach(t),QPr=i(me),h5=n(me,"LI",{});var CGe=s(h5);lCe=n(CGe,"STRONG",{});var JNt=s(lCe);WPr=r(JNt,"mpnet"),JNt.forEach(t),HPr=r(CGe," \u2014 "),cZ=n(CGe,"A",{href:!0});var YNt=s(cZ);UPr=r(YNt,"TFMPNetForTokenClassification"),YNt.forEach(t),JPr=r(CGe," (MPNet model)"),CGe.forEach(t),YPr=i(me),p5=n(me,"LI",{});var wGe=s(p5);iCe=n(wGe,"STRONG",{});var KNt=s(iCe);KPr=r(KNt,"rembert"),KNt.forEach(t),ZPr=r(wGe," \u2014 "),fZ=n(wGe,"A",{href:!0});var ZNt=s(fZ);eBr=r(ZNt,"TFRemBertForTokenClassification"),ZNt.forEach(t),oBr=r(wGe," (RemBERT model)"),wGe.forEach(t),rBr=i(me),_5=n(me,"LI",{});var AGe=s(_5);dCe=n(AGe,"STRONG",{});var eqt=s(dCe);tBr=r(eqt,"roberta"),eqt.forEach(t),aBr=r(AGe," \u2014 "),mZ=n(AGe,"A",{href:!0});var oqt=s(mZ);nBr=r(oqt,"TFRobertaForTokenClassification"),oqt.forEach(t),sBr=r(AGe," (RoBERTa model)"),AGe.forEach(t),lBr=i(me),u5=n(me,"LI",{});var LGe=s(u5);cCe=n(LGe,"STRONG",{});var rqt=s(cCe);iBr=r(rqt,"roformer"),rqt.forEach(t),dBr=r(LGe," \u2014 "),gZ=n(LGe,"A",{href:!0});var tqt=s(gZ);cBr=r(tqt,"TFRoFormerForTokenClassification"),tqt.forEach(t),fBr=r(LGe," (RoFormer model)"),LGe.forEach(t),mBr=i(me),b5=n(me,"LI",{});var yGe=s(b5);fCe=n(yGe,"STRONG",{});var aqt=s(fCe);gBr=r(aqt,"xlm"),aqt.forEach(t),hBr=r(yGe," \u2014 "),hZ=n(yGe,"A",{href:!0});var nqt=s(hZ);pBr=r(nqt,"TFXLMForTokenClassification"),nqt.forEach(t),_Br=r(yGe," (XLM model)"),yGe.forEach(t),uBr=i(me),v5=n(me,"LI",{});var xGe=s(v5);mCe=n(xGe,"STRONG",{});var sqt=s(mCe);bBr=r(sqt,"xlm-roberta"),sqt.forEach(t),vBr=r(xGe," \u2014 "),pZ=n(xGe,"A",{href:!0});var lqt=s(pZ);FBr=r(lqt,"TFXLMRobertaForTokenClassification"),lqt.forEach(t),TBr=r(xGe," (XLM-RoBERTa model)"),xGe.forEach(t),MBr=i(me),F5=n(me,"LI",{});var $Ge=s(F5);gCe=n($Ge,"STRONG",{});var iqt=s(gCe);EBr=r(iqt,"xlnet"),iqt.forEach(t),CBr=r($Ge," \u2014 "),_Z=n($Ge,"A",{href:!0});var dqt=s(_Z);wBr=r(dqt,"TFXLNetForTokenClassification"),dqt.forEach(t),ABr=r($Ge," (XLNet model)"),$Ge.forEach(t),me.forEach(t),LBr=i(Jl),T(T5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),$ze=i(f),jc=n(f,"H2",{class:!0});var jWe=s(jc);M5=n(jWe,"A",{id:!0,class:!0,href:!0});var cqt=s(M5);hCe=n(cqt,"SPAN",{});var fqt=s(hCe);T(Wx.$$.fragment,fqt),fqt.forEach(t),cqt.forEach(t),yBr=i(jWe),pCe=n(jWe,"SPAN",{});var mqt=s(pCe);xBr=r(mqt,"TFAutoModelForQuestionAnswering"),mqt.forEach(t),jWe.forEach(t),kze=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Hx.$$.fragment,Yl),$Br=i(Yl),Dc=n(Yl,"P",{});var Jte=s(Dc);kBr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uZ=n(Jte,"A",{href:!0});var gqt=s(uZ);SBr=r(gqt,"from_pretrained()"),gqt.forEach(t),RBr=r(Jte," class method or the "),bZ=n(Jte,"A",{href:!0});var hqt=s(bZ);PBr=r(hqt,"from_config()"),hqt.forEach(t),BBr=r(Jte,` class
method.`),Jte.forEach(t),IBr=i(Yl),Ux=n(Yl,"P",{});var DWe=s(Ux);NBr=r(DWe,"This class cannot be instantiated directly using "),_Ce=n(DWe,"CODE",{});var pqt=s(_Ce);qBr=r(pqt,"__init__()"),pqt.forEach(t),jBr=r(DWe," (throws an error)."),DWe.forEach(t),DBr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var w7=s(Xt);T(Jx.$$.fragment,w7),GBr=i(w7),uCe=n(w7,"P",{});var _qt=s(uCe);OBr=r(_qt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_qt.forEach(t),VBr=i(w7),Gc=n(w7,"P",{});var Yte=s(Gc);XBr=r(Yte,`Note:
Loading a model from its configuration file does `),bCe=n(Yte,"STRONG",{});var uqt=s(bCe);zBr=r(uqt,"not"),uqt.forEach(t),QBr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Yte,"A",{href:!0});var bqt=s(vZ);WBr=r(bqt,"from_pretrained()"),bqt.forEach(t),HBr=r(Yte," to load the model weights."),Yte.forEach(t),UBr=i(w7),T(E5.$$.fragment,w7),w7.forEach(t),JBr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(Yx.$$.fragment,Kl),YBr=i(Kl),vCe=n(Kl,"P",{});var vqt=s(vCe);KBr=r(vqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vqt.forEach(t),ZBr=i(Kl),bn=n(Kl,"P",{});var A7=s(bn);eIr=r(A7,"The model class to instantiate is selected based on the "),FCe=n(A7,"CODE",{});var Fqt=s(FCe);oIr=r(Fqt,"model_type"),Fqt.forEach(t),rIr=r(A7,` property of the config object (either
passed as an argument or loaded from `),TCe=n(A7,"CODE",{});var Tqt=s(TCe);tIr=r(Tqt,"pretrained_model_name_or_path"),Tqt.forEach(t),aIr=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(A7,"CODE",{});var Mqt=s(MCe);nIr=r(Mqt,"pretrained_model_name_or_path"),Mqt.forEach(t),sIr=r(A7,":"),A7.forEach(t),lIr=i(Kl),ce=n(Kl,"UL",{});var ge=s(ce);C5=n(ge,"LI",{});var kGe=s(C5);ECe=n(kGe,"STRONG",{});var Eqt=s(ECe);iIr=r(Eqt,"albert"),Eqt.forEach(t),dIr=r(kGe," \u2014 "),FZ=n(kGe,"A",{href:!0});var Cqt=s(FZ);cIr=r(Cqt,"TFAlbertForQuestionAnswering"),Cqt.forEach(t),fIr=r(kGe," (ALBERT model)"),kGe.forEach(t),mIr=i(ge),w5=n(ge,"LI",{});var SGe=s(w5);CCe=n(SGe,"STRONG",{});var wqt=s(CCe);gIr=r(wqt,"bert"),wqt.forEach(t),hIr=r(SGe," \u2014 "),TZ=n(SGe,"A",{href:!0});var Aqt=s(TZ);pIr=r(Aqt,"TFBertForQuestionAnswering"),Aqt.forEach(t),_Ir=r(SGe," (BERT model)"),SGe.forEach(t),uIr=i(ge),A5=n(ge,"LI",{});var RGe=s(A5);wCe=n(RGe,"STRONG",{});var Lqt=s(wCe);bIr=r(Lqt,"camembert"),Lqt.forEach(t),vIr=r(RGe," \u2014 "),MZ=n(RGe,"A",{href:!0});var yqt=s(MZ);FIr=r(yqt,"TFCamembertForQuestionAnswering"),yqt.forEach(t),TIr=r(RGe," (CamemBERT model)"),RGe.forEach(t),MIr=i(ge),L5=n(ge,"LI",{});var PGe=s(L5);ACe=n(PGe,"STRONG",{});var xqt=s(ACe);EIr=r(xqt,"convbert"),xqt.forEach(t),CIr=r(PGe," \u2014 "),EZ=n(PGe,"A",{href:!0});var $qt=s(EZ);wIr=r($qt,"TFConvBertForQuestionAnswering"),$qt.forEach(t),AIr=r(PGe," (ConvBERT model)"),PGe.forEach(t),LIr=i(ge),y5=n(ge,"LI",{});var BGe=s(y5);LCe=n(BGe,"STRONG",{});var kqt=s(LCe);yIr=r(kqt,"deberta"),kqt.forEach(t),xIr=r(BGe," \u2014 "),CZ=n(BGe,"A",{href:!0});var Sqt=s(CZ);$Ir=r(Sqt,"TFDebertaForQuestionAnswering"),Sqt.forEach(t),kIr=r(BGe," (DeBERTa model)"),BGe.forEach(t),SIr=i(ge),x5=n(ge,"LI",{});var IGe=s(x5);yCe=n(IGe,"STRONG",{});var Rqt=s(yCe);RIr=r(Rqt,"deberta-v2"),Rqt.forEach(t),PIr=r(IGe," \u2014 "),wZ=n(IGe,"A",{href:!0});var Pqt=s(wZ);BIr=r(Pqt,"TFDebertaV2ForQuestionAnswering"),Pqt.forEach(t),IIr=r(IGe," (DeBERTa-v2 model)"),IGe.forEach(t),NIr=i(ge),$5=n(ge,"LI",{});var NGe=s($5);xCe=n(NGe,"STRONG",{});var Bqt=s(xCe);qIr=r(Bqt,"distilbert"),Bqt.forEach(t),jIr=r(NGe," \u2014 "),AZ=n(NGe,"A",{href:!0});var Iqt=s(AZ);DIr=r(Iqt,"TFDistilBertForQuestionAnswering"),Iqt.forEach(t),GIr=r(NGe," (DistilBERT model)"),NGe.forEach(t),OIr=i(ge),k5=n(ge,"LI",{});var qGe=s(k5);$Ce=n(qGe,"STRONG",{});var Nqt=s($Ce);VIr=r(Nqt,"electra"),Nqt.forEach(t),XIr=r(qGe," \u2014 "),LZ=n(qGe,"A",{href:!0});var qqt=s(LZ);zIr=r(qqt,"TFElectraForQuestionAnswering"),qqt.forEach(t),QIr=r(qGe," (ELECTRA model)"),qGe.forEach(t),WIr=i(ge),S5=n(ge,"LI",{});var jGe=s(S5);kCe=n(jGe,"STRONG",{});var jqt=s(kCe);HIr=r(jqt,"flaubert"),jqt.forEach(t),UIr=r(jGe," \u2014 "),yZ=n(jGe,"A",{href:!0});var Dqt=s(yZ);JIr=r(Dqt,"TFFlaubertForQuestionAnsweringSimple"),Dqt.forEach(t),YIr=r(jGe," (FlauBERT model)"),jGe.forEach(t),KIr=i(ge),R5=n(ge,"LI",{});var DGe=s(R5);SCe=n(DGe,"STRONG",{});var Gqt=s(SCe);ZIr=r(Gqt,"funnel"),Gqt.forEach(t),eNr=r(DGe," \u2014 "),xZ=n(DGe,"A",{href:!0});var Oqt=s(xZ);oNr=r(Oqt,"TFFunnelForQuestionAnswering"),Oqt.forEach(t),rNr=r(DGe," (Funnel Transformer model)"),DGe.forEach(t),tNr=i(ge),P5=n(ge,"LI",{});var GGe=s(P5);RCe=n(GGe,"STRONG",{});var Vqt=s(RCe);aNr=r(Vqt,"gptj"),Vqt.forEach(t),nNr=r(GGe," \u2014 "),$Z=n(GGe,"A",{href:!0});var Xqt=s($Z);sNr=r(Xqt,"TFGPTJForQuestionAnswering"),Xqt.forEach(t),lNr=r(GGe," (GPT-J model)"),GGe.forEach(t),iNr=i(ge),B5=n(ge,"LI",{});var OGe=s(B5);PCe=n(OGe,"STRONG",{});var zqt=s(PCe);dNr=r(zqt,"longformer"),zqt.forEach(t),cNr=r(OGe," \u2014 "),kZ=n(OGe,"A",{href:!0});var Qqt=s(kZ);fNr=r(Qqt,"TFLongformerForQuestionAnswering"),Qqt.forEach(t),mNr=r(OGe," (Longformer model)"),OGe.forEach(t),gNr=i(ge),I5=n(ge,"LI",{});var VGe=s(I5);BCe=n(VGe,"STRONG",{});var Wqt=s(BCe);hNr=r(Wqt,"mobilebert"),Wqt.forEach(t),pNr=r(VGe," \u2014 "),SZ=n(VGe,"A",{href:!0});var Hqt=s(SZ);_Nr=r(Hqt,"TFMobileBertForQuestionAnswering"),Hqt.forEach(t),uNr=r(VGe," (MobileBERT model)"),VGe.forEach(t),bNr=i(ge),N5=n(ge,"LI",{});var XGe=s(N5);ICe=n(XGe,"STRONG",{});var Uqt=s(ICe);vNr=r(Uqt,"mpnet"),Uqt.forEach(t),FNr=r(XGe," \u2014 "),RZ=n(XGe,"A",{href:!0});var Jqt=s(RZ);TNr=r(Jqt,"TFMPNetForQuestionAnswering"),Jqt.forEach(t),MNr=r(XGe," (MPNet model)"),XGe.forEach(t),ENr=i(ge),q5=n(ge,"LI",{});var zGe=s(q5);NCe=n(zGe,"STRONG",{});var Yqt=s(NCe);CNr=r(Yqt,"rembert"),Yqt.forEach(t),wNr=r(zGe," \u2014 "),PZ=n(zGe,"A",{href:!0});var Kqt=s(PZ);ANr=r(Kqt,"TFRemBertForQuestionAnswering"),Kqt.forEach(t),LNr=r(zGe," (RemBERT model)"),zGe.forEach(t),yNr=i(ge),j5=n(ge,"LI",{});var QGe=s(j5);qCe=n(QGe,"STRONG",{});var Zqt=s(qCe);xNr=r(Zqt,"roberta"),Zqt.forEach(t),$Nr=r(QGe," \u2014 "),BZ=n(QGe,"A",{href:!0});var ejt=s(BZ);kNr=r(ejt,"TFRobertaForQuestionAnswering"),ejt.forEach(t),SNr=r(QGe," (RoBERTa model)"),QGe.forEach(t),RNr=i(ge),D5=n(ge,"LI",{});var WGe=s(D5);jCe=n(WGe,"STRONG",{});var ojt=s(jCe);PNr=r(ojt,"roformer"),ojt.forEach(t),BNr=r(WGe," \u2014 "),IZ=n(WGe,"A",{href:!0});var rjt=s(IZ);INr=r(rjt,"TFRoFormerForQuestionAnswering"),rjt.forEach(t),NNr=r(WGe," (RoFormer model)"),WGe.forEach(t),qNr=i(ge),G5=n(ge,"LI",{});var HGe=s(G5);DCe=n(HGe,"STRONG",{});var tjt=s(DCe);jNr=r(tjt,"xlm"),tjt.forEach(t),DNr=r(HGe," \u2014 "),NZ=n(HGe,"A",{href:!0});var ajt=s(NZ);GNr=r(ajt,"TFXLMForQuestionAnsweringSimple"),ajt.forEach(t),ONr=r(HGe," (XLM model)"),HGe.forEach(t),VNr=i(ge),O5=n(ge,"LI",{});var UGe=s(O5);GCe=n(UGe,"STRONG",{});var njt=s(GCe);XNr=r(njt,"xlm-roberta"),njt.forEach(t),zNr=r(UGe," \u2014 "),qZ=n(UGe,"A",{href:!0});var sjt=s(qZ);QNr=r(sjt,"TFXLMRobertaForQuestionAnswering"),sjt.forEach(t),WNr=r(UGe," (XLM-RoBERTa model)"),UGe.forEach(t),HNr=i(ge),V5=n(ge,"LI",{});var JGe=s(V5);OCe=n(JGe,"STRONG",{});var ljt=s(OCe);UNr=r(ljt,"xlnet"),ljt.forEach(t),JNr=r(JGe," \u2014 "),jZ=n(JGe,"A",{href:!0});var ijt=s(jZ);YNr=r(ijt,"TFXLNetForQuestionAnsweringSimple"),ijt.forEach(t),KNr=r(JGe," (XLNet model)"),JGe.forEach(t),ge.forEach(t),ZNr=i(Kl),T(X5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Sze=i(f),Oc=n(f,"H2",{class:!0});var GWe=s(Oc);z5=n(GWe,"A",{id:!0,class:!0,href:!0});var djt=s(z5);VCe=n(djt,"SPAN",{});var cjt=s(VCe);T(Kx.$$.fragment,cjt),cjt.forEach(t),djt.forEach(t),eqr=i(GWe),XCe=n(GWe,"SPAN",{});var fjt=s(XCe);oqr=r(fjt,"TFAutoModelForVision2Seq"),fjt.forEach(t),GWe.forEach(t),Rze=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(Zx.$$.fragment,Zl),rqr=i(Zl),Vc=n(Zl,"P",{});var Kte=s(Vc);tqr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DZ=n(Kte,"A",{href:!0});var mjt=s(DZ);aqr=r(mjt,"from_pretrained()"),mjt.forEach(t),nqr=r(Kte," class method or the "),GZ=n(Kte,"A",{href:!0});var gjt=s(GZ);sqr=r(gjt,"from_config()"),gjt.forEach(t),lqr=r(Kte,` class
method.`),Kte.forEach(t),iqr=i(Zl),e$=n(Zl,"P",{});var OWe=s(e$);dqr=r(OWe,"This class cannot be instantiated directly using "),zCe=n(OWe,"CODE",{});var hjt=s(zCe);cqr=r(hjt,"__init__()"),hjt.forEach(t),fqr=r(OWe," (throws an error)."),OWe.forEach(t),mqr=i(Zl),zt=n(Zl,"DIV",{class:!0});var L7=s(zt);T(o$.$$.fragment,L7),gqr=i(L7),QCe=n(L7,"P",{});var pjt=s(QCe);hqr=r(pjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pjt.forEach(t),pqr=i(L7),Xc=n(L7,"P",{});var Zte=s(Xc);_qr=r(Zte,`Note:
Loading a model from its configuration file does `),WCe=n(Zte,"STRONG",{});var _jt=s(WCe);uqr=r(_jt,"not"),_jt.forEach(t),bqr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Zte,"A",{href:!0});var ujt=s(OZ);vqr=r(ujt,"from_pretrained()"),ujt.forEach(t),Fqr=r(Zte," to load the model weights."),Zte.forEach(t),Tqr=i(L7),T(Q5.$$.fragment,L7),L7.forEach(t),Mqr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(r$.$$.fragment,ei),Eqr=i(ei),HCe=n(ei,"P",{});var bjt=s(HCe);Cqr=r(bjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bjt.forEach(t),wqr=i(ei),vn=n(ei,"P",{});var y7=s(vn);Aqr=r(y7,"The model class to instantiate is selected based on the "),UCe=n(y7,"CODE",{});var vjt=s(UCe);Lqr=r(vjt,"model_type"),vjt.forEach(t),yqr=r(y7,` property of the config object (either
passed as an argument or loaded from `),JCe=n(y7,"CODE",{});var Fjt=s(JCe);xqr=r(Fjt,"pretrained_model_name_or_path"),Fjt.forEach(t),$qr=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(y7,"CODE",{});var Tjt=s(YCe);kqr=r(Tjt,"pretrained_model_name_or_path"),Tjt.forEach(t),Sqr=r(y7,":"),y7.forEach(t),Rqr=i(ei),KCe=n(ei,"UL",{});var Mjt=s(KCe);W5=n(Mjt,"LI",{});var YGe=s(W5);ZCe=n(YGe,"STRONG",{});var Ejt=s(ZCe);Pqr=r(Ejt,"vision-encoder-decoder"),Ejt.forEach(t),Bqr=r(YGe," \u2014 "),VZ=n(YGe,"A",{href:!0});var Cjt=s(VZ);Iqr=r(Cjt,"TFVisionEncoderDecoderModel"),Cjt.forEach(t),Nqr=r(YGe," (Vision Encoder decoder model)"),YGe.forEach(t),Mjt.forEach(t),qqr=i(ei),T(H5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Pze=i(f),zc=n(f,"H2",{class:!0});var VWe=s(zc);U5=n(VWe,"A",{id:!0,class:!0,href:!0});var wjt=s(U5);e5e=n(wjt,"SPAN",{});var Ajt=s(e5e);T(t$.$$.fragment,Ajt),Ajt.forEach(t),wjt.forEach(t),jqr=i(VWe),o5e=n(VWe,"SPAN",{});var Ljt=s(o5e);Dqr=r(Ljt,"TFAutoModelForSpeechSeq2Seq"),Ljt.forEach(t),VWe.forEach(t),Bze=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(a$.$$.fragment,oi),Gqr=i(oi),Qc=n(oi,"P",{});var eae=s(Qc);Oqr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XZ=n(eae,"A",{href:!0});var yjt=s(XZ);Vqr=r(yjt,"from_pretrained()"),yjt.forEach(t),Xqr=r(eae," class method or the "),zZ=n(eae,"A",{href:!0});var xjt=s(zZ);zqr=r(xjt,"from_config()"),xjt.forEach(t),Qqr=r(eae,` class
method.`),eae.forEach(t),Wqr=i(oi),n$=n(oi,"P",{});var XWe=s(n$);Hqr=r(XWe,"This class cannot be instantiated directly using "),r5e=n(XWe,"CODE",{});var $jt=s(r5e);Uqr=r($jt,"__init__()"),$jt.forEach(t),Jqr=r(XWe," (throws an error)."),XWe.forEach(t),Yqr=i(oi),Qt=n(oi,"DIV",{class:!0});var x7=s(Qt);T(s$.$$.fragment,x7),Kqr=i(x7),t5e=n(x7,"P",{});var kjt=s(t5e);Zqr=r(kjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kjt.forEach(t),ejr=i(x7),Wc=n(x7,"P",{});var oae=s(Wc);ojr=r(oae,`Note:
Loading a model from its configuration file does `),a5e=n(oae,"STRONG",{});var Sjt=s(a5e);rjr=r(Sjt,"not"),Sjt.forEach(t),tjr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(oae,"A",{href:!0});var Rjt=s(QZ);ajr=r(Rjt,"from_pretrained()"),Rjt.forEach(t),njr=r(oae," to load the model weights."),oae.forEach(t),sjr=i(x7),T(J5.$$.fragment,x7),x7.forEach(t),ljr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(l$.$$.fragment,ri),ijr=i(ri),n5e=n(ri,"P",{});var Pjt=s(n5e);djr=r(Pjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pjt.forEach(t),cjr=i(ri),Fn=n(ri,"P",{});var $7=s(Fn);fjr=r($7,"The model class to instantiate is selected based on the "),s5e=n($7,"CODE",{});var Bjt=s(s5e);mjr=r(Bjt,"model_type"),Bjt.forEach(t),gjr=r($7,` property of the config object (either
passed as an argument or loaded from `),l5e=n($7,"CODE",{});var Ijt=s(l5e);hjr=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),pjr=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n($7,"CODE",{});var Njt=s(i5e);_jr=r(Njt,"pretrained_model_name_or_path"),Njt.forEach(t),ujr=r($7,":"),$7.forEach(t),bjr=i(ri),d5e=n(ri,"UL",{});var qjt=s(d5e);Y5=n(qjt,"LI",{});var KGe=s(Y5);c5e=n(KGe,"STRONG",{});var jjt=s(c5e);vjr=r(jjt,"speech_to_text"),jjt.forEach(t),Fjr=r(KGe," \u2014 "),WZ=n(KGe,"A",{href:!0});var Djt=s(WZ);Tjr=r(Djt,"TFSpeech2TextForConditionalGeneration"),Djt.forEach(t),Mjr=r(KGe," (Speech2Text model)"),KGe.forEach(t),qjt.forEach(t),Ejr=i(ri),T(K5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Ize=i(f),Hc=n(f,"H2",{class:!0});var zWe=s(Hc);Z5=n(zWe,"A",{id:!0,class:!0,href:!0});var Gjt=s(Z5);f5e=n(Gjt,"SPAN",{});var Ojt=s(f5e);T(i$.$$.fragment,Ojt),Ojt.forEach(t),Gjt.forEach(t),Cjr=i(zWe),m5e=n(zWe,"SPAN",{});var Vjt=s(m5e);wjr=r(Vjt,"FlaxAutoModel"),Vjt.forEach(t),zWe.forEach(t),Nze=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(d$.$$.fragment,ti),Ajr=i(ti),Uc=n(ti,"P",{});var rae=s(Uc);Ljr=r(rae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HZ=n(rae,"A",{href:!0});var Xjt=s(HZ);yjr=r(Xjt,"from_pretrained()"),Xjt.forEach(t),xjr=r(rae," class method or the "),UZ=n(rae,"A",{href:!0});var zjt=s(UZ);$jr=r(zjt,"from_config()"),zjt.forEach(t),kjr=r(rae,` class
method.`),rae.forEach(t),Sjr=i(ti),c$=n(ti,"P",{});var QWe=s(c$);Rjr=r(QWe,"This class cannot be instantiated directly using "),g5e=n(QWe,"CODE",{});var Qjt=s(g5e);Pjr=r(Qjt,"__init__()"),Qjt.forEach(t),Bjr=r(QWe," (throws an error)."),QWe.forEach(t),Ijr=i(ti),Wt=n(ti,"DIV",{class:!0});var k7=s(Wt);T(f$.$$.fragment,k7),Njr=i(k7),h5e=n(k7,"P",{});var Wjt=s(h5e);qjr=r(Wjt,"Instantiates one of the base model classes of the library from a configuration."),Wjt.forEach(t),jjr=i(k7),Jc=n(k7,"P",{});var tae=s(Jc);Djr=r(tae,`Note:
Loading a model from its configuration file does `),p5e=n(tae,"STRONG",{});var Hjt=s(p5e);Gjr=r(Hjt,"not"),Hjt.forEach(t),Ojr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(tae,"A",{href:!0});var Ujt=s(JZ);Vjr=r(Ujt,"from_pretrained()"),Ujt.forEach(t),Xjr=r(tae," to load the model weights."),tae.forEach(t),zjr=i(k7),T(e0.$$.fragment,k7),k7.forEach(t),Qjr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(m$.$$.fragment,ai),Wjr=i(ai),_5e=n(ai,"P",{});var Jjt=s(_5e);Hjr=r(Jjt,"Instantiate one of the base model classes of the library from a pretrained model."),Jjt.forEach(t),Ujr=i(ai),Tn=n(ai,"P",{});var S7=s(Tn);Jjr=r(S7,"The model class to instantiate is selected based on the "),u5e=n(S7,"CODE",{});var Yjt=s(u5e);Yjr=r(Yjt,"model_type"),Yjt.forEach(t),Kjr=r(S7,` property of the config object (either
passed as an argument or loaded from `),b5e=n(S7,"CODE",{});var Kjt=s(b5e);Zjr=r(Kjt,"pretrained_model_name_or_path"),Kjt.forEach(t),eDr=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(S7,"CODE",{});var Zjt=s(v5e);oDr=r(Zjt,"pretrained_model_name_or_path"),Zjt.forEach(t),rDr=r(S7,":"),S7.forEach(t),tDr=i(ai),oe=n(ai,"UL",{});var ae=s(oe);o0=n(ae,"LI",{});var ZGe=s(o0);F5e=n(ZGe,"STRONG",{});var eDt=s(F5e);aDr=r(eDt,"albert"),eDt.forEach(t),nDr=r(ZGe," \u2014 "),YZ=n(ZGe,"A",{href:!0});var oDt=s(YZ);sDr=r(oDt,"FlaxAlbertModel"),oDt.forEach(t),lDr=r(ZGe," (ALBERT model)"),ZGe.forEach(t),iDr=i(ae),r0=n(ae,"LI",{});var eOe=s(r0);T5e=n(eOe,"STRONG",{});var rDt=s(T5e);dDr=r(rDt,"bart"),rDt.forEach(t),cDr=r(eOe," \u2014 "),KZ=n(eOe,"A",{href:!0});var tDt=s(KZ);fDr=r(tDt,"FlaxBartModel"),tDt.forEach(t),mDr=r(eOe," (BART model)"),eOe.forEach(t),gDr=i(ae),t0=n(ae,"LI",{});var oOe=s(t0);M5e=n(oOe,"STRONG",{});var aDt=s(M5e);hDr=r(aDt,"beit"),aDt.forEach(t),pDr=r(oOe," \u2014 "),ZZ=n(oOe,"A",{href:!0});var nDt=s(ZZ);_Dr=r(nDt,"FlaxBeitModel"),nDt.forEach(t),uDr=r(oOe," (BEiT model)"),oOe.forEach(t),bDr=i(ae),a0=n(ae,"LI",{});var rOe=s(a0);E5e=n(rOe,"STRONG",{});var sDt=s(E5e);vDr=r(sDt,"bert"),sDt.forEach(t),FDr=r(rOe," \u2014 "),eee=n(rOe,"A",{href:!0});var lDt=s(eee);TDr=r(lDt,"FlaxBertModel"),lDt.forEach(t),MDr=r(rOe," (BERT model)"),rOe.forEach(t),EDr=i(ae),n0=n(ae,"LI",{});var tOe=s(n0);C5e=n(tOe,"STRONG",{});var iDt=s(C5e);CDr=r(iDt,"big_bird"),iDt.forEach(t),wDr=r(tOe," \u2014 "),oee=n(tOe,"A",{href:!0});var dDt=s(oee);ADr=r(dDt,"FlaxBigBirdModel"),dDt.forEach(t),LDr=r(tOe," (BigBird model)"),tOe.forEach(t),yDr=i(ae),s0=n(ae,"LI",{});var aOe=s(s0);w5e=n(aOe,"STRONG",{});var cDt=s(w5e);xDr=r(cDt,"blenderbot"),cDt.forEach(t),$Dr=r(aOe," \u2014 "),ree=n(aOe,"A",{href:!0});var fDt=s(ree);kDr=r(fDt,"FlaxBlenderbotModel"),fDt.forEach(t),SDr=r(aOe," (Blenderbot model)"),aOe.forEach(t),RDr=i(ae),l0=n(ae,"LI",{});var nOe=s(l0);A5e=n(nOe,"STRONG",{});var mDt=s(A5e);PDr=r(mDt,"blenderbot-small"),mDt.forEach(t),BDr=r(nOe," \u2014 "),tee=n(nOe,"A",{href:!0});var gDt=s(tee);IDr=r(gDt,"FlaxBlenderbotSmallModel"),gDt.forEach(t),NDr=r(nOe," (BlenderbotSmall model)"),nOe.forEach(t),qDr=i(ae),i0=n(ae,"LI",{});var sOe=s(i0);L5e=n(sOe,"STRONG",{});var hDt=s(L5e);jDr=r(hDt,"clip"),hDt.forEach(t),DDr=r(sOe," \u2014 "),aee=n(sOe,"A",{href:!0});var pDt=s(aee);GDr=r(pDt,"FlaxCLIPModel"),pDt.forEach(t),ODr=r(sOe," (CLIP model)"),sOe.forEach(t),VDr=i(ae),d0=n(ae,"LI",{});var lOe=s(d0);y5e=n(lOe,"STRONG",{});var _Dt=s(y5e);XDr=r(_Dt,"distilbert"),_Dt.forEach(t),zDr=r(lOe," \u2014 "),nee=n(lOe,"A",{href:!0});var uDt=s(nee);QDr=r(uDt,"FlaxDistilBertModel"),uDt.forEach(t),WDr=r(lOe," (DistilBERT model)"),lOe.forEach(t),HDr=i(ae),c0=n(ae,"LI",{});var iOe=s(c0);x5e=n(iOe,"STRONG",{});var bDt=s(x5e);UDr=r(bDt,"electra"),bDt.forEach(t),JDr=r(iOe," \u2014 "),see=n(iOe,"A",{href:!0});var vDt=s(see);YDr=r(vDt,"FlaxElectraModel"),vDt.forEach(t),KDr=r(iOe," (ELECTRA model)"),iOe.forEach(t),ZDr=i(ae),f0=n(ae,"LI",{});var dOe=s(f0);$5e=n(dOe,"STRONG",{});var FDt=s($5e);eGr=r(FDt,"gpt2"),FDt.forEach(t),oGr=r(dOe," \u2014 "),lee=n(dOe,"A",{href:!0});var TDt=s(lee);rGr=r(TDt,"FlaxGPT2Model"),TDt.forEach(t),tGr=r(dOe," (OpenAI GPT-2 model)"),dOe.forEach(t),aGr=i(ae),m0=n(ae,"LI",{});var cOe=s(m0);k5e=n(cOe,"STRONG",{});var MDt=s(k5e);nGr=r(MDt,"gpt_neo"),MDt.forEach(t),sGr=r(cOe," \u2014 "),iee=n(cOe,"A",{href:!0});var EDt=s(iee);lGr=r(EDt,"FlaxGPTNeoModel"),EDt.forEach(t),iGr=r(cOe," (GPT Neo model)"),cOe.forEach(t),dGr=i(ae),g0=n(ae,"LI",{});var fOe=s(g0);S5e=n(fOe,"STRONG",{});var CDt=s(S5e);cGr=r(CDt,"gptj"),CDt.forEach(t),fGr=r(fOe," \u2014 "),dee=n(fOe,"A",{href:!0});var wDt=s(dee);mGr=r(wDt,"FlaxGPTJModel"),wDt.forEach(t),gGr=r(fOe," (GPT-J model)"),fOe.forEach(t),hGr=i(ae),h0=n(ae,"LI",{});var mOe=s(h0);R5e=n(mOe,"STRONG",{});var ADt=s(R5e);pGr=r(ADt,"longt5"),ADt.forEach(t),_Gr=r(mOe," \u2014 "),cee=n(mOe,"A",{href:!0});var LDt=s(cee);uGr=r(LDt,"FlaxLongT5Model"),LDt.forEach(t),bGr=r(mOe," (LongT5 model)"),mOe.forEach(t),vGr=i(ae),p0=n(ae,"LI",{});var gOe=s(p0);P5e=n(gOe,"STRONG",{});var yDt=s(P5e);FGr=r(yDt,"marian"),yDt.forEach(t),TGr=r(gOe," \u2014 "),fee=n(gOe,"A",{href:!0});var xDt=s(fee);MGr=r(xDt,"FlaxMarianModel"),xDt.forEach(t),EGr=r(gOe," (Marian model)"),gOe.forEach(t),CGr=i(ae),_0=n(ae,"LI",{});var hOe=s(_0);B5e=n(hOe,"STRONG",{});var $Dt=s(B5e);wGr=r($Dt,"mbart"),$Dt.forEach(t),AGr=r(hOe," \u2014 "),mee=n(hOe,"A",{href:!0});var kDt=s(mee);LGr=r(kDt,"FlaxMBartModel"),kDt.forEach(t),yGr=r(hOe," (mBART model)"),hOe.forEach(t),xGr=i(ae),u0=n(ae,"LI",{});var pOe=s(u0);I5e=n(pOe,"STRONG",{});var SDt=s(I5e);$Gr=r(SDt,"mt5"),SDt.forEach(t),kGr=r(pOe," \u2014 "),gee=n(pOe,"A",{href:!0});var RDt=s(gee);SGr=r(RDt,"FlaxMT5Model"),RDt.forEach(t),RGr=r(pOe," (MT5 model)"),pOe.forEach(t),PGr=i(ae),b0=n(ae,"LI",{});var _Oe=s(b0);N5e=n(_Oe,"STRONG",{});var PDt=s(N5e);BGr=r(PDt,"opt"),PDt.forEach(t),IGr=r(_Oe," \u2014 "),hee=n(_Oe,"A",{href:!0});var BDt=s(hee);NGr=r(BDt,"FlaxOPTModel"),BDt.forEach(t),qGr=r(_Oe," (OPT model)"),_Oe.forEach(t),jGr=i(ae),v0=n(ae,"LI",{});var uOe=s(v0);q5e=n(uOe,"STRONG",{});var IDt=s(q5e);DGr=r(IDt,"pegasus"),IDt.forEach(t),GGr=r(uOe," \u2014 "),pee=n(uOe,"A",{href:!0});var NDt=s(pee);OGr=r(NDt,"FlaxPegasusModel"),NDt.forEach(t),VGr=r(uOe," (Pegasus model)"),uOe.forEach(t),XGr=i(ae),F0=n(ae,"LI",{});var bOe=s(F0);j5e=n(bOe,"STRONG",{});var qDt=s(j5e);zGr=r(qDt,"roberta"),qDt.forEach(t),QGr=r(bOe," \u2014 "),_ee=n(bOe,"A",{href:!0});var jDt=s(_ee);WGr=r(jDt,"FlaxRobertaModel"),jDt.forEach(t),HGr=r(bOe," (RoBERTa model)"),bOe.forEach(t),UGr=i(ae),T0=n(ae,"LI",{});var vOe=s(T0);D5e=n(vOe,"STRONG",{});var DDt=s(D5e);JGr=r(DDt,"roformer"),DDt.forEach(t),YGr=r(vOe," \u2014 "),uee=n(vOe,"A",{href:!0});var GDt=s(uee);KGr=r(GDt,"FlaxRoFormerModel"),GDt.forEach(t),ZGr=r(vOe," (RoFormer model)"),vOe.forEach(t),eOr=i(ae),M0=n(ae,"LI",{});var FOe=s(M0);G5e=n(FOe,"STRONG",{});var ODt=s(G5e);oOr=r(ODt,"t5"),ODt.forEach(t),rOr=r(FOe," \u2014 "),bee=n(FOe,"A",{href:!0});var VDt=s(bee);tOr=r(VDt,"FlaxT5Model"),VDt.forEach(t),aOr=r(FOe," (T5 model)"),FOe.forEach(t),nOr=i(ae),E0=n(ae,"LI",{});var TOe=s(E0);O5e=n(TOe,"STRONG",{});var XDt=s(O5e);sOr=r(XDt,"vision-text-dual-encoder"),XDt.forEach(t),lOr=r(TOe," \u2014 "),vee=n(TOe,"A",{href:!0});var zDt=s(vee);iOr=r(zDt,"FlaxVisionTextDualEncoderModel"),zDt.forEach(t),dOr=r(TOe," (VisionTextDualEncoder model)"),TOe.forEach(t),cOr=i(ae),C0=n(ae,"LI",{});var MOe=s(C0);V5e=n(MOe,"STRONG",{});var QDt=s(V5e);fOr=r(QDt,"vit"),QDt.forEach(t),mOr=r(MOe," \u2014 "),Fee=n(MOe,"A",{href:!0});var WDt=s(Fee);gOr=r(WDt,"FlaxViTModel"),WDt.forEach(t),hOr=r(MOe," (ViT model)"),MOe.forEach(t),pOr=i(ae),w0=n(ae,"LI",{});var EOe=s(w0);X5e=n(EOe,"STRONG",{});var HDt=s(X5e);_Or=r(HDt,"wav2vec2"),HDt.forEach(t),uOr=r(EOe," \u2014 "),Tee=n(EOe,"A",{href:!0});var UDt=s(Tee);bOr=r(UDt,"FlaxWav2Vec2Model"),UDt.forEach(t),vOr=r(EOe," (Wav2Vec2 model)"),EOe.forEach(t),FOr=i(ae),A0=n(ae,"LI",{});var COe=s(A0);z5e=n(COe,"STRONG",{});var JDt=s(z5e);TOr=r(JDt,"xglm"),JDt.forEach(t),MOr=r(COe," \u2014 "),Mee=n(COe,"A",{href:!0});var YDt=s(Mee);EOr=r(YDt,"FlaxXGLMModel"),YDt.forEach(t),COr=r(COe," (XGLM model)"),COe.forEach(t),wOr=i(ae),L0=n(ae,"LI",{});var wOe=s(L0);Q5e=n(wOe,"STRONG",{});var KDt=s(Q5e);AOr=r(KDt,"xlm-roberta"),KDt.forEach(t),LOr=r(wOe," \u2014 "),Eee=n(wOe,"A",{href:!0});var ZDt=s(Eee);yOr=r(ZDt,"FlaxXLMRobertaModel"),ZDt.forEach(t),xOr=r(wOe," (XLM-RoBERTa model)"),wOe.forEach(t),ae.forEach(t),$Or=i(ai),T(y0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),qze=i(f),Yc=n(f,"H2",{class:!0});var WWe=s(Yc);x0=n(WWe,"A",{id:!0,class:!0,href:!0});var eGt=s(x0);W5e=n(eGt,"SPAN",{});var oGt=s(W5e);T(g$.$$.fragment,oGt),oGt.forEach(t),eGt.forEach(t),kOr=i(WWe),H5e=n(WWe,"SPAN",{});var rGt=s(H5e);SOr=r(rGt,"FlaxAutoModelForCausalLM"),rGt.forEach(t),WWe.forEach(t),jze=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(h$.$$.fragment,ni),ROr=i(ni),Kc=n(ni,"P",{});var aae=s(Kc);POr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cee=n(aae,"A",{href:!0});var tGt=s(Cee);BOr=r(tGt,"from_pretrained()"),tGt.forEach(t),IOr=r(aae," class method or the "),wee=n(aae,"A",{href:!0});var aGt=s(wee);NOr=r(aGt,"from_config()"),aGt.forEach(t),qOr=r(aae,` class
method.`),aae.forEach(t),jOr=i(ni),p$=n(ni,"P",{});var HWe=s(p$);DOr=r(HWe,"This class cannot be instantiated directly using "),U5e=n(HWe,"CODE",{});var nGt=s(U5e);GOr=r(nGt,"__init__()"),nGt.forEach(t),OOr=r(HWe," (throws an error)."),HWe.forEach(t),VOr=i(ni),Ht=n(ni,"DIV",{class:!0});var R7=s(Ht);T(_$.$$.fragment,R7),XOr=i(R7),J5e=n(R7,"P",{});var sGt=s(J5e);zOr=r(sGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sGt.forEach(t),QOr=i(R7),Zc=n(R7,"P",{});var nae=s(Zc);WOr=r(nae,`Note:
Loading a model from its configuration file does `),Y5e=n(nae,"STRONG",{});var lGt=s(Y5e);HOr=r(lGt,"not"),lGt.forEach(t),UOr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=n(nae,"A",{href:!0});var iGt=s(Aee);JOr=r(iGt,"from_pretrained()"),iGt.forEach(t),YOr=r(nae," to load the model weights."),nae.forEach(t),KOr=i(R7),T($0.$$.fragment,R7),R7.forEach(t),ZOr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(u$.$$.fragment,si),eVr=i(si),K5e=n(si,"P",{});var dGt=s(K5e);oVr=r(dGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),dGt.forEach(t),rVr=i(si),Mn=n(si,"P",{});var P7=s(Mn);tVr=r(P7,"The model class to instantiate is selected based on the "),Z5e=n(P7,"CODE",{});var cGt=s(Z5e);aVr=r(cGt,"model_type"),cGt.forEach(t),nVr=r(P7,` property of the config object (either
passed as an argument or loaded from `),e0e=n(P7,"CODE",{});var fGt=s(e0e);sVr=r(fGt,"pretrained_model_name_or_path"),fGt.forEach(t),lVr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=n(P7,"CODE",{});var mGt=s(o0e);iVr=r(mGt,"pretrained_model_name_or_path"),mGt.forEach(t),dVr=r(P7,":"),P7.forEach(t),cVr=i(si),xe=n(si,"UL",{});var Ne=s(xe);k0=n(Ne,"LI",{});var AOe=s(k0);r0e=n(AOe,"STRONG",{});var gGt=s(r0e);fVr=r(gGt,"bart"),gGt.forEach(t),mVr=r(AOe," \u2014 "),Lee=n(AOe,"A",{href:!0});var hGt=s(Lee);gVr=r(hGt,"FlaxBartForCausalLM"),hGt.forEach(t),hVr=r(AOe," (BART model)"),AOe.forEach(t),pVr=i(Ne),S0=n(Ne,"LI",{});var LOe=s(S0);t0e=n(LOe,"STRONG",{});var pGt=s(t0e);_Vr=r(pGt,"bert"),pGt.forEach(t),uVr=r(LOe," \u2014 "),yee=n(LOe,"A",{href:!0});var _Gt=s(yee);bVr=r(_Gt,"FlaxBertForCausalLM"),_Gt.forEach(t),vVr=r(LOe," (BERT model)"),LOe.forEach(t),FVr=i(Ne),R0=n(Ne,"LI",{});var yOe=s(R0);a0e=n(yOe,"STRONG",{});var uGt=s(a0e);TVr=r(uGt,"big_bird"),uGt.forEach(t),MVr=r(yOe," \u2014 "),xee=n(yOe,"A",{href:!0});var bGt=s(xee);EVr=r(bGt,"FlaxBigBirdForCausalLM"),bGt.forEach(t),CVr=r(yOe," (BigBird model)"),yOe.forEach(t),wVr=i(Ne),P0=n(Ne,"LI",{});var xOe=s(P0);n0e=n(xOe,"STRONG",{});var vGt=s(n0e);AVr=r(vGt,"electra"),vGt.forEach(t),LVr=r(xOe," \u2014 "),$ee=n(xOe,"A",{href:!0});var FGt=s($ee);yVr=r(FGt,"FlaxElectraForCausalLM"),FGt.forEach(t),xVr=r(xOe," (ELECTRA model)"),xOe.forEach(t),$Vr=i(Ne),B0=n(Ne,"LI",{});var $Oe=s(B0);s0e=n($Oe,"STRONG",{});var TGt=s(s0e);kVr=r(TGt,"gpt2"),TGt.forEach(t),SVr=r($Oe," \u2014 "),kee=n($Oe,"A",{href:!0});var MGt=s(kee);RVr=r(MGt,"FlaxGPT2LMHeadModel"),MGt.forEach(t),PVr=r($Oe," (OpenAI GPT-2 model)"),$Oe.forEach(t),BVr=i(Ne),I0=n(Ne,"LI",{});var kOe=s(I0);l0e=n(kOe,"STRONG",{});var EGt=s(l0e);IVr=r(EGt,"gpt_neo"),EGt.forEach(t),NVr=r(kOe," \u2014 "),See=n(kOe,"A",{href:!0});var CGt=s(See);qVr=r(CGt,"FlaxGPTNeoForCausalLM"),CGt.forEach(t),jVr=r(kOe," (GPT Neo model)"),kOe.forEach(t),DVr=i(Ne),N0=n(Ne,"LI",{});var SOe=s(N0);i0e=n(SOe,"STRONG",{});var wGt=s(i0e);GVr=r(wGt,"gptj"),wGt.forEach(t),OVr=r(SOe," \u2014 "),Ree=n(SOe,"A",{href:!0});var AGt=s(Ree);VVr=r(AGt,"FlaxGPTJForCausalLM"),AGt.forEach(t),XVr=r(SOe," (GPT-J model)"),SOe.forEach(t),zVr=i(Ne),q0=n(Ne,"LI",{});var ROe=s(q0);d0e=n(ROe,"STRONG",{});var LGt=s(d0e);QVr=r(LGt,"opt"),LGt.forEach(t),WVr=r(ROe," \u2014 "),Pee=n(ROe,"A",{href:!0});var yGt=s(Pee);HVr=r(yGt,"FlaxOPTForCausalLM"),yGt.forEach(t),UVr=r(ROe," (OPT model)"),ROe.forEach(t),JVr=i(Ne),j0=n(Ne,"LI",{});var POe=s(j0);c0e=n(POe,"STRONG",{});var xGt=s(c0e);YVr=r(xGt,"roberta"),xGt.forEach(t),KVr=r(POe," \u2014 "),Bee=n(POe,"A",{href:!0});var $Gt=s(Bee);ZVr=r($Gt,"FlaxRobertaForCausalLM"),$Gt.forEach(t),eXr=r(POe," (RoBERTa model)"),POe.forEach(t),oXr=i(Ne),D0=n(Ne,"LI",{});var BOe=s(D0);f0e=n(BOe,"STRONG",{});var kGt=s(f0e);rXr=r(kGt,"xglm"),kGt.forEach(t),tXr=r(BOe," \u2014 "),Iee=n(BOe,"A",{href:!0});var SGt=s(Iee);aXr=r(SGt,"FlaxXGLMForCausalLM"),SGt.forEach(t),nXr=r(BOe," (XGLM model)"),BOe.forEach(t),Ne.forEach(t),sXr=i(si),T(G0.$$.fragment,si),si.forEach(t),ni.forEach(t),Dze=i(f),ef=n(f,"H2",{class:!0});var UWe=s(ef);O0=n(UWe,"A",{id:!0,class:!0,href:!0});var RGt=s(O0);m0e=n(RGt,"SPAN",{});var PGt=s(m0e);T(b$.$$.fragment,PGt),PGt.forEach(t),RGt.forEach(t),lXr=i(UWe),g0e=n(UWe,"SPAN",{});var BGt=s(g0e);iXr=r(BGt,"FlaxAutoModelForPreTraining"),BGt.forEach(t),UWe.forEach(t),Gze=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(v$.$$.fragment,li),dXr=i(li),of=n(li,"P",{});var sae=s(of);cXr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nee=n(sae,"A",{href:!0});var IGt=s(Nee);fXr=r(IGt,"from_pretrained()"),IGt.forEach(t),mXr=r(sae," class method or the "),qee=n(sae,"A",{href:!0});var NGt=s(qee);gXr=r(NGt,"from_config()"),NGt.forEach(t),hXr=r(sae,` class
method.`),sae.forEach(t),pXr=i(li),F$=n(li,"P",{});var JWe=s(F$);_Xr=r(JWe,"This class cannot be instantiated directly using "),h0e=n(JWe,"CODE",{});var qGt=s(h0e);uXr=r(qGt,"__init__()"),qGt.forEach(t),bXr=r(JWe," (throws an error)."),JWe.forEach(t),vXr=i(li),Ut=n(li,"DIV",{class:!0});var B7=s(Ut);T(T$.$$.fragment,B7),FXr=i(B7),p0e=n(B7,"P",{});var jGt=s(p0e);TXr=r(jGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jGt.forEach(t),MXr=i(B7),rf=n(B7,"P",{});var lae=s(rf);EXr=r(lae,`Note:
Loading a model from its configuration file does `),_0e=n(lae,"STRONG",{});var DGt=s(_0e);CXr=r(DGt,"not"),DGt.forEach(t),wXr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(lae,"A",{href:!0});var GGt=s(jee);AXr=r(GGt,"from_pretrained()"),GGt.forEach(t),LXr=r(lae," to load the model weights."),lae.forEach(t),yXr=i(B7),T(V0.$$.fragment,B7),B7.forEach(t),xXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(M$.$$.fragment,ii),$Xr=i(ii),u0e=n(ii,"P",{});var OGt=s(u0e);kXr=r(OGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OGt.forEach(t),SXr=i(ii),En=n(ii,"P",{});var I7=s(En);RXr=r(I7,"The model class to instantiate is selected based on the "),b0e=n(I7,"CODE",{});var VGt=s(b0e);PXr=r(VGt,"model_type"),VGt.forEach(t),BXr=r(I7,` property of the config object (either
passed as an argument or loaded from `),v0e=n(I7,"CODE",{});var XGt=s(v0e);IXr=r(XGt,"pretrained_model_name_or_path"),XGt.forEach(t),NXr=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(I7,"CODE",{});var zGt=s(F0e);qXr=r(zGt,"pretrained_model_name_or_path"),zGt.forEach(t),jXr=r(I7,":"),I7.forEach(t),DXr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);X0=n(we,"LI",{});var IOe=s(X0);T0e=n(IOe,"STRONG",{});var QGt=s(T0e);GXr=r(QGt,"albert"),QGt.forEach(t),OXr=r(IOe," \u2014 "),Dee=n(IOe,"A",{href:!0});var WGt=s(Dee);VXr=r(WGt,"FlaxAlbertForPreTraining"),WGt.forEach(t),XXr=r(IOe," (ALBERT model)"),IOe.forEach(t),zXr=i(we),z0=n(we,"LI",{});var NOe=s(z0);M0e=n(NOe,"STRONG",{});var HGt=s(M0e);QXr=r(HGt,"bart"),HGt.forEach(t),WXr=r(NOe," \u2014 "),Gee=n(NOe,"A",{href:!0});var UGt=s(Gee);HXr=r(UGt,"FlaxBartForConditionalGeneration"),UGt.forEach(t),UXr=r(NOe," (BART model)"),NOe.forEach(t),JXr=i(we),Q0=n(we,"LI",{});var qOe=s(Q0);E0e=n(qOe,"STRONG",{});var JGt=s(E0e);YXr=r(JGt,"bert"),JGt.forEach(t),KXr=r(qOe," \u2014 "),Oee=n(qOe,"A",{href:!0});var YGt=s(Oee);ZXr=r(YGt,"FlaxBertForPreTraining"),YGt.forEach(t),ezr=r(qOe," (BERT model)"),qOe.forEach(t),ozr=i(we),W0=n(we,"LI",{});var jOe=s(W0);C0e=n(jOe,"STRONG",{});var KGt=s(C0e);rzr=r(KGt,"big_bird"),KGt.forEach(t),tzr=r(jOe," \u2014 "),Vee=n(jOe,"A",{href:!0});var ZGt=s(Vee);azr=r(ZGt,"FlaxBigBirdForPreTraining"),ZGt.forEach(t),nzr=r(jOe," (BigBird model)"),jOe.forEach(t),szr=i(we),H0=n(we,"LI",{});var DOe=s(H0);w0e=n(DOe,"STRONG",{});var eOt=s(w0e);lzr=r(eOt,"electra"),eOt.forEach(t),izr=r(DOe," \u2014 "),Xee=n(DOe,"A",{href:!0});var oOt=s(Xee);dzr=r(oOt,"FlaxElectraForPreTraining"),oOt.forEach(t),czr=r(DOe," (ELECTRA model)"),DOe.forEach(t),fzr=i(we),U0=n(we,"LI",{});var GOe=s(U0);A0e=n(GOe,"STRONG",{});var rOt=s(A0e);mzr=r(rOt,"longt5"),rOt.forEach(t),gzr=r(GOe," \u2014 "),zee=n(GOe,"A",{href:!0});var tOt=s(zee);hzr=r(tOt,"FlaxLongT5ForConditionalGeneration"),tOt.forEach(t),pzr=r(GOe," (LongT5 model)"),GOe.forEach(t),_zr=i(we),J0=n(we,"LI",{});var OOe=s(J0);L0e=n(OOe,"STRONG",{});var aOt=s(L0e);uzr=r(aOt,"mbart"),aOt.forEach(t),bzr=r(OOe," \u2014 "),Qee=n(OOe,"A",{href:!0});var nOt=s(Qee);vzr=r(nOt,"FlaxMBartForConditionalGeneration"),nOt.forEach(t),Fzr=r(OOe," (mBART model)"),OOe.forEach(t),Tzr=i(we),Y0=n(we,"LI",{});var VOe=s(Y0);y0e=n(VOe,"STRONG",{});var sOt=s(y0e);Mzr=r(sOt,"mt5"),sOt.forEach(t),Ezr=r(VOe," \u2014 "),Wee=n(VOe,"A",{href:!0});var lOt=s(Wee);Czr=r(lOt,"FlaxMT5ForConditionalGeneration"),lOt.forEach(t),wzr=r(VOe," (MT5 model)"),VOe.forEach(t),Azr=i(we),K0=n(we,"LI",{});var XOe=s(K0);x0e=n(XOe,"STRONG",{});var iOt=s(x0e);Lzr=r(iOt,"roberta"),iOt.forEach(t),yzr=r(XOe," \u2014 "),Hee=n(XOe,"A",{href:!0});var dOt=s(Hee);xzr=r(dOt,"FlaxRobertaForMaskedLM"),dOt.forEach(t),$zr=r(XOe," (RoBERTa model)"),XOe.forEach(t),kzr=i(we),Z0=n(we,"LI",{});var zOe=s(Z0);$0e=n(zOe,"STRONG",{});var cOt=s($0e);Szr=r(cOt,"roformer"),cOt.forEach(t),Rzr=r(zOe," \u2014 "),Uee=n(zOe,"A",{href:!0});var fOt=s(Uee);Pzr=r(fOt,"FlaxRoFormerForMaskedLM"),fOt.forEach(t),Bzr=r(zOe," (RoFormer model)"),zOe.forEach(t),Izr=i(we),ew=n(we,"LI",{});var QOe=s(ew);k0e=n(QOe,"STRONG",{});var mOt=s(k0e);Nzr=r(mOt,"t5"),mOt.forEach(t),qzr=r(QOe," \u2014 "),Jee=n(QOe,"A",{href:!0});var gOt=s(Jee);jzr=r(gOt,"FlaxT5ForConditionalGeneration"),gOt.forEach(t),Dzr=r(QOe," (T5 model)"),QOe.forEach(t),Gzr=i(we),ow=n(we,"LI",{});var WOe=s(ow);S0e=n(WOe,"STRONG",{});var hOt=s(S0e);Ozr=r(hOt,"wav2vec2"),hOt.forEach(t),Vzr=r(WOe," \u2014 "),Yee=n(WOe,"A",{href:!0});var pOt=s(Yee);Xzr=r(pOt,"FlaxWav2Vec2ForPreTraining"),pOt.forEach(t),zzr=r(WOe," (Wav2Vec2 model)"),WOe.forEach(t),Qzr=i(we),rw=n(we,"LI",{});var HOe=s(rw);R0e=n(HOe,"STRONG",{});var _Ot=s(R0e);Wzr=r(_Ot,"xlm-roberta"),_Ot.forEach(t),Hzr=r(HOe," \u2014 "),Kee=n(HOe,"A",{href:!0});var uOt=s(Kee);Uzr=r(uOt,"FlaxXLMRobertaForMaskedLM"),uOt.forEach(t),Jzr=r(HOe," (XLM-RoBERTa model)"),HOe.forEach(t),we.forEach(t),Yzr=i(ii),T(tw.$$.fragment,ii),ii.forEach(t),li.forEach(t),Oze=i(f),tf=n(f,"H2",{class:!0});var YWe=s(tf);aw=n(YWe,"A",{id:!0,class:!0,href:!0});var bOt=s(aw);P0e=n(bOt,"SPAN",{});var vOt=s(P0e);T(E$.$$.fragment,vOt),vOt.forEach(t),bOt.forEach(t),Kzr=i(YWe),B0e=n(YWe,"SPAN",{});var FOt=s(B0e);Zzr=r(FOt,"FlaxAutoModelForMaskedLM"),FOt.forEach(t),YWe.forEach(t),Vze=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(C$.$$.fragment,di),eQr=i(di),af=n(di,"P",{});var iae=s(af);oQr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Zee=n(iae,"A",{href:!0});var TOt=s(Zee);rQr=r(TOt,"from_pretrained()"),TOt.forEach(t),tQr=r(iae," class method or the "),eoe=n(iae,"A",{href:!0});var MOt=s(eoe);aQr=r(MOt,"from_config()"),MOt.forEach(t),nQr=r(iae,` class
method.`),iae.forEach(t),sQr=i(di),w$=n(di,"P",{});var KWe=s(w$);lQr=r(KWe,"This class cannot be instantiated directly using "),I0e=n(KWe,"CODE",{});var EOt=s(I0e);iQr=r(EOt,"__init__()"),EOt.forEach(t),dQr=r(KWe," (throws an error)."),KWe.forEach(t),cQr=i(di),Jt=n(di,"DIV",{class:!0});var N7=s(Jt);T(A$.$$.fragment,N7),fQr=i(N7),N0e=n(N7,"P",{});var COt=s(N0e);mQr=r(COt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),COt.forEach(t),gQr=i(N7),nf=n(N7,"P",{});var dae=s(nf);hQr=r(dae,`Note:
Loading a model from its configuration file does `),q0e=n(dae,"STRONG",{});var wOt=s(q0e);pQr=r(wOt,"not"),wOt.forEach(t),_Qr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ooe=n(dae,"A",{href:!0});var AOt=s(ooe);uQr=r(AOt,"from_pretrained()"),AOt.forEach(t),bQr=r(dae," to load the model weights."),dae.forEach(t),vQr=i(N7),T(nw.$$.fragment,N7),N7.forEach(t),FQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(L$.$$.fragment,ci),TQr=i(ci),j0e=n(ci,"P",{});var LOt=s(j0e);MQr=r(LOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LOt.forEach(t),EQr=i(ci),Cn=n(ci,"P",{});var q7=s(Cn);CQr=r(q7,"The model class to instantiate is selected based on the "),D0e=n(q7,"CODE",{});var yOt=s(D0e);wQr=r(yOt,"model_type"),yOt.forEach(t),AQr=r(q7,` property of the config object (either
passed as an argument or loaded from `),G0e=n(q7,"CODE",{});var xOt=s(G0e);LQr=r(xOt,"pretrained_model_name_or_path"),xOt.forEach(t),yQr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(q7,"CODE",{});var $Ot=s(O0e);xQr=r($Ot,"pretrained_model_name_or_path"),$Ot.forEach(t),$Qr=r(q7,":"),q7.forEach(t),kQr=i(ci),$e=n(ci,"UL",{});var qe=s($e);sw=n(qe,"LI",{});var UOe=s(sw);V0e=n(UOe,"STRONG",{});var kOt=s(V0e);SQr=r(kOt,"albert"),kOt.forEach(t),RQr=r(UOe," \u2014 "),roe=n(UOe,"A",{href:!0});var SOt=s(roe);PQr=r(SOt,"FlaxAlbertForMaskedLM"),SOt.forEach(t),BQr=r(UOe," (ALBERT model)"),UOe.forEach(t),IQr=i(qe),lw=n(qe,"LI",{});var JOe=s(lw);X0e=n(JOe,"STRONG",{});var ROt=s(X0e);NQr=r(ROt,"bart"),ROt.forEach(t),qQr=r(JOe," \u2014 "),toe=n(JOe,"A",{href:!0});var POt=s(toe);jQr=r(POt,"FlaxBartForConditionalGeneration"),POt.forEach(t),DQr=r(JOe," (BART model)"),JOe.forEach(t),GQr=i(qe),iw=n(qe,"LI",{});var YOe=s(iw);z0e=n(YOe,"STRONG",{});var BOt=s(z0e);OQr=r(BOt,"bert"),BOt.forEach(t),VQr=r(YOe," \u2014 "),aoe=n(YOe,"A",{href:!0});var IOt=s(aoe);XQr=r(IOt,"FlaxBertForMaskedLM"),IOt.forEach(t),zQr=r(YOe," (BERT model)"),YOe.forEach(t),QQr=i(qe),dw=n(qe,"LI",{});var KOe=s(dw);Q0e=n(KOe,"STRONG",{});var NOt=s(Q0e);WQr=r(NOt,"big_bird"),NOt.forEach(t),HQr=r(KOe," \u2014 "),noe=n(KOe,"A",{href:!0});var qOt=s(noe);UQr=r(qOt,"FlaxBigBirdForMaskedLM"),qOt.forEach(t),JQr=r(KOe," (BigBird model)"),KOe.forEach(t),YQr=i(qe),cw=n(qe,"LI",{});var ZOe=s(cw);W0e=n(ZOe,"STRONG",{});var jOt=s(W0e);KQr=r(jOt,"distilbert"),jOt.forEach(t),ZQr=r(ZOe," \u2014 "),soe=n(ZOe,"A",{href:!0});var DOt=s(soe);eWr=r(DOt,"FlaxDistilBertForMaskedLM"),DOt.forEach(t),oWr=r(ZOe," (DistilBERT model)"),ZOe.forEach(t),rWr=i(qe),fw=n(qe,"LI",{});var eVe=s(fw);H0e=n(eVe,"STRONG",{});var GOt=s(H0e);tWr=r(GOt,"electra"),GOt.forEach(t),aWr=r(eVe," \u2014 "),loe=n(eVe,"A",{href:!0});var OOt=s(loe);nWr=r(OOt,"FlaxElectraForMaskedLM"),OOt.forEach(t),sWr=r(eVe," (ELECTRA model)"),eVe.forEach(t),lWr=i(qe),mw=n(qe,"LI",{});var oVe=s(mw);U0e=n(oVe,"STRONG",{});var VOt=s(U0e);iWr=r(VOt,"mbart"),VOt.forEach(t),dWr=r(oVe," \u2014 "),ioe=n(oVe,"A",{href:!0});var XOt=s(ioe);cWr=r(XOt,"FlaxMBartForConditionalGeneration"),XOt.forEach(t),fWr=r(oVe," (mBART model)"),oVe.forEach(t),mWr=i(qe),gw=n(qe,"LI",{});var rVe=s(gw);J0e=n(rVe,"STRONG",{});var zOt=s(J0e);gWr=r(zOt,"roberta"),zOt.forEach(t),hWr=r(rVe," \u2014 "),doe=n(rVe,"A",{href:!0});var QOt=s(doe);pWr=r(QOt,"FlaxRobertaForMaskedLM"),QOt.forEach(t),_Wr=r(rVe," (RoBERTa model)"),rVe.forEach(t),uWr=i(qe),hw=n(qe,"LI",{});var tVe=s(hw);Y0e=n(tVe,"STRONG",{});var WOt=s(Y0e);bWr=r(WOt,"roformer"),WOt.forEach(t),vWr=r(tVe," \u2014 "),coe=n(tVe,"A",{href:!0});var HOt=s(coe);FWr=r(HOt,"FlaxRoFormerForMaskedLM"),HOt.forEach(t),TWr=r(tVe," (RoFormer model)"),tVe.forEach(t),MWr=i(qe),pw=n(qe,"LI",{});var aVe=s(pw);K0e=n(aVe,"STRONG",{});var UOt=s(K0e);EWr=r(UOt,"xlm-roberta"),UOt.forEach(t),CWr=r(aVe," \u2014 "),foe=n(aVe,"A",{href:!0});var JOt=s(foe);wWr=r(JOt,"FlaxXLMRobertaForMaskedLM"),JOt.forEach(t),AWr=r(aVe," (XLM-RoBERTa model)"),aVe.forEach(t),qe.forEach(t),LWr=i(ci),T(_w.$$.fragment,ci),ci.forEach(t),di.forEach(t),Xze=i(f),sf=n(f,"H2",{class:!0});var ZWe=s(sf);uw=n(ZWe,"A",{id:!0,class:!0,href:!0});var YOt=s(uw);Z0e=n(YOt,"SPAN",{});var KOt=s(Z0e);T(y$.$$.fragment,KOt),KOt.forEach(t),YOt.forEach(t),yWr=i(ZWe),ewe=n(ZWe,"SPAN",{});var ZOt=s(ewe);xWr=r(ZOt,"FlaxAutoModelForSeq2SeqLM"),ZOt.forEach(t),ZWe.forEach(t),zze=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(x$.$$.fragment,fi),$Wr=i(fi),lf=n(fi,"P",{});var cae=s(lf);kWr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),moe=n(cae,"A",{href:!0});var eVt=s(moe);SWr=r(eVt,"from_pretrained()"),eVt.forEach(t),RWr=r(cae," class method or the "),goe=n(cae,"A",{href:!0});var oVt=s(goe);PWr=r(oVt,"from_config()"),oVt.forEach(t),BWr=r(cae,` class
method.`),cae.forEach(t),IWr=i(fi),$$=n(fi,"P",{});var eHe=s($$);NWr=r(eHe,"This class cannot be instantiated directly using "),owe=n(eHe,"CODE",{});var rVt=s(owe);qWr=r(rVt,"__init__()"),rVt.forEach(t),jWr=r(eHe," (throws an error)."),eHe.forEach(t),DWr=i(fi),Yt=n(fi,"DIV",{class:!0});var j7=s(Yt);T(k$.$$.fragment,j7),GWr=i(j7),rwe=n(j7,"P",{});var tVt=s(rwe);OWr=r(tVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tVt.forEach(t),VWr=i(j7),df=n(j7,"P",{});var fae=s(df);XWr=r(fae,`Note:
Loading a model from its configuration file does `),twe=n(fae,"STRONG",{});var aVt=s(twe);zWr=r(aVt,"not"),aVt.forEach(t),QWr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(fae,"A",{href:!0});var nVt=s(hoe);WWr=r(nVt,"from_pretrained()"),nVt.forEach(t),HWr=r(fae," to load the model weights."),fae.forEach(t),UWr=i(j7),T(bw.$$.fragment,j7),j7.forEach(t),JWr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(S$.$$.fragment,mi),YWr=i(mi),awe=n(mi,"P",{});var sVt=s(awe);KWr=r(sVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sVt.forEach(t),ZWr=i(mi),wn=n(mi,"P",{});var D7=s(wn);eHr=r(D7,"The model class to instantiate is selected based on the "),nwe=n(D7,"CODE",{});var lVt=s(nwe);oHr=r(lVt,"model_type"),lVt.forEach(t),rHr=r(D7,` property of the config object (either
passed as an argument or loaded from `),swe=n(D7,"CODE",{});var iVt=s(swe);tHr=r(iVt,"pretrained_model_name_or_path"),iVt.forEach(t),aHr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lwe=n(D7,"CODE",{});var dVt=s(lwe);nHr=r(dVt,"pretrained_model_name_or_path"),dVt.forEach(t),sHr=r(D7,":"),D7.forEach(t),lHr=i(mi),ke=n(mi,"UL",{});var je=s(ke);vw=n(je,"LI",{});var nVe=s(vw);iwe=n(nVe,"STRONG",{});var cVt=s(iwe);iHr=r(cVt,"bart"),cVt.forEach(t),dHr=r(nVe," \u2014 "),poe=n(nVe,"A",{href:!0});var fVt=s(poe);cHr=r(fVt,"FlaxBartForConditionalGeneration"),fVt.forEach(t),fHr=r(nVe," (BART model)"),nVe.forEach(t),mHr=i(je),Fw=n(je,"LI",{});var sVe=s(Fw);dwe=n(sVe,"STRONG",{});var mVt=s(dwe);gHr=r(mVt,"blenderbot"),mVt.forEach(t),hHr=r(sVe," \u2014 "),_oe=n(sVe,"A",{href:!0});var gVt=s(_oe);pHr=r(gVt,"FlaxBlenderbotForConditionalGeneration"),gVt.forEach(t),_Hr=r(sVe," (Blenderbot model)"),sVe.forEach(t),uHr=i(je),Tw=n(je,"LI",{});var lVe=s(Tw);cwe=n(lVe,"STRONG",{});var hVt=s(cwe);bHr=r(hVt,"blenderbot-small"),hVt.forEach(t),vHr=r(lVe," \u2014 "),uoe=n(lVe,"A",{href:!0});var pVt=s(uoe);FHr=r(pVt,"FlaxBlenderbotSmallForConditionalGeneration"),pVt.forEach(t),THr=r(lVe," (BlenderbotSmall model)"),lVe.forEach(t),MHr=i(je),Mw=n(je,"LI",{});var iVe=s(Mw);fwe=n(iVe,"STRONG",{});var _Vt=s(fwe);EHr=r(_Vt,"encoder-decoder"),_Vt.forEach(t),CHr=r(iVe," \u2014 "),boe=n(iVe,"A",{href:!0});var uVt=s(boe);wHr=r(uVt,"FlaxEncoderDecoderModel"),uVt.forEach(t),AHr=r(iVe," (Encoder decoder model)"),iVe.forEach(t),LHr=i(je),Ew=n(je,"LI",{});var dVe=s(Ew);mwe=n(dVe,"STRONG",{});var bVt=s(mwe);yHr=r(bVt,"longt5"),bVt.forEach(t),xHr=r(dVe," \u2014 "),voe=n(dVe,"A",{href:!0});var vVt=s(voe);$Hr=r(vVt,"FlaxLongT5ForConditionalGeneration"),vVt.forEach(t),kHr=r(dVe," (LongT5 model)"),dVe.forEach(t),SHr=i(je),Cw=n(je,"LI",{});var cVe=s(Cw);gwe=n(cVe,"STRONG",{});var FVt=s(gwe);RHr=r(FVt,"marian"),FVt.forEach(t),PHr=r(cVe," \u2014 "),Foe=n(cVe,"A",{href:!0});var TVt=s(Foe);BHr=r(TVt,"FlaxMarianMTModel"),TVt.forEach(t),IHr=r(cVe," (Marian model)"),cVe.forEach(t),NHr=i(je),ww=n(je,"LI",{});var fVe=s(ww);hwe=n(fVe,"STRONG",{});var MVt=s(hwe);qHr=r(MVt,"mbart"),MVt.forEach(t),jHr=r(fVe," \u2014 "),Toe=n(fVe,"A",{href:!0});var EVt=s(Toe);DHr=r(EVt,"FlaxMBartForConditionalGeneration"),EVt.forEach(t),GHr=r(fVe," (mBART model)"),fVe.forEach(t),OHr=i(je),Aw=n(je,"LI",{});var mVe=s(Aw);pwe=n(mVe,"STRONG",{});var CVt=s(pwe);VHr=r(CVt,"mt5"),CVt.forEach(t),XHr=r(mVe," \u2014 "),Moe=n(mVe,"A",{href:!0});var wVt=s(Moe);zHr=r(wVt,"FlaxMT5ForConditionalGeneration"),wVt.forEach(t),QHr=r(mVe," (MT5 model)"),mVe.forEach(t),WHr=i(je),Lw=n(je,"LI",{});var gVe=s(Lw);_we=n(gVe,"STRONG",{});var AVt=s(_we);HHr=r(AVt,"pegasus"),AVt.forEach(t),UHr=r(gVe," \u2014 "),Eoe=n(gVe,"A",{href:!0});var LVt=s(Eoe);JHr=r(LVt,"FlaxPegasusForConditionalGeneration"),LVt.forEach(t),YHr=r(gVe," (Pegasus model)"),gVe.forEach(t),KHr=i(je),yw=n(je,"LI",{});var hVe=s(yw);uwe=n(hVe,"STRONG",{});var yVt=s(uwe);ZHr=r(yVt,"t5"),yVt.forEach(t),eUr=r(hVe," \u2014 "),Coe=n(hVe,"A",{href:!0});var xVt=s(Coe);oUr=r(xVt,"FlaxT5ForConditionalGeneration"),xVt.forEach(t),rUr=r(hVe," (T5 model)"),hVe.forEach(t),je.forEach(t),tUr=i(mi),T(xw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Qze=i(f),cf=n(f,"H2",{class:!0});var oHe=s(cf);$w=n(oHe,"A",{id:!0,class:!0,href:!0});var $Vt=s($w);bwe=n($Vt,"SPAN",{});var kVt=s(bwe);T(R$.$$.fragment,kVt),kVt.forEach(t),$Vt.forEach(t),aUr=i(oHe),vwe=n(oHe,"SPAN",{});var SVt=s(vwe);nUr=r(SVt,"FlaxAutoModelForSequenceClassification"),SVt.forEach(t),oHe.forEach(t),Wze=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(P$.$$.fragment,gi),sUr=i(gi),ff=n(gi,"P",{});var mae=s(ff);lUr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),woe=n(mae,"A",{href:!0});var RVt=s(woe);iUr=r(RVt,"from_pretrained()"),RVt.forEach(t),dUr=r(mae," class method or the "),Aoe=n(mae,"A",{href:!0});var PVt=s(Aoe);cUr=r(PVt,"from_config()"),PVt.forEach(t),fUr=r(mae,` class
method.`),mae.forEach(t),mUr=i(gi),B$=n(gi,"P",{});var rHe=s(B$);gUr=r(rHe,"This class cannot be instantiated directly using "),Fwe=n(rHe,"CODE",{});var BVt=s(Fwe);hUr=r(BVt,"__init__()"),BVt.forEach(t),pUr=r(rHe," (throws an error)."),rHe.forEach(t),_Ur=i(gi),Kt=n(gi,"DIV",{class:!0});var G7=s(Kt);T(I$.$$.fragment,G7),uUr=i(G7),Twe=n(G7,"P",{});var IVt=s(Twe);bUr=r(IVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IVt.forEach(t),vUr=i(G7),mf=n(G7,"P",{});var gae=s(mf);FUr=r(gae,`Note:
Loading a model from its configuration file does `),Mwe=n(gae,"STRONG",{});var NVt=s(Mwe);TUr=r(NVt,"not"),NVt.forEach(t),MUr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(gae,"A",{href:!0});var qVt=s(Loe);EUr=r(qVt,"from_pretrained()"),qVt.forEach(t),CUr=r(gae," to load the model weights."),gae.forEach(t),wUr=i(G7),T(kw.$$.fragment,G7),G7.forEach(t),AUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(N$.$$.fragment,hi),LUr=i(hi),Ewe=n(hi,"P",{});var jVt=s(Ewe);yUr=r(jVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jVt.forEach(t),xUr=i(hi),An=n(hi,"P",{});var O7=s(An);$Ur=r(O7,"The model class to instantiate is selected based on the "),Cwe=n(O7,"CODE",{});var DVt=s(Cwe);kUr=r(DVt,"model_type"),DVt.forEach(t),SUr=r(O7,` property of the config object (either
passed as an argument or loaded from `),wwe=n(O7,"CODE",{});var GVt=s(wwe);RUr=r(GVt,"pretrained_model_name_or_path"),GVt.forEach(t),PUr=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Awe=n(O7,"CODE",{});var OVt=s(Awe);BUr=r(OVt,"pretrained_model_name_or_path"),OVt.forEach(t),IUr=r(O7,":"),O7.forEach(t),NUr=i(hi),Se=n(hi,"UL",{});var De=s(Se);Sw=n(De,"LI",{});var pVe=s(Sw);Lwe=n(pVe,"STRONG",{});var VVt=s(Lwe);qUr=r(VVt,"albert"),VVt.forEach(t),jUr=r(pVe," \u2014 "),yoe=n(pVe,"A",{href:!0});var XVt=s(yoe);DUr=r(XVt,"FlaxAlbertForSequenceClassification"),XVt.forEach(t),GUr=r(pVe," (ALBERT model)"),pVe.forEach(t),OUr=i(De),Rw=n(De,"LI",{});var _Ve=s(Rw);ywe=n(_Ve,"STRONG",{});var zVt=s(ywe);VUr=r(zVt,"bart"),zVt.forEach(t),XUr=r(_Ve," \u2014 "),xoe=n(_Ve,"A",{href:!0});var QVt=s(xoe);zUr=r(QVt,"FlaxBartForSequenceClassification"),QVt.forEach(t),QUr=r(_Ve," (BART model)"),_Ve.forEach(t),WUr=i(De),Pw=n(De,"LI",{});var uVe=s(Pw);xwe=n(uVe,"STRONG",{});var WVt=s(xwe);HUr=r(WVt,"bert"),WVt.forEach(t),UUr=r(uVe," \u2014 "),$oe=n(uVe,"A",{href:!0});var HVt=s($oe);JUr=r(HVt,"FlaxBertForSequenceClassification"),HVt.forEach(t),YUr=r(uVe," (BERT model)"),uVe.forEach(t),KUr=i(De),Bw=n(De,"LI",{});var bVe=s(Bw);$we=n(bVe,"STRONG",{});var UVt=s($we);ZUr=r(UVt,"big_bird"),UVt.forEach(t),eJr=r(bVe," \u2014 "),koe=n(bVe,"A",{href:!0});var JVt=s(koe);oJr=r(JVt,"FlaxBigBirdForSequenceClassification"),JVt.forEach(t),rJr=r(bVe," (BigBird model)"),bVe.forEach(t),tJr=i(De),Iw=n(De,"LI",{});var vVe=s(Iw);kwe=n(vVe,"STRONG",{});var YVt=s(kwe);aJr=r(YVt,"distilbert"),YVt.forEach(t),nJr=r(vVe," \u2014 "),Soe=n(vVe,"A",{href:!0});var KVt=s(Soe);sJr=r(KVt,"FlaxDistilBertForSequenceClassification"),KVt.forEach(t),lJr=r(vVe," (DistilBERT model)"),vVe.forEach(t),iJr=i(De),Nw=n(De,"LI",{});var FVe=s(Nw);Swe=n(FVe,"STRONG",{});var ZVt=s(Swe);dJr=r(ZVt,"electra"),ZVt.forEach(t),cJr=r(FVe," \u2014 "),Roe=n(FVe,"A",{href:!0});var eXt=s(Roe);fJr=r(eXt,"FlaxElectraForSequenceClassification"),eXt.forEach(t),mJr=r(FVe," (ELECTRA model)"),FVe.forEach(t),gJr=i(De),qw=n(De,"LI",{});var TVe=s(qw);Rwe=n(TVe,"STRONG",{});var oXt=s(Rwe);hJr=r(oXt,"mbart"),oXt.forEach(t),pJr=r(TVe," \u2014 "),Poe=n(TVe,"A",{href:!0});var rXt=s(Poe);_Jr=r(rXt,"FlaxMBartForSequenceClassification"),rXt.forEach(t),uJr=r(TVe," (mBART model)"),TVe.forEach(t),bJr=i(De),jw=n(De,"LI",{});var MVe=s(jw);Pwe=n(MVe,"STRONG",{});var tXt=s(Pwe);vJr=r(tXt,"roberta"),tXt.forEach(t),FJr=r(MVe," \u2014 "),Boe=n(MVe,"A",{href:!0});var aXt=s(Boe);TJr=r(aXt,"FlaxRobertaForSequenceClassification"),aXt.forEach(t),MJr=r(MVe," (RoBERTa model)"),MVe.forEach(t),EJr=i(De),Dw=n(De,"LI",{});var EVe=s(Dw);Bwe=n(EVe,"STRONG",{});var nXt=s(Bwe);CJr=r(nXt,"roformer"),nXt.forEach(t),wJr=r(EVe," \u2014 "),Ioe=n(EVe,"A",{href:!0});var sXt=s(Ioe);AJr=r(sXt,"FlaxRoFormerForSequenceClassification"),sXt.forEach(t),LJr=r(EVe," (RoFormer model)"),EVe.forEach(t),yJr=i(De),Gw=n(De,"LI",{});var CVe=s(Gw);Iwe=n(CVe,"STRONG",{});var lXt=s(Iwe);xJr=r(lXt,"xlm-roberta"),lXt.forEach(t),$Jr=r(CVe," \u2014 "),Noe=n(CVe,"A",{href:!0});var iXt=s(Noe);kJr=r(iXt,"FlaxXLMRobertaForSequenceClassification"),iXt.forEach(t),SJr=r(CVe," (XLM-RoBERTa model)"),CVe.forEach(t),De.forEach(t),RJr=i(hi),T(Ow.$$.fragment,hi),hi.forEach(t),gi.forEach(t),Hze=i(f),gf=n(f,"H2",{class:!0});var tHe=s(gf);Vw=n(tHe,"A",{id:!0,class:!0,href:!0});var dXt=s(Vw);Nwe=n(dXt,"SPAN",{});var cXt=s(Nwe);T(q$.$$.fragment,cXt),cXt.forEach(t),dXt.forEach(t),PJr=i(tHe),qwe=n(tHe,"SPAN",{});var fXt=s(qwe);BJr=r(fXt,"FlaxAutoModelForQuestionAnswering"),fXt.forEach(t),tHe.forEach(t),Uze=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(j$.$$.fragment,pi),IJr=i(pi),hf=n(pi,"P",{});var hae=s(hf);NJr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qoe=n(hae,"A",{href:!0});var mXt=s(qoe);qJr=r(mXt,"from_pretrained()"),mXt.forEach(t),jJr=r(hae," class method or the "),joe=n(hae,"A",{href:!0});var gXt=s(joe);DJr=r(gXt,"from_config()"),gXt.forEach(t),GJr=r(hae,` class
method.`),hae.forEach(t),OJr=i(pi),D$=n(pi,"P",{});var aHe=s(D$);VJr=r(aHe,"This class cannot be instantiated directly using "),jwe=n(aHe,"CODE",{});var hXt=s(jwe);XJr=r(hXt,"__init__()"),hXt.forEach(t),zJr=r(aHe," (throws an error)."),aHe.forEach(t),QJr=i(pi),Zt=n(pi,"DIV",{class:!0});var V7=s(Zt);T(G$.$$.fragment,V7),WJr=i(V7),Dwe=n(V7,"P",{});var pXt=s(Dwe);HJr=r(pXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pXt.forEach(t),UJr=i(V7),pf=n(V7,"P",{});var pae=s(pf);JJr=r(pae,`Note:
Loading a model from its configuration file does `),Gwe=n(pae,"STRONG",{});var _Xt=s(Gwe);YJr=r(_Xt,"not"),_Xt.forEach(t),KJr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Doe=n(pae,"A",{href:!0});var uXt=s(Doe);ZJr=r(uXt,"from_pretrained()"),uXt.forEach(t),eYr=r(pae," to load the model weights."),pae.forEach(t),oYr=i(V7),T(Xw.$$.fragment,V7),V7.forEach(t),rYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(O$.$$.fragment,_i),tYr=i(_i),Owe=n(_i,"P",{});var bXt=s(Owe);aYr=r(bXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bXt.forEach(t),nYr=i(_i),Ln=n(_i,"P",{});var X7=s(Ln);sYr=r(X7,"The model class to instantiate is selected based on the "),Vwe=n(X7,"CODE",{});var vXt=s(Vwe);lYr=r(vXt,"model_type"),vXt.forEach(t),iYr=r(X7,` property of the config object (either
passed as an argument or loaded from `),Xwe=n(X7,"CODE",{});var FXt=s(Xwe);dYr=r(FXt,"pretrained_model_name_or_path"),FXt.forEach(t),cYr=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zwe=n(X7,"CODE",{});var TXt=s(zwe);fYr=r(TXt,"pretrained_model_name_or_path"),TXt.forEach(t),mYr=r(X7,":"),X7.forEach(t),gYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);zw=n(Ge,"LI",{});var wVe=s(zw);Qwe=n(wVe,"STRONG",{});var MXt=s(Qwe);hYr=r(MXt,"albert"),MXt.forEach(t),pYr=r(wVe," \u2014 "),Goe=n(wVe,"A",{href:!0});var EXt=s(Goe);_Yr=r(EXt,"FlaxAlbertForQuestionAnswering"),EXt.forEach(t),uYr=r(wVe," (ALBERT model)"),wVe.forEach(t),bYr=i(Ge),Qw=n(Ge,"LI",{});var AVe=s(Qw);Wwe=n(AVe,"STRONG",{});var CXt=s(Wwe);vYr=r(CXt,"bart"),CXt.forEach(t),FYr=r(AVe," \u2014 "),Ooe=n(AVe,"A",{href:!0});var wXt=s(Ooe);TYr=r(wXt,"FlaxBartForQuestionAnswering"),wXt.forEach(t),MYr=r(AVe," (BART model)"),AVe.forEach(t),EYr=i(Ge),Ww=n(Ge,"LI",{});var LVe=s(Ww);Hwe=n(LVe,"STRONG",{});var AXt=s(Hwe);CYr=r(AXt,"bert"),AXt.forEach(t),wYr=r(LVe," \u2014 "),Voe=n(LVe,"A",{href:!0});var LXt=s(Voe);AYr=r(LXt,"FlaxBertForQuestionAnswering"),LXt.forEach(t),LYr=r(LVe," (BERT model)"),LVe.forEach(t),yYr=i(Ge),Hw=n(Ge,"LI",{});var yVe=s(Hw);Uwe=n(yVe,"STRONG",{});var yXt=s(Uwe);xYr=r(yXt,"big_bird"),yXt.forEach(t),$Yr=r(yVe," \u2014 "),Xoe=n(yVe,"A",{href:!0});var xXt=s(Xoe);kYr=r(xXt,"FlaxBigBirdForQuestionAnswering"),xXt.forEach(t),SYr=r(yVe," (BigBird model)"),yVe.forEach(t),RYr=i(Ge),Uw=n(Ge,"LI",{});var xVe=s(Uw);Jwe=n(xVe,"STRONG",{});var $Xt=s(Jwe);PYr=r($Xt,"distilbert"),$Xt.forEach(t),BYr=r(xVe," \u2014 "),zoe=n(xVe,"A",{href:!0});var kXt=s(zoe);IYr=r(kXt,"FlaxDistilBertForQuestionAnswering"),kXt.forEach(t),NYr=r(xVe," (DistilBERT model)"),xVe.forEach(t),qYr=i(Ge),Jw=n(Ge,"LI",{});var $Ve=s(Jw);Ywe=n($Ve,"STRONG",{});var SXt=s(Ywe);jYr=r(SXt,"electra"),SXt.forEach(t),DYr=r($Ve," \u2014 "),Qoe=n($Ve,"A",{href:!0});var RXt=s(Qoe);GYr=r(RXt,"FlaxElectraForQuestionAnswering"),RXt.forEach(t),OYr=r($Ve," (ELECTRA model)"),$Ve.forEach(t),VYr=i(Ge),Yw=n(Ge,"LI",{});var kVe=s(Yw);Kwe=n(kVe,"STRONG",{});var PXt=s(Kwe);XYr=r(PXt,"mbart"),PXt.forEach(t),zYr=r(kVe," \u2014 "),Woe=n(kVe,"A",{href:!0});var BXt=s(Woe);QYr=r(BXt,"FlaxMBartForQuestionAnswering"),BXt.forEach(t),WYr=r(kVe," (mBART model)"),kVe.forEach(t),HYr=i(Ge),Kw=n(Ge,"LI",{});var SVe=s(Kw);Zwe=n(SVe,"STRONG",{});var IXt=s(Zwe);UYr=r(IXt,"roberta"),IXt.forEach(t),JYr=r(SVe," \u2014 "),Hoe=n(SVe,"A",{href:!0});var NXt=s(Hoe);YYr=r(NXt,"FlaxRobertaForQuestionAnswering"),NXt.forEach(t),KYr=r(SVe," (RoBERTa model)"),SVe.forEach(t),ZYr=i(Ge),Zw=n(Ge,"LI",{});var RVe=s(Zw);eAe=n(RVe,"STRONG",{});var qXt=s(eAe);eKr=r(qXt,"roformer"),qXt.forEach(t),oKr=r(RVe," \u2014 "),Uoe=n(RVe,"A",{href:!0});var jXt=s(Uoe);rKr=r(jXt,"FlaxRoFormerForQuestionAnswering"),jXt.forEach(t),tKr=r(RVe," (RoFormer model)"),RVe.forEach(t),aKr=i(Ge),eA=n(Ge,"LI",{});var PVe=s(eA);oAe=n(PVe,"STRONG",{});var DXt=s(oAe);nKr=r(DXt,"xlm-roberta"),DXt.forEach(t),sKr=r(PVe," \u2014 "),Joe=n(PVe,"A",{href:!0});var GXt=s(Joe);lKr=r(GXt,"FlaxXLMRobertaForQuestionAnswering"),GXt.forEach(t),iKr=r(PVe," (XLM-RoBERTa model)"),PVe.forEach(t),Ge.forEach(t),dKr=i(_i),T(oA.$$.fragment,_i),_i.forEach(t),pi.forEach(t),Jze=i(f),_f=n(f,"H2",{class:!0});var nHe=s(_f);rA=n(nHe,"A",{id:!0,class:!0,href:!0});var OXt=s(rA);rAe=n(OXt,"SPAN",{});var VXt=s(rAe);T(V$.$$.fragment,VXt),VXt.forEach(t),OXt.forEach(t),cKr=i(nHe),tAe=n(nHe,"SPAN",{});var XXt=s(tAe);fKr=r(XXt,"FlaxAutoModelForTokenClassification"),XXt.forEach(t),nHe.forEach(t),Yze=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(X$.$$.fragment,ui),mKr=i(ui),uf=n(ui,"P",{});var _ae=s(uf);gKr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yoe=n(_ae,"A",{href:!0});var zXt=s(Yoe);hKr=r(zXt,"from_pretrained()"),zXt.forEach(t),pKr=r(_ae," class method or the "),Koe=n(_ae,"A",{href:!0});var QXt=s(Koe);_Kr=r(QXt,"from_config()"),QXt.forEach(t),uKr=r(_ae,` class
method.`),_ae.forEach(t),bKr=i(ui),z$=n(ui,"P",{});var sHe=s(z$);vKr=r(sHe,"This class cannot be instantiated directly using "),aAe=n(sHe,"CODE",{});var WXt=s(aAe);FKr=r(WXt,"__init__()"),WXt.forEach(t),TKr=r(sHe," (throws an error)."),sHe.forEach(t),MKr=i(ui),ea=n(ui,"DIV",{class:!0});var z7=s(ea);T(Q$.$$.fragment,z7),EKr=i(z7),nAe=n(z7,"P",{});var HXt=s(nAe);CKr=r(HXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HXt.forEach(t),wKr=i(z7),bf=n(z7,"P",{});var uae=s(bf);AKr=r(uae,`Note:
Loading a model from its configuration file does `),sAe=n(uae,"STRONG",{});var UXt=s(sAe);LKr=r(UXt,"not"),UXt.forEach(t),yKr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(uae,"A",{href:!0});var JXt=s(Zoe);xKr=r(JXt,"from_pretrained()"),JXt.forEach(t),$Kr=r(uae," to load the model weights."),uae.forEach(t),kKr=i(z7),T(tA.$$.fragment,z7),z7.forEach(t),SKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(W$.$$.fragment,bi),RKr=i(bi),lAe=n(bi,"P",{});var YXt=s(lAe);PKr=r(YXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YXt.forEach(t),BKr=i(bi),yn=n(bi,"P",{});var Q7=s(yn);IKr=r(Q7,"The model class to instantiate is selected based on the "),iAe=n(Q7,"CODE",{});var KXt=s(iAe);NKr=r(KXt,"model_type"),KXt.forEach(t),qKr=r(Q7,` property of the config object (either
passed as an argument or loaded from `),dAe=n(Q7,"CODE",{});var ZXt=s(dAe);jKr=r(ZXt,"pretrained_model_name_or_path"),ZXt.forEach(t),DKr=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=n(Q7,"CODE",{});var ezt=s(cAe);GKr=r(ezt,"pretrained_model_name_or_path"),ezt.forEach(t),OKr=r(Q7,":"),Q7.forEach(t),VKr=i(bi),Ve=n(bi,"UL",{});var Mo=s(Ve);aA=n(Mo,"LI",{});var BVe=s(aA);fAe=n(BVe,"STRONG",{});var ozt=s(fAe);XKr=r(ozt,"albert"),ozt.forEach(t),zKr=r(BVe," \u2014 "),ere=n(BVe,"A",{href:!0});var rzt=s(ere);QKr=r(rzt,"FlaxAlbertForTokenClassification"),rzt.forEach(t),WKr=r(BVe," (ALBERT model)"),BVe.forEach(t),HKr=i(Mo),nA=n(Mo,"LI",{});var IVe=s(nA);mAe=n(IVe,"STRONG",{});var tzt=s(mAe);UKr=r(tzt,"bert"),tzt.forEach(t),JKr=r(IVe," \u2014 "),ore=n(IVe,"A",{href:!0});var azt=s(ore);YKr=r(azt,"FlaxBertForTokenClassification"),azt.forEach(t),KKr=r(IVe," (BERT model)"),IVe.forEach(t),ZKr=i(Mo),sA=n(Mo,"LI",{});var NVe=s(sA);gAe=n(NVe,"STRONG",{});var nzt=s(gAe);eZr=r(nzt,"big_bird"),nzt.forEach(t),oZr=r(NVe," \u2014 "),rre=n(NVe,"A",{href:!0});var szt=s(rre);rZr=r(szt,"FlaxBigBirdForTokenClassification"),szt.forEach(t),tZr=r(NVe," (BigBird model)"),NVe.forEach(t),aZr=i(Mo),lA=n(Mo,"LI",{});var qVe=s(lA);hAe=n(qVe,"STRONG",{});var lzt=s(hAe);nZr=r(lzt,"distilbert"),lzt.forEach(t),sZr=r(qVe," \u2014 "),tre=n(qVe,"A",{href:!0});var izt=s(tre);lZr=r(izt,"FlaxDistilBertForTokenClassification"),izt.forEach(t),iZr=r(qVe," (DistilBERT model)"),qVe.forEach(t),dZr=i(Mo),iA=n(Mo,"LI",{});var jVe=s(iA);pAe=n(jVe,"STRONG",{});var dzt=s(pAe);cZr=r(dzt,"electra"),dzt.forEach(t),fZr=r(jVe," \u2014 "),are=n(jVe,"A",{href:!0});var czt=s(are);mZr=r(czt,"FlaxElectraForTokenClassification"),czt.forEach(t),gZr=r(jVe," (ELECTRA model)"),jVe.forEach(t),hZr=i(Mo),dA=n(Mo,"LI",{});var DVe=s(dA);_Ae=n(DVe,"STRONG",{});var fzt=s(_Ae);pZr=r(fzt,"roberta"),fzt.forEach(t),_Zr=r(DVe," \u2014 "),nre=n(DVe,"A",{href:!0});var mzt=s(nre);uZr=r(mzt,"FlaxRobertaForTokenClassification"),mzt.forEach(t),bZr=r(DVe," (RoBERTa model)"),DVe.forEach(t),vZr=i(Mo),cA=n(Mo,"LI",{});var GVe=s(cA);uAe=n(GVe,"STRONG",{});var gzt=s(uAe);FZr=r(gzt,"roformer"),gzt.forEach(t),TZr=r(GVe," \u2014 "),sre=n(GVe,"A",{href:!0});var hzt=s(sre);MZr=r(hzt,"FlaxRoFormerForTokenClassification"),hzt.forEach(t),EZr=r(GVe," (RoFormer model)"),GVe.forEach(t),CZr=i(Mo),fA=n(Mo,"LI",{});var OVe=s(fA);bAe=n(OVe,"STRONG",{});var pzt=s(bAe);wZr=r(pzt,"xlm-roberta"),pzt.forEach(t),AZr=r(OVe," \u2014 "),lre=n(OVe,"A",{href:!0});var _zt=s(lre);LZr=r(_zt,"FlaxXLMRobertaForTokenClassification"),_zt.forEach(t),yZr=r(OVe," (XLM-RoBERTa model)"),OVe.forEach(t),Mo.forEach(t),xZr=i(bi),T(mA.$$.fragment,bi),bi.forEach(t),ui.forEach(t),Kze=i(f),vf=n(f,"H2",{class:!0});var lHe=s(vf);gA=n(lHe,"A",{id:!0,class:!0,href:!0});var uzt=s(gA);vAe=n(uzt,"SPAN",{});var bzt=s(vAe);T(H$.$$.fragment,bzt),bzt.forEach(t),uzt.forEach(t),$Zr=i(lHe),FAe=n(lHe,"SPAN",{});var vzt=s(FAe);kZr=r(vzt,"FlaxAutoModelForMultipleChoice"),vzt.forEach(t),lHe.forEach(t),Zze=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(U$.$$.fragment,vi),SZr=i(vi),Ff=n(vi,"P",{});var bae=s(Ff);RZr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ire=n(bae,"A",{href:!0});var Fzt=s(ire);PZr=r(Fzt,"from_pretrained()"),Fzt.forEach(t),BZr=r(bae," class method or the "),dre=n(bae,"A",{href:!0});var Tzt=s(dre);IZr=r(Tzt,"from_config()"),Tzt.forEach(t),NZr=r(bae,` class
method.`),bae.forEach(t),qZr=i(vi),J$=n(vi,"P",{});var iHe=s(J$);jZr=r(iHe,"This class cannot be instantiated directly using "),TAe=n(iHe,"CODE",{});var Mzt=s(TAe);DZr=r(Mzt,"__init__()"),Mzt.forEach(t),GZr=r(iHe," (throws an error)."),iHe.forEach(t),OZr=i(vi),oa=n(vi,"DIV",{class:!0});var W7=s(oa);T(Y$.$$.fragment,W7),VZr=i(W7),MAe=n(W7,"P",{});var Ezt=s(MAe);XZr=r(Ezt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ezt.forEach(t),zZr=i(W7),Tf=n(W7,"P",{});var vae=s(Tf);QZr=r(vae,`Note:
Loading a model from its configuration file does `),EAe=n(vae,"STRONG",{});var Czt=s(EAe);WZr=r(Czt,"not"),Czt.forEach(t),HZr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=n(vae,"A",{href:!0});var wzt=s(cre);UZr=r(wzt,"from_pretrained()"),wzt.forEach(t),JZr=r(vae," to load the model weights."),vae.forEach(t),YZr=i(W7),T(hA.$$.fragment,W7),W7.forEach(t),KZr=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(K$.$$.fragment,Fi),ZZr=i(Fi),CAe=n(Fi,"P",{});var Azt=s(CAe);eet=r(Azt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Azt.forEach(t),oet=i(Fi),xn=n(Fi,"P",{});var H7=s(xn);ret=r(H7,"The model class to instantiate is selected based on the "),wAe=n(H7,"CODE",{});var Lzt=s(wAe);tet=r(Lzt,"model_type"),Lzt.forEach(t),aet=r(H7,` property of the config object (either
passed as an argument or loaded from `),AAe=n(H7,"CODE",{});var yzt=s(AAe);net=r(yzt,"pretrained_model_name_or_path"),yzt.forEach(t),set=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LAe=n(H7,"CODE",{});var xzt=s(LAe);iet=r(xzt,"pretrained_model_name_or_path"),xzt.forEach(t),det=r(H7,":"),H7.forEach(t),cet=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);pA=n(Eo,"LI",{});var VVe=s(pA);yAe=n(VVe,"STRONG",{});var $zt=s(yAe);fet=r($zt,"albert"),$zt.forEach(t),met=r(VVe," \u2014 "),fre=n(VVe,"A",{href:!0});var kzt=s(fre);get=r(kzt,"FlaxAlbertForMultipleChoice"),kzt.forEach(t),het=r(VVe," (ALBERT model)"),VVe.forEach(t),pet=i(Eo),_A=n(Eo,"LI",{});var XVe=s(_A);xAe=n(XVe,"STRONG",{});var Szt=s(xAe);_et=r(Szt,"bert"),Szt.forEach(t),uet=r(XVe," \u2014 "),mre=n(XVe,"A",{href:!0});var Rzt=s(mre);bet=r(Rzt,"FlaxBertForMultipleChoice"),Rzt.forEach(t),vet=r(XVe," (BERT model)"),XVe.forEach(t),Fet=i(Eo),uA=n(Eo,"LI",{});var zVe=s(uA);$Ae=n(zVe,"STRONG",{});var Pzt=s($Ae);Tet=r(Pzt,"big_bird"),Pzt.forEach(t),Met=r(zVe," \u2014 "),gre=n(zVe,"A",{href:!0});var Bzt=s(gre);Eet=r(Bzt,"FlaxBigBirdForMultipleChoice"),Bzt.forEach(t),Cet=r(zVe," (BigBird model)"),zVe.forEach(t),wet=i(Eo),bA=n(Eo,"LI",{});var QVe=s(bA);kAe=n(QVe,"STRONG",{});var Izt=s(kAe);Aet=r(Izt,"distilbert"),Izt.forEach(t),Let=r(QVe," \u2014 "),hre=n(QVe,"A",{href:!0});var Nzt=s(hre);yet=r(Nzt,"FlaxDistilBertForMultipleChoice"),Nzt.forEach(t),xet=r(QVe," (DistilBERT model)"),QVe.forEach(t),$et=i(Eo),vA=n(Eo,"LI",{});var WVe=s(vA);SAe=n(WVe,"STRONG",{});var qzt=s(SAe);ket=r(qzt,"electra"),qzt.forEach(t),Set=r(WVe," \u2014 "),pre=n(WVe,"A",{href:!0});var jzt=s(pre);Ret=r(jzt,"FlaxElectraForMultipleChoice"),jzt.forEach(t),Pet=r(WVe," (ELECTRA model)"),WVe.forEach(t),Bet=i(Eo),FA=n(Eo,"LI",{});var HVe=s(FA);RAe=n(HVe,"STRONG",{});var Dzt=s(RAe);Iet=r(Dzt,"roberta"),Dzt.forEach(t),Net=r(HVe," \u2014 "),_re=n(HVe,"A",{href:!0});var Gzt=s(_re);qet=r(Gzt,"FlaxRobertaForMultipleChoice"),Gzt.forEach(t),jet=r(HVe," (RoBERTa model)"),HVe.forEach(t),Det=i(Eo),TA=n(Eo,"LI",{});var UVe=s(TA);PAe=n(UVe,"STRONG",{});var Ozt=s(PAe);Get=r(Ozt,"roformer"),Ozt.forEach(t),Oet=r(UVe," \u2014 "),ure=n(UVe,"A",{href:!0});var Vzt=s(ure);Vet=r(Vzt,"FlaxRoFormerForMultipleChoice"),Vzt.forEach(t),Xet=r(UVe," (RoFormer model)"),UVe.forEach(t),zet=i(Eo),MA=n(Eo,"LI",{});var JVe=s(MA);BAe=n(JVe,"STRONG",{});var Xzt=s(BAe);Qet=r(Xzt,"xlm-roberta"),Xzt.forEach(t),Wet=r(JVe," \u2014 "),bre=n(JVe,"A",{href:!0});var zzt=s(bre);Het=r(zzt,"FlaxXLMRobertaForMultipleChoice"),zzt.forEach(t),Uet=r(JVe," (XLM-RoBERTa model)"),JVe.forEach(t),Eo.forEach(t),Jet=i(Fi),T(EA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),eQe=i(f),Mf=n(f,"H2",{class:!0});var dHe=s(Mf);CA=n(dHe,"A",{id:!0,class:!0,href:!0});var Qzt=s(CA);IAe=n(Qzt,"SPAN",{});var Wzt=s(IAe);T(Z$.$$.fragment,Wzt),Wzt.forEach(t),Qzt.forEach(t),Yet=i(dHe),NAe=n(dHe,"SPAN",{});var Hzt=s(NAe);Ket=r(Hzt,"FlaxAutoModelForNextSentencePrediction"),Hzt.forEach(t),dHe.forEach(t),oQe=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(ek.$$.fragment,Ti),Zet=i(Ti),Ef=n(Ti,"P",{});var Fae=s(Ef);eot=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vre=n(Fae,"A",{href:!0});var Uzt=s(vre);oot=r(Uzt,"from_pretrained()"),Uzt.forEach(t),rot=r(Fae," class method or the "),Fre=n(Fae,"A",{href:!0});var Jzt=s(Fre);tot=r(Jzt,"from_config()"),Jzt.forEach(t),aot=r(Fae,` class
method.`),Fae.forEach(t),not=i(Ti),ok=n(Ti,"P",{});var cHe=s(ok);sot=r(cHe,"This class cannot be instantiated directly using "),qAe=n(cHe,"CODE",{});var Yzt=s(qAe);lot=r(Yzt,"__init__()"),Yzt.forEach(t),iot=r(cHe," (throws an error)."),cHe.forEach(t),dot=i(Ti),ra=n(Ti,"DIV",{class:!0});var U7=s(ra);T(rk.$$.fragment,U7),cot=i(U7),jAe=n(U7,"P",{});var Kzt=s(jAe);fot=r(Kzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kzt.forEach(t),mot=i(U7),Cf=n(U7,"P",{});var Tae=s(Cf);got=r(Tae,`Note:
Loading a model from its configuration file does `),DAe=n(Tae,"STRONG",{});var Zzt=s(DAe);hot=r(Zzt,"not"),Zzt.forEach(t),pot=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(Tae,"A",{href:!0});var eQt=s(Tre);_ot=r(eQt,"from_pretrained()"),eQt.forEach(t),uot=r(Tae," to load the model weights."),Tae.forEach(t),bot=i(U7),T(wA.$$.fragment,U7),U7.forEach(t),vot=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(tk.$$.fragment,Mi),Fot=i(Mi),GAe=n(Mi,"P",{});var oQt=s(GAe);Tot=r(oQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oQt.forEach(t),Mot=i(Mi),$n=n(Mi,"P",{});var J7=s($n);Eot=r(J7,"The model class to instantiate is selected based on the "),OAe=n(J7,"CODE",{});var rQt=s(OAe);Cot=r(rQt,"model_type"),rQt.forEach(t),wot=r(J7,` property of the config object (either
passed as an argument or loaded from `),VAe=n(J7,"CODE",{});var tQt=s(VAe);Aot=r(tQt,"pretrained_model_name_or_path"),tQt.forEach(t),Lot=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XAe=n(J7,"CODE",{});var aQt=s(XAe);yot=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),xot=r(J7,":"),J7.forEach(t),$ot=i(Mi),zAe=n(Mi,"UL",{});var nQt=s(zAe);AA=n(nQt,"LI",{});var YVe=s(AA);QAe=n(YVe,"STRONG",{});var sQt=s(QAe);kot=r(sQt,"bert"),sQt.forEach(t),Sot=r(YVe," \u2014 "),Mre=n(YVe,"A",{href:!0});var lQt=s(Mre);Rot=r(lQt,"FlaxBertForNextSentencePrediction"),lQt.forEach(t),Pot=r(YVe," (BERT model)"),YVe.forEach(t),nQt.forEach(t),Bot=i(Mi),T(LA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),rQe=i(f),wf=n(f,"H2",{class:!0});var fHe=s(wf);yA=n(fHe,"A",{id:!0,class:!0,href:!0});var iQt=s(yA);WAe=n(iQt,"SPAN",{});var dQt=s(WAe);T(ak.$$.fragment,dQt),dQt.forEach(t),iQt.forEach(t),Iot=i(fHe),HAe=n(fHe,"SPAN",{});var cQt=s(HAe);Not=r(cQt,"FlaxAutoModelForImageClassification"),cQt.forEach(t),fHe.forEach(t),tQe=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(nk.$$.fragment,Ei),qot=i(Ei),Af=n(Ei,"P",{});var Mae=s(Af);jot=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ere=n(Mae,"A",{href:!0});var fQt=s(Ere);Dot=r(fQt,"from_pretrained()"),fQt.forEach(t),Got=r(Mae," class method or the "),Cre=n(Mae,"A",{href:!0});var mQt=s(Cre);Oot=r(mQt,"from_config()"),mQt.forEach(t),Vot=r(Mae,` class
method.`),Mae.forEach(t),Xot=i(Ei),sk=n(Ei,"P",{});var mHe=s(sk);zot=r(mHe,"This class cannot be instantiated directly using "),UAe=n(mHe,"CODE",{});var gQt=s(UAe);Qot=r(gQt,"__init__()"),gQt.forEach(t),Wot=r(mHe," (throws an error)."),mHe.forEach(t),Hot=i(Ei),ta=n(Ei,"DIV",{class:!0});var Y7=s(ta);T(lk.$$.fragment,Y7),Uot=i(Y7),JAe=n(Y7,"P",{});var hQt=s(JAe);Jot=r(hQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hQt.forEach(t),Yot=i(Y7),Lf=n(Y7,"P",{});var Eae=s(Lf);Kot=r(Eae,`Note:
Loading a model from its configuration file does `),YAe=n(Eae,"STRONG",{});var pQt=s(YAe);Zot=r(pQt,"not"),pQt.forEach(t),ert=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=n(Eae,"A",{href:!0});var _Qt=s(wre);ort=r(_Qt,"from_pretrained()"),_Qt.forEach(t),rrt=r(Eae," to load the model weights."),Eae.forEach(t),trt=i(Y7),T(xA.$$.fragment,Y7),Y7.forEach(t),art=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(ik.$$.fragment,Ci),nrt=i(Ci),KAe=n(Ci,"P",{});var uQt=s(KAe);srt=r(uQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uQt.forEach(t),lrt=i(Ci),kn=n(Ci,"P",{});var K7=s(kn);irt=r(K7,"The model class to instantiate is selected based on the "),ZAe=n(K7,"CODE",{});var bQt=s(ZAe);drt=r(bQt,"model_type"),bQt.forEach(t),crt=r(K7,` property of the config object (either
passed as an argument or loaded from `),e6e=n(K7,"CODE",{});var vQt=s(e6e);frt=r(vQt,"pretrained_model_name_or_path"),vQt.forEach(t),mrt=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(K7,"CODE",{});var FQt=s(o6e);grt=r(FQt,"pretrained_model_name_or_path"),FQt.forEach(t),hrt=r(K7,":"),K7.forEach(t),prt=i(Ci),dk=n(Ci,"UL",{});var gHe=s(dk);$A=n(gHe,"LI",{});var KVe=s($A);r6e=n(KVe,"STRONG",{});var TQt=s(r6e);_rt=r(TQt,"beit"),TQt.forEach(t),urt=r(KVe," \u2014 "),Are=n(KVe,"A",{href:!0});var MQt=s(Are);brt=r(MQt,"FlaxBeitForImageClassification"),MQt.forEach(t),vrt=r(KVe," (BEiT model)"),KVe.forEach(t),Frt=i(gHe),kA=n(gHe,"LI",{});var ZVe=s(kA);t6e=n(ZVe,"STRONG",{});var EQt=s(t6e);Trt=r(EQt,"vit"),EQt.forEach(t),Mrt=r(ZVe," \u2014 "),Lre=n(ZVe,"A",{href:!0});var CQt=s(Lre);Ert=r(CQt,"FlaxViTForImageClassification"),CQt.forEach(t),Crt=r(ZVe," (ViT model)"),ZVe.forEach(t),gHe.forEach(t),wrt=i(Ci),T(SA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),aQe=i(f),yf=n(f,"H2",{class:!0});var hHe=s(yf);RA=n(hHe,"A",{id:!0,class:!0,href:!0});var wQt=s(RA);a6e=n(wQt,"SPAN",{});var AQt=s(a6e);T(ck.$$.fragment,AQt),AQt.forEach(t),wQt.forEach(t),Art=i(hHe),n6e=n(hHe,"SPAN",{});var LQt=s(n6e);Lrt=r(LQt,"FlaxAutoModelForVision2Seq"),LQt.forEach(t),hHe.forEach(t),nQe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(fk.$$.fragment,wi),yrt=i(wi),xf=n(wi,"P",{});var Cae=s(xf);xrt=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yre=n(Cae,"A",{href:!0});var yQt=s(yre);$rt=r(yQt,"from_pretrained()"),yQt.forEach(t),krt=r(Cae," class method or the "),xre=n(Cae,"A",{href:!0});var xQt=s(xre);Srt=r(xQt,"from_config()"),xQt.forEach(t),Rrt=r(Cae,` class
method.`),Cae.forEach(t),Prt=i(wi),mk=n(wi,"P",{});var pHe=s(mk);Brt=r(pHe,"This class cannot be instantiated directly using "),s6e=n(pHe,"CODE",{});var $Qt=s(s6e);Irt=r($Qt,"__init__()"),$Qt.forEach(t),Nrt=r(pHe," (throws an error)."),pHe.forEach(t),qrt=i(wi),aa=n(wi,"DIV",{class:!0});var Z7=s(aa);T(gk.$$.fragment,Z7),jrt=i(Z7),l6e=n(Z7,"P",{});var kQt=s(l6e);Drt=r(kQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kQt.forEach(t),Grt=i(Z7),$f=n(Z7,"P",{});var wae=s($f);Ort=r(wae,`Note:
Loading a model from its configuration file does `),i6e=n(wae,"STRONG",{});var SQt=s(i6e);Vrt=r(SQt,"not"),SQt.forEach(t),Xrt=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=n(wae,"A",{href:!0});var RQt=s($re);zrt=r(RQt,"from_pretrained()"),RQt.forEach(t),Qrt=r(wae," to load the model weights."),wae.forEach(t),Wrt=i(Z7),T(PA.$$.fragment,Z7),Z7.forEach(t),Hrt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(hk.$$.fragment,Ai),Urt=i(Ai),d6e=n(Ai,"P",{});var PQt=s(d6e);Jrt=r(PQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PQt.forEach(t),Yrt=i(Ai),Sn=n(Ai,"P",{});var eL=s(Sn);Krt=r(eL,"The model class to instantiate is selected based on the "),c6e=n(eL,"CODE",{});var BQt=s(c6e);Zrt=r(BQt,"model_type"),BQt.forEach(t),ett=r(eL,` property of the config object (either
passed as an argument or loaded from `),f6e=n(eL,"CODE",{});var IQt=s(f6e);ott=r(IQt,"pretrained_model_name_or_path"),IQt.forEach(t),rtt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(eL,"CODE",{});var NQt=s(m6e);ttt=r(NQt,"pretrained_model_name_or_path"),NQt.forEach(t),att=r(eL,":"),eL.forEach(t),ntt=i(Ai),g6e=n(Ai,"UL",{});var qQt=s(g6e);BA=n(qQt,"LI",{});var eXe=s(BA);h6e=n(eXe,"STRONG",{});var jQt=s(h6e);stt=r(jQt,"vision-encoder-decoder"),jQt.forEach(t),ltt=r(eXe," \u2014 "),kre=n(eXe,"A",{href:!0});var DQt=s(kre);itt=r(DQt,"FlaxVisionEncoderDecoderModel"),DQt.forEach(t),dtt=r(eXe," (Vision Encoder decoder model)"),eXe.forEach(t),qQt.forEach(t),ctt=i(Ai),T(IA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(QHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(Df,"id","transformers.AutoConfig"),c(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Df,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(OS,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(VS,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig"),c(XS,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig"),c(zS,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig"),c(QS,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig"),c(WS,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(HS,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig"),c(US,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(JS,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(YS,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(KS,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig"),c(ZS,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig"),c(eR,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig"),c(oR,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig"),c(rR,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig"),c(tR,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig"),c(aR,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig"),c(nR,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig"),c(sR,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig"),c(lR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(iR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(dR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(cR,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig"),c(fR,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(mR,"href","/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(gR,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig"),c(hR,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig"),c(pR,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig"),c(_R,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig"),c(uR,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig"),c(bR,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig"),c(vR,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(FR,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig"),c(TR,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig"),c(MR,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig"),c(ER,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig"),c(CR,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig"),c(wR,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNConfig"),c(AR,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config"),c(LR,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(yR,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(xR,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig"),c($R,"href","/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTConfig"),c(kR,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig"),c(SR,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig"),c(RR,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(PR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(BR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(IR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(NR,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig"),c(qR,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig"),c(jR,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig"),c(DR,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config"),c(GR,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig"),c(OR,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig"),c(VR,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config"),c(XR,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig"),c(zR,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(QR,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig"),c(WR,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig"),c(HR,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(UR,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(JR,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(YR,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig"),c(KR,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config"),c(ZR,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig"),c(eP,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig"),c(oP,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rP,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tP,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig"),c(aP,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig"),c(nP,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sP,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig"),c(lP,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(iP,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(dP,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(cP,"href","/docs/transformers/pr_18123/en/model_doc/rag#transformers.RagConfig"),c(fP,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmConfig"),c(mP,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig"),c(gP,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig"),c(hP,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig"),c(pP,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig"),c(_P,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig"),c(uP,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig"),c(bP,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig"),c(vP,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig"),c(FP,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig"),c(TP,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig"),c(MP,"href","/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(EP,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(CP,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(wP,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig"),c(AP,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(LP,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig"),c(yP,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config"),c(xP,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig"),c($P,"href","/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(kP,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SP,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRConfig"),c(RP,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PP,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BP,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig"),c(IP,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig"),c(NP,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(qP,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jP,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DP,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig"),c(GP,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OP,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VP,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XP,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig"),c(zP,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig"),c(QP,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig"),c(WP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(UP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JP,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig"),c(YP,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig"),c(KP,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(ZP,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eB,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(oB,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rB,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartTokenizer"),c(tB,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartTokenizerFast"),c(aB,"href","/docs/transformers/pr_18123/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nB,"href","/docs/transformers/pr_18123/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sB,"href","/docs/transformers/pr_18123/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lB,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(iB,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(dB,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cB,"href","/docs/transformers/pr_18123/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(fB,"href","/docs/transformers/pr_18123/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mB,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gB,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hB,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pB,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_B,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(uB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vB,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(FB,"href","/docs/transformers/pr_18123/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(TB,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertTokenizer"),c(MB,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(EB,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineTokenizer"),c(CB,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizer"),c(wB,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(AB,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(LB,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(yB,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(xB,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c($B,"href","/docs/transformers/pr_18123/en/model_doc/cpm#transformers.CpmTokenizer"),c(kB,"href","/docs/transformers/pr_18123/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(SB,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(RB,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaTokenizer"),c(IB,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(qB,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(jB,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(DB,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(GB,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(OB,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(VB,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraTokenizer"),c(XB,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(zB,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(QB,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetTokenizer"),c(WB,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(HB,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(UB,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelTokenizer"),c(JB,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(YB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eI,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oI,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(rI,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aI,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizer"),c(nI,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(sI,"href","/docs/transformers/pr_18123/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lI,"href","/docs/transformers/pr_18123/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fI,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mI,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gI,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hI,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pI,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(_I,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(uI,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bI,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vI,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDTokenizer"),c(FI,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDTokenizerFast"),c(TI,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MI,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(CI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(wI,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeTokenizer"),c(AI,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(LI,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yI,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xI,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianTokenizer"),c($I,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartTokenizer"),c(kI,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SI,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RI,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(BI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_18123/en/model_doc/mluke#transformers.MLukeTokenizer"),c(NI,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qI,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jI,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DI,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(OI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(VI,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpTokenizer"),c(XI,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(zI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(QI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(WI,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(HI,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UI,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JI,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YI,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KI,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZI,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eN,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oN,"href","/docs/transformers/pr_18123/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rN,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tN,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(nN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(sN,"href","/docs/transformers/pr_18123/en/model_doc/rag#transformers.RagTokenizer"),c(lN,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmTokenizer"),c(iN,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dN,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cN,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fN,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mN,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gN,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hN,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pN,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_N,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uN,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bN,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vN,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FN,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TN,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MN,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EN,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CN,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(AN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(LN,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasTokenizer"),c(yN,"href","/docs/transformers/pr_18123/en/model_doc/tapex#transformers.TapexTokenizer"),c(xN,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($N,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(kN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(SN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(RN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(PN,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BN,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IN,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NN,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qN,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jN,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMTokenizer"),c(DN,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(GN,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ON,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(VN,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XN,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zN,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QN,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WN,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(HN,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(UN,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(JN,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YN,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(KN,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oq,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rq,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sq,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mq,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(uq,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(wq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xq,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"id","transformers.AutoProcessor"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c($q,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPProcessor"),c(Sq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPProcessor"),c(Rq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Pq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Bq,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Iq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Nq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Dq,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Gq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltProcessor"),c(Xq,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"id","transformers.AutoModel"),c(Gp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gp,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(Hq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yq,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertModel"),c(Kq,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartModel"),c(Zq,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitModel"),c(ej,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel"),c(oj,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rj,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdModel"),c(tj,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aj,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nj,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sj,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomModel"),c(lj,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertModel"),c(ij,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineModel"),c(dj,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPModel"),c(cj,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenModel"),c(fj,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertModel"),c(mj,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextModel"),c(gj,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLModel"),c(hj,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtModel"),c(pj,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(_j,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(uj,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(bj,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaModel"),c(vj,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Fj,"href","/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Tj,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTModel"),c(Mj,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrModel"),c(Ej,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertModel"),c(Cj,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wj,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTModel"),c(Aj,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraModel"),c(Lj,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertModel"),c(yj,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaModel"),c(xj,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetModel"),c($j,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTModel"),c(kj,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelModel"),c(Sj,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Rj,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNModel"),c(Pj,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Model"),c(Bj,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Ij,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Nj,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJModel"),c(qj,"href","/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTModel"),c(jj,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertModel"),c(Dj,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertModel"),c(Gj,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Oj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Vj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Xj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(zj,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDModel"),c(Qj,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitModel"),c(Wj,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerModel"),c(Hj,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Model"),c(Uj,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeModel"),c(Jj,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertModel"),c(Yj,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Model"),c(Kj,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianModel"),c(Zj,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerModel"),c(eD,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartModel"),c(oD,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTModel"),c(rD,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tD,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aD,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTModel"),c(nD,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetModel"),c(sD,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Model"),c(lD,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpModel"),c(iD,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaModel"),c(dD,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerModel"),c(cD,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(fD,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTModel"),c(mD,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusModel"),c(gD,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverModel"),c(hD,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartModel"),c(pD,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerModel"),c(_D,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(uD,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertModel"),c(bD,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModel"),c(vD,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetModel"),c(FD,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertModel"),c(TD,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetModel"),c(MD,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel"),c(ED,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaModel"),c(CD,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerModel"),c(wD,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerModel"),c(AD,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWModel"),c(LD,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDModel"),c(yD,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xD,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterModel"),c($D,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(kD,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinModel"),c(SD,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Model"),c(RD,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasModel"),c(PD,"href","/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(BD,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(ID,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ND,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qD,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanModel"),c(jD,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltModel"),c(DD,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(GD,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertModel"),c(OD,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTModel"),c(VD,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(XD,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zD,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(QD,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMModel"),c(WD,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMModel"),c(HD,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMModel"),c(UD,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(JD,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(YD,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(KD,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetModel"),c(ZD,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosModel"),c(eG,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wu,"id","transformers.AutoModelForPreTraining"),c(Wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wu,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(oG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForPreTraining"),c(nG,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForPreTraining"),c(lG,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(iG,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM"),c(dG,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cG,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fG,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mG,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gG,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hG,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pG,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForPreTraining"),c(_G,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaForPreTraining"),c(bG,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForPreTraining"),c(vG,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(TG,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MG,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(EG,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CG,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wG,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(AG,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(LG,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(yG,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xG,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c($G,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(kG,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(SG,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel"),c(RG,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PG,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(BG,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(IG,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qG,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jG,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(DG,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(GG,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(OG,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(VG,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(XG,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(zG,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(HG,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O1,"id","transformers.AutoModelForCausalLM"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(UG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForCausalLM"),c(ZG,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertLMHeadModel"),c(eO,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(oO,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(rO,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(tO,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(aO,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(nO,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM"),c(sO,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lO,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(iO,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dO,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(cO,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForCausalLM"),c(fO,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mO,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(gO,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(hO,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(pO,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianForCausalLM"),c(_O,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForCausalLM"),c(uO,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(bO,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForCausalLM"),c(vO,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FO,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForCausalLM"),c(TO,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(MO,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(EO,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(CO,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(wO,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(AO,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(LO,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(yO,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(xO,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c($O,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kO,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(SO,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(RO,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(BO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(IO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(NO,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S2,"id","transformers.AutoModelForMaskedLM"),c(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S2,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(qO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(OO,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMaskedLM"),c(XO,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(zO,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QO,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(WO,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(HO,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(UO,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(JO,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(YO,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(KO,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ZO,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(eV,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(oV,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(tV,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(aV,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeForMaskedLM"),c(nV,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(lV,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dV,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(fV,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(mV,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(gV,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uV,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(bV,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(FV,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(MV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(EV,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fb,"id","transformers.AutoModelForSeq2SeqLM"),c(Fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(CV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c($V,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(SV,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianMTModel"),c(NV,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForSequenceClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(zV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForSequenceClassification"),c(JV,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(KV,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(eX,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(oX,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(rX,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForSequenceClassification"),c($X,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(OX,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(VX,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(XX,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.AutoModelForMultipleChoice"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(zX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(YX,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(oz,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(rz,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(az,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ev,"id","transformers.AutoModelForNextSentencePrediction"),c(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ev,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(Cz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rv,"id","transformers.AutoModelForTokenClassification"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Nz,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForTokenClassification"),c(qz,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(jz,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Dz,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Gz,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Oz,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Xz,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(zz,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForQuestionAnswering"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(BQ,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nW,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iW,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForTableQuestionAnswering"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(dW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForImageClassification"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(gW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForImageClassification"),c(uW,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(bW,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtForImageClassification"),c(vW,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FW,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TW,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MW,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EW,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassification"),c(CW,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(wW,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(AW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xW,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($W,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kW,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SW,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RW,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForImageClassification"),c(PW,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanForImageClassification"),c(BW,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForVision2Seq"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(IW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(DW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForAudioClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(XW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HW,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JW,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YW,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KW,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(eH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r8,"id","transformers.AutoModelForAudioFrameClassification"),c(r8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(rH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f8,"id","transformers.AutoModelForCTC"),c(f8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f8,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(cH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hH,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForCTC"),c(pH,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTForCTC"),c(_H,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForCTC"),c(uH,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(MH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c(EH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(LH,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k8,"id","transformers.AutoModelForAudioXVector"),c(k8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k8,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(yH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(SH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(RH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(PH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(BH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D8,"id","transformers.AutoModelForMaskedImageModeling"),c(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D8,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(IH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(DH,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(GH,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W8,"id","transformers.AutoModelForObjectDetection"),c(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W8,"href","#transformers.AutoModelForObjectDetection"),c(Hd,"class","relative group"),c(OH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForObjectDetection"),c(QH,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z8,"id","transformers.AutoModelForImageSegmentation"),c(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z8,"href","#transformers.AutoModelForImageSegmentation"),c(Yd,"class","relative group"),c(WH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.AutoModelForSemanticSegmentation"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.AutoModelForSemanticSegmentation"),c(ec,"class","relative group"),c(YH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(rU,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(tU,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(aU,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.AutoModelForInstanceSegmentation"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.AutoModelForInstanceSegmentation"),c(tc,"class","relative group"),c(nU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.TFAutoModel"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.TFAutoModel"),c(sc,"class","relative group"),c(dU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertModel"),c(gU,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartModel"),c(hU,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertModel"),c(pU,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_U,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uU,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertModel"),c(bU,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.TFCLIPModel"),c(vU,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertModel"),c(FU,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextModel"),c(TU,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MU,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EU,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaModel"),c(CU,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wU,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTModel"),c(AU,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(LU,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yU,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraModel"),c(xU,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($U,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelModel"),c(kU,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(SU,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2Model"),c(RU,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJModel"),c(PU,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.TFHubertModel"),c(BU,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(IU,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDModel"),c(NU,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerModel"),c(qU,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jU,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianModel"),c(DU,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartModel"),c(GU,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(OU,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetModel"),c(VU,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5Model"),c(XU,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zU,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTModel"),c(QU,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusModel"),c(WU,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetModel"),c(HU,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertModel"),c(UU,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetModel"),c(JU,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaModel"),c(YU,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KU,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(ZU,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinModel"),c(eJ,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5Model"),c(oJ,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasModel"),c(rJ,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(tJ,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTModel"),c(aJ,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(nJ,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMModel"),c(lJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iJ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForPreTraining"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForPreTraining"),c(dc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(gJ,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForPreTraining"),c(pJ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_J,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uJ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(vJ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FJ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(TJ,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MJ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EJ,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(CJ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(wJ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AJ,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LJ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yJ,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($J,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kJ,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(SJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(PJ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForCausalLM"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForCausalLM"),c(mc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(jJ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(DJ,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GJ,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OJ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(VJ,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XJ,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(zJ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QJ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WJ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(HJ,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JJ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForImageClassification"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForImageClassification"),c(pc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(oY,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(rY,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(tY,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(aY,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(nY,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(sY,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(lY,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForMaskedLM"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForMaskedLM"),c(bc,"class","relative group"),c(iY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mY,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gY,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hY,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pY,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_Y,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(uY,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vY,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FY,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TY,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MY,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EY,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wY,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LY,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(yY,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xY,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Y,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Tc,"class","relative group"),c(kY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(qY,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianMTModel"),c(DY,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForSequenceClassification"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Cc,"class","relative group"),c(XY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HY,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JY,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KY,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eK,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gK,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hK,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pK,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_K,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(uK,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bK,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForMultipleChoice"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Lc,"class","relative group"),c(vK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(yK,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($K,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RK,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(BK,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IK,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NK,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qK,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c($c,"class","relative group"),c(jK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(VK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Rc,"class","relative group"),c(XK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForTokenClassification"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForTokenClassification"),c(Ic,"class","relative group"),c(HK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(KK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(ZK,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(rZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(tZ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(nZ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fZ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(mZ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(gZ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(hZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_Z,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.TFAutoModelForQuestionAnswering"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(jc,"class","relative group"),c(uZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(xZ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(qZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.TFAutoModelForVision2Seq"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.TFAutoModelForVision2Seq"),c(Oc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(zc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModel"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModel"),c(Hc,"class","relative group"),c(HZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertModel"),c(KZ,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartModel"),c(ZZ,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitModel"),c(eee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertModel"),c(oee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ree,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(tee,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(aee,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.FlaxCLIPModel"),c(nee,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(see,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraModel"),c(lee,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(iee,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(dee,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(cee,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(fee,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianModel"),c(mee,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gee,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hee,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTModel"),c(pee,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(_ee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(uee,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(bee,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5Model"),c(vee,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Fee,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTModel"),c(Tee,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Mee,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Eee,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.FlaxAutoModelForCausalLM"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Yc,"class","relative group"),c(Cee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lee,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(xee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c($ee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(kee,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(See,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Ree,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Pee,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Bee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Iee,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.FlaxAutoModelForPreTraining"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.FlaxAutoModelForPreTraining"),c(ef,"class","relative group"),c(Nee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Gee,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Oee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Vee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Xee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zee,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Qee,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Wee,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Hee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Uee,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Jee,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Yee,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Kee,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForMaskedLM"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(tf,"class","relative group"),c(Zee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ooe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(roe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(toe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(noe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(soe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(loe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ioe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(doe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(coe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(foe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(sf,"class","relative group"),c(moe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(poe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uoe,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(voe,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Toe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Eoe,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForSequenceClassification"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(cf,"class","relative group"),c(woe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yoe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($oe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(koe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(gf,"class","relative group"),c(qoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(joe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Doe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Goe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rA,"id","transformers.FlaxAutoModelForTokenClassification"),c(rA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(_f,"class","relative group"),c(Yoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ore,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rre,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tre,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(are,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nre,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sre,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lre,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(gA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(vf,"class","relative group"),c(ire,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fre,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mre,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gre,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hre,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pre,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(_re,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ure,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bre,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(CA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Mf,"class","relative group"),c(vre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mre,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yA,"id","transformers.FlaxAutoModelForImageClassification"),c(yA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yA,"href","#transformers.FlaxAutoModelForImageClassification"),c(wf,"class","relative group"),c(Ere,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Are,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Lre,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RA,"id","transformers.FlaxAutoModelForVision2Seq"),c(RA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(yf,"class","relative group"),c(yre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($re,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kre,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,Li),b(f,Pf,u),b(f,lt,u),e(lt,yi),e(lt,xi),e(xi,oL),e(lt,Bf),b(f,Oe,u),b(f,We,u),e(We,$i),e(We,Pn),e(Pn,rL),e(We,Bn),e(We,In),e(In,tL),e(We,ki),e(We,Nn),e(Nn,aL),e(We,Si),b(f,If,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,IS),e(Ae,Ri),e(Ri,NS),e(Ae,qS),b(f,wo,u),b(f,Ra,u),e(Ra,jS),e(Ra,Nf),e(Nf,DS),e(Ra,_He),b(f,oXe,u),b(f,Pi,u),e(Pi,qf),e(qf,Aae),M(nL,Aae,null),e(Pi,uHe),e(Pi,Lae),e(Lae,bHe),b(f,rXe,u),b(f,qn,u),e(qn,vHe),e(qn,yae),e(yae,FHe),e(qn,THe),e(qn,xae),e(xae,MHe),e(qn,EHe),b(f,tXe,u),M(sL,f,u),b(f,aXe,u),b(f,GS,u),e(GS,CHe),b(f,nXe,u),M(jf,f,u),b(f,sXe,u),b(f,Bi,u),e(Bi,Df),e(Df,$ae),M(lL,$ae,null),e(Bi,wHe),e(Bi,kae),e(kae,AHe),b(f,lXe,u),b(f,Ao,u),M(iL,Ao,null),e(Ao,LHe),e(Ao,dL),e(dL,yHe),e(dL,OS),e(OS,xHe),e(dL,$He),e(Ao,kHe),e(Ao,cL),e(cL,SHe),e(cL,Sae),e(Sae,RHe),e(cL,PHe),e(Ao,BHe),e(Ao,Lr),M(fL,Lr,null),e(Lr,IHe),e(Lr,Rae),e(Rae,NHe),e(Lr,qHe),e(Lr,Ii),e(Ii,jHe),e(Ii,Pae),e(Pae,DHe),e(Ii,GHe),e(Ii,Bae),e(Bae,OHe),e(Ii,VHe),e(Lr,XHe),e(Lr,A),e(A,Gf),e(Gf,Iae),e(Iae,zHe),e(Gf,QHe),e(Gf,VS),e(VS,WHe),e(Gf,HHe),e(A,UHe),e(A,Of),e(Of,Nae),e(Nae,JHe),e(Of,YHe),e(Of,XS),e(XS,KHe),e(Of,ZHe),e(A,eUe),e(A,Vf),e(Vf,qae),e(qae,oUe),e(Vf,rUe),e(Vf,zS),e(zS,tUe),e(Vf,aUe),e(A,nUe),e(A,Xf),e(Xf,jae),e(jae,sUe),e(Xf,lUe),e(Xf,QS),e(QS,iUe),e(Xf,dUe),e(A,cUe),e(A,zf),e(zf,Dae),e(Dae,fUe),e(zf,mUe),e(zf,WS),e(WS,gUe),e(zf,hUe),e(A,pUe),e(A,Qf),e(Qf,Gae),e(Gae,_Ue),e(Qf,uUe),e(Qf,HS),e(HS,bUe),e(Qf,vUe),e(A,FUe),e(A,Wf),e(Wf,Oae),e(Oae,TUe),e(Wf,MUe),e(Wf,US),e(US,EUe),e(Wf,CUe),e(A,wUe),e(A,Hf),e(Hf,Vae),e(Vae,AUe),e(Hf,LUe),e(Hf,JS),e(JS,yUe),e(Hf,xUe),e(A,$Ue),e(A,Uf),e(Uf,Xae),e(Xae,kUe),e(Uf,SUe),e(Uf,YS),e(YS,RUe),e(Uf,PUe),e(A,BUe),e(A,Jf),e(Jf,zae),e(zae,IUe),e(Jf,NUe),e(Jf,KS),e(KS,qUe),e(Jf,jUe),e(A,DUe),e(A,Yf),e(Yf,Qae),e(Qae,GUe),e(Yf,OUe),e(Yf,ZS),e(ZS,VUe),e(Yf,XUe),e(A,zUe),e(A,Kf),e(Kf,Wae),e(Wae,QUe),e(Kf,WUe),e(Kf,eR),e(eR,HUe),e(Kf,UUe),e(A,JUe),e(A,Zf),e(Zf,Hae),e(Hae,YUe),e(Zf,KUe),e(Zf,oR),e(oR,ZUe),e(Zf,eJe),e(A,oJe),e(A,em),e(em,Uae),e(Uae,rJe),e(em,tJe),e(em,rR),e(rR,aJe),e(em,nJe),e(A,sJe),e(A,om),e(om,Jae),e(Jae,lJe),e(om,iJe),e(om,tR),e(tR,dJe),e(om,cJe),e(A,fJe),e(A,rm),e(rm,Yae),e(Yae,mJe),e(rm,gJe),e(rm,aR),e(aR,hJe),e(rm,pJe),e(A,_Je),e(A,tm),e(tm,Kae),e(Kae,uJe),e(tm,bJe),e(tm,nR),e(nR,vJe),e(tm,FJe),e(A,TJe),e(A,am),e(am,Zae),e(Zae,MJe),e(am,EJe),e(am,sR),e(sR,CJe),e(am,wJe),e(A,AJe),e(A,nm),e(nm,ene),e(ene,LJe),e(nm,yJe),e(nm,lR),e(lR,xJe),e(nm,$Je),e(A,kJe),e(A,sm),e(sm,one),e(one,SJe),e(sm,RJe),e(sm,iR),e(iR,PJe),e(sm,BJe),e(A,IJe),e(A,lm),e(lm,rne),e(rne,NJe),e(lm,qJe),e(lm,dR),e(dR,jJe),e(lm,DJe),e(A,GJe),e(A,im),e(im,tne),e(tne,OJe),e(im,VJe),e(im,cR),e(cR,XJe),e(im,zJe),e(A,QJe),e(A,dm),e(dm,ane),e(ane,WJe),e(dm,HJe),e(dm,fR),e(fR,UJe),e(dm,JJe),e(A,YJe),e(A,cm),e(cm,nne),e(nne,KJe),e(cm,ZJe),e(cm,mR),e(mR,eYe),e(cm,oYe),e(A,rYe),e(A,fm),e(fm,sne),e(sne,tYe),e(fm,aYe),e(fm,gR),e(gR,nYe),e(fm,sYe),e(A,lYe),e(A,mm),e(mm,lne),e(lne,iYe),e(mm,dYe),e(mm,hR),e(hR,cYe),e(mm,fYe),e(A,mYe),e(A,gm),e(gm,ine),e(ine,gYe),e(gm,hYe),e(gm,pR),e(pR,pYe),e(gm,_Ye),e(A,uYe),e(A,hm),e(hm,dne),e(dne,bYe),e(hm,vYe),e(hm,_R),e(_R,FYe),e(hm,TYe),e(A,MYe),e(A,pm),e(pm,cne),e(cne,EYe),e(pm,CYe),e(pm,uR),e(uR,wYe),e(pm,AYe),e(A,LYe),e(A,_m),e(_m,fne),e(fne,yYe),e(_m,xYe),e(_m,bR),e(bR,$Ye),e(_m,kYe),e(A,SYe),e(A,um),e(um,mne),e(mne,RYe),e(um,PYe),e(um,vR),e(vR,BYe),e(um,IYe),e(A,NYe),e(A,bm),e(bm,gne),e(gne,qYe),e(bm,jYe),e(bm,FR),e(FR,DYe),e(bm,GYe),e(A,OYe),e(A,vm),e(vm,hne),e(hne,VYe),e(vm,XYe),e(vm,TR),e(TR,zYe),e(vm,QYe),e(A,WYe),e(A,Fm),e(Fm,pne),e(pne,HYe),e(Fm,UYe),e(Fm,MR),e(MR,JYe),e(Fm,YYe),e(A,KYe),e(A,Tm),e(Tm,_ne),e(_ne,ZYe),e(Tm,eKe),e(Tm,ER),e(ER,oKe),e(Tm,rKe),e(A,tKe),e(A,Mm),e(Mm,une),e(une,aKe),e(Mm,nKe),e(Mm,CR),e(CR,sKe),e(Mm,lKe),e(A,iKe),e(A,Em),e(Em,bne),e(bne,dKe),e(Em,cKe),e(Em,wR),e(wR,fKe),e(Em,mKe),e(A,gKe),e(A,Cm),e(Cm,vne),e(vne,hKe),e(Cm,pKe),e(Cm,AR),e(AR,_Ke),e(Cm,uKe),e(A,bKe),e(A,wm),e(wm,Fne),e(Fne,vKe),e(wm,FKe),e(wm,LR),e(LR,TKe),e(wm,MKe),e(A,EKe),e(A,Am),e(Am,Tne),e(Tne,CKe),e(Am,wKe),e(Am,yR),e(yR,AKe),e(Am,LKe),e(A,yKe),e(A,Lm),e(Lm,Mne),e(Mne,xKe),e(Lm,$Ke),e(Lm,xR),e(xR,kKe),e(Lm,SKe),e(A,RKe),e(A,ym),e(ym,Ene),e(Ene,PKe),e(ym,BKe),e(ym,$R),e($R,IKe),e(ym,NKe),e(A,qKe),e(A,xm),e(xm,Cne),e(Cne,jKe),e(xm,DKe),e(xm,kR),e(kR,GKe),e(xm,OKe),e(A,VKe),e(A,$m),e($m,wne),e(wne,XKe),e($m,zKe),e($m,SR),e(SR,QKe),e($m,WKe),e(A,HKe),e(A,km),e(km,Ane),e(Ane,UKe),e(km,JKe),e(km,RR),e(RR,YKe),e(km,KKe),e(A,ZKe),e(A,Sm),e(Sm,Lne),e(Lne,eZe),e(Sm,oZe),e(Sm,PR),e(PR,rZe),e(Sm,tZe),e(A,aZe),e(A,Rm),e(Rm,yne),e(yne,nZe),e(Rm,sZe),e(Rm,BR),e(BR,lZe),e(Rm,iZe),e(A,dZe),e(A,Pm),e(Pm,xne),e(xne,cZe),e(Pm,fZe),e(Pm,IR),e(IR,mZe),e(Pm,gZe),e(A,hZe),e(A,Bm),e(Bm,$ne),e($ne,pZe),e(Bm,_Ze),e(Bm,NR),e(NR,uZe),e(Bm,bZe),e(A,vZe),e(A,Im),e(Im,kne),e(kne,FZe),e(Im,TZe),e(Im,qR),e(qR,MZe),e(Im,EZe),e(A,CZe),e(A,Nm),e(Nm,Sne),e(Sne,wZe),e(Nm,AZe),e(Nm,jR),e(jR,LZe),e(Nm,yZe),e(A,xZe),e(A,qm),e(qm,Rne),e(Rne,$Ze),e(qm,kZe),e(qm,DR),e(DR,SZe),e(qm,RZe),e(A,PZe),e(A,jm),e(jm,Pne),e(Pne,BZe),e(jm,IZe),e(jm,GR),e(GR,NZe),e(jm,qZe),e(A,jZe),e(A,Dm),e(Dm,Bne),e(Bne,DZe),e(Dm,GZe),e(Dm,OR),e(OR,OZe),e(Dm,VZe),e(A,XZe),e(A,Gm),e(Gm,Ine),e(Ine,zZe),e(Gm,QZe),e(Gm,VR),e(VR,WZe),e(Gm,HZe),e(A,UZe),e(A,Om),e(Om,Nne),e(Nne,JZe),e(Om,YZe),e(Om,XR),e(XR,KZe),e(Om,ZZe),e(A,eeo),e(A,Vm),e(Vm,qne),e(qne,oeo),e(Vm,reo),e(Vm,zR),e(zR,teo),e(Vm,aeo),e(A,neo),e(A,Xm),e(Xm,jne),e(jne,seo),e(Xm,leo),e(Xm,QR),e(QR,ieo),e(Xm,deo),e(A,ceo),e(A,zm),e(zm,Dne),e(Dne,feo),e(zm,meo),e(zm,WR),e(WR,geo),e(zm,heo),e(A,peo),e(A,Qm),e(Qm,Gne),e(Gne,_eo),e(Qm,ueo),e(Qm,HR),e(HR,beo),e(Qm,veo),e(A,Feo),e(A,Wm),e(Wm,One),e(One,Teo),e(Wm,Meo),e(Wm,UR),e(UR,Eeo),e(Wm,Ceo),e(A,weo),e(A,Hm),e(Hm,Vne),e(Vne,Aeo),e(Hm,Leo),e(Hm,JR),e(JR,yeo),e(Hm,xeo),e(A,$eo),e(A,Um),e(Um,Xne),e(Xne,keo),e(Um,Seo),e(Um,YR),e(YR,Reo),e(Um,Peo),e(A,Beo),e(A,Jm),e(Jm,zne),e(zne,Ieo),e(Jm,Neo),e(Jm,KR),e(KR,qeo),e(Jm,jeo),e(A,Deo),e(A,Ym),e(Ym,Qne),e(Qne,Geo),e(Ym,Oeo),e(Ym,ZR),e(ZR,Veo),e(Ym,Xeo),e(A,zeo),e(A,Km),e(Km,Wne),e(Wne,Qeo),e(Km,Weo),e(Km,eP),e(eP,Heo),e(Km,Ueo),e(A,Jeo),e(A,Zm),e(Zm,Hne),e(Hne,Yeo),e(Zm,Keo),e(Zm,oP),e(oP,Zeo),e(Zm,eoo),e(A,ooo),e(A,eg),e(eg,Une),e(Une,roo),e(eg,too),e(eg,rP),e(rP,aoo),e(eg,noo),e(A,soo),e(A,og),e(og,Jne),e(Jne,loo),e(og,ioo),e(og,tP),e(tP,doo),e(og,coo),e(A,foo),e(A,rg),e(rg,Yne),e(Yne,moo),e(rg,goo),e(rg,aP),e(aP,hoo),e(rg,poo),e(A,_oo),e(A,tg),e(tg,Kne),e(Kne,uoo),e(tg,boo),e(tg,nP),e(nP,voo),e(tg,Foo),e(A,Too),e(A,ag),e(ag,Zne),e(Zne,Moo),e(ag,Eoo),e(ag,sP),e(sP,Coo),e(ag,woo),e(A,Aoo),e(A,ng),e(ng,ese),e(ese,Loo),e(ng,yoo),e(ng,lP),e(lP,xoo),e(ng,$oo),e(A,koo),e(A,sg),e(sg,ose),e(ose,Soo),e(sg,Roo),e(sg,iP),e(iP,Poo),e(sg,Boo),e(A,Ioo),e(A,lg),e(lg,rse),e(rse,Noo),e(lg,qoo),e(lg,dP),e(dP,joo),e(lg,Doo),e(A,Goo),e(A,ig),e(ig,tse),e(tse,Ooo),e(ig,Voo),e(ig,cP),e(cP,Xoo),e(ig,zoo),e(A,Qoo),e(A,dg),e(dg,ase),e(ase,Woo),e(dg,Hoo),e(dg,fP),e(fP,Uoo),e(dg,Joo),e(A,Yoo),e(A,cg),e(cg,nse),e(nse,Koo),e(cg,Zoo),e(cg,mP),e(mP,ero),e(cg,oro),e(A,rro),e(A,fg),e(fg,sse),e(sse,tro),e(fg,aro),e(fg,gP),e(gP,nro),e(fg,sro),e(A,lro),e(A,mg),e(mg,lse),e(lse,iro),e(mg,dro),e(mg,hP),e(hP,cro),e(mg,fro),e(A,mro),e(A,gg),e(gg,ise),e(ise,gro),e(gg,hro),e(gg,pP),e(pP,pro),e(gg,_ro),e(A,uro),e(A,hg),e(hg,dse),e(dse,bro),e(hg,vro),e(hg,_P),e(_P,Fro),e(hg,Tro),e(A,Mro),e(A,pg),e(pg,cse),e(cse,Ero),e(pg,Cro),e(pg,uP),e(uP,wro),e(pg,Aro),e(A,Lro),e(A,_g),e(_g,fse),e(fse,yro),e(_g,xro),e(_g,bP),e(bP,$ro),e(_g,kro),e(A,Sro),e(A,ug),e(ug,mse),e(mse,Rro),e(ug,Pro),e(ug,vP),e(vP,Bro),e(ug,Iro),e(A,Nro),e(A,bg),e(bg,gse),e(gse,qro),e(bg,jro),e(bg,FP),e(FP,Dro),e(bg,Gro),e(A,Oro),e(A,vg),e(vg,hse),e(hse,Vro),e(vg,Xro),e(vg,TP),e(TP,zro),e(vg,Qro),e(A,Wro),e(A,Fg),e(Fg,pse),e(pse,Hro),e(Fg,Uro),e(Fg,MP),e(MP,Jro),e(Fg,Yro),e(A,Kro),e(A,Tg),e(Tg,_se),e(_se,Zro),e(Tg,eto),e(Tg,EP),e(EP,oto),e(Tg,rto),e(A,tto),e(A,Mg),e(Mg,use),e(use,ato),e(Mg,nto),e(Mg,CP),e(CP,sto),e(Mg,lto),e(A,ito),e(A,Eg),e(Eg,bse),e(bse,dto),e(Eg,cto),e(Eg,wP),e(wP,fto),e(Eg,mto),e(A,gto),e(A,Cg),e(Cg,vse),e(vse,hto),e(Cg,pto),e(Cg,AP),e(AP,_to),e(Cg,uto),e(A,bto),e(A,wg),e(wg,Fse),e(Fse,vto),e(wg,Fto),e(wg,LP),e(LP,Tto),e(wg,Mto),e(A,Eto),e(A,Ag),e(Ag,Tse),e(Tse,Cto),e(Ag,wto),e(Ag,yP),e(yP,Ato),e(Ag,Lto),e(A,yto),e(A,Lg),e(Lg,Mse),e(Mse,xto),e(Lg,$to),e(Lg,xP),e(xP,kto),e(Lg,Sto),e(A,Rto),e(A,yg),e(yg,Ese),e(Ese,Pto),e(yg,Bto),e(yg,$P),e($P,Ito),e(yg,Nto),e(A,qto),e(A,xg),e(xg,Cse),e(Cse,jto),e(xg,Dto),e(xg,kP),e(kP,Gto),e(xg,Oto),e(A,Vto),e(A,$g),e($g,wse),e(wse,Xto),e($g,zto),e($g,SP),e(SP,Qto),e($g,Wto),e(A,Hto),e(A,kg),e(kg,Ase),e(Ase,Uto),e(kg,Jto),e(kg,RP),e(RP,Yto),e(kg,Kto),e(A,Zto),e(A,Sg),e(Sg,Lse),e(Lse,eao),e(Sg,oao),e(Sg,PP),e(PP,rao),e(Sg,tao),e(A,aao),e(A,Rg),e(Rg,yse),e(yse,nao),e(Rg,sao),e(Rg,BP),e(BP,lao),e(Rg,iao),e(A,dao),e(A,Pg),e(Pg,xse),e(xse,cao),e(Pg,fao),e(Pg,IP),e(IP,mao),e(Pg,gao),e(A,hao),e(A,Bg),e(Bg,$se),e($se,pao),e(Bg,_ao),e(Bg,NP),e(NP,uao),e(Bg,bao),e(A,vao),e(A,Ig),e(Ig,kse),e(kse,Fao),e(Ig,Tao),e(Ig,qP),e(qP,Mao),e(Ig,Eao),e(A,Cao),e(A,Ng),e(Ng,Sse),e(Sse,wao),e(Ng,Aao),e(Ng,jP),e(jP,Lao),e(Ng,yao),e(A,xao),e(A,qg),e(qg,Rse),e(Rse,$ao),e(qg,kao),e(qg,DP),e(DP,Sao),e(qg,Rao),e(A,Pao),e(A,jg),e(jg,Pse),e(Pse,Bao),e(jg,Iao),e(jg,GP),e(GP,Nao),e(jg,qao),e(A,jao),e(A,Dg),e(Dg,Bse),e(Bse,Dao),e(Dg,Gao),e(Dg,OP),e(OP,Oao),e(Dg,Vao),e(A,Xao),e(A,Gg),e(Gg,Ise),e(Ise,zao),e(Gg,Qao),e(Gg,VP),e(VP,Wao),e(Gg,Hao),e(A,Uao),e(A,Og),e(Og,Nse),e(Nse,Jao),e(Og,Yao),e(Og,XP),e(XP,Kao),e(Og,Zao),e(A,eno),e(A,Vg),e(Vg,qse),e(qse,ono),e(Vg,rno),e(Vg,zP),e(zP,tno),e(Vg,ano),e(A,nno),e(A,Xg),e(Xg,jse),e(jse,sno),e(Xg,lno),e(Xg,QP),e(QP,ino),e(Xg,dno),e(A,cno),e(A,zg),e(zg,Dse),e(Dse,fno),e(zg,mno),e(zg,WP),e(WP,gno),e(zg,hno),e(A,pno),e(A,Qg),e(Qg,Gse),e(Gse,_no),e(Qg,uno),e(Qg,HP),e(HP,bno),e(Qg,vno),e(A,Fno),e(A,Wg),e(Wg,Ose),e(Ose,Tno),e(Wg,Mno),e(Wg,UP),e(UP,Eno),e(Wg,Cno),e(A,wno),e(A,Hg),e(Hg,Vse),e(Vse,Ano),e(Hg,Lno),e(Hg,JP),e(JP,yno),e(Hg,xno),e(A,$no),e(A,Ug),e(Ug,Xse),e(Xse,kno),e(Ug,Sno),e(Ug,YP),e(YP,Rno),e(Ug,Pno),e(A,Bno),e(A,Jg),e(Jg,zse),e(zse,Ino),e(Jg,Nno),e(Jg,KP),e(KP,qno),e(Jg,jno),e(Lr,Dno),M(Yg,Lr,null),e(Ao,Gno),e(Ao,Kg),M(mL,Kg,null),e(Kg,Ono),e(Kg,Qse),e(Qse,Vno),b(f,iXe,u),b(f,Ni,u),e(Ni,Zg),e(Zg,Wse),M(gL,Wse,null),e(Ni,Xno),e(Ni,Hse),e(Hse,zno),b(f,dXe,u),b(f,Lo,u),M(hL,Lo,null),e(Lo,Qno),e(Lo,pL),e(pL,Wno),e(pL,ZP),e(ZP,Hno),e(pL,Uno),e(Lo,Jno),e(Lo,_L),e(_L,Yno),e(_L,Use),e(Use,Kno),e(_L,Zno),e(Lo,eso),e(Lo,yr),M(uL,yr,null),e(yr,oso),e(yr,Jse),e(Jse,rso),e(yr,tso),e(yr,Pa),e(Pa,aso),e(Pa,Yse),e(Yse,nso),e(Pa,sso),e(Pa,Kse),e(Kse,lso),e(Pa,iso),e(Pa,Zse),e(Zse,dso),e(Pa,cso),e(yr,fso),e(yr,k),e(k,jn),e(jn,ele),e(ele,mso),e(jn,gso),e(jn,eB),e(eB,hso),e(jn,pso),e(jn,oB),e(oB,_so),e(jn,uso),e(k,bso),e(k,Dn),e(Dn,ole),e(ole,vso),e(Dn,Fso),e(Dn,rB),e(rB,Tso),e(Dn,Mso),e(Dn,tB),e(tB,Eso),e(Dn,Cso),e(k,wso),e(k,Gn),e(Gn,rle),e(rle,Aso),e(Gn,Lso),e(Gn,aB),e(aB,yso),e(Gn,xso),e(Gn,nB),e(nB,$so),e(Gn,kso),e(k,Sso),e(k,eh),e(eh,tle),e(tle,Rso),e(eh,Pso),e(eh,sB),e(sB,Bso),e(eh,Iso),e(k,Nso),e(k,On),e(On,ale),e(ale,qso),e(On,jso),e(On,lB),e(lB,Dso),e(On,Gso),e(On,iB),e(iB,Oso),e(On,Vso),e(k,Xso),e(k,oh),e(oh,nle),e(nle,zso),e(oh,Qso),e(oh,dB),e(dB,Wso),e(oh,Hso),e(k,Uso),e(k,rh),e(rh,sle),e(sle,Jso),e(rh,Yso),e(rh,cB),e(cB,Kso),e(rh,Zso),e(k,elo),e(k,th),e(th,lle),e(lle,olo),e(th,rlo),e(th,fB),e(fB,tlo),e(th,alo),e(k,nlo),e(k,Vn),e(Vn,ile),e(ile,slo),e(Vn,llo),e(Vn,mB),e(mB,ilo),e(Vn,dlo),e(Vn,gB),e(gB,clo),e(Vn,flo),e(k,mlo),e(k,Xn),e(Xn,dle),e(dle,glo),e(Xn,hlo),e(Xn,hB),e(hB,plo),e(Xn,_lo),e(Xn,pB),e(pB,ulo),e(Xn,blo),e(k,vlo),e(k,zn),e(zn,cle),e(cle,Flo),e(zn,Tlo),e(zn,_B),e(_B,Mlo),e(zn,Elo),e(zn,uB),e(uB,Clo),e(zn,wlo),e(k,Alo),e(k,ah),e(ah,fle),e(fle,Llo),e(ah,ylo),e(ah,bB),e(bB,xlo),e(ah,$lo),e(k,klo),e(k,nh),e(nh,mle),e(mle,Slo),e(nh,Rlo),e(nh,vB),e(vB,Plo),e(nh,Blo),e(k,Ilo),e(k,sh),e(sh,gle),e(gle,Nlo),e(sh,qlo),e(sh,FB),e(FB,jlo),e(sh,Dlo),e(k,Glo),e(k,Qn),e(Qn,hle),e(hle,Olo),e(Qn,Vlo),e(Qn,TB),e(TB,Xlo),e(Qn,zlo),e(Qn,MB),e(MB,Qlo),e(Qn,Wlo),e(k,Hlo),e(k,lh),e(lh,ple),e(ple,Ulo),e(lh,Jlo),e(lh,EB),e(EB,Ylo),e(lh,Klo),e(k,Zlo),e(k,Wn),e(Wn,_le),e(_le,eio),e(Wn,oio),e(Wn,CB),e(CB,rio),e(Wn,tio),e(Wn,wB),e(wB,aio),e(Wn,nio),e(k,sio),e(k,Hn),e(Hn,ule),e(ule,lio),e(Hn,iio),e(Hn,AB),e(AB,dio),e(Hn,cio),e(Hn,LB),e(LB,fio),e(Hn,mio),e(k,gio),e(k,Un),e(Un,ble),e(ble,hio),e(Un,pio),e(Un,yB),e(yB,_io),e(Un,uio),e(Un,xB),e(xB,bio),e(Un,vio),e(k,Fio),e(k,Jn),e(Jn,vle),e(vle,Tio),e(Jn,Mio),e(Jn,$B),e($B,Eio),e(Jn,Cio),e(Jn,kB),e(kB,wio),e(Jn,Aio),e(k,Lio),e(k,ih),e(ih,Fle),e(Fle,yio),e(ih,xio),e(ih,SB),e(SB,$io),e(ih,kio),e(k,Sio),e(k,Yn),e(Yn,Tle),e(Tle,Rio),e(Yn,Pio),e(Yn,RB),e(RB,Bio),e(Yn,Iio),e(Yn,PB),e(PB,Nio),e(Yn,qio),e(k,jio),e(k,Kn),e(Kn,Mle),e(Mle,Dio),e(Kn,Gio),e(Kn,BB),e(BB,Oio),e(Kn,Vio),e(Kn,IB),e(IB,Xio),e(Kn,zio),e(k,Qio),e(k,Zn),e(Zn,Ele),e(Ele,Wio),e(Zn,Hio),e(Zn,NB),e(NB,Uio),e(Zn,Jio),e(Zn,qB),e(qB,Yio),e(Zn,Kio),e(k,Zio),e(k,es),e(es,Cle),e(Cle,edo),e(es,odo),e(es,jB),e(jB,rdo),e(es,tdo),e(es,DB),e(DB,ado),e(es,ndo),e(k,sdo),e(k,os),e(os,wle),e(wle,ldo),e(os,ido),e(os,GB),e(GB,ddo),e(os,cdo),e(os,OB),e(OB,fdo),e(os,mdo),e(k,gdo),e(k,rs),e(rs,Ale),e(Ale,hdo),e(rs,pdo),e(rs,VB),e(VB,_do),e(rs,udo),e(rs,XB),e(XB,bdo),e(rs,vdo),e(k,Fdo),e(k,dh),e(dh,Lle),e(Lle,Tdo),e(dh,Mdo),e(dh,zB),e(zB,Edo),e(dh,Cdo),e(k,wdo),e(k,ts),e(ts,yle),e(yle,Ado),e(ts,Ldo),e(ts,QB),e(QB,ydo),e(ts,xdo),e(ts,WB),e(WB,$do),e(ts,kdo),e(k,Sdo),e(k,ch),e(ch,xle),e(xle,Rdo),e(ch,Pdo),e(ch,HB),e(HB,Bdo),e(ch,Ido),e(k,Ndo),e(k,as),e(as,$le),e($le,qdo),e(as,jdo),e(as,UB),e(UB,Ddo),e(as,Gdo),e(as,JB),e(JB,Odo),e(as,Vdo),e(k,Xdo),e(k,ns),e(ns,kle),e(kle,zdo),e(ns,Qdo),e(ns,YB),e(YB,Wdo),e(ns,Hdo),e(ns,KB),e(KB,Udo),e(ns,Jdo),e(k,Ydo),e(k,ss),e(ss,Sle),e(Sle,Kdo),e(ss,Zdo),e(ss,ZB),e(ZB,eco),e(ss,oco),e(ss,eI),e(eI,rco),e(ss,tco),e(k,aco),e(k,fh),e(fh,Rle),e(Rle,nco),e(fh,sco),e(fh,oI),e(oI,lco),e(fh,ico),e(k,dco),e(k,ls),e(ls,Ple),e(Ple,cco),e(ls,fco),e(ls,rI),e(rI,mco),e(ls,gco),e(ls,tI),e(tI,hco),e(ls,pco),e(k,_co),e(k,is),e(is,Ble),e(Ble,uco),e(is,bco),e(is,aI),e(aI,vco),e(is,Fco),e(is,nI),e(nI,Tco),e(is,Mco),e(k,Eco),e(k,ds),e(ds,Ile),e(Ile,Cco),e(ds,wco),e(ds,sI),e(sI,Aco),e(ds,Lco),e(ds,lI),e(lI,yco),e(ds,xco),e(k,$co),e(k,mh),e(mh,Nle),e(Nle,kco),e(mh,Sco),e(mh,iI),e(iI,Rco),e(mh,Pco),e(k,Bco),e(k,cs),e(cs,qle),e(qle,Ico),e(cs,Nco),e(cs,dI),e(dI,qco),e(cs,jco),e(cs,cI),e(cI,Dco),e(cs,Gco),e(k,Oco),e(k,fs),e(fs,jle),e(jle,Vco),e(fs,Xco),e(fs,fI),e(fI,zco),e(fs,Qco),e(fs,mI),e(mI,Wco),e(fs,Hco),e(k,Uco),e(k,ms),e(ms,Dle),e(Dle,Jco),e(ms,Yco),e(ms,gI),e(gI,Kco),e(ms,Zco),e(ms,hI),e(hI,efo),e(ms,ofo),e(k,rfo),e(k,gs),e(gs,Gle),e(Gle,tfo),e(gs,afo),e(gs,pI),e(pI,nfo),e(gs,sfo),e(gs,_I),e(_I,lfo),e(gs,ifo),e(k,dfo),e(k,hs),e(hs,Ole),e(Ole,cfo),e(hs,ffo),e(hs,uI),e(uI,mfo),e(hs,gfo),e(hs,bI),e(bI,hfo),e(hs,pfo),e(k,_fo),e(k,ps),e(ps,Vle),e(Vle,ufo),e(ps,bfo),e(ps,vI),e(vI,vfo),e(ps,Ffo),e(ps,FI),e(FI,Tfo),e(ps,Mfo),e(k,Efo),e(k,_s),e(_s,Xle),e(Xle,Cfo),e(_s,wfo),e(_s,TI),e(TI,Afo),e(_s,Lfo),e(_s,MI),e(MI,yfo),e(_s,xfo),e(k,$fo),e(k,us),e(us,zle),e(zle,kfo),e(us,Sfo),e(us,EI),e(EI,Rfo),e(us,Pfo),e(us,CI),e(CI,Bfo),e(us,Ifo),e(k,Nfo),e(k,gh),e(gh,Qle),e(Qle,qfo),e(gh,jfo),e(gh,wI),e(wI,Dfo),e(gh,Gfo),e(k,Ofo),e(k,bs),e(bs,Wle),e(Wle,Vfo),e(bs,Xfo),e(bs,AI),e(AI,zfo),e(bs,Qfo),e(bs,LI),e(LI,Wfo),e(bs,Hfo),e(k,Ufo),e(k,hh),e(hh,Hle),e(Hle,Jfo),e(hh,Yfo),e(hh,yI),e(yI,Kfo),e(hh,Zfo),e(k,emo),e(k,ph),e(ph,Ule),e(Ule,omo),e(ph,rmo),e(ph,xI),e(xI,tmo),e(ph,amo),e(k,nmo),e(k,vs),e(vs,Jle),e(Jle,smo),e(vs,lmo),e(vs,$I),e($I,imo),e(vs,dmo),e(vs,kI),e(kI,cmo),e(vs,fmo),e(k,mmo),e(k,Fs),e(Fs,Yle),e(Yle,gmo),e(Fs,hmo),e(Fs,SI),e(SI,pmo),e(Fs,_mo),e(Fs,RI),e(RI,umo),e(Fs,bmo),e(k,vmo),e(k,Ts),e(Ts,Kle),e(Kle,Fmo),e(Ts,Tmo),e(Ts,PI),e(PI,Mmo),e(Ts,Emo),e(Ts,BI),e(BI,Cmo),e(Ts,wmo),e(k,Amo),e(k,_h),e(_h,Zle),e(Zle,Lmo),e(_h,ymo),e(_h,II),e(II,xmo),e(_h,$mo),e(k,kmo),e(k,Ms),e(Ms,eie),e(eie,Smo),e(Ms,Rmo),e(Ms,NI),e(NI,Pmo),e(Ms,Bmo),e(Ms,qI),e(qI,Imo),e(Ms,Nmo),e(k,qmo),e(k,Es),e(Es,oie),e(oie,jmo),e(Es,Dmo),e(Es,jI),e(jI,Gmo),e(Es,Omo),e(Es,DI),e(DI,Vmo),e(Es,Xmo),e(k,zmo),e(k,Cs),e(Cs,rie),e(rie,Qmo),e(Cs,Wmo),e(Cs,GI),e(GI,Hmo),e(Cs,Umo),e(Cs,OI),e(OI,Jmo),e(Cs,Ymo),e(k,Kmo),e(k,ws),e(ws,tie),e(tie,Zmo),e(ws,ego),e(ws,VI),e(VI,ogo),e(ws,rgo),e(ws,XI),e(XI,tgo),e(ws,ago),e(k,ngo),e(k,As),e(As,aie),e(aie,sgo),e(As,lgo),e(As,zI),e(zI,igo),e(As,dgo),e(As,QI),e(QI,cgo),e(As,fgo),e(k,mgo),e(k,Ls),e(Ls,nie),e(nie,ggo),e(Ls,hgo),e(Ls,WI),e(WI,pgo),e(Ls,_go),e(Ls,HI),e(HI,ugo),e(Ls,bgo),e(k,vgo),e(k,ys),e(ys,sie),e(sie,Fgo),e(ys,Tgo),e(ys,UI),e(UI,Mgo),e(ys,Ego),e(ys,JI),e(JI,Cgo),e(ys,wgo),e(k,Ago),e(k,uh),e(uh,lie),e(lie,Lgo),e(uh,ygo),e(uh,YI),e(YI,xgo),e(uh,$go),e(k,kgo),e(k,xs),e(xs,iie),e(iie,Sgo),e(xs,Rgo),e(xs,KI),e(KI,Pgo),e(xs,Bgo),e(xs,ZI),e(ZI,Igo),e(xs,Ngo),e(k,qgo),e(k,bh),e(bh,die),e(die,jgo),e(bh,Dgo),e(bh,eN),e(eN,Ggo),e(bh,Ogo),e(k,Vgo),e(k,vh),e(vh,cie),e(cie,Xgo),e(vh,zgo),e(vh,oN),e(oN,Qgo),e(vh,Wgo),e(k,Hgo),e(k,Fh),e(Fh,fie),e(fie,Ugo),e(Fh,Jgo),e(Fh,rN),e(rN,Ygo),e(Fh,Kgo),e(k,Zgo),e(k,Th),e(Th,mie),e(mie,eho),e(Th,oho),e(Th,tN),e(tN,rho),e(Th,tho),e(k,aho),e(k,$s),e($s,gie),e(gie,nho),e($s,sho),e($s,aN),e(aN,lho),e($s,iho),e($s,nN),e(nN,dho),e($s,cho),e(k,fho),e(k,Mh),e(Mh,hie),e(hie,mho),e(Mh,gho),e(Mh,sN),e(sN,hho),e(Mh,pho),e(k,_ho),e(k,ks),e(ks,pie),e(pie,uho),e(ks,bho),e(ks,lN),e(lN,vho),e(ks,Fho),e(ks,iN),e(iN,Tho),e(ks,Mho),e(k,Eho),e(k,Ss),e(Ss,_ie),e(_ie,Cho),e(Ss,who),e(Ss,dN),e(dN,Aho),e(Ss,Lho),e(Ss,cN),e(cN,yho),e(Ss,xho),e(k,$ho),e(k,Rs),e(Rs,uie),e(uie,kho),e(Rs,Sho),e(Rs,fN),e(fN,Rho),e(Rs,Pho),e(Rs,mN),e(mN,Bho),e(Rs,Iho),e(k,Nho),e(k,Ps),e(Ps,bie),e(bie,qho),e(Ps,jho),e(Ps,gN),e(gN,Dho),e(Ps,Gho),e(Ps,hN),e(hN,Oho),e(Ps,Vho),e(k,Xho),e(k,Bs),e(Bs,vie),e(vie,zho),e(Bs,Qho),e(Bs,pN),e(pN,Who),e(Bs,Hho),e(Bs,_N),e(_N,Uho),e(Bs,Jho),e(k,Yho),e(k,Is),e(Is,Fie),e(Fie,Kho),e(Is,Zho),e(Is,uN),e(uN,epo),e(Is,opo),e(Is,bN),e(bN,rpo),e(Is,tpo),e(k,apo),e(k,Eh),e(Eh,Tie),e(Tie,npo),e(Eh,spo),e(Eh,vN),e(vN,lpo),e(Eh,ipo),e(k,dpo),e(k,Ch),e(Ch,Mie),e(Mie,cpo),e(Ch,fpo),e(Ch,FN),e(FN,mpo),e(Ch,gpo),e(k,hpo),e(k,Ns),e(Ns,Eie),e(Eie,ppo),e(Ns,_po),e(Ns,TN),e(TN,upo),e(Ns,bpo),e(Ns,MN),e(MN,vpo),e(Ns,Fpo),e(k,Tpo),e(k,qs),e(qs,Cie),e(Cie,Mpo),e(qs,Epo),e(qs,EN),e(EN,Cpo),e(qs,wpo),e(qs,CN),e(CN,Apo),e(qs,Lpo),e(k,ypo),e(k,js),e(js,wie),e(wie,xpo),e(js,$po),e(js,wN),e(wN,kpo),e(js,Spo),e(js,AN),e(AN,Rpo),e(js,Ppo),e(k,Bpo),e(k,wh),e(wh,Aie),e(Aie,Ipo),e(wh,Npo),e(wh,LN),e(LN,qpo),e(wh,jpo),e(k,Dpo),e(k,Ah),e(Ah,Lie),e(Lie,Gpo),e(Ah,Opo),e(Ah,yN),e(yN,Vpo),e(Ah,Xpo),e(k,zpo),e(k,Lh),e(Lh,yie),e(yie,Qpo),e(Lh,Wpo),e(Lh,xN),e(xN,Hpo),e(Lh,Upo),e(k,Jpo),e(k,Ds),e(Ds,xie),e(xie,Ypo),e(Ds,Kpo),e(Ds,$N),e($N,Zpo),e(Ds,e_o),e(Ds,kN),e(kN,o_o),e(Ds,r_o),e(k,t_o),e(k,Gs),e(Gs,$ie),e($ie,a_o),e(Gs,n_o),e(Gs,SN),e(SN,s_o),e(Gs,l_o),e(Gs,RN),e(RN,i_o),e(Gs,d_o),e(k,c_o),e(k,yh),e(yh,kie),e(kie,f_o),e(yh,m_o),e(yh,PN),e(PN,g_o),e(yh,h_o),e(k,p_o),e(k,xh),e(xh,Sie),e(Sie,__o),e(xh,u_o),e(xh,BN),e(BN,b_o),e(xh,v_o),e(k,F_o),e(k,$h),e($h,Rie),e(Rie,T_o),e($h,M_o),e($h,IN),e(IN,E_o),e($h,C_o),e(k,w_o),e(k,Os),e(Os,Pie),e(Pie,A_o),e(Os,L_o),e(Os,NN),e(NN,y_o),e(Os,x_o),e(Os,qN),e(qN,$_o),e(Os,k_o),e(k,S_o),e(k,kh),e(kh,Bie),e(Bie,R_o),e(kh,P_o),e(kh,jN),e(jN,B_o),e(kh,I_o),e(k,N_o),e(k,Sh),e(Sh,Iie),e(Iie,q_o),e(Sh,j_o),e(Sh,DN),e(DN,D_o),e(Sh,G_o),e(k,O_o),e(k,Vs),e(Vs,Nie),e(Nie,V_o),e(Vs,X_o),e(Vs,GN),e(GN,z_o),e(Vs,Q_o),e(Vs,ON),e(ON,W_o),e(Vs,H_o),e(k,U_o),e(k,Xs),e(Xs,qie),e(qie,J_o),e(Xs,Y_o),e(Xs,VN),e(VN,K_o),e(Xs,Z_o),e(Xs,XN),e(XN,euo),e(Xs,ouo),e(k,ruo),e(k,zs),e(zs,jie),e(jie,tuo),e(zs,auo),e(zs,zN),e(zN,nuo),e(zs,suo),e(zs,QN),e(QN,luo),e(zs,iuo),e(k,duo),e(k,Qs),e(Qs,Die),e(Die,cuo),e(Qs,fuo),e(Qs,WN),e(WN,muo),e(Qs,guo),e(Qs,HN),e(HN,huo),e(Qs,puo),e(yr,_uo),M(Rh,yr,null),e(Lo,uuo),e(Lo,Ph),M(bL,Ph,null),e(Ph,buo),e(Ph,Gie),e(Gie,vuo),b(f,cXe,u),b(f,qi,u),e(qi,Bh),e(Bh,Oie),M(vL,Oie,null),e(qi,Fuo),e(qi,Vie),e(Vie,Tuo),b(f,fXe,u),b(f,yo,u),M(FL,yo,null),e(yo,Muo),e(yo,TL),e(TL,Euo),e(TL,UN),e(UN,Cuo),e(TL,wuo),e(yo,Auo),e(yo,ML),e(ML,Luo),e(ML,Xie),e(Xie,yuo),e(ML,xuo),e(yo,$uo),e(yo,Ue),M(EL,Ue,null),e(Ue,kuo),e(Ue,zie),e(zie,Suo),e(Ue,Ruo),e(Ue,Ba),e(Ba,Puo),e(Ba,Qie),e(Qie,Buo),e(Ba,Iuo),e(Ba,Wie),e(Wie,Nuo),e(Ba,quo),e(Ba,Hie),e(Hie,juo),e(Ba,Duo),e(Ue,Guo),e(Ue,Y),e(Y,Ih),e(Ih,Uie),e(Uie,Ouo),e(Ih,Vuo),e(Ih,JN),e(JN,Xuo),e(Ih,zuo),e(Y,Quo),e(Y,Nh),e(Nh,Jie),e(Jie,Wuo),e(Nh,Huo),e(Nh,YN),e(YN,Uuo),e(Nh,Juo),e(Y,Yuo),e(Y,qh),e(qh,Yie),e(Yie,Kuo),e(qh,Zuo),e(qh,KN),e(KN,e1o),e(qh,o1o),e(Y,r1o),e(Y,jh),e(jh,Kie),e(Kie,t1o),e(jh,a1o),e(jh,ZN),e(ZN,n1o),e(jh,s1o),e(Y,l1o),e(Y,Dh),e(Dh,Zie),e(Zie,i1o),e(Dh,d1o),e(Dh,eq),e(eq,c1o),e(Dh,f1o),e(Y,m1o),e(Y,Gh),e(Gh,ede),e(ede,g1o),e(Gh,h1o),e(Gh,oq),e(oq,p1o),e(Gh,_1o),e(Y,u1o),e(Y,Oh),e(Oh,ode),e(ode,b1o),e(Oh,v1o),e(Oh,rq),e(rq,F1o),e(Oh,T1o),e(Y,M1o),e(Y,Vh),e(Vh,rde),e(rde,E1o),e(Vh,C1o),e(Vh,tq),e(tq,w1o),e(Vh,A1o),e(Y,L1o),e(Y,Xh),e(Xh,tde),e(tde,y1o),e(Xh,x1o),e(Xh,aq),e(aq,$1o),e(Xh,k1o),e(Y,S1o),e(Y,zh),e(zh,ade),e(ade,R1o),e(zh,P1o),e(zh,nq),e(nq,B1o),e(zh,I1o),e(Y,N1o),e(Y,Qh),e(Qh,nde),e(nde,q1o),e(Qh,j1o),e(Qh,sq),e(sq,D1o),e(Qh,G1o),e(Y,O1o),e(Y,Wh),e(Wh,sde),e(sde,V1o),e(Wh,X1o),e(Wh,lq),e(lq,z1o),e(Wh,Q1o),e(Y,W1o),e(Y,Hh),e(Hh,lde),e(lde,H1o),e(Hh,U1o),e(Hh,iq),e(iq,J1o),e(Hh,Y1o),e(Y,K1o),e(Y,Uh),e(Uh,ide),e(ide,Z1o),e(Uh,e2o),e(Uh,dq),e(dq,o2o),e(Uh,r2o),e(Y,t2o),e(Y,Jh),e(Jh,dde),e(dde,a2o),e(Jh,n2o),e(Jh,cq),e(cq,s2o),e(Jh,l2o),e(Y,i2o),e(Y,Yh),e(Yh,cde),e(cde,d2o),e(Yh,c2o),e(Yh,fq),e(fq,f2o),e(Yh,m2o),e(Y,g2o),e(Y,Kh),e(Kh,fde),e(fde,h2o),e(Kh,p2o),e(Kh,mq),e(mq,_2o),e(Kh,u2o),e(Y,b2o),e(Y,Zh),e(Zh,mde),e(mde,v2o),e(Zh,F2o),e(Zh,gq),e(gq,T2o),e(Zh,M2o),e(Y,E2o),e(Y,ep),e(ep,gde),e(gde,C2o),e(ep,w2o),e(ep,hq),e(hq,A2o),e(ep,L2o),e(Y,y2o),e(Y,op),e(op,hde),e(hde,x2o),e(op,$2o),e(op,pq),e(pq,k2o),e(op,S2o),e(Y,R2o),e(Y,rp),e(rp,pde),e(pde,P2o),e(rp,B2o),e(rp,_q),e(_q,I2o),e(rp,N2o),e(Y,q2o),e(Y,tp),e(tp,_de),e(_de,j2o),e(tp,D2o),e(tp,uq),e(uq,G2o),e(tp,O2o),e(Y,V2o),e(Y,ap),e(ap,ude),e(ude,X2o),e(ap,z2o),e(ap,bq),e(bq,Q2o),e(ap,W2o),e(Y,H2o),e(Y,np),e(np,bde),e(bde,U2o),e(np,J2o),e(np,vq),e(vq,Y2o),e(np,K2o),e(Y,Z2o),e(Y,sp),e(sp,vde),e(vde,ebo),e(sp,obo),e(sp,Fq),e(Fq,rbo),e(sp,tbo),e(Y,abo),e(Y,lp),e(lp,Fde),e(Fde,nbo),e(lp,sbo),e(lp,Tq),e(Tq,lbo),e(lp,ibo),e(Y,dbo),e(Y,ip),e(ip,Tde),e(Tde,cbo),e(ip,fbo),e(ip,Mq),e(Mq,mbo),e(ip,gbo),e(Y,hbo),e(Y,dp),e(dp,Mde),e(Mde,pbo),e(dp,_bo),e(dp,Eq),e(Eq,ubo),e(dp,bbo),e(Y,vbo),e(Y,cp),e(cp,Ede),e(Ede,Fbo),e(cp,Tbo),e(cp,Cq),e(Cq,Mbo),e(cp,Ebo),e(Y,Cbo),e(Y,fp),e(fp,Cde),e(Cde,wbo),e(fp,Abo),e(fp,wq),e(wq,Lbo),e(fp,ybo),e(Y,xbo),e(Y,mp),e(mp,wde),e(wde,$bo),e(mp,kbo),e(mp,Aq),e(Aq,Sbo),e(mp,Rbo),e(Y,Pbo),e(Y,gp),e(gp,Ade),e(Ade,Bbo),e(gp,Ibo),e(gp,Lq),e(Lq,Nbo),e(gp,qbo),e(Y,jbo),e(Y,hp),e(hp,Lde),e(Lde,Dbo),e(hp,Gbo),e(hp,yq),e(yq,Obo),e(hp,Vbo),e(Y,Xbo),e(Y,pp),e(pp,yde),e(yde,zbo),e(pp,Qbo),e(pp,xq),e(xq,Wbo),e(pp,Hbo),e(Ue,Ubo),M(_p,Ue,null),e(Ue,Jbo),M(up,Ue,null),e(yo,Ybo),e(yo,bp),M(CL,bp,null),e(bp,Kbo),e(bp,xde),e(xde,Zbo),b(f,mXe,u),b(f,ji,u),e(ji,vp),e(vp,$de),M(wL,$de,null),e(ji,e3o),e(ji,kde),e(kde,o3o),b(f,gXe,u),b(f,xo,u),M(AL,xo,null),e(xo,r3o),e(xo,LL),e(LL,t3o),e(LL,$q),e($q,a3o),e(LL,n3o),e(xo,s3o),e(xo,yL),e(yL,l3o),e(yL,Sde),e(Sde,i3o),e(yL,d3o),e(xo,c3o),e(xo,Je),M(xL,Je,null),e(Je,f3o),e(Je,Rde),e(Rde,m3o),e(Je,g3o),e(Je,Di),e(Di,h3o),e(Di,Pde),e(Pde,p3o),e(Di,_3o),e(Di,Bde),e(Bde,u3o),e(Di,b3o),e(Je,v3o),e(Je,he),e(he,Fp),e(Fp,Ide),e(Ide,F3o),e(Fp,T3o),e(Fp,kq),e(kq,M3o),e(Fp,E3o),e(he,C3o),e(he,Tp),e(Tp,Nde),e(Nde,w3o),e(Tp,A3o),e(Tp,qde),e(qde,L3o),e(Tp,y3o),e(he,x3o),e(he,Mp),e(Mp,jde),e(jde,$3o),e(Mp,k3o),e(Mp,Sq),e(Sq,S3o),e(Mp,R3o),e(he,P3o),e(he,Ep),e(Ep,Dde),e(Dde,B3o),e(Ep,I3o),e(Ep,Rq),e(Rq,N3o),e(Ep,q3o),e(he,j3o),e(he,Cp),e(Cp,Gde),e(Gde,D3o),e(Cp,G3o),e(Cp,Pq),e(Pq,O3o),e(Cp,V3o),e(he,X3o),e(he,wp),e(wp,Ode),e(Ode,z3o),e(wp,Q3o),e(wp,Bq),e(Bq,W3o),e(wp,H3o),e(he,U3o),e(he,Ap),e(Ap,Vde),e(Vde,J3o),e(Ap,Y3o),e(Ap,Iq),e(Iq,K3o),e(Ap,Z3o),e(he,evo),e(he,Lp),e(Lp,Xde),e(Xde,ovo),e(Lp,rvo),e(Lp,Nq),e(Nq,tvo),e(Lp,avo),e(he,nvo),e(he,yp),e(yp,zde),e(zde,svo),e(yp,lvo),e(yp,qq),e(qq,ivo),e(yp,dvo),e(he,cvo),e(he,xp),e(xp,Qde),e(Qde,fvo),e(xp,mvo),e(xp,jq),e(jq,gvo),e(xp,hvo),e(he,pvo),e(he,$p),e($p,Wde),e(Wde,_vo),e($p,uvo),e($p,Dq),e(Dq,bvo),e($p,vvo),e(he,Fvo),e(he,kp),e(kp,Hde),e(Hde,Tvo),e(kp,Mvo),e(kp,Gq),e(Gq,Evo),e(kp,Cvo),e(he,wvo),e(he,Sp),e(Sp,Ude),e(Ude,Avo),e(Sp,Lvo),e(Sp,Oq),e(Oq,yvo),e(Sp,xvo),e(he,$vo),e(he,Rp),e(Rp,Jde),e(Jde,kvo),e(Rp,Svo),e(Rp,Vq),e(Vq,Rvo),e(Rp,Pvo),e(he,Bvo),e(he,Pp),e(Pp,Yde),e(Yde,Ivo),e(Pp,Nvo),e(Pp,Xq),e(Xq,qvo),e(Pp,jvo),e(he,Dvo),e(he,Bp),e(Bp,Kde),e(Kde,Gvo),e(Bp,Ovo),e(Bp,zq),e(zq,Vvo),e(Bp,Xvo),e(he,zvo),e(he,Ip),e(Ip,Zde),e(Zde,Qvo),e(Ip,Wvo),e(Ip,Qq),e(Qq,Hvo),e(Ip,Uvo),e(he,Jvo),e(he,Np),e(Np,ece),e(ece,Yvo),e(Np,Kvo),e(Np,Wq),e(Wq,Zvo),e(Np,eFo),e(Je,oFo),M(qp,Je,null),e(Je,rFo),M(jp,Je,null),e(xo,tFo),e(xo,Dp),M($L,Dp,null),e(Dp,aFo),e(Dp,oce),e(oce,nFo),b(f,hXe,u),b(f,Gi,u),e(Gi,Gp),e(Gp,rce),M(kL,rce,null),e(Gi,sFo),e(Gi,tce),e(tce,lFo),b(f,pXe,u),b(f,$o,u),M(SL,$o,null),e($o,iFo),e($o,Oi),e(Oi,dFo),e(Oi,Hq),e(Hq,cFo),e(Oi,fFo),e(Oi,Uq),e(Uq,mFo),e(Oi,gFo),e($o,hFo),e($o,RL),e(RL,pFo),e(RL,ace),e(ace,_Fo),e(RL,uFo),e($o,bFo),e($o,it),M(PL,it,null),e(it,vFo),e(it,nce),e(nce,FFo),e(it,TFo),e(it,Vi),e(Vi,MFo),e(Vi,sce),e(sce,EFo),e(Vi,CFo),e(Vi,Jq),e(Jq,wFo),e(Vi,AFo),e(it,LFo),M(Op,it,null),e($o,yFo),e($o,Ye),M(BL,Ye,null),e(Ye,xFo),e(Ye,lce),e(lce,$Fo),e(Ye,kFo),e(Ye,Ia),e(Ia,SFo),e(Ia,ice),e(ice,RFo),e(Ia,PFo),e(Ia,dce),e(dce,BFo),e(Ia,IFo),e(Ia,cce),e(cce,NFo),e(Ia,qFo),e(Ye,jFo),e(Ye,y),e(y,Vp),e(Vp,fce),e(fce,DFo),e(Vp,GFo),e(Vp,Yq),e(Yq,OFo),e(Vp,VFo),e(y,XFo),e(y,Xp),e(Xp,mce),e(mce,zFo),e(Xp,QFo),e(Xp,Kq),e(Kq,WFo),e(Xp,HFo),e(y,UFo),e(y,zp),e(zp,gce),e(gce,JFo),e(zp,YFo),e(zp,Zq),e(Zq,KFo),e(zp,ZFo),e(y,eTo),e(y,Qp),e(Qp,hce),e(hce,oTo),e(Qp,rTo),e(Qp,ej),e(ej,tTo),e(Qp,aTo),e(y,nTo),e(y,Wp),e(Wp,pce),e(pce,sTo),e(Wp,lTo),e(Wp,oj),e(oj,iTo),e(Wp,dTo),e(y,cTo),e(y,Hp),e(Hp,_ce),e(_ce,fTo),e(Hp,mTo),e(Hp,rj),e(rj,gTo),e(Hp,hTo),e(y,pTo),e(y,Up),e(Up,uce),e(uce,_To),e(Up,uTo),e(Up,tj),e(tj,bTo),e(Up,vTo),e(y,FTo),e(y,Jp),e(Jp,bce),e(bce,TTo),e(Jp,MTo),e(Jp,aj),e(aj,ETo),e(Jp,CTo),e(y,wTo),e(y,Yp),e(Yp,vce),e(vce,ATo),e(Yp,LTo),e(Yp,nj),e(nj,yTo),e(Yp,xTo),e(y,$To),e(y,Kp),e(Kp,Fce),e(Fce,kTo),e(Kp,STo),e(Kp,sj),e(sj,RTo),e(Kp,PTo),e(y,BTo),e(y,Zp),e(Zp,Tce),e(Tce,ITo),e(Zp,NTo),e(Zp,lj),e(lj,qTo),e(Zp,jTo),e(y,DTo),e(y,e_),e(e_,Mce),e(Mce,GTo),e(e_,OTo),e(e_,ij),e(ij,VTo),e(e_,XTo),e(y,zTo),e(y,o_),e(o_,Ece),e(Ece,QTo),e(o_,WTo),e(o_,dj),e(dj,HTo),e(o_,UTo),e(y,JTo),e(y,r_),e(r_,Cce),e(Cce,YTo),e(r_,KTo),e(r_,cj),e(cj,ZTo),e(r_,e8o),e(y,o8o),e(y,t_),e(t_,wce),e(wce,r8o),e(t_,t8o),e(t_,fj),e(fj,a8o),e(t_,n8o),e(y,s8o),e(y,a_),e(a_,Ace),e(Ace,l8o),e(a_,i8o),e(a_,mj),e(mj,d8o),e(a_,c8o),e(y,f8o),e(y,n_),e(n_,Lce),e(Lce,m8o),e(n_,g8o),e(n_,gj),e(gj,h8o),e(n_,p8o),e(y,_8o),e(y,s_),e(s_,yce),e(yce,u8o),e(s_,b8o),e(s_,hj),e(hj,v8o),e(s_,F8o),e(y,T8o),e(y,l_),e(l_,xce),e(xce,M8o),e(l_,E8o),e(l_,pj),e(pj,C8o),e(l_,w8o),e(y,A8o),e(y,i_),e(i_,$ce),e($ce,L8o),e(i_,y8o),e(i_,_j),e(_j,x8o),e(i_,$8o),e(y,k8o),e(y,d_),e(d_,kce),e(kce,S8o),e(d_,R8o),e(d_,uj),e(uj,P8o),e(d_,B8o),e(y,I8o),e(y,c_),e(c_,Sce),e(Sce,N8o),e(c_,q8o),e(c_,bj),e(bj,j8o),e(c_,D8o),e(y,G8o),e(y,f_),e(f_,Rce),e(Rce,O8o),e(f_,V8o),e(f_,vj),e(vj,X8o),e(f_,z8o),e(y,Q8o),e(y,m_),e(m_,Pce),e(Pce,W8o),e(m_,H8o),e(m_,Fj),e(Fj,U8o),e(m_,J8o),e(y,Y8o),e(y,g_),e(g_,Bce),e(Bce,K8o),e(g_,Z8o),e(g_,Tj),e(Tj,eMo),e(g_,oMo),e(y,rMo),e(y,h_),e(h_,Ice),e(Ice,tMo),e(h_,aMo),e(h_,Mj),e(Mj,nMo),e(h_,sMo),e(y,lMo),e(y,p_),e(p_,Nce),e(Nce,iMo),e(p_,dMo),e(p_,Ej),e(Ej,cMo),e(p_,fMo),e(y,mMo),e(y,__),e(__,qce),e(qce,gMo),e(__,hMo),e(__,Cj),e(Cj,pMo),e(__,_Mo),e(y,uMo),e(y,u_),e(u_,jce),e(jce,bMo),e(u_,vMo),e(u_,wj),e(wj,FMo),e(u_,TMo),e(y,MMo),e(y,b_),e(b_,Dce),e(Dce,EMo),e(b_,CMo),e(b_,Aj),e(Aj,wMo),e(b_,AMo),e(y,LMo),e(y,v_),e(v_,Gce),e(Gce,yMo),e(v_,xMo),e(v_,Lj),e(Lj,$Mo),e(v_,kMo),e(y,SMo),e(y,F_),e(F_,Oce),e(Oce,RMo),e(F_,PMo),e(F_,yj),e(yj,BMo),e(F_,IMo),e(y,NMo),e(y,T_),e(T_,Vce),e(Vce,qMo),e(T_,jMo),e(T_,xj),e(xj,DMo),e(T_,GMo),e(y,OMo),e(y,M_),e(M_,Xce),e(Xce,VMo),e(M_,XMo),e(M_,$j),e($j,zMo),e(M_,QMo),e(y,WMo),e(y,Ws),e(Ws,zce),e(zce,HMo),e(Ws,UMo),e(Ws,kj),e(kj,JMo),e(Ws,YMo),e(Ws,Sj),e(Sj,KMo),e(Ws,ZMo),e(y,e4o),e(y,E_),e(E_,Qce),e(Qce,o4o),e(E_,r4o),e(E_,Rj),e(Rj,t4o),e(E_,a4o),e(y,n4o),e(y,C_),e(C_,Wce),e(Wce,s4o),e(C_,l4o),e(C_,Pj),e(Pj,i4o),e(C_,d4o),e(y,c4o),e(y,w_),e(w_,Hce),e(Hce,f4o),e(w_,m4o),e(w_,Bj),e(Bj,g4o),e(w_,h4o),e(y,p4o),e(y,A_),e(A_,Uce),e(Uce,_4o),e(A_,u4o),e(A_,Ij),e(Ij,b4o),e(A_,v4o),e(y,F4o),e(y,L_),e(L_,Jce),e(Jce,T4o),e(L_,M4o),e(L_,Nj),e(Nj,E4o),e(L_,C4o),e(y,w4o),e(y,y_),e(y_,Yce),e(Yce,A4o),e(y_,L4o),e(y_,qj),e(qj,y4o),e(y_,x4o),e(y,$4o),e(y,x_),e(x_,Kce),e(Kce,k4o),e(x_,S4o),e(x_,jj),e(jj,R4o),e(x_,P4o),e(y,B4o),e(y,$_),e($_,Zce),e(Zce,I4o),e($_,N4o),e($_,Dj),e(Dj,q4o),e($_,j4o),e(y,D4o),e(y,k_),e(k_,efe),e(efe,G4o),e(k_,O4o),e(k_,Gj),e(Gj,V4o),e(k_,X4o),e(y,z4o),e(y,S_),e(S_,ofe),e(ofe,Q4o),e(S_,W4o),e(S_,Oj),e(Oj,H4o),e(S_,U4o),e(y,J4o),e(y,R_),e(R_,rfe),e(rfe,Y4o),e(R_,K4o),e(R_,Vj),e(Vj,Z4o),e(R_,eEo),e(y,oEo),e(y,P_),e(P_,tfe),e(tfe,rEo),e(P_,tEo),e(P_,Xj),e(Xj,aEo),e(P_,nEo),e(y,sEo),e(y,B_),e(B_,afe),e(afe,lEo),e(B_,iEo),e(B_,zj),e(zj,dEo),e(B_,cEo),e(y,fEo),e(y,I_),e(I_,nfe),e(nfe,mEo),e(I_,gEo),e(I_,Qj),e(Qj,hEo),e(I_,pEo),e(y,_Eo),e(y,N_),e(N_,sfe),e(sfe,uEo),e(N_,bEo),e(N_,Wj),e(Wj,vEo),e(N_,FEo),e(y,TEo),e(y,q_),e(q_,lfe),e(lfe,MEo),e(q_,EEo),e(q_,Hj),e(Hj,CEo),e(q_,wEo),e(y,AEo),e(y,j_),e(j_,ife),e(ife,LEo),e(j_,yEo),e(j_,Uj),e(Uj,xEo),e(j_,$Eo),e(y,kEo),e(y,D_),e(D_,dfe),e(dfe,SEo),e(D_,REo),e(D_,Jj),e(Jj,PEo),e(D_,BEo),e(y,IEo),e(y,G_),e(G_,cfe),e(cfe,NEo),e(G_,qEo),e(G_,Yj),e(Yj,jEo),e(G_,DEo),e(y,GEo),e(y,O_),e(O_,ffe),e(ffe,OEo),e(O_,VEo),e(O_,Kj),e(Kj,XEo),e(O_,zEo),e(y,QEo),e(y,V_),e(V_,mfe),e(mfe,WEo),e(V_,HEo),e(V_,Zj),e(Zj,UEo),e(V_,JEo),e(y,YEo),e(y,X_),e(X_,gfe),e(gfe,KEo),e(X_,ZEo),e(X_,eD),e(eD,eCo),e(X_,oCo),e(y,rCo),e(y,z_),e(z_,hfe),e(hfe,tCo),e(z_,aCo),e(z_,oD),e(oD,nCo),e(z_,sCo),e(y,lCo),e(y,Q_),e(Q_,pfe),e(pfe,iCo),e(Q_,dCo),e(Q_,rD),e(rD,cCo),e(Q_,fCo),e(y,mCo),e(y,W_),e(W_,_fe),e(_fe,gCo),e(W_,hCo),e(W_,tD),e(tD,pCo),e(W_,_Co),e(y,uCo),e(y,H_),e(H_,ufe),e(ufe,bCo),e(H_,vCo),e(H_,aD),e(aD,FCo),e(H_,TCo),e(y,MCo),e(y,U_),e(U_,bfe),e(bfe,ECo),e(U_,CCo),e(U_,nD),e(nD,wCo),e(U_,ACo),e(y,LCo),e(y,J_),e(J_,vfe),e(vfe,yCo),e(J_,xCo),e(J_,sD),e(sD,$Co),e(J_,kCo),e(y,SCo),e(y,Y_),e(Y_,Ffe),e(Ffe,RCo),e(Y_,PCo),e(Y_,lD),e(lD,BCo),e(Y_,ICo),e(y,NCo),e(y,K_),e(K_,Tfe),e(Tfe,qCo),e(K_,jCo),e(K_,iD),e(iD,DCo),e(K_,GCo),e(y,OCo),e(y,Z_),e(Z_,Mfe),e(Mfe,VCo),e(Z_,XCo),e(Z_,dD),e(dD,zCo),e(Z_,QCo),e(y,WCo),e(y,eu),e(eu,Efe),e(Efe,HCo),e(eu,UCo),e(eu,cD),e(cD,JCo),e(eu,YCo),e(y,KCo),e(y,ou),e(ou,Cfe),e(Cfe,ZCo),e(ou,e5o),e(ou,fD),e(fD,o5o),e(ou,r5o),e(y,t5o),e(y,ru),e(ru,wfe),e(wfe,a5o),e(ru,n5o),e(ru,mD),e(mD,s5o),e(ru,l5o),e(y,i5o),e(y,tu),e(tu,Afe),e(Afe,d5o),e(tu,c5o),e(tu,gD),e(gD,f5o),e(tu,m5o),e(y,g5o),e(y,au),e(au,Lfe),e(Lfe,h5o),e(au,p5o),e(au,hD),e(hD,_5o),e(au,u5o),e(y,b5o),e(y,nu),e(nu,yfe),e(yfe,v5o),e(nu,F5o),e(nu,pD),e(pD,T5o),e(nu,M5o),e(y,E5o),e(y,su),e(su,xfe),e(xfe,C5o),e(su,w5o),e(su,_D),e(_D,A5o),e(su,L5o),e(y,y5o),e(y,lu),e(lu,$fe),e($fe,x5o),e(lu,$5o),e(lu,uD),e(uD,k5o),e(lu,S5o),e(y,R5o),e(y,iu),e(iu,kfe),e(kfe,P5o),e(iu,B5o),e(iu,bD),e(bD,I5o),e(iu,N5o),e(y,q5o),e(y,du),e(du,Sfe),e(Sfe,j5o),e(du,D5o),e(du,vD),e(vD,G5o),e(du,O5o),e(y,V5o),e(y,cu),e(cu,Rfe),e(Rfe,X5o),e(cu,z5o),e(cu,FD),e(FD,Q5o),e(cu,W5o),e(y,H5o),e(y,fu),e(fu,Pfe),e(Pfe,U5o),e(fu,J5o),e(fu,TD),e(TD,Y5o),e(fu,K5o),e(y,Z5o),e(y,mu),e(mu,Bfe),e(Bfe,e0o),e(mu,o0o),e(mu,MD),e(MD,r0o),e(mu,t0o),e(y,a0o),e(y,gu),e(gu,Ife),e(Ife,n0o),e(gu,s0o),e(gu,ED),e(ED,l0o),e(gu,i0o),e(y,d0o),e(y,hu),e(hu,Nfe),e(Nfe,c0o),e(hu,f0o),e(hu,CD),e(CD,m0o),e(hu,g0o),e(y,h0o),e(y,pu),e(pu,qfe),e(qfe,p0o),e(pu,_0o),e(pu,wD),e(wD,u0o),e(pu,b0o),e(y,v0o),e(y,_u),e(_u,jfe),e(jfe,F0o),e(_u,T0o),e(_u,AD),e(AD,M0o),e(_u,E0o),e(y,C0o),e(y,uu),e(uu,Dfe),e(Dfe,w0o),e(uu,A0o),e(uu,LD),e(LD,L0o),e(uu,y0o),e(y,x0o),e(y,bu),e(bu,Gfe),e(Gfe,$0o),e(bu,k0o),e(bu,yD),e(yD,S0o),e(bu,R0o),e(y,P0o),e(y,vu),e(vu,Ofe),e(Ofe,B0o),e(vu,I0o),e(vu,xD),e(xD,N0o),e(vu,q0o),e(y,j0o),e(y,Fu),e(Fu,Vfe),e(Vfe,D0o),e(Fu,G0o),e(Fu,$D),e($D,O0o),e(Fu,V0o),e(y,X0o),e(y,Tu),e(Tu,Xfe),e(Xfe,z0o),e(Tu,Q0o),e(Tu,kD),e(kD,W0o),e(Tu,H0o),e(y,U0o),e(y,Mu),e(Mu,zfe),e(zfe,J0o),e(Mu,Y0o),e(Mu,SD),e(SD,K0o),e(Mu,Z0o),e(y,ewo),e(y,Eu),e(Eu,Qfe),e(Qfe,owo),e(Eu,rwo),e(Eu,RD),e(RD,two),e(Eu,awo),e(y,nwo),e(y,Cu),e(Cu,Wfe),e(Wfe,swo),e(Cu,lwo),e(Cu,PD),e(PD,iwo),e(Cu,dwo),e(y,cwo),e(y,wu),e(wu,Hfe),e(Hfe,fwo),e(wu,mwo),e(wu,BD),e(BD,gwo),e(wu,hwo),e(y,pwo),e(y,Au),e(Au,Ufe),e(Ufe,_wo),e(Au,uwo),e(Au,ID),e(ID,bwo),e(Au,vwo),e(y,Fwo),e(y,Lu),e(Lu,Jfe),e(Jfe,Two),e(Lu,Mwo),e(Lu,ND),e(ND,Ewo),e(Lu,Cwo),e(y,wwo),e(y,yu),e(yu,Yfe),e(Yfe,Awo),e(yu,Lwo),e(yu,qD),e(qD,ywo),e(yu,xwo),e(y,$wo),e(y,xu),e(xu,Kfe),e(Kfe,kwo),e(xu,Swo),e(xu,jD),e(jD,Rwo),e(xu,Pwo),e(y,Bwo),e(y,$u),e($u,Zfe),e(Zfe,Iwo),e($u,Nwo),e($u,DD),e(DD,qwo),e($u,jwo),e(y,Dwo),e(y,ku),e(ku,eme),e(eme,Gwo),e(ku,Owo),e(ku,GD),e(GD,Vwo),e(ku,Xwo),e(y,zwo),e(y,Su),e(Su,ome),e(ome,Qwo),e(Su,Wwo),e(Su,OD),e(OD,Hwo),e(Su,Uwo),e(y,Jwo),e(y,Ru),e(Ru,rme),e(rme,Ywo),e(Ru,Kwo),e(Ru,VD),e(VD,Zwo),e(Ru,eAo),e(y,oAo),e(y,Pu),e(Pu,tme),e(tme,rAo),e(Pu,tAo),e(Pu,XD),e(XD,aAo),e(Pu,nAo),e(y,sAo),e(y,Bu),e(Bu,ame),e(ame,lAo),e(Bu,iAo),e(Bu,zD),e(zD,dAo),e(Bu,cAo),e(y,fAo),e(y,Iu),e(Iu,nme),e(nme,mAo),e(Iu,gAo),e(Iu,QD),e(QD,hAo),e(Iu,pAo),e(y,_Ao),e(y,Nu),e(Nu,sme),e(sme,uAo),e(Nu,bAo),e(Nu,WD),e(WD,vAo),e(Nu,FAo),e(y,TAo),e(y,qu),e(qu,lme),e(lme,MAo),e(qu,EAo),e(qu,HD),e(HD,CAo),e(qu,wAo),e(y,AAo),e(y,ju),e(ju,ime),e(ime,LAo),e(ju,yAo),e(ju,UD),e(UD,xAo),e(ju,$Ao),e(y,kAo),e(y,Du),e(Du,dme),e(dme,SAo),e(Du,RAo),e(Du,JD),e(JD,PAo),e(Du,BAo),e(y,IAo),e(y,Gu),e(Gu,cme),e(cme,NAo),e(Gu,qAo),e(Gu,YD),e(YD,jAo),e(Gu,DAo),e(y,GAo),e(y,Ou),e(Ou,fme),e(fme,OAo),e(Ou,VAo),e(Ou,KD),e(KD,XAo),e(Ou,zAo),e(y,QAo),e(y,Vu),e(Vu,mme),e(mme,WAo),e(Vu,HAo),e(Vu,ZD),e(ZD,UAo),e(Vu,JAo),e(y,YAo),e(y,Xu),e(Xu,gme),e(gme,KAo),e(Xu,ZAo),e(Xu,eG),e(eG,e6o),e(Xu,o6o),e(Ye,r6o),e(Ye,zu),e(zu,t6o),e(zu,hme),e(hme,a6o),e(zu,n6o),e(zu,pme),e(pme,s6o),e(Ye,l6o),M(Qu,Ye,null),b(f,_Xe,u),b(f,Xi,u),e(Xi,Wu),e(Wu,_me),M(IL,_me,null),e(Xi,i6o),e(Xi,ume),e(ume,d6o),b(f,uXe,u),b(f,ko,u),M(NL,ko,null),e(ko,c6o),e(ko,zi),e(zi,f6o),e(zi,oG),e(oG,m6o),e(zi,g6o),e(zi,rG),e(rG,h6o),e(zi,p6o),e(ko,_6o),e(ko,qL),e(qL,u6o),e(qL,bme),e(bme,b6o),e(qL,v6o),e(ko,F6o),e(ko,dt),M(jL,dt,null),e(dt,T6o),e(dt,vme),e(vme,M6o),e(dt,E6o),e(dt,Qi),e(Qi,C6o),e(Qi,Fme),e(Fme,w6o),e(Qi,A6o),e(Qi,tG),e(tG,L6o),e(Qi,y6o),e(dt,x6o),M(Hu,dt,null),e(ko,$6o),e(ko,Ke),M(DL,Ke,null),e(Ke,k6o),e(Ke,Tme),e(Tme,S6o),e(Ke,R6o),e(Ke,Na),e(Na,P6o),e(Na,Mme),e(Mme,B6o),e(Na,I6o),e(Na,Eme),e(Eme,N6o),e(Na,q6o),e(Na,Cme),e(Cme,j6o),e(Na,D6o),e(Ke,G6o),e(Ke,G),e(G,Uu),e(Uu,wme),e(wme,O6o),e(Uu,V6o),e(Uu,aG),e(aG,X6o),e(Uu,z6o),e(G,Q6o),e(G,Ju),e(Ju,Ame),e(Ame,W6o),e(Ju,H6o),e(Ju,nG),e(nG,U6o),e(Ju,J6o),e(G,Y6o),e(G,Yu),e(Yu,Lme),e(Lme,K6o),e(Yu,Z6o),e(Yu,sG),e(sG,e7o),e(Yu,o7o),e(G,r7o),e(G,Ku),e(Ku,yme),e(yme,t7o),e(Ku,a7o),e(Ku,lG),e(lG,n7o),e(Ku,s7o),e(G,l7o),e(G,Zu),e(Zu,xme),e(xme,i7o),e(Zu,d7o),e(Zu,iG),e(iG,c7o),e(Zu,f7o),e(G,m7o),e(G,e1),e(e1,$me),e($me,g7o),e(e1,h7o),e(e1,dG),e(dG,p7o),e(e1,_7o),e(G,u7o),e(G,o1),e(o1,kme),e(kme,b7o),e(o1,v7o),e(o1,cG),e(cG,F7o),e(o1,T7o),e(G,M7o),e(G,r1),e(r1,Sme),e(Sme,E7o),e(r1,C7o),e(r1,fG),e(fG,w7o),e(r1,A7o),e(G,L7o),e(G,t1),e(t1,Rme),e(Rme,y7o),e(t1,x7o),e(t1,mG),e(mG,$7o),e(t1,k7o),e(G,S7o),e(G,a1),e(a1,Pme),e(Pme,R7o),e(a1,P7o),e(a1,gG),e(gG,B7o),e(a1,I7o),e(G,N7o),e(G,n1),e(n1,Bme),e(Bme,q7o),e(n1,j7o),e(n1,hG),e(hG,D7o),e(n1,G7o),e(G,O7o),e(G,s1),e(s1,Ime),e(Ime,V7o),e(s1,X7o),e(s1,pG),e(pG,z7o),e(s1,Q7o),e(G,W7o),e(G,l1),e(l1,Nme),e(Nme,H7o),e(l1,U7o),e(l1,_G),e(_G,J7o),e(l1,Y7o),e(G,K7o),e(G,i1),e(i1,qme),e(qme,Z7o),e(i1,eLo),e(i1,uG),e(uG,oLo),e(i1,rLo),e(G,tLo),e(G,d1),e(d1,jme),e(jme,aLo),e(d1,nLo),e(d1,bG),e(bG,sLo),e(d1,lLo),e(G,iLo),e(G,c1),e(c1,Dme),e(Dme,dLo),e(c1,cLo),e(c1,vG),e(vG,fLo),e(c1,mLo),e(G,gLo),e(G,f1),e(f1,Gme),e(Gme,hLo),e(f1,pLo),e(f1,FG),e(FG,_Lo),e(f1,uLo),e(G,bLo),e(G,m1),e(m1,Ome),e(Ome,vLo),e(m1,FLo),e(m1,TG),e(TG,TLo),e(m1,MLo),e(G,ELo),e(G,g1),e(g1,Vme),e(Vme,CLo),e(g1,wLo),e(g1,MG),e(MG,ALo),e(g1,LLo),e(G,yLo),e(G,h1),e(h1,Xme),e(Xme,xLo),e(h1,$Lo),e(h1,EG),e(EG,kLo),e(h1,SLo),e(G,RLo),e(G,p1),e(p1,zme),e(zme,PLo),e(p1,BLo),e(p1,CG),e(CG,ILo),e(p1,NLo),e(G,qLo),e(G,_1),e(_1,Qme),e(Qme,jLo),e(_1,DLo),e(_1,wG),e(wG,GLo),e(_1,OLo),e(G,VLo),e(G,u1),e(u1,Wme),e(Wme,XLo),e(u1,zLo),e(u1,AG),e(AG,QLo),e(u1,WLo),e(G,HLo),e(G,b1),e(b1,Hme),e(Hme,ULo),e(b1,JLo),e(b1,LG),e(LG,YLo),e(b1,KLo),e(G,ZLo),e(G,v1),e(v1,Ume),e(Ume,eyo),e(v1,oyo),e(v1,yG),e(yG,ryo),e(v1,tyo),e(G,ayo),e(G,F1),e(F1,Jme),e(Jme,nyo),e(F1,syo),e(F1,xG),e(xG,lyo),e(F1,iyo),e(G,dyo),e(G,T1),e(T1,Yme),e(Yme,cyo),e(T1,fyo),e(T1,$G),e($G,myo),e(T1,gyo),e(G,hyo),e(G,M1),e(M1,Kme),e(Kme,pyo),e(M1,_yo),e(M1,kG),e(kG,uyo),e(M1,byo),e(G,vyo),e(G,E1),e(E1,Zme),e(Zme,Fyo),e(E1,Tyo),e(E1,SG),e(SG,Myo),e(E1,Eyo),e(G,Cyo),e(G,C1),e(C1,ege),e(ege,wyo),e(C1,Ayo),e(C1,RG),e(RG,Lyo),e(C1,yyo),e(G,xyo),e(G,w1),e(w1,oge),e(oge,$yo),e(w1,kyo),e(w1,PG),e(PG,Syo),e(w1,Ryo),e(G,Pyo),e(G,A1),e(A1,rge),e(rge,Byo),e(A1,Iyo),e(A1,BG),e(BG,Nyo),e(A1,qyo),e(G,jyo),e(G,L1),e(L1,tge),e(tge,Dyo),e(L1,Gyo),e(L1,IG),e(IG,Oyo),e(L1,Vyo),e(G,Xyo),e(G,y1),e(y1,age),e(age,zyo),e(y1,Qyo),e(y1,NG),e(NG,Wyo),e(y1,Hyo),e(G,Uyo),e(G,x1),e(x1,nge),e(nge,Jyo),e(x1,Yyo),e(x1,qG),e(qG,Kyo),e(x1,Zyo),e(G,e9o),e(G,$1),e($1,sge),e(sge,o9o),e($1,r9o),e($1,jG),e(jG,t9o),e($1,a9o),e(G,n9o),e(G,k1),e(k1,lge),e(lge,s9o),e(k1,l9o),e(k1,DG),e(DG,i9o),e(k1,d9o),e(G,c9o),e(G,S1),e(S1,ige),e(ige,f9o),e(S1,m9o),e(S1,GG),e(GG,g9o),e(S1,h9o),e(G,p9o),e(G,R1),e(R1,dge),e(dge,_9o),e(R1,u9o),e(R1,OG),e(OG,b9o),e(R1,v9o),e(G,F9o),e(G,P1),e(P1,cge),e(cge,T9o),e(P1,M9o),e(P1,VG),e(VG,E9o),e(P1,C9o),e(G,w9o),e(G,B1),e(B1,fge),e(fge,A9o),e(B1,L9o),e(B1,XG),e(XG,y9o),e(B1,x9o),e(G,$9o),e(G,I1),e(I1,mge),e(mge,k9o),e(I1,S9o),e(I1,zG),e(zG,R9o),e(I1,P9o),e(G,B9o),e(G,N1),e(N1,gge),e(gge,I9o),e(N1,N9o),e(N1,QG),e(QG,q9o),e(N1,j9o),e(G,D9o),e(G,q1),e(q1,hge),e(hge,G9o),e(q1,O9o),e(q1,WG),e(WG,V9o),e(q1,X9o),e(G,z9o),e(G,j1),e(j1,pge),e(pge,Q9o),e(j1,W9o),e(j1,HG),e(HG,H9o),e(j1,U9o),e(Ke,J9o),e(Ke,D1),e(D1,Y9o),e(D1,_ge),e(_ge,K9o),e(D1,Z9o),e(D1,uge),e(uge,exo),e(Ke,oxo),M(G1,Ke,null),b(f,bXe,u),b(f,Wi,u),e(Wi,O1),e(O1,bge),M(GL,bge,null),e(Wi,rxo),e(Wi,vge),e(vge,txo),b(f,vXe,u),b(f,So,u),M(OL,So,null),e(So,axo),e(So,Hi),e(Hi,nxo),e(Hi,UG),e(UG,sxo),e(Hi,lxo),e(Hi,JG),e(JG,ixo),e(Hi,dxo),e(So,cxo),e(So,VL),e(VL,fxo),e(VL,Fge),e(Fge,mxo),e(VL,gxo),e(So,hxo),e(So,ct),M(XL,ct,null),e(ct,pxo),e(ct,Tge),e(Tge,_xo),e(ct,uxo),e(ct,Ui),e(Ui,bxo),e(Ui,Mge),e(Mge,vxo),e(Ui,Fxo),e(Ui,YG),e(YG,Txo),e(Ui,Mxo),e(ct,Exo),M(V1,ct,null),e(So,Cxo),e(So,Ze),M(zL,Ze,null),e(Ze,wxo),e(Ze,Ege),e(Ege,Axo),e(Ze,Lxo),e(Ze,qa),e(qa,yxo),e(qa,Cge),e(Cge,xxo),e(qa,$xo),e(qa,wge),e(wge,kxo),e(qa,Sxo),e(qa,Age),e(Age,Rxo),e(qa,Pxo),e(Ze,Bxo),e(Ze,z),e(z,X1),e(X1,Lge),e(Lge,Ixo),e(X1,Nxo),e(X1,KG),e(KG,qxo),e(X1,jxo),e(z,Dxo),e(z,z1),e(z1,yge),e(yge,Gxo),e(z1,Oxo),e(z1,ZG),e(ZG,Vxo),e(z1,Xxo),e(z,zxo),e(z,Q1),e(Q1,xge),e(xge,Qxo),e(Q1,Wxo),e(Q1,eO),e(eO,Hxo),e(Q1,Uxo),e(z,Jxo),e(z,W1),e(W1,$ge),e($ge,Yxo),e(W1,Kxo),e(W1,oO),e(oO,Zxo),e(W1,e$o),e(z,o$o),e(z,H1),e(H1,kge),e(kge,r$o),e(H1,t$o),e(H1,rO),e(rO,a$o),e(H1,n$o),e(z,s$o),e(z,U1),e(U1,Sge),e(Sge,l$o),e(U1,i$o),e(U1,tO),e(tO,d$o),e(U1,c$o),e(z,f$o),e(z,J1),e(J1,Rge),e(Rge,m$o),e(J1,g$o),e(J1,aO),e(aO,h$o),e(J1,p$o),e(z,_$o),e(z,Y1),e(Y1,Pge),e(Pge,u$o),e(Y1,b$o),e(Y1,nO),e(nO,v$o),e(Y1,F$o),e(z,T$o),e(z,K1),e(K1,Bge),e(Bge,M$o),e(K1,E$o),e(K1,sO),e(sO,C$o),e(K1,w$o),e(z,A$o),e(z,Z1),e(Z1,Ige),e(Ige,L$o),e(Z1,y$o),e(Z1,lO),e(lO,x$o),e(Z1,$$o),e(z,k$o),e(z,e2),e(e2,Nge),e(Nge,S$o),e(e2,R$o),e(e2,iO),e(iO,P$o),e(e2,B$o),e(z,I$o),e(z,o2),e(o2,qge),e(qge,N$o),e(o2,q$o),e(o2,dO),e(dO,j$o),e(o2,D$o),e(z,G$o),e(z,r2),e(r2,jge),e(jge,O$o),e(r2,V$o),e(r2,cO),e(cO,X$o),e(r2,z$o),e(z,Q$o),e(z,t2),e(t2,Dge),e(Dge,W$o),e(t2,H$o),e(t2,fO),e(fO,U$o),e(t2,J$o),e(z,Y$o),e(z,a2),e(a2,Gge),e(Gge,K$o),e(a2,Z$o),e(a2,mO),e(mO,eko),e(a2,oko),e(z,rko),e(z,n2),e(n2,Oge),e(Oge,tko),e(n2,ako),e(n2,gO),e(gO,nko),e(n2,sko),e(z,lko),e(z,s2),e(s2,Vge),e(Vge,iko),e(s2,dko),e(s2,hO),e(hO,cko),e(s2,fko),e(z,mko),e(z,l2),e(l2,Xge),e(Xge,gko),e(l2,hko),e(l2,pO),e(pO,pko),e(l2,_ko),e(z,uko),e(z,i2),e(i2,zge),e(zge,bko),e(i2,vko),e(i2,_O),e(_O,Fko),e(i2,Tko),e(z,Mko),e(z,d2),e(d2,Qge),e(Qge,Eko),e(d2,Cko),e(d2,uO),e(uO,wko),e(d2,Ako),e(z,Lko),e(z,c2),e(c2,Wge),e(Wge,yko),e(c2,xko),e(c2,bO),e(bO,$ko),e(c2,kko),e(z,Sko),e(z,f2),e(f2,Hge),e(Hge,Rko),e(f2,Pko),e(f2,vO),e(vO,Bko),e(f2,Iko),e(z,Nko),e(z,m2),e(m2,Uge),e(Uge,qko),e(m2,jko),e(m2,FO),e(FO,Dko),e(m2,Gko),e(z,Oko),e(z,g2),e(g2,Jge),e(Jge,Vko),e(g2,Xko),e(g2,TO),e(TO,zko),e(g2,Qko),e(z,Wko),e(z,h2),e(h2,Yge),e(Yge,Hko),e(h2,Uko),e(h2,MO),e(MO,Jko),e(h2,Yko),e(z,Kko),e(z,p2),e(p2,Kge),e(Kge,Zko),e(p2,eSo),e(p2,EO),e(EO,oSo),e(p2,rSo),e(z,tSo),e(z,_2),e(_2,Zge),e(Zge,aSo),e(_2,nSo),e(_2,CO),e(CO,sSo),e(_2,lSo),e(z,iSo),e(z,u2),e(u2,ehe),e(ehe,dSo),e(u2,cSo),e(u2,wO),e(wO,fSo),e(u2,mSo),e(z,gSo),e(z,b2),e(b2,ohe),e(ohe,hSo),e(b2,pSo),e(b2,AO),e(AO,_So),e(b2,uSo),e(z,bSo),e(z,v2),e(v2,rhe),e(rhe,vSo),e(v2,FSo),e(v2,LO),e(LO,TSo),e(v2,MSo),e(z,ESo),e(z,F2),e(F2,the),e(the,CSo),e(F2,wSo),e(F2,yO),e(yO,ASo),e(F2,LSo),e(z,ySo),e(z,T2),e(T2,ahe),e(ahe,xSo),e(T2,$So),e(T2,xO),e(xO,kSo),e(T2,SSo),e(z,RSo),e(z,M2),e(M2,nhe),e(nhe,PSo),e(M2,BSo),e(M2,$O),e($O,ISo),e(M2,NSo),e(z,qSo),e(z,E2),e(E2,she),e(she,jSo),e(E2,DSo),e(E2,kO),e(kO,GSo),e(E2,OSo),e(z,VSo),e(z,C2),e(C2,lhe),e(lhe,XSo),e(C2,zSo),e(C2,SO),e(SO,QSo),e(C2,WSo),e(z,HSo),e(z,w2),e(w2,ihe),e(ihe,USo),e(w2,JSo),e(w2,RO),e(RO,YSo),e(w2,KSo),e(z,ZSo),e(z,A2),e(A2,dhe),e(dhe,eRo),e(A2,oRo),e(A2,PO),e(PO,rRo),e(A2,tRo),e(z,aRo),e(z,L2),e(L2,che),e(che,nRo),e(L2,sRo),e(L2,BO),e(BO,lRo),e(L2,iRo),e(z,dRo),e(z,y2),e(y2,fhe),e(fhe,cRo),e(y2,fRo),e(y2,IO),e(IO,mRo),e(y2,gRo),e(z,hRo),e(z,x2),e(x2,mhe),e(mhe,pRo),e(x2,_Ro),e(x2,NO),e(NO,uRo),e(x2,bRo),e(Ze,vRo),e(Ze,$2),e($2,FRo),e($2,ghe),e(ghe,TRo),e($2,MRo),e($2,hhe),e(hhe,ERo),e(Ze,CRo),M(k2,Ze,null),b(f,FXe,u),b(f,Ji,u),e(Ji,S2),e(S2,phe),M(QL,phe,null),e(Ji,wRo),e(Ji,_he),e(_he,ARo),b(f,TXe,u),b(f,Ro,u),M(WL,Ro,null),e(Ro,LRo),e(Ro,Yi),e(Yi,yRo),e(Yi,qO),e(qO,xRo),e(Yi,$Ro),e(Yi,jO),e(jO,kRo),e(Yi,SRo),e(Ro,RRo),e(Ro,HL),e(HL,PRo),e(HL,uhe),e(uhe,BRo),e(HL,IRo),e(Ro,NRo),e(Ro,ft),M(UL,ft,null),e(ft,qRo),e(ft,bhe),e(bhe,jRo),e(ft,DRo),e(ft,Ki),e(Ki,GRo),e(Ki,vhe),e(vhe,ORo),e(Ki,VRo),e(Ki,DO),e(DO,XRo),e(Ki,zRo),e(ft,QRo),M(R2,ft,null),e(Ro,WRo),e(Ro,eo),M(JL,eo,null),e(eo,HRo),e(eo,Fhe),e(Fhe,URo),e(eo,JRo),e(eo,ja),e(ja,YRo),e(ja,The),e(The,KRo),e(ja,ZRo),e(ja,Mhe),e(Mhe,ePo),e(ja,oPo),e(ja,Ehe),e(Ehe,rPo),e(ja,tPo),e(eo,aPo),e(eo,W),e(W,P2),e(P2,Che),e(Che,nPo),e(P2,sPo),e(P2,GO),e(GO,lPo),e(P2,iPo),e(W,dPo),e(W,B2),e(B2,whe),e(whe,cPo),e(B2,fPo),e(B2,OO),e(OO,mPo),e(B2,gPo),e(W,hPo),e(W,I2),e(I2,Ahe),e(Ahe,pPo),e(I2,_Po),e(I2,VO),e(VO,uPo),e(I2,bPo),e(W,vPo),e(W,N2),e(N2,Lhe),e(Lhe,FPo),e(N2,TPo),e(N2,XO),e(XO,MPo),e(N2,EPo),e(W,CPo),e(W,q2),e(q2,yhe),e(yhe,wPo),e(q2,APo),e(q2,zO),e(zO,LPo),e(q2,yPo),e(W,xPo),e(W,j2),e(j2,xhe),e(xhe,$Po),e(j2,kPo),e(j2,QO),e(QO,SPo),e(j2,RPo),e(W,PPo),e(W,D2),e(D2,$he),e($he,BPo),e(D2,IPo),e(D2,WO),e(WO,NPo),e(D2,qPo),e(W,jPo),e(W,G2),e(G2,khe),e(khe,DPo),e(G2,GPo),e(G2,HO),e(HO,OPo),e(G2,VPo),e(W,XPo),e(W,O2),e(O2,She),e(She,zPo),e(O2,QPo),e(O2,UO),e(UO,WPo),e(O2,HPo),e(W,UPo),e(W,V2),e(V2,Rhe),e(Rhe,JPo),e(V2,YPo),e(V2,JO),e(JO,KPo),e(V2,ZPo),e(W,eBo),e(W,X2),e(X2,Phe),e(Phe,oBo),e(X2,rBo),e(X2,YO),e(YO,tBo),e(X2,aBo),e(W,nBo),e(W,z2),e(z2,Bhe),e(Bhe,sBo),e(z2,lBo),e(z2,KO),e(KO,iBo),e(z2,dBo),e(W,cBo),e(W,Q2),e(Q2,Ihe),e(Ihe,fBo),e(Q2,mBo),e(Q2,ZO),e(ZO,gBo),e(Q2,hBo),e(W,pBo),e(W,W2),e(W2,Nhe),e(Nhe,_Bo),e(W2,uBo),e(W2,eV),e(eV,bBo),e(W2,vBo),e(W,FBo),e(W,H2),e(H2,qhe),e(qhe,TBo),e(H2,MBo),e(H2,oV),e(oV,EBo),e(H2,CBo),e(W,wBo),e(W,U2),e(U2,jhe),e(jhe,ABo),e(U2,LBo),e(U2,rV),e(rV,yBo),e(U2,xBo),e(W,$Bo),e(W,J2),e(J2,Dhe),e(Dhe,kBo),e(J2,SBo),e(J2,tV),e(tV,RBo),e(J2,PBo),e(W,BBo),e(W,Y2),e(Y2,Ghe),e(Ghe,IBo),e(Y2,NBo),e(Y2,aV),e(aV,qBo),e(Y2,jBo),e(W,DBo),e(W,K2),e(K2,Ohe),e(Ohe,GBo),e(K2,OBo),e(K2,nV),e(nV,VBo),e(K2,XBo),e(W,zBo),e(W,Z2),e(Z2,Vhe),e(Vhe,QBo),e(Z2,WBo),e(Z2,sV),e(sV,HBo),e(Z2,UBo),e(W,JBo),e(W,eb),e(eb,Xhe),e(Xhe,YBo),e(eb,KBo),e(eb,lV),e(lV,ZBo),e(eb,eIo),e(W,oIo),e(W,ob),e(ob,zhe),e(zhe,rIo),e(ob,tIo),e(ob,iV),e(iV,aIo),e(ob,nIo),e(W,sIo),e(W,rb),e(rb,Qhe),e(Qhe,lIo),e(rb,iIo),e(rb,dV),e(dV,dIo),e(rb,cIo),e(W,fIo),e(W,tb),e(tb,Whe),e(Whe,mIo),e(tb,gIo),e(tb,cV),e(cV,hIo),e(tb,pIo),e(W,_Io),e(W,ab),e(ab,Hhe),e(Hhe,uIo),e(ab,bIo),e(ab,fV),e(fV,vIo),e(ab,FIo),e(W,TIo),e(W,nb),e(nb,Uhe),e(Uhe,MIo),e(nb,EIo),e(nb,mV),e(mV,CIo),e(nb,wIo),e(W,AIo),e(W,sb),e(sb,Jhe),e(Jhe,LIo),e(sb,yIo),e(sb,gV),e(gV,xIo),e(sb,$Io),e(W,kIo),e(W,lb),e(lb,Yhe),e(Yhe,SIo),e(lb,RIo),e(lb,hV),e(hV,PIo),e(lb,BIo),e(W,IIo),e(W,ib),e(ib,Khe),e(Khe,NIo),e(ib,qIo),e(ib,pV),e(pV,jIo),e(ib,DIo),e(W,GIo),e(W,db),e(db,Zhe),e(Zhe,OIo),e(db,VIo),e(db,_V),e(_V,XIo),e(db,zIo),e(W,QIo),e(W,cb),e(cb,epe),e(epe,WIo),e(cb,HIo),e(cb,uV),e(uV,UIo),e(cb,JIo),e(W,YIo),e(W,fb),e(fb,ope),e(ope,KIo),e(fb,ZIo),e(fb,bV),e(bV,eNo),e(fb,oNo),e(W,rNo),e(W,mb),e(mb,rpe),e(rpe,tNo),e(mb,aNo),e(mb,vV),e(vV,nNo),e(mb,sNo),e(W,lNo),e(W,gb),e(gb,tpe),e(tpe,iNo),e(gb,dNo),e(gb,ape),e(ape,cNo),e(gb,fNo),e(W,mNo),e(W,hb),e(hb,npe),e(npe,gNo),e(hb,hNo),e(hb,FV),e(FV,pNo),e(hb,_No),e(W,uNo),e(W,pb),e(pb,spe),e(spe,bNo),e(pb,vNo),e(pb,TV),e(TV,FNo),e(pb,TNo),e(W,MNo),e(W,_b),e(_b,lpe),e(lpe,ENo),e(_b,CNo),e(_b,MV),e(MV,wNo),e(_b,ANo),e(W,LNo),e(W,ub),e(ub,ipe),e(ipe,yNo),e(ub,xNo),e(ub,EV),e(EV,$No),e(ub,kNo),e(eo,SNo),e(eo,bb),e(bb,RNo),e(bb,dpe),e(dpe,PNo),e(bb,BNo),e(bb,cpe),e(cpe,INo),e(eo,NNo),M(vb,eo,null),b(f,MXe,u),b(f,Zi,u),e(Zi,Fb),e(Fb,fpe),M(YL,fpe,null),e(Zi,qNo),e(Zi,mpe),e(mpe,jNo),b(f,EXe,u),b(f,Po,u),M(KL,Po,null),e(Po,DNo),e(Po,ed),e(ed,GNo),e(ed,CV),e(CV,ONo),e(ed,VNo),e(ed,wV),e(wV,XNo),e(ed,zNo),e(Po,QNo),e(Po,ZL),e(ZL,WNo),e(ZL,gpe),e(gpe,HNo),e(ZL,UNo),e(Po,JNo),e(Po,mt),M(ey,mt,null),e(mt,YNo),e(mt,hpe),e(hpe,KNo),e(mt,ZNo),e(mt,od),e(od,eqo),e(od,ppe),e(ppe,oqo),e(od,rqo),e(od,AV),e(AV,tqo),e(od,aqo),e(mt,nqo),M(Tb,mt,null),e(Po,sqo),e(Po,oo),M(oy,oo,null),e(oo,lqo),e(oo,_pe),e(_pe,iqo),e(oo,dqo),e(oo,Da),e(Da,cqo),e(Da,upe),e(upe,fqo),e(Da,mqo),e(Da,bpe),e(bpe,gqo),e(Da,hqo),e(Da,vpe),e(vpe,pqo),e(Da,_qo),e(oo,uqo),e(oo,pe),e(pe,Mb),e(Mb,Fpe),e(Fpe,bqo),e(Mb,vqo),e(Mb,LV),e(LV,Fqo),e(Mb,Tqo),e(pe,Mqo),e(pe,Eb),e(Eb,Tpe),e(Tpe,Eqo),e(Eb,Cqo),e(Eb,yV),e(yV,wqo),e(Eb,Aqo),e(pe,Lqo),e(pe,Cb),e(Cb,Mpe),e(Mpe,yqo),e(Cb,xqo),e(Cb,xV),e(xV,$qo),e(Cb,kqo),e(pe,Sqo),e(pe,wb),e(wb,Epe),e(Epe,Rqo),e(wb,Pqo),e(wb,$V),e($V,Bqo),e(wb,Iqo),e(pe,Nqo),e(pe,Ab),e(Ab,Cpe),e(Cpe,qqo),e(Ab,jqo),e(Ab,kV),e(kV,Dqo),e(Ab,Gqo),e(pe,Oqo),e(pe,Lb),e(Lb,wpe),e(wpe,Vqo),e(Lb,Xqo),e(Lb,SV),e(SV,zqo),e(Lb,Qqo),e(pe,Wqo),e(pe,yb),e(yb,Ape),e(Ape,Hqo),e(yb,Uqo),e(yb,RV),e(RV,Jqo),e(yb,Yqo),e(pe,Kqo),e(pe,xb),e(xb,Lpe),e(Lpe,Zqo),e(xb,ejo),e(xb,PV),e(PV,ojo),e(xb,rjo),e(pe,tjo),e(pe,$b),e($b,ype),e(ype,ajo),e($b,njo),e($b,BV),e(BV,sjo),e($b,ljo),e(pe,ijo),e(pe,kb),e(kb,xpe),e(xpe,djo),e(kb,cjo),e(kb,IV),e(IV,fjo),e(kb,mjo),e(pe,gjo),e(pe,Sb),e(Sb,$pe),e($pe,hjo),e(Sb,pjo),e(Sb,NV),e(NV,_jo),e(Sb,ujo),e(pe,bjo),e(pe,Rb),e(Rb,kpe),e(kpe,vjo),e(Rb,Fjo),e(Rb,qV),e(qV,Tjo),e(Rb,Mjo),e(pe,Ejo),e(pe,Pb),e(Pb,Spe),e(Spe,Cjo),e(Pb,wjo),e(Pb,jV),e(jV,Ajo),e(Pb,Ljo),e(pe,yjo),e(pe,Bb),e(Bb,Rpe),e(Rpe,xjo),e(Bb,$jo),e(Bb,DV),e(DV,kjo),e(Bb,Sjo),e(pe,Rjo),e(pe,Ib),e(Ib,Ppe),e(Ppe,Pjo),e(Ib,Bjo),e(Ib,GV),e(GV,Ijo),e(Ib,Njo),e(pe,qjo),e(pe,Nb),e(Nb,Bpe),e(Bpe,jjo),e(Nb,Djo),e(Nb,OV),e(OV,Gjo),e(Nb,Ojo),e(pe,Vjo),e(pe,qb),e(qb,Ipe),e(Ipe,Xjo),e(qb,zjo),e(qb,VV),e(VV,Qjo),e(qb,Wjo),e(pe,Hjo),e(pe,jb),e(jb,Npe),e(Npe,Ujo),e(jb,Jjo),e(jb,XV),e(XV,Yjo),e(jb,Kjo),e(oo,Zjo),e(oo,Db),e(Db,eDo),e(Db,qpe),e(qpe,oDo),e(Db,rDo),e(Db,jpe),e(jpe,tDo),e(oo,aDo),M(Gb,oo,null),b(f,CXe,u),b(f,rd,u),e(rd,Ob),e(Ob,Dpe),M(ry,Dpe,null),e(rd,nDo),e(rd,Gpe),e(Gpe,sDo),b(f,wXe,u),b(f,Bo,u),M(ty,Bo,null),e(Bo,lDo),e(Bo,td),e(td,iDo),e(td,zV),e(zV,dDo),e(td,cDo),e(td,QV),e(QV,fDo),e(td,mDo),e(Bo,gDo),e(Bo,ay),e(ay,hDo),e(ay,Ope),e(Ope,pDo),e(ay,_Do),e(Bo,uDo),e(Bo,gt),M(ny,gt,null),e(gt,bDo),e(gt,Vpe),e(Vpe,vDo),e(gt,FDo),e(gt,ad),e(ad,TDo),e(ad,Xpe),e(Xpe,MDo),e(ad,EDo),e(ad,WV),e(WV,CDo),e(ad,wDo),e(gt,ADo),M(Vb,gt,null),e(Bo,LDo),e(Bo,ro),M(sy,ro,null),e(ro,yDo),e(ro,zpe),e(zpe,xDo),e(ro,$Do),e(ro,Ga),e(Ga,kDo),e(Ga,Qpe),e(Qpe,SDo),e(Ga,RDo),e(Ga,Wpe),e(Wpe,PDo),e(Ga,BDo),e(Ga,Hpe),e(Hpe,IDo),e(Ga,NDo),e(ro,qDo),e(ro,B),e(B,Xb),e(Xb,Upe),e(Upe,jDo),e(Xb,DDo),e(Xb,HV),e(HV,GDo),e(Xb,ODo),e(B,VDo),e(B,zb),e(zb,Jpe),e(Jpe,XDo),e(zb,zDo),e(zb,UV),e(UV,QDo),e(zb,WDo),e(B,HDo),e(B,Qb),e(Qb,Ype),e(Ype,UDo),e(Qb,JDo),e(Qb,JV),e(JV,YDo),e(Qb,KDo),e(B,ZDo),e(B,Wb),e(Wb,Kpe),e(Kpe,eGo),e(Wb,oGo),e(Wb,YV),e(YV,rGo),e(Wb,tGo),e(B,aGo),e(B,Hb),e(Hb,Zpe),e(Zpe,nGo),e(Hb,sGo),e(Hb,KV),e(KV,lGo),e(Hb,iGo),e(B,dGo),e(B,Ub),e(Ub,e_e),e(e_e,cGo),e(Ub,fGo),e(Ub,ZV),e(ZV,mGo),e(Ub,gGo),e(B,hGo),e(B,Jb),e(Jb,o_e),e(o_e,pGo),e(Jb,_Go),e(Jb,eX),e(eX,uGo),e(Jb,bGo),e(B,vGo),e(B,Yb),e(Yb,r_e),e(r_e,FGo),e(Yb,TGo),e(Yb,oX),e(oX,MGo),e(Yb,EGo),e(B,CGo),e(B,Kb),e(Kb,t_e),e(t_e,wGo),e(Kb,AGo),e(Kb,rX),e(rX,LGo),e(Kb,yGo),e(B,xGo),e(B,Zb),e(Zb,a_e),e(a_e,$Go),e(Zb,kGo),e(Zb,tX),e(tX,SGo),e(Zb,RGo),e(B,PGo),e(B,e3),e(e3,n_e),e(n_e,BGo),e(e3,IGo),e(e3,aX),e(aX,NGo),e(e3,qGo),e(B,jGo),e(B,o3),e(o3,s_e),e(s_e,DGo),e(o3,GGo),e(o3,nX),e(nX,OGo),e(o3,VGo),e(B,XGo),e(B,r3),e(r3,l_e),e(l_e,zGo),e(r3,QGo),e(r3,sX),e(sX,WGo),e(r3,HGo),e(B,UGo),e(B,t3),e(t3,i_e),e(i_e,JGo),e(t3,YGo),e(t3,lX),e(lX,KGo),e(t3,ZGo),e(B,eOo),e(B,a3),e(a3,d_e),e(d_e,oOo),e(a3,rOo),e(a3,iX),e(iX,tOo),e(a3,aOo),e(B,nOo),e(B,n3),e(n3,c_e),e(c_e,sOo),e(n3,lOo),e(n3,dX),e(dX,iOo),e(n3,dOo),e(B,cOo),e(B,s3),e(s3,f_e),e(f_e,fOo),e(s3,mOo),e(s3,cX),e(cX,gOo),e(s3,hOo),e(B,pOo),e(B,l3),e(l3,m_e),e(m_e,_Oo),e(l3,uOo),e(l3,fX),e(fX,bOo),e(l3,vOo),e(B,FOo),e(B,i3),e(i3,g_e),e(g_e,TOo),e(i3,MOo),e(i3,mX),e(mX,EOo),e(i3,COo),e(B,wOo),e(B,d3),e(d3,h_e),e(h_e,AOo),e(d3,LOo),e(d3,gX),e(gX,yOo),e(d3,xOo),e(B,$Oo),e(B,c3),e(c3,p_e),e(p_e,kOo),e(c3,SOo),e(c3,hX),e(hX,ROo),e(c3,POo),e(B,BOo),e(B,f3),e(f3,__e),e(__e,IOo),e(f3,NOo),e(f3,pX),e(pX,qOo),e(f3,jOo),e(B,DOo),e(B,m3),e(m3,u_e),e(u_e,GOo),e(m3,OOo),e(m3,_X),e(_X,VOo),e(m3,XOo),e(B,zOo),e(B,g3),e(g3,b_e),e(b_e,QOo),e(g3,WOo),e(g3,uX),e(uX,HOo),e(g3,UOo),e(B,JOo),e(B,h3),e(h3,v_e),e(v_e,YOo),e(h3,KOo),e(h3,bX),e(bX,ZOo),e(h3,eVo),e(B,oVo),e(B,p3),e(p3,F_e),e(F_e,rVo),e(p3,tVo),e(p3,vX),e(vX,aVo),e(p3,nVo),e(B,sVo),e(B,_3),e(_3,T_e),e(T_e,lVo),e(_3,iVo),e(_3,FX),e(FX,dVo),e(_3,cVo),e(B,fVo),e(B,u3),e(u3,M_e),e(M_e,mVo),e(u3,gVo),e(u3,TX),e(TX,hVo),e(u3,pVo),e(B,_Vo),e(B,b3),e(b3,E_e),e(E_e,uVo),e(b3,bVo),e(b3,MX),e(MX,vVo),e(b3,FVo),e(B,TVo),e(B,v3),e(v3,C_e),e(C_e,MVo),e(v3,EVo),e(v3,EX),e(EX,CVo),e(v3,wVo),e(B,AVo),e(B,F3),e(F3,w_e),e(w_e,LVo),e(F3,yVo),e(F3,CX),e(CX,xVo),e(F3,$Vo),e(B,kVo),e(B,T3),e(T3,A_e),e(A_e,SVo),e(T3,RVo),e(T3,wX),e(wX,PVo),e(T3,BVo),e(B,IVo),e(B,M3),e(M3,L_e),e(L_e,NVo),e(M3,qVo),e(M3,AX),e(AX,jVo),e(M3,DVo),e(B,GVo),e(B,E3),e(E3,y_e),e(y_e,OVo),e(E3,VVo),e(E3,LX),e(LX,XVo),e(E3,zVo),e(B,QVo),e(B,C3),e(C3,x_e),e(x_e,WVo),e(C3,HVo),e(C3,yX),e(yX,UVo),e(C3,JVo),e(B,YVo),e(B,w3),e(w3,$_e),e($_e,KVo),e(w3,ZVo),e(w3,xX),e(xX,eXo),e(w3,oXo),e(B,rXo),e(B,A3),e(A3,k_e),e(k_e,tXo),e(A3,aXo),e(A3,$X),e($X,nXo),e(A3,sXo),e(B,lXo),e(B,L3),e(L3,S_e),e(S_e,iXo),e(L3,dXo),e(L3,kX),e(kX,cXo),e(L3,fXo),e(B,mXo),e(B,y3),e(y3,R_e),e(R_e,gXo),e(y3,hXo),e(y3,SX),e(SX,pXo),e(y3,_Xo),e(B,uXo),e(B,x3),e(x3,P_e),e(P_e,bXo),e(x3,vXo),e(x3,RX),e(RX,FXo),e(x3,TXo),e(B,MXo),e(B,$3),e($3,B_e),e(B_e,EXo),e($3,CXo),e($3,PX),e(PX,wXo),e($3,AXo),e(B,LXo),e(B,k3),e(k3,I_e),e(I_e,yXo),e(k3,xXo),e(k3,BX),e(BX,$Xo),e(k3,kXo),e(B,SXo),e(B,S3),e(S3,N_e),e(N_e,RXo),e(S3,PXo),e(S3,IX),e(IX,BXo),e(S3,IXo),e(B,NXo),e(B,R3),e(R3,q_e),e(q_e,qXo),e(R3,jXo),e(R3,NX),e(NX,DXo),e(R3,GXo),e(B,OXo),e(B,P3),e(P3,j_e),e(j_e,VXo),e(P3,XXo),e(P3,qX),e(qX,zXo),e(P3,QXo),e(B,WXo),e(B,B3),e(B3,D_e),e(D_e,HXo),e(B3,UXo),e(B3,jX),e(jX,JXo),e(B3,YXo),e(B,KXo),e(B,I3),e(I3,G_e),e(G_e,ZXo),e(I3,ezo),e(I3,DX),e(DX,ozo),e(I3,rzo),e(B,tzo),e(B,N3),e(N3,O_e),e(O_e,azo),e(N3,nzo),e(N3,GX),e(GX,szo),e(N3,lzo),e(B,izo),e(B,q3),e(q3,V_e),e(V_e,dzo),e(q3,czo),e(q3,OX),e(OX,fzo),e(q3,mzo),e(B,gzo),e(B,j3),e(j3,X_e),e(X_e,hzo),e(j3,pzo),e(j3,VX),e(VX,_zo),e(j3,uzo),e(B,bzo),e(B,D3),e(D3,z_e),e(z_e,vzo),e(D3,Fzo),e(D3,XX),e(XX,Tzo),e(D3,Mzo),e(ro,Ezo),e(ro,G3),e(G3,Czo),e(G3,Q_e),e(Q_e,wzo),e(G3,Azo),e(G3,W_e),e(W_e,Lzo),e(ro,yzo),M(O3,ro,null),b(f,AXe,u),b(f,nd,u),e(nd,V3),e(V3,H_e),M(ly,H_e,null),e(nd,xzo),e(nd,U_e),e(U_e,$zo),b(f,LXe,u),b(f,Io,u),M(iy,Io,null),e(Io,kzo),e(Io,sd),e(sd,Szo),e(sd,zX),e(zX,Rzo),e(sd,Pzo),e(sd,QX),e(QX,Bzo),e(sd,Izo),e(Io,Nzo),e(Io,dy),e(dy,qzo),e(dy,J_e),e(J_e,jzo),e(dy,Dzo),e(Io,Gzo),e(Io,ht),M(cy,ht,null),e(ht,Ozo),e(ht,Y_e),e(Y_e,Vzo),e(ht,Xzo),e(ht,ld),e(ld,zzo),e(ld,K_e),e(K_e,Qzo),e(ld,Wzo),e(ld,WX),e(WX,Hzo),e(ld,Uzo),e(ht,Jzo),M(X3,ht,null),e(Io,Yzo),e(Io,to),M(fy,to,null),e(to,Kzo),e(to,Z_e),e(Z_e,Zzo),e(to,eQo),e(to,Oa),e(Oa,oQo),e(Oa,eue),e(eue,rQo),e(Oa,tQo),e(Oa,oue),e(oue,aQo),e(Oa,nQo),e(Oa,rue),e(rue,sQo),e(Oa,lQo),e(to,iQo),e(to,Z),e(Z,z3),e(z3,tue),e(tue,dQo),e(z3,cQo),e(z3,HX),e(HX,fQo),e(z3,mQo),e(Z,gQo),e(Z,Q3),e(Q3,aue),e(aue,hQo),e(Q3,pQo),e(Q3,UX),e(UX,_Qo),e(Q3,uQo),e(Z,bQo),e(Z,W3),e(W3,nue),e(nue,vQo),e(W3,FQo),e(W3,JX),e(JX,TQo),e(W3,MQo),e(Z,EQo),e(Z,H3),e(H3,sue),e(sue,CQo),e(H3,wQo),e(H3,YX),e(YX,AQo),e(H3,LQo),e(Z,yQo),e(Z,U3),e(U3,lue),e(lue,xQo),e(U3,$Qo),e(U3,KX),e(KX,kQo),e(U3,SQo),e(Z,RQo),e(Z,J3),e(J3,iue),e(iue,PQo),e(J3,BQo),e(J3,ZX),e(ZX,IQo),e(J3,NQo),e(Z,qQo),e(Z,Y3),e(Y3,due),e(due,jQo),e(Y3,DQo),e(Y3,ez),e(ez,GQo),e(Y3,OQo),e(Z,VQo),e(Z,K3),e(K3,cue),e(cue,XQo),e(K3,zQo),e(K3,oz),e(oz,QQo),e(K3,WQo),e(Z,HQo),e(Z,Z3),e(Z3,fue),e(fue,UQo),e(Z3,JQo),e(Z3,rz),e(rz,YQo),e(Z3,KQo),e(Z,ZQo),e(Z,ev),e(ev,mue),e(mue,eWo),e(ev,oWo),e(ev,tz),e(tz,rWo),e(ev,tWo),e(Z,aWo),e(Z,ov),e(ov,gue),e(gue,nWo),e(ov,sWo),e(ov,az),e(az,lWo),e(ov,iWo),e(Z,dWo),e(Z,rv),e(rv,hue),e(hue,cWo),e(rv,fWo),e(rv,nz),e(nz,mWo),e(rv,gWo),e(Z,hWo),e(Z,tv),e(tv,pue),e(pue,pWo),e(tv,_Wo),e(tv,sz),e(sz,uWo),e(tv,bWo),e(Z,vWo),e(Z,av),e(av,_ue),e(_ue,FWo),e(av,TWo),e(av,lz),e(lz,MWo),e(av,EWo),e(Z,CWo),e(Z,nv),e(nv,uue),e(uue,wWo),e(nv,AWo),e(nv,iz),e(iz,LWo),e(nv,yWo),e(Z,xWo),e(Z,sv),e(sv,bue),e(bue,$Wo),e(sv,kWo),e(sv,dz),e(dz,SWo),e(sv,RWo),e(Z,PWo),e(Z,lv),e(lv,vue),e(vue,BWo),e(lv,IWo),e(lv,cz),e(cz,NWo),e(lv,qWo),e(Z,jWo),e(Z,iv),e(iv,Fue),e(Fue,DWo),e(iv,GWo),e(iv,fz),e(fz,OWo),e(iv,VWo),e(Z,XWo),e(Z,dv),e(dv,Tue),e(Tue,zWo),e(dv,QWo),e(dv,mz),e(mz,WWo),e(dv,HWo),e(Z,UWo),e(Z,cv),e(cv,Mue),e(Mue,JWo),e(cv,YWo),e(cv,gz),e(gz,KWo),e(cv,ZWo),e(Z,eHo),e(Z,fv),e(fv,Eue),e(Eue,oHo),e(fv,rHo),e(fv,hz),e(hz,tHo),e(fv,aHo),e(Z,nHo),e(Z,mv),e(mv,Cue),e(Cue,sHo),e(mv,lHo),e(mv,pz),e(pz,iHo),e(mv,dHo),e(Z,cHo),e(Z,gv),e(gv,wue),e(wue,fHo),e(gv,mHo),e(gv,_z),e(_z,gHo),e(gv,hHo),e(Z,pHo),e(Z,hv),e(hv,Aue),e(Aue,_Ho),e(hv,uHo),e(hv,uz),e(uz,bHo),e(hv,vHo),e(Z,FHo),e(Z,pv),e(pv,Lue),e(Lue,THo),e(pv,MHo),e(pv,bz),e(bz,EHo),e(pv,CHo),e(Z,wHo),e(Z,_v),e(_v,yue),e(yue,AHo),e(_v,LHo),e(_v,vz),e(vz,yHo),e(_v,xHo),e(Z,$Ho),e(Z,uv),e(uv,xue),e(xue,kHo),e(uv,SHo),e(uv,Fz),e(Fz,RHo),e(uv,PHo),e(Z,BHo),e(Z,bv),e(bv,$ue),e($ue,IHo),e(bv,NHo),e(bv,Tz),e(Tz,qHo),e(bv,jHo),e(Z,DHo),e(Z,vv),e(vv,kue),e(kue,GHo),e(vv,OHo),e(vv,Mz),e(Mz,VHo),e(vv,XHo),e(Z,zHo),e(Z,Fv),e(Fv,Sue),e(Sue,QHo),e(Fv,WHo),e(Fv,Ez),e(Ez,HHo),e(Fv,UHo),e(to,JHo),e(to,Tv),e(Tv,YHo),e(Tv,Rue),e(Rue,KHo),e(Tv,ZHo),e(Tv,Pue),e(Pue,eUo),e(to,oUo),M(Mv,to,null),b(f,yXe,u),b(f,id,u),e(id,Ev),e(Ev,Bue),M(my,Bue,null),e(id,rUo),e(id,Iue),e(Iue,tUo),b(f,xXe,u),b(f,No,u),M(gy,No,null),e(No,aUo),e(No,dd),e(dd,nUo),e(dd,Cz),e(Cz,sUo),e(dd,lUo),e(dd,wz),e(wz,iUo),e(dd,dUo),e(No,cUo),e(No,hy),e(hy,fUo),e(hy,Nue),e(Nue,mUo),e(hy,gUo),e(No,hUo),e(No,pt),M(py,pt,null),e(pt,pUo),e(pt,que),e(que,_Uo),e(pt,uUo),e(pt,cd),e(cd,bUo),e(cd,jue),e(jue,vUo),e(cd,FUo),e(cd,Az),e(Az,TUo),e(cd,MUo),e(pt,EUo),M(Cv,pt,null),e(No,CUo),e(No,ao),M(_y,ao,null),e(ao,wUo),e(ao,Due),e(Due,AUo),e(ao,LUo),e(ao,Va),e(Va,yUo),e(Va,Gue),e(Gue,xUo),e(Va,$Uo),e(Va,Oue),e(Oue,kUo),e(Va,SUo),e(Va,Vue),e(Vue,RUo),e(Va,PUo),e(ao,BUo),e(ao,qo),e(qo,wv),e(wv,Xue),e(Xue,IUo),e(wv,NUo),e(wv,Lz),e(Lz,qUo),e(wv,jUo),e(qo,DUo),e(qo,Av),e(Av,zue),e(zue,GUo),e(Av,OUo),e(Av,yz),e(yz,VUo),e(Av,XUo),e(qo,zUo),e(qo,Lv),e(Lv,Que),e(Que,QUo),e(Lv,WUo),e(Lv,xz),e(xz,HUo),e(Lv,UUo),e(qo,JUo),e(qo,yv),e(yv,Wue),e(Wue,YUo),e(yv,KUo),e(yv,$z),e($z,ZUo),e(yv,eJo),e(qo,oJo),e(qo,xv),e(xv,Hue),e(Hue,rJo),e(xv,tJo),e(xv,kz),e(kz,aJo),e(xv,nJo),e(qo,sJo),e(qo,$v),e($v,Uue),e(Uue,lJo),e($v,iJo),e($v,Sz),e(Sz,dJo),e($v,cJo),e(ao,fJo),e(ao,kv),e(kv,mJo),e(kv,Jue),e(Jue,gJo),e(kv,hJo),e(kv,Yue),e(Yue,pJo),e(ao,_Jo),M(Sv,ao,null),b(f,$Xe,u),b(f,fd,u),e(fd,Rv),e(Rv,Kue),M(uy,Kue,null),e(fd,uJo),e(fd,Zue),e(Zue,bJo),b(f,kXe,u),b(f,jo,u),M(by,jo,null),e(jo,vJo),e(jo,md),e(md,FJo),e(md,Rz),e(Rz,TJo),e(md,MJo),e(md,Pz),e(Pz,EJo),e(md,CJo),e(jo,wJo),e(jo,vy),e(vy,AJo),e(vy,e1e),e(e1e,LJo),e(vy,yJo),e(jo,xJo),e(jo,_t),M(Fy,_t,null),e(_t,$Jo),e(_t,o1e),e(o1e,kJo),e(_t,SJo),e(_t,gd),e(gd,RJo),e(gd,r1e),e(r1e,PJo),e(gd,BJo),e(gd,Bz),e(Bz,IJo),e(gd,NJo),e(_t,qJo),M(Pv,_t,null),e(jo,jJo),e(jo,no),M(Ty,no,null),e(no,DJo),e(no,t1e),e(t1e,GJo),e(no,OJo),e(no,Xa),e(Xa,VJo),e(Xa,a1e),e(a1e,XJo),e(Xa,zJo),e(Xa,n1e),e(n1e,QJo),e(Xa,WJo),e(Xa,s1e),e(s1e,HJo),e(Xa,UJo),e(no,JJo),e(no,U),e(U,Bv),e(Bv,l1e),e(l1e,YJo),e(Bv,KJo),e(Bv,Iz),e(Iz,ZJo),e(Bv,eYo),e(U,oYo),e(U,Iv),e(Iv,i1e),e(i1e,rYo),e(Iv,tYo),e(Iv,Nz),e(Nz,aYo),e(Iv,nYo),e(U,sYo),e(U,Nv),e(Nv,d1e),e(d1e,lYo),e(Nv,iYo),e(Nv,qz),e(qz,dYo),e(Nv,cYo),e(U,fYo),e(U,qv),e(qv,c1e),e(c1e,mYo),e(qv,gYo),e(qv,jz),e(jz,hYo),e(qv,pYo),e(U,_Yo),e(U,jv),e(jv,f1e),e(f1e,uYo),e(jv,bYo),e(jv,Dz),e(Dz,vYo),e(jv,FYo),e(U,TYo),e(U,Dv),e(Dv,m1e),e(m1e,MYo),e(Dv,EYo),e(Dv,Gz),e(Gz,CYo),e(Dv,wYo),e(U,AYo),e(U,Gv),e(Gv,g1e),e(g1e,LYo),e(Gv,yYo),e(Gv,Oz),e(Oz,xYo),e(Gv,$Yo),e(U,kYo),e(U,Ov),e(Ov,h1e),e(h1e,SYo),e(Ov,RYo),e(Ov,Vz),e(Vz,PYo),e(Ov,BYo),e(U,IYo),e(U,Vv),e(Vv,p1e),e(p1e,NYo),e(Vv,qYo),e(Vv,Xz),e(Xz,jYo),e(Vv,DYo),e(U,GYo),e(U,Xv),e(Xv,_1e),e(_1e,OYo),e(Xv,VYo),e(Xv,zz),e(zz,XYo),e(Xv,zYo),e(U,QYo),e(U,zv),e(zv,u1e),e(u1e,WYo),e(zv,HYo),e(zv,Qz),e(Qz,UYo),e(zv,JYo),e(U,YYo),e(U,Qv),e(Qv,b1e),e(b1e,KYo),e(Qv,ZYo),e(Qv,Wz),e(Wz,eKo),e(Qv,oKo),e(U,rKo),e(U,Wv),e(Wv,v1e),e(v1e,tKo),e(Wv,aKo),e(Wv,Hz),e(Hz,nKo),e(Wv,sKo),e(U,lKo),e(U,Hv),e(Hv,F1e),e(F1e,iKo),e(Hv,dKo),e(Hv,Uz),e(Uz,cKo),e(Hv,fKo),e(U,mKo),e(U,Uv),e(Uv,T1e),e(T1e,gKo),e(Uv,hKo),e(Uv,Jz),e(Jz,pKo),e(Uv,_Ko),e(U,uKo),e(U,Jv),e(Jv,M1e),e(M1e,bKo),e(Jv,vKo),e(Jv,Yz),e(Yz,FKo),e(Jv,TKo),e(U,MKo),e(U,Yv),e(Yv,E1e),e(E1e,EKo),e(Yv,CKo),e(Yv,Kz),e(Kz,wKo),e(Yv,AKo),e(U,LKo),e(U,Kv),e(Kv,C1e),e(C1e,yKo),e(Kv,xKo),e(Kv,Zz),e(Zz,$Ko),e(Kv,kKo),e(U,SKo),e(U,Zv),e(Zv,w1e),e(w1e,RKo),e(Zv,PKo),e(Zv,eQ),e(eQ,BKo),e(Zv,IKo),e(U,NKo),e(U,eF),e(eF,A1e),e(A1e,qKo),e(eF,jKo),e(eF,oQ),e(oQ,DKo),e(eF,GKo),e(U,OKo),e(U,oF),e(oF,L1e),e(L1e,VKo),e(oF,XKo),e(oF,rQ),e(rQ,zKo),e(oF,QKo),e(U,WKo),e(U,rF),e(rF,y1e),e(y1e,HKo),e(rF,UKo),e(rF,tQ),e(tQ,JKo),e(rF,YKo),e(U,KKo),e(U,tF),e(tF,x1e),e(x1e,ZKo),e(tF,eZo),e(tF,aQ),e(aQ,oZo),e(tF,rZo),e(U,tZo),e(U,aF),e(aF,$1e),e($1e,aZo),e(aF,nZo),e(aF,nQ),e(nQ,sZo),e(aF,lZo),e(U,iZo),e(U,nF),e(nF,k1e),e(k1e,dZo),e(nF,cZo),e(nF,sQ),e(sQ,fZo),e(nF,mZo),e(U,gZo),e(U,sF),e(sF,S1e),e(S1e,hZo),e(sF,pZo),e(sF,lQ),e(lQ,_Zo),e(sF,uZo),e(U,bZo),e(U,lF),e(lF,R1e),e(R1e,vZo),e(lF,FZo),e(lF,iQ),e(iQ,TZo),e(lF,MZo),e(U,EZo),e(U,iF),e(iF,P1e),e(P1e,CZo),e(iF,wZo),e(iF,dQ),e(dQ,AZo),e(iF,LZo),e(U,yZo),e(U,dF),e(dF,B1e),e(B1e,xZo),e(dF,$Zo),e(dF,cQ),e(cQ,kZo),e(dF,SZo),e(U,RZo),e(U,cF),e(cF,I1e),e(I1e,PZo),e(cF,BZo),e(cF,fQ),e(fQ,IZo),e(cF,NZo),e(U,qZo),e(U,fF),e(fF,N1e),e(N1e,jZo),e(fF,DZo),e(fF,mQ),e(mQ,GZo),e(fF,OZo),e(U,VZo),e(U,mF),e(mF,q1e),e(q1e,XZo),e(mF,zZo),e(mF,gQ),e(gQ,QZo),e(mF,WZo),e(U,HZo),e(U,gF),e(gF,j1e),e(j1e,UZo),e(gF,JZo),e(gF,hQ),e(hQ,YZo),e(gF,KZo),e(U,ZZo),e(U,hF),e(hF,D1e),e(D1e,eer),e(hF,oer),e(hF,pQ),e(pQ,rer),e(hF,ter),e(U,aer),e(U,pF),e(pF,G1e),e(G1e,ner),e(pF,ser),e(pF,_Q),e(_Q,ler),e(pF,ier),e(U,der),e(U,_F),e(_F,O1e),e(O1e,cer),e(_F,fer),e(_F,uQ),e(uQ,mer),e(_F,ger),e(no,her),e(no,uF),e(uF,per),e(uF,V1e),e(V1e,_er),e(uF,uer),e(uF,X1e),e(X1e,ber),e(no,ver),M(bF,no,null),b(f,SXe,u),b(f,hd,u),e(hd,vF),e(vF,z1e),M(My,z1e,null),e(hd,Fer),e(hd,Q1e),e(Q1e,Ter),b(f,RXe,u),b(f,Do,u),M(Ey,Do,null),e(Do,Mer),e(Do,pd),e(pd,Eer),e(pd,bQ),e(bQ,Cer),e(pd,wer),e(pd,vQ),e(vQ,Aer),e(pd,Ler),e(Do,yer),e(Do,Cy),e(Cy,xer),e(Cy,W1e),e(W1e,$er),e(Cy,ker),e(Do,Ser),e(Do,ut),M(wy,ut,null),e(ut,Rer),e(ut,H1e),e(H1e,Per),e(ut,Ber),e(ut,_d),e(_d,Ier),e(_d,U1e),e(U1e,Ner),e(_d,qer),e(_d,FQ),e(FQ,jer),e(_d,Der),e(ut,Ger),M(FF,ut,null),e(Do,Oer),e(Do,so),M(Ay,so,null),e(so,Ver),e(so,J1e),e(J1e,Xer),e(so,zer),e(so,za),e(za,Qer),e(za,Y1e),e(Y1e,Wer),e(za,Her),e(za,K1e),e(K1e,Uer),e(za,Jer),e(za,Z1e),e(Z1e,Yer),e(za,Ker),e(so,Zer),e(so,V),e(V,TF),e(TF,e2e),e(e2e,eor),e(TF,oor),e(TF,TQ),e(TQ,ror),e(TF,tor),e(V,aor),e(V,MF),e(MF,o2e),e(o2e,nor),e(MF,sor),e(MF,MQ),e(MQ,lor),e(MF,ior),e(V,dor),e(V,EF),e(EF,r2e),e(r2e,cor),e(EF,mor),e(EF,EQ),e(EQ,gor),e(EF,hor),e(V,por),e(V,CF),e(CF,t2e),e(t2e,_or),e(CF,uor),e(CF,CQ),e(CQ,bor),e(CF,vor),e(V,For),e(V,wF),e(wF,a2e),e(a2e,Tor),e(wF,Mor),e(wF,wQ),e(wQ,Eor),e(wF,Cor),e(V,wor),e(V,AF),e(AF,n2e),e(n2e,Aor),e(AF,Lor),e(AF,AQ),e(AQ,yor),e(AF,xor),e(V,$or),e(V,LF),e(LF,s2e),e(s2e,kor),e(LF,Sor),e(LF,LQ),e(LQ,Ror),e(LF,Por),e(V,Bor),e(V,yF),e(yF,l2e),e(l2e,Ior),e(yF,Nor),e(yF,yQ),e(yQ,qor),e(yF,jor),e(V,Dor),e(V,xF),e(xF,i2e),e(i2e,Gor),e(xF,Oor),e(xF,xQ),e(xQ,Vor),e(xF,Xor),e(V,zor),e(V,$F),e($F,d2e),e(d2e,Qor),e($F,Wor),e($F,$Q),e($Q,Hor),e($F,Uor),e(V,Jor),e(V,kF),e(kF,c2e),e(c2e,Yor),e(kF,Kor),e(kF,kQ),e(kQ,Zor),e(kF,err),e(V,orr),e(V,SF),e(SF,f2e),e(f2e,rrr),e(SF,trr),e(SF,SQ),e(SQ,arr),e(SF,nrr),e(V,srr),e(V,RF),e(RF,m2e),e(m2e,lrr),e(RF,irr),e(RF,RQ),e(RQ,drr),e(RF,crr),e(V,frr),e(V,PF),e(PF,g2e),e(g2e,mrr),e(PF,grr),e(PF,PQ),e(PQ,hrr),e(PF,prr),e(V,_rr),e(V,BF),e(BF,h2e),e(h2e,urr),e(BF,brr),e(BF,BQ),e(BQ,vrr),e(BF,Frr),e(V,Trr),e(V,IF),e(IF,p2e),e(p2e,Mrr),e(IF,Err),e(IF,IQ),e(IQ,Crr),e(IF,wrr),e(V,Arr),e(V,NF),e(NF,_2e),e(_2e,Lrr),e(NF,yrr),e(NF,NQ),e(NQ,xrr),e(NF,$rr),e(V,krr),e(V,qF),e(qF,u2e),e(u2e,Srr),e(qF,Rrr),e(qF,qQ),e(qQ,Prr),e(qF,Brr),e(V,Irr),e(V,jF),e(jF,b2e),e(b2e,Nrr),e(jF,qrr),e(jF,jQ),e(jQ,jrr),e(jF,Drr),e(V,Grr),e(V,DF),e(DF,v2e),e(v2e,Orr),e(DF,Vrr),e(DF,DQ),e(DQ,Xrr),e(DF,zrr),e(V,Qrr),e(V,GF),e(GF,F2e),e(F2e,Wrr),e(GF,Hrr),e(GF,GQ),e(GQ,Urr),e(GF,Jrr),e(V,Yrr),e(V,OF),e(OF,T2e),e(T2e,Krr),e(OF,Zrr),e(OF,OQ),e(OQ,etr),e(OF,otr),e(V,rtr),e(V,VF),e(VF,M2e),e(M2e,ttr),e(VF,atr),e(VF,VQ),e(VQ,ntr),e(VF,str),e(V,ltr),e(V,XF),e(XF,E2e),e(E2e,itr),e(XF,dtr),e(XF,XQ),e(XQ,ctr),e(XF,ftr),e(V,mtr),e(V,zF),e(zF,C2e),e(C2e,gtr),e(zF,htr),e(zF,zQ),e(zQ,ptr),e(zF,_tr),e(V,utr),e(V,QF),e(QF,w2e),e(w2e,btr),e(QF,vtr),e(QF,QQ),e(QQ,Ftr),e(QF,Ttr),e(V,Mtr),e(V,WF),e(WF,A2e),e(A2e,Etr),e(WF,Ctr),e(WF,WQ),e(WQ,wtr),e(WF,Atr),e(V,Ltr),e(V,HF),e(HF,L2e),e(L2e,ytr),e(HF,xtr),e(HF,HQ),e(HQ,$tr),e(HF,ktr),e(V,Str),e(V,UF),e(UF,y2e),e(y2e,Rtr),e(UF,Ptr),e(UF,UQ),e(UQ,Btr),e(UF,Itr),e(V,Ntr),e(V,JF),e(JF,x2e),e(x2e,qtr),e(JF,jtr),e(JF,JQ),e(JQ,Dtr),e(JF,Gtr),e(V,Otr),e(V,YF),e(YF,$2e),e($2e,Vtr),e(YF,Xtr),e(YF,YQ),e(YQ,ztr),e(YF,Qtr),e(V,Wtr),e(V,KF),e(KF,k2e),e(k2e,Htr),e(KF,Utr),e(KF,KQ),e(KQ,Jtr),e(KF,Ytr),e(V,Ktr),e(V,ZF),e(ZF,S2e),e(S2e,Ztr),e(ZF,ear),e(ZF,ZQ),e(ZQ,oar),e(ZF,rar),e(V,tar),e(V,eT),e(eT,R2e),e(R2e,aar),e(eT,nar),e(eT,eW),e(eW,sar),e(eT,lar),e(V,iar),e(V,oT),e(oT,P2e),e(P2e,dar),e(oT,car),e(oT,oW),e(oW,far),e(oT,mar),e(V,gar),e(V,rT),e(rT,B2e),e(B2e,har),e(rT,par),e(rT,rW),e(rW,_ar),e(rT,uar),e(V,bar),e(V,tT),e(tT,I2e),e(I2e,Far),e(tT,Tar),e(tT,tW),e(tW,Mar),e(tT,Ear),e(V,Car),e(V,aT),e(aT,N2e),e(N2e,war),e(aT,Aar),e(aT,aW),e(aW,Lar),e(aT,yar),e(V,xar),e(V,nT),e(nT,q2e),e(q2e,$ar),e(nT,kar),e(nT,nW),e(nW,Sar),e(nT,Rar),e(V,Par),e(V,sT),e(sT,j2e),e(j2e,Bar),e(sT,Iar),e(sT,sW),e(sW,Nar),e(sT,qar),e(V,jar),e(V,lT),e(lT,D2e),e(D2e,Dar),e(lT,Gar),e(lT,lW),e(lW,Oar),e(lT,Var),e(V,Xar),e(V,iT),e(iT,G2e),e(G2e,zar),e(iT,Qar),e(iT,iW),e(iW,War),e(iT,Har),e(so,Uar),e(so,dT),e(dT,Jar),e(dT,O2e),e(O2e,Yar),e(dT,Kar),e(dT,V2e),e(V2e,Zar),e(so,enr),M(cT,so,null),b(f,PXe,u),b(f,ud,u),e(ud,fT),e(fT,X2e),M(Ly,X2e,null),e(ud,onr),e(ud,z2e),e(z2e,rnr),b(f,BXe,u),b(f,Go,u),M(yy,Go,null),e(Go,tnr),e(Go,bd),e(bd,anr),e(bd,dW),e(dW,nnr),e(bd,snr),e(bd,cW),e(cW,lnr),e(bd,inr),e(Go,dnr),e(Go,xy),e(xy,cnr),e(xy,Q2e),e(Q2e,fnr),e(xy,mnr),e(Go,gnr),e(Go,bt),M($y,bt,null),e(bt,hnr),e(bt,W2e),e(W2e,pnr),e(bt,_nr),e(bt,vd),e(vd,unr),e(vd,H2e),e(H2e,bnr),e(vd,vnr),e(vd,fW),e(fW,Fnr),e(vd,Tnr),e(bt,Mnr),M(mT,bt,null),e(Go,Enr),e(Go,lo),M(ky,lo,null),e(lo,Cnr),e(lo,U2e),e(U2e,wnr),e(lo,Anr),e(lo,Qa),e(Qa,Lnr),e(Qa,J2e),e(J2e,ynr),e(Qa,xnr),e(Qa,Y2e),e(Y2e,$nr),e(Qa,knr),e(Qa,K2e),e(K2e,Snr),e(Qa,Rnr),e(lo,Pnr),e(lo,Z2e),e(Z2e,gT),e(gT,ebe),e(ebe,Bnr),e(gT,Inr),e(gT,mW),e(mW,Nnr),e(gT,qnr),e(lo,jnr),e(lo,hT),e(hT,Dnr),e(hT,obe),e(obe,Gnr),e(hT,Onr),e(hT,rbe),e(rbe,Vnr),e(lo,Xnr),M(pT,lo,null),b(f,IXe,u),b(f,Fd,u),e(Fd,_T),e(_T,tbe),M(Sy,tbe,null),e(Fd,znr),e(Fd,abe),e(abe,Qnr),b(f,NXe,u),b(f,Oo,u),M(Ry,Oo,null),e(Oo,Wnr),e(Oo,Td),e(Td,Hnr),e(Td,gW),e(gW,Unr),e(Td,Jnr),e(Td,hW),e(hW,Ynr),e(Td,Knr),e(Oo,Znr),e(Oo,Py),e(Py,esr),e(Py,nbe),e(nbe,osr),e(Py,rsr),e(Oo,tsr),e(Oo,vt),M(By,vt,null),e(vt,asr),e(vt,sbe),e(sbe,nsr),e(vt,ssr),e(vt,Md),e(Md,lsr),e(Md,lbe),e(lbe,isr),e(Md,dsr),e(Md,pW),e(pW,csr),e(Md,fsr),e(vt,msr),M(uT,vt,null),e(Oo,gsr),e(Oo,io),M(Iy,io,null),e(io,hsr),e(io,ibe),e(ibe,psr),e(io,_sr),e(io,Wa),e(Wa,usr),e(Wa,dbe),e(dbe,bsr),e(Wa,vsr),e(Wa,cbe),e(cbe,Fsr),e(Wa,Tsr),e(Wa,fbe),e(fbe,Msr),e(Wa,Esr),e(io,Csr),e(io,ve),e(ve,bT),e(bT,mbe),e(mbe,wsr),e(bT,Asr),e(bT,_W),e(_W,Lsr),e(bT,ysr),e(ve,xsr),e(ve,vT),e(vT,gbe),e(gbe,$sr),e(vT,ksr),e(vT,uW),e(uW,Ssr),e(vT,Rsr),e(ve,Psr),e(ve,FT),e(FT,hbe),e(hbe,Bsr),e(FT,Isr),e(FT,bW),e(bW,Nsr),e(FT,qsr),e(ve,jsr),e(ve,TT),e(TT,pbe),e(pbe,Dsr),e(TT,Gsr),e(TT,vW),e(vW,Osr),e(TT,Vsr),e(ve,Xsr),e(ve,Hs),e(Hs,_be),e(_be,zsr),e(Hs,Qsr),e(Hs,FW),e(FW,Wsr),e(Hs,Hsr),e(Hs,TW),e(TW,Usr),e(Hs,Jsr),e(ve,Ysr),e(ve,MT),e(MT,ube),e(ube,Ksr),e(MT,Zsr),e(MT,MW),e(MW,elr),e(MT,olr),e(ve,rlr),e(ve,Us),e(Us,bbe),e(bbe,tlr),e(Us,alr),e(Us,EW),e(EW,nlr),e(Us,slr),e(Us,CW),e(CW,llr),e(Us,ilr),e(ve,dlr),e(ve,ET),e(ET,vbe),e(vbe,clr),e(ET,flr),e(ET,wW),e(wW,mlr),e(ET,glr),e(ve,hlr),e(ve,Ft),e(Ft,Fbe),e(Fbe,plr),e(Ft,_lr),e(Ft,AW),e(AW,ulr),e(Ft,blr),e(Ft,LW),e(LW,vlr),e(Ft,Flr),e(Ft,yW),e(yW,Tlr),e(Ft,Mlr),e(ve,Elr),e(ve,CT),e(CT,Tbe),e(Tbe,Clr),e(CT,wlr),e(CT,xW),e(xW,Alr),e(CT,Llr),e(ve,ylr),e(ve,wT),e(wT,Mbe),e(Mbe,xlr),e(wT,$lr),e(wT,$W),e($W,klr),e(wT,Slr),e(ve,Rlr),e(ve,AT),e(AT,Ebe),e(Ebe,Plr),e(AT,Blr),e(AT,kW),e(kW,Ilr),e(AT,Nlr),e(ve,qlr),e(ve,LT),e(LT,Cbe),e(Cbe,jlr),e(LT,Dlr),e(LT,SW),e(SW,Glr),e(LT,Olr),e(ve,Vlr),e(ve,yT),e(yT,wbe),e(wbe,Xlr),e(yT,zlr),e(yT,RW),e(RW,Qlr),e(yT,Wlr),e(ve,Hlr),e(ve,xT),e(xT,Abe),e(Abe,Ulr),e(xT,Jlr),e(xT,PW),e(PW,Ylr),e(xT,Klr),e(ve,Zlr),e(ve,$T),e($T,Lbe),e(Lbe,eir),e($T,oir),e($T,BW),e(BW,rir),e($T,tir),e(io,air),e(io,kT),e(kT,nir),e(kT,ybe),e(ybe,sir),e(kT,lir),e(kT,xbe),e(xbe,iir),e(io,dir),M(ST,io,null),b(f,qXe,u),b(f,Ed,u),e(Ed,RT),e(RT,$be),M(Ny,$be,null),e(Ed,cir),e(Ed,kbe),e(kbe,fir),b(f,jXe,u),b(f,Vo,u),M(qy,Vo,null),e(Vo,mir),e(Vo,Cd),e(Cd,gir),e(Cd,IW),e(IW,hir),e(Cd,pir),e(Cd,NW),e(NW,_ir),e(Cd,uir),e(Vo,bir),e(Vo,jy),e(jy,vir),e(jy,Sbe),e(Sbe,Fir),e(jy,Tir),e(Vo,Mir),e(Vo,Tt),M(Dy,Tt,null),e(Tt,Eir),e(Tt,Rbe),e(Rbe,Cir),e(Tt,wir),e(Tt,wd),e(wd,Air),e(wd,Pbe),e(Pbe,Lir),e(wd,yir),e(wd,qW),e(qW,xir),e(wd,$ir),e(Tt,kir),M(PT,Tt,null),e(Vo,Sir),e(Vo,co),M(Gy,co,null),e(co,Rir),e(co,Bbe),e(Bbe,Pir),e(co,Bir),e(co,Ha),e(Ha,Iir),e(Ha,Ibe),e(Ibe,Nir),e(Ha,qir),e(Ha,Nbe),e(Nbe,jir),e(Ha,Dir),e(Ha,qbe),e(qbe,Gir),e(Ha,Oir),e(co,Vir),e(co,jbe),e(jbe,BT),e(BT,Dbe),e(Dbe,Xir),e(BT,zir),e(BT,jW),e(jW,Qir),e(BT,Wir),e(co,Hir),e(co,IT),e(IT,Uir),e(IT,Gbe),e(Gbe,Jir),e(IT,Yir),e(IT,Obe),e(Obe,Kir),e(co,Zir),M(NT,co,null),b(f,DXe,u),b(f,Ad,u),e(Ad,qT),e(qT,Vbe),M(Oy,Vbe,null),e(Ad,edr),e(Ad,Xbe),e(Xbe,odr),b(f,GXe,u),b(f,Xo,u),M(Vy,Xo,null),e(Xo,rdr),e(Xo,Ld),e(Ld,tdr),e(Ld,DW),e(DW,adr),e(Ld,ndr),e(Ld,GW),e(GW,sdr),e(Ld,ldr),e(Xo,idr),e(Xo,Xy),e(Xy,ddr),e(Xy,zbe),e(zbe,cdr),e(Xy,fdr),e(Xo,mdr),e(Xo,Mt),M(zy,Mt,null),e(Mt,gdr),e(Mt,Qbe),e(Qbe,hdr),e(Mt,pdr),e(Mt,yd),e(yd,_dr),e(yd,Wbe),e(Wbe,udr),e(yd,bdr),e(yd,OW),e(OW,vdr),e(yd,Fdr),e(Mt,Tdr),M(jT,Mt,null),e(Xo,Mdr),e(Xo,fo),M(Qy,fo,null),e(fo,Edr),e(fo,Hbe),e(Hbe,Cdr),e(fo,wdr),e(fo,Ua),e(Ua,Adr),e(Ua,Ube),e(Ube,Ldr),e(Ua,ydr),e(Ua,Jbe),e(Jbe,xdr),e(Ua,$dr),e(Ua,Ybe),e(Ybe,kdr),e(Ua,Sdr),e(fo,Rdr),e(fo,Kbe),e(Kbe,DT),e(DT,Zbe),e(Zbe,Pdr),e(DT,Bdr),e(DT,VW),e(VW,Idr),e(DT,Ndr),e(fo,qdr),e(fo,GT),e(GT,jdr),e(GT,e3e),e(e3e,Ddr),e(GT,Gdr),e(GT,o3e),e(o3e,Odr),e(fo,Vdr),M(OT,fo,null),b(f,OXe,u),b(f,xd,u),e(xd,VT),e(VT,r3e),M(Wy,r3e,null),e(xd,Xdr),e(xd,t3e),e(t3e,zdr),b(f,VXe,u),b(f,zo,u),M(Hy,zo,null),e(zo,Qdr),e(zo,$d),e($d,Wdr),e($d,XW),e(XW,Hdr),e($d,Udr),e($d,zW),e(zW,Jdr),e($d,Ydr),e(zo,Kdr),e(zo,Uy),e(Uy,Zdr),e(Uy,a3e),e(a3e,ecr),e(Uy,ocr),e(zo,rcr),e(zo,Et),M(Jy,Et,null),e(Et,tcr),e(Et,n3e),e(n3e,acr),e(Et,ncr),e(Et,kd),e(kd,scr),e(kd,s3e),e(s3e,lcr),e(kd,icr),e(kd,QW),e(QW,dcr),e(kd,ccr),e(Et,fcr),M(XT,Et,null),e(zo,mcr),e(zo,mo),M(Yy,mo,null),e(mo,gcr),e(mo,l3e),e(l3e,hcr),e(mo,pcr),e(mo,Ja),e(Ja,_cr),e(Ja,i3e),e(i3e,ucr),e(Ja,bcr),e(Ja,d3e),e(d3e,vcr),e(Ja,Fcr),e(Ja,c3e),e(c3e,Tcr),e(Ja,Mcr),e(mo,Ecr),e(mo,Pe),e(Pe,zT),e(zT,f3e),e(f3e,Ccr),e(zT,wcr),e(zT,WW),e(WW,Acr),e(zT,Lcr),e(Pe,ycr),e(Pe,QT),e(QT,m3e),e(m3e,xcr),e(QT,$cr),e(QT,HW),e(HW,kcr),e(QT,Scr),e(Pe,Rcr),e(Pe,WT),e(WT,g3e),e(g3e,Pcr),e(WT,Bcr),e(WT,UW),e(UW,Icr),e(WT,Ncr),e(Pe,qcr),e(Pe,HT),e(HT,h3e),e(h3e,jcr),e(HT,Dcr),e(HT,JW),e(JW,Gcr),e(HT,Ocr),e(Pe,Vcr),e(Pe,UT),e(UT,p3e),e(p3e,Xcr),e(UT,zcr),e(UT,YW),e(YW,Qcr),e(UT,Wcr),e(Pe,Hcr),e(Pe,JT),e(JT,_3e),e(_3e,Ucr),e(JT,Jcr),e(JT,KW),e(KW,Ycr),e(JT,Kcr),e(Pe,Zcr),e(Pe,YT),e(YT,u3e),e(u3e,efr),e(YT,ofr),e(YT,ZW),e(ZW,rfr),e(YT,tfr),e(Pe,afr),e(Pe,KT),e(KT,b3e),e(b3e,nfr),e(KT,sfr),e(KT,eH),e(eH,lfr),e(KT,ifr),e(Pe,dfr),e(Pe,ZT),e(ZT,v3e),e(v3e,cfr),e(ZT,ffr),e(ZT,oH),e(oH,mfr),e(ZT,gfr),e(mo,hfr),e(mo,e8),e(e8,pfr),e(e8,F3e),e(F3e,_fr),e(e8,ufr),e(e8,T3e),e(T3e,bfr),e(mo,vfr),M(o8,mo,null),b(f,XXe,u),b(f,Sd,u),e(Sd,r8),e(r8,M3e),M(Ky,M3e,null),e(Sd,Ffr),e(Sd,E3e),e(E3e,Tfr),b(f,zXe,u),b(f,Qo,u),M(Zy,Qo,null),e(Qo,Mfr),e(Qo,Rd),e(Rd,Efr),e(Rd,rH),e(rH,Cfr),e(Rd,wfr),e(Rd,tH),e(tH,Afr),e(Rd,Lfr),e(Qo,yfr),e(Qo,e9),e(e9,xfr),e(e9,C3e),e(C3e,$fr),e(e9,kfr),e(Qo,Sfr),e(Qo,Ct),M(o9,Ct,null),e(Ct,Rfr),e(Ct,w3e),e(w3e,Pfr),e(Ct,Bfr),e(Ct,Pd),e(Pd,Ifr),e(Pd,A3e),e(A3e,Nfr),e(Pd,qfr),e(Pd,aH),e(aH,jfr),e(Pd,Dfr),e(Ct,Gfr),M(t8,Ct,null),e(Qo,Ofr),e(Qo,go),M(r9,go,null),e(go,Vfr),e(go,L3e),e(L3e,Xfr),e(go,zfr),e(go,Ya),e(Ya,Qfr),e(Ya,y3e),e(y3e,Wfr),e(Ya,Hfr),e(Ya,x3e),e(x3e,Ufr),e(Ya,Jfr),e(Ya,$3e),e($3e,Yfr),e(Ya,Kfr),e(go,Zfr),e(go,rt),e(rt,a8),e(a8,k3e),e(k3e,emr),e(a8,omr),e(a8,nH),e(nH,rmr),e(a8,tmr),e(rt,amr),e(rt,n8),e(n8,S3e),e(S3e,nmr),e(n8,smr),e(n8,sH),e(sH,lmr),e(n8,imr),e(rt,dmr),e(rt,s8),e(s8,R3e),e(R3e,cmr),e(s8,fmr),e(s8,lH),e(lH,mmr),e(s8,gmr),e(rt,hmr),e(rt,l8),e(l8,P3e),e(P3e,pmr),e(l8,_mr),e(l8,iH),e(iH,umr),e(l8,bmr),e(rt,vmr),e(rt,i8),e(i8,B3e),e(B3e,Fmr),e(i8,Tmr),e(i8,dH),e(dH,Mmr),e(i8,Emr),e(go,Cmr),e(go,d8),e(d8,wmr),e(d8,I3e),e(I3e,Amr),e(d8,Lmr),e(d8,N3e),e(N3e,ymr),e(go,xmr),M(c8,go,null),b(f,QXe,u),b(f,Bd,u),e(Bd,f8),e(f8,q3e),M(t9,q3e,null),e(Bd,$mr),e(Bd,j3e),e(j3e,kmr),b(f,WXe,u),b(f,Wo,u),M(a9,Wo,null),e(Wo,Smr),e(Wo,Id),e(Id,Rmr),e(Id,cH),e(cH,Pmr),e(Id,Bmr),e(Id,fH),e(fH,Imr),e(Id,Nmr),e(Wo,qmr),e(Wo,n9),e(n9,jmr),e(n9,D3e),e(D3e,Dmr),e(n9,Gmr),e(Wo,Omr),e(Wo,wt),M(s9,wt,null),e(wt,Vmr),e(wt,G3e),e(G3e,Xmr),e(wt,zmr),e(wt,Nd),e(Nd,Qmr),e(Nd,O3e),e(O3e,Wmr),e(Nd,Hmr),e(Nd,mH),e(mH,Umr),e(Nd,Jmr),e(wt,Ymr),M(m8,wt,null),e(Wo,Kmr),e(Wo,ho),M(l9,ho,null),e(ho,Zmr),e(ho,V3e),e(V3e,egr),e(ho,ogr),e(ho,Ka),e(Ka,rgr),e(Ka,X3e),e(X3e,tgr),e(Ka,agr),e(Ka,z3e),e(z3e,ngr),e(Ka,sgr),e(Ka,Q3e),e(Q3e,lgr),e(Ka,igr),e(ho,dgr),e(ho,Le),e(Le,g8),e(g8,W3e),e(W3e,cgr),e(g8,fgr),e(g8,gH),e(gH,mgr),e(g8,ggr),e(Le,hgr),e(Le,h8),e(h8,H3e),e(H3e,pgr),e(h8,_gr),e(h8,hH),e(hH,ugr),e(h8,bgr),e(Le,vgr),e(Le,p8),e(p8,U3e),e(U3e,Fgr),e(p8,Tgr),e(p8,pH),e(pH,Mgr),e(p8,Egr),e(Le,Cgr),e(Le,_8),e(_8,J3e),e(J3e,wgr),e(_8,Agr),e(_8,_H),e(_H,Lgr),e(_8,ygr),e(Le,xgr),e(Le,u8),e(u8,Y3e),e(Y3e,$gr),e(u8,kgr),e(u8,uH),e(uH,Sgr),e(u8,Rgr),e(Le,Pgr),e(Le,b8),e(b8,K3e),e(K3e,Bgr),e(b8,Igr),e(b8,bH),e(bH,Ngr),e(b8,qgr),e(Le,jgr),e(Le,v8),e(v8,Z3e),e(Z3e,Dgr),e(v8,Ggr),e(v8,vH),e(vH,Ogr),e(v8,Vgr),e(Le,Xgr),e(Le,F8),e(F8,eve),e(eve,zgr),e(F8,Qgr),e(F8,FH),e(FH,Wgr),e(F8,Hgr),e(Le,Ugr),e(Le,T8),e(T8,ove),e(ove,Jgr),e(T8,Ygr),e(T8,TH),e(TH,Kgr),e(T8,Zgr),e(Le,ehr),e(Le,M8),e(M8,rve),e(rve,ohr),e(M8,rhr),e(M8,MH),e(MH,thr),e(M8,ahr),e(ho,nhr),e(ho,E8),e(E8,shr),e(E8,tve),e(tve,lhr),e(E8,ihr),e(E8,ave),e(ave,dhr),e(ho,chr),M(C8,ho,null),b(f,HXe,u),b(f,qd,u),e(qd,w8),e(w8,nve),M(i9,nve,null),e(qd,fhr),e(qd,sve),e(sve,mhr),b(f,UXe,u),b(f,Ho,u),M(d9,Ho,null),e(Ho,ghr),e(Ho,jd),e(jd,hhr),e(jd,EH),e(EH,phr),e(jd,_hr),e(jd,CH),e(CH,uhr),e(jd,bhr),e(Ho,vhr),e(Ho,c9),e(c9,Fhr),e(c9,lve),e(lve,Thr),e(c9,Mhr),e(Ho,Ehr),e(Ho,At),M(f9,At,null),e(At,Chr),e(At,ive),e(ive,whr),e(At,Ahr),e(At,Dd),e(Dd,Lhr),e(Dd,dve),e(dve,yhr),e(Dd,xhr),e(Dd,wH),e(wH,$hr),e(Dd,khr),e(At,Shr),M(A8,At,null),e(Ho,Rhr),e(Ho,po),M(m9,po,null),e(po,Phr),e(po,cve),e(cve,Bhr),e(po,Ihr),e(po,Za),e(Za,Nhr),e(Za,fve),e(fve,qhr),e(Za,jhr),e(Za,mve),e(mve,Dhr),e(Za,Ghr),e(Za,gve),e(gve,Ohr),e(Za,Vhr),e(po,Xhr),e(po,g9),e(g9,L8),e(L8,hve),e(hve,zhr),e(L8,Qhr),e(L8,AH),e(AH,Whr),e(L8,Hhr),e(g9,Uhr),e(g9,y8),e(y8,pve),e(pve,Jhr),e(y8,Yhr),e(y8,LH),e(LH,Khr),e(y8,Zhr),e(po,epr),e(po,x8),e(x8,opr),e(x8,_ve),e(_ve,rpr),e(x8,tpr),e(x8,uve),e(uve,apr),e(po,npr),M($8,po,null),b(f,JXe,u),b(f,Gd,u),e(Gd,k8),e(k8,bve),M(h9,bve,null),e(Gd,spr),e(Gd,vve),e(vve,lpr),b(f,YXe,u),b(f,Uo,u),M(p9,Uo,null),e(Uo,ipr),e(Uo,Od),e(Od,dpr),e(Od,yH),e(yH,cpr),e(Od,fpr),e(Od,xH),e(xH,mpr),e(Od,gpr),e(Uo,hpr),e(Uo,_9),e(_9,ppr),e(_9,Fve),e(Fve,_pr),e(_9,upr),e(Uo,bpr),e(Uo,Lt),M(u9,Lt,null),e(Lt,vpr),e(Lt,Tve),e(Tve,Fpr),e(Lt,Tpr),e(Lt,Vd),e(Vd,Mpr),e(Vd,Mve),e(Mve,Epr),e(Vd,Cpr),e(Vd,$H),e($H,wpr),e(Vd,Apr),e(Lt,Lpr),M(S8,Lt,null),e(Uo,ypr),e(Uo,_o),M(b9,_o,null),e(_o,xpr),e(_o,Eve),e(Eve,$pr),e(_o,kpr),e(_o,en),e(en,Spr),e(en,Cve),e(Cve,Rpr),e(en,Ppr),e(en,wve),e(wve,Bpr),e(en,Ipr),e(en,Ave),e(Ave,Npr),e(en,qpr),e(_o,jpr),e(_o,tt),e(tt,R8),e(R8,Lve),e(Lve,Dpr),e(R8,Gpr),e(R8,kH),e(kH,Opr),e(R8,Vpr),e(tt,Xpr),e(tt,P8),e(P8,yve),e(yve,zpr),e(P8,Qpr),e(P8,SH),e(SH,Wpr),e(P8,Hpr),e(tt,Upr),e(tt,B8),e(B8,xve),e(xve,Jpr),e(B8,Ypr),e(B8,RH),e(RH,Kpr),e(B8,Zpr),e(tt,e_r),e(tt,I8),e(I8,$ve),e($ve,o_r),e(I8,r_r),e(I8,PH),e(PH,t_r),e(I8,a_r),e(tt,n_r),e(tt,N8),e(N8,kve),e(kve,s_r),e(N8,l_r),e(N8,BH),e(BH,i_r),e(N8,d_r),e(_o,c_r),e(_o,q8),e(q8,f_r),e(q8,Sve),e(Sve,m_r),e(q8,g_r),e(q8,Rve),e(Rve,h_r),e(_o,p_r),M(j8,_o,null),b(f,KXe,u),b(f,Xd,u),e(Xd,D8),e(D8,Pve),M(v9,Pve,null),e(Xd,__r),e(Xd,Bve),e(Bve,u_r),b(f,ZXe,u),b(f,Jo,u),M(F9,Jo,null),e(Jo,b_r),e(Jo,zd),e(zd,v_r),e(zd,IH),e(IH,F_r),e(zd,T_r),e(zd,NH),e(NH,M_r),e(zd,E_r),e(Jo,C_r),e(Jo,T9),e(T9,w_r),e(T9,Ive),e(Ive,A_r),e(T9,L_r),e(Jo,y_r),e(Jo,yt),M(M9,yt,null),e(yt,x_r),e(yt,Nve),e(Nve,$_r),e(yt,k_r),e(yt,Qd),e(Qd,S_r),e(Qd,qve),e(qve,R_r),e(Qd,P_r),e(Qd,qH),e(qH,B_r),e(Qd,I_r),e(yt,N_r),M(G8,yt,null),e(Jo,q_r),e(Jo,uo),M(E9,uo,null),e(uo,j_r),e(uo,jve),e(jve,D_r),e(uo,G_r),e(uo,on),e(on,O_r),e(on,Dve),e(Dve,V_r),e(on,X_r),e(on,Gve),e(Gve,z_r),e(on,Q_r),e(on,Ove),e(Ove,W_r),e(on,H_r),e(uo,U_r),e(uo,Wd),e(Wd,O8),e(O8,Vve),e(Vve,J_r),e(O8,Y_r),e(O8,jH),e(jH,K_r),e(O8,Z_r),e(Wd,eur),e(Wd,V8),e(V8,Xve),e(Xve,our),e(V8,rur),e(V8,DH),e(DH,tur),e(V8,aur),e(Wd,nur),e(Wd,X8),e(X8,zve),e(zve,sur),e(X8,lur),e(X8,GH),e(GH,iur),e(X8,dur),e(uo,cur),e(uo,z8),e(z8,fur),e(z8,Qve),e(Qve,mur),e(z8,gur),e(z8,Wve),e(Wve,hur),e(uo,pur),M(Q8,uo,null),b(f,eze,u),b(f,Hd,u),e(Hd,W8),e(W8,Hve),M(C9,Hve,null),e(Hd,_ur),e(Hd,Uve),e(Uve,uur),b(f,oze,u),b(f,Yo,u),M(w9,Yo,null),e(Yo,bur),e(Yo,Ud),e(Ud,vur),e(Ud,OH),e(OH,Fur),e(Ud,Tur),e(Ud,VH),e(VH,Mur),e(Ud,Eur),e(Yo,Cur),e(Yo,A9),e(A9,wur),e(A9,Jve),e(Jve,Aur),e(A9,Lur),e(Yo,yur),e(Yo,xt),M(L9,xt,null),e(xt,xur),e(xt,Yve),e(Yve,$ur),e(xt,kur),e(xt,Jd),e(Jd,Sur),e(Jd,Kve),e(Kve,Rur),e(Jd,Pur),e(Jd,XH),e(XH,Bur),e(Jd,Iur),e(xt,Nur),M(H8,xt,null),e(Yo,qur),e(Yo,bo),M(y9,bo,null),e(bo,jur),e(bo,Zve),e(Zve,Dur),e(bo,Gur),e(bo,rn),e(rn,Our),e(rn,eFe),e(eFe,Vur),e(rn,Xur),e(rn,oFe),e(oFe,zur),e(rn,Qur),e(rn,rFe),e(rFe,Wur),e(rn,Hur),e(bo,Uur),e(bo,x9),e(x9,U8),e(U8,tFe),e(tFe,Jur),e(U8,Yur),e(U8,zH),e(zH,Kur),e(U8,Zur),e(x9,e1r),e(x9,J8),e(J8,aFe),e(aFe,o1r),e(J8,r1r),e(J8,QH),e(QH,t1r),e(J8,a1r),e(bo,n1r),e(bo,Y8),e(Y8,s1r),e(Y8,nFe),e(nFe,l1r),e(Y8,i1r),e(Y8,sFe),e(sFe,d1r),e(bo,c1r),M(K8,bo,null),b(f,rze,u),b(f,Yd,u),e(Yd,Z8),e(Z8,lFe),M($9,lFe,null),e(Yd,f1r),e(Yd,iFe),e(iFe,m1r),b(f,tze,u),b(f,Ko,u),M(k9,Ko,null),e(Ko,g1r),e(Ko,Kd),e(Kd,h1r),e(Kd,WH),e(WH,p1r),e(Kd,_1r),e(Kd,HH),e(HH,u1r),e(Kd,b1r),e(Ko,v1r),e(Ko,S9),e(S9,F1r),e(S9,dFe),e(dFe,T1r),e(S9,M1r),e(Ko,E1r),e(Ko,$t),M(R9,$t,null),e($t,C1r),e($t,cFe),e(cFe,w1r),e($t,A1r),e($t,Zd),e(Zd,L1r),e(Zd,fFe),e(fFe,y1r),e(Zd,x1r),e(Zd,UH),e(UH,$1r),e(Zd,k1r),e($t,S1r),M(eM,$t,null),e(Ko,R1r),e(Ko,vo),M(P9,vo,null),e(vo,P1r),e(vo,mFe),e(mFe,B1r),e(vo,I1r),e(vo,tn),e(tn,N1r),e(tn,gFe),e(gFe,q1r),e(tn,j1r),e(tn,hFe),e(hFe,D1r),e(tn,G1r),e(tn,pFe),e(pFe,O1r),e(tn,V1r),e(vo,X1r),e(vo,_Fe),e(_Fe,oM),e(oM,uFe),e(uFe,z1r),e(oM,Q1r),e(oM,JH),e(JH,W1r),e(oM,H1r),e(vo,U1r),e(vo,rM),e(rM,J1r),e(rM,bFe),e(bFe,Y1r),e(rM,K1r),e(rM,vFe),e(vFe,Z1r),e(vo,e2r),M(tM,vo,null),b(f,aze,u),b(f,ec,u),e(ec,aM),e(aM,FFe),M(B9,FFe,null),e(ec,o2r),e(ec,TFe),e(TFe,r2r),b(f,nze,u),b(f,Zo,u),M(I9,Zo,null),e(Zo,t2r),e(Zo,oc),e(oc,a2r),e(oc,YH),e(YH,n2r),e(oc,s2r),e(oc,KH),e(KH,l2r),e(oc,i2r),e(Zo,d2r),e(Zo,N9),e(N9,c2r),e(N9,MFe),e(MFe,f2r),e(N9,m2r),e(Zo,g2r),e(Zo,kt),M(q9,kt,null),e(kt,h2r),e(kt,EFe),e(EFe,p2r),e(kt,_2r),e(kt,rc),e(rc,u2r),e(rc,CFe),e(CFe,b2r),e(rc,v2r),e(rc,ZH),e(ZH,F2r),e(rc,T2r),e(kt,M2r),M(nM,kt,null),e(Zo,E2r),e(Zo,Fo),M(j9,Fo,null),e(Fo,C2r),e(Fo,wFe),e(wFe,w2r),e(Fo,A2r),e(Fo,an),e(an,L2r),e(an,AFe),e(AFe,y2r),e(an,x2r),e(an,LFe),e(LFe,$2r),e(an,k2r),e(an,yFe),e(yFe,S2r),e(an,R2r),e(Fo,P2r),e(Fo,at),e(at,sM),e(sM,xFe),e(xFe,B2r),e(sM,I2r),e(sM,eU),e(eU,N2r),e(sM,q2r),e(at,j2r),e(at,lM),e(lM,$Fe),e($Fe,D2r),e(lM,G2r),e(lM,oU),e(oU,O2r),e(lM,V2r),e(at,X2r),e(at,iM),e(iM,kFe),e(kFe,z2r),e(iM,Q2r),e(iM,rU),e(rU,W2r),e(iM,H2r),e(at,U2r),e(at,dM),e(dM,SFe),e(SFe,J2r),e(dM,Y2r),e(dM,tU),e(tU,K2r),e(dM,Z2r),e(at,ebr),e(at,cM),e(cM,RFe),e(RFe,obr),e(cM,rbr),e(cM,aU),e(aU,tbr),e(cM,abr),e(Fo,nbr),e(Fo,fM),e(fM,sbr),e(fM,PFe),e(PFe,lbr),e(fM,ibr),e(fM,BFe),e(BFe,dbr),e(Fo,cbr),M(mM,Fo,null),b(f,sze,u),b(f,tc,u),e(tc,gM),e(gM,IFe),M(D9,IFe,null),e(tc,fbr),e(tc,NFe),e(NFe,mbr),b(f,lze,u),b(f,er,u),M(G9,er,null),e(er,gbr),e(er,ac),e(ac,hbr),e(ac,nU),e(nU,pbr),e(ac,_br),e(ac,sU),e(sU,ubr),e(ac,bbr),e(er,vbr),e(er,O9),e(O9,Fbr),e(O9,qFe),e(qFe,Tbr),e(O9,Mbr),e(er,Ebr),e(er,St),M(V9,St,null),e(St,Cbr),e(St,jFe),e(jFe,wbr),e(St,Abr),e(St,nc),e(nc,Lbr),e(nc,DFe),e(DFe,ybr),e(nc,xbr),e(nc,lU),e(lU,$br),e(nc,kbr),e(St,Sbr),M(hM,St,null),e(er,Rbr),e(er,To),M(X9,To,null),e(To,Pbr),e(To,GFe),e(GFe,Bbr),e(To,Ibr),e(To,nn),e(nn,Nbr),e(nn,OFe),e(OFe,qbr),e(nn,jbr),e(nn,VFe),e(VFe,Dbr),e(nn,Gbr),e(nn,XFe),e(XFe,Obr),e(nn,Vbr),e(To,Xbr),e(To,zFe),e(zFe,pM),e(pM,QFe),e(QFe,zbr),e(pM,Qbr),e(pM,iU),e(iU,Wbr),e(pM,Hbr),e(To,Ubr),e(To,_M),e(_M,Jbr),e(_M,WFe),e(WFe,Ybr),e(_M,Kbr),e(_M,HFe),e(HFe,Zbr),e(To,e3r),M(uM,To,null),b(f,ize,u),b(f,sc,u),e(sc,bM),e(bM,UFe),M(z9,UFe,null),e(sc,o3r),e(sc,JFe),e(JFe,r3r),b(f,dze,u),b(f,or,u),M(Q9,or,null),e(or,t3r),e(or,lc),e(lc,a3r),e(lc,dU),e(dU,n3r),e(lc,s3r),e(lc,cU),e(cU,l3r),e(lc,i3r),e(or,d3r),e(or,W9),e(W9,c3r),e(W9,YFe),e(YFe,f3r),e(W9,m3r),e(or,g3r),e(or,Rt),M(H9,Rt,null),e(Rt,h3r),e(Rt,KFe),e(KFe,p3r),e(Rt,_3r),e(Rt,ic),e(ic,u3r),e(ic,ZFe),e(ZFe,b3r),e(ic,v3r),e(ic,fU),e(fU,F3r),e(ic,T3r),e(Rt,M3r),M(vM,Rt,null),e(or,E3r),e(or,xr),M(U9,xr,null),e(xr,C3r),e(xr,eTe),e(eTe,w3r),e(xr,A3r),e(xr,sn),e(sn,L3r),e(sn,oTe),e(oTe,y3r),e(sn,x3r),e(sn,rTe),e(rTe,$3r),e(sn,k3r),e(sn,tTe),e(tTe,S3r),e(sn,R3r),e(xr,P3r),e(xr,q),e(q,FM),e(FM,aTe),e(aTe,B3r),e(FM,I3r),e(FM,mU),e(mU,N3r),e(FM,q3r),e(q,j3r),e(q,TM),e(TM,nTe),e(nTe,D3r),e(TM,G3r),e(TM,gU),e(gU,O3r),e(TM,V3r),e(q,X3r),e(q,MM),e(MM,sTe),e(sTe,z3r),e(MM,Q3r),e(MM,hU),e(hU,W3r),e(MM,H3r),e(q,U3r),e(q,EM),e(EM,lTe),e(lTe,J3r),e(EM,Y3r),e(EM,pU),e(pU,K3r),e(EM,Z3r),e(q,evr),e(q,CM),e(CM,iTe),e(iTe,ovr),e(CM,rvr),e(CM,_U),e(_U,tvr),e(CM,avr),e(q,nvr),e(q,wM),e(wM,dTe),e(dTe,svr),e(wM,lvr),e(wM,uU),e(uU,ivr),e(wM,dvr),e(q,cvr),e(q,AM),e(AM,cTe),e(cTe,fvr),e(AM,mvr),e(AM,bU),e(bU,gvr),e(AM,hvr),e(q,pvr),e(q,LM),e(LM,fTe),e(fTe,_vr),e(LM,uvr),e(LM,vU),e(vU,bvr),e(LM,vvr),e(q,Fvr),e(q,yM),e(yM,mTe),e(mTe,Tvr),e(yM,Mvr),e(yM,FU),e(FU,Evr),e(yM,Cvr),e(q,wvr),e(q,xM),e(xM,gTe),e(gTe,Avr),e(xM,Lvr),e(xM,TU),e(TU,yvr),e(xM,xvr),e(q,$vr),e(q,$M),e($M,hTe),e(hTe,kvr),e($M,Svr),e($M,MU),e(MU,Rvr),e($M,Pvr),e(q,Bvr),e(q,kM),e(kM,pTe),e(pTe,Ivr),e(kM,Nvr),e(kM,EU),e(EU,qvr),e(kM,jvr),e(q,Dvr),e(q,SM),e(SM,_Te),e(_Te,Gvr),e(SM,Ovr),e(SM,CU),e(CU,Vvr),e(SM,Xvr),e(q,zvr),e(q,RM),e(RM,uTe),e(uTe,Qvr),e(RM,Wvr),e(RM,wU),e(wU,Hvr),e(RM,Uvr),e(q,Jvr),e(q,PM),e(PM,bTe),e(bTe,Yvr),e(PM,Kvr),e(PM,AU),e(AU,Zvr),e(PM,eFr),e(q,oFr),e(q,BM),e(BM,vTe),e(vTe,rFr),e(BM,tFr),e(BM,LU),e(LU,aFr),e(BM,nFr),e(q,sFr),e(q,IM),e(IM,FTe),e(FTe,lFr),e(IM,iFr),e(IM,yU),e(yU,dFr),e(IM,cFr),e(q,fFr),e(q,NM),e(NM,TTe),e(TTe,mFr),e(NM,gFr),e(NM,xU),e(xU,hFr),e(NM,pFr),e(q,_Fr),e(q,Js),e(Js,MTe),e(MTe,uFr),e(Js,bFr),e(Js,$U),e($U,vFr),e(Js,FFr),e(Js,kU),e(kU,TFr),e(Js,MFr),e(q,EFr),e(q,qM),e(qM,ETe),e(ETe,CFr),e(qM,wFr),e(qM,SU),e(SU,AFr),e(qM,LFr),e(q,yFr),e(q,jM),e(jM,CTe),e(CTe,xFr),e(jM,$Fr),e(jM,RU),e(RU,kFr),e(jM,SFr),e(q,RFr),e(q,DM),e(DM,wTe),e(wTe,PFr),e(DM,BFr),e(DM,PU),e(PU,IFr),e(DM,NFr),e(q,qFr),e(q,GM),e(GM,ATe),e(ATe,jFr),e(GM,DFr),e(GM,BU),e(BU,GFr),e(GM,OFr),e(q,VFr),e(q,OM),e(OM,LTe),e(LTe,XFr),e(OM,zFr),e(OM,IU),e(IU,QFr),e(OM,WFr),e(q,HFr),e(q,VM),e(VM,yTe),e(yTe,UFr),e(VM,JFr),e(VM,NU),e(NU,YFr),e(VM,KFr),e(q,ZFr),e(q,XM),e(XM,xTe),e(xTe,eTr),e(XM,oTr),e(XM,qU),e(qU,rTr),e(XM,tTr),e(q,aTr),e(q,zM),e(zM,$Te),e($Te,nTr),e(zM,sTr),e(zM,jU),e(jU,lTr),e(zM,iTr),e(q,dTr),e(q,QM),e(QM,kTe),e(kTe,cTr),e(QM,fTr),e(QM,DU),e(DU,mTr),e(QM,gTr),e(q,hTr),e(q,WM),e(WM,STe),e(STe,pTr),e(WM,_Tr),e(WM,GU),e(GU,uTr),e(WM,bTr),e(q,vTr),e(q,HM),e(HM,RTe),e(RTe,FTr),e(HM,TTr),e(HM,OU),e(OU,MTr),e(HM,ETr),e(q,CTr),e(q,UM),e(UM,PTe),e(PTe,wTr),e(UM,ATr),e(UM,VU),e(VU,LTr),e(UM,yTr),e(q,xTr),e(q,JM),e(JM,BTe),e(BTe,$Tr),e(JM,kTr),e(JM,XU),e(XU,STr),e(JM,RTr),e(q,PTr),e(q,YM),e(YM,ITe),e(ITe,BTr),e(YM,ITr),e(YM,zU),e(zU,NTr),e(YM,qTr),e(q,jTr),e(q,KM),e(KM,NTe),e(NTe,DTr),e(KM,GTr),e(KM,QU),e(QU,OTr),e(KM,VTr),e(q,XTr),e(q,ZM),e(ZM,qTe),e(qTe,zTr),e(ZM,QTr),e(ZM,WU),e(WU,WTr),e(ZM,HTr),e(q,UTr),e(q,e4),e(e4,jTe),e(jTe,JTr),e(e4,YTr),e(e4,HU),e(HU,KTr),e(e4,ZTr),e(q,e8r),e(q,o4),e(o4,DTe),e(DTe,o8r),e(o4,r8r),e(o4,UU),e(UU,t8r),e(o4,a8r),e(q,n8r),e(q,r4),e(r4,GTe),e(GTe,s8r),e(r4,l8r),e(r4,JU),e(JU,i8r),e(r4,d8r),e(q,c8r),e(q,t4),e(t4,OTe),e(OTe,f8r),e(t4,m8r),e(t4,YU),e(YU,g8r),e(t4,h8r),e(q,p8r),e(q,a4),e(a4,VTe),e(VTe,_8r),e(a4,u8r),e(a4,KU),e(KU,b8r),e(a4,v8r),e(q,F8r),e(q,n4),e(n4,XTe),e(XTe,T8r),e(n4,M8r),e(n4,ZU),e(ZU,E8r),e(n4,C8r),e(q,w8r),e(q,s4),e(s4,zTe),e(zTe,A8r),e(s4,L8r),e(s4,eJ),e(eJ,y8r),e(s4,x8r),e(q,$8r),e(q,l4),e(l4,QTe),e(QTe,k8r),e(l4,S8r),e(l4,oJ),e(oJ,R8r),e(l4,P8r),e(q,B8r),e(q,i4),e(i4,WTe),e(WTe,I8r),e(i4,N8r),e(i4,rJ),e(rJ,q8r),e(i4,j8r),e(q,D8r),e(q,d4),e(d4,HTe),e(HTe,G8r),e(d4,O8r),e(d4,tJ),e(tJ,V8r),e(d4,X8r),e(q,z8r),e(q,c4),e(c4,UTe),e(UTe,Q8r),e(c4,W8r),e(c4,aJ),e(aJ,H8r),e(c4,U8r),e(q,J8r),e(q,f4),e(f4,JTe),e(JTe,Y8r),e(f4,K8r),e(f4,nJ),e(nJ,Z8r),e(f4,eMr),e(q,oMr),e(q,m4),e(m4,YTe),e(YTe,rMr),e(m4,tMr),e(m4,sJ),e(sJ,aMr),e(m4,nMr),e(q,sMr),e(q,g4),e(g4,KTe),e(KTe,lMr),e(g4,iMr),e(g4,lJ),e(lJ,dMr),e(g4,cMr),e(q,fMr),e(q,h4),e(h4,ZTe),e(ZTe,mMr),e(h4,gMr),e(h4,iJ),e(iJ,hMr),e(h4,pMr),e(xr,_Mr),M(p4,xr,null),b(f,cze,u),b(f,dc,u),e(dc,_4),e(_4,e8e),M(J9,e8e,null),e(dc,uMr),e(dc,o8e),e(o8e,bMr),b(f,fze,u),b(f,rr,u),M(Y9,rr,null),e(rr,vMr),e(rr,cc),e(cc,FMr),e(cc,dJ),e(dJ,TMr),e(cc,MMr),e(cc,cJ),e(cJ,EMr),e(cc,CMr),e(rr,wMr),e(rr,K9),e(K9,AMr),e(K9,r8e),e(r8e,LMr),e(K9,yMr),e(rr,xMr),e(rr,Pt),M(Z9,Pt,null),e(Pt,$Mr),e(Pt,t8e),e(t8e,kMr),e(Pt,SMr),e(Pt,fc),e(fc,RMr),e(fc,a8e),e(a8e,PMr),e(fc,BMr),e(fc,fJ),e(fJ,IMr),e(fc,NMr),e(Pt,qMr),M(u4,Pt,null),e(rr,jMr),e(rr,$r),M(ex,$r,null),e($r,DMr),e($r,n8e),e(n8e,GMr),e($r,OMr),e($r,ln),e(ln,VMr),e(ln,s8e),e(s8e,XMr),e(ln,zMr),e(ln,l8e),e(l8e,QMr),e(ln,WMr),e(ln,i8e),e(i8e,HMr),e(ln,UMr),e($r,JMr),e($r,se),e(se,b4),e(b4,d8e),e(d8e,YMr),e(b4,KMr),e(b4,mJ),e(mJ,ZMr),e(b4,e4r),e(se,o4r),e(se,v4),e(v4,c8e),e(c8e,r4r),e(v4,t4r),e(v4,gJ),e(gJ,a4r),e(v4,n4r),e(se,s4r),e(se,F4),e(F4,f8e),e(f8e,l4r),e(F4,i4r),e(F4,hJ),e(hJ,d4r),e(F4,c4r),e(se,f4r),e(se,T4),e(T4,m8e),e(m8e,m4r),e(T4,g4r),e(T4,pJ),e(pJ,h4r),e(T4,p4r),e(se,_4r),e(se,M4),e(M4,g8e),e(g8e,u4r),e(M4,b4r),e(M4,_J),e(_J,v4r),e(M4,F4r),e(se,T4r),e(se,E4),e(E4,h8e),e(h8e,M4r),e(E4,E4r),e(E4,uJ),e(uJ,C4r),e(E4,w4r),e(se,A4r),e(se,C4),e(C4,p8e),e(p8e,L4r),e(C4,y4r),e(C4,bJ),e(bJ,x4r),e(C4,$4r),e(se,k4r),e(se,w4),e(w4,_8e),e(_8e,S4r),e(w4,R4r),e(w4,vJ),e(vJ,P4r),e(w4,B4r),e(se,I4r),e(se,A4),e(A4,u8e),e(u8e,N4r),e(A4,q4r),e(A4,FJ),e(FJ,j4r),e(A4,D4r),e(se,G4r),e(se,L4),e(L4,b8e),e(b8e,O4r),e(L4,V4r),e(L4,TJ),e(TJ,X4r),e(L4,z4r),e(se,Q4r),e(se,y4),e(y4,v8e),e(v8e,W4r),e(y4,H4r),e(y4,MJ),e(MJ,U4r),e(y4,J4r),e(se,Y4r),e(se,x4),e(x4,F8e),e(F8e,K4r),e(x4,Z4r),e(x4,EJ),e(EJ,eEr),e(x4,oEr),e(se,rEr),e(se,$4),e($4,T8e),e(T8e,tEr),e($4,aEr),e($4,CJ),e(CJ,nEr),e($4,sEr),e(se,lEr),e(se,k4),e(k4,M8e),e(M8e,iEr),e(k4,dEr),e(k4,wJ),e(wJ,cEr),e(k4,fEr),e(se,mEr),e(se,S4),e(S4,E8e),e(E8e,gEr),e(S4,hEr),e(S4,AJ),e(AJ,pEr),e(S4,_Er),e(se,uEr),e(se,R4),e(R4,C8e),e(C8e,bEr),e(R4,vEr),e(R4,LJ),e(LJ,FEr),e(R4,TEr),e(se,MEr),e(se,P4),e(P4,w8e),e(w8e,EEr),e(P4,CEr),e(P4,yJ),e(yJ,wEr),e(P4,AEr),e(se,LEr),e(se,B4),e(B4,A8e),e(A8e,yEr),e(B4,xEr),e(B4,xJ),e(xJ,$Er),e(B4,kEr),e(se,SEr),e(se,I4),e(I4,L8e),e(L8e,REr),e(I4,PEr),e(I4,$J),e($J,BEr),e(I4,IEr),e(se,NEr),e(se,N4),e(N4,y8e),e(y8e,qEr),e(N4,jEr),e(N4,kJ),e(kJ,DEr),e(N4,GEr),e(se,OEr),e(se,q4),e(q4,x8e),e(x8e,VEr),e(q4,XEr),e(q4,SJ),e(SJ,zEr),e(q4,QEr),e(se,WEr),e(se,j4),e(j4,$8e),e($8e,HEr),e(j4,UEr),e(j4,RJ),e(RJ,JEr),e(j4,YEr),e(se,KEr),e(se,D4),e(D4,k8e),e(k8e,ZEr),e(D4,eCr),e(D4,PJ),e(PJ,oCr),e(D4,rCr),e($r,tCr),M(G4,$r,null),b(f,mze,u),b(f,mc,u),e(mc,O4),e(O4,S8e),M(ox,S8e,null),e(mc,aCr),e(mc,R8e),e(R8e,nCr),b(f,gze,u),b(f,tr,u),M(rx,tr,null),e(tr,sCr),e(tr,gc),e(gc,lCr),e(gc,BJ),e(BJ,iCr),e(gc,dCr),e(gc,IJ),e(IJ,cCr),e(gc,fCr),e(tr,mCr),e(tr,tx),e(tx,gCr),e(tx,P8e),e(P8e,hCr),e(tx,pCr),e(tr,_Cr),e(tr,Bt),M(ax,Bt,null),e(Bt,uCr),e(Bt,B8e),e(B8e,bCr),e(Bt,vCr),e(Bt,hc),e(hc,FCr),e(hc,I8e),e(I8e,TCr),e(hc,MCr),e(hc,NJ),e(NJ,ECr),e(hc,CCr),e(Bt,wCr),M(V4,Bt,null),e(tr,ACr),e(tr,kr),M(nx,kr,null),e(kr,LCr),e(kr,N8e),e(N8e,yCr),e(kr,xCr),e(kr,dn),e(dn,$Cr),e(dn,q8e),e(q8e,kCr),e(dn,SCr),e(dn,j8e),e(j8e,RCr),e(dn,PCr),e(dn,D8e),e(D8e,BCr),e(dn,ICr),e(kr,NCr),e(kr,Me),e(Me,X4),e(X4,G8e),e(G8e,qCr),e(X4,jCr),e(X4,qJ),e(qJ,DCr),e(X4,GCr),e(Me,OCr),e(Me,z4),e(z4,O8e),e(O8e,VCr),e(z4,XCr),e(z4,jJ),e(jJ,zCr),e(z4,QCr),e(Me,WCr),e(Me,Q4),e(Q4,V8e),e(V8e,HCr),e(Q4,UCr),e(Q4,DJ),e(DJ,JCr),e(Q4,YCr),e(Me,KCr),e(Me,W4),e(W4,X8e),e(X8e,ZCr),e(W4,e5r),e(W4,GJ),e(GJ,o5r),e(W4,r5r),e(Me,t5r),e(Me,H4),e(H4,z8e),e(z8e,a5r),e(H4,n5r),e(H4,OJ),e(OJ,s5r),e(H4,l5r),e(Me,i5r),e(Me,U4),e(U4,Q8e),e(Q8e,d5r),e(U4,c5r),e(U4,VJ),e(VJ,f5r),e(U4,m5r),e(Me,g5r),e(Me,J4),e(J4,W8e),e(W8e,h5r),e(J4,p5r),e(J4,XJ),e(XJ,_5r),e(J4,u5r),e(Me,b5r),e(Me,Y4),e(Y4,H8e),e(H8e,v5r),e(Y4,F5r),e(Y4,zJ),e(zJ,T5r),e(Y4,M5r),e(Me,E5r),e(Me,K4),e(K4,U8e),e(U8e,C5r),e(K4,w5r),e(K4,QJ),e(QJ,A5r),e(K4,L5r),e(Me,y5r),e(Me,Z4),e(Z4,J8e),e(J8e,x5r),e(Z4,$5r),e(Z4,WJ),e(WJ,k5r),e(Z4,S5r),e(Me,R5r),e(Me,eE),e(eE,Y8e),e(Y8e,P5r),e(eE,B5r),e(eE,HJ),e(HJ,I5r),e(eE,N5r),e(Me,q5r),e(Me,oE),e(oE,K8e),e(K8e,j5r),e(oE,D5r),e(oE,UJ),e(UJ,G5r),e(oE,O5r),e(Me,V5r),e(Me,rE),e(rE,Z8e),e(Z8e,X5r),e(rE,z5r),e(rE,JJ),e(JJ,Q5r),e(rE,W5r),e(kr,H5r),M(tE,kr,null),b(f,hze,u),b(f,pc,u),e(pc,aE),e(aE,eMe),M(sx,eMe,null),e(pc,U5r),e(pc,oMe),e(oMe,J5r),b(f,pze,u),b(f,ar,u),M(lx,ar,null),e(ar,Y5r),e(ar,_c),e(_c,K5r),e(_c,YJ),e(YJ,Z5r),e(_c,e0r),e(_c,KJ),e(KJ,o0r),e(_c,r0r),e(ar,t0r),e(ar,ix),e(ix,a0r),e(ix,rMe),e(rMe,n0r),e(ix,s0r),e(ar,l0r),e(ar,It),M(dx,It,null),e(It,i0r),e(It,tMe),e(tMe,d0r),e(It,c0r),e(It,uc),e(uc,f0r),e(uc,aMe),e(aMe,m0r),e(uc,g0r),e(uc,ZJ),e(ZJ,h0r),e(uc,p0r),e(It,_0r),M(nE,It,null),e(ar,u0r),e(ar,Sr),M(cx,Sr,null),e(Sr,b0r),e(Sr,nMe),e(nMe,v0r),e(Sr,F0r),e(Sr,cn),e(cn,T0r),e(cn,sMe),e(sMe,M0r),e(cn,E0r),e(cn,lMe),e(lMe,C0r),e(cn,w0r),e(cn,iMe),e(iMe,A0r),e(cn,L0r),e(Sr,y0r),e(Sr,Qe),e(Qe,sE),e(sE,dMe),e(dMe,x0r),e(sE,$0r),e(sE,eY),e(eY,k0r),e(sE,S0r),e(Qe,R0r),e(Qe,lE),e(lE,cMe),e(cMe,P0r),e(lE,B0r),e(lE,oY),e(oY,I0r),e(lE,N0r),e(Qe,q0r),e(Qe,Ys),e(Ys,fMe),e(fMe,j0r),e(Ys,D0r),e(Ys,rY),e(rY,G0r),e(Ys,O0r),e(Ys,tY),e(tY,V0r),e(Ys,X0r),e(Qe,z0r),e(Qe,iE),e(iE,mMe),e(mMe,Q0r),e(iE,W0r),e(iE,aY),e(aY,H0r),e(iE,U0r),e(Qe,J0r),e(Qe,dE),e(dE,gMe),e(gMe,Y0r),e(dE,K0r),e(dE,nY),e(nY,Z0r),e(dE,ewr),e(Qe,owr),e(Qe,cE),e(cE,hMe),e(hMe,rwr),e(cE,twr),e(cE,sY),e(sY,awr),e(cE,nwr),e(Qe,swr),e(Qe,fE),e(fE,pMe),e(pMe,lwr),e(fE,iwr),e(fE,lY),e(lY,dwr),e(fE,cwr),e(Sr,fwr),M(mE,Sr,null),b(f,_ze,u),b(f,bc,u),e(bc,gE),e(gE,_Me),M(fx,_Me,null),e(bc,mwr),e(bc,uMe),e(uMe,gwr),b(f,uze,u),b(f,nr,u),M(mx,nr,null),e(nr,hwr),e(nr,vc),e(vc,pwr),e(vc,iY),e(iY,_wr),e(vc,uwr),e(vc,dY),e(dY,bwr),e(vc,vwr),e(nr,Fwr),e(nr,gx),e(gx,Twr),e(gx,bMe),e(bMe,Mwr),e(gx,Ewr),e(nr,Cwr),e(nr,Nt),M(hx,Nt,null),e(Nt,wwr),e(Nt,vMe),e(vMe,Awr),e(Nt,Lwr),e(Nt,Fc),e(Fc,ywr),e(Fc,FMe),e(FMe,xwr),e(Fc,$wr),e(Fc,cY),e(cY,kwr),e(Fc,Swr),e(Nt,Rwr),M(hE,Nt,null),e(nr,Pwr),e(nr,Rr),M(px,Rr,null),e(Rr,Bwr),e(Rr,TMe),e(TMe,Iwr),e(Rr,Nwr),e(Rr,fn),e(fn,qwr),e(fn,MMe),e(MMe,jwr),e(fn,Dwr),e(fn,EMe),e(EMe,Gwr),e(fn,Owr),e(fn,CMe),e(CMe,Vwr),e(fn,Xwr),e(Rr,zwr),e(Rr,ie),e(ie,pE),e(pE,wMe),e(wMe,Qwr),e(pE,Wwr),e(pE,fY),e(fY,Hwr),e(pE,Uwr),e(ie,Jwr),e(ie,_E),e(_E,AMe),e(AMe,Ywr),e(_E,Kwr),e(_E,mY),e(mY,Zwr),e(_E,eAr),e(ie,oAr),e(ie,uE),e(uE,LMe),e(LMe,rAr),e(uE,tAr),e(uE,gY),e(gY,aAr),e(uE,nAr),e(ie,sAr),e(ie,bE),e(bE,yMe),e(yMe,lAr),e(bE,iAr),e(bE,hY),e(hY,dAr),e(bE,cAr),e(ie,fAr),e(ie,vE),e(vE,xMe),e(xMe,mAr),e(vE,gAr),e(vE,pY),e(pY,hAr),e(vE,pAr),e(ie,_Ar),e(ie,FE),e(FE,$Me),e($Me,uAr),e(FE,bAr),e(FE,_Y),e(_Y,vAr),e(FE,FAr),e(ie,TAr),e(ie,TE),e(TE,kMe),e(kMe,MAr),e(TE,EAr),e(TE,uY),e(uY,CAr),e(TE,wAr),e(ie,AAr),e(ie,ME),e(ME,SMe),e(SMe,LAr),e(ME,yAr),e(ME,bY),e(bY,xAr),e(ME,$Ar),e(ie,kAr),e(ie,EE),e(EE,RMe),e(RMe,SAr),e(EE,RAr),e(EE,vY),e(vY,PAr),e(EE,BAr),e(ie,IAr),e(ie,CE),e(CE,PMe),e(PMe,NAr),e(CE,qAr),e(CE,FY),e(FY,jAr),e(CE,DAr),e(ie,GAr),e(ie,wE),e(wE,BMe),e(BMe,OAr),e(wE,VAr),e(wE,TY),e(TY,XAr),e(wE,zAr),e(ie,QAr),e(ie,AE),e(AE,IMe),e(IMe,WAr),e(AE,HAr),e(AE,MY),e(MY,UAr),e(AE,JAr),e(ie,YAr),e(ie,LE),e(LE,NMe),e(NMe,KAr),e(LE,ZAr),e(LE,EY),e(EY,e6r),e(LE,o6r),e(ie,r6r),e(ie,yE),e(yE,qMe),e(qMe,t6r),e(yE,a6r),e(yE,CY),e(CY,n6r),e(yE,s6r),e(ie,l6r),e(ie,xE),e(xE,jMe),e(jMe,i6r),e(xE,d6r),e(xE,wY),e(wY,c6r),e(xE,f6r),e(ie,m6r),e(ie,$E),e($E,DMe),e(DMe,g6r),e($E,h6r),e($E,AY),e(AY,p6r),e($E,_6r),e(ie,u6r),e(ie,kE),e(kE,GMe),e(GMe,b6r),e(kE,v6r),e(kE,LY),e(LY,F6r),e(kE,T6r),e(ie,M6r),e(ie,SE),e(SE,OMe),e(OMe,E6r),e(SE,C6r),e(SE,yY),e(yY,w6r),e(SE,A6r),e(ie,L6r),e(ie,RE),e(RE,VMe),e(VMe,y6r),e(RE,x6r),e(RE,xY),e(xY,$6r),e(RE,k6r),e(ie,S6r),e(ie,PE),e(PE,XMe),e(XMe,R6r),e(PE,P6r),e(PE,$Y),e($Y,B6r),e(PE,I6r),e(Rr,N6r),M(BE,Rr,null),b(f,bze,u),b(f,Tc,u),e(Tc,IE),e(IE,zMe),M(_x,zMe,null),e(Tc,q6r),e(Tc,QMe),e(QMe,j6r),b(f,vze,u),b(f,sr,u),M(ux,sr,null),e(sr,D6r),e(sr,Mc),e(Mc,G6r),e(Mc,kY),e(kY,O6r),e(Mc,V6r),e(Mc,SY),e(SY,X6r),e(Mc,z6r),e(sr,Q6r),e(sr,bx),e(bx,W6r),e(bx,WMe),e(WMe,H6r),e(bx,U6r),e(sr,J6r),e(sr,qt),M(vx,qt,null),e(qt,Y6r),e(qt,HMe),e(HMe,K6r),e(qt,Z6r),e(qt,Ec),e(Ec,e7r),e(Ec,UMe),e(UMe,o7r),e(Ec,r7r),e(Ec,RY),e(RY,t7r),e(Ec,a7r),e(qt,n7r),M(NE,qt,null),e(sr,s7r),e(sr,Pr),M(Fx,Pr,null),e(Pr,l7r),e(Pr,JMe),e(JMe,i7r),e(Pr,d7r),e(Pr,mn),e(mn,c7r),e(mn,YMe),e(YMe,f7r),e(mn,m7r),e(mn,KMe),e(KMe,g7r),e(mn,h7r),e(mn,ZMe),e(ZMe,p7r),e(mn,_7r),e(Pr,u7r),e(Pr,ye),e(ye,qE),e(qE,e4e),e(e4e,b7r),e(qE,v7r),e(qE,PY),e(PY,F7r),e(qE,T7r),e(ye,M7r),e(ye,jE),e(jE,o4e),e(o4e,E7r),e(jE,C7r),e(jE,BY),e(BY,w7r),e(jE,A7r),e(ye,L7r),e(ye,DE),e(DE,r4e),e(r4e,y7r),e(DE,x7r),e(DE,IY),e(IY,$7r),e(DE,k7r),e(ye,S7r),e(ye,GE),e(GE,t4e),e(t4e,R7r),e(GE,P7r),e(GE,NY),e(NY,B7r),e(GE,I7r),e(ye,N7r),e(ye,OE),e(OE,a4e),e(a4e,q7r),e(OE,j7r),e(OE,qY),e(qY,D7r),e(OE,G7r),e(ye,O7r),e(ye,VE),e(VE,n4e),e(n4e,V7r),e(VE,X7r),e(VE,jY),e(jY,z7r),e(VE,Q7r),e(ye,W7r),e(ye,XE),e(XE,s4e),e(s4e,H7r),e(XE,U7r),e(XE,DY),e(DY,J7r),e(XE,Y7r),e(ye,K7r),e(ye,zE),e(zE,l4e),e(l4e,Z7r),e(zE,eLr),e(zE,GY),e(GY,oLr),e(zE,rLr),e(ye,tLr),e(ye,QE),e(QE,i4e),e(i4e,aLr),e(QE,nLr),e(QE,OY),e(OY,sLr),e(QE,lLr),e(ye,iLr),e(ye,WE),e(WE,d4e),e(d4e,dLr),e(WE,cLr),e(WE,VY),e(VY,fLr),e(WE,mLr),e(Pr,gLr),M(HE,Pr,null),b(f,Fze,u),b(f,Cc,u),e(Cc,UE),e(UE,c4e),M(Tx,c4e,null),e(Cc,hLr),e(Cc,f4e),e(f4e,pLr),b(f,Tze,u),b(f,lr,u),M(Mx,lr,null),e(lr,_Lr),e(lr,wc),e(wc,uLr),e(wc,XY),e(XY,bLr),e(wc,vLr),e(wc,zY),e(zY,FLr),e(wc,TLr),e(lr,MLr),e(lr,Ex),e(Ex,ELr),e(Ex,m4e),e(m4e,CLr),e(Ex,wLr),e(lr,ALr),e(lr,jt),M(Cx,jt,null),e(jt,LLr),e(jt,g4e),e(g4e,yLr),e(jt,xLr),e(jt,Ac),e(Ac,$Lr),e(Ac,h4e),e(h4e,kLr),e(Ac,SLr),e(Ac,QY),e(QY,RLr),e(Ac,PLr),e(jt,BLr),M(JE,jt,null),e(lr,ILr),e(lr,Br),M(wx,Br,null),e(Br,NLr),e(Br,p4e),e(p4e,qLr),e(Br,jLr),e(Br,gn),e(gn,DLr),e(gn,_4e),e(_4e,GLr),e(gn,OLr),e(gn,u4e),e(u4e,VLr),e(gn,XLr),e(gn,b4e),e(b4e,zLr),e(gn,QLr),e(Br,WLr),e(Br,te),e(te,YE),e(YE,v4e),e(v4e,HLr),e(YE,ULr),e(YE,WY),e(WY,JLr),e(YE,YLr),e(te,KLr),e(te,KE),e(KE,F4e),e(F4e,ZLr),e(KE,eyr),e(KE,HY),e(HY,oyr),e(KE,ryr),e(te,tyr),e(te,ZE),e(ZE,T4e),e(T4e,ayr),e(ZE,nyr),e(ZE,UY),e(UY,syr),e(ZE,lyr),e(te,iyr),e(te,eC),e(eC,M4e),e(M4e,dyr),e(eC,cyr),e(eC,JY),e(JY,fyr),e(eC,myr),e(te,gyr),e(te,oC),e(oC,E4e),e(E4e,hyr),e(oC,pyr),e(oC,YY),e(YY,_yr),e(oC,uyr),e(te,byr),e(te,rC),e(rC,C4e),e(C4e,vyr),e(rC,Fyr),e(rC,KY),e(KY,Tyr),e(rC,Myr),e(te,Eyr),e(te,tC),e(tC,w4e),e(w4e,Cyr),e(tC,wyr),e(tC,ZY),e(ZY,Ayr),e(tC,Lyr),e(te,yyr),e(te,aC),e(aC,A4e),e(A4e,xyr),e(aC,$yr),e(aC,eK),e(eK,kyr),e(aC,Syr),e(te,Ryr),e(te,nC),e(nC,L4e),e(L4e,Pyr),e(nC,Byr),e(nC,oK),e(oK,Iyr),e(nC,Nyr),e(te,qyr),e(te,sC),e(sC,y4e),e(y4e,jyr),e(sC,Dyr),e(sC,rK),e(rK,Gyr),e(sC,Oyr),e(te,Vyr),e(te,lC),e(lC,x4e),e(x4e,Xyr),e(lC,zyr),e(lC,tK),e(tK,Qyr),e(lC,Wyr),e(te,Hyr),e(te,iC),e(iC,$4e),e($4e,Uyr),e(iC,Jyr),e(iC,aK),e(aK,Yyr),e(iC,Kyr),e(te,Zyr),e(te,dC),e(dC,k4e),e(k4e,e9r),e(dC,o9r),e(dC,nK),e(nK,r9r),e(dC,t9r),e(te,a9r),e(te,cC),e(cC,S4e),e(S4e,n9r),e(cC,s9r),e(cC,sK),e(sK,l9r),e(cC,i9r),e(te,d9r),e(te,fC),e(fC,R4e),e(R4e,c9r),e(fC,f9r),e(fC,lK),e(lK,m9r),e(fC,g9r),e(te,h9r),e(te,mC),e(mC,P4e),e(P4e,p9r),e(mC,_9r),e(mC,iK),e(iK,u9r),e(mC,b9r),e(te,v9r),e(te,gC),e(gC,B4e),e(B4e,F9r),e(gC,T9r),e(gC,dK),e(dK,M9r),e(gC,E9r),e(te,C9r),e(te,hC),e(hC,I4e),e(I4e,w9r),e(hC,A9r),e(hC,cK),e(cK,L9r),e(hC,y9r),e(te,x9r),e(te,pC),e(pC,N4e),e(N4e,$9r),e(pC,k9r),e(pC,fK),e(fK,S9r),e(pC,R9r),e(te,P9r),e(te,_C),e(_C,q4e),e(q4e,B9r),e(_C,I9r),e(_C,mK),e(mK,N9r),e(_C,q9r),e(te,j9r),e(te,uC),e(uC,j4e),e(j4e,D9r),e(uC,G9r),e(uC,gK),e(gK,O9r),e(uC,V9r),e(te,X9r),e(te,bC),e(bC,D4e),e(D4e,z9r),e(bC,Q9r),e(bC,hK),e(hK,W9r),e(bC,H9r),e(te,U9r),e(te,vC),e(vC,G4e),e(G4e,J9r),e(vC,Y9r),e(vC,pK),e(pK,K9r),e(vC,Z9r),e(te,exr),e(te,FC),e(FC,O4e),e(O4e,oxr),e(FC,rxr),e(FC,_K),e(_K,txr),e(FC,axr),e(te,nxr),e(te,TC),e(TC,V4e),e(V4e,sxr),e(TC,lxr),e(TC,uK),e(uK,ixr),e(TC,dxr),e(te,cxr),e(te,MC),e(MC,X4e),e(X4e,fxr),e(MC,mxr),e(MC,bK),e(bK,gxr),e(MC,hxr),e(Br,pxr),M(EC,Br,null),b(f,Mze,u),b(f,Lc,u),e(Lc,CC),e(CC,z4e),M(Ax,z4e,null),e(Lc,_xr),e(Lc,Q4e),e(Q4e,uxr),b(f,Eze,u),b(f,ir,u),M(Lx,ir,null),e(ir,bxr),e(ir,yc),e(yc,vxr),e(yc,vK),e(vK,Fxr),e(yc,Txr),e(yc,FK),e(FK,Mxr),e(yc,Exr),e(ir,Cxr),e(ir,yx),e(yx,wxr),e(yx,W4e),e(W4e,Axr),e(yx,Lxr),e(ir,yxr),e(ir,Dt),M(xx,Dt,null),e(Dt,xxr),e(Dt,H4e),e(H4e,$xr),e(Dt,kxr),e(Dt,xc),e(xc,Sxr),e(xc,U4e),e(U4e,Rxr),e(xc,Pxr),e(xc,TK),e(TK,Bxr),e(xc,Ixr),e(Dt,Nxr),M(wC,Dt,null),e(ir,qxr),e(ir,Ir),M($x,Ir,null),e(Ir,jxr),e(Ir,J4e),e(J4e,Dxr),e(Ir,Gxr),e(Ir,hn),e(hn,Oxr),e(hn,Y4e),e(Y4e,Vxr),e(hn,Xxr),e(hn,K4e),e(K4e,zxr),e(hn,Qxr),e(hn,Z4e),e(Z4e,Wxr),e(hn,Hxr),e(Ir,Uxr),e(Ir,_e),e(_e,AC),e(AC,eEe),e(eEe,Jxr),e(AC,Yxr),e(AC,MK),e(MK,Kxr),e(AC,Zxr),e(_e,e$r),e(_e,LC),e(LC,oEe),e(oEe,o$r),e(LC,r$r),e(LC,EK),e(EK,t$r),e(LC,a$r),e(_e,n$r),e(_e,yC),e(yC,rEe),e(rEe,s$r),e(yC,l$r),e(yC,CK),e(CK,i$r),e(yC,d$r),e(_e,c$r),e(_e,xC),e(xC,tEe),e(tEe,f$r),e(xC,m$r),e(xC,wK),e(wK,g$r),e(xC,h$r),e(_e,p$r),e(_e,$C),e($C,aEe),e(aEe,_$r),e($C,u$r),e($C,AK),e(AK,b$r),e($C,v$r),e(_e,F$r),e(_e,kC),e(kC,nEe),e(nEe,T$r),e(kC,M$r),e(kC,LK),e(LK,E$r),e(kC,C$r),e(_e,w$r),e(_e,SC),e(SC,sEe),e(sEe,A$r),e(SC,L$r),e(SC,yK),e(yK,y$r),e(SC,x$r),e(_e,$$r),e(_e,RC),e(RC,lEe),e(lEe,k$r),e(RC,S$r),e(RC,xK),e(xK,R$r),e(RC,P$r),e(_e,B$r),e(_e,PC),e(PC,iEe),e(iEe,I$r),e(PC,N$r),e(PC,$K),e($K,q$r),e(PC,j$r),e(_e,D$r),e(_e,BC),e(BC,dEe),e(dEe,G$r),e(BC,O$r),e(BC,kK),e(kK,V$r),e(BC,X$r),e(_e,z$r),e(_e,IC),e(IC,cEe),e(cEe,Q$r),e(IC,W$r),e(IC,SK),e(SK,H$r),e(IC,U$r),e(_e,J$r),e(_e,NC),e(NC,fEe),e(fEe,Y$r),e(NC,K$r),e(NC,RK),e(RK,Z$r),e(NC,ekr),e(_e,okr),e(_e,qC),e(qC,mEe),e(mEe,rkr),e(qC,tkr),e(qC,PK),e(PK,akr),e(qC,nkr),e(_e,skr),e(_e,jC),e(jC,gEe),e(gEe,lkr),e(jC,ikr),e(jC,BK),e(BK,dkr),e(jC,ckr),e(_e,fkr),e(_e,DC),e(DC,hEe),e(hEe,mkr),e(DC,gkr),e(DC,IK),e(IK,hkr),e(DC,pkr),e(_e,_kr),e(_e,GC),e(GC,pEe),e(pEe,ukr),e(GC,bkr),e(GC,NK),e(NK,vkr),e(GC,Fkr),e(_e,Tkr),e(_e,OC),e(OC,_Ee),e(_Ee,Mkr),e(OC,Ekr),e(OC,qK),e(qK,Ckr),e(OC,wkr),e(Ir,Akr),M(VC,Ir,null),b(f,Cze,u),b(f,$c,u),e($c,XC),e(XC,uEe),M(kx,uEe,null),e($c,Lkr),e($c,bEe),e(bEe,ykr),b(f,wze,u),b(f,dr,u),M(Sx,dr,null),e(dr,xkr),e(dr,kc),e(kc,$kr),e(kc,jK),e(jK,kkr),e(kc,Skr),e(kc,DK),e(DK,Rkr),e(kc,Pkr),e(dr,Bkr),e(dr,Rx),e(Rx,Ikr),e(Rx,vEe),e(vEe,Nkr),e(Rx,qkr),e(dr,jkr),e(dr,Gt),M(Px,Gt,null),e(Gt,Dkr),e(Gt,FEe),e(FEe,Gkr),e(Gt,Okr),e(Gt,Sc),e(Sc,Vkr),e(Sc,TEe),e(TEe,Xkr),e(Sc,zkr),e(Sc,GK),e(GK,Qkr),e(Sc,Wkr),e(Gt,Hkr),M(zC,Gt,null),e(dr,Ukr),e(dr,Nr),M(Bx,Nr,null),e(Nr,Jkr),e(Nr,MEe),e(MEe,Ykr),e(Nr,Kkr),e(Nr,pn),e(pn,Zkr),e(pn,EEe),e(EEe,eSr),e(pn,oSr),e(pn,CEe),e(CEe,rSr),e(pn,tSr),e(pn,wEe),e(wEe,aSr),e(pn,nSr),e(Nr,sSr),e(Nr,Ix),e(Ix,QC),e(QC,AEe),e(AEe,lSr),e(QC,iSr),e(QC,OK),e(OK,dSr),e(QC,cSr),e(Ix,fSr),e(Ix,WC),e(WC,LEe),e(LEe,mSr),e(WC,gSr),e(WC,VK),e(VK,hSr),e(WC,pSr),e(Nr,_Sr),M(HC,Nr,null),b(f,Aze,u),b(f,Rc,u),e(Rc,UC),e(UC,yEe),M(Nx,yEe,null),e(Rc,uSr),e(Rc,xEe),e(xEe,bSr),b(f,Lze,u),b(f,cr,u),M(qx,cr,null),e(cr,vSr),e(cr,Pc),e(Pc,FSr),e(Pc,XK),e(XK,TSr),e(Pc,MSr),e(Pc,zK),e(zK,ESr),e(Pc,CSr),e(cr,wSr),e(cr,jx),e(jx,ASr),e(jx,$Ee),e($Ee,LSr),e(jx,ySr),e(cr,xSr),e(cr,Ot),M(Dx,Ot,null),e(Ot,$Sr),e(Ot,kEe),e(kEe,kSr),e(Ot,SSr),e(Ot,Bc),e(Bc,RSr),e(Bc,SEe),e(SEe,PSr),e(Bc,BSr),e(Bc,QK),e(QK,ISr),e(Bc,NSr),e(Ot,qSr),M(JC,Ot,null),e(cr,jSr),e(cr,qr),M(Gx,qr,null),e(qr,DSr),e(qr,REe),e(REe,GSr),e(qr,OSr),e(qr,_n),e(_n,VSr),e(_n,PEe),e(PEe,XSr),e(_n,zSr),e(_n,BEe),e(BEe,QSr),e(_n,WSr),e(_n,IEe),e(IEe,HSr),e(_n,USr),e(qr,JSr),e(qr,NEe),e(NEe,YC),e(YC,qEe),e(qEe,YSr),e(YC,KSr),e(YC,WK),e(WK,ZSr),e(YC,eRr),e(qr,oRr),M(KC,qr,null),b(f,yze,u),b(f,Ic,u),e(Ic,ZC),e(ZC,jEe),M(Ox,jEe,null),e(Ic,rRr),e(Ic,DEe),e(DEe,tRr),b(f,xze,u),b(f,fr,u),M(Vx,fr,null),e(fr,aRr),e(fr,Nc),e(Nc,nRr),e(Nc,HK),e(HK,sRr),e(Nc,lRr),e(Nc,UK),e(UK,iRr),e(Nc,dRr),e(fr,cRr),e(fr,Xx),e(Xx,fRr),e(Xx,GEe),e(GEe,mRr),e(Xx,gRr),e(fr,hRr),e(fr,Vt),M(zx,Vt,null),e(Vt,pRr),e(Vt,OEe),e(OEe,_Rr),e(Vt,uRr),e(Vt,qc),e(qc,bRr),e(qc,VEe),e(VEe,vRr),e(qc,FRr),e(qc,JK),e(JK,TRr),e(qc,MRr),e(Vt,ERr),M(e5,Vt,null),e(fr,CRr),e(fr,jr),M(Qx,jr,null),e(jr,wRr),e(jr,XEe),e(XEe,ARr),e(jr,LRr),e(jr,un),e(un,yRr),e(un,zEe),e(zEe,xRr),e(un,$Rr),e(un,QEe),e(QEe,kRr),e(un,SRr),e(un,WEe),e(WEe,RRr),e(un,PRr),e(jr,BRr),e(jr,de),e(de,o5),e(o5,HEe),e(HEe,IRr),e(o5,NRr),e(o5,YK),e(YK,qRr),e(o5,jRr),e(de,DRr),e(de,r5),e(r5,UEe),e(UEe,GRr),e(r5,ORr),e(r5,KK),e(KK,VRr),e(r5,XRr),e(de,zRr),e(de,t5),e(t5,JEe),e(JEe,QRr),e(t5,WRr),e(t5,ZK),e(ZK,HRr),e(t5,URr),e(de,JRr),e(de,a5),e(a5,YEe),e(YEe,YRr),e(a5,KRr),e(a5,eZ),e(eZ,ZRr),e(a5,ePr),e(de,oPr),e(de,n5),e(n5,KEe),e(KEe,rPr),e(n5,tPr),e(n5,oZ),e(oZ,aPr),e(n5,nPr),e(de,sPr),e(de,s5),e(s5,ZEe),e(ZEe,lPr),e(s5,iPr),e(s5,rZ),e(rZ,dPr),e(s5,cPr),e(de,fPr),e(de,l5),e(l5,eCe),e(eCe,mPr),e(l5,gPr),e(l5,tZ),e(tZ,hPr),e(l5,pPr),e(de,_Pr),e(de,i5),e(i5,oCe),e(oCe,uPr),e(i5,bPr),e(i5,aZ),e(aZ,vPr),e(i5,FPr),e(de,TPr),e(de,d5),e(d5,rCe),e(rCe,MPr),e(d5,EPr),e(d5,nZ),e(nZ,CPr),e(d5,wPr),e(de,APr),e(de,c5),e(c5,tCe),e(tCe,LPr),e(c5,yPr),e(c5,sZ),e(sZ,xPr),e(c5,$Pr),e(de,kPr),e(de,f5),e(f5,aCe),e(aCe,SPr),e(f5,RPr),e(f5,lZ),e(lZ,PPr),e(f5,BPr),e(de,IPr),e(de,m5),e(m5,nCe),e(nCe,NPr),e(m5,qPr),e(m5,iZ),e(iZ,jPr),e(m5,DPr),e(de,GPr),e(de,g5),e(g5,sCe),e(sCe,OPr),e(g5,VPr),e(g5,dZ),e(dZ,XPr),e(g5,zPr),e(de,QPr),e(de,h5),e(h5,lCe),e(lCe,WPr),e(h5,HPr),e(h5,cZ),e(cZ,UPr),e(h5,JPr),e(de,YPr),e(de,p5),e(p5,iCe),e(iCe,KPr),e(p5,ZPr),e(p5,fZ),e(fZ,eBr),e(p5,oBr),e(de,rBr),e(de,_5),e(_5,dCe),e(dCe,tBr),e(_5,aBr),e(_5,mZ),e(mZ,nBr),e(_5,sBr),e(de,lBr),e(de,u5),e(u5,cCe),e(cCe,iBr),e(u5,dBr),e(u5,gZ),e(gZ,cBr),e(u5,fBr),e(de,mBr),e(de,b5),e(b5,fCe),e(fCe,gBr),e(b5,hBr),e(b5,hZ),e(hZ,pBr),e(b5,_Br),e(de,uBr),e(de,v5),e(v5,mCe),e(mCe,bBr),e(v5,vBr),e(v5,pZ),e(pZ,FBr),e(v5,TBr),e(de,MBr),e(de,F5),e(F5,gCe),e(gCe,EBr),e(F5,CBr),e(F5,_Z),e(_Z,wBr),e(F5,ABr),e(jr,LBr),M(T5,jr,null),b(f,$ze,u),b(f,jc,u),e(jc,M5),e(M5,hCe),M(Wx,hCe,null),e(jc,yBr),e(jc,pCe),e(pCe,xBr),b(f,kze,u),b(f,mr,u),M(Hx,mr,null),e(mr,$Br),e(mr,Dc),e(Dc,kBr),e(Dc,uZ),e(uZ,SBr),e(Dc,RBr),e(Dc,bZ),e(bZ,PBr),e(Dc,BBr),e(mr,IBr),e(mr,Ux),e(Ux,NBr),e(Ux,_Ce),e(_Ce,qBr),e(Ux,jBr),e(mr,DBr),e(mr,Xt),M(Jx,Xt,null),e(Xt,GBr),e(Xt,uCe),e(uCe,OBr),e(Xt,VBr),e(Xt,Gc),e(Gc,XBr),e(Gc,bCe),e(bCe,zBr),e(Gc,QBr),e(Gc,vZ),e(vZ,WBr),e(Gc,HBr),e(Xt,UBr),M(E5,Xt,null),e(mr,JBr),e(mr,Dr),M(Yx,Dr,null),e(Dr,YBr),e(Dr,vCe),e(vCe,KBr),e(Dr,ZBr),e(Dr,bn),e(bn,eIr),e(bn,FCe),e(FCe,oIr),e(bn,rIr),e(bn,TCe),e(TCe,tIr),e(bn,aIr),e(bn,MCe),e(MCe,nIr),e(bn,sIr),e(Dr,lIr),e(Dr,ce),e(ce,C5),e(C5,ECe),e(ECe,iIr),e(C5,dIr),e(C5,FZ),e(FZ,cIr),e(C5,fIr),e(ce,mIr),e(ce,w5),e(w5,CCe),e(CCe,gIr),e(w5,hIr),e(w5,TZ),e(TZ,pIr),e(w5,_Ir),e(ce,uIr),e(ce,A5),e(A5,wCe),e(wCe,bIr),e(A5,vIr),e(A5,MZ),e(MZ,FIr),e(A5,TIr),e(ce,MIr),e(ce,L5),e(L5,ACe),e(ACe,EIr),e(L5,CIr),e(L5,EZ),e(EZ,wIr),e(L5,AIr),e(ce,LIr),e(ce,y5),e(y5,LCe),e(LCe,yIr),e(y5,xIr),e(y5,CZ),e(CZ,$Ir),e(y5,kIr),e(ce,SIr),e(ce,x5),e(x5,yCe),e(yCe,RIr),e(x5,PIr),e(x5,wZ),e(wZ,BIr),e(x5,IIr),e(ce,NIr),e(ce,$5),e($5,xCe),e(xCe,qIr),e($5,jIr),e($5,AZ),e(AZ,DIr),e($5,GIr),e(ce,OIr),e(ce,k5),e(k5,$Ce),e($Ce,VIr),e(k5,XIr),e(k5,LZ),e(LZ,zIr),e(k5,QIr),e(ce,WIr),e(ce,S5),e(S5,kCe),e(kCe,HIr),e(S5,UIr),e(S5,yZ),e(yZ,JIr),e(S5,YIr),e(ce,KIr),e(ce,R5),e(R5,SCe),e(SCe,ZIr),e(R5,eNr),e(R5,xZ),e(xZ,oNr),e(R5,rNr),e(ce,tNr),e(ce,P5),e(P5,RCe),e(RCe,aNr),e(P5,nNr),e(P5,$Z),e($Z,sNr),e(P5,lNr),e(ce,iNr),e(ce,B5),e(B5,PCe),e(PCe,dNr),e(B5,cNr),e(B5,kZ),e(kZ,fNr),e(B5,mNr),e(ce,gNr),e(ce,I5),e(I5,BCe),e(BCe,hNr),e(I5,pNr),e(I5,SZ),e(SZ,_Nr),e(I5,uNr),e(ce,bNr),e(ce,N5),e(N5,ICe),e(ICe,vNr),e(N5,FNr),e(N5,RZ),e(RZ,TNr),e(N5,MNr),e(ce,ENr),e(ce,q5),e(q5,NCe),e(NCe,CNr),e(q5,wNr),e(q5,PZ),e(PZ,ANr),e(q5,LNr),e(ce,yNr),e(ce,j5),e(j5,qCe),e(qCe,xNr),e(j5,$Nr),e(j5,BZ),e(BZ,kNr),e(j5,SNr),e(ce,RNr),e(ce,D5),e(D5,jCe),e(jCe,PNr),e(D5,BNr),e(D5,IZ),e(IZ,INr),e(D5,NNr),e(ce,qNr),e(ce,G5),e(G5,DCe),e(DCe,jNr),e(G5,DNr),e(G5,NZ),e(NZ,GNr),e(G5,ONr),e(ce,VNr),e(ce,O5),e(O5,GCe),e(GCe,XNr),e(O5,zNr),e(O5,qZ),e(qZ,QNr),e(O5,WNr),e(ce,HNr),e(ce,V5),e(V5,OCe),e(OCe,UNr),e(V5,JNr),e(V5,jZ),e(jZ,YNr),e(V5,KNr),e(Dr,ZNr),M(X5,Dr,null),b(f,Sze,u),b(f,Oc,u),e(Oc,z5),e(z5,VCe),M(Kx,VCe,null),e(Oc,eqr),e(Oc,XCe),e(XCe,oqr),b(f,Rze,u),b(f,gr,u),M(Zx,gr,null),e(gr,rqr),e(gr,Vc),e(Vc,tqr),e(Vc,DZ),e(DZ,aqr),e(Vc,nqr),e(Vc,GZ),e(GZ,sqr),e(Vc,lqr),e(gr,iqr),e(gr,e$),e(e$,dqr),e(e$,zCe),e(zCe,cqr),e(e$,fqr),e(gr,mqr),e(gr,zt),M(o$,zt,null),e(zt,gqr),e(zt,QCe),e(QCe,hqr),e(zt,pqr),e(zt,Xc),e(Xc,_qr),e(Xc,WCe),e(WCe,uqr),e(Xc,bqr),e(Xc,OZ),e(OZ,vqr),e(Xc,Fqr),e(zt,Tqr),M(Q5,zt,null),e(gr,Mqr),e(gr,Gr),M(r$,Gr,null),e(Gr,Eqr),e(Gr,HCe),e(HCe,Cqr),e(Gr,wqr),e(Gr,vn),e(vn,Aqr),e(vn,UCe),e(UCe,Lqr),e(vn,yqr),e(vn,JCe),e(JCe,xqr),e(vn,$qr),e(vn,YCe),e(YCe,kqr),e(vn,Sqr),e(Gr,Rqr),e(Gr,KCe),e(KCe,W5),e(W5,ZCe),e(ZCe,Pqr),e(W5,Bqr),e(W5,VZ),e(VZ,Iqr),e(W5,Nqr),e(Gr,qqr),M(H5,Gr,null),b(f,Pze,u),b(f,zc,u),e(zc,U5),e(U5,e5e),M(t$,e5e,null),e(zc,jqr),e(zc,o5e),e(o5e,Dqr),b(f,Bze,u),b(f,hr,u),M(a$,hr,null),e(hr,Gqr),e(hr,Qc),e(Qc,Oqr),e(Qc,XZ),e(XZ,Vqr),e(Qc,Xqr),e(Qc,zZ),e(zZ,zqr),e(Qc,Qqr),e(hr,Wqr),e(hr,n$),e(n$,Hqr),e(n$,r5e),e(r5e,Uqr),e(n$,Jqr),e(hr,Yqr),e(hr,Qt),M(s$,Qt,null),e(Qt,Kqr),e(Qt,t5e),e(t5e,Zqr),e(Qt,ejr),e(Qt,Wc),e(Wc,ojr),e(Wc,a5e),e(a5e,rjr),e(Wc,tjr),e(Wc,QZ),e(QZ,ajr),e(Wc,njr),e(Qt,sjr),M(J5,Qt,null),e(hr,ljr),e(hr,Or),M(l$,Or,null),e(Or,ijr),e(Or,n5e),e(n5e,djr),e(Or,cjr),e(Or,Fn),e(Fn,fjr),e(Fn,s5e),e(s5e,mjr),e(Fn,gjr),e(Fn,l5e),e(l5e,hjr),e(Fn,pjr),e(Fn,i5e),e(i5e,_jr),e(Fn,ujr),e(Or,bjr),e(Or,d5e),e(d5e,Y5),e(Y5,c5e),e(c5e,vjr),e(Y5,Fjr),e(Y5,WZ),e(WZ,Tjr),e(Y5,Mjr),e(Or,Ejr),M(K5,Or,null),b(f,Ize,u),b(f,Hc,u),e(Hc,Z5),e(Z5,f5e),M(i$,f5e,null),e(Hc,Cjr),e(Hc,m5e),e(m5e,wjr),b(f,Nze,u),b(f,pr,u),M(d$,pr,null),e(pr,Ajr),e(pr,Uc),e(Uc,Ljr),e(Uc,HZ),e(HZ,yjr),e(Uc,xjr),e(Uc,UZ),e(UZ,$jr),e(Uc,kjr),e(pr,Sjr),e(pr,c$),e(c$,Rjr),e(c$,g5e),e(g5e,Pjr),e(c$,Bjr),e(pr,Ijr),e(pr,Wt),M(f$,Wt,null),e(Wt,Njr),e(Wt,h5e),e(h5e,qjr),e(Wt,jjr),e(Wt,Jc),e(Jc,Djr),e(Jc,p5e),e(p5e,Gjr),e(Jc,Ojr),e(Jc,JZ),e(JZ,Vjr),e(Jc,Xjr),e(Wt,zjr),M(e0,Wt,null),e(pr,Qjr),e(pr,Vr),M(m$,Vr,null),e(Vr,Wjr),e(Vr,_5e),e(_5e,Hjr),e(Vr,Ujr),e(Vr,Tn),e(Tn,Jjr),e(Tn,u5e),e(u5e,Yjr),e(Tn,Kjr),e(Tn,b5e),e(b5e,Zjr),e(Tn,eDr),e(Tn,v5e),e(v5e,oDr),e(Tn,rDr),e(Vr,tDr),e(Vr,oe),e(oe,o0),e(o0,F5e),e(F5e,aDr),e(o0,nDr),e(o0,YZ),e(YZ,sDr),e(o0,lDr),e(oe,iDr),e(oe,r0),e(r0,T5e),e(T5e,dDr),e(r0,cDr),e(r0,KZ),e(KZ,fDr),e(r0,mDr),e(oe,gDr),e(oe,t0),e(t0,M5e),e(M5e,hDr),e(t0,pDr),e(t0,ZZ),e(ZZ,_Dr),e(t0,uDr),e(oe,bDr),e(oe,a0),e(a0,E5e),e(E5e,vDr),e(a0,FDr),e(a0,eee),e(eee,TDr),e(a0,MDr),e(oe,EDr),e(oe,n0),e(n0,C5e),e(C5e,CDr),e(n0,wDr),e(n0,oee),e(oee,ADr),e(n0,LDr),e(oe,yDr),e(oe,s0),e(s0,w5e),e(w5e,xDr),e(s0,$Dr),e(s0,ree),e(ree,kDr),e(s0,SDr),e(oe,RDr),e(oe,l0),e(l0,A5e),e(A5e,PDr),e(l0,BDr),e(l0,tee),e(tee,IDr),e(l0,NDr),e(oe,qDr),e(oe,i0),e(i0,L5e),e(L5e,jDr),e(i0,DDr),e(i0,aee),e(aee,GDr),e(i0,ODr),e(oe,VDr),e(oe,d0),e(d0,y5e),e(y5e,XDr),e(d0,zDr),e(d0,nee),e(nee,QDr),e(d0,WDr),e(oe,HDr),e(oe,c0),e(c0,x5e),e(x5e,UDr),e(c0,JDr),e(c0,see),e(see,YDr),e(c0,KDr),e(oe,ZDr),e(oe,f0),e(f0,$5e),e($5e,eGr),e(f0,oGr),e(f0,lee),e(lee,rGr),e(f0,tGr),e(oe,aGr),e(oe,m0),e(m0,k5e),e(k5e,nGr),e(m0,sGr),e(m0,iee),e(iee,lGr),e(m0,iGr),e(oe,dGr),e(oe,g0),e(g0,S5e),e(S5e,cGr),e(g0,fGr),e(g0,dee),e(dee,mGr),e(g0,gGr),e(oe,hGr),e(oe,h0),e(h0,R5e),e(R5e,pGr),e(h0,_Gr),e(h0,cee),e(cee,uGr),e(h0,bGr),e(oe,vGr),e(oe,p0),e(p0,P5e),e(P5e,FGr),e(p0,TGr),e(p0,fee),e(fee,MGr),e(p0,EGr),e(oe,CGr),e(oe,_0),e(_0,B5e),e(B5e,wGr),e(_0,AGr),e(_0,mee),e(mee,LGr),e(_0,yGr),e(oe,xGr),e(oe,u0),e(u0,I5e),e(I5e,$Gr),e(u0,kGr),e(u0,gee),e(gee,SGr),e(u0,RGr),e(oe,PGr),e(oe,b0),e(b0,N5e),e(N5e,BGr),e(b0,IGr),e(b0,hee),e(hee,NGr),e(b0,qGr),e(oe,jGr),e(oe,v0),e(v0,q5e),e(q5e,DGr),e(v0,GGr),e(v0,pee),e(pee,OGr),e(v0,VGr),e(oe,XGr),e(oe,F0),e(F0,j5e),e(j5e,zGr),e(F0,QGr),e(F0,_ee),e(_ee,WGr),e(F0,HGr),e(oe,UGr),e(oe,T0),e(T0,D5e),e(D5e,JGr),e(T0,YGr),e(T0,uee),e(uee,KGr),e(T0,ZGr),e(oe,eOr),e(oe,M0),e(M0,G5e),e(G5e,oOr),e(M0,rOr),e(M0,bee),e(bee,tOr),e(M0,aOr),e(oe,nOr),e(oe,E0),e(E0,O5e),e(O5e,sOr),e(E0,lOr),e(E0,vee),e(vee,iOr),e(E0,dOr),e(oe,cOr),e(oe,C0),e(C0,V5e),e(V5e,fOr),e(C0,mOr),e(C0,Fee),e(Fee,gOr),e(C0,hOr),e(oe,pOr),e(oe,w0),e(w0,X5e),e(X5e,_Or),e(w0,uOr),e(w0,Tee),e(Tee,bOr),e(w0,vOr),e(oe,FOr),e(oe,A0),e(A0,z5e),e(z5e,TOr),e(A0,MOr),e(A0,Mee),e(Mee,EOr),e(A0,COr),e(oe,wOr),e(oe,L0),e(L0,Q5e),e(Q5e,AOr),e(L0,LOr),e(L0,Eee),e(Eee,yOr),e(L0,xOr),e(Vr,$Or),M(y0,Vr,null),b(f,qze,u),b(f,Yc,u),e(Yc,x0),e(x0,W5e),M(g$,W5e,null),e(Yc,kOr),e(Yc,H5e),e(H5e,SOr),b(f,jze,u),b(f,_r,u),M(h$,_r,null),e(_r,ROr),e(_r,Kc),e(Kc,POr),e(Kc,Cee),e(Cee,BOr),e(Kc,IOr),e(Kc,wee),e(wee,NOr),e(Kc,qOr),e(_r,jOr),e(_r,p$),e(p$,DOr),e(p$,U5e),e(U5e,GOr),e(p$,OOr),e(_r,VOr),e(_r,Ht),M(_$,Ht,null),e(Ht,XOr),e(Ht,J5e),e(J5e,zOr),e(Ht,QOr),e(Ht,Zc),e(Zc,WOr),e(Zc,Y5e),e(Y5e,HOr),e(Zc,UOr),e(Zc,Aee),e(Aee,JOr),e(Zc,YOr),e(Ht,KOr),M($0,Ht,null),e(_r,ZOr),e(_r,Xr),M(u$,Xr,null),e(Xr,eVr),e(Xr,K5e),e(K5e,oVr),e(Xr,rVr),e(Xr,Mn),e(Mn,tVr),e(Mn,Z5e),e(Z5e,aVr),e(Mn,nVr),e(Mn,e0e),e(e0e,sVr),e(Mn,lVr),e(Mn,o0e),e(o0e,iVr),e(Mn,dVr),e(Xr,cVr),e(Xr,xe),e(xe,k0),e(k0,r0e),e(r0e,fVr),e(k0,mVr),e(k0,Lee),e(Lee,gVr),e(k0,hVr),e(xe,pVr),e(xe,S0),e(S0,t0e),e(t0e,_Vr),e(S0,uVr),e(S0,yee),e(yee,bVr),e(S0,vVr),e(xe,FVr),e(xe,R0),e(R0,a0e),e(a0e,TVr),e(R0,MVr),e(R0,xee),e(xee,EVr),e(R0,CVr),e(xe,wVr),e(xe,P0),e(P0,n0e),e(n0e,AVr),e(P0,LVr),e(P0,$ee),e($ee,yVr),e(P0,xVr),e(xe,$Vr),e(xe,B0),e(B0,s0e),e(s0e,kVr),e(B0,SVr),e(B0,kee),e(kee,RVr),e(B0,PVr),e(xe,BVr),e(xe,I0),e(I0,l0e),e(l0e,IVr),e(I0,NVr),e(I0,See),e(See,qVr),e(I0,jVr),e(xe,DVr),e(xe,N0),e(N0,i0e),e(i0e,GVr),e(N0,OVr),e(N0,Ree),e(Ree,VVr),e(N0,XVr),e(xe,zVr),e(xe,q0),e(q0,d0e),e(d0e,QVr),e(q0,WVr),e(q0,Pee),e(Pee,HVr),e(q0,UVr),e(xe,JVr),e(xe,j0),e(j0,c0e),e(c0e,YVr),e(j0,KVr),e(j0,Bee),e(Bee,ZVr),e(j0,eXr),e(xe,oXr),e(xe,D0),e(D0,f0e),e(f0e,rXr),e(D0,tXr),e(D0,Iee),e(Iee,aXr),e(D0,nXr),e(Xr,sXr),M(G0,Xr,null),b(f,Dze,u),b(f,ef,u),e(ef,O0),e(O0,m0e),M(b$,m0e,null),e(ef,lXr),e(ef,g0e),e(g0e,iXr),b(f,Gze,u),b(f,ur,u),M(v$,ur,null),e(ur,dXr),e(ur,of),e(of,cXr),e(of,Nee),e(Nee,fXr),e(of,mXr),e(of,qee),e(qee,gXr),e(of,hXr),e(ur,pXr),e(ur,F$),e(F$,_Xr),e(F$,h0e),e(h0e,uXr),e(F$,bXr),e(ur,vXr),e(ur,Ut),M(T$,Ut,null),e(Ut,FXr),e(Ut,p0e),e(p0e,TXr),e(Ut,MXr),e(Ut,rf),e(rf,EXr),e(rf,_0e),e(_0e,CXr),e(rf,wXr),e(rf,jee),e(jee,AXr),e(rf,LXr),e(Ut,yXr),M(V0,Ut,null),e(ur,xXr),e(ur,zr),M(M$,zr,null),e(zr,$Xr),e(zr,u0e),e(u0e,kXr),e(zr,SXr),e(zr,En),e(En,RXr),e(En,b0e),e(b0e,PXr),e(En,BXr),e(En,v0e),e(v0e,IXr),e(En,NXr),e(En,F0e),e(F0e,qXr),e(En,jXr),e(zr,DXr),e(zr,Ee),e(Ee,X0),e(X0,T0e),e(T0e,GXr),e(X0,OXr),e(X0,Dee),e(Dee,VXr),e(X0,XXr),e(Ee,zXr),e(Ee,z0),e(z0,M0e),e(M0e,QXr),e(z0,WXr),e(z0,Gee),e(Gee,HXr),e(z0,UXr),e(Ee,JXr),e(Ee,Q0),e(Q0,E0e),e(E0e,YXr),e(Q0,KXr),e(Q0,Oee),e(Oee,ZXr),e(Q0,ezr),e(Ee,ozr),e(Ee,W0),e(W0,C0e),e(C0e,rzr),e(W0,tzr),e(W0,Vee),e(Vee,azr),e(W0,nzr),e(Ee,szr),e(Ee,H0),e(H0,w0e),e(w0e,lzr),e(H0,izr),e(H0,Xee),e(Xee,dzr),e(H0,czr),e(Ee,fzr),e(Ee,U0),e(U0,A0e),e(A0e,mzr),e(U0,gzr),e(U0,zee),e(zee,hzr),e(U0,pzr),e(Ee,_zr),e(Ee,J0),e(J0,L0e),e(L0e,uzr),e(J0,bzr),e(J0,Qee),e(Qee,vzr),e(J0,Fzr),e(Ee,Tzr),e(Ee,Y0),e(Y0,y0e),e(y0e,Mzr),e(Y0,Ezr),e(Y0,Wee),e(Wee,Czr),e(Y0,wzr),e(Ee,Azr),e(Ee,K0),e(K0,x0e),e(x0e,Lzr),e(K0,yzr),e(K0,Hee),e(Hee,xzr),e(K0,$zr),e(Ee,kzr),e(Ee,Z0),e(Z0,$0e),e($0e,Szr),e(Z0,Rzr),e(Z0,Uee),e(Uee,Pzr),e(Z0,Bzr),e(Ee,Izr),e(Ee,ew),e(ew,k0e),e(k0e,Nzr),e(ew,qzr),e(ew,Jee),e(Jee,jzr),e(ew,Dzr),e(Ee,Gzr),e(Ee,ow),e(ow,S0e),e(S0e,Ozr),e(ow,Vzr),e(ow,Yee),e(Yee,Xzr),e(ow,zzr),e(Ee,Qzr),e(Ee,rw),e(rw,R0e),e(R0e,Wzr),e(rw,Hzr),e(rw,Kee),e(Kee,Uzr),e(rw,Jzr),e(zr,Yzr),M(tw,zr,null),b(f,Oze,u),b(f,tf,u),e(tf,aw),e(aw,P0e),M(E$,P0e,null),e(tf,Kzr),e(tf,B0e),e(B0e,Zzr),b(f,Vze,u),b(f,br,u),M(C$,br,null),e(br,eQr),e(br,af),e(af,oQr),e(af,Zee),e(Zee,rQr),e(af,tQr),e(af,eoe),e(eoe,aQr),e(af,nQr),e(br,sQr),e(br,w$),e(w$,lQr),e(w$,I0e),e(I0e,iQr),e(w$,dQr),e(br,cQr),e(br,Jt),M(A$,Jt,null),e(Jt,fQr),e(Jt,N0e),e(N0e,mQr),e(Jt,gQr),e(Jt,nf),e(nf,hQr),e(nf,q0e),e(q0e,pQr),e(nf,_Qr),e(nf,ooe),e(ooe,uQr),e(nf,bQr),e(Jt,vQr),M(nw,Jt,null),e(br,FQr),e(br,Qr),M(L$,Qr,null),e(Qr,TQr),e(Qr,j0e),e(j0e,MQr),e(Qr,EQr),e(Qr,Cn),e(Cn,CQr),e(Cn,D0e),e(D0e,wQr),e(Cn,AQr),e(Cn,G0e),e(G0e,LQr),e(Cn,yQr),e(Cn,O0e),e(O0e,xQr),e(Cn,$Qr),e(Qr,kQr),e(Qr,$e),e($e,sw),e(sw,V0e),e(V0e,SQr),e(sw,RQr),e(sw,roe),e(roe,PQr),e(sw,BQr),e($e,IQr),e($e,lw),e(lw,X0e),e(X0e,NQr),e(lw,qQr),e(lw,toe),e(toe,jQr),e(lw,DQr),e($e,GQr),e($e,iw),e(iw,z0e),e(z0e,OQr),e(iw,VQr),e(iw,aoe),e(aoe,XQr),e(iw,zQr),e($e,QQr),e($e,dw),e(dw,Q0e),e(Q0e,WQr),e(dw,HQr),e(dw,noe),e(noe,UQr),e(dw,JQr),e($e,YQr),e($e,cw),e(cw,W0e),e(W0e,KQr),e(cw,ZQr),e(cw,soe),e(soe,eWr),e(cw,oWr),e($e,rWr),e($e,fw),e(fw,H0e),e(H0e,tWr),e(fw,aWr),e(fw,loe),e(loe,nWr),e(fw,sWr),e($e,lWr),e($e,mw),e(mw,U0e),e(U0e,iWr),e(mw,dWr),e(mw,ioe),e(ioe,cWr),e(mw,fWr),e($e,mWr),e($e,gw),e(gw,J0e),e(J0e,gWr),e(gw,hWr),e(gw,doe),e(doe,pWr),e(gw,_Wr),e($e,uWr),e($e,hw),e(hw,Y0e),e(Y0e,bWr),e(hw,vWr),e(hw,coe),e(coe,FWr),e(hw,TWr),e($e,MWr),e($e,pw),e(pw,K0e),e(K0e,EWr),e(pw,CWr),e(pw,foe),e(foe,wWr),e(pw,AWr),e(Qr,LWr),M(_w,Qr,null),b(f,Xze,u),b(f,sf,u),e(sf,uw),e(uw,Z0e),M(y$,Z0e,null),e(sf,yWr),e(sf,ewe),e(ewe,xWr),b(f,zze,u),b(f,vr,u),M(x$,vr,null),e(vr,$Wr),e(vr,lf),e(lf,kWr),e(lf,moe),e(moe,SWr),e(lf,RWr),e(lf,goe),e(goe,PWr),e(lf,BWr),e(vr,IWr),e(vr,$$),e($$,NWr),e($$,owe),e(owe,qWr),e($$,jWr),e(vr,DWr),e(vr,Yt),M(k$,Yt,null),e(Yt,GWr),e(Yt,rwe),e(rwe,OWr),e(Yt,VWr),e(Yt,df),e(df,XWr),e(df,twe),e(twe,zWr),e(df,QWr),e(df,hoe),e(hoe,WWr),e(df,HWr),e(Yt,UWr),M(bw,Yt,null),e(vr,JWr),e(vr,Wr),M(S$,Wr,null),e(Wr,YWr),e(Wr,awe),e(awe,KWr),e(Wr,ZWr),e(Wr,wn),e(wn,eHr),e(wn,nwe),e(nwe,oHr),e(wn,rHr),e(wn,swe),e(swe,tHr),e(wn,aHr),e(wn,lwe),e(lwe,nHr),e(wn,sHr),e(Wr,lHr),e(Wr,ke),e(ke,vw),e(vw,iwe),e(iwe,iHr),e(vw,dHr),e(vw,poe),e(poe,cHr),e(vw,fHr),e(ke,mHr),e(ke,Fw),e(Fw,dwe),e(dwe,gHr),e(Fw,hHr),e(Fw,_oe),e(_oe,pHr),e(Fw,_Hr),e(ke,uHr),e(ke,Tw),e(Tw,cwe),e(cwe,bHr),e(Tw,vHr),e(Tw,uoe),e(uoe,FHr),e(Tw,THr),e(ke,MHr),e(ke,Mw),e(Mw,fwe),e(fwe,EHr),e(Mw,CHr),e(Mw,boe),e(boe,wHr),e(Mw,AHr),e(ke,LHr),e(ke,Ew),e(Ew,mwe),e(mwe,yHr),e(Ew,xHr),e(Ew,voe),e(voe,$Hr),e(Ew,kHr),e(ke,SHr),e(ke,Cw),e(Cw,gwe),e(gwe,RHr),e(Cw,PHr),e(Cw,Foe),e(Foe,BHr),e(Cw,IHr),e(ke,NHr),e(ke,ww),e(ww,hwe),e(hwe,qHr),e(ww,jHr),e(ww,Toe),e(Toe,DHr),e(ww,GHr),e(ke,OHr),e(ke,Aw),e(Aw,pwe),e(pwe,VHr),e(Aw,XHr),e(Aw,Moe),e(Moe,zHr),e(Aw,QHr),e(ke,WHr),e(ke,Lw),e(Lw,_we),e(_we,HHr),e(Lw,UHr),e(Lw,Eoe),e(Eoe,JHr),e(Lw,YHr),e(ke,KHr),e(ke,yw),e(yw,uwe),e(uwe,ZHr),e(yw,eUr),e(yw,Coe),e(Coe,oUr),e(yw,rUr),e(Wr,tUr),M(xw,Wr,null),b(f,Qze,u),b(f,cf,u),e(cf,$w),e($w,bwe),M(R$,bwe,null),e(cf,aUr),e(cf,vwe),e(vwe,nUr),b(f,Wze,u),b(f,Fr,u),M(P$,Fr,null),e(Fr,sUr),e(Fr,ff),e(ff,lUr),e(ff,woe),e(woe,iUr),e(ff,dUr),e(ff,Aoe),e(Aoe,cUr),e(ff,fUr),e(Fr,mUr),e(Fr,B$),e(B$,gUr),e(B$,Fwe),e(Fwe,hUr),e(B$,pUr),e(Fr,_Ur),e(Fr,Kt),M(I$,Kt,null),e(Kt,uUr),e(Kt,Twe),e(Twe,bUr),e(Kt,vUr),e(Kt,mf),e(mf,FUr),e(mf,Mwe),e(Mwe,TUr),e(mf,MUr),e(mf,Loe),e(Loe,EUr),e(mf,CUr),e(Kt,wUr),M(kw,Kt,null),e(Fr,AUr),e(Fr,Hr),M(N$,Hr,null),e(Hr,LUr),e(Hr,Ewe),e(Ewe,yUr),e(Hr,xUr),e(Hr,An),e(An,$Ur),e(An,Cwe),e(Cwe,kUr),e(An,SUr),e(An,wwe),e(wwe,RUr),e(An,PUr),e(An,Awe),e(Awe,BUr),e(An,IUr),e(Hr,NUr),e(Hr,Se),e(Se,Sw),e(Sw,Lwe),e(Lwe,qUr),e(Sw,jUr),e(Sw,yoe),e(yoe,DUr),e(Sw,GUr),e(Se,OUr),e(Se,Rw),e(Rw,ywe),e(ywe,VUr),e(Rw,XUr),e(Rw,xoe),e(xoe,zUr),e(Rw,QUr),e(Se,WUr),e(Se,Pw),e(Pw,xwe),e(xwe,HUr),e(Pw,UUr),e(Pw,$oe),e($oe,JUr),e(Pw,YUr),e(Se,KUr),e(Se,Bw),e(Bw,$we),e($we,ZUr),e(Bw,eJr),e(Bw,koe),e(koe,oJr),e(Bw,rJr),e(Se,tJr),e(Se,Iw),e(Iw,kwe),e(kwe,aJr),e(Iw,nJr),e(Iw,Soe),e(Soe,sJr),e(Iw,lJr),e(Se,iJr),e(Se,Nw),e(Nw,Swe),e(Swe,dJr),e(Nw,cJr),e(Nw,Roe),e(Roe,fJr),e(Nw,mJr),e(Se,gJr),e(Se,qw),e(qw,Rwe),e(Rwe,hJr),e(qw,pJr),e(qw,Poe),e(Poe,_Jr),e(qw,uJr),e(Se,bJr),e(Se,jw),e(jw,Pwe),e(Pwe,vJr),e(jw,FJr),e(jw,Boe),e(Boe,TJr),e(jw,MJr),e(Se,EJr),e(Se,Dw),e(Dw,Bwe),e(Bwe,CJr),e(Dw,wJr),e(Dw,Ioe),e(Ioe,AJr),e(Dw,LJr),e(Se,yJr),e(Se,Gw),e(Gw,Iwe),e(Iwe,xJr),e(Gw,$Jr),e(Gw,Noe),e(Noe,kJr),e(Gw,SJr),e(Hr,RJr),M(Ow,Hr,null),b(f,Hze,u),b(f,gf,u),e(gf,Vw),e(Vw,Nwe),M(q$,Nwe,null),e(gf,PJr),e(gf,qwe),e(qwe,BJr),b(f,Uze,u),b(f,Tr,u),M(j$,Tr,null),e(Tr,IJr),e(Tr,hf),e(hf,NJr),e(hf,qoe),e(qoe,qJr),e(hf,jJr),e(hf,joe),e(joe,DJr),e(hf,GJr),e(Tr,OJr),e(Tr,D$),e(D$,VJr),e(D$,jwe),e(jwe,XJr),e(D$,zJr),e(Tr,QJr),e(Tr,Zt),M(G$,Zt,null),e(Zt,WJr),e(Zt,Dwe),e(Dwe,HJr),e(Zt,UJr),e(Zt,pf),e(pf,JJr),e(pf,Gwe),e(Gwe,YJr),e(pf,KJr),e(pf,Doe),e(Doe,ZJr),e(pf,eYr),e(Zt,oYr),M(Xw,Zt,null),e(Tr,rYr),e(Tr,Ur),M(O$,Ur,null),e(Ur,tYr),e(Ur,Owe),e(Owe,aYr),e(Ur,nYr),e(Ur,Ln),e(Ln,sYr),e(Ln,Vwe),e(Vwe,lYr),e(Ln,iYr),e(Ln,Xwe),e(Xwe,dYr),e(Ln,cYr),e(Ln,zwe),e(zwe,fYr),e(Ln,mYr),e(Ur,gYr),e(Ur,Re),e(Re,zw),e(zw,Qwe),e(Qwe,hYr),e(zw,pYr),e(zw,Goe),e(Goe,_Yr),e(zw,uYr),e(Re,bYr),e(Re,Qw),e(Qw,Wwe),e(Wwe,vYr),e(Qw,FYr),e(Qw,Ooe),e(Ooe,TYr),e(Qw,MYr),e(Re,EYr),e(Re,Ww),e(Ww,Hwe),e(Hwe,CYr),e(Ww,wYr),e(Ww,Voe),e(Voe,AYr),e(Ww,LYr),e(Re,yYr),e(Re,Hw),e(Hw,Uwe),e(Uwe,xYr),e(Hw,$Yr),e(Hw,Xoe),e(Xoe,kYr),e(Hw,SYr),e(Re,RYr),e(Re,Uw),e(Uw,Jwe),e(Jwe,PYr),e(Uw,BYr),e(Uw,zoe),e(zoe,IYr),e(Uw,NYr),e(Re,qYr),e(Re,Jw),e(Jw,Ywe),e(Ywe,jYr),e(Jw,DYr),e(Jw,Qoe),e(Qoe,GYr),e(Jw,OYr),e(Re,VYr),e(Re,Yw),e(Yw,Kwe),e(Kwe,XYr),e(Yw,zYr),e(Yw,Woe),e(Woe,QYr),e(Yw,WYr),e(Re,HYr),e(Re,Kw),e(Kw,Zwe),e(Zwe,UYr),e(Kw,JYr),e(Kw,Hoe),e(Hoe,YYr),e(Kw,KYr),e(Re,ZYr),e(Re,Zw),e(Zw,eAe),e(eAe,eKr),e(Zw,oKr),e(Zw,Uoe),e(Uoe,rKr),e(Zw,tKr),e(Re,aKr),e(Re,eA),e(eA,oAe),e(oAe,nKr),e(eA,sKr),e(eA,Joe),e(Joe,lKr),e(eA,iKr),e(Ur,dKr),M(oA,Ur,null),b(f,Jze,u),b(f,_f,u),e(_f,rA),e(rA,rAe),M(V$,rAe,null),e(_f,cKr),e(_f,tAe),e(tAe,fKr),b(f,Yze,u),b(f,Mr,u),M(X$,Mr,null),e(Mr,mKr),e(Mr,uf),e(uf,gKr),e(uf,Yoe),e(Yoe,hKr),e(uf,pKr),e(uf,Koe),e(Koe,_Kr),e(uf,uKr),e(Mr,bKr),e(Mr,z$),e(z$,vKr),e(z$,aAe),e(aAe,FKr),e(z$,TKr),e(Mr,MKr),e(Mr,ea),M(Q$,ea,null),e(ea,EKr),e(ea,nAe),e(nAe,CKr),e(ea,wKr),e(ea,bf),e(bf,AKr),e(bf,sAe),e(sAe,LKr),e(bf,yKr),e(bf,Zoe),e(Zoe,xKr),e(bf,$Kr),e(ea,kKr),M(tA,ea,null),e(Mr,SKr),e(Mr,Jr),M(W$,Jr,null),e(Jr,RKr),e(Jr,lAe),e(lAe,PKr),e(Jr,BKr),e(Jr,yn),e(yn,IKr),e(yn,iAe),e(iAe,NKr),e(yn,qKr),e(yn,dAe),e(dAe,jKr),e(yn,DKr),e(yn,cAe),e(cAe,GKr),e(yn,OKr),e(Jr,VKr),e(Jr,Ve),e(Ve,aA),e(aA,fAe),e(fAe,XKr),e(aA,zKr),e(aA,ere),e(ere,QKr),e(aA,WKr),e(Ve,HKr),e(Ve,nA),e(nA,mAe),e(mAe,UKr),e(nA,JKr),e(nA,ore),e(ore,YKr),e(nA,KKr),e(Ve,ZKr),e(Ve,sA),e(sA,gAe),e(gAe,eZr),e(sA,oZr),e(sA,rre),e(rre,rZr),e(sA,tZr),e(Ve,aZr),e(Ve,lA),e(lA,hAe),e(hAe,nZr),e(lA,sZr),e(lA,tre),e(tre,lZr),e(lA,iZr),e(Ve,dZr),e(Ve,iA),e(iA,pAe),e(pAe,cZr),e(iA,fZr),e(iA,are),e(are,mZr),e(iA,gZr),e(Ve,hZr),e(Ve,dA),e(dA,_Ae),e(_Ae,pZr),e(dA,_Zr),e(dA,nre),e(nre,uZr),e(dA,bZr),e(Ve,vZr),e(Ve,cA),e(cA,uAe),e(uAe,FZr),e(cA,TZr),e(cA,sre),e(sre,MZr),e(cA,EZr),e(Ve,CZr),e(Ve,fA),e(fA,bAe),e(bAe,wZr),e(fA,AZr),e(fA,lre),e(lre,LZr),e(fA,yZr),e(Jr,xZr),M(mA,Jr,null),b(f,Kze,u),b(f,vf,u),e(vf,gA),e(gA,vAe),M(H$,vAe,null),e(vf,$Zr),e(vf,FAe),e(FAe,kZr),b(f,Zze,u),b(f,Er,u),M(U$,Er,null),e(Er,SZr),e(Er,Ff),e(Ff,RZr),e(Ff,ire),e(ire,PZr),e(Ff,BZr),e(Ff,dre),e(dre,IZr),e(Ff,NZr),e(Er,qZr),e(Er,J$),e(J$,jZr),e(J$,TAe),e(TAe,DZr),e(J$,GZr),e(Er,OZr),e(Er,oa),M(Y$,oa,null),e(oa,VZr),e(oa,MAe),e(MAe,XZr),e(oa,zZr),e(oa,Tf),e(Tf,QZr),e(Tf,EAe),e(EAe,WZr),e(Tf,HZr),e(Tf,cre),e(cre,UZr),e(Tf,JZr),e(oa,YZr),M(hA,oa,null),e(Er,KZr),e(Er,Yr),M(K$,Yr,null),e(Yr,ZZr),e(Yr,CAe),e(CAe,eet),e(Yr,oet),e(Yr,xn),e(xn,ret),e(xn,wAe),e(wAe,tet),e(xn,aet),e(xn,AAe),e(AAe,net),e(xn,set),e(xn,LAe),e(LAe,iet),e(xn,det),e(Yr,cet),e(Yr,Xe),e(Xe,pA),e(pA,yAe),e(yAe,fet),e(pA,met),e(pA,fre),e(fre,get),e(pA,het),e(Xe,pet),e(Xe,_A),e(_A,xAe),e(xAe,_et),e(_A,uet),e(_A,mre),e(mre,bet),e(_A,vet),e(Xe,Fet),e(Xe,uA),e(uA,$Ae),e($Ae,Tet),e(uA,Met),e(uA,gre),e(gre,Eet),e(uA,Cet),e(Xe,wet),e(Xe,bA),e(bA,kAe),e(kAe,Aet),e(bA,Let),e(bA,hre),e(hre,yet),e(bA,xet),e(Xe,$et),e(Xe,vA),e(vA,SAe),e(SAe,ket),e(vA,Set),e(vA,pre),e(pre,Ret),e(vA,Pet),e(Xe,Bet),e(Xe,FA),e(FA,RAe),e(RAe,Iet),e(FA,Net),e(FA,_re),e(_re,qet),e(FA,jet),e(Xe,Det),e(Xe,TA),e(TA,PAe),e(PAe,Get),e(TA,Oet),e(TA,ure),e(ure,Vet),e(TA,Xet),e(Xe,zet),e(Xe,MA),e(MA,BAe),e(BAe,Qet),e(MA,Wet),e(MA,bre),e(bre,Het),e(MA,Uet),e(Yr,Jet),M(EA,Yr,null),b(f,eQe,u),b(f,Mf,u),e(Mf,CA),e(CA,IAe),M(Z$,IAe,null),e(Mf,Yet),e(Mf,NAe),e(NAe,Ket),b(f,oQe,u),b(f,Cr,u),M(ek,Cr,null),e(Cr,Zet),e(Cr,Ef),e(Ef,eot),e(Ef,vre),e(vre,oot),e(Ef,rot),e(Ef,Fre),e(Fre,tot),e(Ef,aot),e(Cr,not),e(Cr,ok),e(ok,sot),e(ok,qAe),e(qAe,lot),e(ok,iot),e(Cr,dot),e(Cr,ra),M(rk,ra,null),e(ra,cot),e(ra,jAe),e(jAe,fot),e(ra,mot),e(ra,Cf),e(Cf,got),e(Cf,DAe),e(DAe,hot),e(Cf,pot),e(Cf,Tre),e(Tre,_ot),e(Cf,uot),e(ra,bot),M(wA,ra,null),e(Cr,vot),e(Cr,Kr),M(tk,Kr,null),e(Kr,Fot),e(Kr,GAe),e(GAe,Tot),e(Kr,Mot),e(Kr,$n),e($n,Eot),e($n,OAe),e(OAe,Cot),e($n,wot),e($n,VAe),e(VAe,Aot),e($n,Lot),e($n,XAe),e(XAe,yot),e($n,xot),e(Kr,$ot),e(Kr,zAe),e(zAe,AA),e(AA,QAe),e(QAe,kot),e(AA,Sot),e(AA,Mre),e(Mre,Rot),e(AA,Pot),e(Kr,Bot),M(LA,Kr,null),b(f,rQe,u),b(f,wf,u),e(wf,yA),e(yA,WAe),M(ak,WAe,null),e(wf,Iot),e(wf,HAe),e(HAe,Not),b(f,tQe,u),b(f,wr,u),M(nk,wr,null),e(wr,qot),e(wr,Af),e(Af,jot),e(Af,Ere),e(Ere,Dot),e(Af,Got),e(Af,Cre),e(Cre,Oot),e(Af,Vot),e(wr,Xot),e(wr,sk),e(sk,zot),e(sk,UAe),e(UAe,Qot),e(sk,Wot),e(wr,Hot),e(wr,ta),M(lk,ta,null),e(ta,Uot),e(ta,JAe),e(JAe,Jot),e(ta,Yot),e(ta,Lf),e(Lf,Kot),e(Lf,YAe),e(YAe,Zot),e(Lf,ert),e(Lf,wre),e(wre,ort),e(Lf,rrt),e(ta,trt),M(xA,ta,null),e(wr,art),e(wr,Zr),M(ik,Zr,null),e(Zr,nrt),e(Zr,KAe),e(KAe,srt),e(Zr,lrt),e(Zr,kn),e(kn,irt),e(kn,ZAe),e(ZAe,drt),e(kn,crt),e(kn,e6e),e(e6e,frt),e(kn,mrt),e(kn,o6e),e(o6e,grt),e(kn,hrt),e(Zr,prt),e(Zr,dk),e(dk,$A),e($A,r6e),e(r6e,_rt),e($A,urt),e($A,Are),e(Are,brt),e($A,vrt),e(dk,Frt),e(dk,kA),e(kA,t6e),e(t6e,Trt),e(kA,Mrt),e(kA,Lre),e(Lre,Ert),e(kA,Crt),e(Zr,wrt),M(SA,Zr,null),b(f,aQe,u),b(f,yf,u),e(yf,RA),e(RA,a6e),M(ck,a6e,null),e(yf,Art),e(yf,n6e),e(n6e,Lrt),b(f,nQe,u),b(f,Ar,u),M(fk,Ar,null),e(Ar,yrt),e(Ar,xf),e(xf,xrt),e(xf,yre),e(yre,$rt),e(xf,krt),e(xf,xre),e(xre,Srt),e(xf,Rrt),e(Ar,Prt),e(Ar,mk),e(mk,Brt),e(mk,s6e),e(s6e,Irt),e(mk,Nrt),e(Ar,qrt),e(Ar,aa),M(gk,aa,null),e(aa,jrt),e(aa,l6e),e(l6e,Drt),e(aa,Grt),e(aa,$f),e($f,Ort),e($f,i6e),e(i6e,Vrt),e($f,Xrt),e($f,$re),e($re,zrt),e($f,Qrt),e(aa,Wrt),M(PA,aa,null),e(Ar,Hrt),e(Ar,et),M(hk,et,null),e(et,Urt),e(et,d6e),e(d6e,Jrt),e(et,Yrt),e(et,Sn),e(Sn,Krt),e(Sn,c6e),e(c6e,Zrt),e(Sn,ett),e(Sn,f6e),e(f6e,ott),e(Sn,rtt),e(Sn,m6e),e(m6e,ttt),e(Sn,att),e(et,ntt),e(et,g6e),e(g6e,BA),e(BA,h6e),e(h6e,stt),e(BA,ltt),e(BA,kre),e(kre,itt),e(BA,dtt),e(et,ctt),M(IA,et,null),sQe=!0},p(f,[u]){const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),jf.$set(pk);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),Yg.$set(p6e);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),Rh.$set(_6e);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),_p.$set(u6e);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),up.$set(_k);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),qp.$set(b6e);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),jp.$set(Rn);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),Op.$set(v6e);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),Qu.$set(F6e);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),Hu.$set(T6e);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),G1.$set(uk);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),V1.$set(M6e);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),k2.$set(bk);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),R2.$set(E6e);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),vb.$set(vk);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),Tb.$set(C6e);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),Gb.$set(w6e);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),Vb.$set(A6e);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),O3.$set(kf);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),X3.$set(L6e);const y6e={};u&2&&(y6e.$$scope={dirty:u,ctx:f}),Mv.$set(y6e);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),Cv.$set(x6e);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),Sv.$set(Fk);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),Pv.$set($6e);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),bF.$set(k6e);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),FF.$set(S6e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),cT.$set(nt);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),mT.$set(Tk);const R6e={};u&2&&(R6e.$$scope={dirty:u,ctx:f}),pT.$set(R6e);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),uT.$set(Mk);const P6e={};u&2&&(P6e.$$scope={dirty:u,ctx:f}),ST.$set(P6e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),PT.$set(st);const B6e={};u&2&&(B6e.$$scope={dirty:u,ctx:f}),NT.$set(B6e);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),jT.$set(Sf);const I6e={};u&2&&(I6e.$$scope={dirty:u,ctx:f}),OT.$set(I6e);const N6e={};u&2&&(N6e.$$scope={dirty:u,ctx:f}),XT.$set(N6e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),o8.$set(L);const NA={};u&2&&(NA.$$scope={dirty:u,ctx:f}),t8.$set(NA);const q6e={};u&2&&(q6e.$$scope={dirty:u,ctx:f}),c8.$set(q6e);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:f}),m8.$set(j6e);const qA={};u&2&&(qA.$$scope={dirty:u,ctx:f}),C8.$set(qA);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:f}),A8.$set(D6e);const G6e={};u&2&&(G6e.$$scope={dirty:u,ctx:f}),$8.$set(G6e);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),S8.$set(jA);const O6e={};u&2&&(O6e.$$scope={dirty:u,ctx:f}),j8.$set(O6e);const V6e={};u&2&&(V6e.$$scope={dirty:u,ctx:f}),G8.$set(V6e);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),Q8.$set(DA);const X6e={};u&2&&(X6e.$$scope={dirty:u,ctx:f}),H8.$set(X6e);const z6e={};u&2&&(z6e.$$scope={dirty:u,ctx:f}),K8.$set(z6e);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),eM.$set(GA);const Q6e={};u&2&&(Q6e.$$scope={dirty:u,ctx:f}),tM.$set(Q6e);const W6e={};u&2&&(W6e.$$scope={dirty:u,ctx:f}),nM.$set(W6e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),mM.$set(OA);const H6e={};u&2&&(H6e.$$scope={dirty:u,ctx:f}),hM.$set(H6e);const U6e={};u&2&&(U6e.$$scope={dirty:u,ctx:f}),uM.$set(U6e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),vM.$set(VA);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:f}),p4.$set(J6e);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:f}),u4.$set(Y6e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),G4.$set(XA);const K6e={};u&2&&(K6e.$$scope={dirty:u,ctx:f}),V4.$set(K6e);const Z6e={};u&2&&(Z6e.$$scope={dirty:u,ctx:f}),tE.$set(Z6e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),nE.$set(zA);const e7e={};u&2&&(e7e.$$scope={dirty:u,ctx:f}),mE.$set(e7e);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:f}),hE.$set(o7e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),BE.$set(QA);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:f}),NE.$set(r7e);const t7e={};u&2&&(t7e.$$scope={dirty:u,ctx:f}),HE.$set(t7e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),JE.$set(WA);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:f}),EC.$set(a7e);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:f}),wC.$set(n7e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),VC.$set(HA);const s7e={};u&2&&(s7e.$$scope={dirty:u,ctx:f}),zC.$set(s7e);const l7e={};u&2&&(l7e.$$scope={dirty:u,ctx:f}),HC.$set(l7e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),JC.$set(UA);const i7e={};u&2&&(i7e.$$scope={dirty:u,ctx:f}),KC.$set(i7e);const d7e={};u&2&&(d7e.$$scope={dirty:u,ctx:f}),e5.$set(d7e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),T5.$set(JA);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),E5.$set(c7e);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),X5.$set(f7e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),Q5.$set(YA);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),H5.$set(m7e);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),J5.$set(g7e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),K5.$set(KA);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),e0.$set(h7e);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),y0.$set(p7e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),$0.$set(ZA);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),G0.$set(_7e);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),V0.$set(u7e);const e6={};u&2&&(e6.$$scope={dirty:u,ctx:f}),tw.$set(e6);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),nw.$set(b7e);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),_w.$set(v7e);const o6={};u&2&&(o6.$$scope={dirty:u,ctx:f}),bw.$set(o6);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),xw.$set(F7e);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),kw.$set(T7e);const r6={};u&2&&(r6.$$scope={dirty:u,ctx:f}),Ow.$set(r6);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),Xw.$set(M7e);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),oA.$set(E7e);const t6={};u&2&&(t6.$$scope={dirty:u,ctx:f}),tA.$set(t6);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),mA.$set(C7e);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),hA.$set(w7e);const a6={};u&2&&(a6.$$scope={dirty:u,ctx:f}),EA.$set(a6);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),wA.$set(A7e);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),LA.$set(L7e);const n6={};u&2&&(n6.$$scope={dirty:u,ctx:f}),xA.$set(n6);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),SA.$set(y7e);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),PA.$set(x7e);const s6={};u&2&&(s6.$$scope={dirty:u,ctx:f}),IA.$set(s6)},i(f){sQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(jf.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(Yg.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Rh.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(EL.$$.fragment,f),E(_p.$$.fragment,f),E(up.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(xL.$$.fragment,f),E(qp.$$.fragment,f),E(jp.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(Op.$$.fragment,f),E(BL.$$.fragment,f),E(Qu.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(Hu.$$.fragment,f),E(DL.$$.fragment,f),E(G1.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(V1.$$.fragment,f),E(zL.$$.fragment,f),E(k2.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(R2.$$.fragment,f),E(JL.$$.fragment,f),E(vb.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(Tb.$$.fragment,f),E(oy.$$.fragment,f),E(Gb.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Vb.$$.fragment,f),E(sy.$$.fragment,f),E(O3.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(X3.$$.fragment,f),E(fy.$$.fragment,f),E(Mv.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(Cv.$$.fragment,f),E(_y.$$.fragment,f),E(Sv.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Pv.$$.fragment,f),E(Ty.$$.fragment,f),E(bF.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(FF.$$.fragment,f),E(Ay.$$.fragment,f),E(cT.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(mT.$$.fragment,f),E(ky.$$.fragment,f),E(pT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(uT.$$.fragment,f),E(Iy.$$.fragment,f),E(ST.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(PT.$$.fragment,f),E(Gy.$$.fragment,f),E(NT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(jT.$$.fragment,f),E(Qy.$$.fragment,f),E(OT.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(XT.$$.fragment,f),E(Yy.$$.fragment,f),E(o8.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(t8.$$.fragment,f),E(r9.$$.fragment,f),E(c8.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(m8.$$.fragment,f),E(l9.$$.fragment,f),E(C8.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(A8.$$.fragment,f),E(m9.$$.fragment,f),E($8.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(S8.$$.fragment,f),E(b9.$$.fragment,f),E(j8.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(G8.$$.fragment,f),E(E9.$$.fragment,f),E(Q8.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(H8.$$.fragment,f),E(y9.$$.fragment,f),E(K8.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(eM.$$.fragment,f),E(P9.$$.fragment,f),E(tM.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(nM.$$.fragment,f),E(j9.$$.fragment,f),E(mM.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(hM.$$.fragment,f),E(X9.$$.fragment,f),E(uM.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(vM.$$.fragment,f),E(U9.$$.fragment,f),E(p4.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(u4.$$.fragment,f),E(ex.$$.fragment,f),E(G4.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(V4.$$.fragment,f),E(nx.$$.fragment,f),E(tE.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(nE.$$.fragment,f),E(cx.$$.fragment,f),E(mE.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(hE.$$.fragment,f),E(px.$$.fragment,f),E(BE.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(NE.$$.fragment,f),E(Fx.$$.fragment,f),E(HE.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(JE.$$.fragment,f),E(wx.$$.fragment,f),E(EC.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(wC.$$.fragment,f),E($x.$$.fragment,f),E(VC.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(zC.$$.fragment,f),E(Bx.$$.fragment,f),E(HC.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(JC.$$.fragment,f),E(Gx.$$.fragment,f),E(KC.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(e5.$$.fragment,f),E(Qx.$$.fragment,f),E(T5.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(E5.$$.fragment,f),E(Yx.$$.fragment,f),E(X5.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(Q5.$$.fragment,f),E(r$.$$.fragment,f),E(H5.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(J5.$$.fragment,f),E(l$.$$.fragment,f),E(K5.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(e0.$$.fragment,f),E(m$.$$.fragment,f),E(y0.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E($0.$$.fragment,f),E(u$.$$.fragment,f),E(G0.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(V0.$$.fragment,f),E(M$.$$.fragment,f),E(tw.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(nw.$$.fragment,f),E(L$.$$.fragment,f),E(_w.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(bw.$$.fragment,f),E(S$.$$.fragment,f),E(xw.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(kw.$$.fragment,f),E(N$.$$.fragment,f),E(Ow.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(Xw.$$.fragment,f),E(O$.$$.fragment,f),E(oA.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(tA.$$.fragment,f),E(W$.$$.fragment,f),E(mA.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(hA.$$.fragment,f),E(K$.$$.fragment,f),E(EA.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(wA.$$.fragment,f),E(tk.$$.fragment,f),E(LA.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(xA.$$.fragment,f),E(ik.$$.fragment,f),E(SA.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(PA.$$.fragment,f),E(hk.$$.fragment,f),E(IA.$$.fragment,f),sQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(jf.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(Yg.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Rh.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(EL.$$.fragment,f),C(_p.$$.fragment,f),C(up.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(xL.$$.fragment,f),C(qp.$$.fragment,f),C(jp.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(Op.$$.fragment,f),C(BL.$$.fragment,f),C(Qu.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(Hu.$$.fragment,f),C(DL.$$.fragment,f),C(G1.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(V1.$$.fragment,f),C(zL.$$.fragment,f),C(k2.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(R2.$$.fragment,f),C(JL.$$.fragment,f),C(vb.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(Tb.$$.fragment,f),C(oy.$$.fragment,f),C(Gb.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Vb.$$.fragment,f),C(sy.$$.fragment,f),C(O3.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(X3.$$.fragment,f),C(fy.$$.fragment,f),C(Mv.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(Cv.$$.fragment,f),C(_y.$$.fragment,f),C(Sv.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Pv.$$.fragment,f),C(Ty.$$.fragment,f),C(bF.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(FF.$$.fragment,f),C(Ay.$$.fragment,f),C(cT.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(mT.$$.fragment,f),C(ky.$$.fragment,f),C(pT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(uT.$$.fragment,f),C(Iy.$$.fragment,f),C(ST.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(PT.$$.fragment,f),C(Gy.$$.fragment,f),C(NT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(jT.$$.fragment,f),C(Qy.$$.fragment,f),C(OT.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(XT.$$.fragment,f),C(Yy.$$.fragment,f),C(o8.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(t8.$$.fragment,f),C(r9.$$.fragment,f),C(c8.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(m8.$$.fragment,f),C(l9.$$.fragment,f),C(C8.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(A8.$$.fragment,f),C(m9.$$.fragment,f),C($8.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(S8.$$.fragment,f),C(b9.$$.fragment,f),C(j8.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(G8.$$.fragment,f),C(E9.$$.fragment,f),C(Q8.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(H8.$$.fragment,f),C(y9.$$.fragment,f),C(K8.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(eM.$$.fragment,f),C(P9.$$.fragment,f),C(tM.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(nM.$$.fragment,f),C(j9.$$.fragment,f),C(mM.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(hM.$$.fragment,f),C(X9.$$.fragment,f),C(uM.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(vM.$$.fragment,f),C(U9.$$.fragment,f),C(p4.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(u4.$$.fragment,f),C(ex.$$.fragment,f),C(G4.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(V4.$$.fragment,f),C(nx.$$.fragment,f),C(tE.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(nE.$$.fragment,f),C(cx.$$.fragment,f),C(mE.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(hE.$$.fragment,f),C(px.$$.fragment,f),C(BE.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(NE.$$.fragment,f),C(Fx.$$.fragment,f),C(HE.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(JE.$$.fragment,f),C(wx.$$.fragment,f),C(EC.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(wC.$$.fragment,f),C($x.$$.fragment,f),C(VC.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(zC.$$.fragment,f),C(Bx.$$.fragment,f),C(HC.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(JC.$$.fragment,f),C(Gx.$$.fragment,f),C(KC.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(e5.$$.fragment,f),C(Qx.$$.fragment,f),C(T5.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(E5.$$.fragment,f),C(Yx.$$.fragment,f),C(X5.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(Q5.$$.fragment,f),C(r$.$$.fragment,f),C(H5.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(J5.$$.fragment,f),C(l$.$$.fragment,f),C(K5.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(e0.$$.fragment,f),C(m$.$$.fragment,f),C(y0.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C($0.$$.fragment,f),C(u$.$$.fragment,f),C(G0.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(V0.$$.fragment,f),C(M$.$$.fragment,f),C(tw.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(nw.$$.fragment,f),C(L$.$$.fragment,f),C(_w.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(bw.$$.fragment,f),C(S$.$$.fragment,f),C(xw.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(kw.$$.fragment,f),C(N$.$$.fragment,f),C(Ow.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(Xw.$$.fragment,f),C(O$.$$.fragment,f),C(oA.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(tA.$$.fragment,f),C(W$.$$.fragment,f),C(mA.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(hA.$$.fragment,f),C(K$.$$.fragment,f),C(EA.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(wA.$$.fragment,f),C(tk.$$.fragment,f),C(LA.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(xA.$$.fragment,f),C(ik.$$.fragment,f),C(SA.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(PA.$$.fragment,f),C(hk.$$.fragment,f),C(IA.$$.fragment,f),sQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Pf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(If),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(oXe),f&&t(Pi),w(nL),f&&t(rXe),f&&t(qn),f&&t(tXe),w(sL,f),f&&t(aXe),f&&t(GS),f&&t(nXe),w(jf,f),f&&t(sXe),f&&t(Bi),w(lL),f&&t(lXe),f&&t(Ao),w(iL),w(fL),w(Yg),w(mL),f&&t(iXe),f&&t(Ni),w(gL),f&&t(dXe),f&&t(Lo),w(hL),w(uL),w(Rh),w(bL),f&&t(cXe),f&&t(qi),w(vL),f&&t(fXe),f&&t(yo),w(FL),w(EL),w(_p),w(up),w(CL),f&&t(mXe),f&&t(ji),w(wL),f&&t(gXe),f&&t(xo),w(AL),w(xL),w(qp),w(jp),w($L),f&&t(hXe),f&&t(Gi),w(kL),f&&t(pXe),f&&t($o),w(SL),w(PL),w(Op),w(BL),w(Qu),f&&t(_Xe),f&&t(Xi),w(IL),f&&t(uXe),f&&t(ko),w(NL),w(jL),w(Hu),w(DL),w(G1),f&&t(bXe),f&&t(Wi),w(GL),f&&t(vXe),f&&t(So),w(OL),w(XL),w(V1),w(zL),w(k2),f&&t(FXe),f&&t(Ji),w(QL),f&&t(TXe),f&&t(Ro),w(WL),w(UL),w(R2),w(JL),w(vb),f&&t(MXe),f&&t(Zi),w(YL),f&&t(EXe),f&&t(Po),w(KL),w(ey),w(Tb),w(oy),w(Gb),f&&t(CXe),f&&t(rd),w(ry),f&&t(wXe),f&&t(Bo),w(ty),w(ny),w(Vb),w(sy),w(O3),f&&t(AXe),f&&t(nd),w(ly),f&&t(LXe),f&&t(Io),w(iy),w(cy),w(X3),w(fy),w(Mv),f&&t(yXe),f&&t(id),w(my),f&&t(xXe),f&&t(No),w(gy),w(py),w(Cv),w(_y),w(Sv),f&&t($Xe),f&&t(fd),w(uy),f&&t(kXe),f&&t(jo),w(by),w(Fy),w(Pv),w(Ty),w(bF),f&&t(SXe),f&&t(hd),w(My),f&&t(RXe),f&&t(Do),w(Ey),w(wy),w(FF),w(Ay),w(cT),f&&t(PXe),f&&t(ud),w(Ly),f&&t(BXe),f&&t(Go),w(yy),w($y),w(mT),w(ky),w(pT),f&&t(IXe),f&&t(Fd),w(Sy),f&&t(NXe),f&&t(Oo),w(Ry),w(By),w(uT),w(Iy),w(ST),f&&t(qXe),f&&t(Ed),w(Ny),f&&t(jXe),f&&t(Vo),w(qy),w(Dy),w(PT),w(Gy),w(NT),f&&t(DXe),f&&t(Ad),w(Oy),f&&t(GXe),f&&t(Xo),w(Vy),w(zy),w(jT),w(Qy),w(OT),f&&t(OXe),f&&t(xd),w(Wy),f&&t(VXe),f&&t(zo),w(Hy),w(Jy),w(XT),w(Yy),w(o8),f&&t(XXe),f&&t(Sd),w(Ky),f&&t(zXe),f&&t(Qo),w(Zy),w(o9),w(t8),w(r9),w(c8),f&&t(QXe),f&&t(Bd),w(t9),f&&t(WXe),f&&t(Wo),w(a9),w(s9),w(m8),w(l9),w(C8),f&&t(HXe),f&&t(qd),w(i9),f&&t(UXe),f&&t(Ho),w(d9),w(f9),w(A8),w(m9),w($8),f&&t(JXe),f&&t(Gd),w(h9),f&&t(YXe),f&&t(Uo),w(p9),w(u9),w(S8),w(b9),w(j8),f&&t(KXe),f&&t(Xd),w(v9),f&&t(ZXe),f&&t(Jo),w(F9),w(M9),w(G8),w(E9),w(Q8),f&&t(eze),f&&t(Hd),w(C9),f&&t(oze),f&&t(Yo),w(w9),w(L9),w(H8),w(y9),w(K8),f&&t(rze),f&&t(Yd),w($9),f&&t(tze),f&&t(Ko),w(k9),w(R9),w(eM),w(P9),w(tM),f&&t(aze),f&&t(ec),w(B9),f&&t(nze),f&&t(Zo),w(I9),w(q9),w(nM),w(j9),w(mM),f&&t(sze),f&&t(tc),w(D9),f&&t(lze),f&&t(er),w(G9),w(V9),w(hM),w(X9),w(uM),f&&t(ize),f&&t(sc),w(z9),f&&t(dze),f&&t(or),w(Q9),w(H9),w(vM),w(U9),w(p4),f&&t(cze),f&&t(dc),w(J9),f&&t(fze),f&&t(rr),w(Y9),w(Z9),w(u4),w(ex),w(G4),f&&t(mze),f&&t(mc),w(ox),f&&t(gze),f&&t(tr),w(rx),w(ax),w(V4),w(nx),w(tE),f&&t(hze),f&&t(pc),w(sx),f&&t(pze),f&&t(ar),w(lx),w(dx),w(nE),w(cx),w(mE),f&&t(_ze),f&&t(bc),w(fx),f&&t(uze),f&&t(nr),w(mx),w(hx),w(hE),w(px),w(BE),f&&t(bze),f&&t(Tc),w(_x),f&&t(vze),f&&t(sr),w(ux),w(vx),w(NE),w(Fx),w(HE),f&&t(Fze),f&&t(Cc),w(Tx),f&&t(Tze),f&&t(lr),w(Mx),w(Cx),w(JE),w(wx),w(EC),f&&t(Mze),f&&t(Lc),w(Ax),f&&t(Eze),f&&t(ir),w(Lx),w(xx),w(wC),w($x),w(VC),f&&t(Cze),f&&t($c),w(kx),f&&t(wze),f&&t(dr),w(Sx),w(Px),w(zC),w(Bx),w(HC),f&&t(Aze),f&&t(Rc),w(Nx),f&&t(Lze),f&&t(cr),w(qx),w(Dx),w(JC),w(Gx),w(KC),f&&t(yze),f&&t(Ic),w(Ox),f&&t(xze),f&&t(fr),w(Vx),w(zx),w(e5),w(Qx),w(T5),f&&t($ze),f&&t(jc),w(Wx),f&&t(kze),f&&t(mr),w(Hx),w(Jx),w(E5),w(Yx),w(X5),f&&t(Sze),f&&t(Oc),w(Kx),f&&t(Rze),f&&t(gr),w(Zx),w(o$),w(Q5),w(r$),w(H5),f&&t(Pze),f&&t(zc),w(t$),f&&t(Bze),f&&t(hr),w(a$),w(s$),w(J5),w(l$),w(K5),f&&t(Ize),f&&t(Hc),w(i$),f&&t(Nze),f&&t(pr),w(d$),w(f$),w(e0),w(m$),w(y0),f&&t(qze),f&&t(Yc),w(g$),f&&t(jze),f&&t(_r),w(h$),w(_$),w($0),w(u$),w(G0),f&&t(Dze),f&&t(ef),w(b$),f&&t(Gze),f&&t(ur),w(v$),w(T$),w(V0),w(M$),w(tw),f&&t(Oze),f&&t(tf),w(E$),f&&t(Vze),f&&t(br),w(C$),w(A$),w(nw),w(L$),w(_w),f&&t(Xze),f&&t(sf),w(y$),f&&t(zze),f&&t(vr),w(x$),w(k$),w(bw),w(S$),w(xw),f&&t(Qze),f&&t(cf),w(R$),f&&t(Wze),f&&t(Fr),w(P$),w(I$),w(kw),w(N$),w(Ow),f&&t(Hze),f&&t(gf),w(q$),f&&t(Uze),f&&t(Tr),w(j$),w(G$),w(Xw),w(O$),w(oA),f&&t(Jze),f&&t(_f),w(V$),f&&t(Yze),f&&t(Mr),w(X$),w(Q$),w(tA),w(W$),w(mA),f&&t(Kze),f&&t(vf),w(H$),f&&t(Zze),f&&t(Er),w(U$),w(Y$),w(hA),w(K$),w(EA),f&&t(eQe),f&&t(Mf),w(Z$),f&&t(oQe),f&&t(Cr),w(ek),w(rk),w(wA),w(tk),w(LA),f&&t(rQe),f&&t(wf),w(ak),f&&t(tQe),f&&t(wr),w(nk),w(lk),w(xA),w(ik),w(SA),f&&t(aQe),f&&t(yf),w(ck),f&&t(nQe),f&&t(Ar),w(fk),w(gk),w(PA),w(hk),w(IA)}}}const QHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function WHt($){return zQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class eUt extends GQt{constructor(g){super();OQt(this,g,WHt,zHt,VQt,{})}}export{eUt as default,QHt as metadata};
