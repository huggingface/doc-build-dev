import{S as pQt,i as _Qt,s as uQt,e as a,k as l,w as F,t as o,M as bQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as vQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Xrt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function FQt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,Z7,Pf,Oe,Qe,xi,Pn,eL,Bn,Nn,oL,$i,In,rL,ki,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),Z7=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),eL=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),oL=o(`, make sure its
`),$i=a("code"),In=o("config_class"),rL=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var RS=s(p);m=r(RS,"NewModelConfig"),RS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var PS=s(Ai);Rf=r(PS,"model_type"),PS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var BS=s(Li);yi=r(BS,'"new-model"'),BS.forEach(t),Z7=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),eL=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var NS=s(Bn);Nn=r(NS,"PreTrainedModel"),NS.forEach(t),oL=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var Nf=s($i);In=r(Nf,"config_class"),Nf.forEach(t),rL=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var IS=s(ki);Bf=r(IS,"NewModelConfig"),IS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,Z7),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,eL),e(Oe,Bn),e(Bn,Nn),e(Oe,oL),e(Oe,$i),e($i,In),e(Oe,rL),e(Oe,ki),e(ki,Bf),e(Oe,Sa)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,Z7,Pf,Oe,Qe,xi,Pn,eL,Bn,Nn,oL,$i,In,rL,ki,Bf,Sa,We,Ae,RS,Si,PS,BS,Co,Ra,NS,Nf,IS,lHe,QVe,Ri,If,Fae,tL,iHe,Tae,dHe,WVe,qn,cHe,Mae,fHe,mHe,Eae,gHe,hHe,HVe,aL,UVe,qS,pHe,JVe,qf,YVe,Pi,jf,Cae,nL,_He,wae,uHe,KVe,wo,sL,bHe,lL,vHe,jS,FHe,THe,MHe,iL,EHe,Aae,CHe,wHe,AHe,Lr,dL,LHe,Lae,yHe,xHe,Bi,$He,yae,kHe,SHe,xae,RHe,PHe,BHe,A,Df,$ae,NHe,IHe,DS,qHe,jHe,DHe,Gf,kae,GHe,OHe,GS,VHe,XHe,zHe,Of,Sae,QHe,WHe,OS,HHe,UHe,JHe,Vf,Rae,YHe,KHe,VS,ZHe,eUe,oUe,Xf,Pae,rUe,tUe,XS,aUe,nUe,sUe,zf,Bae,lUe,iUe,zS,dUe,cUe,fUe,Qf,Nae,mUe,gUe,QS,hUe,pUe,_Ue,Wf,Iae,uUe,bUe,WS,vUe,FUe,TUe,Hf,qae,MUe,EUe,HS,CUe,wUe,AUe,Uf,jae,LUe,yUe,US,xUe,$Ue,kUe,Jf,Dae,SUe,RUe,JS,PUe,BUe,NUe,Yf,Gae,IUe,qUe,YS,jUe,DUe,GUe,Kf,Oae,OUe,VUe,KS,XUe,zUe,QUe,Zf,Vae,WUe,HUe,ZS,UUe,JUe,YUe,em,Xae,KUe,ZUe,eR,eJe,oJe,rJe,om,zae,tJe,aJe,oR,nJe,sJe,lJe,rm,Qae,iJe,dJe,rR,cJe,fJe,mJe,tm,Wae,gJe,hJe,tR,pJe,_Je,uJe,am,Hae,bJe,vJe,aR,FJe,TJe,MJe,nm,Uae,EJe,CJe,nR,wJe,AJe,LJe,sm,Jae,yJe,xJe,sR,$Je,kJe,SJe,lm,Yae,RJe,PJe,lR,BJe,NJe,IJe,im,Kae,qJe,jJe,iR,DJe,GJe,OJe,dm,Zae,VJe,XJe,dR,zJe,QJe,WJe,cm,ene,HJe,UJe,cR,JJe,YJe,KJe,fm,one,ZJe,eYe,fR,oYe,rYe,tYe,mm,rne,aYe,nYe,mR,sYe,lYe,iYe,gm,tne,dYe,cYe,gR,fYe,mYe,gYe,hm,ane,hYe,pYe,hR,_Ye,uYe,bYe,pm,nne,vYe,FYe,pR,TYe,MYe,EYe,_m,sne,CYe,wYe,_R,AYe,LYe,yYe,um,lne,xYe,$Ye,uR,kYe,SYe,RYe,bm,ine,PYe,BYe,bR,NYe,IYe,qYe,vm,dne,jYe,DYe,vR,GYe,OYe,VYe,Fm,cne,XYe,zYe,FR,QYe,WYe,HYe,Tm,fne,UYe,JYe,TR,YYe,KYe,ZYe,Mm,mne,eKe,oKe,MR,rKe,tKe,aKe,Em,gne,nKe,sKe,ER,lKe,iKe,dKe,Cm,hne,cKe,fKe,CR,mKe,gKe,hKe,wm,pne,pKe,_Ke,wR,uKe,bKe,vKe,Am,_ne,FKe,TKe,AR,MKe,EKe,CKe,Lm,une,wKe,AKe,LR,LKe,yKe,xKe,ym,bne,$Ke,kKe,yR,SKe,RKe,PKe,xm,vne,BKe,NKe,xR,IKe,qKe,jKe,$m,Fne,DKe,GKe,$R,OKe,VKe,XKe,km,Tne,zKe,QKe,kR,WKe,HKe,UKe,Sm,Mne,JKe,YKe,SR,KKe,ZKe,eZe,Rm,Ene,oZe,rZe,RR,tZe,aZe,nZe,Pm,Cne,sZe,lZe,PR,iZe,dZe,cZe,Bm,wne,fZe,mZe,BR,gZe,hZe,pZe,Nm,Ane,_Ze,uZe,NR,bZe,vZe,FZe,Im,Lne,TZe,MZe,IR,EZe,CZe,wZe,qm,yne,AZe,LZe,qR,yZe,xZe,$Ze,jm,xne,kZe,SZe,jR,RZe,PZe,BZe,Dm,$ne,NZe,IZe,DR,qZe,jZe,DZe,Gm,kne,GZe,OZe,GR,VZe,XZe,zZe,Om,Sne,QZe,WZe,OR,HZe,UZe,JZe,Vm,Rne,YZe,KZe,VR,ZZe,eeo,oeo,Xm,Pne,reo,teo,XR,aeo,neo,seo,zm,Bne,leo,ieo,zR,deo,ceo,feo,Qm,Nne,meo,geo,QR,heo,peo,_eo,Wm,Ine,ueo,beo,WR,veo,Feo,Teo,Hm,qne,Meo,Eeo,HR,Ceo,weo,Aeo,Um,jne,Leo,yeo,UR,xeo,$eo,keo,Jm,Dne,Seo,Reo,JR,Peo,Beo,Neo,Ym,Gne,Ieo,qeo,YR,jeo,Deo,Geo,Km,One,Oeo,Veo,KR,Xeo,zeo,Qeo,Zm,Vne,Weo,Heo,ZR,Ueo,Jeo,Yeo,eg,Xne,Keo,Zeo,eP,eoo,ooo,roo,og,zne,too,aoo,oP,noo,soo,loo,rg,Qne,ioo,doo,rP,coo,foo,moo,tg,Wne,goo,hoo,tP,poo,_oo,uoo,ag,Hne,boo,voo,aP,Foo,Too,Moo,ng,Une,Eoo,Coo,nP,woo,Aoo,Loo,sg,Jne,yoo,xoo,sP,$oo,koo,Soo,lg,Yne,Roo,Poo,lP,Boo,Noo,Ioo,ig,Kne,qoo,joo,iP,Doo,Goo,Ooo,dg,Zne,Voo,Xoo,dP,zoo,Qoo,Woo,cg,ese,Hoo,Uoo,cP,Joo,Yoo,Koo,fg,ose,Zoo,ero,fP,oro,rro,tro,mg,rse,aro,nro,mP,sro,lro,iro,gg,tse,dro,cro,gP,fro,mro,gro,hg,ase,hro,pro,hP,_ro,uro,bro,pg,nse,vro,Fro,pP,Tro,Mro,Ero,_g,sse,Cro,wro,_P,Aro,Lro,yro,ug,lse,xro,$ro,uP,kro,Sro,Rro,bg,ise,Pro,Bro,bP,Nro,Iro,qro,vg,dse,jro,Dro,vP,Gro,Oro,Vro,Fg,cse,Xro,zro,FP,Qro,Wro,Hro,Tg,fse,Uro,Jro,TP,Yro,Kro,Zro,Mg,mse,eto,oto,MP,rto,tto,ato,Eg,gse,nto,sto,EP,lto,ito,dto,Cg,hse,cto,fto,CP,mto,gto,hto,wg,pse,pto,_to,wP,uto,bto,vto,Ag,_se,Fto,Tto,AP,Mto,Eto,Cto,Lg,use,wto,Ato,LP,Lto,yto,xto,yg,bse,$to,kto,yP,Sto,Rto,Pto,xg,vse,Bto,Nto,xP,Ito,qto,jto,$g,Fse,Dto,Gto,$P,Oto,Vto,Xto,kg,Tse,zto,Qto,kP,Wto,Hto,Uto,Sg,Mse,Jto,Yto,SP,Kto,Zto,eao,Rg,Ese,oao,rao,RP,tao,aao,nao,Pg,Cse,sao,lao,PP,iao,dao,cao,Bg,wse,fao,mao,BP,gao,hao,pao,Ng,Ase,_ao,uao,NP,bao,vao,Fao,Ig,Lse,Tao,Mao,IP,Eao,Cao,wao,qg,yse,Aao,Lao,qP,yao,xao,$ao,jg,xse,kao,Sao,jP,Rao,Pao,Bao,Dg,$se,Nao,Iao,DP,qao,jao,Dao,Gg,kse,Gao,Oao,GP,Vao,Xao,zao,Og,Sse,Qao,Wao,OP,Hao,Uao,Jao,Vg,Rse,Yao,Kao,VP,Zao,eno,ono,Xg,Pse,rno,tno,XP,ano,nno,sno,zg,Bse,lno,ino,zP,dno,cno,fno,Qg,Nse,mno,gno,QP,hno,pno,_no,Wg,Ise,uno,bno,WP,vno,Fno,Tno,Hg,qse,Mno,Eno,HP,Cno,wno,Ano,Ug,jse,Lno,yno,UP,xno,$no,kno,Jg,Sno,Yg,cL,Rno,Dse,Pno,ZVe,Ni,Kg,Gse,fL,Bno,Ose,Nno,eXe,Ao,mL,Ino,gL,qno,JP,jno,Dno,Gno,hL,Ono,Vse,Vno,Xno,zno,yr,pL,Qno,Xse,Wno,Hno,Pa,Uno,zse,Jno,Yno,Qse,Kno,Zno,Wse,eso,oso,rso,k,jn,Hse,tso,aso,YP,nso,sso,KP,lso,iso,dso,Dn,Use,cso,fso,ZP,mso,gso,eB,hso,pso,_so,Gn,Jse,uso,bso,oB,vso,Fso,rB,Tso,Mso,Eso,Zg,Yse,Cso,wso,tB,Aso,Lso,yso,On,Kse,xso,$so,aB,kso,Sso,nB,Rso,Pso,Bso,eh,Zse,Nso,Iso,sB,qso,jso,Dso,oh,ele,Gso,Oso,lB,Vso,Xso,zso,rh,ole,Qso,Wso,iB,Hso,Uso,Jso,Vn,rle,Yso,Kso,dB,Zso,elo,cB,olo,rlo,tlo,Xn,tle,alo,nlo,fB,slo,llo,mB,ilo,dlo,clo,zn,ale,flo,mlo,gB,glo,hlo,hB,plo,_lo,ulo,th,nle,blo,vlo,pB,Flo,Tlo,Mlo,ah,sle,Elo,Clo,_B,wlo,Alo,Llo,nh,lle,ylo,xlo,uB,$lo,klo,Slo,Qn,ile,Rlo,Plo,bB,Blo,Nlo,vB,Ilo,qlo,jlo,sh,dle,Dlo,Glo,FB,Olo,Vlo,Xlo,Wn,cle,zlo,Qlo,TB,Wlo,Hlo,MB,Ulo,Jlo,Ylo,Hn,fle,Klo,Zlo,EB,eio,oio,CB,rio,tio,aio,Un,mle,nio,sio,wB,lio,iio,AB,dio,cio,fio,Jn,gle,mio,gio,LB,hio,pio,yB,_io,uio,bio,lh,hle,vio,Fio,xB,Tio,Mio,Eio,Yn,ple,Cio,wio,$B,Aio,Lio,kB,yio,xio,$io,Kn,_le,kio,Sio,SB,Rio,Pio,RB,Bio,Nio,Iio,Zn,ule,qio,jio,PB,Dio,Gio,BB,Oio,Vio,Xio,es,ble,zio,Qio,NB,Wio,Hio,IB,Uio,Jio,Yio,os,vle,Kio,Zio,qB,edo,odo,jB,rdo,tdo,ado,rs,Fle,ndo,sdo,DB,ldo,ido,GB,ddo,cdo,fdo,ih,Tle,mdo,gdo,OB,hdo,pdo,_do,ts,Mle,udo,bdo,VB,vdo,Fdo,XB,Tdo,Mdo,Edo,dh,Ele,Cdo,wdo,zB,Ado,Ldo,ydo,as,Cle,xdo,$do,QB,kdo,Sdo,WB,Rdo,Pdo,Bdo,ns,wle,Ndo,Ido,HB,qdo,jdo,UB,Ddo,Gdo,Odo,ss,Ale,Vdo,Xdo,JB,zdo,Qdo,YB,Wdo,Hdo,Udo,ch,Lle,Jdo,Ydo,KB,Kdo,Zdo,eco,ls,yle,oco,rco,ZB,tco,aco,eN,nco,sco,lco,is,xle,ico,dco,oN,cco,fco,rN,mco,gco,hco,ds,$le,pco,_co,tN,uco,bco,aN,vco,Fco,Tco,fh,kle,Mco,Eco,nN,Cco,wco,Aco,cs,Sle,Lco,yco,sN,xco,$co,lN,kco,Sco,Rco,fs,Rle,Pco,Bco,iN,Nco,Ico,dN,qco,jco,Dco,ms,Ple,Gco,Oco,cN,Vco,Xco,fN,zco,Qco,Wco,gs,Ble,Hco,Uco,mN,Jco,Yco,gN,Kco,Zco,efo,hs,Nle,ofo,rfo,hN,tfo,afo,pN,nfo,sfo,lfo,ps,Ile,ifo,dfo,_N,cfo,ffo,uN,mfo,gfo,hfo,_s,qle,pfo,_fo,bN,ufo,bfo,vN,vfo,Ffo,Tfo,us,jle,Mfo,Efo,FN,Cfo,wfo,TN,Afo,Lfo,yfo,mh,Dle,xfo,$fo,MN,kfo,Sfo,Rfo,bs,Gle,Pfo,Bfo,EN,Nfo,Ifo,CN,qfo,jfo,Dfo,gh,Ole,Gfo,Ofo,wN,Vfo,Xfo,zfo,hh,Vle,Qfo,Wfo,AN,Hfo,Ufo,Jfo,vs,Xle,Yfo,Kfo,LN,Zfo,emo,yN,omo,rmo,tmo,Fs,zle,amo,nmo,xN,smo,lmo,$N,imo,dmo,cmo,Ts,Qle,fmo,mmo,kN,gmo,hmo,SN,pmo,_mo,umo,ph,Wle,bmo,vmo,RN,Fmo,Tmo,Mmo,Ms,Hle,Emo,Cmo,PN,wmo,Amo,BN,Lmo,ymo,xmo,Es,Ule,$mo,kmo,NN,Smo,Rmo,IN,Pmo,Bmo,Nmo,Cs,Jle,Imo,qmo,qN,jmo,Dmo,jN,Gmo,Omo,Vmo,ws,Yle,Xmo,zmo,DN,Qmo,Wmo,GN,Hmo,Umo,Jmo,As,Kle,Ymo,Kmo,ON,Zmo,ego,VN,ogo,rgo,tgo,Ls,Zle,ago,ngo,XN,sgo,lgo,zN,igo,dgo,cgo,ys,eie,fgo,mgo,QN,ggo,hgo,WN,pgo,_go,ugo,_h,oie,bgo,vgo,HN,Fgo,Tgo,Mgo,xs,rie,Ego,Cgo,UN,wgo,Ago,JN,Lgo,ygo,xgo,uh,tie,$go,kgo,YN,Sgo,Rgo,Pgo,bh,aie,Bgo,Ngo,KN,Igo,qgo,jgo,vh,nie,Dgo,Ggo,ZN,Ogo,Vgo,Xgo,Fh,sie,zgo,Qgo,eI,Wgo,Hgo,Ugo,$s,lie,Jgo,Ygo,oI,Kgo,Zgo,rI,eho,oho,rho,Th,iie,tho,aho,tI,nho,sho,lho,ks,die,iho,dho,aI,cho,fho,nI,mho,gho,hho,Ss,cie,pho,_ho,sI,uho,bho,lI,vho,Fho,Tho,Rs,fie,Mho,Eho,iI,Cho,who,dI,Aho,Lho,yho,Ps,mie,xho,$ho,cI,kho,Sho,fI,Rho,Pho,Bho,Bs,gie,Nho,Iho,mI,qho,jho,gI,Dho,Gho,Oho,Ns,hie,Vho,Xho,hI,zho,Qho,pI,Who,Hho,Uho,Mh,pie,Jho,Yho,_I,Kho,Zho,epo,Eh,_ie,opo,rpo,uI,tpo,apo,npo,Is,uie,spo,lpo,bI,ipo,dpo,vI,cpo,fpo,mpo,qs,bie,gpo,hpo,FI,ppo,_po,TI,upo,bpo,vpo,js,vie,Fpo,Tpo,MI,Mpo,Epo,EI,Cpo,wpo,Apo,Ch,Fie,Lpo,ypo,CI,xpo,$po,kpo,wh,Tie,Spo,Rpo,wI,Ppo,Bpo,Npo,Ah,Mie,Ipo,qpo,AI,jpo,Dpo,Gpo,Ds,Eie,Opo,Vpo,LI,Xpo,zpo,yI,Qpo,Wpo,Hpo,Gs,Cie,Upo,Jpo,xI,Ypo,Kpo,$I,Zpo,e_o,o_o,Lh,wie,r_o,t_o,kI,a_o,n_o,s_o,yh,Aie,l_o,i_o,SI,d_o,c_o,f_o,xh,Lie,m_o,g_o,RI,h_o,p_o,__o,Os,yie,u_o,b_o,PI,v_o,F_o,BI,T_o,M_o,E_o,$h,xie,C_o,w_o,NI,A_o,L_o,y_o,kh,$ie,x_o,$_o,II,k_o,S_o,R_o,Vs,kie,P_o,B_o,qI,N_o,I_o,jI,q_o,j_o,D_o,Xs,Sie,G_o,O_o,DI,V_o,X_o,GI,z_o,Q_o,W_o,zs,Rie,H_o,U_o,OI,J_o,Y_o,VI,K_o,Z_o,euo,Qs,Pie,ouo,ruo,XI,tuo,auo,zI,nuo,suo,luo,Sh,iuo,Rh,_L,duo,Bie,cuo,oXe,Ii,Ph,Nie,uL,fuo,Iie,muo,rXe,Lo,bL,guo,vL,huo,QI,puo,_uo,uuo,FL,buo,qie,vuo,Fuo,Tuo,He,TL,Muo,jie,Euo,Cuo,Ba,wuo,Die,Auo,Luo,Gie,yuo,xuo,Oie,$uo,kuo,Suo,Y,Bh,Vie,Ruo,Puo,WI,Buo,Nuo,Iuo,Nh,Xie,quo,juo,HI,Duo,Guo,Ouo,Ih,zie,Vuo,Xuo,UI,zuo,Quo,Wuo,qh,Qie,Huo,Uuo,JI,Juo,Yuo,Kuo,jh,Wie,Zuo,e1o,YI,o1o,r1o,t1o,Dh,Hie,a1o,n1o,KI,s1o,l1o,i1o,Gh,Uie,d1o,c1o,ZI,f1o,m1o,g1o,Oh,Jie,h1o,p1o,eq,_1o,u1o,b1o,Vh,Yie,v1o,F1o,oq,T1o,M1o,E1o,Xh,Kie,C1o,w1o,rq,A1o,L1o,y1o,zh,Zie,x1o,$1o,tq,k1o,S1o,R1o,Qh,ede,P1o,B1o,aq,N1o,I1o,q1o,Wh,ode,j1o,D1o,nq,G1o,O1o,V1o,Hh,rde,X1o,z1o,sq,Q1o,W1o,H1o,Uh,tde,U1o,J1o,lq,Y1o,K1o,Z1o,Jh,ade,e2o,o2o,iq,r2o,t2o,a2o,Yh,nde,n2o,s2o,dq,l2o,i2o,d2o,Kh,sde,c2o,f2o,cq,m2o,g2o,h2o,Zh,lde,p2o,_2o,fq,u2o,b2o,v2o,ep,ide,F2o,T2o,mq,M2o,E2o,C2o,op,dde,w2o,A2o,gq,L2o,y2o,x2o,rp,cde,$2o,k2o,hq,S2o,R2o,P2o,tp,fde,B2o,N2o,pq,I2o,q2o,j2o,ap,mde,D2o,G2o,_q,O2o,V2o,X2o,np,gde,z2o,Q2o,uq,W2o,H2o,U2o,sp,hde,J2o,Y2o,bq,K2o,Z2o,ebo,lp,pde,obo,rbo,vq,tbo,abo,nbo,ip,_de,sbo,lbo,Fq,ibo,dbo,cbo,dp,ude,fbo,mbo,Tq,gbo,hbo,pbo,cp,bde,_bo,ubo,Mq,bbo,vbo,Fbo,fp,vde,Tbo,Mbo,Eq,Ebo,Cbo,wbo,mp,Fde,Abo,Lbo,Cq,ybo,xbo,$bo,gp,Tde,kbo,Sbo,wq,Rbo,Pbo,Bbo,hp,Mde,Nbo,Ibo,Aq,qbo,jbo,Dbo,pp,Gbo,_p,Obo,up,ML,Vbo,Ede,Xbo,tXe,qi,bp,Cde,EL,zbo,wde,Qbo,aXe,yo,CL,Wbo,wL,Hbo,Lq,Ubo,Jbo,Ybo,AL,Kbo,Ade,Zbo,evo,ovo,Ue,LL,rvo,Lde,tvo,avo,ji,nvo,yde,svo,lvo,xde,ivo,dvo,cvo,he,vp,$de,fvo,mvo,yq,gvo,hvo,pvo,Fp,kde,_vo,uvo,Sde,bvo,vvo,Fvo,Tp,Rde,Tvo,Mvo,xq,Evo,Cvo,wvo,Mp,Pde,Avo,Lvo,$q,yvo,xvo,$vo,Ep,Bde,kvo,Svo,kq,Rvo,Pvo,Bvo,Cp,Nde,Nvo,Ivo,Sq,qvo,jvo,Dvo,wp,Ide,Gvo,Ovo,Rq,Vvo,Xvo,zvo,Ap,qde,Qvo,Wvo,Pq,Hvo,Uvo,Jvo,Lp,jde,Yvo,Kvo,Bq,Zvo,e3o,o3o,yp,Dde,r3o,t3o,Nq,a3o,n3o,s3o,xp,Gde,l3o,i3o,Iq,d3o,c3o,f3o,$p,Ode,m3o,g3o,qq,h3o,p3o,_3o,kp,Vde,u3o,b3o,jq,v3o,F3o,T3o,Sp,Xde,M3o,E3o,Dq,C3o,w3o,A3o,Rp,zde,L3o,y3o,Gq,x3o,$3o,k3o,Pp,Qde,S3o,R3o,Oq,P3o,B3o,N3o,Bp,Wde,I3o,q3o,Vq,j3o,D3o,G3o,Np,Hde,O3o,V3o,Xq,X3o,z3o,Q3o,Ip,W3o,qp,H3o,jp,yL,U3o,Ude,J3o,nXe,Di,Dp,Jde,xL,Y3o,Yde,K3o,sXe,xo,$L,Z3o,Gi,eFo,zq,oFo,rFo,Qq,tFo,aFo,nFo,kL,sFo,Kde,lFo,iFo,dFo,lt,SL,cFo,Zde,fFo,mFo,Oi,gFo,ece,hFo,pFo,Wq,_Fo,uFo,bFo,Gp,vFo,Je,RL,FFo,oce,TFo,MFo,Na,EFo,rce,CFo,wFo,tce,AFo,LFo,ace,yFo,xFo,$Fo,y,Op,nce,kFo,SFo,Hq,RFo,PFo,BFo,Vp,sce,NFo,IFo,Uq,qFo,jFo,DFo,Xp,lce,GFo,OFo,Jq,VFo,XFo,zFo,zp,ice,QFo,WFo,Yq,HFo,UFo,JFo,Qp,dce,YFo,KFo,Kq,ZFo,eTo,oTo,Wp,cce,rTo,tTo,Zq,aTo,nTo,sTo,Hp,fce,lTo,iTo,ej,dTo,cTo,fTo,Up,mce,mTo,gTo,oj,hTo,pTo,_To,Jp,gce,uTo,bTo,rj,vTo,FTo,TTo,Yp,hce,MTo,ETo,tj,CTo,wTo,ATo,Kp,pce,LTo,yTo,aj,xTo,$To,kTo,Zp,_ce,STo,RTo,nj,PTo,BTo,NTo,e_,uce,ITo,qTo,sj,jTo,DTo,GTo,o_,bce,OTo,VTo,lj,XTo,zTo,QTo,r_,vce,WTo,HTo,ij,UTo,JTo,YTo,t_,Fce,KTo,ZTo,dj,e8o,o8o,r8o,a_,Tce,t8o,a8o,cj,n8o,s8o,l8o,n_,Mce,i8o,d8o,fj,c8o,f8o,m8o,s_,Ece,g8o,h8o,mj,p8o,_8o,u8o,l_,Cce,b8o,v8o,gj,F8o,T8o,M8o,i_,wce,E8o,C8o,hj,w8o,A8o,L8o,d_,Ace,y8o,x8o,pj,$8o,k8o,S8o,c_,Lce,R8o,P8o,_j,B8o,N8o,I8o,f_,yce,q8o,j8o,uj,D8o,G8o,O8o,m_,xce,V8o,X8o,bj,z8o,Q8o,W8o,g_,$ce,H8o,U8o,vj,J8o,Y8o,K8o,h_,kce,Z8o,eMo,Fj,oMo,rMo,tMo,p_,Sce,aMo,nMo,Tj,sMo,lMo,iMo,__,Rce,dMo,cMo,Mj,fMo,mMo,gMo,u_,Pce,hMo,pMo,Ej,_Mo,uMo,bMo,b_,Bce,vMo,FMo,Cj,TMo,MMo,EMo,v_,Nce,CMo,wMo,wj,AMo,LMo,yMo,F_,Ice,xMo,$Mo,Aj,kMo,SMo,RMo,T_,qce,PMo,BMo,Lj,NMo,IMo,qMo,Ws,jce,jMo,DMo,yj,GMo,OMo,xj,VMo,XMo,zMo,M_,Dce,QMo,WMo,$j,HMo,UMo,JMo,E_,Gce,YMo,KMo,kj,ZMo,e4o,o4o,C_,Oce,r4o,t4o,Sj,a4o,n4o,s4o,w_,Vce,l4o,i4o,Rj,d4o,c4o,f4o,A_,Xce,m4o,g4o,Pj,h4o,p4o,_4o,L_,zce,u4o,b4o,Bj,v4o,F4o,T4o,y_,Qce,M4o,E4o,Nj,C4o,w4o,A4o,x_,Wce,L4o,y4o,Ij,x4o,$4o,k4o,$_,Hce,S4o,R4o,qj,P4o,B4o,N4o,k_,Uce,I4o,q4o,jj,j4o,D4o,G4o,S_,Jce,O4o,V4o,Dj,X4o,z4o,Q4o,R_,Yce,W4o,H4o,Gj,U4o,J4o,Y4o,P_,Kce,K4o,Z4o,Oj,eEo,oEo,rEo,B_,Zce,tEo,aEo,Vj,nEo,sEo,lEo,N_,efe,iEo,dEo,Xj,cEo,fEo,mEo,I_,ofe,gEo,hEo,zj,pEo,_Eo,uEo,q_,rfe,bEo,vEo,Qj,FEo,TEo,MEo,j_,tfe,EEo,CEo,Wj,wEo,AEo,LEo,D_,afe,yEo,xEo,Hj,$Eo,kEo,SEo,G_,nfe,REo,PEo,Uj,BEo,NEo,IEo,O_,sfe,qEo,jEo,Jj,DEo,GEo,OEo,V_,lfe,VEo,XEo,Yj,zEo,QEo,WEo,X_,ife,HEo,UEo,Kj,JEo,YEo,KEo,z_,dfe,ZEo,eCo,Zj,oCo,rCo,tCo,Q_,cfe,aCo,nCo,eD,sCo,lCo,iCo,W_,ffe,dCo,cCo,oD,fCo,mCo,gCo,H_,mfe,hCo,pCo,rD,_Co,uCo,bCo,U_,gfe,vCo,FCo,tD,TCo,MCo,ECo,J_,hfe,CCo,wCo,aD,ACo,LCo,yCo,Y_,pfe,xCo,$Co,nD,kCo,SCo,RCo,K_,_fe,PCo,BCo,sD,NCo,ICo,qCo,Z_,ufe,jCo,DCo,lD,GCo,OCo,VCo,eu,bfe,XCo,zCo,iD,QCo,WCo,HCo,ou,vfe,UCo,JCo,dD,YCo,KCo,ZCo,ru,Ffe,e5o,o5o,cD,r5o,t5o,a5o,tu,Tfe,n5o,s5o,fD,l5o,i5o,d5o,au,Mfe,c5o,f5o,mD,m5o,g5o,h5o,nu,Efe,p5o,_5o,gD,u5o,b5o,v5o,su,Cfe,F5o,T5o,hD,M5o,E5o,C5o,lu,wfe,w5o,A5o,pD,L5o,y5o,x5o,iu,Afe,$5o,k5o,_D,S5o,R5o,P5o,du,Lfe,B5o,N5o,uD,I5o,q5o,j5o,cu,yfe,D5o,G5o,bD,O5o,V5o,X5o,fu,xfe,z5o,Q5o,vD,W5o,H5o,U5o,mu,$fe,J5o,Y5o,FD,K5o,Z5o,e0o,gu,kfe,o0o,r0o,TD,t0o,a0o,n0o,hu,Sfe,s0o,l0o,MD,i0o,d0o,c0o,pu,Rfe,f0o,m0o,ED,g0o,h0o,p0o,_u,Pfe,_0o,u0o,CD,b0o,v0o,F0o,uu,Bfe,T0o,M0o,wD,E0o,C0o,w0o,bu,Nfe,A0o,L0o,AD,y0o,x0o,$0o,vu,Ife,k0o,S0o,LD,R0o,P0o,B0o,Fu,qfe,N0o,I0o,yD,q0o,j0o,D0o,Tu,jfe,G0o,O0o,xD,V0o,X0o,z0o,Mu,Dfe,Q0o,W0o,$D,H0o,U0o,J0o,Eu,Gfe,Y0o,K0o,kD,Z0o,ewo,owo,Cu,Ofe,rwo,two,SD,awo,nwo,swo,wu,Vfe,lwo,iwo,RD,dwo,cwo,fwo,Au,Xfe,mwo,gwo,PD,hwo,pwo,_wo,Lu,zfe,uwo,bwo,BD,vwo,Fwo,Two,yu,Qfe,Mwo,Ewo,ND,Cwo,wwo,Awo,xu,Wfe,Lwo,ywo,ID,xwo,$wo,kwo,$u,Hfe,Swo,Rwo,qD,Pwo,Bwo,Nwo,ku,Ufe,Iwo,qwo,jD,jwo,Dwo,Gwo,Su,Jfe,Owo,Vwo,DD,Xwo,zwo,Qwo,Ru,Yfe,Wwo,Hwo,GD,Uwo,Jwo,Ywo,Pu,Kfe,Kwo,Zwo,OD,eAo,oAo,rAo,Bu,Zfe,tAo,aAo,VD,nAo,sAo,lAo,Nu,eme,iAo,dAo,XD,cAo,fAo,mAo,Iu,ome,gAo,hAo,zD,pAo,_Ao,uAo,qu,rme,bAo,vAo,QD,FAo,TAo,MAo,ju,tme,EAo,CAo,WD,wAo,AAo,LAo,Du,ame,yAo,xAo,HD,$Ao,kAo,SAo,Gu,nme,RAo,PAo,UD,BAo,NAo,IAo,Ou,sme,qAo,jAo,JD,DAo,GAo,OAo,Vu,lme,VAo,XAo,YD,zAo,QAo,WAo,Xu,HAo,ime,UAo,JAo,dme,YAo,KAo,zu,lXe,Vi,Qu,cme,PL,ZAo,fme,e6o,iXe,$o,BL,o6o,Xi,r6o,KD,t6o,a6o,ZD,n6o,s6o,l6o,NL,i6o,mme,d6o,c6o,f6o,it,IL,m6o,gme,g6o,h6o,zi,p6o,hme,_6o,u6o,eG,b6o,v6o,F6o,Wu,T6o,Ye,qL,M6o,pme,E6o,C6o,Ia,w6o,_me,A6o,L6o,ume,y6o,x6o,bme,$6o,k6o,S6o,G,Hu,vme,R6o,P6o,oG,B6o,N6o,I6o,Uu,Fme,q6o,j6o,rG,D6o,G6o,O6o,Ju,Tme,V6o,X6o,tG,z6o,Q6o,W6o,Yu,Mme,H6o,U6o,aG,J6o,Y6o,K6o,Ku,Eme,Z6o,e7o,nG,o7o,r7o,t7o,Zu,Cme,a7o,n7o,sG,s7o,l7o,i7o,e1,wme,d7o,c7o,lG,f7o,m7o,g7o,o1,Ame,h7o,p7o,iG,_7o,u7o,b7o,r1,Lme,v7o,F7o,dG,T7o,M7o,E7o,t1,yme,C7o,w7o,cG,A7o,L7o,y7o,a1,xme,x7o,$7o,fG,k7o,S7o,R7o,n1,$me,P7o,B7o,mG,N7o,I7o,q7o,s1,kme,j7o,D7o,gG,G7o,O7o,V7o,l1,Sme,X7o,z7o,hG,Q7o,W7o,H7o,i1,Rme,U7o,J7o,pG,Y7o,K7o,Z7o,d1,Pme,eLo,oLo,_G,rLo,tLo,aLo,c1,Bme,nLo,sLo,uG,lLo,iLo,dLo,f1,Nme,cLo,fLo,bG,mLo,gLo,hLo,m1,Ime,pLo,_Lo,vG,uLo,bLo,vLo,g1,qme,FLo,TLo,FG,MLo,ELo,CLo,h1,jme,wLo,ALo,TG,LLo,yLo,xLo,p1,Dme,$Lo,kLo,MG,SLo,RLo,PLo,_1,Gme,BLo,NLo,EG,ILo,qLo,jLo,u1,Ome,DLo,GLo,CG,OLo,VLo,XLo,b1,Vme,zLo,QLo,wG,WLo,HLo,ULo,v1,Xme,JLo,YLo,AG,KLo,ZLo,eyo,F1,zme,oyo,ryo,LG,tyo,ayo,nyo,T1,Qme,syo,lyo,yG,iyo,dyo,cyo,M1,Wme,fyo,myo,xG,gyo,hyo,pyo,E1,Hme,_yo,uyo,$G,byo,vyo,Fyo,C1,Ume,Tyo,Myo,kG,Eyo,Cyo,wyo,w1,Jme,Ayo,Lyo,SG,yyo,xyo,$yo,A1,Yme,kyo,Syo,RG,Ryo,Pyo,Byo,L1,Kme,Nyo,Iyo,PG,qyo,jyo,Dyo,y1,Zme,Gyo,Oyo,BG,Vyo,Xyo,zyo,x1,ege,Qyo,Wyo,NG,Hyo,Uyo,Jyo,$1,oge,Yyo,Kyo,IG,Zyo,e9o,o9o,k1,rge,r9o,t9o,qG,a9o,n9o,s9o,S1,tge,l9o,i9o,jG,d9o,c9o,f9o,R1,age,m9o,g9o,DG,h9o,p9o,_9o,P1,nge,u9o,b9o,GG,v9o,F9o,T9o,B1,sge,M9o,E9o,OG,C9o,w9o,A9o,N1,lge,L9o,y9o,VG,x9o,$9o,k9o,I1,ige,S9o,R9o,XG,P9o,B9o,N9o,q1,dge,I9o,q9o,zG,j9o,D9o,G9o,j1,O9o,cge,V9o,X9o,fge,z9o,Q9o,D1,dXe,Qi,G1,mge,jL,W9o,gge,H9o,cXe,ko,DL,U9o,Wi,J9o,QG,Y9o,K9o,WG,Z9o,exo,oxo,GL,rxo,hge,txo,axo,nxo,dt,OL,sxo,pge,lxo,ixo,Hi,dxo,_ge,cxo,fxo,HG,mxo,gxo,hxo,O1,pxo,Ke,VL,_xo,uge,uxo,bxo,qa,vxo,bge,Fxo,Txo,vge,Mxo,Exo,Fge,Cxo,wxo,Axo,z,V1,Tge,Lxo,yxo,UG,xxo,$xo,kxo,X1,Mge,Sxo,Rxo,JG,Pxo,Bxo,Nxo,z1,Ege,Ixo,qxo,YG,jxo,Dxo,Gxo,Q1,Cge,Oxo,Vxo,KG,Xxo,zxo,Qxo,W1,wge,Wxo,Hxo,ZG,Uxo,Jxo,Yxo,H1,Age,Kxo,Zxo,eO,e$o,o$o,r$o,U1,Lge,t$o,a$o,oO,n$o,s$o,l$o,J1,yge,i$o,d$o,rO,c$o,f$o,m$o,Y1,xge,g$o,h$o,tO,p$o,_$o,u$o,K1,$ge,b$o,v$o,aO,F$o,T$o,M$o,Z1,kge,E$o,C$o,nO,w$o,A$o,L$o,e2,Sge,y$o,x$o,sO,$$o,k$o,S$o,o2,Rge,R$o,P$o,lO,B$o,N$o,I$o,r2,Pge,q$o,j$o,iO,D$o,G$o,O$o,t2,Bge,V$o,X$o,dO,z$o,Q$o,W$o,a2,Nge,H$o,U$o,cO,J$o,Y$o,K$o,n2,Ige,Z$o,eko,fO,oko,rko,tko,s2,qge,ako,nko,mO,sko,lko,iko,l2,jge,dko,cko,gO,fko,mko,gko,i2,Dge,hko,pko,hO,_ko,uko,bko,d2,Gge,vko,Fko,pO,Tko,Mko,Eko,c2,Oge,Cko,wko,_O,Ako,Lko,yko,f2,Vge,xko,$ko,uO,kko,Sko,Rko,m2,Xge,Pko,Bko,bO,Nko,Iko,qko,g2,zge,jko,Dko,vO,Gko,Oko,Vko,h2,Qge,Xko,zko,FO,Qko,Wko,Hko,p2,Wge,Uko,Jko,TO,Yko,Kko,Zko,_2,Hge,eSo,oSo,MO,rSo,tSo,aSo,u2,Uge,nSo,sSo,EO,lSo,iSo,dSo,b2,Jge,cSo,fSo,CO,mSo,gSo,hSo,v2,Yge,pSo,_So,wO,uSo,bSo,vSo,F2,Kge,FSo,TSo,AO,MSo,ESo,CSo,T2,Zge,wSo,ASo,LO,LSo,ySo,xSo,M2,ehe,$So,kSo,yO,SSo,RSo,PSo,E2,ohe,BSo,NSo,xO,ISo,qSo,jSo,C2,rhe,DSo,GSo,$O,OSo,VSo,XSo,w2,the,zSo,QSo,kO,WSo,HSo,USo,A2,ahe,JSo,YSo,SO,KSo,ZSo,eRo,L2,nhe,oRo,rRo,RO,tRo,aRo,nRo,y2,she,sRo,lRo,PO,iRo,dRo,cRo,x2,fRo,lhe,mRo,gRo,ihe,hRo,pRo,$2,fXe,Ui,k2,dhe,XL,_Ro,che,uRo,mXe,So,zL,bRo,Ji,vRo,BO,FRo,TRo,NO,MRo,ERo,CRo,QL,wRo,fhe,ARo,LRo,yRo,ct,WL,xRo,mhe,$Ro,kRo,Yi,SRo,ghe,RRo,PRo,IO,BRo,NRo,IRo,S2,qRo,Ze,HL,jRo,hhe,DRo,GRo,ja,ORo,phe,VRo,XRo,_he,zRo,QRo,uhe,WRo,HRo,URo,W,R2,bhe,JRo,YRo,qO,KRo,ZRo,ePo,P2,vhe,oPo,rPo,jO,tPo,aPo,nPo,B2,Fhe,sPo,lPo,DO,iPo,dPo,cPo,N2,The,fPo,mPo,GO,gPo,hPo,pPo,I2,Mhe,_Po,uPo,OO,bPo,vPo,FPo,q2,Ehe,TPo,MPo,VO,EPo,CPo,wPo,j2,Che,APo,LPo,XO,yPo,xPo,$Po,D2,whe,kPo,SPo,zO,RPo,PPo,BPo,G2,Ahe,NPo,IPo,QO,qPo,jPo,DPo,O2,Lhe,GPo,OPo,WO,VPo,XPo,zPo,V2,yhe,QPo,WPo,HO,HPo,UPo,JPo,X2,xhe,YPo,KPo,UO,ZPo,eBo,oBo,z2,$he,rBo,tBo,JO,aBo,nBo,sBo,Q2,khe,lBo,iBo,YO,dBo,cBo,fBo,W2,She,mBo,gBo,KO,hBo,pBo,_Bo,H2,Rhe,uBo,bBo,ZO,vBo,FBo,TBo,U2,Phe,MBo,EBo,eV,CBo,wBo,ABo,J2,Bhe,LBo,yBo,oV,xBo,$Bo,kBo,Y2,Nhe,SBo,RBo,rV,PBo,BBo,NBo,K2,Ihe,IBo,qBo,tV,jBo,DBo,GBo,Z2,qhe,OBo,VBo,aV,XBo,zBo,QBo,eb,jhe,WBo,HBo,nV,UBo,JBo,YBo,ob,Dhe,KBo,ZBo,sV,eNo,oNo,rNo,rb,Ghe,tNo,aNo,lV,nNo,sNo,lNo,tb,Ohe,iNo,dNo,iV,cNo,fNo,mNo,ab,Vhe,gNo,hNo,dV,pNo,_No,uNo,nb,Xhe,bNo,vNo,cV,FNo,TNo,MNo,sb,zhe,ENo,CNo,fV,wNo,ANo,LNo,lb,Qhe,yNo,xNo,mV,$No,kNo,SNo,ib,Whe,RNo,PNo,gV,BNo,NNo,INo,db,Hhe,qNo,jNo,hV,DNo,GNo,ONo,cb,Uhe,VNo,XNo,pV,zNo,QNo,WNo,fb,Jhe,HNo,UNo,_V,JNo,YNo,KNo,mb,Yhe,ZNo,eIo,Khe,oIo,rIo,tIo,gb,Zhe,aIo,nIo,uV,sIo,lIo,iIo,hb,epe,dIo,cIo,bV,fIo,mIo,gIo,pb,ope,hIo,pIo,vV,_Io,uIo,bIo,_b,rpe,vIo,FIo,FV,TIo,MIo,EIo,ub,CIo,tpe,wIo,AIo,ape,LIo,yIo,bb,gXe,Ki,vb,npe,UL,xIo,spe,$Io,hXe,Ro,JL,kIo,Zi,SIo,TV,RIo,PIo,MV,BIo,NIo,IIo,YL,qIo,lpe,jIo,DIo,GIo,ft,KL,OIo,ipe,VIo,XIo,ed,zIo,dpe,QIo,WIo,EV,HIo,UIo,JIo,Fb,YIo,eo,ZL,KIo,cpe,ZIo,eqo,Da,oqo,fpe,rqo,tqo,mpe,aqo,nqo,gpe,sqo,lqo,iqo,pe,Tb,hpe,dqo,cqo,CV,fqo,mqo,gqo,Mb,ppe,hqo,pqo,wV,_qo,uqo,bqo,Eb,_pe,vqo,Fqo,AV,Tqo,Mqo,Eqo,Cb,upe,Cqo,wqo,LV,Aqo,Lqo,yqo,wb,bpe,xqo,$qo,yV,kqo,Sqo,Rqo,Ab,vpe,Pqo,Bqo,xV,Nqo,Iqo,qqo,Lb,Fpe,jqo,Dqo,$V,Gqo,Oqo,Vqo,yb,Tpe,Xqo,zqo,kV,Qqo,Wqo,Hqo,xb,Mpe,Uqo,Jqo,SV,Yqo,Kqo,Zqo,$b,Epe,ejo,ojo,RV,rjo,tjo,ajo,kb,Cpe,njo,sjo,PV,ljo,ijo,djo,Sb,wpe,cjo,fjo,BV,mjo,gjo,hjo,Rb,Ape,pjo,_jo,NV,ujo,bjo,vjo,Pb,Lpe,Fjo,Tjo,IV,Mjo,Ejo,Cjo,Bb,ype,wjo,Ajo,qV,Ljo,yjo,xjo,Nb,xpe,$jo,kjo,jV,Sjo,Rjo,Pjo,Ib,$pe,Bjo,Njo,DV,Ijo,qjo,jjo,qb,kpe,Djo,Gjo,GV,Ojo,Vjo,Xjo,jb,zjo,Spe,Qjo,Wjo,Rpe,Hjo,Ujo,Db,pXe,od,Gb,Ppe,ey,Jjo,Bpe,Yjo,_Xe,Po,oy,Kjo,rd,Zjo,OV,eDo,oDo,VV,rDo,tDo,aDo,ry,nDo,Npe,sDo,lDo,iDo,mt,ty,dDo,Ipe,cDo,fDo,td,mDo,qpe,gDo,hDo,XV,pDo,_Do,uDo,Ob,bDo,oo,ay,vDo,jpe,FDo,TDo,Ga,MDo,Dpe,EDo,CDo,Gpe,wDo,ADo,Ope,LDo,yDo,xDo,B,Vb,Vpe,$Do,kDo,zV,SDo,RDo,PDo,Xb,Xpe,BDo,NDo,QV,IDo,qDo,jDo,zb,zpe,DDo,GDo,WV,ODo,VDo,XDo,Qb,Qpe,zDo,QDo,HV,WDo,HDo,UDo,Wb,Wpe,JDo,YDo,UV,KDo,ZDo,eGo,Hb,Hpe,oGo,rGo,JV,tGo,aGo,nGo,Ub,Upe,sGo,lGo,YV,iGo,dGo,cGo,Jb,Jpe,fGo,mGo,KV,gGo,hGo,pGo,Yb,Ype,_Go,uGo,ZV,bGo,vGo,FGo,Kb,Kpe,TGo,MGo,eX,EGo,CGo,wGo,Zb,Zpe,AGo,LGo,oX,yGo,xGo,$Go,ev,e_e,kGo,SGo,rX,RGo,PGo,BGo,ov,o_e,NGo,IGo,tX,qGo,jGo,DGo,rv,r_e,GGo,OGo,aX,VGo,XGo,zGo,tv,t_e,QGo,WGo,nX,HGo,UGo,JGo,av,a_e,YGo,KGo,sX,ZGo,eOo,oOo,nv,n_e,rOo,tOo,lX,aOo,nOo,sOo,sv,s_e,lOo,iOo,iX,dOo,cOo,fOo,lv,l_e,mOo,gOo,dX,hOo,pOo,_Oo,iv,i_e,uOo,bOo,cX,vOo,FOo,TOo,dv,d_e,MOo,EOo,fX,COo,wOo,AOo,cv,c_e,LOo,yOo,mX,xOo,$Oo,kOo,fv,f_e,SOo,ROo,gX,POo,BOo,NOo,mv,m_e,IOo,qOo,hX,jOo,DOo,GOo,gv,g_e,OOo,VOo,pX,XOo,zOo,QOo,hv,h_e,WOo,HOo,_X,UOo,JOo,YOo,pv,p_e,KOo,ZOo,uX,eVo,oVo,rVo,_v,__e,tVo,aVo,bX,nVo,sVo,lVo,uv,u_e,iVo,dVo,vX,cVo,fVo,mVo,bv,b_e,gVo,hVo,FX,pVo,_Vo,uVo,vv,v_e,bVo,vVo,TX,FVo,TVo,MVo,Fv,F_e,EVo,CVo,MX,wVo,AVo,LVo,Tv,T_e,yVo,xVo,EX,$Vo,kVo,SVo,Mv,M_e,RVo,PVo,CX,BVo,NVo,IVo,Ev,E_e,qVo,jVo,wX,DVo,GVo,OVo,Cv,C_e,VVo,XVo,AX,zVo,QVo,WVo,wv,w_e,HVo,UVo,LX,JVo,YVo,KVo,Av,A_e,ZVo,eXo,yX,oXo,rXo,tXo,Lv,L_e,aXo,nXo,xX,sXo,lXo,iXo,yv,y_e,dXo,cXo,$X,fXo,mXo,gXo,xv,x_e,hXo,pXo,kX,_Xo,uXo,bXo,$v,$_e,vXo,FXo,SX,TXo,MXo,EXo,kv,k_e,CXo,wXo,RX,AXo,LXo,yXo,Sv,S_e,xXo,$Xo,PX,kXo,SXo,RXo,Rv,R_e,PXo,BXo,BX,NXo,IXo,qXo,Pv,P_e,jXo,DXo,NX,GXo,OXo,VXo,Bv,B_e,XXo,zXo,IX,QXo,WXo,HXo,Nv,N_e,UXo,JXo,qX,YXo,KXo,ZXo,Iv,I_e,ezo,ozo,jX,rzo,tzo,azo,qv,q_e,nzo,szo,DX,lzo,izo,dzo,jv,j_e,czo,fzo,GX,mzo,gzo,hzo,Dv,pzo,D_e,_zo,uzo,G_e,bzo,vzo,Gv,uXe,ad,Ov,O_e,ny,Fzo,V_e,Tzo,bXe,Bo,sy,Mzo,nd,Ezo,OX,Czo,wzo,VX,Azo,Lzo,yzo,ly,xzo,X_e,$zo,kzo,Szo,gt,iy,Rzo,z_e,Pzo,Bzo,sd,Nzo,Q_e,Izo,qzo,XX,jzo,Dzo,Gzo,Vv,Ozo,ro,dy,Vzo,W_e,Xzo,zzo,Oa,Qzo,H_e,Wzo,Hzo,U_e,Uzo,Jzo,J_e,Yzo,Kzo,Zzo,Z,Xv,Y_e,eQo,oQo,zX,rQo,tQo,aQo,zv,K_e,nQo,sQo,QX,lQo,iQo,dQo,Qv,Z_e,cQo,fQo,WX,mQo,gQo,hQo,Wv,eue,pQo,_Qo,HX,uQo,bQo,vQo,Hv,oue,FQo,TQo,UX,MQo,EQo,CQo,Uv,rue,wQo,AQo,JX,LQo,yQo,xQo,Jv,tue,$Qo,kQo,YX,SQo,RQo,PQo,Yv,aue,BQo,NQo,KX,IQo,qQo,jQo,Kv,nue,DQo,GQo,ZX,OQo,VQo,XQo,Zv,sue,zQo,QQo,ez,WQo,HQo,UQo,e3,lue,JQo,YQo,oz,KQo,ZQo,eWo,o3,iue,oWo,rWo,rz,tWo,aWo,nWo,r3,due,sWo,lWo,tz,iWo,dWo,cWo,t3,cue,fWo,mWo,az,gWo,hWo,pWo,a3,fue,_Wo,uWo,nz,bWo,vWo,FWo,n3,mue,TWo,MWo,sz,EWo,CWo,wWo,s3,gue,AWo,LWo,lz,yWo,xWo,$Wo,l3,hue,kWo,SWo,iz,RWo,PWo,BWo,i3,pue,NWo,IWo,dz,qWo,jWo,DWo,d3,_ue,GWo,OWo,cz,VWo,XWo,zWo,c3,uue,QWo,WWo,fz,HWo,UWo,JWo,f3,bue,YWo,KWo,mz,ZWo,eHo,oHo,m3,vue,rHo,tHo,gz,aHo,nHo,sHo,g3,Fue,lHo,iHo,hz,dHo,cHo,fHo,h3,Tue,mHo,gHo,pz,hHo,pHo,_Ho,p3,Mue,uHo,bHo,_z,vHo,FHo,THo,_3,Eue,MHo,EHo,uz,CHo,wHo,AHo,u3,Cue,LHo,yHo,bz,xHo,$Ho,kHo,b3,wue,SHo,RHo,vz,PHo,BHo,NHo,v3,Aue,IHo,qHo,Fz,jHo,DHo,GHo,F3,OHo,Lue,VHo,XHo,yue,zHo,QHo,T3,vXe,ld,M3,xue,cy,WHo,$ue,HHo,FXe,No,fy,UHo,id,JHo,Tz,YHo,KHo,Mz,ZHo,eUo,oUo,my,rUo,kue,tUo,aUo,nUo,ht,gy,sUo,Sue,lUo,iUo,dd,dUo,Rue,cUo,fUo,Ez,mUo,gUo,hUo,E3,pUo,to,hy,_Uo,Pue,uUo,bUo,Va,vUo,Bue,FUo,TUo,Nue,MUo,EUo,Iue,CUo,wUo,AUo,Io,C3,que,LUo,yUo,Cz,xUo,$Uo,kUo,w3,jue,SUo,RUo,wz,PUo,BUo,NUo,A3,Due,IUo,qUo,Az,jUo,DUo,GUo,L3,Gue,OUo,VUo,Lz,XUo,zUo,QUo,y3,Oue,WUo,HUo,yz,UUo,JUo,YUo,x3,Vue,KUo,ZUo,xz,eJo,oJo,rJo,$3,tJo,Xue,aJo,nJo,zue,sJo,lJo,k3,TXe,cd,S3,Que,py,iJo,Wue,dJo,MXe,qo,_y,cJo,fd,fJo,$z,mJo,gJo,kz,hJo,pJo,_Jo,uy,uJo,Hue,bJo,vJo,FJo,pt,by,TJo,Uue,MJo,EJo,md,CJo,Jue,wJo,AJo,Sz,LJo,yJo,xJo,R3,$Jo,ao,vy,kJo,Yue,SJo,RJo,Xa,PJo,Kue,BJo,NJo,Zue,IJo,qJo,e1e,jJo,DJo,GJo,U,P3,o1e,OJo,VJo,Rz,XJo,zJo,QJo,B3,r1e,WJo,HJo,Pz,UJo,JJo,YJo,N3,t1e,KJo,ZJo,Bz,eYo,oYo,rYo,I3,a1e,tYo,aYo,Nz,nYo,sYo,lYo,q3,n1e,iYo,dYo,Iz,cYo,fYo,mYo,j3,s1e,gYo,hYo,qz,pYo,_Yo,uYo,D3,l1e,bYo,vYo,jz,FYo,TYo,MYo,G3,i1e,EYo,CYo,Dz,wYo,AYo,LYo,O3,d1e,yYo,xYo,Gz,$Yo,kYo,SYo,V3,c1e,RYo,PYo,Oz,BYo,NYo,IYo,X3,f1e,qYo,jYo,Vz,DYo,GYo,OYo,z3,m1e,VYo,XYo,Xz,zYo,QYo,WYo,Q3,g1e,HYo,UYo,zz,JYo,YYo,KYo,W3,h1e,ZYo,eKo,Qz,oKo,rKo,tKo,H3,p1e,aKo,nKo,Wz,sKo,lKo,iKo,U3,_1e,dKo,cKo,Hz,fKo,mKo,gKo,J3,u1e,hKo,pKo,Uz,_Ko,uKo,bKo,Y3,b1e,vKo,FKo,Jz,TKo,MKo,EKo,K3,v1e,CKo,wKo,Yz,AKo,LKo,yKo,Z3,F1e,xKo,$Ko,Kz,kKo,SKo,RKo,eF,T1e,PKo,BKo,Zz,NKo,IKo,qKo,oF,M1e,jKo,DKo,eQ,GKo,OKo,VKo,rF,E1e,XKo,zKo,oQ,QKo,WKo,HKo,tF,C1e,UKo,JKo,rQ,YKo,KKo,ZKo,aF,w1e,eZo,oZo,tQ,rZo,tZo,aZo,nF,A1e,nZo,sZo,aQ,lZo,iZo,dZo,sF,L1e,cZo,fZo,nQ,mZo,gZo,hZo,lF,y1e,pZo,_Zo,sQ,uZo,bZo,vZo,iF,x1e,FZo,TZo,lQ,MZo,EZo,CZo,dF,$1e,wZo,AZo,iQ,LZo,yZo,xZo,cF,k1e,$Zo,kZo,dQ,SZo,RZo,PZo,fF,S1e,BZo,NZo,cQ,IZo,qZo,jZo,mF,R1e,DZo,GZo,fQ,OZo,VZo,XZo,gF,P1e,zZo,QZo,mQ,WZo,HZo,UZo,hF,B1e,JZo,YZo,gQ,KZo,ZZo,eer,pF,N1e,oer,rer,hQ,ter,aer,ner,_F,ser,I1e,ler,ier,q1e,der,cer,uF,EXe,gd,bF,j1e,Fy,fer,D1e,mer,CXe,jo,Ty,ger,hd,her,pQ,per,_er,_Q,uer,ber,ver,My,Fer,G1e,Ter,Mer,Eer,_t,Ey,Cer,O1e,wer,Aer,pd,Ler,V1e,yer,xer,uQ,$er,ker,Ser,vF,Rer,no,Cy,Per,X1e,Ber,Ner,za,Ier,z1e,qer,jer,Q1e,Der,Ger,W1e,Oer,Ver,Xer,V,FF,H1e,zer,Qer,bQ,Wer,Her,Uer,TF,U1e,Jer,Yer,vQ,Ker,Zer,eor,MF,J1e,oor,ror,FQ,tor,aor,nor,EF,Y1e,sor,lor,TQ,ior,dor,cor,CF,K1e,mor,gor,MQ,hor,por,_or,wF,Z1e,uor,bor,EQ,vor,For,Tor,AF,e2e,Mor,Eor,CQ,Cor,wor,Aor,LF,o2e,Lor,yor,wQ,xor,$or,kor,yF,r2e,Sor,Ror,AQ,Por,Bor,Nor,xF,t2e,Ior,qor,LQ,jor,Dor,Gor,$F,a2e,Oor,Vor,yQ,Xor,zor,Qor,kF,n2e,Wor,Hor,xQ,Uor,Jor,Yor,SF,s2e,Kor,Zor,$Q,err,orr,rrr,RF,l2e,trr,arr,kQ,nrr,srr,lrr,PF,i2e,irr,drr,SQ,crr,frr,mrr,BF,d2e,grr,hrr,RQ,prr,_rr,urr,NF,c2e,brr,vrr,PQ,Frr,Trr,Mrr,IF,f2e,Err,Crr,BQ,wrr,Arr,Lrr,qF,m2e,yrr,xrr,NQ,$rr,krr,Srr,jF,g2e,Rrr,Prr,IQ,Brr,Nrr,Irr,DF,h2e,qrr,jrr,qQ,Drr,Grr,Orr,GF,p2e,Vrr,Xrr,jQ,zrr,Qrr,Wrr,OF,_2e,Hrr,Urr,DQ,Jrr,Yrr,Krr,VF,u2e,Zrr,etr,GQ,otr,rtr,ttr,XF,b2e,atr,ntr,OQ,str,ltr,itr,zF,v2e,dtr,ctr,VQ,ftr,mtr,gtr,QF,F2e,htr,ptr,XQ,_tr,utr,btr,WF,T2e,vtr,Ftr,zQ,Ttr,Mtr,Etr,HF,M2e,Ctr,wtr,QQ,Atr,Ltr,ytr,UF,E2e,xtr,$tr,WQ,ktr,Str,Rtr,JF,C2e,Ptr,Btr,HQ,Ntr,Itr,qtr,YF,w2e,jtr,Dtr,UQ,Gtr,Otr,Vtr,KF,A2e,Xtr,ztr,JQ,Qtr,Wtr,Htr,ZF,L2e,Utr,Jtr,YQ,Ytr,Ktr,Ztr,eT,y2e,ear,oar,KQ,rar,tar,aar,oT,x2e,nar,sar,ZQ,lar,iar,dar,rT,$2e,car,far,eW,mar,gar,har,tT,k2e,par,_ar,oW,uar,bar,Far,aT,S2e,Tar,Mar,rW,Ear,Car,war,nT,R2e,Aar,Lar,tW,yar,xar,$ar,sT,P2e,kar,Sar,aW,Rar,Par,Bar,lT,B2e,Nar,Iar,nW,qar,jar,Dar,iT,Gar,N2e,Oar,Var,I2e,Xar,zar,dT,wXe,_d,cT,q2e,wy,Qar,j2e,War,AXe,Do,Ay,Har,ud,Uar,sW,Jar,Yar,lW,Kar,Zar,enr,Ly,onr,D2e,rnr,tnr,anr,ut,yy,nnr,G2e,snr,lnr,bd,inr,O2e,dnr,cnr,iW,fnr,mnr,gnr,fT,hnr,so,xy,pnr,V2e,_nr,unr,Qa,bnr,X2e,vnr,Fnr,z2e,Tnr,Mnr,Q2e,Enr,Cnr,wnr,W2e,mT,H2e,Anr,Lnr,dW,ynr,xnr,$nr,gT,knr,U2e,Snr,Rnr,J2e,Pnr,Bnr,hT,LXe,vd,pT,Y2e,$y,Nnr,K2e,Inr,yXe,Go,ky,qnr,Fd,jnr,cW,Dnr,Gnr,fW,Onr,Vnr,Xnr,Sy,znr,Z2e,Qnr,Wnr,Hnr,bt,Ry,Unr,ebe,Jnr,Ynr,Td,Knr,obe,Znr,esr,mW,osr,rsr,tsr,_T,asr,lo,Py,nsr,rbe,ssr,lsr,Wa,isr,tbe,dsr,csr,abe,fsr,msr,nbe,gsr,hsr,psr,ve,uT,sbe,_sr,usr,gW,bsr,vsr,Fsr,bT,lbe,Tsr,Msr,hW,Esr,Csr,wsr,vT,ibe,Asr,Lsr,pW,ysr,xsr,$sr,FT,dbe,ksr,Ssr,_W,Rsr,Psr,Bsr,Hs,cbe,Nsr,Isr,uW,qsr,jsr,bW,Dsr,Gsr,Osr,TT,fbe,Vsr,Xsr,vW,zsr,Qsr,Wsr,Us,mbe,Hsr,Usr,FW,Jsr,Ysr,TW,Ksr,Zsr,elr,MT,gbe,olr,rlr,MW,tlr,alr,nlr,vt,hbe,slr,llr,EW,ilr,dlr,CW,clr,flr,wW,mlr,glr,hlr,ET,pbe,plr,_lr,AW,ulr,blr,vlr,CT,_be,Flr,Tlr,LW,Mlr,Elr,Clr,wT,ube,wlr,Alr,yW,Llr,ylr,xlr,AT,bbe,$lr,klr,xW,Slr,Rlr,Plr,LT,vbe,Blr,Nlr,$W,Ilr,qlr,jlr,yT,Fbe,Dlr,Glr,kW,Olr,Vlr,Xlr,xT,Tbe,zlr,Qlr,SW,Wlr,Hlr,Ulr,$T,Jlr,Mbe,Ylr,Klr,Ebe,Zlr,eir,kT,xXe,Md,ST,Cbe,By,oir,wbe,rir,$Xe,Oo,Ny,tir,Ed,air,RW,nir,sir,PW,lir,iir,dir,Iy,cir,Abe,fir,mir,gir,Ft,qy,hir,Lbe,pir,_ir,Cd,uir,ybe,bir,vir,BW,Fir,Tir,Mir,RT,Eir,io,jy,Cir,xbe,wir,Air,Ha,Lir,$be,yir,xir,kbe,$ir,kir,Sbe,Sir,Rir,Pir,Rbe,PT,Pbe,Bir,Nir,NW,Iir,qir,jir,BT,Dir,Bbe,Gir,Oir,Nbe,Vir,Xir,NT,kXe,wd,IT,Ibe,Dy,zir,qbe,Qir,SXe,Vo,Gy,Wir,Ad,Hir,IW,Uir,Jir,qW,Yir,Kir,Zir,Oy,edr,jbe,odr,rdr,tdr,Tt,Vy,adr,Dbe,ndr,sdr,Ld,ldr,Gbe,idr,ddr,jW,cdr,fdr,mdr,qT,gdr,co,Xy,hdr,Obe,pdr,_dr,Ua,udr,Vbe,bdr,vdr,Xbe,Fdr,Tdr,zbe,Mdr,Edr,Cdr,Qbe,jT,Wbe,wdr,Adr,DW,Ldr,ydr,xdr,DT,$dr,Hbe,kdr,Sdr,Ube,Rdr,Pdr,GT,RXe,yd,OT,Jbe,zy,Bdr,Ybe,Ndr,PXe,Xo,Qy,Idr,xd,qdr,GW,jdr,Ddr,OW,Gdr,Odr,Vdr,Wy,Xdr,Kbe,zdr,Qdr,Wdr,Mt,Hy,Hdr,Zbe,Udr,Jdr,$d,Ydr,eve,Kdr,Zdr,VW,ecr,ocr,rcr,VT,tcr,fo,Uy,acr,ove,ncr,scr,Ja,lcr,rve,icr,dcr,tve,ccr,fcr,ave,mcr,gcr,hcr,Pe,XT,nve,pcr,_cr,XW,ucr,bcr,vcr,zT,sve,Fcr,Tcr,zW,Mcr,Ecr,Ccr,QT,lve,wcr,Acr,QW,Lcr,ycr,xcr,WT,ive,$cr,kcr,WW,Scr,Rcr,Pcr,HT,dve,Bcr,Ncr,HW,Icr,qcr,jcr,UT,cve,Dcr,Gcr,UW,Ocr,Vcr,Xcr,JT,fve,zcr,Qcr,JW,Wcr,Hcr,Ucr,YT,mve,Jcr,Ycr,YW,Kcr,Zcr,efr,KT,gve,ofr,rfr,KW,tfr,afr,nfr,ZT,sfr,hve,lfr,ifr,pve,dfr,cfr,e8,BXe,kd,o8,_ve,Jy,ffr,uve,mfr,NXe,zo,Yy,gfr,Sd,hfr,ZW,pfr,_fr,eH,ufr,bfr,vfr,Ky,Ffr,bve,Tfr,Mfr,Efr,Et,Zy,Cfr,vve,wfr,Afr,Rd,Lfr,Fve,yfr,xfr,oH,$fr,kfr,Sfr,r8,Rfr,mo,e9,Pfr,Tve,Bfr,Nfr,Ya,Ifr,Mve,qfr,jfr,Eve,Dfr,Gfr,Cve,Ofr,Vfr,Xfr,ot,t8,wve,zfr,Qfr,rH,Wfr,Hfr,Ufr,a8,Ave,Jfr,Yfr,tH,Kfr,Zfr,emr,n8,Lve,omr,rmr,aH,tmr,amr,nmr,s8,yve,smr,lmr,nH,imr,dmr,cmr,l8,xve,fmr,mmr,sH,gmr,hmr,pmr,i8,_mr,$ve,umr,bmr,kve,vmr,Fmr,d8,IXe,Pd,c8,Sve,o9,Tmr,Rve,Mmr,qXe,Qo,r9,Emr,Bd,Cmr,lH,wmr,Amr,iH,Lmr,ymr,xmr,t9,$mr,Pve,kmr,Smr,Rmr,Ct,a9,Pmr,Bve,Bmr,Nmr,Nd,Imr,Nve,qmr,jmr,dH,Dmr,Gmr,Omr,f8,Vmr,go,n9,Xmr,Ive,zmr,Qmr,Ka,Wmr,qve,Hmr,Umr,jve,Jmr,Ymr,Dve,Kmr,Zmr,egr,Le,m8,Gve,ogr,rgr,cH,tgr,agr,ngr,g8,Ove,sgr,lgr,fH,igr,dgr,cgr,h8,Vve,fgr,mgr,mH,ggr,hgr,pgr,p8,Xve,_gr,ugr,gH,bgr,vgr,Fgr,_8,zve,Tgr,Mgr,hH,Egr,Cgr,wgr,u8,Qve,Agr,Lgr,pH,ygr,xgr,$gr,b8,Wve,kgr,Sgr,_H,Rgr,Pgr,Bgr,v8,Hve,Ngr,Igr,uH,qgr,jgr,Dgr,F8,Uve,Ggr,Ogr,bH,Vgr,Xgr,zgr,T8,Jve,Qgr,Wgr,vH,Hgr,Ugr,Jgr,M8,Ygr,Yve,Kgr,Zgr,Kve,ehr,ohr,E8,jXe,Id,C8,Zve,s9,rhr,e3e,thr,DXe,Wo,l9,ahr,qd,nhr,FH,shr,lhr,TH,ihr,dhr,chr,i9,fhr,o3e,mhr,ghr,hhr,wt,d9,phr,r3e,_hr,uhr,jd,bhr,t3e,vhr,Fhr,MH,Thr,Mhr,Ehr,w8,Chr,ho,c9,whr,a3e,Ahr,Lhr,Za,yhr,n3e,xhr,$hr,s3e,khr,Shr,l3e,Rhr,Phr,Bhr,f9,A8,i3e,Nhr,Ihr,EH,qhr,jhr,Dhr,L8,d3e,Ghr,Ohr,CH,Vhr,Xhr,zhr,y8,Qhr,c3e,Whr,Hhr,f3e,Uhr,Jhr,x8,GXe,Dd,$8,m3e,m9,Yhr,g3e,Khr,OXe,Ho,g9,Zhr,Gd,epr,wH,opr,rpr,AH,tpr,apr,npr,h9,spr,h3e,lpr,ipr,dpr,At,p9,cpr,p3e,fpr,mpr,Od,gpr,_3e,hpr,ppr,LH,_pr,upr,bpr,k8,vpr,po,_9,Fpr,u3e,Tpr,Mpr,en,Epr,b3e,Cpr,wpr,v3e,Apr,Lpr,F3e,ypr,xpr,$pr,rt,S8,T3e,kpr,Spr,yH,Rpr,Ppr,Bpr,R8,M3e,Npr,Ipr,xH,qpr,jpr,Dpr,P8,E3e,Gpr,Opr,$H,Vpr,Xpr,zpr,B8,C3e,Qpr,Wpr,kH,Hpr,Upr,Jpr,N8,w3e,Ypr,Kpr,SH,Zpr,e_r,o_r,I8,r_r,A3e,t_r,a_r,L3e,n_r,s_r,q8,VXe,Vd,j8,y3e,u9,l_r,x3e,i_r,XXe,Uo,b9,d_r,Xd,c_r,RH,f_r,m_r,PH,g_r,h_r,p_r,v9,__r,$3e,u_r,b_r,v_r,Lt,F9,F_r,k3e,T_r,M_r,zd,E_r,S3e,C_r,w_r,BH,A_r,L_r,y_r,D8,x_r,_o,T9,$_r,R3e,k_r,S_r,on,R_r,P3e,P_r,B_r,B3e,N_r,I_r,N3e,q_r,j_r,D_r,Qd,G8,I3e,G_r,O_r,NH,V_r,X_r,z_r,O8,q3e,Q_r,W_r,IH,H_r,U_r,J_r,V8,j3e,Y_r,K_r,qH,Z_r,eur,our,X8,rur,D3e,tur,aur,G3e,nur,sur,z8,zXe,Wd,Q8,O3e,M9,lur,V3e,iur,QXe,Jo,E9,dur,Hd,cur,jH,fur,mur,DH,gur,hur,pur,C9,_ur,X3e,uur,bur,vur,yt,w9,Fur,z3e,Tur,Mur,Ud,Eur,Q3e,Cur,wur,GH,Aur,Lur,yur,W8,xur,uo,A9,$ur,W3e,kur,Sur,rn,Rur,H3e,Pur,Bur,U3e,Nur,Iur,J3e,qur,jur,Dur,L9,H8,Y3e,Gur,Our,OH,Vur,Xur,zur,U8,K3e,Qur,Wur,VH,Hur,Uur,Jur,J8,Yur,Z3e,Kur,Zur,eFe,e1r,o1r,Y8,WXe,Jd,K8,oFe,y9,r1r,rFe,t1r,HXe,Yo,x9,a1r,Yd,n1r,XH,s1r,l1r,zH,i1r,d1r,c1r,$9,f1r,tFe,m1r,g1r,h1r,xt,k9,p1r,aFe,_1r,u1r,Kd,b1r,nFe,v1r,F1r,QH,T1r,M1r,E1r,Z8,C1r,bo,S9,w1r,sFe,A1r,L1r,tn,y1r,lFe,x1r,$1r,iFe,k1r,S1r,dFe,R1r,P1r,B1r,cFe,eM,fFe,N1r,I1r,WH,q1r,j1r,D1r,oM,G1r,mFe,O1r,V1r,gFe,X1r,z1r,rM,UXe,Zd,tM,hFe,R9,Q1r,pFe,W1r,JXe,Ko,P9,H1r,ec,U1r,HH,J1r,Y1r,UH,K1r,Z1r,e2r,B9,o2r,_Fe,r2r,t2r,a2r,$t,N9,n2r,uFe,s2r,l2r,oc,i2r,bFe,d2r,c2r,JH,f2r,m2r,g2r,aM,h2r,vo,I9,p2r,vFe,_2r,u2r,an,b2r,FFe,v2r,F2r,TFe,T2r,M2r,MFe,E2r,C2r,w2r,tt,nM,EFe,A2r,L2r,YH,y2r,x2r,$2r,sM,CFe,k2r,S2r,KH,R2r,P2r,B2r,lM,wFe,N2r,I2r,ZH,q2r,j2r,D2r,iM,AFe,G2r,O2r,eU,V2r,X2r,z2r,dM,LFe,Q2r,W2r,oU,H2r,U2r,J2r,cM,Y2r,yFe,K2r,Z2r,xFe,ebr,obr,fM,YXe,rc,mM,$Fe,q9,rbr,kFe,tbr,KXe,Zo,j9,abr,tc,nbr,rU,sbr,lbr,tU,ibr,dbr,cbr,D9,fbr,SFe,mbr,gbr,hbr,kt,G9,pbr,RFe,_br,ubr,ac,bbr,PFe,vbr,Fbr,aU,Tbr,Mbr,Ebr,gM,Cbr,Fo,O9,wbr,BFe,Abr,Lbr,nn,ybr,NFe,xbr,$br,IFe,kbr,Sbr,qFe,Rbr,Pbr,Bbr,jFe,hM,DFe,Nbr,Ibr,nU,qbr,jbr,Dbr,pM,Gbr,GFe,Obr,Vbr,OFe,Xbr,zbr,_M,ZXe,nc,uM,VFe,V9,Qbr,XFe,Wbr,eze,er,X9,Hbr,sc,Ubr,sU,Jbr,Ybr,lU,Kbr,Zbr,evr,z9,ovr,zFe,rvr,tvr,avr,St,Q9,nvr,QFe,svr,lvr,lc,ivr,WFe,dvr,cvr,iU,fvr,mvr,gvr,bM,hvr,xr,W9,pvr,HFe,_vr,uvr,sn,bvr,UFe,vvr,Fvr,JFe,Tvr,Mvr,YFe,Evr,Cvr,wvr,j,vM,KFe,Avr,Lvr,dU,yvr,xvr,$vr,FM,ZFe,kvr,Svr,cU,Rvr,Pvr,Bvr,TM,eTe,Nvr,Ivr,fU,qvr,jvr,Dvr,MM,oTe,Gvr,Ovr,mU,Vvr,Xvr,zvr,EM,rTe,Qvr,Wvr,gU,Hvr,Uvr,Jvr,CM,tTe,Yvr,Kvr,hU,Zvr,e3r,o3r,wM,aTe,r3r,t3r,pU,a3r,n3r,s3r,AM,nTe,l3r,i3r,_U,d3r,c3r,f3r,LM,sTe,m3r,g3r,uU,h3r,p3r,_3r,yM,lTe,u3r,b3r,bU,v3r,F3r,T3r,xM,iTe,M3r,E3r,vU,C3r,w3r,A3r,$M,dTe,L3r,y3r,FU,x3r,$3r,k3r,kM,cTe,S3r,R3r,TU,P3r,B3r,N3r,SM,fTe,I3r,q3r,MU,j3r,D3r,G3r,RM,mTe,O3r,V3r,EU,X3r,z3r,Q3r,PM,gTe,W3r,H3r,CU,U3r,J3r,Y3r,BM,hTe,K3r,Z3r,wU,eFr,oFr,rFr,Js,pTe,tFr,aFr,AU,nFr,sFr,LU,lFr,iFr,dFr,NM,_Te,cFr,fFr,yU,mFr,gFr,hFr,IM,uTe,pFr,_Fr,xU,uFr,bFr,vFr,qM,bTe,FFr,TFr,$U,MFr,EFr,CFr,jM,vTe,wFr,AFr,kU,LFr,yFr,xFr,DM,FTe,$Fr,kFr,SU,SFr,RFr,PFr,GM,TTe,BFr,NFr,RU,IFr,qFr,jFr,OM,MTe,DFr,GFr,PU,OFr,VFr,XFr,VM,ETe,zFr,QFr,BU,WFr,HFr,UFr,XM,CTe,JFr,YFr,NU,KFr,ZFr,eTr,zM,wTe,oTr,rTr,IU,tTr,aTr,nTr,QM,ATe,sTr,lTr,qU,iTr,dTr,cTr,WM,LTe,fTr,mTr,jU,gTr,hTr,pTr,HM,yTe,_Tr,uTr,DU,bTr,vTr,FTr,UM,xTe,TTr,MTr,GU,ETr,CTr,wTr,JM,$Te,ATr,LTr,OU,yTr,xTr,$Tr,YM,kTe,kTr,STr,VU,RTr,PTr,BTr,KM,STe,NTr,ITr,XU,qTr,jTr,DTr,ZM,RTe,GTr,OTr,zU,VTr,XTr,zTr,e4,PTe,QTr,WTr,QU,HTr,UTr,JTr,o4,BTe,YTr,KTr,WU,ZTr,e8r,o8r,r4,NTe,r8r,t8r,HU,a8r,n8r,s8r,t4,ITe,l8r,i8r,UU,d8r,c8r,f8r,a4,qTe,m8r,g8r,JU,h8r,p8r,_8r,n4,jTe,u8r,b8r,YU,v8r,F8r,T8r,s4,DTe,M8r,E8r,KU,C8r,w8r,A8r,l4,GTe,L8r,y8r,ZU,x8r,$8r,k8r,i4,OTe,S8r,R8r,eJ,P8r,B8r,N8r,d4,VTe,I8r,q8r,oJ,j8r,D8r,G8r,c4,XTe,O8r,V8r,rJ,X8r,z8r,Q8r,f4,zTe,W8r,H8r,tJ,U8r,J8r,Y8r,m4,QTe,K8r,Z8r,aJ,eMr,oMr,rMr,g4,oze,ic,h4,WTe,H9,tMr,HTe,aMr,rze,or,U9,nMr,dc,sMr,nJ,lMr,iMr,sJ,dMr,cMr,fMr,J9,mMr,UTe,gMr,hMr,pMr,Rt,Y9,_Mr,JTe,uMr,bMr,cc,vMr,YTe,FMr,TMr,lJ,MMr,EMr,CMr,p4,wMr,$r,K9,AMr,KTe,LMr,yMr,ln,xMr,ZTe,$Mr,kMr,e8e,SMr,RMr,o8e,PMr,BMr,NMr,se,_4,r8e,IMr,qMr,iJ,jMr,DMr,GMr,u4,t8e,OMr,VMr,dJ,XMr,zMr,QMr,b4,a8e,WMr,HMr,cJ,UMr,JMr,YMr,v4,n8e,KMr,ZMr,fJ,e4r,o4r,r4r,F4,s8e,t4r,a4r,mJ,n4r,s4r,l4r,T4,l8e,i4r,d4r,gJ,c4r,f4r,m4r,M4,i8e,g4r,h4r,hJ,p4r,_4r,u4r,E4,d8e,b4r,v4r,pJ,F4r,T4r,M4r,C4,c8e,E4r,C4r,_J,w4r,A4r,L4r,w4,f8e,y4r,x4r,uJ,$4r,k4r,S4r,A4,m8e,R4r,P4r,bJ,B4r,N4r,I4r,L4,g8e,q4r,j4r,vJ,D4r,G4r,O4r,y4,h8e,V4r,X4r,FJ,z4r,Q4r,W4r,x4,p8e,H4r,U4r,TJ,J4r,Y4r,K4r,$4,_8e,Z4r,eEr,MJ,oEr,rEr,tEr,k4,u8e,aEr,nEr,EJ,sEr,lEr,iEr,S4,b8e,dEr,cEr,CJ,fEr,mEr,gEr,R4,v8e,hEr,pEr,wJ,_Er,uEr,bEr,P4,F8e,vEr,FEr,AJ,TEr,MEr,EEr,B4,T8e,CEr,wEr,LJ,AEr,LEr,yEr,N4,M8e,xEr,$Er,yJ,kEr,SEr,REr,I4,E8e,PEr,BEr,xJ,NEr,IEr,qEr,q4,C8e,jEr,DEr,$J,GEr,OEr,VEr,j4,tze,fc,D4,w8e,Z9,XEr,A8e,zEr,aze,rr,ex,QEr,mc,WEr,kJ,HEr,UEr,SJ,JEr,YEr,KEr,ox,ZEr,L8e,eCr,oCr,rCr,Pt,rx,tCr,y8e,aCr,nCr,gc,sCr,x8e,lCr,iCr,RJ,dCr,cCr,fCr,G4,mCr,kr,tx,gCr,$8e,hCr,pCr,dn,_Cr,k8e,uCr,bCr,S8e,vCr,FCr,R8e,TCr,MCr,ECr,Me,O4,P8e,CCr,wCr,PJ,ACr,LCr,yCr,V4,B8e,xCr,$Cr,BJ,kCr,SCr,RCr,X4,N8e,PCr,BCr,NJ,NCr,ICr,qCr,z4,I8e,jCr,DCr,IJ,GCr,OCr,VCr,Q4,q8e,XCr,zCr,qJ,QCr,WCr,HCr,W4,j8e,UCr,JCr,jJ,YCr,KCr,ZCr,H4,D8e,e5r,o5r,DJ,r5r,t5r,a5r,U4,G8e,n5r,s5r,GJ,l5r,i5r,d5r,J4,O8e,c5r,f5r,OJ,m5r,g5r,h5r,Y4,V8e,p5r,_5r,VJ,u5r,b5r,v5r,K4,X8e,F5r,T5r,XJ,M5r,E5r,C5r,Z4,z8e,w5r,A5r,zJ,L5r,y5r,x5r,eE,Q8e,$5r,k5r,QJ,S5r,R5r,P5r,oE,nze,hc,rE,W8e,ax,B5r,H8e,N5r,sze,tr,nx,I5r,pc,q5r,WJ,j5r,D5r,HJ,G5r,O5r,V5r,sx,X5r,U8e,z5r,Q5r,W5r,Bt,lx,H5r,J8e,U5r,J5r,_c,Y5r,Y8e,K5r,Z5r,UJ,e0r,o0r,r0r,tE,t0r,Sr,ix,a0r,K8e,n0r,s0r,cn,l0r,Z8e,i0r,d0r,eMe,c0r,f0r,oMe,m0r,g0r,h0r,ar,aE,rMe,p0r,_0r,JJ,u0r,b0r,v0r,nE,tMe,F0r,T0r,YJ,M0r,E0r,C0r,sE,aMe,w0r,A0r,KJ,L0r,y0r,x0r,lE,nMe,$0r,k0r,ZJ,S0r,R0r,P0r,iE,sMe,B0r,N0r,eY,I0r,q0r,j0r,dE,lMe,D0r,G0r,oY,O0r,V0r,X0r,cE,lze,uc,fE,iMe,dx,z0r,dMe,Q0r,ize,nr,cx,W0r,bc,H0r,rY,U0r,J0r,tY,Y0r,K0r,Z0r,fx,ewr,cMe,owr,rwr,twr,Nt,mx,awr,fMe,nwr,swr,vc,lwr,mMe,iwr,dwr,aY,cwr,fwr,mwr,mE,gwr,Rr,gx,hwr,gMe,pwr,_wr,fn,uwr,hMe,bwr,vwr,pMe,Fwr,Twr,_Me,Mwr,Ewr,Cwr,ie,gE,uMe,wwr,Awr,nY,Lwr,ywr,xwr,hE,bMe,$wr,kwr,sY,Swr,Rwr,Pwr,pE,vMe,Bwr,Nwr,lY,Iwr,qwr,jwr,_E,FMe,Dwr,Gwr,iY,Owr,Vwr,Xwr,uE,TMe,zwr,Qwr,dY,Wwr,Hwr,Uwr,bE,MMe,Jwr,Ywr,cY,Kwr,Zwr,eAr,vE,EMe,oAr,rAr,fY,tAr,aAr,nAr,FE,CMe,sAr,lAr,mY,iAr,dAr,cAr,TE,wMe,fAr,mAr,gY,gAr,hAr,pAr,ME,AMe,_Ar,uAr,hY,bAr,vAr,FAr,EE,LMe,TAr,MAr,pY,EAr,CAr,wAr,CE,yMe,AAr,LAr,_Y,yAr,xAr,$Ar,wE,xMe,kAr,SAr,uY,RAr,PAr,BAr,AE,$Me,NAr,IAr,bY,qAr,jAr,DAr,LE,kMe,GAr,OAr,vY,VAr,XAr,zAr,yE,SMe,QAr,WAr,FY,HAr,UAr,JAr,xE,RMe,YAr,KAr,TY,ZAr,e6r,o6r,$E,PMe,r6r,t6r,MY,a6r,n6r,s6r,kE,BMe,l6r,i6r,EY,d6r,c6r,f6r,SE,NMe,m6r,g6r,CY,h6r,p6r,_6r,RE,dze,Fc,PE,IMe,hx,u6r,qMe,b6r,cze,sr,px,v6r,Tc,F6r,wY,T6r,M6r,AY,E6r,C6r,w6r,_x,A6r,jMe,L6r,y6r,x6r,It,ux,$6r,DMe,k6r,S6r,Mc,R6r,GMe,P6r,B6r,LY,N6r,I6r,q6r,BE,j6r,Pr,bx,D6r,OMe,G6r,O6r,mn,V6r,VMe,X6r,z6r,XMe,Q6r,W6r,zMe,H6r,U6r,J6r,ye,NE,QMe,Y6r,K6r,yY,Z6r,e7r,o7r,IE,WMe,r7r,t7r,xY,a7r,n7r,s7r,qE,HMe,l7r,i7r,$Y,d7r,c7r,f7r,jE,UMe,m7r,g7r,kY,h7r,p7r,_7r,DE,JMe,u7r,b7r,SY,v7r,F7r,T7r,GE,YMe,M7r,E7r,RY,C7r,w7r,A7r,OE,KMe,L7r,y7r,PY,x7r,$7r,k7r,VE,ZMe,S7r,R7r,BY,P7r,B7r,N7r,XE,e4e,I7r,q7r,NY,j7r,D7r,G7r,zE,o4e,O7r,V7r,IY,X7r,z7r,Q7r,QE,fze,Ec,WE,r4e,vx,W7r,t4e,H7r,mze,lr,Fx,U7r,Cc,J7r,qY,Y7r,K7r,jY,Z7r,eLr,oLr,Tx,rLr,a4e,tLr,aLr,nLr,qt,Mx,sLr,n4e,lLr,iLr,wc,dLr,s4e,cLr,fLr,DY,mLr,gLr,hLr,HE,pLr,Br,Ex,_Lr,l4e,uLr,bLr,gn,vLr,i4e,FLr,TLr,d4e,MLr,ELr,c4e,CLr,wLr,ALr,te,UE,f4e,LLr,yLr,GY,xLr,$Lr,kLr,JE,m4e,SLr,RLr,OY,PLr,BLr,NLr,YE,g4e,ILr,qLr,VY,jLr,DLr,GLr,KE,h4e,OLr,VLr,XY,XLr,zLr,QLr,ZE,p4e,WLr,HLr,zY,ULr,JLr,YLr,eC,_4e,KLr,ZLr,QY,eyr,oyr,ryr,oC,u4e,tyr,ayr,WY,nyr,syr,lyr,rC,b4e,iyr,dyr,HY,cyr,fyr,myr,tC,v4e,gyr,hyr,UY,pyr,_yr,uyr,aC,F4e,byr,vyr,JY,Fyr,Tyr,Myr,nC,T4e,Eyr,Cyr,YY,wyr,Ayr,Lyr,sC,M4e,yyr,xyr,KY,$yr,kyr,Syr,lC,E4e,Ryr,Pyr,ZY,Byr,Nyr,Iyr,iC,C4e,qyr,jyr,eK,Dyr,Gyr,Oyr,dC,w4e,Vyr,Xyr,oK,zyr,Qyr,Wyr,cC,A4e,Hyr,Uyr,rK,Jyr,Yyr,Kyr,fC,L4e,Zyr,e9r,tK,o9r,r9r,t9r,mC,y4e,a9r,n9r,aK,s9r,l9r,i9r,gC,x4e,d9r,c9r,nK,f9r,m9r,g9r,hC,$4e,h9r,p9r,sK,_9r,u9r,b9r,pC,k4e,v9r,F9r,lK,T9r,M9r,E9r,_C,S4e,C9r,w9r,iK,A9r,L9r,y9r,uC,R4e,x9r,$9r,dK,k9r,S9r,R9r,bC,P4e,P9r,B9r,cK,N9r,I9r,q9r,vC,B4e,j9r,D9r,fK,G9r,O9r,V9r,FC,N4e,X9r,z9r,mK,Q9r,W9r,H9r,TC,gze,Ac,MC,I4e,Cx,U9r,q4e,J9r,hze,ir,wx,Y9r,Lc,K9r,gK,Z9r,exr,hK,oxr,rxr,txr,Ax,axr,j4e,nxr,sxr,lxr,jt,Lx,ixr,D4e,dxr,cxr,yc,fxr,G4e,mxr,gxr,pK,hxr,pxr,_xr,EC,uxr,Nr,yx,bxr,O4e,vxr,Fxr,hn,Txr,V4e,Mxr,Exr,X4e,Cxr,wxr,z4e,Axr,Lxr,yxr,_e,CC,Q4e,xxr,$xr,_K,kxr,Sxr,Rxr,wC,W4e,Pxr,Bxr,uK,Nxr,Ixr,qxr,AC,H4e,jxr,Dxr,bK,Gxr,Oxr,Vxr,LC,U4e,Xxr,zxr,vK,Qxr,Wxr,Hxr,yC,J4e,Uxr,Jxr,FK,Yxr,Kxr,Zxr,xC,Y4e,e$r,o$r,TK,r$r,t$r,a$r,$C,K4e,n$r,s$r,MK,l$r,i$r,d$r,kC,Z4e,c$r,f$r,EK,m$r,g$r,h$r,SC,eEe,p$r,_$r,CK,u$r,b$r,v$r,RC,oEe,F$r,T$r,wK,M$r,E$r,C$r,PC,rEe,w$r,A$r,AK,L$r,y$r,x$r,BC,tEe,$$r,k$r,LK,S$r,R$r,P$r,NC,aEe,B$r,N$r,yK,I$r,q$r,j$r,IC,nEe,D$r,G$r,xK,O$r,V$r,X$r,qC,sEe,z$r,Q$r,$K,W$r,H$r,U$r,jC,lEe,J$r,Y$r,kK,K$r,Z$r,ekr,DC,iEe,okr,rkr,SK,tkr,akr,nkr,GC,pze,xc,OC,dEe,xx,skr,cEe,lkr,_ze,dr,$x,ikr,$c,dkr,RK,ckr,fkr,PK,mkr,gkr,hkr,kx,pkr,fEe,_kr,ukr,bkr,Dt,Sx,vkr,mEe,Fkr,Tkr,kc,Mkr,gEe,Ekr,Ckr,BK,wkr,Akr,Lkr,VC,ykr,Ir,Rx,xkr,hEe,$kr,kkr,pn,Skr,pEe,Rkr,Pkr,_Ee,Bkr,Nkr,uEe,Ikr,qkr,jkr,Px,XC,bEe,Dkr,Gkr,NK,Okr,Vkr,Xkr,zC,vEe,zkr,Qkr,IK,Wkr,Hkr,Ukr,QC,uze,Sc,WC,FEe,Bx,Jkr,TEe,Ykr,bze,cr,Nx,Kkr,Rc,Zkr,qK,eSr,oSr,jK,rSr,tSr,aSr,Ix,nSr,MEe,sSr,lSr,iSr,Gt,qx,dSr,EEe,cSr,fSr,Pc,mSr,CEe,gSr,hSr,DK,pSr,_Sr,uSr,HC,bSr,qr,jx,vSr,wEe,FSr,TSr,_n,MSr,AEe,ESr,CSr,LEe,wSr,ASr,yEe,LSr,ySr,xSr,xEe,UC,$Ee,$Sr,kSr,GK,SSr,RSr,PSr,JC,vze,Bc,YC,kEe,Dx,BSr,SEe,NSr,Fze,fr,Gx,ISr,Nc,qSr,OK,jSr,DSr,VK,GSr,OSr,VSr,Ox,XSr,REe,zSr,QSr,WSr,Ot,Vx,HSr,PEe,USr,JSr,Ic,YSr,BEe,KSr,ZSr,XK,eRr,oRr,rRr,KC,tRr,jr,Xx,aRr,NEe,nRr,sRr,un,lRr,IEe,iRr,dRr,qEe,cRr,fRr,jEe,mRr,gRr,hRr,de,ZC,DEe,pRr,_Rr,zK,uRr,bRr,vRr,e5,GEe,FRr,TRr,QK,MRr,ERr,CRr,o5,OEe,wRr,ARr,WK,LRr,yRr,xRr,r5,VEe,$Rr,kRr,HK,SRr,RRr,PRr,t5,XEe,BRr,NRr,UK,IRr,qRr,jRr,a5,zEe,DRr,GRr,JK,ORr,VRr,XRr,n5,QEe,zRr,QRr,YK,WRr,HRr,URr,s5,WEe,JRr,YRr,KK,KRr,ZRr,ePr,l5,HEe,oPr,rPr,ZK,tPr,aPr,nPr,i5,UEe,sPr,lPr,eZ,iPr,dPr,cPr,d5,JEe,fPr,mPr,oZ,gPr,hPr,pPr,c5,YEe,_Pr,uPr,rZ,bPr,vPr,FPr,f5,KEe,TPr,MPr,tZ,EPr,CPr,wPr,m5,ZEe,APr,LPr,aZ,yPr,xPr,$Pr,g5,eCe,kPr,SPr,nZ,RPr,PPr,BPr,h5,oCe,NPr,IPr,sZ,qPr,jPr,DPr,p5,rCe,GPr,OPr,lZ,VPr,XPr,zPr,_5,tCe,QPr,WPr,iZ,HPr,UPr,JPr,u5,aCe,YPr,KPr,dZ,ZPr,eBr,oBr,b5,nCe,rBr,tBr,cZ,aBr,nBr,sBr,v5,Tze,qc,F5,sCe,zx,lBr,lCe,iBr,Mze,mr,Qx,dBr,jc,cBr,fZ,fBr,mBr,mZ,gBr,hBr,pBr,Wx,_Br,iCe,uBr,bBr,vBr,Vt,Hx,FBr,dCe,TBr,MBr,Dc,EBr,cCe,CBr,wBr,gZ,ABr,LBr,yBr,T5,xBr,Dr,Ux,$Br,fCe,kBr,SBr,bn,RBr,mCe,PBr,BBr,gCe,NBr,IBr,hCe,qBr,jBr,DBr,ce,M5,pCe,GBr,OBr,hZ,VBr,XBr,zBr,E5,_Ce,QBr,WBr,pZ,HBr,UBr,JBr,C5,uCe,YBr,KBr,_Z,ZBr,eNr,oNr,w5,bCe,rNr,tNr,uZ,aNr,nNr,sNr,A5,vCe,lNr,iNr,bZ,dNr,cNr,fNr,L5,FCe,mNr,gNr,vZ,hNr,pNr,_Nr,y5,TCe,uNr,bNr,FZ,vNr,FNr,TNr,x5,MCe,MNr,ENr,TZ,CNr,wNr,ANr,$5,ECe,LNr,yNr,MZ,xNr,$Nr,kNr,k5,CCe,SNr,RNr,EZ,PNr,BNr,NNr,S5,wCe,INr,qNr,CZ,jNr,DNr,GNr,R5,ACe,ONr,VNr,wZ,XNr,zNr,QNr,P5,LCe,WNr,HNr,AZ,UNr,JNr,YNr,B5,yCe,KNr,ZNr,LZ,eIr,oIr,rIr,N5,xCe,tIr,aIr,yZ,nIr,sIr,lIr,I5,$Ce,iIr,dIr,xZ,cIr,fIr,mIr,q5,kCe,gIr,hIr,$Z,pIr,_Ir,uIr,j5,SCe,bIr,vIr,kZ,FIr,TIr,MIr,D5,RCe,EIr,CIr,SZ,wIr,AIr,LIr,G5,PCe,yIr,xIr,RZ,$Ir,kIr,SIr,O5,Eze,Gc,V5,BCe,Jx,RIr,NCe,PIr,Cze,gr,Yx,BIr,Oc,NIr,PZ,IIr,qIr,BZ,jIr,DIr,GIr,Kx,OIr,ICe,VIr,XIr,zIr,Xt,Zx,QIr,qCe,WIr,HIr,Vc,UIr,jCe,JIr,YIr,NZ,KIr,ZIr,eqr,X5,oqr,Gr,e$,rqr,DCe,tqr,aqr,vn,nqr,GCe,sqr,lqr,OCe,iqr,dqr,VCe,cqr,fqr,mqr,XCe,z5,zCe,gqr,hqr,IZ,pqr,_qr,uqr,Q5,wze,Xc,W5,QCe,o$,bqr,WCe,vqr,Aze,hr,r$,Fqr,zc,Tqr,qZ,Mqr,Eqr,jZ,Cqr,wqr,Aqr,t$,Lqr,HCe,yqr,xqr,$qr,zt,a$,kqr,UCe,Sqr,Rqr,Qc,Pqr,JCe,Bqr,Nqr,DZ,Iqr,qqr,jqr,H5,Dqr,Or,n$,Gqr,YCe,Oqr,Vqr,Fn,Xqr,KCe,zqr,Qqr,ZCe,Wqr,Hqr,e5e,Uqr,Jqr,Yqr,o5e,U5,r5e,Kqr,Zqr,GZ,ejr,ojr,rjr,J5,Lze,Wc,Y5,t5e,s$,tjr,a5e,ajr,yze,pr,l$,njr,Hc,sjr,OZ,ljr,ijr,VZ,djr,cjr,fjr,i$,mjr,n5e,gjr,hjr,pjr,Qt,d$,_jr,s5e,ujr,bjr,Uc,vjr,l5e,Fjr,Tjr,XZ,Mjr,Ejr,Cjr,K5,wjr,Vr,c$,Ajr,i5e,Ljr,yjr,Tn,xjr,d5e,$jr,kjr,c5e,Sjr,Rjr,f5e,Pjr,Bjr,Njr,oe,Z5,m5e,Ijr,qjr,zZ,jjr,Djr,Gjr,e0,g5e,Ojr,Vjr,QZ,Xjr,zjr,Qjr,o0,h5e,Wjr,Hjr,WZ,Ujr,Jjr,Yjr,r0,p5e,Kjr,Zjr,HZ,eDr,oDr,rDr,t0,_5e,tDr,aDr,UZ,nDr,sDr,lDr,a0,u5e,iDr,dDr,JZ,cDr,fDr,mDr,n0,b5e,gDr,hDr,YZ,pDr,_Dr,uDr,s0,v5e,bDr,vDr,KZ,FDr,TDr,MDr,l0,F5e,EDr,CDr,ZZ,wDr,ADr,LDr,i0,T5e,yDr,xDr,eee,$Dr,kDr,SDr,d0,M5e,RDr,PDr,oee,BDr,NDr,IDr,c0,E5e,qDr,jDr,ree,DDr,GDr,ODr,f0,C5e,VDr,XDr,tee,zDr,QDr,WDr,m0,w5e,HDr,UDr,aee,JDr,YDr,KDr,g0,A5e,ZDr,eGr,nee,oGr,rGr,tGr,h0,L5e,aGr,nGr,see,sGr,lGr,iGr,p0,y5e,dGr,cGr,lee,fGr,mGr,gGr,_0,x5e,hGr,pGr,iee,_Gr,uGr,bGr,u0,$5e,vGr,FGr,dee,TGr,MGr,EGr,b0,k5e,CGr,wGr,cee,AGr,LGr,yGr,v0,S5e,xGr,$Gr,fee,kGr,SGr,RGr,F0,R5e,PGr,BGr,mee,NGr,IGr,qGr,T0,P5e,jGr,DGr,gee,GGr,OGr,VGr,M0,B5e,XGr,zGr,hee,QGr,WGr,HGr,E0,N5e,UGr,JGr,pee,YGr,KGr,ZGr,C0,I5e,eOr,oOr,_ee,rOr,tOr,aOr,w0,q5e,nOr,sOr,uee,lOr,iOr,dOr,A0,xze,Jc,L0,j5e,f$,cOr,D5e,fOr,$ze,_r,m$,mOr,Yc,gOr,bee,hOr,pOr,vee,_Or,uOr,bOr,g$,vOr,G5e,FOr,TOr,MOr,Wt,h$,EOr,O5e,COr,wOr,Kc,AOr,V5e,LOr,yOr,Fee,xOr,$Or,kOr,y0,SOr,Xr,p$,ROr,X5e,POr,BOr,Mn,NOr,z5e,IOr,qOr,Q5e,jOr,DOr,W5e,GOr,OOr,VOr,xe,x0,H5e,XOr,zOr,Tee,QOr,WOr,HOr,$0,U5e,UOr,JOr,Mee,YOr,KOr,ZOr,k0,J5e,eVr,oVr,Eee,rVr,tVr,aVr,S0,Y5e,nVr,sVr,Cee,lVr,iVr,dVr,R0,K5e,cVr,fVr,wee,mVr,gVr,hVr,P0,Z5e,pVr,_Vr,Aee,uVr,bVr,vVr,B0,e0e,FVr,TVr,Lee,MVr,EVr,CVr,N0,o0e,wVr,AVr,yee,LVr,yVr,xVr,I0,r0e,$Vr,kVr,xee,SVr,RVr,PVr,q0,t0e,BVr,NVr,$ee,IVr,qVr,jVr,j0,kze,Zc,D0,a0e,_$,DVr,n0e,GVr,Sze,ur,u$,OVr,ef,VVr,kee,XVr,zVr,See,QVr,WVr,HVr,b$,UVr,s0e,JVr,YVr,KVr,Ht,v$,ZVr,l0e,eXr,oXr,of,rXr,i0e,tXr,aXr,Ree,nXr,sXr,lXr,G0,iXr,zr,F$,dXr,d0e,cXr,fXr,En,mXr,c0e,gXr,hXr,f0e,pXr,_Xr,m0e,uXr,bXr,vXr,Ee,O0,g0e,FXr,TXr,Pee,MXr,EXr,CXr,V0,h0e,wXr,AXr,Bee,LXr,yXr,xXr,X0,p0e,$Xr,kXr,Nee,SXr,RXr,PXr,z0,_0e,BXr,NXr,Iee,IXr,qXr,jXr,Q0,u0e,DXr,GXr,qee,OXr,VXr,XXr,W0,b0e,zXr,QXr,jee,WXr,HXr,UXr,H0,v0e,JXr,YXr,Dee,KXr,ZXr,ezr,U0,F0e,ozr,rzr,Gee,tzr,azr,nzr,J0,T0e,szr,lzr,Oee,izr,dzr,czr,Y0,M0e,fzr,mzr,Vee,gzr,hzr,pzr,K0,E0e,_zr,uzr,Xee,bzr,vzr,Fzr,Z0,C0e,Tzr,Mzr,zee,Ezr,Czr,wzr,ew,w0e,Azr,Lzr,Qee,yzr,xzr,$zr,ow,Rze,rf,rw,A0e,T$,kzr,L0e,Szr,Pze,br,M$,Rzr,tf,Pzr,Wee,Bzr,Nzr,Hee,Izr,qzr,jzr,E$,Dzr,y0e,Gzr,Ozr,Vzr,Ut,C$,Xzr,x0e,zzr,Qzr,af,Wzr,$0e,Hzr,Uzr,Uee,Jzr,Yzr,Kzr,tw,Zzr,Qr,w$,eQr,k0e,oQr,rQr,Cn,tQr,S0e,aQr,nQr,R0e,sQr,lQr,P0e,iQr,dQr,cQr,$e,aw,B0e,fQr,mQr,Jee,gQr,hQr,pQr,nw,N0e,_Qr,uQr,Yee,bQr,vQr,FQr,sw,I0e,TQr,MQr,Kee,EQr,CQr,wQr,lw,q0e,AQr,LQr,Zee,yQr,xQr,$Qr,iw,j0e,kQr,SQr,eoe,RQr,PQr,BQr,dw,D0e,NQr,IQr,ooe,qQr,jQr,DQr,cw,G0e,GQr,OQr,roe,VQr,XQr,zQr,fw,O0e,QQr,WQr,toe,HQr,UQr,JQr,mw,V0e,YQr,KQr,aoe,ZQr,eWr,oWr,gw,X0e,rWr,tWr,noe,aWr,nWr,sWr,hw,Bze,nf,pw,z0e,A$,lWr,Q0e,iWr,Nze,vr,L$,dWr,sf,cWr,soe,fWr,mWr,loe,gWr,hWr,pWr,y$,_Wr,W0e,uWr,bWr,vWr,Jt,x$,FWr,H0e,TWr,MWr,lf,EWr,U0e,CWr,wWr,ioe,AWr,LWr,yWr,_w,xWr,Wr,$$,$Wr,J0e,kWr,SWr,wn,RWr,Y0e,PWr,BWr,K0e,NWr,IWr,Z0e,qWr,jWr,DWr,ke,uw,ewe,GWr,OWr,doe,VWr,XWr,zWr,bw,owe,QWr,WWr,coe,HWr,UWr,JWr,vw,rwe,YWr,KWr,foe,ZWr,eHr,oHr,Fw,twe,rHr,tHr,moe,aHr,nHr,sHr,Tw,awe,lHr,iHr,goe,dHr,cHr,fHr,Mw,nwe,mHr,gHr,hoe,hHr,pHr,_Hr,Ew,swe,uHr,bHr,poe,vHr,FHr,THr,Cw,lwe,MHr,EHr,_oe,CHr,wHr,AHr,ww,iwe,LHr,yHr,uoe,xHr,$Hr,kHr,Aw,dwe,SHr,RHr,boe,PHr,BHr,NHr,Lw,Ize,df,yw,cwe,k$,IHr,fwe,qHr,qze,Fr,S$,jHr,cf,DHr,voe,GHr,OHr,Foe,VHr,XHr,zHr,R$,QHr,mwe,WHr,HHr,UHr,Yt,P$,JHr,gwe,YHr,KHr,ff,ZHr,hwe,eUr,oUr,Toe,rUr,tUr,aUr,xw,nUr,Hr,B$,sUr,pwe,lUr,iUr,An,dUr,_we,cUr,fUr,uwe,mUr,gUr,bwe,hUr,pUr,_Ur,Se,$w,vwe,uUr,bUr,Moe,vUr,FUr,TUr,kw,Fwe,MUr,EUr,Eoe,CUr,wUr,AUr,Sw,Twe,LUr,yUr,Coe,xUr,$Ur,kUr,Rw,Mwe,SUr,RUr,woe,PUr,BUr,NUr,Pw,Ewe,IUr,qUr,Aoe,jUr,DUr,GUr,Bw,Cwe,OUr,VUr,Loe,XUr,zUr,QUr,Nw,wwe,WUr,HUr,yoe,UUr,JUr,YUr,Iw,Awe,KUr,ZUr,xoe,eJr,oJr,rJr,qw,Lwe,tJr,aJr,$oe,nJr,sJr,lJr,jw,ywe,iJr,dJr,koe,cJr,fJr,mJr,Dw,jze,mf,Gw,xwe,N$,gJr,$we,hJr,Dze,Tr,I$,pJr,gf,_Jr,Soe,uJr,bJr,Roe,vJr,FJr,TJr,q$,MJr,kwe,EJr,CJr,wJr,Kt,j$,AJr,Swe,LJr,yJr,hf,xJr,Rwe,$Jr,kJr,Poe,SJr,RJr,PJr,Ow,BJr,Ur,D$,NJr,Pwe,IJr,qJr,Ln,jJr,Bwe,DJr,GJr,Nwe,OJr,VJr,Iwe,XJr,zJr,QJr,Re,Vw,qwe,WJr,HJr,Boe,UJr,JJr,YJr,Xw,jwe,KJr,ZJr,Noe,eYr,oYr,rYr,zw,Dwe,tYr,aYr,Ioe,nYr,sYr,lYr,Qw,Gwe,iYr,dYr,qoe,cYr,fYr,mYr,Ww,Owe,gYr,hYr,joe,pYr,_Yr,uYr,Hw,Vwe,bYr,vYr,Doe,FYr,TYr,MYr,Uw,Xwe,EYr,CYr,Goe,wYr,AYr,LYr,Jw,zwe,yYr,xYr,Ooe,$Yr,kYr,SYr,Yw,Qwe,RYr,PYr,Voe,BYr,NYr,IYr,Kw,Wwe,qYr,jYr,Xoe,DYr,GYr,OYr,Zw,Gze,pf,eA,Hwe,G$,VYr,Uwe,XYr,Oze,Mr,O$,zYr,_f,QYr,zoe,WYr,HYr,Qoe,UYr,JYr,YYr,V$,KYr,Jwe,ZYr,eKr,oKr,Zt,X$,rKr,Ywe,tKr,aKr,uf,nKr,Kwe,sKr,lKr,Woe,iKr,dKr,cKr,oA,fKr,Jr,z$,mKr,Zwe,gKr,hKr,yn,pKr,eAe,_Kr,uKr,oAe,bKr,vKr,rAe,FKr,TKr,MKr,Ve,rA,tAe,EKr,CKr,Hoe,wKr,AKr,LKr,tA,aAe,yKr,xKr,Uoe,$Kr,kKr,SKr,aA,nAe,RKr,PKr,Joe,BKr,NKr,IKr,nA,sAe,qKr,jKr,Yoe,DKr,GKr,OKr,sA,lAe,VKr,XKr,Koe,zKr,QKr,WKr,lA,iAe,HKr,UKr,Zoe,JKr,YKr,KKr,iA,dAe,ZKr,eZr,ere,oZr,rZr,tZr,dA,cAe,aZr,nZr,ore,sZr,lZr,iZr,cA,Vze,bf,fA,fAe,Q$,dZr,mAe,cZr,Xze,Er,W$,fZr,vf,mZr,rre,gZr,hZr,tre,pZr,_Zr,uZr,H$,bZr,gAe,vZr,FZr,TZr,ea,U$,MZr,hAe,EZr,CZr,Ff,wZr,pAe,AZr,LZr,are,yZr,xZr,$Zr,mA,kZr,Yr,J$,SZr,_Ae,RZr,PZr,xn,BZr,uAe,NZr,IZr,bAe,qZr,jZr,vAe,DZr,GZr,OZr,Xe,gA,FAe,VZr,XZr,nre,zZr,QZr,WZr,hA,TAe,HZr,UZr,sre,JZr,YZr,KZr,pA,MAe,ZZr,eet,lre,oet,ret,tet,_A,EAe,aet,net,ire,set,iet,det,uA,CAe,cet,fet,dre,met,get,het,bA,wAe,pet,_et,cre,uet,bet,vet,vA,AAe,Fet,Tet,fre,Met,Eet,Cet,FA,LAe,wet,Aet,mre,Let,yet,xet,TA,zze,Tf,MA,yAe,Y$,$et,xAe,ket,Qze,Cr,K$,Set,Mf,Ret,gre,Pet,Bet,hre,Net,Iet,qet,Z$,jet,$Ae,Det,Get,Oet,oa,ek,Vet,kAe,Xet,zet,Ef,Qet,SAe,Wet,Het,pre,Uet,Jet,Yet,EA,Ket,Kr,ok,Zet,RAe,eot,oot,$n,rot,PAe,tot,aot,BAe,not,sot,NAe,lot,iot,dot,IAe,CA,qAe,cot,fot,_re,mot,got,hot,wA,Wze,Cf,AA,jAe,rk,pot,DAe,_ot,Hze,wr,tk,uot,wf,bot,ure,vot,Fot,bre,Tot,Mot,Eot,ak,Cot,GAe,wot,Aot,Lot,ra,nk,yot,OAe,xot,$ot,Af,kot,VAe,Sot,Rot,vre,Pot,Bot,Not,LA,Iot,Zr,sk,qot,XAe,jot,Dot,kn,Got,zAe,Oot,Vot,QAe,Xot,zot,WAe,Qot,Wot,Hot,lk,yA,HAe,Uot,Jot,Fre,Yot,Kot,Zot,xA,UAe,ert,ort,Tre,rrt,trt,art,$A,Uze,Lf,kA,JAe,ik,nrt,YAe,srt,Jze,Ar,dk,lrt,yf,irt,Mre,drt,crt,Ere,frt,mrt,grt,ck,hrt,KAe,prt,_rt,urt,ta,fk,brt,ZAe,vrt,Frt,xf,Trt,e6e,Mrt,Ert,Cre,Crt,wrt,Art,SA,Lrt,et,mk,yrt,o6e,xrt,$rt,Sn,krt,r6e,Srt,Rrt,t6e,Prt,Brt,a6e,Nrt,Irt,qrt,n6e,RA,s6e,jrt,Drt,wre,Grt,Ort,Vrt,PA,Yze;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),tL=new re({}),aL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new Xrt({props:{warning:!0,$$slots:{default:[FQt]},$$scope:{ctx:$}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L610"}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L633"}}),Jg=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),cL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/configuration_auto.py#L756"}}),fL=new re({}),mL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L403"}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18123/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L417"}}),Sh=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),_L=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/tokenization_auto.py#L616"}}),uL=new re({}),bL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18123/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),pp=new Xrt({props:{$$slots:{default:[EQt]},$$scope:{ctx:$}}}),_p=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),ML=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L89"}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L103"}}),Ip=new Xrt({props:{$$slots:{default:[wQt]},$$scope:{ctx:$}}}),qp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/processing_auto.py#L256"}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L783"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Gp=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),zu=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L790"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Wu=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L805"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L812"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),bb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L819"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Fb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L828"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L873"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L880"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L866"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),uF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L837"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L844"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L889"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),By=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L928"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L855"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L935"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L958"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),o9=new re({}),r9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L942"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),f8=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),s9=new re({}),l9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L949"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),m9=new re({}),g9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L967"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),q8=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),u9=new re({}),b9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L974"}}),F9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),D8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),M9=new re({}),E9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L921"}}),w9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),W8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Y8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),y9=new re({}),x9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L896"}}),k9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),R9=new re({}),P9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L903"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),q9=new re({}),j9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_auto.py#L912"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),V9=new re({}),X9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),H9=new re({}),U9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Z9=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),Bx=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),zx=new re({}),Qx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),a$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),N$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),cA=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Q$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),U$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Y$=new re({}),K$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),rk=new re({}),tk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),ik=new re({}),dk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18123/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18123/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18123/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),Z7=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),eL=o("AutoConfig"),Bn=o(", "),Nn=a("a"),oL=o("AutoModel"),$i=o(`, and
`),In=a("a"),rL=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),RS=o("will create a model that is an instance of "),Si=a("a"),PS=o("BertModel"),BS=o("."),Co=l(),Ra=a("p"),NS=o("There is one class of "),Nf=a("code"),IS=o("AutoModel"),lHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),QVe=l(),Ri=a("h2"),If=a("a"),Fae=a("span"),F(tL.$$.fragment),iHe=l(),Tae=a("span"),dHe=o("Extending the Auto Classes"),WVe=l(),qn=a("p"),cHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mae=a("code"),fHe=o("NewModel"),mHe=o(", make sure you have a "),Eae=a("code"),gHe=o("NewModelConfig"),hHe=o(` then you can add those to the auto
classes like this:`),HVe=l(),F(aL.$$.fragment),UVe=l(),qS=a("p"),pHe=o("You will then be able to use the auto classes like you would usually do!"),JVe=l(),F(qf.$$.fragment),YVe=l(),Pi=a("h2"),jf=a("a"),Cae=a("span"),F(nL.$$.fragment),_He=l(),wae=a("span"),uHe=o("AutoConfig"),KVe=l(),wo=a("div"),F(sL.$$.fragment),bHe=l(),lL=a("p"),vHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jS=a("a"),FHe=o("from_pretrained()"),THe=o(" class method."),MHe=l(),iL=a("p"),EHe=o("This class cannot be instantiated directly using "),Aae=a("code"),CHe=o("__init__()"),wHe=o(" (throws an error)."),AHe=l(),Lr=a("div"),F(dL.$$.fragment),LHe=l(),Lae=a("p"),yHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),xHe=l(),Bi=a("p"),$He=o("The configuration class to instantiate is selected based on the "),yae=a("code"),kHe=o("model_type"),SHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xae=a("code"),RHe=o("pretrained_model_name_or_path"),PHe=o(":"),BHe=l(),A=a("ul"),Df=a("li"),$ae=a("strong"),NHe=o("albert"),IHe=o(" \u2014 "),DS=a("a"),qHe=o("AlbertConfig"),jHe=o(" (ALBERT model)"),DHe=l(),Gf=a("li"),kae=a("strong"),GHe=o("bart"),OHe=o(" \u2014 "),GS=a("a"),VHe=o("BartConfig"),XHe=o(" (BART model)"),zHe=l(),Of=a("li"),Sae=a("strong"),QHe=o("beit"),WHe=o(" \u2014 "),OS=a("a"),HHe=o("BeitConfig"),UHe=o(" (BEiT model)"),JHe=l(),Vf=a("li"),Rae=a("strong"),YHe=o("bert"),KHe=o(" \u2014 "),VS=a("a"),ZHe=o("BertConfig"),eUe=o(" (BERT model)"),oUe=l(),Xf=a("li"),Pae=a("strong"),rUe=o("bert-generation"),tUe=o(" \u2014 "),XS=a("a"),aUe=o("BertGenerationConfig"),nUe=o(" (Bert Generation model)"),sUe=l(),zf=a("li"),Bae=a("strong"),lUe=o("big_bird"),iUe=o(" \u2014 "),zS=a("a"),dUe=o("BigBirdConfig"),cUe=o(" (BigBird model)"),fUe=l(),Qf=a("li"),Nae=a("strong"),mUe=o("bigbird_pegasus"),gUe=o(" \u2014 "),QS=a("a"),hUe=o("BigBirdPegasusConfig"),pUe=o(" (BigBird-Pegasus model)"),_Ue=l(),Wf=a("li"),Iae=a("strong"),uUe=o("blenderbot"),bUe=o(" \u2014 "),WS=a("a"),vUe=o("BlenderbotConfig"),FUe=o(" (Blenderbot model)"),TUe=l(),Hf=a("li"),qae=a("strong"),MUe=o("blenderbot-small"),EUe=o(" \u2014 "),HS=a("a"),CUe=o("BlenderbotSmallConfig"),wUe=o(" (BlenderbotSmall model)"),AUe=l(),Uf=a("li"),jae=a("strong"),LUe=o("bloom"),yUe=o(" \u2014 "),US=a("a"),xUe=o("BloomConfig"),$Ue=o(" (BLOOM model)"),kUe=l(),Jf=a("li"),Dae=a("strong"),SUe=o("camembert"),RUe=o(" \u2014 "),JS=a("a"),PUe=o("CamembertConfig"),BUe=o(" (CamemBERT model)"),NUe=l(),Yf=a("li"),Gae=a("strong"),IUe=o("canine"),qUe=o(" \u2014 "),YS=a("a"),jUe=o("CanineConfig"),DUe=o(" (CANINE model)"),GUe=l(),Kf=a("li"),Oae=a("strong"),OUe=o("clip"),VUe=o(" \u2014 "),KS=a("a"),XUe=o("CLIPConfig"),zUe=o(" (CLIP model)"),QUe=l(),Zf=a("li"),Vae=a("strong"),WUe=o("codegen"),HUe=o(" \u2014 "),ZS=a("a"),UUe=o("CodeGenConfig"),JUe=o(" (CodeGen model)"),YUe=l(),em=a("li"),Xae=a("strong"),KUe=o("convbert"),ZUe=o(" \u2014 "),eR=a("a"),eJe=o("ConvBertConfig"),oJe=o(" (ConvBERT model)"),rJe=l(),om=a("li"),zae=a("strong"),tJe=o("convnext"),aJe=o(" \u2014 "),oR=a("a"),nJe=o("ConvNextConfig"),sJe=o(" (ConvNeXT model)"),lJe=l(),rm=a("li"),Qae=a("strong"),iJe=o("ctrl"),dJe=o(" \u2014 "),rR=a("a"),cJe=o("CTRLConfig"),fJe=o(" (CTRL model)"),mJe=l(),tm=a("li"),Wae=a("strong"),gJe=o("cvt"),hJe=o(" \u2014 "),tR=a("a"),pJe=o("CvtConfig"),_Je=o(" (CvT model)"),uJe=l(),am=a("li"),Hae=a("strong"),bJe=o("data2vec-audio"),vJe=o(" \u2014 "),aR=a("a"),FJe=o("Data2VecAudioConfig"),TJe=o(" (Data2VecAudio model)"),MJe=l(),nm=a("li"),Uae=a("strong"),EJe=o("data2vec-text"),CJe=o(" \u2014 "),nR=a("a"),wJe=o("Data2VecTextConfig"),AJe=o(" (Data2VecText model)"),LJe=l(),sm=a("li"),Jae=a("strong"),yJe=o("data2vec-vision"),xJe=o(" \u2014 "),sR=a("a"),$Je=o("Data2VecVisionConfig"),kJe=o(" (Data2VecVision model)"),SJe=l(),lm=a("li"),Yae=a("strong"),RJe=o("deberta"),PJe=o(" \u2014 "),lR=a("a"),BJe=o("DebertaConfig"),NJe=o(" (DeBERTa model)"),IJe=l(),im=a("li"),Kae=a("strong"),qJe=o("deberta-v2"),jJe=o(" \u2014 "),iR=a("a"),DJe=o("DebertaV2Config"),GJe=o(" (DeBERTa-v2 model)"),OJe=l(),dm=a("li"),Zae=a("strong"),VJe=o("decision_transformer"),XJe=o(" \u2014 "),dR=a("a"),zJe=o("DecisionTransformerConfig"),QJe=o(" (Decision Transformer model)"),WJe=l(),cm=a("li"),ene=a("strong"),HJe=o("deit"),UJe=o(" \u2014 "),cR=a("a"),JJe=o("DeiTConfig"),YJe=o(" (DeiT model)"),KJe=l(),fm=a("li"),one=a("strong"),ZJe=o("detr"),eYe=o(" \u2014 "),fR=a("a"),oYe=o("DetrConfig"),rYe=o(" (DETR model)"),tYe=l(),mm=a("li"),rne=a("strong"),aYe=o("distilbert"),nYe=o(" \u2014 "),mR=a("a"),sYe=o("DistilBertConfig"),lYe=o(" (DistilBERT model)"),iYe=l(),gm=a("li"),tne=a("strong"),dYe=o("dpr"),cYe=o(" \u2014 "),gR=a("a"),fYe=o("DPRConfig"),mYe=o(" (DPR model)"),gYe=l(),hm=a("li"),ane=a("strong"),hYe=o("dpt"),pYe=o(" \u2014 "),hR=a("a"),_Ye=o("DPTConfig"),uYe=o(" (DPT model)"),bYe=l(),pm=a("li"),nne=a("strong"),vYe=o("electra"),FYe=o(" \u2014 "),pR=a("a"),TYe=o("ElectraConfig"),MYe=o(" (ELECTRA model)"),EYe=l(),_m=a("li"),sne=a("strong"),CYe=o("encoder-decoder"),wYe=o(" \u2014 "),_R=a("a"),AYe=o("EncoderDecoderConfig"),LYe=o(" (Encoder decoder model)"),yYe=l(),um=a("li"),lne=a("strong"),xYe=o("flaubert"),$Ye=o(" \u2014 "),uR=a("a"),kYe=o("FlaubertConfig"),SYe=o(" (FlauBERT model)"),RYe=l(),bm=a("li"),ine=a("strong"),PYe=o("flava"),BYe=o(" \u2014 "),bR=a("a"),NYe=o("FlavaConfig"),IYe=o(" (FLAVA model)"),qYe=l(),vm=a("li"),dne=a("strong"),jYe=o("fnet"),DYe=o(" \u2014 "),vR=a("a"),GYe=o("FNetConfig"),OYe=o(" (FNet model)"),VYe=l(),Fm=a("li"),cne=a("strong"),XYe=o("fsmt"),zYe=o(" \u2014 "),FR=a("a"),QYe=o("FSMTConfig"),WYe=o(" (FairSeq Machine-Translation model)"),HYe=l(),Tm=a("li"),fne=a("strong"),UYe=o("funnel"),JYe=o(" \u2014 "),TR=a("a"),YYe=o("FunnelConfig"),KYe=o(" (Funnel Transformer model)"),ZYe=l(),Mm=a("li"),mne=a("strong"),eKe=o("glpn"),oKe=o(" \u2014 "),MR=a("a"),rKe=o("GLPNConfig"),tKe=o(" (GLPN model)"),aKe=l(),Em=a("li"),gne=a("strong"),nKe=o("gpt2"),sKe=o(" \u2014 "),ER=a("a"),lKe=o("GPT2Config"),iKe=o(" (OpenAI GPT-2 model)"),dKe=l(),Cm=a("li"),hne=a("strong"),cKe=o("gpt_neo"),fKe=o(" \u2014 "),CR=a("a"),mKe=o("GPTNeoConfig"),gKe=o(" (GPT Neo model)"),hKe=l(),wm=a("li"),pne=a("strong"),pKe=o("gpt_neox"),_Ke=o(" \u2014 "),wR=a("a"),uKe=o("GPTNeoXConfig"),bKe=o(" (GPT NeoX model)"),vKe=l(),Am=a("li"),_ne=a("strong"),FKe=o("gptj"),TKe=o(" \u2014 "),AR=a("a"),MKe=o("GPTJConfig"),EKe=o(" (GPT-J model)"),CKe=l(),Lm=a("li"),une=a("strong"),wKe=o("groupvit"),AKe=o(" \u2014 "),LR=a("a"),LKe=o("GroupViTConfig"),yKe=o(" (GroupViT model)"),xKe=l(),ym=a("li"),bne=a("strong"),$Ke=o("hubert"),kKe=o(" \u2014 "),yR=a("a"),SKe=o("HubertConfig"),RKe=o(" (Hubert model)"),PKe=l(),xm=a("li"),vne=a("strong"),BKe=o("ibert"),NKe=o(" \u2014 "),xR=a("a"),IKe=o("IBertConfig"),qKe=o(" (I-BERT model)"),jKe=l(),$m=a("li"),Fne=a("strong"),DKe=o("imagegpt"),GKe=o(" \u2014 "),$R=a("a"),OKe=o("ImageGPTConfig"),VKe=o(" (ImageGPT model)"),XKe=l(),km=a("li"),Tne=a("strong"),zKe=o("layoutlm"),QKe=o(" \u2014 "),kR=a("a"),WKe=o("LayoutLMConfig"),HKe=o(" (LayoutLM model)"),UKe=l(),Sm=a("li"),Mne=a("strong"),JKe=o("layoutlmv2"),YKe=o(" \u2014 "),SR=a("a"),KKe=o("LayoutLMv2Config"),ZKe=o(" (LayoutLMv2 model)"),eZe=l(),Rm=a("li"),Ene=a("strong"),oZe=o("layoutlmv3"),rZe=o(" \u2014 "),RR=a("a"),tZe=o("LayoutLMv3Config"),aZe=o(" (LayoutLMv3 model)"),nZe=l(),Pm=a("li"),Cne=a("strong"),sZe=o("led"),lZe=o(" \u2014 "),PR=a("a"),iZe=o("LEDConfig"),dZe=o(" (LED model)"),cZe=l(),Bm=a("li"),wne=a("strong"),fZe=o("levit"),mZe=o(" \u2014 "),BR=a("a"),gZe=o("LevitConfig"),hZe=o(" (LeViT model)"),pZe=l(),Nm=a("li"),Ane=a("strong"),_Ze=o("longformer"),uZe=o(" \u2014 "),NR=a("a"),bZe=o("LongformerConfig"),vZe=o(" (Longformer model)"),FZe=l(),Im=a("li"),Lne=a("strong"),TZe=o("longt5"),MZe=o(" \u2014 "),IR=a("a"),EZe=o("LongT5Config"),CZe=o(" (LongT5 model)"),wZe=l(),qm=a("li"),yne=a("strong"),AZe=o("luke"),LZe=o(" \u2014 "),qR=a("a"),yZe=o("LukeConfig"),xZe=o(" (LUKE model)"),$Ze=l(),jm=a("li"),xne=a("strong"),kZe=o("lxmert"),SZe=o(" \u2014 "),jR=a("a"),RZe=o("LxmertConfig"),PZe=o(" (LXMERT model)"),BZe=l(),Dm=a("li"),$ne=a("strong"),NZe=o("m2m_100"),IZe=o(" \u2014 "),DR=a("a"),qZe=o("M2M100Config"),jZe=o(" (M2M100 model)"),DZe=l(),Gm=a("li"),kne=a("strong"),GZe=o("marian"),OZe=o(" \u2014 "),GR=a("a"),VZe=o("MarianConfig"),XZe=o(" (Marian model)"),zZe=l(),Om=a("li"),Sne=a("strong"),QZe=o("maskformer"),WZe=o(" \u2014 "),OR=a("a"),HZe=o("MaskFormerConfig"),UZe=o(" (MaskFormer model)"),JZe=l(),Vm=a("li"),Rne=a("strong"),YZe=o("mbart"),KZe=o(" \u2014 "),VR=a("a"),ZZe=o("MBartConfig"),eeo=o(" (mBART model)"),oeo=l(),Xm=a("li"),Pne=a("strong"),reo=o("mctct"),teo=o(" \u2014 "),XR=a("a"),aeo=o("MCTCTConfig"),neo=o(" (M-CTC-T model)"),seo=l(),zm=a("li"),Bne=a("strong"),leo=o("megatron-bert"),ieo=o(" \u2014 "),zR=a("a"),deo=o("MegatronBertConfig"),ceo=o(" (Megatron-BERT model)"),feo=l(),Qm=a("li"),Nne=a("strong"),meo=o("mobilebert"),geo=o(" \u2014 "),QR=a("a"),heo=o("MobileBertConfig"),peo=o(" (MobileBERT model)"),_eo=l(),Wm=a("li"),Ine=a("strong"),ueo=o("mobilevit"),beo=o(" \u2014 "),WR=a("a"),veo=o("MobileViTConfig"),Feo=o(" (MobileViT model)"),Teo=l(),Hm=a("li"),qne=a("strong"),Meo=o("mpnet"),Eeo=o(" \u2014 "),HR=a("a"),Ceo=o("MPNetConfig"),weo=o(" (MPNet model)"),Aeo=l(),Um=a("li"),jne=a("strong"),Leo=o("mt5"),yeo=o(" \u2014 "),UR=a("a"),xeo=o("MT5Config"),$eo=o(" (MT5 model)"),keo=l(),Jm=a("li"),Dne=a("strong"),Seo=o("mvp"),Reo=o(" \u2014 "),JR=a("a"),Peo=o("MvpConfig"),Beo=o(" (MVP model)"),Neo=l(),Ym=a("li"),Gne=a("strong"),Ieo=o("nezha"),qeo=o(" \u2014 "),YR=a("a"),jeo=o("NezhaConfig"),Deo=o(" (Nezha model)"),Geo=l(),Km=a("li"),One=a("strong"),Oeo=o("nystromformer"),Veo=o(" \u2014 "),KR=a("a"),Xeo=o("NystromformerConfig"),zeo=o(" (Nystr\xF6mformer model)"),Qeo=l(),Zm=a("li"),Vne=a("strong"),Weo=o("openai-gpt"),Heo=o(" \u2014 "),ZR=a("a"),Ueo=o("OpenAIGPTConfig"),Jeo=o(" (OpenAI GPT model)"),Yeo=l(),eg=a("li"),Xne=a("strong"),Keo=o("opt"),Zeo=o(" \u2014 "),eP=a("a"),eoo=o("OPTConfig"),ooo=o(" (OPT model)"),roo=l(),og=a("li"),zne=a("strong"),too=o("pegasus"),aoo=o(" \u2014 "),oP=a("a"),noo=o("PegasusConfig"),soo=o(" (Pegasus model)"),loo=l(),rg=a("li"),Qne=a("strong"),ioo=o("perceiver"),doo=o(" \u2014 "),rP=a("a"),coo=o("PerceiverConfig"),foo=o(" (Perceiver model)"),moo=l(),tg=a("li"),Wne=a("strong"),goo=o("plbart"),hoo=o(" \u2014 "),tP=a("a"),poo=o("PLBartConfig"),_oo=o(" (PLBart model)"),uoo=l(),ag=a("li"),Hne=a("strong"),boo=o("poolformer"),voo=o(" \u2014 "),aP=a("a"),Foo=o("PoolFormerConfig"),Too=o(" (PoolFormer model)"),Moo=l(),ng=a("li"),Une=a("strong"),Eoo=o("prophetnet"),Coo=o(" \u2014 "),nP=a("a"),woo=o("ProphetNetConfig"),Aoo=o(" (ProphetNet model)"),Loo=l(),sg=a("li"),Jne=a("strong"),yoo=o("qdqbert"),xoo=o(" \u2014 "),sP=a("a"),$oo=o("QDQBertConfig"),koo=o(" (QDQBert model)"),Soo=l(),lg=a("li"),Yne=a("strong"),Roo=o("rag"),Poo=o(" \u2014 "),lP=a("a"),Boo=o("RagConfig"),Noo=o(" (RAG model)"),Ioo=l(),ig=a("li"),Kne=a("strong"),qoo=o("realm"),joo=o(" \u2014 "),iP=a("a"),Doo=o("RealmConfig"),Goo=o(" (REALM model)"),Ooo=l(),dg=a("li"),Zne=a("strong"),Voo=o("reformer"),Xoo=o(" \u2014 "),dP=a("a"),zoo=o("ReformerConfig"),Qoo=o(" (Reformer model)"),Woo=l(),cg=a("li"),ese=a("strong"),Hoo=o("regnet"),Uoo=o(" \u2014 "),cP=a("a"),Joo=o("RegNetConfig"),Yoo=o(" (RegNet model)"),Koo=l(),fg=a("li"),ose=a("strong"),Zoo=o("rembert"),ero=o(" \u2014 "),fP=a("a"),oro=o("RemBertConfig"),rro=o(" (RemBERT model)"),tro=l(),mg=a("li"),rse=a("strong"),aro=o("resnet"),nro=o(" \u2014 "),mP=a("a"),sro=o("ResNetConfig"),lro=o(" (ResNet model)"),iro=l(),gg=a("li"),tse=a("strong"),dro=o("retribert"),cro=o(" \u2014 "),gP=a("a"),fro=o("RetriBertConfig"),mro=o(" (RetriBERT model)"),gro=l(),hg=a("li"),ase=a("strong"),hro=o("roberta"),pro=o(" \u2014 "),hP=a("a"),_ro=o("RobertaConfig"),uro=o(" (RoBERTa model)"),bro=l(),pg=a("li"),nse=a("strong"),vro=o("roformer"),Fro=o(" \u2014 "),pP=a("a"),Tro=o("RoFormerConfig"),Mro=o(" (RoFormer model)"),Ero=l(),_g=a("li"),sse=a("strong"),Cro=o("segformer"),wro=o(" \u2014 "),_P=a("a"),Aro=o("SegformerConfig"),Lro=o(" (SegFormer model)"),yro=l(),ug=a("li"),lse=a("strong"),xro=o("sew"),$ro=o(" \u2014 "),uP=a("a"),kro=o("SEWConfig"),Sro=o(" (SEW model)"),Rro=l(),bg=a("li"),ise=a("strong"),Pro=o("sew-d"),Bro=o(" \u2014 "),bP=a("a"),Nro=o("SEWDConfig"),Iro=o(" (SEW-D model)"),qro=l(),vg=a("li"),dse=a("strong"),jro=o("speech-encoder-decoder"),Dro=o(" \u2014 "),vP=a("a"),Gro=o("SpeechEncoderDecoderConfig"),Oro=o(" (Speech Encoder decoder model)"),Vro=l(),Fg=a("li"),cse=a("strong"),Xro=o("speech_to_text"),zro=o(" \u2014 "),FP=a("a"),Qro=o("Speech2TextConfig"),Wro=o(" (Speech2Text model)"),Hro=l(),Tg=a("li"),fse=a("strong"),Uro=o("speech_to_text_2"),Jro=o(" \u2014 "),TP=a("a"),Yro=o("Speech2Text2Config"),Kro=o(" (Speech2Text2 model)"),Zro=l(),Mg=a("li"),mse=a("strong"),eto=o("splinter"),oto=o(" \u2014 "),MP=a("a"),rto=o("SplinterConfig"),tto=o(" (Splinter model)"),ato=l(),Eg=a("li"),gse=a("strong"),nto=o("squeezebert"),sto=o(" \u2014 "),EP=a("a"),lto=o("SqueezeBertConfig"),ito=o(" (SqueezeBERT model)"),dto=l(),Cg=a("li"),hse=a("strong"),cto=o("swin"),fto=o(" \u2014 "),CP=a("a"),mto=o("SwinConfig"),gto=o(" (Swin Transformer model)"),hto=l(),wg=a("li"),pse=a("strong"),pto=o("t5"),_to=o(" \u2014 "),wP=a("a"),uto=o("T5Config"),bto=o(" (T5 model)"),vto=l(),Ag=a("li"),_se=a("strong"),Fto=o("tapas"),Tto=o(" \u2014 "),AP=a("a"),Mto=o("TapasConfig"),Eto=o(" (TAPAS model)"),Cto=l(),Lg=a("li"),use=a("strong"),wto=o("trajectory_transformer"),Ato=o(" \u2014 "),LP=a("a"),Lto=o("TrajectoryTransformerConfig"),yto=o(" (Trajectory Transformer model)"),xto=l(),yg=a("li"),bse=a("strong"),$to=o("transfo-xl"),kto=o(" \u2014 "),yP=a("a"),Sto=o("TransfoXLConfig"),Rto=o(" (Transformer-XL model)"),Pto=l(),xg=a("li"),vse=a("strong"),Bto=o("trocr"),Nto=o(" \u2014 "),xP=a("a"),Ito=o("TrOCRConfig"),qto=o(" (TrOCR model)"),jto=l(),$g=a("li"),Fse=a("strong"),Dto=o("unispeech"),Gto=o(" \u2014 "),$P=a("a"),Oto=o("UniSpeechConfig"),Vto=o(" (UniSpeech model)"),Xto=l(),kg=a("li"),Tse=a("strong"),zto=o("unispeech-sat"),Qto=o(" \u2014 "),kP=a("a"),Wto=o("UniSpeechSatConfig"),Hto=o(" (UniSpeechSat model)"),Uto=l(),Sg=a("li"),Mse=a("strong"),Jto=o("van"),Yto=o(" \u2014 "),SP=a("a"),Kto=o("VanConfig"),Zto=o(" (VAN model)"),eao=l(),Rg=a("li"),Ese=a("strong"),oao=o("vilt"),rao=o(" \u2014 "),RP=a("a"),tao=o("ViltConfig"),aao=o(" (ViLT model)"),nao=l(),Pg=a("li"),Cse=a("strong"),sao=o("vision-encoder-decoder"),lao=o(" \u2014 "),PP=a("a"),iao=o("VisionEncoderDecoderConfig"),dao=o(" (Vision Encoder decoder model)"),cao=l(),Bg=a("li"),wse=a("strong"),fao=o("vision-text-dual-encoder"),mao=o(" \u2014 "),BP=a("a"),gao=o("VisionTextDualEncoderConfig"),hao=o(" (VisionTextDualEncoder model)"),pao=l(),Ng=a("li"),Ase=a("strong"),_ao=o("visual_bert"),uao=o(" \u2014 "),NP=a("a"),bao=o("VisualBertConfig"),vao=o(" (VisualBERT model)"),Fao=l(),Ig=a("li"),Lse=a("strong"),Tao=o("vit"),Mao=o(" \u2014 "),IP=a("a"),Eao=o("ViTConfig"),Cao=o(" (ViT model)"),wao=l(),qg=a("li"),yse=a("strong"),Aao=o("vit_mae"),Lao=o(" \u2014 "),qP=a("a"),yao=o("ViTMAEConfig"),xao=o(" (ViTMAE model)"),$ao=l(),jg=a("li"),xse=a("strong"),kao=o("wav2vec2"),Sao=o(" \u2014 "),jP=a("a"),Rao=o("Wav2Vec2Config"),Pao=o(" (Wav2Vec2 model)"),Bao=l(),Dg=a("li"),$se=a("strong"),Nao=o("wav2vec2-conformer"),Iao=o(" \u2014 "),DP=a("a"),qao=o("Wav2Vec2ConformerConfig"),jao=o(" (Wav2Vec2-Conformer model)"),Dao=l(),Gg=a("li"),kse=a("strong"),Gao=o("wavlm"),Oao=o(" \u2014 "),GP=a("a"),Vao=o("WavLMConfig"),Xao=o(" (WavLM model)"),zao=l(),Og=a("li"),Sse=a("strong"),Qao=o("xglm"),Wao=o(" \u2014 "),OP=a("a"),Hao=o("XGLMConfig"),Uao=o(" (XGLM model)"),Jao=l(),Vg=a("li"),Rse=a("strong"),Yao=o("xlm"),Kao=o(" \u2014 "),VP=a("a"),Zao=o("XLMConfig"),eno=o(" (XLM model)"),ono=l(),Xg=a("li"),Pse=a("strong"),rno=o("xlm-prophetnet"),tno=o(" \u2014 "),XP=a("a"),ano=o("XLMProphetNetConfig"),nno=o(" (XLM-ProphetNet model)"),sno=l(),zg=a("li"),Bse=a("strong"),lno=o("xlm-roberta"),ino=o(" \u2014 "),zP=a("a"),dno=o("XLMRobertaConfig"),cno=o(" (XLM-RoBERTa model)"),fno=l(),Qg=a("li"),Nse=a("strong"),mno=o("xlm-roberta-xl"),gno=o(" \u2014 "),QP=a("a"),hno=o("XLMRobertaXLConfig"),pno=o(" (XLM-RoBERTa-XL model)"),_no=l(),Wg=a("li"),Ise=a("strong"),uno=o("xlnet"),bno=o(" \u2014 "),WP=a("a"),vno=o("XLNetConfig"),Fno=o(" (XLNet model)"),Tno=l(),Hg=a("li"),qse=a("strong"),Mno=o("yolos"),Eno=o(" \u2014 "),HP=a("a"),Cno=o("YolosConfig"),wno=o(" (YOLOS model)"),Ano=l(),Ug=a("li"),jse=a("strong"),Lno=o("yoso"),yno=o(" \u2014 "),UP=a("a"),xno=o("YosoConfig"),$no=o(" (YOSO model)"),kno=l(),F(Jg.$$.fragment),Sno=l(),Yg=a("div"),F(cL.$$.fragment),Rno=l(),Dse=a("p"),Pno=o("Register a new configuration for this class."),ZVe=l(),Ni=a("h2"),Kg=a("a"),Gse=a("span"),F(fL.$$.fragment),Bno=l(),Ose=a("span"),Nno=o("AutoTokenizer"),eXe=l(),Ao=a("div"),F(mL.$$.fragment),Ino=l(),gL=a("p"),qno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JP=a("a"),jno=o("AutoTokenizer.from_pretrained()"),Dno=o(" class method."),Gno=l(),hL=a("p"),Ono=o("This class cannot be instantiated directly using "),Vse=a("code"),Vno=o("__init__()"),Xno=o(" (throws an error)."),zno=l(),yr=a("div"),F(pL.$$.fragment),Qno=l(),Xse=a("p"),Wno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Hno=l(),Pa=a("p"),Uno=o("The tokenizer class to instantiate is selected based on the "),zse=a("code"),Jno=o("model_type"),Yno=o(` property of the config object (either
passed as an argument or loaded from `),Qse=a("code"),Kno=o("pretrained_model_name_or_path"),Zno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wse=a("code"),eso=o("pretrained_model_name_or_path"),oso=o(":"),rso=l(),k=a("ul"),jn=a("li"),Hse=a("strong"),tso=o("albert"),aso=o(" \u2014 "),YP=a("a"),nso=o("AlbertTokenizer"),sso=o(" or "),KP=a("a"),lso=o("AlbertTokenizerFast"),iso=o(" (ALBERT model)"),dso=l(),Dn=a("li"),Use=a("strong"),cso=o("bart"),fso=o(" \u2014 "),ZP=a("a"),mso=o("BartTokenizer"),gso=o(" or "),eB=a("a"),hso=o("BartTokenizerFast"),pso=o(" (BART model)"),_so=l(),Gn=a("li"),Jse=a("strong"),uso=o("barthez"),bso=o(" \u2014 "),oB=a("a"),vso=o("BarthezTokenizer"),Fso=o(" or "),rB=a("a"),Tso=o("BarthezTokenizerFast"),Mso=o(" (BARThez model)"),Eso=l(),Zg=a("li"),Yse=a("strong"),Cso=o("bartpho"),wso=o(" \u2014 "),tB=a("a"),Aso=o("BartphoTokenizer"),Lso=o(" (BARTpho model)"),yso=l(),On=a("li"),Kse=a("strong"),xso=o("bert"),$so=o(" \u2014 "),aB=a("a"),kso=o("BertTokenizer"),Sso=o(" or "),nB=a("a"),Rso=o("BertTokenizerFast"),Pso=o(" (BERT model)"),Bso=l(),eh=a("li"),Zse=a("strong"),Nso=o("bert-generation"),Iso=o(" \u2014 "),sB=a("a"),qso=o("BertGenerationTokenizer"),jso=o(" (Bert Generation model)"),Dso=l(),oh=a("li"),ele=a("strong"),Gso=o("bert-japanese"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("BertJapaneseTokenizer"),Xso=o(" (BertJapanese model)"),zso=l(),rh=a("li"),ole=a("strong"),Qso=o("bertweet"),Wso=o(" \u2014 "),iB=a("a"),Hso=o("BertweetTokenizer"),Uso=o(" (BERTweet model)"),Jso=l(),Vn=a("li"),rle=a("strong"),Yso=o("big_bird"),Kso=o(" \u2014 "),dB=a("a"),Zso=o("BigBirdTokenizer"),elo=o(" or "),cB=a("a"),olo=o("BigBirdTokenizerFast"),rlo=o(" (BigBird model)"),tlo=l(),Xn=a("li"),tle=a("strong"),alo=o("bigbird_pegasus"),nlo=o(" \u2014 "),fB=a("a"),slo=o("PegasusTokenizer"),llo=o(" or "),mB=a("a"),ilo=o("PegasusTokenizerFast"),dlo=o(" (BigBird-Pegasus model)"),clo=l(),zn=a("li"),ale=a("strong"),flo=o("blenderbot"),mlo=o(" \u2014 "),gB=a("a"),glo=o("BlenderbotTokenizer"),hlo=o(" or "),hB=a("a"),plo=o("BlenderbotTokenizerFast"),_lo=o(" (Blenderbot model)"),ulo=l(),th=a("li"),nle=a("strong"),blo=o("blenderbot-small"),vlo=o(" \u2014 "),pB=a("a"),Flo=o("BlenderbotSmallTokenizer"),Tlo=o(" (BlenderbotSmall model)"),Mlo=l(),ah=a("li"),sle=a("strong"),Elo=o("bloom"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("BloomTokenizerFast"),Alo=o(" (BLOOM model)"),Llo=l(),nh=a("li"),lle=a("strong"),ylo=o("byt5"),xlo=o(" \u2014 "),uB=a("a"),$lo=o("ByT5Tokenizer"),klo=o(" (ByT5 model)"),Slo=l(),Qn=a("li"),ile=a("strong"),Rlo=o("camembert"),Plo=o(" \u2014 "),bB=a("a"),Blo=o("CamembertTokenizer"),Nlo=o(" or "),vB=a("a"),Ilo=o("CamembertTokenizerFast"),qlo=o(" (CamemBERT model)"),jlo=l(),sh=a("li"),dle=a("strong"),Dlo=o("canine"),Glo=o(" \u2014 "),FB=a("a"),Olo=o("CanineTokenizer"),Vlo=o(" (CANINE model)"),Xlo=l(),Wn=a("li"),cle=a("strong"),zlo=o("clip"),Qlo=o(" \u2014 "),TB=a("a"),Wlo=o("CLIPTokenizer"),Hlo=o(" or "),MB=a("a"),Ulo=o("CLIPTokenizerFast"),Jlo=o(" (CLIP model)"),Ylo=l(),Hn=a("li"),fle=a("strong"),Klo=o("codegen"),Zlo=o(" \u2014 "),EB=a("a"),eio=o("CodeGenTokenizer"),oio=o(" or "),CB=a("a"),rio=o("CodeGenTokenizerFast"),tio=o(" (CodeGen model)"),aio=l(),Un=a("li"),mle=a("strong"),nio=o("convbert"),sio=o(" \u2014 "),wB=a("a"),lio=o("ConvBertTokenizer"),iio=o(" or "),AB=a("a"),dio=o("ConvBertTokenizerFast"),cio=o(" (ConvBERT model)"),fio=l(),Jn=a("li"),gle=a("strong"),mio=o("cpm"),gio=o(" \u2014 "),LB=a("a"),hio=o("CpmTokenizer"),pio=o(" or "),yB=a("a"),_io=o("CpmTokenizerFast"),uio=o(" (CPM model)"),bio=l(),lh=a("li"),hle=a("strong"),vio=o("ctrl"),Fio=o(" \u2014 "),xB=a("a"),Tio=o("CTRLTokenizer"),Mio=o(" (CTRL model)"),Eio=l(),Yn=a("li"),ple=a("strong"),Cio=o("data2vec-text"),wio=o(" \u2014 "),$B=a("a"),Aio=o("RobertaTokenizer"),Lio=o(" or "),kB=a("a"),yio=o("RobertaTokenizerFast"),xio=o(" (Data2VecText model)"),$io=l(),Kn=a("li"),_le=a("strong"),kio=o("deberta"),Sio=o(" \u2014 "),SB=a("a"),Rio=o("DebertaTokenizer"),Pio=o(" or "),RB=a("a"),Bio=o("DebertaTokenizerFast"),Nio=o(" (DeBERTa model)"),Iio=l(),Zn=a("li"),ule=a("strong"),qio=o("deberta-v2"),jio=o(" \u2014 "),PB=a("a"),Dio=o("DebertaV2Tokenizer"),Gio=o(" or "),BB=a("a"),Oio=o("DebertaV2TokenizerFast"),Vio=o(" (DeBERTa-v2 model)"),Xio=l(),es=a("li"),ble=a("strong"),zio=o("distilbert"),Qio=o(" \u2014 "),NB=a("a"),Wio=o("DistilBertTokenizer"),Hio=o(" or "),IB=a("a"),Uio=o("DistilBertTokenizerFast"),Jio=o(" (DistilBERT model)"),Yio=l(),os=a("li"),vle=a("strong"),Kio=o("dpr"),Zio=o(" \u2014 "),qB=a("a"),edo=o("DPRQuestionEncoderTokenizer"),odo=o(" or "),jB=a("a"),rdo=o("DPRQuestionEncoderTokenizerFast"),tdo=o(" (DPR model)"),ado=l(),rs=a("li"),Fle=a("strong"),ndo=o("electra"),sdo=o(" \u2014 "),DB=a("a"),ldo=o("ElectraTokenizer"),ido=o(" or "),GB=a("a"),ddo=o("ElectraTokenizerFast"),cdo=o(" (ELECTRA model)"),fdo=l(),ih=a("li"),Tle=a("strong"),mdo=o("flaubert"),gdo=o(" \u2014 "),OB=a("a"),hdo=o("FlaubertTokenizer"),pdo=o(" (FlauBERT model)"),_do=l(),ts=a("li"),Mle=a("strong"),udo=o("fnet"),bdo=o(" \u2014 "),VB=a("a"),vdo=o("FNetTokenizer"),Fdo=o(" or "),XB=a("a"),Tdo=o("FNetTokenizerFast"),Mdo=o(" (FNet model)"),Edo=l(),dh=a("li"),Ele=a("strong"),Cdo=o("fsmt"),wdo=o(" \u2014 "),zB=a("a"),Ado=o("FSMTTokenizer"),Ldo=o(" (FairSeq Machine-Translation model)"),ydo=l(),as=a("li"),Cle=a("strong"),xdo=o("funnel"),$do=o(" \u2014 "),QB=a("a"),kdo=o("FunnelTokenizer"),Sdo=o(" or "),WB=a("a"),Rdo=o("FunnelTokenizerFast"),Pdo=o(" (Funnel Transformer model)"),Bdo=l(),ns=a("li"),wle=a("strong"),Ndo=o("gpt2"),Ido=o(" \u2014 "),HB=a("a"),qdo=o("GPT2Tokenizer"),jdo=o(" or "),UB=a("a"),Ddo=o("GPT2TokenizerFast"),Gdo=o(" (OpenAI GPT-2 model)"),Odo=l(),ss=a("li"),Ale=a("strong"),Vdo=o("gpt_neo"),Xdo=o(" \u2014 "),JB=a("a"),zdo=o("GPT2Tokenizer"),Qdo=o(" or "),YB=a("a"),Wdo=o("GPT2TokenizerFast"),Hdo=o(" (GPT Neo model)"),Udo=l(),ch=a("li"),Lle=a("strong"),Jdo=o("gpt_neox"),Ydo=o(" \u2014 "),KB=a("a"),Kdo=o("GPTNeoXTokenizerFast"),Zdo=o(" (GPT NeoX model)"),eco=l(),ls=a("li"),yle=a("strong"),oco=o("gptj"),rco=o(" \u2014 "),ZB=a("a"),tco=o("GPT2Tokenizer"),aco=o(" or "),eN=a("a"),nco=o("GPT2TokenizerFast"),sco=o(" (GPT-J model)"),lco=l(),is=a("li"),xle=a("strong"),ico=o("groupvit"),dco=o(" \u2014 "),oN=a("a"),cco=o("CLIPTokenizer"),fco=o(" or "),rN=a("a"),mco=o("CLIPTokenizerFast"),gco=o(" (GroupViT model)"),hco=l(),ds=a("li"),$le=a("strong"),pco=o("herbert"),_co=o(" \u2014 "),tN=a("a"),uco=o("HerbertTokenizer"),bco=o(" or "),aN=a("a"),vco=o("HerbertTokenizerFast"),Fco=o(" (HerBERT model)"),Tco=l(),fh=a("li"),kle=a("strong"),Mco=o("hubert"),Eco=o(" \u2014 "),nN=a("a"),Cco=o("Wav2Vec2CTCTokenizer"),wco=o(" (Hubert model)"),Aco=l(),cs=a("li"),Sle=a("strong"),Lco=o("ibert"),yco=o(" \u2014 "),sN=a("a"),xco=o("RobertaTokenizer"),$co=o(" or "),lN=a("a"),kco=o("RobertaTokenizerFast"),Sco=o(" (I-BERT model)"),Rco=l(),fs=a("li"),Rle=a("strong"),Pco=o("layoutlm"),Bco=o(" \u2014 "),iN=a("a"),Nco=o("LayoutLMTokenizer"),Ico=o(" or "),dN=a("a"),qco=o("LayoutLMTokenizerFast"),jco=o(" (LayoutLM model)"),Dco=l(),ms=a("li"),Ple=a("strong"),Gco=o("layoutlmv2"),Oco=o(" \u2014 "),cN=a("a"),Vco=o("LayoutLMv2Tokenizer"),Xco=o(" or "),fN=a("a"),zco=o("LayoutLMv2TokenizerFast"),Qco=o(" (LayoutLMv2 model)"),Wco=l(),gs=a("li"),Ble=a("strong"),Hco=o("layoutlmv3"),Uco=o(" \u2014 "),mN=a("a"),Jco=o("LayoutLMv3Tokenizer"),Yco=o(" or "),gN=a("a"),Kco=o("LayoutLMv3TokenizerFast"),Zco=o(" (LayoutLMv3 model)"),efo=l(),hs=a("li"),Nle=a("strong"),ofo=o("layoutxlm"),rfo=o(" \u2014 "),hN=a("a"),tfo=o("LayoutXLMTokenizer"),afo=o(" or "),pN=a("a"),nfo=o("LayoutXLMTokenizerFast"),sfo=o(" (LayoutXLM model)"),lfo=l(),ps=a("li"),Ile=a("strong"),ifo=o("led"),dfo=o(" \u2014 "),_N=a("a"),cfo=o("LEDTokenizer"),ffo=o(" or "),uN=a("a"),mfo=o("LEDTokenizerFast"),gfo=o(" (LED model)"),hfo=l(),_s=a("li"),qle=a("strong"),pfo=o("longformer"),_fo=o(" \u2014 "),bN=a("a"),ufo=o("LongformerTokenizer"),bfo=o(" or "),vN=a("a"),vfo=o("LongformerTokenizerFast"),Ffo=o(" (Longformer model)"),Tfo=l(),us=a("li"),jle=a("strong"),Mfo=o("longt5"),Efo=o(" \u2014 "),FN=a("a"),Cfo=o("T5Tokenizer"),wfo=o(" or "),TN=a("a"),Afo=o("T5TokenizerFast"),Lfo=o(" (LongT5 model)"),yfo=l(),mh=a("li"),Dle=a("strong"),xfo=o("luke"),$fo=o(" \u2014 "),MN=a("a"),kfo=o("LukeTokenizer"),Sfo=o(" (LUKE model)"),Rfo=l(),bs=a("li"),Gle=a("strong"),Pfo=o("lxmert"),Bfo=o(" \u2014 "),EN=a("a"),Nfo=o("LxmertTokenizer"),Ifo=o(" or "),CN=a("a"),qfo=o("LxmertTokenizerFast"),jfo=o(" (LXMERT model)"),Dfo=l(),gh=a("li"),Ole=a("strong"),Gfo=o("m2m_100"),Ofo=o(" \u2014 "),wN=a("a"),Vfo=o("M2M100Tokenizer"),Xfo=o(" (M2M100 model)"),zfo=l(),hh=a("li"),Vle=a("strong"),Qfo=o("marian"),Wfo=o(" \u2014 "),AN=a("a"),Hfo=o("MarianTokenizer"),Ufo=o(" (Marian model)"),Jfo=l(),vs=a("li"),Xle=a("strong"),Yfo=o("mbart"),Kfo=o(" \u2014 "),LN=a("a"),Zfo=o("MBartTokenizer"),emo=o(" or "),yN=a("a"),omo=o("MBartTokenizerFast"),rmo=o(" (mBART model)"),tmo=l(),Fs=a("li"),zle=a("strong"),amo=o("mbart50"),nmo=o(" \u2014 "),xN=a("a"),smo=o("MBart50Tokenizer"),lmo=o(" or "),$N=a("a"),imo=o("MBart50TokenizerFast"),dmo=o(" (mBART-50 model)"),cmo=l(),Ts=a("li"),Qle=a("strong"),fmo=o("megatron-bert"),mmo=o(" \u2014 "),kN=a("a"),gmo=o("BertTokenizer"),hmo=o(" or "),SN=a("a"),pmo=o("BertTokenizerFast"),_mo=o(" (Megatron-BERT model)"),umo=l(),ph=a("li"),Wle=a("strong"),bmo=o("mluke"),vmo=o(" \u2014 "),RN=a("a"),Fmo=o("MLukeTokenizer"),Tmo=o(" (mLUKE model)"),Mmo=l(),Ms=a("li"),Hle=a("strong"),Emo=o("mobilebert"),Cmo=o(" \u2014 "),PN=a("a"),wmo=o("MobileBertTokenizer"),Amo=o(" or "),BN=a("a"),Lmo=o("MobileBertTokenizerFast"),ymo=o(" (MobileBERT model)"),xmo=l(),Es=a("li"),Ule=a("strong"),$mo=o("mpnet"),kmo=o(" \u2014 "),NN=a("a"),Smo=o("MPNetTokenizer"),Rmo=o(" or "),IN=a("a"),Pmo=o("MPNetTokenizerFast"),Bmo=o(" (MPNet model)"),Nmo=l(),Cs=a("li"),Jle=a("strong"),Imo=o("mt5"),qmo=o(" \u2014 "),qN=a("a"),jmo=o("MT5Tokenizer"),Dmo=o(" or "),jN=a("a"),Gmo=o("MT5TokenizerFast"),Omo=o(" (MT5 model)"),Vmo=l(),ws=a("li"),Yle=a("strong"),Xmo=o("mvp"),zmo=o(" \u2014 "),DN=a("a"),Qmo=o("MvpTokenizer"),Wmo=o(" or "),GN=a("a"),Hmo=o("MvpTokenizerFast"),Umo=o(" (MVP model)"),Jmo=l(),As=a("li"),Kle=a("strong"),Ymo=o("nezha"),Kmo=o(" \u2014 "),ON=a("a"),Zmo=o("BertTokenizer"),ego=o(" or "),VN=a("a"),ogo=o("BertTokenizerFast"),rgo=o(" (Nezha model)"),tgo=l(),Ls=a("li"),Zle=a("strong"),ago=o("nystromformer"),ngo=o(" \u2014 "),XN=a("a"),sgo=o("AlbertTokenizer"),lgo=o(" or "),zN=a("a"),igo=o("AlbertTokenizerFast"),dgo=o(" (Nystr\xF6mformer model)"),cgo=l(),ys=a("li"),eie=a("strong"),fgo=o("openai-gpt"),mgo=o(" \u2014 "),QN=a("a"),ggo=o("OpenAIGPTTokenizer"),hgo=o(" or "),WN=a("a"),pgo=o("OpenAIGPTTokenizerFast"),_go=o(" (OpenAI GPT model)"),ugo=l(),_h=a("li"),oie=a("strong"),bgo=o("opt"),vgo=o(" \u2014 "),HN=a("a"),Fgo=o("GPT2Tokenizer"),Tgo=o(" (OPT model)"),Mgo=l(),xs=a("li"),rie=a("strong"),Ego=o("pegasus"),Cgo=o(" \u2014 "),UN=a("a"),wgo=o("PegasusTokenizer"),Ago=o(" or "),JN=a("a"),Lgo=o("PegasusTokenizerFast"),ygo=o(" (Pegasus model)"),xgo=l(),uh=a("li"),tie=a("strong"),$go=o("perceiver"),kgo=o(" \u2014 "),YN=a("a"),Sgo=o("PerceiverTokenizer"),Rgo=o(" (Perceiver model)"),Pgo=l(),bh=a("li"),aie=a("strong"),Bgo=o("phobert"),Ngo=o(" \u2014 "),KN=a("a"),Igo=o("PhobertTokenizer"),qgo=o(" (PhoBERT model)"),jgo=l(),vh=a("li"),nie=a("strong"),Dgo=o("plbart"),Ggo=o(" \u2014 "),ZN=a("a"),Ogo=o("PLBartTokenizer"),Vgo=o(" (PLBart model)"),Xgo=l(),Fh=a("li"),sie=a("strong"),zgo=o("prophetnet"),Qgo=o(" \u2014 "),eI=a("a"),Wgo=o("ProphetNetTokenizer"),Hgo=o(" (ProphetNet model)"),Ugo=l(),$s=a("li"),lie=a("strong"),Jgo=o("qdqbert"),Ygo=o(" \u2014 "),oI=a("a"),Kgo=o("BertTokenizer"),Zgo=o(" or "),rI=a("a"),eho=o("BertTokenizerFast"),oho=o(" (QDQBert model)"),rho=l(),Th=a("li"),iie=a("strong"),tho=o("rag"),aho=o(" \u2014 "),tI=a("a"),nho=o("RagTokenizer"),sho=o(" (RAG model)"),lho=l(),ks=a("li"),die=a("strong"),iho=o("realm"),dho=o(" \u2014 "),aI=a("a"),cho=o("RealmTokenizer"),fho=o(" or "),nI=a("a"),mho=o("RealmTokenizerFast"),gho=o(" (REALM model)"),hho=l(),Ss=a("li"),cie=a("strong"),pho=o("reformer"),_ho=o(" \u2014 "),sI=a("a"),uho=o("ReformerTokenizer"),bho=o(" or "),lI=a("a"),vho=o("ReformerTokenizerFast"),Fho=o(" (Reformer model)"),Tho=l(),Rs=a("li"),fie=a("strong"),Mho=o("rembert"),Eho=o(" \u2014 "),iI=a("a"),Cho=o("RemBertTokenizer"),who=o(" or "),dI=a("a"),Aho=o("RemBertTokenizerFast"),Lho=o(" (RemBERT model)"),yho=l(),Ps=a("li"),mie=a("strong"),xho=o("retribert"),$ho=o(" \u2014 "),cI=a("a"),kho=o("RetriBertTokenizer"),Sho=o(" or "),fI=a("a"),Rho=o("RetriBertTokenizerFast"),Pho=o(" (RetriBERT model)"),Bho=l(),Bs=a("li"),gie=a("strong"),Nho=o("roberta"),Iho=o(" \u2014 "),mI=a("a"),qho=o("RobertaTokenizer"),jho=o(" or "),gI=a("a"),Dho=o("RobertaTokenizerFast"),Gho=o(" (RoBERTa model)"),Oho=l(),Ns=a("li"),hie=a("strong"),Vho=o("roformer"),Xho=o(" \u2014 "),hI=a("a"),zho=o("RoFormerTokenizer"),Qho=o(" or "),pI=a("a"),Who=o("RoFormerTokenizerFast"),Hho=o(" (RoFormer model)"),Uho=l(),Mh=a("li"),pie=a("strong"),Jho=o("speech_to_text"),Yho=o(" \u2014 "),_I=a("a"),Kho=o("Speech2TextTokenizer"),Zho=o(" (Speech2Text model)"),epo=l(),Eh=a("li"),_ie=a("strong"),opo=o("speech_to_text_2"),rpo=o(" \u2014 "),uI=a("a"),tpo=o("Speech2Text2Tokenizer"),apo=o(" (Speech2Text2 model)"),npo=l(),Is=a("li"),uie=a("strong"),spo=o("splinter"),lpo=o(" \u2014 "),bI=a("a"),ipo=o("SplinterTokenizer"),dpo=o(" or "),vI=a("a"),cpo=o("SplinterTokenizerFast"),fpo=o(" (Splinter model)"),mpo=l(),qs=a("li"),bie=a("strong"),gpo=o("squeezebert"),hpo=o(" \u2014 "),FI=a("a"),ppo=o("SqueezeBertTokenizer"),_po=o(" or "),TI=a("a"),upo=o("SqueezeBertTokenizerFast"),bpo=o(" (SqueezeBERT model)"),vpo=l(),js=a("li"),vie=a("strong"),Fpo=o("t5"),Tpo=o(" \u2014 "),MI=a("a"),Mpo=o("T5Tokenizer"),Epo=o(" or "),EI=a("a"),Cpo=o("T5TokenizerFast"),wpo=o(" (T5 model)"),Apo=l(),Ch=a("li"),Fie=a("strong"),Lpo=o("tapas"),ypo=o(" \u2014 "),CI=a("a"),xpo=o("TapasTokenizer"),$po=o(" (TAPAS model)"),kpo=l(),wh=a("li"),Tie=a("strong"),Spo=o("tapex"),Rpo=o(" \u2014 "),wI=a("a"),Ppo=o("TapexTokenizer"),Bpo=o(" (TAPEX model)"),Npo=l(),Ah=a("li"),Mie=a("strong"),Ipo=o("transfo-xl"),qpo=o(" \u2014 "),AI=a("a"),jpo=o("TransfoXLTokenizer"),Dpo=o(" (Transformer-XL model)"),Gpo=l(),Ds=a("li"),Eie=a("strong"),Opo=o("vilt"),Vpo=o(" \u2014 "),LI=a("a"),Xpo=o("BertTokenizer"),zpo=o(" or "),yI=a("a"),Qpo=o("BertTokenizerFast"),Wpo=o(" (ViLT model)"),Hpo=l(),Gs=a("li"),Cie=a("strong"),Upo=o("visual_bert"),Jpo=o(" \u2014 "),xI=a("a"),Ypo=o("BertTokenizer"),Kpo=o(" or "),$I=a("a"),Zpo=o("BertTokenizerFast"),e_o=o(" (VisualBERT model)"),o_o=l(),Lh=a("li"),wie=a("strong"),r_o=o("wav2vec2"),t_o=o(" \u2014 "),kI=a("a"),a_o=o("Wav2Vec2CTCTokenizer"),n_o=o(" (Wav2Vec2 model)"),s_o=l(),yh=a("li"),Aie=a("strong"),l_o=o("wav2vec2-conformer"),i_o=o(" \u2014 "),SI=a("a"),d_o=o("Wav2Vec2CTCTokenizer"),c_o=o(" (Wav2Vec2-Conformer model)"),f_o=l(),xh=a("li"),Lie=a("strong"),m_o=o("wav2vec2_phoneme"),g_o=o(" \u2014 "),RI=a("a"),h_o=o("Wav2Vec2PhonemeCTCTokenizer"),p_o=o(" (Wav2Vec2Phoneme model)"),__o=l(),Os=a("li"),yie=a("strong"),u_o=o("xglm"),b_o=o(" \u2014 "),PI=a("a"),v_o=o("XGLMTokenizer"),F_o=o(" or "),BI=a("a"),T_o=o("XGLMTokenizerFast"),M_o=o(" (XGLM model)"),E_o=l(),$h=a("li"),xie=a("strong"),C_o=o("xlm"),w_o=o(" \u2014 "),NI=a("a"),A_o=o("XLMTokenizer"),L_o=o(" (XLM model)"),y_o=l(),kh=a("li"),$ie=a("strong"),x_o=o("xlm-prophetnet"),$_o=o(" \u2014 "),II=a("a"),k_o=o("XLMProphetNetTokenizer"),S_o=o(" (XLM-ProphetNet model)"),R_o=l(),Vs=a("li"),kie=a("strong"),P_o=o("xlm-roberta"),B_o=o(" \u2014 "),qI=a("a"),N_o=o("XLMRobertaTokenizer"),I_o=o(" or "),jI=a("a"),q_o=o("XLMRobertaTokenizerFast"),j_o=o(" (XLM-RoBERTa model)"),D_o=l(),Xs=a("li"),Sie=a("strong"),G_o=o("xlm-roberta-xl"),O_o=o(" \u2014 "),DI=a("a"),V_o=o("RobertaTokenizer"),X_o=o(" or "),GI=a("a"),z_o=o("RobertaTokenizerFast"),Q_o=o(" (XLM-RoBERTa-XL model)"),W_o=l(),zs=a("li"),Rie=a("strong"),H_o=o("xlnet"),U_o=o(" \u2014 "),OI=a("a"),J_o=o("XLNetTokenizer"),Y_o=o(" or "),VI=a("a"),K_o=o("XLNetTokenizerFast"),Z_o=o(" (XLNet model)"),euo=l(),Qs=a("li"),Pie=a("strong"),ouo=o("yoso"),ruo=o(" \u2014 "),XI=a("a"),tuo=o("AlbertTokenizer"),auo=o(" or "),zI=a("a"),nuo=o("AlbertTokenizerFast"),suo=o(" (YOSO model)"),luo=l(),F(Sh.$$.fragment),iuo=l(),Rh=a("div"),F(_L.$$.fragment),duo=l(),Bie=a("p"),cuo=o("Register a new tokenizer in this mapping."),oXe=l(),Ii=a("h2"),Ph=a("a"),Nie=a("span"),F(uL.$$.fragment),fuo=l(),Iie=a("span"),muo=o("AutoFeatureExtractor"),rXe=l(),Lo=a("div"),F(bL.$$.fragment),guo=l(),vL=a("p"),huo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QI=a("a"),puo=o("AutoFeatureExtractor.from_pretrained()"),_uo=o(" class method."),uuo=l(),FL=a("p"),buo=o("This class cannot be instantiated directly using "),qie=a("code"),vuo=o("__init__()"),Fuo=o(" (throws an error)."),Tuo=l(),He=a("div"),F(TL.$$.fragment),Muo=l(),jie=a("p"),Euo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Cuo=l(),Ba=a("p"),wuo=o("The feature extractor class to instantiate is selected based on the "),Die=a("code"),Auo=o("model_type"),Luo=o(` property of the config object
(either passed as an argument or loaded from `),Gie=a("code"),yuo=o("pretrained_model_name_or_path"),xuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Oie=a("code"),$uo=o("pretrained_model_name_or_path"),kuo=o(":"),Suo=l(),Y=a("ul"),Bh=a("li"),Vie=a("strong"),Ruo=o("beit"),Puo=o(" \u2014 "),WI=a("a"),Buo=o("BeitFeatureExtractor"),Nuo=o(" (BEiT model)"),Iuo=l(),Nh=a("li"),Xie=a("strong"),quo=o("clip"),juo=o(" \u2014 "),HI=a("a"),Duo=o("CLIPFeatureExtractor"),Guo=o(" (CLIP model)"),Ouo=l(),Ih=a("li"),zie=a("strong"),Vuo=o("convnext"),Xuo=o(" \u2014 "),UI=a("a"),zuo=o("ConvNextFeatureExtractor"),Quo=o(" (ConvNeXT model)"),Wuo=l(),qh=a("li"),Qie=a("strong"),Huo=o("cvt"),Uuo=o(" \u2014 "),JI=a("a"),Juo=o("ConvNextFeatureExtractor"),Yuo=o(" (CvT model)"),Kuo=l(),jh=a("li"),Wie=a("strong"),Zuo=o("data2vec-audio"),e1o=o(" \u2014 "),YI=a("a"),o1o=o("Wav2Vec2FeatureExtractor"),r1o=o(" (Data2VecAudio model)"),t1o=l(),Dh=a("li"),Hie=a("strong"),a1o=o("data2vec-vision"),n1o=o(" \u2014 "),KI=a("a"),s1o=o("BeitFeatureExtractor"),l1o=o(" (Data2VecVision model)"),i1o=l(),Gh=a("li"),Uie=a("strong"),d1o=o("deit"),c1o=o(" \u2014 "),ZI=a("a"),f1o=o("DeiTFeatureExtractor"),m1o=o(" (DeiT model)"),g1o=l(),Oh=a("li"),Jie=a("strong"),h1o=o("detr"),p1o=o(" \u2014 "),eq=a("a"),_1o=o("DetrFeatureExtractor"),u1o=o(" (DETR model)"),b1o=l(),Vh=a("li"),Yie=a("strong"),v1o=o("dpt"),F1o=o(" \u2014 "),oq=a("a"),T1o=o("DPTFeatureExtractor"),M1o=o(" (DPT model)"),E1o=l(),Xh=a("li"),Kie=a("strong"),C1o=o("flava"),w1o=o(" \u2014 "),rq=a("a"),A1o=o("FlavaFeatureExtractor"),L1o=o(" (FLAVA model)"),y1o=l(),zh=a("li"),Zie=a("strong"),x1o=o("glpn"),$1o=o(" \u2014 "),tq=a("a"),k1o=o("GLPNFeatureExtractor"),S1o=o(" (GLPN model)"),R1o=l(),Qh=a("li"),ede=a("strong"),P1o=o("groupvit"),B1o=o(" \u2014 "),aq=a("a"),N1o=o("CLIPFeatureExtractor"),I1o=o(" (GroupViT model)"),q1o=l(),Wh=a("li"),ode=a("strong"),j1o=o("hubert"),D1o=o(" \u2014 "),nq=a("a"),G1o=o("Wav2Vec2FeatureExtractor"),O1o=o(" (Hubert model)"),V1o=l(),Hh=a("li"),rde=a("strong"),X1o=o("imagegpt"),z1o=o(" \u2014 "),sq=a("a"),Q1o=o("ImageGPTFeatureExtractor"),W1o=o(" (ImageGPT model)"),H1o=l(),Uh=a("li"),tde=a("strong"),U1o=o("layoutlmv2"),J1o=o(" \u2014 "),lq=a("a"),Y1o=o("LayoutLMv2FeatureExtractor"),K1o=o(" (LayoutLMv2 model)"),Z1o=l(),Jh=a("li"),ade=a("strong"),e2o=o("layoutlmv3"),o2o=o(" \u2014 "),iq=a("a"),r2o=o("LayoutLMv3FeatureExtractor"),t2o=o(" (LayoutLMv3 model)"),a2o=l(),Yh=a("li"),nde=a("strong"),n2o=o("levit"),s2o=o(" \u2014 "),dq=a("a"),l2o=o("LevitFeatureExtractor"),i2o=o(" (LeViT model)"),d2o=l(),Kh=a("li"),sde=a("strong"),c2o=o("maskformer"),f2o=o(" \u2014 "),cq=a("a"),m2o=o("MaskFormerFeatureExtractor"),g2o=o(" (MaskFormer model)"),h2o=l(),Zh=a("li"),lde=a("strong"),p2o=o("mctct"),_2o=o(" \u2014 "),fq=a("a"),u2o=o("MCTCTFeatureExtractor"),b2o=o(" (M-CTC-T model)"),v2o=l(),ep=a("li"),ide=a("strong"),F2o=o("mobilevit"),T2o=o(" \u2014 "),mq=a("a"),M2o=o("MobileViTFeatureExtractor"),E2o=o(" (MobileViT model)"),C2o=l(),op=a("li"),dde=a("strong"),w2o=o("perceiver"),A2o=o(" \u2014 "),gq=a("a"),L2o=o("PerceiverFeatureExtractor"),y2o=o(" (Perceiver model)"),x2o=l(),rp=a("li"),cde=a("strong"),$2o=o("poolformer"),k2o=o(" \u2014 "),hq=a("a"),S2o=o("PoolFormerFeatureExtractor"),R2o=o(" (PoolFormer model)"),P2o=l(),tp=a("li"),fde=a("strong"),B2o=o("regnet"),N2o=o(" \u2014 "),pq=a("a"),I2o=o("ConvNextFeatureExtractor"),q2o=o(" (RegNet model)"),j2o=l(),ap=a("li"),mde=a("strong"),D2o=o("resnet"),G2o=o(" \u2014 "),_q=a("a"),O2o=o("ConvNextFeatureExtractor"),V2o=o(" (ResNet model)"),X2o=l(),np=a("li"),gde=a("strong"),z2o=o("segformer"),Q2o=o(" \u2014 "),uq=a("a"),W2o=o("SegformerFeatureExtractor"),H2o=o(" (SegFormer model)"),U2o=l(),sp=a("li"),hde=a("strong"),J2o=o("speech_to_text"),Y2o=o(" \u2014 "),bq=a("a"),K2o=o("Speech2TextFeatureExtractor"),Z2o=o(" (Speech2Text model)"),ebo=l(),lp=a("li"),pde=a("strong"),obo=o("swin"),rbo=o(" \u2014 "),vq=a("a"),tbo=o("ViTFeatureExtractor"),abo=o(" (Swin Transformer model)"),nbo=l(),ip=a("li"),_de=a("strong"),sbo=o("van"),lbo=o(" \u2014 "),Fq=a("a"),ibo=o("ConvNextFeatureExtractor"),dbo=o(" (VAN model)"),cbo=l(),dp=a("li"),ude=a("strong"),fbo=o("vilt"),mbo=o(" \u2014 "),Tq=a("a"),gbo=o("ViltFeatureExtractor"),hbo=o(" (ViLT model)"),pbo=l(),cp=a("li"),bde=a("strong"),_bo=o("vit"),ubo=o(" \u2014 "),Mq=a("a"),bbo=o("ViTFeatureExtractor"),vbo=o(" (ViT model)"),Fbo=l(),fp=a("li"),vde=a("strong"),Tbo=o("vit_mae"),Mbo=o(" \u2014 "),Eq=a("a"),Ebo=o("ViTFeatureExtractor"),Cbo=o(" (ViTMAE model)"),wbo=l(),mp=a("li"),Fde=a("strong"),Abo=o("wav2vec2"),Lbo=o(" \u2014 "),Cq=a("a"),ybo=o("Wav2Vec2FeatureExtractor"),xbo=o(" (Wav2Vec2 model)"),$bo=l(),gp=a("li"),Tde=a("strong"),kbo=o("wav2vec2-conformer"),Sbo=o(" \u2014 "),wq=a("a"),Rbo=o("Wav2Vec2FeatureExtractor"),Pbo=o(" (Wav2Vec2-Conformer model)"),Bbo=l(),hp=a("li"),Mde=a("strong"),Nbo=o("yolos"),Ibo=o(" \u2014 "),Aq=a("a"),qbo=o("YolosFeatureExtractor"),jbo=o(" (YOLOS model)"),Dbo=l(),F(pp.$$.fragment),Gbo=l(),F(_p.$$.fragment),Obo=l(),up=a("div"),F(ML.$$.fragment),Vbo=l(),Ede=a("p"),Xbo=o("Register a new feature extractor for this class."),tXe=l(),qi=a("h2"),bp=a("a"),Cde=a("span"),F(EL.$$.fragment),zbo=l(),wde=a("span"),Qbo=o("AutoProcessor"),aXe=l(),yo=a("div"),F(CL.$$.fragment),Wbo=l(),wL=a("p"),Hbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Lq=a("a"),Ubo=o("AutoProcessor.from_pretrained()"),Jbo=o(" class method."),Ybo=l(),AL=a("p"),Kbo=o("This class cannot be instantiated directly using "),Ade=a("code"),Zbo=o("__init__()"),evo=o(" (throws an error)."),ovo=l(),Ue=a("div"),F(LL.$$.fragment),rvo=l(),Lde=a("p"),tvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),avo=l(),ji=a("p"),nvo=o("The processor class to instantiate is selected based on the "),yde=a("code"),svo=o("model_type"),lvo=o(` property of the config object (either
passed as an argument or loaded from `),xde=a("code"),ivo=o("pretrained_model_name_or_path"),dvo=o(" if possible):"),cvo=l(),he=a("ul"),vp=a("li"),$de=a("strong"),fvo=o("clip"),mvo=o(" \u2014 "),yq=a("a"),gvo=o("CLIPProcessor"),hvo=o(" (CLIP model)"),pvo=l(),Fp=a("li"),kde=a("strong"),_vo=o("flava"),uvo=o(" \u2014 "),Sde=a("code"),bvo=o("FLAVAProcessor"),vvo=o(" (FLAVA model)"),Fvo=l(),Tp=a("li"),Rde=a("strong"),Tvo=o("groupvit"),Mvo=o(" \u2014 "),xq=a("a"),Evo=o("CLIPProcessor"),Cvo=o(" (GroupViT model)"),wvo=l(),Mp=a("li"),Pde=a("strong"),Avo=o("layoutlmv2"),Lvo=o(" \u2014 "),$q=a("a"),yvo=o("LayoutLMv2Processor"),xvo=o(" (LayoutLMv2 model)"),$vo=l(),Ep=a("li"),Bde=a("strong"),kvo=o("layoutlmv3"),Svo=o(" \u2014 "),kq=a("a"),Rvo=o("LayoutLMv3Processor"),Pvo=o(" (LayoutLMv3 model)"),Bvo=l(),Cp=a("li"),Nde=a("strong"),Nvo=o("layoutxlm"),Ivo=o(" \u2014 "),Sq=a("a"),qvo=o("LayoutXLMProcessor"),jvo=o(" (LayoutXLM model)"),Dvo=l(),wp=a("li"),Ide=a("strong"),Gvo=o("sew"),Ovo=o(" \u2014 "),Rq=a("a"),Vvo=o("Wav2Vec2Processor"),Xvo=o(" (SEW model)"),zvo=l(),Ap=a("li"),qde=a("strong"),Qvo=o("sew-d"),Wvo=o(" \u2014 "),Pq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (SEW-D model)"),Jvo=l(),Lp=a("li"),jde=a("strong"),Yvo=o("speech_to_text"),Kvo=o(" \u2014 "),Bq=a("a"),Zvo=o("Speech2TextProcessor"),e3o=o(" (Speech2Text model)"),o3o=l(),yp=a("li"),Dde=a("strong"),r3o=o("speech_to_text_2"),t3o=o(" \u2014 "),Nq=a("a"),a3o=o("Speech2Text2Processor"),n3o=o(" (Speech2Text2 model)"),s3o=l(),xp=a("li"),Gde=a("strong"),l3o=o("trocr"),i3o=o(" \u2014 "),Iq=a("a"),d3o=o("TrOCRProcessor"),c3o=o(" (TrOCR model)"),f3o=l(),$p=a("li"),Ode=a("strong"),m3o=o("unispeech"),g3o=o(" \u2014 "),qq=a("a"),h3o=o("Wav2Vec2Processor"),p3o=o(" (UniSpeech model)"),_3o=l(),kp=a("li"),Vde=a("strong"),u3o=o("unispeech-sat"),b3o=o(" \u2014 "),jq=a("a"),v3o=o("Wav2Vec2Processor"),F3o=o(" (UniSpeechSat model)"),T3o=l(),Sp=a("li"),Xde=a("strong"),M3o=o("vilt"),E3o=o(" \u2014 "),Dq=a("a"),C3o=o("ViltProcessor"),w3o=o(" (ViLT model)"),A3o=l(),Rp=a("li"),zde=a("strong"),L3o=o("vision-text-dual-encoder"),y3o=o(" \u2014 "),Gq=a("a"),x3o=o("VisionTextDualEncoderProcessor"),$3o=o(" (VisionTextDualEncoder model)"),k3o=l(),Pp=a("li"),Qde=a("strong"),S3o=o("wav2vec2"),R3o=o(" \u2014 "),Oq=a("a"),P3o=o("Wav2Vec2Processor"),B3o=o(" (Wav2Vec2 model)"),N3o=l(),Bp=a("li"),Wde=a("strong"),I3o=o("wav2vec2-conformer"),q3o=o(" \u2014 "),Vq=a("a"),j3o=o("Wav2Vec2Processor"),D3o=o(" (Wav2Vec2-Conformer model)"),G3o=l(),Np=a("li"),Hde=a("strong"),O3o=o("wavlm"),V3o=o(" \u2014 "),Xq=a("a"),X3o=o("Wav2Vec2Processor"),z3o=o(" (WavLM model)"),Q3o=l(),F(Ip.$$.fragment),W3o=l(),F(qp.$$.fragment),H3o=l(),jp=a("div"),F(yL.$$.fragment),U3o=l(),Ude=a("p"),J3o=o("Register a new processor for this class."),nXe=l(),Di=a("h2"),Dp=a("a"),Jde=a("span"),F(xL.$$.fragment),Y3o=l(),Yde=a("span"),K3o=o("AutoModel"),sXe=l(),xo=a("div"),F($L.$$.fragment),Z3o=l(),Gi=a("p"),eFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zq=a("a"),oFo=o("from_pretrained()"),rFo=o(" class method or the "),Qq=a("a"),tFo=o("from_config()"),aFo=o(` class
method.`),nFo=l(),kL=a("p"),sFo=o("This class cannot be instantiated directly using "),Kde=a("code"),lFo=o("__init__()"),iFo=o(" (throws an error)."),dFo=l(),lt=a("div"),F(SL.$$.fragment),cFo=l(),Zde=a("p"),fFo=o("Instantiates one of the base model classes of the library from a configuration."),mFo=l(),Oi=a("p"),gFo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),hFo=o("not"),pFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wq=a("a"),_Fo=o("from_pretrained()"),uFo=o(" to load the model weights."),bFo=l(),F(Gp.$$.fragment),vFo=l(),Je=a("div"),F(RL.$$.fragment),FFo=l(),oce=a("p"),TFo=o("Instantiate one of the base model classes of the library from a pretrained model."),MFo=l(),Na=a("p"),EFo=o("The model class to instantiate is selected based on the "),rce=a("code"),CFo=o("model_type"),wFo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),AFo=o("pretrained_model_name_or_path"),LFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),yFo=o("pretrained_model_name_or_path"),xFo=o(":"),$Fo=l(),y=a("ul"),Op=a("li"),nce=a("strong"),kFo=o("albert"),SFo=o(" \u2014 "),Hq=a("a"),RFo=o("AlbertModel"),PFo=o(" (ALBERT model)"),BFo=l(),Vp=a("li"),sce=a("strong"),NFo=o("bart"),IFo=o(" \u2014 "),Uq=a("a"),qFo=o("BartModel"),jFo=o(" (BART model)"),DFo=l(),Xp=a("li"),lce=a("strong"),GFo=o("beit"),OFo=o(" \u2014 "),Jq=a("a"),VFo=o("BeitModel"),XFo=o(" (BEiT model)"),zFo=l(),zp=a("li"),ice=a("strong"),QFo=o("bert"),WFo=o(" \u2014 "),Yq=a("a"),HFo=o("BertModel"),UFo=o(" (BERT model)"),JFo=l(),Qp=a("li"),dce=a("strong"),YFo=o("bert-generation"),KFo=o(" \u2014 "),Kq=a("a"),ZFo=o("BertGenerationEncoder"),eTo=o(" (Bert Generation model)"),oTo=l(),Wp=a("li"),cce=a("strong"),rTo=o("big_bird"),tTo=o(" \u2014 "),Zq=a("a"),aTo=o("BigBirdModel"),nTo=o(" (BigBird model)"),sTo=l(),Hp=a("li"),fce=a("strong"),lTo=o("bigbird_pegasus"),iTo=o(" \u2014 "),ej=a("a"),dTo=o("BigBirdPegasusModel"),cTo=o(" (BigBird-Pegasus model)"),fTo=l(),Up=a("li"),mce=a("strong"),mTo=o("blenderbot"),gTo=o(" \u2014 "),oj=a("a"),hTo=o("BlenderbotModel"),pTo=o(" (Blenderbot model)"),_To=l(),Jp=a("li"),gce=a("strong"),uTo=o("blenderbot-small"),bTo=o(" \u2014 "),rj=a("a"),vTo=o("BlenderbotSmallModel"),FTo=o(" (BlenderbotSmall model)"),TTo=l(),Yp=a("li"),hce=a("strong"),MTo=o("bloom"),ETo=o(" \u2014 "),tj=a("a"),CTo=o("BloomModel"),wTo=o(" (BLOOM model)"),ATo=l(),Kp=a("li"),pce=a("strong"),LTo=o("camembert"),yTo=o(" \u2014 "),aj=a("a"),xTo=o("CamembertModel"),$To=o(" (CamemBERT model)"),kTo=l(),Zp=a("li"),_ce=a("strong"),STo=o("canine"),RTo=o(" \u2014 "),nj=a("a"),PTo=o("CanineModel"),BTo=o(" (CANINE model)"),NTo=l(),e_=a("li"),uce=a("strong"),ITo=o("clip"),qTo=o(" \u2014 "),sj=a("a"),jTo=o("CLIPModel"),DTo=o(" (CLIP model)"),GTo=l(),o_=a("li"),bce=a("strong"),OTo=o("codegen"),VTo=o(" \u2014 "),lj=a("a"),XTo=o("CodeGenModel"),zTo=o(" (CodeGen model)"),QTo=l(),r_=a("li"),vce=a("strong"),WTo=o("convbert"),HTo=o(" \u2014 "),ij=a("a"),UTo=o("ConvBertModel"),JTo=o(" (ConvBERT model)"),YTo=l(),t_=a("li"),Fce=a("strong"),KTo=o("convnext"),ZTo=o(" \u2014 "),dj=a("a"),e8o=o("ConvNextModel"),o8o=o(" (ConvNeXT model)"),r8o=l(),a_=a("li"),Tce=a("strong"),t8o=o("ctrl"),a8o=o(" \u2014 "),cj=a("a"),n8o=o("CTRLModel"),s8o=o(" (CTRL model)"),l8o=l(),n_=a("li"),Mce=a("strong"),i8o=o("cvt"),d8o=o(" \u2014 "),fj=a("a"),c8o=o("CvtModel"),f8o=o(" (CvT model)"),m8o=l(),s_=a("li"),Ece=a("strong"),g8o=o("data2vec-audio"),h8o=o(" \u2014 "),mj=a("a"),p8o=o("Data2VecAudioModel"),_8o=o(" (Data2VecAudio model)"),u8o=l(),l_=a("li"),Cce=a("strong"),b8o=o("data2vec-text"),v8o=o(" \u2014 "),gj=a("a"),F8o=o("Data2VecTextModel"),T8o=o(" (Data2VecText model)"),M8o=l(),i_=a("li"),wce=a("strong"),E8o=o("data2vec-vision"),C8o=o(" \u2014 "),hj=a("a"),w8o=o("Data2VecVisionModel"),A8o=o(" (Data2VecVision model)"),L8o=l(),d_=a("li"),Ace=a("strong"),y8o=o("deberta"),x8o=o(" \u2014 "),pj=a("a"),$8o=o("DebertaModel"),k8o=o(" (DeBERTa model)"),S8o=l(),c_=a("li"),Lce=a("strong"),R8o=o("deberta-v2"),P8o=o(" \u2014 "),_j=a("a"),B8o=o("DebertaV2Model"),N8o=o(" (DeBERTa-v2 model)"),I8o=l(),f_=a("li"),yce=a("strong"),q8o=o("decision_transformer"),j8o=o(" \u2014 "),uj=a("a"),D8o=o("DecisionTransformerModel"),G8o=o(" (Decision Transformer model)"),O8o=l(),m_=a("li"),xce=a("strong"),V8o=o("deit"),X8o=o(" \u2014 "),bj=a("a"),z8o=o("DeiTModel"),Q8o=o(" (DeiT model)"),W8o=l(),g_=a("li"),$ce=a("strong"),H8o=o("detr"),U8o=o(" \u2014 "),vj=a("a"),J8o=o("DetrModel"),Y8o=o(" (DETR model)"),K8o=l(),h_=a("li"),kce=a("strong"),Z8o=o("distilbert"),eMo=o(" \u2014 "),Fj=a("a"),oMo=o("DistilBertModel"),rMo=o(" (DistilBERT model)"),tMo=l(),p_=a("li"),Sce=a("strong"),aMo=o("dpr"),nMo=o(" \u2014 "),Tj=a("a"),sMo=o("DPRQuestionEncoder"),lMo=o(" (DPR model)"),iMo=l(),__=a("li"),Rce=a("strong"),dMo=o("dpt"),cMo=o(" \u2014 "),Mj=a("a"),fMo=o("DPTModel"),mMo=o(" (DPT model)"),gMo=l(),u_=a("li"),Pce=a("strong"),hMo=o("electra"),pMo=o(" \u2014 "),Ej=a("a"),_Mo=o("ElectraModel"),uMo=o(" (ELECTRA model)"),bMo=l(),b_=a("li"),Bce=a("strong"),vMo=o("flaubert"),FMo=o(" \u2014 "),Cj=a("a"),TMo=o("FlaubertModel"),MMo=o(" (FlauBERT model)"),EMo=l(),v_=a("li"),Nce=a("strong"),CMo=o("flava"),wMo=o(" \u2014 "),wj=a("a"),AMo=o("FlavaModel"),LMo=o(" (FLAVA model)"),yMo=l(),F_=a("li"),Ice=a("strong"),xMo=o("fnet"),$Mo=o(" \u2014 "),Aj=a("a"),kMo=o("FNetModel"),SMo=o(" (FNet model)"),RMo=l(),T_=a("li"),qce=a("strong"),PMo=o("fsmt"),BMo=o(" \u2014 "),Lj=a("a"),NMo=o("FSMTModel"),IMo=o(" (FairSeq Machine-Translation model)"),qMo=l(),Ws=a("li"),jce=a("strong"),jMo=o("funnel"),DMo=o(" \u2014 "),yj=a("a"),GMo=o("FunnelModel"),OMo=o(" or "),xj=a("a"),VMo=o("FunnelBaseModel"),XMo=o(" (Funnel Transformer model)"),zMo=l(),M_=a("li"),Dce=a("strong"),QMo=o("glpn"),WMo=o(" \u2014 "),$j=a("a"),HMo=o("GLPNModel"),UMo=o(" (GLPN model)"),JMo=l(),E_=a("li"),Gce=a("strong"),YMo=o("gpt2"),KMo=o(" \u2014 "),kj=a("a"),ZMo=o("GPT2Model"),e4o=o(" (OpenAI GPT-2 model)"),o4o=l(),C_=a("li"),Oce=a("strong"),r4o=o("gpt_neo"),t4o=o(" \u2014 "),Sj=a("a"),a4o=o("GPTNeoModel"),n4o=o(" (GPT Neo model)"),s4o=l(),w_=a("li"),Vce=a("strong"),l4o=o("gpt_neox"),i4o=o(" \u2014 "),Rj=a("a"),d4o=o("GPTNeoXModel"),c4o=o(" (GPT NeoX model)"),f4o=l(),A_=a("li"),Xce=a("strong"),m4o=o("gptj"),g4o=o(" \u2014 "),Pj=a("a"),h4o=o("GPTJModel"),p4o=o(" (GPT-J model)"),_4o=l(),L_=a("li"),zce=a("strong"),u4o=o("groupvit"),b4o=o(" \u2014 "),Bj=a("a"),v4o=o("GroupViTModel"),F4o=o(" (GroupViT model)"),T4o=l(),y_=a("li"),Qce=a("strong"),M4o=o("hubert"),E4o=o(" \u2014 "),Nj=a("a"),C4o=o("HubertModel"),w4o=o(" (Hubert model)"),A4o=l(),x_=a("li"),Wce=a("strong"),L4o=o("ibert"),y4o=o(" \u2014 "),Ij=a("a"),x4o=o("IBertModel"),$4o=o(" (I-BERT model)"),k4o=l(),$_=a("li"),Hce=a("strong"),S4o=o("imagegpt"),R4o=o(" \u2014 "),qj=a("a"),P4o=o("ImageGPTModel"),B4o=o(" (ImageGPT model)"),N4o=l(),k_=a("li"),Uce=a("strong"),I4o=o("layoutlm"),q4o=o(" \u2014 "),jj=a("a"),j4o=o("LayoutLMModel"),D4o=o(" (LayoutLM model)"),G4o=l(),S_=a("li"),Jce=a("strong"),O4o=o("layoutlmv2"),V4o=o(" \u2014 "),Dj=a("a"),X4o=o("LayoutLMv2Model"),z4o=o(" (LayoutLMv2 model)"),Q4o=l(),R_=a("li"),Yce=a("strong"),W4o=o("layoutlmv3"),H4o=o(" \u2014 "),Gj=a("a"),U4o=o("LayoutLMv3Model"),J4o=o(" (LayoutLMv3 model)"),Y4o=l(),P_=a("li"),Kce=a("strong"),K4o=o("led"),Z4o=o(" \u2014 "),Oj=a("a"),eEo=o("LEDModel"),oEo=o(" (LED model)"),rEo=l(),B_=a("li"),Zce=a("strong"),tEo=o("levit"),aEo=o(" \u2014 "),Vj=a("a"),nEo=o("LevitModel"),sEo=o(" (LeViT model)"),lEo=l(),N_=a("li"),efe=a("strong"),iEo=o("longformer"),dEo=o(" \u2014 "),Xj=a("a"),cEo=o("LongformerModel"),fEo=o(" (Longformer model)"),mEo=l(),I_=a("li"),ofe=a("strong"),gEo=o("longt5"),hEo=o(" \u2014 "),zj=a("a"),pEo=o("LongT5Model"),_Eo=o(" (LongT5 model)"),uEo=l(),q_=a("li"),rfe=a("strong"),bEo=o("luke"),vEo=o(" \u2014 "),Qj=a("a"),FEo=o("LukeModel"),TEo=o(" (LUKE model)"),MEo=l(),j_=a("li"),tfe=a("strong"),EEo=o("lxmert"),CEo=o(" \u2014 "),Wj=a("a"),wEo=o("LxmertModel"),AEo=o(" (LXMERT model)"),LEo=l(),D_=a("li"),afe=a("strong"),yEo=o("m2m_100"),xEo=o(" \u2014 "),Hj=a("a"),$Eo=o("M2M100Model"),kEo=o(" (M2M100 model)"),SEo=l(),G_=a("li"),nfe=a("strong"),REo=o("marian"),PEo=o(" \u2014 "),Uj=a("a"),BEo=o("MarianModel"),NEo=o(" (Marian model)"),IEo=l(),O_=a("li"),sfe=a("strong"),qEo=o("maskformer"),jEo=o(" \u2014 "),Jj=a("a"),DEo=o("MaskFormerModel"),GEo=o(" (MaskFormer model)"),OEo=l(),V_=a("li"),lfe=a("strong"),VEo=o("mbart"),XEo=o(" \u2014 "),Yj=a("a"),zEo=o("MBartModel"),QEo=o(" (mBART model)"),WEo=l(),X_=a("li"),ife=a("strong"),HEo=o("mctct"),UEo=o(" \u2014 "),Kj=a("a"),JEo=o("MCTCTModel"),YEo=o(" (M-CTC-T model)"),KEo=l(),z_=a("li"),dfe=a("strong"),ZEo=o("megatron-bert"),eCo=o(" \u2014 "),Zj=a("a"),oCo=o("MegatronBertModel"),rCo=o(" (Megatron-BERT model)"),tCo=l(),Q_=a("li"),cfe=a("strong"),aCo=o("mobilebert"),nCo=o(" \u2014 "),eD=a("a"),sCo=o("MobileBertModel"),lCo=o(" (MobileBERT model)"),iCo=l(),W_=a("li"),ffe=a("strong"),dCo=o("mobilevit"),cCo=o(" \u2014 "),oD=a("a"),fCo=o("MobileViTModel"),mCo=o(" (MobileViT model)"),gCo=l(),H_=a("li"),mfe=a("strong"),hCo=o("mpnet"),pCo=o(" \u2014 "),rD=a("a"),_Co=o("MPNetModel"),uCo=o(" (MPNet model)"),bCo=l(),U_=a("li"),gfe=a("strong"),vCo=o("mt5"),FCo=o(" \u2014 "),tD=a("a"),TCo=o("MT5Model"),MCo=o(" (MT5 model)"),ECo=l(),J_=a("li"),hfe=a("strong"),CCo=o("mvp"),wCo=o(" \u2014 "),aD=a("a"),ACo=o("MvpModel"),LCo=o(" (MVP model)"),yCo=l(),Y_=a("li"),pfe=a("strong"),xCo=o("nezha"),$Co=o(" \u2014 "),nD=a("a"),kCo=o("NezhaModel"),SCo=o(" (Nezha model)"),RCo=l(),K_=a("li"),_fe=a("strong"),PCo=o("nystromformer"),BCo=o(" \u2014 "),sD=a("a"),NCo=o("NystromformerModel"),ICo=o(" (Nystr\xF6mformer model)"),qCo=l(),Z_=a("li"),ufe=a("strong"),jCo=o("openai-gpt"),DCo=o(" \u2014 "),lD=a("a"),GCo=o("OpenAIGPTModel"),OCo=o(" (OpenAI GPT model)"),VCo=l(),eu=a("li"),bfe=a("strong"),XCo=o("opt"),zCo=o(" \u2014 "),iD=a("a"),QCo=o("OPTModel"),WCo=o(" (OPT model)"),HCo=l(),ou=a("li"),vfe=a("strong"),UCo=o("pegasus"),JCo=o(" \u2014 "),dD=a("a"),YCo=o("PegasusModel"),KCo=o(" (Pegasus model)"),ZCo=l(),ru=a("li"),Ffe=a("strong"),e5o=o("perceiver"),o5o=o(" \u2014 "),cD=a("a"),r5o=o("PerceiverModel"),t5o=o(" (Perceiver model)"),a5o=l(),tu=a("li"),Tfe=a("strong"),n5o=o("plbart"),s5o=o(" \u2014 "),fD=a("a"),l5o=o("PLBartModel"),i5o=o(" (PLBart model)"),d5o=l(),au=a("li"),Mfe=a("strong"),c5o=o("poolformer"),f5o=o(" \u2014 "),mD=a("a"),m5o=o("PoolFormerModel"),g5o=o(" (PoolFormer model)"),h5o=l(),nu=a("li"),Efe=a("strong"),p5o=o("prophetnet"),_5o=o(" \u2014 "),gD=a("a"),u5o=o("ProphetNetModel"),b5o=o(" (ProphetNet model)"),v5o=l(),su=a("li"),Cfe=a("strong"),F5o=o("qdqbert"),T5o=o(" \u2014 "),hD=a("a"),M5o=o("QDQBertModel"),E5o=o(" (QDQBert model)"),C5o=l(),lu=a("li"),wfe=a("strong"),w5o=o("reformer"),A5o=o(" \u2014 "),pD=a("a"),L5o=o("ReformerModel"),y5o=o(" (Reformer model)"),x5o=l(),iu=a("li"),Afe=a("strong"),$5o=o("regnet"),k5o=o(" \u2014 "),_D=a("a"),S5o=o("RegNetModel"),R5o=o(" (RegNet model)"),P5o=l(),du=a("li"),Lfe=a("strong"),B5o=o("rembert"),N5o=o(" \u2014 "),uD=a("a"),I5o=o("RemBertModel"),q5o=o(" (RemBERT model)"),j5o=l(),cu=a("li"),yfe=a("strong"),D5o=o("resnet"),G5o=o(" \u2014 "),bD=a("a"),O5o=o("ResNetModel"),V5o=o(" (ResNet model)"),X5o=l(),fu=a("li"),xfe=a("strong"),z5o=o("retribert"),Q5o=o(" \u2014 "),vD=a("a"),W5o=o("RetriBertModel"),H5o=o(" (RetriBERT model)"),U5o=l(),mu=a("li"),$fe=a("strong"),J5o=o("roberta"),Y5o=o(" \u2014 "),FD=a("a"),K5o=o("RobertaModel"),Z5o=o(" (RoBERTa model)"),e0o=l(),gu=a("li"),kfe=a("strong"),o0o=o("roformer"),r0o=o(" \u2014 "),TD=a("a"),t0o=o("RoFormerModel"),a0o=o(" (RoFormer model)"),n0o=l(),hu=a("li"),Sfe=a("strong"),s0o=o("segformer"),l0o=o(" \u2014 "),MD=a("a"),i0o=o("SegformerModel"),d0o=o(" (SegFormer model)"),c0o=l(),pu=a("li"),Rfe=a("strong"),f0o=o("sew"),m0o=o(" \u2014 "),ED=a("a"),g0o=o("SEWModel"),h0o=o(" (SEW model)"),p0o=l(),_u=a("li"),Pfe=a("strong"),_0o=o("sew-d"),u0o=o(" \u2014 "),CD=a("a"),b0o=o("SEWDModel"),v0o=o(" (SEW-D model)"),F0o=l(),uu=a("li"),Bfe=a("strong"),T0o=o("speech_to_text"),M0o=o(" \u2014 "),wD=a("a"),E0o=o("Speech2TextModel"),C0o=o(" (Speech2Text model)"),w0o=l(),bu=a("li"),Nfe=a("strong"),A0o=o("splinter"),L0o=o(" \u2014 "),AD=a("a"),y0o=o("SplinterModel"),x0o=o(" (Splinter model)"),$0o=l(),vu=a("li"),Ife=a("strong"),k0o=o("squeezebert"),S0o=o(" \u2014 "),LD=a("a"),R0o=o("SqueezeBertModel"),P0o=o(" (SqueezeBERT model)"),B0o=l(),Fu=a("li"),qfe=a("strong"),N0o=o("swin"),I0o=o(" \u2014 "),yD=a("a"),q0o=o("SwinModel"),j0o=o(" (Swin Transformer model)"),D0o=l(),Tu=a("li"),jfe=a("strong"),G0o=o("t5"),O0o=o(" \u2014 "),xD=a("a"),V0o=o("T5Model"),X0o=o(" (T5 model)"),z0o=l(),Mu=a("li"),Dfe=a("strong"),Q0o=o("tapas"),W0o=o(" \u2014 "),$D=a("a"),H0o=o("TapasModel"),U0o=o(" (TAPAS model)"),J0o=l(),Eu=a("li"),Gfe=a("strong"),Y0o=o("trajectory_transformer"),K0o=o(" \u2014 "),kD=a("a"),Z0o=o("TrajectoryTransformerModel"),ewo=o(" (Trajectory Transformer model)"),owo=l(),Cu=a("li"),Ofe=a("strong"),rwo=o("transfo-xl"),two=o(" \u2014 "),SD=a("a"),awo=o("TransfoXLModel"),nwo=o(" (Transformer-XL model)"),swo=l(),wu=a("li"),Vfe=a("strong"),lwo=o("unispeech"),iwo=o(" \u2014 "),RD=a("a"),dwo=o("UniSpeechModel"),cwo=o(" (UniSpeech model)"),fwo=l(),Au=a("li"),Xfe=a("strong"),mwo=o("unispeech-sat"),gwo=o(" \u2014 "),PD=a("a"),hwo=o("UniSpeechSatModel"),pwo=o(" (UniSpeechSat model)"),_wo=l(),Lu=a("li"),zfe=a("strong"),uwo=o("van"),bwo=o(" \u2014 "),BD=a("a"),vwo=o("VanModel"),Fwo=o(" (VAN model)"),Two=l(),yu=a("li"),Qfe=a("strong"),Mwo=o("vilt"),Ewo=o(" \u2014 "),ND=a("a"),Cwo=o("ViltModel"),wwo=o(" (ViLT model)"),Awo=l(),xu=a("li"),Wfe=a("strong"),Lwo=o("vision-text-dual-encoder"),ywo=o(" \u2014 "),ID=a("a"),xwo=o("VisionTextDualEncoderModel"),$wo=o(" (VisionTextDualEncoder model)"),kwo=l(),$u=a("li"),Hfe=a("strong"),Swo=o("visual_bert"),Rwo=o(" \u2014 "),qD=a("a"),Pwo=o("VisualBertModel"),Bwo=o(" (VisualBERT model)"),Nwo=l(),ku=a("li"),Ufe=a("strong"),Iwo=o("vit"),qwo=o(" \u2014 "),jD=a("a"),jwo=o("ViTModel"),Dwo=o(" (ViT model)"),Gwo=l(),Su=a("li"),Jfe=a("strong"),Owo=o("vit_mae"),Vwo=o(" \u2014 "),DD=a("a"),Xwo=o("ViTMAEModel"),zwo=o(" (ViTMAE model)"),Qwo=l(),Ru=a("li"),Yfe=a("strong"),Wwo=o("wav2vec2"),Hwo=o(" \u2014 "),GD=a("a"),Uwo=o("Wav2Vec2Model"),Jwo=o(" (Wav2Vec2 model)"),Ywo=l(),Pu=a("li"),Kfe=a("strong"),Kwo=o("wav2vec2-conformer"),Zwo=o(" \u2014 "),OD=a("a"),eAo=o("Wav2Vec2ConformerModel"),oAo=o(" (Wav2Vec2-Conformer model)"),rAo=l(),Bu=a("li"),Zfe=a("strong"),tAo=o("wavlm"),aAo=o(" \u2014 "),VD=a("a"),nAo=o("WavLMModel"),sAo=o(" (WavLM model)"),lAo=l(),Nu=a("li"),eme=a("strong"),iAo=o("xglm"),dAo=o(" \u2014 "),XD=a("a"),cAo=o("XGLMModel"),fAo=o(" (XGLM model)"),mAo=l(),Iu=a("li"),ome=a("strong"),gAo=o("xlm"),hAo=o(" \u2014 "),zD=a("a"),pAo=o("XLMModel"),_Ao=o(" (XLM model)"),uAo=l(),qu=a("li"),rme=a("strong"),bAo=o("xlm-prophetnet"),vAo=o(" \u2014 "),QD=a("a"),FAo=o("XLMProphetNetModel"),TAo=o(" (XLM-ProphetNet model)"),MAo=l(),ju=a("li"),tme=a("strong"),EAo=o("xlm-roberta"),CAo=o(" \u2014 "),WD=a("a"),wAo=o("XLMRobertaModel"),AAo=o(" (XLM-RoBERTa model)"),LAo=l(),Du=a("li"),ame=a("strong"),yAo=o("xlm-roberta-xl"),xAo=o(" \u2014 "),HD=a("a"),$Ao=o("XLMRobertaXLModel"),kAo=o(" (XLM-RoBERTa-XL model)"),SAo=l(),Gu=a("li"),nme=a("strong"),RAo=o("xlnet"),PAo=o(" \u2014 "),UD=a("a"),BAo=o("XLNetModel"),NAo=o(" (XLNet model)"),IAo=l(),Ou=a("li"),sme=a("strong"),qAo=o("yolos"),jAo=o(" \u2014 "),JD=a("a"),DAo=o("YolosModel"),GAo=o(" (YOLOS model)"),OAo=l(),Vu=a("li"),lme=a("strong"),VAo=o("yoso"),XAo=o(" \u2014 "),YD=a("a"),zAo=o("YosoModel"),QAo=o(" (YOSO model)"),WAo=l(),Xu=a("p"),HAo=o("The model is set in evaluation mode by default using "),ime=a("code"),UAo=o("model.eval()"),JAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=a("code"),YAo=o("model.train()"),KAo=l(),F(zu.$$.fragment),lXe=l(),Vi=a("h2"),Qu=a("a"),cme=a("span"),F(PL.$$.fragment),ZAo=l(),fme=a("span"),e6o=o("AutoModelForPreTraining"),iXe=l(),$o=a("div"),F(BL.$$.fragment),o6o=l(),Xi=a("p"),r6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KD=a("a"),t6o=o("from_pretrained()"),a6o=o(" class method or the "),ZD=a("a"),n6o=o("from_config()"),s6o=o(` class
method.`),l6o=l(),NL=a("p"),i6o=o("This class cannot be instantiated directly using "),mme=a("code"),d6o=o("__init__()"),c6o=o(" (throws an error)."),f6o=l(),it=a("div"),F(IL.$$.fragment),m6o=l(),gme=a("p"),g6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),h6o=l(),zi=a("p"),p6o=o(`Note:
Loading a model from its configuration file does `),hme=a("strong"),_6o=o("not"),u6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),b6o=o("from_pretrained()"),v6o=o(" to load the model weights."),F6o=l(),F(Wu.$$.fragment),T6o=l(),Ye=a("div"),F(qL.$$.fragment),M6o=l(),pme=a("p"),E6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),C6o=l(),Ia=a("p"),w6o=o("The model class to instantiate is selected based on the "),_me=a("code"),A6o=o("model_type"),L6o=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),y6o=o("pretrained_model_name_or_path"),x6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),$6o=o("pretrained_model_name_or_path"),k6o=o(":"),S6o=l(),G=a("ul"),Hu=a("li"),vme=a("strong"),R6o=o("albert"),P6o=o(" \u2014 "),oG=a("a"),B6o=o("AlbertForPreTraining"),N6o=o(" (ALBERT model)"),I6o=l(),Uu=a("li"),Fme=a("strong"),q6o=o("bart"),j6o=o(" \u2014 "),rG=a("a"),D6o=o("BartForConditionalGeneration"),G6o=o(" (BART model)"),O6o=l(),Ju=a("li"),Tme=a("strong"),V6o=o("bert"),X6o=o(" \u2014 "),tG=a("a"),z6o=o("BertForPreTraining"),Q6o=o(" (BERT model)"),W6o=l(),Yu=a("li"),Mme=a("strong"),H6o=o("big_bird"),U6o=o(" \u2014 "),aG=a("a"),J6o=o("BigBirdForPreTraining"),Y6o=o(" (BigBird model)"),K6o=l(),Ku=a("li"),Eme=a("strong"),Z6o=o("bloom"),e7o=o(" \u2014 "),nG=a("a"),o7o=o("BloomForCausalLM"),r7o=o(" (BLOOM model)"),t7o=l(),Zu=a("li"),Cme=a("strong"),a7o=o("camembert"),n7o=o(" \u2014 "),sG=a("a"),s7o=o("CamembertForMaskedLM"),l7o=o(" (CamemBERT model)"),i7o=l(),e1=a("li"),wme=a("strong"),d7o=o("ctrl"),c7o=o(" \u2014 "),lG=a("a"),f7o=o("CTRLLMHeadModel"),m7o=o(" (CTRL model)"),g7o=l(),o1=a("li"),Ame=a("strong"),h7o=o("data2vec-text"),p7o=o(" \u2014 "),iG=a("a"),_7o=o("Data2VecTextForMaskedLM"),u7o=o(" (Data2VecText model)"),b7o=l(),r1=a("li"),Lme=a("strong"),v7o=o("deberta"),F7o=o(" \u2014 "),dG=a("a"),T7o=o("DebertaForMaskedLM"),M7o=o(" (DeBERTa model)"),E7o=l(),t1=a("li"),yme=a("strong"),C7o=o("deberta-v2"),w7o=o(" \u2014 "),cG=a("a"),A7o=o("DebertaV2ForMaskedLM"),L7o=o(" (DeBERTa-v2 model)"),y7o=l(),a1=a("li"),xme=a("strong"),x7o=o("distilbert"),$7o=o(" \u2014 "),fG=a("a"),k7o=o("DistilBertForMaskedLM"),S7o=o(" (DistilBERT model)"),R7o=l(),n1=a("li"),$me=a("strong"),P7o=o("electra"),B7o=o(" \u2014 "),mG=a("a"),N7o=o("ElectraForPreTraining"),I7o=o(" (ELECTRA model)"),q7o=l(),s1=a("li"),kme=a("strong"),j7o=o("flaubert"),D7o=o(" \u2014 "),gG=a("a"),G7o=o("FlaubertWithLMHeadModel"),O7o=o(" (FlauBERT model)"),V7o=l(),l1=a("li"),Sme=a("strong"),X7o=o("flava"),z7o=o(" \u2014 "),hG=a("a"),Q7o=o("FlavaForPreTraining"),W7o=o(" (FLAVA model)"),H7o=l(),i1=a("li"),Rme=a("strong"),U7o=o("fnet"),J7o=o(" \u2014 "),pG=a("a"),Y7o=o("FNetForPreTraining"),K7o=o(" (FNet model)"),Z7o=l(),d1=a("li"),Pme=a("strong"),eLo=o("fsmt"),oLo=o(" \u2014 "),_G=a("a"),rLo=o("FSMTForConditionalGeneration"),tLo=o(" (FairSeq Machine-Translation model)"),aLo=l(),c1=a("li"),Bme=a("strong"),nLo=o("funnel"),sLo=o(" \u2014 "),uG=a("a"),lLo=o("FunnelForPreTraining"),iLo=o(" (Funnel Transformer model)"),dLo=l(),f1=a("li"),Nme=a("strong"),cLo=o("gpt2"),fLo=o(" \u2014 "),bG=a("a"),mLo=o("GPT2LMHeadModel"),gLo=o(" (OpenAI GPT-2 model)"),hLo=l(),m1=a("li"),Ime=a("strong"),pLo=o("ibert"),_Lo=o(" \u2014 "),vG=a("a"),uLo=o("IBertForMaskedLM"),bLo=o(" (I-BERT model)"),vLo=l(),g1=a("li"),qme=a("strong"),FLo=o("layoutlm"),TLo=o(" \u2014 "),FG=a("a"),MLo=o("LayoutLMForMaskedLM"),ELo=o(" (LayoutLM model)"),CLo=l(),h1=a("li"),jme=a("strong"),wLo=o("longformer"),ALo=o(" \u2014 "),TG=a("a"),LLo=o("LongformerForMaskedLM"),yLo=o(" (Longformer model)"),xLo=l(),p1=a("li"),Dme=a("strong"),$Lo=o("lxmert"),kLo=o(" \u2014 "),MG=a("a"),SLo=o("LxmertForPreTraining"),RLo=o(" (LXMERT model)"),PLo=l(),_1=a("li"),Gme=a("strong"),BLo=o("megatron-bert"),NLo=o(" \u2014 "),EG=a("a"),ILo=o("MegatronBertForPreTraining"),qLo=o(" (Megatron-BERT model)"),jLo=l(),u1=a("li"),Ome=a("strong"),DLo=o("mobilebert"),GLo=o(" \u2014 "),CG=a("a"),OLo=o("MobileBertForPreTraining"),VLo=o(" (MobileBERT model)"),XLo=l(),b1=a("li"),Vme=a("strong"),zLo=o("mpnet"),QLo=o(" \u2014 "),wG=a("a"),WLo=o("MPNetForMaskedLM"),HLo=o(" (MPNet model)"),ULo=l(),v1=a("li"),Xme=a("strong"),JLo=o("mvp"),YLo=o(" \u2014 "),AG=a("a"),KLo=o("MvpForConditionalGeneration"),ZLo=o(" (MVP model)"),eyo=l(),F1=a("li"),zme=a("strong"),oyo=o("nezha"),ryo=o(" \u2014 "),LG=a("a"),tyo=o("NezhaForPreTraining"),ayo=o(" (Nezha model)"),nyo=l(),T1=a("li"),Qme=a("strong"),syo=o("openai-gpt"),lyo=o(" \u2014 "),yG=a("a"),iyo=o("OpenAIGPTLMHeadModel"),dyo=o(" (OpenAI GPT model)"),cyo=l(),M1=a("li"),Wme=a("strong"),fyo=o("retribert"),myo=o(" \u2014 "),xG=a("a"),gyo=o("RetriBertModel"),hyo=o(" (RetriBERT model)"),pyo=l(),E1=a("li"),Hme=a("strong"),_yo=o("roberta"),uyo=o(" \u2014 "),$G=a("a"),byo=o("RobertaForMaskedLM"),vyo=o(" (RoBERTa model)"),Fyo=l(),C1=a("li"),Ume=a("strong"),Tyo=o("splinter"),Myo=o(" \u2014 "),kG=a("a"),Eyo=o("SplinterForPreTraining"),Cyo=o(" (Splinter model)"),wyo=l(),w1=a("li"),Jme=a("strong"),Ayo=o("squeezebert"),Lyo=o(" \u2014 "),SG=a("a"),yyo=o("SqueezeBertForMaskedLM"),xyo=o(" (SqueezeBERT model)"),$yo=l(),A1=a("li"),Yme=a("strong"),kyo=o("t5"),Syo=o(" \u2014 "),RG=a("a"),Ryo=o("T5ForConditionalGeneration"),Pyo=o(" (T5 model)"),Byo=l(),L1=a("li"),Kme=a("strong"),Nyo=o("tapas"),Iyo=o(" \u2014 "),PG=a("a"),qyo=o("TapasForMaskedLM"),jyo=o(" (TAPAS model)"),Dyo=l(),y1=a("li"),Zme=a("strong"),Gyo=o("transfo-xl"),Oyo=o(" \u2014 "),BG=a("a"),Vyo=o("TransfoXLLMHeadModel"),Xyo=o(" (Transformer-XL model)"),zyo=l(),x1=a("li"),ege=a("strong"),Qyo=o("unispeech"),Wyo=o(" \u2014 "),NG=a("a"),Hyo=o("UniSpeechForPreTraining"),Uyo=o(" (UniSpeech model)"),Jyo=l(),$1=a("li"),oge=a("strong"),Yyo=o("unispeech-sat"),Kyo=o(" \u2014 "),IG=a("a"),Zyo=o("UniSpeechSatForPreTraining"),e9o=o(" (UniSpeechSat model)"),o9o=l(),k1=a("li"),rge=a("strong"),r9o=o("visual_bert"),t9o=o(" \u2014 "),qG=a("a"),a9o=o("VisualBertForPreTraining"),n9o=o(" (VisualBERT model)"),s9o=l(),S1=a("li"),tge=a("strong"),l9o=o("vit_mae"),i9o=o(" \u2014 "),jG=a("a"),d9o=o("ViTMAEForPreTraining"),c9o=o(" (ViTMAE model)"),f9o=l(),R1=a("li"),age=a("strong"),m9o=o("wav2vec2"),g9o=o(" \u2014 "),DG=a("a"),h9o=o("Wav2Vec2ForPreTraining"),p9o=o(" (Wav2Vec2 model)"),_9o=l(),P1=a("li"),nge=a("strong"),u9o=o("wav2vec2-conformer"),b9o=o(" \u2014 "),GG=a("a"),v9o=o("Wav2Vec2ConformerForPreTraining"),F9o=o(" (Wav2Vec2-Conformer model)"),T9o=l(),B1=a("li"),sge=a("strong"),M9o=o("xlm"),E9o=o(" \u2014 "),OG=a("a"),C9o=o("XLMWithLMHeadModel"),w9o=o(" (XLM model)"),A9o=l(),N1=a("li"),lge=a("strong"),L9o=o("xlm-roberta"),y9o=o(" \u2014 "),VG=a("a"),x9o=o("XLMRobertaForMaskedLM"),$9o=o(" (XLM-RoBERTa model)"),k9o=l(),I1=a("li"),ige=a("strong"),S9o=o("xlm-roberta-xl"),R9o=o(" \u2014 "),XG=a("a"),P9o=o("XLMRobertaXLForMaskedLM"),B9o=o(" (XLM-RoBERTa-XL model)"),N9o=l(),q1=a("li"),dge=a("strong"),I9o=o("xlnet"),q9o=o(" \u2014 "),zG=a("a"),j9o=o("XLNetLMHeadModel"),D9o=o(" (XLNet model)"),G9o=l(),j1=a("p"),O9o=o("The model is set in evaluation mode by default using "),cge=a("code"),V9o=o("model.eval()"),X9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=a("code"),z9o=o("model.train()"),Q9o=l(),F(D1.$$.fragment),dXe=l(),Qi=a("h2"),G1=a("a"),mge=a("span"),F(jL.$$.fragment),W9o=l(),gge=a("span"),H9o=o("AutoModelForCausalLM"),cXe=l(),ko=a("div"),F(DL.$$.fragment),U9o=l(),Wi=a("p"),J9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QG=a("a"),Y9o=o("from_pretrained()"),K9o=o(" class method or the "),WG=a("a"),Z9o=o("from_config()"),exo=o(` class
method.`),oxo=l(),GL=a("p"),rxo=o("This class cannot be instantiated directly using "),hge=a("code"),txo=o("__init__()"),axo=o(" (throws an error)."),nxo=l(),dt=a("div"),F(OL.$$.fragment),sxo=l(),pge=a("p"),lxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ixo=l(),Hi=a("p"),dxo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),cxo=o("not"),fxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),mxo=o("from_pretrained()"),gxo=o(" to load the model weights."),hxo=l(),F(O1.$$.fragment),pxo=l(),Ke=a("div"),F(VL.$$.fragment),_xo=l(),uge=a("p"),uxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bxo=l(),qa=a("p"),vxo=o("The model class to instantiate is selected based on the "),bge=a("code"),Fxo=o("model_type"),Txo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),Mxo=o("pretrained_model_name_or_path"),Exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),Cxo=o("pretrained_model_name_or_path"),wxo=o(":"),Axo=l(),z=a("ul"),V1=a("li"),Tge=a("strong"),Lxo=o("bart"),yxo=o(" \u2014 "),UG=a("a"),xxo=o("BartForCausalLM"),$xo=o(" (BART model)"),kxo=l(),X1=a("li"),Mge=a("strong"),Sxo=o("bert"),Rxo=o(" \u2014 "),JG=a("a"),Pxo=o("BertLMHeadModel"),Bxo=o(" (BERT model)"),Nxo=l(),z1=a("li"),Ege=a("strong"),Ixo=o("bert-generation"),qxo=o(" \u2014 "),YG=a("a"),jxo=o("BertGenerationDecoder"),Dxo=o(" (Bert Generation model)"),Gxo=l(),Q1=a("li"),Cge=a("strong"),Oxo=o("big_bird"),Vxo=o(" \u2014 "),KG=a("a"),Xxo=o("BigBirdForCausalLM"),zxo=o(" (BigBird model)"),Qxo=l(),W1=a("li"),wge=a("strong"),Wxo=o("bigbird_pegasus"),Hxo=o(" \u2014 "),ZG=a("a"),Uxo=o("BigBirdPegasusForCausalLM"),Jxo=o(" (BigBird-Pegasus model)"),Yxo=l(),H1=a("li"),Age=a("strong"),Kxo=o("blenderbot"),Zxo=o(" \u2014 "),eO=a("a"),e$o=o("BlenderbotForCausalLM"),o$o=o(" (Blenderbot model)"),r$o=l(),U1=a("li"),Lge=a("strong"),t$o=o("blenderbot-small"),a$o=o(" \u2014 "),oO=a("a"),n$o=o("BlenderbotSmallForCausalLM"),s$o=o(" (BlenderbotSmall model)"),l$o=l(),J1=a("li"),yge=a("strong"),i$o=o("bloom"),d$o=o(" \u2014 "),rO=a("a"),c$o=o("BloomForCausalLM"),f$o=o(" (BLOOM model)"),m$o=l(),Y1=a("li"),xge=a("strong"),g$o=o("camembert"),h$o=o(" \u2014 "),tO=a("a"),p$o=o("CamembertForCausalLM"),_$o=o(" (CamemBERT model)"),u$o=l(),K1=a("li"),$ge=a("strong"),b$o=o("codegen"),v$o=o(" \u2014 "),aO=a("a"),F$o=o("CodeGenForCausalLM"),T$o=o(" (CodeGen model)"),M$o=l(),Z1=a("li"),kge=a("strong"),E$o=o("ctrl"),C$o=o(" \u2014 "),nO=a("a"),w$o=o("CTRLLMHeadModel"),A$o=o(" (CTRL model)"),L$o=l(),e2=a("li"),Sge=a("strong"),y$o=o("data2vec-text"),x$o=o(" \u2014 "),sO=a("a"),$$o=o("Data2VecTextForCausalLM"),k$o=o(" (Data2VecText model)"),S$o=l(),o2=a("li"),Rge=a("strong"),R$o=o("electra"),P$o=o(" \u2014 "),lO=a("a"),B$o=o("ElectraForCausalLM"),N$o=o(" (ELECTRA model)"),I$o=l(),r2=a("li"),Pge=a("strong"),q$o=o("gpt2"),j$o=o(" \u2014 "),iO=a("a"),D$o=o("GPT2LMHeadModel"),G$o=o(" (OpenAI GPT-2 model)"),O$o=l(),t2=a("li"),Bge=a("strong"),V$o=o("gpt_neo"),X$o=o(" \u2014 "),dO=a("a"),z$o=o("GPTNeoForCausalLM"),Q$o=o(" (GPT Neo model)"),W$o=l(),a2=a("li"),Nge=a("strong"),H$o=o("gpt_neox"),U$o=o(" \u2014 "),cO=a("a"),J$o=o("GPTNeoXForCausalLM"),Y$o=o(" (GPT NeoX model)"),K$o=l(),n2=a("li"),Ige=a("strong"),Z$o=o("gptj"),eko=o(" \u2014 "),fO=a("a"),oko=o("GPTJForCausalLM"),rko=o(" (GPT-J model)"),tko=l(),s2=a("li"),qge=a("strong"),ako=o("marian"),nko=o(" \u2014 "),mO=a("a"),sko=o("MarianForCausalLM"),lko=o(" (Marian model)"),iko=l(),l2=a("li"),jge=a("strong"),dko=o("mbart"),cko=o(" \u2014 "),gO=a("a"),fko=o("MBartForCausalLM"),mko=o(" (mBART model)"),gko=l(),i2=a("li"),Dge=a("strong"),hko=o("megatron-bert"),pko=o(" \u2014 "),hO=a("a"),_ko=o("MegatronBertForCausalLM"),uko=o(" (Megatron-BERT model)"),bko=l(),d2=a("li"),Gge=a("strong"),vko=o("mvp"),Fko=o(" \u2014 "),pO=a("a"),Tko=o("MvpForCausalLM"),Mko=o(" (MVP model)"),Eko=l(),c2=a("li"),Oge=a("strong"),Cko=o("openai-gpt"),wko=o(" \u2014 "),_O=a("a"),Ako=o("OpenAIGPTLMHeadModel"),Lko=o(" (OpenAI GPT model)"),yko=l(),f2=a("li"),Vge=a("strong"),xko=o("opt"),$ko=o(" \u2014 "),uO=a("a"),kko=o("OPTForCausalLM"),Sko=o(" (OPT model)"),Rko=l(),m2=a("li"),Xge=a("strong"),Pko=o("pegasus"),Bko=o(" \u2014 "),bO=a("a"),Nko=o("PegasusForCausalLM"),Iko=o(" (Pegasus model)"),qko=l(),g2=a("li"),zge=a("strong"),jko=o("plbart"),Dko=o(" \u2014 "),vO=a("a"),Gko=o("PLBartForCausalLM"),Oko=o(" (PLBart model)"),Vko=l(),h2=a("li"),Qge=a("strong"),Xko=o("prophetnet"),zko=o(" \u2014 "),FO=a("a"),Qko=o("ProphetNetForCausalLM"),Wko=o(" (ProphetNet model)"),Hko=l(),p2=a("li"),Wge=a("strong"),Uko=o("qdqbert"),Jko=o(" \u2014 "),TO=a("a"),Yko=o("QDQBertLMHeadModel"),Kko=o(" (QDQBert model)"),Zko=l(),_2=a("li"),Hge=a("strong"),eSo=o("reformer"),oSo=o(" \u2014 "),MO=a("a"),rSo=o("ReformerModelWithLMHead"),tSo=o(" (Reformer model)"),aSo=l(),u2=a("li"),Uge=a("strong"),nSo=o("rembert"),sSo=o(" \u2014 "),EO=a("a"),lSo=o("RemBertForCausalLM"),iSo=o(" (RemBERT model)"),dSo=l(),b2=a("li"),Jge=a("strong"),cSo=o("roberta"),fSo=o(" \u2014 "),CO=a("a"),mSo=o("RobertaForCausalLM"),gSo=o(" (RoBERTa model)"),hSo=l(),v2=a("li"),Yge=a("strong"),pSo=o("roformer"),_So=o(" \u2014 "),wO=a("a"),uSo=o("RoFormerForCausalLM"),bSo=o(" (RoFormer model)"),vSo=l(),F2=a("li"),Kge=a("strong"),FSo=o("speech_to_text_2"),TSo=o(" \u2014 "),AO=a("a"),MSo=o("Speech2Text2ForCausalLM"),ESo=o(" (Speech2Text2 model)"),CSo=l(),T2=a("li"),Zge=a("strong"),wSo=o("transfo-xl"),ASo=o(" \u2014 "),LO=a("a"),LSo=o("TransfoXLLMHeadModel"),ySo=o(" (Transformer-XL model)"),xSo=l(),M2=a("li"),ehe=a("strong"),$So=o("trocr"),kSo=o(" \u2014 "),yO=a("a"),SSo=o("TrOCRForCausalLM"),RSo=o(" (TrOCR model)"),PSo=l(),E2=a("li"),ohe=a("strong"),BSo=o("xglm"),NSo=o(" \u2014 "),xO=a("a"),ISo=o("XGLMForCausalLM"),qSo=o(" (XGLM model)"),jSo=l(),C2=a("li"),rhe=a("strong"),DSo=o("xlm"),GSo=o(" \u2014 "),$O=a("a"),OSo=o("XLMWithLMHeadModel"),VSo=o(" (XLM model)"),XSo=l(),w2=a("li"),the=a("strong"),zSo=o("xlm-prophetnet"),QSo=o(" \u2014 "),kO=a("a"),WSo=o("XLMProphetNetForCausalLM"),HSo=o(" (XLM-ProphetNet model)"),USo=l(),A2=a("li"),ahe=a("strong"),JSo=o("xlm-roberta"),YSo=o(" \u2014 "),SO=a("a"),KSo=o("XLMRobertaForCausalLM"),ZSo=o(" (XLM-RoBERTa model)"),eRo=l(),L2=a("li"),nhe=a("strong"),oRo=o("xlm-roberta-xl"),rRo=o(" \u2014 "),RO=a("a"),tRo=o("XLMRobertaXLForCausalLM"),aRo=o(" (XLM-RoBERTa-XL model)"),nRo=l(),y2=a("li"),she=a("strong"),sRo=o("xlnet"),lRo=o(" \u2014 "),PO=a("a"),iRo=o("XLNetLMHeadModel"),dRo=o(" (XLNet model)"),cRo=l(),x2=a("p"),fRo=o("The model is set in evaluation mode by default using "),lhe=a("code"),mRo=o("model.eval()"),gRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),hRo=o("model.train()"),pRo=l(),F($2.$$.fragment),fXe=l(),Ui=a("h2"),k2=a("a"),dhe=a("span"),F(XL.$$.fragment),_Ro=l(),che=a("span"),uRo=o("AutoModelForMaskedLM"),mXe=l(),So=a("div"),F(zL.$$.fragment),bRo=l(),Ji=a("p"),vRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BO=a("a"),FRo=o("from_pretrained()"),TRo=o(" class method or the "),NO=a("a"),MRo=o("from_config()"),ERo=o(` class
method.`),CRo=l(),QL=a("p"),wRo=o("This class cannot be instantiated directly using "),fhe=a("code"),ARo=o("__init__()"),LRo=o(" (throws an error)."),yRo=l(),ct=a("div"),F(WL.$$.fragment),xRo=l(),mhe=a("p"),$Ro=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kRo=l(),Yi=a("p"),SRo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),RRo=o("not"),PRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),BRo=o("from_pretrained()"),NRo=o(" to load the model weights."),IRo=l(),F(S2.$$.fragment),qRo=l(),Ze=a("div"),F(HL.$$.fragment),jRo=l(),hhe=a("p"),DRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GRo=l(),ja=a("p"),ORo=o("The model class to instantiate is selected based on the "),phe=a("code"),VRo=o("model_type"),XRo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),zRo=o("pretrained_model_name_or_path"),QRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),WRo=o("pretrained_model_name_or_path"),HRo=o(":"),URo=l(),W=a("ul"),R2=a("li"),bhe=a("strong"),JRo=o("albert"),YRo=o(" \u2014 "),qO=a("a"),KRo=o("AlbertForMaskedLM"),ZRo=o(" (ALBERT model)"),ePo=l(),P2=a("li"),vhe=a("strong"),oPo=o("bart"),rPo=o(" \u2014 "),jO=a("a"),tPo=o("BartForConditionalGeneration"),aPo=o(" (BART model)"),nPo=l(),B2=a("li"),Fhe=a("strong"),sPo=o("bert"),lPo=o(" \u2014 "),DO=a("a"),iPo=o("BertForMaskedLM"),dPo=o(" (BERT model)"),cPo=l(),N2=a("li"),The=a("strong"),fPo=o("big_bird"),mPo=o(" \u2014 "),GO=a("a"),gPo=o("BigBirdForMaskedLM"),hPo=o(" (BigBird model)"),pPo=l(),I2=a("li"),Mhe=a("strong"),_Po=o("camembert"),uPo=o(" \u2014 "),OO=a("a"),bPo=o("CamembertForMaskedLM"),vPo=o(" (CamemBERT model)"),FPo=l(),q2=a("li"),Ehe=a("strong"),TPo=o("convbert"),MPo=o(" \u2014 "),VO=a("a"),EPo=o("ConvBertForMaskedLM"),CPo=o(" (ConvBERT model)"),wPo=l(),j2=a("li"),Che=a("strong"),APo=o("data2vec-text"),LPo=o(" \u2014 "),XO=a("a"),yPo=o("Data2VecTextForMaskedLM"),xPo=o(" (Data2VecText model)"),$Po=l(),D2=a("li"),whe=a("strong"),kPo=o("deberta"),SPo=o(" \u2014 "),zO=a("a"),RPo=o("DebertaForMaskedLM"),PPo=o(" (DeBERTa model)"),BPo=l(),G2=a("li"),Ahe=a("strong"),NPo=o("deberta-v2"),IPo=o(" \u2014 "),QO=a("a"),qPo=o("DebertaV2ForMaskedLM"),jPo=o(" (DeBERTa-v2 model)"),DPo=l(),O2=a("li"),Lhe=a("strong"),GPo=o("distilbert"),OPo=o(" \u2014 "),WO=a("a"),VPo=o("DistilBertForMaskedLM"),XPo=o(" (DistilBERT model)"),zPo=l(),V2=a("li"),yhe=a("strong"),QPo=o("electra"),WPo=o(" \u2014 "),HO=a("a"),HPo=o("ElectraForMaskedLM"),UPo=o(" (ELECTRA model)"),JPo=l(),X2=a("li"),xhe=a("strong"),YPo=o("flaubert"),KPo=o(" \u2014 "),UO=a("a"),ZPo=o("FlaubertWithLMHeadModel"),eBo=o(" (FlauBERT model)"),oBo=l(),z2=a("li"),$he=a("strong"),rBo=o("fnet"),tBo=o(" \u2014 "),JO=a("a"),aBo=o("FNetForMaskedLM"),nBo=o(" (FNet model)"),sBo=l(),Q2=a("li"),khe=a("strong"),lBo=o("funnel"),iBo=o(" \u2014 "),YO=a("a"),dBo=o("FunnelForMaskedLM"),cBo=o(" (Funnel Transformer model)"),fBo=l(),W2=a("li"),She=a("strong"),mBo=o("ibert"),gBo=o(" \u2014 "),KO=a("a"),hBo=o("IBertForMaskedLM"),pBo=o(" (I-BERT model)"),_Bo=l(),H2=a("li"),Rhe=a("strong"),uBo=o("layoutlm"),bBo=o(" \u2014 "),ZO=a("a"),vBo=o("LayoutLMForMaskedLM"),FBo=o(" (LayoutLM model)"),TBo=l(),U2=a("li"),Phe=a("strong"),MBo=o("longformer"),EBo=o(" \u2014 "),eV=a("a"),CBo=o("LongformerForMaskedLM"),wBo=o(" (Longformer model)"),ABo=l(),J2=a("li"),Bhe=a("strong"),LBo=o("luke"),yBo=o(" \u2014 "),oV=a("a"),xBo=o("LukeForMaskedLM"),$Bo=o(" (LUKE model)"),kBo=l(),Y2=a("li"),Nhe=a("strong"),SBo=o("mbart"),RBo=o(" \u2014 "),rV=a("a"),PBo=o("MBartForConditionalGeneration"),BBo=o(" (mBART model)"),NBo=l(),K2=a("li"),Ihe=a("strong"),IBo=o("megatron-bert"),qBo=o(" \u2014 "),tV=a("a"),jBo=o("MegatronBertForMaskedLM"),DBo=o(" (Megatron-BERT model)"),GBo=l(),Z2=a("li"),qhe=a("strong"),OBo=o("mobilebert"),VBo=o(" \u2014 "),aV=a("a"),XBo=o("MobileBertForMaskedLM"),zBo=o(" (MobileBERT model)"),QBo=l(),eb=a("li"),jhe=a("strong"),WBo=o("mpnet"),HBo=o(" \u2014 "),nV=a("a"),UBo=o("MPNetForMaskedLM"),JBo=o(" (MPNet model)"),YBo=l(),ob=a("li"),Dhe=a("strong"),KBo=o("mvp"),ZBo=o(" \u2014 "),sV=a("a"),eNo=o("MvpForConditionalGeneration"),oNo=o(" (MVP model)"),rNo=l(),rb=a("li"),Ghe=a("strong"),tNo=o("nezha"),aNo=o(" \u2014 "),lV=a("a"),nNo=o("NezhaForMaskedLM"),sNo=o(" (Nezha model)"),lNo=l(),tb=a("li"),Ohe=a("strong"),iNo=o("nystromformer"),dNo=o(" \u2014 "),iV=a("a"),cNo=o("NystromformerForMaskedLM"),fNo=o(" (Nystr\xF6mformer model)"),mNo=l(),ab=a("li"),Vhe=a("strong"),gNo=o("perceiver"),hNo=o(" \u2014 "),dV=a("a"),pNo=o("PerceiverForMaskedLM"),_No=o(" (Perceiver model)"),uNo=l(),nb=a("li"),Xhe=a("strong"),bNo=o("qdqbert"),vNo=o(" \u2014 "),cV=a("a"),FNo=o("QDQBertForMaskedLM"),TNo=o(" (QDQBert model)"),MNo=l(),sb=a("li"),zhe=a("strong"),ENo=o("reformer"),CNo=o(" \u2014 "),fV=a("a"),wNo=o("ReformerForMaskedLM"),ANo=o(" (Reformer model)"),LNo=l(),lb=a("li"),Qhe=a("strong"),yNo=o("rembert"),xNo=o(" \u2014 "),mV=a("a"),$No=o("RemBertForMaskedLM"),kNo=o(" (RemBERT model)"),SNo=l(),ib=a("li"),Whe=a("strong"),RNo=o("roberta"),PNo=o(" \u2014 "),gV=a("a"),BNo=o("RobertaForMaskedLM"),NNo=o(" (RoBERTa model)"),INo=l(),db=a("li"),Hhe=a("strong"),qNo=o("roformer"),jNo=o(" \u2014 "),hV=a("a"),DNo=o("RoFormerForMaskedLM"),GNo=o(" (RoFormer model)"),ONo=l(),cb=a("li"),Uhe=a("strong"),VNo=o("squeezebert"),XNo=o(" \u2014 "),pV=a("a"),zNo=o("SqueezeBertForMaskedLM"),QNo=o(" (SqueezeBERT model)"),WNo=l(),fb=a("li"),Jhe=a("strong"),HNo=o("tapas"),UNo=o(" \u2014 "),_V=a("a"),JNo=o("TapasForMaskedLM"),YNo=o(" (TAPAS model)"),KNo=l(),mb=a("li"),Yhe=a("strong"),ZNo=o("wav2vec2"),eIo=o(" \u2014 "),Khe=a("code"),oIo=o("Wav2Vec2ForMaskedLM"),rIo=o(" (Wav2Vec2 model)"),tIo=l(),gb=a("li"),Zhe=a("strong"),aIo=o("xlm"),nIo=o(" \u2014 "),uV=a("a"),sIo=o("XLMWithLMHeadModel"),lIo=o(" (XLM model)"),iIo=l(),hb=a("li"),epe=a("strong"),dIo=o("xlm-roberta"),cIo=o(" \u2014 "),bV=a("a"),fIo=o("XLMRobertaForMaskedLM"),mIo=o(" (XLM-RoBERTa model)"),gIo=l(),pb=a("li"),ope=a("strong"),hIo=o("xlm-roberta-xl"),pIo=o(" \u2014 "),vV=a("a"),_Io=o("XLMRobertaXLForMaskedLM"),uIo=o(" (XLM-RoBERTa-XL model)"),bIo=l(),_b=a("li"),rpe=a("strong"),vIo=o("yoso"),FIo=o(" \u2014 "),FV=a("a"),TIo=o("YosoForMaskedLM"),MIo=o(" (YOSO model)"),EIo=l(),ub=a("p"),CIo=o("The model is set in evaluation mode by default using "),tpe=a("code"),wIo=o("model.eval()"),AIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=a("code"),LIo=o("model.train()"),yIo=l(),F(bb.$$.fragment),gXe=l(),Ki=a("h2"),vb=a("a"),npe=a("span"),F(UL.$$.fragment),xIo=l(),spe=a("span"),$Io=o("AutoModelForSeq2SeqLM"),hXe=l(),Ro=a("div"),F(JL.$$.fragment),kIo=l(),Zi=a("p"),SIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TV=a("a"),RIo=o("from_pretrained()"),PIo=o(" class method or the "),MV=a("a"),BIo=o("from_config()"),NIo=o(` class
method.`),IIo=l(),YL=a("p"),qIo=o("This class cannot be instantiated directly using "),lpe=a("code"),jIo=o("__init__()"),DIo=o(" (throws an error)."),GIo=l(),ft=a("div"),F(KL.$$.fragment),OIo=l(),ipe=a("p"),VIo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XIo=l(),ed=a("p"),zIo=o(`Note:
Loading a model from its configuration file does `),dpe=a("strong"),QIo=o("not"),WIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),HIo=o("from_pretrained()"),UIo=o(" to load the model weights."),JIo=l(),F(Fb.$$.fragment),YIo=l(),eo=a("div"),F(ZL.$$.fragment),KIo=l(),cpe=a("p"),ZIo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eqo=l(),Da=a("p"),oqo=o("The model class to instantiate is selected based on the "),fpe=a("code"),rqo=o("model_type"),tqo=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(":"),iqo=l(),pe=a("ul"),Tb=a("li"),hpe=a("strong"),dqo=o("bart"),cqo=o(" \u2014 "),CV=a("a"),fqo=o("BartForConditionalGeneration"),mqo=o(" (BART model)"),gqo=l(),Mb=a("li"),ppe=a("strong"),hqo=o("bigbird_pegasus"),pqo=o(" \u2014 "),wV=a("a"),_qo=o("BigBirdPegasusForConditionalGeneration"),uqo=o(" (BigBird-Pegasus model)"),bqo=l(),Eb=a("li"),_pe=a("strong"),vqo=o("blenderbot"),Fqo=o(" \u2014 "),AV=a("a"),Tqo=o("BlenderbotForConditionalGeneration"),Mqo=o(" (Blenderbot model)"),Eqo=l(),Cb=a("li"),upe=a("strong"),Cqo=o("blenderbot-small"),wqo=o(" \u2014 "),LV=a("a"),Aqo=o("BlenderbotSmallForConditionalGeneration"),Lqo=o(" (BlenderbotSmall model)"),yqo=l(),wb=a("li"),bpe=a("strong"),xqo=o("encoder-decoder"),$qo=o(" \u2014 "),yV=a("a"),kqo=o("EncoderDecoderModel"),Sqo=o(" (Encoder decoder model)"),Rqo=l(),Ab=a("li"),vpe=a("strong"),Pqo=o("fsmt"),Bqo=o(" \u2014 "),xV=a("a"),Nqo=o("FSMTForConditionalGeneration"),Iqo=o(" (FairSeq Machine-Translation model)"),qqo=l(),Lb=a("li"),Fpe=a("strong"),jqo=o("led"),Dqo=o(" \u2014 "),$V=a("a"),Gqo=o("LEDForConditionalGeneration"),Oqo=o(" (LED model)"),Vqo=l(),yb=a("li"),Tpe=a("strong"),Xqo=o("longt5"),zqo=o(" \u2014 "),kV=a("a"),Qqo=o("LongT5ForConditionalGeneration"),Wqo=o(" (LongT5 model)"),Hqo=l(),xb=a("li"),Mpe=a("strong"),Uqo=o("m2m_100"),Jqo=o(" \u2014 "),SV=a("a"),Yqo=o("M2M100ForConditionalGeneration"),Kqo=o(" (M2M100 model)"),Zqo=l(),$b=a("li"),Epe=a("strong"),ejo=o("marian"),ojo=o(" \u2014 "),RV=a("a"),rjo=o("MarianMTModel"),tjo=o(" (Marian model)"),ajo=l(),kb=a("li"),Cpe=a("strong"),njo=o("mbart"),sjo=o(" \u2014 "),PV=a("a"),ljo=o("MBartForConditionalGeneration"),ijo=o(" (mBART model)"),djo=l(),Sb=a("li"),wpe=a("strong"),cjo=o("mt5"),fjo=o(" \u2014 "),BV=a("a"),mjo=o("MT5ForConditionalGeneration"),gjo=o(" (MT5 model)"),hjo=l(),Rb=a("li"),Ape=a("strong"),pjo=o("mvp"),_jo=o(" \u2014 "),NV=a("a"),ujo=o("MvpForConditionalGeneration"),bjo=o(" (MVP model)"),vjo=l(),Pb=a("li"),Lpe=a("strong"),Fjo=o("pegasus"),Tjo=o(" \u2014 "),IV=a("a"),Mjo=o("PegasusForConditionalGeneration"),Ejo=o(" (Pegasus model)"),Cjo=l(),Bb=a("li"),ype=a("strong"),wjo=o("plbart"),Ajo=o(" \u2014 "),qV=a("a"),Ljo=o("PLBartForConditionalGeneration"),yjo=o(" (PLBart model)"),xjo=l(),Nb=a("li"),xpe=a("strong"),$jo=o("prophetnet"),kjo=o(" \u2014 "),jV=a("a"),Sjo=o("ProphetNetForConditionalGeneration"),Rjo=o(" (ProphetNet model)"),Pjo=l(),Ib=a("li"),$pe=a("strong"),Bjo=o("t5"),Njo=o(" \u2014 "),DV=a("a"),Ijo=o("T5ForConditionalGeneration"),qjo=o(" (T5 model)"),jjo=l(),qb=a("li"),kpe=a("strong"),Djo=o("xlm-prophetnet"),Gjo=o(" \u2014 "),GV=a("a"),Ojo=o("XLMProphetNetForConditionalGeneration"),Vjo=o(" (XLM-ProphetNet model)"),Xjo=l(),jb=a("p"),zjo=o("The model is set in evaluation mode by default using "),Spe=a("code"),Qjo=o("model.eval()"),Wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),Hjo=o("model.train()"),Ujo=l(),F(Db.$$.fragment),pXe=l(),od=a("h2"),Gb=a("a"),Ppe=a("span"),F(ey.$$.fragment),Jjo=l(),Bpe=a("span"),Yjo=o("AutoModelForSequenceClassification"),_Xe=l(),Po=a("div"),F(oy.$$.fragment),Kjo=l(),rd=a("p"),Zjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OV=a("a"),eDo=o("from_pretrained()"),oDo=o(" class method or the "),VV=a("a"),rDo=o("from_config()"),tDo=o(` class
method.`),aDo=l(),ry=a("p"),nDo=o("This class cannot be instantiated directly using "),Npe=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),mt=a("div"),F(ty.$$.fragment),dDo=l(),Ipe=a("p"),cDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fDo=l(),td=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),pDo=o("from_pretrained()"),_Do=o(" to load the model weights."),uDo=l(),F(Ob.$$.fragment),bDo=l(),oo=a("div"),F(ay.$$.fragment),vDo=l(),jpe=a("p"),FDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TDo=l(),Ga=a("p"),MDo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),EDo=o("model_type"),CDo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),wDo=o("pretrained_model_name_or_path"),ADo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),LDo=o("pretrained_model_name_or_path"),yDo=o(":"),xDo=l(),B=a("ul"),Vb=a("li"),Vpe=a("strong"),$Do=o("albert"),kDo=o(" \u2014 "),zV=a("a"),SDo=o("AlbertForSequenceClassification"),RDo=o(" (ALBERT model)"),PDo=l(),Xb=a("li"),Xpe=a("strong"),BDo=o("bart"),NDo=o(" \u2014 "),QV=a("a"),IDo=o("BartForSequenceClassification"),qDo=o(" (BART model)"),jDo=l(),zb=a("li"),zpe=a("strong"),DDo=o("bert"),GDo=o(" \u2014 "),WV=a("a"),ODo=o("BertForSequenceClassification"),VDo=o(" (BERT model)"),XDo=l(),Qb=a("li"),Qpe=a("strong"),zDo=o("big_bird"),QDo=o(" \u2014 "),HV=a("a"),WDo=o("BigBirdForSequenceClassification"),HDo=o(" (BigBird model)"),UDo=l(),Wb=a("li"),Wpe=a("strong"),JDo=o("bigbird_pegasus"),YDo=o(" \u2014 "),UV=a("a"),KDo=o("BigBirdPegasusForSequenceClassification"),ZDo=o(" (BigBird-Pegasus model)"),eGo=l(),Hb=a("li"),Hpe=a("strong"),oGo=o("bloom"),rGo=o(" \u2014 "),JV=a("a"),tGo=o("BloomForSequenceClassification"),aGo=o(" (BLOOM model)"),nGo=l(),Ub=a("li"),Upe=a("strong"),sGo=o("camembert"),lGo=o(" \u2014 "),YV=a("a"),iGo=o("CamembertForSequenceClassification"),dGo=o(" (CamemBERT model)"),cGo=l(),Jb=a("li"),Jpe=a("strong"),fGo=o("canine"),mGo=o(" \u2014 "),KV=a("a"),gGo=o("CanineForSequenceClassification"),hGo=o(" (CANINE model)"),pGo=l(),Yb=a("li"),Ype=a("strong"),_Go=o("convbert"),uGo=o(" \u2014 "),ZV=a("a"),bGo=o("ConvBertForSequenceClassification"),vGo=o(" (ConvBERT model)"),FGo=l(),Kb=a("li"),Kpe=a("strong"),TGo=o("ctrl"),MGo=o(" \u2014 "),eX=a("a"),EGo=o("CTRLForSequenceClassification"),CGo=o(" (CTRL model)"),wGo=l(),Zb=a("li"),Zpe=a("strong"),AGo=o("data2vec-text"),LGo=o(" \u2014 "),oX=a("a"),yGo=o("Data2VecTextForSequenceClassification"),xGo=o(" (Data2VecText model)"),$Go=l(),ev=a("li"),e_e=a("strong"),kGo=o("deberta"),SGo=o(" \u2014 "),rX=a("a"),RGo=o("DebertaForSequenceClassification"),PGo=o(" (DeBERTa model)"),BGo=l(),ov=a("li"),o_e=a("strong"),NGo=o("deberta-v2"),IGo=o(" \u2014 "),tX=a("a"),qGo=o("DebertaV2ForSequenceClassification"),jGo=o(" (DeBERTa-v2 model)"),DGo=l(),rv=a("li"),r_e=a("strong"),GGo=o("distilbert"),OGo=o(" \u2014 "),aX=a("a"),VGo=o("DistilBertForSequenceClassification"),XGo=o(" (DistilBERT model)"),zGo=l(),tv=a("li"),t_e=a("strong"),QGo=o("electra"),WGo=o(" \u2014 "),nX=a("a"),HGo=o("ElectraForSequenceClassification"),UGo=o(" (ELECTRA model)"),JGo=l(),av=a("li"),a_e=a("strong"),YGo=o("flaubert"),KGo=o(" \u2014 "),sX=a("a"),ZGo=o("FlaubertForSequenceClassification"),eOo=o(" (FlauBERT model)"),oOo=l(),nv=a("li"),n_e=a("strong"),rOo=o("fnet"),tOo=o(" \u2014 "),lX=a("a"),aOo=o("FNetForSequenceClassification"),nOo=o(" (FNet model)"),sOo=l(),sv=a("li"),s_e=a("strong"),lOo=o("funnel"),iOo=o(" \u2014 "),iX=a("a"),dOo=o("FunnelForSequenceClassification"),cOo=o(" (Funnel Transformer model)"),fOo=l(),lv=a("li"),l_e=a("strong"),mOo=o("gpt2"),gOo=o(" \u2014 "),dX=a("a"),hOo=o("GPT2ForSequenceClassification"),pOo=o(" (OpenAI GPT-2 model)"),_Oo=l(),iv=a("li"),i_e=a("strong"),uOo=o("gpt_neo"),bOo=o(" \u2014 "),cX=a("a"),vOo=o("GPTNeoForSequenceClassification"),FOo=o(" (GPT Neo model)"),TOo=l(),dv=a("li"),d_e=a("strong"),MOo=o("gptj"),EOo=o(" \u2014 "),fX=a("a"),COo=o("GPTJForSequenceClassification"),wOo=o(" (GPT-J model)"),AOo=l(),cv=a("li"),c_e=a("strong"),LOo=o("ibert"),yOo=o(" \u2014 "),mX=a("a"),xOo=o("IBertForSequenceClassification"),$Oo=o(" (I-BERT model)"),kOo=l(),fv=a("li"),f_e=a("strong"),SOo=o("layoutlm"),ROo=o(" \u2014 "),gX=a("a"),POo=o("LayoutLMForSequenceClassification"),BOo=o(" (LayoutLM model)"),NOo=l(),mv=a("li"),m_e=a("strong"),IOo=o("layoutlmv2"),qOo=o(" \u2014 "),hX=a("a"),jOo=o("LayoutLMv2ForSequenceClassification"),DOo=o(" (LayoutLMv2 model)"),GOo=l(),gv=a("li"),g_e=a("strong"),OOo=o("layoutlmv3"),VOo=o(" \u2014 "),pX=a("a"),XOo=o("LayoutLMv3ForSequenceClassification"),zOo=o(" (LayoutLMv3 model)"),QOo=l(),hv=a("li"),h_e=a("strong"),WOo=o("led"),HOo=o(" \u2014 "),_X=a("a"),UOo=o("LEDForSequenceClassification"),JOo=o(" (LED model)"),YOo=l(),pv=a("li"),p_e=a("strong"),KOo=o("longformer"),ZOo=o(" \u2014 "),uX=a("a"),eVo=o("LongformerForSequenceClassification"),oVo=o(" (Longformer model)"),rVo=l(),_v=a("li"),__e=a("strong"),tVo=o("mbart"),aVo=o(" \u2014 "),bX=a("a"),nVo=o("MBartForSequenceClassification"),sVo=o(" (mBART model)"),lVo=l(),uv=a("li"),u_e=a("strong"),iVo=o("megatron-bert"),dVo=o(" \u2014 "),vX=a("a"),cVo=o("MegatronBertForSequenceClassification"),fVo=o(" (Megatron-BERT model)"),mVo=l(),bv=a("li"),b_e=a("strong"),gVo=o("mobilebert"),hVo=o(" \u2014 "),FX=a("a"),pVo=o("MobileBertForSequenceClassification"),_Vo=o(" (MobileBERT model)"),uVo=l(),vv=a("li"),v_e=a("strong"),bVo=o("mpnet"),vVo=o(" \u2014 "),TX=a("a"),FVo=o("MPNetForSequenceClassification"),TVo=o(" (MPNet model)"),MVo=l(),Fv=a("li"),F_e=a("strong"),EVo=o("mvp"),CVo=o(" \u2014 "),MX=a("a"),wVo=o("MvpForSequenceClassification"),AVo=o(" (MVP model)"),LVo=l(),Tv=a("li"),T_e=a("strong"),yVo=o("nezha"),xVo=o(" \u2014 "),EX=a("a"),$Vo=o("NezhaForSequenceClassification"),kVo=o(" (Nezha model)"),SVo=l(),Mv=a("li"),M_e=a("strong"),RVo=o("nystromformer"),PVo=o(" \u2014 "),CX=a("a"),BVo=o("NystromformerForSequenceClassification"),NVo=o(" (Nystr\xF6mformer model)"),IVo=l(),Ev=a("li"),E_e=a("strong"),qVo=o("openai-gpt"),jVo=o(" \u2014 "),wX=a("a"),DVo=o("OpenAIGPTForSequenceClassification"),GVo=o(" (OpenAI GPT model)"),OVo=l(),Cv=a("li"),C_e=a("strong"),VVo=o("opt"),XVo=o(" \u2014 "),AX=a("a"),zVo=o("OPTForSequenceClassification"),QVo=o(" (OPT model)"),WVo=l(),wv=a("li"),w_e=a("strong"),HVo=o("perceiver"),UVo=o(" \u2014 "),LX=a("a"),JVo=o("PerceiverForSequenceClassification"),YVo=o(" (Perceiver model)"),KVo=l(),Av=a("li"),A_e=a("strong"),ZVo=o("plbart"),eXo=o(" \u2014 "),yX=a("a"),oXo=o("PLBartForSequenceClassification"),rXo=o(" (PLBart model)"),tXo=l(),Lv=a("li"),L_e=a("strong"),aXo=o("qdqbert"),nXo=o(" \u2014 "),xX=a("a"),sXo=o("QDQBertForSequenceClassification"),lXo=o(" (QDQBert model)"),iXo=l(),yv=a("li"),y_e=a("strong"),dXo=o("reformer"),cXo=o(" \u2014 "),$X=a("a"),fXo=o("ReformerForSequenceClassification"),mXo=o(" (Reformer model)"),gXo=l(),xv=a("li"),x_e=a("strong"),hXo=o("rembert"),pXo=o(" \u2014 "),kX=a("a"),_Xo=o("RemBertForSequenceClassification"),uXo=o(" (RemBERT model)"),bXo=l(),$v=a("li"),$_e=a("strong"),vXo=o("roberta"),FXo=o(" \u2014 "),SX=a("a"),TXo=o("RobertaForSequenceClassification"),MXo=o(" (RoBERTa model)"),EXo=l(),kv=a("li"),k_e=a("strong"),CXo=o("roformer"),wXo=o(" \u2014 "),RX=a("a"),AXo=o("RoFormerForSequenceClassification"),LXo=o(" (RoFormer model)"),yXo=l(),Sv=a("li"),S_e=a("strong"),xXo=o("squeezebert"),$Xo=o(" \u2014 "),PX=a("a"),kXo=o("SqueezeBertForSequenceClassification"),SXo=o(" (SqueezeBERT model)"),RXo=l(),Rv=a("li"),R_e=a("strong"),PXo=o("tapas"),BXo=o(" \u2014 "),BX=a("a"),NXo=o("TapasForSequenceClassification"),IXo=o(" (TAPAS model)"),qXo=l(),Pv=a("li"),P_e=a("strong"),jXo=o("transfo-xl"),DXo=o(" \u2014 "),NX=a("a"),GXo=o("TransfoXLForSequenceClassification"),OXo=o(" (Transformer-XL model)"),VXo=l(),Bv=a("li"),B_e=a("strong"),XXo=o("xlm"),zXo=o(" \u2014 "),IX=a("a"),QXo=o("XLMForSequenceClassification"),WXo=o(" (XLM model)"),HXo=l(),Nv=a("li"),N_e=a("strong"),UXo=o("xlm-roberta"),JXo=o(" \u2014 "),qX=a("a"),YXo=o("XLMRobertaForSequenceClassification"),KXo=o(" (XLM-RoBERTa model)"),ZXo=l(),Iv=a("li"),I_e=a("strong"),ezo=o("xlm-roberta-xl"),ozo=o(" \u2014 "),jX=a("a"),rzo=o("XLMRobertaXLForSequenceClassification"),tzo=o(" (XLM-RoBERTa-XL model)"),azo=l(),qv=a("li"),q_e=a("strong"),nzo=o("xlnet"),szo=o(" \u2014 "),DX=a("a"),lzo=o("XLNetForSequenceClassification"),izo=o(" (XLNet model)"),dzo=l(),jv=a("li"),j_e=a("strong"),czo=o("yoso"),fzo=o(" \u2014 "),GX=a("a"),mzo=o("YosoForSequenceClassification"),gzo=o(" (YOSO model)"),hzo=l(),Dv=a("p"),pzo=o("The model is set in evaluation mode by default using "),D_e=a("code"),_zo=o("model.eval()"),uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),bzo=o("model.train()"),vzo=l(),F(Gv.$$.fragment),uXe=l(),ad=a("h2"),Ov=a("a"),O_e=a("span"),F(ny.$$.fragment),Fzo=l(),V_e=a("span"),Tzo=o("AutoModelForMultipleChoice"),bXe=l(),Bo=a("div"),F(sy.$$.fragment),Mzo=l(),nd=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OX=a("a"),Czo=o("from_pretrained()"),wzo=o(" class method or the "),VX=a("a"),Azo=o("from_config()"),Lzo=o(` class
method.`),yzo=l(),ly=a("p"),xzo=o("This class cannot be instantiated directly using "),X_e=a("code"),$zo=o("__init__()"),kzo=o(" (throws an error)."),Szo=l(),gt=a("div"),F(iy.$$.fragment),Rzo=l(),z_e=a("p"),Pzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bzo=l(),sd=a("p"),Nzo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Izo=o("not"),qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),jzo=o("from_pretrained()"),Dzo=o(" to load the model weights."),Gzo=l(),F(Vv.$$.fragment),Ozo=l(),ro=a("div"),F(dy.$$.fragment),Vzo=l(),W_e=a("p"),Xzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zzo=l(),Oa=a("p"),Qzo=o("The model class to instantiate is selected based on the "),H_e=a("code"),Wzo=o("model_type"),Hzo=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(":"),Zzo=l(),Z=a("ul"),Xv=a("li"),Y_e=a("strong"),eQo=o("albert"),oQo=o(" \u2014 "),zX=a("a"),rQo=o("AlbertForMultipleChoice"),tQo=o(" (ALBERT model)"),aQo=l(),zv=a("li"),K_e=a("strong"),nQo=o("bert"),sQo=o(" \u2014 "),QX=a("a"),lQo=o("BertForMultipleChoice"),iQo=o(" (BERT model)"),dQo=l(),Qv=a("li"),Z_e=a("strong"),cQo=o("big_bird"),fQo=o(" \u2014 "),WX=a("a"),mQo=o("BigBirdForMultipleChoice"),gQo=o(" (BigBird model)"),hQo=l(),Wv=a("li"),eue=a("strong"),pQo=o("camembert"),_Qo=o(" \u2014 "),HX=a("a"),uQo=o("CamembertForMultipleChoice"),bQo=o(" (CamemBERT model)"),vQo=l(),Hv=a("li"),oue=a("strong"),FQo=o("canine"),TQo=o(" \u2014 "),UX=a("a"),MQo=o("CanineForMultipleChoice"),EQo=o(" (CANINE model)"),CQo=l(),Uv=a("li"),rue=a("strong"),wQo=o("convbert"),AQo=o(" \u2014 "),JX=a("a"),LQo=o("ConvBertForMultipleChoice"),yQo=o(" (ConvBERT model)"),xQo=l(),Jv=a("li"),tue=a("strong"),$Qo=o("data2vec-text"),kQo=o(" \u2014 "),YX=a("a"),SQo=o("Data2VecTextForMultipleChoice"),RQo=o(" (Data2VecText model)"),PQo=l(),Yv=a("li"),aue=a("strong"),BQo=o("deberta-v2"),NQo=o(" \u2014 "),KX=a("a"),IQo=o("DebertaV2ForMultipleChoice"),qQo=o(" (DeBERTa-v2 model)"),jQo=l(),Kv=a("li"),nue=a("strong"),DQo=o("distilbert"),GQo=o(" \u2014 "),ZX=a("a"),OQo=o("DistilBertForMultipleChoice"),VQo=o(" (DistilBERT model)"),XQo=l(),Zv=a("li"),sue=a("strong"),zQo=o("electra"),QQo=o(" \u2014 "),ez=a("a"),WQo=o("ElectraForMultipleChoice"),HQo=o(" (ELECTRA model)"),UQo=l(),e3=a("li"),lue=a("strong"),JQo=o("flaubert"),YQo=o(" \u2014 "),oz=a("a"),KQo=o("FlaubertForMultipleChoice"),ZQo=o(" (FlauBERT model)"),eWo=l(),o3=a("li"),iue=a("strong"),oWo=o("fnet"),rWo=o(" \u2014 "),rz=a("a"),tWo=o("FNetForMultipleChoice"),aWo=o(" (FNet model)"),nWo=l(),r3=a("li"),due=a("strong"),sWo=o("funnel"),lWo=o(" \u2014 "),tz=a("a"),iWo=o("FunnelForMultipleChoice"),dWo=o(" (Funnel Transformer model)"),cWo=l(),t3=a("li"),cue=a("strong"),fWo=o("ibert"),mWo=o(" \u2014 "),az=a("a"),gWo=o("IBertForMultipleChoice"),hWo=o(" (I-BERT model)"),pWo=l(),a3=a("li"),fue=a("strong"),_Wo=o("longformer"),uWo=o(" \u2014 "),nz=a("a"),bWo=o("LongformerForMultipleChoice"),vWo=o(" (Longformer model)"),FWo=l(),n3=a("li"),mue=a("strong"),TWo=o("megatron-bert"),MWo=o(" \u2014 "),sz=a("a"),EWo=o("MegatronBertForMultipleChoice"),CWo=o(" (Megatron-BERT model)"),wWo=l(),s3=a("li"),gue=a("strong"),AWo=o("mobilebert"),LWo=o(" \u2014 "),lz=a("a"),yWo=o("MobileBertForMultipleChoice"),xWo=o(" (MobileBERT model)"),$Wo=l(),l3=a("li"),hue=a("strong"),kWo=o("mpnet"),SWo=o(" \u2014 "),iz=a("a"),RWo=o("MPNetForMultipleChoice"),PWo=o(" (MPNet model)"),BWo=l(),i3=a("li"),pue=a("strong"),NWo=o("nezha"),IWo=o(" \u2014 "),dz=a("a"),qWo=o("NezhaForMultipleChoice"),jWo=o(" (Nezha model)"),DWo=l(),d3=a("li"),_ue=a("strong"),GWo=o("nystromformer"),OWo=o(" \u2014 "),cz=a("a"),VWo=o("NystromformerForMultipleChoice"),XWo=o(" (Nystr\xF6mformer model)"),zWo=l(),c3=a("li"),uue=a("strong"),QWo=o("qdqbert"),WWo=o(" \u2014 "),fz=a("a"),HWo=o("QDQBertForMultipleChoice"),UWo=o(" (QDQBert model)"),JWo=l(),f3=a("li"),bue=a("strong"),YWo=o("rembert"),KWo=o(" \u2014 "),mz=a("a"),ZWo=o("RemBertForMultipleChoice"),eHo=o(" (RemBERT model)"),oHo=l(),m3=a("li"),vue=a("strong"),rHo=o("roberta"),tHo=o(" \u2014 "),gz=a("a"),aHo=o("RobertaForMultipleChoice"),nHo=o(" (RoBERTa model)"),sHo=l(),g3=a("li"),Fue=a("strong"),lHo=o("roformer"),iHo=o(" \u2014 "),hz=a("a"),dHo=o("RoFormerForMultipleChoice"),cHo=o(" (RoFormer model)"),fHo=l(),h3=a("li"),Tue=a("strong"),mHo=o("squeezebert"),gHo=o(" \u2014 "),pz=a("a"),hHo=o("SqueezeBertForMultipleChoice"),pHo=o(" (SqueezeBERT model)"),_Ho=l(),p3=a("li"),Mue=a("strong"),uHo=o("xlm"),bHo=o(" \u2014 "),_z=a("a"),vHo=o("XLMForMultipleChoice"),FHo=o(" (XLM model)"),THo=l(),_3=a("li"),Eue=a("strong"),MHo=o("xlm-roberta"),EHo=o(" \u2014 "),uz=a("a"),CHo=o("XLMRobertaForMultipleChoice"),wHo=o(" (XLM-RoBERTa model)"),AHo=l(),u3=a("li"),Cue=a("strong"),LHo=o("xlm-roberta-xl"),yHo=o(" \u2014 "),bz=a("a"),xHo=o("XLMRobertaXLForMultipleChoice"),$Ho=o(" (XLM-RoBERTa-XL model)"),kHo=l(),b3=a("li"),wue=a("strong"),SHo=o("xlnet"),RHo=o(" \u2014 "),vz=a("a"),PHo=o("XLNetForMultipleChoice"),BHo=o(" (XLNet model)"),NHo=l(),v3=a("li"),Aue=a("strong"),IHo=o("yoso"),qHo=o(" \u2014 "),Fz=a("a"),jHo=o("YosoForMultipleChoice"),DHo=o(" (YOSO model)"),GHo=l(),F3=a("p"),OHo=o("The model is set in evaluation mode by default using "),Lue=a("code"),VHo=o("model.eval()"),XHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),zHo=o("model.train()"),QHo=l(),F(T3.$$.fragment),vXe=l(),ld=a("h2"),M3=a("a"),xue=a("span"),F(cy.$$.fragment),WHo=l(),$ue=a("span"),HHo=o("AutoModelForNextSentencePrediction"),FXe=l(),No=a("div"),F(fy.$$.fragment),UHo=l(),id=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tz=a("a"),YHo=o("from_pretrained()"),KHo=o(" class method or the "),Mz=a("a"),ZHo=o("from_config()"),eUo=o(` class
method.`),oUo=l(),my=a("p"),rUo=o("This class cannot be instantiated directly using "),kue=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),ht=a("div"),F(gy.$$.fragment),sUo=l(),Sue=a("p"),lUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iUo=l(),dd=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),cUo=o("not"),fUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),mUo=o("from_pretrained()"),gUo=o(" to load the model weights."),hUo=l(),F(E3.$$.fragment),pUo=l(),to=a("div"),F(hy.$$.fragment),_Uo=l(),Pue=a("p"),uUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bUo=l(),Va=a("p"),vUo=o("The model class to instantiate is selected based on the "),Bue=a("code"),FUo=o("model_type"),TUo=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),CUo=o("pretrained_model_name_or_path"),wUo=o(":"),AUo=l(),Io=a("ul"),C3=a("li"),que=a("strong"),LUo=o("bert"),yUo=o(" \u2014 "),Cz=a("a"),xUo=o("BertForNextSentencePrediction"),$Uo=o(" (BERT model)"),kUo=l(),w3=a("li"),jue=a("strong"),SUo=o("fnet"),RUo=o(" \u2014 "),wz=a("a"),PUo=o("FNetForNextSentencePrediction"),BUo=o(" (FNet model)"),NUo=l(),A3=a("li"),Due=a("strong"),IUo=o("megatron-bert"),qUo=o(" \u2014 "),Az=a("a"),jUo=o("MegatronBertForNextSentencePrediction"),DUo=o(" (Megatron-BERT model)"),GUo=l(),L3=a("li"),Gue=a("strong"),OUo=o("mobilebert"),VUo=o(" \u2014 "),Lz=a("a"),XUo=o("MobileBertForNextSentencePrediction"),zUo=o(" (MobileBERT model)"),QUo=l(),y3=a("li"),Oue=a("strong"),WUo=o("nezha"),HUo=o(" \u2014 "),yz=a("a"),UUo=o("NezhaForNextSentencePrediction"),JUo=o(" (Nezha model)"),YUo=l(),x3=a("li"),Vue=a("strong"),KUo=o("qdqbert"),ZUo=o(" \u2014 "),xz=a("a"),eJo=o("QDQBertForNextSentencePrediction"),oJo=o(" (QDQBert model)"),rJo=l(),$3=a("p"),tJo=o("The model is set in evaluation mode by default using "),Xue=a("code"),aJo=o("model.eval()"),nJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),sJo=o("model.train()"),lJo=l(),F(k3.$$.fragment),TXe=l(),cd=a("h2"),S3=a("a"),Que=a("span"),F(py.$$.fragment),iJo=l(),Wue=a("span"),dJo=o("AutoModelForTokenClassification"),MXe=l(),qo=a("div"),F(_y.$$.fragment),cJo=l(),fd=a("p"),fJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=a("a"),mJo=o("from_pretrained()"),gJo=o(" class method or the "),kz=a("a"),hJo=o("from_config()"),pJo=o(` class
method.`),_Jo=l(),uy=a("p"),uJo=o("This class cannot be instantiated directly using "),Hue=a("code"),bJo=o("__init__()"),vJo=o(" (throws an error)."),FJo=l(),pt=a("div"),F(by.$$.fragment),TJo=l(),Uue=a("p"),MJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EJo=l(),md=a("p"),CJo=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),wJo=o("not"),AJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),LJo=o("from_pretrained()"),yJo=o(" to load the model weights."),xJo=l(),F(R3.$$.fragment),$Jo=l(),ao=a("div"),F(vy.$$.fragment),kJo=l(),Yue=a("p"),SJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RJo=l(),Xa=a("p"),PJo=o("The model class to instantiate is selected based on the "),Kue=a("code"),BJo=o("model_type"),NJo=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(":"),GJo=l(),U=a("ul"),P3=a("li"),o1e=a("strong"),OJo=o("albert"),VJo=o(" \u2014 "),Rz=a("a"),XJo=o("AlbertForTokenClassification"),zJo=o(" (ALBERT model)"),QJo=l(),B3=a("li"),r1e=a("strong"),WJo=o("bert"),HJo=o(" \u2014 "),Pz=a("a"),UJo=o("BertForTokenClassification"),JJo=o(" (BERT model)"),YJo=l(),N3=a("li"),t1e=a("strong"),KJo=o("big_bird"),ZJo=o(" \u2014 "),Bz=a("a"),eYo=o("BigBirdForTokenClassification"),oYo=o(" (BigBird model)"),rYo=l(),I3=a("li"),a1e=a("strong"),tYo=o("bloom"),aYo=o(" \u2014 "),Nz=a("a"),nYo=o("BloomForTokenClassification"),sYo=o(" (BLOOM model)"),lYo=l(),q3=a("li"),n1e=a("strong"),iYo=o("camembert"),dYo=o(" \u2014 "),Iz=a("a"),cYo=o("CamembertForTokenClassification"),fYo=o(" (CamemBERT model)"),mYo=l(),j3=a("li"),s1e=a("strong"),gYo=o("canine"),hYo=o(" \u2014 "),qz=a("a"),pYo=o("CanineForTokenClassification"),_Yo=o(" (CANINE model)"),uYo=l(),D3=a("li"),l1e=a("strong"),bYo=o("convbert"),vYo=o(" \u2014 "),jz=a("a"),FYo=o("ConvBertForTokenClassification"),TYo=o(" (ConvBERT model)"),MYo=l(),G3=a("li"),i1e=a("strong"),EYo=o("data2vec-text"),CYo=o(" \u2014 "),Dz=a("a"),wYo=o("Data2VecTextForTokenClassification"),AYo=o(" (Data2VecText model)"),LYo=l(),O3=a("li"),d1e=a("strong"),yYo=o("deberta"),xYo=o(" \u2014 "),Gz=a("a"),$Yo=o("DebertaForTokenClassification"),kYo=o(" (DeBERTa model)"),SYo=l(),V3=a("li"),c1e=a("strong"),RYo=o("deberta-v2"),PYo=o(" \u2014 "),Oz=a("a"),BYo=o("DebertaV2ForTokenClassification"),NYo=o(" (DeBERTa-v2 model)"),IYo=l(),X3=a("li"),f1e=a("strong"),qYo=o("distilbert"),jYo=o(" \u2014 "),Vz=a("a"),DYo=o("DistilBertForTokenClassification"),GYo=o(" (DistilBERT model)"),OYo=l(),z3=a("li"),m1e=a("strong"),VYo=o("electra"),XYo=o(" \u2014 "),Xz=a("a"),zYo=o("ElectraForTokenClassification"),QYo=o(" (ELECTRA model)"),WYo=l(),Q3=a("li"),g1e=a("strong"),HYo=o("flaubert"),UYo=o(" \u2014 "),zz=a("a"),JYo=o("FlaubertForTokenClassification"),YYo=o(" (FlauBERT model)"),KYo=l(),W3=a("li"),h1e=a("strong"),ZYo=o("fnet"),eKo=o(" \u2014 "),Qz=a("a"),oKo=o("FNetForTokenClassification"),rKo=o(" (FNet model)"),tKo=l(),H3=a("li"),p1e=a("strong"),aKo=o("funnel"),nKo=o(" \u2014 "),Wz=a("a"),sKo=o("FunnelForTokenClassification"),lKo=o(" (Funnel Transformer model)"),iKo=l(),U3=a("li"),_1e=a("strong"),dKo=o("gpt2"),cKo=o(" \u2014 "),Hz=a("a"),fKo=o("GPT2ForTokenClassification"),mKo=o(" (OpenAI GPT-2 model)"),gKo=l(),J3=a("li"),u1e=a("strong"),hKo=o("ibert"),pKo=o(" \u2014 "),Uz=a("a"),_Ko=o("IBertForTokenClassification"),uKo=o(" (I-BERT model)"),bKo=l(),Y3=a("li"),b1e=a("strong"),vKo=o("layoutlm"),FKo=o(" \u2014 "),Jz=a("a"),TKo=o("LayoutLMForTokenClassification"),MKo=o(" (LayoutLM model)"),EKo=l(),K3=a("li"),v1e=a("strong"),CKo=o("layoutlmv2"),wKo=o(" \u2014 "),Yz=a("a"),AKo=o("LayoutLMv2ForTokenClassification"),LKo=o(" (LayoutLMv2 model)"),yKo=l(),Z3=a("li"),F1e=a("strong"),xKo=o("layoutlmv3"),$Ko=o(" \u2014 "),Kz=a("a"),kKo=o("LayoutLMv3ForTokenClassification"),SKo=o(" (LayoutLMv3 model)"),RKo=l(),eF=a("li"),T1e=a("strong"),PKo=o("longformer"),BKo=o(" \u2014 "),Zz=a("a"),NKo=o("LongformerForTokenClassification"),IKo=o(" (Longformer model)"),qKo=l(),oF=a("li"),M1e=a("strong"),jKo=o("megatron-bert"),DKo=o(" \u2014 "),eQ=a("a"),GKo=o("MegatronBertForTokenClassification"),OKo=o(" (Megatron-BERT model)"),VKo=l(),rF=a("li"),E1e=a("strong"),XKo=o("mobilebert"),zKo=o(" \u2014 "),oQ=a("a"),QKo=o("MobileBertForTokenClassification"),WKo=o(" (MobileBERT model)"),HKo=l(),tF=a("li"),C1e=a("strong"),UKo=o("mpnet"),JKo=o(" \u2014 "),rQ=a("a"),YKo=o("MPNetForTokenClassification"),KKo=o(" (MPNet model)"),ZKo=l(),aF=a("li"),w1e=a("strong"),eZo=o("nezha"),oZo=o(" \u2014 "),tQ=a("a"),rZo=o("NezhaForTokenClassification"),tZo=o(" (Nezha model)"),aZo=l(),nF=a("li"),A1e=a("strong"),nZo=o("nystromformer"),sZo=o(" \u2014 "),aQ=a("a"),lZo=o("NystromformerForTokenClassification"),iZo=o(" (Nystr\xF6mformer model)"),dZo=l(),sF=a("li"),L1e=a("strong"),cZo=o("qdqbert"),fZo=o(" \u2014 "),nQ=a("a"),mZo=o("QDQBertForTokenClassification"),gZo=o(" (QDQBert model)"),hZo=l(),lF=a("li"),y1e=a("strong"),pZo=o("rembert"),_Zo=o(" \u2014 "),sQ=a("a"),uZo=o("RemBertForTokenClassification"),bZo=o(" (RemBERT model)"),vZo=l(),iF=a("li"),x1e=a("strong"),FZo=o("roberta"),TZo=o(" \u2014 "),lQ=a("a"),MZo=o("RobertaForTokenClassification"),EZo=o(" (RoBERTa model)"),CZo=l(),dF=a("li"),$1e=a("strong"),wZo=o("roformer"),AZo=o(" \u2014 "),iQ=a("a"),LZo=o("RoFormerForTokenClassification"),yZo=o(" (RoFormer model)"),xZo=l(),cF=a("li"),k1e=a("strong"),$Zo=o("squeezebert"),kZo=o(" \u2014 "),dQ=a("a"),SZo=o("SqueezeBertForTokenClassification"),RZo=o(" (SqueezeBERT model)"),PZo=l(),fF=a("li"),S1e=a("strong"),BZo=o("xlm"),NZo=o(" \u2014 "),cQ=a("a"),IZo=o("XLMForTokenClassification"),qZo=o(" (XLM model)"),jZo=l(),mF=a("li"),R1e=a("strong"),DZo=o("xlm-roberta"),GZo=o(" \u2014 "),fQ=a("a"),OZo=o("XLMRobertaForTokenClassification"),VZo=o(" (XLM-RoBERTa model)"),XZo=l(),gF=a("li"),P1e=a("strong"),zZo=o("xlm-roberta-xl"),QZo=o(" \u2014 "),mQ=a("a"),WZo=o("XLMRobertaXLForTokenClassification"),HZo=o(" (XLM-RoBERTa-XL model)"),UZo=l(),hF=a("li"),B1e=a("strong"),JZo=o("xlnet"),YZo=o(" \u2014 "),gQ=a("a"),KZo=o("XLNetForTokenClassification"),ZZo=o(" (XLNet model)"),eer=l(),pF=a("li"),N1e=a("strong"),oer=o("yoso"),rer=o(" \u2014 "),hQ=a("a"),ter=o("YosoForTokenClassification"),aer=o(" (YOSO model)"),ner=l(),_F=a("p"),ser=o("The model is set in evaluation mode by default using "),I1e=a("code"),ler=o("model.eval()"),ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=a("code"),der=o("model.train()"),cer=l(),F(uF.$$.fragment),EXe=l(),gd=a("h2"),bF=a("a"),j1e=a("span"),F(Fy.$$.fragment),fer=l(),D1e=a("span"),mer=o("AutoModelForQuestionAnswering"),CXe=l(),jo=a("div"),F(Ty.$$.fragment),ger=l(),hd=a("p"),her=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=a("a"),per=o("from_pretrained()"),_er=o(" class method or the "),_Q=a("a"),uer=o("from_config()"),ber=o(` class
method.`),ver=l(),My=a("p"),Fer=o("This class cannot be instantiated directly using "),G1e=a("code"),Ter=o("__init__()"),Mer=o(" (throws an error)."),Eer=l(),_t=a("div"),F(Ey.$$.fragment),Cer=l(),O1e=a("p"),wer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Aer=l(),pd=a("p"),Ler=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),yer=o("not"),xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),$er=o("from_pretrained()"),ker=o(" to load the model weights."),Ser=l(),F(vF.$$.fragment),Rer=l(),no=a("div"),F(Cy.$$.fragment),Per=l(),X1e=a("p"),Ber=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ner=l(),za=a("p"),Ier=o("The model class to instantiate is selected based on the "),z1e=a("code"),qer=o("model_type"),jer=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=a("code"),Oer=o("pretrained_model_name_or_path"),Ver=o(":"),Xer=l(),V=a("ul"),FF=a("li"),H1e=a("strong"),zer=o("albert"),Qer=o(" \u2014 "),bQ=a("a"),Wer=o("AlbertForQuestionAnswering"),Her=o(" (ALBERT model)"),Uer=l(),TF=a("li"),U1e=a("strong"),Jer=o("bart"),Yer=o(" \u2014 "),vQ=a("a"),Ker=o("BartForQuestionAnswering"),Zer=o(" (BART model)"),eor=l(),MF=a("li"),J1e=a("strong"),oor=o("bert"),ror=o(" \u2014 "),FQ=a("a"),tor=o("BertForQuestionAnswering"),aor=o(" (BERT model)"),nor=l(),EF=a("li"),Y1e=a("strong"),sor=o("big_bird"),lor=o(" \u2014 "),TQ=a("a"),ior=o("BigBirdForQuestionAnswering"),dor=o(" (BigBird model)"),cor=l(),CF=a("li"),K1e=a("strong"),mor=o("bigbird_pegasus"),gor=o(" \u2014 "),MQ=a("a"),hor=o("BigBirdPegasusForQuestionAnswering"),por=o(" (BigBird-Pegasus model)"),_or=l(),wF=a("li"),Z1e=a("strong"),uor=o("camembert"),bor=o(" \u2014 "),EQ=a("a"),vor=o("CamembertForQuestionAnswering"),For=o(" (CamemBERT model)"),Tor=l(),AF=a("li"),e2e=a("strong"),Mor=o("canine"),Eor=o(" \u2014 "),CQ=a("a"),Cor=o("CanineForQuestionAnswering"),wor=o(" (CANINE model)"),Aor=l(),LF=a("li"),o2e=a("strong"),Lor=o("convbert"),yor=o(" \u2014 "),wQ=a("a"),xor=o("ConvBertForQuestionAnswering"),$or=o(" (ConvBERT model)"),kor=l(),yF=a("li"),r2e=a("strong"),Sor=o("data2vec-text"),Ror=o(" \u2014 "),AQ=a("a"),Por=o("Data2VecTextForQuestionAnswering"),Bor=o(" (Data2VecText model)"),Nor=l(),xF=a("li"),t2e=a("strong"),Ior=o("deberta"),qor=o(" \u2014 "),LQ=a("a"),jor=o("DebertaForQuestionAnswering"),Dor=o(" (DeBERTa model)"),Gor=l(),$F=a("li"),a2e=a("strong"),Oor=o("deberta-v2"),Vor=o(" \u2014 "),yQ=a("a"),Xor=o("DebertaV2ForQuestionAnswering"),zor=o(" (DeBERTa-v2 model)"),Qor=l(),kF=a("li"),n2e=a("strong"),Wor=o("distilbert"),Hor=o(" \u2014 "),xQ=a("a"),Uor=o("DistilBertForQuestionAnswering"),Jor=o(" (DistilBERT model)"),Yor=l(),SF=a("li"),s2e=a("strong"),Kor=o("electra"),Zor=o(" \u2014 "),$Q=a("a"),err=o("ElectraForQuestionAnswering"),orr=o(" (ELECTRA model)"),rrr=l(),RF=a("li"),l2e=a("strong"),trr=o("flaubert"),arr=o(" \u2014 "),kQ=a("a"),nrr=o("FlaubertForQuestionAnsweringSimple"),srr=o(" (FlauBERT model)"),lrr=l(),PF=a("li"),i2e=a("strong"),irr=o("fnet"),drr=o(" \u2014 "),SQ=a("a"),crr=o("FNetForQuestionAnswering"),frr=o(" (FNet model)"),mrr=l(),BF=a("li"),d2e=a("strong"),grr=o("funnel"),hrr=o(" \u2014 "),RQ=a("a"),prr=o("FunnelForQuestionAnswering"),_rr=o(" (Funnel Transformer model)"),urr=l(),NF=a("li"),c2e=a("strong"),brr=o("gptj"),vrr=o(" \u2014 "),PQ=a("a"),Frr=o("GPTJForQuestionAnswering"),Trr=o(" (GPT-J model)"),Mrr=l(),IF=a("li"),f2e=a("strong"),Err=o("ibert"),Crr=o(" \u2014 "),BQ=a("a"),wrr=o("IBertForQuestionAnswering"),Arr=o(" (I-BERT model)"),Lrr=l(),qF=a("li"),m2e=a("strong"),yrr=o("layoutlmv2"),xrr=o(" \u2014 "),NQ=a("a"),$rr=o("LayoutLMv2ForQuestionAnswering"),krr=o(" (LayoutLMv2 model)"),Srr=l(),jF=a("li"),g2e=a("strong"),Rrr=o("layoutlmv3"),Prr=o(" \u2014 "),IQ=a("a"),Brr=o("LayoutLMv3ForQuestionAnswering"),Nrr=o(" (LayoutLMv3 model)"),Irr=l(),DF=a("li"),h2e=a("strong"),qrr=o("led"),jrr=o(" \u2014 "),qQ=a("a"),Drr=o("LEDForQuestionAnswering"),Grr=o(" (LED model)"),Orr=l(),GF=a("li"),p2e=a("strong"),Vrr=o("longformer"),Xrr=o(" \u2014 "),jQ=a("a"),zrr=o("LongformerForQuestionAnswering"),Qrr=o(" (Longformer model)"),Wrr=l(),OF=a("li"),_2e=a("strong"),Hrr=o("lxmert"),Urr=o(" \u2014 "),DQ=a("a"),Jrr=o("LxmertForQuestionAnswering"),Yrr=o(" (LXMERT model)"),Krr=l(),VF=a("li"),u2e=a("strong"),Zrr=o("mbart"),etr=o(" \u2014 "),GQ=a("a"),otr=o("MBartForQuestionAnswering"),rtr=o(" (mBART model)"),ttr=l(),XF=a("li"),b2e=a("strong"),atr=o("megatron-bert"),ntr=o(" \u2014 "),OQ=a("a"),str=o("MegatronBertForQuestionAnswering"),ltr=o(" (Megatron-BERT model)"),itr=l(),zF=a("li"),v2e=a("strong"),dtr=o("mobilebert"),ctr=o(" \u2014 "),VQ=a("a"),ftr=o("MobileBertForQuestionAnswering"),mtr=o(" (MobileBERT model)"),gtr=l(),QF=a("li"),F2e=a("strong"),htr=o("mpnet"),ptr=o(" \u2014 "),XQ=a("a"),_tr=o("MPNetForQuestionAnswering"),utr=o(" (MPNet model)"),btr=l(),WF=a("li"),T2e=a("strong"),vtr=o("mvp"),Ftr=o(" \u2014 "),zQ=a("a"),Ttr=o("MvpForQuestionAnswering"),Mtr=o(" (MVP model)"),Etr=l(),HF=a("li"),M2e=a("strong"),Ctr=o("nezha"),wtr=o(" \u2014 "),QQ=a("a"),Atr=o("NezhaForQuestionAnswering"),Ltr=o(" (Nezha model)"),ytr=l(),UF=a("li"),E2e=a("strong"),xtr=o("nystromformer"),$tr=o(" \u2014 "),WQ=a("a"),ktr=o("NystromformerForQuestionAnswering"),Str=o(" (Nystr\xF6mformer model)"),Rtr=l(),JF=a("li"),C2e=a("strong"),Ptr=o("qdqbert"),Btr=o(" \u2014 "),HQ=a("a"),Ntr=o("QDQBertForQuestionAnswering"),Itr=o(" (QDQBert model)"),qtr=l(),YF=a("li"),w2e=a("strong"),jtr=o("reformer"),Dtr=o(" \u2014 "),UQ=a("a"),Gtr=o("ReformerForQuestionAnswering"),Otr=o(" (Reformer model)"),Vtr=l(),KF=a("li"),A2e=a("strong"),Xtr=o("rembert"),ztr=o(" \u2014 "),JQ=a("a"),Qtr=o("RemBertForQuestionAnswering"),Wtr=o(" (RemBERT model)"),Htr=l(),ZF=a("li"),L2e=a("strong"),Utr=o("roberta"),Jtr=o(" \u2014 "),YQ=a("a"),Ytr=o("RobertaForQuestionAnswering"),Ktr=o(" (RoBERTa model)"),Ztr=l(),eT=a("li"),y2e=a("strong"),ear=o("roformer"),oar=o(" \u2014 "),KQ=a("a"),rar=o("RoFormerForQuestionAnswering"),tar=o(" (RoFormer model)"),aar=l(),oT=a("li"),x2e=a("strong"),nar=o("splinter"),sar=o(" \u2014 "),ZQ=a("a"),lar=o("SplinterForQuestionAnswering"),iar=o(" (Splinter model)"),dar=l(),rT=a("li"),$2e=a("strong"),car=o("squeezebert"),far=o(" \u2014 "),eW=a("a"),mar=o("SqueezeBertForQuestionAnswering"),gar=o(" (SqueezeBERT model)"),har=l(),tT=a("li"),k2e=a("strong"),par=o("xlm"),_ar=o(" \u2014 "),oW=a("a"),uar=o("XLMForQuestionAnsweringSimple"),bar=o(" (XLM model)"),Far=l(),aT=a("li"),S2e=a("strong"),Tar=o("xlm-roberta"),Mar=o(" \u2014 "),rW=a("a"),Ear=o("XLMRobertaForQuestionAnswering"),Car=o(" (XLM-RoBERTa model)"),war=l(),nT=a("li"),R2e=a("strong"),Aar=o("xlm-roberta-xl"),Lar=o(" \u2014 "),tW=a("a"),yar=o("XLMRobertaXLForQuestionAnswering"),xar=o(" (XLM-RoBERTa-XL model)"),$ar=l(),sT=a("li"),P2e=a("strong"),kar=o("xlnet"),Sar=o(" \u2014 "),aW=a("a"),Rar=o("XLNetForQuestionAnsweringSimple"),Par=o(" (XLNet model)"),Bar=l(),lT=a("li"),B2e=a("strong"),Nar=o("yoso"),Iar=o(" \u2014 "),nW=a("a"),qar=o("YosoForQuestionAnswering"),jar=o(" (YOSO model)"),Dar=l(),iT=a("p"),Gar=o("The model is set in evaluation mode by default using "),N2e=a("code"),Oar=o("model.eval()"),Var=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),Xar=o("model.train()"),zar=l(),F(dT.$$.fragment),wXe=l(),_d=a("h2"),cT=a("a"),q2e=a("span"),F(wy.$$.fragment),Qar=l(),j2e=a("span"),War=o("AutoModelForTableQuestionAnswering"),AXe=l(),Do=a("div"),F(Ay.$$.fragment),Har=l(),ud=a("p"),Uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sW=a("a"),Jar=o("from_pretrained()"),Yar=o(" class method or the "),lW=a("a"),Kar=o("from_config()"),Zar=o(` class
method.`),enr=l(),Ly=a("p"),onr=o("This class cannot be instantiated directly using "),D2e=a("code"),rnr=o("__init__()"),tnr=o(" (throws an error)."),anr=l(),ut=a("div"),F(yy.$$.fragment),nnr=l(),G2e=a("p"),snr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lnr=l(),bd=a("p"),inr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),dnr=o("not"),cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),fnr=o("from_pretrained()"),mnr=o(" to load the model weights."),gnr=l(),F(fT.$$.fragment),hnr=l(),so=a("div"),F(xy.$$.fragment),pnr=l(),V2e=a("p"),_nr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),unr=l(),Qa=a("p"),bnr=o("The model class to instantiate is selected based on the "),X2e=a("code"),vnr=o("model_type"),Fnr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),Tnr=o("pretrained_model_name_or_path"),Mnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),Enr=o("pretrained_model_name_or_path"),Cnr=o(":"),wnr=l(),W2e=a("ul"),mT=a("li"),H2e=a("strong"),Anr=o("tapas"),Lnr=o(" \u2014 "),dW=a("a"),ynr=o("TapasForQuestionAnswering"),xnr=o(" (TAPAS model)"),$nr=l(),gT=a("p"),knr=o("The model is set in evaluation mode by default using "),U2e=a("code"),Snr=o("model.eval()"),Rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=a("code"),Pnr=o("model.train()"),Bnr=l(),F(hT.$$.fragment),LXe=l(),vd=a("h2"),pT=a("a"),Y2e=a("span"),F($y.$$.fragment),Nnr=l(),K2e=a("span"),Inr=o("AutoModelForImageClassification"),yXe=l(),Go=a("div"),F(ky.$$.fragment),qnr=l(),Fd=a("p"),jnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cW=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" class method or the "),fW=a("a"),Onr=o("from_config()"),Vnr=o(` class
method.`),Xnr=l(),Sy=a("p"),znr=o("This class cannot be instantiated directly using "),Z2e=a("code"),Qnr=o("__init__()"),Wnr=o(" (throws an error)."),Hnr=l(),bt=a("div"),F(Ry.$$.fragment),Unr=l(),ebe=a("p"),Jnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ynr=l(),Td=a("p"),Knr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Znr=o("not"),esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),osr=o("from_pretrained()"),rsr=o(" to load the model weights."),tsr=l(),F(_T.$$.fragment),asr=l(),lo=a("div"),F(Py.$$.fragment),nsr=l(),rbe=a("p"),ssr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lsr=l(),Wa=a("p"),isr=o("The model class to instantiate is selected based on the "),tbe=a("code"),dsr=o("model_type"),csr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),fsr=o("pretrained_model_name_or_path"),msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),gsr=o("pretrained_model_name_or_path"),hsr=o(":"),psr=l(),ve=a("ul"),uT=a("li"),sbe=a("strong"),_sr=o("beit"),usr=o(" \u2014 "),gW=a("a"),bsr=o("BeitForImageClassification"),vsr=o(" (BEiT model)"),Fsr=l(),bT=a("li"),lbe=a("strong"),Tsr=o("convnext"),Msr=o(" \u2014 "),hW=a("a"),Esr=o("ConvNextForImageClassification"),Csr=o(" (ConvNeXT model)"),wsr=l(),vT=a("li"),ibe=a("strong"),Asr=o("cvt"),Lsr=o(" \u2014 "),pW=a("a"),ysr=o("CvtForImageClassification"),xsr=o(" (CvT model)"),$sr=l(),FT=a("li"),dbe=a("strong"),ksr=o("data2vec-vision"),Ssr=o(" \u2014 "),_W=a("a"),Rsr=o("Data2VecVisionForImageClassification"),Psr=o(" (Data2VecVision model)"),Bsr=l(),Hs=a("li"),cbe=a("strong"),Nsr=o("deit"),Isr=o(" \u2014 "),uW=a("a"),qsr=o("DeiTForImageClassification"),jsr=o(" or "),bW=a("a"),Dsr=o("DeiTForImageClassificationWithTeacher"),Gsr=o(" (DeiT model)"),Osr=l(),TT=a("li"),fbe=a("strong"),Vsr=o("imagegpt"),Xsr=o(" \u2014 "),vW=a("a"),zsr=o("ImageGPTForImageClassification"),Qsr=o(" (ImageGPT model)"),Wsr=l(),Us=a("li"),mbe=a("strong"),Hsr=o("levit"),Usr=o(" \u2014 "),FW=a("a"),Jsr=o("LevitForImageClassification"),Ysr=o(" or "),TW=a("a"),Ksr=o("LevitForImageClassificationWithTeacher"),Zsr=o(" (LeViT model)"),elr=l(),MT=a("li"),gbe=a("strong"),olr=o("mobilevit"),rlr=o(" \u2014 "),MW=a("a"),tlr=o("MobileViTForImageClassification"),alr=o(" (MobileViT model)"),nlr=l(),vt=a("li"),hbe=a("strong"),slr=o("perceiver"),llr=o(" \u2014 "),EW=a("a"),ilr=o("PerceiverForImageClassificationLearned"),dlr=o(" or "),CW=a("a"),clr=o("PerceiverForImageClassificationFourier"),flr=o(" or "),wW=a("a"),mlr=o("PerceiverForImageClassificationConvProcessing"),glr=o(" (Perceiver model)"),hlr=l(),ET=a("li"),pbe=a("strong"),plr=o("poolformer"),_lr=o(" \u2014 "),AW=a("a"),ulr=o("PoolFormerForImageClassification"),blr=o(" (PoolFormer model)"),vlr=l(),CT=a("li"),_be=a("strong"),Flr=o("regnet"),Tlr=o(" \u2014 "),LW=a("a"),Mlr=o("RegNetForImageClassification"),Elr=o(" (RegNet model)"),Clr=l(),wT=a("li"),ube=a("strong"),wlr=o("resnet"),Alr=o(" \u2014 "),yW=a("a"),Llr=o("ResNetForImageClassification"),ylr=o(" (ResNet model)"),xlr=l(),AT=a("li"),bbe=a("strong"),$lr=o("segformer"),klr=o(" \u2014 "),xW=a("a"),Slr=o("SegformerForImageClassification"),Rlr=o(" (SegFormer model)"),Plr=l(),LT=a("li"),vbe=a("strong"),Blr=o("swin"),Nlr=o(" \u2014 "),$W=a("a"),Ilr=o("SwinForImageClassification"),qlr=o(" (Swin Transformer model)"),jlr=l(),yT=a("li"),Fbe=a("strong"),Dlr=o("van"),Glr=o(" \u2014 "),kW=a("a"),Olr=o("VanForImageClassification"),Vlr=o(" (VAN model)"),Xlr=l(),xT=a("li"),Tbe=a("strong"),zlr=o("vit"),Qlr=o(" \u2014 "),SW=a("a"),Wlr=o("ViTForImageClassification"),Hlr=o(" (ViT model)"),Ulr=l(),$T=a("p"),Jlr=o("The model is set in evaluation mode by default using "),Mbe=a("code"),Ylr=o("model.eval()"),Klr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),Zlr=o("model.train()"),eir=l(),F(kT.$$.fragment),xXe=l(),Md=a("h2"),ST=a("a"),Cbe=a("span"),F(By.$$.fragment),oir=l(),wbe=a("span"),rir=o("AutoModelForVision2Seq"),$Xe=l(),Oo=a("div"),F(Ny.$$.fragment),tir=l(),Ed=a("p"),air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=a("a"),nir=o("from_pretrained()"),sir=o(" class method or the "),PW=a("a"),lir=o("from_config()"),iir=o(` class
method.`),dir=l(),Iy=a("p"),cir=o("This class cannot be instantiated directly using "),Abe=a("code"),fir=o("__init__()"),mir=o(" (throws an error)."),gir=l(),Ft=a("div"),F(qy.$$.fragment),hir=l(),Lbe=a("p"),pir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_ir=l(),Cd=a("p"),uir=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),bir=o("not"),vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),Fir=o("from_pretrained()"),Tir=o(" to load the model weights."),Mir=l(),F(RT.$$.fragment),Eir=l(),io=a("div"),F(jy.$$.fragment),Cir=l(),xbe=a("p"),wir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Air=l(),Ha=a("p"),Lir=o("The model class to instantiate is selected based on the "),$be=a("code"),yir=o("model_type"),xir=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),$ir=o("pretrained_model_name_or_path"),kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(":"),Pir=l(),Rbe=a("ul"),PT=a("li"),Pbe=a("strong"),Bir=o("vision-encoder-decoder"),Nir=o(" \u2014 "),NW=a("a"),Iir=o("VisionEncoderDecoderModel"),qir=o(" (Vision Encoder decoder model)"),jir=l(),BT=a("p"),Dir=o("The model is set in evaluation mode by default using "),Bbe=a("code"),Gir=o("model.eval()"),Oir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),Vir=o("model.train()"),Xir=l(),F(NT.$$.fragment),kXe=l(),wd=a("h2"),IT=a("a"),Ibe=a("span"),F(Dy.$$.fragment),zir=l(),qbe=a("span"),Qir=o("AutoModelForVisualQuestionAnswering"),SXe=l(),Vo=a("div"),F(Gy.$$.fragment),Wir=l(),Ad=a("p"),Hir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),IW=a("a"),Uir=o("from_pretrained()"),Jir=o(" class method or the "),qW=a("a"),Yir=o("from_config()"),Kir=o(` class
method.`),Zir=l(),Oy=a("p"),edr=o("This class cannot be instantiated directly using "),jbe=a("code"),odr=o("__init__()"),rdr=o(" (throws an error)."),tdr=l(),Tt=a("div"),F(Vy.$$.fragment),adr=l(),Dbe=a("p"),ndr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),sdr=l(),Ld=a("p"),ldr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),idr=o("not"),ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),cdr=o("from_pretrained()"),fdr=o(" to load the model weights."),mdr=l(),F(qT.$$.fragment),gdr=l(),co=a("div"),F(Xy.$$.fragment),hdr=l(),Obe=a("p"),pdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),_dr=l(),Ua=a("p"),udr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),bdr=o("model_type"),vdr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),Fdr=o("pretrained_model_name_or_path"),Tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Mdr=o("pretrained_model_name_or_path"),Edr=o(":"),Cdr=l(),Qbe=a("ul"),jT=a("li"),Wbe=a("strong"),wdr=o("vilt"),Adr=o(" \u2014 "),DW=a("a"),Ldr=o("ViltForQuestionAnswering"),ydr=o(" (ViLT model)"),xdr=l(),DT=a("p"),$dr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),Rdr=o("model.train()"),Pdr=l(),F(GT.$$.fragment),RXe=l(),yd=a("h2"),OT=a("a"),Jbe=a("span"),F(zy.$$.fragment),Bdr=l(),Ybe=a("span"),Ndr=o("AutoModelForAudioClassification"),PXe=l(),Xo=a("div"),F(Qy.$$.fragment),Idr=l(),xd=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),OW=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),Wy=a("p"),Xdr=o("This class cannot be instantiated directly using "),Kbe=a("code"),zdr=o("__init__()"),Qdr=o(" (throws an error)."),Wdr=l(),Mt=a("div"),F(Hy.$$.fragment),Hdr=l(),Zbe=a("p"),Udr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Jdr=l(),$d=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(VT.$$.fragment),tcr=l(),fo=a("div"),F(Uy.$$.fragment),acr=l(),ove=a("p"),ncr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),scr=l(),Ja=a("p"),lcr=o("The model class to instantiate is selected based on the "),rve=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),Pe=a("ul"),XT=a("li"),nve=a("strong"),pcr=o("data2vec-audio"),_cr=o(" \u2014 "),XW=a("a"),ucr=o("Data2VecAudioForSequenceClassification"),bcr=o(" (Data2VecAudio model)"),vcr=l(),zT=a("li"),sve=a("strong"),Fcr=o("hubert"),Tcr=o(" \u2014 "),zW=a("a"),Mcr=o("HubertForSequenceClassification"),Ecr=o(" (Hubert model)"),Ccr=l(),QT=a("li"),lve=a("strong"),wcr=o("sew"),Acr=o(" \u2014 "),QW=a("a"),Lcr=o("SEWForSequenceClassification"),ycr=o(" (SEW model)"),xcr=l(),WT=a("li"),ive=a("strong"),$cr=o("sew-d"),kcr=o(" \u2014 "),WW=a("a"),Scr=o("SEWDForSequenceClassification"),Rcr=o(" (SEW-D model)"),Pcr=l(),HT=a("li"),dve=a("strong"),Bcr=o("unispeech"),Ncr=o(" \u2014 "),HW=a("a"),Icr=o("UniSpeechForSequenceClassification"),qcr=o(" (UniSpeech model)"),jcr=l(),UT=a("li"),cve=a("strong"),Dcr=o("unispeech-sat"),Gcr=o(" \u2014 "),UW=a("a"),Ocr=o("UniSpeechSatForSequenceClassification"),Vcr=o(" (UniSpeechSat model)"),Xcr=l(),JT=a("li"),fve=a("strong"),zcr=o("wav2vec2"),Qcr=o(" \u2014 "),JW=a("a"),Wcr=o("Wav2Vec2ForSequenceClassification"),Hcr=o(" (Wav2Vec2 model)"),Ucr=l(),YT=a("li"),mve=a("strong"),Jcr=o("wav2vec2-conformer"),Ycr=o(" \u2014 "),YW=a("a"),Kcr=o("Wav2Vec2ConformerForSequenceClassification"),Zcr=o(" (Wav2Vec2-Conformer model)"),efr=l(),KT=a("li"),gve=a("strong"),ofr=o("wavlm"),rfr=o(" \u2014 "),KW=a("a"),tfr=o("WavLMForSequenceClassification"),afr=o(" (WavLM model)"),nfr=l(),ZT=a("p"),sfr=o("The model is set in evaluation mode by default using "),hve=a("code"),lfr=o("model.eval()"),ifr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=a("code"),dfr=o("model.train()"),cfr=l(),F(e8.$$.fragment),BXe=l(),kd=a("h2"),o8=a("a"),_ve=a("span"),F(Jy.$$.fragment),ffr=l(),uve=a("span"),mfr=o("AutoModelForAudioFrameClassification"),NXe=l(),zo=a("div"),F(Yy.$$.fragment),gfr=l(),Sd=a("p"),hfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=a("a"),pfr=o("from_pretrained()"),_fr=o(" class method or the "),eH=a("a"),ufr=o("from_config()"),bfr=o(` class
method.`),vfr=l(),Ky=a("p"),Ffr=o("This class cannot be instantiated directly using "),bve=a("code"),Tfr=o("__init__()"),Mfr=o(" (throws an error)."),Efr=l(),Et=a("div"),F(Zy.$$.fragment),Cfr=l(),vve=a("p"),wfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Afr=l(),Rd=a("p"),Lfr=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),yfr=o("not"),xfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),$fr=o("from_pretrained()"),kfr=o(" to load the model weights."),Sfr=l(),F(r8.$$.fragment),Rfr=l(),mo=a("div"),F(e9.$$.fragment),Pfr=l(),Tve=a("p"),Bfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nfr=l(),Ya=a("p"),Ifr=o("The model class to instantiate is selected based on the "),Mve=a("code"),qfr=o("model_type"),jfr=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),Dfr=o("pretrained_model_name_or_path"),Gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),Ofr=o("pretrained_model_name_or_path"),Vfr=o(":"),Xfr=l(),ot=a("ul"),t8=a("li"),wve=a("strong"),zfr=o("data2vec-audio"),Qfr=o(" \u2014 "),rH=a("a"),Wfr=o("Data2VecAudioForAudioFrameClassification"),Hfr=o(" (Data2VecAudio model)"),Ufr=l(),a8=a("li"),Ave=a("strong"),Jfr=o("unispeech-sat"),Yfr=o(" \u2014 "),tH=a("a"),Kfr=o("UniSpeechSatForAudioFrameClassification"),Zfr=o(" (UniSpeechSat model)"),emr=l(),n8=a("li"),Lve=a("strong"),omr=o("wav2vec2"),rmr=o(" \u2014 "),aH=a("a"),tmr=o("Wav2Vec2ForAudioFrameClassification"),amr=o(" (Wav2Vec2 model)"),nmr=l(),s8=a("li"),yve=a("strong"),smr=o("wav2vec2-conformer"),lmr=o(" \u2014 "),nH=a("a"),imr=o("Wav2Vec2ConformerForAudioFrameClassification"),dmr=o(" (Wav2Vec2-Conformer model)"),cmr=l(),l8=a("li"),xve=a("strong"),fmr=o("wavlm"),mmr=o(" \u2014 "),sH=a("a"),gmr=o("WavLMForAudioFrameClassification"),hmr=o(" (WavLM model)"),pmr=l(),i8=a("p"),_mr=o("The model is set in evaluation mode by default using "),$ve=a("code"),umr=o("model.eval()"),bmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kve=a("code"),vmr=o("model.train()"),Fmr=l(),F(d8.$$.fragment),IXe=l(),Pd=a("h2"),c8=a("a"),Sve=a("span"),F(o9.$$.fragment),Tmr=l(),Rve=a("span"),Mmr=o("AutoModelForCTC"),qXe=l(),Qo=a("div"),F(r9.$$.fragment),Emr=l(),Bd=a("p"),Cmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lH=a("a"),wmr=o("from_pretrained()"),Amr=o(" class method or the "),iH=a("a"),Lmr=o("from_config()"),ymr=o(` class
method.`),xmr=l(),t9=a("p"),$mr=o("This class cannot be instantiated directly using "),Pve=a("code"),kmr=o("__init__()"),Smr=o(" (throws an error)."),Rmr=l(),Ct=a("div"),F(a9.$$.fragment),Pmr=l(),Bve=a("p"),Bmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Nmr=l(),Nd=a("p"),Imr=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),qmr=o("not"),jmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" to load the model weights."),Omr=l(),F(f8.$$.fragment),Vmr=l(),go=a("div"),F(n9.$$.fragment),Xmr=l(),Ive=a("p"),zmr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Qmr=l(),Ka=a("p"),Wmr=o("The model class to instantiate is selected based on the "),qve=a("code"),Hmr=o("model_type"),Umr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),Jmr=o("pretrained_model_name_or_path"),Ymr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(":"),egr=l(),Le=a("ul"),m8=a("li"),Gve=a("strong"),ogr=o("data2vec-audio"),rgr=o(" \u2014 "),cH=a("a"),tgr=o("Data2VecAudioForCTC"),agr=o(" (Data2VecAudio model)"),ngr=l(),g8=a("li"),Ove=a("strong"),sgr=o("hubert"),lgr=o(" \u2014 "),fH=a("a"),igr=o("HubertForCTC"),dgr=o(" (Hubert model)"),cgr=l(),h8=a("li"),Vve=a("strong"),fgr=o("mctct"),mgr=o(" \u2014 "),mH=a("a"),ggr=o("MCTCTForCTC"),hgr=o(" (M-CTC-T model)"),pgr=l(),p8=a("li"),Xve=a("strong"),_gr=o("sew"),ugr=o(" \u2014 "),gH=a("a"),bgr=o("SEWForCTC"),vgr=o(" (SEW model)"),Fgr=l(),_8=a("li"),zve=a("strong"),Tgr=o("sew-d"),Mgr=o(" \u2014 "),hH=a("a"),Egr=o("SEWDForCTC"),Cgr=o(" (SEW-D model)"),wgr=l(),u8=a("li"),Qve=a("strong"),Agr=o("unispeech"),Lgr=o(" \u2014 "),pH=a("a"),ygr=o("UniSpeechForCTC"),xgr=o(" (UniSpeech model)"),$gr=l(),b8=a("li"),Wve=a("strong"),kgr=o("unispeech-sat"),Sgr=o(" \u2014 "),_H=a("a"),Rgr=o("UniSpeechSatForCTC"),Pgr=o(" (UniSpeechSat model)"),Bgr=l(),v8=a("li"),Hve=a("strong"),Ngr=o("wav2vec2"),Igr=o(" \u2014 "),uH=a("a"),qgr=o("Wav2Vec2ForCTC"),jgr=o(" (Wav2Vec2 model)"),Dgr=l(),F8=a("li"),Uve=a("strong"),Ggr=o("wav2vec2-conformer"),Ogr=o(" \u2014 "),bH=a("a"),Vgr=o("Wav2Vec2ConformerForCTC"),Xgr=o(" (Wav2Vec2-Conformer model)"),zgr=l(),T8=a("li"),Jve=a("strong"),Qgr=o("wavlm"),Wgr=o(" \u2014 "),vH=a("a"),Hgr=o("WavLMForCTC"),Ugr=o(" (WavLM model)"),Jgr=l(),M8=a("p"),Ygr=o("The model is set in evaluation mode by default using "),Yve=a("code"),Kgr=o("model.eval()"),Zgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=a("code"),ehr=o("model.train()"),ohr=l(),F(E8.$$.fragment),jXe=l(),Id=a("h2"),C8=a("a"),Zve=a("span"),F(s9.$$.fragment),rhr=l(),e3e=a("span"),thr=o("AutoModelForSpeechSeq2Seq"),DXe=l(),Wo=a("div"),F(l9.$$.fragment),ahr=l(),qd=a("p"),nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FH=a("a"),shr=o("from_pretrained()"),lhr=o(" class method or the "),TH=a("a"),ihr=o("from_config()"),dhr=o(` class
method.`),chr=l(),i9=a("p"),fhr=o("This class cannot be instantiated directly using "),o3e=a("code"),mhr=o("__init__()"),ghr=o(" (throws an error)."),hhr=l(),wt=a("div"),F(d9.$$.fragment),phr=l(),r3e=a("p"),_hr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uhr=l(),jd=a("p"),bhr=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),vhr=o("not"),Fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Thr=o("from_pretrained()"),Mhr=o(" to load the model weights."),Ehr=l(),F(w8.$$.fragment),Chr=l(),ho=a("div"),F(c9.$$.fragment),whr=l(),a3e=a("p"),Ahr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lhr=l(),Za=a("p"),yhr=o("The model class to instantiate is selected based on the "),n3e=a("code"),xhr=o("model_type"),$hr=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),Rhr=o("pretrained_model_name_or_path"),Phr=o(":"),Bhr=l(),f9=a("ul"),A8=a("li"),i3e=a("strong"),Nhr=o("speech-encoder-decoder"),Ihr=o(" \u2014 "),EH=a("a"),qhr=o("SpeechEncoderDecoderModel"),jhr=o(" (Speech Encoder decoder model)"),Dhr=l(),L8=a("li"),d3e=a("strong"),Ghr=o("speech_to_text"),Ohr=o(" \u2014 "),CH=a("a"),Vhr=o("Speech2TextForConditionalGeneration"),Xhr=o(" (Speech2Text model)"),zhr=l(),y8=a("p"),Qhr=o("The model is set in evaluation mode by default using "),c3e=a("code"),Whr=o("model.eval()"),Hhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f3e=a("code"),Uhr=o("model.train()"),Jhr=l(),F(x8.$$.fragment),GXe=l(),Dd=a("h2"),$8=a("a"),m3e=a("span"),F(m9.$$.fragment),Yhr=l(),g3e=a("span"),Khr=o("AutoModelForAudioXVector"),OXe=l(),Ho=a("div"),F(g9.$$.fragment),Zhr=l(),Gd=a("p"),epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wH=a("a"),opr=o("from_pretrained()"),rpr=o(" class method or the "),AH=a("a"),tpr=o("from_config()"),apr=o(` class
method.`),npr=l(),h9=a("p"),spr=o("This class cannot be instantiated directly using "),h3e=a("code"),lpr=o("__init__()"),ipr=o(" (throws an error)."),dpr=l(),At=a("div"),F(p9.$$.fragment),cpr=l(),p3e=a("p"),fpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mpr=l(),Od=a("p"),gpr=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),hpr=o("not"),ppr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),_pr=o("from_pretrained()"),upr=o(" to load the model weights."),bpr=l(),F(k8.$$.fragment),vpr=l(),po=a("div"),F(_9.$$.fragment),Fpr=l(),u3e=a("p"),Tpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mpr=l(),en=a("p"),Epr=o("The model class to instantiate is selected based on the "),b3e=a("code"),Cpr=o("model_type"),wpr=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),Apr=o("pretrained_model_name_or_path"),Lpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),ypr=o("pretrained_model_name_or_path"),xpr=o(":"),$pr=l(),rt=a("ul"),S8=a("li"),T3e=a("strong"),kpr=o("data2vec-audio"),Spr=o(" \u2014 "),yH=a("a"),Rpr=o("Data2VecAudioForXVector"),Ppr=o(" (Data2VecAudio model)"),Bpr=l(),R8=a("li"),M3e=a("strong"),Npr=o("unispeech-sat"),Ipr=o(" \u2014 "),xH=a("a"),qpr=o("UniSpeechSatForXVector"),jpr=o(" (UniSpeechSat model)"),Dpr=l(),P8=a("li"),E3e=a("strong"),Gpr=o("wav2vec2"),Opr=o(" \u2014 "),$H=a("a"),Vpr=o("Wav2Vec2ForXVector"),Xpr=o(" (Wav2Vec2 model)"),zpr=l(),B8=a("li"),C3e=a("strong"),Qpr=o("wav2vec2-conformer"),Wpr=o(" \u2014 "),kH=a("a"),Hpr=o("Wav2Vec2ConformerForXVector"),Upr=o(" (Wav2Vec2-Conformer model)"),Jpr=l(),N8=a("li"),w3e=a("strong"),Ypr=o("wavlm"),Kpr=o(" \u2014 "),SH=a("a"),Zpr=o("WavLMForXVector"),e_r=o(" (WavLM model)"),o_r=l(),I8=a("p"),r_r=o("The model is set in evaluation mode by default using "),A3e=a("code"),t_r=o("model.eval()"),a_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L3e=a("code"),n_r=o("model.train()"),s_r=l(),F(q8.$$.fragment),VXe=l(),Vd=a("h2"),j8=a("a"),y3e=a("span"),F(u9.$$.fragment),l_r=l(),x3e=a("span"),i_r=o("AutoModelForMaskedImageModeling"),XXe=l(),Uo=a("div"),F(b9.$$.fragment),d_r=l(),Xd=a("p"),c_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RH=a("a"),f_r=o("from_pretrained()"),m_r=o(" class method or the "),PH=a("a"),g_r=o("from_config()"),h_r=o(` class
method.`),p_r=l(),v9=a("p"),__r=o("This class cannot be instantiated directly using "),$3e=a("code"),u_r=o("__init__()"),b_r=o(" (throws an error)."),v_r=l(),Lt=a("div"),F(F9.$$.fragment),F_r=l(),k3e=a("p"),T_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),M_r=l(),zd=a("p"),E_r=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),C_r=o("not"),w_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),A_r=o("from_pretrained()"),L_r=o(" to load the model weights."),y_r=l(),F(D8.$$.fragment),x_r=l(),_o=a("div"),F(T9.$$.fragment),$_r=l(),R3e=a("p"),k_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),S_r=l(),on=a("p"),R_r=o("The model class to instantiate is selected based on the "),P3e=a("code"),P_r=o("model_type"),B_r=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),N_r=o("pretrained_model_name_or_path"),I_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=a("code"),q_r=o("pretrained_model_name_or_path"),j_r=o(":"),D_r=l(),Qd=a("ul"),G8=a("li"),I3e=a("strong"),G_r=o("deit"),O_r=o(" \u2014 "),NH=a("a"),V_r=o("DeiTForMaskedImageModeling"),X_r=o(" (DeiT model)"),z_r=l(),O8=a("li"),q3e=a("strong"),Q_r=o("swin"),W_r=o(" \u2014 "),IH=a("a"),H_r=o("SwinForMaskedImageModeling"),U_r=o(" (Swin Transformer model)"),J_r=l(),V8=a("li"),j3e=a("strong"),Y_r=o("vit"),K_r=o(" \u2014 "),qH=a("a"),Z_r=o("ViTForMaskedImageModeling"),eur=o(" (ViT model)"),our=l(),X8=a("p"),rur=o("The model is set in evaluation mode by default using "),D3e=a("code"),tur=o("model.eval()"),aur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G3e=a("code"),nur=o("model.train()"),sur=l(),F(z8.$$.fragment),zXe=l(),Wd=a("h2"),Q8=a("a"),O3e=a("span"),F(M9.$$.fragment),lur=l(),V3e=a("span"),iur=o("AutoModelForObjectDetection"),QXe=l(),Jo=a("div"),F(E9.$$.fragment),dur=l(),Hd=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jH=a("a"),fur=o("from_pretrained()"),mur=o(" class method or the "),DH=a("a"),gur=o("from_config()"),hur=o(` class
method.`),pur=l(),C9=a("p"),_ur=o("This class cannot be instantiated directly using "),X3e=a("code"),uur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),yt=a("div"),F(w9.$$.fragment),Fur=l(),z3e=a("p"),Tur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mur=l(),Ud=a("p"),Eur=o(`Note:
Loading a model from its configuration file does `),Q3e=a("strong"),Cur=o("not"),wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),Aur=o("from_pretrained()"),Lur=o(" to load the model weights."),yur=l(),F(W8.$$.fragment),xur=l(),uo=a("div"),F(A9.$$.fragment),$ur=l(),W3e=a("p"),kur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Sur=l(),rn=a("p"),Rur=o("The model class to instantiate is selected based on the "),H3e=a("code"),Pur=o("model_type"),Bur=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),Nur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=a("code"),qur=o("pretrained_model_name_or_path"),jur=o(":"),Dur=l(),L9=a("ul"),H8=a("li"),Y3e=a("strong"),Gur=o("detr"),Our=o(" \u2014 "),OH=a("a"),Vur=o("DetrForObjectDetection"),Xur=o(" (DETR model)"),zur=l(),U8=a("li"),K3e=a("strong"),Qur=o("yolos"),Wur=o(" \u2014 "),VH=a("a"),Hur=o("YolosForObjectDetection"),Uur=o(" (YOLOS model)"),Jur=l(),J8=a("p"),Yur=o("The model is set in evaluation mode by default using "),Z3e=a("code"),Kur=o("model.eval()"),Zur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=a("code"),e1r=o("model.train()"),o1r=l(),F(Y8.$$.fragment),WXe=l(),Jd=a("h2"),K8=a("a"),oFe=a("span"),F(y9.$$.fragment),r1r=l(),rFe=a("span"),t1r=o("AutoModelForImageSegmentation"),HXe=l(),Yo=a("div"),F(x9.$$.fragment),a1r=l(),Yd=a("p"),n1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XH=a("a"),s1r=o("from_pretrained()"),l1r=o(" class method or the "),zH=a("a"),i1r=o("from_config()"),d1r=o(` class
method.`),c1r=l(),$9=a("p"),f1r=o("This class cannot be instantiated directly using "),tFe=a("code"),m1r=o("__init__()"),g1r=o(" (throws an error)."),h1r=l(),xt=a("div"),F(k9.$$.fragment),p1r=l(),aFe=a("p"),_1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),u1r=l(),Kd=a("p"),b1r=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),v1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),T1r=o("from_pretrained()"),M1r=o(" to load the model weights."),E1r=l(),F(Z8.$$.fragment),C1r=l(),bo=a("div"),F(S9.$$.fragment),w1r=l(),sFe=a("p"),A1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),L1r=l(),tn=a("p"),y1r=o("The model class to instantiate is selected based on the "),lFe=a("code"),x1r=o("model_type"),$1r=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),R1r=o("pretrained_model_name_or_path"),P1r=o(":"),B1r=l(),cFe=a("ul"),eM=a("li"),fFe=a("strong"),N1r=o("detr"),I1r=o(" \u2014 "),WH=a("a"),q1r=o("DetrForSegmentation"),j1r=o(" (DETR model)"),D1r=l(),oM=a("p"),G1r=o("The model is set in evaluation mode by default using "),mFe=a("code"),O1r=o("model.eval()"),V1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=a("code"),X1r=o("model.train()"),z1r=l(),F(rM.$$.fragment),UXe=l(),Zd=a("h2"),tM=a("a"),hFe=a("span"),F(R9.$$.fragment),Q1r=l(),pFe=a("span"),W1r=o("AutoModelForSemanticSegmentation"),JXe=l(),Ko=a("div"),F(P9.$$.fragment),H1r=l(),ec=a("p"),U1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HH=a("a"),J1r=o("from_pretrained()"),Y1r=o(" class method or the "),UH=a("a"),K1r=o("from_config()"),Z1r=o(` class
method.`),e2r=l(),B9=a("p"),o2r=o("This class cannot be instantiated directly using "),_Fe=a("code"),r2r=o("__init__()"),t2r=o(" (throws an error)."),a2r=l(),$t=a("div"),F(N9.$$.fragment),n2r=l(),uFe=a("p"),s2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),l2r=l(),oc=a("p"),i2r=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),d2r=o("not"),c2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),f2r=o("from_pretrained()"),m2r=o(" to load the model weights."),g2r=l(),F(aM.$$.fragment),h2r=l(),vo=a("div"),F(I9.$$.fragment),p2r=l(),vFe=a("p"),_2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),u2r=l(),an=a("p"),b2r=o("The model class to instantiate is selected based on the "),FFe=a("code"),v2r=o("model_type"),F2r=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),T2r=o("pretrained_model_name_or_path"),M2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(":"),w2r=l(),tt=a("ul"),nM=a("li"),EFe=a("strong"),A2r=o("beit"),L2r=o(" \u2014 "),YH=a("a"),y2r=o("BeitForSemanticSegmentation"),x2r=o(" (BEiT model)"),$2r=l(),sM=a("li"),CFe=a("strong"),k2r=o("data2vec-vision"),S2r=o(" \u2014 "),KH=a("a"),R2r=o("Data2VecVisionForSemanticSegmentation"),P2r=o(" (Data2VecVision model)"),B2r=l(),lM=a("li"),wFe=a("strong"),N2r=o("dpt"),I2r=o(" \u2014 "),ZH=a("a"),q2r=o("DPTForSemanticSegmentation"),j2r=o(" (DPT model)"),D2r=l(),iM=a("li"),AFe=a("strong"),G2r=o("mobilevit"),O2r=o(" \u2014 "),eU=a("a"),V2r=o("MobileViTForSemanticSegmentation"),X2r=o(" (MobileViT model)"),z2r=l(),dM=a("li"),LFe=a("strong"),Q2r=o("segformer"),W2r=o(" \u2014 "),oU=a("a"),H2r=o("SegformerForSemanticSegmentation"),U2r=o(" (SegFormer model)"),J2r=l(),cM=a("p"),Y2r=o("The model is set in evaluation mode by default using "),yFe=a("code"),K2r=o("model.eval()"),Z2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=a("code"),ebr=o("model.train()"),obr=l(),F(fM.$$.fragment),YXe=l(),rc=a("h2"),mM=a("a"),$Fe=a("span"),F(q9.$$.fragment),rbr=l(),kFe=a("span"),tbr=o("AutoModelForInstanceSegmentation"),KXe=l(),Zo=a("div"),F(j9.$$.fragment),abr=l(),tc=a("p"),nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rU=a("a"),sbr=o("from_pretrained()"),lbr=o(" class method or the "),tU=a("a"),ibr=o("from_config()"),dbr=o(` class
method.`),cbr=l(),D9=a("p"),fbr=o("This class cannot be instantiated directly using "),SFe=a("code"),mbr=o("__init__()"),gbr=o(" (throws an error)."),hbr=l(),kt=a("div"),F(G9.$$.fragment),pbr=l(),RFe=a("p"),_br=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ubr=l(),ac=a("p"),bbr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),vbr=o("not"),Fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),Tbr=o("from_pretrained()"),Mbr=o(" to load the model weights."),Ebr=l(),F(gM.$$.fragment),Cbr=l(),Fo=a("div"),F(O9.$$.fragment),wbr=l(),BFe=a("p"),Abr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Lbr=l(),nn=a("p"),ybr=o("The model class to instantiate is selected based on the "),NFe=a("code"),xbr=o("model_type"),$br=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),Rbr=o("pretrained_model_name_or_path"),Pbr=o(":"),Bbr=l(),jFe=a("ul"),hM=a("li"),DFe=a("strong"),Nbr=o("maskformer"),Ibr=o(" \u2014 "),nU=a("a"),qbr=o("MaskFormerForInstanceSegmentation"),jbr=o(" (MaskFormer model)"),Dbr=l(),pM=a("p"),Gbr=o("The model is set in evaluation mode by default using "),GFe=a("code"),Obr=o("model.eval()"),Vbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OFe=a("code"),Xbr=o("model.train()"),zbr=l(),F(_M.$$.fragment),ZXe=l(),nc=a("h2"),uM=a("a"),VFe=a("span"),F(V9.$$.fragment),Qbr=l(),XFe=a("span"),Wbr=o("TFAutoModel"),eze=l(),er=a("div"),F(X9.$$.fragment),Hbr=l(),sc=a("p"),Ubr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sU=a("a"),Jbr=o("from_pretrained()"),Ybr=o(" class method or the "),lU=a("a"),Kbr=o("from_config()"),Zbr=o(` class
method.`),evr=l(),z9=a("p"),ovr=o("This class cannot be instantiated directly using "),zFe=a("code"),rvr=o("__init__()"),tvr=o(" (throws an error)."),avr=l(),St=a("div"),F(Q9.$$.fragment),nvr=l(),QFe=a("p"),svr=o("Instantiates one of the base model classes of the library from a configuration."),lvr=l(),lc=a("p"),ivr=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),dvr=o("not"),cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),fvr=o("from_pretrained()"),mvr=o(" to load the model weights."),gvr=l(),F(bM.$$.fragment),hvr=l(),xr=a("div"),F(W9.$$.fragment),pvr=l(),HFe=a("p"),_vr=o("Instantiate one of the base model classes of the library from a pretrained model."),uvr=l(),sn=a("p"),bvr=o("The model class to instantiate is selected based on the "),UFe=a("code"),vvr=o("model_type"),Fvr=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),Tvr=o("pretrained_model_name_or_path"),Mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),Evr=o("pretrained_model_name_or_path"),Cvr=o(":"),wvr=l(),j=a("ul"),vM=a("li"),KFe=a("strong"),Avr=o("albert"),Lvr=o(" \u2014 "),dU=a("a"),yvr=o("TFAlbertModel"),xvr=o(" (ALBERT model)"),$vr=l(),FM=a("li"),ZFe=a("strong"),kvr=o("bart"),Svr=o(" \u2014 "),cU=a("a"),Rvr=o("TFBartModel"),Pvr=o(" (BART model)"),Bvr=l(),TM=a("li"),eTe=a("strong"),Nvr=o("bert"),Ivr=o(" \u2014 "),fU=a("a"),qvr=o("TFBertModel"),jvr=o(" (BERT model)"),Dvr=l(),MM=a("li"),oTe=a("strong"),Gvr=o("blenderbot"),Ovr=o(" \u2014 "),mU=a("a"),Vvr=o("TFBlenderbotModel"),Xvr=o(" (Blenderbot model)"),zvr=l(),EM=a("li"),rTe=a("strong"),Qvr=o("blenderbot-small"),Wvr=o(" \u2014 "),gU=a("a"),Hvr=o("TFBlenderbotSmallModel"),Uvr=o(" (BlenderbotSmall model)"),Jvr=l(),CM=a("li"),tTe=a("strong"),Yvr=o("camembert"),Kvr=o(" \u2014 "),hU=a("a"),Zvr=o("TFCamembertModel"),e3r=o(" (CamemBERT model)"),o3r=l(),wM=a("li"),aTe=a("strong"),r3r=o("clip"),t3r=o(" \u2014 "),pU=a("a"),a3r=o("TFCLIPModel"),n3r=o(" (CLIP model)"),s3r=l(),AM=a("li"),nTe=a("strong"),l3r=o("convbert"),i3r=o(" \u2014 "),_U=a("a"),d3r=o("TFConvBertModel"),c3r=o(" (ConvBERT model)"),f3r=l(),LM=a("li"),sTe=a("strong"),m3r=o("convnext"),g3r=o(" \u2014 "),uU=a("a"),h3r=o("TFConvNextModel"),p3r=o(" (ConvNeXT model)"),_3r=l(),yM=a("li"),lTe=a("strong"),u3r=o("ctrl"),b3r=o(" \u2014 "),bU=a("a"),v3r=o("TFCTRLModel"),F3r=o(" (CTRL model)"),T3r=l(),xM=a("li"),iTe=a("strong"),M3r=o("data2vec-vision"),E3r=o(" \u2014 "),vU=a("a"),C3r=o("TFData2VecVisionModel"),w3r=o(" (Data2VecVision model)"),A3r=l(),$M=a("li"),dTe=a("strong"),L3r=o("deberta"),y3r=o(" \u2014 "),FU=a("a"),x3r=o("TFDebertaModel"),$3r=o(" (DeBERTa model)"),k3r=l(),kM=a("li"),cTe=a("strong"),S3r=o("deberta-v2"),R3r=o(" \u2014 "),TU=a("a"),P3r=o("TFDebertaV2Model"),B3r=o(" (DeBERTa-v2 model)"),N3r=l(),SM=a("li"),fTe=a("strong"),I3r=o("distilbert"),q3r=o(" \u2014 "),MU=a("a"),j3r=o("TFDistilBertModel"),D3r=o(" (DistilBERT model)"),G3r=l(),RM=a("li"),mTe=a("strong"),O3r=o("dpr"),V3r=o(" \u2014 "),EU=a("a"),X3r=o("TFDPRQuestionEncoder"),z3r=o(" (DPR model)"),Q3r=l(),PM=a("li"),gTe=a("strong"),W3r=o("electra"),H3r=o(" \u2014 "),CU=a("a"),U3r=o("TFElectraModel"),J3r=o(" (ELECTRA model)"),Y3r=l(),BM=a("li"),hTe=a("strong"),K3r=o("flaubert"),Z3r=o(" \u2014 "),wU=a("a"),eFr=o("TFFlaubertModel"),oFr=o(" (FlauBERT model)"),rFr=l(),Js=a("li"),pTe=a("strong"),tFr=o("funnel"),aFr=o(" \u2014 "),AU=a("a"),nFr=o("TFFunnelModel"),sFr=o(" or "),LU=a("a"),lFr=o("TFFunnelBaseModel"),iFr=o(" (Funnel Transformer model)"),dFr=l(),NM=a("li"),_Te=a("strong"),cFr=o("gpt2"),fFr=o(" \u2014 "),yU=a("a"),mFr=o("TFGPT2Model"),gFr=o(" (OpenAI GPT-2 model)"),hFr=l(),IM=a("li"),uTe=a("strong"),pFr=o("gptj"),_Fr=o(" \u2014 "),xU=a("a"),uFr=o("TFGPTJModel"),bFr=o(" (GPT-J model)"),vFr=l(),qM=a("li"),bTe=a("strong"),FFr=o("hubert"),TFr=o(" \u2014 "),$U=a("a"),MFr=o("TFHubertModel"),EFr=o(" (Hubert model)"),CFr=l(),jM=a("li"),vTe=a("strong"),wFr=o("layoutlm"),AFr=o(" \u2014 "),kU=a("a"),LFr=o("TFLayoutLMModel"),yFr=o(" (LayoutLM model)"),xFr=l(),DM=a("li"),FTe=a("strong"),$Fr=o("led"),kFr=o(" \u2014 "),SU=a("a"),SFr=o("TFLEDModel"),RFr=o(" (LED model)"),PFr=l(),GM=a("li"),TTe=a("strong"),BFr=o("longformer"),NFr=o(" \u2014 "),RU=a("a"),IFr=o("TFLongformerModel"),qFr=o(" (Longformer model)"),jFr=l(),OM=a("li"),MTe=a("strong"),DFr=o("lxmert"),GFr=o(" \u2014 "),PU=a("a"),OFr=o("TFLxmertModel"),VFr=o(" (LXMERT model)"),XFr=l(),VM=a("li"),ETe=a("strong"),zFr=o("marian"),QFr=o(" \u2014 "),BU=a("a"),WFr=o("TFMarianModel"),HFr=o(" (Marian model)"),UFr=l(),XM=a("li"),CTe=a("strong"),JFr=o("mbart"),YFr=o(" \u2014 "),NU=a("a"),KFr=o("TFMBartModel"),ZFr=o(" (mBART model)"),eTr=l(),zM=a("li"),wTe=a("strong"),oTr=o("mobilebert"),rTr=o(" \u2014 "),IU=a("a"),tTr=o("TFMobileBertModel"),aTr=o(" (MobileBERT model)"),nTr=l(),QM=a("li"),ATe=a("strong"),sTr=o("mpnet"),lTr=o(" \u2014 "),qU=a("a"),iTr=o("TFMPNetModel"),dTr=o(" (MPNet model)"),cTr=l(),WM=a("li"),LTe=a("strong"),fTr=o("mt5"),mTr=o(" \u2014 "),jU=a("a"),gTr=o("TFMT5Model"),hTr=o(" (MT5 model)"),pTr=l(),HM=a("li"),yTe=a("strong"),_Tr=o("openai-gpt"),uTr=o(" \u2014 "),DU=a("a"),bTr=o("TFOpenAIGPTModel"),vTr=o(" (OpenAI GPT model)"),FTr=l(),UM=a("li"),xTe=a("strong"),TTr=o("opt"),MTr=o(" \u2014 "),GU=a("a"),ETr=o("TFOPTModel"),CTr=o(" (OPT model)"),wTr=l(),JM=a("li"),$Te=a("strong"),ATr=o("pegasus"),LTr=o(" \u2014 "),OU=a("a"),yTr=o("TFPegasusModel"),xTr=o(" (Pegasus model)"),$Tr=l(),YM=a("li"),kTe=a("strong"),kTr=o("regnet"),STr=o(" \u2014 "),VU=a("a"),RTr=o("TFRegNetModel"),PTr=o(" (RegNet model)"),BTr=l(),KM=a("li"),STe=a("strong"),NTr=o("rembert"),ITr=o(" \u2014 "),XU=a("a"),qTr=o("TFRemBertModel"),jTr=o(" (RemBERT model)"),DTr=l(),ZM=a("li"),RTe=a("strong"),GTr=o("resnet"),OTr=o(" \u2014 "),zU=a("a"),VTr=o("TFResNetModel"),XTr=o(" (ResNet model)"),zTr=l(),e4=a("li"),PTe=a("strong"),QTr=o("roberta"),WTr=o(" \u2014 "),QU=a("a"),HTr=o("TFRobertaModel"),UTr=o(" (RoBERTa model)"),JTr=l(),o4=a("li"),BTe=a("strong"),YTr=o("roformer"),KTr=o(" \u2014 "),WU=a("a"),ZTr=o("TFRoFormerModel"),e8r=o(" (RoFormer model)"),o8r=l(),r4=a("li"),NTe=a("strong"),r8r=o("speech_to_text"),t8r=o(" \u2014 "),HU=a("a"),a8r=o("TFSpeech2TextModel"),n8r=o(" (Speech2Text model)"),s8r=l(),t4=a("li"),ITe=a("strong"),l8r=o("swin"),i8r=o(" \u2014 "),UU=a("a"),d8r=o("TFSwinModel"),c8r=o(" (Swin Transformer model)"),f8r=l(),a4=a("li"),qTe=a("strong"),m8r=o("t5"),g8r=o(" \u2014 "),JU=a("a"),h8r=o("TFT5Model"),p8r=o(" (T5 model)"),_8r=l(),n4=a("li"),jTe=a("strong"),u8r=o("tapas"),b8r=o(" \u2014 "),YU=a("a"),v8r=o("TFTapasModel"),F8r=o(" (TAPAS model)"),T8r=l(),s4=a("li"),DTe=a("strong"),M8r=o("transfo-xl"),E8r=o(" \u2014 "),KU=a("a"),C8r=o("TFTransfoXLModel"),w8r=o(" (Transformer-XL model)"),A8r=l(),l4=a("li"),GTe=a("strong"),L8r=o("vit"),y8r=o(" \u2014 "),ZU=a("a"),x8r=o("TFViTModel"),$8r=o(" (ViT model)"),k8r=l(),i4=a("li"),OTe=a("strong"),S8r=o("vit_mae"),R8r=o(" \u2014 "),eJ=a("a"),P8r=o("TFViTMAEModel"),B8r=o(" (ViTMAE model)"),N8r=l(),d4=a("li"),VTe=a("strong"),I8r=o("wav2vec2"),q8r=o(" \u2014 "),oJ=a("a"),j8r=o("TFWav2Vec2Model"),D8r=o(" (Wav2Vec2 model)"),G8r=l(),c4=a("li"),XTe=a("strong"),O8r=o("xlm"),V8r=o(" \u2014 "),rJ=a("a"),X8r=o("TFXLMModel"),z8r=o(" (XLM model)"),Q8r=l(),f4=a("li"),zTe=a("strong"),W8r=o("xlm-roberta"),H8r=o(" \u2014 "),tJ=a("a"),U8r=o("TFXLMRobertaModel"),J8r=o(" (XLM-RoBERTa model)"),Y8r=l(),m4=a("li"),QTe=a("strong"),K8r=o("xlnet"),Z8r=o(" \u2014 "),aJ=a("a"),eMr=o("TFXLNetModel"),oMr=o(" (XLNet model)"),rMr=l(),F(g4.$$.fragment),oze=l(),ic=a("h2"),h4=a("a"),WTe=a("span"),F(H9.$$.fragment),tMr=l(),HTe=a("span"),aMr=o("TFAutoModelForPreTraining"),rze=l(),or=a("div"),F(U9.$$.fragment),nMr=l(),dc=a("p"),sMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nJ=a("a"),lMr=o("from_pretrained()"),iMr=o(" class method or the "),sJ=a("a"),dMr=o("from_config()"),cMr=o(` class
method.`),fMr=l(),J9=a("p"),mMr=o("This class cannot be instantiated directly using "),UTe=a("code"),gMr=o("__init__()"),hMr=o(" (throws an error)."),pMr=l(),Rt=a("div"),F(Y9.$$.fragment),_Mr=l(),JTe=a("p"),uMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bMr=l(),cc=a("p"),vMr=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),FMr=o("not"),TMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),MMr=o("from_pretrained()"),EMr=o(" to load the model weights."),CMr=l(),F(p4.$$.fragment),wMr=l(),$r=a("div"),F(K9.$$.fragment),AMr=l(),KTe=a("p"),LMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yMr=l(),ln=a("p"),xMr=o("The model class to instantiate is selected based on the "),ZTe=a("code"),$Mr=o("model_type"),kMr=o(` property of the config object (either
passed as an argument or loaded from `),e8e=a("code"),SMr=o("pretrained_model_name_or_path"),RMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o8e=a("code"),PMr=o("pretrained_model_name_or_path"),BMr=o(":"),NMr=l(),se=a("ul"),_4=a("li"),r8e=a("strong"),IMr=o("albert"),qMr=o(" \u2014 "),iJ=a("a"),jMr=o("TFAlbertForPreTraining"),DMr=o(" (ALBERT model)"),GMr=l(),u4=a("li"),t8e=a("strong"),OMr=o("bart"),VMr=o(" \u2014 "),dJ=a("a"),XMr=o("TFBartForConditionalGeneration"),zMr=o(" (BART model)"),QMr=l(),b4=a("li"),a8e=a("strong"),WMr=o("bert"),HMr=o(" \u2014 "),cJ=a("a"),UMr=o("TFBertForPreTraining"),JMr=o(" (BERT model)"),YMr=l(),v4=a("li"),n8e=a("strong"),KMr=o("camembert"),ZMr=o(" \u2014 "),fJ=a("a"),e4r=o("TFCamembertForMaskedLM"),o4r=o(" (CamemBERT model)"),r4r=l(),F4=a("li"),s8e=a("strong"),t4r=o("ctrl"),a4r=o(" \u2014 "),mJ=a("a"),n4r=o("TFCTRLLMHeadModel"),s4r=o(" (CTRL model)"),l4r=l(),T4=a("li"),l8e=a("strong"),i4r=o("distilbert"),d4r=o(" \u2014 "),gJ=a("a"),c4r=o("TFDistilBertForMaskedLM"),f4r=o(" (DistilBERT model)"),m4r=l(),M4=a("li"),i8e=a("strong"),g4r=o("electra"),h4r=o(" \u2014 "),hJ=a("a"),p4r=o("TFElectraForPreTraining"),_4r=o(" (ELECTRA model)"),u4r=l(),E4=a("li"),d8e=a("strong"),b4r=o("flaubert"),v4r=o(" \u2014 "),pJ=a("a"),F4r=o("TFFlaubertWithLMHeadModel"),T4r=o(" (FlauBERT model)"),M4r=l(),C4=a("li"),c8e=a("strong"),E4r=o("funnel"),C4r=o(" \u2014 "),_J=a("a"),w4r=o("TFFunnelForPreTraining"),A4r=o(" (Funnel Transformer model)"),L4r=l(),w4=a("li"),f8e=a("strong"),y4r=o("gpt2"),x4r=o(" \u2014 "),uJ=a("a"),$4r=o("TFGPT2LMHeadModel"),k4r=o(" (OpenAI GPT-2 model)"),S4r=l(),A4=a("li"),m8e=a("strong"),R4r=o("layoutlm"),P4r=o(" \u2014 "),bJ=a("a"),B4r=o("TFLayoutLMForMaskedLM"),N4r=o(" (LayoutLM model)"),I4r=l(),L4=a("li"),g8e=a("strong"),q4r=o("lxmert"),j4r=o(" \u2014 "),vJ=a("a"),D4r=o("TFLxmertForPreTraining"),G4r=o(" (LXMERT model)"),O4r=l(),y4=a("li"),h8e=a("strong"),V4r=o("mobilebert"),X4r=o(" \u2014 "),FJ=a("a"),z4r=o("TFMobileBertForPreTraining"),Q4r=o(" (MobileBERT model)"),W4r=l(),x4=a("li"),p8e=a("strong"),H4r=o("mpnet"),U4r=o(" \u2014 "),TJ=a("a"),J4r=o("TFMPNetForMaskedLM"),Y4r=o(" (MPNet model)"),K4r=l(),$4=a("li"),_8e=a("strong"),Z4r=o("openai-gpt"),eEr=o(" \u2014 "),MJ=a("a"),oEr=o("TFOpenAIGPTLMHeadModel"),rEr=o(" (OpenAI GPT model)"),tEr=l(),k4=a("li"),u8e=a("strong"),aEr=o("roberta"),nEr=o(" \u2014 "),EJ=a("a"),sEr=o("TFRobertaForMaskedLM"),lEr=o(" (RoBERTa model)"),iEr=l(),S4=a("li"),b8e=a("strong"),dEr=o("t5"),cEr=o(" \u2014 "),CJ=a("a"),fEr=o("TFT5ForConditionalGeneration"),mEr=o(" (T5 model)"),gEr=l(),R4=a("li"),v8e=a("strong"),hEr=o("tapas"),pEr=o(" \u2014 "),wJ=a("a"),_Er=o("TFTapasForMaskedLM"),uEr=o(" (TAPAS model)"),bEr=l(),P4=a("li"),F8e=a("strong"),vEr=o("transfo-xl"),FEr=o(" \u2014 "),AJ=a("a"),TEr=o("TFTransfoXLLMHeadModel"),MEr=o(" (Transformer-XL model)"),EEr=l(),B4=a("li"),T8e=a("strong"),CEr=o("vit_mae"),wEr=o(" \u2014 "),LJ=a("a"),AEr=o("TFViTMAEForPreTraining"),LEr=o(" (ViTMAE model)"),yEr=l(),N4=a("li"),M8e=a("strong"),xEr=o("xlm"),$Er=o(" \u2014 "),yJ=a("a"),kEr=o("TFXLMWithLMHeadModel"),SEr=o(" (XLM model)"),REr=l(),I4=a("li"),E8e=a("strong"),PEr=o("xlm-roberta"),BEr=o(" \u2014 "),xJ=a("a"),NEr=o("TFXLMRobertaForMaskedLM"),IEr=o(" (XLM-RoBERTa model)"),qEr=l(),q4=a("li"),C8e=a("strong"),jEr=o("xlnet"),DEr=o(" \u2014 "),$J=a("a"),GEr=o("TFXLNetLMHeadModel"),OEr=o(" (XLNet model)"),VEr=l(),F(j4.$$.fragment),tze=l(),fc=a("h2"),D4=a("a"),w8e=a("span"),F(Z9.$$.fragment),XEr=l(),A8e=a("span"),zEr=o("TFAutoModelForCausalLM"),aze=l(),rr=a("div"),F(ex.$$.fragment),QEr=l(),mc=a("p"),WEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kJ=a("a"),HEr=o("from_pretrained()"),UEr=o(" class method or the "),SJ=a("a"),JEr=o("from_config()"),YEr=o(` class
method.`),KEr=l(),ox=a("p"),ZEr=o("This class cannot be instantiated directly using "),L8e=a("code"),eCr=o("__init__()"),oCr=o(" (throws an error)."),rCr=l(),Pt=a("div"),F(rx.$$.fragment),tCr=l(),y8e=a("p"),aCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nCr=l(),gc=a("p"),sCr=o(`Note:
Loading a model from its configuration file does `),x8e=a("strong"),lCr=o("not"),iCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),dCr=o("from_pretrained()"),cCr=o(" to load the model weights."),fCr=l(),F(G4.$$.fragment),mCr=l(),kr=a("div"),F(tx.$$.fragment),gCr=l(),$8e=a("p"),hCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pCr=l(),dn=a("p"),_Cr=o("The model class to instantiate is selected based on the "),k8e=a("code"),uCr=o("model_type"),bCr=o(` property of the config object (either
passed as an argument or loaded from `),S8e=a("code"),vCr=o("pretrained_model_name_or_path"),FCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=a("code"),TCr=o("pretrained_model_name_or_path"),MCr=o(":"),ECr=l(),Me=a("ul"),O4=a("li"),P8e=a("strong"),CCr=o("bert"),wCr=o(" \u2014 "),PJ=a("a"),ACr=o("TFBertLMHeadModel"),LCr=o(" (BERT model)"),yCr=l(),V4=a("li"),B8e=a("strong"),xCr=o("camembert"),$Cr=o(" \u2014 "),BJ=a("a"),kCr=o("TFCamembertForCausalLM"),SCr=o(" (CamemBERT model)"),RCr=l(),X4=a("li"),N8e=a("strong"),PCr=o("ctrl"),BCr=o(" \u2014 "),NJ=a("a"),NCr=o("TFCTRLLMHeadModel"),ICr=o(" (CTRL model)"),qCr=l(),z4=a("li"),I8e=a("strong"),jCr=o("gpt2"),DCr=o(" \u2014 "),IJ=a("a"),GCr=o("TFGPT2LMHeadModel"),OCr=o(" (OpenAI GPT-2 model)"),VCr=l(),Q4=a("li"),q8e=a("strong"),XCr=o("gptj"),zCr=o(" \u2014 "),qJ=a("a"),QCr=o("TFGPTJForCausalLM"),WCr=o(" (GPT-J model)"),HCr=l(),W4=a("li"),j8e=a("strong"),UCr=o("openai-gpt"),JCr=o(" \u2014 "),jJ=a("a"),YCr=o("TFOpenAIGPTLMHeadModel"),KCr=o(" (OpenAI GPT model)"),ZCr=l(),H4=a("li"),D8e=a("strong"),e5r=o("opt"),o5r=o(" \u2014 "),DJ=a("a"),r5r=o("TFOPTForCausalLM"),t5r=o(" (OPT model)"),a5r=l(),U4=a("li"),G8e=a("strong"),n5r=o("rembert"),s5r=o(" \u2014 "),GJ=a("a"),l5r=o("TFRemBertForCausalLM"),i5r=o(" (RemBERT model)"),d5r=l(),J4=a("li"),O8e=a("strong"),c5r=o("roberta"),f5r=o(" \u2014 "),OJ=a("a"),m5r=o("TFRobertaForCausalLM"),g5r=o(" (RoBERTa model)"),h5r=l(),Y4=a("li"),V8e=a("strong"),p5r=o("roformer"),_5r=o(" \u2014 "),VJ=a("a"),u5r=o("TFRoFormerForCausalLM"),b5r=o(" (RoFormer model)"),v5r=l(),K4=a("li"),X8e=a("strong"),F5r=o("transfo-xl"),T5r=o(" \u2014 "),XJ=a("a"),M5r=o("TFTransfoXLLMHeadModel"),E5r=o(" (Transformer-XL model)"),C5r=l(),Z4=a("li"),z8e=a("strong"),w5r=o("xlm"),A5r=o(" \u2014 "),zJ=a("a"),L5r=o("TFXLMWithLMHeadModel"),y5r=o(" (XLM model)"),x5r=l(),eE=a("li"),Q8e=a("strong"),$5r=o("xlnet"),k5r=o(" \u2014 "),QJ=a("a"),S5r=o("TFXLNetLMHeadModel"),R5r=o(" (XLNet model)"),P5r=l(),F(oE.$$.fragment),nze=l(),hc=a("h2"),rE=a("a"),W8e=a("span"),F(ax.$$.fragment),B5r=l(),H8e=a("span"),N5r=o("TFAutoModelForImageClassification"),sze=l(),tr=a("div"),F(nx.$$.fragment),I5r=l(),pc=a("p"),q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WJ=a("a"),j5r=o("from_pretrained()"),D5r=o(" class method or the "),HJ=a("a"),G5r=o("from_config()"),O5r=o(` class
method.`),V5r=l(),sx=a("p"),X5r=o("This class cannot be instantiated directly using "),U8e=a("code"),z5r=o("__init__()"),Q5r=o(" (throws an error)."),W5r=l(),Bt=a("div"),F(lx.$$.fragment),H5r=l(),J8e=a("p"),U5r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),J5r=l(),_c=a("p"),Y5r=o(`Note:
Loading a model from its configuration file does `),Y8e=a("strong"),K5r=o("not"),Z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),e0r=o("from_pretrained()"),o0r=o(" to load the model weights."),r0r=l(),F(tE.$$.fragment),t0r=l(),Sr=a("div"),F(ix.$$.fragment),a0r=l(),K8e=a("p"),n0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s0r=l(),cn=a("p"),l0r=o("The model class to instantiate is selected based on the "),Z8e=a("code"),i0r=o("model_type"),d0r=o(` property of the config object (either
passed as an argument or loaded from `),eMe=a("code"),c0r=o("pretrained_model_name_or_path"),f0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=a("code"),m0r=o("pretrained_model_name_or_path"),g0r=o(":"),h0r=l(),ar=a("ul"),aE=a("li"),rMe=a("strong"),p0r=o("convnext"),_0r=o(" \u2014 "),JJ=a("a"),u0r=o("TFConvNextForImageClassification"),b0r=o(" (ConvNeXT model)"),v0r=l(),nE=a("li"),tMe=a("strong"),F0r=o("data2vec-vision"),T0r=o(" \u2014 "),YJ=a("a"),M0r=o("TFData2VecVisionForImageClassification"),E0r=o(" (Data2VecVision model)"),C0r=l(),sE=a("li"),aMe=a("strong"),w0r=o("regnet"),A0r=o(" \u2014 "),KJ=a("a"),L0r=o("TFRegNetForImageClassification"),y0r=o(" (RegNet model)"),x0r=l(),lE=a("li"),nMe=a("strong"),$0r=o("resnet"),k0r=o(" \u2014 "),ZJ=a("a"),S0r=o("TFResNetForImageClassification"),R0r=o(" (ResNet model)"),P0r=l(),iE=a("li"),sMe=a("strong"),B0r=o("swin"),N0r=o(" \u2014 "),eY=a("a"),I0r=o("TFSwinForImageClassification"),q0r=o(" (Swin Transformer model)"),j0r=l(),dE=a("li"),lMe=a("strong"),D0r=o("vit"),G0r=o(" \u2014 "),oY=a("a"),O0r=o("TFViTForImageClassification"),V0r=o(" (ViT model)"),X0r=l(),F(cE.$$.fragment),lze=l(),uc=a("h2"),fE=a("a"),iMe=a("span"),F(dx.$$.fragment),z0r=l(),dMe=a("span"),Q0r=o("TFAutoModelForMaskedLM"),ize=l(),nr=a("div"),F(cx.$$.fragment),W0r=l(),bc=a("p"),H0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rY=a("a"),U0r=o("from_pretrained()"),J0r=o(" class method or the "),tY=a("a"),Y0r=o("from_config()"),K0r=o(` class
method.`),Z0r=l(),fx=a("p"),ewr=o("This class cannot be instantiated directly using "),cMe=a("code"),owr=o("__init__()"),rwr=o(" (throws an error)."),twr=l(),Nt=a("div"),F(mx.$$.fragment),awr=l(),fMe=a("p"),nwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),swr=l(),vc=a("p"),lwr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),iwr=o("not"),dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),cwr=o("from_pretrained()"),fwr=o(" to load the model weights."),mwr=l(),F(mE.$$.fragment),gwr=l(),Rr=a("div"),F(gx.$$.fragment),hwr=l(),gMe=a("p"),pwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_wr=l(),fn=a("p"),uwr=o("The model class to instantiate is selected based on the "),hMe=a("code"),bwr=o("model_type"),vwr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),Fwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),Cwr=l(),ie=a("ul"),gE=a("li"),uMe=a("strong"),wwr=o("albert"),Awr=o(" \u2014 "),nY=a("a"),Lwr=o("TFAlbertForMaskedLM"),ywr=o(" (ALBERT model)"),xwr=l(),hE=a("li"),bMe=a("strong"),$wr=o("bert"),kwr=o(" \u2014 "),sY=a("a"),Swr=o("TFBertForMaskedLM"),Rwr=o(" (BERT model)"),Pwr=l(),pE=a("li"),vMe=a("strong"),Bwr=o("camembert"),Nwr=o(" \u2014 "),lY=a("a"),Iwr=o("TFCamembertForMaskedLM"),qwr=o(" (CamemBERT model)"),jwr=l(),_E=a("li"),FMe=a("strong"),Dwr=o("convbert"),Gwr=o(" \u2014 "),iY=a("a"),Owr=o("TFConvBertForMaskedLM"),Vwr=o(" (ConvBERT model)"),Xwr=l(),uE=a("li"),TMe=a("strong"),zwr=o("deberta"),Qwr=o(" \u2014 "),dY=a("a"),Wwr=o("TFDebertaForMaskedLM"),Hwr=o(" (DeBERTa model)"),Uwr=l(),bE=a("li"),MMe=a("strong"),Jwr=o("deberta-v2"),Ywr=o(" \u2014 "),cY=a("a"),Kwr=o("TFDebertaV2ForMaskedLM"),Zwr=o(" (DeBERTa-v2 model)"),eAr=l(),vE=a("li"),EMe=a("strong"),oAr=o("distilbert"),rAr=o(" \u2014 "),fY=a("a"),tAr=o("TFDistilBertForMaskedLM"),aAr=o(" (DistilBERT model)"),nAr=l(),FE=a("li"),CMe=a("strong"),sAr=o("electra"),lAr=o(" \u2014 "),mY=a("a"),iAr=o("TFElectraForMaskedLM"),dAr=o(" (ELECTRA model)"),cAr=l(),TE=a("li"),wMe=a("strong"),fAr=o("flaubert"),mAr=o(" \u2014 "),gY=a("a"),gAr=o("TFFlaubertWithLMHeadModel"),hAr=o(" (FlauBERT model)"),pAr=l(),ME=a("li"),AMe=a("strong"),_Ar=o("funnel"),uAr=o(" \u2014 "),hY=a("a"),bAr=o("TFFunnelForMaskedLM"),vAr=o(" (Funnel Transformer model)"),FAr=l(),EE=a("li"),LMe=a("strong"),TAr=o("layoutlm"),MAr=o(" \u2014 "),pY=a("a"),EAr=o("TFLayoutLMForMaskedLM"),CAr=o(" (LayoutLM model)"),wAr=l(),CE=a("li"),yMe=a("strong"),AAr=o("longformer"),LAr=o(" \u2014 "),_Y=a("a"),yAr=o("TFLongformerForMaskedLM"),xAr=o(" (Longformer model)"),$Ar=l(),wE=a("li"),xMe=a("strong"),kAr=o("mobilebert"),SAr=o(" \u2014 "),uY=a("a"),RAr=o("TFMobileBertForMaskedLM"),PAr=o(" (MobileBERT model)"),BAr=l(),AE=a("li"),$Me=a("strong"),NAr=o("mpnet"),IAr=o(" \u2014 "),bY=a("a"),qAr=o("TFMPNetForMaskedLM"),jAr=o(" (MPNet model)"),DAr=l(),LE=a("li"),kMe=a("strong"),GAr=o("rembert"),OAr=o(" \u2014 "),vY=a("a"),VAr=o("TFRemBertForMaskedLM"),XAr=o(" (RemBERT model)"),zAr=l(),yE=a("li"),SMe=a("strong"),QAr=o("roberta"),WAr=o(" \u2014 "),FY=a("a"),HAr=o("TFRobertaForMaskedLM"),UAr=o(" (RoBERTa model)"),JAr=l(),xE=a("li"),RMe=a("strong"),YAr=o("roformer"),KAr=o(" \u2014 "),TY=a("a"),ZAr=o("TFRoFormerForMaskedLM"),e6r=o(" (RoFormer model)"),o6r=l(),$E=a("li"),PMe=a("strong"),r6r=o("tapas"),t6r=o(" \u2014 "),MY=a("a"),a6r=o("TFTapasForMaskedLM"),n6r=o(" (TAPAS model)"),s6r=l(),kE=a("li"),BMe=a("strong"),l6r=o("xlm"),i6r=o(" \u2014 "),EY=a("a"),d6r=o("TFXLMWithLMHeadModel"),c6r=o(" (XLM model)"),f6r=l(),SE=a("li"),NMe=a("strong"),m6r=o("xlm-roberta"),g6r=o(" \u2014 "),CY=a("a"),h6r=o("TFXLMRobertaForMaskedLM"),p6r=o(" (XLM-RoBERTa model)"),_6r=l(),F(RE.$$.fragment),dze=l(),Fc=a("h2"),PE=a("a"),IMe=a("span"),F(hx.$$.fragment),u6r=l(),qMe=a("span"),b6r=o("TFAutoModelForSeq2SeqLM"),cze=l(),sr=a("div"),F(px.$$.fragment),v6r=l(),Tc=a("p"),F6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wY=a("a"),T6r=o("from_pretrained()"),M6r=o(" class method or the "),AY=a("a"),E6r=o("from_config()"),C6r=o(` class
method.`),w6r=l(),_x=a("p"),A6r=o("This class cannot be instantiated directly using "),jMe=a("code"),L6r=o("__init__()"),y6r=o(" (throws an error)."),x6r=l(),It=a("div"),F(ux.$$.fragment),$6r=l(),DMe=a("p"),k6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S6r=l(),Mc=a("p"),R6r=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),P6r=o("not"),B6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),N6r=o("from_pretrained()"),I6r=o(" to load the model weights."),q6r=l(),F(BE.$$.fragment),j6r=l(),Pr=a("div"),F(bx.$$.fragment),D6r=l(),OMe=a("p"),G6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O6r=l(),mn=a("p"),V6r=o("The model class to instantiate is selected based on the "),VMe=a("code"),X6r=o("model_type"),z6r=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),Q6r=o("pretrained_model_name_or_path"),W6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),H6r=o("pretrained_model_name_or_path"),U6r=o(":"),J6r=l(),ye=a("ul"),NE=a("li"),QMe=a("strong"),Y6r=o("bart"),K6r=o(" \u2014 "),yY=a("a"),Z6r=o("TFBartForConditionalGeneration"),e7r=o(" (BART model)"),o7r=l(),IE=a("li"),WMe=a("strong"),r7r=o("blenderbot"),t7r=o(" \u2014 "),xY=a("a"),a7r=o("TFBlenderbotForConditionalGeneration"),n7r=o(" (Blenderbot model)"),s7r=l(),qE=a("li"),HMe=a("strong"),l7r=o("blenderbot-small"),i7r=o(" \u2014 "),$Y=a("a"),d7r=o("TFBlenderbotSmallForConditionalGeneration"),c7r=o(" (BlenderbotSmall model)"),f7r=l(),jE=a("li"),UMe=a("strong"),m7r=o("encoder-decoder"),g7r=o(" \u2014 "),kY=a("a"),h7r=o("TFEncoderDecoderModel"),p7r=o(" (Encoder decoder model)"),_7r=l(),DE=a("li"),JMe=a("strong"),u7r=o("led"),b7r=o(" \u2014 "),SY=a("a"),v7r=o("TFLEDForConditionalGeneration"),F7r=o(" (LED model)"),T7r=l(),GE=a("li"),YMe=a("strong"),M7r=o("marian"),E7r=o(" \u2014 "),RY=a("a"),C7r=o("TFMarianMTModel"),w7r=o(" (Marian model)"),A7r=l(),OE=a("li"),KMe=a("strong"),L7r=o("mbart"),y7r=o(" \u2014 "),PY=a("a"),x7r=o("TFMBartForConditionalGeneration"),$7r=o(" (mBART model)"),k7r=l(),VE=a("li"),ZMe=a("strong"),S7r=o("mt5"),R7r=o(" \u2014 "),BY=a("a"),P7r=o("TFMT5ForConditionalGeneration"),B7r=o(" (MT5 model)"),N7r=l(),XE=a("li"),e4e=a("strong"),I7r=o("pegasus"),q7r=o(" \u2014 "),NY=a("a"),j7r=o("TFPegasusForConditionalGeneration"),D7r=o(" (Pegasus model)"),G7r=l(),zE=a("li"),o4e=a("strong"),O7r=o("t5"),V7r=o(" \u2014 "),IY=a("a"),X7r=o("TFT5ForConditionalGeneration"),z7r=o(" (T5 model)"),Q7r=l(),F(QE.$$.fragment),fze=l(),Ec=a("h2"),WE=a("a"),r4e=a("span"),F(vx.$$.fragment),W7r=l(),t4e=a("span"),H7r=o("TFAutoModelForSequenceClassification"),mze=l(),lr=a("div"),F(Fx.$$.fragment),U7r=l(),Cc=a("p"),J7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qY=a("a"),Y7r=o("from_pretrained()"),K7r=o(" class method or the "),jY=a("a"),Z7r=o("from_config()"),eLr=o(` class
method.`),oLr=l(),Tx=a("p"),rLr=o("This class cannot be instantiated directly using "),a4e=a("code"),tLr=o("__init__()"),aLr=o(" (throws an error)."),nLr=l(),qt=a("div"),F(Mx.$$.fragment),sLr=l(),n4e=a("p"),lLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iLr=l(),wc=a("p"),dLr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),cLr=o("not"),fLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),mLr=o("from_pretrained()"),gLr=o(" to load the model weights."),hLr=l(),F(HE.$$.fragment),pLr=l(),Br=a("div"),F(Ex.$$.fragment),_Lr=l(),l4e=a("p"),uLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bLr=l(),gn=a("p"),vLr=o("The model class to instantiate is selected based on the "),i4e=a("code"),FLr=o("model_type"),TLr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),CLr=o("pretrained_model_name_or_path"),wLr=o(":"),ALr=l(),te=a("ul"),UE=a("li"),f4e=a("strong"),LLr=o("albert"),yLr=o(" \u2014 "),GY=a("a"),xLr=o("TFAlbertForSequenceClassification"),$Lr=o(" (ALBERT model)"),kLr=l(),JE=a("li"),m4e=a("strong"),SLr=o("bert"),RLr=o(" \u2014 "),OY=a("a"),PLr=o("TFBertForSequenceClassification"),BLr=o(" (BERT model)"),NLr=l(),YE=a("li"),g4e=a("strong"),ILr=o("camembert"),qLr=o(" \u2014 "),VY=a("a"),jLr=o("TFCamembertForSequenceClassification"),DLr=o(" (CamemBERT model)"),GLr=l(),KE=a("li"),h4e=a("strong"),OLr=o("convbert"),VLr=o(" \u2014 "),XY=a("a"),XLr=o("TFConvBertForSequenceClassification"),zLr=o(" (ConvBERT model)"),QLr=l(),ZE=a("li"),p4e=a("strong"),WLr=o("ctrl"),HLr=o(" \u2014 "),zY=a("a"),ULr=o("TFCTRLForSequenceClassification"),JLr=o(" (CTRL model)"),YLr=l(),eC=a("li"),_4e=a("strong"),KLr=o("deberta"),ZLr=o(" \u2014 "),QY=a("a"),eyr=o("TFDebertaForSequenceClassification"),oyr=o(" (DeBERTa model)"),ryr=l(),oC=a("li"),u4e=a("strong"),tyr=o("deberta-v2"),ayr=o(" \u2014 "),WY=a("a"),nyr=o("TFDebertaV2ForSequenceClassification"),syr=o(" (DeBERTa-v2 model)"),lyr=l(),rC=a("li"),b4e=a("strong"),iyr=o("distilbert"),dyr=o(" \u2014 "),HY=a("a"),cyr=o("TFDistilBertForSequenceClassification"),fyr=o(" (DistilBERT model)"),myr=l(),tC=a("li"),v4e=a("strong"),gyr=o("electra"),hyr=o(" \u2014 "),UY=a("a"),pyr=o("TFElectraForSequenceClassification"),_yr=o(" (ELECTRA model)"),uyr=l(),aC=a("li"),F4e=a("strong"),byr=o("flaubert"),vyr=o(" \u2014 "),JY=a("a"),Fyr=o("TFFlaubertForSequenceClassification"),Tyr=o(" (FlauBERT model)"),Myr=l(),nC=a("li"),T4e=a("strong"),Eyr=o("funnel"),Cyr=o(" \u2014 "),YY=a("a"),wyr=o("TFFunnelForSequenceClassification"),Ayr=o(" (Funnel Transformer model)"),Lyr=l(),sC=a("li"),M4e=a("strong"),yyr=o("gpt2"),xyr=o(" \u2014 "),KY=a("a"),$yr=o("TFGPT2ForSequenceClassification"),kyr=o(" (OpenAI GPT-2 model)"),Syr=l(),lC=a("li"),E4e=a("strong"),Ryr=o("gptj"),Pyr=o(" \u2014 "),ZY=a("a"),Byr=o("TFGPTJForSequenceClassification"),Nyr=o(" (GPT-J model)"),Iyr=l(),iC=a("li"),C4e=a("strong"),qyr=o("layoutlm"),jyr=o(" \u2014 "),eK=a("a"),Dyr=o("TFLayoutLMForSequenceClassification"),Gyr=o(" (LayoutLM model)"),Oyr=l(),dC=a("li"),w4e=a("strong"),Vyr=o("longformer"),Xyr=o(" \u2014 "),oK=a("a"),zyr=o("TFLongformerForSequenceClassification"),Qyr=o(" (Longformer model)"),Wyr=l(),cC=a("li"),A4e=a("strong"),Hyr=o("mobilebert"),Uyr=o(" \u2014 "),rK=a("a"),Jyr=o("TFMobileBertForSequenceClassification"),Yyr=o(" (MobileBERT model)"),Kyr=l(),fC=a("li"),L4e=a("strong"),Zyr=o("mpnet"),e9r=o(" \u2014 "),tK=a("a"),o9r=o("TFMPNetForSequenceClassification"),r9r=o(" (MPNet model)"),t9r=l(),mC=a("li"),y4e=a("strong"),a9r=o("openai-gpt"),n9r=o(" \u2014 "),aK=a("a"),s9r=o("TFOpenAIGPTForSequenceClassification"),l9r=o(" (OpenAI GPT model)"),i9r=l(),gC=a("li"),x4e=a("strong"),d9r=o("rembert"),c9r=o(" \u2014 "),nK=a("a"),f9r=o("TFRemBertForSequenceClassification"),m9r=o(" (RemBERT model)"),g9r=l(),hC=a("li"),$4e=a("strong"),h9r=o("roberta"),p9r=o(" \u2014 "),sK=a("a"),_9r=o("TFRobertaForSequenceClassification"),u9r=o(" (RoBERTa model)"),b9r=l(),pC=a("li"),k4e=a("strong"),v9r=o("roformer"),F9r=o(" \u2014 "),lK=a("a"),T9r=o("TFRoFormerForSequenceClassification"),M9r=o(" (RoFormer model)"),E9r=l(),_C=a("li"),S4e=a("strong"),C9r=o("tapas"),w9r=o(" \u2014 "),iK=a("a"),A9r=o("TFTapasForSequenceClassification"),L9r=o(" (TAPAS model)"),y9r=l(),uC=a("li"),R4e=a("strong"),x9r=o("transfo-xl"),$9r=o(" \u2014 "),dK=a("a"),k9r=o("TFTransfoXLForSequenceClassification"),S9r=o(" (Transformer-XL model)"),R9r=l(),bC=a("li"),P4e=a("strong"),P9r=o("xlm"),B9r=o(" \u2014 "),cK=a("a"),N9r=o("TFXLMForSequenceClassification"),I9r=o(" (XLM model)"),q9r=l(),vC=a("li"),B4e=a("strong"),j9r=o("xlm-roberta"),D9r=o(" \u2014 "),fK=a("a"),G9r=o("TFXLMRobertaForSequenceClassification"),O9r=o(" (XLM-RoBERTa model)"),V9r=l(),FC=a("li"),N4e=a("strong"),X9r=o("xlnet"),z9r=o(" \u2014 "),mK=a("a"),Q9r=o("TFXLNetForSequenceClassification"),W9r=o(" (XLNet model)"),H9r=l(),F(TC.$$.fragment),gze=l(),Ac=a("h2"),MC=a("a"),I4e=a("span"),F(Cx.$$.fragment),U9r=l(),q4e=a("span"),J9r=o("TFAutoModelForMultipleChoice"),hze=l(),ir=a("div"),F(wx.$$.fragment),Y9r=l(),Lc=a("p"),K9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gK=a("a"),Z9r=o("from_pretrained()"),exr=o(" class method or the "),hK=a("a"),oxr=o("from_config()"),rxr=o(` class
method.`),txr=l(),Ax=a("p"),axr=o("This class cannot be instantiated directly using "),j4e=a("code"),nxr=o("__init__()"),sxr=o(" (throws an error)."),lxr=l(),jt=a("div"),F(Lx.$$.fragment),ixr=l(),D4e=a("p"),dxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cxr=l(),yc=a("p"),fxr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),mxr=o("not"),gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),hxr=o("from_pretrained()"),pxr=o(" to load the model weights."),_xr=l(),F(EC.$$.fragment),uxr=l(),Nr=a("div"),F(yx.$$.fragment),bxr=l(),O4e=a("p"),vxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fxr=l(),hn=a("p"),Txr=o("The model class to instantiate is selected based on the "),V4e=a("code"),Mxr=o("model_type"),Exr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),Axr=o("pretrained_model_name_or_path"),Lxr=o(":"),yxr=l(),_e=a("ul"),CC=a("li"),Q4e=a("strong"),xxr=o("albert"),$xr=o(" \u2014 "),_K=a("a"),kxr=o("TFAlbertForMultipleChoice"),Sxr=o(" (ALBERT model)"),Rxr=l(),wC=a("li"),W4e=a("strong"),Pxr=o("bert"),Bxr=o(" \u2014 "),uK=a("a"),Nxr=o("TFBertForMultipleChoice"),Ixr=o(" (BERT model)"),qxr=l(),AC=a("li"),H4e=a("strong"),jxr=o("camembert"),Dxr=o(" \u2014 "),bK=a("a"),Gxr=o("TFCamembertForMultipleChoice"),Oxr=o(" (CamemBERT model)"),Vxr=l(),LC=a("li"),U4e=a("strong"),Xxr=o("convbert"),zxr=o(" \u2014 "),vK=a("a"),Qxr=o("TFConvBertForMultipleChoice"),Wxr=o(" (ConvBERT model)"),Hxr=l(),yC=a("li"),J4e=a("strong"),Uxr=o("distilbert"),Jxr=o(" \u2014 "),FK=a("a"),Yxr=o("TFDistilBertForMultipleChoice"),Kxr=o(" (DistilBERT model)"),Zxr=l(),xC=a("li"),Y4e=a("strong"),e$r=o("electra"),o$r=o(" \u2014 "),TK=a("a"),r$r=o("TFElectraForMultipleChoice"),t$r=o(" (ELECTRA model)"),a$r=l(),$C=a("li"),K4e=a("strong"),n$r=o("flaubert"),s$r=o(" \u2014 "),MK=a("a"),l$r=o("TFFlaubertForMultipleChoice"),i$r=o(" (FlauBERT model)"),d$r=l(),kC=a("li"),Z4e=a("strong"),c$r=o("funnel"),f$r=o(" \u2014 "),EK=a("a"),m$r=o("TFFunnelForMultipleChoice"),g$r=o(" (Funnel Transformer model)"),h$r=l(),SC=a("li"),eEe=a("strong"),p$r=o("longformer"),_$r=o(" \u2014 "),CK=a("a"),u$r=o("TFLongformerForMultipleChoice"),b$r=o(" (Longformer model)"),v$r=l(),RC=a("li"),oEe=a("strong"),F$r=o("mobilebert"),T$r=o(" \u2014 "),wK=a("a"),M$r=o("TFMobileBertForMultipleChoice"),E$r=o(" (MobileBERT model)"),C$r=l(),PC=a("li"),rEe=a("strong"),w$r=o("mpnet"),A$r=o(" \u2014 "),AK=a("a"),L$r=o("TFMPNetForMultipleChoice"),y$r=o(" (MPNet model)"),x$r=l(),BC=a("li"),tEe=a("strong"),$$r=o("rembert"),k$r=o(" \u2014 "),LK=a("a"),S$r=o("TFRemBertForMultipleChoice"),R$r=o(" (RemBERT model)"),P$r=l(),NC=a("li"),aEe=a("strong"),B$r=o("roberta"),N$r=o(" \u2014 "),yK=a("a"),I$r=o("TFRobertaForMultipleChoice"),q$r=o(" (RoBERTa model)"),j$r=l(),IC=a("li"),nEe=a("strong"),D$r=o("roformer"),G$r=o(" \u2014 "),xK=a("a"),O$r=o("TFRoFormerForMultipleChoice"),V$r=o(" (RoFormer model)"),X$r=l(),qC=a("li"),sEe=a("strong"),z$r=o("xlm"),Q$r=o(" \u2014 "),$K=a("a"),W$r=o("TFXLMForMultipleChoice"),H$r=o(" (XLM model)"),U$r=l(),jC=a("li"),lEe=a("strong"),J$r=o("xlm-roberta"),Y$r=o(" \u2014 "),kK=a("a"),K$r=o("TFXLMRobertaForMultipleChoice"),Z$r=o(" (XLM-RoBERTa model)"),ekr=l(),DC=a("li"),iEe=a("strong"),okr=o("xlnet"),rkr=o(" \u2014 "),SK=a("a"),tkr=o("TFXLNetForMultipleChoice"),akr=o(" (XLNet model)"),nkr=l(),F(GC.$$.fragment),pze=l(),xc=a("h2"),OC=a("a"),dEe=a("span"),F(xx.$$.fragment),skr=l(),cEe=a("span"),lkr=o("TFAutoModelForNextSentencePrediction"),_ze=l(),dr=a("div"),F($x.$$.fragment),ikr=l(),$c=a("p"),dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RK=a("a"),ckr=o("from_pretrained()"),fkr=o(" class method or the "),PK=a("a"),mkr=o("from_config()"),gkr=o(` class
method.`),hkr=l(),kx=a("p"),pkr=o("This class cannot be instantiated directly using "),fEe=a("code"),_kr=o("__init__()"),ukr=o(" (throws an error)."),bkr=l(),Dt=a("div"),F(Sx.$$.fragment),vkr=l(),mEe=a("p"),Fkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tkr=l(),kc=a("p"),Mkr=o(`Note:
Loading a model from its configuration file does `),gEe=a("strong"),Ekr=o("not"),Ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),wkr=o("from_pretrained()"),Akr=o(" to load the model weights."),Lkr=l(),F(VC.$$.fragment),ykr=l(),Ir=a("div"),F(Rx.$$.fragment),xkr=l(),hEe=a("p"),$kr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kkr=l(),pn=a("p"),Skr=o("The model class to instantiate is selected based on the "),pEe=a("code"),Rkr=o("model_type"),Pkr=o(` property of the config object (either
passed as an argument or loaded from `),_Ee=a("code"),Bkr=o("pretrained_model_name_or_path"),Nkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),Ikr=o("pretrained_model_name_or_path"),qkr=o(":"),jkr=l(),Px=a("ul"),XC=a("li"),bEe=a("strong"),Dkr=o("bert"),Gkr=o(" \u2014 "),NK=a("a"),Okr=o("TFBertForNextSentencePrediction"),Vkr=o(" (BERT model)"),Xkr=l(),zC=a("li"),vEe=a("strong"),zkr=o("mobilebert"),Qkr=o(" \u2014 "),IK=a("a"),Wkr=o("TFMobileBertForNextSentencePrediction"),Hkr=o(" (MobileBERT model)"),Ukr=l(),F(QC.$$.fragment),uze=l(),Sc=a("h2"),WC=a("a"),FEe=a("span"),F(Bx.$$.fragment),Jkr=l(),TEe=a("span"),Ykr=o("TFAutoModelForTableQuestionAnswering"),bze=l(),cr=a("div"),F(Nx.$$.fragment),Kkr=l(),Rc=a("p"),Zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qK=a("a"),eSr=o("from_pretrained()"),oSr=o(" class method or the "),jK=a("a"),rSr=o("from_config()"),tSr=o(` class
method.`),aSr=l(),Ix=a("p"),nSr=o("This class cannot be instantiated directly using "),MEe=a("code"),sSr=o("__init__()"),lSr=o(" (throws an error)."),iSr=l(),Gt=a("div"),F(qx.$$.fragment),dSr=l(),EEe=a("p"),cSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fSr=l(),Pc=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),CEe=a("strong"),gSr=o("not"),hSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),pSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),uSr=l(),F(HC.$$.fragment),bSr=l(),qr=a("div"),F(jx.$$.fragment),vSr=l(),wEe=a("p"),FSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TSr=l(),_n=a("p"),MSr=o("The model class to instantiate is selected based on the "),AEe=a("code"),ESr=o("model_type"),CSr=o(` property of the config object (either
passed as an argument or loaded from `),LEe=a("code"),wSr=o("pretrained_model_name_or_path"),ASr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=a("code"),LSr=o("pretrained_model_name_or_path"),ySr=o(":"),xSr=l(),xEe=a("ul"),UC=a("li"),$Ee=a("strong"),$Sr=o("tapas"),kSr=o(" \u2014 "),GK=a("a"),SSr=o("TFTapasForQuestionAnswering"),RSr=o(" (TAPAS model)"),PSr=l(),F(JC.$$.fragment),vze=l(),Bc=a("h2"),YC=a("a"),kEe=a("span"),F(Dx.$$.fragment),BSr=l(),SEe=a("span"),NSr=o("TFAutoModelForTokenClassification"),Fze=l(),fr=a("div"),F(Gx.$$.fragment),ISr=l(),Nc=a("p"),qSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OK=a("a"),jSr=o("from_pretrained()"),DSr=o(" class method or the "),VK=a("a"),GSr=o("from_config()"),OSr=o(` class
method.`),VSr=l(),Ox=a("p"),XSr=o("This class cannot be instantiated directly using "),REe=a("code"),zSr=o("__init__()"),QSr=o(" (throws an error)."),WSr=l(),Ot=a("div"),F(Vx.$$.fragment),HSr=l(),PEe=a("p"),USr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JSr=l(),Ic=a("p"),YSr=o(`Note:
Loading a model from its configuration file does `),BEe=a("strong"),KSr=o("not"),ZSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),eRr=o("from_pretrained()"),oRr=o(" to load the model weights."),rRr=l(),F(KC.$$.fragment),tRr=l(),jr=a("div"),F(Xx.$$.fragment),aRr=l(),NEe=a("p"),nRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sRr=l(),un=a("p"),lRr=o("The model class to instantiate is selected based on the "),IEe=a("code"),iRr=o("model_type"),dRr=o(` property of the config object (either
passed as an argument or loaded from `),qEe=a("code"),cRr=o("pretrained_model_name_or_path"),fRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=a("code"),mRr=o("pretrained_model_name_or_path"),gRr=o(":"),hRr=l(),de=a("ul"),ZC=a("li"),DEe=a("strong"),pRr=o("albert"),_Rr=o(" \u2014 "),zK=a("a"),uRr=o("TFAlbertForTokenClassification"),bRr=o(" (ALBERT model)"),vRr=l(),e5=a("li"),GEe=a("strong"),FRr=o("bert"),TRr=o(" \u2014 "),QK=a("a"),MRr=o("TFBertForTokenClassification"),ERr=o(" (BERT model)"),CRr=l(),o5=a("li"),OEe=a("strong"),wRr=o("camembert"),ARr=o(" \u2014 "),WK=a("a"),LRr=o("TFCamembertForTokenClassification"),yRr=o(" (CamemBERT model)"),xRr=l(),r5=a("li"),VEe=a("strong"),$Rr=o("convbert"),kRr=o(" \u2014 "),HK=a("a"),SRr=o("TFConvBertForTokenClassification"),RRr=o(" (ConvBERT model)"),PRr=l(),t5=a("li"),XEe=a("strong"),BRr=o("deberta"),NRr=o(" \u2014 "),UK=a("a"),IRr=o("TFDebertaForTokenClassification"),qRr=o(" (DeBERTa model)"),jRr=l(),a5=a("li"),zEe=a("strong"),DRr=o("deberta-v2"),GRr=o(" \u2014 "),JK=a("a"),ORr=o("TFDebertaV2ForTokenClassification"),VRr=o(" (DeBERTa-v2 model)"),XRr=l(),n5=a("li"),QEe=a("strong"),zRr=o("distilbert"),QRr=o(" \u2014 "),YK=a("a"),WRr=o("TFDistilBertForTokenClassification"),HRr=o(" (DistilBERT model)"),URr=l(),s5=a("li"),WEe=a("strong"),JRr=o("electra"),YRr=o(" \u2014 "),KK=a("a"),KRr=o("TFElectraForTokenClassification"),ZRr=o(" (ELECTRA model)"),ePr=l(),l5=a("li"),HEe=a("strong"),oPr=o("flaubert"),rPr=o(" \u2014 "),ZK=a("a"),tPr=o("TFFlaubertForTokenClassification"),aPr=o(" (FlauBERT model)"),nPr=l(),i5=a("li"),UEe=a("strong"),sPr=o("funnel"),lPr=o(" \u2014 "),eZ=a("a"),iPr=o("TFFunnelForTokenClassification"),dPr=o(" (Funnel Transformer model)"),cPr=l(),d5=a("li"),JEe=a("strong"),fPr=o("layoutlm"),mPr=o(" \u2014 "),oZ=a("a"),gPr=o("TFLayoutLMForTokenClassification"),hPr=o(" (LayoutLM model)"),pPr=l(),c5=a("li"),YEe=a("strong"),_Pr=o("longformer"),uPr=o(" \u2014 "),rZ=a("a"),bPr=o("TFLongformerForTokenClassification"),vPr=o(" (Longformer model)"),FPr=l(),f5=a("li"),KEe=a("strong"),TPr=o("mobilebert"),MPr=o(" \u2014 "),tZ=a("a"),EPr=o("TFMobileBertForTokenClassification"),CPr=o(" (MobileBERT model)"),wPr=l(),m5=a("li"),ZEe=a("strong"),APr=o("mpnet"),LPr=o(" \u2014 "),aZ=a("a"),yPr=o("TFMPNetForTokenClassification"),xPr=o(" (MPNet model)"),$Pr=l(),g5=a("li"),eCe=a("strong"),kPr=o("rembert"),SPr=o(" \u2014 "),nZ=a("a"),RPr=o("TFRemBertForTokenClassification"),PPr=o(" (RemBERT model)"),BPr=l(),h5=a("li"),oCe=a("strong"),NPr=o("roberta"),IPr=o(" \u2014 "),sZ=a("a"),qPr=o("TFRobertaForTokenClassification"),jPr=o(" (RoBERTa model)"),DPr=l(),p5=a("li"),rCe=a("strong"),GPr=o("roformer"),OPr=o(" \u2014 "),lZ=a("a"),VPr=o("TFRoFormerForTokenClassification"),XPr=o(" (RoFormer model)"),zPr=l(),_5=a("li"),tCe=a("strong"),QPr=o("xlm"),WPr=o(" \u2014 "),iZ=a("a"),HPr=o("TFXLMForTokenClassification"),UPr=o(" (XLM model)"),JPr=l(),u5=a("li"),aCe=a("strong"),YPr=o("xlm-roberta"),KPr=o(" \u2014 "),dZ=a("a"),ZPr=o("TFXLMRobertaForTokenClassification"),eBr=o(" (XLM-RoBERTa model)"),oBr=l(),b5=a("li"),nCe=a("strong"),rBr=o("xlnet"),tBr=o(" \u2014 "),cZ=a("a"),aBr=o("TFXLNetForTokenClassification"),nBr=o(" (XLNet model)"),sBr=l(),F(v5.$$.fragment),Tze=l(),qc=a("h2"),F5=a("a"),sCe=a("span"),F(zx.$$.fragment),lBr=l(),lCe=a("span"),iBr=o("TFAutoModelForQuestionAnswering"),Mze=l(),mr=a("div"),F(Qx.$$.fragment),dBr=l(),jc=a("p"),cBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fZ=a("a"),fBr=o("from_pretrained()"),mBr=o(" class method or the "),mZ=a("a"),gBr=o("from_config()"),hBr=o(` class
method.`),pBr=l(),Wx=a("p"),_Br=o("This class cannot be instantiated directly using "),iCe=a("code"),uBr=o("__init__()"),bBr=o(" (throws an error)."),vBr=l(),Vt=a("div"),F(Hx.$$.fragment),FBr=l(),dCe=a("p"),TBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MBr=l(),Dc=a("p"),EBr=o(`Note:
Loading a model from its configuration file does `),cCe=a("strong"),CBr=o("not"),wBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),ABr=o("from_pretrained()"),LBr=o(" to load the model weights."),yBr=l(),F(T5.$$.fragment),xBr=l(),Dr=a("div"),F(Ux.$$.fragment),$Br=l(),fCe=a("p"),kBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SBr=l(),bn=a("p"),RBr=o("The model class to instantiate is selected based on the "),mCe=a("code"),PBr=o("model_type"),BBr=o(` property of the config object (either
passed as an argument or loaded from `),gCe=a("code"),NBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=a("code"),qBr=o("pretrained_model_name_or_path"),jBr=o(":"),DBr=l(),ce=a("ul"),M5=a("li"),pCe=a("strong"),GBr=o("albert"),OBr=o(" \u2014 "),hZ=a("a"),VBr=o("TFAlbertForQuestionAnswering"),XBr=o(" (ALBERT model)"),zBr=l(),E5=a("li"),_Ce=a("strong"),QBr=o("bert"),WBr=o(" \u2014 "),pZ=a("a"),HBr=o("TFBertForQuestionAnswering"),UBr=o(" (BERT model)"),JBr=l(),C5=a("li"),uCe=a("strong"),YBr=o("camembert"),KBr=o(" \u2014 "),_Z=a("a"),ZBr=o("TFCamembertForQuestionAnswering"),eNr=o(" (CamemBERT model)"),oNr=l(),w5=a("li"),bCe=a("strong"),rNr=o("convbert"),tNr=o(" \u2014 "),uZ=a("a"),aNr=o("TFConvBertForQuestionAnswering"),nNr=o(" (ConvBERT model)"),sNr=l(),A5=a("li"),vCe=a("strong"),lNr=o("deberta"),iNr=o(" \u2014 "),bZ=a("a"),dNr=o("TFDebertaForQuestionAnswering"),cNr=o(" (DeBERTa model)"),fNr=l(),L5=a("li"),FCe=a("strong"),mNr=o("deberta-v2"),gNr=o(" \u2014 "),vZ=a("a"),hNr=o("TFDebertaV2ForQuestionAnswering"),pNr=o(" (DeBERTa-v2 model)"),_Nr=l(),y5=a("li"),TCe=a("strong"),uNr=o("distilbert"),bNr=o(" \u2014 "),FZ=a("a"),vNr=o("TFDistilBertForQuestionAnswering"),FNr=o(" (DistilBERT model)"),TNr=l(),x5=a("li"),MCe=a("strong"),MNr=o("electra"),ENr=o(" \u2014 "),TZ=a("a"),CNr=o("TFElectraForQuestionAnswering"),wNr=o(" (ELECTRA model)"),ANr=l(),$5=a("li"),ECe=a("strong"),LNr=o("flaubert"),yNr=o(" \u2014 "),MZ=a("a"),xNr=o("TFFlaubertForQuestionAnsweringSimple"),$Nr=o(" (FlauBERT model)"),kNr=l(),k5=a("li"),CCe=a("strong"),SNr=o("funnel"),RNr=o(" \u2014 "),EZ=a("a"),PNr=o("TFFunnelForQuestionAnswering"),BNr=o(" (Funnel Transformer model)"),NNr=l(),S5=a("li"),wCe=a("strong"),INr=o("gptj"),qNr=o(" \u2014 "),CZ=a("a"),jNr=o("TFGPTJForQuestionAnswering"),DNr=o(" (GPT-J model)"),GNr=l(),R5=a("li"),ACe=a("strong"),ONr=o("longformer"),VNr=o(" \u2014 "),wZ=a("a"),XNr=o("TFLongformerForQuestionAnswering"),zNr=o(" (Longformer model)"),QNr=l(),P5=a("li"),LCe=a("strong"),WNr=o("mobilebert"),HNr=o(" \u2014 "),AZ=a("a"),UNr=o("TFMobileBertForQuestionAnswering"),JNr=o(" (MobileBERT model)"),YNr=l(),B5=a("li"),yCe=a("strong"),KNr=o("mpnet"),ZNr=o(" \u2014 "),LZ=a("a"),eIr=o("TFMPNetForQuestionAnswering"),oIr=o(" (MPNet model)"),rIr=l(),N5=a("li"),xCe=a("strong"),tIr=o("rembert"),aIr=o(" \u2014 "),yZ=a("a"),nIr=o("TFRemBertForQuestionAnswering"),sIr=o(" (RemBERT model)"),lIr=l(),I5=a("li"),$Ce=a("strong"),iIr=o("roberta"),dIr=o(" \u2014 "),xZ=a("a"),cIr=o("TFRobertaForQuestionAnswering"),fIr=o(" (RoBERTa model)"),mIr=l(),q5=a("li"),kCe=a("strong"),gIr=o("roformer"),hIr=o(" \u2014 "),$Z=a("a"),pIr=o("TFRoFormerForQuestionAnswering"),_Ir=o(" (RoFormer model)"),uIr=l(),j5=a("li"),SCe=a("strong"),bIr=o("xlm"),vIr=o(" \u2014 "),kZ=a("a"),FIr=o("TFXLMForQuestionAnsweringSimple"),TIr=o(" (XLM model)"),MIr=l(),D5=a("li"),RCe=a("strong"),EIr=o("xlm-roberta"),CIr=o(" \u2014 "),SZ=a("a"),wIr=o("TFXLMRobertaForQuestionAnswering"),AIr=o(" (XLM-RoBERTa model)"),LIr=l(),G5=a("li"),PCe=a("strong"),yIr=o("xlnet"),xIr=o(" \u2014 "),RZ=a("a"),$Ir=o("TFXLNetForQuestionAnsweringSimple"),kIr=o(" (XLNet model)"),SIr=l(),F(O5.$$.fragment),Eze=l(),Gc=a("h2"),V5=a("a"),BCe=a("span"),F(Jx.$$.fragment),RIr=l(),NCe=a("span"),PIr=o("TFAutoModelForVision2Seq"),Cze=l(),gr=a("div"),F(Yx.$$.fragment),BIr=l(),Oc=a("p"),NIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PZ=a("a"),IIr=o("from_pretrained()"),qIr=o(" class method or the "),BZ=a("a"),jIr=o("from_config()"),DIr=o(` class
method.`),GIr=l(),Kx=a("p"),OIr=o("This class cannot be instantiated directly using "),ICe=a("code"),VIr=o("__init__()"),XIr=o(" (throws an error)."),zIr=l(),Xt=a("div"),F(Zx.$$.fragment),QIr=l(),qCe=a("p"),WIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HIr=l(),Vc=a("p"),UIr=o(`Note:
Loading a model from its configuration file does `),jCe=a("strong"),JIr=o("not"),YIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("a"),KIr=o("from_pretrained()"),ZIr=o(" to load the model weights."),eqr=l(),F(X5.$$.fragment),oqr=l(),Gr=a("div"),F(e$.$$.fragment),rqr=l(),DCe=a("p"),tqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aqr=l(),vn=a("p"),nqr=o("The model class to instantiate is selected based on the "),GCe=a("code"),sqr=o("model_type"),lqr=o(` property of the config object (either
passed as an argument or loaded from `),OCe=a("code"),iqr=o("pretrained_model_name_or_path"),dqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=a("code"),cqr=o("pretrained_model_name_or_path"),fqr=o(":"),mqr=l(),XCe=a("ul"),z5=a("li"),zCe=a("strong"),gqr=o("vision-encoder-decoder"),hqr=o(" \u2014 "),IZ=a("a"),pqr=o("TFVisionEncoderDecoderModel"),_qr=o(" (Vision Encoder decoder model)"),uqr=l(),F(Q5.$$.fragment),wze=l(),Xc=a("h2"),W5=a("a"),QCe=a("span"),F(o$.$$.fragment),bqr=l(),WCe=a("span"),vqr=o("TFAutoModelForSpeechSeq2Seq"),Aze=l(),hr=a("div"),F(r$.$$.fragment),Fqr=l(),zc=a("p"),Tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qZ=a("a"),Mqr=o("from_pretrained()"),Eqr=o(" class method or the "),jZ=a("a"),Cqr=o("from_config()"),wqr=o(` class
method.`),Aqr=l(),t$=a("p"),Lqr=o("This class cannot be instantiated directly using "),HCe=a("code"),yqr=o("__init__()"),xqr=o(" (throws an error)."),$qr=l(),zt=a("div"),F(a$.$$.fragment),kqr=l(),UCe=a("p"),Sqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rqr=l(),Qc=a("p"),Pqr=o(`Note:
Loading a model from its configuration file does `),JCe=a("strong"),Bqr=o("not"),Nqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),Iqr=o("from_pretrained()"),qqr=o(" to load the model weights."),jqr=l(),F(H5.$$.fragment),Dqr=l(),Or=a("div"),F(n$.$$.fragment),Gqr=l(),YCe=a("p"),Oqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vqr=l(),Fn=a("p"),Xqr=o("The model class to instantiate is selected based on the "),KCe=a("code"),zqr=o("model_type"),Qqr=o(` property of the config object (either
passed as an argument or loaded from `),ZCe=a("code"),Wqr=o("pretrained_model_name_or_path"),Hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),Uqr=o("pretrained_model_name_or_path"),Jqr=o(":"),Yqr=l(),o5e=a("ul"),U5=a("li"),r5e=a("strong"),Kqr=o("speech_to_text"),Zqr=o(" \u2014 "),GZ=a("a"),ejr=o("TFSpeech2TextForConditionalGeneration"),ojr=o(" (Speech2Text model)"),rjr=l(),F(J5.$$.fragment),Lze=l(),Wc=a("h2"),Y5=a("a"),t5e=a("span"),F(s$.$$.fragment),tjr=l(),a5e=a("span"),ajr=o("FlaxAutoModel"),yze=l(),pr=a("div"),F(l$.$$.fragment),njr=l(),Hc=a("p"),sjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OZ=a("a"),ljr=o("from_pretrained()"),ijr=o(" class method or the "),VZ=a("a"),djr=o("from_config()"),cjr=o(` class
method.`),fjr=l(),i$=a("p"),mjr=o("This class cannot be instantiated directly using "),n5e=a("code"),gjr=o("__init__()"),hjr=o(" (throws an error)."),pjr=l(),Qt=a("div"),F(d$.$$.fragment),_jr=l(),s5e=a("p"),ujr=o("Instantiates one of the base model classes of the library from a configuration."),bjr=l(),Uc=a("p"),vjr=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),Fjr=o("not"),Tjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),Mjr=o("from_pretrained()"),Ejr=o(" to load the model weights."),Cjr=l(),F(K5.$$.fragment),wjr=l(),Vr=a("div"),F(c$.$$.fragment),Ajr=l(),i5e=a("p"),Ljr=o("Instantiate one of the base model classes of the library from a pretrained model."),yjr=l(),Tn=a("p"),xjr=o("The model class to instantiate is selected based on the "),d5e=a("code"),$jr=o("model_type"),kjr=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(":"),Njr=l(),oe=a("ul"),Z5=a("li"),m5e=a("strong"),Ijr=o("albert"),qjr=o(" \u2014 "),zZ=a("a"),jjr=o("FlaxAlbertModel"),Djr=o(" (ALBERT model)"),Gjr=l(),e0=a("li"),g5e=a("strong"),Ojr=o("bart"),Vjr=o(" \u2014 "),QZ=a("a"),Xjr=o("FlaxBartModel"),zjr=o(" (BART model)"),Qjr=l(),o0=a("li"),h5e=a("strong"),Wjr=o("beit"),Hjr=o(" \u2014 "),WZ=a("a"),Ujr=o("FlaxBeitModel"),Jjr=o(" (BEiT model)"),Yjr=l(),r0=a("li"),p5e=a("strong"),Kjr=o("bert"),Zjr=o(" \u2014 "),HZ=a("a"),eDr=o("FlaxBertModel"),oDr=o(" (BERT model)"),rDr=l(),t0=a("li"),_5e=a("strong"),tDr=o("big_bird"),aDr=o(" \u2014 "),UZ=a("a"),nDr=o("FlaxBigBirdModel"),sDr=o(" (BigBird model)"),lDr=l(),a0=a("li"),u5e=a("strong"),iDr=o("blenderbot"),dDr=o(" \u2014 "),JZ=a("a"),cDr=o("FlaxBlenderbotModel"),fDr=o(" (Blenderbot model)"),mDr=l(),n0=a("li"),b5e=a("strong"),gDr=o("blenderbot-small"),hDr=o(" \u2014 "),YZ=a("a"),pDr=o("FlaxBlenderbotSmallModel"),_Dr=o(" (BlenderbotSmall model)"),uDr=l(),s0=a("li"),v5e=a("strong"),bDr=o("clip"),vDr=o(" \u2014 "),KZ=a("a"),FDr=o("FlaxCLIPModel"),TDr=o(" (CLIP model)"),MDr=l(),l0=a("li"),F5e=a("strong"),EDr=o("distilbert"),CDr=o(" \u2014 "),ZZ=a("a"),wDr=o("FlaxDistilBertModel"),ADr=o(" (DistilBERT model)"),LDr=l(),i0=a("li"),T5e=a("strong"),yDr=o("electra"),xDr=o(" \u2014 "),eee=a("a"),$Dr=o("FlaxElectraModel"),kDr=o(" (ELECTRA model)"),SDr=l(),d0=a("li"),M5e=a("strong"),RDr=o("gpt2"),PDr=o(" \u2014 "),oee=a("a"),BDr=o("FlaxGPT2Model"),NDr=o(" (OpenAI GPT-2 model)"),IDr=l(),c0=a("li"),E5e=a("strong"),qDr=o("gpt_neo"),jDr=o(" \u2014 "),ree=a("a"),DDr=o("FlaxGPTNeoModel"),GDr=o(" (GPT Neo model)"),ODr=l(),f0=a("li"),C5e=a("strong"),VDr=o("gptj"),XDr=o(" \u2014 "),tee=a("a"),zDr=o("FlaxGPTJModel"),QDr=o(" (GPT-J model)"),WDr=l(),m0=a("li"),w5e=a("strong"),HDr=o("longt5"),UDr=o(" \u2014 "),aee=a("a"),JDr=o("FlaxLongT5Model"),YDr=o(" (LongT5 model)"),KDr=l(),g0=a("li"),A5e=a("strong"),ZDr=o("marian"),eGr=o(" \u2014 "),nee=a("a"),oGr=o("FlaxMarianModel"),rGr=o(" (Marian model)"),tGr=l(),h0=a("li"),L5e=a("strong"),aGr=o("mbart"),nGr=o(" \u2014 "),see=a("a"),sGr=o("FlaxMBartModel"),lGr=o(" (mBART model)"),iGr=l(),p0=a("li"),y5e=a("strong"),dGr=o("mt5"),cGr=o(" \u2014 "),lee=a("a"),fGr=o("FlaxMT5Model"),mGr=o(" (MT5 model)"),gGr=l(),_0=a("li"),x5e=a("strong"),hGr=o("opt"),pGr=o(" \u2014 "),iee=a("a"),_Gr=o("FlaxOPTModel"),uGr=o(" (OPT model)"),bGr=l(),u0=a("li"),$5e=a("strong"),vGr=o("pegasus"),FGr=o(" \u2014 "),dee=a("a"),TGr=o("FlaxPegasusModel"),MGr=o(" (Pegasus model)"),EGr=l(),b0=a("li"),k5e=a("strong"),CGr=o("roberta"),wGr=o(" \u2014 "),cee=a("a"),AGr=o("FlaxRobertaModel"),LGr=o(" (RoBERTa model)"),yGr=l(),v0=a("li"),S5e=a("strong"),xGr=o("roformer"),$Gr=o(" \u2014 "),fee=a("a"),kGr=o("FlaxRoFormerModel"),SGr=o(" (RoFormer model)"),RGr=l(),F0=a("li"),R5e=a("strong"),PGr=o("t5"),BGr=o(" \u2014 "),mee=a("a"),NGr=o("FlaxT5Model"),IGr=o(" (T5 model)"),qGr=l(),T0=a("li"),P5e=a("strong"),jGr=o("vision-text-dual-encoder"),DGr=o(" \u2014 "),gee=a("a"),GGr=o("FlaxVisionTextDualEncoderModel"),OGr=o(" (VisionTextDualEncoder model)"),VGr=l(),M0=a("li"),B5e=a("strong"),XGr=o("vit"),zGr=o(" \u2014 "),hee=a("a"),QGr=o("FlaxViTModel"),WGr=o(" (ViT model)"),HGr=l(),E0=a("li"),N5e=a("strong"),UGr=o("wav2vec2"),JGr=o(" \u2014 "),pee=a("a"),YGr=o("FlaxWav2Vec2Model"),KGr=o(" (Wav2Vec2 model)"),ZGr=l(),C0=a("li"),I5e=a("strong"),eOr=o("xglm"),oOr=o(" \u2014 "),_ee=a("a"),rOr=o("FlaxXGLMModel"),tOr=o(" (XGLM model)"),aOr=l(),w0=a("li"),q5e=a("strong"),nOr=o("xlm-roberta"),sOr=o(" \u2014 "),uee=a("a"),lOr=o("FlaxXLMRobertaModel"),iOr=o(" (XLM-RoBERTa model)"),dOr=l(),F(A0.$$.fragment),xze=l(),Jc=a("h2"),L0=a("a"),j5e=a("span"),F(f$.$$.fragment),cOr=l(),D5e=a("span"),fOr=o("FlaxAutoModelForCausalLM"),$ze=l(),_r=a("div"),F(m$.$$.fragment),mOr=l(),Yc=a("p"),gOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bee=a("a"),hOr=o("from_pretrained()"),pOr=o(" class method or the "),vee=a("a"),_Or=o("from_config()"),uOr=o(` class
method.`),bOr=l(),g$=a("p"),vOr=o("This class cannot be instantiated directly using "),G5e=a("code"),FOr=o("__init__()"),TOr=o(" (throws an error)."),MOr=l(),Wt=a("div"),F(h$.$$.fragment),EOr=l(),O5e=a("p"),COr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wOr=l(),Kc=a("p"),AOr=o(`Note:
Loading a model from its configuration file does `),V5e=a("strong"),LOr=o("not"),yOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("a"),xOr=o("from_pretrained()"),$Or=o(" to load the model weights."),kOr=l(),F(y0.$$.fragment),SOr=l(),Xr=a("div"),F(p$.$$.fragment),ROr=l(),X5e=a("p"),POr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BOr=l(),Mn=a("p"),NOr=o("The model class to instantiate is selected based on the "),z5e=a("code"),IOr=o("model_type"),qOr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),jOr=o("pretrained_model_name_or_path"),DOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),GOr=o("pretrained_model_name_or_path"),OOr=o(":"),VOr=l(),xe=a("ul"),x0=a("li"),H5e=a("strong"),XOr=o("bart"),zOr=o(" \u2014 "),Tee=a("a"),QOr=o("FlaxBartForCausalLM"),WOr=o(" (BART model)"),HOr=l(),$0=a("li"),U5e=a("strong"),UOr=o("bert"),JOr=o(" \u2014 "),Mee=a("a"),YOr=o("FlaxBertForCausalLM"),KOr=o(" (BERT model)"),ZOr=l(),k0=a("li"),J5e=a("strong"),eVr=o("big_bird"),oVr=o(" \u2014 "),Eee=a("a"),rVr=o("FlaxBigBirdForCausalLM"),tVr=o(" (BigBird model)"),aVr=l(),S0=a("li"),Y5e=a("strong"),nVr=o("electra"),sVr=o(" \u2014 "),Cee=a("a"),lVr=o("FlaxElectraForCausalLM"),iVr=o(" (ELECTRA model)"),dVr=l(),R0=a("li"),K5e=a("strong"),cVr=o("gpt2"),fVr=o(" \u2014 "),wee=a("a"),mVr=o("FlaxGPT2LMHeadModel"),gVr=o(" (OpenAI GPT-2 model)"),hVr=l(),P0=a("li"),Z5e=a("strong"),pVr=o("gpt_neo"),_Vr=o(" \u2014 "),Aee=a("a"),uVr=o("FlaxGPTNeoForCausalLM"),bVr=o(" (GPT Neo model)"),vVr=l(),B0=a("li"),e0e=a("strong"),FVr=o("gptj"),TVr=o(" \u2014 "),Lee=a("a"),MVr=o("FlaxGPTJForCausalLM"),EVr=o(" (GPT-J model)"),CVr=l(),N0=a("li"),o0e=a("strong"),wVr=o("opt"),AVr=o(" \u2014 "),yee=a("a"),LVr=o("FlaxOPTForCausalLM"),yVr=o(" (OPT model)"),xVr=l(),I0=a("li"),r0e=a("strong"),$Vr=o("roberta"),kVr=o(" \u2014 "),xee=a("a"),SVr=o("FlaxRobertaForCausalLM"),RVr=o(" (RoBERTa model)"),PVr=l(),q0=a("li"),t0e=a("strong"),BVr=o("xglm"),NVr=o(" \u2014 "),$ee=a("a"),IVr=o("FlaxXGLMForCausalLM"),qVr=o(" (XGLM model)"),jVr=l(),F(j0.$$.fragment),kze=l(),Zc=a("h2"),D0=a("a"),a0e=a("span"),F(_$.$$.fragment),DVr=l(),n0e=a("span"),GVr=o("FlaxAutoModelForPreTraining"),Sze=l(),ur=a("div"),F(u$.$$.fragment),OVr=l(),ef=a("p"),VVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kee=a("a"),XVr=o("from_pretrained()"),zVr=o(" class method or the "),See=a("a"),QVr=o("from_config()"),WVr=o(` class
method.`),HVr=l(),b$=a("p"),UVr=o("This class cannot be instantiated directly using "),s0e=a("code"),JVr=o("__init__()"),YVr=o(" (throws an error)."),KVr=l(),Ht=a("div"),F(v$.$$.fragment),ZVr=l(),l0e=a("p"),eXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oXr=l(),of=a("p"),rXr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),tXr=o("not"),aXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("a"),nXr=o("from_pretrained()"),sXr=o(" to load the model weights."),lXr=l(),F(G0.$$.fragment),iXr=l(),zr=a("div"),F(F$.$$.fragment),dXr=l(),d0e=a("p"),cXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fXr=l(),En=a("p"),mXr=o("The model class to instantiate is selected based on the "),c0e=a("code"),gXr=o("model_type"),hXr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),pXr=o("pretrained_model_name_or_path"),_Xr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),uXr=o("pretrained_model_name_or_path"),bXr=o(":"),vXr=l(),Ee=a("ul"),O0=a("li"),g0e=a("strong"),FXr=o("albert"),TXr=o(" \u2014 "),Pee=a("a"),MXr=o("FlaxAlbertForPreTraining"),EXr=o(" (ALBERT model)"),CXr=l(),V0=a("li"),h0e=a("strong"),wXr=o("bart"),AXr=o(" \u2014 "),Bee=a("a"),LXr=o("FlaxBartForConditionalGeneration"),yXr=o(" (BART model)"),xXr=l(),X0=a("li"),p0e=a("strong"),$Xr=o("bert"),kXr=o(" \u2014 "),Nee=a("a"),SXr=o("FlaxBertForPreTraining"),RXr=o(" (BERT model)"),PXr=l(),z0=a("li"),_0e=a("strong"),BXr=o("big_bird"),NXr=o(" \u2014 "),Iee=a("a"),IXr=o("FlaxBigBirdForPreTraining"),qXr=o(" (BigBird model)"),jXr=l(),Q0=a("li"),u0e=a("strong"),DXr=o("electra"),GXr=o(" \u2014 "),qee=a("a"),OXr=o("FlaxElectraForPreTraining"),VXr=o(" (ELECTRA model)"),XXr=l(),W0=a("li"),b0e=a("strong"),zXr=o("longt5"),QXr=o(" \u2014 "),jee=a("a"),WXr=o("FlaxLongT5ForConditionalGeneration"),HXr=o(" (LongT5 model)"),UXr=l(),H0=a("li"),v0e=a("strong"),JXr=o("mbart"),YXr=o(" \u2014 "),Dee=a("a"),KXr=o("FlaxMBartForConditionalGeneration"),ZXr=o(" (mBART model)"),ezr=l(),U0=a("li"),F0e=a("strong"),ozr=o("mt5"),rzr=o(" \u2014 "),Gee=a("a"),tzr=o("FlaxMT5ForConditionalGeneration"),azr=o(" (MT5 model)"),nzr=l(),J0=a("li"),T0e=a("strong"),szr=o("roberta"),lzr=o(" \u2014 "),Oee=a("a"),izr=o("FlaxRobertaForMaskedLM"),dzr=o(" (RoBERTa model)"),czr=l(),Y0=a("li"),M0e=a("strong"),fzr=o("roformer"),mzr=o(" \u2014 "),Vee=a("a"),gzr=o("FlaxRoFormerForMaskedLM"),hzr=o(" (RoFormer model)"),pzr=l(),K0=a("li"),E0e=a("strong"),_zr=o("t5"),uzr=o(" \u2014 "),Xee=a("a"),bzr=o("FlaxT5ForConditionalGeneration"),vzr=o(" (T5 model)"),Fzr=l(),Z0=a("li"),C0e=a("strong"),Tzr=o("wav2vec2"),Mzr=o(" \u2014 "),zee=a("a"),Ezr=o("FlaxWav2Vec2ForPreTraining"),Czr=o(" (Wav2Vec2 model)"),wzr=l(),ew=a("li"),w0e=a("strong"),Azr=o("xlm-roberta"),Lzr=o(" \u2014 "),Qee=a("a"),yzr=o("FlaxXLMRobertaForMaskedLM"),xzr=o(" (XLM-RoBERTa model)"),$zr=l(),F(ow.$$.fragment),Rze=l(),rf=a("h2"),rw=a("a"),A0e=a("span"),F(T$.$$.fragment),kzr=l(),L0e=a("span"),Szr=o("FlaxAutoModelForMaskedLM"),Pze=l(),br=a("div"),F(M$.$$.fragment),Rzr=l(),tf=a("p"),Pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Wee=a("a"),Bzr=o("from_pretrained()"),Nzr=o(" class method or the "),Hee=a("a"),Izr=o("from_config()"),qzr=o(` class
method.`),jzr=l(),E$=a("p"),Dzr=o("This class cannot be instantiated directly using "),y0e=a("code"),Gzr=o("__init__()"),Ozr=o(" (throws an error)."),Vzr=l(),Ut=a("div"),F(C$.$$.fragment),Xzr=l(),x0e=a("p"),zzr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qzr=l(),af=a("p"),Wzr=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),Hzr=o("not"),Uzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),Jzr=o("from_pretrained()"),Yzr=o(" to load the model weights."),Kzr=l(),F(tw.$$.fragment),Zzr=l(),Qr=a("div"),F(w$.$$.fragment),eQr=l(),k0e=a("p"),oQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rQr=l(),Cn=a("p"),tQr=o("The model class to instantiate is selected based on the "),S0e=a("code"),aQr=o("model_type"),nQr=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),sQr=o("pretrained_model_name_or_path"),lQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),iQr=o("pretrained_model_name_or_path"),dQr=o(":"),cQr=l(),$e=a("ul"),aw=a("li"),B0e=a("strong"),fQr=o("albert"),mQr=o(" \u2014 "),Jee=a("a"),gQr=o("FlaxAlbertForMaskedLM"),hQr=o(" (ALBERT model)"),pQr=l(),nw=a("li"),N0e=a("strong"),_Qr=o("bart"),uQr=o(" \u2014 "),Yee=a("a"),bQr=o("FlaxBartForConditionalGeneration"),vQr=o(" (BART model)"),FQr=l(),sw=a("li"),I0e=a("strong"),TQr=o("bert"),MQr=o(" \u2014 "),Kee=a("a"),EQr=o("FlaxBertForMaskedLM"),CQr=o(" (BERT model)"),wQr=l(),lw=a("li"),q0e=a("strong"),AQr=o("big_bird"),LQr=o(" \u2014 "),Zee=a("a"),yQr=o("FlaxBigBirdForMaskedLM"),xQr=o(" (BigBird model)"),$Qr=l(),iw=a("li"),j0e=a("strong"),kQr=o("distilbert"),SQr=o(" \u2014 "),eoe=a("a"),RQr=o("FlaxDistilBertForMaskedLM"),PQr=o(" (DistilBERT model)"),BQr=l(),dw=a("li"),D0e=a("strong"),NQr=o("electra"),IQr=o(" \u2014 "),ooe=a("a"),qQr=o("FlaxElectraForMaskedLM"),jQr=o(" (ELECTRA model)"),DQr=l(),cw=a("li"),G0e=a("strong"),GQr=o("mbart"),OQr=o(" \u2014 "),roe=a("a"),VQr=o("FlaxMBartForConditionalGeneration"),XQr=o(" (mBART model)"),zQr=l(),fw=a("li"),O0e=a("strong"),QQr=o("roberta"),WQr=o(" \u2014 "),toe=a("a"),HQr=o("FlaxRobertaForMaskedLM"),UQr=o(" (RoBERTa model)"),JQr=l(),mw=a("li"),V0e=a("strong"),YQr=o("roformer"),KQr=o(" \u2014 "),aoe=a("a"),ZQr=o("FlaxRoFormerForMaskedLM"),eWr=o(" (RoFormer model)"),oWr=l(),gw=a("li"),X0e=a("strong"),rWr=o("xlm-roberta"),tWr=o(" \u2014 "),noe=a("a"),aWr=o("FlaxXLMRobertaForMaskedLM"),nWr=o(" (XLM-RoBERTa model)"),sWr=l(),F(hw.$$.fragment),Bze=l(),nf=a("h2"),pw=a("a"),z0e=a("span"),F(A$.$$.fragment),lWr=l(),Q0e=a("span"),iWr=o("FlaxAutoModelForSeq2SeqLM"),Nze=l(),vr=a("div"),F(L$.$$.fragment),dWr=l(),sf=a("p"),cWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),soe=a("a"),fWr=o("from_pretrained()"),mWr=o(" class method or the "),loe=a("a"),gWr=o("from_config()"),hWr=o(` class
method.`),pWr=l(),y$=a("p"),_Wr=o("This class cannot be instantiated directly using "),W0e=a("code"),uWr=o("__init__()"),bWr=o(" (throws an error)."),vWr=l(),Jt=a("div"),F(x$.$$.fragment),FWr=l(),H0e=a("p"),TWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MWr=l(),lf=a("p"),EWr=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),CWr=o("not"),wWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("a"),AWr=o("from_pretrained()"),LWr=o(" to load the model weights."),yWr=l(),F(_w.$$.fragment),xWr=l(),Wr=a("div"),F($$.$$.fragment),$Wr=l(),J0e=a("p"),kWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SWr=l(),wn=a("p"),RWr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),PWr=o("model_type"),BWr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),NWr=o("pretrained_model_name_or_path"),IWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),qWr=o("pretrained_model_name_or_path"),jWr=o(":"),DWr=l(),ke=a("ul"),uw=a("li"),ewe=a("strong"),GWr=o("bart"),OWr=o(" \u2014 "),doe=a("a"),VWr=o("FlaxBartForConditionalGeneration"),XWr=o(" (BART model)"),zWr=l(),bw=a("li"),owe=a("strong"),QWr=o("blenderbot"),WWr=o(" \u2014 "),coe=a("a"),HWr=o("FlaxBlenderbotForConditionalGeneration"),UWr=o(" (Blenderbot model)"),JWr=l(),vw=a("li"),rwe=a("strong"),YWr=o("blenderbot-small"),KWr=o(" \u2014 "),foe=a("a"),ZWr=o("FlaxBlenderbotSmallForConditionalGeneration"),eHr=o(" (BlenderbotSmall model)"),oHr=l(),Fw=a("li"),twe=a("strong"),rHr=o("encoder-decoder"),tHr=o(" \u2014 "),moe=a("a"),aHr=o("FlaxEncoderDecoderModel"),nHr=o(" (Encoder decoder model)"),sHr=l(),Tw=a("li"),awe=a("strong"),lHr=o("longt5"),iHr=o(" \u2014 "),goe=a("a"),dHr=o("FlaxLongT5ForConditionalGeneration"),cHr=o(" (LongT5 model)"),fHr=l(),Mw=a("li"),nwe=a("strong"),mHr=o("marian"),gHr=o(" \u2014 "),hoe=a("a"),hHr=o("FlaxMarianMTModel"),pHr=o(" (Marian model)"),_Hr=l(),Ew=a("li"),swe=a("strong"),uHr=o("mbart"),bHr=o(" \u2014 "),poe=a("a"),vHr=o("FlaxMBartForConditionalGeneration"),FHr=o(" (mBART model)"),THr=l(),Cw=a("li"),lwe=a("strong"),MHr=o("mt5"),EHr=o(" \u2014 "),_oe=a("a"),CHr=o("FlaxMT5ForConditionalGeneration"),wHr=o(" (MT5 model)"),AHr=l(),ww=a("li"),iwe=a("strong"),LHr=o("pegasus"),yHr=o(" \u2014 "),uoe=a("a"),xHr=o("FlaxPegasusForConditionalGeneration"),$Hr=o(" (Pegasus model)"),kHr=l(),Aw=a("li"),dwe=a("strong"),SHr=o("t5"),RHr=o(" \u2014 "),boe=a("a"),PHr=o("FlaxT5ForConditionalGeneration"),BHr=o(" (T5 model)"),NHr=l(),F(Lw.$$.fragment),Ize=l(),df=a("h2"),yw=a("a"),cwe=a("span"),F(k$.$$.fragment),IHr=l(),fwe=a("span"),qHr=o("FlaxAutoModelForSequenceClassification"),qze=l(),Fr=a("div"),F(S$.$$.fragment),jHr=l(),cf=a("p"),DHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),voe=a("a"),GHr=o("from_pretrained()"),OHr=o(" class method or the "),Foe=a("a"),VHr=o("from_config()"),XHr=o(` class
method.`),zHr=l(),R$=a("p"),QHr=o("This class cannot be instantiated directly using "),mwe=a("code"),WHr=o("__init__()"),HHr=o(" (throws an error)."),UHr=l(),Yt=a("div"),F(P$.$$.fragment),JHr=l(),gwe=a("p"),YHr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KHr=l(),ff=a("p"),ZHr=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),eUr=o("not"),oUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),rUr=o("from_pretrained()"),tUr=o(" to load the model weights."),aUr=l(),F(xw.$$.fragment),nUr=l(),Hr=a("div"),F(B$.$$.fragment),sUr=l(),pwe=a("p"),lUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iUr=l(),An=a("p"),dUr=o("The model class to instantiate is selected based on the "),_we=a("code"),cUr=o("model_type"),fUr=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),mUr=o("pretrained_model_name_or_path"),gUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),hUr=o("pretrained_model_name_or_path"),pUr=o(":"),_Ur=l(),Se=a("ul"),$w=a("li"),vwe=a("strong"),uUr=o("albert"),bUr=o(" \u2014 "),Moe=a("a"),vUr=o("FlaxAlbertForSequenceClassification"),FUr=o(" (ALBERT model)"),TUr=l(),kw=a("li"),Fwe=a("strong"),MUr=o("bart"),EUr=o(" \u2014 "),Eoe=a("a"),CUr=o("FlaxBartForSequenceClassification"),wUr=o(" (BART model)"),AUr=l(),Sw=a("li"),Twe=a("strong"),LUr=o("bert"),yUr=o(" \u2014 "),Coe=a("a"),xUr=o("FlaxBertForSequenceClassification"),$Ur=o(" (BERT model)"),kUr=l(),Rw=a("li"),Mwe=a("strong"),SUr=o("big_bird"),RUr=o(" \u2014 "),woe=a("a"),PUr=o("FlaxBigBirdForSequenceClassification"),BUr=o(" (BigBird model)"),NUr=l(),Pw=a("li"),Ewe=a("strong"),IUr=o("distilbert"),qUr=o(" \u2014 "),Aoe=a("a"),jUr=o("FlaxDistilBertForSequenceClassification"),DUr=o(" (DistilBERT model)"),GUr=l(),Bw=a("li"),Cwe=a("strong"),OUr=o("electra"),VUr=o(" \u2014 "),Loe=a("a"),XUr=o("FlaxElectraForSequenceClassification"),zUr=o(" (ELECTRA model)"),QUr=l(),Nw=a("li"),wwe=a("strong"),WUr=o("mbart"),HUr=o(" \u2014 "),yoe=a("a"),UUr=o("FlaxMBartForSequenceClassification"),JUr=o(" (mBART model)"),YUr=l(),Iw=a("li"),Awe=a("strong"),KUr=o("roberta"),ZUr=o(" \u2014 "),xoe=a("a"),eJr=o("FlaxRobertaForSequenceClassification"),oJr=o(" (RoBERTa model)"),rJr=l(),qw=a("li"),Lwe=a("strong"),tJr=o("roformer"),aJr=o(" \u2014 "),$oe=a("a"),nJr=o("FlaxRoFormerForSequenceClassification"),sJr=o(" (RoFormer model)"),lJr=l(),jw=a("li"),ywe=a("strong"),iJr=o("xlm-roberta"),dJr=o(" \u2014 "),koe=a("a"),cJr=o("FlaxXLMRobertaForSequenceClassification"),fJr=o(" (XLM-RoBERTa model)"),mJr=l(),F(Dw.$$.fragment),jze=l(),mf=a("h2"),Gw=a("a"),xwe=a("span"),F(N$.$$.fragment),gJr=l(),$we=a("span"),hJr=o("FlaxAutoModelForQuestionAnswering"),Dze=l(),Tr=a("div"),F(I$.$$.fragment),pJr=l(),gf=a("p"),_Jr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Soe=a("a"),uJr=o("from_pretrained()"),bJr=o(" class method or the "),Roe=a("a"),vJr=o("from_config()"),FJr=o(` class
method.`),TJr=l(),q$=a("p"),MJr=o("This class cannot be instantiated directly using "),kwe=a("code"),EJr=o("__init__()"),CJr=o(" (throws an error)."),wJr=l(),Kt=a("div"),F(j$.$$.fragment),AJr=l(),Swe=a("p"),LJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yJr=l(),hf=a("p"),xJr=o(`Note:
Loading a model from its configuration file does `),Rwe=a("strong"),$Jr=o("not"),kJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=a("a"),SJr=o("from_pretrained()"),RJr=o(" to load the model weights."),PJr=l(),F(Ow.$$.fragment),BJr=l(),Ur=a("div"),F(D$.$$.fragment),NJr=l(),Pwe=a("p"),IJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qJr=l(),Ln=a("p"),jJr=o("The model class to instantiate is selected based on the "),Bwe=a("code"),DJr=o("model_type"),GJr=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),OJr=o("pretrained_model_name_or_path"),VJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=a("code"),XJr=o("pretrained_model_name_or_path"),zJr=o(":"),QJr=l(),Re=a("ul"),Vw=a("li"),qwe=a("strong"),WJr=o("albert"),HJr=o(" \u2014 "),Boe=a("a"),UJr=o("FlaxAlbertForQuestionAnswering"),JJr=o(" (ALBERT model)"),YJr=l(),Xw=a("li"),jwe=a("strong"),KJr=o("bart"),ZJr=o(" \u2014 "),Noe=a("a"),eYr=o("FlaxBartForQuestionAnswering"),oYr=o(" (BART model)"),rYr=l(),zw=a("li"),Dwe=a("strong"),tYr=o("bert"),aYr=o(" \u2014 "),Ioe=a("a"),nYr=o("FlaxBertForQuestionAnswering"),sYr=o(" (BERT model)"),lYr=l(),Qw=a("li"),Gwe=a("strong"),iYr=o("big_bird"),dYr=o(" \u2014 "),qoe=a("a"),cYr=o("FlaxBigBirdForQuestionAnswering"),fYr=o(" (BigBird model)"),mYr=l(),Ww=a("li"),Owe=a("strong"),gYr=o("distilbert"),hYr=o(" \u2014 "),joe=a("a"),pYr=o("FlaxDistilBertForQuestionAnswering"),_Yr=o(" (DistilBERT model)"),uYr=l(),Hw=a("li"),Vwe=a("strong"),bYr=o("electra"),vYr=o(" \u2014 "),Doe=a("a"),FYr=o("FlaxElectraForQuestionAnswering"),TYr=o(" (ELECTRA model)"),MYr=l(),Uw=a("li"),Xwe=a("strong"),EYr=o("mbart"),CYr=o(" \u2014 "),Goe=a("a"),wYr=o("FlaxMBartForQuestionAnswering"),AYr=o(" (mBART model)"),LYr=l(),Jw=a("li"),zwe=a("strong"),yYr=o("roberta"),xYr=o(" \u2014 "),Ooe=a("a"),$Yr=o("FlaxRobertaForQuestionAnswering"),kYr=o(" (RoBERTa model)"),SYr=l(),Yw=a("li"),Qwe=a("strong"),RYr=o("roformer"),PYr=o(" \u2014 "),Voe=a("a"),BYr=o("FlaxRoFormerForQuestionAnswering"),NYr=o(" (RoFormer model)"),IYr=l(),Kw=a("li"),Wwe=a("strong"),qYr=o("xlm-roberta"),jYr=o(" \u2014 "),Xoe=a("a"),DYr=o("FlaxXLMRobertaForQuestionAnswering"),GYr=o(" (XLM-RoBERTa model)"),OYr=l(),F(Zw.$$.fragment),Gze=l(),pf=a("h2"),eA=a("a"),Hwe=a("span"),F(G$.$$.fragment),VYr=l(),Uwe=a("span"),XYr=o("FlaxAutoModelForTokenClassification"),Oze=l(),Mr=a("div"),F(O$.$$.fragment),zYr=l(),_f=a("p"),QYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zoe=a("a"),WYr=o("from_pretrained()"),HYr=o(" class method or the "),Qoe=a("a"),UYr=o("from_config()"),JYr=o(` class
method.`),YYr=l(),V$=a("p"),KYr=o("This class cannot be instantiated directly using "),Jwe=a("code"),ZYr=o("__init__()"),eKr=o(" (throws an error)."),oKr=l(),Zt=a("div"),F(X$.$$.fragment),rKr=l(),Ywe=a("p"),tKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aKr=l(),uf=a("p"),nKr=o(`Note:
Loading a model from its configuration file does `),Kwe=a("strong"),sKr=o("not"),lKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=a("a"),iKr=o("from_pretrained()"),dKr=o(" to load the model weights."),cKr=l(),F(oA.$$.fragment),fKr=l(),Jr=a("div"),F(z$.$$.fragment),mKr=l(),Zwe=a("p"),gKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hKr=l(),yn=a("p"),pKr=o("The model class to instantiate is selected based on the "),eAe=a("code"),_Kr=o("model_type"),uKr=o(` property of the config object (either
passed as an argument or loaded from `),oAe=a("code"),bKr=o("pretrained_model_name_or_path"),vKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rAe=a("code"),FKr=o("pretrained_model_name_or_path"),TKr=o(":"),MKr=l(),Ve=a("ul"),rA=a("li"),tAe=a("strong"),EKr=o("albert"),CKr=o(" \u2014 "),Hoe=a("a"),wKr=o("FlaxAlbertForTokenClassification"),AKr=o(" (ALBERT model)"),LKr=l(),tA=a("li"),aAe=a("strong"),yKr=o("bert"),xKr=o(" \u2014 "),Uoe=a("a"),$Kr=o("FlaxBertForTokenClassification"),kKr=o(" (BERT model)"),SKr=l(),aA=a("li"),nAe=a("strong"),RKr=o("big_bird"),PKr=o(" \u2014 "),Joe=a("a"),BKr=o("FlaxBigBirdForTokenClassification"),NKr=o(" (BigBird model)"),IKr=l(),nA=a("li"),sAe=a("strong"),qKr=o("distilbert"),jKr=o(" \u2014 "),Yoe=a("a"),DKr=o("FlaxDistilBertForTokenClassification"),GKr=o(" (DistilBERT model)"),OKr=l(),sA=a("li"),lAe=a("strong"),VKr=o("electra"),XKr=o(" \u2014 "),Koe=a("a"),zKr=o("FlaxElectraForTokenClassification"),QKr=o(" (ELECTRA model)"),WKr=l(),lA=a("li"),iAe=a("strong"),HKr=o("roberta"),UKr=o(" \u2014 "),Zoe=a("a"),JKr=o("FlaxRobertaForTokenClassification"),YKr=o(" (RoBERTa model)"),KKr=l(),iA=a("li"),dAe=a("strong"),ZKr=o("roformer"),eZr=o(" \u2014 "),ere=a("a"),oZr=o("FlaxRoFormerForTokenClassification"),rZr=o(" (RoFormer model)"),tZr=l(),dA=a("li"),cAe=a("strong"),aZr=o("xlm-roberta"),nZr=o(" \u2014 "),ore=a("a"),sZr=o("FlaxXLMRobertaForTokenClassification"),lZr=o(" (XLM-RoBERTa model)"),iZr=l(),F(cA.$$.fragment),Vze=l(),bf=a("h2"),fA=a("a"),fAe=a("span"),F(Q$.$$.fragment),dZr=l(),mAe=a("span"),cZr=o("FlaxAutoModelForMultipleChoice"),Xze=l(),Er=a("div"),F(W$.$$.fragment),fZr=l(),vf=a("p"),mZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rre=a("a"),gZr=o("from_pretrained()"),hZr=o(" class method or the "),tre=a("a"),pZr=o("from_config()"),_Zr=o(` class
method.`),uZr=l(),H$=a("p"),bZr=o("This class cannot be instantiated directly using "),gAe=a("code"),vZr=o("__init__()"),FZr=o(" (throws an error)."),TZr=l(),ea=a("div"),F(U$.$$.fragment),MZr=l(),hAe=a("p"),EZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CZr=l(),Ff=a("p"),wZr=o(`Note:
Loading a model from its configuration file does `),pAe=a("strong"),AZr=o("not"),LZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),are=a("a"),yZr=o("from_pretrained()"),xZr=o(" to load the model weights."),$Zr=l(),F(mA.$$.fragment),kZr=l(),Yr=a("div"),F(J$.$$.fragment),SZr=l(),_Ae=a("p"),RZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PZr=l(),xn=a("p"),BZr=o("The model class to instantiate is selected based on the "),uAe=a("code"),NZr=o("model_type"),IZr=o(` property of the config object (either
passed as an argument or loaded from `),bAe=a("code"),qZr=o("pretrained_model_name_or_path"),jZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vAe=a("code"),DZr=o("pretrained_model_name_or_path"),GZr=o(":"),OZr=l(),Xe=a("ul"),gA=a("li"),FAe=a("strong"),VZr=o("albert"),XZr=o(" \u2014 "),nre=a("a"),zZr=o("FlaxAlbertForMultipleChoice"),QZr=o(" (ALBERT model)"),WZr=l(),hA=a("li"),TAe=a("strong"),HZr=o("bert"),UZr=o(" \u2014 "),sre=a("a"),JZr=o("FlaxBertForMultipleChoice"),YZr=o(" (BERT model)"),KZr=l(),pA=a("li"),MAe=a("strong"),ZZr=o("big_bird"),eet=o(" \u2014 "),lre=a("a"),oet=o("FlaxBigBirdForMultipleChoice"),ret=o(" (BigBird model)"),tet=l(),_A=a("li"),EAe=a("strong"),aet=o("distilbert"),net=o(" \u2014 "),ire=a("a"),set=o("FlaxDistilBertForMultipleChoice"),iet=o(" (DistilBERT model)"),det=l(),uA=a("li"),CAe=a("strong"),cet=o("electra"),fet=o(" \u2014 "),dre=a("a"),met=o("FlaxElectraForMultipleChoice"),get=o(" (ELECTRA model)"),het=l(),bA=a("li"),wAe=a("strong"),pet=o("roberta"),_et=o(" \u2014 "),cre=a("a"),uet=o("FlaxRobertaForMultipleChoice"),bet=o(" (RoBERTa model)"),vet=l(),vA=a("li"),AAe=a("strong"),Fet=o("roformer"),Tet=o(" \u2014 "),fre=a("a"),Met=o("FlaxRoFormerForMultipleChoice"),Eet=o(" (RoFormer model)"),Cet=l(),FA=a("li"),LAe=a("strong"),wet=o("xlm-roberta"),Aet=o(" \u2014 "),mre=a("a"),Let=o("FlaxXLMRobertaForMultipleChoice"),yet=o(" (XLM-RoBERTa model)"),xet=l(),F(TA.$$.fragment),zze=l(),Tf=a("h2"),MA=a("a"),yAe=a("span"),F(Y$.$$.fragment),$et=l(),xAe=a("span"),ket=o("FlaxAutoModelForNextSentencePrediction"),Qze=l(),Cr=a("div"),F(K$.$$.fragment),Set=l(),Mf=a("p"),Ret=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gre=a("a"),Pet=o("from_pretrained()"),Bet=o(" class method or the "),hre=a("a"),Net=o("from_config()"),Iet=o(` class
method.`),qet=l(),Z$=a("p"),jet=o("This class cannot be instantiated directly using "),$Ae=a("code"),Det=o("__init__()"),Get=o(" (throws an error)."),Oet=l(),oa=a("div"),F(ek.$$.fragment),Vet=l(),kAe=a("p"),Xet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zet=l(),Ef=a("p"),Qet=o(`Note:
Loading a model from its configuration file does `),SAe=a("strong"),Wet=o("not"),Het=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=a("a"),Uet=o("from_pretrained()"),Jet=o(" to load the model weights."),Yet=l(),F(EA.$$.fragment),Ket=l(),Kr=a("div"),F(ok.$$.fragment),Zet=l(),RAe=a("p"),eot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oot=l(),$n=a("p"),rot=o("The model class to instantiate is selected based on the "),PAe=a("code"),tot=o("model_type"),aot=o(` property of the config object (either
passed as an argument or loaded from `),BAe=a("code"),not=o("pretrained_model_name_or_path"),sot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=a("code"),lot=o("pretrained_model_name_or_path"),iot=o(":"),dot=l(),IAe=a("ul"),CA=a("li"),qAe=a("strong"),cot=o("bert"),fot=o(" \u2014 "),_re=a("a"),mot=o("FlaxBertForNextSentencePrediction"),got=o(" (BERT model)"),hot=l(),F(wA.$$.fragment),Wze=l(),Cf=a("h2"),AA=a("a"),jAe=a("span"),F(rk.$$.fragment),pot=l(),DAe=a("span"),_ot=o("FlaxAutoModelForImageClassification"),Hze=l(),wr=a("div"),F(tk.$$.fragment),uot=l(),wf=a("p"),bot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ure=a("a"),vot=o("from_pretrained()"),Fot=o(" class method or the "),bre=a("a"),Tot=o("from_config()"),Mot=o(` class
method.`),Eot=l(),ak=a("p"),Cot=o("This class cannot be instantiated directly using "),GAe=a("code"),wot=o("__init__()"),Aot=o(" (throws an error)."),Lot=l(),ra=a("div"),F(nk.$$.fragment),yot=l(),OAe=a("p"),xot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$ot=l(),Af=a("p"),kot=o(`Note:
Loading a model from its configuration file does `),VAe=a("strong"),Sot=o("not"),Rot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),Pot=o("from_pretrained()"),Bot=o(" to load the model weights."),Not=l(),F(LA.$$.fragment),Iot=l(),Zr=a("div"),F(sk.$$.fragment),qot=l(),XAe=a("p"),jot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dot=l(),kn=a("p"),Got=o("The model class to instantiate is selected based on the "),zAe=a("code"),Oot=o("model_type"),Vot=o(` property of the config object (either
passed as an argument or loaded from `),QAe=a("code"),Xot=o("pretrained_model_name_or_path"),zot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WAe=a("code"),Qot=o("pretrained_model_name_or_path"),Wot=o(":"),Hot=l(),lk=a("ul"),yA=a("li"),HAe=a("strong"),Uot=o("beit"),Jot=o(" \u2014 "),Fre=a("a"),Yot=o("FlaxBeitForImageClassification"),Kot=o(" (BEiT model)"),Zot=l(),xA=a("li"),UAe=a("strong"),ert=o("vit"),ort=o(" \u2014 "),Tre=a("a"),rrt=o("FlaxViTForImageClassification"),trt=o(" (ViT model)"),art=l(),F($A.$$.fragment),Uze=l(),Lf=a("h2"),kA=a("a"),JAe=a("span"),F(ik.$$.fragment),nrt=l(),YAe=a("span"),srt=o("FlaxAutoModelForVision2Seq"),Jze=l(),Ar=a("div"),F(dk.$$.fragment),lrt=l(),yf=a("p"),irt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mre=a("a"),drt=o("from_pretrained()"),crt=o(" class method or the "),Ere=a("a"),frt=o("from_config()"),mrt=o(` class
method.`),grt=l(),ck=a("p"),hrt=o("This class cannot be instantiated directly using "),KAe=a("code"),prt=o("__init__()"),_rt=o(" (throws an error)."),urt=l(),ta=a("div"),F(fk.$$.fragment),brt=l(),ZAe=a("p"),vrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Frt=l(),xf=a("p"),Trt=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),Mrt=o("not"),Ert=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),Crt=o("from_pretrained()"),wrt=o(" to load the model weights."),Art=l(),F(SA.$$.fragment),Lrt=l(),et=a("div"),F(mk.$$.fragment),yrt=l(),o6e=a("p"),xrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$rt=l(),Sn=a("p"),krt=o("The model class to instantiate is selected based on the "),r6e=a("code"),Srt=o("model_type"),Rrt=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),Prt=o("pretrained_model_name_or_path"),Brt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),Nrt=o("pretrained_model_name_or_path"),Irt=o(":"),qrt=l(),n6e=a("ul"),RA=a("li"),s6e=a("strong"),jrt=o("vision-encoder-decoder"),Drt=o(" \u2014 "),wre=a("a"),Grt=o("FlaxVisionEncoderDecoderModel"),Ort=o(" (Vision Encoder decoder model)"),Vrt=l(),F(PA.$$.fragment),this.h()},l(f){const u=bQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var gk=s(p);m=n(gk,"A",{id:!0,class:!0,href:!0});var l6e=s(m);_=n(l6e,"SPAN",{});var i6e=s(_);T(d.$$.fragment,i6e),i6e.forEach(t),l6e.forEach(t),h=i(gk),Eo=n(gk,"SPAN",{});var d6e=s(Eo);Ai=r(d6e,"Auto Classes"),d6e.forEach(t),gk.forEach(t),Rf=i(f),st=n(f,"P",{});var hk=s(st);Li=r(hk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(hk,"CODE",{});var c6e=s(yi);Z7=r(c6e,"from_pretrained()"),c6e.forEach(t),Pf=r(hk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),hk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var f6e=s(Pn);eL=r(f6e,"AutoConfig"),f6e.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var m6e=s(Nn);oL=r(m6e,"AutoModel"),m6e.forEach(t),$i=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var g6e=s(In);rL=r(g6e,"AutoTokenizer"),g6e.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var pk=s(Ae);RS=r(pk,"will create a model that is an instance of "),Si=n(pk,"A",{href:!0});var h6e=s(Si);PS=r(h6e,"BertModel"),h6e.forEach(t),BS=r(pk,"."),pk.forEach(t),Co=i(f),Ra=n(f,"P",{});var _k=s(Ra);NS=r(_k,"There is one class of "),Nf=n(_k,"CODE",{});var p6e=s(Nf);IS=r(p6e,"AutoModel"),p6e.forEach(t),lHe=r(_k," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_k.forEach(t),QVe=i(f),Ri=n(f,"H2",{class:!0});var uk=s(Ri);If=n(uk,"A",{id:!0,class:!0,href:!0});var _6e=s(If);Fae=n(_6e,"SPAN",{});var u6e=s(Fae);T(tL.$$.fragment,u6e),u6e.forEach(t),_6e.forEach(t),iHe=i(uk),Tae=n(uk,"SPAN",{});var b6e=s(Tae);dHe=r(b6e,"Extending the Auto Classes"),b6e.forEach(t),uk.forEach(t),WVe=i(f),qn=n(f,"P",{});var $f=s(qn);cHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mae=n($f,"CODE",{});var v6e=s(Mae);fHe=r(v6e,"NewModel"),v6e.forEach(t),mHe=r($f,", make sure you have a "),Eae=n($f,"CODE",{});var F6e=s(Eae);gHe=r(F6e,"NewModelConfig"),F6e.forEach(t),hHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),HVe=i(f),T(aL.$$.fragment,f),UVe=i(f),qS=n(f,"P",{});var T6e=s(qS);pHe=r(T6e,"You will then be able to use the auto classes like you would usually do!"),T6e.forEach(t),JVe=i(f),T(qf.$$.fragment,f),YVe=i(f),Pi=n(f,"H2",{class:!0});var bk=s(Pi);jf=n(bk,"A",{id:!0,class:!0,href:!0});var M6e=s(jf);Cae=n(M6e,"SPAN",{});var E6e=s(Cae);T(nL.$$.fragment,E6e),E6e.forEach(t),M6e.forEach(t),_He=i(bk),wae=n(bk,"SPAN",{});var C6e=s(wae);uHe=r(C6e,"AutoConfig"),C6e.forEach(t),bk.forEach(t),KVe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(sL.$$.fragment,at),bHe=i(at),lL=n(at,"P",{});var vk=s(lL);vHe=r(vk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),jS=n(vk,"A",{href:!0});var w6e=s(jS);FHe=r(w6e,"from_pretrained()"),w6e.forEach(t),THe=r(vk," class method."),vk.forEach(t),MHe=i(at),iL=n(at,"P",{});var Fk=s(iL);EHe=r(Fk,"This class cannot be instantiated directly using "),Aae=n(Fk,"CODE",{});var A6e=s(Aae);CHe=r(A6e,"__init__()"),A6e.forEach(t),wHe=r(Fk," (throws an error)."),Fk.forEach(t),AHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(dL.$$.fragment,nt),LHe=i(nt),Lae=n(nt,"P",{});var L6e=s(Lae);yHe=r(L6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),L6e.forEach(t),xHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);$He=r(kf,"The configuration class to instantiate is selected based on the "),yae=n(kf,"CODE",{});var y6e=s(yae);kHe=r(y6e,"model_type"),y6e.forEach(t),SHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xae=n(kf,"CODE",{});var x6e=s(xae);RHe=r(x6e,"pretrained_model_name_or_path"),x6e.forEach(t),PHe=r(kf,":"),kf.forEach(t),BHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var BA=s(Df);$ae=n(BA,"STRONG",{});var $6e=s($ae);NHe=r($6e,"albert"),$6e.forEach(t),IHe=r(BA," \u2014 "),DS=n(BA,"A",{href:!0});var k6e=s(DS);qHe=r(k6e,"AlbertConfig"),k6e.forEach(t),jHe=r(BA," (ALBERT model)"),BA.forEach(t),DHe=i(L),Gf=n(L,"LI",{});var NA=s(Gf);kae=n(NA,"STRONG",{});var S6e=s(kae);GHe=r(S6e,"bart"),S6e.forEach(t),OHe=r(NA," \u2014 "),GS=n(NA,"A",{href:!0});var R6e=s(GS);VHe=r(R6e,"BartConfig"),R6e.forEach(t),XHe=r(NA," (BART model)"),NA.forEach(t),zHe=i(L),Of=n(L,"LI",{});var IA=s(Of);Sae=n(IA,"STRONG",{});var P6e=s(Sae);QHe=r(P6e,"beit"),P6e.forEach(t),WHe=r(IA," \u2014 "),OS=n(IA,"A",{href:!0});var B6e=s(OS);HHe=r(B6e,"BeitConfig"),B6e.forEach(t),UHe=r(IA," (BEiT model)"),IA.forEach(t),JHe=i(L),Vf=n(L,"LI",{});var qA=s(Vf);Rae=n(qA,"STRONG",{});var N6e=s(Rae);YHe=r(N6e,"bert"),N6e.forEach(t),KHe=r(qA," \u2014 "),VS=n(qA,"A",{href:!0});var I6e=s(VS);ZHe=r(I6e,"BertConfig"),I6e.forEach(t),eUe=r(qA," (BERT model)"),qA.forEach(t),oUe=i(L),Xf=n(L,"LI",{});var jA=s(Xf);Pae=n(jA,"STRONG",{});var q6e=s(Pae);rUe=r(q6e,"bert-generation"),q6e.forEach(t),tUe=r(jA," \u2014 "),XS=n(jA,"A",{href:!0});var j6e=s(XS);aUe=r(j6e,"BertGenerationConfig"),j6e.forEach(t),nUe=r(jA," (Bert Generation model)"),jA.forEach(t),sUe=i(L),zf=n(L,"LI",{});var DA=s(zf);Bae=n(DA,"STRONG",{});var D6e=s(Bae);lUe=r(D6e,"big_bird"),D6e.forEach(t),iUe=r(DA," \u2014 "),zS=n(DA,"A",{href:!0});var G6e=s(zS);dUe=r(G6e,"BigBirdConfig"),G6e.forEach(t),cUe=r(DA," (BigBird model)"),DA.forEach(t),fUe=i(L),Qf=n(L,"LI",{});var GA=s(Qf);Nae=n(GA,"STRONG",{});var O6e=s(Nae);mUe=r(O6e,"bigbird_pegasus"),O6e.forEach(t),gUe=r(GA," \u2014 "),QS=n(GA,"A",{href:!0});var V6e=s(QS);hUe=r(V6e,"BigBirdPegasusConfig"),V6e.forEach(t),pUe=r(GA," (BigBird-Pegasus model)"),GA.forEach(t),_Ue=i(L),Wf=n(L,"LI",{});var OA=s(Wf);Iae=n(OA,"STRONG",{});var X6e=s(Iae);uUe=r(X6e,"blenderbot"),X6e.forEach(t),bUe=r(OA," \u2014 "),WS=n(OA,"A",{href:!0});var z6e=s(WS);vUe=r(z6e,"BlenderbotConfig"),z6e.forEach(t),FUe=r(OA," (Blenderbot model)"),OA.forEach(t),TUe=i(L),Hf=n(L,"LI",{});var VA=s(Hf);qae=n(VA,"STRONG",{});var Q6e=s(qae);MUe=r(Q6e,"blenderbot-small"),Q6e.forEach(t),EUe=r(VA," \u2014 "),HS=n(VA,"A",{href:!0});var W6e=s(HS);CUe=r(W6e,"BlenderbotSmallConfig"),W6e.forEach(t),wUe=r(VA," (BlenderbotSmall model)"),VA.forEach(t),AUe=i(L),Uf=n(L,"LI",{});var XA=s(Uf);jae=n(XA,"STRONG",{});var H6e=s(jae);LUe=r(H6e,"bloom"),H6e.forEach(t),yUe=r(XA," \u2014 "),US=n(XA,"A",{href:!0});var U6e=s(US);xUe=r(U6e,"BloomConfig"),U6e.forEach(t),$Ue=r(XA," (BLOOM model)"),XA.forEach(t),kUe=i(L),Jf=n(L,"LI",{});var zA=s(Jf);Dae=n(zA,"STRONG",{});var J6e=s(Dae);SUe=r(J6e,"camembert"),J6e.forEach(t),RUe=r(zA," \u2014 "),JS=n(zA,"A",{href:!0});var Y6e=s(JS);PUe=r(Y6e,"CamembertConfig"),Y6e.forEach(t),BUe=r(zA," (CamemBERT model)"),zA.forEach(t),NUe=i(L),Yf=n(L,"LI",{});var QA=s(Yf);Gae=n(QA,"STRONG",{});var K6e=s(Gae);IUe=r(K6e,"canine"),K6e.forEach(t),qUe=r(QA," \u2014 "),YS=n(QA,"A",{href:!0});var Z6e=s(YS);jUe=r(Z6e,"CanineConfig"),Z6e.forEach(t),DUe=r(QA," (CANINE model)"),QA.forEach(t),GUe=i(L),Kf=n(L,"LI",{});var WA=s(Kf);Oae=n(WA,"STRONG",{});var e7e=s(Oae);OUe=r(e7e,"clip"),e7e.forEach(t),VUe=r(WA," \u2014 "),KS=n(WA,"A",{href:!0});var o7e=s(KS);XUe=r(o7e,"CLIPConfig"),o7e.forEach(t),zUe=r(WA," (CLIP model)"),WA.forEach(t),QUe=i(L),Zf=n(L,"LI",{});var HA=s(Zf);Vae=n(HA,"STRONG",{});var r7e=s(Vae);WUe=r(r7e,"codegen"),r7e.forEach(t),HUe=r(HA," \u2014 "),ZS=n(HA,"A",{href:!0});var t7e=s(ZS);UUe=r(t7e,"CodeGenConfig"),t7e.forEach(t),JUe=r(HA," (CodeGen model)"),HA.forEach(t),YUe=i(L),em=n(L,"LI",{});var UA=s(em);Xae=n(UA,"STRONG",{});var a7e=s(Xae);KUe=r(a7e,"convbert"),a7e.forEach(t),ZUe=r(UA," \u2014 "),eR=n(UA,"A",{href:!0});var n7e=s(eR);eJe=r(n7e,"ConvBertConfig"),n7e.forEach(t),oJe=r(UA," (ConvBERT model)"),UA.forEach(t),rJe=i(L),om=n(L,"LI",{});var JA=s(om);zae=n(JA,"STRONG",{});var s7e=s(zae);tJe=r(s7e,"convnext"),s7e.forEach(t),aJe=r(JA," \u2014 "),oR=n(JA,"A",{href:!0});var l7e=s(oR);nJe=r(l7e,"ConvNextConfig"),l7e.forEach(t),sJe=r(JA," (ConvNeXT model)"),JA.forEach(t),lJe=i(L),rm=n(L,"LI",{});var YA=s(rm);Qae=n(YA,"STRONG",{});var i7e=s(Qae);iJe=r(i7e,"ctrl"),i7e.forEach(t),dJe=r(YA," \u2014 "),rR=n(YA,"A",{href:!0});var d7e=s(rR);cJe=r(d7e,"CTRLConfig"),d7e.forEach(t),fJe=r(YA," (CTRL model)"),YA.forEach(t),mJe=i(L),tm=n(L,"LI",{});var KA=s(tm);Wae=n(KA,"STRONG",{});var c7e=s(Wae);gJe=r(c7e,"cvt"),c7e.forEach(t),hJe=r(KA," \u2014 "),tR=n(KA,"A",{href:!0});var f7e=s(tR);pJe=r(f7e,"CvtConfig"),f7e.forEach(t),_Je=r(KA," (CvT model)"),KA.forEach(t),uJe=i(L),am=n(L,"LI",{});var ZA=s(am);Hae=n(ZA,"STRONG",{});var m7e=s(Hae);bJe=r(m7e,"data2vec-audio"),m7e.forEach(t),vJe=r(ZA," \u2014 "),aR=n(ZA,"A",{href:!0});var g7e=s(aR);FJe=r(g7e,"Data2VecAudioConfig"),g7e.forEach(t),TJe=r(ZA," (Data2VecAudio model)"),ZA.forEach(t),MJe=i(L),nm=n(L,"LI",{});var e6=s(nm);Uae=n(e6,"STRONG",{});var h7e=s(Uae);EJe=r(h7e,"data2vec-text"),h7e.forEach(t),CJe=r(e6," \u2014 "),nR=n(e6,"A",{href:!0});var p7e=s(nR);wJe=r(p7e,"Data2VecTextConfig"),p7e.forEach(t),AJe=r(e6," (Data2VecText model)"),e6.forEach(t),LJe=i(L),sm=n(L,"LI",{});var o6=s(sm);Jae=n(o6,"STRONG",{});var _7e=s(Jae);yJe=r(_7e,"data2vec-vision"),_7e.forEach(t),xJe=r(o6," \u2014 "),sR=n(o6,"A",{href:!0});var u7e=s(sR);$Je=r(u7e,"Data2VecVisionConfig"),u7e.forEach(t),kJe=r(o6," (Data2VecVision model)"),o6.forEach(t),SJe=i(L),lm=n(L,"LI",{});var r6=s(lm);Yae=n(r6,"STRONG",{});var b7e=s(Yae);RJe=r(b7e,"deberta"),b7e.forEach(t),PJe=r(r6," \u2014 "),lR=n(r6,"A",{href:!0});var v7e=s(lR);BJe=r(v7e,"DebertaConfig"),v7e.forEach(t),NJe=r(r6," (DeBERTa model)"),r6.forEach(t),IJe=i(L),im=n(L,"LI",{});var t6=s(im);Kae=n(t6,"STRONG",{});var F7e=s(Kae);qJe=r(F7e,"deberta-v2"),F7e.forEach(t),jJe=r(t6," \u2014 "),iR=n(t6,"A",{href:!0});var T7e=s(iR);DJe=r(T7e,"DebertaV2Config"),T7e.forEach(t),GJe=r(t6," (DeBERTa-v2 model)"),t6.forEach(t),OJe=i(L),dm=n(L,"LI",{});var a6=s(dm);Zae=n(a6,"STRONG",{});var zrt=s(Zae);VJe=r(zrt,"decision_transformer"),zrt.forEach(t),XJe=r(a6," \u2014 "),dR=n(a6,"A",{href:!0});var Qrt=s(dR);zJe=r(Qrt,"DecisionTransformerConfig"),Qrt.forEach(t),QJe=r(a6," (Decision Transformer model)"),a6.forEach(t),WJe=i(L),cm=n(L,"LI",{});var M7e=s(cm);ene=n(M7e,"STRONG",{});var Wrt=s(ene);HJe=r(Wrt,"deit"),Wrt.forEach(t),UJe=r(M7e," \u2014 "),cR=n(M7e,"A",{href:!0});var Hrt=s(cR);JJe=r(Hrt,"DeiTConfig"),Hrt.forEach(t),YJe=r(M7e," (DeiT model)"),M7e.forEach(t),KJe=i(L),fm=n(L,"LI",{});var E7e=s(fm);one=n(E7e,"STRONG",{});var Urt=s(one);ZJe=r(Urt,"detr"),Urt.forEach(t),eYe=r(E7e," \u2014 "),fR=n(E7e,"A",{href:!0});var Jrt=s(fR);oYe=r(Jrt,"DetrConfig"),Jrt.forEach(t),rYe=r(E7e," (DETR model)"),E7e.forEach(t),tYe=i(L),mm=n(L,"LI",{});var C7e=s(mm);rne=n(C7e,"STRONG",{});var Yrt=s(rne);aYe=r(Yrt,"distilbert"),Yrt.forEach(t),nYe=r(C7e," \u2014 "),mR=n(C7e,"A",{href:!0});var Krt=s(mR);sYe=r(Krt,"DistilBertConfig"),Krt.forEach(t),lYe=r(C7e," (DistilBERT model)"),C7e.forEach(t),iYe=i(L),gm=n(L,"LI",{});var w7e=s(gm);tne=n(w7e,"STRONG",{});var Zrt=s(tne);dYe=r(Zrt,"dpr"),Zrt.forEach(t),cYe=r(w7e," \u2014 "),gR=n(w7e,"A",{href:!0});var ett=s(gR);fYe=r(ett,"DPRConfig"),ett.forEach(t),mYe=r(w7e," (DPR model)"),w7e.forEach(t),gYe=i(L),hm=n(L,"LI",{});var A7e=s(hm);ane=n(A7e,"STRONG",{});var ott=s(ane);hYe=r(ott,"dpt"),ott.forEach(t),pYe=r(A7e," \u2014 "),hR=n(A7e,"A",{href:!0});var rtt=s(hR);_Ye=r(rtt,"DPTConfig"),rtt.forEach(t),uYe=r(A7e," (DPT model)"),A7e.forEach(t),bYe=i(L),pm=n(L,"LI",{});var L7e=s(pm);nne=n(L7e,"STRONG",{});var ttt=s(nne);vYe=r(ttt,"electra"),ttt.forEach(t),FYe=r(L7e," \u2014 "),pR=n(L7e,"A",{href:!0});var att=s(pR);TYe=r(att,"ElectraConfig"),att.forEach(t),MYe=r(L7e," (ELECTRA model)"),L7e.forEach(t),EYe=i(L),_m=n(L,"LI",{});var y7e=s(_m);sne=n(y7e,"STRONG",{});var ntt=s(sne);CYe=r(ntt,"encoder-decoder"),ntt.forEach(t),wYe=r(y7e," \u2014 "),_R=n(y7e,"A",{href:!0});var stt=s(_R);AYe=r(stt,"EncoderDecoderConfig"),stt.forEach(t),LYe=r(y7e," (Encoder decoder model)"),y7e.forEach(t),yYe=i(L),um=n(L,"LI",{});var x7e=s(um);lne=n(x7e,"STRONG",{});var ltt=s(lne);xYe=r(ltt,"flaubert"),ltt.forEach(t),$Ye=r(x7e," \u2014 "),uR=n(x7e,"A",{href:!0});var itt=s(uR);kYe=r(itt,"FlaubertConfig"),itt.forEach(t),SYe=r(x7e," (FlauBERT model)"),x7e.forEach(t),RYe=i(L),bm=n(L,"LI",{});var $7e=s(bm);ine=n($7e,"STRONG",{});var dtt=s(ine);PYe=r(dtt,"flava"),dtt.forEach(t),BYe=r($7e," \u2014 "),bR=n($7e,"A",{href:!0});var ctt=s(bR);NYe=r(ctt,"FlavaConfig"),ctt.forEach(t),IYe=r($7e," (FLAVA model)"),$7e.forEach(t),qYe=i(L),vm=n(L,"LI",{});var k7e=s(vm);dne=n(k7e,"STRONG",{});var ftt=s(dne);jYe=r(ftt,"fnet"),ftt.forEach(t),DYe=r(k7e," \u2014 "),vR=n(k7e,"A",{href:!0});var mtt=s(vR);GYe=r(mtt,"FNetConfig"),mtt.forEach(t),OYe=r(k7e," (FNet model)"),k7e.forEach(t),VYe=i(L),Fm=n(L,"LI",{});var S7e=s(Fm);cne=n(S7e,"STRONG",{});var gtt=s(cne);XYe=r(gtt,"fsmt"),gtt.forEach(t),zYe=r(S7e," \u2014 "),FR=n(S7e,"A",{href:!0});var htt=s(FR);QYe=r(htt,"FSMTConfig"),htt.forEach(t),WYe=r(S7e," (FairSeq Machine-Translation model)"),S7e.forEach(t),HYe=i(L),Tm=n(L,"LI",{});var R7e=s(Tm);fne=n(R7e,"STRONG",{});var ptt=s(fne);UYe=r(ptt,"funnel"),ptt.forEach(t),JYe=r(R7e," \u2014 "),TR=n(R7e,"A",{href:!0});var _tt=s(TR);YYe=r(_tt,"FunnelConfig"),_tt.forEach(t),KYe=r(R7e," (Funnel Transformer model)"),R7e.forEach(t),ZYe=i(L),Mm=n(L,"LI",{});var P7e=s(Mm);mne=n(P7e,"STRONG",{});var utt=s(mne);eKe=r(utt,"glpn"),utt.forEach(t),oKe=r(P7e," \u2014 "),MR=n(P7e,"A",{href:!0});var btt=s(MR);rKe=r(btt,"GLPNConfig"),btt.forEach(t),tKe=r(P7e," (GLPN model)"),P7e.forEach(t),aKe=i(L),Em=n(L,"LI",{});var B7e=s(Em);gne=n(B7e,"STRONG",{});var vtt=s(gne);nKe=r(vtt,"gpt2"),vtt.forEach(t),sKe=r(B7e," \u2014 "),ER=n(B7e,"A",{href:!0});var Ftt=s(ER);lKe=r(Ftt,"GPT2Config"),Ftt.forEach(t),iKe=r(B7e," (OpenAI GPT-2 model)"),B7e.forEach(t),dKe=i(L),Cm=n(L,"LI",{});var N7e=s(Cm);hne=n(N7e,"STRONG",{});var Ttt=s(hne);cKe=r(Ttt,"gpt_neo"),Ttt.forEach(t),fKe=r(N7e," \u2014 "),CR=n(N7e,"A",{href:!0});var Mtt=s(CR);mKe=r(Mtt,"GPTNeoConfig"),Mtt.forEach(t),gKe=r(N7e," (GPT Neo model)"),N7e.forEach(t),hKe=i(L),wm=n(L,"LI",{});var I7e=s(wm);pne=n(I7e,"STRONG",{});var Ett=s(pne);pKe=r(Ett,"gpt_neox"),Ett.forEach(t),_Ke=r(I7e," \u2014 "),wR=n(I7e,"A",{href:!0});var Ctt=s(wR);uKe=r(Ctt,"GPTNeoXConfig"),Ctt.forEach(t),bKe=r(I7e," (GPT NeoX model)"),I7e.forEach(t),vKe=i(L),Am=n(L,"LI",{});var q7e=s(Am);_ne=n(q7e,"STRONG",{});var wtt=s(_ne);FKe=r(wtt,"gptj"),wtt.forEach(t),TKe=r(q7e," \u2014 "),AR=n(q7e,"A",{href:!0});var Att=s(AR);MKe=r(Att,"GPTJConfig"),Att.forEach(t),EKe=r(q7e," (GPT-J model)"),q7e.forEach(t),CKe=i(L),Lm=n(L,"LI",{});var j7e=s(Lm);une=n(j7e,"STRONG",{});var Ltt=s(une);wKe=r(Ltt,"groupvit"),Ltt.forEach(t),AKe=r(j7e," \u2014 "),LR=n(j7e,"A",{href:!0});var ytt=s(LR);LKe=r(ytt,"GroupViTConfig"),ytt.forEach(t),yKe=r(j7e," (GroupViT model)"),j7e.forEach(t),xKe=i(L),ym=n(L,"LI",{});var D7e=s(ym);bne=n(D7e,"STRONG",{});var xtt=s(bne);$Ke=r(xtt,"hubert"),xtt.forEach(t),kKe=r(D7e," \u2014 "),yR=n(D7e,"A",{href:!0});var $tt=s(yR);SKe=r($tt,"HubertConfig"),$tt.forEach(t),RKe=r(D7e," (Hubert model)"),D7e.forEach(t),PKe=i(L),xm=n(L,"LI",{});var G7e=s(xm);vne=n(G7e,"STRONG",{});var ktt=s(vne);BKe=r(ktt,"ibert"),ktt.forEach(t),NKe=r(G7e," \u2014 "),xR=n(G7e,"A",{href:!0});var Stt=s(xR);IKe=r(Stt,"IBertConfig"),Stt.forEach(t),qKe=r(G7e," (I-BERT model)"),G7e.forEach(t),jKe=i(L),$m=n(L,"LI",{});var O7e=s($m);Fne=n(O7e,"STRONG",{});var Rtt=s(Fne);DKe=r(Rtt,"imagegpt"),Rtt.forEach(t),GKe=r(O7e," \u2014 "),$R=n(O7e,"A",{href:!0});var Ptt=s($R);OKe=r(Ptt,"ImageGPTConfig"),Ptt.forEach(t),VKe=r(O7e," (ImageGPT model)"),O7e.forEach(t),XKe=i(L),km=n(L,"LI",{});var V7e=s(km);Tne=n(V7e,"STRONG",{});var Btt=s(Tne);zKe=r(Btt,"layoutlm"),Btt.forEach(t),QKe=r(V7e," \u2014 "),kR=n(V7e,"A",{href:!0});var Ntt=s(kR);WKe=r(Ntt,"LayoutLMConfig"),Ntt.forEach(t),HKe=r(V7e," (LayoutLM model)"),V7e.forEach(t),UKe=i(L),Sm=n(L,"LI",{});var X7e=s(Sm);Mne=n(X7e,"STRONG",{});var Itt=s(Mne);JKe=r(Itt,"layoutlmv2"),Itt.forEach(t),YKe=r(X7e," \u2014 "),SR=n(X7e,"A",{href:!0});var qtt=s(SR);KKe=r(qtt,"LayoutLMv2Config"),qtt.forEach(t),ZKe=r(X7e," (LayoutLMv2 model)"),X7e.forEach(t),eZe=i(L),Rm=n(L,"LI",{});var z7e=s(Rm);Ene=n(z7e,"STRONG",{});var jtt=s(Ene);oZe=r(jtt,"layoutlmv3"),jtt.forEach(t),rZe=r(z7e," \u2014 "),RR=n(z7e,"A",{href:!0});var Dtt=s(RR);tZe=r(Dtt,"LayoutLMv3Config"),Dtt.forEach(t),aZe=r(z7e," (LayoutLMv3 model)"),z7e.forEach(t),nZe=i(L),Pm=n(L,"LI",{});var Q7e=s(Pm);Cne=n(Q7e,"STRONG",{});var Gtt=s(Cne);sZe=r(Gtt,"led"),Gtt.forEach(t),lZe=r(Q7e," \u2014 "),PR=n(Q7e,"A",{href:!0});var Ott=s(PR);iZe=r(Ott,"LEDConfig"),Ott.forEach(t),dZe=r(Q7e," (LED model)"),Q7e.forEach(t),cZe=i(L),Bm=n(L,"LI",{});var W7e=s(Bm);wne=n(W7e,"STRONG",{});var Vtt=s(wne);fZe=r(Vtt,"levit"),Vtt.forEach(t),mZe=r(W7e," \u2014 "),BR=n(W7e,"A",{href:!0});var Xtt=s(BR);gZe=r(Xtt,"LevitConfig"),Xtt.forEach(t),hZe=r(W7e," (LeViT model)"),W7e.forEach(t),pZe=i(L),Nm=n(L,"LI",{});var H7e=s(Nm);Ane=n(H7e,"STRONG",{});var ztt=s(Ane);_Ze=r(ztt,"longformer"),ztt.forEach(t),uZe=r(H7e," \u2014 "),NR=n(H7e,"A",{href:!0});var Qtt=s(NR);bZe=r(Qtt,"LongformerConfig"),Qtt.forEach(t),vZe=r(H7e," (Longformer model)"),H7e.forEach(t),FZe=i(L),Im=n(L,"LI",{});var U7e=s(Im);Lne=n(U7e,"STRONG",{});var Wtt=s(Lne);TZe=r(Wtt,"longt5"),Wtt.forEach(t),MZe=r(U7e," \u2014 "),IR=n(U7e,"A",{href:!0});var Htt=s(IR);EZe=r(Htt,"LongT5Config"),Htt.forEach(t),CZe=r(U7e," (LongT5 model)"),U7e.forEach(t),wZe=i(L),qm=n(L,"LI",{});var J7e=s(qm);yne=n(J7e,"STRONG",{});var Utt=s(yne);AZe=r(Utt,"luke"),Utt.forEach(t),LZe=r(J7e," \u2014 "),qR=n(J7e,"A",{href:!0});var Jtt=s(qR);yZe=r(Jtt,"LukeConfig"),Jtt.forEach(t),xZe=r(J7e," (LUKE model)"),J7e.forEach(t),$Ze=i(L),jm=n(L,"LI",{});var Y7e=s(jm);xne=n(Y7e,"STRONG",{});var Ytt=s(xne);kZe=r(Ytt,"lxmert"),Ytt.forEach(t),SZe=r(Y7e," \u2014 "),jR=n(Y7e,"A",{href:!0});var Ktt=s(jR);RZe=r(Ktt,"LxmertConfig"),Ktt.forEach(t),PZe=r(Y7e," (LXMERT model)"),Y7e.forEach(t),BZe=i(L),Dm=n(L,"LI",{});var K7e=s(Dm);$ne=n(K7e,"STRONG",{});var Ztt=s($ne);NZe=r(Ztt,"m2m_100"),Ztt.forEach(t),IZe=r(K7e," \u2014 "),DR=n(K7e,"A",{href:!0});var eat=s(DR);qZe=r(eat,"M2M100Config"),eat.forEach(t),jZe=r(K7e," (M2M100 model)"),K7e.forEach(t),DZe=i(L),Gm=n(L,"LI",{});var Z7e=s(Gm);kne=n(Z7e,"STRONG",{});var oat=s(kne);GZe=r(oat,"marian"),oat.forEach(t),OZe=r(Z7e," \u2014 "),GR=n(Z7e,"A",{href:!0});var rat=s(GR);VZe=r(rat,"MarianConfig"),rat.forEach(t),XZe=r(Z7e," (Marian model)"),Z7e.forEach(t),zZe=i(L),Om=n(L,"LI",{});var eLe=s(Om);Sne=n(eLe,"STRONG",{});var tat=s(Sne);QZe=r(tat,"maskformer"),tat.forEach(t),WZe=r(eLe," \u2014 "),OR=n(eLe,"A",{href:!0});var aat=s(OR);HZe=r(aat,"MaskFormerConfig"),aat.forEach(t),UZe=r(eLe," (MaskFormer model)"),eLe.forEach(t),JZe=i(L),Vm=n(L,"LI",{});var oLe=s(Vm);Rne=n(oLe,"STRONG",{});var nat=s(Rne);YZe=r(nat,"mbart"),nat.forEach(t),KZe=r(oLe," \u2014 "),VR=n(oLe,"A",{href:!0});var sat=s(VR);ZZe=r(sat,"MBartConfig"),sat.forEach(t),eeo=r(oLe," (mBART model)"),oLe.forEach(t),oeo=i(L),Xm=n(L,"LI",{});var rLe=s(Xm);Pne=n(rLe,"STRONG",{});var lat=s(Pne);reo=r(lat,"mctct"),lat.forEach(t),teo=r(rLe," \u2014 "),XR=n(rLe,"A",{href:!0});var iat=s(XR);aeo=r(iat,"MCTCTConfig"),iat.forEach(t),neo=r(rLe," (M-CTC-T model)"),rLe.forEach(t),seo=i(L),zm=n(L,"LI",{});var tLe=s(zm);Bne=n(tLe,"STRONG",{});var dat=s(Bne);leo=r(dat,"megatron-bert"),dat.forEach(t),ieo=r(tLe," \u2014 "),zR=n(tLe,"A",{href:!0});var cat=s(zR);deo=r(cat,"MegatronBertConfig"),cat.forEach(t),ceo=r(tLe," (Megatron-BERT model)"),tLe.forEach(t),feo=i(L),Qm=n(L,"LI",{});var aLe=s(Qm);Nne=n(aLe,"STRONG",{});var fat=s(Nne);meo=r(fat,"mobilebert"),fat.forEach(t),geo=r(aLe," \u2014 "),QR=n(aLe,"A",{href:!0});var mat=s(QR);heo=r(mat,"MobileBertConfig"),mat.forEach(t),peo=r(aLe," (MobileBERT model)"),aLe.forEach(t),_eo=i(L),Wm=n(L,"LI",{});var nLe=s(Wm);Ine=n(nLe,"STRONG",{});var gat=s(Ine);ueo=r(gat,"mobilevit"),gat.forEach(t),beo=r(nLe," \u2014 "),WR=n(nLe,"A",{href:!0});var hat=s(WR);veo=r(hat,"MobileViTConfig"),hat.forEach(t),Feo=r(nLe," (MobileViT model)"),nLe.forEach(t),Teo=i(L),Hm=n(L,"LI",{});var sLe=s(Hm);qne=n(sLe,"STRONG",{});var pat=s(qne);Meo=r(pat,"mpnet"),pat.forEach(t),Eeo=r(sLe," \u2014 "),HR=n(sLe,"A",{href:!0});var _at=s(HR);Ceo=r(_at,"MPNetConfig"),_at.forEach(t),weo=r(sLe," (MPNet model)"),sLe.forEach(t),Aeo=i(L),Um=n(L,"LI",{});var lLe=s(Um);jne=n(lLe,"STRONG",{});var uat=s(jne);Leo=r(uat,"mt5"),uat.forEach(t),yeo=r(lLe," \u2014 "),UR=n(lLe,"A",{href:!0});var bat=s(UR);xeo=r(bat,"MT5Config"),bat.forEach(t),$eo=r(lLe," (MT5 model)"),lLe.forEach(t),keo=i(L),Jm=n(L,"LI",{});var iLe=s(Jm);Dne=n(iLe,"STRONG",{});var vat=s(Dne);Seo=r(vat,"mvp"),vat.forEach(t),Reo=r(iLe," \u2014 "),JR=n(iLe,"A",{href:!0});var Fat=s(JR);Peo=r(Fat,"MvpConfig"),Fat.forEach(t),Beo=r(iLe," (MVP model)"),iLe.forEach(t),Neo=i(L),Ym=n(L,"LI",{});var dLe=s(Ym);Gne=n(dLe,"STRONG",{});var Tat=s(Gne);Ieo=r(Tat,"nezha"),Tat.forEach(t),qeo=r(dLe," \u2014 "),YR=n(dLe,"A",{href:!0});var Mat=s(YR);jeo=r(Mat,"NezhaConfig"),Mat.forEach(t),Deo=r(dLe," (Nezha model)"),dLe.forEach(t),Geo=i(L),Km=n(L,"LI",{});var cLe=s(Km);One=n(cLe,"STRONG",{});var Eat=s(One);Oeo=r(Eat,"nystromformer"),Eat.forEach(t),Veo=r(cLe," \u2014 "),KR=n(cLe,"A",{href:!0});var Cat=s(KR);Xeo=r(Cat,"NystromformerConfig"),Cat.forEach(t),zeo=r(cLe," (Nystr\xF6mformer model)"),cLe.forEach(t),Qeo=i(L),Zm=n(L,"LI",{});var fLe=s(Zm);Vne=n(fLe,"STRONG",{});var wat=s(Vne);Weo=r(wat,"openai-gpt"),wat.forEach(t),Heo=r(fLe," \u2014 "),ZR=n(fLe,"A",{href:!0});var Aat=s(ZR);Ueo=r(Aat,"OpenAIGPTConfig"),Aat.forEach(t),Jeo=r(fLe," (OpenAI GPT model)"),fLe.forEach(t),Yeo=i(L),eg=n(L,"LI",{});var mLe=s(eg);Xne=n(mLe,"STRONG",{});var Lat=s(Xne);Keo=r(Lat,"opt"),Lat.forEach(t),Zeo=r(mLe," \u2014 "),eP=n(mLe,"A",{href:!0});var yat=s(eP);eoo=r(yat,"OPTConfig"),yat.forEach(t),ooo=r(mLe," (OPT model)"),mLe.forEach(t),roo=i(L),og=n(L,"LI",{});var gLe=s(og);zne=n(gLe,"STRONG",{});var xat=s(zne);too=r(xat,"pegasus"),xat.forEach(t),aoo=r(gLe," \u2014 "),oP=n(gLe,"A",{href:!0});var $at=s(oP);noo=r($at,"PegasusConfig"),$at.forEach(t),soo=r(gLe," (Pegasus model)"),gLe.forEach(t),loo=i(L),rg=n(L,"LI",{});var hLe=s(rg);Qne=n(hLe,"STRONG",{});var kat=s(Qne);ioo=r(kat,"perceiver"),kat.forEach(t),doo=r(hLe," \u2014 "),rP=n(hLe,"A",{href:!0});var Sat=s(rP);coo=r(Sat,"PerceiverConfig"),Sat.forEach(t),foo=r(hLe," (Perceiver model)"),hLe.forEach(t),moo=i(L),tg=n(L,"LI",{});var pLe=s(tg);Wne=n(pLe,"STRONG",{});var Rat=s(Wne);goo=r(Rat,"plbart"),Rat.forEach(t),hoo=r(pLe," \u2014 "),tP=n(pLe,"A",{href:!0});var Pat=s(tP);poo=r(Pat,"PLBartConfig"),Pat.forEach(t),_oo=r(pLe," (PLBart model)"),pLe.forEach(t),uoo=i(L),ag=n(L,"LI",{});var _Le=s(ag);Hne=n(_Le,"STRONG",{});var Bat=s(Hne);boo=r(Bat,"poolformer"),Bat.forEach(t),voo=r(_Le," \u2014 "),aP=n(_Le,"A",{href:!0});var Nat=s(aP);Foo=r(Nat,"PoolFormerConfig"),Nat.forEach(t),Too=r(_Le," (PoolFormer model)"),_Le.forEach(t),Moo=i(L),ng=n(L,"LI",{});var uLe=s(ng);Une=n(uLe,"STRONG",{});var Iat=s(Une);Eoo=r(Iat,"prophetnet"),Iat.forEach(t),Coo=r(uLe," \u2014 "),nP=n(uLe,"A",{href:!0});var qat=s(nP);woo=r(qat,"ProphetNetConfig"),qat.forEach(t),Aoo=r(uLe," (ProphetNet model)"),uLe.forEach(t),Loo=i(L),sg=n(L,"LI",{});var bLe=s(sg);Jne=n(bLe,"STRONG",{});var jat=s(Jne);yoo=r(jat,"qdqbert"),jat.forEach(t),xoo=r(bLe," \u2014 "),sP=n(bLe,"A",{href:!0});var Dat=s(sP);$oo=r(Dat,"QDQBertConfig"),Dat.forEach(t),koo=r(bLe," (QDQBert model)"),bLe.forEach(t),Soo=i(L),lg=n(L,"LI",{});var vLe=s(lg);Yne=n(vLe,"STRONG",{});var Gat=s(Yne);Roo=r(Gat,"rag"),Gat.forEach(t),Poo=r(vLe," \u2014 "),lP=n(vLe,"A",{href:!0});var Oat=s(lP);Boo=r(Oat,"RagConfig"),Oat.forEach(t),Noo=r(vLe," (RAG model)"),vLe.forEach(t),Ioo=i(L),ig=n(L,"LI",{});var FLe=s(ig);Kne=n(FLe,"STRONG",{});var Vat=s(Kne);qoo=r(Vat,"realm"),Vat.forEach(t),joo=r(FLe," \u2014 "),iP=n(FLe,"A",{href:!0});var Xat=s(iP);Doo=r(Xat,"RealmConfig"),Xat.forEach(t),Goo=r(FLe," (REALM model)"),FLe.forEach(t),Ooo=i(L),dg=n(L,"LI",{});var TLe=s(dg);Zne=n(TLe,"STRONG",{});var zat=s(Zne);Voo=r(zat,"reformer"),zat.forEach(t),Xoo=r(TLe," \u2014 "),dP=n(TLe,"A",{href:!0});var Qat=s(dP);zoo=r(Qat,"ReformerConfig"),Qat.forEach(t),Qoo=r(TLe," (Reformer model)"),TLe.forEach(t),Woo=i(L),cg=n(L,"LI",{});var MLe=s(cg);ese=n(MLe,"STRONG",{});var Wat=s(ese);Hoo=r(Wat,"regnet"),Wat.forEach(t),Uoo=r(MLe," \u2014 "),cP=n(MLe,"A",{href:!0});var Hat=s(cP);Joo=r(Hat,"RegNetConfig"),Hat.forEach(t),Yoo=r(MLe," (RegNet model)"),MLe.forEach(t),Koo=i(L),fg=n(L,"LI",{});var ELe=s(fg);ose=n(ELe,"STRONG",{});var Uat=s(ose);Zoo=r(Uat,"rembert"),Uat.forEach(t),ero=r(ELe," \u2014 "),fP=n(ELe,"A",{href:!0});var Jat=s(fP);oro=r(Jat,"RemBertConfig"),Jat.forEach(t),rro=r(ELe," (RemBERT model)"),ELe.forEach(t),tro=i(L),mg=n(L,"LI",{});var CLe=s(mg);rse=n(CLe,"STRONG",{});var Yat=s(rse);aro=r(Yat,"resnet"),Yat.forEach(t),nro=r(CLe," \u2014 "),mP=n(CLe,"A",{href:!0});var Kat=s(mP);sro=r(Kat,"ResNetConfig"),Kat.forEach(t),lro=r(CLe," (ResNet model)"),CLe.forEach(t),iro=i(L),gg=n(L,"LI",{});var wLe=s(gg);tse=n(wLe,"STRONG",{});var Zat=s(tse);dro=r(Zat,"retribert"),Zat.forEach(t),cro=r(wLe," \u2014 "),gP=n(wLe,"A",{href:!0});var ent=s(gP);fro=r(ent,"RetriBertConfig"),ent.forEach(t),mro=r(wLe," (RetriBERT model)"),wLe.forEach(t),gro=i(L),hg=n(L,"LI",{});var ALe=s(hg);ase=n(ALe,"STRONG",{});var ont=s(ase);hro=r(ont,"roberta"),ont.forEach(t),pro=r(ALe," \u2014 "),hP=n(ALe,"A",{href:!0});var rnt=s(hP);_ro=r(rnt,"RobertaConfig"),rnt.forEach(t),uro=r(ALe," (RoBERTa model)"),ALe.forEach(t),bro=i(L),pg=n(L,"LI",{});var LLe=s(pg);nse=n(LLe,"STRONG",{});var tnt=s(nse);vro=r(tnt,"roformer"),tnt.forEach(t),Fro=r(LLe," \u2014 "),pP=n(LLe,"A",{href:!0});var ant=s(pP);Tro=r(ant,"RoFormerConfig"),ant.forEach(t),Mro=r(LLe," (RoFormer model)"),LLe.forEach(t),Ero=i(L),_g=n(L,"LI",{});var yLe=s(_g);sse=n(yLe,"STRONG",{});var nnt=s(sse);Cro=r(nnt,"segformer"),nnt.forEach(t),wro=r(yLe," \u2014 "),_P=n(yLe,"A",{href:!0});var snt=s(_P);Aro=r(snt,"SegformerConfig"),snt.forEach(t),Lro=r(yLe," (SegFormer model)"),yLe.forEach(t),yro=i(L),ug=n(L,"LI",{});var xLe=s(ug);lse=n(xLe,"STRONG",{});var lnt=s(lse);xro=r(lnt,"sew"),lnt.forEach(t),$ro=r(xLe," \u2014 "),uP=n(xLe,"A",{href:!0});var int=s(uP);kro=r(int,"SEWConfig"),int.forEach(t),Sro=r(xLe," (SEW model)"),xLe.forEach(t),Rro=i(L),bg=n(L,"LI",{});var $Le=s(bg);ise=n($Le,"STRONG",{});var dnt=s(ise);Pro=r(dnt,"sew-d"),dnt.forEach(t),Bro=r($Le," \u2014 "),bP=n($Le,"A",{href:!0});var cnt=s(bP);Nro=r(cnt,"SEWDConfig"),cnt.forEach(t),Iro=r($Le," (SEW-D model)"),$Le.forEach(t),qro=i(L),vg=n(L,"LI",{});var kLe=s(vg);dse=n(kLe,"STRONG",{});var fnt=s(dse);jro=r(fnt,"speech-encoder-decoder"),fnt.forEach(t),Dro=r(kLe," \u2014 "),vP=n(kLe,"A",{href:!0});var mnt=s(vP);Gro=r(mnt,"SpeechEncoderDecoderConfig"),mnt.forEach(t),Oro=r(kLe," (Speech Encoder decoder model)"),kLe.forEach(t),Vro=i(L),Fg=n(L,"LI",{});var SLe=s(Fg);cse=n(SLe,"STRONG",{});var gnt=s(cse);Xro=r(gnt,"speech_to_text"),gnt.forEach(t),zro=r(SLe," \u2014 "),FP=n(SLe,"A",{href:!0});var hnt=s(FP);Qro=r(hnt,"Speech2TextConfig"),hnt.forEach(t),Wro=r(SLe," (Speech2Text model)"),SLe.forEach(t),Hro=i(L),Tg=n(L,"LI",{});var RLe=s(Tg);fse=n(RLe,"STRONG",{});var pnt=s(fse);Uro=r(pnt,"speech_to_text_2"),pnt.forEach(t),Jro=r(RLe," \u2014 "),TP=n(RLe,"A",{href:!0});var _nt=s(TP);Yro=r(_nt,"Speech2Text2Config"),_nt.forEach(t),Kro=r(RLe," (Speech2Text2 model)"),RLe.forEach(t),Zro=i(L),Mg=n(L,"LI",{});var PLe=s(Mg);mse=n(PLe,"STRONG",{});var unt=s(mse);eto=r(unt,"splinter"),unt.forEach(t),oto=r(PLe," \u2014 "),MP=n(PLe,"A",{href:!0});var bnt=s(MP);rto=r(bnt,"SplinterConfig"),bnt.forEach(t),tto=r(PLe," (Splinter model)"),PLe.forEach(t),ato=i(L),Eg=n(L,"LI",{});var BLe=s(Eg);gse=n(BLe,"STRONG",{});var vnt=s(gse);nto=r(vnt,"squeezebert"),vnt.forEach(t),sto=r(BLe," \u2014 "),EP=n(BLe,"A",{href:!0});var Fnt=s(EP);lto=r(Fnt,"SqueezeBertConfig"),Fnt.forEach(t),ito=r(BLe," (SqueezeBERT model)"),BLe.forEach(t),dto=i(L),Cg=n(L,"LI",{});var NLe=s(Cg);hse=n(NLe,"STRONG",{});var Tnt=s(hse);cto=r(Tnt,"swin"),Tnt.forEach(t),fto=r(NLe," \u2014 "),CP=n(NLe,"A",{href:!0});var Mnt=s(CP);mto=r(Mnt,"SwinConfig"),Mnt.forEach(t),gto=r(NLe," (Swin Transformer model)"),NLe.forEach(t),hto=i(L),wg=n(L,"LI",{});var ILe=s(wg);pse=n(ILe,"STRONG",{});var Ent=s(pse);pto=r(Ent,"t5"),Ent.forEach(t),_to=r(ILe," \u2014 "),wP=n(ILe,"A",{href:!0});var Cnt=s(wP);uto=r(Cnt,"T5Config"),Cnt.forEach(t),bto=r(ILe," (T5 model)"),ILe.forEach(t),vto=i(L),Ag=n(L,"LI",{});var qLe=s(Ag);_se=n(qLe,"STRONG",{});var wnt=s(_se);Fto=r(wnt,"tapas"),wnt.forEach(t),Tto=r(qLe," \u2014 "),AP=n(qLe,"A",{href:!0});var Ant=s(AP);Mto=r(Ant,"TapasConfig"),Ant.forEach(t),Eto=r(qLe," (TAPAS model)"),qLe.forEach(t),Cto=i(L),Lg=n(L,"LI",{});var jLe=s(Lg);use=n(jLe,"STRONG",{});var Lnt=s(use);wto=r(Lnt,"trajectory_transformer"),Lnt.forEach(t),Ato=r(jLe," \u2014 "),LP=n(jLe,"A",{href:!0});var ynt=s(LP);Lto=r(ynt,"TrajectoryTransformerConfig"),ynt.forEach(t),yto=r(jLe," (Trajectory Transformer model)"),jLe.forEach(t),xto=i(L),yg=n(L,"LI",{});var DLe=s(yg);bse=n(DLe,"STRONG",{});var xnt=s(bse);$to=r(xnt,"transfo-xl"),xnt.forEach(t),kto=r(DLe," \u2014 "),yP=n(DLe,"A",{href:!0});var $nt=s(yP);Sto=r($nt,"TransfoXLConfig"),$nt.forEach(t),Rto=r(DLe," (Transformer-XL model)"),DLe.forEach(t),Pto=i(L),xg=n(L,"LI",{});var GLe=s(xg);vse=n(GLe,"STRONG",{});var knt=s(vse);Bto=r(knt,"trocr"),knt.forEach(t),Nto=r(GLe," \u2014 "),xP=n(GLe,"A",{href:!0});var Snt=s(xP);Ito=r(Snt,"TrOCRConfig"),Snt.forEach(t),qto=r(GLe," (TrOCR model)"),GLe.forEach(t),jto=i(L),$g=n(L,"LI",{});var OLe=s($g);Fse=n(OLe,"STRONG",{});var Rnt=s(Fse);Dto=r(Rnt,"unispeech"),Rnt.forEach(t),Gto=r(OLe," \u2014 "),$P=n(OLe,"A",{href:!0});var Pnt=s($P);Oto=r(Pnt,"UniSpeechConfig"),Pnt.forEach(t),Vto=r(OLe," (UniSpeech model)"),OLe.forEach(t),Xto=i(L),kg=n(L,"LI",{});var VLe=s(kg);Tse=n(VLe,"STRONG",{});var Bnt=s(Tse);zto=r(Bnt,"unispeech-sat"),Bnt.forEach(t),Qto=r(VLe," \u2014 "),kP=n(VLe,"A",{href:!0});var Nnt=s(kP);Wto=r(Nnt,"UniSpeechSatConfig"),Nnt.forEach(t),Hto=r(VLe," (UniSpeechSat model)"),VLe.forEach(t),Uto=i(L),Sg=n(L,"LI",{});var XLe=s(Sg);Mse=n(XLe,"STRONG",{});var Int=s(Mse);Jto=r(Int,"van"),Int.forEach(t),Yto=r(XLe," \u2014 "),SP=n(XLe,"A",{href:!0});var qnt=s(SP);Kto=r(qnt,"VanConfig"),qnt.forEach(t),Zto=r(XLe," (VAN model)"),XLe.forEach(t),eao=i(L),Rg=n(L,"LI",{});var zLe=s(Rg);Ese=n(zLe,"STRONG",{});var jnt=s(Ese);oao=r(jnt,"vilt"),jnt.forEach(t),rao=r(zLe," \u2014 "),RP=n(zLe,"A",{href:!0});var Dnt=s(RP);tao=r(Dnt,"ViltConfig"),Dnt.forEach(t),aao=r(zLe," (ViLT model)"),zLe.forEach(t),nao=i(L),Pg=n(L,"LI",{});var QLe=s(Pg);Cse=n(QLe,"STRONG",{});var Gnt=s(Cse);sao=r(Gnt,"vision-encoder-decoder"),Gnt.forEach(t),lao=r(QLe," \u2014 "),PP=n(QLe,"A",{href:!0});var Ont=s(PP);iao=r(Ont,"VisionEncoderDecoderConfig"),Ont.forEach(t),dao=r(QLe," (Vision Encoder decoder model)"),QLe.forEach(t),cao=i(L),Bg=n(L,"LI",{});var WLe=s(Bg);wse=n(WLe,"STRONG",{});var Vnt=s(wse);fao=r(Vnt,"vision-text-dual-encoder"),Vnt.forEach(t),mao=r(WLe," \u2014 "),BP=n(WLe,"A",{href:!0});var Xnt=s(BP);gao=r(Xnt,"VisionTextDualEncoderConfig"),Xnt.forEach(t),hao=r(WLe," (VisionTextDualEncoder model)"),WLe.forEach(t),pao=i(L),Ng=n(L,"LI",{});var HLe=s(Ng);Ase=n(HLe,"STRONG",{});var znt=s(Ase);_ao=r(znt,"visual_bert"),znt.forEach(t),uao=r(HLe," \u2014 "),NP=n(HLe,"A",{href:!0});var Qnt=s(NP);bao=r(Qnt,"VisualBertConfig"),Qnt.forEach(t),vao=r(HLe," (VisualBERT model)"),HLe.forEach(t),Fao=i(L),Ig=n(L,"LI",{});var ULe=s(Ig);Lse=n(ULe,"STRONG",{});var Wnt=s(Lse);Tao=r(Wnt,"vit"),Wnt.forEach(t),Mao=r(ULe," \u2014 "),IP=n(ULe,"A",{href:!0});var Hnt=s(IP);Eao=r(Hnt,"ViTConfig"),Hnt.forEach(t),Cao=r(ULe," (ViT model)"),ULe.forEach(t),wao=i(L),qg=n(L,"LI",{});var JLe=s(qg);yse=n(JLe,"STRONG",{});var Unt=s(yse);Aao=r(Unt,"vit_mae"),Unt.forEach(t),Lao=r(JLe," \u2014 "),qP=n(JLe,"A",{href:!0});var Jnt=s(qP);yao=r(Jnt,"ViTMAEConfig"),Jnt.forEach(t),xao=r(JLe," (ViTMAE model)"),JLe.forEach(t),$ao=i(L),jg=n(L,"LI",{});var YLe=s(jg);xse=n(YLe,"STRONG",{});var Ynt=s(xse);kao=r(Ynt,"wav2vec2"),Ynt.forEach(t),Sao=r(YLe," \u2014 "),jP=n(YLe,"A",{href:!0});var Knt=s(jP);Rao=r(Knt,"Wav2Vec2Config"),Knt.forEach(t),Pao=r(YLe," (Wav2Vec2 model)"),YLe.forEach(t),Bao=i(L),Dg=n(L,"LI",{});var KLe=s(Dg);$se=n(KLe,"STRONG",{});var Znt=s($se);Nao=r(Znt,"wav2vec2-conformer"),Znt.forEach(t),Iao=r(KLe," \u2014 "),DP=n(KLe,"A",{href:!0});var est=s(DP);qao=r(est,"Wav2Vec2ConformerConfig"),est.forEach(t),jao=r(KLe," (Wav2Vec2-Conformer model)"),KLe.forEach(t),Dao=i(L),Gg=n(L,"LI",{});var ZLe=s(Gg);kse=n(ZLe,"STRONG",{});var ost=s(kse);Gao=r(ost,"wavlm"),ost.forEach(t),Oao=r(ZLe," \u2014 "),GP=n(ZLe,"A",{href:!0});var rst=s(GP);Vao=r(rst,"WavLMConfig"),rst.forEach(t),Xao=r(ZLe," (WavLM model)"),ZLe.forEach(t),zao=i(L),Og=n(L,"LI",{});var eye=s(Og);Sse=n(eye,"STRONG",{});var tst=s(Sse);Qao=r(tst,"xglm"),tst.forEach(t),Wao=r(eye," \u2014 "),OP=n(eye,"A",{href:!0});var ast=s(OP);Hao=r(ast,"XGLMConfig"),ast.forEach(t),Uao=r(eye," (XGLM model)"),eye.forEach(t),Jao=i(L),Vg=n(L,"LI",{});var oye=s(Vg);Rse=n(oye,"STRONG",{});var nst=s(Rse);Yao=r(nst,"xlm"),nst.forEach(t),Kao=r(oye," \u2014 "),VP=n(oye,"A",{href:!0});var sst=s(VP);Zao=r(sst,"XLMConfig"),sst.forEach(t),eno=r(oye," (XLM model)"),oye.forEach(t),ono=i(L),Xg=n(L,"LI",{});var rye=s(Xg);Pse=n(rye,"STRONG",{});var lst=s(Pse);rno=r(lst,"xlm-prophetnet"),lst.forEach(t),tno=r(rye," \u2014 "),XP=n(rye,"A",{href:!0});var ist=s(XP);ano=r(ist,"XLMProphetNetConfig"),ist.forEach(t),nno=r(rye," (XLM-ProphetNet model)"),rye.forEach(t),sno=i(L),zg=n(L,"LI",{});var tye=s(zg);Bse=n(tye,"STRONG",{});var dst=s(Bse);lno=r(dst,"xlm-roberta"),dst.forEach(t),ino=r(tye," \u2014 "),zP=n(tye,"A",{href:!0});var cst=s(zP);dno=r(cst,"XLMRobertaConfig"),cst.forEach(t),cno=r(tye," (XLM-RoBERTa model)"),tye.forEach(t),fno=i(L),Qg=n(L,"LI",{});var aye=s(Qg);Nse=n(aye,"STRONG",{});var fst=s(Nse);mno=r(fst,"xlm-roberta-xl"),fst.forEach(t),gno=r(aye," \u2014 "),QP=n(aye,"A",{href:!0});var mst=s(QP);hno=r(mst,"XLMRobertaXLConfig"),mst.forEach(t),pno=r(aye," (XLM-RoBERTa-XL model)"),aye.forEach(t),_no=i(L),Wg=n(L,"LI",{});var nye=s(Wg);Ise=n(nye,"STRONG",{});var gst=s(Ise);uno=r(gst,"xlnet"),gst.forEach(t),bno=r(nye," \u2014 "),WP=n(nye,"A",{href:!0});var hst=s(WP);vno=r(hst,"XLNetConfig"),hst.forEach(t),Fno=r(nye," (XLNet model)"),nye.forEach(t),Tno=i(L),Hg=n(L,"LI",{});var sye=s(Hg);qse=n(sye,"STRONG",{});var pst=s(qse);Mno=r(pst,"yolos"),pst.forEach(t),Eno=r(sye," \u2014 "),HP=n(sye,"A",{href:!0});var _st=s(HP);Cno=r(_st,"YolosConfig"),_st.forEach(t),wno=r(sye," (YOLOS model)"),sye.forEach(t),Ano=i(L),Ug=n(L,"LI",{});var lye=s(Ug);jse=n(lye,"STRONG",{});var ust=s(jse);Lno=r(ust,"yoso"),ust.forEach(t),yno=r(lye," \u2014 "),UP=n(lye,"A",{href:!0});var bst=s(UP);xno=r(bst,"YosoConfig"),bst.forEach(t),$no=r(lye," (YOSO model)"),lye.forEach(t),L.forEach(t),kno=i(nt),T(Jg.$$.fragment,nt),nt.forEach(t),Sno=i(at),Yg=n(at,"DIV",{class:!0});var Kze=s(Yg);T(cL.$$.fragment,Kze),Rno=i(Kze),Dse=n(Kze,"P",{});var vst=s(Dse);Pno=r(vst,"Register a new configuration for this class."),vst.forEach(t),Kze.forEach(t),at.forEach(t),ZVe=i(f),Ni=n(f,"H2",{class:!0});var Zze=s(Ni);Kg=n(Zze,"A",{id:!0,class:!0,href:!0});var Fst=s(Kg);Gse=n(Fst,"SPAN",{});var Tst=s(Gse);T(fL.$$.fragment,Tst),Tst.forEach(t),Fst.forEach(t),Bno=i(Zze),Ose=n(Zze,"SPAN",{});var Mst=s(Ose);Nno=r(Mst,"AutoTokenizer"),Mst.forEach(t),Zze.forEach(t),eXe=i(f),Ao=n(f,"DIV",{class:!0});var Ys=s(Ao);T(mL.$$.fragment,Ys),Ino=i(Ys),gL=n(Ys,"P",{});var eQe=s(gL);qno=r(eQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JP=n(eQe,"A",{href:!0});var Est=s(JP);jno=r(Est,"AutoTokenizer.from_pretrained()"),Est.forEach(t),Dno=r(eQe," class method."),eQe.forEach(t),Gno=i(Ys),hL=n(Ys,"P",{});var oQe=s(hL);Ono=r(oQe,"This class cannot be instantiated directly using "),Vse=n(oQe,"CODE",{});var Cst=s(Vse);Vno=r(Cst,"__init__()"),Cst.forEach(t),Xno=r(oQe," (throws an error)."),oQe.forEach(t),zno=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(pL.$$.fragment,Ks),Qno=i(Ks),Xse=n(Ks,"P",{});var wst=s(Xse);Wno=r(wst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wst.forEach(t),Hno=i(Ks),Pa=n(Ks,"P",{});var n6=s(Pa);Uno=r(n6,"The tokenizer class to instantiate is selected based on the "),zse=n(n6,"CODE",{});var Ast=s(zse);Jno=r(Ast,"model_type"),Ast.forEach(t),Yno=r(n6,` property of the config object (either
passed as an argument or loaded from `),Qse=n(n6,"CODE",{});var Lst=s(Qse);Kno=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),Zno=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wse=n(n6,"CODE",{});var yst=s(Wse);eso=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),oso=r(n6,":"),n6.forEach(t),rso=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Tk=s(jn);Hse=n(Tk,"STRONG",{});var xst=s(Hse);tso=r(xst,"albert"),xst.forEach(t),aso=r(Tk," \u2014 "),YP=n(Tk,"A",{href:!0});var $st=s(YP);nso=r($st,"AlbertTokenizer"),$st.forEach(t),sso=r(Tk," or "),KP=n(Tk,"A",{href:!0});var kst=s(KP);lso=r(kst,"AlbertTokenizerFast"),kst.forEach(t),iso=r(Tk," (ALBERT model)"),Tk.forEach(t),dso=i(S),Dn=n(S,"LI",{});var Mk=s(Dn);Use=n(Mk,"STRONG",{});var Sst=s(Use);cso=r(Sst,"bart"),Sst.forEach(t),fso=r(Mk," \u2014 "),ZP=n(Mk,"A",{href:!0});var Rst=s(ZP);mso=r(Rst,"BartTokenizer"),Rst.forEach(t),gso=r(Mk," or "),eB=n(Mk,"A",{href:!0});var Pst=s(eB);hso=r(Pst,"BartTokenizerFast"),Pst.forEach(t),pso=r(Mk," (BART model)"),Mk.forEach(t),_so=i(S),Gn=n(S,"LI",{});var Ek=s(Gn);Jse=n(Ek,"STRONG",{});var Bst=s(Jse);uso=r(Bst,"barthez"),Bst.forEach(t),bso=r(Ek," \u2014 "),oB=n(Ek,"A",{href:!0});var Nst=s(oB);vso=r(Nst,"BarthezTokenizer"),Nst.forEach(t),Fso=r(Ek," or "),rB=n(Ek,"A",{href:!0});var Ist=s(rB);Tso=r(Ist,"BarthezTokenizerFast"),Ist.forEach(t),Mso=r(Ek," (BARThez model)"),Ek.forEach(t),Eso=i(S),Zg=n(S,"LI",{});var iye=s(Zg);Yse=n(iye,"STRONG",{});var qst=s(Yse);Cso=r(qst,"bartpho"),qst.forEach(t),wso=r(iye," \u2014 "),tB=n(iye,"A",{href:!0});var jst=s(tB);Aso=r(jst,"BartphoTokenizer"),jst.forEach(t),Lso=r(iye," (BARTpho model)"),iye.forEach(t),yso=i(S),On=n(S,"LI",{});var Ck=s(On);Kse=n(Ck,"STRONG",{});var Dst=s(Kse);xso=r(Dst,"bert"),Dst.forEach(t),$so=r(Ck," \u2014 "),aB=n(Ck,"A",{href:!0});var Gst=s(aB);kso=r(Gst,"BertTokenizer"),Gst.forEach(t),Sso=r(Ck," or "),nB=n(Ck,"A",{href:!0});var Ost=s(nB);Rso=r(Ost,"BertTokenizerFast"),Ost.forEach(t),Pso=r(Ck," (BERT model)"),Ck.forEach(t),Bso=i(S),eh=n(S,"LI",{});var dye=s(eh);Zse=n(dye,"STRONG",{});var Vst=s(Zse);Nso=r(Vst,"bert-generation"),Vst.forEach(t),Iso=r(dye," \u2014 "),sB=n(dye,"A",{href:!0});var Xst=s(sB);qso=r(Xst,"BertGenerationTokenizer"),Xst.forEach(t),jso=r(dye," (Bert Generation model)"),dye.forEach(t),Dso=i(S),oh=n(S,"LI",{});var cye=s(oh);ele=n(cye,"STRONG",{});var zst=s(ele);Gso=r(zst,"bert-japanese"),zst.forEach(t),Oso=r(cye," \u2014 "),lB=n(cye,"A",{href:!0});var Qst=s(lB);Vso=r(Qst,"BertJapaneseTokenizer"),Qst.forEach(t),Xso=r(cye," (BertJapanese model)"),cye.forEach(t),zso=i(S),rh=n(S,"LI",{});var fye=s(rh);ole=n(fye,"STRONG",{});var Wst=s(ole);Qso=r(Wst,"bertweet"),Wst.forEach(t),Wso=r(fye," \u2014 "),iB=n(fye,"A",{href:!0});var Hst=s(iB);Hso=r(Hst,"BertweetTokenizer"),Hst.forEach(t),Uso=r(fye," (BERTweet model)"),fye.forEach(t),Jso=i(S),Vn=n(S,"LI",{});var wk=s(Vn);rle=n(wk,"STRONG",{});var Ust=s(rle);Yso=r(Ust,"big_bird"),Ust.forEach(t),Kso=r(wk," \u2014 "),dB=n(wk,"A",{href:!0});var Jst=s(dB);Zso=r(Jst,"BigBirdTokenizer"),Jst.forEach(t),elo=r(wk," or "),cB=n(wk,"A",{href:!0});var Yst=s(cB);olo=r(Yst,"BigBirdTokenizerFast"),Yst.forEach(t),rlo=r(wk," (BigBird model)"),wk.forEach(t),tlo=i(S),Xn=n(S,"LI",{});var Ak=s(Xn);tle=n(Ak,"STRONG",{});var Kst=s(tle);alo=r(Kst,"bigbird_pegasus"),Kst.forEach(t),nlo=r(Ak," \u2014 "),fB=n(Ak,"A",{href:!0});var Zst=s(fB);slo=r(Zst,"PegasusTokenizer"),Zst.forEach(t),llo=r(Ak," or "),mB=n(Ak,"A",{href:!0});var elt=s(mB);ilo=r(elt,"PegasusTokenizerFast"),elt.forEach(t),dlo=r(Ak," (BigBird-Pegasus model)"),Ak.forEach(t),clo=i(S),zn=n(S,"LI",{});var Lk=s(zn);ale=n(Lk,"STRONG",{});var olt=s(ale);flo=r(olt,"blenderbot"),olt.forEach(t),mlo=r(Lk," \u2014 "),gB=n(Lk,"A",{href:!0});var rlt=s(gB);glo=r(rlt,"BlenderbotTokenizer"),rlt.forEach(t),hlo=r(Lk," or "),hB=n(Lk,"A",{href:!0});var tlt=s(hB);plo=r(tlt,"BlenderbotTokenizerFast"),tlt.forEach(t),_lo=r(Lk," (Blenderbot model)"),Lk.forEach(t),ulo=i(S),th=n(S,"LI",{});var mye=s(th);nle=n(mye,"STRONG",{});var alt=s(nle);blo=r(alt,"blenderbot-small"),alt.forEach(t),vlo=r(mye," \u2014 "),pB=n(mye,"A",{href:!0});var nlt=s(pB);Flo=r(nlt,"BlenderbotSmallTokenizer"),nlt.forEach(t),Tlo=r(mye," (BlenderbotSmall model)"),mye.forEach(t),Mlo=i(S),ah=n(S,"LI",{});var gye=s(ah);sle=n(gye,"STRONG",{});var slt=s(sle);Elo=r(slt,"bloom"),slt.forEach(t),Clo=r(gye," \u2014 "),_B=n(gye,"A",{href:!0});var llt=s(_B);wlo=r(llt,"BloomTokenizerFast"),llt.forEach(t),Alo=r(gye," (BLOOM model)"),gye.forEach(t),Llo=i(S),nh=n(S,"LI",{});var hye=s(nh);lle=n(hye,"STRONG",{});var ilt=s(lle);ylo=r(ilt,"byt5"),ilt.forEach(t),xlo=r(hye," \u2014 "),uB=n(hye,"A",{href:!0});var dlt=s(uB);$lo=r(dlt,"ByT5Tokenizer"),dlt.forEach(t),klo=r(hye," (ByT5 model)"),hye.forEach(t),Slo=i(S),Qn=n(S,"LI",{});var yk=s(Qn);ile=n(yk,"STRONG",{});var clt=s(ile);Rlo=r(clt,"camembert"),clt.forEach(t),Plo=r(yk," \u2014 "),bB=n(yk,"A",{href:!0});var flt=s(bB);Blo=r(flt,"CamembertTokenizer"),flt.forEach(t),Nlo=r(yk," or "),vB=n(yk,"A",{href:!0});var mlt=s(vB);Ilo=r(mlt,"CamembertTokenizerFast"),mlt.forEach(t),qlo=r(yk," (CamemBERT model)"),yk.forEach(t),jlo=i(S),sh=n(S,"LI",{});var pye=s(sh);dle=n(pye,"STRONG",{});var glt=s(dle);Dlo=r(glt,"canine"),glt.forEach(t),Glo=r(pye," \u2014 "),FB=n(pye,"A",{href:!0});var hlt=s(FB);Olo=r(hlt,"CanineTokenizer"),hlt.forEach(t),Vlo=r(pye," (CANINE model)"),pye.forEach(t),Xlo=i(S),Wn=n(S,"LI",{});var xk=s(Wn);cle=n(xk,"STRONG",{});var plt=s(cle);zlo=r(plt,"clip"),plt.forEach(t),Qlo=r(xk," \u2014 "),TB=n(xk,"A",{href:!0});var _lt=s(TB);Wlo=r(_lt,"CLIPTokenizer"),_lt.forEach(t),Hlo=r(xk," or "),MB=n(xk,"A",{href:!0});var ult=s(MB);Ulo=r(ult,"CLIPTokenizerFast"),ult.forEach(t),Jlo=r(xk," (CLIP model)"),xk.forEach(t),Ylo=i(S),Hn=n(S,"LI",{});var $k=s(Hn);fle=n($k,"STRONG",{});var blt=s(fle);Klo=r(blt,"codegen"),blt.forEach(t),Zlo=r($k," \u2014 "),EB=n($k,"A",{href:!0});var vlt=s(EB);eio=r(vlt,"CodeGenTokenizer"),vlt.forEach(t),oio=r($k," or "),CB=n($k,"A",{href:!0});var Flt=s(CB);rio=r(Flt,"CodeGenTokenizerFast"),Flt.forEach(t),tio=r($k," (CodeGen model)"),$k.forEach(t),aio=i(S),Un=n(S,"LI",{});var kk=s(Un);mle=n(kk,"STRONG",{});var Tlt=s(mle);nio=r(Tlt,"convbert"),Tlt.forEach(t),sio=r(kk," \u2014 "),wB=n(kk,"A",{href:!0});var Mlt=s(wB);lio=r(Mlt,"ConvBertTokenizer"),Mlt.forEach(t),iio=r(kk," or "),AB=n(kk,"A",{href:!0});var Elt=s(AB);dio=r(Elt,"ConvBertTokenizerFast"),Elt.forEach(t),cio=r(kk," (ConvBERT model)"),kk.forEach(t),fio=i(S),Jn=n(S,"LI",{});var Sk=s(Jn);gle=n(Sk,"STRONG",{});var Clt=s(gle);mio=r(Clt,"cpm"),Clt.forEach(t),gio=r(Sk," \u2014 "),LB=n(Sk,"A",{href:!0});var wlt=s(LB);hio=r(wlt,"CpmTokenizer"),wlt.forEach(t),pio=r(Sk," or "),yB=n(Sk,"A",{href:!0});var Alt=s(yB);_io=r(Alt,"CpmTokenizerFast"),Alt.forEach(t),uio=r(Sk," (CPM model)"),Sk.forEach(t),bio=i(S),lh=n(S,"LI",{});var _ye=s(lh);hle=n(_ye,"STRONG",{});var Llt=s(hle);vio=r(Llt,"ctrl"),Llt.forEach(t),Fio=r(_ye," \u2014 "),xB=n(_ye,"A",{href:!0});var ylt=s(xB);Tio=r(ylt,"CTRLTokenizer"),ylt.forEach(t),Mio=r(_ye," (CTRL model)"),_ye.forEach(t),Eio=i(S),Yn=n(S,"LI",{});var Rk=s(Yn);ple=n(Rk,"STRONG",{});var xlt=s(ple);Cio=r(xlt,"data2vec-text"),xlt.forEach(t),wio=r(Rk," \u2014 "),$B=n(Rk,"A",{href:!0});var $lt=s($B);Aio=r($lt,"RobertaTokenizer"),$lt.forEach(t),Lio=r(Rk," or "),kB=n(Rk,"A",{href:!0});var klt=s(kB);yio=r(klt,"RobertaTokenizerFast"),klt.forEach(t),xio=r(Rk," (Data2VecText model)"),Rk.forEach(t),$io=i(S),Kn=n(S,"LI",{});var Pk=s(Kn);_le=n(Pk,"STRONG",{});var Slt=s(_le);kio=r(Slt,"deberta"),Slt.forEach(t),Sio=r(Pk," \u2014 "),SB=n(Pk,"A",{href:!0});var Rlt=s(SB);Rio=r(Rlt,"DebertaTokenizer"),Rlt.forEach(t),Pio=r(Pk," or "),RB=n(Pk,"A",{href:!0});var Plt=s(RB);Bio=r(Plt,"DebertaTokenizerFast"),Plt.forEach(t),Nio=r(Pk," (DeBERTa model)"),Pk.forEach(t),Iio=i(S),Zn=n(S,"LI",{});var Bk=s(Zn);ule=n(Bk,"STRONG",{});var Blt=s(ule);qio=r(Blt,"deberta-v2"),Blt.forEach(t),jio=r(Bk," \u2014 "),PB=n(Bk,"A",{href:!0});var Nlt=s(PB);Dio=r(Nlt,"DebertaV2Tokenizer"),Nlt.forEach(t),Gio=r(Bk," or "),BB=n(Bk,"A",{href:!0});var Ilt=s(BB);Oio=r(Ilt,"DebertaV2TokenizerFast"),Ilt.forEach(t),Vio=r(Bk," (DeBERTa-v2 model)"),Bk.forEach(t),Xio=i(S),es=n(S,"LI",{});var Nk=s(es);ble=n(Nk,"STRONG",{});var qlt=s(ble);zio=r(qlt,"distilbert"),qlt.forEach(t),Qio=r(Nk," \u2014 "),NB=n(Nk,"A",{href:!0});var jlt=s(NB);Wio=r(jlt,"DistilBertTokenizer"),jlt.forEach(t),Hio=r(Nk," or "),IB=n(Nk,"A",{href:!0});var Dlt=s(IB);Uio=r(Dlt,"DistilBertTokenizerFast"),Dlt.forEach(t),Jio=r(Nk," (DistilBERT model)"),Nk.forEach(t),Yio=i(S),os=n(S,"LI",{});var Ik=s(os);vle=n(Ik,"STRONG",{});var Glt=s(vle);Kio=r(Glt,"dpr"),Glt.forEach(t),Zio=r(Ik," \u2014 "),qB=n(Ik,"A",{href:!0});var Olt=s(qB);edo=r(Olt,"DPRQuestionEncoderTokenizer"),Olt.forEach(t),odo=r(Ik," or "),jB=n(Ik,"A",{href:!0});var Vlt=s(jB);rdo=r(Vlt,"DPRQuestionEncoderTokenizerFast"),Vlt.forEach(t),tdo=r(Ik," (DPR model)"),Ik.forEach(t),ado=i(S),rs=n(S,"LI",{});var qk=s(rs);Fle=n(qk,"STRONG",{});var Xlt=s(Fle);ndo=r(Xlt,"electra"),Xlt.forEach(t),sdo=r(qk," \u2014 "),DB=n(qk,"A",{href:!0});var zlt=s(DB);ldo=r(zlt,"ElectraTokenizer"),zlt.forEach(t),ido=r(qk," or "),GB=n(qk,"A",{href:!0});var Qlt=s(GB);ddo=r(Qlt,"ElectraTokenizerFast"),Qlt.forEach(t),cdo=r(qk," (ELECTRA model)"),qk.forEach(t),fdo=i(S),ih=n(S,"LI",{});var uye=s(ih);Tle=n(uye,"STRONG",{});var Wlt=s(Tle);mdo=r(Wlt,"flaubert"),Wlt.forEach(t),gdo=r(uye," \u2014 "),OB=n(uye,"A",{href:!0});var Hlt=s(OB);hdo=r(Hlt,"FlaubertTokenizer"),Hlt.forEach(t),pdo=r(uye," (FlauBERT model)"),uye.forEach(t),_do=i(S),ts=n(S,"LI",{});var jk=s(ts);Mle=n(jk,"STRONG",{});var Ult=s(Mle);udo=r(Ult,"fnet"),Ult.forEach(t),bdo=r(jk," \u2014 "),VB=n(jk,"A",{href:!0});var Jlt=s(VB);vdo=r(Jlt,"FNetTokenizer"),Jlt.forEach(t),Fdo=r(jk," or "),XB=n(jk,"A",{href:!0});var Ylt=s(XB);Tdo=r(Ylt,"FNetTokenizerFast"),Ylt.forEach(t),Mdo=r(jk," (FNet model)"),jk.forEach(t),Edo=i(S),dh=n(S,"LI",{});var bye=s(dh);Ele=n(bye,"STRONG",{});var Klt=s(Ele);Cdo=r(Klt,"fsmt"),Klt.forEach(t),wdo=r(bye," \u2014 "),zB=n(bye,"A",{href:!0});var Zlt=s(zB);Ado=r(Zlt,"FSMTTokenizer"),Zlt.forEach(t),Ldo=r(bye," (FairSeq Machine-Translation model)"),bye.forEach(t),ydo=i(S),as=n(S,"LI",{});var Dk=s(as);Cle=n(Dk,"STRONG",{});var eit=s(Cle);xdo=r(eit,"funnel"),eit.forEach(t),$do=r(Dk," \u2014 "),QB=n(Dk,"A",{href:!0});var oit=s(QB);kdo=r(oit,"FunnelTokenizer"),oit.forEach(t),Sdo=r(Dk," or "),WB=n(Dk,"A",{href:!0});var rit=s(WB);Rdo=r(rit,"FunnelTokenizerFast"),rit.forEach(t),Pdo=r(Dk," (Funnel Transformer model)"),Dk.forEach(t),Bdo=i(S),ns=n(S,"LI",{});var Gk=s(ns);wle=n(Gk,"STRONG",{});var tit=s(wle);Ndo=r(tit,"gpt2"),tit.forEach(t),Ido=r(Gk," \u2014 "),HB=n(Gk,"A",{href:!0});var ait=s(HB);qdo=r(ait,"GPT2Tokenizer"),ait.forEach(t),jdo=r(Gk," or "),UB=n(Gk,"A",{href:!0});var nit=s(UB);Ddo=r(nit,"GPT2TokenizerFast"),nit.forEach(t),Gdo=r(Gk," (OpenAI GPT-2 model)"),Gk.forEach(t),Odo=i(S),ss=n(S,"LI",{});var Ok=s(ss);Ale=n(Ok,"STRONG",{});var sit=s(Ale);Vdo=r(sit,"gpt_neo"),sit.forEach(t),Xdo=r(Ok," \u2014 "),JB=n(Ok,"A",{href:!0});var lit=s(JB);zdo=r(lit,"GPT2Tokenizer"),lit.forEach(t),Qdo=r(Ok," or "),YB=n(Ok,"A",{href:!0});var iit=s(YB);Wdo=r(iit,"GPT2TokenizerFast"),iit.forEach(t),Hdo=r(Ok," (GPT Neo model)"),Ok.forEach(t),Udo=i(S),ch=n(S,"LI",{});var vye=s(ch);Lle=n(vye,"STRONG",{});var dit=s(Lle);Jdo=r(dit,"gpt_neox"),dit.forEach(t),Ydo=r(vye," \u2014 "),KB=n(vye,"A",{href:!0});var cit=s(KB);Kdo=r(cit,"GPTNeoXTokenizerFast"),cit.forEach(t),Zdo=r(vye," (GPT NeoX model)"),vye.forEach(t),eco=i(S),ls=n(S,"LI",{});var Vk=s(ls);yle=n(Vk,"STRONG",{});var fit=s(yle);oco=r(fit,"gptj"),fit.forEach(t),rco=r(Vk," \u2014 "),ZB=n(Vk,"A",{href:!0});var mit=s(ZB);tco=r(mit,"GPT2Tokenizer"),mit.forEach(t),aco=r(Vk," or "),eN=n(Vk,"A",{href:!0});var git=s(eN);nco=r(git,"GPT2TokenizerFast"),git.forEach(t),sco=r(Vk," (GPT-J model)"),Vk.forEach(t),lco=i(S),is=n(S,"LI",{});var Xk=s(is);xle=n(Xk,"STRONG",{});var hit=s(xle);ico=r(hit,"groupvit"),hit.forEach(t),dco=r(Xk," \u2014 "),oN=n(Xk,"A",{href:!0});var pit=s(oN);cco=r(pit,"CLIPTokenizer"),pit.forEach(t),fco=r(Xk," or "),rN=n(Xk,"A",{href:!0});var _it=s(rN);mco=r(_it,"CLIPTokenizerFast"),_it.forEach(t),gco=r(Xk," (GroupViT model)"),Xk.forEach(t),hco=i(S),ds=n(S,"LI",{});var zk=s(ds);$le=n(zk,"STRONG",{});var uit=s($le);pco=r(uit,"herbert"),uit.forEach(t),_co=r(zk," \u2014 "),tN=n(zk,"A",{href:!0});var bit=s(tN);uco=r(bit,"HerbertTokenizer"),bit.forEach(t),bco=r(zk," or "),aN=n(zk,"A",{href:!0});var vit=s(aN);vco=r(vit,"HerbertTokenizerFast"),vit.forEach(t),Fco=r(zk," (HerBERT model)"),zk.forEach(t),Tco=i(S),fh=n(S,"LI",{});var Fye=s(fh);kle=n(Fye,"STRONG",{});var Fit=s(kle);Mco=r(Fit,"hubert"),Fit.forEach(t),Eco=r(Fye," \u2014 "),nN=n(Fye,"A",{href:!0});var Tit=s(nN);Cco=r(Tit,"Wav2Vec2CTCTokenizer"),Tit.forEach(t),wco=r(Fye," (Hubert model)"),Fye.forEach(t),Aco=i(S),cs=n(S,"LI",{});var Qk=s(cs);Sle=n(Qk,"STRONG",{});var Mit=s(Sle);Lco=r(Mit,"ibert"),Mit.forEach(t),yco=r(Qk," \u2014 "),sN=n(Qk,"A",{href:!0});var Eit=s(sN);xco=r(Eit,"RobertaTokenizer"),Eit.forEach(t),$co=r(Qk," or "),lN=n(Qk,"A",{href:!0});var Cit=s(lN);kco=r(Cit,"RobertaTokenizerFast"),Cit.forEach(t),Sco=r(Qk," (I-BERT model)"),Qk.forEach(t),Rco=i(S),fs=n(S,"LI",{});var Wk=s(fs);Rle=n(Wk,"STRONG",{});var wit=s(Rle);Pco=r(wit,"layoutlm"),wit.forEach(t),Bco=r(Wk," \u2014 "),iN=n(Wk,"A",{href:!0});var Ait=s(iN);Nco=r(Ait,"LayoutLMTokenizer"),Ait.forEach(t),Ico=r(Wk," or "),dN=n(Wk,"A",{href:!0});var Lit=s(dN);qco=r(Lit,"LayoutLMTokenizerFast"),Lit.forEach(t),jco=r(Wk," (LayoutLM model)"),Wk.forEach(t),Dco=i(S),ms=n(S,"LI",{});var Hk=s(ms);Ple=n(Hk,"STRONG",{});var yit=s(Ple);Gco=r(yit,"layoutlmv2"),yit.forEach(t),Oco=r(Hk," \u2014 "),cN=n(Hk,"A",{href:!0});var xit=s(cN);Vco=r(xit,"LayoutLMv2Tokenizer"),xit.forEach(t),Xco=r(Hk," or "),fN=n(Hk,"A",{href:!0});var $it=s(fN);zco=r($it,"LayoutLMv2TokenizerFast"),$it.forEach(t),Qco=r(Hk," (LayoutLMv2 model)"),Hk.forEach(t),Wco=i(S),gs=n(S,"LI",{});var Uk=s(gs);Ble=n(Uk,"STRONG",{});var kit=s(Ble);Hco=r(kit,"layoutlmv3"),kit.forEach(t),Uco=r(Uk," \u2014 "),mN=n(Uk,"A",{href:!0});var Sit=s(mN);Jco=r(Sit,"LayoutLMv3Tokenizer"),Sit.forEach(t),Yco=r(Uk," or "),gN=n(Uk,"A",{href:!0});var Rit=s(gN);Kco=r(Rit,"LayoutLMv3TokenizerFast"),Rit.forEach(t),Zco=r(Uk," (LayoutLMv3 model)"),Uk.forEach(t),efo=i(S),hs=n(S,"LI",{});var Jk=s(hs);Nle=n(Jk,"STRONG",{});var Pit=s(Nle);ofo=r(Pit,"layoutxlm"),Pit.forEach(t),rfo=r(Jk," \u2014 "),hN=n(Jk,"A",{href:!0});var Bit=s(hN);tfo=r(Bit,"LayoutXLMTokenizer"),Bit.forEach(t),afo=r(Jk," or "),pN=n(Jk,"A",{href:!0});var Nit=s(pN);nfo=r(Nit,"LayoutXLMTokenizerFast"),Nit.forEach(t),sfo=r(Jk," (LayoutXLM model)"),Jk.forEach(t),lfo=i(S),ps=n(S,"LI",{});var Yk=s(ps);Ile=n(Yk,"STRONG",{});var Iit=s(Ile);ifo=r(Iit,"led"),Iit.forEach(t),dfo=r(Yk," \u2014 "),_N=n(Yk,"A",{href:!0});var qit=s(_N);cfo=r(qit,"LEDTokenizer"),qit.forEach(t),ffo=r(Yk," or "),uN=n(Yk,"A",{href:!0});var jit=s(uN);mfo=r(jit,"LEDTokenizerFast"),jit.forEach(t),gfo=r(Yk," (LED model)"),Yk.forEach(t),hfo=i(S),_s=n(S,"LI",{});var Kk=s(_s);qle=n(Kk,"STRONG",{});var Dit=s(qle);pfo=r(Dit,"longformer"),Dit.forEach(t),_fo=r(Kk," \u2014 "),bN=n(Kk,"A",{href:!0});var Git=s(bN);ufo=r(Git,"LongformerTokenizer"),Git.forEach(t),bfo=r(Kk," or "),vN=n(Kk,"A",{href:!0});var Oit=s(vN);vfo=r(Oit,"LongformerTokenizerFast"),Oit.forEach(t),Ffo=r(Kk," (Longformer model)"),Kk.forEach(t),Tfo=i(S),us=n(S,"LI",{});var Zk=s(us);jle=n(Zk,"STRONG",{});var Vit=s(jle);Mfo=r(Vit,"longt5"),Vit.forEach(t),Efo=r(Zk," \u2014 "),FN=n(Zk,"A",{href:!0});var Xit=s(FN);Cfo=r(Xit,"T5Tokenizer"),Xit.forEach(t),wfo=r(Zk," or "),TN=n(Zk,"A",{href:!0});var zit=s(TN);Afo=r(zit,"T5TokenizerFast"),zit.forEach(t),Lfo=r(Zk," (LongT5 model)"),Zk.forEach(t),yfo=i(S),mh=n(S,"LI",{});var Tye=s(mh);Dle=n(Tye,"STRONG",{});var Qit=s(Dle);xfo=r(Qit,"luke"),Qit.forEach(t),$fo=r(Tye," \u2014 "),MN=n(Tye,"A",{href:!0});var Wit=s(MN);kfo=r(Wit,"LukeTokenizer"),Wit.forEach(t),Sfo=r(Tye," (LUKE model)"),Tye.forEach(t),Rfo=i(S),bs=n(S,"LI",{});var eS=s(bs);Gle=n(eS,"STRONG",{});var Hit=s(Gle);Pfo=r(Hit,"lxmert"),Hit.forEach(t),Bfo=r(eS," \u2014 "),EN=n(eS,"A",{href:!0});var Uit=s(EN);Nfo=r(Uit,"LxmertTokenizer"),Uit.forEach(t),Ifo=r(eS," or "),CN=n(eS,"A",{href:!0});var Jit=s(CN);qfo=r(Jit,"LxmertTokenizerFast"),Jit.forEach(t),jfo=r(eS," (LXMERT model)"),eS.forEach(t),Dfo=i(S),gh=n(S,"LI",{});var Mye=s(gh);Ole=n(Mye,"STRONG",{});var Yit=s(Ole);Gfo=r(Yit,"m2m_100"),Yit.forEach(t),Ofo=r(Mye," \u2014 "),wN=n(Mye,"A",{href:!0});var Kit=s(wN);Vfo=r(Kit,"M2M100Tokenizer"),Kit.forEach(t),Xfo=r(Mye," (M2M100 model)"),Mye.forEach(t),zfo=i(S),hh=n(S,"LI",{});var Eye=s(hh);Vle=n(Eye,"STRONG",{});var Zit=s(Vle);Qfo=r(Zit,"marian"),Zit.forEach(t),Wfo=r(Eye," \u2014 "),AN=n(Eye,"A",{href:!0});var edt=s(AN);Hfo=r(edt,"MarianTokenizer"),edt.forEach(t),Ufo=r(Eye," (Marian model)"),Eye.forEach(t),Jfo=i(S),vs=n(S,"LI",{});var oS=s(vs);Xle=n(oS,"STRONG",{});var odt=s(Xle);Yfo=r(odt,"mbart"),odt.forEach(t),Kfo=r(oS," \u2014 "),LN=n(oS,"A",{href:!0});var rdt=s(LN);Zfo=r(rdt,"MBartTokenizer"),rdt.forEach(t),emo=r(oS," or "),yN=n(oS,"A",{href:!0});var tdt=s(yN);omo=r(tdt,"MBartTokenizerFast"),tdt.forEach(t),rmo=r(oS," (mBART model)"),oS.forEach(t),tmo=i(S),Fs=n(S,"LI",{});var rS=s(Fs);zle=n(rS,"STRONG",{});var adt=s(zle);amo=r(adt,"mbart50"),adt.forEach(t),nmo=r(rS," \u2014 "),xN=n(rS,"A",{href:!0});var ndt=s(xN);smo=r(ndt,"MBart50Tokenizer"),ndt.forEach(t),lmo=r(rS," or "),$N=n(rS,"A",{href:!0});var sdt=s($N);imo=r(sdt,"MBart50TokenizerFast"),sdt.forEach(t),dmo=r(rS," (mBART-50 model)"),rS.forEach(t),cmo=i(S),Ts=n(S,"LI",{});var tS=s(Ts);Qle=n(tS,"STRONG",{});var ldt=s(Qle);fmo=r(ldt,"megatron-bert"),ldt.forEach(t),mmo=r(tS," \u2014 "),kN=n(tS,"A",{href:!0});var idt=s(kN);gmo=r(idt,"BertTokenizer"),idt.forEach(t),hmo=r(tS," or "),SN=n(tS,"A",{href:!0});var ddt=s(SN);pmo=r(ddt,"BertTokenizerFast"),ddt.forEach(t),_mo=r(tS," (Megatron-BERT model)"),tS.forEach(t),umo=i(S),ph=n(S,"LI",{});var Cye=s(ph);Wle=n(Cye,"STRONG",{});var cdt=s(Wle);bmo=r(cdt,"mluke"),cdt.forEach(t),vmo=r(Cye," \u2014 "),RN=n(Cye,"A",{href:!0});var fdt=s(RN);Fmo=r(fdt,"MLukeTokenizer"),fdt.forEach(t),Tmo=r(Cye," (mLUKE model)"),Cye.forEach(t),Mmo=i(S),Ms=n(S,"LI",{});var aS=s(Ms);Hle=n(aS,"STRONG",{});var mdt=s(Hle);Emo=r(mdt,"mobilebert"),mdt.forEach(t),Cmo=r(aS," \u2014 "),PN=n(aS,"A",{href:!0});var gdt=s(PN);wmo=r(gdt,"MobileBertTokenizer"),gdt.forEach(t),Amo=r(aS," or "),BN=n(aS,"A",{href:!0});var hdt=s(BN);Lmo=r(hdt,"MobileBertTokenizerFast"),hdt.forEach(t),ymo=r(aS," (MobileBERT model)"),aS.forEach(t),xmo=i(S),Es=n(S,"LI",{});var nS=s(Es);Ule=n(nS,"STRONG",{});var pdt=s(Ule);$mo=r(pdt,"mpnet"),pdt.forEach(t),kmo=r(nS," \u2014 "),NN=n(nS,"A",{href:!0});var _dt=s(NN);Smo=r(_dt,"MPNetTokenizer"),_dt.forEach(t),Rmo=r(nS," or "),IN=n(nS,"A",{href:!0});var udt=s(IN);Pmo=r(udt,"MPNetTokenizerFast"),udt.forEach(t),Bmo=r(nS," (MPNet model)"),nS.forEach(t),Nmo=i(S),Cs=n(S,"LI",{});var sS=s(Cs);Jle=n(sS,"STRONG",{});var bdt=s(Jle);Imo=r(bdt,"mt5"),bdt.forEach(t),qmo=r(sS," \u2014 "),qN=n(sS,"A",{href:!0});var vdt=s(qN);jmo=r(vdt,"MT5Tokenizer"),vdt.forEach(t),Dmo=r(sS," or "),jN=n(sS,"A",{href:!0});var Fdt=s(jN);Gmo=r(Fdt,"MT5TokenizerFast"),Fdt.forEach(t),Omo=r(sS," (MT5 model)"),sS.forEach(t),Vmo=i(S),ws=n(S,"LI",{});var lS=s(ws);Yle=n(lS,"STRONG",{});var Tdt=s(Yle);Xmo=r(Tdt,"mvp"),Tdt.forEach(t),zmo=r(lS," \u2014 "),DN=n(lS,"A",{href:!0});var Mdt=s(DN);Qmo=r(Mdt,"MvpTokenizer"),Mdt.forEach(t),Wmo=r(lS," or "),GN=n(lS,"A",{href:!0});var Edt=s(GN);Hmo=r(Edt,"MvpTokenizerFast"),Edt.forEach(t),Umo=r(lS," (MVP model)"),lS.forEach(t),Jmo=i(S),As=n(S,"LI",{});var iS=s(As);Kle=n(iS,"STRONG",{});var Cdt=s(Kle);Ymo=r(Cdt,"nezha"),Cdt.forEach(t),Kmo=r(iS," \u2014 "),ON=n(iS,"A",{href:!0});var wdt=s(ON);Zmo=r(wdt,"BertTokenizer"),wdt.forEach(t),ego=r(iS," or "),VN=n(iS,"A",{href:!0});var Adt=s(VN);ogo=r(Adt,"BertTokenizerFast"),Adt.forEach(t),rgo=r(iS," (Nezha model)"),iS.forEach(t),tgo=i(S),Ls=n(S,"LI",{});var dS=s(Ls);Zle=n(dS,"STRONG",{});var Ldt=s(Zle);ago=r(Ldt,"nystromformer"),Ldt.forEach(t),ngo=r(dS," \u2014 "),XN=n(dS,"A",{href:!0});var ydt=s(XN);sgo=r(ydt,"AlbertTokenizer"),ydt.forEach(t),lgo=r(dS," or "),zN=n(dS,"A",{href:!0});var xdt=s(zN);igo=r(xdt,"AlbertTokenizerFast"),xdt.forEach(t),dgo=r(dS," (Nystr\xF6mformer model)"),dS.forEach(t),cgo=i(S),ys=n(S,"LI",{});var cS=s(ys);eie=n(cS,"STRONG",{});var $dt=s(eie);fgo=r($dt,"openai-gpt"),$dt.forEach(t),mgo=r(cS," \u2014 "),QN=n(cS,"A",{href:!0});var kdt=s(QN);ggo=r(kdt,"OpenAIGPTTokenizer"),kdt.forEach(t),hgo=r(cS," or "),WN=n(cS,"A",{href:!0});var Sdt=s(WN);pgo=r(Sdt,"OpenAIGPTTokenizerFast"),Sdt.forEach(t),_go=r(cS," (OpenAI GPT model)"),cS.forEach(t),ugo=i(S),_h=n(S,"LI",{});var wye=s(_h);oie=n(wye,"STRONG",{});var Rdt=s(oie);bgo=r(Rdt,"opt"),Rdt.forEach(t),vgo=r(wye," \u2014 "),HN=n(wye,"A",{href:!0});var Pdt=s(HN);Fgo=r(Pdt,"GPT2Tokenizer"),Pdt.forEach(t),Tgo=r(wye," (OPT model)"),wye.forEach(t),Mgo=i(S),xs=n(S,"LI",{});var fS=s(xs);rie=n(fS,"STRONG",{});var Bdt=s(rie);Ego=r(Bdt,"pegasus"),Bdt.forEach(t),Cgo=r(fS," \u2014 "),UN=n(fS,"A",{href:!0});var Ndt=s(UN);wgo=r(Ndt,"PegasusTokenizer"),Ndt.forEach(t),Ago=r(fS," or "),JN=n(fS,"A",{href:!0});var Idt=s(JN);Lgo=r(Idt,"PegasusTokenizerFast"),Idt.forEach(t),ygo=r(fS," (Pegasus model)"),fS.forEach(t),xgo=i(S),uh=n(S,"LI",{});var Aye=s(uh);tie=n(Aye,"STRONG",{});var qdt=s(tie);$go=r(qdt,"perceiver"),qdt.forEach(t),kgo=r(Aye," \u2014 "),YN=n(Aye,"A",{href:!0});var jdt=s(YN);Sgo=r(jdt,"PerceiverTokenizer"),jdt.forEach(t),Rgo=r(Aye," (Perceiver model)"),Aye.forEach(t),Pgo=i(S),bh=n(S,"LI",{});var Lye=s(bh);aie=n(Lye,"STRONG",{});var Ddt=s(aie);Bgo=r(Ddt,"phobert"),Ddt.forEach(t),Ngo=r(Lye," \u2014 "),KN=n(Lye,"A",{href:!0});var Gdt=s(KN);Igo=r(Gdt,"PhobertTokenizer"),Gdt.forEach(t),qgo=r(Lye," (PhoBERT model)"),Lye.forEach(t),jgo=i(S),vh=n(S,"LI",{});var yye=s(vh);nie=n(yye,"STRONG",{});var Odt=s(nie);Dgo=r(Odt,"plbart"),Odt.forEach(t),Ggo=r(yye," \u2014 "),ZN=n(yye,"A",{href:!0});var Vdt=s(ZN);Ogo=r(Vdt,"PLBartTokenizer"),Vdt.forEach(t),Vgo=r(yye," (PLBart model)"),yye.forEach(t),Xgo=i(S),Fh=n(S,"LI",{});var xye=s(Fh);sie=n(xye,"STRONG",{});var Xdt=s(sie);zgo=r(Xdt,"prophetnet"),Xdt.forEach(t),Qgo=r(xye," \u2014 "),eI=n(xye,"A",{href:!0});var zdt=s(eI);Wgo=r(zdt,"ProphetNetTokenizer"),zdt.forEach(t),Hgo=r(xye," (ProphetNet model)"),xye.forEach(t),Ugo=i(S),$s=n(S,"LI",{});var mS=s($s);lie=n(mS,"STRONG",{});var Qdt=s(lie);Jgo=r(Qdt,"qdqbert"),Qdt.forEach(t),Ygo=r(mS," \u2014 "),oI=n(mS,"A",{href:!0});var Wdt=s(oI);Kgo=r(Wdt,"BertTokenizer"),Wdt.forEach(t),Zgo=r(mS," or "),rI=n(mS,"A",{href:!0});var Hdt=s(rI);eho=r(Hdt,"BertTokenizerFast"),Hdt.forEach(t),oho=r(mS," (QDQBert model)"),mS.forEach(t),rho=i(S),Th=n(S,"LI",{});var $ye=s(Th);iie=n($ye,"STRONG",{});var Udt=s(iie);tho=r(Udt,"rag"),Udt.forEach(t),aho=r($ye," \u2014 "),tI=n($ye,"A",{href:!0});var Jdt=s(tI);nho=r(Jdt,"RagTokenizer"),Jdt.forEach(t),sho=r($ye," (RAG model)"),$ye.forEach(t),lho=i(S),ks=n(S,"LI",{});var gS=s(ks);die=n(gS,"STRONG",{});var Ydt=s(die);iho=r(Ydt,"realm"),Ydt.forEach(t),dho=r(gS," \u2014 "),aI=n(gS,"A",{href:!0});var Kdt=s(aI);cho=r(Kdt,"RealmTokenizer"),Kdt.forEach(t),fho=r(gS," or "),nI=n(gS,"A",{href:!0});var Zdt=s(nI);mho=r(Zdt,"RealmTokenizerFast"),Zdt.forEach(t),gho=r(gS," (REALM model)"),gS.forEach(t),hho=i(S),Ss=n(S,"LI",{});var hS=s(Ss);cie=n(hS,"STRONG",{});var ect=s(cie);pho=r(ect,"reformer"),ect.forEach(t),_ho=r(hS," \u2014 "),sI=n(hS,"A",{href:!0});var oct=s(sI);uho=r(oct,"ReformerTokenizer"),oct.forEach(t),bho=r(hS," or "),lI=n(hS,"A",{href:!0});var rct=s(lI);vho=r(rct,"ReformerTokenizerFast"),rct.forEach(t),Fho=r(hS," (Reformer model)"),hS.forEach(t),Tho=i(S),Rs=n(S,"LI",{});var pS=s(Rs);fie=n(pS,"STRONG",{});var tct=s(fie);Mho=r(tct,"rembert"),tct.forEach(t),Eho=r(pS," \u2014 "),iI=n(pS,"A",{href:!0});var act=s(iI);Cho=r(act,"RemBertTokenizer"),act.forEach(t),who=r(pS," or "),dI=n(pS,"A",{href:!0});var nct=s(dI);Aho=r(nct,"RemBertTokenizerFast"),nct.forEach(t),Lho=r(pS," (RemBERT model)"),pS.forEach(t),yho=i(S),Ps=n(S,"LI",{});var _S=s(Ps);mie=n(_S,"STRONG",{});var sct=s(mie);xho=r(sct,"retribert"),sct.forEach(t),$ho=r(_S," \u2014 "),cI=n(_S,"A",{href:!0});var lct=s(cI);kho=r(lct,"RetriBertTokenizer"),lct.forEach(t),Sho=r(_S," or "),fI=n(_S,"A",{href:!0});var ict=s(fI);Rho=r(ict,"RetriBertTokenizerFast"),ict.forEach(t),Pho=r(_S," (RetriBERT model)"),_S.forEach(t),Bho=i(S),Bs=n(S,"LI",{});var uS=s(Bs);gie=n(uS,"STRONG",{});var dct=s(gie);Nho=r(dct,"roberta"),dct.forEach(t),Iho=r(uS," \u2014 "),mI=n(uS,"A",{href:!0});var cct=s(mI);qho=r(cct,"RobertaTokenizer"),cct.forEach(t),jho=r(uS," or "),gI=n(uS,"A",{href:!0});var fct=s(gI);Dho=r(fct,"RobertaTokenizerFast"),fct.forEach(t),Gho=r(uS," (RoBERTa model)"),uS.forEach(t),Oho=i(S),Ns=n(S,"LI",{});var bS=s(Ns);hie=n(bS,"STRONG",{});var mct=s(hie);Vho=r(mct,"roformer"),mct.forEach(t),Xho=r(bS," \u2014 "),hI=n(bS,"A",{href:!0});var gct=s(hI);zho=r(gct,"RoFormerTokenizer"),gct.forEach(t),Qho=r(bS," or "),pI=n(bS,"A",{href:!0});var hct=s(pI);Who=r(hct,"RoFormerTokenizerFast"),hct.forEach(t),Hho=r(bS," (RoFormer model)"),bS.forEach(t),Uho=i(S),Mh=n(S,"LI",{});var kye=s(Mh);pie=n(kye,"STRONG",{});var pct=s(pie);Jho=r(pct,"speech_to_text"),pct.forEach(t),Yho=r(kye," \u2014 "),_I=n(kye,"A",{href:!0});var _ct=s(_I);Kho=r(_ct,"Speech2TextTokenizer"),_ct.forEach(t),Zho=r(kye," (Speech2Text model)"),kye.forEach(t),epo=i(S),Eh=n(S,"LI",{});var Sye=s(Eh);_ie=n(Sye,"STRONG",{});var uct=s(_ie);opo=r(uct,"speech_to_text_2"),uct.forEach(t),rpo=r(Sye," \u2014 "),uI=n(Sye,"A",{href:!0});var bct=s(uI);tpo=r(bct,"Speech2Text2Tokenizer"),bct.forEach(t),apo=r(Sye," (Speech2Text2 model)"),Sye.forEach(t),npo=i(S),Is=n(S,"LI",{});var vS=s(Is);uie=n(vS,"STRONG",{});var vct=s(uie);spo=r(vct,"splinter"),vct.forEach(t),lpo=r(vS," \u2014 "),bI=n(vS,"A",{href:!0});var Fct=s(bI);ipo=r(Fct,"SplinterTokenizer"),Fct.forEach(t),dpo=r(vS," or "),vI=n(vS,"A",{href:!0});var Tct=s(vI);cpo=r(Tct,"SplinterTokenizerFast"),Tct.forEach(t),fpo=r(vS," (Splinter model)"),vS.forEach(t),mpo=i(S),qs=n(S,"LI",{});var FS=s(qs);bie=n(FS,"STRONG",{});var Mct=s(bie);gpo=r(Mct,"squeezebert"),Mct.forEach(t),hpo=r(FS," \u2014 "),FI=n(FS,"A",{href:!0});var Ect=s(FI);ppo=r(Ect,"SqueezeBertTokenizer"),Ect.forEach(t),_po=r(FS," or "),TI=n(FS,"A",{href:!0});var Cct=s(TI);upo=r(Cct,"SqueezeBertTokenizerFast"),Cct.forEach(t),bpo=r(FS," (SqueezeBERT model)"),FS.forEach(t),vpo=i(S),js=n(S,"LI",{});var TS=s(js);vie=n(TS,"STRONG",{});var wct=s(vie);Fpo=r(wct,"t5"),wct.forEach(t),Tpo=r(TS," \u2014 "),MI=n(TS,"A",{href:!0});var Act=s(MI);Mpo=r(Act,"T5Tokenizer"),Act.forEach(t),Epo=r(TS," or "),EI=n(TS,"A",{href:!0});var Lct=s(EI);Cpo=r(Lct,"T5TokenizerFast"),Lct.forEach(t),wpo=r(TS," (T5 model)"),TS.forEach(t),Apo=i(S),Ch=n(S,"LI",{});var Rye=s(Ch);Fie=n(Rye,"STRONG",{});var yct=s(Fie);Lpo=r(yct,"tapas"),yct.forEach(t),ypo=r(Rye," \u2014 "),CI=n(Rye,"A",{href:!0});var xct=s(CI);xpo=r(xct,"TapasTokenizer"),xct.forEach(t),$po=r(Rye," (TAPAS model)"),Rye.forEach(t),kpo=i(S),wh=n(S,"LI",{});var Pye=s(wh);Tie=n(Pye,"STRONG",{});var $ct=s(Tie);Spo=r($ct,"tapex"),$ct.forEach(t),Rpo=r(Pye," \u2014 "),wI=n(Pye,"A",{href:!0});var kct=s(wI);Ppo=r(kct,"TapexTokenizer"),kct.forEach(t),Bpo=r(Pye," (TAPEX model)"),Pye.forEach(t),Npo=i(S),Ah=n(S,"LI",{});var Bye=s(Ah);Mie=n(Bye,"STRONG",{});var Sct=s(Mie);Ipo=r(Sct,"transfo-xl"),Sct.forEach(t),qpo=r(Bye," \u2014 "),AI=n(Bye,"A",{href:!0});var Rct=s(AI);jpo=r(Rct,"TransfoXLTokenizer"),Rct.forEach(t),Dpo=r(Bye," (Transformer-XL model)"),Bye.forEach(t),Gpo=i(S),Ds=n(S,"LI",{});var MS=s(Ds);Eie=n(MS,"STRONG",{});var Pct=s(Eie);Opo=r(Pct,"vilt"),Pct.forEach(t),Vpo=r(MS," \u2014 "),LI=n(MS,"A",{href:!0});var Bct=s(LI);Xpo=r(Bct,"BertTokenizer"),Bct.forEach(t),zpo=r(MS," or "),yI=n(MS,"A",{href:!0});var Nct=s(yI);Qpo=r(Nct,"BertTokenizerFast"),Nct.forEach(t),Wpo=r(MS," (ViLT model)"),MS.forEach(t),Hpo=i(S),Gs=n(S,"LI",{});var ES=s(Gs);Cie=n(ES,"STRONG",{});var Ict=s(Cie);Upo=r(Ict,"visual_bert"),Ict.forEach(t),Jpo=r(ES," \u2014 "),xI=n(ES,"A",{href:!0});var qct=s(xI);Ypo=r(qct,"BertTokenizer"),qct.forEach(t),Kpo=r(ES," or "),$I=n(ES,"A",{href:!0});var jct=s($I);Zpo=r(jct,"BertTokenizerFast"),jct.forEach(t),e_o=r(ES," (VisualBERT model)"),ES.forEach(t),o_o=i(S),Lh=n(S,"LI",{});var Nye=s(Lh);wie=n(Nye,"STRONG",{});var Dct=s(wie);r_o=r(Dct,"wav2vec2"),Dct.forEach(t),t_o=r(Nye," \u2014 "),kI=n(Nye,"A",{href:!0});var Gct=s(kI);a_o=r(Gct,"Wav2Vec2CTCTokenizer"),Gct.forEach(t),n_o=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),s_o=i(S),yh=n(S,"LI",{});var Iye=s(yh);Aie=n(Iye,"STRONG",{});var Oct=s(Aie);l_o=r(Oct,"wav2vec2-conformer"),Oct.forEach(t),i_o=r(Iye," \u2014 "),SI=n(Iye,"A",{href:!0});var Vct=s(SI);d_o=r(Vct,"Wav2Vec2CTCTokenizer"),Vct.forEach(t),c_o=r(Iye," (Wav2Vec2-Conformer model)"),Iye.forEach(t),f_o=i(S),xh=n(S,"LI",{});var qye=s(xh);Lie=n(qye,"STRONG",{});var Xct=s(Lie);m_o=r(Xct,"wav2vec2_phoneme"),Xct.forEach(t),g_o=r(qye," \u2014 "),RI=n(qye,"A",{href:!0});var zct=s(RI);h_o=r(zct,"Wav2Vec2PhonemeCTCTokenizer"),zct.forEach(t),p_o=r(qye," (Wav2Vec2Phoneme model)"),qye.forEach(t),__o=i(S),Os=n(S,"LI",{});var CS=s(Os);yie=n(CS,"STRONG",{});var Qct=s(yie);u_o=r(Qct,"xglm"),Qct.forEach(t),b_o=r(CS," \u2014 "),PI=n(CS,"A",{href:!0});var Wct=s(PI);v_o=r(Wct,"XGLMTokenizer"),Wct.forEach(t),F_o=r(CS," or "),BI=n(CS,"A",{href:!0});var Hct=s(BI);T_o=r(Hct,"XGLMTokenizerFast"),Hct.forEach(t),M_o=r(CS," (XGLM model)"),CS.forEach(t),E_o=i(S),$h=n(S,"LI",{});var jye=s($h);xie=n(jye,"STRONG",{});var Uct=s(xie);C_o=r(Uct,"xlm"),Uct.forEach(t),w_o=r(jye," \u2014 "),NI=n(jye,"A",{href:!0});var Jct=s(NI);A_o=r(Jct,"XLMTokenizer"),Jct.forEach(t),L_o=r(jye," (XLM model)"),jye.forEach(t),y_o=i(S),kh=n(S,"LI",{});var Dye=s(kh);$ie=n(Dye,"STRONG",{});var Yct=s($ie);x_o=r(Yct,"xlm-prophetnet"),Yct.forEach(t),$_o=r(Dye," \u2014 "),II=n(Dye,"A",{href:!0});var Kct=s(II);k_o=r(Kct,"XLMProphetNetTokenizer"),Kct.forEach(t),S_o=r(Dye," (XLM-ProphetNet model)"),Dye.forEach(t),R_o=i(S),Vs=n(S,"LI",{});var wS=s(Vs);kie=n(wS,"STRONG",{});var Zct=s(kie);P_o=r(Zct,"xlm-roberta"),Zct.forEach(t),B_o=r(wS," \u2014 "),qI=n(wS,"A",{href:!0});var eft=s(qI);N_o=r(eft,"XLMRobertaTokenizer"),eft.forEach(t),I_o=r(wS," or "),jI=n(wS,"A",{href:!0});var oft=s(jI);q_o=r(oft,"XLMRobertaTokenizerFast"),oft.forEach(t),j_o=r(wS," (XLM-RoBERTa model)"),wS.forEach(t),D_o=i(S),Xs=n(S,"LI",{});var AS=s(Xs);Sie=n(AS,"STRONG",{});var rft=s(Sie);G_o=r(rft,"xlm-roberta-xl"),rft.forEach(t),O_o=r(AS," \u2014 "),DI=n(AS,"A",{href:!0});var tft=s(DI);V_o=r(tft,"RobertaTokenizer"),tft.forEach(t),X_o=r(AS," or "),GI=n(AS,"A",{href:!0});var aft=s(GI);z_o=r(aft,"RobertaTokenizerFast"),aft.forEach(t),Q_o=r(AS," (XLM-RoBERTa-XL model)"),AS.forEach(t),W_o=i(S),zs=n(S,"LI",{});var LS=s(zs);Rie=n(LS,"STRONG",{});var nft=s(Rie);H_o=r(nft,"xlnet"),nft.forEach(t),U_o=r(LS," \u2014 "),OI=n(LS,"A",{href:!0});var sft=s(OI);J_o=r(sft,"XLNetTokenizer"),sft.forEach(t),Y_o=r(LS," or "),VI=n(LS,"A",{href:!0});var lft=s(VI);K_o=r(lft,"XLNetTokenizerFast"),lft.forEach(t),Z_o=r(LS," (XLNet model)"),LS.forEach(t),euo=i(S),Qs=n(S,"LI",{});var yS=s(Qs);Pie=n(yS,"STRONG",{});var ift=s(Pie);ouo=r(ift,"yoso"),ift.forEach(t),ruo=r(yS," \u2014 "),XI=n(yS,"A",{href:!0});var dft=s(XI);tuo=r(dft,"AlbertTokenizer"),dft.forEach(t),auo=r(yS," or "),zI=n(yS,"A",{href:!0});var cft=s(zI);nuo=r(cft,"AlbertTokenizerFast"),cft.forEach(t),suo=r(yS," (YOSO model)"),yS.forEach(t),S.forEach(t),luo=i(Ks),T(Sh.$$.fragment,Ks),Ks.forEach(t),iuo=i(Ys),Rh=n(Ys,"DIV",{class:!0});var rQe=s(Rh);T(_L.$$.fragment,rQe),duo=i(rQe),Bie=n(rQe,"P",{});var fft=s(Bie);cuo=r(fft,"Register a new tokenizer in this mapping."),fft.forEach(t),rQe.forEach(t),Ys.forEach(t),oXe=i(f),Ii=n(f,"H2",{class:!0});var tQe=s(Ii);Ph=n(tQe,"A",{id:!0,class:!0,href:!0});var mft=s(Ph);Nie=n(mft,"SPAN",{});var gft=s(Nie);T(uL.$$.fragment,gft),gft.forEach(t),mft.forEach(t),fuo=i(tQe),Iie=n(tQe,"SPAN",{});var hft=s(Iie);muo=r(hft,"AutoFeatureExtractor"),hft.forEach(t),tQe.forEach(t),rXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(bL.$$.fragment,Zs),guo=i(Zs),vL=n(Zs,"P",{});var aQe=s(vL);huo=r(aQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),QI=n(aQe,"A",{href:!0});var pft=s(QI);puo=r(pft,"AutoFeatureExtractor.from_pretrained()"),pft.forEach(t),_uo=r(aQe," class method."),aQe.forEach(t),uuo=i(Zs),FL=n(Zs,"P",{});var nQe=s(FL);buo=r(nQe,"This class cannot be instantiated directly using "),qie=n(nQe,"CODE",{});var _ft=s(qie);vuo=r(_ft,"__init__()"),_ft.forEach(t),Fuo=r(nQe," (throws an error)."),nQe.forEach(t),Tuo=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(TL.$$.fragment,aa),Muo=i(aa),jie=n(aa,"P",{});var uft=s(jie);Euo=r(uft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),uft.forEach(t),Cuo=i(aa),Ba=n(aa,"P",{});var s6=s(Ba);wuo=r(s6,"The feature extractor class to instantiate is selected based on the "),Die=n(s6,"CODE",{});var bft=s(Die);Auo=r(bft,"model_type"),bft.forEach(t),Luo=r(s6,` property of the config object
(either passed as an argument or loaded from `),Gie=n(s6,"CODE",{});var vft=s(Gie);yuo=r(vft,"pretrained_model_name_or_path"),vft.forEach(t),xuo=r(s6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Oie=n(s6,"CODE",{});var Fft=s(Oie);$uo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),kuo=r(s6,":"),s6.forEach(t),Suo=i(aa),Y=n(aa,"UL",{});var K=s(Y);Bh=n(K,"LI",{});var Gye=s(Bh);Vie=n(Gye,"STRONG",{});var Tft=s(Vie);Ruo=r(Tft,"beit"),Tft.forEach(t),Puo=r(Gye," \u2014 "),WI=n(Gye,"A",{href:!0});var Mft=s(WI);Buo=r(Mft,"BeitFeatureExtractor"),Mft.forEach(t),Nuo=r(Gye," (BEiT model)"),Gye.forEach(t),Iuo=i(K),Nh=n(K,"LI",{});var Oye=s(Nh);Xie=n(Oye,"STRONG",{});var Eft=s(Xie);quo=r(Eft,"clip"),Eft.forEach(t),juo=r(Oye," \u2014 "),HI=n(Oye,"A",{href:!0});var Cft=s(HI);Duo=r(Cft,"CLIPFeatureExtractor"),Cft.forEach(t),Guo=r(Oye," (CLIP model)"),Oye.forEach(t),Ouo=i(K),Ih=n(K,"LI",{});var Vye=s(Ih);zie=n(Vye,"STRONG",{});var wft=s(zie);Vuo=r(wft,"convnext"),wft.forEach(t),Xuo=r(Vye," \u2014 "),UI=n(Vye,"A",{href:!0});var Aft=s(UI);zuo=r(Aft,"ConvNextFeatureExtractor"),Aft.forEach(t),Quo=r(Vye," (ConvNeXT model)"),Vye.forEach(t),Wuo=i(K),qh=n(K,"LI",{});var Xye=s(qh);Qie=n(Xye,"STRONG",{});var Lft=s(Qie);Huo=r(Lft,"cvt"),Lft.forEach(t),Uuo=r(Xye," \u2014 "),JI=n(Xye,"A",{href:!0});var yft=s(JI);Juo=r(yft,"ConvNextFeatureExtractor"),yft.forEach(t),Yuo=r(Xye," (CvT model)"),Xye.forEach(t),Kuo=i(K),jh=n(K,"LI",{});var zye=s(jh);Wie=n(zye,"STRONG",{});var xft=s(Wie);Zuo=r(xft,"data2vec-audio"),xft.forEach(t),e1o=r(zye," \u2014 "),YI=n(zye,"A",{href:!0});var $ft=s(YI);o1o=r($ft,"Wav2Vec2FeatureExtractor"),$ft.forEach(t),r1o=r(zye," (Data2VecAudio model)"),zye.forEach(t),t1o=i(K),Dh=n(K,"LI",{});var Qye=s(Dh);Hie=n(Qye,"STRONG",{});var kft=s(Hie);a1o=r(kft,"data2vec-vision"),kft.forEach(t),n1o=r(Qye," \u2014 "),KI=n(Qye,"A",{href:!0});var Sft=s(KI);s1o=r(Sft,"BeitFeatureExtractor"),Sft.forEach(t),l1o=r(Qye," (Data2VecVision model)"),Qye.forEach(t),i1o=i(K),Gh=n(K,"LI",{});var Wye=s(Gh);Uie=n(Wye,"STRONG",{});var Rft=s(Uie);d1o=r(Rft,"deit"),Rft.forEach(t),c1o=r(Wye," \u2014 "),ZI=n(Wye,"A",{href:!0});var Pft=s(ZI);f1o=r(Pft,"DeiTFeatureExtractor"),Pft.forEach(t),m1o=r(Wye," (DeiT model)"),Wye.forEach(t),g1o=i(K),Oh=n(K,"LI",{});var Hye=s(Oh);Jie=n(Hye,"STRONG",{});var Bft=s(Jie);h1o=r(Bft,"detr"),Bft.forEach(t),p1o=r(Hye," \u2014 "),eq=n(Hye,"A",{href:!0});var Nft=s(eq);_1o=r(Nft,"DetrFeatureExtractor"),Nft.forEach(t),u1o=r(Hye," (DETR model)"),Hye.forEach(t),b1o=i(K),Vh=n(K,"LI",{});var Uye=s(Vh);Yie=n(Uye,"STRONG",{});var Ift=s(Yie);v1o=r(Ift,"dpt"),Ift.forEach(t),F1o=r(Uye," \u2014 "),oq=n(Uye,"A",{href:!0});var qft=s(oq);T1o=r(qft,"DPTFeatureExtractor"),qft.forEach(t),M1o=r(Uye," (DPT model)"),Uye.forEach(t),E1o=i(K),Xh=n(K,"LI",{});var Jye=s(Xh);Kie=n(Jye,"STRONG",{});var jft=s(Kie);C1o=r(jft,"flava"),jft.forEach(t),w1o=r(Jye," \u2014 "),rq=n(Jye,"A",{href:!0});var Dft=s(rq);A1o=r(Dft,"FlavaFeatureExtractor"),Dft.forEach(t),L1o=r(Jye," (FLAVA model)"),Jye.forEach(t),y1o=i(K),zh=n(K,"LI",{});var Yye=s(zh);Zie=n(Yye,"STRONG",{});var Gft=s(Zie);x1o=r(Gft,"glpn"),Gft.forEach(t),$1o=r(Yye," \u2014 "),tq=n(Yye,"A",{href:!0});var Oft=s(tq);k1o=r(Oft,"GLPNFeatureExtractor"),Oft.forEach(t),S1o=r(Yye," (GLPN model)"),Yye.forEach(t),R1o=i(K),Qh=n(K,"LI",{});var Kye=s(Qh);ede=n(Kye,"STRONG",{});var Vft=s(ede);P1o=r(Vft,"groupvit"),Vft.forEach(t),B1o=r(Kye," \u2014 "),aq=n(Kye,"A",{href:!0});var Xft=s(aq);N1o=r(Xft,"CLIPFeatureExtractor"),Xft.forEach(t),I1o=r(Kye," (GroupViT model)"),Kye.forEach(t),q1o=i(K),Wh=n(K,"LI",{});var Zye=s(Wh);ode=n(Zye,"STRONG",{});var zft=s(ode);j1o=r(zft,"hubert"),zft.forEach(t),D1o=r(Zye," \u2014 "),nq=n(Zye,"A",{href:!0});var Qft=s(nq);G1o=r(Qft,"Wav2Vec2FeatureExtractor"),Qft.forEach(t),O1o=r(Zye," (Hubert model)"),Zye.forEach(t),V1o=i(K),Hh=n(K,"LI",{});var e9e=s(Hh);rde=n(e9e,"STRONG",{});var Wft=s(rde);X1o=r(Wft,"imagegpt"),Wft.forEach(t),z1o=r(e9e," \u2014 "),sq=n(e9e,"A",{href:!0});var Hft=s(sq);Q1o=r(Hft,"ImageGPTFeatureExtractor"),Hft.forEach(t),W1o=r(e9e," (ImageGPT model)"),e9e.forEach(t),H1o=i(K),Uh=n(K,"LI",{});var o9e=s(Uh);tde=n(o9e,"STRONG",{});var Uft=s(tde);U1o=r(Uft,"layoutlmv2"),Uft.forEach(t),J1o=r(o9e," \u2014 "),lq=n(o9e,"A",{href:!0});var Jft=s(lq);Y1o=r(Jft,"LayoutLMv2FeatureExtractor"),Jft.forEach(t),K1o=r(o9e," (LayoutLMv2 model)"),o9e.forEach(t),Z1o=i(K),Jh=n(K,"LI",{});var r9e=s(Jh);ade=n(r9e,"STRONG",{});var Yft=s(ade);e2o=r(Yft,"layoutlmv3"),Yft.forEach(t),o2o=r(r9e," \u2014 "),iq=n(r9e,"A",{href:!0});var Kft=s(iq);r2o=r(Kft,"LayoutLMv3FeatureExtractor"),Kft.forEach(t),t2o=r(r9e," (LayoutLMv3 model)"),r9e.forEach(t),a2o=i(K),Yh=n(K,"LI",{});var t9e=s(Yh);nde=n(t9e,"STRONG",{});var Zft=s(nde);n2o=r(Zft,"levit"),Zft.forEach(t),s2o=r(t9e," \u2014 "),dq=n(t9e,"A",{href:!0});var emt=s(dq);l2o=r(emt,"LevitFeatureExtractor"),emt.forEach(t),i2o=r(t9e," (LeViT model)"),t9e.forEach(t),d2o=i(K),Kh=n(K,"LI",{});var a9e=s(Kh);sde=n(a9e,"STRONG",{});var omt=s(sde);c2o=r(omt,"maskformer"),omt.forEach(t),f2o=r(a9e," \u2014 "),cq=n(a9e,"A",{href:!0});var rmt=s(cq);m2o=r(rmt,"MaskFormerFeatureExtractor"),rmt.forEach(t),g2o=r(a9e," (MaskFormer model)"),a9e.forEach(t),h2o=i(K),Zh=n(K,"LI",{});var n9e=s(Zh);lde=n(n9e,"STRONG",{});var tmt=s(lde);p2o=r(tmt,"mctct"),tmt.forEach(t),_2o=r(n9e," \u2014 "),fq=n(n9e,"A",{href:!0});var amt=s(fq);u2o=r(amt,"MCTCTFeatureExtractor"),amt.forEach(t),b2o=r(n9e," (M-CTC-T model)"),n9e.forEach(t),v2o=i(K),ep=n(K,"LI",{});var s9e=s(ep);ide=n(s9e,"STRONG",{});var nmt=s(ide);F2o=r(nmt,"mobilevit"),nmt.forEach(t),T2o=r(s9e," \u2014 "),mq=n(s9e,"A",{href:!0});var smt=s(mq);M2o=r(smt,"MobileViTFeatureExtractor"),smt.forEach(t),E2o=r(s9e," (MobileViT model)"),s9e.forEach(t),C2o=i(K),op=n(K,"LI",{});var l9e=s(op);dde=n(l9e,"STRONG",{});var lmt=s(dde);w2o=r(lmt,"perceiver"),lmt.forEach(t),A2o=r(l9e," \u2014 "),gq=n(l9e,"A",{href:!0});var imt=s(gq);L2o=r(imt,"PerceiverFeatureExtractor"),imt.forEach(t),y2o=r(l9e," (Perceiver model)"),l9e.forEach(t),x2o=i(K),rp=n(K,"LI",{});var i9e=s(rp);cde=n(i9e,"STRONG",{});var dmt=s(cde);$2o=r(dmt,"poolformer"),dmt.forEach(t),k2o=r(i9e," \u2014 "),hq=n(i9e,"A",{href:!0});var cmt=s(hq);S2o=r(cmt,"PoolFormerFeatureExtractor"),cmt.forEach(t),R2o=r(i9e," (PoolFormer model)"),i9e.forEach(t),P2o=i(K),tp=n(K,"LI",{});var d9e=s(tp);fde=n(d9e,"STRONG",{});var fmt=s(fde);B2o=r(fmt,"regnet"),fmt.forEach(t),N2o=r(d9e," \u2014 "),pq=n(d9e,"A",{href:!0});var mmt=s(pq);I2o=r(mmt,"ConvNextFeatureExtractor"),mmt.forEach(t),q2o=r(d9e," (RegNet model)"),d9e.forEach(t),j2o=i(K),ap=n(K,"LI",{});var c9e=s(ap);mde=n(c9e,"STRONG",{});var gmt=s(mde);D2o=r(gmt,"resnet"),gmt.forEach(t),G2o=r(c9e," \u2014 "),_q=n(c9e,"A",{href:!0});var hmt=s(_q);O2o=r(hmt,"ConvNextFeatureExtractor"),hmt.forEach(t),V2o=r(c9e," (ResNet model)"),c9e.forEach(t),X2o=i(K),np=n(K,"LI",{});var f9e=s(np);gde=n(f9e,"STRONG",{});var pmt=s(gde);z2o=r(pmt,"segformer"),pmt.forEach(t),Q2o=r(f9e," \u2014 "),uq=n(f9e,"A",{href:!0});var _mt=s(uq);W2o=r(_mt,"SegformerFeatureExtractor"),_mt.forEach(t),H2o=r(f9e," (SegFormer model)"),f9e.forEach(t),U2o=i(K),sp=n(K,"LI",{});var m9e=s(sp);hde=n(m9e,"STRONG",{});var umt=s(hde);J2o=r(umt,"speech_to_text"),umt.forEach(t),Y2o=r(m9e," \u2014 "),bq=n(m9e,"A",{href:!0});var bmt=s(bq);K2o=r(bmt,"Speech2TextFeatureExtractor"),bmt.forEach(t),Z2o=r(m9e," (Speech2Text model)"),m9e.forEach(t),ebo=i(K),lp=n(K,"LI",{});var g9e=s(lp);pde=n(g9e,"STRONG",{});var vmt=s(pde);obo=r(vmt,"swin"),vmt.forEach(t),rbo=r(g9e," \u2014 "),vq=n(g9e,"A",{href:!0});var Fmt=s(vq);tbo=r(Fmt,"ViTFeatureExtractor"),Fmt.forEach(t),abo=r(g9e," (Swin Transformer model)"),g9e.forEach(t),nbo=i(K),ip=n(K,"LI",{});var h9e=s(ip);_de=n(h9e,"STRONG",{});var Tmt=s(_de);sbo=r(Tmt,"van"),Tmt.forEach(t),lbo=r(h9e," \u2014 "),Fq=n(h9e,"A",{href:!0});var Mmt=s(Fq);ibo=r(Mmt,"ConvNextFeatureExtractor"),Mmt.forEach(t),dbo=r(h9e," (VAN model)"),h9e.forEach(t),cbo=i(K),dp=n(K,"LI",{});var p9e=s(dp);ude=n(p9e,"STRONG",{});var Emt=s(ude);fbo=r(Emt,"vilt"),Emt.forEach(t),mbo=r(p9e," \u2014 "),Tq=n(p9e,"A",{href:!0});var Cmt=s(Tq);gbo=r(Cmt,"ViltFeatureExtractor"),Cmt.forEach(t),hbo=r(p9e," (ViLT model)"),p9e.forEach(t),pbo=i(K),cp=n(K,"LI",{});var _9e=s(cp);bde=n(_9e,"STRONG",{});var wmt=s(bde);_bo=r(wmt,"vit"),wmt.forEach(t),ubo=r(_9e," \u2014 "),Mq=n(_9e,"A",{href:!0});var Amt=s(Mq);bbo=r(Amt,"ViTFeatureExtractor"),Amt.forEach(t),vbo=r(_9e," (ViT model)"),_9e.forEach(t),Fbo=i(K),fp=n(K,"LI",{});var u9e=s(fp);vde=n(u9e,"STRONG",{});var Lmt=s(vde);Tbo=r(Lmt,"vit_mae"),Lmt.forEach(t),Mbo=r(u9e," \u2014 "),Eq=n(u9e,"A",{href:!0});var ymt=s(Eq);Ebo=r(ymt,"ViTFeatureExtractor"),ymt.forEach(t),Cbo=r(u9e," (ViTMAE model)"),u9e.forEach(t),wbo=i(K),mp=n(K,"LI",{});var b9e=s(mp);Fde=n(b9e,"STRONG",{});var xmt=s(Fde);Abo=r(xmt,"wav2vec2"),xmt.forEach(t),Lbo=r(b9e," \u2014 "),Cq=n(b9e,"A",{href:!0});var $mt=s(Cq);ybo=r($mt,"Wav2Vec2FeatureExtractor"),$mt.forEach(t),xbo=r(b9e," (Wav2Vec2 model)"),b9e.forEach(t),$bo=i(K),gp=n(K,"LI",{});var v9e=s(gp);Tde=n(v9e,"STRONG",{});var kmt=s(Tde);kbo=r(kmt,"wav2vec2-conformer"),kmt.forEach(t),Sbo=r(v9e," \u2014 "),wq=n(v9e,"A",{href:!0});var Smt=s(wq);Rbo=r(Smt,"Wav2Vec2FeatureExtractor"),Smt.forEach(t),Pbo=r(v9e," (Wav2Vec2-Conformer model)"),v9e.forEach(t),Bbo=i(K),hp=n(K,"LI",{});var F9e=s(hp);Mde=n(F9e,"STRONG",{});var Rmt=s(Mde);Nbo=r(Rmt,"yolos"),Rmt.forEach(t),Ibo=r(F9e," \u2014 "),Aq=n(F9e,"A",{href:!0});var Pmt=s(Aq);qbo=r(Pmt,"YolosFeatureExtractor"),Pmt.forEach(t),jbo=r(F9e," (YOLOS model)"),F9e.forEach(t),K.forEach(t),Dbo=i(aa),T(pp.$$.fragment,aa),Gbo=i(aa),T(_p.$$.fragment,aa),aa.forEach(t),Obo=i(Zs),up=n(Zs,"DIV",{class:!0});var sQe=s(up);T(ML.$$.fragment,sQe),Vbo=i(sQe),Ede=n(sQe,"P",{});var Bmt=s(Ede);Xbo=r(Bmt,"Register a new feature extractor for this class."),Bmt.forEach(t),sQe.forEach(t),Zs.forEach(t),tXe=i(f),qi=n(f,"H2",{class:!0});var lQe=s(qi);bp=n(lQe,"A",{id:!0,class:!0,href:!0});var Nmt=s(bp);Cde=n(Nmt,"SPAN",{});var Imt=s(Cde);T(EL.$$.fragment,Imt),Imt.forEach(t),Nmt.forEach(t),zbo=i(lQe),wde=n(lQe,"SPAN",{});var qmt=s(wde);Qbo=r(qmt,"AutoProcessor"),qmt.forEach(t),lQe.forEach(t),aXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(CL.$$.fragment,el),Wbo=i(el),wL=n(el,"P",{});var iQe=s(wL);Hbo=r(iQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Lq=n(iQe,"A",{href:!0});var jmt=s(Lq);Ubo=r(jmt,"AutoProcessor.from_pretrained()"),jmt.forEach(t),Jbo=r(iQe," class method."),iQe.forEach(t),Ybo=i(el),AL=n(el,"P",{});var dQe=s(AL);Kbo=r(dQe,"This class cannot be instantiated directly using "),Ade=n(dQe,"CODE",{});var Dmt=s(Ade);Zbo=r(Dmt,"__init__()"),Dmt.forEach(t),evo=r(dQe," (throws an error)."),dQe.forEach(t),ovo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(LL.$$.fragment,na),rvo=i(na),Lde=n(na,"P",{});var Gmt=s(Lde);tvo=r(Gmt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Gmt.forEach(t),avo=i(na),ji=n(na,"P",{});var Are=s(ji);nvo=r(Are,"The processor class to instantiate is selected based on the "),yde=n(Are,"CODE",{});var Omt=s(yde);svo=r(Omt,"model_type"),Omt.forEach(t),lvo=r(Are,` property of the config object (either
passed as an argument or loaded from `),xde=n(Are,"CODE",{});var Vmt=s(xde);ivo=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),dvo=r(Are," if possible):"),Are.forEach(t),cvo=i(na),he=n(na,"UL",{});var ue=s(he);vp=n(ue,"LI",{});var T9e=s(vp);$de=n(T9e,"STRONG",{});var Xmt=s($de);fvo=r(Xmt,"clip"),Xmt.forEach(t),mvo=r(T9e," \u2014 "),yq=n(T9e,"A",{href:!0});var zmt=s(yq);gvo=r(zmt,"CLIPProcessor"),zmt.forEach(t),hvo=r(T9e," (CLIP model)"),T9e.forEach(t),pvo=i(ue),Fp=n(ue,"LI",{});var M9e=s(Fp);kde=n(M9e,"STRONG",{});var Qmt=s(kde);_vo=r(Qmt,"flava"),Qmt.forEach(t),uvo=r(M9e," \u2014 "),Sde=n(M9e,"CODE",{});var Wmt=s(Sde);bvo=r(Wmt,"FLAVAProcessor"),Wmt.forEach(t),vvo=r(M9e," (FLAVA model)"),M9e.forEach(t),Fvo=i(ue),Tp=n(ue,"LI",{});var E9e=s(Tp);Rde=n(E9e,"STRONG",{});var Hmt=s(Rde);Tvo=r(Hmt,"groupvit"),Hmt.forEach(t),Mvo=r(E9e," \u2014 "),xq=n(E9e,"A",{href:!0});var Umt=s(xq);Evo=r(Umt,"CLIPProcessor"),Umt.forEach(t),Cvo=r(E9e," (GroupViT model)"),E9e.forEach(t),wvo=i(ue),Mp=n(ue,"LI",{});var C9e=s(Mp);Pde=n(C9e,"STRONG",{});var Jmt=s(Pde);Avo=r(Jmt,"layoutlmv2"),Jmt.forEach(t),Lvo=r(C9e," \u2014 "),$q=n(C9e,"A",{href:!0});var Ymt=s($q);yvo=r(Ymt,"LayoutLMv2Processor"),Ymt.forEach(t),xvo=r(C9e," (LayoutLMv2 model)"),C9e.forEach(t),$vo=i(ue),Ep=n(ue,"LI",{});var w9e=s(Ep);Bde=n(w9e,"STRONG",{});var Kmt=s(Bde);kvo=r(Kmt,"layoutlmv3"),Kmt.forEach(t),Svo=r(w9e," \u2014 "),kq=n(w9e,"A",{href:!0});var Zmt=s(kq);Rvo=r(Zmt,"LayoutLMv3Processor"),Zmt.forEach(t),Pvo=r(w9e," (LayoutLMv3 model)"),w9e.forEach(t),Bvo=i(ue),Cp=n(ue,"LI",{});var A9e=s(Cp);Nde=n(A9e,"STRONG",{});var egt=s(Nde);Nvo=r(egt,"layoutxlm"),egt.forEach(t),Ivo=r(A9e," \u2014 "),Sq=n(A9e,"A",{href:!0});var ogt=s(Sq);qvo=r(ogt,"LayoutXLMProcessor"),ogt.forEach(t),jvo=r(A9e," (LayoutXLM model)"),A9e.forEach(t),Dvo=i(ue),wp=n(ue,"LI",{});var L9e=s(wp);Ide=n(L9e,"STRONG",{});var rgt=s(Ide);Gvo=r(rgt,"sew"),rgt.forEach(t),Ovo=r(L9e," \u2014 "),Rq=n(L9e,"A",{href:!0});var tgt=s(Rq);Vvo=r(tgt,"Wav2Vec2Processor"),tgt.forEach(t),Xvo=r(L9e," (SEW model)"),L9e.forEach(t),zvo=i(ue),Ap=n(ue,"LI",{});var y9e=s(Ap);qde=n(y9e,"STRONG",{});var agt=s(qde);Qvo=r(agt,"sew-d"),agt.forEach(t),Wvo=r(y9e," \u2014 "),Pq=n(y9e,"A",{href:!0});var ngt=s(Pq);Hvo=r(ngt,"Wav2Vec2Processor"),ngt.forEach(t),Uvo=r(y9e," (SEW-D model)"),y9e.forEach(t),Jvo=i(ue),Lp=n(ue,"LI",{});var x9e=s(Lp);jde=n(x9e,"STRONG",{});var sgt=s(jde);Yvo=r(sgt,"speech_to_text"),sgt.forEach(t),Kvo=r(x9e," \u2014 "),Bq=n(x9e,"A",{href:!0});var lgt=s(Bq);Zvo=r(lgt,"Speech2TextProcessor"),lgt.forEach(t),e3o=r(x9e," (Speech2Text model)"),x9e.forEach(t),o3o=i(ue),yp=n(ue,"LI",{});var $9e=s(yp);Dde=n($9e,"STRONG",{});var igt=s(Dde);r3o=r(igt,"speech_to_text_2"),igt.forEach(t),t3o=r($9e," \u2014 "),Nq=n($9e,"A",{href:!0});var dgt=s(Nq);a3o=r(dgt,"Speech2Text2Processor"),dgt.forEach(t),n3o=r($9e," (Speech2Text2 model)"),$9e.forEach(t),s3o=i(ue),xp=n(ue,"LI",{});var k9e=s(xp);Gde=n(k9e,"STRONG",{});var cgt=s(Gde);l3o=r(cgt,"trocr"),cgt.forEach(t),i3o=r(k9e," \u2014 "),Iq=n(k9e,"A",{href:!0});var fgt=s(Iq);d3o=r(fgt,"TrOCRProcessor"),fgt.forEach(t),c3o=r(k9e," (TrOCR model)"),k9e.forEach(t),f3o=i(ue),$p=n(ue,"LI",{});var S9e=s($p);Ode=n(S9e,"STRONG",{});var mgt=s(Ode);m3o=r(mgt,"unispeech"),mgt.forEach(t),g3o=r(S9e," \u2014 "),qq=n(S9e,"A",{href:!0});var ggt=s(qq);h3o=r(ggt,"Wav2Vec2Processor"),ggt.forEach(t),p3o=r(S9e," (UniSpeech model)"),S9e.forEach(t),_3o=i(ue),kp=n(ue,"LI",{});var R9e=s(kp);Vde=n(R9e,"STRONG",{});var hgt=s(Vde);u3o=r(hgt,"unispeech-sat"),hgt.forEach(t),b3o=r(R9e," \u2014 "),jq=n(R9e,"A",{href:!0});var pgt=s(jq);v3o=r(pgt,"Wav2Vec2Processor"),pgt.forEach(t),F3o=r(R9e," (UniSpeechSat model)"),R9e.forEach(t),T3o=i(ue),Sp=n(ue,"LI",{});var P9e=s(Sp);Xde=n(P9e,"STRONG",{});var _gt=s(Xde);M3o=r(_gt,"vilt"),_gt.forEach(t),E3o=r(P9e," \u2014 "),Dq=n(P9e,"A",{href:!0});var ugt=s(Dq);C3o=r(ugt,"ViltProcessor"),ugt.forEach(t),w3o=r(P9e," (ViLT model)"),P9e.forEach(t),A3o=i(ue),Rp=n(ue,"LI",{});var B9e=s(Rp);zde=n(B9e,"STRONG",{});var bgt=s(zde);L3o=r(bgt,"vision-text-dual-encoder"),bgt.forEach(t),y3o=r(B9e," \u2014 "),Gq=n(B9e,"A",{href:!0});var vgt=s(Gq);x3o=r(vgt,"VisionTextDualEncoderProcessor"),vgt.forEach(t),$3o=r(B9e," (VisionTextDualEncoder model)"),B9e.forEach(t),k3o=i(ue),Pp=n(ue,"LI",{});var N9e=s(Pp);Qde=n(N9e,"STRONG",{});var Fgt=s(Qde);S3o=r(Fgt,"wav2vec2"),Fgt.forEach(t),R3o=r(N9e," \u2014 "),Oq=n(N9e,"A",{href:!0});var Tgt=s(Oq);P3o=r(Tgt,"Wav2Vec2Processor"),Tgt.forEach(t),B3o=r(N9e," (Wav2Vec2 model)"),N9e.forEach(t),N3o=i(ue),Bp=n(ue,"LI",{});var I9e=s(Bp);Wde=n(I9e,"STRONG",{});var Mgt=s(Wde);I3o=r(Mgt,"wav2vec2-conformer"),Mgt.forEach(t),q3o=r(I9e," \u2014 "),Vq=n(I9e,"A",{href:!0});var Egt=s(Vq);j3o=r(Egt,"Wav2Vec2Processor"),Egt.forEach(t),D3o=r(I9e," (Wav2Vec2-Conformer model)"),I9e.forEach(t),G3o=i(ue),Np=n(ue,"LI",{});var q9e=s(Np);Hde=n(q9e,"STRONG",{});var Cgt=s(Hde);O3o=r(Cgt,"wavlm"),Cgt.forEach(t),V3o=r(q9e," \u2014 "),Xq=n(q9e,"A",{href:!0});var wgt=s(Xq);X3o=r(wgt,"Wav2Vec2Processor"),wgt.forEach(t),z3o=r(q9e," (WavLM model)"),q9e.forEach(t),ue.forEach(t),Q3o=i(na),T(Ip.$$.fragment,na),W3o=i(na),T(qp.$$.fragment,na),na.forEach(t),H3o=i(el),jp=n(el,"DIV",{class:!0});var cQe=s(jp);T(yL.$$.fragment,cQe),U3o=i(cQe),Ude=n(cQe,"P",{});var Agt=s(Ude);J3o=r(Agt,"Register a new processor for this class."),Agt.forEach(t),cQe.forEach(t),el.forEach(t),nXe=i(f),Di=n(f,"H2",{class:!0});var fQe=s(Di);Dp=n(fQe,"A",{id:!0,class:!0,href:!0});var Lgt=s(Dp);Jde=n(Lgt,"SPAN",{});var ygt=s(Jde);T(xL.$$.fragment,ygt),ygt.forEach(t),Lgt.forEach(t),Y3o=i(fQe),Yde=n(fQe,"SPAN",{});var xgt=s(Yde);K3o=r(xgt,"AutoModel"),xgt.forEach(t),fQe.forEach(t),sXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T($L.$$.fragment,ol),Z3o=i(ol),Gi=n(ol,"P",{});var Lre=s(Gi);eFo=r(Lre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zq=n(Lre,"A",{href:!0});var $gt=s(zq);oFo=r($gt,"from_pretrained()"),$gt.forEach(t),rFo=r(Lre," class method or the "),Qq=n(Lre,"A",{href:!0});var kgt=s(Qq);tFo=r(kgt,"from_config()"),kgt.forEach(t),aFo=r(Lre,` class
method.`),Lre.forEach(t),nFo=i(ol),kL=n(ol,"P",{});var mQe=s(kL);sFo=r(mQe,"This class cannot be instantiated directly using "),Kde=n(mQe,"CODE",{});var Sgt=s(Kde);lFo=r(Sgt,"__init__()"),Sgt.forEach(t),iFo=r(mQe," (throws an error)."),mQe.forEach(t),dFo=i(ol),lt=n(ol,"DIV",{class:!0});var l6=s(lt);T(SL.$$.fragment,l6),cFo=i(l6),Zde=n(l6,"P",{});var Rgt=s(Zde);fFo=r(Rgt,"Instantiates one of the base model classes of the library from a configuration."),Rgt.forEach(t),mFo=i(l6),Oi=n(l6,"P",{});var yre=s(Oi);gFo=r(yre,`Note:
Loading a model from its configuration file does `),ece=n(yre,"STRONG",{});var Pgt=s(ece);hFo=r(Pgt,"not"),Pgt.forEach(t),pFo=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wq=n(yre,"A",{href:!0});var Bgt=s(Wq);_Fo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),uFo=r(yre," to load the model weights."),yre.forEach(t),bFo=i(l6),T(Gp.$$.fragment,l6),l6.forEach(t),vFo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(RL.$$.fragment,sa),FFo=i(sa),oce=n(sa,"P",{});var Ngt=s(oce);TFo=r(Ngt,"Instantiate one of the base model classes of the library from a pretrained model."),Ngt.forEach(t),MFo=i(sa),Na=n(sa,"P",{});var i6=s(Na);EFo=r(i6,"The model class to instantiate is selected based on the "),rce=n(i6,"CODE",{});var Igt=s(rce);CFo=r(Igt,"model_type"),Igt.forEach(t),wFo=r(i6,` property of the config object (either
passed as an argument or loaded from `),tce=n(i6,"CODE",{});var qgt=s(tce);AFo=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),LFo=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=n(i6,"CODE",{});var jgt=s(ace);yFo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),xFo=r(i6,":"),i6.forEach(t),$Fo=i(sa),y=n(sa,"UL",{});var x=s(y);Op=n(x,"LI",{});var j9e=s(Op);nce=n(j9e,"STRONG",{});var Dgt=s(nce);kFo=r(Dgt,"albert"),Dgt.forEach(t),SFo=r(j9e," \u2014 "),Hq=n(j9e,"A",{href:!0});var Ggt=s(Hq);RFo=r(Ggt,"AlbertModel"),Ggt.forEach(t),PFo=r(j9e," (ALBERT model)"),j9e.forEach(t),BFo=i(x),Vp=n(x,"LI",{});var D9e=s(Vp);sce=n(D9e,"STRONG",{});var Ogt=s(sce);NFo=r(Ogt,"bart"),Ogt.forEach(t),IFo=r(D9e," \u2014 "),Uq=n(D9e,"A",{href:!0});var Vgt=s(Uq);qFo=r(Vgt,"BartModel"),Vgt.forEach(t),jFo=r(D9e," (BART model)"),D9e.forEach(t),DFo=i(x),Xp=n(x,"LI",{});var G9e=s(Xp);lce=n(G9e,"STRONG",{});var Xgt=s(lce);GFo=r(Xgt,"beit"),Xgt.forEach(t),OFo=r(G9e," \u2014 "),Jq=n(G9e,"A",{href:!0});var zgt=s(Jq);VFo=r(zgt,"BeitModel"),zgt.forEach(t),XFo=r(G9e," (BEiT model)"),G9e.forEach(t),zFo=i(x),zp=n(x,"LI",{});var O9e=s(zp);ice=n(O9e,"STRONG",{});var Qgt=s(ice);QFo=r(Qgt,"bert"),Qgt.forEach(t),WFo=r(O9e," \u2014 "),Yq=n(O9e,"A",{href:!0});var Wgt=s(Yq);HFo=r(Wgt,"BertModel"),Wgt.forEach(t),UFo=r(O9e," (BERT model)"),O9e.forEach(t),JFo=i(x),Qp=n(x,"LI",{});var V9e=s(Qp);dce=n(V9e,"STRONG",{});var Hgt=s(dce);YFo=r(Hgt,"bert-generation"),Hgt.forEach(t),KFo=r(V9e," \u2014 "),Kq=n(V9e,"A",{href:!0});var Ugt=s(Kq);ZFo=r(Ugt,"BertGenerationEncoder"),Ugt.forEach(t),eTo=r(V9e," (Bert Generation model)"),V9e.forEach(t),oTo=i(x),Wp=n(x,"LI",{});var X9e=s(Wp);cce=n(X9e,"STRONG",{});var Jgt=s(cce);rTo=r(Jgt,"big_bird"),Jgt.forEach(t),tTo=r(X9e," \u2014 "),Zq=n(X9e,"A",{href:!0});var Ygt=s(Zq);aTo=r(Ygt,"BigBirdModel"),Ygt.forEach(t),nTo=r(X9e," (BigBird model)"),X9e.forEach(t),sTo=i(x),Hp=n(x,"LI",{});var z9e=s(Hp);fce=n(z9e,"STRONG",{});var Kgt=s(fce);lTo=r(Kgt,"bigbird_pegasus"),Kgt.forEach(t),iTo=r(z9e," \u2014 "),ej=n(z9e,"A",{href:!0});var Zgt=s(ej);dTo=r(Zgt,"BigBirdPegasusModel"),Zgt.forEach(t),cTo=r(z9e," (BigBird-Pegasus model)"),z9e.forEach(t),fTo=i(x),Up=n(x,"LI",{});var Q9e=s(Up);mce=n(Q9e,"STRONG",{});var eht=s(mce);mTo=r(eht,"blenderbot"),eht.forEach(t),gTo=r(Q9e," \u2014 "),oj=n(Q9e,"A",{href:!0});var oht=s(oj);hTo=r(oht,"BlenderbotModel"),oht.forEach(t),pTo=r(Q9e," (Blenderbot model)"),Q9e.forEach(t),_To=i(x),Jp=n(x,"LI",{});var W9e=s(Jp);gce=n(W9e,"STRONG",{});var rht=s(gce);uTo=r(rht,"blenderbot-small"),rht.forEach(t),bTo=r(W9e," \u2014 "),rj=n(W9e,"A",{href:!0});var tht=s(rj);vTo=r(tht,"BlenderbotSmallModel"),tht.forEach(t),FTo=r(W9e," (BlenderbotSmall model)"),W9e.forEach(t),TTo=i(x),Yp=n(x,"LI",{});var H9e=s(Yp);hce=n(H9e,"STRONG",{});var aht=s(hce);MTo=r(aht,"bloom"),aht.forEach(t),ETo=r(H9e," \u2014 "),tj=n(H9e,"A",{href:!0});var nht=s(tj);CTo=r(nht,"BloomModel"),nht.forEach(t),wTo=r(H9e," (BLOOM model)"),H9e.forEach(t),ATo=i(x),Kp=n(x,"LI",{});var U9e=s(Kp);pce=n(U9e,"STRONG",{});var sht=s(pce);LTo=r(sht,"camembert"),sht.forEach(t),yTo=r(U9e," \u2014 "),aj=n(U9e,"A",{href:!0});var lht=s(aj);xTo=r(lht,"CamembertModel"),lht.forEach(t),$To=r(U9e," (CamemBERT model)"),U9e.forEach(t),kTo=i(x),Zp=n(x,"LI",{});var J9e=s(Zp);_ce=n(J9e,"STRONG",{});var iht=s(_ce);STo=r(iht,"canine"),iht.forEach(t),RTo=r(J9e," \u2014 "),nj=n(J9e,"A",{href:!0});var dht=s(nj);PTo=r(dht,"CanineModel"),dht.forEach(t),BTo=r(J9e," (CANINE model)"),J9e.forEach(t),NTo=i(x),e_=n(x,"LI",{});var Y9e=s(e_);uce=n(Y9e,"STRONG",{});var cht=s(uce);ITo=r(cht,"clip"),cht.forEach(t),qTo=r(Y9e," \u2014 "),sj=n(Y9e,"A",{href:!0});var fht=s(sj);jTo=r(fht,"CLIPModel"),fht.forEach(t),DTo=r(Y9e," (CLIP model)"),Y9e.forEach(t),GTo=i(x),o_=n(x,"LI",{});var K9e=s(o_);bce=n(K9e,"STRONG",{});var mht=s(bce);OTo=r(mht,"codegen"),mht.forEach(t),VTo=r(K9e," \u2014 "),lj=n(K9e,"A",{href:!0});var ght=s(lj);XTo=r(ght,"CodeGenModel"),ght.forEach(t),zTo=r(K9e," (CodeGen model)"),K9e.forEach(t),QTo=i(x),r_=n(x,"LI",{});var Z9e=s(r_);vce=n(Z9e,"STRONG",{});var hht=s(vce);WTo=r(hht,"convbert"),hht.forEach(t),HTo=r(Z9e," \u2014 "),ij=n(Z9e,"A",{href:!0});var pht=s(ij);UTo=r(pht,"ConvBertModel"),pht.forEach(t),JTo=r(Z9e," (ConvBERT model)"),Z9e.forEach(t),YTo=i(x),t_=n(x,"LI",{});var exe=s(t_);Fce=n(exe,"STRONG",{});var _ht=s(Fce);KTo=r(_ht,"convnext"),_ht.forEach(t),ZTo=r(exe," \u2014 "),dj=n(exe,"A",{href:!0});var uht=s(dj);e8o=r(uht,"ConvNextModel"),uht.forEach(t),o8o=r(exe," (ConvNeXT model)"),exe.forEach(t),r8o=i(x),a_=n(x,"LI",{});var oxe=s(a_);Tce=n(oxe,"STRONG",{});var bht=s(Tce);t8o=r(bht,"ctrl"),bht.forEach(t),a8o=r(oxe," \u2014 "),cj=n(oxe,"A",{href:!0});var vht=s(cj);n8o=r(vht,"CTRLModel"),vht.forEach(t),s8o=r(oxe," (CTRL model)"),oxe.forEach(t),l8o=i(x),n_=n(x,"LI",{});var rxe=s(n_);Mce=n(rxe,"STRONG",{});var Fht=s(Mce);i8o=r(Fht,"cvt"),Fht.forEach(t),d8o=r(rxe," \u2014 "),fj=n(rxe,"A",{href:!0});var Tht=s(fj);c8o=r(Tht,"CvtModel"),Tht.forEach(t),f8o=r(rxe," (CvT model)"),rxe.forEach(t),m8o=i(x),s_=n(x,"LI",{});var txe=s(s_);Ece=n(txe,"STRONG",{});var Mht=s(Ece);g8o=r(Mht,"data2vec-audio"),Mht.forEach(t),h8o=r(txe," \u2014 "),mj=n(txe,"A",{href:!0});var Eht=s(mj);p8o=r(Eht,"Data2VecAudioModel"),Eht.forEach(t),_8o=r(txe," (Data2VecAudio model)"),txe.forEach(t),u8o=i(x),l_=n(x,"LI",{});var axe=s(l_);Cce=n(axe,"STRONG",{});var Cht=s(Cce);b8o=r(Cht,"data2vec-text"),Cht.forEach(t),v8o=r(axe," \u2014 "),gj=n(axe,"A",{href:!0});var wht=s(gj);F8o=r(wht,"Data2VecTextModel"),wht.forEach(t),T8o=r(axe," (Data2VecText model)"),axe.forEach(t),M8o=i(x),i_=n(x,"LI",{});var nxe=s(i_);wce=n(nxe,"STRONG",{});var Aht=s(wce);E8o=r(Aht,"data2vec-vision"),Aht.forEach(t),C8o=r(nxe," \u2014 "),hj=n(nxe,"A",{href:!0});var Lht=s(hj);w8o=r(Lht,"Data2VecVisionModel"),Lht.forEach(t),A8o=r(nxe," (Data2VecVision model)"),nxe.forEach(t),L8o=i(x),d_=n(x,"LI",{});var sxe=s(d_);Ace=n(sxe,"STRONG",{});var yht=s(Ace);y8o=r(yht,"deberta"),yht.forEach(t),x8o=r(sxe," \u2014 "),pj=n(sxe,"A",{href:!0});var xht=s(pj);$8o=r(xht,"DebertaModel"),xht.forEach(t),k8o=r(sxe," (DeBERTa model)"),sxe.forEach(t),S8o=i(x),c_=n(x,"LI",{});var lxe=s(c_);Lce=n(lxe,"STRONG",{});var $ht=s(Lce);R8o=r($ht,"deberta-v2"),$ht.forEach(t),P8o=r(lxe," \u2014 "),_j=n(lxe,"A",{href:!0});var kht=s(_j);B8o=r(kht,"DebertaV2Model"),kht.forEach(t),N8o=r(lxe," (DeBERTa-v2 model)"),lxe.forEach(t),I8o=i(x),f_=n(x,"LI",{});var ixe=s(f_);yce=n(ixe,"STRONG",{});var Sht=s(yce);q8o=r(Sht,"decision_transformer"),Sht.forEach(t),j8o=r(ixe," \u2014 "),uj=n(ixe,"A",{href:!0});var Rht=s(uj);D8o=r(Rht,"DecisionTransformerModel"),Rht.forEach(t),G8o=r(ixe," (Decision Transformer model)"),ixe.forEach(t),O8o=i(x),m_=n(x,"LI",{});var dxe=s(m_);xce=n(dxe,"STRONG",{});var Pht=s(xce);V8o=r(Pht,"deit"),Pht.forEach(t),X8o=r(dxe," \u2014 "),bj=n(dxe,"A",{href:!0});var Bht=s(bj);z8o=r(Bht,"DeiTModel"),Bht.forEach(t),Q8o=r(dxe," (DeiT model)"),dxe.forEach(t),W8o=i(x),g_=n(x,"LI",{});var cxe=s(g_);$ce=n(cxe,"STRONG",{});var Nht=s($ce);H8o=r(Nht,"detr"),Nht.forEach(t),U8o=r(cxe," \u2014 "),vj=n(cxe,"A",{href:!0});var Iht=s(vj);J8o=r(Iht,"DetrModel"),Iht.forEach(t),Y8o=r(cxe," (DETR model)"),cxe.forEach(t),K8o=i(x),h_=n(x,"LI",{});var fxe=s(h_);kce=n(fxe,"STRONG",{});var qht=s(kce);Z8o=r(qht,"distilbert"),qht.forEach(t),eMo=r(fxe," \u2014 "),Fj=n(fxe,"A",{href:!0});var jht=s(Fj);oMo=r(jht,"DistilBertModel"),jht.forEach(t),rMo=r(fxe," (DistilBERT model)"),fxe.forEach(t),tMo=i(x),p_=n(x,"LI",{});var mxe=s(p_);Sce=n(mxe,"STRONG",{});var Dht=s(Sce);aMo=r(Dht,"dpr"),Dht.forEach(t),nMo=r(mxe," \u2014 "),Tj=n(mxe,"A",{href:!0});var Ght=s(Tj);sMo=r(Ght,"DPRQuestionEncoder"),Ght.forEach(t),lMo=r(mxe," (DPR model)"),mxe.forEach(t),iMo=i(x),__=n(x,"LI",{});var gxe=s(__);Rce=n(gxe,"STRONG",{});var Oht=s(Rce);dMo=r(Oht,"dpt"),Oht.forEach(t),cMo=r(gxe," \u2014 "),Mj=n(gxe,"A",{href:!0});var Vht=s(Mj);fMo=r(Vht,"DPTModel"),Vht.forEach(t),mMo=r(gxe," (DPT model)"),gxe.forEach(t),gMo=i(x),u_=n(x,"LI",{});var hxe=s(u_);Pce=n(hxe,"STRONG",{});var Xht=s(Pce);hMo=r(Xht,"electra"),Xht.forEach(t),pMo=r(hxe," \u2014 "),Ej=n(hxe,"A",{href:!0});var zht=s(Ej);_Mo=r(zht,"ElectraModel"),zht.forEach(t),uMo=r(hxe," (ELECTRA model)"),hxe.forEach(t),bMo=i(x),b_=n(x,"LI",{});var pxe=s(b_);Bce=n(pxe,"STRONG",{});var Qht=s(Bce);vMo=r(Qht,"flaubert"),Qht.forEach(t),FMo=r(pxe," \u2014 "),Cj=n(pxe,"A",{href:!0});var Wht=s(Cj);TMo=r(Wht,"FlaubertModel"),Wht.forEach(t),MMo=r(pxe," (FlauBERT model)"),pxe.forEach(t),EMo=i(x),v_=n(x,"LI",{});var _xe=s(v_);Nce=n(_xe,"STRONG",{});var Hht=s(Nce);CMo=r(Hht,"flava"),Hht.forEach(t),wMo=r(_xe," \u2014 "),wj=n(_xe,"A",{href:!0});var Uht=s(wj);AMo=r(Uht,"FlavaModel"),Uht.forEach(t),LMo=r(_xe," (FLAVA model)"),_xe.forEach(t),yMo=i(x),F_=n(x,"LI",{});var uxe=s(F_);Ice=n(uxe,"STRONG",{});var Jht=s(Ice);xMo=r(Jht,"fnet"),Jht.forEach(t),$Mo=r(uxe," \u2014 "),Aj=n(uxe,"A",{href:!0});var Yht=s(Aj);kMo=r(Yht,"FNetModel"),Yht.forEach(t),SMo=r(uxe," (FNet model)"),uxe.forEach(t),RMo=i(x),T_=n(x,"LI",{});var bxe=s(T_);qce=n(bxe,"STRONG",{});var Kht=s(qce);PMo=r(Kht,"fsmt"),Kht.forEach(t),BMo=r(bxe," \u2014 "),Lj=n(bxe,"A",{href:!0});var Zht=s(Lj);NMo=r(Zht,"FSMTModel"),Zht.forEach(t),IMo=r(bxe," (FairSeq Machine-Translation model)"),bxe.forEach(t),qMo=i(x),Ws=n(x,"LI",{});var xS=s(Ws);jce=n(xS,"STRONG",{});var ept=s(jce);jMo=r(ept,"funnel"),ept.forEach(t),DMo=r(xS," \u2014 "),yj=n(xS,"A",{href:!0});var opt=s(yj);GMo=r(opt,"FunnelModel"),opt.forEach(t),OMo=r(xS," or "),xj=n(xS,"A",{href:!0});var rpt=s(xj);VMo=r(rpt,"FunnelBaseModel"),rpt.forEach(t),XMo=r(xS," (Funnel Transformer model)"),xS.forEach(t),zMo=i(x),M_=n(x,"LI",{});var vxe=s(M_);Dce=n(vxe,"STRONG",{});var tpt=s(Dce);QMo=r(tpt,"glpn"),tpt.forEach(t),WMo=r(vxe," \u2014 "),$j=n(vxe,"A",{href:!0});var apt=s($j);HMo=r(apt,"GLPNModel"),apt.forEach(t),UMo=r(vxe," (GLPN model)"),vxe.forEach(t),JMo=i(x),E_=n(x,"LI",{});var Fxe=s(E_);Gce=n(Fxe,"STRONG",{});var npt=s(Gce);YMo=r(npt,"gpt2"),npt.forEach(t),KMo=r(Fxe," \u2014 "),kj=n(Fxe,"A",{href:!0});var spt=s(kj);ZMo=r(spt,"GPT2Model"),spt.forEach(t),e4o=r(Fxe," (OpenAI GPT-2 model)"),Fxe.forEach(t),o4o=i(x),C_=n(x,"LI",{});var Txe=s(C_);Oce=n(Txe,"STRONG",{});var lpt=s(Oce);r4o=r(lpt,"gpt_neo"),lpt.forEach(t),t4o=r(Txe," \u2014 "),Sj=n(Txe,"A",{href:!0});var ipt=s(Sj);a4o=r(ipt,"GPTNeoModel"),ipt.forEach(t),n4o=r(Txe," (GPT Neo model)"),Txe.forEach(t),s4o=i(x),w_=n(x,"LI",{});var Mxe=s(w_);Vce=n(Mxe,"STRONG",{});var dpt=s(Vce);l4o=r(dpt,"gpt_neox"),dpt.forEach(t),i4o=r(Mxe," \u2014 "),Rj=n(Mxe,"A",{href:!0});var cpt=s(Rj);d4o=r(cpt,"GPTNeoXModel"),cpt.forEach(t),c4o=r(Mxe," (GPT NeoX model)"),Mxe.forEach(t),f4o=i(x),A_=n(x,"LI",{});var Exe=s(A_);Xce=n(Exe,"STRONG",{});var fpt=s(Xce);m4o=r(fpt,"gptj"),fpt.forEach(t),g4o=r(Exe," \u2014 "),Pj=n(Exe,"A",{href:!0});var mpt=s(Pj);h4o=r(mpt,"GPTJModel"),mpt.forEach(t),p4o=r(Exe," (GPT-J model)"),Exe.forEach(t),_4o=i(x),L_=n(x,"LI",{});var Cxe=s(L_);zce=n(Cxe,"STRONG",{});var gpt=s(zce);u4o=r(gpt,"groupvit"),gpt.forEach(t),b4o=r(Cxe," \u2014 "),Bj=n(Cxe,"A",{href:!0});var hpt=s(Bj);v4o=r(hpt,"GroupViTModel"),hpt.forEach(t),F4o=r(Cxe," (GroupViT model)"),Cxe.forEach(t),T4o=i(x),y_=n(x,"LI",{});var wxe=s(y_);Qce=n(wxe,"STRONG",{});var ppt=s(Qce);M4o=r(ppt,"hubert"),ppt.forEach(t),E4o=r(wxe," \u2014 "),Nj=n(wxe,"A",{href:!0});var _pt=s(Nj);C4o=r(_pt,"HubertModel"),_pt.forEach(t),w4o=r(wxe," (Hubert model)"),wxe.forEach(t),A4o=i(x),x_=n(x,"LI",{});var Axe=s(x_);Wce=n(Axe,"STRONG",{});var upt=s(Wce);L4o=r(upt,"ibert"),upt.forEach(t),y4o=r(Axe," \u2014 "),Ij=n(Axe,"A",{href:!0});var bpt=s(Ij);x4o=r(bpt,"IBertModel"),bpt.forEach(t),$4o=r(Axe," (I-BERT model)"),Axe.forEach(t),k4o=i(x),$_=n(x,"LI",{});var Lxe=s($_);Hce=n(Lxe,"STRONG",{});var vpt=s(Hce);S4o=r(vpt,"imagegpt"),vpt.forEach(t),R4o=r(Lxe," \u2014 "),qj=n(Lxe,"A",{href:!0});var Fpt=s(qj);P4o=r(Fpt,"ImageGPTModel"),Fpt.forEach(t),B4o=r(Lxe," (ImageGPT model)"),Lxe.forEach(t),N4o=i(x),k_=n(x,"LI",{});var yxe=s(k_);Uce=n(yxe,"STRONG",{});var Tpt=s(Uce);I4o=r(Tpt,"layoutlm"),Tpt.forEach(t),q4o=r(yxe," \u2014 "),jj=n(yxe,"A",{href:!0});var Mpt=s(jj);j4o=r(Mpt,"LayoutLMModel"),Mpt.forEach(t),D4o=r(yxe," (LayoutLM model)"),yxe.forEach(t),G4o=i(x),S_=n(x,"LI",{});var xxe=s(S_);Jce=n(xxe,"STRONG",{});var Ept=s(Jce);O4o=r(Ept,"layoutlmv2"),Ept.forEach(t),V4o=r(xxe," \u2014 "),Dj=n(xxe,"A",{href:!0});var Cpt=s(Dj);X4o=r(Cpt,"LayoutLMv2Model"),Cpt.forEach(t),z4o=r(xxe," (LayoutLMv2 model)"),xxe.forEach(t),Q4o=i(x),R_=n(x,"LI",{});var $xe=s(R_);Yce=n($xe,"STRONG",{});var wpt=s(Yce);W4o=r(wpt,"layoutlmv3"),wpt.forEach(t),H4o=r($xe," \u2014 "),Gj=n($xe,"A",{href:!0});var Apt=s(Gj);U4o=r(Apt,"LayoutLMv3Model"),Apt.forEach(t),J4o=r($xe," (LayoutLMv3 model)"),$xe.forEach(t),Y4o=i(x),P_=n(x,"LI",{});var kxe=s(P_);Kce=n(kxe,"STRONG",{});var Lpt=s(Kce);K4o=r(Lpt,"led"),Lpt.forEach(t),Z4o=r(kxe," \u2014 "),Oj=n(kxe,"A",{href:!0});var ypt=s(Oj);eEo=r(ypt,"LEDModel"),ypt.forEach(t),oEo=r(kxe," (LED model)"),kxe.forEach(t),rEo=i(x),B_=n(x,"LI",{});var Sxe=s(B_);Zce=n(Sxe,"STRONG",{});var xpt=s(Zce);tEo=r(xpt,"levit"),xpt.forEach(t),aEo=r(Sxe," \u2014 "),Vj=n(Sxe,"A",{href:!0});var $pt=s(Vj);nEo=r($pt,"LevitModel"),$pt.forEach(t),sEo=r(Sxe," (LeViT model)"),Sxe.forEach(t),lEo=i(x),N_=n(x,"LI",{});var Rxe=s(N_);efe=n(Rxe,"STRONG",{});var kpt=s(efe);iEo=r(kpt,"longformer"),kpt.forEach(t),dEo=r(Rxe," \u2014 "),Xj=n(Rxe,"A",{href:!0});var Spt=s(Xj);cEo=r(Spt,"LongformerModel"),Spt.forEach(t),fEo=r(Rxe," (Longformer model)"),Rxe.forEach(t),mEo=i(x),I_=n(x,"LI",{});var Pxe=s(I_);ofe=n(Pxe,"STRONG",{});var Rpt=s(ofe);gEo=r(Rpt,"longt5"),Rpt.forEach(t),hEo=r(Pxe," \u2014 "),zj=n(Pxe,"A",{href:!0});var Ppt=s(zj);pEo=r(Ppt,"LongT5Model"),Ppt.forEach(t),_Eo=r(Pxe," (LongT5 model)"),Pxe.forEach(t),uEo=i(x),q_=n(x,"LI",{});var Bxe=s(q_);rfe=n(Bxe,"STRONG",{});var Bpt=s(rfe);bEo=r(Bpt,"luke"),Bpt.forEach(t),vEo=r(Bxe," \u2014 "),Qj=n(Bxe,"A",{href:!0});var Npt=s(Qj);FEo=r(Npt,"LukeModel"),Npt.forEach(t),TEo=r(Bxe," (LUKE model)"),Bxe.forEach(t),MEo=i(x),j_=n(x,"LI",{});var Nxe=s(j_);tfe=n(Nxe,"STRONG",{});var Ipt=s(tfe);EEo=r(Ipt,"lxmert"),Ipt.forEach(t),CEo=r(Nxe," \u2014 "),Wj=n(Nxe,"A",{href:!0});var qpt=s(Wj);wEo=r(qpt,"LxmertModel"),qpt.forEach(t),AEo=r(Nxe," (LXMERT model)"),Nxe.forEach(t),LEo=i(x),D_=n(x,"LI",{});var Ixe=s(D_);afe=n(Ixe,"STRONG",{});var jpt=s(afe);yEo=r(jpt,"m2m_100"),jpt.forEach(t),xEo=r(Ixe," \u2014 "),Hj=n(Ixe,"A",{href:!0});var Dpt=s(Hj);$Eo=r(Dpt,"M2M100Model"),Dpt.forEach(t),kEo=r(Ixe," (M2M100 model)"),Ixe.forEach(t),SEo=i(x),G_=n(x,"LI",{});var qxe=s(G_);nfe=n(qxe,"STRONG",{});var Gpt=s(nfe);REo=r(Gpt,"marian"),Gpt.forEach(t),PEo=r(qxe," \u2014 "),Uj=n(qxe,"A",{href:!0});var Opt=s(Uj);BEo=r(Opt,"MarianModel"),Opt.forEach(t),NEo=r(qxe," (Marian model)"),qxe.forEach(t),IEo=i(x),O_=n(x,"LI",{});var jxe=s(O_);sfe=n(jxe,"STRONG",{});var Vpt=s(sfe);qEo=r(Vpt,"maskformer"),Vpt.forEach(t),jEo=r(jxe," \u2014 "),Jj=n(jxe,"A",{href:!0});var Xpt=s(Jj);DEo=r(Xpt,"MaskFormerModel"),Xpt.forEach(t),GEo=r(jxe," (MaskFormer model)"),jxe.forEach(t),OEo=i(x),V_=n(x,"LI",{});var Dxe=s(V_);lfe=n(Dxe,"STRONG",{});var zpt=s(lfe);VEo=r(zpt,"mbart"),zpt.forEach(t),XEo=r(Dxe," \u2014 "),Yj=n(Dxe,"A",{href:!0});var Qpt=s(Yj);zEo=r(Qpt,"MBartModel"),Qpt.forEach(t),QEo=r(Dxe," (mBART model)"),Dxe.forEach(t),WEo=i(x),X_=n(x,"LI",{});var Gxe=s(X_);ife=n(Gxe,"STRONG",{});var Wpt=s(ife);HEo=r(Wpt,"mctct"),Wpt.forEach(t),UEo=r(Gxe," \u2014 "),Kj=n(Gxe,"A",{href:!0});var Hpt=s(Kj);JEo=r(Hpt,"MCTCTModel"),Hpt.forEach(t),YEo=r(Gxe," (M-CTC-T model)"),Gxe.forEach(t),KEo=i(x),z_=n(x,"LI",{});var Oxe=s(z_);dfe=n(Oxe,"STRONG",{});var Upt=s(dfe);ZEo=r(Upt,"megatron-bert"),Upt.forEach(t),eCo=r(Oxe," \u2014 "),Zj=n(Oxe,"A",{href:!0});var Jpt=s(Zj);oCo=r(Jpt,"MegatronBertModel"),Jpt.forEach(t),rCo=r(Oxe," (Megatron-BERT model)"),Oxe.forEach(t),tCo=i(x),Q_=n(x,"LI",{});var Vxe=s(Q_);cfe=n(Vxe,"STRONG",{});var Ypt=s(cfe);aCo=r(Ypt,"mobilebert"),Ypt.forEach(t),nCo=r(Vxe," \u2014 "),eD=n(Vxe,"A",{href:!0});var Kpt=s(eD);sCo=r(Kpt,"MobileBertModel"),Kpt.forEach(t),lCo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),iCo=i(x),W_=n(x,"LI",{});var Xxe=s(W_);ffe=n(Xxe,"STRONG",{});var Zpt=s(ffe);dCo=r(Zpt,"mobilevit"),Zpt.forEach(t),cCo=r(Xxe," \u2014 "),oD=n(Xxe,"A",{href:!0});var e_t=s(oD);fCo=r(e_t,"MobileViTModel"),e_t.forEach(t),mCo=r(Xxe," (MobileViT model)"),Xxe.forEach(t),gCo=i(x),H_=n(x,"LI",{});var zxe=s(H_);mfe=n(zxe,"STRONG",{});var o_t=s(mfe);hCo=r(o_t,"mpnet"),o_t.forEach(t),pCo=r(zxe," \u2014 "),rD=n(zxe,"A",{href:!0});var r_t=s(rD);_Co=r(r_t,"MPNetModel"),r_t.forEach(t),uCo=r(zxe," (MPNet model)"),zxe.forEach(t),bCo=i(x),U_=n(x,"LI",{});var Qxe=s(U_);gfe=n(Qxe,"STRONG",{});var t_t=s(gfe);vCo=r(t_t,"mt5"),t_t.forEach(t),FCo=r(Qxe," \u2014 "),tD=n(Qxe,"A",{href:!0});var a_t=s(tD);TCo=r(a_t,"MT5Model"),a_t.forEach(t),MCo=r(Qxe," (MT5 model)"),Qxe.forEach(t),ECo=i(x),J_=n(x,"LI",{});var Wxe=s(J_);hfe=n(Wxe,"STRONG",{});var n_t=s(hfe);CCo=r(n_t,"mvp"),n_t.forEach(t),wCo=r(Wxe," \u2014 "),aD=n(Wxe,"A",{href:!0});var s_t=s(aD);ACo=r(s_t,"MvpModel"),s_t.forEach(t),LCo=r(Wxe," (MVP model)"),Wxe.forEach(t),yCo=i(x),Y_=n(x,"LI",{});var Hxe=s(Y_);pfe=n(Hxe,"STRONG",{});var l_t=s(pfe);xCo=r(l_t,"nezha"),l_t.forEach(t),$Co=r(Hxe," \u2014 "),nD=n(Hxe,"A",{href:!0});var i_t=s(nD);kCo=r(i_t,"NezhaModel"),i_t.forEach(t),SCo=r(Hxe," (Nezha model)"),Hxe.forEach(t),RCo=i(x),K_=n(x,"LI",{});var Uxe=s(K_);_fe=n(Uxe,"STRONG",{});var d_t=s(_fe);PCo=r(d_t,"nystromformer"),d_t.forEach(t),BCo=r(Uxe," \u2014 "),sD=n(Uxe,"A",{href:!0});var c_t=s(sD);NCo=r(c_t,"NystromformerModel"),c_t.forEach(t),ICo=r(Uxe," (Nystr\xF6mformer model)"),Uxe.forEach(t),qCo=i(x),Z_=n(x,"LI",{});var Jxe=s(Z_);ufe=n(Jxe,"STRONG",{});var f_t=s(ufe);jCo=r(f_t,"openai-gpt"),f_t.forEach(t),DCo=r(Jxe," \u2014 "),lD=n(Jxe,"A",{href:!0});var m_t=s(lD);GCo=r(m_t,"OpenAIGPTModel"),m_t.forEach(t),OCo=r(Jxe," (OpenAI GPT model)"),Jxe.forEach(t),VCo=i(x),eu=n(x,"LI",{});var Yxe=s(eu);bfe=n(Yxe,"STRONG",{});var g_t=s(bfe);XCo=r(g_t,"opt"),g_t.forEach(t),zCo=r(Yxe," \u2014 "),iD=n(Yxe,"A",{href:!0});var h_t=s(iD);QCo=r(h_t,"OPTModel"),h_t.forEach(t),WCo=r(Yxe," (OPT model)"),Yxe.forEach(t),HCo=i(x),ou=n(x,"LI",{});var Kxe=s(ou);vfe=n(Kxe,"STRONG",{});var p_t=s(vfe);UCo=r(p_t,"pegasus"),p_t.forEach(t),JCo=r(Kxe," \u2014 "),dD=n(Kxe,"A",{href:!0});var __t=s(dD);YCo=r(__t,"PegasusModel"),__t.forEach(t),KCo=r(Kxe," (Pegasus model)"),Kxe.forEach(t),ZCo=i(x),ru=n(x,"LI",{});var Zxe=s(ru);Ffe=n(Zxe,"STRONG",{});var u_t=s(Ffe);e5o=r(u_t,"perceiver"),u_t.forEach(t),o5o=r(Zxe," \u2014 "),cD=n(Zxe,"A",{href:!0});var b_t=s(cD);r5o=r(b_t,"PerceiverModel"),b_t.forEach(t),t5o=r(Zxe," (Perceiver model)"),Zxe.forEach(t),a5o=i(x),tu=n(x,"LI",{});var e$e=s(tu);Tfe=n(e$e,"STRONG",{});var v_t=s(Tfe);n5o=r(v_t,"plbart"),v_t.forEach(t),s5o=r(e$e," \u2014 "),fD=n(e$e,"A",{href:!0});var F_t=s(fD);l5o=r(F_t,"PLBartModel"),F_t.forEach(t),i5o=r(e$e," (PLBart model)"),e$e.forEach(t),d5o=i(x),au=n(x,"LI",{});var o$e=s(au);Mfe=n(o$e,"STRONG",{});var T_t=s(Mfe);c5o=r(T_t,"poolformer"),T_t.forEach(t),f5o=r(o$e," \u2014 "),mD=n(o$e,"A",{href:!0});var M_t=s(mD);m5o=r(M_t,"PoolFormerModel"),M_t.forEach(t),g5o=r(o$e," (PoolFormer model)"),o$e.forEach(t),h5o=i(x),nu=n(x,"LI",{});var r$e=s(nu);Efe=n(r$e,"STRONG",{});var E_t=s(Efe);p5o=r(E_t,"prophetnet"),E_t.forEach(t),_5o=r(r$e," \u2014 "),gD=n(r$e,"A",{href:!0});var C_t=s(gD);u5o=r(C_t,"ProphetNetModel"),C_t.forEach(t),b5o=r(r$e," (ProphetNet model)"),r$e.forEach(t),v5o=i(x),su=n(x,"LI",{});var t$e=s(su);Cfe=n(t$e,"STRONG",{});var w_t=s(Cfe);F5o=r(w_t,"qdqbert"),w_t.forEach(t),T5o=r(t$e," \u2014 "),hD=n(t$e,"A",{href:!0});var A_t=s(hD);M5o=r(A_t,"QDQBertModel"),A_t.forEach(t),E5o=r(t$e," (QDQBert model)"),t$e.forEach(t),C5o=i(x),lu=n(x,"LI",{});var a$e=s(lu);wfe=n(a$e,"STRONG",{});var L_t=s(wfe);w5o=r(L_t,"reformer"),L_t.forEach(t),A5o=r(a$e," \u2014 "),pD=n(a$e,"A",{href:!0});var y_t=s(pD);L5o=r(y_t,"ReformerModel"),y_t.forEach(t),y5o=r(a$e," (Reformer model)"),a$e.forEach(t),x5o=i(x),iu=n(x,"LI",{});var n$e=s(iu);Afe=n(n$e,"STRONG",{});var x_t=s(Afe);$5o=r(x_t,"regnet"),x_t.forEach(t),k5o=r(n$e," \u2014 "),_D=n(n$e,"A",{href:!0});var $_t=s(_D);S5o=r($_t,"RegNetModel"),$_t.forEach(t),R5o=r(n$e," (RegNet model)"),n$e.forEach(t),P5o=i(x),du=n(x,"LI",{});var s$e=s(du);Lfe=n(s$e,"STRONG",{});var k_t=s(Lfe);B5o=r(k_t,"rembert"),k_t.forEach(t),N5o=r(s$e," \u2014 "),uD=n(s$e,"A",{href:!0});var S_t=s(uD);I5o=r(S_t,"RemBertModel"),S_t.forEach(t),q5o=r(s$e," (RemBERT model)"),s$e.forEach(t),j5o=i(x),cu=n(x,"LI",{});var l$e=s(cu);yfe=n(l$e,"STRONG",{});var R_t=s(yfe);D5o=r(R_t,"resnet"),R_t.forEach(t),G5o=r(l$e," \u2014 "),bD=n(l$e,"A",{href:!0});var P_t=s(bD);O5o=r(P_t,"ResNetModel"),P_t.forEach(t),V5o=r(l$e," (ResNet model)"),l$e.forEach(t),X5o=i(x),fu=n(x,"LI",{});var i$e=s(fu);xfe=n(i$e,"STRONG",{});var B_t=s(xfe);z5o=r(B_t,"retribert"),B_t.forEach(t),Q5o=r(i$e," \u2014 "),vD=n(i$e,"A",{href:!0});var N_t=s(vD);W5o=r(N_t,"RetriBertModel"),N_t.forEach(t),H5o=r(i$e," (RetriBERT model)"),i$e.forEach(t),U5o=i(x),mu=n(x,"LI",{});var d$e=s(mu);$fe=n(d$e,"STRONG",{});var I_t=s($fe);J5o=r(I_t,"roberta"),I_t.forEach(t),Y5o=r(d$e," \u2014 "),FD=n(d$e,"A",{href:!0});var q_t=s(FD);K5o=r(q_t,"RobertaModel"),q_t.forEach(t),Z5o=r(d$e," (RoBERTa model)"),d$e.forEach(t),e0o=i(x),gu=n(x,"LI",{});var c$e=s(gu);kfe=n(c$e,"STRONG",{});var j_t=s(kfe);o0o=r(j_t,"roformer"),j_t.forEach(t),r0o=r(c$e," \u2014 "),TD=n(c$e,"A",{href:!0});var D_t=s(TD);t0o=r(D_t,"RoFormerModel"),D_t.forEach(t),a0o=r(c$e," (RoFormer model)"),c$e.forEach(t),n0o=i(x),hu=n(x,"LI",{});var f$e=s(hu);Sfe=n(f$e,"STRONG",{});var G_t=s(Sfe);s0o=r(G_t,"segformer"),G_t.forEach(t),l0o=r(f$e," \u2014 "),MD=n(f$e,"A",{href:!0});var O_t=s(MD);i0o=r(O_t,"SegformerModel"),O_t.forEach(t),d0o=r(f$e," (SegFormer model)"),f$e.forEach(t),c0o=i(x),pu=n(x,"LI",{});var m$e=s(pu);Rfe=n(m$e,"STRONG",{});var V_t=s(Rfe);f0o=r(V_t,"sew"),V_t.forEach(t),m0o=r(m$e," \u2014 "),ED=n(m$e,"A",{href:!0});var X_t=s(ED);g0o=r(X_t,"SEWModel"),X_t.forEach(t),h0o=r(m$e," (SEW model)"),m$e.forEach(t),p0o=i(x),_u=n(x,"LI",{});var g$e=s(_u);Pfe=n(g$e,"STRONG",{});var z_t=s(Pfe);_0o=r(z_t,"sew-d"),z_t.forEach(t),u0o=r(g$e," \u2014 "),CD=n(g$e,"A",{href:!0});var Q_t=s(CD);b0o=r(Q_t,"SEWDModel"),Q_t.forEach(t),v0o=r(g$e," (SEW-D model)"),g$e.forEach(t),F0o=i(x),uu=n(x,"LI",{});var h$e=s(uu);Bfe=n(h$e,"STRONG",{});var W_t=s(Bfe);T0o=r(W_t,"speech_to_text"),W_t.forEach(t),M0o=r(h$e," \u2014 "),wD=n(h$e,"A",{href:!0});var H_t=s(wD);E0o=r(H_t,"Speech2TextModel"),H_t.forEach(t),C0o=r(h$e," (Speech2Text model)"),h$e.forEach(t),w0o=i(x),bu=n(x,"LI",{});var p$e=s(bu);Nfe=n(p$e,"STRONG",{});var U_t=s(Nfe);A0o=r(U_t,"splinter"),U_t.forEach(t),L0o=r(p$e," \u2014 "),AD=n(p$e,"A",{href:!0});var J_t=s(AD);y0o=r(J_t,"SplinterModel"),J_t.forEach(t),x0o=r(p$e," (Splinter model)"),p$e.forEach(t),$0o=i(x),vu=n(x,"LI",{});var _$e=s(vu);Ife=n(_$e,"STRONG",{});var Y_t=s(Ife);k0o=r(Y_t,"squeezebert"),Y_t.forEach(t),S0o=r(_$e," \u2014 "),LD=n(_$e,"A",{href:!0});var K_t=s(LD);R0o=r(K_t,"SqueezeBertModel"),K_t.forEach(t),P0o=r(_$e," (SqueezeBERT model)"),_$e.forEach(t),B0o=i(x),Fu=n(x,"LI",{});var u$e=s(Fu);qfe=n(u$e,"STRONG",{});var Z_t=s(qfe);N0o=r(Z_t,"swin"),Z_t.forEach(t),I0o=r(u$e," \u2014 "),yD=n(u$e,"A",{href:!0});var eut=s(yD);q0o=r(eut,"SwinModel"),eut.forEach(t),j0o=r(u$e," (Swin Transformer model)"),u$e.forEach(t),D0o=i(x),Tu=n(x,"LI",{});var b$e=s(Tu);jfe=n(b$e,"STRONG",{});var out=s(jfe);G0o=r(out,"t5"),out.forEach(t),O0o=r(b$e," \u2014 "),xD=n(b$e,"A",{href:!0});var rut=s(xD);V0o=r(rut,"T5Model"),rut.forEach(t),X0o=r(b$e," (T5 model)"),b$e.forEach(t),z0o=i(x),Mu=n(x,"LI",{});var v$e=s(Mu);Dfe=n(v$e,"STRONG",{});var tut=s(Dfe);Q0o=r(tut,"tapas"),tut.forEach(t),W0o=r(v$e," \u2014 "),$D=n(v$e,"A",{href:!0});var aut=s($D);H0o=r(aut,"TapasModel"),aut.forEach(t),U0o=r(v$e," (TAPAS model)"),v$e.forEach(t),J0o=i(x),Eu=n(x,"LI",{});var F$e=s(Eu);Gfe=n(F$e,"STRONG",{});var nut=s(Gfe);Y0o=r(nut,"trajectory_transformer"),nut.forEach(t),K0o=r(F$e," \u2014 "),kD=n(F$e,"A",{href:!0});var sut=s(kD);Z0o=r(sut,"TrajectoryTransformerModel"),sut.forEach(t),ewo=r(F$e," (Trajectory Transformer model)"),F$e.forEach(t),owo=i(x),Cu=n(x,"LI",{});var T$e=s(Cu);Ofe=n(T$e,"STRONG",{});var lut=s(Ofe);rwo=r(lut,"transfo-xl"),lut.forEach(t),two=r(T$e," \u2014 "),SD=n(T$e,"A",{href:!0});var iut=s(SD);awo=r(iut,"TransfoXLModel"),iut.forEach(t),nwo=r(T$e," (Transformer-XL model)"),T$e.forEach(t),swo=i(x),wu=n(x,"LI",{});var M$e=s(wu);Vfe=n(M$e,"STRONG",{});var dut=s(Vfe);lwo=r(dut,"unispeech"),dut.forEach(t),iwo=r(M$e," \u2014 "),RD=n(M$e,"A",{href:!0});var cut=s(RD);dwo=r(cut,"UniSpeechModel"),cut.forEach(t),cwo=r(M$e," (UniSpeech model)"),M$e.forEach(t),fwo=i(x),Au=n(x,"LI",{});var E$e=s(Au);Xfe=n(E$e,"STRONG",{});var fut=s(Xfe);mwo=r(fut,"unispeech-sat"),fut.forEach(t),gwo=r(E$e," \u2014 "),PD=n(E$e,"A",{href:!0});var mut=s(PD);hwo=r(mut,"UniSpeechSatModel"),mut.forEach(t),pwo=r(E$e," (UniSpeechSat model)"),E$e.forEach(t),_wo=i(x),Lu=n(x,"LI",{});var C$e=s(Lu);zfe=n(C$e,"STRONG",{});var gut=s(zfe);uwo=r(gut,"van"),gut.forEach(t),bwo=r(C$e," \u2014 "),BD=n(C$e,"A",{href:!0});var hut=s(BD);vwo=r(hut,"VanModel"),hut.forEach(t),Fwo=r(C$e," (VAN model)"),C$e.forEach(t),Two=i(x),yu=n(x,"LI",{});var w$e=s(yu);Qfe=n(w$e,"STRONG",{});var put=s(Qfe);Mwo=r(put,"vilt"),put.forEach(t),Ewo=r(w$e," \u2014 "),ND=n(w$e,"A",{href:!0});var _ut=s(ND);Cwo=r(_ut,"ViltModel"),_ut.forEach(t),wwo=r(w$e," (ViLT model)"),w$e.forEach(t),Awo=i(x),xu=n(x,"LI",{});var A$e=s(xu);Wfe=n(A$e,"STRONG",{});var uut=s(Wfe);Lwo=r(uut,"vision-text-dual-encoder"),uut.forEach(t),ywo=r(A$e," \u2014 "),ID=n(A$e,"A",{href:!0});var but=s(ID);xwo=r(but,"VisionTextDualEncoderModel"),but.forEach(t),$wo=r(A$e," (VisionTextDualEncoder model)"),A$e.forEach(t),kwo=i(x),$u=n(x,"LI",{});var L$e=s($u);Hfe=n(L$e,"STRONG",{});var vut=s(Hfe);Swo=r(vut,"visual_bert"),vut.forEach(t),Rwo=r(L$e," \u2014 "),qD=n(L$e,"A",{href:!0});var Fut=s(qD);Pwo=r(Fut,"VisualBertModel"),Fut.forEach(t),Bwo=r(L$e," (VisualBERT model)"),L$e.forEach(t),Nwo=i(x),ku=n(x,"LI",{});var y$e=s(ku);Ufe=n(y$e,"STRONG",{});var Tut=s(Ufe);Iwo=r(Tut,"vit"),Tut.forEach(t),qwo=r(y$e," \u2014 "),jD=n(y$e,"A",{href:!0});var Mut=s(jD);jwo=r(Mut,"ViTModel"),Mut.forEach(t),Dwo=r(y$e," (ViT model)"),y$e.forEach(t),Gwo=i(x),Su=n(x,"LI",{});var x$e=s(Su);Jfe=n(x$e,"STRONG",{});var Eut=s(Jfe);Owo=r(Eut,"vit_mae"),Eut.forEach(t),Vwo=r(x$e," \u2014 "),DD=n(x$e,"A",{href:!0});var Cut=s(DD);Xwo=r(Cut,"ViTMAEModel"),Cut.forEach(t),zwo=r(x$e," (ViTMAE model)"),x$e.forEach(t),Qwo=i(x),Ru=n(x,"LI",{});var $$e=s(Ru);Yfe=n($$e,"STRONG",{});var wut=s(Yfe);Wwo=r(wut,"wav2vec2"),wut.forEach(t),Hwo=r($$e," \u2014 "),GD=n($$e,"A",{href:!0});var Aut=s(GD);Uwo=r(Aut,"Wav2Vec2Model"),Aut.forEach(t),Jwo=r($$e," (Wav2Vec2 model)"),$$e.forEach(t),Ywo=i(x),Pu=n(x,"LI",{});var k$e=s(Pu);Kfe=n(k$e,"STRONG",{});var Lut=s(Kfe);Kwo=r(Lut,"wav2vec2-conformer"),Lut.forEach(t),Zwo=r(k$e," \u2014 "),OD=n(k$e,"A",{href:!0});var yut=s(OD);eAo=r(yut,"Wav2Vec2ConformerModel"),yut.forEach(t),oAo=r(k$e," (Wav2Vec2-Conformer model)"),k$e.forEach(t),rAo=i(x),Bu=n(x,"LI",{});var S$e=s(Bu);Zfe=n(S$e,"STRONG",{});var xut=s(Zfe);tAo=r(xut,"wavlm"),xut.forEach(t),aAo=r(S$e," \u2014 "),VD=n(S$e,"A",{href:!0});var $ut=s(VD);nAo=r($ut,"WavLMModel"),$ut.forEach(t),sAo=r(S$e," (WavLM model)"),S$e.forEach(t),lAo=i(x),Nu=n(x,"LI",{});var R$e=s(Nu);eme=n(R$e,"STRONG",{});var kut=s(eme);iAo=r(kut,"xglm"),kut.forEach(t),dAo=r(R$e," \u2014 "),XD=n(R$e,"A",{href:!0});var Sut=s(XD);cAo=r(Sut,"XGLMModel"),Sut.forEach(t),fAo=r(R$e," (XGLM model)"),R$e.forEach(t),mAo=i(x),Iu=n(x,"LI",{});var P$e=s(Iu);ome=n(P$e,"STRONG",{});var Rut=s(ome);gAo=r(Rut,"xlm"),Rut.forEach(t),hAo=r(P$e," \u2014 "),zD=n(P$e,"A",{href:!0});var Put=s(zD);pAo=r(Put,"XLMModel"),Put.forEach(t),_Ao=r(P$e," (XLM model)"),P$e.forEach(t),uAo=i(x),qu=n(x,"LI",{});var B$e=s(qu);rme=n(B$e,"STRONG",{});var But=s(rme);bAo=r(But,"xlm-prophetnet"),But.forEach(t),vAo=r(B$e," \u2014 "),QD=n(B$e,"A",{href:!0});var Nut=s(QD);FAo=r(Nut,"XLMProphetNetModel"),Nut.forEach(t),TAo=r(B$e," (XLM-ProphetNet model)"),B$e.forEach(t),MAo=i(x),ju=n(x,"LI",{});var N$e=s(ju);tme=n(N$e,"STRONG",{});var Iut=s(tme);EAo=r(Iut,"xlm-roberta"),Iut.forEach(t),CAo=r(N$e," \u2014 "),WD=n(N$e,"A",{href:!0});var qut=s(WD);wAo=r(qut,"XLMRobertaModel"),qut.forEach(t),AAo=r(N$e," (XLM-RoBERTa model)"),N$e.forEach(t),LAo=i(x),Du=n(x,"LI",{});var I$e=s(Du);ame=n(I$e,"STRONG",{});var jut=s(ame);yAo=r(jut,"xlm-roberta-xl"),jut.forEach(t),xAo=r(I$e," \u2014 "),HD=n(I$e,"A",{href:!0});var Dut=s(HD);$Ao=r(Dut,"XLMRobertaXLModel"),Dut.forEach(t),kAo=r(I$e," (XLM-RoBERTa-XL model)"),I$e.forEach(t),SAo=i(x),Gu=n(x,"LI",{});var q$e=s(Gu);nme=n(q$e,"STRONG",{});var Gut=s(nme);RAo=r(Gut,"xlnet"),Gut.forEach(t),PAo=r(q$e," \u2014 "),UD=n(q$e,"A",{href:!0});var Out=s(UD);BAo=r(Out,"XLNetModel"),Out.forEach(t),NAo=r(q$e," (XLNet model)"),q$e.forEach(t),IAo=i(x),Ou=n(x,"LI",{});var j$e=s(Ou);sme=n(j$e,"STRONG",{});var Vut=s(sme);qAo=r(Vut,"yolos"),Vut.forEach(t),jAo=r(j$e," \u2014 "),JD=n(j$e,"A",{href:!0});var Xut=s(JD);DAo=r(Xut,"YolosModel"),Xut.forEach(t),GAo=r(j$e," (YOLOS model)"),j$e.forEach(t),OAo=i(x),Vu=n(x,"LI",{});var D$e=s(Vu);lme=n(D$e,"STRONG",{});var zut=s(lme);VAo=r(zut,"yoso"),zut.forEach(t),XAo=r(D$e," \u2014 "),YD=n(D$e,"A",{href:!0});var Qut=s(YD);zAo=r(Qut,"YosoModel"),Qut.forEach(t),QAo=r(D$e," (YOSO model)"),D$e.forEach(t),x.forEach(t),WAo=i(sa),Xu=n(sa,"P",{});var G$e=s(Xu);HAo=r(G$e,"The model is set in evaluation mode by default using "),ime=n(G$e,"CODE",{});var Wut=s(ime);UAo=r(Wut,"model.eval()"),Wut.forEach(t),JAo=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dme=n(G$e,"CODE",{});var Hut=s(dme);YAo=r(Hut,"model.train()"),Hut.forEach(t),G$e.forEach(t),KAo=i(sa),T(zu.$$.fragment,sa),sa.forEach(t),ol.forEach(t),lXe=i(f),Vi=n(f,"H2",{class:!0});var gQe=s(Vi);Qu=n(gQe,"A",{id:!0,class:!0,href:!0});var Uut=s(Qu);cme=n(Uut,"SPAN",{});var Jut=s(cme);T(PL.$$.fragment,Jut),Jut.forEach(t),Uut.forEach(t),ZAo=i(gQe),fme=n(gQe,"SPAN",{});var Yut=s(fme);e6o=r(Yut,"AutoModelForPreTraining"),Yut.forEach(t),gQe.forEach(t),iXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(BL.$$.fragment,rl),o6o=i(rl),Xi=n(rl,"P",{});var xre=s(Xi);r6o=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KD=n(xre,"A",{href:!0});var Kut=s(KD);t6o=r(Kut,"from_pretrained()"),Kut.forEach(t),a6o=r(xre," class method or the "),ZD=n(xre,"A",{href:!0});var Zut=s(ZD);n6o=r(Zut,"from_config()"),Zut.forEach(t),s6o=r(xre,` class
method.`),xre.forEach(t),l6o=i(rl),NL=n(rl,"P",{});var hQe=s(NL);i6o=r(hQe,"This class cannot be instantiated directly using "),mme=n(hQe,"CODE",{});var e1t=s(mme);d6o=r(e1t,"__init__()"),e1t.forEach(t),c6o=r(hQe," (throws an error)."),hQe.forEach(t),f6o=i(rl),it=n(rl,"DIV",{class:!0});var d6=s(it);T(IL.$$.fragment,d6),m6o=i(d6),gme=n(d6,"P",{});var o1t=s(gme);g6o=r(o1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o1t.forEach(t),h6o=i(d6),zi=n(d6,"P",{});var $re=s(zi);p6o=r($re,`Note:
Loading a model from its configuration file does `),hme=n($re,"STRONG",{});var r1t=s(hme);_6o=r(r1t,"not"),r1t.forEach(t),u6o=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n($re,"A",{href:!0});var t1t=s(eG);b6o=r(t1t,"from_pretrained()"),t1t.forEach(t),v6o=r($re," to load the model weights."),$re.forEach(t),F6o=i(d6),T(Wu.$$.fragment,d6),d6.forEach(t),T6o=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(qL.$$.fragment,la),M6o=i(la),pme=n(la,"P",{});var a1t=s(pme);E6o=r(a1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a1t.forEach(t),C6o=i(la),Ia=n(la,"P",{});var c6=s(Ia);w6o=r(c6,"The model class to instantiate is selected based on the "),_me=n(c6,"CODE",{});var n1t=s(_me);A6o=r(n1t,"model_type"),n1t.forEach(t),L6o=r(c6,` property of the config object (either
passed as an argument or loaded from `),ume=n(c6,"CODE",{});var s1t=s(ume);y6o=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),x6o=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(c6,"CODE",{});var l1t=s(bme);$6o=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),k6o=r(c6,":"),c6.forEach(t),S6o=i(la),G=n(la,"UL",{});var O=s(G);Hu=n(O,"LI",{});var O$e=s(Hu);vme=n(O$e,"STRONG",{});var i1t=s(vme);R6o=r(i1t,"albert"),i1t.forEach(t),P6o=r(O$e," \u2014 "),oG=n(O$e,"A",{href:!0});var d1t=s(oG);B6o=r(d1t,"AlbertForPreTraining"),d1t.forEach(t),N6o=r(O$e," (ALBERT model)"),O$e.forEach(t),I6o=i(O),Uu=n(O,"LI",{});var V$e=s(Uu);Fme=n(V$e,"STRONG",{});var c1t=s(Fme);q6o=r(c1t,"bart"),c1t.forEach(t),j6o=r(V$e," \u2014 "),rG=n(V$e,"A",{href:!0});var f1t=s(rG);D6o=r(f1t,"BartForConditionalGeneration"),f1t.forEach(t),G6o=r(V$e," (BART model)"),V$e.forEach(t),O6o=i(O),Ju=n(O,"LI",{});var X$e=s(Ju);Tme=n(X$e,"STRONG",{});var m1t=s(Tme);V6o=r(m1t,"bert"),m1t.forEach(t),X6o=r(X$e," \u2014 "),tG=n(X$e,"A",{href:!0});var g1t=s(tG);z6o=r(g1t,"BertForPreTraining"),g1t.forEach(t),Q6o=r(X$e," (BERT model)"),X$e.forEach(t),W6o=i(O),Yu=n(O,"LI",{});var z$e=s(Yu);Mme=n(z$e,"STRONG",{});var h1t=s(Mme);H6o=r(h1t,"big_bird"),h1t.forEach(t),U6o=r(z$e," \u2014 "),aG=n(z$e,"A",{href:!0});var p1t=s(aG);J6o=r(p1t,"BigBirdForPreTraining"),p1t.forEach(t),Y6o=r(z$e," (BigBird model)"),z$e.forEach(t),K6o=i(O),Ku=n(O,"LI",{});var Q$e=s(Ku);Eme=n(Q$e,"STRONG",{});var _1t=s(Eme);Z6o=r(_1t,"bloom"),_1t.forEach(t),e7o=r(Q$e," \u2014 "),nG=n(Q$e,"A",{href:!0});var u1t=s(nG);o7o=r(u1t,"BloomForCausalLM"),u1t.forEach(t),r7o=r(Q$e," (BLOOM model)"),Q$e.forEach(t),t7o=i(O),Zu=n(O,"LI",{});var W$e=s(Zu);Cme=n(W$e,"STRONG",{});var b1t=s(Cme);a7o=r(b1t,"camembert"),b1t.forEach(t),n7o=r(W$e," \u2014 "),sG=n(W$e,"A",{href:!0});var v1t=s(sG);s7o=r(v1t,"CamembertForMaskedLM"),v1t.forEach(t),l7o=r(W$e," (CamemBERT model)"),W$e.forEach(t),i7o=i(O),e1=n(O,"LI",{});var H$e=s(e1);wme=n(H$e,"STRONG",{});var F1t=s(wme);d7o=r(F1t,"ctrl"),F1t.forEach(t),c7o=r(H$e," \u2014 "),lG=n(H$e,"A",{href:!0});var T1t=s(lG);f7o=r(T1t,"CTRLLMHeadModel"),T1t.forEach(t),m7o=r(H$e," (CTRL model)"),H$e.forEach(t),g7o=i(O),o1=n(O,"LI",{});var U$e=s(o1);Ame=n(U$e,"STRONG",{});var M1t=s(Ame);h7o=r(M1t,"data2vec-text"),M1t.forEach(t),p7o=r(U$e," \u2014 "),iG=n(U$e,"A",{href:!0});var E1t=s(iG);_7o=r(E1t,"Data2VecTextForMaskedLM"),E1t.forEach(t),u7o=r(U$e," (Data2VecText model)"),U$e.forEach(t),b7o=i(O),r1=n(O,"LI",{});var J$e=s(r1);Lme=n(J$e,"STRONG",{});var C1t=s(Lme);v7o=r(C1t,"deberta"),C1t.forEach(t),F7o=r(J$e," \u2014 "),dG=n(J$e,"A",{href:!0});var w1t=s(dG);T7o=r(w1t,"DebertaForMaskedLM"),w1t.forEach(t),M7o=r(J$e," (DeBERTa model)"),J$e.forEach(t),E7o=i(O),t1=n(O,"LI",{});var Y$e=s(t1);yme=n(Y$e,"STRONG",{});var A1t=s(yme);C7o=r(A1t,"deberta-v2"),A1t.forEach(t),w7o=r(Y$e," \u2014 "),cG=n(Y$e,"A",{href:!0});var L1t=s(cG);A7o=r(L1t,"DebertaV2ForMaskedLM"),L1t.forEach(t),L7o=r(Y$e," (DeBERTa-v2 model)"),Y$e.forEach(t),y7o=i(O),a1=n(O,"LI",{});var K$e=s(a1);xme=n(K$e,"STRONG",{});var y1t=s(xme);x7o=r(y1t,"distilbert"),y1t.forEach(t),$7o=r(K$e," \u2014 "),fG=n(K$e,"A",{href:!0});var x1t=s(fG);k7o=r(x1t,"DistilBertForMaskedLM"),x1t.forEach(t),S7o=r(K$e," (DistilBERT model)"),K$e.forEach(t),R7o=i(O),n1=n(O,"LI",{});var Z$e=s(n1);$me=n(Z$e,"STRONG",{});var $1t=s($me);P7o=r($1t,"electra"),$1t.forEach(t),B7o=r(Z$e," \u2014 "),mG=n(Z$e,"A",{href:!0});var k1t=s(mG);N7o=r(k1t,"ElectraForPreTraining"),k1t.forEach(t),I7o=r(Z$e," (ELECTRA model)"),Z$e.forEach(t),q7o=i(O),s1=n(O,"LI",{});var eke=s(s1);kme=n(eke,"STRONG",{});var S1t=s(kme);j7o=r(S1t,"flaubert"),S1t.forEach(t),D7o=r(eke," \u2014 "),gG=n(eke,"A",{href:!0});var R1t=s(gG);G7o=r(R1t,"FlaubertWithLMHeadModel"),R1t.forEach(t),O7o=r(eke," (FlauBERT model)"),eke.forEach(t),V7o=i(O),l1=n(O,"LI",{});var oke=s(l1);Sme=n(oke,"STRONG",{});var P1t=s(Sme);X7o=r(P1t,"flava"),P1t.forEach(t),z7o=r(oke," \u2014 "),hG=n(oke,"A",{href:!0});var B1t=s(hG);Q7o=r(B1t,"FlavaForPreTraining"),B1t.forEach(t),W7o=r(oke," (FLAVA model)"),oke.forEach(t),H7o=i(O),i1=n(O,"LI",{});var rke=s(i1);Rme=n(rke,"STRONG",{});var N1t=s(Rme);U7o=r(N1t,"fnet"),N1t.forEach(t),J7o=r(rke," \u2014 "),pG=n(rke,"A",{href:!0});var I1t=s(pG);Y7o=r(I1t,"FNetForPreTraining"),I1t.forEach(t),K7o=r(rke," (FNet model)"),rke.forEach(t),Z7o=i(O),d1=n(O,"LI",{});var tke=s(d1);Pme=n(tke,"STRONG",{});var q1t=s(Pme);eLo=r(q1t,"fsmt"),q1t.forEach(t),oLo=r(tke," \u2014 "),_G=n(tke,"A",{href:!0});var j1t=s(_G);rLo=r(j1t,"FSMTForConditionalGeneration"),j1t.forEach(t),tLo=r(tke," (FairSeq Machine-Translation model)"),tke.forEach(t),aLo=i(O),c1=n(O,"LI",{});var ake=s(c1);Bme=n(ake,"STRONG",{});var D1t=s(Bme);nLo=r(D1t,"funnel"),D1t.forEach(t),sLo=r(ake," \u2014 "),uG=n(ake,"A",{href:!0});var G1t=s(uG);lLo=r(G1t,"FunnelForPreTraining"),G1t.forEach(t),iLo=r(ake," (Funnel Transformer model)"),ake.forEach(t),dLo=i(O),f1=n(O,"LI",{});var nke=s(f1);Nme=n(nke,"STRONG",{});var O1t=s(Nme);cLo=r(O1t,"gpt2"),O1t.forEach(t),fLo=r(nke," \u2014 "),bG=n(nke,"A",{href:!0});var V1t=s(bG);mLo=r(V1t,"GPT2LMHeadModel"),V1t.forEach(t),gLo=r(nke," (OpenAI GPT-2 model)"),nke.forEach(t),hLo=i(O),m1=n(O,"LI",{});var ske=s(m1);Ime=n(ske,"STRONG",{});var X1t=s(Ime);pLo=r(X1t,"ibert"),X1t.forEach(t),_Lo=r(ske," \u2014 "),vG=n(ske,"A",{href:!0});var z1t=s(vG);uLo=r(z1t,"IBertForMaskedLM"),z1t.forEach(t),bLo=r(ske," (I-BERT model)"),ske.forEach(t),vLo=i(O),g1=n(O,"LI",{});var lke=s(g1);qme=n(lke,"STRONG",{});var Q1t=s(qme);FLo=r(Q1t,"layoutlm"),Q1t.forEach(t),TLo=r(lke," \u2014 "),FG=n(lke,"A",{href:!0});var W1t=s(FG);MLo=r(W1t,"LayoutLMForMaskedLM"),W1t.forEach(t),ELo=r(lke," (LayoutLM model)"),lke.forEach(t),CLo=i(O),h1=n(O,"LI",{});var ike=s(h1);jme=n(ike,"STRONG",{});var H1t=s(jme);wLo=r(H1t,"longformer"),H1t.forEach(t),ALo=r(ike," \u2014 "),TG=n(ike,"A",{href:!0});var U1t=s(TG);LLo=r(U1t,"LongformerForMaskedLM"),U1t.forEach(t),yLo=r(ike," (Longformer model)"),ike.forEach(t),xLo=i(O),p1=n(O,"LI",{});var dke=s(p1);Dme=n(dke,"STRONG",{});var J1t=s(Dme);$Lo=r(J1t,"lxmert"),J1t.forEach(t),kLo=r(dke," \u2014 "),MG=n(dke,"A",{href:!0});var Y1t=s(MG);SLo=r(Y1t,"LxmertForPreTraining"),Y1t.forEach(t),RLo=r(dke," (LXMERT model)"),dke.forEach(t),PLo=i(O),_1=n(O,"LI",{});var cke=s(_1);Gme=n(cke,"STRONG",{});var K1t=s(Gme);BLo=r(K1t,"megatron-bert"),K1t.forEach(t),NLo=r(cke," \u2014 "),EG=n(cke,"A",{href:!0});var Z1t=s(EG);ILo=r(Z1t,"MegatronBertForPreTraining"),Z1t.forEach(t),qLo=r(cke," (Megatron-BERT model)"),cke.forEach(t),jLo=i(O),u1=n(O,"LI",{});var fke=s(u1);Ome=n(fke,"STRONG",{});var e2t=s(Ome);DLo=r(e2t,"mobilebert"),e2t.forEach(t),GLo=r(fke," \u2014 "),CG=n(fke,"A",{href:!0});var o2t=s(CG);OLo=r(o2t,"MobileBertForPreTraining"),o2t.forEach(t),VLo=r(fke," (MobileBERT model)"),fke.forEach(t),XLo=i(O),b1=n(O,"LI",{});var mke=s(b1);Vme=n(mke,"STRONG",{});var r2t=s(Vme);zLo=r(r2t,"mpnet"),r2t.forEach(t),QLo=r(mke," \u2014 "),wG=n(mke,"A",{href:!0});var t2t=s(wG);WLo=r(t2t,"MPNetForMaskedLM"),t2t.forEach(t),HLo=r(mke," (MPNet model)"),mke.forEach(t),ULo=i(O),v1=n(O,"LI",{});var gke=s(v1);Xme=n(gke,"STRONG",{});var a2t=s(Xme);JLo=r(a2t,"mvp"),a2t.forEach(t),YLo=r(gke," \u2014 "),AG=n(gke,"A",{href:!0});var n2t=s(AG);KLo=r(n2t,"MvpForConditionalGeneration"),n2t.forEach(t),ZLo=r(gke," (MVP model)"),gke.forEach(t),eyo=i(O),F1=n(O,"LI",{});var hke=s(F1);zme=n(hke,"STRONG",{});var s2t=s(zme);oyo=r(s2t,"nezha"),s2t.forEach(t),ryo=r(hke," \u2014 "),LG=n(hke,"A",{href:!0});var l2t=s(LG);tyo=r(l2t,"NezhaForPreTraining"),l2t.forEach(t),ayo=r(hke," (Nezha model)"),hke.forEach(t),nyo=i(O),T1=n(O,"LI",{});var pke=s(T1);Qme=n(pke,"STRONG",{});var i2t=s(Qme);syo=r(i2t,"openai-gpt"),i2t.forEach(t),lyo=r(pke," \u2014 "),yG=n(pke,"A",{href:!0});var d2t=s(yG);iyo=r(d2t,"OpenAIGPTLMHeadModel"),d2t.forEach(t),dyo=r(pke," (OpenAI GPT model)"),pke.forEach(t),cyo=i(O),M1=n(O,"LI",{});var _ke=s(M1);Wme=n(_ke,"STRONG",{});var c2t=s(Wme);fyo=r(c2t,"retribert"),c2t.forEach(t),myo=r(_ke," \u2014 "),xG=n(_ke,"A",{href:!0});var f2t=s(xG);gyo=r(f2t,"RetriBertModel"),f2t.forEach(t),hyo=r(_ke," (RetriBERT model)"),_ke.forEach(t),pyo=i(O),E1=n(O,"LI",{});var uke=s(E1);Hme=n(uke,"STRONG",{});var m2t=s(Hme);_yo=r(m2t,"roberta"),m2t.forEach(t),uyo=r(uke," \u2014 "),$G=n(uke,"A",{href:!0});var g2t=s($G);byo=r(g2t,"RobertaForMaskedLM"),g2t.forEach(t),vyo=r(uke," (RoBERTa model)"),uke.forEach(t),Fyo=i(O),C1=n(O,"LI",{});var bke=s(C1);Ume=n(bke,"STRONG",{});var h2t=s(Ume);Tyo=r(h2t,"splinter"),h2t.forEach(t),Myo=r(bke," \u2014 "),kG=n(bke,"A",{href:!0});var p2t=s(kG);Eyo=r(p2t,"SplinterForPreTraining"),p2t.forEach(t),Cyo=r(bke," (Splinter model)"),bke.forEach(t),wyo=i(O),w1=n(O,"LI",{});var vke=s(w1);Jme=n(vke,"STRONG",{});var _2t=s(Jme);Ayo=r(_2t,"squeezebert"),_2t.forEach(t),Lyo=r(vke," \u2014 "),SG=n(vke,"A",{href:!0});var u2t=s(SG);yyo=r(u2t,"SqueezeBertForMaskedLM"),u2t.forEach(t),xyo=r(vke," (SqueezeBERT model)"),vke.forEach(t),$yo=i(O),A1=n(O,"LI",{});var Fke=s(A1);Yme=n(Fke,"STRONG",{});var b2t=s(Yme);kyo=r(b2t,"t5"),b2t.forEach(t),Syo=r(Fke," \u2014 "),RG=n(Fke,"A",{href:!0});var v2t=s(RG);Ryo=r(v2t,"T5ForConditionalGeneration"),v2t.forEach(t),Pyo=r(Fke," (T5 model)"),Fke.forEach(t),Byo=i(O),L1=n(O,"LI",{});var Tke=s(L1);Kme=n(Tke,"STRONG",{});var F2t=s(Kme);Nyo=r(F2t,"tapas"),F2t.forEach(t),Iyo=r(Tke," \u2014 "),PG=n(Tke,"A",{href:!0});var T2t=s(PG);qyo=r(T2t,"TapasForMaskedLM"),T2t.forEach(t),jyo=r(Tke," (TAPAS model)"),Tke.forEach(t),Dyo=i(O),y1=n(O,"LI",{});var Mke=s(y1);Zme=n(Mke,"STRONG",{});var M2t=s(Zme);Gyo=r(M2t,"transfo-xl"),M2t.forEach(t),Oyo=r(Mke," \u2014 "),BG=n(Mke,"A",{href:!0});var E2t=s(BG);Vyo=r(E2t,"TransfoXLLMHeadModel"),E2t.forEach(t),Xyo=r(Mke," (Transformer-XL model)"),Mke.forEach(t),zyo=i(O),x1=n(O,"LI",{});var Eke=s(x1);ege=n(Eke,"STRONG",{});var C2t=s(ege);Qyo=r(C2t,"unispeech"),C2t.forEach(t),Wyo=r(Eke," \u2014 "),NG=n(Eke,"A",{href:!0});var w2t=s(NG);Hyo=r(w2t,"UniSpeechForPreTraining"),w2t.forEach(t),Uyo=r(Eke," (UniSpeech model)"),Eke.forEach(t),Jyo=i(O),$1=n(O,"LI",{});var Cke=s($1);oge=n(Cke,"STRONG",{});var A2t=s(oge);Yyo=r(A2t,"unispeech-sat"),A2t.forEach(t),Kyo=r(Cke," \u2014 "),IG=n(Cke,"A",{href:!0});var L2t=s(IG);Zyo=r(L2t,"UniSpeechSatForPreTraining"),L2t.forEach(t),e9o=r(Cke," (UniSpeechSat model)"),Cke.forEach(t),o9o=i(O),k1=n(O,"LI",{});var wke=s(k1);rge=n(wke,"STRONG",{});var y2t=s(rge);r9o=r(y2t,"visual_bert"),y2t.forEach(t),t9o=r(wke," \u2014 "),qG=n(wke,"A",{href:!0});var x2t=s(qG);a9o=r(x2t,"VisualBertForPreTraining"),x2t.forEach(t),n9o=r(wke," (VisualBERT model)"),wke.forEach(t),s9o=i(O),S1=n(O,"LI",{});var Ake=s(S1);tge=n(Ake,"STRONG",{});var $2t=s(tge);l9o=r($2t,"vit_mae"),$2t.forEach(t),i9o=r(Ake," \u2014 "),jG=n(Ake,"A",{href:!0});var k2t=s(jG);d9o=r(k2t,"ViTMAEForPreTraining"),k2t.forEach(t),c9o=r(Ake," (ViTMAE model)"),Ake.forEach(t),f9o=i(O),R1=n(O,"LI",{});var Lke=s(R1);age=n(Lke,"STRONG",{});var S2t=s(age);m9o=r(S2t,"wav2vec2"),S2t.forEach(t),g9o=r(Lke," \u2014 "),DG=n(Lke,"A",{href:!0});var R2t=s(DG);h9o=r(R2t,"Wav2Vec2ForPreTraining"),R2t.forEach(t),p9o=r(Lke," (Wav2Vec2 model)"),Lke.forEach(t),_9o=i(O),P1=n(O,"LI",{});var yke=s(P1);nge=n(yke,"STRONG",{});var P2t=s(nge);u9o=r(P2t,"wav2vec2-conformer"),P2t.forEach(t),b9o=r(yke," \u2014 "),GG=n(yke,"A",{href:!0});var B2t=s(GG);v9o=r(B2t,"Wav2Vec2ConformerForPreTraining"),B2t.forEach(t),F9o=r(yke," (Wav2Vec2-Conformer model)"),yke.forEach(t),T9o=i(O),B1=n(O,"LI",{});var xke=s(B1);sge=n(xke,"STRONG",{});var N2t=s(sge);M9o=r(N2t,"xlm"),N2t.forEach(t),E9o=r(xke," \u2014 "),OG=n(xke,"A",{href:!0});var I2t=s(OG);C9o=r(I2t,"XLMWithLMHeadModel"),I2t.forEach(t),w9o=r(xke," (XLM model)"),xke.forEach(t),A9o=i(O),N1=n(O,"LI",{});var $ke=s(N1);lge=n($ke,"STRONG",{});var q2t=s(lge);L9o=r(q2t,"xlm-roberta"),q2t.forEach(t),y9o=r($ke," \u2014 "),VG=n($ke,"A",{href:!0});var j2t=s(VG);x9o=r(j2t,"XLMRobertaForMaskedLM"),j2t.forEach(t),$9o=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),k9o=i(O),I1=n(O,"LI",{});var kke=s(I1);ige=n(kke,"STRONG",{});var D2t=s(ige);S9o=r(D2t,"xlm-roberta-xl"),D2t.forEach(t),R9o=r(kke," \u2014 "),XG=n(kke,"A",{href:!0});var G2t=s(XG);P9o=r(G2t,"XLMRobertaXLForMaskedLM"),G2t.forEach(t),B9o=r(kke," (XLM-RoBERTa-XL model)"),kke.forEach(t),N9o=i(O),q1=n(O,"LI",{});var Ske=s(q1);dge=n(Ske,"STRONG",{});var O2t=s(dge);I9o=r(O2t,"xlnet"),O2t.forEach(t),q9o=r(Ske," \u2014 "),zG=n(Ske,"A",{href:!0});var V2t=s(zG);j9o=r(V2t,"XLNetLMHeadModel"),V2t.forEach(t),D9o=r(Ske," (XLNet model)"),Ske.forEach(t),O.forEach(t),G9o=i(la),j1=n(la,"P",{});var Rke=s(j1);O9o=r(Rke,"The model is set in evaluation mode by default using "),cge=n(Rke,"CODE",{});var X2t=s(cge);V9o=r(X2t,"model.eval()"),X2t.forEach(t),X9o=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=n(Rke,"CODE",{});var z2t=s(fge);z9o=r(z2t,"model.train()"),z2t.forEach(t),Rke.forEach(t),Q9o=i(la),T(D1.$$.fragment,la),la.forEach(t),rl.forEach(t),dXe=i(f),Qi=n(f,"H2",{class:!0});var pQe=s(Qi);G1=n(pQe,"A",{id:!0,class:!0,href:!0});var Q2t=s(G1);mge=n(Q2t,"SPAN",{});var W2t=s(mge);T(jL.$$.fragment,W2t),W2t.forEach(t),Q2t.forEach(t),W9o=i(pQe),gge=n(pQe,"SPAN",{});var H2t=s(gge);H9o=r(H2t,"AutoModelForCausalLM"),H2t.forEach(t),pQe.forEach(t),cXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(DL.$$.fragment,tl),U9o=i(tl),Wi=n(tl,"P",{});var kre=s(Wi);J9o=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QG=n(kre,"A",{href:!0});var U2t=s(QG);Y9o=r(U2t,"from_pretrained()"),U2t.forEach(t),K9o=r(kre," class method or the "),WG=n(kre,"A",{href:!0});var J2t=s(WG);Z9o=r(J2t,"from_config()"),J2t.forEach(t),exo=r(kre,` class
method.`),kre.forEach(t),oxo=i(tl),GL=n(tl,"P",{});var _Qe=s(GL);rxo=r(_Qe,"This class cannot be instantiated directly using "),hge=n(_Qe,"CODE",{});var Y2t=s(hge);txo=r(Y2t,"__init__()"),Y2t.forEach(t),axo=r(_Qe," (throws an error)."),_Qe.forEach(t),nxo=i(tl),dt=n(tl,"DIV",{class:!0});var f6=s(dt);T(OL.$$.fragment,f6),sxo=i(f6),pge=n(f6,"P",{});var K2t=s(pge);lxo=r(K2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K2t.forEach(t),ixo=i(f6),Hi=n(f6,"P",{});var Sre=s(Hi);dxo=r(Sre,`Note:
Loading a model from its configuration file does `),_ge=n(Sre,"STRONG",{});var Z2t=s(_ge);cxo=r(Z2t,"not"),Z2t.forEach(t),fxo=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(Sre,"A",{href:!0});var ebt=s(HG);mxo=r(ebt,"from_pretrained()"),ebt.forEach(t),gxo=r(Sre," to load the model weights."),Sre.forEach(t),hxo=i(f6),T(O1.$$.fragment,f6),f6.forEach(t),pxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(VL.$$.fragment,ia),_xo=i(ia),uge=n(ia,"P",{});var obt=s(uge);uxo=r(obt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),obt.forEach(t),bxo=i(ia),qa=n(ia,"P",{});var m6=s(qa);vxo=r(m6,"The model class to instantiate is selected based on the "),bge=n(m6,"CODE",{});var rbt=s(bge);Fxo=r(rbt,"model_type"),rbt.forEach(t),Txo=r(m6,` property of the config object (either
passed as an argument or loaded from `),vge=n(m6,"CODE",{});var tbt=s(vge);Mxo=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),Exo=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(m6,"CODE",{});var abt=s(Fge);Cxo=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),wxo=r(m6,":"),m6.forEach(t),Axo=i(ia),z=n(ia,"UL",{});var Q=s(z);V1=n(Q,"LI",{});var Pke=s(V1);Tge=n(Pke,"STRONG",{});var nbt=s(Tge);Lxo=r(nbt,"bart"),nbt.forEach(t),yxo=r(Pke," \u2014 "),UG=n(Pke,"A",{href:!0});var sbt=s(UG);xxo=r(sbt,"BartForCausalLM"),sbt.forEach(t),$xo=r(Pke," (BART model)"),Pke.forEach(t),kxo=i(Q),X1=n(Q,"LI",{});var Bke=s(X1);Mge=n(Bke,"STRONG",{});var lbt=s(Mge);Sxo=r(lbt,"bert"),lbt.forEach(t),Rxo=r(Bke," \u2014 "),JG=n(Bke,"A",{href:!0});var ibt=s(JG);Pxo=r(ibt,"BertLMHeadModel"),ibt.forEach(t),Bxo=r(Bke," (BERT model)"),Bke.forEach(t),Nxo=i(Q),z1=n(Q,"LI",{});var Nke=s(z1);Ege=n(Nke,"STRONG",{});var dbt=s(Ege);Ixo=r(dbt,"bert-generation"),dbt.forEach(t),qxo=r(Nke," \u2014 "),YG=n(Nke,"A",{href:!0});var cbt=s(YG);jxo=r(cbt,"BertGenerationDecoder"),cbt.forEach(t),Dxo=r(Nke," (Bert Generation model)"),Nke.forEach(t),Gxo=i(Q),Q1=n(Q,"LI",{});var Ike=s(Q1);Cge=n(Ike,"STRONG",{});var fbt=s(Cge);Oxo=r(fbt,"big_bird"),fbt.forEach(t),Vxo=r(Ike," \u2014 "),KG=n(Ike,"A",{href:!0});var mbt=s(KG);Xxo=r(mbt,"BigBirdForCausalLM"),mbt.forEach(t),zxo=r(Ike," (BigBird model)"),Ike.forEach(t),Qxo=i(Q),W1=n(Q,"LI",{});var qke=s(W1);wge=n(qke,"STRONG",{});var gbt=s(wge);Wxo=r(gbt,"bigbird_pegasus"),gbt.forEach(t),Hxo=r(qke," \u2014 "),ZG=n(qke,"A",{href:!0});var hbt=s(ZG);Uxo=r(hbt,"BigBirdPegasusForCausalLM"),hbt.forEach(t),Jxo=r(qke," (BigBird-Pegasus model)"),qke.forEach(t),Yxo=i(Q),H1=n(Q,"LI",{});var jke=s(H1);Age=n(jke,"STRONG",{});var pbt=s(Age);Kxo=r(pbt,"blenderbot"),pbt.forEach(t),Zxo=r(jke," \u2014 "),eO=n(jke,"A",{href:!0});var _bt=s(eO);e$o=r(_bt,"BlenderbotForCausalLM"),_bt.forEach(t),o$o=r(jke," (Blenderbot model)"),jke.forEach(t),r$o=i(Q),U1=n(Q,"LI",{});var Dke=s(U1);Lge=n(Dke,"STRONG",{});var ubt=s(Lge);t$o=r(ubt,"blenderbot-small"),ubt.forEach(t),a$o=r(Dke," \u2014 "),oO=n(Dke,"A",{href:!0});var bbt=s(oO);n$o=r(bbt,"BlenderbotSmallForCausalLM"),bbt.forEach(t),s$o=r(Dke," (BlenderbotSmall model)"),Dke.forEach(t),l$o=i(Q),J1=n(Q,"LI",{});var Gke=s(J1);yge=n(Gke,"STRONG",{});var vbt=s(yge);i$o=r(vbt,"bloom"),vbt.forEach(t),d$o=r(Gke," \u2014 "),rO=n(Gke,"A",{href:!0});var Fbt=s(rO);c$o=r(Fbt,"BloomForCausalLM"),Fbt.forEach(t),f$o=r(Gke," (BLOOM model)"),Gke.forEach(t),m$o=i(Q),Y1=n(Q,"LI",{});var Oke=s(Y1);xge=n(Oke,"STRONG",{});var Tbt=s(xge);g$o=r(Tbt,"camembert"),Tbt.forEach(t),h$o=r(Oke," \u2014 "),tO=n(Oke,"A",{href:!0});var Mbt=s(tO);p$o=r(Mbt,"CamembertForCausalLM"),Mbt.forEach(t),_$o=r(Oke," (CamemBERT model)"),Oke.forEach(t),u$o=i(Q),K1=n(Q,"LI",{});var Vke=s(K1);$ge=n(Vke,"STRONG",{});var Ebt=s($ge);b$o=r(Ebt,"codegen"),Ebt.forEach(t),v$o=r(Vke," \u2014 "),aO=n(Vke,"A",{href:!0});var Cbt=s(aO);F$o=r(Cbt,"CodeGenForCausalLM"),Cbt.forEach(t),T$o=r(Vke," (CodeGen model)"),Vke.forEach(t),M$o=i(Q),Z1=n(Q,"LI",{});var Xke=s(Z1);kge=n(Xke,"STRONG",{});var wbt=s(kge);E$o=r(wbt,"ctrl"),wbt.forEach(t),C$o=r(Xke," \u2014 "),nO=n(Xke,"A",{href:!0});var Abt=s(nO);w$o=r(Abt,"CTRLLMHeadModel"),Abt.forEach(t),A$o=r(Xke," (CTRL model)"),Xke.forEach(t),L$o=i(Q),e2=n(Q,"LI",{});var zke=s(e2);Sge=n(zke,"STRONG",{});var Lbt=s(Sge);y$o=r(Lbt,"data2vec-text"),Lbt.forEach(t),x$o=r(zke," \u2014 "),sO=n(zke,"A",{href:!0});var ybt=s(sO);$$o=r(ybt,"Data2VecTextForCausalLM"),ybt.forEach(t),k$o=r(zke," (Data2VecText model)"),zke.forEach(t),S$o=i(Q),o2=n(Q,"LI",{});var Qke=s(o2);Rge=n(Qke,"STRONG",{});var xbt=s(Rge);R$o=r(xbt,"electra"),xbt.forEach(t),P$o=r(Qke," \u2014 "),lO=n(Qke,"A",{href:!0});var $bt=s(lO);B$o=r($bt,"ElectraForCausalLM"),$bt.forEach(t),N$o=r(Qke," (ELECTRA model)"),Qke.forEach(t),I$o=i(Q),r2=n(Q,"LI",{});var Wke=s(r2);Pge=n(Wke,"STRONG",{});var kbt=s(Pge);q$o=r(kbt,"gpt2"),kbt.forEach(t),j$o=r(Wke," \u2014 "),iO=n(Wke,"A",{href:!0});var Sbt=s(iO);D$o=r(Sbt,"GPT2LMHeadModel"),Sbt.forEach(t),G$o=r(Wke," (OpenAI GPT-2 model)"),Wke.forEach(t),O$o=i(Q),t2=n(Q,"LI",{});var Hke=s(t2);Bge=n(Hke,"STRONG",{});var Rbt=s(Bge);V$o=r(Rbt,"gpt_neo"),Rbt.forEach(t),X$o=r(Hke," \u2014 "),dO=n(Hke,"A",{href:!0});var Pbt=s(dO);z$o=r(Pbt,"GPTNeoForCausalLM"),Pbt.forEach(t),Q$o=r(Hke," (GPT Neo model)"),Hke.forEach(t),W$o=i(Q),a2=n(Q,"LI",{});var Uke=s(a2);Nge=n(Uke,"STRONG",{});var Bbt=s(Nge);H$o=r(Bbt,"gpt_neox"),Bbt.forEach(t),U$o=r(Uke," \u2014 "),cO=n(Uke,"A",{href:!0});var Nbt=s(cO);J$o=r(Nbt,"GPTNeoXForCausalLM"),Nbt.forEach(t),Y$o=r(Uke," (GPT NeoX model)"),Uke.forEach(t),K$o=i(Q),n2=n(Q,"LI",{});var Jke=s(n2);Ige=n(Jke,"STRONG",{});var Ibt=s(Ige);Z$o=r(Ibt,"gptj"),Ibt.forEach(t),eko=r(Jke," \u2014 "),fO=n(Jke,"A",{href:!0});var qbt=s(fO);oko=r(qbt,"GPTJForCausalLM"),qbt.forEach(t),rko=r(Jke," (GPT-J model)"),Jke.forEach(t),tko=i(Q),s2=n(Q,"LI",{});var Yke=s(s2);qge=n(Yke,"STRONG",{});var jbt=s(qge);ako=r(jbt,"marian"),jbt.forEach(t),nko=r(Yke," \u2014 "),mO=n(Yke,"A",{href:!0});var Dbt=s(mO);sko=r(Dbt,"MarianForCausalLM"),Dbt.forEach(t),lko=r(Yke," (Marian model)"),Yke.forEach(t),iko=i(Q),l2=n(Q,"LI",{});var Kke=s(l2);jge=n(Kke,"STRONG",{});var Gbt=s(jge);dko=r(Gbt,"mbart"),Gbt.forEach(t),cko=r(Kke," \u2014 "),gO=n(Kke,"A",{href:!0});var Obt=s(gO);fko=r(Obt,"MBartForCausalLM"),Obt.forEach(t),mko=r(Kke," (mBART model)"),Kke.forEach(t),gko=i(Q),i2=n(Q,"LI",{});var Zke=s(i2);Dge=n(Zke,"STRONG",{});var Vbt=s(Dge);hko=r(Vbt,"megatron-bert"),Vbt.forEach(t),pko=r(Zke," \u2014 "),hO=n(Zke,"A",{href:!0});var Xbt=s(hO);_ko=r(Xbt,"MegatronBertForCausalLM"),Xbt.forEach(t),uko=r(Zke," (Megatron-BERT model)"),Zke.forEach(t),bko=i(Q),d2=n(Q,"LI",{});var eSe=s(d2);Gge=n(eSe,"STRONG",{});var zbt=s(Gge);vko=r(zbt,"mvp"),zbt.forEach(t),Fko=r(eSe," \u2014 "),pO=n(eSe,"A",{href:!0});var Qbt=s(pO);Tko=r(Qbt,"MvpForCausalLM"),Qbt.forEach(t),Mko=r(eSe," (MVP model)"),eSe.forEach(t),Eko=i(Q),c2=n(Q,"LI",{});var oSe=s(c2);Oge=n(oSe,"STRONG",{});var Wbt=s(Oge);Cko=r(Wbt,"openai-gpt"),Wbt.forEach(t),wko=r(oSe," \u2014 "),_O=n(oSe,"A",{href:!0});var Hbt=s(_O);Ako=r(Hbt,"OpenAIGPTLMHeadModel"),Hbt.forEach(t),Lko=r(oSe," (OpenAI GPT model)"),oSe.forEach(t),yko=i(Q),f2=n(Q,"LI",{});var rSe=s(f2);Vge=n(rSe,"STRONG",{});var Ubt=s(Vge);xko=r(Ubt,"opt"),Ubt.forEach(t),$ko=r(rSe," \u2014 "),uO=n(rSe,"A",{href:!0});var Jbt=s(uO);kko=r(Jbt,"OPTForCausalLM"),Jbt.forEach(t),Sko=r(rSe," (OPT model)"),rSe.forEach(t),Rko=i(Q),m2=n(Q,"LI",{});var tSe=s(m2);Xge=n(tSe,"STRONG",{});var Ybt=s(Xge);Pko=r(Ybt,"pegasus"),Ybt.forEach(t),Bko=r(tSe," \u2014 "),bO=n(tSe,"A",{href:!0});var Kbt=s(bO);Nko=r(Kbt,"PegasusForCausalLM"),Kbt.forEach(t),Iko=r(tSe," (Pegasus model)"),tSe.forEach(t),qko=i(Q),g2=n(Q,"LI",{});var aSe=s(g2);zge=n(aSe,"STRONG",{});var Zbt=s(zge);jko=r(Zbt,"plbart"),Zbt.forEach(t),Dko=r(aSe," \u2014 "),vO=n(aSe,"A",{href:!0});var evt=s(vO);Gko=r(evt,"PLBartForCausalLM"),evt.forEach(t),Oko=r(aSe," (PLBart model)"),aSe.forEach(t),Vko=i(Q),h2=n(Q,"LI",{});var nSe=s(h2);Qge=n(nSe,"STRONG",{});var ovt=s(Qge);Xko=r(ovt,"prophetnet"),ovt.forEach(t),zko=r(nSe," \u2014 "),FO=n(nSe,"A",{href:!0});var rvt=s(FO);Qko=r(rvt,"ProphetNetForCausalLM"),rvt.forEach(t),Wko=r(nSe," (ProphetNet model)"),nSe.forEach(t),Hko=i(Q),p2=n(Q,"LI",{});var sSe=s(p2);Wge=n(sSe,"STRONG",{});var tvt=s(Wge);Uko=r(tvt,"qdqbert"),tvt.forEach(t),Jko=r(sSe," \u2014 "),TO=n(sSe,"A",{href:!0});var avt=s(TO);Yko=r(avt,"QDQBertLMHeadModel"),avt.forEach(t),Kko=r(sSe," (QDQBert model)"),sSe.forEach(t),Zko=i(Q),_2=n(Q,"LI",{});var lSe=s(_2);Hge=n(lSe,"STRONG",{});var nvt=s(Hge);eSo=r(nvt,"reformer"),nvt.forEach(t),oSo=r(lSe," \u2014 "),MO=n(lSe,"A",{href:!0});var svt=s(MO);rSo=r(svt,"ReformerModelWithLMHead"),svt.forEach(t),tSo=r(lSe," (Reformer model)"),lSe.forEach(t),aSo=i(Q),u2=n(Q,"LI",{});var iSe=s(u2);Uge=n(iSe,"STRONG",{});var lvt=s(Uge);nSo=r(lvt,"rembert"),lvt.forEach(t),sSo=r(iSe," \u2014 "),EO=n(iSe,"A",{href:!0});var ivt=s(EO);lSo=r(ivt,"RemBertForCausalLM"),ivt.forEach(t),iSo=r(iSe," (RemBERT model)"),iSe.forEach(t),dSo=i(Q),b2=n(Q,"LI",{});var dSe=s(b2);Jge=n(dSe,"STRONG",{});var dvt=s(Jge);cSo=r(dvt,"roberta"),dvt.forEach(t),fSo=r(dSe," \u2014 "),CO=n(dSe,"A",{href:!0});var cvt=s(CO);mSo=r(cvt,"RobertaForCausalLM"),cvt.forEach(t),gSo=r(dSe," (RoBERTa model)"),dSe.forEach(t),hSo=i(Q),v2=n(Q,"LI",{});var cSe=s(v2);Yge=n(cSe,"STRONG",{});var fvt=s(Yge);pSo=r(fvt,"roformer"),fvt.forEach(t),_So=r(cSe," \u2014 "),wO=n(cSe,"A",{href:!0});var mvt=s(wO);uSo=r(mvt,"RoFormerForCausalLM"),mvt.forEach(t),bSo=r(cSe," (RoFormer model)"),cSe.forEach(t),vSo=i(Q),F2=n(Q,"LI",{});var fSe=s(F2);Kge=n(fSe,"STRONG",{});var gvt=s(Kge);FSo=r(gvt,"speech_to_text_2"),gvt.forEach(t),TSo=r(fSe," \u2014 "),AO=n(fSe,"A",{href:!0});var hvt=s(AO);MSo=r(hvt,"Speech2Text2ForCausalLM"),hvt.forEach(t),ESo=r(fSe," (Speech2Text2 model)"),fSe.forEach(t),CSo=i(Q),T2=n(Q,"LI",{});var mSe=s(T2);Zge=n(mSe,"STRONG",{});var pvt=s(Zge);wSo=r(pvt,"transfo-xl"),pvt.forEach(t),ASo=r(mSe," \u2014 "),LO=n(mSe,"A",{href:!0});var _vt=s(LO);LSo=r(_vt,"TransfoXLLMHeadModel"),_vt.forEach(t),ySo=r(mSe," (Transformer-XL model)"),mSe.forEach(t),xSo=i(Q),M2=n(Q,"LI",{});var gSe=s(M2);ehe=n(gSe,"STRONG",{});var uvt=s(ehe);$So=r(uvt,"trocr"),uvt.forEach(t),kSo=r(gSe," \u2014 "),yO=n(gSe,"A",{href:!0});var bvt=s(yO);SSo=r(bvt,"TrOCRForCausalLM"),bvt.forEach(t),RSo=r(gSe," (TrOCR model)"),gSe.forEach(t),PSo=i(Q),E2=n(Q,"LI",{});var hSe=s(E2);ohe=n(hSe,"STRONG",{});var vvt=s(ohe);BSo=r(vvt,"xglm"),vvt.forEach(t),NSo=r(hSe," \u2014 "),xO=n(hSe,"A",{href:!0});var Fvt=s(xO);ISo=r(Fvt,"XGLMForCausalLM"),Fvt.forEach(t),qSo=r(hSe," (XGLM model)"),hSe.forEach(t),jSo=i(Q),C2=n(Q,"LI",{});var pSe=s(C2);rhe=n(pSe,"STRONG",{});var Tvt=s(rhe);DSo=r(Tvt,"xlm"),Tvt.forEach(t),GSo=r(pSe," \u2014 "),$O=n(pSe,"A",{href:!0});var Mvt=s($O);OSo=r(Mvt,"XLMWithLMHeadModel"),Mvt.forEach(t),VSo=r(pSe," (XLM model)"),pSe.forEach(t),XSo=i(Q),w2=n(Q,"LI",{});var _Se=s(w2);the=n(_Se,"STRONG",{});var Evt=s(the);zSo=r(Evt,"xlm-prophetnet"),Evt.forEach(t),QSo=r(_Se," \u2014 "),kO=n(_Se,"A",{href:!0});var Cvt=s(kO);WSo=r(Cvt,"XLMProphetNetForCausalLM"),Cvt.forEach(t),HSo=r(_Se," (XLM-ProphetNet model)"),_Se.forEach(t),USo=i(Q),A2=n(Q,"LI",{});var uSe=s(A2);ahe=n(uSe,"STRONG",{});var wvt=s(ahe);JSo=r(wvt,"xlm-roberta"),wvt.forEach(t),YSo=r(uSe," \u2014 "),SO=n(uSe,"A",{href:!0});var Avt=s(SO);KSo=r(Avt,"XLMRobertaForCausalLM"),Avt.forEach(t),ZSo=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),eRo=i(Q),L2=n(Q,"LI",{});var bSe=s(L2);nhe=n(bSe,"STRONG",{});var Lvt=s(nhe);oRo=r(Lvt,"xlm-roberta-xl"),Lvt.forEach(t),rRo=r(bSe," \u2014 "),RO=n(bSe,"A",{href:!0});var yvt=s(RO);tRo=r(yvt,"XLMRobertaXLForCausalLM"),yvt.forEach(t),aRo=r(bSe," (XLM-RoBERTa-XL model)"),bSe.forEach(t),nRo=i(Q),y2=n(Q,"LI",{});var vSe=s(y2);she=n(vSe,"STRONG",{});var xvt=s(she);sRo=r(xvt,"xlnet"),xvt.forEach(t),lRo=r(vSe," \u2014 "),PO=n(vSe,"A",{href:!0});var $vt=s(PO);iRo=r($vt,"XLNetLMHeadModel"),$vt.forEach(t),dRo=r(vSe," (XLNet model)"),vSe.forEach(t),Q.forEach(t),cRo=i(ia),x2=n(ia,"P",{});var FSe=s(x2);fRo=r(FSe,"The model is set in evaluation mode by default using "),lhe=n(FSe,"CODE",{});var kvt=s(lhe);mRo=r(kvt,"model.eval()"),kvt.forEach(t),gRo=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(FSe,"CODE",{});var Svt=s(ihe);hRo=r(Svt,"model.train()"),Svt.forEach(t),FSe.forEach(t),pRo=i(ia),T($2.$$.fragment,ia),ia.forEach(t),tl.forEach(t),fXe=i(f),Ui=n(f,"H2",{class:!0});var uQe=s(Ui);k2=n(uQe,"A",{id:!0,class:!0,href:!0});var Rvt=s(k2);dhe=n(Rvt,"SPAN",{});var Pvt=s(dhe);T(XL.$$.fragment,Pvt),Pvt.forEach(t),Rvt.forEach(t),_Ro=i(uQe),che=n(uQe,"SPAN",{});var Bvt=s(che);uRo=r(Bvt,"AutoModelForMaskedLM"),Bvt.forEach(t),uQe.forEach(t),mXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(zL.$$.fragment,al),bRo=i(al),Ji=n(al,"P",{});var Rre=s(Ji);vRo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BO=n(Rre,"A",{href:!0});var Nvt=s(BO);FRo=r(Nvt,"from_pretrained()"),Nvt.forEach(t),TRo=r(Rre," class method or the "),NO=n(Rre,"A",{href:!0});var Ivt=s(NO);MRo=r(Ivt,"from_config()"),Ivt.forEach(t),ERo=r(Rre,` class
method.`),Rre.forEach(t),CRo=i(al),QL=n(al,"P",{});var bQe=s(QL);wRo=r(bQe,"This class cannot be instantiated directly using "),fhe=n(bQe,"CODE",{});var qvt=s(fhe);ARo=r(qvt,"__init__()"),qvt.forEach(t),LRo=r(bQe," (throws an error)."),bQe.forEach(t),yRo=i(al),ct=n(al,"DIV",{class:!0});var g6=s(ct);T(WL.$$.fragment,g6),xRo=i(g6),mhe=n(g6,"P",{});var jvt=s(mhe);$Ro=r(jvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jvt.forEach(t),kRo=i(g6),Yi=n(g6,"P",{});var Pre=s(Yi);SRo=r(Pre,`Note:
Loading a model from its configuration file does `),ghe=n(Pre,"STRONG",{});var Dvt=s(ghe);RRo=r(Dvt,"not"),Dvt.forEach(t),PRo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(Pre,"A",{href:!0});var Gvt=s(IO);BRo=r(Gvt,"from_pretrained()"),Gvt.forEach(t),NRo=r(Pre," to load the model weights."),Pre.forEach(t),IRo=i(g6),T(S2.$$.fragment,g6),g6.forEach(t),qRo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(HL.$$.fragment,da),jRo=i(da),hhe=n(da,"P",{});var Ovt=s(hhe);DRo=r(Ovt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ovt.forEach(t),GRo=i(da),ja=n(da,"P",{});var h6=s(ja);ORo=r(h6,"The model class to instantiate is selected based on the "),phe=n(h6,"CODE",{});var Vvt=s(phe);VRo=r(Vvt,"model_type"),Vvt.forEach(t),XRo=r(h6,` property of the config object (either
passed as an argument or loaded from `),_he=n(h6,"CODE",{});var Xvt=s(_he);zRo=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),QRo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(h6,"CODE",{});var zvt=s(uhe);WRo=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),HRo=r(h6,":"),h6.forEach(t),URo=i(da),W=n(da,"UL",{});var H=s(W);R2=n(H,"LI",{});var TSe=s(R2);bhe=n(TSe,"STRONG",{});var Qvt=s(bhe);JRo=r(Qvt,"albert"),Qvt.forEach(t),YRo=r(TSe," \u2014 "),qO=n(TSe,"A",{href:!0});var Wvt=s(qO);KRo=r(Wvt,"AlbertForMaskedLM"),Wvt.forEach(t),ZRo=r(TSe," (ALBERT model)"),TSe.forEach(t),ePo=i(H),P2=n(H,"LI",{});var MSe=s(P2);vhe=n(MSe,"STRONG",{});var Hvt=s(vhe);oPo=r(Hvt,"bart"),Hvt.forEach(t),rPo=r(MSe," \u2014 "),jO=n(MSe,"A",{href:!0});var Uvt=s(jO);tPo=r(Uvt,"BartForConditionalGeneration"),Uvt.forEach(t),aPo=r(MSe," (BART model)"),MSe.forEach(t),nPo=i(H),B2=n(H,"LI",{});var ESe=s(B2);Fhe=n(ESe,"STRONG",{});var Jvt=s(Fhe);sPo=r(Jvt,"bert"),Jvt.forEach(t),lPo=r(ESe," \u2014 "),DO=n(ESe,"A",{href:!0});var Yvt=s(DO);iPo=r(Yvt,"BertForMaskedLM"),Yvt.forEach(t),dPo=r(ESe," (BERT model)"),ESe.forEach(t),cPo=i(H),N2=n(H,"LI",{});var CSe=s(N2);The=n(CSe,"STRONG",{});var Kvt=s(The);fPo=r(Kvt,"big_bird"),Kvt.forEach(t),mPo=r(CSe," \u2014 "),GO=n(CSe,"A",{href:!0});var Zvt=s(GO);gPo=r(Zvt,"BigBirdForMaskedLM"),Zvt.forEach(t),hPo=r(CSe," (BigBird model)"),CSe.forEach(t),pPo=i(H),I2=n(H,"LI",{});var wSe=s(I2);Mhe=n(wSe,"STRONG",{});var e3t=s(Mhe);_Po=r(e3t,"camembert"),e3t.forEach(t),uPo=r(wSe," \u2014 "),OO=n(wSe,"A",{href:!0});var o3t=s(OO);bPo=r(o3t,"CamembertForMaskedLM"),o3t.forEach(t),vPo=r(wSe," (CamemBERT model)"),wSe.forEach(t),FPo=i(H),q2=n(H,"LI",{});var ASe=s(q2);Ehe=n(ASe,"STRONG",{});var r3t=s(Ehe);TPo=r(r3t,"convbert"),r3t.forEach(t),MPo=r(ASe," \u2014 "),VO=n(ASe,"A",{href:!0});var t3t=s(VO);EPo=r(t3t,"ConvBertForMaskedLM"),t3t.forEach(t),CPo=r(ASe," (ConvBERT model)"),ASe.forEach(t),wPo=i(H),j2=n(H,"LI",{});var LSe=s(j2);Che=n(LSe,"STRONG",{});var a3t=s(Che);APo=r(a3t,"data2vec-text"),a3t.forEach(t),LPo=r(LSe," \u2014 "),XO=n(LSe,"A",{href:!0});var n3t=s(XO);yPo=r(n3t,"Data2VecTextForMaskedLM"),n3t.forEach(t),xPo=r(LSe," (Data2VecText model)"),LSe.forEach(t),$Po=i(H),D2=n(H,"LI",{});var ySe=s(D2);whe=n(ySe,"STRONG",{});var s3t=s(whe);kPo=r(s3t,"deberta"),s3t.forEach(t),SPo=r(ySe," \u2014 "),zO=n(ySe,"A",{href:!0});var l3t=s(zO);RPo=r(l3t,"DebertaForMaskedLM"),l3t.forEach(t),PPo=r(ySe," (DeBERTa model)"),ySe.forEach(t),BPo=i(H),G2=n(H,"LI",{});var xSe=s(G2);Ahe=n(xSe,"STRONG",{});var i3t=s(Ahe);NPo=r(i3t,"deberta-v2"),i3t.forEach(t),IPo=r(xSe," \u2014 "),QO=n(xSe,"A",{href:!0});var d3t=s(QO);qPo=r(d3t,"DebertaV2ForMaskedLM"),d3t.forEach(t),jPo=r(xSe," (DeBERTa-v2 model)"),xSe.forEach(t),DPo=i(H),O2=n(H,"LI",{});var $Se=s(O2);Lhe=n($Se,"STRONG",{});var c3t=s(Lhe);GPo=r(c3t,"distilbert"),c3t.forEach(t),OPo=r($Se," \u2014 "),WO=n($Se,"A",{href:!0});var f3t=s(WO);VPo=r(f3t,"DistilBertForMaskedLM"),f3t.forEach(t),XPo=r($Se," (DistilBERT model)"),$Se.forEach(t),zPo=i(H),V2=n(H,"LI",{});var kSe=s(V2);yhe=n(kSe,"STRONG",{});var m3t=s(yhe);QPo=r(m3t,"electra"),m3t.forEach(t),WPo=r(kSe," \u2014 "),HO=n(kSe,"A",{href:!0});var g3t=s(HO);HPo=r(g3t,"ElectraForMaskedLM"),g3t.forEach(t),UPo=r(kSe," (ELECTRA model)"),kSe.forEach(t),JPo=i(H),X2=n(H,"LI",{});var SSe=s(X2);xhe=n(SSe,"STRONG",{});var h3t=s(xhe);YPo=r(h3t,"flaubert"),h3t.forEach(t),KPo=r(SSe," \u2014 "),UO=n(SSe,"A",{href:!0});var p3t=s(UO);ZPo=r(p3t,"FlaubertWithLMHeadModel"),p3t.forEach(t),eBo=r(SSe," (FlauBERT model)"),SSe.forEach(t),oBo=i(H),z2=n(H,"LI",{});var RSe=s(z2);$he=n(RSe,"STRONG",{});var _3t=s($he);rBo=r(_3t,"fnet"),_3t.forEach(t),tBo=r(RSe," \u2014 "),JO=n(RSe,"A",{href:!0});var u3t=s(JO);aBo=r(u3t,"FNetForMaskedLM"),u3t.forEach(t),nBo=r(RSe," (FNet model)"),RSe.forEach(t),sBo=i(H),Q2=n(H,"LI",{});var PSe=s(Q2);khe=n(PSe,"STRONG",{});var b3t=s(khe);lBo=r(b3t,"funnel"),b3t.forEach(t),iBo=r(PSe," \u2014 "),YO=n(PSe,"A",{href:!0});var v3t=s(YO);dBo=r(v3t,"FunnelForMaskedLM"),v3t.forEach(t),cBo=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),fBo=i(H),W2=n(H,"LI",{});var BSe=s(W2);She=n(BSe,"STRONG",{});var F3t=s(She);mBo=r(F3t,"ibert"),F3t.forEach(t),gBo=r(BSe," \u2014 "),KO=n(BSe,"A",{href:!0});var T3t=s(KO);hBo=r(T3t,"IBertForMaskedLM"),T3t.forEach(t),pBo=r(BSe," (I-BERT model)"),BSe.forEach(t),_Bo=i(H),H2=n(H,"LI",{});var NSe=s(H2);Rhe=n(NSe,"STRONG",{});var M3t=s(Rhe);uBo=r(M3t,"layoutlm"),M3t.forEach(t),bBo=r(NSe," \u2014 "),ZO=n(NSe,"A",{href:!0});var E3t=s(ZO);vBo=r(E3t,"LayoutLMForMaskedLM"),E3t.forEach(t),FBo=r(NSe," (LayoutLM model)"),NSe.forEach(t),TBo=i(H),U2=n(H,"LI",{});var ISe=s(U2);Phe=n(ISe,"STRONG",{});var C3t=s(Phe);MBo=r(C3t,"longformer"),C3t.forEach(t),EBo=r(ISe," \u2014 "),eV=n(ISe,"A",{href:!0});var w3t=s(eV);CBo=r(w3t,"LongformerForMaskedLM"),w3t.forEach(t),wBo=r(ISe," (Longformer model)"),ISe.forEach(t),ABo=i(H),J2=n(H,"LI",{});var qSe=s(J2);Bhe=n(qSe,"STRONG",{});var A3t=s(Bhe);LBo=r(A3t,"luke"),A3t.forEach(t),yBo=r(qSe," \u2014 "),oV=n(qSe,"A",{href:!0});var L3t=s(oV);xBo=r(L3t,"LukeForMaskedLM"),L3t.forEach(t),$Bo=r(qSe," (LUKE model)"),qSe.forEach(t),kBo=i(H),Y2=n(H,"LI",{});var jSe=s(Y2);Nhe=n(jSe,"STRONG",{});var y3t=s(Nhe);SBo=r(y3t,"mbart"),y3t.forEach(t),RBo=r(jSe," \u2014 "),rV=n(jSe,"A",{href:!0});var x3t=s(rV);PBo=r(x3t,"MBartForConditionalGeneration"),x3t.forEach(t),BBo=r(jSe," (mBART model)"),jSe.forEach(t),NBo=i(H),K2=n(H,"LI",{});var DSe=s(K2);Ihe=n(DSe,"STRONG",{});var $3t=s(Ihe);IBo=r($3t,"megatron-bert"),$3t.forEach(t),qBo=r(DSe," \u2014 "),tV=n(DSe,"A",{href:!0});var k3t=s(tV);jBo=r(k3t,"MegatronBertForMaskedLM"),k3t.forEach(t),DBo=r(DSe," (Megatron-BERT model)"),DSe.forEach(t),GBo=i(H),Z2=n(H,"LI",{});var GSe=s(Z2);qhe=n(GSe,"STRONG",{});var S3t=s(qhe);OBo=r(S3t,"mobilebert"),S3t.forEach(t),VBo=r(GSe," \u2014 "),aV=n(GSe,"A",{href:!0});var R3t=s(aV);XBo=r(R3t,"MobileBertForMaskedLM"),R3t.forEach(t),zBo=r(GSe," (MobileBERT model)"),GSe.forEach(t),QBo=i(H),eb=n(H,"LI",{});var OSe=s(eb);jhe=n(OSe,"STRONG",{});var P3t=s(jhe);WBo=r(P3t,"mpnet"),P3t.forEach(t),HBo=r(OSe," \u2014 "),nV=n(OSe,"A",{href:!0});var B3t=s(nV);UBo=r(B3t,"MPNetForMaskedLM"),B3t.forEach(t),JBo=r(OSe," (MPNet model)"),OSe.forEach(t),YBo=i(H),ob=n(H,"LI",{});var VSe=s(ob);Dhe=n(VSe,"STRONG",{});var N3t=s(Dhe);KBo=r(N3t,"mvp"),N3t.forEach(t),ZBo=r(VSe," \u2014 "),sV=n(VSe,"A",{href:!0});var I3t=s(sV);eNo=r(I3t,"MvpForConditionalGeneration"),I3t.forEach(t),oNo=r(VSe," (MVP model)"),VSe.forEach(t),rNo=i(H),rb=n(H,"LI",{});var XSe=s(rb);Ghe=n(XSe,"STRONG",{});var q3t=s(Ghe);tNo=r(q3t,"nezha"),q3t.forEach(t),aNo=r(XSe," \u2014 "),lV=n(XSe,"A",{href:!0});var j3t=s(lV);nNo=r(j3t,"NezhaForMaskedLM"),j3t.forEach(t),sNo=r(XSe," (Nezha model)"),XSe.forEach(t),lNo=i(H),tb=n(H,"LI",{});var zSe=s(tb);Ohe=n(zSe,"STRONG",{});var D3t=s(Ohe);iNo=r(D3t,"nystromformer"),D3t.forEach(t),dNo=r(zSe," \u2014 "),iV=n(zSe,"A",{href:!0});var G3t=s(iV);cNo=r(G3t,"NystromformerForMaskedLM"),G3t.forEach(t),fNo=r(zSe," (Nystr\xF6mformer model)"),zSe.forEach(t),mNo=i(H),ab=n(H,"LI",{});var QSe=s(ab);Vhe=n(QSe,"STRONG",{});var O3t=s(Vhe);gNo=r(O3t,"perceiver"),O3t.forEach(t),hNo=r(QSe," \u2014 "),dV=n(QSe,"A",{href:!0});var V3t=s(dV);pNo=r(V3t,"PerceiverForMaskedLM"),V3t.forEach(t),_No=r(QSe," (Perceiver model)"),QSe.forEach(t),uNo=i(H),nb=n(H,"LI",{});var WSe=s(nb);Xhe=n(WSe,"STRONG",{});var X3t=s(Xhe);bNo=r(X3t,"qdqbert"),X3t.forEach(t),vNo=r(WSe," \u2014 "),cV=n(WSe,"A",{href:!0});var z3t=s(cV);FNo=r(z3t,"QDQBertForMaskedLM"),z3t.forEach(t),TNo=r(WSe," (QDQBert model)"),WSe.forEach(t),MNo=i(H),sb=n(H,"LI",{});var HSe=s(sb);zhe=n(HSe,"STRONG",{});var Q3t=s(zhe);ENo=r(Q3t,"reformer"),Q3t.forEach(t),CNo=r(HSe," \u2014 "),fV=n(HSe,"A",{href:!0});var W3t=s(fV);wNo=r(W3t,"ReformerForMaskedLM"),W3t.forEach(t),ANo=r(HSe," (Reformer model)"),HSe.forEach(t),LNo=i(H),lb=n(H,"LI",{});var USe=s(lb);Qhe=n(USe,"STRONG",{});var H3t=s(Qhe);yNo=r(H3t,"rembert"),H3t.forEach(t),xNo=r(USe," \u2014 "),mV=n(USe,"A",{href:!0});var U3t=s(mV);$No=r(U3t,"RemBertForMaskedLM"),U3t.forEach(t),kNo=r(USe," (RemBERT model)"),USe.forEach(t),SNo=i(H),ib=n(H,"LI",{});var JSe=s(ib);Whe=n(JSe,"STRONG",{});var J3t=s(Whe);RNo=r(J3t,"roberta"),J3t.forEach(t),PNo=r(JSe," \u2014 "),gV=n(JSe,"A",{href:!0});var Y3t=s(gV);BNo=r(Y3t,"RobertaForMaskedLM"),Y3t.forEach(t),NNo=r(JSe," (RoBERTa model)"),JSe.forEach(t),INo=i(H),db=n(H,"LI",{});var YSe=s(db);Hhe=n(YSe,"STRONG",{});var K3t=s(Hhe);qNo=r(K3t,"roformer"),K3t.forEach(t),jNo=r(YSe," \u2014 "),hV=n(YSe,"A",{href:!0});var Z3t=s(hV);DNo=r(Z3t,"RoFormerForMaskedLM"),Z3t.forEach(t),GNo=r(YSe," (RoFormer model)"),YSe.forEach(t),ONo=i(H),cb=n(H,"LI",{});var KSe=s(cb);Uhe=n(KSe,"STRONG",{});var eFt=s(Uhe);VNo=r(eFt,"squeezebert"),eFt.forEach(t),XNo=r(KSe," \u2014 "),pV=n(KSe,"A",{href:!0});var oFt=s(pV);zNo=r(oFt,"SqueezeBertForMaskedLM"),oFt.forEach(t),QNo=r(KSe," (SqueezeBERT model)"),KSe.forEach(t),WNo=i(H),fb=n(H,"LI",{});var ZSe=s(fb);Jhe=n(ZSe,"STRONG",{});var rFt=s(Jhe);HNo=r(rFt,"tapas"),rFt.forEach(t),UNo=r(ZSe," \u2014 "),_V=n(ZSe,"A",{href:!0});var tFt=s(_V);JNo=r(tFt,"TapasForMaskedLM"),tFt.forEach(t),YNo=r(ZSe," (TAPAS model)"),ZSe.forEach(t),KNo=i(H),mb=n(H,"LI",{});var eRe=s(mb);Yhe=n(eRe,"STRONG",{});var aFt=s(Yhe);ZNo=r(aFt,"wav2vec2"),aFt.forEach(t),eIo=r(eRe," \u2014 "),Khe=n(eRe,"CODE",{});var nFt=s(Khe);oIo=r(nFt,"Wav2Vec2ForMaskedLM"),nFt.forEach(t),rIo=r(eRe," (Wav2Vec2 model)"),eRe.forEach(t),tIo=i(H),gb=n(H,"LI",{});var oRe=s(gb);Zhe=n(oRe,"STRONG",{});var sFt=s(Zhe);aIo=r(sFt,"xlm"),sFt.forEach(t),nIo=r(oRe," \u2014 "),uV=n(oRe,"A",{href:!0});var lFt=s(uV);sIo=r(lFt,"XLMWithLMHeadModel"),lFt.forEach(t),lIo=r(oRe," (XLM model)"),oRe.forEach(t),iIo=i(H),hb=n(H,"LI",{});var rRe=s(hb);epe=n(rRe,"STRONG",{});var iFt=s(epe);dIo=r(iFt,"xlm-roberta"),iFt.forEach(t),cIo=r(rRe," \u2014 "),bV=n(rRe,"A",{href:!0});var dFt=s(bV);fIo=r(dFt,"XLMRobertaForMaskedLM"),dFt.forEach(t),mIo=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),gIo=i(H),pb=n(H,"LI",{});var tRe=s(pb);ope=n(tRe,"STRONG",{});var cFt=s(ope);hIo=r(cFt,"xlm-roberta-xl"),cFt.forEach(t),pIo=r(tRe," \u2014 "),vV=n(tRe,"A",{href:!0});var fFt=s(vV);_Io=r(fFt,"XLMRobertaXLForMaskedLM"),fFt.forEach(t),uIo=r(tRe," (XLM-RoBERTa-XL model)"),tRe.forEach(t),bIo=i(H),_b=n(H,"LI",{});var aRe=s(_b);rpe=n(aRe,"STRONG",{});var mFt=s(rpe);vIo=r(mFt,"yoso"),mFt.forEach(t),FIo=r(aRe," \u2014 "),FV=n(aRe,"A",{href:!0});var gFt=s(FV);TIo=r(gFt,"YosoForMaskedLM"),gFt.forEach(t),MIo=r(aRe," (YOSO model)"),aRe.forEach(t),H.forEach(t),EIo=i(da),ub=n(da,"P",{});var nRe=s(ub);CIo=r(nRe,"The model is set in evaluation mode by default using "),tpe=n(nRe,"CODE",{});var hFt=s(tpe);wIo=r(hFt,"model.eval()"),hFt.forEach(t),AIo=r(nRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=n(nRe,"CODE",{});var pFt=s(ape);LIo=r(pFt,"model.train()"),pFt.forEach(t),nRe.forEach(t),yIo=i(da),T(bb.$$.fragment,da),da.forEach(t),al.forEach(t),gXe=i(f),Ki=n(f,"H2",{class:!0});var vQe=s(Ki);vb=n(vQe,"A",{id:!0,class:!0,href:!0});var _Ft=s(vb);npe=n(_Ft,"SPAN",{});var uFt=s(npe);T(UL.$$.fragment,uFt),uFt.forEach(t),_Ft.forEach(t),xIo=i(vQe),spe=n(vQe,"SPAN",{});var bFt=s(spe);$Io=r(bFt,"AutoModelForSeq2SeqLM"),bFt.forEach(t),vQe.forEach(t),hXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(JL.$$.fragment,nl),kIo=i(nl),Zi=n(nl,"P",{});var Bre=s(Zi);SIo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TV=n(Bre,"A",{href:!0});var vFt=s(TV);RIo=r(vFt,"from_pretrained()"),vFt.forEach(t),PIo=r(Bre," class method or the "),MV=n(Bre,"A",{href:!0});var FFt=s(MV);BIo=r(FFt,"from_config()"),FFt.forEach(t),NIo=r(Bre,` class
method.`),Bre.forEach(t),IIo=i(nl),YL=n(nl,"P",{});var FQe=s(YL);qIo=r(FQe,"This class cannot be instantiated directly using "),lpe=n(FQe,"CODE",{});var TFt=s(lpe);jIo=r(TFt,"__init__()"),TFt.forEach(t),DIo=r(FQe," (throws an error)."),FQe.forEach(t),GIo=i(nl),ft=n(nl,"DIV",{class:!0});var p6=s(ft);T(KL.$$.fragment,p6),OIo=i(p6),ipe=n(p6,"P",{});var MFt=s(ipe);VIo=r(MFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MFt.forEach(t),XIo=i(p6),ed=n(p6,"P",{});var Nre=s(ed);zIo=r(Nre,`Note:
Loading a model from its configuration file does `),dpe=n(Nre,"STRONG",{});var EFt=s(dpe);QIo=r(EFt,"not"),EFt.forEach(t),WIo=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(Nre,"A",{href:!0});var CFt=s(EV);HIo=r(CFt,"from_pretrained()"),CFt.forEach(t),UIo=r(Nre," to load the model weights."),Nre.forEach(t),JIo=i(p6),T(Fb.$$.fragment,p6),p6.forEach(t),YIo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(ZL.$$.fragment,ca),KIo=i(ca),cpe=n(ca,"P",{});var wFt=s(cpe);ZIo=r(wFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wFt.forEach(t),eqo=i(ca),Da=n(ca,"P",{});var _6=s(Da);oqo=r(_6,"The model class to instantiate is selected based on the "),fpe=n(_6,"CODE",{});var AFt=s(fpe);rqo=r(AFt,"model_type"),AFt.forEach(t),tqo=r(_6,` property of the config object (either
passed as an argument or loaded from `),mpe=n(_6,"CODE",{});var LFt=s(mpe);aqo=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),nqo=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=n(_6,"CODE",{});var yFt=s(gpe);sqo=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),lqo=r(_6,":"),_6.forEach(t),iqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);Tb=n(be,"LI",{});var sRe=s(Tb);hpe=n(sRe,"STRONG",{});var xFt=s(hpe);dqo=r(xFt,"bart"),xFt.forEach(t),cqo=r(sRe," \u2014 "),CV=n(sRe,"A",{href:!0});var $Ft=s(CV);fqo=r($Ft,"BartForConditionalGeneration"),$Ft.forEach(t),mqo=r(sRe," (BART model)"),sRe.forEach(t),gqo=i(be),Mb=n(be,"LI",{});var lRe=s(Mb);ppe=n(lRe,"STRONG",{});var kFt=s(ppe);hqo=r(kFt,"bigbird_pegasus"),kFt.forEach(t),pqo=r(lRe," \u2014 "),wV=n(lRe,"A",{href:!0});var SFt=s(wV);_qo=r(SFt,"BigBirdPegasusForConditionalGeneration"),SFt.forEach(t),uqo=r(lRe," (BigBird-Pegasus model)"),lRe.forEach(t),bqo=i(be),Eb=n(be,"LI",{});var iRe=s(Eb);_pe=n(iRe,"STRONG",{});var RFt=s(_pe);vqo=r(RFt,"blenderbot"),RFt.forEach(t),Fqo=r(iRe," \u2014 "),AV=n(iRe,"A",{href:!0});var PFt=s(AV);Tqo=r(PFt,"BlenderbotForConditionalGeneration"),PFt.forEach(t),Mqo=r(iRe," (Blenderbot model)"),iRe.forEach(t),Eqo=i(be),Cb=n(be,"LI",{});var dRe=s(Cb);upe=n(dRe,"STRONG",{});var BFt=s(upe);Cqo=r(BFt,"blenderbot-small"),BFt.forEach(t),wqo=r(dRe," \u2014 "),LV=n(dRe,"A",{href:!0});var NFt=s(LV);Aqo=r(NFt,"BlenderbotSmallForConditionalGeneration"),NFt.forEach(t),Lqo=r(dRe," (BlenderbotSmall model)"),dRe.forEach(t),yqo=i(be),wb=n(be,"LI",{});var cRe=s(wb);bpe=n(cRe,"STRONG",{});var IFt=s(bpe);xqo=r(IFt,"encoder-decoder"),IFt.forEach(t),$qo=r(cRe," \u2014 "),yV=n(cRe,"A",{href:!0});var qFt=s(yV);kqo=r(qFt,"EncoderDecoderModel"),qFt.forEach(t),Sqo=r(cRe," (Encoder decoder model)"),cRe.forEach(t),Rqo=i(be),Ab=n(be,"LI",{});var fRe=s(Ab);vpe=n(fRe,"STRONG",{});var jFt=s(vpe);Pqo=r(jFt,"fsmt"),jFt.forEach(t),Bqo=r(fRe," \u2014 "),xV=n(fRe,"A",{href:!0});var DFt=s(xV);Nqo=r(DFt,"FSMTForConditionalGeneration"),DFt.forEach(t),Iqo=r(fRe," (FairSeq Machine-Translation model)"),fRe.forEach(t),qqo=i(be),Lb=n(be,"LI",{});var mRe=s(Lb);Fpe=n(mRe,"STRONG",{});var GFt=s(Fpe);jqo=r(GFt,"led"),GFt.forEach(t),Dqo=r(mRe," \u2014 "),$V=n(mRe,"A",{href:!0});var OFt=s($V);Gqo=r(OFt,"LEDForConditionalGeneration"),OFt.forEach(t),Oqo=r(mRe," (LED model)"),mRe.forEach(t),Vqo=i(be),yb=n(be,"LI",{});var gRe=s(yb);Tpe=n(gRe,"STRONG",{});var VFt=s(Tpe);Xqo=r(VFt,"longt5"),VFt.forEach(t),zqo=r(gRe," \u2014 "),kV=n(gRe,"A",{href:!0});var XFt=s(kV);Qqo=r(XFt,"LongT5ForConditionalGeneration"),XFt.forEach(t),Wqo=r(gRe," (LongT5 model)"),gRe.forEach(t),Hqo=i(be),xb=n(be,"LI",{});var hRe=s(xb);Mpe=n(hRe,"STRONG",{});var zFt=s(Mpe);Uqo=r(zFt,"m2m_100"),zFt.forEach(t),Jqo=r(hRe," \u2014 "),SV=n(hRe,"A",{href:!0});var QFt=s(SV);Yqo=r(QFt,"M2M100ForConditionalGeneration"),QFt.forEach(t),Kqo=r(hRe," (M2M100 model)"),hRe.forEach(t),Zqo=i(be),$b=n(be,"LI",{});var pRe=s($b);Epe=n(pRe,"STRONG",{});var WFt=s(Epe);ejo=r(WFt,"marian"),WFt.forEach(t),ojo=r(pRe," \u2014 "),RV=n(pRe,"A",{href:!0});var HFt=s(RV);rjo=r(HFt,"MarianMTModel"),HFt.forEach(t),tjo=r(pRe," (Marian model)"),pRe.forEach(t),ajo=i(be),kb=n(be,"LI",{});var _Re=s(kb);Cpe=n(_Re,"STRONG",{});var UFt=s(Cpe);njo=r(UFt,"mbart"),UFt.forEach(t),sjo=r(_Re," \u2014 "),PV=n(_Re,"A",{href:!0});var JFt=s(PV);ljo=r(JFt,"MBartForConditionalGeneration"),JFt.forEach(t),ijo=r(_Re," (mBART model)"),_Re.forEach(t),djo=i(be),Sb=n(be,"LI",{});var uRe=s(Sb);wpe=n(uRe,"STRONG",{});var YFt=s(wpe);cjo=r(YFt,"mt5"),YFt.forEach(t),fjo=r(uRe," \u2014 "),BV=n(uRe,"A",{href:!0});var KFt=s(BV);mjo=r(KFt,"MT5ForConditionalGeneration"),KFt.forEach(t),gjo=r(uRe," (MT5 model)"),uRe.forEach(t),hjo=i(be),Rb=n(be,"LI",{});var bRe=s(Rb);Ape=n(bRe,"STRONG",{});var ZFt=s(Ape);pjo=r(ZFt,"mvp"),ZFt.forEach(t),_jo=r(bRe," \u2014 "),NV=n(bRe,"A",{href:!0});var eTt=s(NV);ujo=r(eTt,"MvpForConditionalGeneration"),eTt.forEach(t),bjo=r(bRe," (MVP model)"),bRe.forEach(t),vjo=i(be),Pb=n(be,"LI",{});var vRe=s(Pb);Lpe=n(vRe,"STRONG",{});var oTt=s(Lpe);Fjo=r(oTt,"pegasus"),oTt.forEach(t),Tjo=r(vRe," \u2014 "),IV=n(vRe,"A",{href:!0});var rTt=s(IV);Mjo=r(rTt,"PegasusForConditionalGeneration"),rTt.forEach(t),Ejo=r(vRe," (Pegasus model)"),vRe.forEach(t),Cjo=i(be),Bb=n(be,"LI",{});var FRe=s(Bb);ype=n(FRe,"STRONG",{});var tTt=s(ype);wjo=r(tTt,"plbart"),tTt.forEach(t),Ajo=r(FRe," \u2014 "),qV=n(FRe,"A",{href:!0});var aTt=s(qV);Ljo=r(aTt,"PLBartForConditionalGeneration"),aTt.forEach(t),yjo=r(FRe," (PLBart model)"),FRe.forEach(t),xjo=i(be),Nb=n(be,"LI",{});var TRe=s(Nb);xpe=n(TRe,"STRONG",{});var nTt=s(xpe);$jo=r(nTt,"prophetnet"),nTt.forEach(t),kjo=r(TRe," \u2014 "),jV=n(TRe,"A",{href:!0});var sTt=s(jV);Sjo=r(sTt,"ProphetNetForConditionalGeneration"),sTt.forEach(t),Rjo=r(TRe," (ProphetNet model)"),TRe.forEach(t),Pjo=i(be),Ib=n(be,"LI",{});var MRe=s(Ib);$pe=n(MRe,"STRONG",{});var lTt=s($pe);Bjo=r(lTt,"t5"),lTt.forEach(t),Njo=r(MRe," \u2014 "),DV=n(MRe,"A",{href:!0});var iTt=s(DV);Ijo=r(iTt,"T5ForConditionalGeneration"),iTt.forEach(t),qjo=r(MRe," (T5 model)"),MRe.forEach(t),jjo=i(be),qb=n(be,"LI",{});var ERe=s(qb);kpe=n(ERe,"STRONG",{});var dTt=s(kpe);Djo=r(dTt,"xlm-prophetnet"),dTt.forEach(t),Gjo=r(ERe," \u2014 "),GV=n(ERe,"A",{href:!0});var cTt=s(GV);Ojo=r(cTt,"XLMProphetNetForConditionalGeneration"),cTt.forEach(t),Vjo=r(ERe," (XLM-ProphetNet model)"),ERe.forEach(t),be.forEach(t),Xjo=i(ca),jb=n(ca,"P",{});var CRe=s(jb);zjo=r(CRe,"The model is set in evaluation mode by default using "),Spe=n(CRe,"CODE",{});var fTt=s(Spe);Qjo=r(fTt,"model.eval()"),fTt.forEach(t),Wjo=r(CRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(CRe,"CODE",{});var mTt=s(Rpe);Hjo=r(mTt,"model.train()"),mTt.forEach(t),CRe.forEach(t),Ujo=i(ca),T(Db.$$.fragment,ca),ca.forEach(t),nl.forEach(t),pXe=i(f),od=n(f,"H2",{class:!0});var TQe=s(od);Gb=n(TQe,"A",{id:!0,class:!0,href:!0});var gTt=s(Gb);Ppe=n(gTt,"SPAN",{});var hTt=s(Ppe);T(ey.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),Jjo=i(TQe),Bpe=n(TQe,"SPAN",{});var pTt=s(Bpe);Yjo=r(pTt,"AutoModelForSequenceClassification"),pTt.forEach(t),TQe.forEach(t),_Xe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(oy.$$.fragment,sl),Kjo=i(sl),rd=n(sl,"P",{});var Ire=s(rd);Zjo=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OV=n(Ire,"A",{href:!0});var _Tt=s(OV);eDo=r(_Tt,"from_pretrained()"),_Tt.forEach(t),oDo=r(Ire," class method or the "),VV=n(Ire,"A",{href:!0});var uTt=s(VV);rDo=r(uTt,"from_config()"),uTt.forEach(t),tDo=r(Ire,` class
method.`),Ire.forEach(t),aDo=i(sl),ry=n(sl,"P",{});var MQe=s(ry);nDo=r(MQe,"This class cannot be instantiated directly using "),Npe=n(MQe,"CODE",{});var bTt=s(Npe);sDo=r(bTt,"__init__()"),bTt.forEach(t),lDo=r(MQe," (throws an error)."),MQe.forEach(t),iDo=i(sl),mt=n(sl,"DIV",{class:!0});var u6=s(mt);T(ty.$$.fragment,u6),dDo=i(u6),Ipe=n(u6,"P",{});var vTt=s(Ipe);cDo=r(vTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vTt.forEach(t),fDo=i(u6),td=n(u6,"P",{});var qre=s(td);mDo=r(qre,`Note:
Loading a model from its configuration file does `),qpe=n(qre,"STRONG",{});var FTt=s(qpe);gDo=r(FTt,"not"),FTt.forEach(t),hDo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(qre,"A",{href:!0});var TTt=s(XV);pDo=r(TTt,"from_pretrained()"),TTt.forEach(t),_Do=r(qre," to load the model weights."),qre.forEach(t),uDo=i(u6),T(Ob.$$.fragment,u6),u6.forEach(t),bDo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(ay.$$.fragment,fa),vDo=i(fa),jpe=n(fa,"P",{});var MTt=s(jpe);FDo=r(MTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MTt.forEach(t),TDo=i(fa),Ga=n(fa,"P",{});var b6=s(Ga);MDo=r(b6,"The model class to instantiate is selected based on the "),Dpe=n(b6,"CODE",{});var ETt=s(Dpe);EDo=r(ETt,"model_type"),ETt.forEach(t),CDo=r(b6,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(b6,"CODE",{});var CTt=s(Gpe);wDo=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),ADo=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(b6,"CODE",{});var wTt=s(Ope);LDo=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),yDo=r(b6,":"),b6.forEach(t),xDo=i(fa),B=n(fa,"UL",{});var q=s(B);Vb=n(q,"LI",{});var wRe=s(Vb);Vpe=n(wRe,"STRONG",{});var ATt=s(Vpe);$Do=r(ATt,"albert"),ATt.forEach(t),kDo=r(wRe," \u2014 "),zV=n(wRe,"A",{href:!0});var LTt=s(zV);SDo=r(LTt,"AlbertForSequenceClassification"),LTt.forEach(t),RDo=r(wRe," (ALBERT model)"),wRe.forEach(t),PDo=i(q),Xb=n(q,"LI",{});var ARe=s(Xb);Xpe=n(ARe,"STRONG",{});var yTt=s(Xpe);BDo=r(yTt,"bart"),yTt.forEach(t),NDo=r(ARe," \u2014 "),QV=n(ARe,"A",{href:!0});var xTt=s(QV);IDo=r(xTt,"BartForSequenceClassification"),xTt.forEach(t),qDo=r(ARe," (BART model)"),ARe.forEach(t),jDo=i(q),zb=n(q,"LI",{});var LRe=s(zb);zpe=n(LRe,"STRONG",{});var $Tt=s(zpe);DDo=r($Tt,"bert"),$Tt.forEach(t),GDo=r(LRe," \u2014 "),WV=n(LRe,"A",{href:!0});var kTt=s(WV);ODo=r(kTt,"BertForSequenceClassification"),kTt.forEach(t),VDo=r(LRe," (BERT model)"),LRe.forEach(t),XDo=i(q),Qb=n(q,"LI",{});var yRe=s(Qb);Qpe=n(yRe,"STRONG",{});var STt=s(Qpe);zDo=r(STt,"big_bird"),STt.forEach(t),QDo=r(yRe," \u2014 "),HV=n(yRe,"A",{href:!0});var RTt=s(HV);WDo=r(RTt,"BigBirdForSequenceClassification"),RTt.forEach(t),HDo=r(yRe," (BigBird model)"),yRe.forEach(t),UDo=i(q),Wb=n(q,"LI",{});var xRe=s(Wb);Wpe=n(xRe,"STRONG",{});var PTt=s(Wpe);JDo=r(PTt,"bigbird_pegasus"),PTt.forEach(t),YDo=r(xRe," \u2014 "),UV=n(xRe,"A",{href:!0});var BTt=s(UV);KDo=r(BTt,"BigBirdPegasusForSequenceClassification"),BTt.forEach(t),ZDo=r(xRe," (BigBird-Pegasus model)"),xRe.forEach(t),eGo=i(q),Hb=n(q,"LI",{});var $Re=s(Hb);Hpe=n($Re,"STRONG",{});var NTt=s(Hpe);oGo=r(NTt,"bloom"),NTt.forEach(t),rGo=r($Re," \u2014 "),JV=n($Re,"A",{href:!0});var ITt=s(JV);tGo=r(ITt,"BloomForSequenceClassification"),ITt.forEach(t),aGo=r($Re," (BLOOM model)"),$Re.forEach(t),nGo=i(q),Ub=n(q,"LI",{});var kRe=s(Ub);Upe=n(kRe,"STRONG",{});var qTt=s(Upe);sGo=r(qTt,"camembert"),qTt.forEach(t),lGo=r(kRe," \u2014 "),YV=n(kRe,"A",{href:!0});var jTt=s(YV);iGo=r(jTt,"CamembertForSequenceClassification"),jTt.forEach(t),dGo=r(kRe," (CamemBERT model)"),kRe.forEach(t),cGo=i(q),Jb=n(q,"LI",{});var SRe=s(Jb);Jpe=n(SRe,"STRONG",{});var DTt=s(Jpe);fGo=r(DTt,"canine"),DTt.forEach(t),mGo=r(SRe," \u2014 "),KV=n(SRe,"A",{href:!0});var GTt=s(KV);gGo=r(GTt,"CanineForSequenceClassification"),GTt.forEach(t),hGo=r(SRe," (CANINE model)"),SRe.forEach(t),pGo=i(q),Yb=n(q,"LI",{});var RRe=s(Yb);Ype=n(RRe,"STRONG",{});var OTt=s(Ype);_Go=r(OTt,"convbert"),OTt.forEach(t),uGo=r(RRe," \u2014 "),ZV=n(RRe,"A",{href:!0});var VTt=s(ZV);bGo=r(VTt,"ConvBertForSequenceClassification"),VTt.forEach(t),vGo=r(RRe," (ConvBERT model)"),RRe.forEach(t),FGo=i(q),Kb=n(q,"LI",{});var PRe=s(Kb);Kpe=n(PRe,"STRONG",{});var XTt=s(Kpe);TGo=r(XTt,"ctrl"),XTt.forEach(t),MGo=r(PRe," \u2014 "),eX=n(PRe,"A",{href:!0});var zTt=s(eX);EGo=r(zTt,"CTRLForSequenceClassification"),zTt.forEach(t),CGo=r(PRe," (CTRL model)"),PRe.forEach(t),wGo=i(q),Zb=n(q,"LI",{});var BRe=s(Zb);Zpe=n(BRe,"STRONG",{});var QTt=s(Zpe);AGo=r(QTt,"data2vec-text"),QTt.forEach(t),LGo=r(BRe," \u2014 "),oX=n(BRe,"A",{href:!0});var WTt=s(oX);yGo=r(WTt,"Data2VecTextForSequenceClassification"),WTt.forEach(t),xGo=r(BRe," (Data2VecText model)"),BRe.forEach(t),$Go=i(q),ev=n(q,"LI",{});var NRe=s(ev);e_e=n(NRe,"STRONG",{});var HTt=s(e_e);kGo=r(HTt,"deberta"),HTt.forEach(t),SGo=r(NRe," \u2014 "),rX=n(NRe,"A",{href:!0});var UTt=s(rX);RGo=r(UTt,"DebertaForSequenceClassification"),UTt.forEach(t),PGo=r(NRe," (DeBERTa model)"),NRe.forEach(t),BGo=i(q),ov=n(q,"LI",{});var IRe=s(ov);o_e=n(IRe,"STRONG",{});var JTt=s(o_e);NGo=r(JTt,"deberta-v2"),JTt.forEach(t),IGo=r(IRe," \u2014 "),tX=n(IRe,"A",{href:!0});var YTt=s(tX);qGo=r(YTt,"DebertaV2ForSequenceClassification"),YTt.forEach(t),jGo=r(IRe," (DeBERTa-v2 model)"),IRe.forEach(t),DGo=i(q),rv=n(q,"LI",{});var qRe=s(rv);r_e=n(qRe,"STRONG",{});var KTt=s(r_e);GGo=r(KTt,"distilbert"),KTt.forEach(t),OGo=r(qRe," \u2014 "),aX=n(qRe,"A",{href:!0});var ZTt=s(aX);VGo=r(ZTt,"DistilBertForSequenceClassification"),ZTt.forEach(t),XGo=r(qRe," (DistilBERT model)"),qRe.forEach(t),zGo=i(q),tv=n(q,"LI",{});var jRe=s(tv);t_e=n(jRe,"STRONG",{});var e8t=s(t_e);QGo=r(e8t,"electra"),e8t.forEach(t),WGo=r(jRe," \u2014 "),nX=n(jRe,"A",{href:!0});var o8t=s(nX);HGo=r(o8t,"ElectraForSequenceClassification"),o8t.forEach(t),UGo=r(jRe," (ELECTRA model)"),jRe.forEach(t),JGo=i(q),av=n(q,"LI",{});var DRe=s(av);a_e=n(DRe,"STRONG",{});var r8t=s(a_e);YGo=r(r8t,"flaubert"),r8t.forEach(t),KGo=r(DRe," \u2014 "),sX=n(DRe,"A",{href:!0});var t8t=s(sX);ZGo=r(t8t,"FlaubertForSequenceClassification"),t8t.forEach(t),eOo=r(DRe," (FlauBERT model)"),DRe.forEach(t),oOo=i(q),nv=n(q,"LI",{});var GRe=s(nv);n_e=n(GRe,"STRONG",{});var a8t=s(n_e);rOo=r(a8t,"fnet"),a8t.forEach(t),tOo=r(GRe," \u2014 "),lX=n(GRe,"A",{href:!0});var n8t=s(lX);aOo=r(n8t,"FNetForSequenceClassification"),n8t.forEach(t),nOo=r(GRe," (FNet model)"),GRe.forEach(t),sOo=i(q),sv=n(q,"LI",{});var ORe=s(sv);s_e=n(ORe,"STRONG",{});var s8t=s(s_e);lOo=r(s8t,"funnel"),s8t.forEach(t),iOo=r(ORe," \u2014 "),iX=n(ORe,"A",{href:!0});var l8t=s(iX);dOo=r(l8t,"FunnelForSequenceClassification"),l8t.forEach(t),cOo=r(ORe," (Funnel Transformer model)"),ORe.forEach(t),fOo=i(q),lv=n(q,"LI",{});var VRe=s(lv);l_e=n(VRe,"STRONG",{});var i8t=s(l_e);mOo=r(i8t,"gpt2"),i8t.forEach(t),gOo=r(VRe," \u2014 "),dX=n(VRe,"A",{href:!0});var d8t=s(dX);hOo=r(d8t,"GPT2ForSequenceClassification"),d8t.forEach(t),pOo=r(VRe," (OpenAI GPT-2 model)"),VRe.forEach(t),_Oo=i(q),iv=n(q,"LI",{});var XRe=s(iv);i_e=n(XRe,"STRONG",{});var c8t=s(i_e);uOo=r(c8t,"gpt_neo"),c8t.forEach(t),bOo=r(XRe," \u2014 "),cX=n(XRe,"A",{href:!0});var f8t=s(cX);vOo=r(f8t,"GPTNeoForSequenceClassification"),f8t.forEach(t),FOo=r(XRe," (GPT Neo model)"),XRe.forEach(t),TOo=i(q),dv=n(q,"LI",{});var zRe=s(dv);d_e=n(zRe,"STRONG",{});var m8t=s(d_e);MOo=r(m8t,"gptj"),m8t.forEach(t),EOo=r(zRe," \u2014 "),fX=n(zRe,"A",{href:!0});var g8t=s(fX);COo=r(g8t,"GPTJForSequenceClassification"),g8t.forEach(t),wOo=r(zRe," (GPT-J model)"),zRe.forEach(t),AOo=i(q),cv=n(q,"LI",{});var QRe=s(cv);c_e=n(QRe,"STRONG",{});var h8t=s(c_e);LOo=r(h8t,"ibert"),h8t.forEach(t),yOo=r(QRe," \u2014 "),mX=n(QRe,"A",{href:!0});var p8t=s(mX);xOo=r(p8t,"IBertForSequenceClassification"),p8t.forEach(t),$Oo=r(QRe," (I-BERT model)"),QRe.forEach(t),kOo=i(q),fv=n(q,"LI",{});var WRe=s(fv);f_e=n(WRe,"STRONG",{});var _8t=s(f_e);SOo=r(_8t,"layoutlm"),_8t.forEach(t),ROo=r(WRe," \u2014 "),gX=n(WRe,"A",{href:!0});var u8t=s(gX);POo=r(u8t,"LayoutLMForSequenceClassification"),u8t.forEach(t),BOo=r(WRe," (LayoutLM model)"),WRe.forEach(t),NOo=i(q),mv=n(q,"LI",{});var HRe=s(mv);m_e=n(HRe,"STRONG",{});var b8t=s(m_e);IOo=r(b8t,"layoutlmv2"),b8t.forEach(t),qOo=r(HRe," \u2014 "),hX=n(HRe,"A",{href:!0});var v8t=s(hX);jOo=r(v8t,"LayoutLMv2ForSequenceClassification"),v8t.forEach(t),DOo=r(HRe," (LayoutLMv2 model)"),HRe.forEach(t),GOo=i(q),gv=n(q,"LI",{});var URe=s(gv);g_e=n(URe,"STRONG",{});var F8t=s(g_e);OOo=r(F8t,"layoutlmv3"),F8t.forEach(t),VOo=r(URe," \u2014 "),pX=n(URe,"A",{href:!0});var T8t=s(pX);XOo=r(T8t,"LayoutLMv3ForSequenceClassification"),T8t.forEach(t),zOo=r(URe," (LayoutLMv3 model)"),URe.forEach(t),QOo=i(q),hv=n(q,"LI",{});var JRe=s(hv);h_e=n(JRe,"STRONG",{});var M8t=s(h_e);WOo=r(M8t,"led"),M8t.forEach(t),HOo=r(JRe," \u2014 "),_X=n(JRe,"A",{href:!0});var E8t=s(_X);UOo=r(E8t,"LEDForSequenceClassification"),E8t.forEach(t),JOo=r(JRe," (LED model)"),JRe.forEach(t),YOo=i(q),pv=n(q,"LI",{});var YRe=s(pv);p_e=n(YRe,"STRONG",{});var C8t=s(p_e);KOo=r(C8t,"longformer"),C8t.forEach(t),ZOo=r(YRe," \u2014 "),uX=n(YRe,"A",{href:!0});var w8t=s(uX);eVo=r(w8t,"LongformerForSequenceClassification"),w8t.forEach(t),oVo=r(YRe," (Longformer model)"),YRe.forEach(t),rVo=i(q),_v=n(q,"LI",{});var KRe=s(_v);__e=n(KRe,"STRONG",{});var A8t=s(__e);tVo=r(A8t,"mbart"),A8t.forEach(t),aVo=r(KRe," \u2014 "),bX=n(KRe,"A",{href:!0});var L8t=s(bX);nVo=r(L8t,"MBartForSequenceClassification"),L8t.forEach(t),sVo=r(KRe," (mBART model)"),KRe.forEach(t),lVo=i(q),uv=n(q,"LI",{});var ZRe=s(uv);u_e=n(ZRe,"STRONG",{});var y8t=s(u_e);iVo=r(y8t,"megatron-bert"),y8t.forEach(t),dVo=r(ZRe," \u2014 "),vX=n(ZRe,"A",{href:!0});var x8t=s(vX);cVo=r(x8t,"MegatronBertForSequenceClassification"),x8t.forEach(t),fVo=r(ZRe," (Megatron-BERT model)"),ZRe.forEach(t),mVo=i(q),bv=n(q,"LI",{});var ePe=s(bv);b_e=n(ePe,"STRONG",{});var $8t=s(b_e);gVo=r($8t,"mobilebert"),$8t.forEach(t),hVo=r(ePe," \u2014 "),FX=n(ePe,"A",{href:!0});var k8t=s(FX);pVo=r(k8t,"MobileBertForSequenceClassification"),k8t.forEach(t),_Vo=r(ePe," (MobileBERT model)"),ePe.forEach(t),uVo=i(q),vv=n(q,"LI",{});var oPe=s(vv);v_e=n(oPe,"STRONG",{});var S8t=s(v_e);bVo=r(S8t,"mpnet"),S8t.forEach(t),vVo=r(oPe," \u2014 "),TX=n(oPe,"A",{href:!0});var R8t=s(TX);FVo=r(R8t,"MPNetForSequenceClassification"),R8t.forEach(t),TVo=r(oPe," (MPNet model)"),oPe.forEach(t),MVo=i(q),Fv=n(q,"LI",{});var rPe=s(Fv);F_e=n(rPe,"STRONG",{});var P8t=s(F_e);EVo=r(P8t,"mvp"),P8t.forEach(t),CVo=r(rPe," \u2014 "),MX=n(rPe,"A",{href:!0});var B8t=s(MX);wVo=r(B8t,"MvpForSequenceClassification"),B8t.forEach(t),AVo=r(rPe," (MVP model)"),rPe.forEach(t),LVo=i(q),Tv=n(q,"LI",{});var tPe=s(Tv);T_e=n(tPe,"STRONG",{});var N8t=s(T_e);yVo=r(N8t,"nezha"),N8t.forEach(t),xVo=r(tPe," \u2014 "),EX=n(tPe,"A",{href:!0});var I8t=s(EX);$Vo=r(I8t,"NezhaForSequenceClassification"),I8t.forEach(t),kVo=r(tPe," (Nezha model)"),tPe.forEach(t),SVo=i(q),Mv=n(q,"LI",{});var aPe=s(Mv);M_e=n(aPe,"STRONG",{});var q8t=s(M_e);RVo=r(q8t,"nystromformer"),q8t.forEach(t),PVo=r(aPe," \u2014 "),CX=n(aPe,"A",{href:!0});var j8t=s(CX);BVo=r(j8t,"NystromformerForSequenceClassification"),j8t.forEach(t),NVo=r(aPe," (Nystr\xF6mformer model)"),aPe.forEach(t),IVo=i(q),Ev=n(q,"LI",{});var nPe=s(Ev);E_e=n(nPe,"STRONG",{});var D8t=s(E_e);qVo=r(D8t,"openai-gpt"),D8t.forEach(t),jVo=r(nPe," \u2014 "),wX=n(nPe,"A",{href:!0});var G8t=s(wX);DVo=r(G8t,"OpenAIGPTForSequenceClassification"),G8t.forEach(t),GVo=r(nPe," (OpenAI GPT model)"),nPe.forEach(t),OVo=i(q),Cv=n(q,"LI",{});var sPe=s(Cv);C_e=n(sPe,"STRONG",{});var O8t=s(C_e);VVo=r(O8t,"opt"),O8t.forEach(t),XVo=r(sPe," \u2014 "),AX=n(sPe,"A",{href:!0});var V8t=s(AX);zVo=r(V8t,"OPTForSequenceClassification"),V8t.forEach(t),QVo=r(sPe," (OPT model)"),sPe.forEach(t),WVo=i(q),wv=n(q,"LI",{});var lPe=s(wv);w_e=n(lPe,"STRONG",{});var X8t=s(w_e);HVo=r(X8t,"perceiver"),X8t.forEach(t),UVo=r(lPe," \u2014 "),LX=n(lPe,"A",{href:!0});var z8t=s(LX);JVo=r(z8t,"PerceiverForSequenceClassification"),z8t.forEach(t),YVo=r(lPe," (Perceiver model)"),lPe.forEach(t),KVo=i(q),Av=n(q,"LI",{});var iPe=s(Av);A_e=n(iPe,"STRONG",{});var Q8t=s(A_e);ZVo=r(Q8t,"plbart"),Q8t.forEach(t),eXo=r(iPe," \u2014 "),yX=n(iPe,"A",{href:!0});var W8t=s(yX);oXo=r(W8t,"PLBartForSequenceClassification"),W8t.forEach(t),rXo=r(iPe," (PLBart model)"),iPe.forEach(t),tXo=i(q),Lv=n(q,"LI",{});var dPe=s(Lv);L_e=n(dPe,"STRONG",{});var H8t=s(L_e);aXo=r(H8t,"qdqbert"),H8t.forEach(t),nXo=r(dPe," \u2014 "),xX=n(dPe,"A",{href:!0});var U8t=s(xX);sXo=r(U8t,"QDQBertForSequenceClassification"),U8t.forEach(t),lXo=r(dPe," (QDQBert model)"),dPe.forEach(t),iXo=i(q),yv=n(q,"LI",{});var cPe=s(yv);y_e=n(cPe,"STRONG",{});var J8t=s(y_e);dXo=r(J8t,"reformer"),J8t.forEach(t),cXo=r(cPe," \u2014 "),$X=n(cPe,"A",{href:!0});var Y8t=s($X);fXo=r(Y8t,"ReformerForSequenceClassification"),Y8t.forEach(t),mXo=r(cPe," (Reformer model)"),cPe.forEach(t),gXo=i(q),xv=n(q,"LI",{});var fPe=s(xv);x_e=n(fPe,"STRONG",{});var K8t=s(x_e);hXo=r(K8t,"rembert"),K8t.forEach(t),pXo=r(fPe," \u2014 "),kX=n(fPe,"A",{href:!0});var Z8t=s(kX);_Xo=r(Z8t,"RemBertForSequenceClassification"),Z8t.forEach(t),uXo=r(fPe," (RemBERT model)"),fPe.forEach(t),bXo=i(q),$v=n(q,"LI",{});var mPe=s($v);$_e=n(mPe,"STRONG",{});var eMt=s($_e);vXo=r(eMt,"roberta"),eMt.forEach(t),FXo=r(mPe," \u2014 "),SX=n(mPe,"A",{href:!0});var oMt=s(SX);TXo=r(oMt,"RobertaForSequenceClassification"),oMt.forEach(t),MXo=r(mPe," (RoBERTa model)"),mPe.forEach(t),EXo=i(q),kv=n(q,"LI",{});var gPe=s(kv);k_e=n(gPe,"STRONG",{});var rMt=s(k_e);CXo=r(rMt,"roformer"),rMt.forEach(t),wXo=r(gPe," \u2014 "),RX=n(gPe,"A",{href:!0});var tMt=s(RX);AXo=r(tMt,"RoFormerForSequenceClassification"),tMt.forEach(t),LXo=r(gPe," (RoFormer model)"),gPe.forEach(t),yXo=i(q),Sv=n(q,"LI",{});var hPe=s(Sv);S_e=n(hPe,"STRONG",{});var aMt=s(S_e);xXo=r(aMt,"squeezebert"),aMt.forEach(t),$Xo=r(hPe," \u2014 "),PX=n(hPe,"A",{href:!0});var nMt=s(PX);kXo=r(nMt,"SqueezeBertForSequenceClassification"),nMt.forEach(t),SXo=r(hPe," (SqueezeBERT model)"),hPe.forEach(t),RXo=i(q),Rv=n(q,"LI",{});var pPe=s(Rv);R_e=n(pPe,"STRONG",{});var sMt=s(R_e);PXo=r(sMt,"tapas"),sMt.forEach(t),BXo=r(pPe," \u2014 "),BX=n(pPe,"A",{href:!0});var lMt=s(BX);NXo=r(lMt,"TapasForSequenceClassification"),lMt.forEach(t),IXo=r(pPe," (TAPAS model)"),pPe.forEach(t),qXo=i(q),Pv=n(q,"LI",{});var _Pe=s(Pv);P_e=n(_Pe,"STRONG",{});var iMt=s(P_e);jXo=r(iMt,"transfo-xl"),iMt.forEach(t),DXo=r(_Pe," \u2014 "),NX=n(_Pe,"A",{href:!0});var dMt=s(NX);GXo=r(dMt,"TransfoXLForSequenceClassification"),dMt.forEach(t),OXo=r(_Pe," (Transformer-XL model)"),_Pe.forEach(t),VXo=i(q),Bv=n(q,"LI",{});var uPe=s(Bv);B_e=n(uPe,"STRONG",{});var cMt=s(B_e);XXo=r(cMt,"xlm"),cMt.forEach(t),zXo=r(uPe," \u2014 "),IX=n(uPe,"A",{href:!0});var fMt=s(IX);QXo=r(fMt,"XLMForSequenceClassification"),fMt.forEach(t),WXo=r(uPe," (XLM model)"),uPe.forEach(t),HXo=i(q),Nv=n(q,"LI",{});var bPe=s(Nv);N_e=n(bPe,"STRONG",{});var mMt=s(N_e);UXo=r(mMt,"xlm-roberta"),mMt.forEach(t),JXo=r(bPe," \u2014 "),qX=n(bPe,"A",{href:!0});var gMt=s(qX);YXo=r(gMt,"XLMRobertaForSequenceClassification"),gMt.forEach(t),KXo=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),ZXo=i(q),Iv=n(q,"LI",{});var vPe=s(Iv);I_e=n(vPe,"STRONG",{});var hMt=s(I_e);ezo=r(hMt,"xlm-roberta-xl"),hMt.forEach(t),ozo=r(vPe," \u2014 "),jX=n(vPe,"A",{href:!0});var pMt=s(jX);rzo=r(pMt,"XLMRobertaXLForSequenceClassification"),pMt.forEach(t),tzo=r(vPe," (XLM-RoBERTa-XL model)"),vPe.forEach(t),azo=i(q),qv=n(q,"LI",{});var FPe=s(qv);q_e=n(FPe,"STRONG",{});var _Mt=s(q_e);nzo=r(_Mt,"xlnet"),_Mt.forEach(t),szo=r(FPe," \u2014 "),DX=n(FPe,"A",{href:!0});var uMt=s(DX);lzo=r(uMt,"XLNetForSequenceClassification"),uMt.forEach(t),izo=r(FPe," (XLNet model)"),FPe.forEach(t),dzo=i(q),jv=n(q,"LI",{});var TPe=s(jv);j_e=n(TPe,"STRONG",{});var bMt=s(j_e);czo=r(bMt,"yoso"),bMt.forEach(t),fzo=r(TPe," \u2014 "),GX=n(TPe,"A",{href:!0});var vMt=s(GX);mzo=r(vMt,"YosoForSequenceClassification"),vMt.forEach(t),gzo=r(TPe," (YOSO model)"),TPe.forEach(t),q.forEach(t),hzo=i(fa),Dv=n(fa,"P",{});var MPe=s(Dv);pzo=r(MPe,"The model is set in evaluation mode by default using "),D_e=n(MPe,"CODE",{});var FMt=s(D_e);_zo=r(FMt,"model.eval()"),FMt.forEach(t),uzo=r(MPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(MPe,"CODE",{});var TMt=s(G_e);bzo=r(TMt,"model.train()"),TMt.forEach(t),MPe.forEach(t),vzo=i(fa),T(Gv.$$.fragment,fa),fa.forEach(t),sl.forEach(t),uXe=i(f),ad=n(f,"H2",{class:!0});var EQe=s(ad);Ov=n(EQe,"A",{id:!0,class:!0,href:!0});var MMt=s(Ov);O_e=n(MMt,"SPAN",{});var EMt=s(O_e);T(ny.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),Fzo=i(EQe),V_e=n(EQe,"SPAN",{});var CMt=s(V_e);Tzo=r(CMt,"AutoModelForMultipleChoice"),CMt.forEach(t),EQe.forEach(t),bXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(sy.$$.fragment,ll),Mzo=i(ll),nd=n(ll,"P",{});var jre=s(nd);Ezo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OX=n(jre,"A",{href:!0});var wMt=s(OX);Czo=r(wMt,"from_pretrained()"),wMt.forEach(t),wzo=r(jre," class method or the "),VX=n(jre,"A",{href:!0});var AMt=s(VX);Azo=r(AMt,"from_config()"),AMt.forEach(t),Lzo=r(jre,` class
method.`),jre.forEach(t),yzo=i(ll),ly=n(ll,"P",{});var CQe=s(ly);xzo=r(CQe,"This class cannot be instantiated directly using "),X_e=n(CQe,"CODE",{});var LMt=s(X_e);$zo=r(LMt,"__init__()"),LMt.forEach(t),kzo=r(CQe," (throws an error)."),CQe.forEach(t),Szo=i(ll),gt=n(ll,"DIV",{class:!0});var v6=s(gt);T(iy.$$.fragment,v6),Rzo=i(v6),z_e=n(v6,"P",{});var yMt=s(z_e);Pzo=r(yMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yMt.forEach(t),Bzo=i(v6),sd=n(v6,"P",{});var Dre=s(sd);Nzo=r(Dre,`Note:
Loading a model from its configuration file does `),Q_e=n(Dre,"STRONG",{});var xMt=s(Q_e);Izo=r(xMt,"not"),xMt.forEach(t),qzo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(Dre,"A",{href:!0});var $Mt=s(XX);jzo=r($Mt,"from_pretrained()"),$Mt.forEach(t),Dzo=r(Dre," to load the model weights."),Dre.forEach(t),Gzo=i(v6),T(Vv.$$.fragment,v6),v6.forEach(t),Ozo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(dy.$$.fragment,ma),Vzo=i(ma),W_e=n(ma,"P",{});var kMt=s(W_e);Xzo=r(kMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kMt.forEach(t),zzo=i(ma),Oa=n(ma,"P",{});var F6=s(Oa);Qzo=r(F6,"The model class to instantiate is selected based on the "),H_e=n(F6,"CODE",{});var SMt=s(H_e);Wzo=r(SMt,"model_type"),SMt.forEach(t),Hzo=r(F6,` property of the config object (either
passed as an argument or loaded from `),U_e=n(F6,"CODE",{});var RMt=s(U_e);Uzo=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),Jzo=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(F6,"CODE",{});var PMt=s(J_e);Yzo=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),Kzo=r(F6,":"),F6.forEach(t),Zzo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Xv=n(ee,"LI",{});var EPe=s(Xv);Y_e=n(EPe,"STRONG",{});var BMt=s(Y_e);eQo=r(BMt,"albert"),BMt.forEach(t),oQo=r(EPe," \u2014 "),zX=n(EPe,"A",{href:!0});var NMt=s(zX);rQo=r(NMt,"AlbertForMultipleChoice"),NMt.forEach(t),tQo=r(EPe," (ALBERT model)"),EPe.forEach(t),aQo=i(ee),zv=n(ee,"LI",{});var CPe=s(zv);K_e=n(CPe,"STRONG",{});var IMt=s(K_e);nQo=r(IMt,"bert"),IMt.forEach(t),sQo=r(CPe," \u2014 "),QX=n(CPe,"A",{href:!0});var qMt=s(QX);lQo=r(qMt,"BertForMultipleChoice"),qMt.forEach(t),iQo=r(CPe," (BERT model)"),CPe.forEach(t),dQo=i(ee),Qv=n(ee,"LI",{});var wPe=s(Qv);Z_e=n(wPe,"STRONG",{});var jMt=s(Z_e);cQo=r(jMt,"big_bird"),jMt.forEach(t),fQo=r(wPe," \u2014 "),WX=n(wPe,"A",{href:!0});var DMt=s(WX);mQo=r(DMt,"BigBirdForMultipleChoice"),DMt.forEach(t),gQo=r(wPe," (BigBird model)"),wPe.forEach(t),hQo=i(ee),Wv=n(ee,"LI",{});var APe=s(Wv);eue=n(APe,"STRONG",{});var GMt=s(eue);pQo=r(GMt,"camembert"),GMt.forEach(t),_Qo=r(APe," \u2014 "),HX=n(APe,"A",{href:!0});var OMt=s(HX);uQo=r(OMt,"CamembertForMultipleChoice"),OMt.forEach(t),bQo=r(APe," (CamemBERT model)"),APe.forEach(t),vQo=i(ee),Hv=n(ee,"LI",{});var LPe=s(Hv);oue=n(LPe,"STRONG",{});var VMt=s(oue);FQo=r(VMt,"canine"),VMt.forEach(t),TQo=r(LPe," \u2014 "),UX=n(LPe,"A",{href:!0});var XMt=s(UX);MQo=r(XMt,"CanineForMultipleChoice"),XMt.forEach(t),EQo=r(LPe," (CANINE model)"),LPe.forEach(t),CQo=i(ee),Uv=n(ee,"LI",{});var yPe=s(Uv);rue=n(yPe,"STRONG",{});var zMt=s(rue);wQo=r(zMt,"convbert"),zMt.forEach(t),AQo=r(yPe," \u2014 "),JX=n(yPe,"A",{href:!0});var QMt=s(JX);LQo=r(QMt,"ConvBertForMultipleChoice"),QMt.forEach(t),yQo=r(yPe," (ConvBERT model)"),yPe.forEach(t),xQo=i(ee),Jv=n(ee,"LI",{});var xPe=s(Jv);tue=n(xPe,"STRONG",{});var WMt=s(tue);$Qo=r(WMt,"data2vec-text"),WMt.forEach(t),kQo=r(xPe," \u2014 "),YX=n(xPe,"A",{href:!0});var HMt=s(YX);SQo=r(HMt,"Data2VecTextForMultipleChoice"),HMt.forEach(t),RQo=r(xPe," (Data2VecText model)"),xPe.forEach(t),PQo=i(ee),Yv=n(ee,"LI",{});var $Pe=s(Yv);aue=n($Pe,"STRONG",{});var UMt=s(aue);BQo=r(UMt,"deberta-v2"),UMt.forEach(t),NQo=r($Pe," \u2014 "),KX=n($Pe,"A",{href:!0});var JMt=s(KX);IQo=r(JMt,"DebertaV2ForMultipleChoice"),JMt.forEach(t),qQo=r($Pe," (DeBERTa-v2 model)"),$Pe.forEach(t),jQo=i(ee),Kv=n(ee,"LI",{});var kPe=s(Kv);nue=n(kPe,"STRONG",{});var YMt=s(nue);DQo=r(YMt,"distilbert"),YMt.forEach(t),GQo=r(kPe," \u2014 "),ZX=n(kPe,"A",{href:!0});var KMt=s(ZX);OQo=r(KMt,"DistilBertForMultipleChoice"),KMt.forEach(t),VQo=r(kPe," (DistilBERT model)"),kPe.forEach(t),XQo=i(ee),Zv=n(ee,"LI",{});var SPe=s(Zv);sue=n(SPe,"STRONG",{});var ZMt=s(sue);zQo=r(ZMt,"electra"),ZMt.forEach(t),QQo=r(SPe," \u2014 "),ez=n(SPe,"A",{href:!0});var e4t=s(ez);WQo=r(e4t,"ElectraForMultipleChoice"),e4t.forEach(t),HQo=r(SPe," (ELECTRA model)"),SPe.forEach(t),UQo=i(ee),e3=n(ee,"LI",{});var RPe=s(e3);lue=n(RPe,"STRONG",{});var o4t=s(lue);JQo=r(o4t,"flaubert"),o4t.forEach(t),YQo=r(RPe," \u2014 "),oz=n(RPe,"A",{href:!0});var r4t=s(oz);KQo=r(r4t,"FlaubertForMultipleChoice"),r4t.forEach(t),ZQo=r(RPe," (FlauBERT model)"),RPe.forEach(t),eWo=i(ee),o3=n(ee,"LI",{});var PPe=s(o3);iue=n(PPe,"STRONG",{});var t4t=s(iue);oWo=r(t4t,"fnet"),t4t.forEach(t),rWo=r(PPe," \u2014 "),rz=n(PPe,"A",{href:!0});var a4t=s(rz);tWo=r(a4t,"FNetForMultipleChoice"),a4t.forEach(t),aWo=r(PPe," (FNet model)"),PPe.forEach(t),nWo=i(ee),r3=n(ee,"LI",{});var BPe=s(r3);due=n(BPe,"STRONG",{});var n4t=s(due);sWo=r(n4t,"funnel"),n4t.forEach(t),lWo=r(BPe," \u2014 "),tz=n(BPe,"A",{href:!0});var s4t=s(tz);iWo=r(s4t,"FunnelForMultipleChoice"),s4t.forEach(t),dWo=r(BPe," (Funnel Transformer model)"),BPe.forEach(t),cWo=i(ee),t3=n(ee,"LI",{});var NPe=s(t3);cue=n(NPe,"STRONG",{});var l4t=s(cue);fWo=r(l4t,"ibert"),l4t.forEach(t),mWo=r(NPe," \u2014 "),az=n(NPe,"A",{href:!0});var i4t=s(az);gWo=r(i4t,"IBertForMultipleChoice"),i4t.forEach(t),hWo=r(NPe," (I-BERT model)"),NPe.forEach(t),pWo=i(ee),a3=n(ee,"LI",{});var IPe=s(a3);fue=n(IPe,"STRONG",{});var d4t=s(fue);_Wo=r(d4t,"longformer"),d4t.forEach(t),uWo=r(IPe," \u2014 "),nz=n(IPe,"A",{href:!0});var c4t=s(nz);bWo=r(c4t,"LongformerForMultipleChoice"),c4t.forEach(t),vWo=r(IPe," (Longformer model)"),IPe.forEach(t),FWo=i(ee),n3=n(ee,"LI",{});var qPe=s(n3);mue=n(qPe,"STRONG",{});var f4t=s(mue);TWo=r(f4t,"megatron-bert"),f4t.forEach(t),MWo=r(qPe," \u2014 "),sz=n(qPe,"A",{href:!0});var m4t=s(sz);EWo=r(m4t,"MegatronBertForMultipleChoice"),m4t.forEach(t),CWo=r(qPe," (Megatron-BERT model)"),qPe.forEach(t),wWo=i(ee),s3=n(ee,"LI",{});var jPe=s(s3);gue=n(jPe,"STRONG",{});var g4t=s(gue);AWo=r(g4t,"mobilebert"),g4t.forEach(t),LWo=r(jPe," \u2014 "),lz=n(jPe,"A",{href:!0});var h4t=s(lz);yWo=r(h4t,"MobileBertForMultipleChoice"),h4t.forEach(t),xWo=r(jPe," (MobileBERT model)"),jPe.forEach(t),$Wo=i(ee),l3=n(ee,"LI",{});var DPe=s(l3);hue=n(DPe,"STRONG",{});var p4t=s(hue);kWo=r(p4t,"mpnet"),p4t.forEach(t),SWo=r(DPe," \u2014 "),iz=n(DPe,"A",{href:!0});var _4t=s(iz);RWo=r(_4t,"MPNetForMultipleChoice"),_4t.forEach(t),PWo=r(DPe," (MPNet model)"),DPe.forEach(t),BWo=i(ee),i3=n(ee,"LI",{});var GPe=s(i3);pue=n(GPe,"STRONG",{});var u4t=s(pue);NWo=r(u4t,"nezha"),u4t.forEach(t),IWo=r(GPe," \u2014 "),dz=n(GPe,"A",{href:!0});var b4t=s(dz);qWo=r(b4t,"NezhaForMultipleChoice"),b4t.forEach(t),jWo=r(GPe," (Nezha model)"),GPe.forEach(t),DWo=i(ee),d3=n(ee,"LI",{});var OPe=s(d3);_ue=n(OPe,"STRONG",{});var v4t=s(_ue);GWo=r(v4t,"nystromformer"),v4t.forEach(t),OWo=r(OPe," \u2014 "),cz=n(OPe,"A",{href:!0});var F4t=s(cz);VWo=r(F4t,"NystromformerForMultipleChoice"),F4t.forEach(t),XWo=r(OPe," (Nystr\xF6mformer model)"),OPe.forEach(t),zWo=i(ee),c3=n(ee,"LI",{});var VPe=s(c3);uue=n(VPe,"STRONG",{});var T4t=s(uue);QWo=r(T4t,"qdqbert"),T4t.forEach(t),WWo=r(VPe," \u2014 "),fz=n(VPe,"A",{href:!0});var M4t=s(fz);HWo=r(M4t,"QDQBertForMultipleChoice"),M4t.forEach(t),UWo=r(VPe," (QDQBert model)"),VPe.forEach(t),JWo=i(ee),f3=n(ee,"LI",{});var XPe=s(f3);bue=n(XPe,"STRONG",{});var E4t=s(bue);YWo=r(E4t,"rembert"),E4t.forEach(t),KWo=r(XPe," \u2014 "),mz=n(XPe,"A",{href:!0});var C4t=s(mz);ZWo=r(C4t,"RemBertForMultipleChoice"),C4t.forEach(t),eHo=r(XPe," (RemBERT model)"),XPe.forEach(t),oHo=i(ee),m3=n(ee,"LI",{});var zPe=s(m3);vue=n(zPe,"STRONG",{});var w4t=s(vue);rHo=r(w4t,"roberta"),w4t.forEach(t),tHo=r(zPe," \u2014 "),gz=n(zPe,"A",{href:!0});var A4t=s(gz);aHo=r(A4t,"RobertaForMultipleChoice"),A4t.forEach(t),nHo=r(zPe," (RoBERTa model)"),zPe.forEach(t),sHo=i(ee),g3=n(ee,"LI",{});var QPe=s(g3);Fue=n(QPe,"STRONG",{});var L4t=s(Fue);lHo=r(L4t,"roformer"),L4t.forEach(t),iHo=r(QPe," \u2014 "),hz=n(QPe,"A",{href:!0});var y4t=s(hz);dHo=r(y4t,"RoFormerForMultipleChoice"),y4t.forEach(t),cHo=r(QPe," (RoFormer model)"),QPe.forEach(t),fHo=i(ee),h3=n(ee,"LI",{});var WPe=s(h3);Tue=n(WPe,"STRONG",{});var x4t=s(Tue);mHo=r(x4t,"squeezebert"),x4t.forEach(t),gHo=r(WPe," \u2014 "),pz=n(WPe,"A",{href:!0});var $4t=s(pz);hHo=r($4t,"SqueezeBertForMultipleChoice"),$4t.forEach(t),pHo=r(WPe," (SqueezeBERT model)"),WPe.forEach(t),_Ho=i(ee),p3=n(ee,"LI",{});var HPe=s(p3);Mue=n(HPe,"STRONG",{});var k4t=s(Mue);uHo=r(k4t,"xlm"),k4t.forEach(t),bHo=r(HPe," \u2014 "),_z=n(HPe,"A",{href:!0});var S4t=s(_z);vHo=r(S4t,"XLMForMultipleChoice"),S4t.forEach(t),FHo=r(HPe," (XLM model)"),HPe.forEach(t),THo=i(ee),_3=n(ee,"LI",{});var UPe=s(_3);Eue=n(UPe,"STRONG",{});var R4t=s(Eue);MHo=r(R4t,"xlm-roberta"),R4t.forEach(t),EHo=r(UPe," \u2014 "),uz=n(UPe,"A",{href:!0});var P4t=s(uz);CHo=r(P4t,"XLMRobertaForMultipleChoice"),P4t.forEach(t),wHo=r(UPe," (XLM-RoBERTa model)"),UPe.forEach(t),AHo=i(ee),u3=n(ee,"LI",{});var JPe=s(u3);Cue=n(JPe,"STRONG",{});var B4t=s(Cue);LHo=r(B4t,"xlm-roberta-xl"),B4t.forEach(t),yHo=r(JPe," \u2014 "),bz=n(JPe,"A",{href:!0});var N4t=s(bz);xHo=r(N4t,"XLMRobertaXLForMultipleChoice"),N4t.forEach(t),$Ho=r(JPe," (XLM-RoBERTa-XL model)"),JPe.forEach(t),kHo=i(ee),b3=n(ee,"LI",{});var YPe=s(b3);wue=n(YPe,"STRONG",{});var I4t=s(wue);SHo=r(I4t,"xlnet"),I4t.forEach(t),RHo=r(YPe," \u2014 "),vz=n(YPe,"A",{href:!0});var q4t=s(vz);PHo=r(q4t,"XLNetForMultipleChoice"),q4t.forEach(t),BHo=r(YPe," (XLNet model)"),YPe.forEach(t),NHo=i(ee),v3=n(ee,"LI",{});var KPe=s(v3);Aue=n(KPe,"STRONG",{});var j4t=s(Aue);IHo=r(j4t,"yoso"),j4t.forEach(t),qHo=r(KPe," \u2014 "),Fz=n(KPe,"A",{href:!0});var D4t=s(Fz);jHo=r(D4t,"YosoForMultipleChoice"),D4t.forEach(t),DHo=r(KPe," (YOSO model)"),KPe.forEach(t),ee.forEach(t),GHo=i(ma),F3=n(ma,"P",{});var ZPe=s(F3);OHo=r(ZPe,"The model is set in evaluation mode by default using "),Lue=n(ZPe,"CODE",{});var G4t=s(Lue);VHo=r(G4t,"model.eval()"),G4t.forEach(t),XHo=r(ZPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(ZPe,"CODE",{});var O4t=s(yue);zHo=r(O4t,"model.train()"),O4t.forEach(t),ZPe.forEach(t),QHo=i(ma),T(T3.$$.fragment,ma),ma.forEach(t),ll.forEach(t),vXe=i(f),ld=n(f,"H2",{class:!0});var wQe=s(ld);M3=n(wQe,"A",{id:!0,class:!0,href:!0});var V4t=s(M3);xue=n(V4t,"SPAN",{});var X4t=s(xue);T(cy.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),WHo=i(wQe),$ue=n(wQe,"SPAN",{});var z4t=s($ue);HHo=r(z4t,"AutoModelForNextSentencePrediction"),z4t.forEach(t),wQe.forEach(t),FXe=i(f),No=n(f,"DIV",{class:!0});var il=s(No);T(fy.$$.fragment,il),UHo=i(il),id=n(il,"P",{});var Gre=s(id);JHo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tz=n(Gre,"A",{href:!0});var Q4t=s(Tz);YHo=r(Q4t,"from_pretrained()"),Q4t.forEach(t),KHo=r(Gre," class method or the "),Mz=n(Gre,"A",{href:!0});var W4t=s(Mz);ZHo=r(W4t,"from_config()"),W4t.forEach(t),eUo=r(Gre,` class
method.`),Gre.forEach(t),oUo=i(il),my=n(il,"P",{});var AQe=s(my);rUo=r(AQe,"This class cannot be instantiated directly using "),kue=n(AQe,"CODE",{});var H4t=s(kue);tUo=r(H4t,"__init__()"),H4t.forEach(t),aUo=r(AQe," (throws an error)."),AQe.forEach(t),nUo=i(il),ht=n(il,"DIV",{class:!0});var T6=s(ht);T(gy.$$.fragment,T6),sUo=i(T6),Sue=n(T6,"P",{});var U4t=s(Sue);lUo=r(U4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U4t.forEach(t),iUo=i(T6),dd=n(T6,"P",{});var Ore=s(dd);dUo=r(Ore,`Note:
Loading a model from its configuration file does `),Rue=n(Ore,"STRONG",{});var J4t=s(Rue);cUo=r(J4t,"not"),J4t.forEach(t),fUo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(Ore,"A",{href:!0});var Y4t=s(Ez);mUo=r(Y4t,"from_pretrained()"),Y4t.forEach(t),gUo=r(Ore," to load the model weights."),Ore.forEach(t),hUo=i(T6),T(E3.$$.fragment,T6),T6.forEach(t),pUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(hy.$$.fragment,ga),_Uo=i(ga),Pue=n(ga,"P",{});var K4t=s(Pue);uUo=r(K4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),K4t.forEach(t),bUo=i(ga),Va=n(ga,"P",{});var M6=s(Va);vUo=r(M6,"The model class to instantiate is selected based on the "),Bue=n(M6,"CODE",{});var Z4t=s(Bue);FUo=r(Z4t,"model_type"),Z4t.forEach(t),TUo=r(M6,` property of the config object (either
passed as an argument or loaded from `),Nue=n(M6,"CODE",{});var eEt=s(Nue);MUo=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),EUo=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(M6,"CODE",{});var oEt=s(Iue);CUo=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),wUo=r(M6,":"),M6.forEach(t),AUo=i(ga),Io=n(ga,"UL",{});var ha=s(Io);C3=n(ha,"LI",{});var eBe=s(C3);que=n(eBe,"STRONG",{});var rEt=s(que);LUo=r(rEt,"bert"),rEt.forEach(t),yUo=r(eBe," \u2014 "),Cz=n(eBe,"A",{href:!0});var tEt=s(Cz);xUo=r(tEt,"BertForNextSentencePrediction"),tEt.forEach(t),$Uo=r(eBe," (BERT model)"),eBe.forEach(t),kUo=i(ha),w3=n(ha,"LI",{});var oBe=s(w3);jue=n(oBe,"STRONG",{});var aEt=s(jue);SUo=r(aEt,"fnet"),aEt.forEach(t),RUo=r(oBe," \u2014 "),wz=n(oBe,"A",{href:!0});var nEt=s(wz);PUo=r(nEt,"FNetForNextSentencePrediction"),nEt.forEach(t),BUo=r(oBe," (FNet model)"),oBe.forEach(t),NUo=i(ha),A3=n(ha,"LI",{});var rBe=s(A3);Due=n(rBe,"STRONG",{});var sEt=s(Due);IUo=r(sEt,"megatron-bert"),sEt.forEach(t),qUo=r(rBe," \u2014 "),Az=n(rBe,"A",{href:!0});var lEt=s(Az);jUo=r(lEt,"MegatronBertForNextSentencePrediction"),lEt.forEach(t),DUo=r(rBe," (Megatron-BERT model)"),rBe.forEach(t),GUo=i(ha),L3=n(ha,"LI",{});var tBe=s(L3);Gue=n(tBe,"STRONG",{});var iEt=s(Gue);OUo=r(iEt,"mobilebert"),iEt.forEach(t),VUo=r(tBe," \u2014 "),Lz=n(tBe,"A",{href:!0});var dEt=s(Lz);XUo=r(dEt,"MobileBertForNextSentencePrediction"),dEt.forEach(t),zUo=r(tBe," (MobileBERT model)"),tBe.forEach(t),QUo=i(ha),y3=n(ha,"LI",{});var aBe=s(y3);Oue=n(aBe,"STRONG",{});var cEt=s(Oue);WUo=r(cEt,"nezha"),cEt.forEach(t),HUo=r(aBe," \u2014 "),yz=n(aBe,"A",{href:!0});var fEt=s(yz);UUo=r(fEt,"NezhaForNextSentencePrediction"),fEt.forEach(t),JUo=r(aBe," (Nezha model)"),aBe.forEach(t),YUo=i(ha),x3=n(ha,"LI",{});var nBe=s(x3);Vue=n(nBe,"STRONG",{});var mEt=s(Vue);KUo=r(mEt,"qdqbert"),mEt.forEach(t),ZUo=r(nBe," \u2014 "),xz=n(nBe,"A",{href:!0});var gEt=s(xz);eJo=r(gEt,"QDQBertForNextSentencePrediction"),gEt.forEach(t),oJo=r(nBe," (QDQBert model)"),nBe.forEach(t),ha.forEach(t),rJo=i(ga),$3=n(ga,"P",{});var sBe=s($3);tJo=r(sBe,"The model is set in evaluation mode by default using "),Xue=n(sBe,"CODE",{});var hEt=s(Xue);aJo=r(hEt,"model.eval()"),hEt.forEach(t),nJo=r(sBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(sBe,"CODE",{});var pEt=s(zue);sJo=r(pEt,"model.train()"),pEt.forEach(t),sBe.forEach(t),lJo=i(ga),T(k3.$$.fragment,ga),ga.forEach(t),il.forEach(t),TXe=i(f),cd=n(f,"H2",{class:!0});var LQe=s(cd);S3=n(LQe,"A",{id:!0,class:!0,href:!0});var _Et=s(S3);Que=n(_Et,"SPAN",{});var uEt=s(Que);T(py.$$.fragment,uEt),uEt.forEach(t),_Et.forEach(t),iJo=i(LQe),Wue=n(LQe,"SPAN",{});var bEt=s(Wue);dJo=r(bEt,"AutoModelForTokenClassification"),bEt.forEach(t),LQe.forEach(t),MXe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(_y.$$.fragment,dl),cJo=i(dl),fd=n(dl,"P",{});var Vre=s(fd);fJo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=n(Vre,"A",{href:!0});var vEt=s($z);mJo=r(vEt,"from_pretrained()"),vEt.forEach(t),gJo=r(Vre," class method or the "),kz=n(Vre,"A",{href:!0});var FEt=s(kz);hJo=r(FEt,"from_config()"),FEt.forEach(t),pJo=r(Vre,` class
method.`),Vre.forEach(t),_Jo=i(dl),uy=n(dl,"P",{});var yQe=s(uy);uJo=r(yQe,"This class cannot be instantiated directly using "),Hue=n(yQe,"CODE",{});var TEt=s(Hue);bJo=r(TEt,"__init__()"),TEt.forEach(t),vJo=r(yQe," (throws an error)."),yQe.forEach(t),FJo=i(dl),pt=n(dl,"DIV",{class:!0});var E6=s(pt);T(by.$$.fragment,E6),TJo=i(E6),Uue=n(E6,"P",{});var MEt=s(Uue);MJo=r(MEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MEt.forEach(t),EJo=i(E6),md=n(E6,"P",{});var Xre=s(md);CJo=r(Xre,`Note:
Loading a model from its configuration file does `),Jue=n(Xre,"STRONG",{});var EEt=s(Jue);wJo=r(EEt,"not"),EEt.forEach(t),AJo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(Xre,"A",{href:!0});var CEt=s(Sz);LJo=r(CEt,"from_pretrained()"),CEt.forEach(t),yJo=r(Xre," to load the model weights."),Xre.forEach(t),xJo=i(E6),T(R3.$$.fragment,E6),E6.forEach(t),$Jo=i(dl),ao=n(dl,"DIV",{class:!0});var pa=s(ao);T(vy.$$.fragment,pa),kJo=i(pa),Yue=n(pa,"P",{});var wEt=s(Yue);SJo=r(wEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wEt.forEach(t),RJo=i(pa),Xa=n(pa,"P",{});var C6=s(Xa);PJo=r(C6,"The model class to instantiate is selected based on the "),Kue=n(C6,"CODE",{});var AEt=s(Kue);BJo=r(AEt,"model_type"),AEt.forEach(t),NJo=r(C6,` property of the config object (either
passed as an argument or loaded from `),Zue=n(C6,"CODE",{});var LEt=s(Zue);IJo=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),qJo=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(C6,"CODE",{});var yEt=s(e1e);jJo=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),DJo=r(C6,":"),C6.forEach(t),GJo=i(pa),U=n(pa,"UL",{});var J=s(U);P3=n(J,"LI",{});var lBe=s(P3);o1e=n(lBe,"STRONG",{});var xEt=s(o1e);OJo=r(xEt,"albert"),xEt.forEach(t),VJo=r(lBe," \u2014 "),Rz=n(lBe,"A",{href:!0});var $Et=s(Rz);XJo=r($Et,"AlbertForTokenClassification"),$Et.forEach(t),zJo=r(lBe," (ALBERT model)"),lBe.forEach(t),QJo=i(J),B3=n(J,"LI",{});var iBe=s(B3);r1e=n(iBe,"STRONG",{});var kEt=s(r1e);WJo=r(kEt,"bert"),kEt.forEach(t),HJo=r(iBe," \u2014 "),Pz=n(iBe,"A",{href:!0});var SEt=s(Pz);UJo=r(SEt,"BertForTokenClassification"),SEt.forEach(t),JJo=r(iBe," (BERT model)"),iBe.forEach(t),YJo=i(J),N3=n(J,"LI",{});var dBe=s(N3);t1e=n(dBe,"STRONG",{});var REt=s(t1e);KJo=r(REt,"big_bird"),REt.forEach(t),ZJo=r(dBe," \u2014 "),Bz=n(dBe,"A",{href:!0});var PEt=s(Bz);eYo=r(PEt,"BigBirdForTokenClassification"),PEt.forEach(t),oYo=r(dBe," (BigBird model)"),dBe.forEach(t),rYo=i(J),I3=n(J,"LI",{});var cBe=s(I3);a1e=n(cBe,"STRONG",{});var BEt=s(a1e);tYo=r(BEt,"bloom"),BEt.forEach(t),aYo=r(cBe," \u2014 "),Nz=n(cBe,"A",{href:!0});var NEt=s(Nz);nYo=r(NEt,"BloomForTokenClassification"),NEt.forEach(t),sYo=r(cBe," (BLOOM model)"),cBe.forEach(t),lYo=i(J),q3=n(J,"LI",{});var fBe=s(q3);n1e=n(fBe,"STRONG",{});var IEt=s(n1e);iYo=r(IEt,"camembert"),IEt.forEach(t),dYo=r(fBe," \u2014 "),Iz=n(fBe,"A",{href:!0});var qEt=s(Iz);cYo=r(qEt,"CamembertForTokenClassification"),qEt.forEach(t),fYo=r(fBe," (CamemBERT model)"),fBe.forEach(t),mYo=i(J),j3=n(J,"LI",{});var mBe=s(j3);s1e=n(mBe,"STRONG",{});var jEt=s(s1e);gYo=r(jEt,"canine"),jEt.forEach(t),hYo=r(mBe," \u2014 "),qz=n(mBe,"A",{href:!0});var DEt=s(qz);pYo=r(DEt,"CanineForTokenClassification"),DEt.forEach(t),_Yo=r(mBe," (CANINE model)"),mBe.forEach(t),uYo=i(J),D3=n(J,"LI",{});var gBe=s(D3);l1e=n(gBe,"STRONG",{});var GEt=s(l1e);bYo=r(GEt,"convbert"),GEt.forEach(t),vYo=r(gBe," \u2014 "),jz=n(gBe,"A",{href:!0});var OEt=s(jz);FYo=r(OEt,"ConvBertForTokenClassification"),OEt.forEach(t),TYo=r(gBe," (ConvBERT model)"),gBe.forEach(t),MYo=i(J),G3=n(J,"LI",{});var hBe=s(G3);i1e=n(hBe,"STRONG",{});var VEt=s(i1e);EYo=r(VEt,"data2vec-text"),VEt.forEach(t),CYo=r(hBe," \u2014 "),Dz=n(hBe,"A",{href:!0});var XEt=s(Dz);wYo=r(XEt,"Data2VecTextForTokenClassification"),XEt.forEach(t),AYo=r(hBe," (Data2VecText model)"),hBe.forEach(t),LYo=i(J),O3=n(J,"LI",{});var pBe=s(O3);d1e=n(pBe,"STRONG",{});var zEt=s(d1e);yYo=r(zEt,"deberta"),zEt.forEach(t),xYo=r(pBe," \u2014 "),Gz=n(pBe,"A",{href:!0});var QEt=s(Gz);$Yo=r(QEt,"DebertaForTokenClassification"),QEt.forEach(t),kYo=r(pBe," (DeBERTa model)"),pBe.forEach(t),SYo=i(J),V3=n(J,"LI",{});var _Be=s(V3);c1e=n(_Be,"STRONG",{});var WEt=s(c1e);RYo=r(WEt,"deberta-v2"),WEt.forEach(t),PYo=r(_Be," \u2014 "),Oz=n(_Be,"A",{href:!0});var HEt=s(Oz);BYo=r(HEt,"DebertaV2ForTokenClassification"),HEt.forEach(t),NYo=r(_Be," (DeBERTa-v2 model)"),_Be.forEach(t),IYo=i(J),X3=n(J,"LI",{});var uBe=s(X3);f1e=n(uBe,"STRONG",{});var UEt=s(f1e);qYo=r(UEt,"distilbert"),UEt.forEach(t),jYo=r(uBe," \u2014 "),Vz=n(uBe,"A",{href:!0});var JEt=s(Vz);DYo=r(JEt,"DistilBertForTokenClassification"),JEt.forEach(t),GYo=r(uBe," (DistilBERT model)"),uBe.forEach(t),OYo=i(J),z3=n(J,"LI",{});var bBe=s(z3);m1e=n(bBe,"STRONG",{});var YEt=s(m1e);VYo=r(YEt,"electra"),YEt.forEach(t),XYo=r(bBe," \u2014 "),Xz=n(bBe,"A",{href:!0});var KEt=s(Xz);zYo=r(KEt,"ElectraForTokenClassification"),KEt.forEach(t),QYo=r(bBe," (ELECTRA model)"),bBe.forEach(t),WYo=i(J),Q3=n(J,"LI",{});var vBe=s(Q3);g1e=n(vBe,"STRONG",{});var ZEt=s(g1e);HYo=r(ZEt,"flaubert"),ZEt.forEach(t),UYo=r(vBe," \u2014 "),zz=n(vBe,"A",{href:!0});var eCt=s(zz);JYo=r(eCt,"FlaubertForTokenClassification"),eCt.forEach(t),YYo=r(vBe," (FlauBERT model)"),vBe.forEach(t),KYo=i(J),W3=n(J,"LI",{});var FBe=s(W3);h1e=n(FBe,"STRONG",{});var oCt=s(h1e);ZYo=r(oCt,"fnet"),oCt.forEach(t),eKo=r(FBe," \u2014 "),Qz=n(FBe,"A",{href:!0});var rCt=s(Qz);oKo=r(rCt,"FNetForTokenClassification"),rCt.forEach(t),rKo=r(FBe," (FNet model)"),FBe.forEach(t),tKo=i(J),H3=n(J,"LI",{});var TBe=s(H3);p1e=n(TBe,"STRONG",{});var tCt=s(p1e);aKo=r(tCt,"funnel"),tCt.forEach(t),nKo=r(TBe," \u2014 "),Wz=n(TBe,"A",{href:!0});var aCt=s(Wz);sKo=r(aCt,"FunnelForTokenClassification"),aCt.forEach(t),lKo=r(TBe," (Funnel Transformer model)"),TBe.forEach(t),iKo=i(J),U3=n(J,"LI",{});var MBe=s(U3);_1e=n(MBe,"STRONG",{});var nCt=s(_1e);dKo=r(nCt,"gpt2"),nCt.forEach(t),cKo=r(MBe," \u2014 "),Hz=n(MBe,"A",{href:!0});var sCt=s(Hz);fKo=r(sCt,"GPT2ForTokenClassification"),sCt.forEach(t),mKo=r(MBe," (OpenAI GPT-2 model)"),MBe.forEach(t),gKo=i(J),J3=n(J,"LI",{});var EBe=s(J3);u1e=n(EBe,"STRONG",{});var lCt=s(u1e);hKo=r(lCt,"ibert"),lCt.forEach(t),pKo=r(EBe," \u2014 "),Uz=n(EBe,"A",{href:!0});var iCt=s(Uz);_Ko=r(iCt,"IBertForTokenClassification"),iCt.forEach(t),uKo=r(EBe," (I-BERT model)"),EBe.forEach(t),bKo=i(J),Y3=n(J,"LI",{});var CBe=s(Y3);b1e=n(CBe,"STRONG",{});var dCt=s(b1e);vKo=r(dCt,"layoutlm"),dCt.forEach(t),FKo=r(CBe," \u2014 "),Jz=n(CBe,"A",{href:!0});var cCt=s(Jz);TKo=r(cCt,"LayoutLMForTokenClassification"),cCt.forEach(t),MKo=r(CBe," (LayoutLM model)"),CBe.forEach(t),EKo=i(J),K3=n(J,"LI",{});var wBe=s(K3);v1e=n(wBe,"STRONG",{});var fCt=s(v1e);CKo=r(fCt,"layoutlmv2"),fCt.forEach(t),wKo=r(wBe," \u2014 "),Yz=n(wBe,"A",{href:!0});var mCt=s(Yz);AKo=r(mCt,"LayoutLMv2ForTokenClassification"),mCt.forEach(t),LKo=r(wBe," (LayoutLMv2 model)"),wBe.forEach(t),yKo=i(J),Z3=n(J,"LI",{});var ABe=s(Z3);F1e=n(ABe,"STRONG",{});var gCt=s(F1e);xKo=r(gCt,"layoutlmv3"),gCt.forEach(t),$Ko=r(ABe," \u2014 "),Kz=n(ABe,"A",{href:!0});var hCt=s(Kz);kKo=r(hCt,"LayoutLMv3ForTokenClassification"),hCt.forEach(t),SKo=r(ABe," (LayoutLMv3 model)"),ABe.forEach(t),RKo=i(J),eF=n(J,"LI",{});var LBe=s(eF);T1e=n(LBe,"STRONG",{});var pCt=s(T1e);PKo=r(pCt,"longformer"),pCt.forEach(t),BKo=r(LBe," \u2014 "),Zz=n(LBe,"A",{href:!0});var _Ct=s(Zz);NKo=r(_Ct,"LongformerForTokenClassification"),_Ct.forEach(t),IKo=r(LBe," (Longformer model)"),LBe.forEach(t),qKo=i(J),oF=n(J,"LI",{});var yBe=s(oF);M1e=n(yBe,"STRONG",{});var uCt=s(M1e);jKo=r(uCt,"megatron-bert"),uCt.forEach(t),DKo=r(yBe," \u2014 "),eQ=n(yBe,"A",{href:!0});var bCt=s(eQ);GKo=r(bCt,"MegatronBertForTokenClassification"),bCt.forEach(t),OKo=r(yBe," (Megatron-BERT model)"),yBe.forEach(t),VKo=i(J),rF=n(J,"LI",{});var xBe=s(rF);E1e=n(xBe,"STRONG",{});var vCt=s(E1e);XKo=r(vCt,"mobilebert"),vCt.forEach(t),zKo=r(xBe," \u2014 "),oQ=n(xBe,"A",{href:!0});var FCt=s(oQ);QKo=r(FCt,"MobileBertForTokenClassification"),FCt.forEach(t),WKo=r(xBe," (MobileBERT model)"),xBe.forEach(t),HKo=i(J),tF=n(J,"LI",{});var $Be=s(tF);C1e=n($Be,"STRONG",{});var TCt=s(C1e);UKo=r(TCt,"mpnet"),TCt.forEach(t),JKo=r($Be," \u2014 "),rQ=n($Be,"A",{href:!0});var MCt=s(rQ);YKo=r(MCt,"MPNetForTokenClassification"),MCt.forEach(t),KKo=r($Be," (MPNet model)"),$Be.forEach(t),ZKo=i(J),aF=n(J,"LI",{});var kBe=s(aF);w1e=n(kBe,"STRONG",{});var ECt=s(w1e);eZo=r(ECt,"nezha"),ECt.forEach(t),oZo=r(kBe," \u2014 "),tQ=n(kBe,"A",{href:!0});var CCt=s(tQ);rZo=r(CCt,"NezhaForTokenClassification"),CCt.forEach(t),tZo=r(kBe," (Nezha model)"),kBe.forEach(t),aZo=i(J),nF=n(J,"LI",{});var SBe=s(nF);A1e=n(SBe,"STRONG",{});var wCt=s(A1e);nZo=r(wCt,"nystromformer"),wCt.forEach(t),sZo=r(SBe," \u2014 "),aQ=n(SBe,"A",{href:!0});var ACt=s(aQ);lZo=r(ACt,"NystromformerForTokenClassification"),ACt.forEach(t),iZo=r(SBe," (Nystr\xF6mformer model)"),SBe.forEach(t),dZo=i(J),sF=n(J,"LI",{});var RBe=s(sF);L1e=n(RBe,"STRONG",{});var LCt=s(L1e);cZo=r(LCt,"qdqbert"),LCt.forEach(t),fZo=r(RBe," \u2014 "),nQ=n(RBe,"A",{href:!0});var yCt=s(nQ);mZo=r(yCt,"QDQBertForTokenClassification"),yCt.forEach(t),gZo=r(RBe," (QDQBert model)"),RBe.forEach(t),hZo=i(J),lF=n(J,"LI",{});var PBe=s(lF);y1e=n(PBe,"STRONG",{});var xCt=s(y1e);pZo=r(xCt,"rembert"),xCt.forEach(t),_Zo=r(PBe," \u2014 "),sQ=n(PBe,"A",{href:!0});var $Ct=s(sQ);uZo=r($Ct,"RemBertForTokenClassification"),$Ct.forEach(t),bZo=r(PBe," (RemBERT model)"),PBe.forEach(t),vZo=i(J),iF=n(J,"LI",{});var BBe=s(iF);x1e=n(BBe,"STRONG",{});var kCt=s(x1e);FZo=r(kCt,"roberta"),kCt.forEach(t),TZo=r(BBe," \u2014 "),lQ=n(BBe,"A",{href:!0});var SCt=s(lQ);MZo=r(SCt,"RobertaForTokenClassification"),SCt.forEach(t),EZo=r(BBe," (RoBERTa model)"),BBe.forEach(t),CZo=i(J),dF=n(J,"LI",{});var NBe=s(dF);$1e=n(NBe,"STRONG",{});var RCt=s($1e);wZo=r(RCt,"roformer"),RCt.forEach(t),AZo=r(NBe," \u2014 "),iQ=n(NBe,"A",{href:!0});var PCt=s(iQ);LZo=r(PCt,"RoFormerForTokenClassification"),PCt.forEach(t),yZo=r(NBe," (RoFormer model)"),NBe.forEach(t),xZo=i(J),cF=n(J,"LI",{});var IBe=s(cF);k1e=n(IBe,"STRONG",{});var BCt=s(k1e);$Zo=r(BCt,"squeezebert"),BCt.forEach(t),kZo=r(IBe," \u2014 "),dQ=n(IBe,"A",{href:!0});var NCt=s(dQ);SZo=r(NCt,"SqueezeBertForTokenClassification"),NCt.forEach(t),RZo=r(IBe," (SqueezeBERT model)"),IBe.forEach(t),PZo=i(J),fF=n(J,"LI",{});var qBe=s(fF);S1e=n(qBe,"STRONG",{});var ICt=s(S1e);BZo=r(ICt,"xlm"),ICt.forEach(t),NZo=r(qBe," \u2014 "),cQ=n(qBe,"A",{href:!0});var qCt=s(cQ);IZo=r(qCt,"XLMForTokenClassification"),qCt.forEach(t),qZo=r(qBe," (XLM model)"),qBe.forEach(t),jZo=i(J),mF=n(J,"LI",{});var jBe=s(mF);R1e=n(jBe,"STRONG",{});var jCt=s(R1e);DZo=r(jCt,"xlm-roberta"),jCt.forEach(t),GZo=r(jBe," \u2014 "),fQ=n(jBe,"A",{href:!0});var DCt=s(fQ);OZo=r(DCt,"XLMRobertaForTokenClassification"),DCt.forEach(t),VZo=r(jBe," (XLM-RoBERTa model)"),jBe.forEach(t),XZo=i(J),gF=n(J,"LI",{});var DBe=s(gF);P1e=n(DBe,"STRONG",{});var GCt=s(P1e);zZo=r(GCt,"xlm-roberta-xl"),GCt.forEach(t),QZo=r(DBe," \u2014 "),mQ=n(DBe,"A",{href:!0});var OCt=s(mQ);WZo=r(OCt,"XLMRobertaXLForTokenClassification"),OCt.forEach(t),HZo=r(DBe," (XLM-RoBERTa-XL model)"),DBe.forEach(t),UZo=i(J),hF=n(J,"LI",{});var GBe=s(hF);B1e=n(GBe,"STRONG",{});var VCt=s(B1e);JZo=r(VCt,"xlnet"),VCt.forEach(t),YZo=r(GBe," \u2014 "),gQ=n(GBe,"A",{href:!0});var XCt=s(gQ);KZo=r(XCt,"XLNetForTokenClassification"),XCt.forEach(t),ZZo=r(GBe," (XLNet model)"),GBe.forEach(t),eer=i(J),pF=n(J,"LI",{});var OBe=s(pF);N1e=n(OBe,"STRONG",{});var zCt=s(N1e);oer=r(zCt,"yoso"),zCt.forEach(t),rer=r(OBe," \u2014 "),hQ=n(OBe,"A",{href:!0});var QCt=s(hQ);ter=r(QCt,"YosoForTokenClassification"),QCt.forEach(t),aer=r(OBe," (YOSO model)"),OBe.forEach(t),J.forEach(t),ner=i(pa),_F=n(pa,"P",{});var VBe=s(_F);ser=r(VBe,"The model is set in evaluation mode by default using "),I1e=n(VBe,"CODE",{});var WCt=s(I1e);ler=r(WCt,"model.eval()"),WCt.forEach(t),ier=r(VBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q1e=n(VBe,"CODE",{});var HCt=s(q1e);der=r(HCt,"model.train()"),HCt.forEach(t),VBe.forEach(t),cer=i(pa),T(uF.$$.fragment,pa),pa.forEach(t),dl.forEach(t),EXe=i(f),gd=n(f,"H2",{class:!0});var xQe=s(gd);bF=n(xQe,"A",{id:!0,class:!0,href:!0});var UCt=s(bF);j1e=n(UCt,"SPAN",{});var JCt=s(j1e);T(Fy.$$.fragment,JCt),JCt.forEach(t),UCt.forEach(t),fer=i(xQe),D1e=n(xQe,"SPAN",{});var YCt=s(D1e);mer=r(YCt,"AutoModelForQuestionAnswering"),YCt.forEach(t),xQe.forEach(t),CXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(Ty.$$.fragment,cl),ger=i(cl),hd=n(cl,"P",{});var zre=s(hd);her=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=n(zre,"A",{href:!0});var KCt=s(pQ);per=r(KCt,"from_pretrained()"),KCt.forEach(t),_er=r(zre," class method or the "),_Q=n(zre,"A",{href:!0});var ZCt=s(_Q);uer=r(ZCt,"from_config()"),ZCt.forEach(t),ber=r(zre,` class
method.`),zre.forEach(t),ver=i(cl),My=n(cl,"P",{});var $Qe=s(My);Fer=r($Qe,"This class cannot be instantiated directly using "),G1e=n($Qe,"CODE",{});var e5t=s(G1e);Ter=r(e5t,"__init__()"),e5t.forEach(t),Mer=r($Qe," (throws an error)."),$Qe.forEach(t),Eer=i(cl),_t=n(cl,"DIV",{class:!0});var w6=s(_t);T(Ey.$$.fragment,w6),Cer=i(w6),O1e=n(w6,"P",{});var o5t=s(O1e);wer=r(o5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o5t.forEach(t),Aer=i(w6),pd=n(w6,"P",{});var Qre=s(pd);Ler=r(Qre,`Note:
Loading a model from its configuration file does `),V1e=n(Qre,"STRONG",{});var r5t=s(V1e);yer=r(r5t,"not"),r5t.forEach(t),xer=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(Qre,"A",{href:!0});var t5t=s(uQ);$er=r(t5t,"from_pretrained()"),t5t.forEach(t),ker=r(Qre," to load the model weights."),Qre.forEach(t),Ser=i(w6),T(vF.$$.fragment,w6),w6.forEach(t),Rer=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(Cy.$$.fragment,_a),Per=i(_a),X1e=n(_a,"P",{});var a5t=s(X1e);Ber=r(a5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a5t.forEach(t),Ner=i(_a),za=n(_a,"P",{});var A6=s(za);Ier=r(A6,"The model class to instantiate is selected based on the "),z1e=n(A6,"CODE",{});var n5t=s(z1e);qer=r(n5t,"model_type"),n5t.forEach(t),jer=r(A6,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(A6,"CODE",{});var s5t=s(Q1e);Der=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),Ger=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W1e=n(A6,"CODE",{});var l5t=s(W1e);Oer=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Ver=r(A6,":"),A6.forEach(t),Xer=i(_a),V=n(_a,"UL",{});var X=s(V);FF=n(X,"LI",{});var XBe=s(FF);H1e=n(XBe,"STRONG",{});var i5t=s(H1e);zer=r(i5t,"albert"),i5t.forEach(t),Qer=r(XBe," \u2014 "),bQ=n(XBe,"A",{href:!0});var d5t=s(bQ);Wer=r(d5t,"AlbertForQuestionAnswering"),d5t.forEach(t),Her=r(XBe," (ALBERT model)"),XBe.forEach(t),Uer=i(X),TF=n(X,"LI",{});var zBe=s(TF);U1e=n(zBe,"STRONG",{});var c5t=s(U1e);Jer=r(c5t,"bart"),c5t.forEach(t),Yer=r(zBe," \u2014 "),vQ=n(zBe,"A",{href:!0});var f5t=s(vQ);Ker=r(f5t,"BartForQuestionAnswering"),f5t.forEach(t),Zer=r(zBe," (BART model)"),zBe.forEach(t),eor=i(X),MF=n(X,"LI",{});var QBe=s(MF);J1e=n(QBe,"STRONG",{});var m5t=s(J1e);oor=r(m5t,"bert"),m5t.forEach(t),ror=r(QBe," \u2014 "),FQ=n(QBe,"A",{href:!0});var g5t=s(FQ);tor=r(g5t,"BertForQuestionAnswering"),g5t.forEach(t),aor=r(QBe," (BERT model)"),QBe.forEach(t),nor=i(X),EF=n(X,"LI",{});var WBe=s(EF);Y1e=n(WBe,"STRONG",{});var h5t=s(Y1e);sor=r(h5t,"big_bird"),h5t.forEach(t),lor=r(WBe," \u2014 "),TQ=n(WBe,"A",{href:!0});var p5t=s(TQ);ior=r(p5t,"BigBirdForQuestionAnswering"),p5t.forEach(t),dor=r(WBe," (BigBird model)"),WBe.forEach(t),cor=i(X),CF=n(X,"LI",{});var HBe=s(CF);K1e=n(HBe,"STRONG",{});var _5t=s(K1e);mor=r(_5t,"bigbird_pegasus"),_5t.forEach(t),gor=r(HBe," \u2014 "),MQ=n(HBe,"A",{href:!0});var u5t=s(MQ);hor=r(u5t,"BigBirdPegasusForQuestionAnswering"),u5t.forEach(t),por=r(HBe," (BigBird-Pegasus model)"),HBe.forEach(t),_or=i(X),wF=n(X,"LI",{});var UBe=s(wF);Z1e=n(UBe,"STRONG",{});var b5t=s(Z1e);uor=r(b5t,"camembert"),b5t.forEach(t),bor=r(UBe," \u2014 "),EQ=n(UBe,"A",{href:!0});var v5t=s(EQ);vor=r(v5t,"CamembertForQuestionAnswering"),v5t.forEach(t),For=r(UBe," (CamemBERT model)"),UBe.forEach(t),Tor=i(X),AF=n(X,"LI",{});var JBe=s(AF);e2e=n(JBe,"STRONG",{});var F5t=s(e2e);Mor=r(F5t,"canine"),F5t.forEach(t),Eor=r(JBe," \u2014 "),CQ=n(JBe,"A",{href:!0});var T5t=s(CQ);Cor=r(T5t,"CanineForQuestionAnswering"),T5t.forEach(t),wor=r(JBe," (CANINE model)"),JBe.forEach(t),Aor=i(X),LF=n(X,"LI",{});var YBe=s(LF);o2e=n(YBe,"STRONG",{});var M5t=s(o2e);Lor=r(M5t,"convbert"),M5t.forEach(t),yor=r(YBe," \u2014 "),wQ=n(YBe,"A",{href:!0});var E5t=s(wQ);xor=r(E5t,"ConvBertForQuestionAnswering"),E5t.forEach(t),$or=r(YBe," (ConvBERT model)"),YBe.forEach(t),kor=i(X),yF=n(X,"LI",{});var KBe=s(yF);r2e=n(KBe,"STRONG",{});var C5t=s(r2e);Sor=r(C5t,"data2vec-text"),C5t.forEach(t),Ror=r(KBe," \u2014 "),AQ=n(KBe,"A",{href:!0});var w5t=s(AQ);Por=r(w5t,"Data2VecTextForQuestionAnswering"),w5t.forEach(t),Bor=r(KBe," (Data2VecText model)"),KBe.forEach(t),Nor=i(X),xF=n(X,"LI",{});var ZBe=s(xF);t2e=n(ZBe,"STRONG",{});var A5t=s(t2e);Ior=r(A5t,"deberta"),A5t.forEach(t),qor=r(ZBe," \u2014 "),LQ=n(ZBe,"A",{href:!0});var L5t=s(LQ);jor=r(L5t,"DebertaForQuestionAnswering"),L5t.forEach(t),Dor=r(ZBe," (DeBERTa model)"),ZBe.forEach(t),Gor=i(X),$F=n(X,"LI",{});var eNe=s($F);a2e=n(eNe,"STRONG",{});var y5t=s(a2e);Oor=r(y5t,"deberta-v2"),y5t.forEach(t),Vor=r(eNe," \u2014 "),yQ=n(eNe,"A",{href:!0});var x5t=s(yQ);Xor=r(x5t,"DebertaV2ForQuestionAnswering"),x5t.forEach(t),zor=r(eNe," (DeBERTa-v2 model)"),eNe.forEach(t),Qor=i(X),kF=n(X,"LI",{});var oNe=s(kF);n2e=n(oNe,"STRONG",{});var $5t=s(n2e);Wor=r($5t,"distilbert"),$5t.forEach(t),Hor=r(oNe," \u2014 "),xQ=n(oNe,"A",{href:!0});var k5t=s(xQ);Uor=r(k5t,"DistilBertForQuestionAnswering"),k5t.forEach(t),Jor=r(oNe," (DistilBERT model)"),oNe.forEach(t),Yor=i(X),SF=n(X,"LI",{});var rNe=s(SF);s2e=n(rNe,"STRONG",{});var S5t=s(s2e);Kor=r(S5t,"electra"),S5t.forEach(t),Zor=r(rNe," \u2014 "),$Q=n(rNe,"A",{href:!0});var R5t=s($Q);err=r(R5t,"ElectraForQuestionAnswering"),R5t.forEach(t),orr=r(rNe," (ELECTRA model)"),rNe.forEach(t),rrr=i(X),RF=n(X,"LI",{});var tNe=s(RF);l2e=n(tNe,"STRONG",{});var P5t=s(l2e);trr=r(P5t,"flaubert"),P5t.forEach(t),arr=r(tNe," \u2014 "),kQ=n(tNe,"A",{href:!0});var B5t=s(kQ);nrr=r(B5t,"FlaubertForQuestionAnsweringSimple"),B5t.forEach(t),srr=r(tNe," (FlauBERT model)"),tNe.forEach(t),lrr=i(X),PF=n(X,"LI",{});var aNe=s(PF);i2e=n(aNe,"STRONG",{});var N5t=s(i2e);irr=r(N5t,"fnet"),N5t.forEach(t),drr=r(aNe," \u2014 "),SQ=n(aNe,"A",{href:!0});var I5t=s(SQ);crr=r(I5t,"FNetForQuestionAnswering"),I5t.forEach(t),frr=r(aNe," (FNet model)"),aNe.forEach(t),mrr=i(X),BF=n(X,"LI",{});var nNe=s(BF);d2e=n(nNe,"STRONG",{});var q5t=s(d2e);grr=r(q5t,"funnel"),q5t.forEach(t),hrr=r(nNe," \u2014 "),RQ=n(nNe,"A",{href:!0});var j5t=s(RQ);prr=r(j5t,"FunnelForQuestionAnswering"),j5t.forEach(t),_rr=r(nNe," (Funnel Transformer model)"),nNe.forEach(t),urr=i(X),NF=n(X,"LI",{});var sNe=s(NF);c2e=n(sNe,"STRONG",{});var D5t=s(c2e);brr=r(D5t,"gptj"),D5t.forEach(t),vrr=r(sNe," \u2014 "),PQ=n(sNe,"A",{href:!0});var G5t=s(PQ);Frr=r(G5t,"GPTJForQuestionAnswering"),G5t.forEach(t),Trr=r(sNe," (GPT-J model)"),sNe.forEach(t),Mrr=i(X),IF=n(X,"LI",{});var lNe=s(IF);f2e=n(lNe,"STRONG",{});var O5t=s(f2e);Err=r(O5t,"ibert"),O5t.forEach(t),Crr=r(lNe," \u2014 "),BQ=n(lNe,"A",{href:!0});var V5t=s(BQ);wrr=r(V5t,"IBertForQuestionAnswering"),V5t.forEach(t),Arr=r(lNe," (I-BERT model)"),lNe.forEach(t),Lrr=i(X),qF=n(X,"LI",{});var iNe=s(qF);m2e=n(iNe,"STRONG",{});var X5t=s(m2e);yrr=r(X5t,"layoutlmv2"),X5t.forEach(t),xrr=r(iNe," \u2014 "),NQ=n(iNe,"A",{href:!0});var z5t=s(NQ);$rr=r(z5t,"LayoutLMv2ForQuestionAnswering"),z5t.forEach(t),krr=r(iNe," (LayoutLMv2 model)"),iNe.forEach(t),Srr=i(X),jF=n(X,"LI",{});var dNe=s(jF);g2e=n(dNe,"STRONG",{});var Q5t=s(g2e);Rrr=r(Q5t,"layoutlmv3"),Q5t.forEach(t),Prr=r(dNe," \u2014 "),IQ=n(dNe,"A",{href:!0});var W5t=s(IQ);Brr=r(W5t,"LayoutLMv3ForQuestionAnswering"),W5t.forEach(t),Nrr=r(dNe," (LayoutLMv3 model)"),dNe.forEach(t),Irr=i(X),DF=n(X,"LI",{});var cNe=s(DF);h2e=n(cNe,"STRONG",{});var H5t=s(h2e);qrr=r(H5t,"led"),H5t.forEach(t),jrr=r(cNe," \u2014 "),qQ=n(cNe,"A",{href:!0});var U5t=s(qQ);Drr=r(U5t,"LEDForQuestionAnswering"),U5t.forEach(t),Grr=r(cNe," (LED model)"),cNe.forEach(t),Orr=i(X),GF=n(X,"LI",{});var fNe=s(GF);p2e=n(fNe,"STRONG",{});var J5t=s(p2e);Vrr=r(J5t,"longformer"),J5t.forEach(t),Xrr=r(fNe," \u2014 "),jQ=n(fNe,"A",{href:!0});var Y5t=s(jQ);zrr=r(Y5t,"LongformerForQuestionAnswering"),Y5t.forEach(t),Qrr=r(fNe," (Longformer model)"),fNe.forEach(t),Wrr=i(X),OF=n(X,"LI",{});var mNe=s(OF);_2e=n(mNe,"STRONG",{});var K5t=s(_2e);Hrr=r(K5t,"lxmert"),K5t.forEach(t),Urr=r(mNe," \u2014 "),DQ=n(mNe,"A",{href:!0});var Z5t=s(DQ);Jrr=r(Z5t,"LxmertForQuestionAnswering"),Z5t.forEach(t),Yrr=r(mNe," (LXMERT model)"),mNe.forEach(t),Krr=i(X),VF=n(X,"LI",{});var gNe=s(VF);u2e=n(gNe,"STRONG",{});var e0t=s(u2e);Zrr=r(e0t,"mbart"),e0t.forEach(t),etr=r(gNe," \u2014 "),GQ=n(gNe,"A",{href:!0});var o0t=s(GQ);otr=r(o0t,"MBartForQuestionAnswering"),o0t.forEach(t),rtr=r(gNe," (mBART model)"),gNe.forEach(t),ttr=i(X),XF=n(X,"LI",{});var hNe=s(XF);b2e=n(hNe,"STRONG",{});var r0t=s(b2e);atr=r(r0t,"megatron-bert"),r0t.forEach(t),ntr=r(hNe," \u2014 "),OQ=n(hNe,"A",{href:!0});var t0t=s(OQ);str=r(t0t,"MegatronBertForQuestionAnswering"),t0t.forEach(t),ltr=r(hNe," (Megatron-BERT model)"),hNe.forEach(t),itr=i(X),zF=n(X,"LI",{});var pNe=s(zF);v2e=n(pNe,"STRONG",{});var a0t=s(v2e);dtr=r(a0t,"mobilebert"),a0t.forEach(t),ctr=r(pNe," \u2014 "),VQ=n(pNe,"A",{href:!0});var n0t=s(VQ);ftr=r(n0t,"MobileBertForQuestionAnswering"),n0t.forEach(t),mtr=r(pNe," (MobileBERT model)"),pNe.forEach(t),gtr=i(X),QF=n(X,"LI",{});var _Ne=s(QF);F2e=n(_Ne,"STRONG",{});var s0t=s(F2e);htr=r(s0t,"mpnet"),s0t.forEach(t),ptr=r(_Ne," \u2014 "),XQ=n(_Ne,"A",{href:!0});var l0t=s(XQ);_tr=r(l0t,"MPNetForQuestionAnswering"),l0t.forEach(t),utr=r(_Ne," (MPNet model)"),_Ne.forEach(t),btr=i(X),WF=n(X,"LI",{});var uNe=s(WF);T2e=n(uNe,"STRONG",{});var i0t=s(T2e);vtr=r(i0t,"mvp"),i0t.forEach(t),Ftr=r(uNe," \u2014 "),zQ=n(uNe,"A",{href:!0});var d0t=s(zQ);Ttr=r(d0t,"MvpForQuestionAnswering"),d0t.forEach(t),Mtr=r(uNe," (MVP model)"),uNe.forEach(t),Etr=i(X),HF=n(X,"LI",{});var bNe=s(HF);M2e=n(bNe,"STRONG",{});var c0t=s(M2e);Ctr=r(c0t,"nezha"),c0t.forEach(t),wtr=r(bNe," \u2014 "),QQ=n(bNe,"A",{href:!0});var f0t=s(QQ);Atr=r(f0t,"NezhaForQuestionAnswering"),f0t.forEach(t),Ltr=r(bNe," (Nezha model)"),bNe.forEach(t),ytr=i(X),UF=n(X,"LI",{});var vNe=s(UF);E2e=n(vNe,"STRONG",{});var m0t=s(E2e);xtr=r(m0t,"nystromformer"),m0t.forEach(t),$tr=r(vNe," \u2014 "),WQ=n(vNe,"A",{href:!0});var g0t=s(WQ);ktr=r(g0t,"NystromformerForQuestionAnswering"),g0t.forEach(t),Str=r(vNe," (Nystr\xF6mformer model)"),vNe.forEach(t),Rtr=i(X),JF=n(X,"LI",{});var FNe=s(JF);C2e=n(FNe,"STRONG",{});var h0t=s(C2e);Ptr=r(h0t,"qdqbert"),h0t.forEach(t),Btr=r(FNe," \u2014 "),HQ=n(FNe,"A",{href:!0});var p0t=s(HQ);Ntr=r(p0t,"QDQBertForQuestionAnswering"),p0t.forEach(t),Itr=r(FNe," (QDQBert model)"),FNe.forEach(t),qtr=i(X),YF=n(X,"LI",{});var TNe=s(YF);w2e=n(TNe,"STRONG",{});var _0t=s(w2e);jtr=r(_0t,"reformer"),_0t.forEach(t),Dtr=r(TNe," \u2014 "),UQ=n(TNe,"A",{href:!0});var u0t=s(UQ);Gtr=r(u0t,"ReformerForQuestionAnswering"),u0t.forEach(t),Otr=r(TNe," (Reformer model)"),TNe.forEach(t),Vtr=i(X),KF=n(X,"LI",{});var MNe=s(KF);A2e=n(MNe,"STRONG",{});var b0t=s(A2e);Xtr=r(b0t,"rembert"),b0t.forEach(t),ztr=r(MNe," \u2014 "),JQ=n(MNe,"A",{href:!0});var v0t=s(JQ);Qtr=r(v0t,"RemBertForQuestionAnswering"),v0t.forEach(t),Wtr=r(MNe," (RemBERT model)"),MNe.forEach(t),Htr=i(X),ZF=n(X,"LI",{});var ENe=s(ZF);L2e=n(ENe,"STRONG",{});var F0t=s(L2e);Utr=r(F0t,"roberta"),F0t.forEach(t),Jtr=r(ENe," \u2014 "),YQ=n(ENe,"A",{href:!0});var T0t=s(YQ);Ytr=r(T0t,"RobertaForQuestionAnswering"),T0t.forEach(t),Ktr=r(ENe," (RoBERTa model)"),ENe.forEach(t),Ztr=i(X),eT=n(X,"LI",{});var CNe=s(eT);y2e=n(CNe,"STRONG",{});var M0t=s(y2e);ear=r(M0t,"roformer"),M0t.forEach(t),oar=r(CNe," \u2014 "),KQ=n(CNe,"A",{href:!0});var E0t=s(KQ);rar=r(E0t,"RoFormerForQuestionAnswering"),E0t.forEach(t),tar=r(CNe," (RoFormer model)"),CNe.forEach(t),aar=i(X),oT=n(X,"LI",{});var wNe=s(oT);x2e=n(wNe,"STRONG",{});var C0t=s(x2e);nar=r(C0t,"splinter"),C0t.forEach(t),sar=r(wNe," \u2014 "),ZQ=n(wNe,"A",{href:!0});var w0t=s(ZQ);lar=r(w0t,"SplinterForQuestionAnswering"),w0t.forEach(t),iar=r(wNe," (Splinter model)"),wNe.forEach(t),dar=i(X),rT=n(X,"LI",{});var ANe=s(rT);$2e=n(ANe,"STRONG",{});var A0t=s($2e);car=r(A0t,"squeezebert"),A0t.forEach(t),far=r(ANe," \u2014 "),eW=n(ANe,"A",{href:!0});var L0t=s(eW);mar=r(L0t,"SqueezeBertForQuestionAnswering"),L0t.forEach(t),gar=r(ANe," (SqueezeBERT model)"),ANe.forEach(t),har=i(X),tT=n(X,"LI",{});var LNe=s(tT);k2e=n(LNe,"STRONG",{});var y0t=s(k2e);par=r(y0t,"xlm"),y0t.forEach(t),_ar=r(LNe," \u2014 "),oW=n(LNe,"A",{href:!0});var x0t=s(oW);uar=r(x0t,"XLMForQuestionAnsweringSimple"),x0t.forEach(t),bar=r(LNe," (XLM model)"),LNe.forEach(t),Far=i(X),aT=n(X,"LI",{});var yNe=s(aT);S2e=n(yNe,"STRONG",{});var $0t=s(S2e);Tar=r($0t,"xlm-roberta"),$0t.forEach(t),Mar=r(yNe," \u2014 "),rW=n(yNe,"A",{href:!0});var k0t=s(rW);Ear=r(k0t,"XLMRobertaForQuestionAnswering"),k0t.forEach(t),Car=r(yNe," (XLM-RoBERTa model)"),yNe.forEach(t),war=i(X),nT=n(X,"LI",{});var xNe=s(nT);R2e=n(xNe,"STRONG",{});var S0t=s(R2e);Aar=r(S0t,"xlm-roberta-xl"),S0t.forEach(t),Lar=r(xNe," \u2014 "),tW=n(xNe,"A",{href:!0});var R0t=s(tW);yar=r(R0t,"XLMRobertaXLForQuestionAnswering"),R0t.forEach(t),xar=r(xNe," (XLM-RoBERTa-XL model)"),xNe.forEach(t),$ar=i(X),sT=n(X,"LI",{});var $Ne=s(sT);P2e=n($Ne,"STRONG",{});var P0t=s(P2e);kar=r(P0t,"xlnet"),P0t.forEach(t),Sar=r($Ne," \u2014 "),aW=n($Ne,"A",{href:!0});var B0t=s(aW);Rar=r(B0t,"XLNetForQuestionAnsweringSimple"),B0t.forEach(t),Par=r($Ne," (XLNet model)"),$Ne.forEach(t),Bar=i(X),lT=n(X,"LI",{});var kNe=s(lT);B2e=n(kNe,"STRONG",{});var N0t=s(B2e);Nar=r(N0t,"yoso"),N0t.forEach(t),Iar=r(kNe," \u2014 "),nW=n(kNe,"A",{href:!0});var I0t=s(nW);qar=r(I0t,"YosoForQuestionAnswering"),I0t.forEach(t),jar=r(kNe," (YOSO model)"),kNe.forEach(t),X.forEach(t),Dar=i(_a),iT=n(_a,"P",{});var SNe=s(iT);Gar=r(SNe,"The model is set in evaluation mode by default using "),N2e=n(SNe,"CODE",{});var q0t=s(N2e);Oar=r(q0t,"model.eval()"),q0t.forEach(t),Var=r(SNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(SNe,"CODE",{});var j0t=s(I2e);Xar=r(j0t,"model.train()"),j0t.forEach(t),SNe.forEach(t),zar=i(_a),T(dT.$$.fragment,_a),_a.forEach(t),cl.forEach(t),wXe=i(f),_d=n(f,"H2",{class:!0});var kQe=s(_d);cT=n(kQe,"A",{id:!0,class:!0,href:!0});var D0t=s(cT);q2e=n(D0t,"SPAN",{});var G0t=s(q2e);T(wy.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),Qar=i(kQe),j2e=n(kQe,"SPAN",{});var O0t=s(j2e);War=r(O0t,"AutoModelForTableQuestionAnswering"),O0t.forEach(t),kQe.forEach(t),AXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(Ay.$$.fragment,fl),Har=i(fl),ud=n(fl,"P",{});var Wre=s(ud);Uar=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sW=n(Wre,"A",{href:!0});var V0t=s(sW);Jar=r(V0t,"from_pretrained()"),V0t.forEach(t),Yar=r(Wre," class method or the "),lW=n(Wre,"A",{href:!0});var X0t=s(lW);Kar=r(X0t,"from_config()"),X0t.forEach(t),Zar=r(Wre,` class
method.`),Wre.forEach(t),enr=i(fl),Ly=n(fl,"P",{});var SQe=s(Ly);onr=r(SQe,"This class cannot be instantiated directly using "),D2e=n(SQe,"CODE",{});var z0t=s(D2e);rnr=r(z0t,"__init__()"),z0t.forEach(t),tnr=r(SQe," (throws an error)."),SQe.forEach(t),anr=i(fl),ut=n(fl,"DIV",{class:!0});var L6=s(ut);T(yy.$$.fragment,L6),nnr=i(L6),G2e=n(L6,"P",{});var Q0t=s(G2e);snr=r(Q0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Q0t.forEach(t),lnr=i(L6),bd=n(L6,"P",{});var Hre=s(bd);inr=r(Hre,`Note:
Loading a model from its configuration file does `),O2e=n(Hre,"STRONG",{});var W0t=s(O2e);dnr=r(W0t,"not"),W0t.forEach(t),cnr=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Hre,"A",{href:!0});var H0t=s(iW);fnr=r(H0t,"from_pretrained()"),H0t.forEach(t),mnr=r(Hre," to load the model weights."),Hre.forEach(t),gnr=i(L6),T(fT.$$.fragment,L6),L6.forEach(t),hnr=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(xy.$$.fragment,ua),pnr=i(ua),V2e=n(ua,"P",{});var U0t=s(V2e);_nr=r(U0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),U0t.forEach(t),unr=i(ua),Qa=n(ua,"P",{});var y6=s(Qa);bnr=r(y6,"The model class to instantiate is selected based on the "),X2e=n(y6,"CODE",{});var J0t=s(X2e);vnr=r(J0t,"model_type"),J0t.forEach(t),Fnr=r(y6,` property of the config object (either
passed as an argument or loaded from `),z2e=n(y6,"CODE",{});var Y0t=s(z2e);Tnr=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),Mnr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(y6,"CODE",{});var K0t=s(Q2e);Enr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),Cnr=r(y6,":"),y6.forEach(t),wnr=i(ua),W2e=n(ua,"UL",{});var Z0t=s(W2e);mT=n(Z0t,"LI",{});var RNe=s(mT);H2e=n(RNe,"STRONG",{});var ewt=s(H2e);Anr=r(ewt,"tapas"),ewt.forEach(t),Lnr=r(RNe," \u2014 "),dW=n(RNe,"A",{href:!0});var owt=s(dW);ynr=r(owt,"TapasForQuestionAnswering"),owt.forEach(t),xnr=r(RNe," (TAPAS model)"),RNe.forEach(t),Z0t.forEach(t),$nr=i(ua),gT=n(ua,"P",{});var PNe=s(gT);knr=r(PNe,"The model is set in evaluation mode by default using "),U2e=n(PNe,"CODE",{});var rwt=s(U2e);Snr=r(rwt,"model.eval()"),rwt.forEach(t),Rnr=r(PNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=n(PNe,"CODE",{});var twt=s(J2e);Pnr=r(twt,"model.train()"),twt.forEach(t),PNe.forEach(t),Bnr=i(ua),T(hT.$$.fragment,ua),ua.forEach(t),fl.forEach(t),LXe=i(f),vd=n(f,"H2",{class:!0});var RQe=s(vd);pT=n(RQe,"A",{id:!0,class:!0,href:!0});var awt=s(pT);Y2e=n(awt,"SPAN",{});var nwt=s(Y2e);T($y.$$.fragment,nwt),nwt.forEach(t),awt.forEach(t),Nnr=i(RQe),K2e=n(RQe,"SPAN",{});var swt=s(K2e);Inr=r(swt,"AutoModelForImageClassification"),swt.forEach(t),RQe.forEach(t),yXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(ky.$$.fragment,ml),qnr=i(ml),Fd=n(ml,"P",{});var Ure=s(Fd);jnr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cW=n(Ure,"A",{href:!0});var lwt=s(cW);Dnr=r(lwt,"from_pretrained()"),lwt.forEach(t),Gnr=r(Ure," class method or the "),fW=n(Ure,"A",{href:!0});var iwt=s(fW);Onr=r(iwt,"from_config()"),iwt.forEach(t),Vnr=r(Ure,` class
method.`),Ure.forEach(t),Xnr=i(ml),Sy=n(ml,"P",{});var PQe=s(Sy);znr=r(PQe,"This class cannot be instantiated directly using "),Z2e=n(PQe,"CODE",{});var dwt=s(Z2e);Qnr=r(dwt,"__init__()"),dwt.forEach(t),Wnr=r(PQe," (throws an error)."),PQe.forEach(t),Hnr=i(ml),bt=n(ml,"DIV",{class:!0});var x6=s(bt);T(Ry.$$.fragment,x6),Unr=i(x6),ebe=n(x6,"P",{});var cwt=s(ebe);Jnr=r(cwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cwt.forEach(t),Ynr=i(x6),Td=n(x6,"P",{});var Jre=s(Td);Knr=r(Jre,`Note:
Loading a model from its configuration file does `),obe=n(Jre,"STRONG",{});var fwt=s(obe);Znr=r(fwt,"not"),fwt.forEach(t),esr=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Jre,"A",{href:!0});var mwt=s(mW);osr=r(mwt,"from_pretrained()"),mwt.forEach(t),rsr=r(Jre," to load the model weights."),Jre.forEach(t),tsr=i(x6),T(_T.$$.fragment,x6),x6.forEach(t),asr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(Py.$$.fragment,ba),nsr=i(ba),rbe=n(ba,"P",{});var gwt=s(rbe);ssr=r(gwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gwt.forEach(t),lsr=i(ba),Wa=n(ba,"P",{});var $6=s(Wa);isr=r($6,"The model class to instantiate is selected based on the "),tbe=n($6,"CODE",{});var hwt=s(tbe);dsr=r(hwt,"model_type"),hwt.forEach(t),csr=r($6,` property of the config object (either
passed as an argument or loaded from `),abe=n($6,"CODE",{});var pwt=s(abe);fsr=r(pwt,"pretrained_model_name_or_path"),pwt.forEach(t),msr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n($6,"CODE",{});var _wt=s(nbe);gsr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),hsr=r($6,":"),$6.forEach(t),psr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);uT=n(Te,"LI",{});var BNe=s(uT);sbe=n(BNe,"STRONG",{});var uwt=s(sbe);_sr=r(uwt,"beit"),uwt.forEach(t),usr=r(BNe," \u2014 "),gW=n(BNe,"A",{href:!0});var bwt=s(gW);bsr=r(bwt,"BeitForImageClassification"),bwt.forEach(t),vsr=r(BNe," (BEiT model)"),BNe.forEach(t),Fsr=i(Te),bT=n(Te,"LI",{});var NNe=s(bT);lbe=n(NNe,"STRONG",{});var vwt=s(lbe);Tsr=r(vwt,"convnext"),vwt.forEach(t),Msr=r(NNe," \u2014 "),hW=n(NNe,"A",{href:!0});var Fwt=s(hW);Esr=r(Fwt,"ConvNextForImageClassification"),Fwt.forEach(t),Csr=r(NNe," (ConvNeXT model)"),NNe.forEach(t),wsr=i(Te),vT=n(Te,"LI",{});var INe=s(vT);ibe=n(INe,"STRONG",{});var Twt=s(ibe);Asr=r(Twt,"cvt"),Twt.forEach(t),Lsr=r(INe," \u2014 "),pW=n(INe,"A",{href:!0});var Mwt=s(pW);ysr=r(Mwt,"CvtForImageClassification"),Mwt.forEach(t),xsr=r(INe," (CvT model)"),INe.forEach(t),$sr=i(Te),FT=n(Te,"LI",{});var qNe=s(FT);dbe=n(qNe,"STRONG",{});var Ewt=s(dbe);ksr=r(Ewt,"data2vec-vision"),Ewt.forEach(t),Ssr=r(qNe," \u2014 "),_W=n(qNe,"A",{href:!0});var Cwt=s(_W);Rsr=r(Cwt,"Data2VecVisionForImageClassification"),Cwt.forEach(t),Psr=r(qNe," (Data2VecVision model)"),qNe.forEach(t),Bsr=i(Te),Hs=n(Te,"LI",{});var $S=s(Hs);cbe=n($S,"STRONG",{});var wwt=s(cbe);Nsr=r(wwt,"deit"),wwt.forEach(t),Isr=r($S," \u2014 "),uW=n($S,"A",{href:!0});var Awt=s(uW);qsr=r(Awt,"DeiTForImageClassification"),Awt.forEach(t),jsr=r($S," or "),bW=n($S,"A",{href:!0});var Lwt=s(bW);Dsr=r(Lwt,"DeiTForImageClassificationWithTeacher"),Lwt.forEach(t),Gsr=r($S," (DeiT model)"),$S.forEach(t),Osr=i(Te),TT=n(Te,"LI",{});var jNe=s(TT);fbe=n(jNe,"STRONG",{});var ywt=s(fbe);Vsr=r(ywt,"imagegpt"),ywt.forEach(t),Xsr=r(jNe," \u2014 "),vW=n(jNe,"A",{href:!0});var xwt=s(vW);zsr=r(xwt,"ImageGPTForImageClassification"),xwt.forEach(t),Qsr=r(jNe," (ImageGPT model)"),jNe.forEach(t),Wsr=i(Te),Us=n(Te,"LI",{});var kS=s(Us);mbe=n(kS,"STRONG",{});var $wt=s(mbe);Hsr=r($wt,"levit"),$wt.forEach(t),Usr=r(kS," \u2014 "),FW=n(kS,"A",{href:!0});var kwt=s(FW);Jsr=r(kwt,"LevitForImageClassification"),kwt.forEach(t),Ysr=r(kS," or "),TW=n(kS,"A",{href:!0});var Swt=s(TW);Ksr=r(Swt,"LevitForImageClassificationWithTeacher"),Swt.forEach(t),Zsr=r(kS," (LeViT model)"),kS.forEach(t),elr=i(Te),MT=n(Te,"LI",{});var DNe=s(MT);gbe=n(DNe,"STRONG",{});var Rwt=s(gbe);olr=r(Rwt,"mobilevit"),Rwt.forEach(t),rlr=r(DNe," \u2014 "),MW=n(DNe,"A",{href:!0});var Pwt=s(MW);tlr=r(Pwt,"MobileViTForImageClassification"),Pwt.forEach(t),alr=r(DNe," (MobileViT model)"),DNe.forEach(t),nlr=i(Te),vt=n(Te,"LI",{});var Sf=s(vt);hbe=n(Sf,"STRONG",{});var Bwt=s(hbe);slr=r(Bwt,"perceiver"),Bwt.forEach(t),llr=r(Sf," \u2014 "),EW=n(Sf,"A",{href:!0});var Nwt=s(EW);ilr=r(Nwt,"PerceiverForImageClassificationLearned"),Nwt.forEach(t),dlr=r(Sf," or "),CW=n(Sf,"A",{href:!0});var Iwt=s(CW);clr=r(Iwt,"PerceiverForImageClassificationFourier"),Iwt.forEach(t),flr=r(Sf," or "),wW=n(Sf,"A",{href:!0});var qwt=s(wW);mlr=r(qwt,"PerceiverForImageClassificationConvProcessing"),qwt.forEach(t),glr=r(Sf," (Perceiver model)"),Sf.forEach(t),hlr=i(Te),ET=n(Te,"LI",{});var GNe=s(ET);pbe=n(GNe,"STRONG",{});var jwt=s(pbe);plr=r(jwt,"poolformer"),jwt.forEach(t),_lr=r(GNe," \u2014 "),AW=n(GNe,"A",{href:!0});var Dwt=s(AW);ulr=r(Dwt,"PoolFormerForImageClassification"),Dwt.forEach(t),blr=r(GNe," (PoolFormer model)"),GNe.forEach(t),vlr=i(Te),CT=n(Te,"LI",{});var ONe=s(CT);_be=n(ONe,"STRONG",{});var Gwt=s(_be);Flr=r(Gwt,"regnet"),Gwt.forEach(t),Tlr=r(ONe," \u2014 "),LW=n(ONe,"A",{href:!0});var Owt=s(LW);Mlr=r(Owt,"RegNetForImageClassification"),Owt.forEach(t),Elr=r(ONe," (RegNet model)"),ONe.forEach(t),Clr=i(Te),wT=n(Te,"LI",{});var VNe=s(wT);ube=n(VNe,"STRONG",{});var Vwt=s(ube);wlr=r(Vwt,"resnet"),Vwt.forEach(t),Alr=r(VNe," \u2014 "),yW=n(VNe,"A",{href:!0});var Xwt=s(yW);Llr=r(Xwt,"ResNetForImageClassification"),Xwt.forEach(t),ylr=r(VNe," (ResNet model)"),VNe.forEach(t),xlr=i(Te),AT=n(Te,"LI",{});var XNe=s(AT);bbe=n(XNe,"STRONG",{});var zwt=s(bbe);$lr=r(zwt,"segformer"),zwt.forEach(t),klr=r(XNe," \u2014 "),xW=n(XNe,"A",{href:!0});var Qwt=s(xW);Slr=r(Qwt,"SegformerForImageClassification"),Qwt.forEach(t),Rlr=r(XNe," (SegFormer model)"),XNe.forEach(t),Plr=i(Te),LT=n(Te,"LI",{});var zNe=s(LT);vbe=n(zNe,"STRONG",{});var Wwt=s(vbe);Blr=r(Wwt,"swin"),Wwt.forEach(t),Nlr=r(zNe," \u2014 "),$W=n(zNe,"A",{href:!0});var Hwt=s($W);Ilr=r(Hwt,"SwinForImageClassification"),Hwt.forEach(t),qlr=r(zNe," (Swin Transformer model)"),zNe.forEach(t),jlr=i(Te),yT=n(Te,"LI",{});var QNe=s(yT);Fbe=n(QNe,"STRONG",{});var Uwt=s(Fbe);Dlr=r(Uwt,"van"),Uwt.forEach(t),Glr=r(QNe," \u2014 "),kW=n(QNe,"A",{href:!0});var Jwt=s(kW);Olr=r(Jwt,"VanForImageClassification"),Jwt.forEach(t),Vlr=r(QNe," (VAN model)"),QNe.forEach(t),Xlr=i(Te),xT=n(Te,"LI",{});var WNe=s(xT);Tbe=n(WNe,"STRONG",{});var Ywt=s(Tbe);zlr=r(Ywt,"vit"),Ywt.forEach(t),Qlr=r(WNe," \u2014 "),SW=n(WNe,"A",{href:!0});var Kwt=s(SW);Wlr=r(Kwt,"ViTForImageClassification"),Kwt.forEach(t),Hlr=r(WNe," (ViT model)"),WNe.forEach(t),Te.forEach(t),Ulr=i(ba),$T=n(ba,"P",{});var HNe=s($T);Jlr=r(HNe,"The model is set in evaluation mode by default using "),Mbe=n(HNe,"CODE",{});var Zwt=s(Mbe);Ylr=r(Zwt,"model.eval()"),Zwt.forEach(t),Klr=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n(HNe,"CODE",{});var eAt=s(Ebe);Zlr=r(eAt,"model.train()"),eAt.forEach(t),HNe.forEach(t),eir=i(ba),T(kT.$$.fragment,ba),ba.forEach(t),ml.forEach(t),xXe=i(f),Md=n(f,"H2",{class:!0});var BQe=s(Md);ST=n(BQe,"A",{id:!0,class:!0,href:!0});var oAt=s(ST);Cbe=n(oAt,"SPAN",{});var rAt=s(Cbe);T(By.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),oir=i(BQe),wbe=n(BQe,"SPAN",{});var tAt=s(wbe);rir=r(tAt,"AutoModelForVision2Seq"),tAt.forEach(t),BQe.forEach(t),$Xe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(Ny.$$.fragment,gl),tir=i(gl),Ed=n(gl,"P",{});var Yre=s(Ed);air=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=n(Yre,"A",{href:!0});var aAt=s(RW);nir=r(aAt,"from_pretrained()"),aAt.forEach(t),sir=r(Yre," class method or the "),PW=n(Yre,"A",{href:!0});var nAt=s(PW);lir=r(nAt,"from_config()"),nAt.forEach(t),iir=r(Yre,` class
method.`),Yre.forEach(t),dir=i(gl),Iy=n(gl,"P",{});var NQe=s(Iy);cir=r(NQe,"This class cannot be instantiated directly using "),Abe=n(NQe,"CODE",{});var sAt=s(Abe);fir=r(sAt,"__init__()"),sAt.forEach(t),mir=r(NQe," (throws an error)."),NQe.forEach(t),gir=i(gl),Ft=n(gl,"DIV",{class:!0});var k6=s(Ft);T(qy.$$.fragment,k6),hir=i(k6),Lbe=n(k6,"P",{});var lAt=s(Lbe);pir=r(lAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lAt.forEach(t),_ir=i(k6),Cd=n(k6,"P",{});var Kre=s(Cd);uir=r(Kre,`Note:
Loading a model from its configuration file does `),ybe=n(Kre,"STRONG",{});var iAt=s(ybe);bir=r(iAt,"not"),iAt.forEach(t),vir=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(Kre,"A",{href:!0});var dAt=s(BW);Fir=r(dAt,"from_pretrained()"),dAt.forEach(t),Tir=r(Kre," to load the model weights."),Kre.forEach(t),Mir=i(k6),T(RT.$$.fragment,k6),k6.forEach(t),Eir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(jy.$$.fragment,va),Cir=i(va),xbe=n(va,"P",{});var cAt=s(xbe);wir=r(cAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cAt.forEach(t),Air=i(va),Ha=n(va,"P",{});var S6=s(Ha);Lir=r(S6,"The model class to instantiate is selected based on the "),$be=n(S6,"CODE",{});var fAt=s($be);yir=r(fAt,"model_type"),fAt.forEach(t),xir=r(S6,` property of the config object (either
passed as an argument or loaded from `),kbe=n(S6,"CODE",{});var mAt=s(kbe);$ir=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),kir=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(S6,"CODE",{});var gAt=s(Sbe);Sir=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),Rir=r(S6,":"),S6.forEach(t),Pir=i(va),Rbe=n(va,"UL",{});var hAt=s(Rbe);PT=n(hAt,"LI",{});var UNe=s(PT);Pbe=n(UNe,"STRONG",{});var pAt=s(Pbe);Bir=r(pAt,"vision-encoder-decoder"),pAt.forEach(t),Nir=r(UNe," \u2014 "),NW=n(UNe,"A",{href:!0});var _At=s(NW);Iir=r(_At,"VisionEncoderDecoderModel"),_At.forEach(t),qir=r(UNe," (Vision Encoder decoder model)"),UNe.forEach(t),hAt.forEach(t),jir=i(va),BT=n(va,"P",{});var JNe=s(BT);Dir=r(JNe,"The model is set in evaluation mode by default using "),Bbe=n(JNe,"CODE",{});var uAt=s(Bbe);Gir=r(uAt,"model.eval()"),uAt.forEach(t),Oir=r(JNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(JNe,"CODE",{});var bAt=s(Nbe);Vir=r(bAt,"model.train()"),bAt.forEach(t),JNe.forEach(t),Xir=i(va),T(NT.$$.fragment,va),va.forEach(t),gl.forEach(t),kXe=i(f),wd=n(f,"H2",{class:!0});var IQe=s(wd);IT=n(IQe,"A",{id:!0,class:!0,href:!0});var vAt=s(IT);Ibe=n(vAt,"SPAN",{});var FAt=s(Ibe);T(Dy.$$.fragment,FAt),FAt.forEach(t),vAt.forEach(t),zir=i(IQe),qbe=n(IQe,"SPAN",{});var TAt=s(qbe);Qir=r(TAt,"AutoModelForVisualQuestionAnswering"),TAt.forEach(t),IQe.forEach(t),SXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(Gy.$$.fragment,hl),Wir=i(hl),Ad=n(hl,"P",{});var Zre=s(Ad);Hir=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),IW=n(Zre,"A",{href:!0});var MAt=s(IW);Uir=r(MAt,"from_pretrained()"),MAt.forEach(t),Jir=r(Zre," class method or the "),qW=n(Zre,"A",{href:!0});var EAt=s(qW);Yir=r(EAt,"from_config()"),EAt.forEach(t),Kir=r(Zre,` class
method.`),Zre.forEach(t),Zir=i(hl),Oy=n(hl,"P",{});var qQe=s(Oy);edr=r(qQe,"This class cannot be instantiated directly using "),jbe=n(qQe,"CODE",{});var CAt=s(jbe);odr=r(CAt,"__init__()"),CAt.forEach(t),rdr=r(qQe," (throws an error)."),qQe.forEach(t),tdr=i(hl),Tt=n(hl,"DIV",{class:!0});var R6=s(Tt);T(Vy.$$.fragment,R6),adr=i(R6),Dbe=n(R6,"P",{});var wAt=s(Dbe);ndr=r(wAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),wAt.forEach(t),sdr=i(R6),Ld=n(R6,"P",{});var ete=s(Ld);ldr=r(ete,`Note:
Loading a model from its configuration file does `),Gbe=n(ete,"STRONG",{});var AAt=s(Gbe);idr=r(AAt,"not"),AAt.forEach(t),ddr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(ete,"A",{href:!0});var LAt=s(jW);cdr=r(LAt,"from_pretrained()"),LAt.forEach(t),fdr=r(ete," to load the model weights."),ete.forEach(t),mdr=i(R6),T(qT.$$.fragment,R6),R6.forEach(t),gdr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Xy.$$.fragment,Fa),hdr=i(Fa),Obe=n(Fa,"P",{});var yAt=s(Obe);pdr=r(yAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),yAt.forEach(t),_dr=i(Fa),Ua=n(Fa,"P",{});var P6=s(Ua);udr=r(P6,"The model class to instantiate is selected based on the "),Vbe=n(P6,"CODE",{});var xAt=s(Vbe);bdr=r(xAt,"model_type"),xAt.forEach(t),vdr=r(P6,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(P6,"CODE",{});var $At=s(Xbe);Fdr=r($At,"pretrained_model_name_or_path"),$At.forEach(t),Tdr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(P6,"CODE",{});var kAt=s(zbe);Mdr=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),Edr=r(P6,":"),P6.forEach(t),Cdr=i(Fa),Qbe=n(Fa,"UL",{});var SAt=s(Qbe);jT=n(SAt,"LI",{});var YNe=s(jT);Wbe=n(YNe,"STRONG",{});var RAt=s(Wbe);wdr=r(RAt,"vilt"),RAt.forEach(t),Adr=r(YNe," \u2014 "),DW=n(YNe,"A",{href:!0});var PAt=s(DW);Ldr=r(PAt,"ViltForQuestionAnswering"),PAt.forEach(t),ydr=r(YNe," (ViLT model)"),YNe.forEach(t),SAt.forEach(t),xdr=i(Fa),DT=n(Fa,"P",{});var KNe=s(DT);$dr=r(KNe,"The model is set in evaluation mode by default using "),Hbe=n(KNe,"CODE",{});var BAt=s(Hbe);kdr=r(BAt,"model.eval()"),BAt.forEach(t),Sdr=r(KNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(KNe,"CODE",{});var NAt=s(Ube);Rdr=r(NAt,"model.train()"),NAt.forEach(t),KNe.forEach(t),Pdr=i(Fa),T(GT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),RXe=i(f),yd=n(f,"H2",{class:!0});var jQe=s(yd);OT=n(jQe,"A",{id:!0,class:!0,href:!0});var IAt=s(OT);Jbe=n(IAt,"SPAN",{});var qAt=s(Jbe);T(zy.$$.fragment,qAt),qAt.forEach(t),IAt.forEach(t),Bdr=i(jQe),Ybe=n(jQe,"SPAN",{});var jAt=s(Ybe);Ndr=r(jAt,"AutoModelForAudioClassification"),jAt.forEach(t),jQe.forEach(t),PXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Qy.$$.fragment,pl),Idr=i(pl),xd=n(pl,"P",{});var ote=s(xd);qdr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=n(ote,"A",{href:!0});var DAt=s(GW);jdr=r(DAt,"from_pretrained()"),DAt.forEach(t),Ddr=r(ote," class method or the "),OW=n(ote,"A",{href:!0});var GAt=s(OW);Gdr=r(GAt,"from_config()"),GAt.forEach(t),Odr=r(ote,` class
method.`),ote.forEach(t),Vdr=i(pl),Wy=n(pl,"P",{});var DQe=s(Wy);Xdr=r(DQe,"This class cannot be instantiated directly using "),Kbe=n(DQe,"CODE",{});var OAt=s(Kbe);zdr=r(OAt,"__init__()"),OAt.forEach(t),Qdr=r(DQe," (throws an error)."),DQe.forEach(t),Wdr=i(pl),Mt=n(pl,"DIV",{class:!0});var B6=s(Mt);T(Hy.$$.fragment,B6),Hdr=i(B6),Zbe=n(B6,"P",{});var VAt=s(Zbe);Udr=r(VAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VAt.forEach(t),Jdr=i(B6),$d=n(B6,"P",{});var rte=s($d);Ydr=r(rte,`Note:
Loading a model from its configuration file does `),eve=n(rte,"STRONG",{});var XAt=s(eve);Kdr=r(XAt,"not"),XAt.forEach(t),Zdr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(rte,"A",{href:!0});var zAt=s(VW);ecr=r(zAt,"from_pretrained()"),zAt.forEach(t),ocr=r(rte," to load the model weights."),rte.forEach(t),rcr=i(B6),T(VT.$$.fragment,B6),B6.forEach(t),tcr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Uy.$$.fragment,Ta),acr=i(Ta),ove=n(Ta,"P",{});var QAt=s(ove);ncr=r(QAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),QAt.forEach(t),scr=i(Ta),Ja=n(Ta,"P",{});var N6=s(Ja);lcr=r(N6,"The model class to instantiate is selected based on the "),rve=n(N6,"CODE",{});var WAt=s(rve);icr=r(WAt,"model_type"),WAt.forEach(t),dcr=r(N6,` property of the config object (either
passed as an argument or loaded from `),tve=n(N6,"CODE",{});var HAt=s(tve);ccr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),fcr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(N6,"CODE",{});var UAt=s(ave);mcr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),gcr=r(N6,":"),N6.forEach(t),hcr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);XT=n(ze,"LI",{});var ZNe=s(XT);nve=n(ZNe,"STRONG",{});var JAt=s(nve);pcr=r(JAt,"data2vec-audio"),JAt.forEach(t),_cr=r(ZNe," \u2014 "),XW=n(ZNe,"A",{href:!0});var YAt=s(XW);ucr=r(YAt,"Data2VecAudioForSequenceClassification"),YAt.forEach(t),bcr=r(ZNe," (Data2VecAudio model)"),ZNe.forEach(t),vcr=i(ze),zT=n(ze,"LI",{});var eIe=s(zT);sve=n(eIe,"STRONG",{});var KAt=s(sve);Fcr=r(KAt,"hubert"),KAt.forEach(t),Tcr=r(eIe," \u2014 "),zW=n(eIe,"A",{href:!0});var ZAt=s(zW);Mcr=r(ZAt,"HubertForSequenceClassification"),ZAt.forEach(t),Ecr=r(eIe," (Hubert model)"),eIe.forEach(t),Ccr=i(ze),QT=n(ze,"LI",{});var oIe=s(QT);lve=n(oIe,"STRONG",{});var e6t=s(lve);wcr=r(e6t,"sew"),e6t.forEach(t),Acr=r(oIe," \u2014 "),QW=n(oIe,"A",{href:!0});var o6t=s(QW);Lcr=r(o6t,"SEWForSequenceClassification"),o6t.forEach(t),ycr=r(oIe," (SEW model)"),oIe.forEach(t),xcr=i(ze),WT=n(ze,"LI",{});var rIe=s(WT);ive=n(rIe,"STRONG",{});var r6t=s(ive);$cr=r(r6t,"sew-d"),r6t.forEach(t),kcr=r(rIe," \u2014 "),WW=n(rIe,"A",{href:!0});var t6t=s(WW);Scr=r(t6t,"SEWDForSequenceClassification"),t6t.forEach(t),Rcr=r(rIe," (SEW-D model)"),rIe.forEach(t),Pcr=i(ze),HT=n(ze,"LI",{});var tIe=s(HT);dve=n(tIe,"STRONG",{});var a6t=s(dve);Bcr=r(a6t,"unispeech"),a6t.forEach(t),Ncr=r(tIe," \u2014 "),HW=n(tIe,"A",{href:!0});var n6t=s(HW);Icr=r(n6t,"UniSpeechForSequenceClassification"),n6t.forEach(t),qcr=r(tIe," (UniSpeech model)"),tIe.forEach(t),jcr=i(ze),UT=n(ze,"LI",{});var aIe=s(UT);cve=n(aIe,"STRONG",{});var s6t=s(cve);Dcr=r(s6t,"unispeech-sat"),s6t.forEach(t),Gcr=r(aIe," \u2014 "),UW=n(aIe,"A",{href:!0});var l6t=s(UW);Ocr=r(l6t,"UniSpeechSatForSequenceClassification"),l6t.forEach(t),Vcr=r(aIe," (UniSpeechSat model)"),aIe.forEach(t),Xcr=i(ze),JT=n(ze,"LI",{});var nIe=s(JT);fve=n(nIe,"STRONG",{});var i6t=s(fve);zcr=r(i6t,"wav2vec2"),i6t.forEach(t),Qcr=r(nIe," \u2014 "),JW=n(nIe,"A",{href:!0});var d6t=s(JW);Wcr=r(d6t,"Wav2Vec2ForSequenceClassification"),d6t.forEach(t),Hcr=r(nIe," (Wav2Vec2 model)"),nIe.forEach(t),Ucr=i(ze),YT=n(ze,"LI",{});var sIe=s(YT);mve=n(sIe,"STRONG",{});var c6t=s(mve);Jcr=r(c6t,"wav2vec2-conformer"),c6t.forEach(t),Ycr=r(sIe," \u2014 "),YW=n(sIe,"A",{href:!0});var f6t=s(YW);Kcr=r(f6t,"Wav2Vec2ConformerForSequenceClassification"),f6t.forEach(t),Zcr=r(sIe," (Wav2Vec2-Conformer model)"),sIe.forEach(t),efr=i(ze),KT=n(ze,"LI",{});var lIe=s(KT);gve=n(lIe,"STRONG",{});var m6t=s(gve);ofr=r(m6t,"wavlm"),m6t.forEach(t),rfr=r(lIe," \u2014 "),KW=n(lIe,"A",{href:!0});var g6t=s(KW);tfr=r(g6t,"WavLMForSequenceClassification"),g6t.forEach(t),afr=r(lIe," (WavLM model)"),lIe.forEach(t),ze.forEach(t),nfr=i(Ta),ZT=n(Ta,"P",{});var iIe=s(ZT);sfr=r(iIe,"The model is set in evaluation mode by default using "),hve=n(iIe,"CODE",{});var h6t=s(hve);lfr=r(h6t,"model.eval()"),h6t.forEach(t),ifr=r(iIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pve=n(iIe,"CODE",{});var p6t=s(pve);dfr=r(p6t,"model.train()"),p6t.forEach(t),iIe.forEach(t),cfr=i(Ta),T(e8.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),BXe=i(f),kd=n(f,"H2",{class:!0});var GQe=s(kd);o8=n(GQe,"A",{id:!0,class:!0,href:!0});var _6t=s(o8);_ve=n(_6t,"SPAN",{});var u6t=s(_ve);T(Jy.$$.fragment,u6t),u6t.forEach(t),_6t.forEach(t),ffr=i(GQe),uve=n(GQe,"SPAN",{});var b6t=s(uve);mfr=r(b6t,"AutoModelForAudioFrameClassification"),b6t.forEach(t),GQe.forEach(t),NXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Yy.$$.fragment,_l),gfr=i(_l),Sd=n(_l,"P",{});var tte=s(Sd);hfr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=n(tte,"A",{href:!0});var v6t=s(ZW);pfr=r(v6t,"from_pretrained()"),v6t.forEach(t),_fr=r(tte," class method or the "),eH=n(tte,"A",{href:!0});var F6t=s(eH);ufr=r(F6t,"from_config()"),F6t.forEach(t),bfr=r(tte,` class
method.`),tte.forEach(t),vfr=i(_l),Ky=n(_l,"P",{});var OQe=s(Ky);Ffr=r(OQe,"This class cannot be instantiated directly using "),bve=n(OQe,"CODE",{});var T6t=s(bve);Tfr=r(T6t,"__init__()"),T6t.forEach(t),Mfr=r(OQe," (throws an error)."),OQe.forEach(t),Efr=i(_l),Et=n(_l,"DIV",{class:!0});var I6=s(Et);T(Zy.$$.fragment,I6),Cfr=i(I6),vve=n(I6,"P",{});var M6t=s(vve);wfr=r(M6t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),M6t.forEach(t),Afr=i(I6),Rd=n(I6,"P",{});var ate=s(Rd);Lfr=r(ate,`Note:
Loading a model from its configuration file does `),Fve=n(ate,"STRONG",{});var E6t=s(Fve);yfr=r(E6t,"not"),E6t.forEach(t),xfr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(ate,"A",{href:!0});var C6t=s(oH);$fr=r(C6t,"from_pretrained()"),C6t.forEach(t),kfr=r(ate," to load the model weights."),ate.forEach(t),Sfr=i(I6),T(r8.$$.fragment,I6),I6.forEach(t),Rfr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(e9.$$.fragment,Ma),Pfr=i(Ma),Tve=n(Ma,"P",{});var w6t=s(Tve);Bfr=r(w6t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),w6t.forEach(t),Nfr=i(Ma),Ya=n(Ma,"P",{});var q6=s(Ya);Ifr=r(q6,"The model class to instantiate is selected based on the "),Mve=n(q6,"CODE",{});var A6t=s(Mve);qfr=r(A6t,"model_type"),A6t.forEach(t),jfr=r(q6,` property of the config object (either
passed as an argument or loaded from `),Eve=n(q6,"CODE",{});var L6t=s(Eve);Dfr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),Gfr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(q6,"CODE",{});var y6t=s(Cve);Ofr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),Vfr=r(q6,":"),q6.forEach(t),Xfr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);t8=n(ul,"LI",{});var dIe=s(t8);wve=n(dIe,"STRONG",{});var x6t=s(wve);zfr=r(x6t,"data2vec-audio"),x6t.forEach(t),Qfr=r(dIe," \u2014 "),rH=n(dIe,"A",{href:!0});var $6t=s(rH);Wfr=r($6t,"Data2VecAudioForAudioFrameClassification"),$6t.forEach(t),Hfr=r(dIe," (Data2VecAudio model)"),dIe.forEach(t),Ufr=i(ul),a8=n(ul,"LI",{});var cIe=s(a8);Ave=n(cIe,"STRONG",{});var k6t=s(Ave);Jfr=r(k6t,"unispeech-sat"),k6t.forEach(t),Yfr=r(cIe," \u2014 "),tH=n(cIe,"A",{href:!0});var S6t=s(tH);Kfr=r(S6t,"UniSpeechSatForAudioFrameClassification"),S6t.forEach(t),Zfr=r(cIe," (UniSpeechSat model)"),cIe.forEach(t),emr=i(ul),n8=n(ul,"LI",{});var fIe=s(n8);Lve=n(fIe,"STRONG",{});var R6t=s(Lve);omr=r(R6t,"wav2vec2"),R6t.forEach(t),rmr=r(fIe," \u2014 "),aH=n(fIe,"A",{href:!0});var P6t=s(aH);tmr=r(P6t,"Wav2Vec2ForAudioFrameClassification"),P6t.forEach(t),amr=r(fIe," (Wav2Vec2 model)"),fIe.forEach(t),nmr=i(ul),s8=n(ul,"LI",{});var mIe=s(s8);yve=n(mIe,"STRONG",{});var B6t=s(yve);smr=r(B6t,"wav2vec2-conformer"),B6t.forEach(t),lmr=r(mIe," \u2014 "),nH=n(mIe,"A",{href:!0});var N6t=s(nH);imr=r(N6t,"Wav2Vec2ConformerForAudioFrameClassification"),N6t.forEach(t),dmr=r(mIe," (Wav2Vec2-Conformer model)"),mIe.forEach(t),cmr=i(ul),l8=n(ul,"LI",{});var gIe=s(l8);xve=n(gIe,"STRONG",{});var I6t=s(xve);fmr=r(I6t,"wavlm"),I6t.forEach(t),mmr=r(gIe," \u2014 "),sH=n(gIe,"A",{href:!0});var q6t=s(sH);gmr=r(q6t,"WavLMForAudioFrameClassification"),q6t.forEach(t),hmr=r(gIe," (WavLM model)"),gIe.forEach(t),ul.forEach(t),pmr=i(Ma),i8=n(Ma,"P",{});var hIe=s(i8);_mr=r(hIe,"The model is set in evaluation mode by default using "),$ve=n(hIe,"CODE",{});var j6t=s($ve);umr=r(j6t,"model.eval()"),j6t.forEach(t),bmr=r(hIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kve=n(hIe,"CODE",{});var D6t=s(kve);vmr=r(D6t,"model.train()"),D6t.forEach(t),hIe.forEach(t),Fmr=i(Ma),T(d8.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),IXe=i(f),Pd=n(f,"H2",{class:!0});var VQe=s(Pd);c8=n(VQe,"A",{id:!0,class:!0,href:!0});var G6t=s(c8);Sve=n(G6t,"SPAN",{});var O6t=s(Sve);T(o9.$$.fragment,O6t),O6t.forEach(t),G6t.forEach(t),Tmr=i(VQe),Rve=n(VQe,"SPAN",{});var V6t=s(Rve);Mmr=r(V6t,"AutoModelForCTC"),V6t.forEach(t),VQe.forEach(t),qXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(r9.$$.fragment,bl),Emr=i(bl),Bd=n(bl,"P",{});var nte=s(Bd);Cmr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lH=n(nte,"A",{href:!0});var X6t=s(lH);wmr=r(X6t,"from_pretrained()"),X6t.forEach(t),Amr=r(nte," class method or the "),iH=n(nte,"A",{href:!0});var z6t=s(iH);Lmr=r(z6t,"from_config()"),z6t.forEach(t),ymr=r(nte,` class
method.`),nte.forEach(t),xmr=i(bl),t9=n(bl,"P",{});var XQe=s(t9);$mr=r(XQe,"This class cannot be instantiated directly using "),Pve=n(XQe,"CODE",{});var Q6t=s(Pve);kmr=r(Q6t,"__init__()"),Q6t.forEach(t),Smr=r(XQe," (throws an error)."),XQe.forEach(t),Rmr=i(bl),Ct=n(bl,"DIV",{class:!0});var j6=s(Ct);T(a9.$$.fragment,j6),Pmr=i(j6),Bve=n(j6,"P",{});var W6t=s(Bve);Bmr=r(W6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),W6t.forEach(t),Nmr=i(j6),Nd=n(j6,"P",{});var ste=s(Nd);Imr=r(ste,`Note:
Loading a model from its configuration file does `),Nve=n(ste,"STRONG",{});var H6t=s(Nve);qmr=r(H6t,"not"),H6t.forEach(t),jmr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(ste,"A",{href:!0});var U6t=s(dH);Dmr=r(U6t,"from_pretrained()"),U6t.forEach(t),Gmr=r(ste," to load the model weights."),ste.forEach(t),Omr=i(j6),T(f8.$$.fragment,j6),j6.forEach(t),Vmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(n9.$$.fragment,Ea),Xmr=i(Ea),Ive=n(Ea,"P",{});var J6t=s(Ive);zmr=r(J6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),J6t.forEach(t),Qmr=i(Ea),Ka=n(Ea,"P",{});var D6=s(Ka);Wmr=r(D6,"The model class to instantiate is selected based on the "),qve=n(D6,"CODE",{});var Y6t=s(qve);Hmr=r(Y6t,"model_type"),Y6t.forEach(t),Umr=r(D6,` property of the config object (either
passed as an argument or loaded from `),jve=n(D6,"CODE",{});var K6t=s(jve);Jmr=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),Ymr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(D6,"CODE",{});var Z6t=s(Dve);Kmr=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),Zmr=r(D6,":"),D6.forEach(t),egr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);m8=n(Be,"LI",{});var pIe=s(m8);Gve=n(pIe,"STRONG",{});var e7t=s(Gve);ogr=r(e7t,"data2vec-audio"),e7t.forEach(t),rgr=r(pIe," \u2014 "),cH=n(pIe,"A",{href:!0});var o7t=s(cH);tgr=r(o7t,"Data2VecAudioForCTC"),o7t.forEach(t),agr=r(pIe," (Data2VecAudio model)"),pIe.forEach(t),ngr=i(Be),g8=n(Be,"LI",{});var _Ie=s(g8);Ove=n(_Ie,"STRONG",{});var r7t=s(Ove);sgr=r(r7t,"hubert"),r7t.forEach(t),lgr=r(_Ie," \u2014 "),fH=n(_Ie,"A",{href:!0});var t7t=s(fH);igr=r(t7t,"HubertForCTC"),t7t.forEach(t),dgr=r(_Ie," (Hubert model)"),_Ie.forEach(t),cgr=i(Be),h8=n(Be,"LI",{});var uIe=s(h8);Vve=n(uIe,"STRONG",{});var a7t=s(Vve);fgr=r(a7t,"mctct"),a7t.forEach(t),mgr=r(uIe," \u2014 "),mH=n(uIe,"A",{href:!0});var n7t=s(mH);ggr=r(n7t,"MCTCTForCTC"),n7t.forEach(t),hgr=r(uIe," (M-CTC-T model)"),uIe.forEach(t),pgr=i(Be),p8=n(Be,"LI",{});var bIe=s(p8);Xve=n(bIe,"STRONG",{});var s7t=s(Xve);_gr=r(s7t,"sew"),s7t.forEach(t),ugr=r(bIe," \u2014 "),gH=n(bIe,"A",{href:!0});var l7t=s(gH);bgr=r(l7t,"SEWForCTC"),l7t.forEach(t),vgr=r(bIe," (SEW model)"),bIe.forEach(t),Fgr=i(Be),_8=n(Be,"LI",{});var vIe=s(_8);zve=n(vIe,"STRONG",{});var i7t=s(zve);Tgr=r(i7t,"sew-d"),i7t.forEach(t),Mgr=r(vIe," \u2014 "),hH=n(vIe,"A",{href:!0});var d7t=s(hH);Egr=r(d7t,"SEWDForCTC"),d7t.forEach(t),Cgr=r(vIe," (SEW-D model)"),vIe.forEach(t),wgr=i(Be),u8=n(Be,"LI",{});var FIe=s(u8);Qve=n(FIe,"STRONG",{});var c7t=s(Qve);Agr=r(c7t,"unispeech"),c7t.forEach(t),Lgr=r(FIe," \u2014 "),pH=n(FIe,"A",{href:!0});var f7t=s(pH);ygr=r(f7t,"UniSpeechForCTC"),f7t.forEach(t),xgr=r(FIe," (UniSpeech model)"),FIe.forEach(t),$gr=i(Be),b8=n(Be,"LI",{});var TIe=s(b8);Wve=n(TIe,"STRONG",{});var m7t=s(Wve);kgr=r(m7t,"unispeech-sat"),m7t.forEach(t),Sgr=r(TIe," \u2014 "),_H=n(TIe,"A",{href:!0});var g7t=s(_H);Rgr=r(g7t,"UniSpeechSatForCTC"),g7t.forEach(t),Pgr=r(TIe," (UniSpeechSat model)"),TIe.forEach(t),Bgr=i(Be),v8=n(Be,"LI",{});var MIe=s(v8);Hve=n(MIe,"STRONG",{});var h7t=s(Hve);Ngr=r(h7t,"wav2vec2"),h7t.forEach(t),Igr=r(MIe," \u2014 "),uH=n(MIe,"A",{href:!0});var p7t=s(uH);qgr=r(p7t,"Wav2Vec2ForCTC"),p7t.forEach(t),jgr=r(MIe," (Wav2Vec2 model)"),MIe.forEach(t),Dgr=i(Be),F8=n(Be,"LI",{});var EIe=s(F8);Uve=n(EIe,"STRONG",{});var _7t=s(Uve);Ggr=r(_7t,"wav2vec2-conformer"),_7t.forEach(t),Ogr=r(EIe," \u2014 "),bH=n(EIe,"A",{href:!0});var u7t=s(bH);Vgr=r(u7t,"Wav2Vec2ConformerForCTC"),u7t.forEach(t),Xgr=r(EIe," (Wav2Vec2-Conformer model)"),EIe.forEach(t),zgr=i(Be),T8=n(Be,"LI",{});var CIe=s(T8);Jve=n(CIe,"STRONG",{});var b7t=s(Jve);Qgr=r(b7t,"wavlm"),b7t.forEach(t),Wgr=r(CIe," \u2014 "),vH=n(CIe,"A",{href:!0});var v7t=s(vH);Hgr=r(v7t,"WavLMForCTC"),v7t.forEach(t),Ugr=r(CIe," (WavLM model)"),CIe.forEach(t),Be.forEach(t),Jgr=i(Ea),M8=n(Ea,"P",{});var wIe=s(M8);Ygr=r(wIe,"The model is set in evaluation mode by default using "),Yve=n(wIe,"CODE",{});var F7t=s(Yve);Kgr=r(F7t,"model.eval()"),F7t.forEach(t),Zgr=r(wIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=n(wIe,"CODE",{});var T7t=s(Kve);ehr=r(T7t,"model.train()"),T7t.forEach(t),wIe.forEach(t),ohr=i(Ea),T(E8.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),jXe=i(f),Id=n(f,"H2",{class:!0});var zQe=s(Id);C8=n(zQe,"A",{id:!0,class:!0,href:!0});var M7t=s(C8);Zve=n(M7t,"SPAN",{});var E7t=s(Zve);T(s9.$$.fragment,E7t),E7t.forEach(t),M7t.forEach(t),rhr=i(zQe),e3e=n(zQe,"SPAN",{});var C7t=s(e3e);thr=r(C7t,"AutoModelForSpeechSeq2Seq"),C7t.forEach(t),zQe.forEach(t),DXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(l9.$$.fragment,vl),ahr=i(vl),qd=n(vl,"P",{});var lte=s(qd);nhr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FH=n(lte,"A",{href:!0});var w7t=s(FH);shr=r(w7t,"from_pretrained()"),w7t.forEach(t),lhr=r(lte," class method or the "),TH=n(lte,"A",{href:!0});var A7t=s(TH);ihr=r(A7t,"from_config()"),A7t.forEach(t),dhr=r(lte,` class
method.`),lte.forEach(t),chr=i(vl),i9=n(vl,"P",{});var QQe=s(i9);fhr=r(QQe,"This class cannot be instantiated directly using "),o3e=n(QQe,"CODE",{});var L7t=s(o3e);mhr=r(L7t,"__init__()"),L7t.forEach(t),ghr=r(QQe," (throws an error)."),QQe.forEach(t),hhr=i(vl),wt=n(vl,"DIV",{class:!0});var G6=s(wt);T(d9.$$.fragment,G6),phr=i(G6),r3e=n(G6,"P",{});var y7t=s(r3e);_hr=r(y7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),y7t.forEach(t),uhr=i(G6),jd=n(G6,"P",{});var ite=s(jd);bhr=r(ite,`Note:
Loading a model from its configuration file does `),t3e=n(ite,"STRONG",{});var x7t=s(t3e);vhr=r(x7t,"not"),x7t.forEach(t),Fhr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(ite,"A",{href:!0});var $7t=s(MH);Thr=r($7t,"from_pretrained()"),$7t.forEach(t),Mhr=r(ite," to load the model weights."),ite.forEach(t),Ehr=i(G6),T(w8.$$.fragment,G6),G6.forEach(t),Chr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(c9.$$.fragment,Ca),whr=i(Ca),a3e=n(Ca,"P",{});var k7t=s(a3e);Ahr=r(k7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k7t.forEach(t),Lhr=i(Ca),Za=n(Ca,"P",{});var O6=s(Za);yhr=r(O6,"The model class to instantiate is selected based on the "),n3e=n(O6,"CODE",{});var S7t=s(n3e);xhr=r(S7t,"model_type"),S7t.forEach(t),$hr=r(O6,` property of the config object (either
passed as an argument or loaded from `),s3e=n(O6,"CODE",{});var R7t=s(s3e);khr=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),Shr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(O6,"CODE",{});var P7t=s(l3e);Rhr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),Phr=r(O6,":"),O6.forEach(t),Bhr=i(Ca),f9=n(Ca,"UL",{});var WQe=s(f9);A8=n(WQe,"LI",{});var AIe=s(A8);i3e=n(AIe,"STRONG",{});var B7t=s(i3e);Nhr=r(B7t,"speech-encoder-decoder"),B7t.forEach(t),Ihr=r(AIe," \u2014 "),EH=n(AIe,"A",{href:!0});var N7t=s(EH);qhr=r(N7t,"SpeechEncoderDecoderModel"),N7t.forEach(t),jhr=r(AIe," (Speech Encoder decoder model)"),AIe.forEach(t),Dhr=i(WQe),L8=n(WQe,"LI",{});var LIe=s(L8);d3e=n(LIe,"STRONG",{});var I7t=s(d3e);Ghr=r(I7t,"speech_to_text"),I7t.forEach(t),Ohr=r(LIe," \u2014 "),CH=n(LIe,"A",{href:!0});var q7t=s(CH);Vhr=r(q7t,"Speech2TextForConditionalGeneration"),q7t.forEach(t),Xhr=r(LIe," (Speech2Text model)"),LIe.forEach(t),WQe.forEach(t),zhr=i(Ca),y8=n(Ca,"P",{});var yIe=s(y8);Qhr=r(yIe,"The model is set in evaluation mode by default using "),c3e=n(yIe,"CODE",{});var j7t=s(c3e);Whr=r(j7t,"model.eval()"),j7t.forEach(t),Hhr=r(yIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f3e=n(yIe,"CODE",{});var D7t=s(f3e);Uhr=r(D7t,"model.train()"),D7t.forEach(t),yIe.forEach(t),Jhr=i(Ca),T(x8.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),GXe=i(f),Dd=n(f,"H2",{class:!0});var HQe=s(Dd);$8=n(HQe,"A",{id:!0,class:!0,href:!0});var G7t=s($8);m3e=n(G7t,"SPAN",{});var O7t=s(m3e);T(m9.$$.fragment,O7t),O7t.forEach(t),G7t.forEach(t),Yhr=i(HQe),g3e=n(HQe,"SPAN",{});var V7t=s(g3e);Khr=r(V7t,"AutoModelForAudioXVector"),V7t.forEach(t),HQe.forEach(t),OXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(g9.$$.fragment,Fl),Zhr=i(Fl),Gd=n(Fl,"P",{});var dte=s(Gd);epr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wH=n(dte,"A",{href:!0});var X7t=s(wH);opr=r(X7t,"from_pretrained()"),X7t.forEach(t),rpr=r(dte," class method or the "),AH=n(dte,"A",{href:!0});var z7t=s(AH);tpr=r(z7t,"from_config()"),z7t.forEach(t),apr=r(dte,` class
method.`),dte.forEach(t),npr=i(Fl),h9=n(Fl,"P",{});var UQe=s(h9);spr=r(UQe,"This class cannot be instantiated directly using "),h3e=n(UQe,"CODE",{});var Q7t=s(h3e);lpr=r(Q7t,"__init__()"),Q7t.forEach(t),ipr=r(UQe," (throws an error)."),UQe.forEach(t),dpr=i(Fl),At=n(Fl,"DIV",{class:!0});var V6=s(At);T(p9.$$.fragment,V6),cpr=i(V6),p3e=n(V6,"P",{});var W7t=s(p3e);fpr=r(W7t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),W7t.forEach(t),mpr=i(V6),Od=n(V6,"P",{});var cte=s(Od);gpr=r(cte,`Note:
Loading a model from its configuration file does `),_3e=n(cte,"STRONG",{});var H7t=s(_3e);hpr=r(H7t,"not"),H7t.forEach(t),ppr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(cte,"A",{href:!0});var U7t=s(LH);_pr=r(U7t,"from_pretrained()"),U7t.forEach(t),upr=r(cte," to load the model weights."),cte.forEach(t),bpr=i(V6),T(k8.$$.fragment,V6),V6.forEach(t),vpr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(_9.$$.fragment,wa),Fpr=i(wa),u3e=n(wa,"P",{});var J7t=s(u3e);Tpr=r(J7t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),J7t.forEach(t),Mpr=i(wa),en=n(wa,"P",{});var X6=s(en);Epr=r(X6,"The model class to instantiate is selected based on the "),b3e=n(X6,"CODE",{});var Y7t=s(b3e);Cpr=r(Y7t,"model_type"),Y7t.forEach(t),wpr=r(X6,` property of the config object (either
passed as an argument or loaded from `),v3e=n(X6,"CODE",{});var K7t=s(v3e);Apr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),Lpr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(X6,"CODE",{});var Z7t=s(F3e);ypr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),xpr=r(X6,":"),X6.forEach(t),$pr=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);S8=n(Tl,"LI",{});var xIe=s(S8);T3e=n(xIe,"STRONG",{});var eLt=s(T3e);kpr=r(eLt,"data2vec-audio"),eLt.forEach(t),Spr=r(xIe," \u2014 "),yH=n(xIe,"A",{href:!0});var oLt=s(yH);Rpr=r(oLt,"Data2VecAudioForXVector"),oLt.forEach(t),Ppr=r(xIe," (Data2VecAudio model)"),xIe.forEach(t),Bpr=i(Tl),R8=n(Tl,"LI",{});var $Ie=s(R8);M3e=n($Ie,"STRONG",{});var rLt=s(M3e);Npr=r(rLt,"unispeech-sat"),rLt.forEach(t),Ipr=r($Ie," \u2014 "),xH=n($Ie,"A",{href:!0});var tLt=s(xH);qpr=r(tLt,"UniSpeechSatForXVector"),tLt.forEach(t),jpr=r($Ie," (UniSpeechSat model)"),$Ie.forEach(t),Dpr=i(Tl),P8=n(Tl,"LI",{});var kIe=s(P8);E3e=n(kIe,"STRONG",{});var aLt=s(E3e);Gpr=r(aLt,"wav2vec2"),aLt.forEach(t),Opr=r(kIe," \u2014 "),$H=n(kIe,"A",{href:!0});var nLt=s($H);Vpr=r(nLt,"Wav2Vec2ForXVector"),nLt.forEach(t),Xpr=r(kIe," (Wav2Vec2 model)"),kIe.forEach(t),zpr=i(Tl),B8=n(Tl,"LI",{});var SIe=s(B8);C3e=n(SIe,"STRONG",{});var sLt=s(C3e);Qpr=r(sLt,"wav2vec2-conformer"),sLt.forEach(t),Wpr=r(SIe," \u2014 "),kH=n(SIe,"A",{href:!0});var lLt=s(kH);Hpr=r(lLt,"Wav2Vec2ConformerForXVector"),lLt.forEach(t),Upr=r(SIe," (Wav2Vec2-Conformer model)"),SIe.forEach(t),Jpr=i(Tl),N8=n(Tl,"LI",{});var RIe=s(N8);w3e=n(RIe,"STRONG",{});var iLt=s(w3e);Ypr=r(iLt,"wavlm"),iLt.forEach(t),Kpr=r(RIe," \u2014 "),SH=n(RIe,"A",{href:!0});var dLt=s(SH);Zpr=r(dLt,"WavLMForXVector"),dLt.forEach(t),e_r=r(RIe," (WavLM model)"),RIe.forEach(t),Tl.forEach(t),o_r=i(wa),I8=n(wa,"P",{});var PIe=s(I8);r_r=r(PIe,"The model is set in evaluation mode by default using "),A3e=n(PIe,"CODE",{});var cLt=s(A3e);t_r=r(cLt,"model.eval()"),cLt.forEach(t),a_r=r(PIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L3e=n(PIe,"CODE",{});var fLt=s(L3e);n_r=r(fLt,"model.train()"),fLt.forEach(t),PIe.forEach(t),s_r=i(wa),T(q8.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),VXe=i(f),Vd=n(f,"H2",{class:!0});var JQe=s(Vd);j8=n(JQe,"A",{id:!0,class:!0,href:!0});var mLt=s(j8);y3e=n(mLt,"SPAN",{});var gLt=s(y3e);T(u9.$$.fragment,gLt),gLt.forEach(t),mLt.forEach(t),l_r=i(JQe),x3e=n(JQe,"SPAN",{});var hLt=s(x3e);i_r=r(hLt,"AutoModelForMaskedImageModeling"),hLt.forEach(t),JQe.forEach(t),XXe=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(b9.$$.fragment,Ml),d_r=i(Ml),Xd=n(Ml,"P",{});var fte=s(Xd);c_r=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RH=n(fte,"A",{href:!0});var pLt=s(RH);f_r=r(pLt,"from_pretrained()"),pLt.forEach(t),m_r=r(fte," class method or the "),PH=n(fte,"A",{href:!0});var _Lt=s(PH);g_r=r(_Lt,"from_config()"),_Lt.forEach(t),h_r=r(fte,` class
method.`),fte.forEach(t),p_r=i(Ml),v9=n(Ml,"P",{});var YQe=s(v9);__r=r(YQe,"This class cannot be instantiated directly using "),$3e=n(YQe,"CODE",{});var uLt=s($3e);u_r=r(uLt,"__init__()"),uLt.forEach(t),b_r=r(YQe," (throws an error)."),YQe.forEach(t),v_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var z6=s(Lt);T(F9.$$.fragment,z6),F_r=i(z6),k3e=n(z6,"P",{});var bLt=s(k3e);T_r=r(bLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bLt.forEach(t),M_r=i(z6),zd=n(z6,"P",{});var mte=s(zd);E_r=r(mte,`Note:
Loading a model from its configuration file does `),S3e=n(mte,"STRONG",{});var vLt=s(S3e);C_r=r(vLt,"not"),vLt.forEach(t),w_r=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(mte,"A",{href:!0});var FLt=s(BH);A_r=r(FLt,"from_pretrained()"),FLt.forEach(t),L_r=r(mte," to load the model weights."),mte.forEach(t),y_r=i(z6),T(D8.$$.fragment,z6),z6.forEach(t),x_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(T9.$$.fragment,Aa),$_r=i(Aa),R3e=n(Aa,"P",{});var TLt=s(R3e);k_r=r(TLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),TLt.forEach(t),S_r=i(Aa),on=n(Aa,"P",{});var Q6=s(on);R_r=r(Q6,"The model class to instantiate is selected based on the "),P3e=n(Q6,"CODE",{});var MLt=s(P3e);P_r=r(MLt,"model_type"),MLt.forEach(t),B_r=r(Q6,` property of the config object (either
passed as an argument or loaded from `),B3e=n(Q6,"CODE",{});var ELt=s(B3e);N_r=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),I_r=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=n(Q6,"CODE",{});var CLt=s(N3e);q_r=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),j_r=r(Q6,":"),Q6.forEach(t),D_r=i(Aa),Qd=n(Aa,"UL",{});var gte=s(Qd);G8=n(gte,"LI",{});var BIe=s(G8);I3e=n(BIe,"STRONG",{});var wLt=s(I3e);G_r=r(wLt,"deit"),wLt.forEach(t),O_r=r(BIe," \u2014 "),NH=n(BIe,"A",{href:!0});var ALt=s(NH);V_r=r(ALt,"DeiTForMaskedImageModeling"),ALt.forEach(t),X_r=r(BIe," (DeiT model)"),BIe.forEach(t),z_r=i(gte),O8=n(gte,"LI",{});var NIe=s(O8);q3e=n(NIe,"STRONG",{});var LLt=s(q3e);Q_r=r(LLt,"swin"),LLt.forEach(t),W_r=r(NIe," \u2014 "),IH=n(NIe,"A",{href:!0});var yLt=s(IH);H_r=r(yLt,"SwinForMaskedImageModeling"),yLt.forEach(t),U_r=r(NIe," (Swin Transformer model)"),NIe.forEach(t),J_r=i(gte),V8=n(gte,"LI",{});var IIe=s(V8);j3e=n(IIe,"STRONG",{});var xLt=s(j3e);Y_r=r(xLt,"vit"),xLt.forEach(t),K_r=r(IIe," \u2014 "),qH=n(IIe,"A",{href:!0});var $Lt=s(qH);Z_r=r($Lt,"ViTForMaskedImageModeling"),$Lt.forEach(t),eur=r(IIe," (ViT model)"),IIe.forEach(t),gte.forEach(t),our=i(Aa),X8=n(Aa,"P",{});var qIe=s(X8);rur=r(qIe,"The model is set in evaluation mode by default using "),D3e=n(qIe,"CODE",{});var kLt=s(D3e);tur=r(kLt,"model.eval()"),kLt.forEach(t),aur=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G3e=n(qIe,"CODE",{});var SLt=s(G3e);nur=r(SLt,"model.train()"),SLt.forEach(t),qIe.forEach(t),sur=i(Aa),T(z8.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),zXe=i(f),Wd=n(f,"H2",{class:!0});var KQe=s(Wd);Q8=n(KQe,"A",{id:!0,class:!0,href:!0});var RLt=s(Q8);O3e=n(RLt,"SPAN",{});var PLt=s(O3e);T(M9.$$.fragment,PLt),PLt.forEach(t),RLt.forEach(t),lur=i(KQe),V3e=n(KQe,"SPAN",{});var BLt=s(V3e);iur=r(BLt,"AutoModelForObjectDetection"),BLt.forEach(t),KQe.forEach(t),QXe=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(E9.$$.fragment,El),dur=i(El),Hd=n(El,"P",{});var hte=s(Hd);cur=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jH=n(hte,"A",{href:!0});var NLt=s(jH);fur=r(NLt,"from_pretrained()"),NLt.forEach(t),mur=r(hte," class method or the "),DH=n(hte,"A",{href:!0});var ILt=s(DH);gur=r(ILt,"from_config()"),ILt.forEach(t),hur=r(hte,` class
method.`),hte.forEach(t),pur=i(El),C9=n(El,"P",{});var ZQe=s(C9);_ur=r(ZQe,"This class cannot be instantiated directly using "),X3e=n(ZQe,"CODE",{});var qLt=s(X3e);uur=r(qLt,"__init__()"),qLt.forEach(t),bur=r(ZQe," (throws an error)."),ZQe.forEach(t),vur=i(El),yt=n(El,"DIV",{class:!0});var W6=s(yt);T(w9.$$.fragment,W6),Fur=i(W6),z3e=n(W6,"P",{});var jLt=s(z3e);Tur=r(jLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),jLt.forEach(t),Mur=i(W6),Ud=n(W6,"P",{});var pte=s(Ud);Eur=r(pte,`Note:
Loading a model from its configuration file does `),Q3e=n(pte,"STRONG",{});var DLt=s(Q3e);Cur=r(DLt,"not"),DLt.forEach(t),wur=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(pte,"A",{href:!0});var GLt=s(GH);Aur=r(GLt,"from_pretrained()"),GLt.forEach(t),Lur=r(pte," to load the model weights."),pte.forEach(t),yur=i(W6),T(W8.$$.fragment,W6),W6.forEach(t),xur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(A9.$$.fragment,La),$ur=i(La),W3e=n(La,"P",{});var OLt=s(W3e);kur=r(OLt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),OLt.forEach(t),Sur=i(La),rn=n(La,"P",{});var H6=s(rn);Rur=r(H6,"The model class to instantiate is selected based on the "),H3e=n(H6,"CODE",{});var VLt=s(H3e);Pur=r(VLt,"model_type"),VLt.forEach(t),Bur=r(H6,` property of the config object (either
passed as an argument or loaded from `),U3e=n(H6,"CODE",{});var XLt=s(U3e);Nur=r(XLt,"pretrained_model_name_or_path"),XLt.forEach(t),Iur=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J3e=n(H6,"CODE",{});var zLt=s(J3e);qur=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),jur=r(H6,":"),H6.forEach(t),Dur=i(La),L9=n(La,"UL",{});var eWe=s(L9);H8=n(eWe,"LI",{});var jIe=s(H8);Y3e=n(jIe,"STRONG",{});var QLt=s(Y3e);Gur=r(QLt,"detr"),QLt.forEach(t),Our=r(jIe," \u2014 "),OH=n(jIe,"A",{href:!0});var WLt=s(OH);Vur=r(WLt,"DetrForObjectDetection"),WLt.forEach(t),Xur=r(jIe," (DETR model)"),jIe.forEach(t),zur=i(eWe),U8=n(eWe,"LI",{});var DIe=s(U8);K3e=n(DIe,"STRONG",{});var HLt=s(K3e);Qur=r(HLt,"yolos"),HLt.forEach(t),Wur=r(DIe," \u2014 "),VH=n(DIe,"A",{href:!0});var ULt=s(VH);Hur=r(ULt,"YolosForObjectDetection"),ULt.forEach(t),Uur=r(DIe," (YOLOS model)"),DIe.forEach(t),eWe.forEach(t),Jur=i(La),J8=n(La,"P",{});var GIe=s(J8);Yur=r(GIe,"The model is set in evaluation mode by default using "),Z3e=n(GIe,"CODE",{});var JLt=s(Z3e);Kur=r(JLt,"model.eval()"),JLt.forEach(t),Zur=r(GIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=n(GIe,"CODE",{});var YLt=s(eFe);e1r=r(YLt,"model.train()"),YLt.forEach(t),GIe.forEach(t),o1r=i(La),T(Y8.$$.fragment,La),La.forEach(t),El.forEach(t),WXe=i(f),Jd=n(f,"H2",{class:!0});var oWe=s(Jd);K8=n(oWe,"A",{id:!0,class:!0,href:!0});var KLt=s(K8);oFe=n(KLt,"SPAN",{});var ZLt=s(oFe);T(y9.$$.fragment,ZLt),ZLt.forEach(t),KLt.forEach(t),r1r=i(oWe),rFe=n(oWe,"SPAN",{});var eyt=s(rFe);t1r=r(eyt,"AutoModelForImageSegmentation"),eyt.forEach(t),oWe.forEach(t),HXe=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(x9.$$.fragment,Cl),a1r=i(Cl),Yd=n(Cl,"P",{});var _te=s(Yd);n1r=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XH=n(_te,"A",{href:!0});var oyt=s(XH);s1r=r(oyt,"from_pretrained()"),oyt.forEach(t),l1r=r(_te," class method or the "),zH=n(_te,"A",{href:!0});var ryt=s(zH);i1r=r(ryt,"from_config()"),ryt.forEach(t),d1r=r(_te,` class
method.`),_te.forEach(t),c1r=i(Cl),$9=n(Cl,"P",{});var rWe=s($9);f1r=r(rWe,"This class cannot be instantiated directly using "),tFe=n(rWe,"CODE",{});var tyt=s(tFe);m1r=r(tyt,"__init__()"),tyt.forEach(t),g1r=r(rWe," (throws an error)."),rWe.forEach(t),h1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var U6=s(xt);T(k9.$$.fragment,U6),p1r=i(U6),aFe=n(U6,"P",{});var ayt=s(aFe);_1r=r(ayt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ayt.forEach(t),u1r=i(U6),Kd=n(U6,"P",{});var ute=s(Kd);b1r=r(ute,`Note:
Loading a model from its configuration file does `),nFe=n(ute,"STRONG",{});var nyt=s(nFe);v1r=r(nyt,"not"),nyt.forEach(t),F1r=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(ute,"A",{href:!0});var syt=s(QH);T1r=r(syt,"from_pretrained()"),syt.forEach(t),M1r=r(ute," to load the model weights."),ute.forEach(t),E1r=i(U6),T(Z8.$$.fragment,U6),U6.forEach(t),C1r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(S9.$$.fragment,ya),w1r=i(ya),sFe=n(ya,"P",{});var lyt=s(sFe);A1r=r(lyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lyt.forEach(t),L1r=i(ya),tn=n(ya,"P",{});var J6=s(tn);y1r=r(J6,"The model class to instantiate is selected based on the "),lFe=n(J6,"CODE",{});var iyt=s(lFe);x1r=r(iyt,"model_type"),iyt.forEach(t),$1r=r(J6,` property of the config object (either
passed as an argument or loaded from `),iFe=n(J6,"CODE",{});var dyt=s(iFe);k1r=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),S1r=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(J6,"CODE",{});var cyt=s(dFe);R1r=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),P1r=r(J6,":"),J6.forEach(t),B1r=i(ya),cFe=n(ya,"UL",{});var fyt=s(cFe);eM=n(fyt,"LI",{});var OIe=s(eM);fFe=n(OIe,"STRONG",{});var myt=s(fFe);N1r=r(myt,"detr"),myt.forEach(t),I1r=r(OIe," \u2014 "),WH=n(OIe,"A",{href:!0});var gyt=s(WH);q1r=r(gyt,"DetrForSegmentation"),gyt.forEach(t),j1r=r(OIe," (DETR model)"),OIe.forEach(t),fyt.forEach(t),D1r=i(ya),oM=n(ya,"P",{});var VIe=s(oM);G1r=r(VIe,"The model is set in evaluation mode by default using "),mFe=n(VIe,"CODE",{});var hyt=s(mFe);O1r=r(hyt,"model.eval()"),hyt.forEach(t),V1r=r(VIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=n(VIe,"CODE",{});var pyt=s(gFe);X1r=r(pyt,"model.train()"),pyt.forEach(t),VIe.forEach(t),z1r=i(ya),T(rM.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),UXe=i(f),Zd=n(f,"H2",{class:!0});var tWe=s(Zd);tM=n(tWe,"A",{id:!0,class:!0,href:!0});var _yt=s(tM);hFe=n(_yt,"SPAN",{});var uyt=s(hFe);T(R9.$$.fragment,uyt),uyt.forEach(t),_yt.forEach(t),Q1r=i(tWe),pFe=n(tWe,"SPAN",{});var byt=s(pFe);W1r=r(byt,"AutoModelForSemanticSegmentation"),byt.forEach(t),tWe.forEach(t),JXe=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(P9.$$.fragment,wl),H1r=i(wl),ec=n(wl,"P",{});var bte=s(ec);U1r=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HH=n(bte,"A",{href:!0});var vyt=s(HH);J1r=r(vyt,"from_pretrained()"),vyt.forEach(t),Y1r=r(bte," class method or the "),UH=n(bte,"A",{href:!0});var Fyt=s(UH);K1r=r(Fyt,"from_config()"),Fyt.forEach(t),Z1r=r(bte,` class
method.`),bte.forEach(t),e2r=i(wl),B9=n(wl,"P",{});var aWe=s(B9);o2r=r(aWe,"This class cannot be instantiated directly using "),_Fe=n(aWe,"CODE",{});var Tyt=s(_Fe);r2r=r(Tyt,"__init__()"),Tyt.forEach(t),t2r=r(aWe," (throws an error)."),aWe.forEach(t),a2r=i(wl),$t=n(wl,"DIV",{class:!0});var Y6=s($t);T(N9.$$.fragment,Y6),n2r=i(Y6),uFe=n(Y6,"P",{});var Myt=s(uFe);s2r=r(Myt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Myt.forEach(t),l2r=i(Y6),oc=n(Y6,"P",{});var vte=s(oc);i2r=r(vte,`Note:
Loading a model from its configuration file does `),bFe=n(vte,"STRONG",{});var Eyt=s(bFe);d2r=r(Eyt,"not"),Eyt.forEach(t),c2r=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(vte,"A",{href:!0});var Cyt=s(JH);f2r=r(Cyt,"from_pretrained()"),Cyt.forEach(t),m2r=r(vte," to load the model weights."),vte.forEach(t),g2r=i(Y6),T(aM.$$.fragment,Y6),Y6.forEach(t),h2r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(I9.$$.fragment,xa),p2r=i(xa),vFe=n(xa,"P",{});var wyt=s(vFe);_2r=r(wyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wyt.forEach(t),u2r=i(xa),an=n(xa,"P",{});var K6=s(an);b2r=r(K6,"The model class to instantiate is selected based on the "),FFe=n(K6,"CODE",{});var Ayt=s(FFe);v2r=r(Ayt,"model_type"),Ayt.forEach(t),F2r=r(K6,` property of the config object (either
passed as an argument or loaded from `),TFe=n(K6,"CODE",{});var Lyt=s(TFe);T2r=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),M2r=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(K6,"CODE",{});var yyt=s(MFe);E2r=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),C2r=r(K6,":"),K6.forEach(t),w2r=i(xa),tt=n(xa,"UL",{});var Al=s(tt);nM=n(Al,"LI",{});var XIe=s(nM);EFe=n(XIe,"STRONG",{});var xyt=s(EFe);A2r=r(xyt,"beit"),xyt.forEach(t),L2r=r(XIe," \u2014 "),YH=n(XIe,"A",{href:!0});var $yt=s(YH);y2r=r($yt,"BeitForSemanticSegmentation"),$yt.forEach(t),x2r=r(XIe," (BEiT model)"),XIe.forEach(t),$2r=i(Al),sM=n(Al,"LI",{});var zIe=s(sM);CFe=n(zIe,"STRONG",{});var kyt=s(CFe);k2r=r(kyt,"data2vec-vision"),kyt.forEach(t),S2r=r(zIe," \u2014 "),KH=n(zIe,"A",{href:!0});var Syt=s(KH);R2r=r(Syt,"Data2VecVisionForSemanticSegmentation"),Syt.forEach(t),P2r=r(zIe," (Data2VecVision model)"),zIe.forEach(t),B2r=i(Al),lM=n(Al,"LI",{});var QIe=s(lM);wFe=n(QIe,"STRONG",{});var Ryt=s(wFe);N2r=r(Ryt,"dpt"),Ryt.forEach(t),I2r=r(QIe," \u2014 "),ZH=n(QIe,"A",{href:!0});var Pyt=s(ZH);q2r=r(Pyt,"DPTForSemanticSegmentation"),Pyt.forEach(t),j2r=r(QIe," (DPT model)"),QIe.forEach(t),D2r=i(Al),iM=n(Al,"LI",{});var WIe=s(iM);AFe=n(WIe,"STRONG",{});var Byt=s(AFe);G2r=r(Byt,"mobilevit"),Byt.forEach(t),O2r=r(WIe," \u2014 "),eU=n(WIe,"A",{href:!0});var Nyt=s(eU);V2r=r(Nyt,"MobileViTForSemanticSegmentation"),Nyt.forEach(t),X2r=r(WIe," (MobileViT model)"),WIe.forEach(t),z2r=i(Al),dM=n(Al,"LI",{});var HIe=s(dM);LFe=n(HIe,"STRONG",{});var Iyt=s(LFe);Q2r=r(Iyt,"segformer"),Iyt.forEach(t),W2r=r(HIe," \u2014 "),oU=n(HIe,"A",{href:!0});var qyt=s(oU);H2r=r(qyt,"SegformerForSemanticSegmentation"),qyt.forEach(t),U2r=r(HIe," (SegFormer model)"),HIe.forEach(t),Al.forEach(t),J2r=i(xa),cM=n(xa,"P",{});var UIe=s(cM);Y2r=r(UIe,"The model is set in evaluation mode by default using "),yFe=n(UIe,"CODE",{});var jyt=s(yFe);K2r=r(jyt,"model.eval()"),jyt.forEach(t),Z2r=r(UIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=n(UIe,"CODE",{});var Dyt=s(xFe);ebr=r(Dyt,"model.train()"),Dyt.forEach(t),UIe.forEach(t),obr=i(xa),T(fM.$$.fragment,xa),xa.forEach(t),wl.forEach(t),YXe=i(f),rc=n(f,"H2",{class:!0});var nWe=s(rc);mM=n(nWe,"A",{id:!0,class:!0,href:!0});var Gyt=s(mM);$Fe=n(Gyt,"SPAN",{});var Oyt=s($Fe);T(q9.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),rbr=i(nWe),kFe=n(nWe,"SPAN",{});var Vyt=s(kFe);tbr=r(Vyt,"AutoModelForInstanceSegmentation"),Vyt.forEach(t),nWe.forEach(t),KXe=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(j9.$$.fragment,Ll),abr=i(Ll),tc=n(Ll,"P",{});var Fte=s(tc);nbr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rU=n(Fte,"A",{href:!0});var Xyt=s(rU);sbr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),lbr=r(Fte," class method or the "),tU=n(Fte,"A",{href:!0});var zyt=s(tU);ibr=r(zyt,"from_config()"),zyt.forEach(t),dbr=r(Fte,` class
method.`),Fte.forEach(t),cbr=i(Ll),D9=n(Ll,"P",{});var sWe=s(D9);fbr=r(sWe,"This class cannot be instantiated directly using "),SFe=n(sWe,"CODE",{});var Qyt=s(SFe);mbr=r(Qyt,"__init__()"),Qyt.forEach(t),gbr=r(sWe," (throws an error)."),sWe.forEach(t),hbr=i(Ll),kt=n(Ll,"DIV",{class:!0});var Z6=s(kt);T(G9.$$.fragment,Z6),pbr=i(Z6),RFe=n(Z6,"P",{});var Wyt=s(RFe);_br=r(Wyt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wyt.forEach(t),ubr=i(Z6),ac=n(Z6,"P",{});var Tte=s(ac);bbr=r(Tte,`Note:
Loading a model from its configuration file does `),PFe=n(Tte,"STRONG",{});var Hyt=s(PFe);vbr=r(Hyt,"not"),Hyt.forEach(t),Fbr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Tte,"A",{href:!0});var Uyt=s(aU);Tbr=r(Uyt,"from_pretrained()"),Uyt.forEach(t),Mbr=r(Tte," to load the model weights."),Tte.forEach(t),Ebr=i(Z6),T(gM.$$.fragment,Z6),Z6.forEach(t),Cbr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(O9.$$.fragment,$a),wbr=i($a),BFe=n($a,"P",{});var Jyt=s(BFe);Abr=r(Jyt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Jyt.forEach(t),Lbr=i($a),nn=n($a,"P",{});var e7=s(nn);ybr=r(e7,"The model class to instantiate is selected based on the "),NFe=n(e7,"CODE",{});var Yyt=s(NFe);xbr=r(Yyt,"model_type"),Yyt.forEach(t),$br=r(e7,` property of the config object (either
passed as an argument or loaded from `),IFe=n(e7,"CODE",{});var Kyt=s(IFe);kbr=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),Sbr=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(e7,"CODE",{});var Zyt=s(qFe);Rbr=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),Pbr=r(e7,":"),e7.forEach(t),Bbr=i($a),jFe=n($a,"UL",{});var e9t=s(jFe);hM=n(e9t,"LI",{});var JIe=s(hM);DFe=n(JIe,"STRONG",{});var o9t=s(DFe);Nbr=r(o9t,"maskformer"),o9t.forEach(t),Ibr=r(JIe," \u2014 "),nU=n(JIe,"A",{href:!0});var r9t=s(nU);qbr=r(r9t,"MaskFormerForInstanceSegmentation"),r9t.forEach(t),jbr=r(JIe," (MaskFormer model)"),JIe.forEach(t),e9t.forEach(t),Dbr=i($a),pM=n($a,"P",{});var YIe=s(pM);Gbr=r(YIe,"The model is set in evaluation mode by default using "),GFe=n(YIe,"CODE",{});var t9t=s(GFe);Obr=r(t9t,"model.eval()"),t9t.forEach(t),Vbr=r(YIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OFe=n(YIe,"CODE",{});var a9t=s(OFe);Xbr=r(a9t,"model.train()"),a9t.forEach(t),YIe.forEach(t),zbr=i($a),T(_M.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),ZXe=i(f),nc=n(f,"H2",{class:!0});var lWe=s(nc);uM=n(lWe,"A",{id:!0,class:!0,href:!0});var n9t=s(uM);VFe=n(n9t,"SPAN",{});var s9t=s(VFe);T(V9.$$.fragment,s9t),s9t.forEach(t),n9t.forEach(t),Qbr=i(lWe),XFe=n(lWe,"SPAN",{});var l9t=s(XFe);Wbr=r(l9t,"TFAutoModel"),l9t.forEach(t),lWe.forEach(t),eze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(X9.$$.fragment,yl),Hbr=i(yl),sc=n(yl,"P",{});var Mte=s(sc);Ubr=r(Mte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sU=n(Mte,"A",{href:!0});var i9t=s(sU);Jbr=r(i9t,"from_pretrained()"),i9t.forEach(t),Ybr=r(Mte," class method or the "),lU=n(Mte,"A",{href:!0});var d9t=s(lU);Kbr=r(d9t,"from_config()"),d9t.forEach(t),Zbr=r(Mte,` class
method.`),Mte.forEach(t),evr=i(yl),z9=n(yl,"P",{});var iWe=s(z9);ovr=r(iWe,"This class cannot be instantiated directly using "),zFe=n(iWe,"CODE",{});var c9t=s(zFe);rvr=r(c9t,"__init__()"),c9t.forEach(t),tvr=r(iWe," (throws an error)."),iWe.forEach(t),avr=i(yl),St=n(yl,"DIV",{class:!0});var o7=s(St);T(Q9.$$.fragment,o7),nvr=i(o7),QFe=n(o7,"P",{});var f9t=s(QFe);svr=r(f9t,"Instantiates one of the base model classes of the library from a configuration."),f9t.forEach(t),lvr=i(o7),lc=n(o7,"P",{});var Ete=s(lc);ivr=r(Ete,`Note:
Loading a model from its configuration file does `),WFe=n(Ete,"STRONG",{});var m9t=s(WFe);dvr=r(m9t,"not"),m9t.forEach(t),cvr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(Ete,"A",{href:!0});var g9t=s(iU);fvr=r(g9t,"from_pretrained()"),g9t.forEach(t),mvr=r(Ete," to load the model weights."),Ete.forEach(t),gvr=i(o7),T(bM.$$.fragment,o7),o7.forEach(t),hvr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(W9.$$.fragment,xl),pvr=i(xl),HFe=n(xl,"P",{});var h9t=s(HFe);_vr=r(h9t,"Instantiate one of the base model classes of the library from a pretrained model."),h9t.forEach(t),uvr=i(xl),sn=n(xl,"P",{});var r7=s(sn);bvr=r(r7,"The model class to instantiate is selected based on the "),UFe=n(r7,"CODE",{});var p9t=s(UFe);vvr=r(p9t,"model_type"),p9t.forEach(t),Fvr=r(r7,` property of the config object (either
passed as an argument or loaded from `),JFe=n(r7,"CODE",{});var _9t=s(JFe);Tvr=r(_9t,"pretrained_model_name_or_path"),_9t.forEach(t),Mvr=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(r7,"CODE",{});var u9t=s(YFe);Evr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),Cvr=r(r7,":"),r7.forEach(t),wvr=i(xl),j=n(xl,"UL",{});var D=s(j);vM=n(D,"LI",{});var KIe=s(vM);KFe=n(KIe,"STRONG",{});var b9t=s(KFe);Avr=r(b9t,"albert"),b9t.forEach(t),Lvr=r(KIe," \u2014 "),dU=n(KIe,"A",{href:!0});var v9t=s(dU);yvr=r(v9t,"TFAlbertModel"),v9t.forEach(t),xvr=r(KIe," (ALBERT model)"),KIe.forEach(t),$vr=i(D),FM=n(D,"LI",{});var ZIe=s(FM);ZFe=n(ZIe,"STRONG",{});var F9t=s(ZFe);kvr=r(F9t,"bart"),F9t.forEach(t),Svr=r(ZIe," \u2014 "),cU=n(ZIe,"A",{href:!0});var T9t=s(cU);Rvr=r(T9t,"TFBartModel"),T9t.forEach(t),Pvr=r(ZIe," (BART model)"),ZIe.forEach(t),Bvr=i(D),TM=n(D,"LI",{});var eqe=s(TM);eTe=n(eqe,"STRONG",{});var M9t=s(eTe);Nvr=r(M9t,"bert"),M9t.forEach(t),Ivr=r(eqe," \u2014 "),fU=n(eqe,"A",{href:!0});var E9t=s(fU);qvr=r(E9t,"TFBertModel"),E9t.forEach(t),jvr=r(eqe," (BERT model)"),eqe.forEach(t),Dvr=i(D),MM=n(D,"LI",{});var oqe=s(MM);oTe=n(oqe,"STRONG",{});var C9t=s(oTe);Gvr=r(C9t,"blenderbot"),C9t.forEach(t),Ovr=r(oqe," \u2014 "),mU=n(oqe,"A",{href:!0});var w9t=s(mU);Vvr=r(w9t,"TFBlenderbotModel"),w9t.forEach(t),Xvr=r(oqe," (Blenderbot model)"),oqe.forEach(t),zvr=i(D),EM=n(D,"LI",{});var rqe=s(EM);rTe=n(rqe,"STRONG",{});var A9t=s(rTe);Qvr=r(A9t,"blenderbot-small"),A9t.forEach(t),Wvr=r(rqe," \u2014 "),gU=n(rqe,"A",{href:!0});var L9t=s(gU);Hvr=r(L9t,"TFBlenderbotSmallModel"),L9t.forEach(t),Uvr=r(rqe," (BlenderbotSmall model)"),rqe.forEach(t),Jvr=i(D),CM=n(D,"LI",{});var tqe=s(CM);tTe=n(tqe,"STRONG",{});var y9t=s(tTe);Yvr=r(y9t,"camembert"),y9t.forEach(t),Kvr=r(tqe," \u2014 "),hU=n(tqe,"A",{href:!0});var x9t=s(hU);Zvr=r(x9t,"TFCamembertModel"),x9t.forEach(t),e3r=r(tqe," (CamemBERT model)"),tqe.forEach(t),o3r=i(D),wM=n(D,"LI",{});var aqe=s(wM);aTe=n(aqe,"STRONG",{});var $9t=s(aTe);r3r=r($9t,"clip"),$9t.forEach(t),t3r=r(aqe," \u2014 "),pU=n(aqe,"A",{href:!0});var k9t=s(pU);a3r=r(k9t,"TFCLIPModel"),k9t.forEach(t),n3r=r(aqe," (CLIP model)"),aqe.forEach(t),s3r=i(D),AM=n(D,"LI",{});var nqe=s(AM);nTe=n(nqe,"STRONG",{});var S9t=s(nTe);l3r=r(S9t,"convbert"),S9t.forEach(t),i3r=r(nqe," \u2014 "),_U=n(nqe,"A",{href:!0});var R9t=s(_U);d3r=r(R9t,"TFConvBertModel"),R9t.forEach(t),c3r=r(nqe," (ConvBERT model)"),nqe.forEach(t),f3r=i(D),LM=n(D,"LI",{});var sqe=s(LM);sTe=n(sqe,"STRONG",{});var P9t=s(sTe);m3r=r(P9t,"convnext"),P9t.forEach(t),g3r=r(sqe," \u2014 "),uU=n(sqe,"A",{href:!0});var B9t=s(uU);h3r=r(B9t,"TFConvNextModel"),B9t.forEach(t),p3r=r(sqe," (ConvNeXT model)"),sqe.forEach(t),_3r=i(D),yM=n(D,"LI",{});var lqe=s(yM);lTe=n(lqe,"STRONG",{});var N9t=s(lTe);u3r=r(N9t,"ctrl"),N9t.forEach(t),b3r=r(lqe," \u2014 "),bU=n(lqe,"A",{href:!0});var I9t=s(bU);v3r=r(I9t,"TFCTRLModel"),I9t.forEach(t),F3r=r(lqe," (CTRL model)"),lqe.forEach(t),T3r=i(D),xM=n(D,"LI",{});var iqe=s(xM);iTe=n(iqe,"STRONG",{});var q9t=s(iTe);M3r=r(q9t,"data2vec-vision"),q9t.forEach(t),E3r=r(iqe," \u2014 "),vU=n(iqe,"A",{href:!0});var j9t=s(vU);C3r=r(j9t,"TFData2VecVisionModel"),j9t.forEach(t),w3r=r(iqe," (Data2VecVision model)"),iqe.forEach(t),A3r=i(D),$M=n(D,"LI",{});var dqe=s($M);dTe=n(dqe,"STRONG",{});var D9t=s(dTe);L3r=r(D9t,"deberta"),D9t.forEach(t),y3r=r(dqe," \u2014 "),FU=n(dqe,"A",{href:!0});var G9t=s(FU);x3r=r(G9t,"TFDebertaModel"),G9t.forEach(t),$3r=r(dqe," (DeBERTa model)"),dqe.forEach(t),k3r=i(D),kM=n(D,"LI",{});var cqe=s(kM);cTe=n(cqe,"STRONG",{});var O9t=s(cTe);S3r=r(O9t,"deberta-v2"),O9t.forEach(t),R3r=r(cqe," \u2014 "),TU=n(cqe,"A",{href:!0});var V9t=s(TU);P3r=r(V9t,"TFDebertaV2Model"),V9t.forEach(t),B3r=r(cqe," (DeBERTa-v2 model)"),cqe.forEach(t),N3r=i(D),SM=n(D,"LI",{});var fqe=s(SM);fTe=n(fqe,"STRONG",{});var X9t=s(fTe);I3r=r(X9t,"distilbert"),X9t.forEach(t),q3r=r(fqe," \u2014 "),MU=n(fqe,"A",{href:!0});var z9t=s(MU);j3r=r(z9t,"TFDistilBertModel"),z9t.forEach(t),D3r=r(fqe," (DistilBERT model)"),fqe.forEach(t),G3r=i(D),RM=n(D,"LI",{});var mqe=s(RM);mTe=n(mqe,"STRONG",{});var Q9t=s(mTe);O3r=r(Q9t,"dpr"),Q9t.forEach(t),V3r=r(mqe," \u2014 "),EU=n(mqe,"A",{href:!0});var W9t=s(EU);X3r=r(W9t,"TFDPRQuestionEncoder"),W9t.forEach(t),z3r=r(mqe," (DPR model)"),mqe.forEach(t),Q3r=i(D),PM=n(D,"LI",{});var gqe=s(PM);gTe=n(gqe,"STRONG",{});var H9t=s(gTe);W3r=r(H9t,"electra"),H9t.forEach(t),H3r=r(gqe," \u2014 "),CU=n(gqe,"A",{href:!0});var U9t=s(CU);U3r=r(U9t,"TFElectraModel"),U9t.forEach(t),J3r=r(gqe," (ELECTRA model)"),gqe.forEach(t),Y3r=i(D),BM=n(D,"LI",{});var hqe=s(BM);hTe=n(hqe,"STRONG",{});var J9t=s(hTe);K3r=r(J9t,"flaubert"),J9t.forEach(t),Z3r=r(hqe," \u2014 "),wU=n(hqe,"A",{href:!0});var Y9t=s(wU);eFr=r(Y9t,"TFFlaubertModel"),Y9t.forEach(t),oFr=r(hqe," (FlauBERT model)"),hqe.forEach(t),rFr=i(D),Js=n(D,"LI",{});var SS=s(Js);pTe=n(SS,"STRONG",{});var K9t=s(pTe);tFr=r(K9t,"funnel"),K9t.forEach(t),aFr=r(SS," \u2014 "),AU=n(SS,"A",{href:!0});var Z9t=s(AU);nFr=r(Z9t,"TFFunnelModel"),Z9t.forEach(t),sFr=r(SS," or "),LU=n(SS,"A",{href:!0});var ext=s(LU);lFr=r(ext,"TFFunnelBaseModel"),ext.forEach(t),iFr=r(SS," (Funnel Transformer model)"),SS.forEach(t),dFr=i(D),NM=n(D,"LI",{});var pqe=s(NM);_Te=n(pqe,"STRONG",{});var oxt=s(_Te);cFr=r(oxt,"gpt2"),oxt.forEach(t),fFr=r(pqe," \u2014 "),yU=n(pqe,"A",{href:!0});var rxt=s(yU);mFr=r(rxt,"TFGPT2Model"),rxt.forEach(t),gFr=r(pqe," (OpenAI GPT-2 model)"),pqe.forEach(t),hFr=i(D),IM=n(D,"LI",{});var _qe=s(IM);uTe=n(_qe,"STRONG",{});var txt=s(uTe);pFr=r(txt,"gptj"),txt.forEach(t),_Fr=r(_qe," \u2014 "),xU=n(_qe,"A",{href:!0});var axt=s(xU);uFr=r(axt,"TFGPTJModel"),axt.forEach(t),bFr=r(_qe," (GPT-J model)"),_qe.forEach(t),vFr=i(D),qM=n(D,"LI",{});var uqe=s(qM);bTe=n(uqe,"STRONG",{});var nxt=s(bTe);FFr=r(nxt,"hubert"),nxt.forEach(t),TFr=r(uqe," \u2014 "),$U=n(uqe,"A",{href:!0});var sxt=s($U);MFr=r(sxt,"TFHubertModel"),sxt.forEach(t),EFr=r(uqe," (Hubert model)"),uqe.forEach(t),CFr=i(D),jM=n(D,"LI",{});var bqe=s(jM);vTe=n(bqe,"STRONG",{});var lxt=s(vTe);wFr=r(lxt,"layoutlm"),lxt.forEach(t),AFr=r(bqe," \u2014 "),kU=n(bqe,"A",{href:!0});var ixt=s(kU);LFr=r(ixt,"TFLayoutLMModel"),ixt.forEach(t),yFr=r(bqe," (LayoutLM model)"),bqe.forEach(t),xFr=i(D),DM=n(D,"LI",{});var vqe=s(DM);FTe=n(vqe,"STRONG",{});var dxt=s(FTe);$Fr=r(dxt,"led"),dxt.forEach(t),kFr=r(vqe," \u2014 "),SU=n(vqe,"A",{href:!0});var cxt=s(SU);SFr=r(cxt,"TFLEDModel"),cxt.forEach(t),RFr=r(vqe," (LED model)"),vqe.forEach(t),PFr=i(D),GM=n(D,"LI",{});var Fqe=s(GM);TTe=n(Fqe,"STRONG",{});var fxt=s(TTe);BFr=r(fxt,"longformer"),fxt.forEach(t),NFr=r(Fqe," \u2014 "),RU=n(Fqe,"A",{href:!0});var mxt=s(RU);IFr=r(mxt,"TFLongformerModel"),mxt.forEach(t),qFr=r(Fqe," (Longformer model)"),Fqe.forEach(t),jFr=i(D),OM=n(D,"LI",{});var Tqe=s(OM);MTe=n(Tqe,"STRONG",{});var gxt=s(MTe);DFr=r(gxt,"lxmert"),gxt.forEach(t),GFr=r(Tqe," \u2014 "),PU=n(Tqe,"A",{href:!0});var hxt=s(PU);OFr=r(hxt,"TFLxmertModel"),hxt.forEach(t),VFr=r(Tqe," (LXMERT model)"),Tqe.forEach(t),XFr=i(D),VM=n(D,"LI",{});var Mqe=s(VM);ETe=n(Mqe,"STRONG",{});var pxt=s(ETe);zFr=r(pxt,"marian"),pxt.forEach(t),QFr=r(Mqe," \u2014 "),BU=n(Mqe,"A",{href:!0});var _xt=s(BU);WFr=r(_xt,"TFMarianModel"),_xt.forEach(t),HFr=r(Mqe," (Marian model)"),Mqe.forEach(t),UFr=i(D),XM=n(D,"LI",{});var Eqe=s(XM);CTe=n(Eqe,"STRONG",{});var uxt=s(CTe);JFr=r(uxt,"mbart"),uxt.forEach(t),YFr=r(Eqe," \u2014 "),NU=n(Eqe,"A",{href:!0});var bxt=s(NU);KFr=r(bxt,"TFMBartModel"),bxt.forEach(t),ZFr=r(Eqe," (mBART model)"),Eqe.forEach(t),eTr=i(D),zM=n(D,"LI",{});var Cqe=s(zM);wTe=n(Cqe,"STRONG",{});var vxt=s(wTe);oTr=r(vxt,"mobilebert"),vxt.forEach(t),rTr=r(Cqe," \u2014 "),IU=n(Cqe,"A",{href:!0});var Fxt=s(IU);tTr=r(Fxt,"TFMobileBertModel"),Fxt.forEach(t),aTr=r(Cqe," (MobileBERT model)"),Cqe.forEach(t),nTr=i(D),QM=n(D,"LI",{});var wqe=s(QM);ATe=n(wqe,"STRONG",{});var Txt=s(ATe);sTr=r(Txt,"mpnet"),Txt.forEach(t),lTr=r(wqe," \u2014 "),qU=n(wqe,"A",{href:!0});var Mxt=s(qU);iTr=r(Mxt,"TFMPNetModel"),Mxt.forEach(t),dTr=r(wqe," (MPNet model)"),wqe.forEach(t),cTr=i(D),WM=n(D,"LI",{});var Aqe=s(WM);LTe=n(Aqe,"STRONG",{});var Ext=s(LTe);fTr=r(Ext,"mt5"),Ext.forEach(t),mTr=r(Aqe," \u2014 "),jU=n(Aqe,"A",{href:!0});var Cxt=s(jU);gTr=r(Cxt,"TFMT5Model"),Cxt.forEach(t),hTr=r(Aqe," (MT5 model)"),Aqe.forEach(t),pTr=i(D),HM=n(D,"LI",{});var Lqe=s(HM);yTe=n(Lqe,"STRONG",{});var wxt=s(yTe);_Tr=r(wxt,"openai-gpt"),wxt.forEach(t),uTr=r(Lqe," \u2014 "),DU=n(Lqe,"A",{href:!0});var Axt=s(DU);bTr=r(Axt,"TFOpenAIGPTModel"),Axt.forEach(t),vTr=r(Lqe," (OpenAI GPT model)"),Lqe.forEach(t),FTr=i(D),UM=n(D,"LI",{});var yqe=s(UM);xTe=n(yqe,"STRONG",{});var Lxt=s(xTe);TTr=r(Lxt,"opt"),Lxt.forEach(t),MTr=r(yqe," \u2014 "),GU=n(yqe,"A",{href:!0});var yxt=s(GU);ETr=r(yxt,"TFOPTModel"),yxt.forEach(t),CTr=r(yqe," (OPT model)"),yqe.forEach(t),wTr=i(D),JM=n(D,"LI",{});var xqe=s(JM);$Te=n(xqe,"STRONG",{});var xxt=s($Te);ATr=r(xxt,"pegasus"),xxt.forEach(t),LTr=r(xqe," \u2014 "),OU=n(xqe,"A",{href:!0});var $xt=s(OU);yTr=r($xt,"TFPegasusModel"),$xt.forEach(t),xTr=r(xqe," (Pegasus model)"),xqe.forEach(t),$Tr=i(D),YM=n(D,"LI",{});var $qe=s(YM);kTe=n($qe,"STRONG",{});var kxt=s(kTe);kTr=r(kxt,"regnet"),kxt.forEach(t),STr=r($qe," \u2014 "),VU=n($qe,"A",{href:!0});var Sxt=s(VU);RTr=r(Sxt,"TFRegNetModel"),Sxt.forEach(t),PTr=r($qe," (RegNet model)"),$qe.forEach(t),BTr=i(D),KM=n(D,"LI",{});var kqe=s(KM);STe=n(kqe,"STRONG",{});var Rxt=s(STe);NTr=r(Rxt,"rembert"),Rxt.forEach(t),ITr=r(kqe," \u2014 "),XU=n(kqe,"A",{href:!0});var Pxt=s(XU);qTr=r(Pxt,"TFRemBertModel"),Pxt.forEach(t),jTr=r(kqe," (RemBERT model)"),kqe.forEach(t),DTr=i(D),ZM=n(D,"LI",{});var Sqe=s(ZM);RTe=n(Sqe,"STRONG",{});var Bxt=s(RTe);GTr=r(Bxt,"resnet"),Bxt.forEach(t),OTr=r(Sqe," \u2014 "),zU=n(Sqe,"A",{href:!0});var Nxt=s(zU);VTr=r(Nxt,"TFResNetModel"),Nxt.forEach(t),XTr=r(Sqe," (ResNet model)"),Sqe.forEach(t),zTr=i(D),e4=n(D,"LI",{});var Rqe=s(e4);PTe=n(Rqe,"STRONG",{});var Ixt=s(PTe);QTr=r(Ixt,"roberta"),Ixt.forEach(t),WTr=r(Rqe," \u2014 "),QU=n(Rqe,"A",{href:!0});var qxt=s(QU);HTr=r(qxt,"TFRobertaModel"),qxt.forEach(t),UTr=r(Rqe," (RoBERTa model)"),Rqe.forEach(t),JTr=i(D),o4=n(D,"LI",{});var Pqe=s(o4);BTe=n(Pqe,"STRONG",{});var jxt=s(BTe);YTr=r(jxt,"roformer"),jxt.forEach(t),KTr=r(Pqe," \u2014 "),WU=n(Pqe,"A",{href:!0});var Dxt=s(WU);ZTr=r(Dxt,"TFRoFormerModel"),Dxt.forEach(t),e8r=r(Pqe," (RoFormer model)"),Pqe.forEach(t),o8r=i(D),r4=n(D,"LI",{});var Bqe=s(r4);NTe=n(Bqe,"STRONG",{});var Gxt=s(NTe);r8r=r(Gxt,"speech_to_text"),Gxt.forEach(t),t8r=r(Bqe," \u2014 "),HU=n(Bqe,"A",{href:!0});var Oxt=s(HU);a8r=r(Oxt,"TFSpeech2TextModel"),Oxt.forEach(t),n8r=r(Bqe," (Speech2Text model)"),Bqe.forEach(t),s8r=i(D),t4=n(D,"LI",{});var Nqe=s(t4);ITe=n(Nqe,"STRONG",{});var Vxt=s(ITe);l8r=r(Vxt,"swin"),Vxt.forEach(t),i8r=r(Nqe," \u2014 "),UU=n(Nqe,"A",{href:!0});var Xxt=s(UU);d8r=r(Xxt,"TFSwinModel"),Xxt.forEach(t),c8r=r(Nqe," (Swin Transformer model)"),Nqe.forEach(t),f8r=i(D),a4=n(D,"LI",{});var Iqe=s(a4);qTe=n(Iqe,"STRONG",{});var zxt=s(qTe);m8r=r(zxt,"t5"),zxt.forEach(t),g8r=r(Iqe," \u2014 "),JU=n(Iqe,"A",{href:!0});var Qxt=s(JU);h8r=r(Qxt,"TFT5Model"),Qxt.forEach(t),p8r=r(Iqe," (T5 model)"),Iqe.forEach(t),_8r=i(D),n4=n(D,"LI",{});var qqe=s(n4);jTe=n(qqe,"STRONG",{});var Wxt=s(jTe);u8r=r(Wxt,"tapas"),Wxt.forEach(t),b8r=r(qqe," \u2014 "),YU=n(qqe,"A",{href:!0});var Hxt=s(YU);v8r=r(Hxt,"TFTapasModel"),Hxt.forEach(t),F8r=r(qqe," (TAPAS model)"),qqe.forEach(t),T8r=i(D),s4=n(D,"LI",{});var jqe=s(s4);DTe=n(jqe,"STRONG",{});var Uxt=s(DTe);M8r=r(Uxt,"transfo-xl"),Uxt.forEach(t),E8r=r(jqe," \u2014 "),KU=n(jqe,"A",{href:!0});var Jxt=s(KU);C8r=r(Jxt,"TFTransfoXLModel"),Jxt.forEach(t),w8r=r(jqe," (Transformer-XL model)"),jqe.forEach(t),A8r=i(D),l4=n(D,"LI",{});var Dqe=s(l4);GTe=n(Dqe,"STRONG",{});var Yxt=s(GTe);L8r=r(Yxt,"vit"),Yxt.forEach(t),y8r=r(Dqe," \u2014 "),ZU=n(Dqe,"A",{href:!0});var Kxt=s(ZU);x8r=r(Kxt,"TFViTModel"),Kxt.forEach(t),$8r=r(Dqe," (ViT model)"),Dqe.forEach(t),k8r=i(D),i4=n(D,"LI",{});var Gqe=s(i4);OTe=n(Gqe,"STRONG",{});var Zxt=s(OTe);S8r=r(Zxt,"vit_mae"),Zxt.forEach(t),R8r=r(Gqe," \u2014 "),eJ=n(Gqe,"A",{href:!0});var e$t=s(eJ);P8r=r(e$t,"TFViTMAEModel"),e$t.forEach(t),B8r=r(Gqe," (ViTMAE model)"),Gqe.forEach(t),N8r=i(D),d4=n(D,"LI",{});var Oqe=s(d4);VTe=n(Oqe,"STRONG",{});var o$t=s(VTe);I8r=r(o$t,"wav2vec2"),o$t.forEach(t),q8r=r(Oqe," \u2014 "),oJ=n(Oqe,"A",{href:!0});var r$t=s(oJ);j8r=r(r$t,"TFWav2Vec2Model"),r$t.forEach(t),D8r=r(Oqe," (Wav2Vec2 model)"),Oqe.forEach(t),G8r=i(D),c4=n(D,"LI",{});var Vqe=s(c4);XTe=n(Vqe,"STRONG",{});var t$t=s(XTe);O8r=r(t$t,"xlm"),t$t.forEach(t),V8r=r(Vqe," \u2014 "),rJ=n(Vqe,"A",{href:!0});var a$t=s(rJ);X8r=r(a$t,"TFXLMModel"),a$t.forEach(t),z8r=r(Vqe," (XLM model)"),Vqe.forEach(t),Q8r=i(D),f4=n(D,"LI",{});var Xqe=s(f4);zTe=n(Xqe,"STRONG",{});var n$t=s(zTe);W8r=r(n$t,"xlm-roberta"),n$t.forEach(t),H8r=r(Xqe," \u2014 "),tJ=n(Xqe,"A",{href:!0});var s$t=s(tJ);U8r=r(s$t,"TFXLMRobertaModel"),s$t.forEach(t),J8r=r(Xqe," (XLM-RoBERTa model)"),Xqe.forEach(t),Y8r=i(D),m4=n(D,"LI",{});var zqe=s(m4);QTe=n(zqe,"STRONG",{});var l$t=s(QTe);K8r=r(l$t,"xlnet"),l$t.forEach(t),Z8r=r(zqe," \u2014 "),aJ=n(zqe,"A",{href:!0});var i$t=s(aJ);eMr=r(i$t,"TFXLNetModel"),i$t.forEach(t),oMr=r(zqe," (XLNet model)"),zqe.forEach(t),D.forEach(t),rMr=i(xl),T(g4.$$.fragment,xl),xl.forEach(t),yl.forEach(t),oze=i(f),ic=n(f,"H2",{class:!0});var dWe=s(ic);h4=n(dWe,"A",{id:!0,class:!0,href:!0});var d$t=s(h4);WTe=n(d$t,"SPAN",{});var c$t=s(WTe);T(H9.$$.fragment,c$t),c$t.forEach(t),d$t.forEach(t),tMr=i(dWe),HTe=n(dWe,"SPAN",{});var f$t=s(HTe);aMr=r(f$t,"TFAutoModelForPreTraining"),f$t.forEach(t),dWe.forEach(t),rze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(U9.$$.fragment,$l),nMr=i($l),dc=n($l,"P",{});var Cte=s(dc);sMr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nJ=n(Cte,"A",{href:!0});var m$t=s(nJ);lMr=r(m$t,"from_pretrained()"),m$t.forEach(t),iMr=r(Cte," class method or the "),sJ=n(Cte,"A",{href:!0});var g$t=s(sJ);dMr=r(g$t,"from_config()"),g$t.forEach(t),cMr=r(Cte,` class
method.`),Cte.forEach(t),fMr=i($l),J9=n($l,"P",{});var cWe=s(J9);mMr=r(cWe,"This class cannot be instantiated directly using "),UTe=n(cWe,"CODE",{});var h$t=s(UTe);gMr=r(h$t,"__init__()"),h$t.forEach(t),hMr=r(cWe," (throws an error)."),cWe.forEach(t),pMr=i($l),Rt=n($l,"DIV",{class:!0});var t7=s(Rt);T(Y9.$$.fragment,t7),_Mr=i(t7),JTe=n(t7,"P",{});var p$t=s(JTe);uMr=r(p$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),p$t.forEach(t),bMr=i(t7),cc=n(t7,"P",{});var wte=s(cc);vMr=r(wte,`Note:
Loading a model from its configuration file does `),YTe=n(wte,"STRONG",{});var _$t=s(YTe);FMr=r(_$t,"not"),_$t.forEach(t),TMr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(wte,"A",{href:!0});var u$t=s(lJ);MMr=r(u$t,"from_pretrained()"),u$t.forEach(t),EMr=r(wte," to load the model weights."),wte.forEach(t),CMr=i(t7),T(p4.$$.fragment,t7),t7.forEach(t),wMr=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(K9.$$.fragment,kl),AMr=i(kl),KTe=n(kl,"P",{});var b$t=s(KTe);LMr=r(b$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),b$t.forEach(t),yMr=i(kl),ln=n(kl,"P",{});var a7=s(ln);xMr=r(a7,"The model class to instantiate is selected based on the "),ZTe=n(a7,"CODE",{});var v$t=s(ZTe);$Mr=r(v$t,"model_type"),v$t.forEach(t),kMr=r(a7,` property of the config object (either
passed as an argument or loaded from `),e8e=n(a7,"CODE",{});var F$t=s(e8e);SMr=r(F$t,"pretrained_model_name_or_path"),F$t.forEach(t),RMr=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o8e=n(a7,"CODE",{});var T$t=s(o8e);PMr=r(T$t,"pretrained_model_name_or_path"),T$t.forEach(t),BMr=r(a7,":"),a7.forEach(t),NMr=i(kl),se=n(kl,"UL",{});var le=s(se);_4=n(le,"LI",{});var Qqe=s(_4);r8e=n(Qqe,"STRONG",{});var M$t=s(r8e);IMr=r(M$t,"albert"),M$t.forEach(t),qMr=r(Qqe," \u2014 "),iJ=n(Qqe,"A",{href:!0});var E$t=s(iJ);jMr=r(E$t,"TFAlbertForPreTraining"),E$t.forEach(t),DMr=r(Qqe," (ALBERT model)"),Qqe.forEach(t),GMr=i(le),u4=n(le,"LI",{});var Wqe=s(u4);t8e=n(Wqe,"STRONG",{});var C$t=s(t8e);OMr=r(C$t,"bart"),C$t.forEach(t),VMr=r(Wqe," \u2014 "),dJ=n(Wqe,"A",{href:!0});var w$t=s(dJ);XMr=r(w$t,"TFBartForConditionalGeneration"),w$t.forEach(t),zMr=r(Wqe," (BART model)"),Wqe.forEach(t),QMr=i(le),b4=n(le,"LI",{});var Hqe=s(b4);a8e=n(Hqe,"STRONG",{});var A$t=s(a8e);WMr=r(A$t,"bert"),A$t.forEach(t),HMr=r(Hqe," \u2014 "),cJ=n(Hqe,"A",{href:!0});var L$t=s(cJ);UMr=r(L$t,"TFBertForPreTraining"),L$t.forEach(t),JMr=r(Hqe," (BERT model)"),Hqe.forEach(t),YMr=i(le),v4=n(le,"LI",{});var Uqe=s(v4);n8e=n(Uqe,"STRONG",{});var y$t=s(n8e);KMr=r(y$t,"camembert"),y$t.forEach(t),ZMr=r(Uqe," \u2014 "),fJ=n(Uqe,"A",{href:!0});var x$t=s(fJ);e4r=r(x$t,"TFCamembertForMaskedLM"),x$t.forEach(t),o4r=r(Uqe," (CamemBERT model)"),Uqe.forEach(t),r4r=i(le),F4=n(le,"LI",{});var Jqe=s(F4);s8e=n(Jqe,"STRONG",{});var $$t=s(s8e);t4r=r($$t,"ctrl"),$$t.forEach(t),a4r=r(Jqe," \u2014 "),mJ=n(Jqe,"A",{href:!0});var k$t=s(mJ);n4r=r(k$t,"TFCTRLLMHeadModel"),k$t.forEach(t),s4r=r(Jqe," (CTRL model)"),Jqe.forEach(t),l4r=i(le),T4=n(le,"LI",{});var Yqe=s(T4);l8e=n(Yqe,"STRONG",{});var S$t=s(l8e);i4r=r(S$t,"distilbert"),S$t.forEach(t),d4r=r(Yqe," \u2014 "),gJ=n(Yqe,"A",{href:!0});var R$t=s(gJ);c4r=r(R$t,"TFDistilBertForMaskedLM"),R$t.forEach(t),f4r=r(Yqe," (DistilBERT model)"),Yqe.forEach(t),m4r=i(le),M4=n(le,"LI",{});var Kqe=s(M4);i8e=n(Kqe,"STRONG",{});var P$t=s(i8e);g4r=r(P$t,"electra"),P$t.forEach(t),h4r=r(Kqe," \u2014 "),hJ=n(Kqe,"A",{href:!0});var B$t=s(hJ);p4r=r(B$t,"TFElectraForPreTraining"),B$t.forEach(t),_4r=r(Kqe," (ELECTRA model)"),Kqe.forEach(t),u4r=i(le),E4=n(le,"LI",{});var Zqe=s(E4);d8e=n(Zqe,"STRONG",{});var N$t=s(d8e);b4r=r(N$t,"flaubert"),N$t.forEach(t),v4r=r(Zqe," \u2014 "),pJ=n(Zqe,"A",{href:!0});var I$t=s(pJ);F4r=r(I$t,"TFFlaubertWithLMHeadModel"),I$t.forEach(t),T4r=r(Zqe," (FlauBERT model)"),Zqe.forEach(t),M4r=i(le),C4=n(le,"LI",{});var eje=s(C4);c8e=n(eje,"STRONG",{});var q$t=s(c8e);E4r=r(q$t,"funnel"),q$t.forEach(t),C4r=r(eje," \u2014 "),_J=n(eje,"A",{href:!0});var j$t=s(_J);w4r=r(j$t,"TFFunnelForPreTraining"),j$t.forEach(t),A4r=r(eje," (Funnel Transformer model)"),eje.forEach(t),L4r=i(le),w4=n(le,"LI",{});var oje=s(w4);f8e=n(oje,"STRONG",{});var D$t=s(f8e);y4r=r(D$t,"gpt2"),D$t.forEach(t),x4r=r(oje," \u2014 "),uJ=n(oje,"A",{href:!0});var G$t=s(uJ);$4r=r(G$t,"TFGPT2LMHeadModel"),G$t.forEach(t),k4r=r(oje," (OpenAI GPT-2 model)"),oje.forEach(t),S4r=i(le),A4=n(le,"LI",{});var rje=s(A4);m8e=n(rje,"STRONG",{});var O$t=s(m8e);R4r=r(O$t,"layoutlm"),O$t.forEach(t),P4r=r(rje," \u2014 "),bJ=n(rje,"A",{href:!0});var V$t=s(bJ);B4r=r(V$t,"TFLayoutLMForMaskedLM"),V$t.forEach(t),N4r=r(rje," (LayoutLM model)"),rje.forEach(t),I4r=i(le),L4=n(le,"LI",{});var tje=s(L4);g8e=n(tje,"STRONG",{});var X$t=s(g8e);q4r=r(X$t,"lxmert"),X$t.forEach(t),j4r=r(tje," \u2014 "),vJ=n(tje,"A",{href:!0});var z$t=s(vJ);D4r=r(z$t,"TFLxmertForPreTraining"),z$t.forEach(t),G4r=r(tje," (LXMERT model)"),tje.forEach(t),O4r=i(le),y4=n(le,"LI",{});var aje=s(y4);h8e=n(aje,"STRONG",{});var Q$t=s(h8e);V4r=r(Q$t,"mobilebert"),Q$t.forEach(t),X4r=r(aje," \u2014 "),FJ=n(aje,"A",{href:!0});var W$t=s(FJ);z4r=r(W$t,"TFMobileBertForPreTraining"),W$t.forEach(t),Q4r=r(aje," (MobileBERT model)"),aje.forEach(t),W4r=i(le),x4=n(le,"LI",{});var nje=s(x4);p8e=n(nje,"STRONG",{});var H$t=s(p8e);H4r=r(H$t,"mpnet"),H$t.forEach(t),U4r=r(nje," \u2014 "),TJ=n(nje,"A",{href:!0});var U$t=s(TJ);J4r=r(U$t,"TFMPNetForMaskedLM"),U$t.forEach(t),Y4r=r(nje," (MPNet model)"),nje.forEach(t),K4r=i(le),$4=n(le,"LI",{});var sje=s($4);_8e=n(sje,"STRONG",{});var J$t=s(_8e);Z4r=r(J$t,"openai-gpt"),J$t.forEach(t),eEr=r(sje," \u2014 "),MJ=n(sje,"A",{href:!0});var Y$t=s(MJ);oEr=r(Y$t,"TFOpenAIGPTLMHeadModel"),Y$t.forEach(t),rEr=r(sje," (OpenAI GPT model)"),sje.forEach(t),tEr=i(le),k4=n(le,"LI",{});var lje=s(k4);u8e=n(lje,"STRONG",{});var K$t=s(u8e);aEr=r(K$t,"roberta"),K$t.forEach(t),nEr=r(lje," \u2014 "),EJ=n(lje,"A",{href:!0});var Z$t=s(EJ);sEr=r(Z$t,"TFRobertaForMaskedLM"),Z$t.forEach(t),lEr=r(lje," (RoBERTa model)"),lje.forEach(t),iEr=i(le),S4=n(le,"LI",{});var ije=s(S4);b8e=n(ije,"STRONG",{});var ekt=s(b8e);dEr=r(ekt,"t5"),ekt.forEach(t),cEr=r(ije," \u2014 "),CJ=n(ije,"A",{href:!0});var okt=s(CJ);fEr=r(okt,"TFT5ForConditionalGeneration"),okt.forEach(t),mEr=r(ije," (T5 model)"),ije.forEach(t),gEr=i(le),R4=n(le,"LI",{});var dje=s(R4);v8e=n(dje,"STRONG",{});var rkt=s(v8e);hEr=r(rkt,"tapas"),rkt.forEach(t),pEr=r(dje," \u2014 "),wJ=n(dje,"A",{href:!0});var tkt=s(wJ);_Er=r(tkt,"TFTapasForMaskedLM"),tkt.forEach(t),uEr=r(dje," (TAPAS model)"),dje.forEach(t),bEr=i(le),P4=n(le,"LI",{});var cje=s(P4);F8e=n(cje,"STRONG",{});var akt=s(F8e);vEr=r(akt,"transfo-xl"),akt.forEach(t),FEr=r(cje," \u2014 "),AJ=n(cje,"A",{href:!0});var nkt=s(AJ);TEr=r(nkt,"TFTransfoXLLMHeadModel"),nkt.forEach(t),MEr=r(cje," (Transformer-XL model)"),cje.forEach(t),EEr=i(le),B4=n(le,"LI",{});var fje=s(B4);T8e=n(fje,"STRONG",{});var skt=s(T8e);CEr=r(skt,"vit_mae"),skt.forEach(t),wEr=r(fje," \u2014 "),LJ=n(fje,"A",{href:!0});var lkt=s(LJ);AEr=r(lkt,"TFViTMAEForPreTraining"),lkt.forEach(t),LEr=r(fje," (ViTMAE model)"),fje.forEach(t),yEr=i(le),N4=n(le,"LI",{});var mje=s(N4);M8e=n(mje,"STRONG",{});var ikt=s(M8e);xEr=r(ikt,"xlm"),ikt.forEach(t),$Er=r(mje," \u2014 "),yJ=n(mje,"A",{href:!0});var dkt=s(yJ);kEr=r(dkt,"TFXLMWithLMHeadModel"),dkt.forEach(t),SEr=r(mje," (XLM model)"),mje.forEach(t),REr=i(le),I4=n(le,"LI",{});var gje=s(I4);E8e=n(gje,"STRONG",{});var ckt=s(E8e);PEr=r(ckt,"xlm-roberta"),ckt.forEach(t),BEr=r(gje," \u2014 "),xJ=n(gje,"A",{href:!0});var fkt=s(xJ);NEr=r(fkt,"TFXLMRobertaForMaskedLM"),fkt.forEach(t),IEr=r(gje," (XLM-RoBERTa model)"),gje.forEach(t),qEr=i(le),q4=n(le,"LI",{});var hje=s(q4);C8e=n(hje,"STRONG",{});var mkt=s(C8e);jEr=r(mkt,"xlnet"),mkt.forEach(t),DEr=r(hje," \u2014 "),$J=n(hje,"A",{href:!0});var gkt=s($J);GEr=r(gkt,"TFXLNetLMHeadModel"),gkt.forEach(t),OEr=r(hje," (XLNet model)"),hje.forEach(t),le.forEach(t),VEr=i(kl),T(j4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),tze=i(f),fc=n(f,"H2",{class:!0});var fWe=s(fc);D4=n(fWe,"A",{id:!0,class:!0,href:!0});var hkt=s(D4);w8e=n(hkt,"SPAN",{});var pkt=s(w8e);T(Z9.$$.fragment,pkt),pkt.forEach(t),hkt.forEach(t),XEr=i(fWe),A8e=n(fWe,"SPAN",{});var _kt=s(A8e);zEr=r(_kt,"TFAutoModelForCausalLM"),_kt.forEach(t),fWe.forEach(t),aze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(ex.$$.fragment,Sl),QEr=i(Sl),mc=n(Sl,"P",{});var Ate=s(mc);WEr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kJ=n(Ate,"A",{href:!0});var ukt=s(kJ);HEr=r(ukt,"from_pretrained()"),ukt.forEach(t),UEr=r(Ate," class method or the "),SJ=n(Ate,"A",{href:!0});var bkt=s(SJ);JEr=r(bkt,"from_config()"),bkt.forEach(t),YEr=r(Ate,` class
method.`),Ate.forEach(t),KEr=i(Sl),ox=n(Sl,"P",{});var mWe=s(ox);ZEr=r(mWe,"This class cannot be instantiated directly using "),L8e=n(mWe,"CODE",{});var vkt=s(L8e);eCr=r(vkt,"__init__()"),vkt.forEach(t),oCr=r(mWe," (throws an error)."),mWe.forEach(t),rCr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var n7=s(Pt);T(rx.$$.fragment,n7),tCr=i(n7),y8e=n(n7,"P",{});var Fkt=s(y8e);aCr=r(Fkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fkt.forEach(t),nCr=i(n7),gc=n(n7,"P",{});var Lte=s(gc);sCr=r(Lte,`Note:
Loading a model from its configuration file does `),x8e=n(Lte,"STRONG",{});var Tkt=s(x8e);lCr=r(Tkt,"not"),Tkt.forEach(t),iCr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Lte,"A",{href:!0});var Mkt=s(RJ);dCr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),cCr=r(Lte," to load the model weights."),Lte.forEach(t),fCr=i(n7),T(G4.$$.fragment,n7),n7.forEach(t),mCr=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(tx.$$.fragment,Rl),gCr=i(Rl),$8e=n(Rl,"P",{});var Ekt=s($8e);hCr=r(Ekt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ekt.forEach(t),pCr=i(Rl),dn=n(Rl,"P",{});var s7=s(dn);_Cr=r(s7,"The model class to instantiate is selected based on the "),k8e=n(s7,"CODE",{});var Ckt=s(k8e);uCr=r(Ckt,"model_type"),Ckt.forEach(t),bCr=r(s7,` property of the config object (either
passed as an argument or loaded from `),S8e=n(s7,"CODE",{});var wkt=s(S8e);vCr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),FCr=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R8e=n(s7,"CODE",{});var Akt=s(R8e);TCr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),MCr=r(s7,":"),s7.forEach(t),ECr=i(Rl),Me=n(Rl,"UL",{});var Ce=s(Me);O4=n(Ce,"LI",{});var pje=s(O4);P8e=n(pje,"STRONG",{});var Lkt=s(P8e);CCr=r(Lkt,"bert"),Lkt.forEach(t),wCr=r(pje," \u2014 "),PJ=n(pje,"A",{href:!0});var ykt=s(PJ);ACr=r(ykt,"TFBertLMHeadModel"),ykt.forEach(t),LCr=r(pje," (BERT model)"),pje.forEach(t),yCr=i(Ce),V4=n(Ce,"LI",{});var _je=s(V4);B8e=n(_je,"STRONG",{});var xkt=s(B8e);xCr=r(xkt,"camembert"),xkt.forEach(t),$Cr=r(_je," \u2014 "),BJ=n(_je,"A",{href:!0});var $kt=s(BJ);kCr=r($kt,"TFCamembertForCausalLM"),$kt.forEach(t),SCr=r(_je," (CamemBERT model)"),_je.forEach(t),RCr=i(Ce),X4=n(Ce,"LI",{});var uje=s(X4);N8e=n(uje,"STRONG",{});var kkt=s(N8e);PCr=r(kkt,"ctrl"),kkt.forEach(t),BCr=r(uje," \u2014 "),NJ=n(uje,"A",{href:!0});var Skt=s(NJ);NCr=r(Skt,"TFCTRLLMHeadModel"),Skt.forEach(t),ICr=r(uje," (CTRL model)"),uje.forEach(t),qCr=i(Ce),z4=n(Ce,"LI",{});var bje=s(z4);I8e=n(bje,"STRONG",{});var Rkt=s(I8e);jCr=r(Rkt,"gpt2"),Rkt.forEach(t),DCr=r(bje," \u2014 "),IJ=n(bje,"A",{href:!0});var Pkt=s(IJ);GCr=r(Pkt,"TFGPT2LMHeadModel"),Pkt.forEach(t),OCr=r(bje," (OpenAI GPT-2 model)"),bje.forEach(t),VCr=i(Ce),Q4=n(Ce,"LI",{});var vje=s(Q4);q8e=n(vje,"STRONG",{});var Bkt=s(q8e);XCr=r(Bkt,"gptj"),Bkt.forEach(t),zCr=r(vje," \u2014 "),qJ=n(vje,"A",{href:!0});var Nkt=s(qJ);QCr=r(Nkt,"TFGPTJForCausalLM"),Nkt.forEach(t),WCr=r(vje," (GPT-J model)"),vje.forEach(t),HCr=i(Ce),W4=n(Ce,"LI",{});var Fje=s(W4);j8e=n(Fje,"STRONG",{});var Ikt=s(j8e);UCr=r(Ikt,"openai-gpt"),Ikt.forEach(t),JCr=r(Fje," \u2014 "),jJ=n(Fje,"A",{href:!0});var qkt=s(jJ);YCr=r(qkt,"TFOpenAIGPTLMHeadModel"),qkt.forEach(t),KCr=r(Fje," (OpenAI GPT model)"),Fje.forEach(t),ZCr=i(Ce),H4=n(Ce,"LI",{});var Tje=s(H4);D8e=n(Tje,"STRONG",{});var jkt=s(D8e);e5r=r(jkt,"opt"),jkt.forEach(t),o5r=r(Tje," \u2014 "),DJ=n(Tje,"A",{href:!0});var Dkt=s(DJ);r5r=r(Dkt,"TFOPTForCausalLM"),Dkt.forEach(t),t5r=r(Tje," (OPT model)"),Tje.forEach(t),a5r=i(Ce),U4=n(Ce,"LI",{});var Mje=s(U4);G8e=n(Mje,"STRONG",{});var Gkt=s(G8e);n5r=r(Gkt,"rembert"),Gkt.forEach(t),s5r=r(Mje," \u2014 "),GJ=n(Mje,"A",{href:!0});var Okt=s(GJ);l5r=r(Okt,"TFRemBertForCausalLM"),Okt.forEach(t),i5r=r(Mje," (RemBERT model)"),Mje.forEach(t),d5r=i(Ce),J4=n(Ce,"LI",{});var Eje=s(J4);O8e=n(Eje,"STRONG",{});var Vkt=s(O8e);c5r=r(Vkt,"roberta"),Vkt.forEach(t),f5r=r(Eje," \u2014 "),OJ=n(Eje,"A",{href:!0});var Xkt=s(OJ);m5r=r(Xkt,"TFRobertaForCausalLM"),Xkt.forEach(t),g5r=r(Eje," (RoBERTa model)"),Eje.forEach(t),h5r=i(Ce),Y4=n(Ce,"LI",{});var Cje=s(Y4);V8e=n(Cje,"STRONG",{});var zkt=s(V8e);p5r=r(zkt,"roformer"),zkt.forEach(t),_5r=r(Cje," \u2014 "),VJ=n(Cje,"A",{href:!0});var Qkt=s(VJ);u5r=r(Qkt,"TFRoFormerForCausalLM"),Qkt.forEach(t),b5r=r(Cje," (RoFormer model)"),Cje.forEach(t),v5r=i(Ce),K4=n(Ce,"LI",{});var wje=s(K4);X8e=n(wje,"STRONG",{});var Wkt=s(X8e);F5r=r(Wkt,"transfo-xl"),Wkt.forEach(t),T5r=r(wje," \u2014 "),XJ=n(wje,"A",{href:!0});var Hkt=s(XJ);M5r=r(Hkt,"TFTransfoXLLMHeadModel"),Hkt.forEach(t),E5r=r(wje," (Transformer-XL model)"),wje.forEach(t),C5r=i(Ce),Z4=n(Ce,"LI",{});var Aje=s(Z4);z8e=n(Aje,"STRONG",{});var Ukt=s(z8e);w5r=r(Ukt,"xlm"),Ukt.forEach(t),A5r=r(Aje," \u2014 "),zJ=n(Aje,"A",{href:!0});var Jkt=s(zJ);L5r=r(Jkt,"TFXLMWithLMHeadModel"),Jkt.forEach(t),y5r=r(Aje," (XLM model)"),Aje.forEach(t),x5r=i(Ce),eE=n(Ce,"LI",{});var Lje=s(eE);Q8e=n(Lje,"STRONG",{});var Ykt=s(Q8e);$5r=r(Ykt,"xlnet"),Ykt.forEach(t),k5r=r(Lje," \u2014 "),QJ=n(Lje,"A",{href:!0});var Kkt=s(QJ);S5r=r(Kkt,"TFXLNetLMHeadModel"),Kkt.forEach(t),R5r=r(Lje," (XLNet model)"),Lje.forEach(t),Ce.forEach(t),P5r=i(Rl),T(oE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),nze=i(f),hc=n(f,"H2",{class:!0});var gWe=s(hc);rE=n(gWe,"A",{id:!0,class:!0,href:!0});var Zkt=s(rE);W8e=n(Zkt,"SPAN",{});var eSt=s(W8e);T(ax.$$.fragment,eSt),eSt.forEach(t),Zkt.forEach(t),B5r=i(gWe),H8e=n(gWe,"SPAN",{});var oSt=s(H8e);N5r=r(oSt,"TFAutoModelForImageClassification"),oSt.forEach(t),gWe.forEach(t),sze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(nx.$$.fragment,Pl),I5r=i(Pl),pc=n(Pl,"P",{});var yte=s(pc);q5r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WJ=n(yte,"A",{href:!0});var rSt=s(WJ);j5r=r(rSt,"from_pretrained()"),rSt.forEach(t),D5r=r(yte," class method or the "),HJ=n(yte,"A",{href:!0});var tSt=s(HJ);G5r=r(tSt,"from_config()"),tSt.forEach(t),O5r=r(yte,` class
method.`),yte.forEach(t),V5r=i(Pl),sx=n(Pl,"P",{});var hWe=s(sx);X5r=r(hWe,"This class cannot be instantiated directly using "),U8e=n(hWe,"CODE",{});var aSt=s(U8e);z5r=r(aSt,"__init__()"),aSt.forEach(t),Q5r=r(hWe," (throws an error)."),hWe.forEach(t),W5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var l7=s(Bt);T(lx.$$.fragment,l7),H5r=i(l7),J8e=n(l7,"P",{});var nSt=s(J8e);U5r=r(nSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nSt.forEach(t),J5r=i(l7),_c=n(l7,"P",{});var xte=s(_c);Y5r=r(xte,`Note:
Loading a model from its configuration file does `),Y8e=n(xte,"STRONG",{});var sSt=s(Y8e);K5r=r(sSt,"not"),sSt.forEach(t),Z5r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(xte,"A",{href:!0});var lSt=s(UJ);e0r=r(lSt,"from_pretrained()"),lSt.forEach(t),o0r=r(xte," to load the model weights."),xte.forEach(t),r0r=i(l7),T(tE.$$.fragment,l7),l7.forEach(t),t0r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(ix.$$.fragment,Bl),a0r=i(Bl),K8e=n(Bl,"P",{});var iSt=s(K8e);n0r=r(iSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iSt.forEach(t),s0r=i(Bl),cn=n(Bl,"P",{});var i7=s(cn);l0r=r(i7,"The model class to instantiate is selected based on the "),Z8e=n(i7,"CODE",{});var dSt=s(Z8e);i0r=r(dSt,"model_type"),dSt.forEach(t),d0r=r(i7,` property of the config object (either
passed as an argument or loaded from `),eMe=n(i7,"CODE",{});var cSt=s(eMe);c0r=r(cSt,"pretrained_model_name_or_path"),cSt.forEach(t),f0r=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=n(i7,"CODE",{});var fSt=s(oMe);m0r=r(fSt,"pretrained_model_name_or_path"),fSt.forEach(t),g0r=r(i7,":"),i7.forEach(t),h0r=i(Bl),ar=n(Bl,"UL",{});var ka=s(ar);aE=n(ka,"LI",{});var yje=s(aE);rMe=n(yje,"STRONG",{});var mSt=s(rMe);p0r=r(mSt,"convnext"),mSt.forEach(t),_0r=r(yje," \u2014 "),JJ=n(yje,"A",{href:!0});var gSt=s(JJ);u0r=r(gSt,"TFConvNextForImageClassification"),gSt.forEach(t),b0r=r(yje," (ConvNeXT model)"),yje.forEach(t),v0r=i(ka),nE=n(ka,"LI",{});var xje=s(nE);tMe=n(xje,"STRONG",{});var hSt=s(tMe);F0r=r(hSt,"data2vec-vision"),hSt.forEach(t),T0r=r(xje," \u2014 "),YJ=n(xje,"A",{href:!0});var pSt=s(YJ);M0r=r(pSt,"TFData2VecVisionForImageClassification"),pSt.forEach(t),E0r=r(xje," (Data2VecVision model)"),xje.forEach(t),C0r=i(ka),sE=n(ka,"LI",{});var $je=s(sE);aMe=n($je,"STRONG",{});var _St=s(aMe);w0r=r(_St,"regnet"),_St.forEach(t),A0r=r($je," \u2014 "),KJ=n($je,"A",{href:!0});var uSt=s(KJ);L0r=r(uSt,"TFRegNetForImageClassification"),uSt.forEach(t),y0r=r($je," (RegNet model)"),$je.forEach(t),x0r=i(ka),lE=n(ka,"LI",{});var kje=s(lE);nMe=n(kje,"STRONG",{});var bSt=s(nMe);$0r=r(bSt,"resnet"),bSt.forEach(t),k0r=r(kje," \u2014 "),ZJ=n(kje,"A",{href:!0});var vSt=s(ZJ);S0r=r(vSt,"TFResNetForImageClassification"),vSt.forEach(t),R0r=r(kje," (ResNet model)"),kje.forEach(t),P0r=i(ka),iE=n(ka,"LI",{});var Sje=s(iE);sMe=n(Sje,"STRONG",{});var FSt=s(sMe);B0r=r(FSt,"swin"),FSt.forEach(t),N0r=r(Sje," \u2014 "),eY=n(Sje,"A",{href:!0});var TSt=s(eY);I0r=r(TSt,"TFSwinForImageClassification"),TSt.forEach(t),q0r=r(Sje," (Swin Transformer model)"),Sje.forEach(t),j0r=i(ka),dE=n(ka,"LI",{});var Rje=s(dE);lMe=n(Rje,"STRONG",{});var MSt=s(lMe);D0r=r(MSt,"vit"),MSt.forEach(t),G0r=r(Rje," \u2014 "),oY=n(Rje,"A",{href:!0});var ESt=s(oY);O0r=r(ESt,"TFViTForImageClassification"),ESt.forEach(t),V0r=r(Rje," (ViT model)"),Rje.forEach(t),ka.forEach(t),X0r=i(Bl),T(cE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),lze=i(f),uc=n(f,"H2",{class:!0});var pWe=s(uc);fE=n(pWe,"A",{id:!0,class:!0,href:!0});var CSt=s(fE);iMe=n(CSt,"SPAN",{});var wSt=s(iMe);T(dx.$$.fragment,wSt),wSt.forEach(t),CSt.forEach(t),z0r=i(pWe),dMe=n(pWe,"SPAN",{});var ASt=s(dMe);Q0r=r(ASt,"TFAutoModelForMaskedLM"),ASt.forEach(t),pWe.forEach(t),ize=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(cx.$$.fragment,Nl),W0r=i(Nl),bc=n(Nl,"P",{});var $te=s(bc);H0r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rY=n($te,"A",{href:!0});var LSt=s(rY);U0r=r(LSt,"from_pretrained()"),LSt.forEach(t),J0r=r($te," class method or the "),tY=n($te,"A",{href:!0});var ySt=s(tY);Y0r=r(ySt,"from_config()"),ySt.forEach(t),K0r=r($te,` class
method.`),$te.forEach(t),Z0r=i(Nl),fx=n(Nl,"P",{});var _We=s(fx);ewr=r(_We,"This class cannot be instantiated directly using "),cMe=n(_We,"CODE",{});var xSt=s(cMe);owr=r(xSt,"__init__()"),xSt.forEach(t),rwr=r(_We," (throws an error)."),_We.forEach(t),twr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var d7=s(Nt);T(mx.$$.fragment,d7),awr=i(d7),fMe=n(d7,"P",{});var $St=s(fMe);nwr=r($St,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$St.forEach(t),swr=i(d7),vc=n(d7,"P",{});var kte=s(vc);lwr=r(kte,`Note:
Loading a model from its configuration file does `),mMe=n(kte,"STRONG",{});var kSt=s(mMe);iwr=r(kSt,"not"),kSt.forEach(t),dwr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(kte,"A",{href:!0});var SSt=s(aY);cwr=r(SSt,"from_pretrained()"),SSt.forEach(t),fwr=r(kte," to load the model weights."),kte.forEach(t),mwr=i(d7),T(mE.$$.fragment,d7),d7.forEach(t),gwr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var Il=s(Rr);T(gx.$$.fragment,Il),hwr=i(Il),gMe=n(Il,"P",{});var RSt=s(gMe);pwr=r(RSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RSt.forEach(t),_wr=i(Il),fn=n(Il,"P",{});var c7=s(fn);uwr=r(c7,"The model class to instantiate is selected based on the "),hMe=n(c7,"CODE",{});var PSt=s(hMe);bwr=r(PSt,"model_type"),PSt.forEach(t),vwr=r(c7,` property of the config object (either
passed as an argument or loaded from `),pMe=n(c7,"CODE",{});var BSt=s(pMe);Fwr=r(BSt,"pretrained_model_name_or_path"),BSt.forEach(t),Twr=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(c7,"CODE",{});var NSt=s(_Me);Mwr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),Ewr=r(c7,":"),c7.forEach(t),Cwr=i(Il),ie=n(Il,"UL",{});var fe=s(ie);gE=n(fe,"LI",{});var Pje=s(gE);uMe=n(Pje,"STRONG",{});var ISt=s(uMe);wwr=r(ISt,"albert"),ISt.forEach(t),Awr=r(Pje," \u2014 "),nY=n(Pje,"A",{href:!0});var qSt=s(nY);Lwr=r(qSt,"TFAlbertForMaskedLM"),qSt.forEach(t),ywr=r(Pje," (ALBERT model)"),Pje.forEach(t),xwr=i(fe),hE=n(fe,"LI",{});var Bje=s(hE);bMe=n(Bje,"STRONG",{});var jSt=s(bMe);$wr=r(jSt,"bert"),jSt.forEach(t),kwr=r(Bje," \u2014 "),sY=n(Bje,"A",{href:!0});var DSt=s(sY);Swr=r(DSt,"TFBertForMaskedLM"),DSt.forEach(t),Rwr=r(Bje," (BERT model)"),Bje.forEach(t),Pwr=i(fe),pE=n(fe,"LI",{});var Nje=s(pE);vMe=n(Nje,"STRONG",{});var GSt=s(vMe);Bwr=r(GSt,"camembert"),GSt.forEach(t),Nwr=r(Nje," \u2014 "),lY=n(Nje,"A",{href:!0});var OSt=s(lY);Iwr=r(OSt,"TFCamembertForMaskedLM"),OSt.forEach(t),qwr=r(Nje," (CamemBERT model)"),Nje.forEach(t),jwr=i(fe),_E=n(fe,"LI",{});var Ije=s(_E);FMe=n(Ije,"STRONG",{});var VSt=s(FMe);Dwr=r(VSt,"convbert"),VSt.forEach(t),Gwr=r(Ije," \u2014 "),iY=n(Ije,"A",{href:!0});var XSt=s(iY);Owr=r(XSt,"TFConvBertForMaskedLM"),XSt.forEach(t),Vwr=r(Ije," (ConvBERT model)"),Ije.forEach(t),Xwr=i(fe),uE=n(fe,"LI",{});var qje=s(uE);TMe=n(qje,"STRONG",{});var zSt=s(TMe);zwr=r(zSt,"deberta"),zSt.forEach(t),Qwr=r(qje," \u2014 "),dY=n(qje,"A",{href:!0});var QSt=s(dY);Wwr=r(QSt,"TFDebertaForMaskedLM"),QSt.forEach(t),Hwr=r(qje," (DeBERTa model)"),qje.forEach(t),Uwr=i(fe),bE=n(fe,"LI",{});var jje=s(bE);MMe=n(jje,"STRONG",{});var WSt=s(MMe);Jwr=r(WSt,"deberta-v2"),WSt.forEach(t),Ywr=r(jje," \u2014 "),cY=n(jje,"A",{href:!0});var HSt=s(cY);Kwr=r(HSt,"TFDebertaV2ForMaskedLM"),HSt.forEach(t),Zwr=r(jje," (DeBERTa-v2 model)"),jje.forEach(t),eAr=i(fe),vE=n(fe,"LI",{});var Dje=s(vE);EMe=n(Dje,"STRONG",{});var USt=s(EMe);oAr=r(USt,"distilbert"),USt.forEach(t),rAr=r(Dje," \u2014 "),fY=n(Dje,"A",{href:!0});var JSt=s(fY);tAr=r(JSt,"TFDistilBertForMaskedLM"),JSt.forEach(t),aAr=r(Dje," (DistilBERT model)"),Dje.forEach(t),nAr=i(fe),FE=n(fe,"LI",{});var Gje=s(FE);CMe=n(Gje,"STRONG",{});var YSt=s(CMe);sAr=r(YSt,"electra"),YSt.forEach(t),lAr=r(Gje," \u2014 "),mY=n(Gje,"A",{href:!0});var KSt=s(mY);iAr=r(KSt,"TFElectraForMaskedLM"),KSt.forEach(t),dAr=r(Gje," (ELECTRA model)"),Gje.forEach(t),cAr=i(fe),TE=n(fe,"LI",{});var Oje=s(TE);wMe=n(Oje,"STRONG",{});var ZSt=s(wMe);fAr=r(ZSt,"flaubert"),ZSt.forEach(t),mAr=r(Oje," \u2014 "),gY=n(Oje,"A",{href:!0});var eRt=s(gY);gAr=r(eRt,"TFFlaubertWithLMHeadModel"),eRt.forEach(t),hAr=r(Oje," (FlauBERT model)"),Oje.forEach(t),pAr=i(fe),ME=n(fe,"LI",{});var Vje=s(ME);AMe=n(Vje,"STRONG",{});var oRt=s(AMe);_Ar=r(oRt,"funnel"),oRt.forEach(t),uAr=r(Vje," \u2014 "),hY=n(Vje,"A",{href:!0});var rRt=s(hY);bAr=r(rRt,"TFFunnelForMaskedLM"),rRt.forEach(t),vAr=r(Vje," (Funnel Transformer model)"),Vje.forEach(t),FAr=i(fe),EE=n(fe,"LI",{});var Xje=s(EE);LMe=n(Xje,"STRONG",{});var tRt=s(LMe);TAr=r(tRt,"layoutlm"),tRt.forEach(t),MAr=r(Xje," \u2014 "),pY=n(Xje,"A",{href:!0});var aRt=s(pY);EAr=r(aRt,"TFLayoutLMForMaskedLM"),aRt.forEach(t),CAr=r(Xje," (LayoutLM model)"),Xje.forEach(t),wAr=i(fe),CE=n(fe,"LI",{});var zje=s(CE);yMe=n(zje,"STRONG",{});var nRt=s(yMe);AAr=r(nRt,"longformer"),nRt.forEach(t),LAr=r(zje," \u2014 "),_Y=n(zje,"A",{href:!0});var sRt=s(_Y);yAr=r(sRt,"TFLongformerForMaskedLM"),sRt.forEach(t),xAr=r(zje," (Longformer model)"),zje.forEach(t),$Ar=i(fe),wE=n(fe,"LI",{});var Qje=s(wE);xMe=n(Qje,"STRONG",{});var lRt=s(xMe);kAr=r(lRt,"mobilebert"),lRt.forEach(t),SAr=r(Qje," \u2014 "),uY=n(Qje,"A",{href:!0});var iRt=s(uY);RAr=r(iRt,"TFMobileBertForMaskedLM"),iRt.forEach(t),PAr=r(Qje," (MobileBERT model)"),Qje.forEach(t),BAr=i(fe),AE=n(fe,"LI",{});var Wje=s(AE);$Me=n(Wje,"STRONG",{});var dRt=s($Me);NAr=r(dRt,"mpnet"),dRt.forEach(t),IAr=r(Wje," \u2014 "),bY=n(Wje,"A",{href:!0});var cRt=s(bY);qAr=r(cRt,"TFMPNetForMaskedLM"),cRt.forEach(t),jAr=r(Wje," (MPNet model)"),Wje.forEach(t),DAr=i(fe),LE=n(fe,"LI",{});var Hje=s(LE);kMe=n(Hje,"STRONG",{});var fRt=s(kMe);GAr=r(fRt,"rembert"),fRt.forEach(t),OAr=r(Hje," \u2014 "),vY=n(Hje,"A",{href:!0});var mRt=s(vY);VAr=r(mRt,"TFRemBertForMaskedLM"),mRt.forEach(t),XAr=r(Hje," (RemBERT model)"),Hje.forEach(t),zAr=i(fe),yE=n(fe,"LI",{});var Uje=s(yE);SMe=n(Uje,"STRONG",{});var gRt=s(SMe);QAr=r(gRt,"roberta"),gRt.forEach(t),WAr=r(Uje," \u2014 "),FY=n(Uje,"A",{href:!0});var hRt=s(FY);HAr=r(hRt,"TFRobertaForMaskedLM"),hRt.forEach(t),UAr=r(Uje," (RoBERTa model)"),Uje.forEach(t),JAr=i(fe),xE=n(fe,"LI",{});var Jje=s(xE);RMe=n(Jje,"STRONG",{});var pRt=s(RMe);YAr=r(pRt,"roformer"),pRt.forEach(t),KAr=r(Jje," \u2014 "),TY=n(Jje,"A",{href:!0});var _Rt=s(TY);ZAr=r(_Rt,"TFRoFormerForMaskedLM"),_Rt.forEach(t),e6r=r(Jje," (RoFormer model)"),Jje.forEach(t),o6r=i(fe),$E=n(fe,"LI",{});var Yje=s($E);PMe=n(Yje,"STRONG",{});var uRt=s(PMe);r6r=r(uRt,"tapas"),uRt.forEach(t),t6r=r(Yje," \u2014 "),MY=n(Yje,"A",{href:!0});var bRt=s(MY);a6r=r(bRt,"TFTapasForMaskedLM"),bRt.forEach(t),n6r=r(Yje," (TAPAS model)"),Yje.forEach(t),s6r=i(fe),kE=n(fe,"LI",{});var Kje=s(kE);BMe=n(Kje,"STRONG",{});var vRt=s(BMe);l6r=r(vRt,"xlm"),vRt.forEach(t),i6r=r(Kje," \u2014 "),EY=n(Kje,"A",{href:!0});var FRt=s(EY);d6r=r(FRt,"TFXLMWithLMHeadModel"),FRt.forEach(t),c6r=r(Kje," (XLM model)"),Kje.forEach(t),f6r=i(fe),SE=n(fe,"LI",{});var Zje=s(SE);NMe=n(Zje,"STRONG",{});var TRt=s(NMe);m6r=r(TRt,"xlm-roberta"),TRt.forEach(t),g6r=r(Zje," \u2014 "),CY=n(Zje,"A",{href:!0});var MRt=s(CY);h6r=r(MRt,"TFXLMRobertaForMaskedLM"),MRt.forEach(t),p6r=r(Zje," (XLM-RoBERTa model)"),Zje.forEach(t),fe.forEach(t),_6r=i(Il),T(RE.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),dze=i(f),Fc=n(f,"H2",{class:!0});var uWe=s(Fc);PE=n(uWe,"A",{id:!0,class:!0,href:!0});var ERt=s(PE);IMe=n(ERt,"SPAN",{});var CRt=s(IMe);T(hx.$$.fragment,CRt),CRt.forEach(t),ERt.forEach(t),u6r=i(uWe),qMe=n(uWe,"SPAN",{});var wRt=s(qMe);b6r=r(wRt,"TFAutoModelForSeq2SeqLM"),wRt.forEach(t),uWe.forEach(t),cze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(px.$$.fragment,ql),v6r=i(ql),Tc=n(ql,"P",{});var Ste=s(Tc);F6r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wY=n(Ste,"A",{href:!0});var ARt=s(wY);T6r=r(ARt,"from_pretrained()"),ARt.forEach(t),M6r=r(Ste," class method or the "),AY=n(Ste,"A",{href:!0});var LRt=s(AY);E6r=r(LRt,"from_config()"),LRt.forEach(t),C6r=r(Ste,` class
method.`),Ste.forEach(t),w6r=i(ql),_x=n(ql,"P",{});var bWe=s(_x);A6r=r(bWe,"This class cannot be instantiated directly using "),jMe=n(bWe,"CODE",{});var yRt=s(jMe);L6r=r(yRt,"__init__()"),yRt.forEach(t),y6r=r(bWe," (throws an error)."),bWe.forEach(t),x6r=i(ql),It=n(ql,"DIV",{class:!0});var f7=s(It);T(ux.$$.fragment,f7),$6r=i(f7),DMe=n(f7,"P",{});var xRt=s(DMe);k6r=r(xRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xRt.forEach(t),S6r=i(f7),Mc=n(f7,"P",{});var Rte=s(Mc);R6r=r(Rte,`Note:
Loading a model from its configuration file does `),GMe=n(Rte,"STRONG",{});var $Rt=s(GMe);P6r=r($Rt,"not"),$Rt.forEach(t),B6r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(Rte,"A",{href:!0});var kRt=s(LY);N6r=r(kRt,"from_pretrained()"),kRt.forEach(t),I6r=r(Rte," to load the model weights."),Rte.forEach(t),q6r=i(f7),T(BE.$$.fragment,f7),f7.forEach(t),j6r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(bx.$$.fragment,jl),D6r=i(jl),OMe=n(jl,"P",{});var SRt=s(OMe);G6r=r(SRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SRt.forEach(t),O6r=i(jl),mn=n(jl,"P",{});var m7=s(mn);V6r=r(m7,"The model class to instantiate is selected based on the "),VMe=n(m7,"CODE",{});var RRt=s(VMe);X6r=r(RRt,"model_type"),RRt.forEach(t),z6r=r(m7,` property of the config object (either
passed as an argument or loaded from `),XMe=n(m7,"CODE",{});var PRt=s(XMe);Q6r=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),W6r=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(m7,"CODE",{});var BRt=s(zMe);H6r=r(BRt,"pretrained_model_name_or_path"),BRt.forEach(t),U6r=r(m7,":"),m7.forEach(t),J6r=i(jl),ye=n(jl,"UL",{});var Ne=s(ye);NE=n(Ne,"LI",{});var eDe=s(NE);QMe=n(eDe,"STRONG",{});var NRt=s(QMe);Y6r=r(NRt,"bart"),NRt.forEach(t),K6r=r(eDe," \u2014 "),yY=n(eDe,"A",{href:!0});var IRt=s(yY);Z6r=r(IRt,"TFBartForConditionalGeneration"),IRt.forEach(t),e7r=r(eDe," (BART model)"),eDe.forEach(t),o7r=i(Ne),IE=n(Ne,"LI",{});var oDe=s(IE);WMe=n(oDe,"STRONG",{});var qRt=s(WMe);r7r=r(qRt,"blenderbot"),qRt.forEach(t),t7r=r(oDe," \u2014 "),xY=n(oDe,"A",{href:!0});var jRt=s(xY);a7r=r(jRt,"TFBlenderbotForConditionalGeneration"),jRt.forEach(t),n7r=r(oDe," (Blenderbot model)"),oDe.forEach(t),s7r=i(Ne),qE=n(Ne,"LI",{});var rDe=s(qE);HMe=n(rDe,"STRONG",{});var DRt=s(HMe);l7r=r(DRt,"blenderbot-small"),DRt.forEach(t),i7r=r(rDe," \u2014 "),$Y=n(rDe,"A",{href:!0});var GRt=s($Y);d7r=r(GRt,"TFBlenderbotSmallForConditionalGeneration"),GRt.forEach(t),c7r=r(rDe," (BlenderbotSmall model)"),rDe.forEach(t),f7r=i(Ne),jE=n(Ne,"LI",{});var tDe=s(jE);UMe=n(tDe,"STRONG",{});var ORt=s(UMe);m7r=r(ORt,"encoder-decoder"),ORt.forEach(t),g7r=r(tDe," \u2014 "),kY=n(tDe,"A",{href:!0});var VRt=s(kY);h7r=r(VRt,"TFEncoderDecoderModel"),VRt.forEach(t),p7r=r(tDe," (Encoder decoder model)"),tDe.forEach(t),_7r=i(Ne),DE=n(Ne,"LI",{});var aDe=s(DE);JMe=n(aDe,"STRONG",{});var XRt=s(JMe);u7r=r(XRt,"led"),XRt.forEach(t),b7r=r(aDe," \u2014 "),SY=n(aDe,"A",{href:!0});var zRt=s(SY);v7r=r(zRt,"TFLEDForConditionalGeneration"),zRt.forEach(t),F7r=r(aDe," (LED model)"),aDe.forEach(t),T7r=i(Ne),GE=n(Ne,"LI",{});var nDe=s(GE);YMe=n(nDe,"STRONG",{});var QRt=s(YMe);M7r=r(QRt,"marian"),QRt.forEach(t),E7r=r(nDe," \u2014 "),RY=n(nDe,"A",{href:!0});var WRt=s(RY);C7r=r(WRt,"TFMarianMTModel"),WRt.forEach(t),w7r=r(nDe," (Marian model)"),nDe.forEach(t),A7r=i(Ne),OE=n(Ne,"LI",{});var sDe=s(OE);KMe=n(sDe,"STRONG",{});var HRt=s(KMe);L7r=r(HRt,"mbart"),HRt.forEach(t),y7r=r(sDe," \u2014 "),PY=n(sDe,"A",{href:!0});var URt=s(PY);x7r=r(URt,"TFMBartForConditionalGeneration"),URt.forEach(t),$7r=r(sDe," (mBART model)"),sDe.forEach(t),k7r=i(Ne),VE=n(Ne,"LI",{});var lDe=s(VE);ZMe=n(lDe,"STRONG",{});var JRt=s(ZMe);S7r=r(JRt,"mt5"),JRt.forEach(t),R7r=r(lDe," \u2014 "),BY=n(lDe,"A",{href:!0});var YRt=s(BY);P7r=r(YRt,"TFMT5ForConditionalGeneration"),YRt.forEach(t),B7r=r(lDe," (MT5 model)"),lDe.forEach(t),N7r=i(Ne),XE=n(Ne,"LI",{});var iDe=s(XE);e4e=n(iDe,"STRONG",{});var KRt=s(e4e);I7r=r(KRt,"pegasus"),KRt.forEach(t),q7r=r(iDe," \u2014 "),NY=n(iDe,"A",{href:!0});var ZRt=s(NY);j7r=r(ZRt,"TFPegasusForConditionalGeneration"),ZRt.forEach(t),D7r=r(iDe," (Pegasus model)"),iDe.forEach(t),G7r=i(Ne),zE=n(Ne,"LI",{});var dDe=s(zE);o4e=n(dDe,"STRONG",{});var ePt=s(o4e);O7r=r(ePt,"t5"),ePt.forEach(t),V7r=r(dDe," \u2014 "),IY=n(dDe,"A",{href:!0});var oPt=s(IY);X7r=r(oPt,"TFT5ForConditionalGeneration"),oPt.forEach(t),z7r=r(dDe," (T5 model)"),dDe.forEach(t),Ne.forEach(t),Q7r=i(jl),T(QE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),fze=i(f),Ec=n(f,"H2",{class:!0});var vWe=s(Ec);WE=n(vWe,"A",{id:!0,class:!0,href:!0});var rPt=s(WE);r4e=n(rPt,"SPAN",{});var tPt=s(r4e);T(vx.$$.fragment,tPt),tPt.forEach(t),rPt.forEach(t),W7r=i(vWe),t4e=n(vWe,"SPAN",{});var aPt=s(t4e);H7r=r(aPt,"TFAutoModelForSequenceClassification"),aPt.forEach(t),vWe.forEach(t),mze=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(Fx.$$.fragment,Dl),U7r=i(Dl),Cc=n(Dl,"P",{});var Pte=s(Cc);J7r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qY=n(Pte,"A",{href:!0});var nPt=s(qY);Y7r=r(nPt,"from_pretrained()"),nPt.forEach(t),K7r=r(Pte," class method or the "),jY=n(Pte,"A",{href:!0});var sPt=s(jY);Z7r=r(sPt,"from_config()"),sPt.forEach(t),eLr=r(Pte,` class
method.`),Pte.forEach(t),oLr=i(Dl),Tx=n(Dl,"P",{});var FWe=s(Tx);rLr=r(FWe,"This class cannot be instantiated directly using "),a4e=n(FWe,"CODE",{});var lPt=s(a4e);tLr=r(lPt,"__init__()"),lPt.forEach(t),aLr=r(FWe," (throws an error)."),FWe.forEach(t),nLr=i(Dl),qt=n(Dl,"DIV",{class:!0});var g7=s(qt);T(Mx.$$.fragment,g7),sLr=i(g7),n4e=n(g7,"P",{});var iPt=s(n4e);lLr=r(iPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iPt.forEach(t),iLr=i(g7),wc=n(g7,"P",{});var Bte=s(wc);dLr=r(Bte,`Note:
Loading a model from its configuration file does `),s4e=n(Bte,"STRONG",{});var dPt=s(s4e);cLr=r(dPt,"not"),dPt.forEach(t),fLr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(Bte,"A",{href:!0});var cPt=s(DY);mLr=r(cPt,"from_pretrained()"),cPt.forEach(t),gLr=r(Bte," to load the model weights."),Bte.forEach(t),hLr=i(g7),T(HE.$$.fragment,g7),g7.forEach(t),pLr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(Ex.$$.fragment,Gl),_Lr=i(Gl),l4e=n(Gl,"P",{});var fPt=s(l4e);uLr=r(fPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fPt.forEach(t),bLr=i(Gl),gn=n(Gl,"P",{});var h7=s(gn);vLr=r(h7,"The model class to instantiate is selected based on the "),i4e=n(h7,"CODE",{});var mPt=s(i4e);FLr=r(mPt,"model_type"),mPt.forEach(t),TLr=r(h7,` property of the config object (either
passed as an argument or loaded from `),d4e=n(h7,"CODE",{});var gPt=s(d4e);MLr=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),ELr=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(h7,"CODE",{});var hPt=s(c4e);CLr=r(hPt,"pretrained_model_name_or_path"),hPt.forEach(t),wLr=r(h7,":"),h7.forEach(t),ALr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);UE=n(ne,"LI",{});var cDe=s(UE);f4e=n(cDe,"STRONG",{});var pPt=s(f4e);LLr=r(pPt,"albert"),pPt.forEach(t),yLr=r(cDe," \u2014 "),GY=n(cDe,"A",{href:!0});var _Pt=s(GY);xLr=r(_Pt,"TFAlbertForSequenceClassification"),_Pt.forEach(t),$Lr=r(cDe," (ALBERT model)"),cDe.forEach(t),kLr=i(ne),JE=n(ne,"LI",{});var fDe=s(JE);m4e=n(fDe,"STRONG",{});var uPt=s(m4e);SLr=r(uPt,"bert"),uPt.forEach(t),RLr=r(fDe," \u2014 "),OY=n(fDe,"A",{href:!0});var bPt=s(OY);PLr=r(bPt,"TFBertForSequenceClassification"),bPt.forEach(t),BLr=r(fDe," (BERT model)"),fDe.forEach(t),NLr=i(ne),YE=n(ne,"LI",{});var mDe=s(YE);g4e=n(mDe,"STRONG",{});var vPt=s(g4e);ILr=r(vPt,"camembert"),vPt.forEach(t),qLr=r(mDe," \u2014 "),VY=n(mDe,"A",{href:!0});var FPt=s(VY);jLr=r(FPt,"TFCamembertForSequenceClassification"),FPt.forEach(t),DLr=r(mDe," (CamemBERT model)"),mDe.forEach(t),GLr=i(ne),KE=n(ne,"LI",{});var gDe=s(KE);h4e=n(gDe,"STRONG",{});var TPt=s(h4e);OLr=r(TPt,"convbert"),TPt.forEach(t),VLr=r(gDe," \u2014 "),XY=n(gDe,"A",{href:!0});var MPt=s(XY);XLr=r(MPt,"TFConvBertForSequenceClassification"),MPt.forEach(t),zLr=r(gDe," (ConvBERT model)"),gDe.forEach(t),QLr=i(ne),ZE=n(ne,"LI",{});var hDe=s(ZE);p4e=n(hDe,"STRONG",{});var EPt=s(p4e);WLr=r(EPt,"ctrl"),EPt.forEach(t),HLr=r(hDe," \u2014 "),zY=n(hDe,"A",{href:!0});var CPt=s(zY);ULr=r(CPt,"TFCTRLForSequenceClassification"),CPt.forEach(t),JLr=r(hDe," (CTRL model)"),hDe.forEach(t),YLr=i(ne),eC=n(ne,"LI",{});var pDe=s(eC);_4e=n(pDe,"STRONG",{});var wPt=s(_4e);KLr=r(wPt,"deberta"),wPt.forEach(t),ZLr=r(pDe," \u2014 "),QY=n(pDe,"A",{href:!0});var APt=s(QY);eyr=r(APt,"TFDebertaForSequenceClassification"),APt.forEach(t),oyr=r(pDe," (DeBERTa model)"),pDe.forEach(t),ryr=i(ne),oC=n(ne,"LI",{});var _De=s(oC);u4e=n(_De,"STRONG",{});var LPt=s(u4e);tyr=r(LPt,"deberta-v2"),LPt.forEach(t),ayr=r(_De," \u2014 "),WY=n(_De,"A",{href:!0});var yPt=s(WY);nyr=r(yPt,"TFDebertaV2ForSequenceClassification"),yPt.forEach(t),syr=r(_De," (DeBERTa-v2 model)"),_De.forEach(t),lyr=i(ne),rC=n(ne,"LI",{});var uDe=s(rC);b4e=n(uDe,"STRONG",{});var xPt=s(b4e);iyr=r(xPt,"distilbert"),xPt.forEach(t),dyr=r(uDe," \u2014 "),HY=n(uDe,"A",{href:!0});var $Pt=s(HY);cyr=r($Pt,"TFDistilBertForSequenceClassification"),$Pt.forEach(t),fyr=r(uDe," (DistilBERT model)"),uDe.forEach(t),myr=i(ne),tC=n(ne,"LI",{});var bDe=s(tC);v4e=n(bDe,"STRONG",{});var kPt=s(v4e);gyr=r(kPt,"electra"),kPt.forEach(t),hyr=r(bDe," \u2014 "),UY=n(bDe,"A",{href:!0});var SPt=s(UY);pyr=r(SPt,"TFElectraForSequenceClassification"),SPt.forEach(t),_yr=r(bDe," (ELECTRA model)"),bDe.forEach(t),uyr=i(ne),aC=n(ne,"LI",{});var vDe=s(aC);F4e=n(vDe,"STRONG",{});var RPt=s(F4e);byr=r(RPt,"flaubert"),RPt.forEach(t),vyr=r(vDe," \u2014 "),JY=n(vDe,"A",{href:!0});var PPt=s(JY);Fyr=r(PPt,"TFFlaubertForSequenceClassification"),PPt.forEach(t),Tyr=r(vDe," (FlauBERT model)"),vDe.forEach(t),Myr=i(ne),nC=n(ne,"LI",{});var FDe=s(nC);T4e=n(FDe,"STRONG",{});var BPt=s(T4e);Eyr=r(BPt,"funnel"),BPt.forEach(t),Cyr=r(FDe," \u2014 "),YY=n(FDe,"A",{href:!0});var NPt=s(YY);wyr=r(NPt,"TFFunnelForSequenceClassification"),NPt.forEach(t),Ayr=r(FDe," (Funnel Transformer model)"),FDe.forEach(t),Lyr=i(ne),sC=n(ne,"LI",{});var TDe=s(sC);M4e=n(TDe,"STRONG",{});var IPt=s(M4e);yyr=r(IPt,"gpt2"),IPt.forEach(t),xyr=r(TDe," \u2014 "),KY=n(TDe,"A",{href:!0});var qPt=s(KY);$yr=r(qPt,"TFGPT2ForSequenceClassification"),qPt.forEach(t),kyr=r(TDe," (OpenAI GPT-2 model)"),TDe.forEach(t),Syr=i(ne),lC=n(ne,"LI",{});var MDe=s(lC);E4e=n(MDe,"STRONG",{});var jPt=s(E4e);Ryr=r(jPt,"gptj"),jPt.forEach(t),Pyr=r(MDe," \u2014 "),ZY=n(MDe,"A",{href:!0});var DPt=s(ZY);Byr=r(DPt,"TFGPTJForSequenceClassification"),DPt.forEach(t),Nyr=r(MDe," (GPT-J model)"),MDe.forEach(t),Iyr=i(ne),iC=n(ne,"LI",{});var EDe=s(iC);C4e=n(EDe,"STRONG",{});var GPt=s(C4e);qyr=r(GPt,"layoutlm"),GPt.forEach(t),jyr=r(EDe," \u2014 "),eK=n(EDe,"A",{href:!0});var OPt=s(eK);Dyr=r(OPt,"TFLayoutLMForSequenceClassification"),OPt.forEach(t),Gyr=r(EDe," (LayoutLM model)"),EDe.forEach(t),Oyr=i(ne),dC=n(ne,"LI",{});var CDe=s(dC);w4e=n(CDe,"STRONG",{});var VPt=s(w4e);Vyr=r(VPt,"longformer"),VPt.forEach(t),Xyr=r(CDe," \u2014 "),oK=n(CDe,"A",{href:!0});var XPt=s(oK);zyr=r(XPt,"TFLongformerForSequenceClassification"),XPt.forEach(t),Qyr=r(CDe," (Longformer model)"),CDe.forEach(t),Wyr=i(ne),cC=n(ne,"LI",{});var wDe=s(cC);A4e=n(wDe,"STRONG",{});var zPt=s(A4e);Hyr=r(zPt,"mobilebert"),zPt.forEach(t),Uyr=r(wDe," \u2014 "),rK=n(wDe,"A",{href:!0});var QPt=s(rK);Jyr=r(QPt,"TFMobileBertForSequenceClassification"),QPt.forEach(t),Yyr=r(wDe," (MobileBERT model)"),wDe.forEach(t),Kyr=i(ne),fC=n(ne,"LI",{});var ADe=s(fC);L4e=n(ADe,"STRONG",{});var WPt=s(L4e);Zyr=r(WPt,"mpnet"),WPt.forEach(t),e9r=r(ADe," \u2014 "),tK=n(ADe,"A",{href:!0});var HPt=s(tK);o9r=r(HPt,"TFMPNetForSequenceClassification"),HPt.forEach(t),r9r=r(ADe," (MPNet model)"),ADe.forEach(t),t9r=i(ne),mC=n(ne,"LI",{});var LDe=s(mC);y4e=n(LDe,"STRONG",{});var UPt=s(y4e);a9r=r(UPt,"openai-gpt"),UPt.forEach(t),n9r=r(LDe," \u2014 "),aK=n(LDe,"A",{href:!0});var JPt=s(aK);s9r=r(JPt,"TFOpenAIGPTForSequenceClassification"),JPt.forEach(t),l9r=r(LDe," (OpenAI GPT model)"),LDe.forEach(t),i9r=i(ne),gC=n(ne,"LI",{});var yDe=s(gC);x4e=n(yDe,"STRONG",{});var YPt=s(x4e);d9r=r(YPt,"rembert"),YPt.forEach(t),c9r=r(yDe," \u2014 "),nK=n(yDe,"A",{href:!0});var KPt=s(nK);f9r=r(KPt,"TFRemBertForSequenceClassification"),KPt.forEach(t),m9r=r(yDe," (RemBERT model)"),yDe.forEach(t),g9r=i(ne),hC=n(ne,"LI",{});var xDe=s(hC);$4e=n(xDe,"STRONG",{});var ZPt=s($4e);h9r=r(ZPt,"roberta"),ZPt.forEach(t),p9r=r(xDe," \u2014 "),sK=n(xDe,"A",{href:!0});var eBt=s(sK);_9r=r(eBt,"TFRobertaForSequenceClassification"),eBt.forEach(t),u9r=r(xDe," (RoBERTa model)"),xDe.forEach(t),b9r=i(ne),pC=n(ne,"LI",{});var $De=s(pC);k4e=n($De,"STRONG",{});var oBt=s(k4e);v9r=r(oBt,"roformer"),oBt.forEach(t),F9r=r($De," \u2014 "),lK=n($De,"A",{href:!0});var rBt=s(lK);T9r=r(rBt,"TFRoFormerForSequenceClassification"),rBt.forEach(t),M9r=r($De," (RoFormer model)"),$De.forEach(t),E9r=i(ne),_C=n(ne,"LI",{});var kDe=s(_C);S4e=n(kDe,"STRONG",{});var tBt=s(S4e);C9r=r(tBt,"tapas"),tBt.forEach(t),w9r=r(kDe," \u2014 "),iK=n(kDe,"A",{href:!0});var aBt=s(iK);A9r=r(aBt,"TFTapasForSequenceClassification"),aBt.forEach(t),L9r=r(kDe," (TAPAS model)"),kDe.forEach(t),y9r=i(ne),uC=n(ne,"LI",{});var SDe=s(uC);R4e=n(SDe,"STRONG",{});var nBt=s(R4e);x9r=r(nBt,"transfo-xl"),nBt.forEach(t),$9r=r(SDe," \u2014 "),dK=n(SDe,"A",{href:!0});var sBt=s(dK);k9r=r(sBt,"TFTransfoXLForSequenceClassification"),sBt.forEach(t),S9r=r(SDe," (Transformer-XL model)"),SDe.forEach(t),R9r=i(ne),bC=n(ne,"LI",{});var RDe=s(bC);P4e=n(RDe,"STRONG",{});var lBt=s(P4e);P9r=r(lBt,"xlm"),lBt.forEach(t),B9r=r(RDe," \u2014 "),cK=n(RDe,"A",{href:!0});var iBt=s(cK);N9r=r(iBt,"TFXLMForSequenceClassification"),iBt.forEach(t),I9r=r(RDe," (XLM model)"),RDe.forEach(t),q9r=i(ne),vC=n(ne,"LI",{});var PDe=s(vC);B4e=n(PDe,"STRONG",{});var dBt=s(B4e);j9r=r(dBt,"xlm-roberta"),dBt.forEach(t),D9r=r(PDe," \u2014 "),fK=n(PDe,"A",{href:!0});var cBt=s(fK);G9r=r(cBt,"TFXLMRobertaForSequenceClassification"),cBt.forEach(t),O9r=r(PDe," (XLM-RoBERTa model)"),PDe.forEach(t),V9r=i(ne),FC=n(ne,"LI",{});var BDe=s(FC);N4e=n(BDe,"STRONG",{});var fBt=s(N4e);X9r=r(fBt,"xlnet"),fBt.forEach(t),z9r=r(BDe," \u2014 "),mK=n(BDe,"A",{href:!0});var mBt=s(mK);Q9r=r(mBt,"TFXLNetForSequenceClassification"),mBt.forEach(t),W9r=r(BDe," (XLNet model)"),BDe.forEach(t),ne.forEach(t),H9r=i(Gl),T(TC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),gze=i(f),Ac=n(f,"H2",{class:!0});var TWe=s(Ac);MC=n(TWe,"A",{id:!0,class:!0,href:!0});var gBt=s(MC);I4e=n(gBt,"SPAN",{});var hBt=s(I4e);T(Cx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),U9r=i(TWe),q4e=n(TWe,"SPAN",{});var pBt=s(q4e);J9r=r(pBt,"TFAutoModelForMultipleChoice"),pBt.forEach(t),TWe.forEach(t),hze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(wx.$$.fragment,Ol),Y9r=i(Ol),Lc=n(Ol,"P",{});var Nte=s(Lc);K9r=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gK=n(Nte,"A",{href:!0});var _Bt=s(gK);Z9r=r(_Bt,"from_pretrained()"),_Bt.forEach(t),exr=r(Nte," class method or the "),hK=n(Nte,"A",{href:!0});var uBt=s(hK);oxr=r(uBt,"from_config()"),uBt.forEach(t),rxr=r(Nte,` class
method.`),Nte.forEach(t),txr=i(Ol),Ax=n(Ol,"P",{});var MWe=s(Ax);axr=r(MWe,"This class cannot be instantiated directly using "),j4e=n(MWe,"CODE",{});var bBt=s(j4e);nxr=r(bBt,"__init__()"),bBt.forEach(t),sxr=r(MWe," (throws an error)."),MWe.forEach(t),lxr=i(Ol),jt=n(Ol,"DIV",{class:!0});var p7=s(jt);T(Lx.$$.fragment,p7),ixr=i(p7),D4e=n(p7,"P",{});var vBt=s(D4e);dxr=r(vBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vBt.forEach(t),cxr=i(p7),yc=n(p7,"P",{});var Ite=s(yc);fxr=r(Ite,`Note:
Loading a model from its configuration file does `),G4e=n(Ite,"STRONG",{});var FBt=s(G4e);mxr=r(FBt,"not"),FBt.forEach(t),gxr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(Ite,"A",{href:!0});var TBt=s(pK);hxr=r(TBt,"from_pretrained()"),TBt.forEach(t),pxr=r(Ite," to load the model weights."),Ite.forEach(t),_xr=i(p7),T(EC.$$.fragment,p7),p7.forEach(t),uxr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(yx.$$.fragment,Vl),bxr=i(Vl),O4e=n(Vl,"P",{});var MBt=s(O4e);vxr=r(MBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MBt.forEach(t),Fxr=i(Vl),hn=n(Vl,"P",{});var _7=s(hn);Txr=r(_7,"The model class to instantiate is selected based on the "),V4e=n(_7,"CODE",{});var EBt=s(V4e);Mxr=r(EBt,"model_type"),EBt.forEach(t),Exr=r(_7,` property of the config object (either
passed as an argument or loaded from `),X4e=n(_7,"CODE",{});var CBt=s(X4e);Cxr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),wxr=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(_7,"CODE",{});var wBt=s(z4e);Axr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),Lxr=r(_7,":"),_7.forEach(t),yxr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);CC=n(Fe,"LI",{});var NDe=s(CC);Q4e=n(NDe,"STRONG",{});var ABt=s(Q4e);xxr=r(ABt,"albert"),ABt.forEach(t),$xr=r(NDe," \u2014 "),_K=n(NDe,"A",{href:!0});var LBt=s(_K);kxr=r(LBt,"TFAlbertForMultipleChoice"),LBt.forEach(t),Sxr=r(NDe," (ALBERT model)"),NDe.forEach(t),Rxr=i(Fe),wC=n(Fe,"LI",{});var IDe=s(wC);W4e=n(IDe,"STRONG",{});var yBt=s(W4e);Pxr=r(yBt,"bert"),yBt.forEach(t),Bxr=r(IDe," \u2014 "),uK=n(IDe,"A",{href:!0});var xBt=s(uK);Nxr=r(xBt,"TFBertForMultipleChoice"),xBt.forEach(t),Ixr=r(IDe," (BERT model)"),IDe.forEach(t),qxr=i(Fe),AC=n(Fe,"LI",{});var qDe=s(AC);H4e=n(qDe,"STRONG",{});var $Bt=s(H4e);jxr=r($Bt,"camembert"),$Bt.forEach(t),Dxr=r(qDe," \u2014 "),bK=n(qDe,"A",{href:!0});var kBt=s(bK);Gxr=r(kBt,"TFCamembertForMultipleChoice"),kBt.forEach(t),Oxr=r(qDe," (CamemBERT model)"),qDe.forEach(t),Vxr=i(Fe),LC=n(Fe,"LI",{});var jDe=s(LC);U4e=n(jDe,"STRONG",{});var SBt=s(U4e);Xxr=r(SBt,"convbert"),SBt.forEach(t),zxr=r(jDe," \u2014 "),vK=n(jDe,"A",{href:!0});var RBt=s(vK);Qxr=r(RBt,"TFConvBertForMultipleChoice"),RBt.forEach(t),Wxr=r(jDe," (ConvBERT model)"),jDe.forEach(t),Hxr=i(Fe),yC=n(Fe,"LI",{});var DDe=s(yC);J4e=n(DDe,"STRONG",{});var PBt=s(J4e);Uxr=r(PBt,"distilbert"),PBt.forEach(t),Jxr=r(DDe," \u2014 "),FK=n(DDe,"A",{href:!0});var BBt=s(FK);Yxr=r(BBt,"TFDistilBertForMultipleChoice"),BBt.forEach(t),Kxr=r(DDe," (DistilBERT model)"),DDe.forEach(t),Zxr=i(Fe),xC=n(Fe,"LI",{});var GDe=s(xC);Y4e=n(GDe,"STRONG",{});var NBt=s(Y4e);e$r=r(NBt,"electra"),NBt.forEach(t),o$r=r(GDe," \u2014 "),TK=n(GDe,"A",{href:!0});var IBt=s(TK);r$r=r(IBt,"TFElectraForMultipleChoice"),IBt.forEach(t),t$r=r(GDe," (ELECTRA model)"),GDe.forEach(t),a$r=i(Fe),$C=n(Fe,"LI",{});var ODe=s($C);K4e=n(ODe,"STRONG",{});var qBt=s(K4e);n$r=r(qBt,"flaubert"),qBt.forEach(t),s$r=r(ODe," \u2014 "),MK=n(ODe,"A",{href:!0});var jBt=s(MK);l$r=r(jBt,"TFFlaubertForMultipleChoice"),jBt.forEach(t),i$r=r(ODe," (FlauBERT model)"),ODe.forEach(t),d$r=i(Fe),kC=n(Fe,"LI",{});var VDe=s(kC);Z4e=n(VDe,"STRONG",{});var DBt=s(Z4e);c$r=r(DBt,"funnel"),DBt.forEach(t),f$r=r(VDe," \u2014 "),EK=n(VDe,"A",{href:!0});var GBt=s(EK);m$r=r(GBt,"TFFunnelForMultipleChoice"),GBt.forEach(t),g$r=r(VDe," (Funnel Transformer model)"),VDe.forEach(t),h$r=i(Fe),SC=n(Fe,"LI",{});var XDe=s(SC);eEe=n(XDe,"STRONG",{});var OBt=s(eEe);p$r=r(OBt,"longformer"),OBt.forEach(t),_$r=r(XDe," \u2014 "),CK=n(XDe,"A",{href:!0});var VBt=s(CK);u$r=r(VBt,"TFLongformerForMultipleChoice"),VBt.forEach(t),b$r=r(XDe," (Longformer model)"),XDe.forEach(t),v$r=i(Fe),RC=n(Fe,"LI",{});var zDe=s(RC);oEe=n(zDe,"STRONG",{});var XBt=s(oEe);F$r=r(XBt,"mobilebert"),XBt.forEach(t),T$r=r(zDe," \u2014 "),wK=n(zDe,"A",{href:!0});var zBt=s(wK);M$r=r(zBt,"TFMobileBertForMultipleChoice"),zBt.forEach(t),E$r=r(zDe," (MobileBERT model)"),zDe.forEach(t),C$r=i(Fe),PC=n(Fe,"LI",{});var QDe=s(PC);rEe=n(QDe,"STRONG",{});var QBt=s(rEe);w$r=r(QBt,"mpnet"),QBt.forEach(t),A$r=r(QDe," \u2014 "),AK=n(QDe,"A",{href:!0});var WBt=s(AK);L$r=r(WBt,"TFMPNetForMultipleChoice"),WBt.forEach(t),y$r=r(QDe," (MPNet model)"),QDe.forEach(t),x$r=i(Fe),BC=n(Fe,"LI",{});var WDe=s(BC);tEe=n(WDe,"STRONG",{});var HBt=s(tEe);$$r=r(HBt,"rembert"),HBt.forEach(t),k$r=r(WDe," \u2014 "),LK=n(WDe,"A",{href:!0});var UBt=s(LK);S$r=r(UBt,"TFRemBertForMultipleChoice"),UBt.forEach(t),R$r=r(WDe," (RemBERT model)"),WDe.forEach(t),P$r=i(Fe),NC=n(Fe,"LI",{});var HDe=s(NC);aEe=n(HDe,"STRONG",{});var JBt=s(aEe);B$r=r(JBt,"roberta"),JBt.forEach(t),N$r=r(HDe," \u2014 "),yK=n(HDe,"A",{href:!0});var YBt=s(yK);I$r=r(YBt,"TFRobertaForMultipleChoice"),YBt.forEach(t),q$r=r(HDe," (RoBERTa model)"),HDe.forEach(t),j$r=i(Fe),IC=n(Fe,"LI",{});var UDe=s(IC);nEe=n(UDe,"STRONG",{});var KBt=s(nEe);D$r=r(KBt,"roformer"),KBt.forEach(t),G$r=r(UDe," \u2014 "),xK=n(UDe,"A",{href:!0});var ZBt=s(xK);O$r=r(ZBt,"TFRoFormerForMultipleChoice"),ZBt.forEach(t),V$r=r(UDe," (RoFormer model)"),UDe.forEach(t),X$r=i(Fe),qC=n(Fe,"LI",{});var JDe=s(qC);sEe=n(JDe,"STRONG",{});var eNt=s(sEe);z$r=r(eNt,"xlm"),eNt.forEach(t),Q$r=r(JDe," \u2014 "),$K=n(JDe,"A",{href:!0});var oNt=s($K);W$r=r(oNt,"TFXLMForMultipleChoice"),oNt.forEach(t),H$r=r(JDe," (XLM model)"),JDe.forEach(t),U$r=i(Fe),jC=n(Fe,"LI",{});var YDe=s(jC);lEe=n(YDe,"STRONG",{});var rNt=s(lEe);J$r=r(rNt,"xlm-roberta"),rNt.forEach(t),Y$r=r(YDe," \u2014 "),kK=n(YDe,"A",{href:!0});var tNt=s(kK);K$r=r(tNt,"TFXLMRobertaForMultipleChoice"),tNt.forEach(t),Z$r=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),ekr=i(Fe),DC=n(Fe,"LI",{});var KDe=s(DC);iEe=n(KDe,"STRONG",{});var aNt=s(iEe);okr=r(aNt,"xlnet"),aNt.forEach(t),rkr=r(KDe," \u2014 "),SK=n(KDe,"A",{href:!0});var nNt=s(SK);tkr=r(nNt,"TFXLNetForMultipleChoice"),nNt.forEach(t),akr=r(KDe," (XLNet model)"),KDe.forEach(t),Fe.forEach(t),nkr=i(Vl),T(GC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),pze=i(f),xc=n(f,"H2",{class:!0});var EWe=s(xc);OC=n(EWe,"A",{id:!0,class:!0,href:!0});var sNt=s(OC);dEe=n(sNt,"SPAN",{});var lNt=s(dEe);T(xx.$$.fragment,lNt),lNt.forEach(t),sNt.forEach(t),skr=i(EWe),cEe=n(EWe,"SPAN",{});var iNt=s(cEe);lkr=r(iNt,"TFAutoModelForNextSentencePrediction"),iNt.forEach(t),EWe.forEach(t),_ze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T($x.$$.fragment,Xl),ikr=i(Xl),$c=n(Xl,"P",{});var qte=s($c);dkr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RK=n(qte,"A",{href:!0});var dNt=s(RK);ckr=r(dNt,"from_pretrained()"),dNt.forEach(t),fkr=r(qte," class method or the "),PK=n(qte,"A",{href:!0});var cNt=s(PK);mkr=r(cNt,"from_config()"),cNt.forEach(t),gkr=r(qte,` class
method.`),qte.forEach(t),hkr=i(Xl),kx=n(Xl,"P",{});var CWe=s(kx);pkr=r(CWe,"This class cannot be instantiated directly using "),fEe=n(CWe,"CODE",{});var fNt=s(fEe);_kr=r(fNt,"__init__()"),fNt.forEach(t),ukr=r(CWe," (throws an error)."),CWe.forEach(t),bkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var u7=s(Dt);T(Sx.$$.fragment,u7),vkr=i(u7),mEe=n(u7,"P",{});var mNt=s(mEe);Fkr=r(mNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mNt.forEach(t),Tkr=i(u7),kc=n(u7,"P",{});var jte=s(kc);Mkr=r(jte,`Note:
Loading a model from its configuration file does `),gEe=n(jte,"STRONG",{});var gNt=s(gEe);Ekr=r(gNt,"not"),gNt.forEach(t),Ckr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(jte,"A",{href:!0});var hNt=s(BK);wkr=r(hNt,"from_pretrained()"),hNt.forEach(t),Akr=r(jte," to load the model weights."),jte.forEach(t),Lkr=i(u7),T(VC.$$.fragment,u7),u7.forEach(t),ykr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Rx.$$.fragment,zl),xkr=i(zl),hEe=n(zl,"P",{});var pNt=s(hEe);$kr=r(pNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pNt.forEach(t),kkr=i(zl),pn=n(zl,"P",{});var b7=s(pn);Skr=r(b7,"The model class to instantiate is selected based on the "),pEe=n(b7,"CODE",{});var _Nt=s(pEe);Rkr=r(_Nt,"model_type"),_Nt.forEach(t),Pkr=r(b7,` property of the config object (either
passed as an argument or loaded from `),_Ee=n(b7,"CODE",{});var uNt=s(_Ee);Bkr=r(uNt,"pretrained_model_name_or_path"),uNt.forEach(t),Nkr=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(b7,"CODE",{});var bNt=s(uEe);Ikr=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),qkr=r(b7,":"),b7.forEach(t),jkr=i(zl),Px=n(zl,"UL",{});var wWe=s(Px);XC=n(wWe,"LI",{});var ZDe=s(XC);bEe=n(ZDe,"STRONG",{});var vNt=s(bEe);Dkr=r(vNt,"bert"),vNt.forEach(t),Gkr=r(ZDe," \u2014 "),NK=n(ZDe,"A",{href:!0});var FNt=s(NK);Okr=r(FNt,"TFBertForNextSentencePrediction"),FNt.forEach(t),Vkr=r(ZDe," (BERT model)"),ZDe.forEach(t),Xkr=i(wWe),zC=n(wWe,"LI",{});var eGe=s(zC);vEe=n(eGe,"STRONG",{});var TNt=s(vEe);zkr=r(TNt,"mobilebert"),TNt.forEach(t),Qkr=r(eGe," \u2014 "),IK=n(eGe,"A",{href:!0});var MNt=s(IK);Wkr=r(MNt,"TFMobileBertForNextSentencePrediction"),MNt.forEach(t),Hkr=r(eGe," (MobileBERT model)"),eGe.forEach(t),wWe.forEach(t),Ukr=i(zl),T(QC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),uze=i(f),Sc=n(f,"H2",{class:!0});var AWe=s(Sc);WC=n(AWe,"A",{id:!0,class:!0,href:!0});var ENt=s(WC);FEe=n(ENt,"SPAN",{});var CNt=s(FEe);T(Bx.$$.fragment,CNt),CNt.forEach(t),ENt.forEach(t),Jkr=i(AWe),TEe=n(AWe,"SPAN",{});var wNt=s(TEe);Ykr=r(wNt,"TFAutoModelForTableQuestionAnswering"),wNt.forEach(t),AWe.forEach(t),bze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Nx.$$.fragment,Ql),Kkr=i(Ql),Rc=n(Ql,"P",{});var Dte=s(Rc);Zkr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qK=n(Dte,"A",{href:!0});var ANt=s(qK);eSr=r(ANt,"from_pretrained()"),ANt.forEach(t),oSr=r(Dte," class method or the "),jK=n(Dte,"A",{href:!0});var LNt=s(jK);rSr=r(LNt,"from_config()"),LNt.forEach(t),tSr=r(Dte,` class
method.`),Dte.forEach(t),aSr=i(Ql),Ix=n(Ql,"P",{});var LWe=s(Ix);nSr=r(LWe,"This class cannot be instantiated directly using "),MEe=n(LWe,"CODE",{});var yNt=s(MEe);sSr=r(yNt,"__init__()"),yNt.forEach(t),lSr=r(LWe," (throws an error)."),LWe.forEach(t),iSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var v7=s(Gt);T(qx.$$.fragment,v7),dSr=i(v7),EEe=n(v7,"P",{});var xNt=s(EEe);cSr=r(xNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xNt.forEach(t),fSr=i(v7),Pc=n(v7,"P",{});var Gte=s(Pc);mSr=r(Gte,`Note:
Loading a model from its configuration file does `),CEe=n(Gte,"STRONG",{});var $Nt=s(CEe);gSr=r($Nt,"not"),$Nt.forEach(t),hSr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(Gte,"A",{href:!0});var kNt=s(DK);pSr=r(kNt,"from_pretrained()"),kNt.forEach(t),_Sr=r(Gte," to load the model weights."),Gte.forEach(t),uSr=i(v7),T(HC.$$.fragment,v7),v7.forEach(t),bSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(jx.$$.fragment,Wl),vSr=i(Wl),wEe=n(Wl,"P",{});var SNt=s(wEe);FSr=r(SNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SNt.forEach(t),TSr=i(Wl),_n=n(Wl,"P",{});var F7=s(_n);MSr=r(F7,"The model class to instantiate is selected based on the "),AEe=n(F7,"CODE",{});var RNt=s(AEe);ESr=r(RNt,"model_type"),RNt.forEach(t),CSr=r(F7,` property of the config object (either
passed as an argument or loaded from `),LEe=n(F7,"CODE",{});var PNt=s(LEe);wSr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),ASr=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=n(F7,"CODE",{});var BNt=s(yEe);LSr=r(BNt,"pretrained_model_name_or_path"),BNt.forEach(t),ySr=r(F7,":"),F7.forEach(t),xSr=i(Wl),xEe=n(Wl,"UL",{});var NNt=s(xEe);UC=n(NNt,"LI",{});var oGe=s(UC);$Ee=n(oGe,"STRONG",{});var INt=s($Ee);$Sr=r(INt,"tapas"),INt.forEach(t),kSr=r(oGe," \u2014 "),GK=n(oGe,"A",{href:!0});var qNt=s(GK);SSr=r(qNt,"TFTapasForQuestionAnswering"),qNt.forEach(t),RSr=r(oGe," (TAPAS model)"),oGe.forEach(t),NNt.forEach(t),PSr=i(Wl),T(JC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),vze=i(f),Bc=n(f,"H2",{class:!0});var yWe=s(Bc);YC=n(yWe,"A",{id:!0,class:!0,href:!0});var jNt=s(YC);kEe=n(jNt,"SPAN",{});var DNt=s(kEe);T(Dx.$$.fragment,DNt),DNt.forEach(t),jNt.forEach(t),BSr=i(yWe),SEe=n(yWe,"SPAN",{});var GNt=s(SEe);NSr=r(GNt,"TFAutoModelForTokenClassification"),GNt.forEach(t),yWe.forEach(t),Fze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Gx.$$.fragment,Hl),ISr=i(Hl),Nc=n(Hl,"P",{});var Ote=s(Nc);qSr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OK=n(Ote,"A",{href:!0});var ONt=s(OK);jSr=r(ONt,"from_pretrained()"),ONt.forEach(t),DSr=r(Ote," class method or the "),VK=n(Ote,"A",{href:!0});var VNt=s(VK);GSr=r(VNt,"from_config()"),VNt.forEach(t),OSr=r(Ote,` class
method.`),Ote.forEach(t),VSr=i(Hl),Ox=n(Hl,"P",{});var xWe=s(Ox);XSr=r(xWe,"This class cannot be instantiated directly using "),REe=n(xWe,"CODE",{});var XNt=s(REe);zSr=r(XNt,"__init__()"),XNt.forEach(t),QSr=r(xWe," (throws an error)."),xWe.forEach(t),WSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var T7=s(Ot);T(Vx.$$.fragment,T7),HSr=i(T7),PEe=n(T7,"P",{});var zNt=s(PEe);USr=r(zNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zNt.forEach(t),JSr=i(T7),Ic=n(T7,"P",{});var Vte=s(Ic);YSr=r(Vte,`Note:
Loading a model from its configuration file does `),BEe=n(Vte,"STRONG",{});var QNt=s(BEe);KSr=r(QNt,"not"),QNt.forEach(t),ZSr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Vte,"A",{href:!0});var WNt=s(XK);eRr=r(WNt,"from_pretrained()"),WNt.forEach(t),oRr=r(Vte," to load the model weights."),Vte.forEach(t),rRr=i(T7),T(KC.$$.fragment,T7),T7.forEach(t),tRr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Xx.$$.fragment,Ul),aRr=i(Ul),NEe=n(Ul,"P",{});var HNt=s(NEe);nRr=r(HNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HNt.forEach(t),sRr=i(Ul),un=n(Ul,"P",{});var M7=s(un);lRr=r(M7,"The model class to instantiate is selected based on the "),IEe=n(M7,"CODE",{});var UNt=s(IEe);iRr=r(UNt,"model_type"),UNt.forEach(t),dRr=r(M7,` property of the config object (either
passed as an argument or loaded from `),qEe=n(M7,"CODE",{});var JNt=s(qEe);cRr=r(JNt,"pretrained_model_name_or_path"),JNt.forEach(t),fRr=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jEe=n(M7,"CODE",{});var YNt=s(jEe);mRr=r(YNt,"pretrained_model_name_or_path"),YNt.forEach(t),gRr=r(M7,":"),M7.forEach(t),hRr=i(Ul),de=n(Ul,"UL",{});var me=s(de);ZC=n(me,"LI",{});var rGe=s(ZC);DEe=n(rGe,"STRONG",{});var KNt=s(DEe);pRr=r(KNt,"albert"),KNt.forEach(t),_Rr=r(rGe," \u2014 "),zK=n(rGe,"A",{href:!0});var ZNt=s(zK);uRr=r(ZNt,"TFAlbertForTokenClassification"),ZNt.forEach(t),bRr=r(rGe," (ALBERT model)"),rGe.forEach(t),vRr=i(me),e5=n(me,"LI",{});var tGe=s(e5);GEe=n(tGe,"STRONG",{});var eIt=s(GEe);FRr=r(eIt,"bert"),eIt.forEach(t),TRr=r(tGe," \u2014 "),QK=n(tGe,"A",{href:!0});var oIt=s(QK);MRr=r(oIt,"TFBertForTokenClassification"),oIt.forEach(t),ERr=r(tGe," (BERT model)"),tGe.forEach(t),CRr=i(me),o5=n(me,"LI",{});var aGe=s(o5);OEe=n(aGe,"STRONG",{});var rIt=s(OEe);wRr=r(rIt,"camembert"),rIt.forEach(t),ARr=r(aGe," \u2014 "),WK=n(aGe,"A",{href:!0});var tIt=s(WK);LRr=r(tIt,"TFCamembertForTokenClassification"),tIt.forEach(t),yRr=r(aGe," (CamemBERT model)"),aGe.forEach(t),xRr=i(me),r5=n(me,"LI",{});var nGe=s(r5);VEe=n(nGe,"STRONG",{});var aIt=s(VEe);$Rr=r(aIt,"convbert"),aIt.forEach(t),kRr=r(nGe," \u2014 "),HK=n(nGe,"A",{href:!0});var nIt=s(HK);SRr=r(nIt,"TFConvBertForTokenClassification"),nIt.forEach(t),RRr=r(nGe," (ConvBERT model)"),nGe.forEach(t),PRr=i(me),t5=n(me,"LI",{});var sGe=s(t5);XEe=n(sGe,"STRONG",{});var sIt=s(XEe);BRr=r(sIt,"deberta"),sIt.forEach(t),NRr=r(sGe," \u2014 "),UK=n(sGe,"A",{href:!0});var lIt=s(UK);IRr=r(lIt,"TFDebertaForTokenClassification"),lIt.forEach(t),qRr=r(sGe," (DeBERTa model)"),sGe.forEach(t),jRr=i(me),a5=n(me,"LI",{});var lGe=s(a5);zEe=n(lGe,"STRONG",{});var iIt=s(zEe);DRr=r(iIt,"deberta-v2"),iIt.forEach(t),GRr=r(lGe," \u2014 "),JK=n(lGe,"A",{href:!0});var dIt=s(JK);ORr=r(dIt,"TFDebertaV2ForTokenClassification"),dIt.forEach(t),VRr=r(lGe," (DeBERTa-v2 model)"),lGe.forEach(t),XRr=i(me),n5=n(me,"LI",{});var iGe=s(n5);QEe=n(iGe,"STRONG",{});var cIt=s(QEe);zRr=r(cIt,"distilbert"),cIt.forEach(t),QRr=r(iGe," \u2014 "),YK=n(iGe,"A",{href:!0});var fIt=s(YK);WRr=r(fIt,"TFDistilBertForTokenClassification"),fIt.forEach(t),HRr=r(iGe," (DistilBERT model)"),iGe.forEach(t),URr=i(me),s5=n(me,"LI",{});var dGe=s(s5);WEe=n(dGe,"STRONG",{});var mIt=s(WEe);JRr=r(mIt,"electra"),mIt.forEach(t),YRr=r(dGe," \u2014 "),KK=n(dGe,"A",{href:!0});var gIt=s(KK);KRr=r(gIt,"TFElectraForTokenClassification"),gIt.forEach(t),ZRr=r(dGe," (ELECTRA model)"),dGe.forEach(t),ePr=i(me),l5=n(me,"LI",{});var cGe=s(l5);HEe=n(cGe,"STRONG",{});var hIt=s(HEe);oPr=r(hIt,"flaubert"),hIt.forEach(t),rPr=r(cGe," \u2014 "),ZK=n(cGe,"A",{href:!0});var pIt=s(ZK);tPr=r(pIt,"TFFlaubertForTokenClassification"),pIt.forEach(t),aPr=r(cGe," (FlauBERT model)"),cGe.forEach(t),nPr=i(me),i5=n(me,"LI",{});var fGe=s(i5);UEe=n(fGe,"STRONG",{});var _It=s(UEe);sPr=r(_It,"funnel"),_It.forEach(t),lPr=r(fGe," \u2014 "),eZ=n(fGe,"A",{href:!0});var uIt=s(eZ);iPr=r(uIt,"TFFunnelForTokenClassification"),uIt.forEach(t),dPr=r(fGe," (Funnel Transformer model)"),fGe.forEach(t),cPr=i(me),d5=n(me,"LI",{});var mGe=s(d5);JEe=n(mGe,"STRONG",{});var bIt=s(JEe);fPr=r(bIt,"layoutlm"),bIt.forEach(t),mPr=r(mGe," \u2014 "),oZ=n(mGe,"A",{href:!0});var vIt=s(oZ);gPr=r(vIt,"TFLayoutLMForTokenClassification"),vIt.forEach(t),hPr=r(mGe," (LayoutLM model)"),mGe.forEach(t),pPr=i(me),c5=n(me,"LI",{});var gGe=s(c5);YEe=n(gGe,"STRONG",{});var FIt=s(YEe);_Pr=r(FIt,"longformer"),FIt.forEach(t),uPr=r(gGe," \u2014 "),rZ=n(gGe,"A",{href:!0});var TIt=s(rZ);bPr=r(TIt,"TFLongformerForTokenClassification"),TIt.forEach(t),vPr=r(gGe," (Longformer model)"),gGe.forEach(t),FPr=i(me),f5=n(me,"LI",{});var hGe=s(f5);KEe=n(hGe,"STRONG",{});var MIt=s(KEe);TPr=r(MIt,"mobilebert"),MIt.forEach(t),MPr=r(hGe," \u2014 "),tZ=n(hGe,"A",{href:!0});var EIt=s(tZ);EPr=r(EIt,"TFMobileBertForTokenClassification"),EIt.forEach(t),CPr=r(hGe," (MobileBERT model)"),hGe.forEach(t),wPr=i(me),m5=n(me,"LI",{});var pGe=s(m5);ZEe=n(pGe,"STRONG",{});var CIt=s(ZEe);APr=r(CIt,"mpnet"),CIt.forEach(t),LPr=r(pGe," \u2014 "),aZ=n(pGe,"A",{href:!0});var wIt=s(aZ);yPr=r(wIt,"TFMPNetForTokenClassification"),wIt.forEach(t),xPr=r(pGe," (MPNet model)"),pGe.forEach(t),$Pr=i(me),g5=n(me,"LI",{});var _Ge=s(g5);eCe=n(_Ge,"STRONG",{});var AIt=s(eCe);kPr=r(AIt,"rembert"),AIt.forEach(t),SPr=r(_Ge," \u2014 "),nZ=n(_Ge,"A",{href:!0});var LIt=s(nZ);RPr=r(LIt,"TFRemBertForTokenClassification"),LIt.forEach(t),PPr=r(_Ge," (RemBERT model)"),_Ge.forEach(t),BPr=i(me),h5=n(me,"LI",{});var uGe=s(h5);oCe=n(uGe,"STRONG",{});var yIt=s(oCe);NPr=r(yIt,"roberta"),yIt.forEach(t),IPr=r(uGe," \u2014 "),sZ=n(uGe,"A",{href:!0});var xIt=s(sZ);qPr=r(xIt,"TFRobertaForTokenClassification"),xIt.forEach(t),jPr=r(uGe," (RoBERTa model)"),uGe.forEach(t),DPr=i(me),p5=n(me,"LI",{});var bGe=s(p5);rCe=n(bGe,"STRONG",{});var $It=s(rCe);GPr=r($It,"roformer"),$It.forEach(t),OPr=r(bGe," \u2014 "),lZ=n(bGe,"A",{href:!0});var kIt=s(lZ);VPr=r(kIt,"TFRoFormerForTokenClassification"),kIt.forEach(t),XPr=r(bGe," (RoFormer model)"),bGe.forEach(t),zPr=i(me),_5=n(me,"LI",{});var vGe=s(_5);tCe=n(vGe,"STRONG",{});var SIt=s(tCe);QPr=r(SIt,"xlm"),SIt.forEach(t),WPr=r(vGe," \u2014 "),iZ=n(vGe,"A",{href:!0});var RIt=s(iZ);HPr=r(RIt,"TFXLMForTokenClassification"),RIt.forEach(t),UPr=r(vGe," (XLM model)"),vGe.forEach(t),JPr=i(me),u5=n(me,"LI",{});var FGe=s(u5);aCe=n(FGe,"STRONG",{});var PIt=s(aCe);YPr=r(PIt,"xlm-roberta"),PIt.forEach(t),KPr=r(FGe," \u2014 "),dZ=n(FGe,"A",{href:!0});var BIt=s(dZ);ZPr=r(BIt,"TFXLMRobertaForTokenClassification"),BIt.forEach(t),eBr=r(FGe," (XLM-RoBERTa model)"),FGe.forEach(t),oBr=i(me),b5=n(me,"LI",{});var TGe=s(b5);nCe=n(TGe,"STRONG",{});var NIt=s(nCe);rBr=r(NIt,"xlnet"),NIt.forEach(t),tBr=r(TGe," \u2014 "),cZ=n(TGe,"A",{href:!0});var IIt=s(cZ);aBr=r(IIt,"TFXLNetForTokenClassification"),IIt.forEach(t),nBr=r(TGe," (XLNet model)"),TGe.forEach(t),me.forEach(t),sBr=i(Ul),T(v5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Tze=i(f),qc=n(f,"H2",{class:!0});var $We=s(qc);F5=n($We,"A",{id:!0,class:!0,href:!0});var qIt=s(F5);sCe=n(qIt,"SPAN",{});var jIt=s(sCe);T(zx.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),lBr=i($We),lCe=n($We,"SPAN",{});var DIt=s(lCe);iBr=r(DIt,"TFAutoModelForQuestionAnswering"),DIt.forEach(t),$We.forEach(t),Mze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Qx.$$.fragment,Jl),dBr=i(Jl),jc=n(Jl,"P",{});var Xte=s(jc);cBr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fZ=n(Xte,"A",{href:!0});var GIt=s(fZ);fBr=r(GIt,"from_pretrained()"),GIt.forEach(t),mBr=r(Xte," class method or the "),mZ=n(Xte,"A",{href:!0});var OIt=s(mZ);gBr=r(OIt,"from_config()"),OIt.forEach(t),hBr=r(Xte,` class
method.`),Xte.forEach(t),pBr=i(Jl),Wx=n(Jl,"P",{});var kWe=s(Wx);_Br=r(kWe,"This class cannot be instantiated directly using "),iCe=n(kWe,"CODE",{});var VIt=s(iCe);uBr=r(VIt,"__init__()"),VIt.forEach(t),bBr=r(kWe," (throws an error)."),kWe.forEach(t),vBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var E7=s(Vt);T(Hx.$$.fragment,E7),FBr=i(E7),dCe=n(E7,"P",{});var XIt=s(dCe);TBr=r(XIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XIt.forEach(t),MBr=i(E7),Dc=n(E7,"P",{});var zte=s(Dc);EBr=r(zte,`Note:
Loading a model from its configuration file does `),cCe=n(zte,"STRONG",{});var zIt=s(cCe);CBr=r(zIt,"not"),zIt.forEach(t),wBr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(zte,"A",{href:!0});var QIt=s(gZ);ABr=r(QIt,"from_pretrained()"),QIt.forEach(t),LBr=r(zte," to load the model weights."),zte.forEach(t),yBr=i(E7),T(T5.$$.fragment,E7),E7.forEach(t),xBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Ux.$$.fragment,Yl),$Br=i(Yl),fCe=n(Yl,"P",{});var WIt=s(fCe);kBr=r(WIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WIt.forEach(t),SBr=i(Yl),bn=n(Yl,"P",{});var C7=s(bn);RBr=r(C7,"The model class to instantiate is selected based on the "),mCe=n(C7,"CODE",{});var HIt=s(mCe);PBr=r(HIt,"model_type"),HIt.forEach(t),BBr=r(C7,` property of the config object (either
passed as an argument or loaded from `),gCe=n(C7,"CODE",{});var UIt=s(gCe);NBr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),IBr=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=n(C7,"CODE",{});var JIt=s(hCe);qBr=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),jBr=r(C7,":"),C7.forEach(t),DBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);M5=n(ge,"LI",{});var MGe=s(M5);pCe=n(MGe,"STRONG",{});var YIt=s(pCe);GBr=r(YIt,"albert"),YIt.forEach(t),OBr=r(MGe," \u2014 "),hZ=n(MGe,"A",{href:!0});var KIt=s(hZ);VBr=r(KIt,"TFAlbertForQuestionAnswering"),KIt.forEach(t),XBr=r(MGe," (ALBERT model)"),MGe.forEach(t),zBr=i(ge),E5=n(ge,"LI",{});var EGe=s(E5);_Ce=n(EGe,"STRONG",{});var ZIt=s(_Ce);QBr=r(ZIt,"bert"),ZIt.forEach(t),WBr=r(EGe," \u2014 "),pZ=n(EGe,"A",{href:!0});var eqt=s(pZ);HBr=r(eqt,"TFBertForQuestionAnswering"),eqt.forEach(t),UBr=r(EGe," (BERT model)"),EGe.forEach(t),JBr=i(ge),C5=n(ge,"LI",{});var CGe=s(C5);uCe=n(CGe,"STRONG",{});var oqt=s(uCe);YBr=r(oqt,"camembert"),oqt.forEach(t),KBr=r(CGe," \u2014 "),_Z=n(CGe,"A",{href:!0});var rqt=s(_Z);ZBr=r(rqt,"TFCamembertForQuestionAnswering"),rqt.forEach(t),eNr=r(CGe," (CamemBERT model)"),CGe.forEach(t),oNr=i(ge),w5=n(ge,"LI",{});var wGe=s(w5);bCe=n(wGe,"STRONG",{});var tqt=s(bCe);rNr=r(tqt,"convbert"),tqt.forEach(t),tNr=r(wGe," \u2014 "),uZ=n(wGe,"A",{href:!0});var aqt=s(uZ);aNr=r(aqt,"TFConvBertForQuestionAnswering"),aqt.forEach(t),nNr=r(wGe," (ConvBERT model)"),wGe.forEach(t),sNr=i(ge),A5=n(ge,"LI",{});var AGe=s(A5);vCe=n(AGe,"STRONG",{});var nqt=s(vCe);lNr=r(nqt,"deberta"),nqt.forEach(t),iNr=r(AGe," \u2014 "),bZ=n(AGe,"A",{href:!0});var sqt=s(bZ);dNr=r(sqt,"TFDebertaForQuestionAnswering"),sqt.forEach(t),cNr=r(AGe," (DeBERTa model)"),AGe.forEach(t),fNr=i(ge),L5=n(ge,"LI",{});var LGe=s(L5);FCe=n(LGe,"STRONG",{});var lqt=s(FCe);mNr=r(lqt,"deberta-v2"),lqt.forEach(t),gNr=r(LGe," \u2014 "),vZ=n(LGe,"A",{href:!0});var iqt=s(vZ);hNr=r(iqt,"TFDebertaV2ForQuestionAnswering"),iqt.forEach(t),pNr=r(LGe," (DeBERTa-v2 model)"),LGe.forEach(t),_Nr=i(ge),y5=n(ge,"LI",{});var yGe=s(y5);TCe=n(yGe,"STRONG",{});var dqt=s(TCe);uNr=r(dqt,"distilbert"),dqt.forEach(t),bNr=r(yGe," \u2014 "),FZ=n(yGe,"A",{href:!0});var cqt=s(FZ);vNr=r(cqt,"TFDistilBertForQuestionAnswering"),cqt.forEach(t),FNr=r(yGe," (DistilBERT model)"),yGe.forEach(t),TNr=i(ge),x5=n(ge,"LI",{});var xGe=s(x5);MCe=n(xGe,"STRONG",{});var fqt=s(MCe);MNr=r(fqt,"electra"),fqt.forEach(t),ENr=r(xGe," \u2014 "),TZ=n(xGe,"A",{href:!0});var mqt=s(TZ);CNr=r(mqt,"TFElectraForQuestionAnswering"),mqt.forEach(t),wNr=r(xGe," (ELECTRA model)"),xGe.forEach(t),ANr=i(ge),$5=n(ge,"LI",{});var $Ge=s($5);ECe=n($Ge,"STRONG",{});var gqt=s(ECe);LNr=r(gqt,"flaubert"),gqt.forEach(t),yNr=r($Ge," \u2014 "),MZ=n($Ge,"A",{href:!0});var hqt=s(MZ);xNr=r(hqt,"TFFlaubertForQuestionAnsweringSimple"),hqt.forEach(t),$Nr=r($Ge," (FlauBERT model)"),$Ge.forEach(t),kNr=i(ge),k5=n(ge,"LI",{});var kGe=s(k5);CCe=n(kGe,"STRONG",{});var pqt=s(CCe);SNr=r(pqt,"funnel"),pqt.forEach(t),RNr=r(kGe," \u2014 "),EZ=n(kGe,"A",{href:!0});var _qt=s(EZ);PNr=r(_qt,"TFFunnelForQuestionAnswering"),_qt.forEach(t),BNr=r(kGe," (Funnel Transformer model)"),kGe.forEach(t),NNr=i(ge),S5=n(ge,"LI",{});var SGe=s(S5);wCe=n(SGe,"STRONG",{});var uqt=s(wCe);INr=r(uqt,"gptj"),uqt.forEach(t),qNr=r(SGe," \u2014 "),CZ=n(SGe,"A",{href:!0});var bqt=s(CZ);jNr=r(bqt,"TFGPTJForQuestionAnswering"),bqt.forEach(t),DNr=r(SGe," (GPT-J model)"),SGe.forEach(t),GNr=i(ge),R5=n(ge,"LI",{});var RGe=s(R5);ACe=n(RGe,"STRONG",{});var vqt=s(ACe);ONr=r(vqt,"longformer"),vqt.forEach(t),VNr=r(RGe," \u2014 "),wZ=n(RGe,"A",{href:!0});var Fqt=s(wZ);XNr=r(Fqt,"TFLongformerForQuestionAnswering"),Fqt.forEach(t),zNr=r(RGe," (Longformer model)"),RGe.forEach(t),QNr=i(ge),P5=n(ge,"LI",{});var PGe=s(P5);LCe=n(PGe,"STRONG",{});var Tqt=s(LCe);WNr=r(Tqt,"mobilebert"),Tqt.forEach(t),HNr=r(PGe," \u2014 "),AZ=n(PGe,"A",{href:!0});var Mqt=s(AZ);UNr=r(Mqt,"TFMobileBertForQuestionAnswering"),Mqt.forEach(t),JNr=r(PGe," (MobileBERT model)"),PGe.forEach(t),YNr=i(ge),B5=n(ge,"LI",{});var BGe=s(B5);yCe=n(BGe,"STRONG",{});var Eqt=s(yCe);KNr=r(Eqt,"mpnet"),Eqt.forEach(t),ZNr=r(BGe," \u2014 "),LZ=n(BGe,"A",{href:!0});var Cqt=s(LZ);eIr=r(Cqt,"TFMPNetForQuestionAnswering"),Cqt.forEach(t),oIr=r(BGe," (MPNet model)"),BGe.forEach(t),rIr=i(ge),N5=n(ge,"LI",{});var NGe=s(N5);xCe=n(NGe,"STRONG",{});var wqt=s(xCe);tIr=r(wqt,"rembert"),wqt.forEach(t),aIr=r(NGe," \u2014 "),yZ=n(NGe,"A",{href:!0});var Aqt=s(yZ);nIr=r(Aqt,"TFRemBertForQuestionAnswering"),Aqt.forEach(t),sIr=r(NGe," (RemBERT model)"),NGe.forEach(t),lIr=i(ge),I5=n(ge,"LI",{});var IGe=s(I5);$Ce=n(IGe,"STRONG",{});var Lqt=s($Ce);iIr=r(Lqt,"roberta"),Lqt.forEach(t),dIr=r(IGe," \u2014 "),xZ=n(IGe,"A",{href:!0});var yqt=s(xZ);cIr=r(yqt,"TFRobertaForQuestionAnswering"),yqt.forEach(t),fIr=r(IGe," (RoBERTa model)"),IGe.forEach(t),mIr=i(ge),q5=n(ge,"LI",{});var qGe=s(q5);kCe=n(qGe,"STRONG",{});var xqt=s(kCe);gIr=r(xqt,"roformer"),xqt.forEach(t),hIr=r(qGe," \u2014 "),$Z=n(qGe,"A",{href:!0});var $qt=s($Z);pIr=r($qt,"TFRoFormerForQuestionAnswering"),$qt.forEach(t),_Ir=r(qGe," (RoFormer model)"),qGe.forEach(t),uIr=i(ge),j5=n(ge,"LI",{});var jGe=s(j5);SCe=n(jGe,"STRONG",{});var kqt=s(SCe);bIr=r(kqt,"xlm"),kqt.forEach(t),vIr=r(jGe," \u2014 "),kZ=n(jGe,"A",{href:!0});var Sqt=s(kZ);FIr=r(Sqt,"TFXLMForQuestionAnsweringSimple"),Sqt.forEach(t),TIr=r(jGe," (XLM model)"),jGe.forEach(t),MIr=i(ge),D5=n(ge,"LI",{});var DGe=s(D5);RCe=n(DGe,"STRONG",{});var Rqt=s(RCe);EIr=r(Rqt,"xlm-roberta"),Rqt.forEach(t),CIr=r(DGe," \u2014 "),SZ=n(DGe,"A",{href:!0});var Pqt=s(SZ);wIr=r(Pqt,"TFXLMRobertaForQuestionAnswering"),Pqt.forEach(t),AIr=r(DGe," (XLM-RoBERTa model)"),DGe.forEach(t),LIr=i(ge),G5=n(ge,"LI",{});var GGe=s(G5);PCe=n(GGe,"STRONG",{});var Bqt=s(PCe);yIr=r(Bqt,"xlnet"),Bqt.forEach(t),xIr=r(GGe," \u2014 "),RZ=n(GGe,"A",{href:!0});var Nqt=s(RZ);$Ir=r(Nqt,"TFXLNetForQuestionAnsweringSimple"),Nqt.forEach(t),kIr=r(GGe," (XLNet model)"),GGe.forEach(t),ge.forEach(t),SIr=i(Yl),T(O5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Eze=i(f),Gc=n(f,"H2",{class:!0});var SWe=s(Gc);V5=n(SWe,"A",{id:!0,class:!0,href:!0});var Iqt=s(V5);BCe=n(Iqt,"SPAN",{});var qqt=s(BCe);T(Jx.$$.fragment,qqt),qqt.forEach(t),Iqt.forEach(t),RIr=i(SWe),NCe=n(SWe,"SPAN",{});var jqt=s(NCe);PIr=r(jqt,"TFAutoModelForVision2Seq"),jqt.forEach(t),SWe.forEach(t),Cze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Yx.$$.fragment,Kl),BIr=i(Kl),Oc=n(Kl,"P",{});var Qte=s(Oc);NIr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PZ=n(Qte,"A",{href:!0});var Dqt=s(PZ);IIr=r(Dqt,"from_pretrained()"),Dqt.forEach(t),qIr=r(Qte," class method or the "),BZ=n(Qte,"A",{href:!0});var Gqt=s(BZ);jIr=r(Gqt,"from_config()"),Gqt.forEach(t),DIr=r(Qte,` class
method.`),Qte.forEach(t),GIr=i(Kl),Kx=n(Kl,"P",{});var RWe=s(Kx);OIr=r(RWe,"This class cannot be instantiated directly using "),ICe=n(RWe,"CODE",{});var Oqt=s(ICe);VIr=r(Oqt,"__init__()"),Oqt.forEach(t),XIr=r(RWe," (throws an error)."),RWe.forEach(t),zIr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var w7=s(Xt);T(Zx.$$.fragment,w7),QIr=i(w7),qCe=n(w7,"P",{});var Vqt=s(qCe);WIr=r(Vqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vqt.forEach(t),HIr=i(w7),Vc=n(w7,"P",{});var Wte=s(Vc);UIr=r(Wte,`Note:
Loading a model from its configuration file does `),jCe=n(Wte,"STRONG",{});var Xqt=s(jCe);JIr=r(Xqt,"not"),Xqt.forEach(t),YIr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(Wte,"A",{href:!0});var zqt=s(NZ);KIr=r(zqt,"from_pretrained()"),zqt.forEach(t),ZIr=r(Wte," to load the model weights."),Wte.forEach(t),eqr=i(w7),T(X5.$$.fragment,w7),w7.forEach(t),oqr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(e$.$$.fragment,Zl),rqr=i(Zl),DCe=n(Zl,"P",{});var Qqt=s(DCe);tqr=r(Qqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qqt.forEach(t),aqr=i(Zl),vn=n(Zl,"P",{});var A7=s(vn);nqr=r(A7,"The model class to instantiate is selected based on the "),GCe=n(A7,"CODE",{});var Wqt=s(GCe);sqr=r(Wqt,"model_type"),Wqt.forEach(t),lqr=r(A7,` property of the config object (either
passed as an argument or loaded from `),OCe=n(A7,"CODE",{});var Hqt=s(OCe);iqr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),dqr=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VCe=n(A7,"CODE",{});var Uqt=s(VCe);cqr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),fqr=r(A7,":"),A7.forEach(t),mqr=i(Zl),XCe=n(Zl,"UL",{});var Jqt=s(XCe);z5=n(Jqt,"LI",{});var OGe=s(z5);zCe=n(OGe,"STRONG",{});var Yqt=s(zCe);gqr=r(Yqt,"vision-encoder-decoder"),Yqt.forEach(t),hqr=r(OGe," \u2014 "),IZ=n(OGe,"A",{href:!0});var Kqt=s(IZ);pqr=r(Kqt,"TFVisionEncoderDecoderModel"),Kqt.forEach(t),_qr=r(OGe," (Vision Encoder decoder model)"),OGe.forEach(t),Jqt.forEach(t),uqr=i(Zl),T(Q5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),wze=i(f),Xc=n(f,"H2",{class:!0});var PWe=s(Xc);W5=n(PWe,"A",{id:!0,class:!0,href:!0});var Zqt=s(W5);QCe=n(Zqt,"SPAN",{});var ejt=s(QCe);T(o$.$$.fragment,ejt),ejt.forEach(t),Zqt.forEach(t),bqr=i(PWe),WCe=n(PWe,"SPAN",{});var ojt=s(WCe);vqr=r(ojt,"TFAutoModelForSpeechSeq2Seq"),ojt.forEach(t),PWe.forEach(t),Aze=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(r$.$$.fragment,ei),Fqr=i(ei),zc=n(ei,"P",{});var Hte=s(zc);Tqr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qZ=n(Hte,"A",{href:!0});var rjt=s(qZ);Mqr=r(rjt,"from_pretrained()"),rjt.forEach(t),Eqr=r(Hte," class method or the "),jZ=n(Hte,"A",{href:!0});var tjt=s(jZ);Cqr=r(tjt,"from_config()"),tjt.forEach(t),wqr=r(Hte,` class
method.`),Hte.forEach(t),Aqr=i(ei),t$=n(ei,"P",{});var BWe=s(t$);Lqr=r(BWe,"This class cannot be instantiated directly using "),HCe=n(BWe,"CODE",{});var ajt=s(HCe);yqr=r(ajt,"__init__()"),ajt.forEach(t),xqr=r(BWe," (throws an error)."),BWe.forEach(t),$qr=i(ei),zt=n(ei,"DIV",{class:!0});var L7=s(zt);T(a$.$$.fragment,L7),kqr=i(L7),UCe=n(L7,"P",{});var njt=s(UCe);Sqr=r(njt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),njt.forEach(t),Rqr=i(L7),Qc=n(L7,"P",{});var Ute=s(Qc);Pqr=r(Ute,`Note:
Loading a model from its configuration file does `),JCe=n(Ute,"STRONG",{});var sjt=s(JCe);Bqr=r(sjt,"not"),sjt.forEach(t),Nqr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Ute,"A",{href:!0});var ljt=s(DZ);Iqr=r(ljt,"from_pretrained()"),ljt.forEach(t),qqr=r(Ute," to load the model weights."),Ute.forEach(t),jqr=i(L7),T(H5.$$.fragment,L7),L7.forEach(t),Dqr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(n$.$$.fragment,oi),Gqr=i(oi),YCe=n(oi,"P",{});var ijt=s(YCe);Oqr=r(ijt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ijt.forEach(t),Vqr=i(oi),Fn=n(oi,"P",{});var y7=s(Fn);Xqr=r(y7,"The model class to instantiate is selected based on the "),KCe=n(y7,"CODE",{});var djt=s(KCe);zqr=r(djt,"model_type"),djt.forEach(t),Qqr=r(y7,` property of the config object (either
passed as an argument or loaded from `),ZCe=n(y7,"CODE",{});var cjt=s(ZCe);Wqr=r(cjt,"pretrained_model_name_or_path"),cjt.forEach(t),Hqr=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(y7,"CODE",{});var fjt=s(e5e);Uqr=r(fjt,"pretrained_model_name_or_path"),fjt.forEach(t),Jqr=r(y7,":"),y7.forEach(t),Yqr=i(oi),o5e=n(oi,"UL",{});var mjt=s(o5e);U5=n(mjt,"LI",{});var VGe=s(U5);r5e=n(VGe,"STRONG",{});var gjt=s(r5e);Kqr=r(gjt,"speech_to_text"),gjt.forEach(t),Zqr=r(VGe," \u2014 "),GZ=n(VGe,"A",{href:!0});var hjt=s(GZ);ejr=r(hjt,"TFSpeech2TextForConditionalGeneration"),hjt.forEach(t),ojr=r(VGe," (Speech2Text model)"),VGe.forEach(t),mjt.forEach(t),rjr=i(oi),T(J5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Lze=i(f),Wc=n(f,"H2",{class:!0});var NWe=s(Wc);Y5=n(NWe,"A",{id:!0,class:!0,href:!0});var pjt=s(Y5);t5e=n(pjt,"SPAN",{});var _jt=s(t5e);T(s$.$$.fragment,_jt),_jt.forEach(t),pjt.forEach(t),tjr=i(NWe),a5e=n(NWe,"SPAN",{});var ujt=s(a5e);ajr=r(ujt,"FlaxAutoModel"),ujt.forEach(t),NWe.forEach(t),yze=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(l$.$$.fragment,ri),njr=i(ri),Hc=n(ri,"P",{});var Jte=s(Hc);sjr=r(Jte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OZ=n(Jte,"A",{href:!0});var bjt=s(OZ);ljr=r(bjt,"from_pretrained()"),bjt.forEach(t),ijr=r(Jte," class method or the "),VZ=n(Jte,"A",{href:!0});var vjt=s(VZ);djr=r(vjt,"from_config()"),vjt.forEach(t),cjr=r(Jte,` class
method.`),Jte.forEach(t),fjr=i(ri),i$=n(ri,"P",{});var IWe=s(i$);mjr=r(IWe,"This class cannot be instantiated directly using "),n5e=n(IWe,"CODE",{});var Fjt=s(n5e);gjr=r(Fjt,"__init__()"),Fjt.forEach(t),hjr=r(IWe," (throws an error)."),IWe.forEach(t),pjr=i(ri),Qt=n(ri,"DIV",{class:!0});var x7=s(Qt);T(d$.$$.fragment,x7),_jr=i(x7),s5e=n(x7,"P",{});var Tjt=s(s5e);ujr=r(Tjt,"Instantiates one of the base model classes of the library from a configuration."),Tjt.forEach(t),bjr=i(x7),Uc=n(x7,"P",{});var Yte=s(Uc);vjr=r(Yte,`Note:
Loading a model from its configuration file does `),l5e=n(Yte,"STRONG",{});var Mjt=s(l5e);Fjr=r(Mjt,"not"),Mjt.forEach(t),Tjr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Yte,"A",{href:!0});var Ejt=s(XZ);Mjr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),Ejr=r(Yte," to load the model weights."),Yte.forEach(t),Cjr=i(x7),T(K5.$$.fragment,x7),x7.forEach(t),wjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(c$.$$.fragment,ti),Ajr=i(ti),i5e=n(ti,"P",{});var Cjt=s(i5e);Ljr=r(Cjt,"Instantiate one of the base model classes of the library from a pretrained model."),Cjt.forEach(t),yjr=i(ti),Tn=n(ti,"P",{});var $7=s(Tn);xjr=r($7,"The model class to instantiate is selected based on the "),d5e=n($7,"CODE",{});var wjt=s(d5e);$jr=r(wjt,"model_type"),wjt.forEach(t),kjr=r($7,` property of the config object (either
passed as an argument or loaded from `),c5e=n($7,"CODE",{});var Ajt=s(c5e);Sjr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),Rjr=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n($7,"CODE",{});var Ljt=s(f5e);Pjr=r(Ljt,"pretrained_model_name_or_path"),Ljt.forEach(t),Bjr=r($7,":"),$7.forEach(t),Njr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);Z5=n(ae,"LI",{});var XGe=s(Z5);m5e=n(XGe,"STRONG",{});var yjt=s(m5e);Ijr=r(yjt,"albert"),yjt.forEach(t),qjr=r(XGe," \u2014 "),zZ=n(XGe,"A",{href:!0});var xjt=s(zZ);jjr=r(xjt,"FlaxAlbertModel"),xjt.forEach(t),Djr=r(XGe," (ALBERT model)"),XGe.forEach(t),Gjr=i(ae),e0=n(ae,"LI",{});var zGe=s(e0);g5e=n(zGe,"STRONG",{});var $jt=s(g5e);Ojr=r($jt,"bart"),$jt.forEach(t),Vjr=r(zGe," \u2014 "),QZ=n(zGe,"A",{href:!0});var kjt=s(QZ);Xjr=r(kjt,"FlaxBartModel"),kjt.forEach(t),zjr=r(zGe," (BART model)"),zGe.forEach(t),Qjr=i(ae),o0=n(ae,"LI",{});var QGe=s(o0);h5e=n(QGe,"STRONG",{});var Sjt=s(h5e);Wjr=r(Sjt,"beit"),Sjt.forEach(t),Hjr=r(QGe," \u2014 "),WZ=n(QGe,"A",{href:!0});var Rjt=s(WZ);Ujr=r(Rjt,"FlaxBeitModel"),Rjt.forEach(t),Jjr=r(QGe," (BEiT model)"),QGe.forEach(t),Yjr=i(ae),r0=n(ae,"LI",{});var WGe=s(r0);p5e=n(WGe,"STRONG",{});var Pjt=s(p5e);Kjr=r(Pjt,"bert"),Pjt.forEach(t),Zjr=r(WGe," \u2014 "),HZ=n(WGe,"A",{href:!0});var Bjt=s(HZ);eDr=r(Bjt,"FlaxBertModel"),Bjt.forEach(t),oDr=r(WGe," (BERT model)"),WGe.forEach(t),rDr=i(ae),t0=n(ae,"LI",{});var HGe=s(t0);_5e=n(HGe,"STRONG",{});var Njt=s(_5e);tDr=r(Njt,"big_bird"),Njt.forEach(t),aDr=r(HGe," \u2014 "),UZ=n(HGe,"A",{href:!0});var Ijt=s(UZ);nDr=r(Ijt,"FlaxBigBirdModel"),Ijt.forEach(t),sDr=r(HGe," (BigBird model)"),HGe.forEach(t),lDr=i(ae),a0=n(ae,"LI",{});var UGe=s(a0);u5e=n(UGe,"STRONG",{});var qjt=s(u5e);iDr=r(qjt,"blenderbot"),qjt.forEach(t),dDr=r(UGe," \u2014 "),JZ=n(UGe,"A",{href:!0});var jjt=s(JZ);cDr=r(jjt,"FlaxBlenderbotModel"),jjt.forEach(t),fDr=r(UGe," (Blenderbot model)"),UGe.forEach(t),mDr=i(ae),n0=n(ae,"LI",{});var JGe=s(n0);b5e=n(JGe,"STRONG",{});var Djt=s(b5e);gDr=r(Djt,"blenderbot-small"),Djt.forEach(t),hDr=r(JGe," \u2014 "),YZ=n(JGe,"A",{href:!0});var Gjt=s(YZ);pDr=r(Gjt,"FlaxBlenderbotSmallModel"),Gjt.forEach(t),_Dr=r(JGe," (BlenderbotSmall model)"),JGe.forEach(t),uDr=i(ae),s0=n(ae,"LI",{});var YGe=s(s0);v5e=n(YGe,"STRONG",{});var Ojt=s(v5e);bDr=r(Ojt,"clip"),Ojt.forEach(t),vDr=r(YGe," \u2014 "),KZ=n(YGe,"A",{href:!0});var Vjt=s(KZ);FDr=r(Vjt,"FlaxCLIPModel"),Vjt.forEach(t),TDr=r(YGe," (CLIP model)"),YGe.forEach(t),MDr=i(ae),l0=n(ae,"LI",{});var KGe=s(l0);F5e=n(KGe,"STRONG",{});var Xjt=s(F5e);EDr=r(Xjt,"distilbert"),Xjt.forEach(t),CDr=r(KGe," \u2014 "),ZZ=n(KGe,"A",{href:!0});var zjt=s(ZZ);wDr=r(zjt,"FlaxDistilBertModel"),zjt.forEach(t),ADr=r(KGe," (DistilBERT model)"),KGe.forEach(t),LDr=i(ae),i0=n(ae,"LI",{});var ZGe=s(i0);T5e=n(ZGe,"STRONG",{});var Qjt=s(T5e);yDr=r(Qjt,"electra"),Qjt.forEach(t),xDr=r(ZGe," \u2014 "),eee=n(ZGe,"A",{href:!0});var Wjt=s(eee);$Dr=r(Wjt,"FlaxElectraModel"),Wjt.forEach(t),kDr=r(ZGe," (ELECTRA model)"),ZGe.forEach(t),SDr=i(ae),d0=n(ae,"LI",{});var eOe=s(d0);M5e=n(eOe,"STRONG",{});var Hjt=s(M5e);RDr=r(Hjt,"gpt2"),Hjt.forEach(t),PDr=r(eOe," \u2014 "),oee=n(eOe,"A",{href:!0});var Ujt=s(oee);BDr=r(Ujt,"FlaxGPT2Model"),Ujt.forEach(t),NDr=r(eOe," (OpenAI GPT-2 model)"),eOe.forEach(t),IDr=i(ae),c0=n(ae,"LI",{});var oOe=s(c0);E5e=n(oOe,"STRONG",{});var Jjt=s(E5e);qDr=r(Jjt,"gpt_neo"),Jjt.forEach(t),jDr=r(oOe," \u2014 "),ree=n(oOe,"A",{href:!0});var Yjt=s(ree);DDr=r(Yjt,"FlaxGPTNeoModel"),Yjt.forEach(t),GDr=r(oOe," (GPT Neo model)"),oOe.forEach(t),ODr=i(ae),f0=n(ae,"LI",{});var rOe=s(f0);C5e=n(rOe,"STRONG",{});var Kjt=s(C5e);VDr=r(Kjt,"gptj"),Kjt.forEach(t),XDr=r(rOe," \u2014 "),tee=n(rOe,"A",{href:!0});var Zjt=s(tee);zDr=r(Zjt,"FlaxGPTJModel"),Zjt.forEach(t),QDr=r(rOe," (GPT-J model)"),rOe.forEach(t),WDr=i(ae),m0=n(ae,"LI",{});var tOe=s(m0);w5e=n(tOe,"STRONG",{});var eDt=s(w5e);HDr=r(eDt,"longt5"),eDt.forEach(t),UDr=r(tOe," \u2014 "),aee=n(tOe,"A",{href:!0});var oDt=s(aee);JDr=r(oDt,"FlaxLongT5Model"),oDt.forEach(t),YDr=r(tOe," (LongT5 model)"),tOe.forEach(t),KDr=i(ae),g0=n(ae,"LI",{});var aOe=s(g0);A5e=n(aOe,"STRONG",{});var rDt=s(A5e);ZDr=r(rDt,"marian"),rDt.forEach(t),eGr=r(aOe," \u2014 "),nee=n(aOe,"A",{href:!0});var tDt=s(nee);oGr=r(tDt,"FlaxMarianModel"),tDt.forEach(t),rGr=r(aOe," (Marian model)"),aOe.forEach(t),tGr=i(ae),h0=n(ae,"LI",{});var nOe=s(h0);L5e=n(nOe,"STRONG",{});var aDt=s(L5e);aGr=r(aDt,"mbart"),aDt.forEach(t),nGr=r(nOe," \u2014 "),see=n(nOe,"A",{href:!0});var nDt=s(see);sGr=r(nDt,"FlaxMBartModel"),nDt.forEach(t),lGr=r(nOe," (mBART model)"),nOe.forEach(t),iGr=i(ae),p0=n(ae,"LI",{});var sOe=s(p0);y5e=n(sOe,"STRONG",{});var sDt=s(y5e);dGr=r(sDt,"mt5"),sDt.forEach(t),cGr=r(sOe," \u2014 "),lee=n(sOe,"A",{href:!0});var lDt=s(lee);fGr=r(lDt,"FlaxMT5Model"),lDt.forEach(t),mGr=r(sOe," (MT5 model)"),sOe.forEach(t),gGr=i(ae),_0=n(ae,"LI",{});var lOe=s(_0);x5e=n(lOe,"STRONG",{});var iDt=s(x5e);hGr=r(iDt,"opt"),iDt.forEach(t),pGr=r(lOe," \u2014 "),iee=n(lOe,"A",{href:!0});var dDt=s(iee);_Gr=r(dDt,"FlaxOPTModel"),dDt.forEach(t),uGr=r(lOe," (OPT model)"),lOe.forEach(t),bGr=i(ae),u0=n(ae,"LI",{});var iOe=s(u0);$5e=n(iOe,"STRONG",{});var cDt=s($5e);vGr=r(cDt,"pegasus"),cDt.forEach(t),FGr=r(iOe," \u2014 "),dee=n(iOe,"A",{href:!0});var fDt=s(dee);TGr=r(fDt,"FlaxPegasusModel"),fDt.forEach(t),MGr=r(iOe," (Pegasus model)"),iOe.forEach(t),EGr=i(ae),b0=n(ae,"LI",{});var dOe=s(b0);k5e=n(dOe,"STRONG",{});var mDt=s(k5e);CGr=r(mDt,"roberta"),mDt.forEach(t),wGr=r(dOe," \u2014 "),cee=n(dOe,"A",{href:!0});var gDt=s(cee);AGr=r(gDt,"FlaxRobertaModel"),gDt.forEach(t),LGr=r(dOe," (RoBERTa model)"),dOe.forEach(t),yGr=i(ae),v0=n(ae,"LI",{});var cOe=s(v0);S5e=n(cOe,"STRONG",{});var hDt=s(S5e);xGr=r(hDt,"roformer"),hDt.forEach(t),$Gr=r(cOe," \u2014 "),fee=n(cOe,"A",{href:!0});var pDt=s(fee);kGr=r(pDt,"FlaxRoFormerModel"),pDt.forEach(t),SGr=r(cOe," (RoFormer model)"),cOe.forEach(t),RGr=i(ae),F0=n(ae,"LI",{});var fOe=s(F0);R5e=n(fOe,"STRONG",{});var _Dt=s(R5e);PGr=r(_Dt,"t5"),_Dt.forEach(t),BGr=r(fOe," \u2014 "),mee=n(fOe,"A",{href:!0});var uDt=s(mee);NGr=r(uDt,"FlaxT5Model"),uDt.forEach(t),IGr=r(fOe," (T5 model)"),fOe.forEach(t),qGr=i(ae),T0=n(ae,"LI",{});var mOe=s(T0);P5e=n(mOe,"STRONG",{});var bDt=s(P5e);jGr=r(bDt,"vision-text-dual-encoder"),bDt.forEach(t),DGr=r(mOe," \u2014 "),gee=n(mOe,"A",{href:!0});var vDt=s(gee);GGr=r(vDt,"FlaxVisionTextDualEncoderModel"),vDt.forEach(t),OGr=r(mOe," (VisionTextDualEncoder model)"),mOe.forEach(t),VGr=i(ae),M0=n(ae,"LI",{});var gOe=s(M0);B5e=n(gOe,"STRONG",{});var FDt=s(B5e);XGr=r(FDt,"vit"),FDt.forEach(t),zGr=r(gOe," \u2014 "),hee=n(gOe,"A",{href:!0});var TDt=s(hee);QGr=r(TDt,"FlaxViTModel"),TDt.forEach(t),WGr=r(gOe," (ViT model)"),gOe.forEach(t),HGr=i(ae),E0=n(ae,"LI",{});var hOe=s(E0);N5e=n(hOe,"STRONG",{});var MDt=s(N5e);UGr=r(MDt,"wav2vec2"),MDt.forEach(t),JGr=r(hOe," \u2014 "),pee=n(hOe,"A",{href:!0});var EDt=s(pee);YGr=r(EDt,"FlaxWav2Vec2Model"),EDt.forEach(t),KGr=r(hOe," (Wav2Vec2 model)"),hOe.forEach(t),ZGr=i(ae),C0=n(ae,"LI",{});var pOe=s(C0);I5e=n(pOe,"STRONG",{});var CDt=s(I5e);eOr=r(CDt,"xglm"),CDt.forEach(t),oOr=r(pOe," \u2014 "),_ee=n(pOe,"A",{href:!0});var wDt=s(_ee);rOr=r(wDt,"FlaxXGLMModel"),wDt.forEach(t),tOr=r(pOe," (XGLM model)"),pOe.forEach(t),aOr=i(ae),w0=n(ae,"LI",{});var _Oe=s(w0);q5e=n(_Oe,"STRONG",{});var ADt=s(q5e);nOr=r(ADt,"xlm-roberta"),ADt.forEach(t),sOr=r(_Oe," \u2014 "),uee=n(_Oe,"A",{href:!0});var LDt=s(uee);lOr=r(LDt,"FlaxXLMRobertaModel"),LDt.forEach(t),iOr=r(_Oe," (XLM-RoBERTa model)"),_Oe.forEach(t),ae.forEach(t),dOr=i(ti),T(A0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),xze=i(f),Jc=n(f,"H2",{class:!0});var qWe=s(Jc);L0=n(qWe,"A",{id:!0,class:!0,href:!0});var yDt=s(L0);j5e=n(yDt,"SPAN",{});var xDt=s(j5e);T(f$.$$.fragment,xDt),xDt.forEach(t),yDt.forEach(t),cOr=i(qWe),D5e=n(qWe,"SPAN",{});var $Dt=s(D5e);fOr=r($Dt,"FlaxAutoModelForCausalLM"),$Dt.forEach(t),qWe.forEach(t),$ze=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(m$.$$.fragment,ai),mOr=i(ai),Yc=n(ai,"P",{});var Kte=s(Yc);gOr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bee=n(Kte,"A",{href:!0});var kDt=s(bee);hOr=r(kDt,"from_pretrained()"),kDt.forEach(t),pOr=r(Kte," class method or the "),vee=n(Kte,"A",{href:!0});var SDt=s(vee);_Or=r(SDt,"from_config()"),SDt.forEach(t),uOr=r(Kte,` class
method.`),Kte.forEach(t),bOr=i(ai),g$=n(ai,"P",{});var jWe=s(g$);vOr=r(jWe,"This class cannot be instantiated directly using "),G5e=n(jWe,"CODE",{});var RDt=s(G5e);FOr=r(RDt,"__init__()"),RDt.forEach(t),TOr=r(jWe," (throws an error)."),jWe.forEach(t),MOr=i(ai),Wt=n(ai,"DIV",{class:!0});var k7=s(Wt);T(h$.$$.fragment,k7),EOr=i(k7),O5e=n(k7,"P",{});var PDt=s(O5e);COr=r(PDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PDt.forEach(t),wOr=i(k7),Kc=n(k7,"P",{});var Zte=s(Kc);AOr=r(Zte,`Note:
Loading a model from its configuration file does `),V5e=n(Zte,"STRONG",{});var BDt=s(V5e);LOr=r(BDt,"not"),BDt.forEach(t),yOr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(Zte,"A",{href:!0});var NDt=s(Fee);xOr=r(NDt,"from_pretrained()"),NDt.forEach(t),$Or=r(Zte," to load the model weights."),Zte.forEach(t),kOr=i(k7),T(y0.$$.fragment,k7),k7.forEach(t),SOr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(p$.$$.fragment,ni),ROr=i(ni),X5e=n(ni,"P",{});var IDt=s(X5e);POr=r(IDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),IDt.forEach(t),BOr=i(ni),Mn=n(ni,"P",{});var S7=s(Mn);NOr=r(S7,"The model class to instantiate is selected based on the "),z5e=n(S7,"CODE",{});var qDt=s(z5e);IOr=r(qDt,"model_type"),qDt.forEach(t),qOr=r(S7,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(S7,"CODE",{});var jDt=s(Q5e);jOr=r(jDt,"pretrained_model_name_or_path"),jDt.forEach(t),DOr=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(S7,"CODE",{});var DDt=s(W5e);GOr=r(DDt,"pretrained_model_name_or_path"),DDt.forEach(t),OOr=r(S7,":"),S7.forEach(t),VOr=i(ni),xe=n(ni,"UL",{});var Ie=s(xe);x0=n(Ie,"LI",{});var uOe=s(x0);H5e=n(uOe,"STRONG",{});var GDt=s(H5e);XOr=r(GDt,"bart"),GDt.forEach(t),zOr=r(uOe," \u2014 "),Tee=n(uOe,"A",{href:!0});var ODt=s(Tee);QOr=r(ODt,"FlaxBartForCausalLM"),ODt.forEach(t),WOr=r(uOe," (BART model)"),uOe.forEach(t),HOr=i(Ie),$0=n(Ie,"LI",{});var bOe=s($0);U5e=n(bOe,"STRONG",{});var VDt=s(U5e);UOr=r(VDt,"bert"),VDt.forEach(t),JOr=r(bOe," \u2014 "),Mee=n(bOe,"A",{href:!0});var XDt=s(Mee);YOr=r(XDt,"FlaxBertForCausalLM"),XDt.forEach(t),KOr=r(bOe," (BERT model)"),bOe.forEach(t),ZOr=i(Ie),k0=n(Ie,"LI",{});var vOe=s(k0);J5e=n(vOe,"STRONG",{});var zDt=s(J5e);eVr=r(zDt,"big_bird"),zDt.forEach(t),oVr=r(vOe," \u2014 "),Eee=n(vOe,"A",{href:!0});var QDt=s(Eee);rVr=r(QDt,"FlaxBigBirdForCausalLM"),QDt.forEach(t),tVr=r(vOe," (BigBird model)"),vOe.forEach(t),aVr=i(Ie),S0=n(Ie,"LI",{});var FOe=s(S0);Y5e=n(FOe,"STRONG",{});var WDt=s(Y5e);nVr=r(WDt,"electra"),WDt.forEach(t),sVr=r(FOe," \u2014 "),Cee=n(FOe,"A",{href:!0});var HDt=s(Cee);lVr=r(HDt,"FlaxElectraForCausalLM"),HDt.forEach(t),iVr=r(FOe," (ELECTRA model)"),FOe.forEach(t),dVr=i(Ie),R0=n(Ie,"LI",{});var TOe=s(R0);K5e=n(TOe,"STRONG",{});var UDt=s(K5e);cVr=r(UDt,"gpt2"),UDt.forEach(t),fVr=r(TOe," \u2014 "),wee=n(TOe,"A",{href:!0});var JDt=s(wee);mVr=r(JDt,"FlaxGPT2LMHeadModel"),JDt.forEach(t),gVr=r(TOe," (OpenAI GPT-2 model)"),TOe.forEach(t),hVr=i(Ie),P0=n(Ie,"LI",{});var MOe=s(P0);Z5e=n(MOe,"STRONG",{});var YDt=s(Z5e);pVr=r(YDt,"gpt_neo"),YDt.forEach(t),_Vr=r(MOe," \u2014 "),Aee=n(MOe,"A",{href:!0});var KDt=s(Aee);uVr=r(KDt,"FlaxGPTNeoForCausalLM"),KDt.forEach(t),bVr=r(MOe," (GPT Neo model)"),MOe.forEach(t),vVr=i(Ie),B0=n(Ie,"LI",{});var EOe=s(B0);e0e=n(EOe,"STRONG",{});var ZDt=s(e0e);FVr=r(ZDt,"gptj"),ZDt.forEach(t),TVr=r(EOe," \u2014 "),Lee=n(EOe,"A",{href:!0});var eGt=s(Lee);MVr=r(eGt,"FlaxGPTJForCausalLM"),eGt.forEach(t),EVr=r(EOe," (GPT-J model)"),EOe.forEach(t),CVr=i(Ie),N0=n(Ie,"LI",{});var COe=s(N0);o0e=n(COe,"STRONG",{});var oGt=s(o0e);wVr=r(oGt,"opt"),oGt.forEach(t),AVr=r(COe," \u2014 "),yee=n(COe,"A",{href:!0});var rGt=s(yee);LVr=r(rGt,"FlaxOPTForCausalLM"),rGt.forEach(t),yVr=r(COe," (OPT model)"),COe.forEach(t),xVr=i(Ie),I0=n(Ie,"LI",{});var wOe=s(I0);r0e=n(wOe,"STRONG",{});var tGt=s(r0e);$Vr=r(tGt,"roberta"),tGt.forEach(t),kVr=r(wOe," \u2014 "),xee=n(wOe,"A",{href:!0});var aGt=s(xee);SVr=r(aGt,"FlaxRobertaForCausalLM"),aGt.forEach(t),RVr=r(wOe," (RoBERTa model)"),wOe.forEach(t),PVr=i(Ie),q0=n(Ie,"LI",{});var AOe=s(q0);t0e=n(AOe,"STRONG",{});var nGt=s(t0e);BVr=r(nGt,"xglm"),nGt.forEach(t),NVr=r(AOe," \u2014 "),$ee=n(AOe,"A",{href:!0});var sGt=s($ee);IVr=r(sGt,"FlaxXGLMForCausalLM"),sGt.forEach(t),qVr=r(AOe," (XGLM model)"),AOe.forEach(t),Ie.forEach(t),jVr=i(ni),T(j0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),kze=i(f),Zc=n(f,"H2",{class:!0});var DWe=s(Zc);D0=n(DWe,"A",{id:!0,class:!0,href:!0});var lGt=s(D0);a0e=n(lGt,"SPAN",{});var iGt=s(a0e);T(_$.$$.fragment,iGt),iGt.forEach(t),lGt.forEach(t),DVr=i(DWe),n0e=n(DWe,"SPAN",{});var dGt=s(n0e);GVr=r(dGt,"FlaxAutoModelForPreTraining"),dGt.forEach(t),DWe.forEach(t),Sze=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(u$.$$.fragment,si),OVr=i(si),ef=n(si,"P",{});var eae=s(ef);VVr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kee=n(eae,"A",{href:!0});var cGt=s(kee);XVr=r(cGt,"from_pretrained()"),cGt.forEach(t),zVr=r(eae," class method or the "),See=n(eae,"A",{href:!0});var fGt=s(See);QVr=r(fGt,"from_config()"),fGt.forEach(t),WVr=r(eae,` class
method.`),eae.forEach(t),HVr=i(si),b$=n(si,"P",{});var GWe=s(b$);UVr=r(GWe,"This class cannot be instantiated directly using "),s0e=n(GWe,"CODE",{});var mGt=s(s0e);JVr=r(mGt,"__init__()"),mGt.forEach(t),YVr=r(GWe," (throws an error)."),GWe.forEach(t),KVr=i(si),Ht=n(si,"DIV",{class:!0});var R7=s(Ht);T(v$.$$.fragment,R7),ZVr=i(R7),l0e=n(R7,"P",{});var gGt=s(l0e);eXr=r(gGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gGt.forEach(t),oXr=i(R7),of=n(R7,"P",{});var oae=s(of);rXr=r(oae,`Note:
Loading a model from its configuration file does `),i0e=n(oae,"STRONG",{});var hGt=s(i0e);tXr=r(hGt,"not"),hGt.forEach(t),aXr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(oae,"A",{href:!0});var pGt=s(Ree);nXr=r(pGt,"from_pretrained()"),pGt.forEach(t),sXr=r(oae," to load the model weights."),oae.forEach(t),lXr=i(R7),T(G0.$$.fragment,R7),R7.forEach(t),iXr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(F$.$$.fragment,li),dXr=i(li),d0e=n(li,"P",{});var _Gt=s(d0e);cXr=r(_Gt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Gt.forEach(t),fXr=i(li),En=n(li,"P",{});var P7=s(En);mXr=r(P7,"The model class to instantiate is selected based on the "),c0e=n(P7,"CODE",{});var uGt=s(c0e);gXr=r(uGt,"model_type"),uGt.forEach(t),hXr=r(P7,` property of the config object (either
passed as an argument or loaded from `),f0e=n(P7,"CODE",{});var bGt=s(f0e);pXr=r(bGt,"pretrained_model_name_or_path"),bGt.forEach(t),_Xr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(P7,"CODE",{});var vGt=s(m0e);uXr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),bXr=r(P7,":"),P7.forEach(t),vXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);O0=n(we,"LI",{});var LOe=s(O0);g0e=n(LOe,"STRONG",{});var FGt=s(g0e);FXr=r(FGt,"albert"),FGt.forEach(t),TXr=r(LOe," \u2014 "),Pee=n(LOe,"A",{href:!0});var TGt=s(Pee);MXr=r(TGt,"FlaxAlbertForPreTraining"),TGt.forEach(t),EXr=r(LOe," (ALBERT model)"),LOe.forEach(t),CXr=i(we),V0=n(we,"LI",{});var yOe=s(V0);h0e=n(yOe,"STRONG",{});var MGt=s(h0e);wXr=r(MGt,"bart"),MGt.forEach(t),AXr=r(yOe," \u2014 "),Bee=n(yOe,"A",{href:!0});var EGt=s(Bee);LXr=r(EGt,"FlaxBartForConditionalGeneration"),EGt.forEach(t),yXr=r(yOe," (BART model)"),yOe.forEach(t),xXr=i(we),X0=n(we,"LI",{});var xOe=s(X0);p0e=n(xOe,"STRONG",{});var CGt=s(p0e);$Xr=r(CGt,"bert"),CGt.forEach(t),kXr=r(xOe," \u2014 "),Nee=n(xOe,"A",{href:!0});var wGt=s(Nee);SXr=r(wGt,"FlaxBertForPreTraining"),wGt.forEach(t),RXr=r(xOe," (BERT model)"),xOe.forEach(t),PXr=i(we),z0=n(we,"LI",{});var $Oe=s(z0);_0e=n($Oe,"STRONG",{});var AGt=s(_0e);BXr=r(AGt,"big_bird"),AGt.forEach(t),NXr=r($Oe," \u2014 "),Iee=n($Oe,"A",{href:!0});var LGt=s(Iee);IXr=r(LGt,"FlaxBigBirdForPreTraining"),LGt.forEach(t),qXr=r($Oe," (BigBird model)"),$Oe.forEach(t),jXr=i(we),Q0=n(we,"LI",{});var kOe=s(Q0);u0e=n(kOe,"STRONG",{});var yGt=s(u0e);DXr=r(yGt,"electra"),yGt.forEach(t),GXr=r(kOe," \u2014 "),qee=n(kOe,"A",{href:!0});var xGt=s(qee);OXr=r(xGt,"FlaxElectraForPreTraining"),xGt.forEach(t),VXr=r(kOe," (ELECTRA model)"),kOe.forEach(t),XXr=i(we),W0=n(we,"LI",{});var SOe=s(W0);b0e=n(SOe,"STRONG",{});var $Gt=s(b0e);zXr=r($Gt,"longt5"),$Gt.forEach(t),QXr=r(SOe," \u2014 "),jee=n(SOe,"A",{href:!0});var kGt=s(jee);WXr=r(kGt,"FlaxLongT5ForConditionalGeneration"),kGt.forEach(t),HXr=r(SOe," (LongT5 model)"),SOe.forEach(t),UXr=i(we),H0=n(we,"LI",{});var ROe=s(H0);v0e=n(ROe,"STRONG",{});var SGt=s(v0e);JXr=r(SGt,"mbart"),SGt.forEach(t),YXr=r(ROe," \u2014 "),Dee=n(ROe,"A",{href:!0});var RGt=s(Dee);KXr=r(RGt,"FlaxMBartForConditionalGeneration"),RGt.forEach(t),ZXr=r(ROe," (mBART model)"),ROe.forEach(t),ezr=i(we),U0=n(we,"LI",{});var POe=s(U0);F0e=n(POe,"STRONG",{});var PGt=s(F0e);ozr=r(PGt,"mt5"),PGt.forEach(t),rzr=r(POe," \u2014 "),Gee=n(POe,"A",{href:!0});var BGt=s(Gee);tzr=r(BGt,"FlaxMT5ForConditionalGeneration"),BGt.forEach(t),azr=r(POe," (MT5 model)"),POe.forEach(t),nzr=i(we),J0=n(we,"LI",{});var BOe=s(J0);T0e=n(BOe,"STRONG",{});var NGt=s(T0e);szr=r(NGt,"roberta"),NGt.forEach(t),lzr=r(BOe," \u2014 "),Oee=n(BOe,"A",{href:!0});var IGt=s(Oee);izr=r(IGt,"FlaxRobertaForMaskedLM"),IGt.forEach(t),dzr=r(BOe," (RoBERTa model)"),BOe.forEach(t),czr=i(we),Y0=n(we,"LI",{});var NOe=s(Y0);M0e=n(NOe,"STRONG",{});var qGt=s(M0e);fzr=r(qGt,"roformer"),qGt.forEach(t),mzr=r(NOe," \u2014 "),Vee=n(NOe,"A",{href:!0});var jGt=s(Vee);gzr=r(jGt,"FlaxRoFormerForMaskedLM"),jGt.forEach(t),hzr=r(NOe," (RoFormer model)"),NOe.forEach(t),pzr=i(we),K0=n(we,"LI",{});var IOe=s(K0);E0e=n(IOe,"STRONG",{});var DGt=s(E0e);_zr=r(DGt,"t5"),DGt.forEach(t),uzr=r(IOe," \u2014 "),Xee=n(IOe,"A",{href:!0});var GGt=s(Xee);bzr=r(GGt,"FlaxT5ForConditionalGeneration"),GGt.forEach(t),vzr=r(IOe," (T5 model)"),IOe.forEach(t),Fzr=i(we),Z0=n(we,"LI",{});var qOe=s(Z0);C0e=n(qOe,"STRONG",{});var OGt=s(C0e);Tzr=r(OGt,"wav2vec2"),OGt.forEach(t),Mzr=r(qOe," \u2014 "),zee=n(qOe,"A",{href:!0});var VGt=s(zee);Ezr=r(VGt,"FlaxWav2Vec2ForPreTraining"),VGt.forEach(t),Czr=r(qOe," (Wav2Vec2 model)"),qOe.forEach(t),wzr=i(we),ew=n(we,"LI",{});var jOe=s(ew);w0e=n(jOe,"STRONG",{});var XGt=s(w0e);Azr=r(XGt,"xlm-roberta"),XGt.forEach(t),Lzr=r(jOe," \u2014 "),Qee=n(jOe,"A",{href:!0});var zGt=s(Qee);yzr=r(zGt,"FlaxXLMRobertaForMaskedLM"),zGt.forEach(t),xzr=r(jOe," (XLM-RoBERTa model)"),jOe.forEach(t),we.forEach(t),$zr=i(li),T(ow.$$.fragment,li),li.forEach(t),si.forEach(t),Rze=i(f),rf=n(f,"H2",{class:!0});var OWe=s(rf);rw=n(OWe,"A",{id:!0,class:!0,href:!0});var QGt=s(rw);A0e=n(QGt,"SPAN",{});var WGt=s(A0e);T(T$.$$.fragment,WGt),WGt.forEach(t),QGt.forEach(t),kzr=i(OWe),L0e=n(OWe,"SPAN",{});var HGt=s(L0e);Szr=r(HGt,"FlaxAutoModelForMaskedLM"),HGt.forEach(t),OWe.forEach(t),Pze=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(M$.$$.fragment,ii),Rzr=i(ii),tf=n(ii,"P",{});var rae=s(tf);Pzr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Wee=n(rae,"A",{href:!0});var UGt=s(Wee);Bzr=r(UGt,"from_pretrained()"),UGt.forEach(t),Nzr=r(rae," class method or the "),Hee=n(rae,"A",{href:!0});var JGt=s(Hee);Izr=r(JGt,"from_config()"),JGt.forEach(t),qzr=r(rae,` class
method.`),rae.forEach(t),jzr=i(ii),E$=n(ii,"P",{});var VWe=s(E$);Dzr=r(VWe,"This class cannot be instantiated directly using "),y0e=n(VWe,"CODE",{});var YGt=s(y0e);Gzr=r(YGt,"__init__()"),YGt.forEach(t),Ozr=r(VWe," (throws an error)."),VWe.forEach(t),Vzr=i(ii),Ut=n(ii,"DIV",{class:!0});var B7=s(Ut);T(C$.$$.fragment,B7),Xzr=i(B7),x0e=n(B7,"P",{});var KGt=s(x0e);zzr=r(KGt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KGt.forEach(t),Qzr=i(B7),af=n(B7,"P",{});var tae=s(af);Wzr=r(tae,`Note:
Loading a model from its configuration file does `),$0e=n(tae,"STRONG",{});var ZGt=s($0e);Hzr=r(ZGt,"not"),ZGt.forEach(t),Uzr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(tae,"A",{href:!0});var eOt=s(Uee);Jzr=r(eOt,"from_pretrained()"),eOt.forEach(t),Yzr=r(tae," to load the model weights."),tae.forEach(t),Kzr=i(B7),T(tw.$$.fragment,B7),B7.forEach(t),Zzr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(w$.$$.fragment,di),eQr=i(di),k0e=n(di,"P",{});var oOt=s(k0e);oQr=r(oOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oOt.forEach(t),rQr=i(di),Cn=n(di,"P",{});var N7=s(Cn);tQr=r(N7,"The model class to instantiate is selected based on the "),S0e=n(N7,"CODE",{});var rOt=s(S0e);aQr=r(rOt,"model_type"),rOt.forEach(t),nQr=r(N7,` property of the config object (either
passed as an argument or loaded from `),R0e=n(N7,"CODE",{});var tOt=s(R0e);sQr=r(tOt,"pretrained_model_name_or_path"),tOt.forEach(t),lQr=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(N7,"CODE",{});var aOt=s(P0e);iQr=r(aOt,"pretrained_model_name_or_path"),aOt.forEach(t),dQr=r(N7,":"),N7.forEach(t),cQr=i(di),$e=n(di,"UL",{});var qe=s($e);aw=n(qe,"LI",{});var DOe=s(aw);B0e=n(DOe,"STRONG",{});var nOt=s(B0e);fQr=r(nOt,"albert"),nOt.forEach(t),mQr=r(DOe," \u2014 "),Jee=n(DOe,"A",{href:!0});var sOt=s(Jee);gQr=r(sOt,"FlaxAlbertForMaskedLM"),sOt.forEach(t),hQr=r(DOe," (ALBERT model)"),DOe.forEach(t),pQr=i(qe),nw=n(qe,"LI",{});var GOe=s(nw);N0e=n(GOe,"STRONG",{});var lOt=s(N0e);_Qr=r(lOt,"bart"),lOt.forEach(t),uQr=r(GOe," \u2014 "),Yee=n(GOe,"A",{href:!0});var iOt=s(Yee);bQr=r(iOt,"FlaxBartForConditionalGeneration"),iOt.forEach(t),vQr=r(GOe," (BART model)"),GOe.forEach(t),FQr=i(qe),sw=n(qe,"LI",{});var OOe=s(sw);I0e=n(OOe,"STRONG",{});var dOt=s(I0e);TQr=r(dOt,"bert"),dOt.forEach(t),MQr=r(OOe," \u2014 "),Kee=n(OOe,"A",{href:!0});var cOt=s(Kee);EQr=r(cOt,"FlaxBertForMaskedLM"),cOt.forEach(t),CQr=r(OOe," (BERT model)"),OOe.forEach(t),wQr=i(qe),lw=n(qe,"LI",{});var VOe=s(lw);q0e=n(VOe,"STRONG",{});var fOt=s(q0e);AQr=r(fOt,"big_bird"),fOt.forEach(t),LQr=r(VOe," \u2014 "),Zee=n(VOe,"A",{href:!0});var mOt=s(Zee);yQr=r(mOt,"FlaxBigBirdForMaskedLM"),mOt.forEach(t),xQr=r(VOe," (BigBird model)"),VOe.forEach(t),$Qr=i(qe),iw=n(qe,"LI",{});var XOe=s(iw);j0e=n(XOe,"STRONG",{});var gOt=s(j0e);kQr=r(gOt,"distilbert"),gOt.forEach(t),SQr=r(XOe," \u2014 "),eoe=n(XOe,"A",{href:!0});var hOt=s(eoe);RQr=r(hOt,"FlaxDistilBertForMaskedLM"),hOt.forEach(t),PQr=r(XOe," (DistilBERT model)"),XOe.forEach(t),BQr=i(qe),dw=n(qe,"LI",{});var zOe=s(dw);D0e=n(zOe,"STRONG",{});var pOt=s(D0e);NQr=r(pOt,"electra"),pOt.forEach(t),IQr=r(zOe," \u2014 "),ooe=n(zOe,"A",{href:!0});var _Ot=s(ooe);qQr=r(_Ot,"FlaxElectraForMaskedLM"),_Ot.forEach(t),jQr=r(zOe," (ELECTRA model)"),zOe.forEach(t),DQr=i(qe),cw=n(qe,"LI",{});var QOe=s(cw);G0e=n(QOe,"STRONG",{});var uOt=s(G0e);GQr=r(uOt,"mbart"),uOt.forEach(t),OQr=r(QOe," \u2014 "),roe=n(QOe,"A",{href:!0});var bOt=s(roe);VQr=r(bOt,"FlaxMBartForConditionalGeneration"),bOt.forEach(t),XQr=r(QOe," (mBART model)"),QOe.forEach(t),zQr=i(qe),fw=n(qe,"LI",{});var WOe=s(fw);O0e=n(WOe,"STRONG",{});var vOt=s(O0e);QQr=r(vOt,"roberta"),vOt.forEach(t),WQr=r(WOe," \u2014 "),toe=n(WOe,"A",{href:!0});var FOt=s(toe);HQr=r(FOt,"FlaxRobertaForMaskedLM"),FOt.forEach(t),UQr=r(WOe," (RoBERTa model)"),WOe.forEach(t),JQr=i(qe),mw=n(qe,"LI",{});var HOe=s(mw);V0e=n(HOe,"STRONG",{});var TOt=s(V0e);YQr=r(TOt,"roformer"),TOt.forEach(t),KQr=r(HOe," \u2014 "),aoe=n(HOe,"A",{href:!0});var MOt=s(aoe);ZQr=r(MOt,"FlaxRoFormerForMaskedLM"),MOt.forEach(t),eWr=r(HOe," (RoFormer model)"),HOe.forEach(t),oWr=i(qe),gw=n(qe,"LI",{});var UOe=s(gw);X0e=n(UOe,"STRONG",{});var EOt=s(X0e);rWr=r(EOt,"xlm-roberta"),EOt.forEach(t),tWr=r(UOe," \u2014 "),noe=n(UOe,"A",{href:!0});var COt=s(noe);aWr=r(COt,"FlaxXLMRobertaForMaskedLM"),COt.forEach(t),nWr=r(UOe," (XLM-RoBERTa model)"),UOe.forEach(t),qe.forEach(t),sWr=i(di),T(hw.$$.fragment,di),di.forEach(t),ii.forEach(t),Bze=i(f),nf=n(f,"H2",{class:!0});var XWe=s(nf);pw=n(XWe,"A",{id:!0,class:!0,href:!0});var wOt=s(pw);z0e=n(wOt,"SPAN",{});var AOt=s(z0e);T(A$.$$.fragment,AOt),AOt.forEach(t),wOt.forEach(t),lWr=i(XWe),Q0e=n(XWe,"SPAN",{});var LOt=s(Q0e);iWr=r(LOt,"FlaxAutoModelForSeq2SeqLM"),LOt.forEach(t),XWe.forEach(t),Nze=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(L$.$$.fragment,ci),dWr=i(ci),sf=n(ci,"P",{});var aae=s(sf);cWr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),soe=n(aae,"A",{href:!0});var yOt=s(soe);fWr=r(yOt,"from_pretrained()"),yOt.forEach(t),mWr=r(aae," class method or the "),loe=n(aae,"A",{href:!0});var xOt=s(loe);gWr=r(xOt,"from_config()"),xOt.forEach(t),hWr=r(aae,` class
method.`),aae.forEach(t),pWr=i(ci),y$=n(ci,"P",{});var zWe=s(y$);_Wr=r(zWe,"This class cannot be instantiated directly using "),W0e=n(zWe,"CODE",{});var $Ot=s(W0e);uWr=r($Ot,"__init__()"),$Ot.forEach(t),bWr=r(zWe," (throws an error)."),zWe.forEach(t),vWr=i(ci),Jt=n(ci,"DIV",{class:!0});var I7=s(Jt);T(x$.$$.fragment,I7),FWr=i(I7),H0e=n(I7,"P",{});var kOt=s(H0e);TWr=r(kOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kOt.forEach(t),MWr=i(I7),lf=n(I7,"P",{});var nae=s(lf);EWr=r(nae,`Note:
Loading a model from its configuration file does `),U0e=n(nae,"STRONG",{});var SOt=s(U0e);CWr=r(SOt,"not"),SOt.forEach(t),wWr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(nae,"A",{href:!0});var ROt=s(ioe);AWr=r(ROt,"from_pretrained()"),ROt.forEach(t),LWr=r(nae," to load the model weights."),nae.forEach(t),yWr=i(I7),T(_w.$$.fragment,I7),I7.forEach(t),xWr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T($$.$$.fragment,fi),$Wr=i(fi),J0e=n(fi,"P",{});var POt=s(J0e);kWr=r(POt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),POt.forEach(t),SWr=i(fi),wn=n(fi,"P",{});var q7=s(wn);RWr=r(q7,"The model class to instantiate is selected based on the "),Y0e=n(q7,"CODE",{});var BOt=s(Y0e);PWr=r(BOt,"model_type"),BOt.forEach(t),BWr=r(q7,` property of the config object (either
passed as an argument or loaded from `),K0e=n(q7,"CODE",{});var NOt=s(K0e);NWr=r(NOt,"pretrained_model_name_or_path"),NOt.forEach(t),IWr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(q7,"CODE",{});var IOt=s(Z0e);qWr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),jWr=r(q7,":"),q7.forEach(t),DWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);uw=n(je,"LI",{});var JOe=s(uw);ewe=n(JOe,"STRONG",{});var qOt=s(ewe);GWr=r(qOt,"bart"),qOt.forEach(t),OWr=r(JOe," \u2014 "),doe=n(JOe,"A",{href:!0});var jOt=s(doe);VWr=r(jOt,"FlaxBartForConditionalGeneration"),jOt.forEach(t),XWr=r(JOe," (BART model)"),JOe.forEach(t),zWr=i(je),bw=n(je,"LI",{});var YOe=s(bw);owe=n(YOe,"STRONG",{});var DOt=s(owe);QWr=r(DOt,"blenderbot"),DOt.forEach(t),WWr=r(YOe," \u2014 "),coe=n(YOe,"A",{href:!0});var GOt=s(coe);HWr=r(GOt,"FlaxBlenderbotForConditionalGeneration"),GOt.forEach(t),UWr=r(YOe," (Blenderbot model)"),YOe.forEach(t),JWr=i(je),vw=n(je,"LI",{});var KOe=s(vw);rwe=n(KOe,"STRONG",{});var OOt=s(rwe);YWr=r(OOt,"blenderbot-small"),OOt.forEach(t),KWr=r(KOe," \u2014 "),foe=n(KOe,"A",{href:!0});var VOt=s(foe);ZWr=r(VOt,"FlaxBlenderbotSmallForConditionalGeneration"),VOt.forEach(t),eHr=r(KOe," (BlenderbotSmall model)"),KOe.forEach(t),oHr=i(je),Fw=n(je,"LI",{});var ZOe=s(Fw);twe=n(ZOe,"STRONG",{});var XOt=s(twe);rHr=r(XOt,"encoder-decoder"),XOt.forEach(t),tHr=r(ZOe," \u2014 "),moe=n(ZOe,"A",{href:!0});var zOt=s(moe);aHr=r(zOt,"FlaxEncoderDecoderModel"),zOt.forEach(t),nHr=r(ZOe," (Encoder decoder model)"),ZOe.forEach(t),sHr=i(je),Tw=n(je,"LI",{});var eVe=s(Tw);awe=n(eVe,"STRONG",{});var QOt=s(awe);lHr=r(QOt,"longt5"),QOt.forEach(t),iHr=r(eVe," \u2014 "),goe=n(eVe,"A",{href:!0});var WOt=s(goe);dHr=r(WOt,"FlaxLongT5ForConditionalGeneration"),WOt.forEach(t),cHr=r(eVe," (LongT5 model)"),eVe.forEach(t),fHr=i(je),Mw=n(je,"LI",{});var oVe=s(Mw);nwe=n(oVe,"STRONG",{});var HOt=s(nwe);mHr=r(HOt,"marian"),HOt.forEach(t),gHr=r(oVe," \u2014 "),hoe=n(oVe,"A",{href:!0});var UOt=s(hoe);hHr=r(UOt,"FlaxMarianMTModel"),UOt.forEach(t),pHr=r(oVe," (Marian model)"),oVe.forEach(t),_Hr=i(je),Ew=n(je,"LI",{});var rVe=s(Ew);swe=n(rVe,"STRONG",{});var JOt=s(swe);uHr=r(JOt,"mbart"),JOt.forEach(t),bHr=r(rVe," \u2014 "),poe=n(rVe,"A",{href:!0});var YOt=s(poe);vHr=r(YOt,"FlaxMBartForConditionalGeneration"),YOt.forEach(t),FHr=r(rVe," (mBART model)"),rVe.forEach(t),THr=i(je),Cw=n(je,"LI",{});var tVe=s(Cw);lwe=n(tVe,"STRONG",{});var KOt=s(lwe);MHr=r(KOt,"mt5"),KOt.forEach(t),EHr=r(tVe," \u2014 "),_oe=n(tVe,"A",{href:!0});var ZOt=s(_oe);CHr=r(ZOt,"FlaxMT5ForConditionalGeneration"),ZOt.forEach(t),wHr=r(tVe," (MT5 model)"),tVe.forEach(t),AHr=i(je),ww=n(je,"LI",{});var aVe=s(ww);iwe=n(aVe,"STRONG",{});var eVt=s(iwe);LHr=r(eVt,"pegasus"),eVt.forEach(t),yHr=r(aVe," \u2014 "),uoe=n(aVe,"A",{href:!0});var oVt=s(uoe);xHr=r(oVt,"FlaxPegasusForConditionalGeneration"),oVt.forEach(t),$Hr=r(aVe," (Pegasus model)"),aVe.forEach(t),kHr=i(je),Aw=n(je,"LI",{});var nVe=s(Aw);dwe=n(nVe,"STRONG",{});var rVt=s(dwe);SHr=r(rVt,"t5"),rVt.forEach(t),RHr=r(nVe," \u2014 "),boe=n(nVe,"A",{href:!0});var tVt=s(boe);PHr=r(tVt,"FlaxT5ForConditionalGeneration"),tVt.forEach(t),BHr=r(nVe," (T5 model)"),nVe.forEach(t),je.forEach(t),NHr=i(fi),T(Lw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Ize=i(f),df=n(f,"H2",{class:!0});var QWe=s(df);yw=n(QWe,"A",{id:!0,class:!0,href:!0});var aVt=s(yw);cwe=n(aVt,"SPAN",{});var nVt=s(cwe);T(k$.$$.fragment,nVt),nVt.forEach(t),aVt.forEach(t),IHr=i(QWe),fwe=n(QWe,"SPAN",{});var sVt=s(fwe);qHr=r(sVt,"FlaxAutoModelForSequenceClassification"),sVt.forEach(t),QWe.forEach(t),qze=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(S$.$$.fragment,mi),jHr=i(mi),cf=n(mi,"P",{});var sae=s(cf);DHr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),voe=n(sae,"A",{href:!0});var lVt=s(voe);GHr=r(lVt,"from_pretrained()"),lVt.forEach(t),OHr=r(sae," class method or the "),Foe=n(sae,"A",{href:!0});var iVt=s(Foe);VHr=r(iVt,"from_config()"),iVt.forEach(t),XHr=r(sae,` class
method.`),sae.forEach(t),zHr=i(mi),R$=n(mi,"P",{});var WWe=s(R$);QHr=r(WWe,"This class cannot be instantiated directly using "),mwe=n(WWe,"CODE",{});var dVt=s(mwe);WHr=r(dVt,"__init__()"),dVt.forEach(t),HHr=r(WWe," (throws an error)."),WWe.forEach(t),UHr=i(mi),Yt=n(mi,"DIV",{class:!0});var j7=s(Yt);T(P$.$$.fragment,j7),JHr=i(j7),gwe=n(j7,"P",{});var cVt=s(gwe);YHr=r(cVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cVt.forEach(t),KHr=i(j7),ff=n(j7,"P",{});var lae=s(ff);ZHr=r(lae,`Note:
Loading a model from its configuration file does `),hwe=n(lae,"STRONG",{});var fVt=s(hwe);eUr=r(fVt,"not"),fVt.forEach(t),oUr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(lae,"A",{href:!0});var mVt=s(Toe);rUr=r(mVt,"from_pretrained()"),mVt.forEach(t),tUr=r(lae," to load the model weights."),lae.forEach(t),aUr=i(j7),T(xw.$$.fragment,j7),j7.forEach(t),nUr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(B$.$$.fragment,gi),sUr=i(gi),pwe=n(gi,"P",{});var gVt=s(pwe);lUr=r(gVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gVt.forEach(t),iUr=i(gi),An=n(gi,"P",{});var D7=s(An);dUr=r(D7,"The model class to instantiate is selected based on the "),_we=n(D7,"CODE",{});var hVt=s(_we);cUr=r(hVt,"model_type"),hVt.forEach(t),fUr=r(D7,` property of the config object (either
passed as an argument or loaded from `),uwe=n(D7,"CODE",{});var pVt=s(uwe);mUr=r(pVt,"pretrained_model_name_or_path"),pVt.forEach(t),gUr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(D7,"CODE",{});var _Vt=s(bwe);hUr=r(_Vt,"pretrained_model_name_or_path"),_Vt.forEach(t),pUr=r(D7,":"),D7.forEach(t),_Ur=i(gi),Se=n(gi,"UL",{});var De=s(Se);$w=n(De,"LI",{});var sVe=s($w);vwe=n(sVe,"STRONG",{});var uVt=s(vwe);uUr=r(uVt,"albert"),uVt.forEach(t),bUr=r(sVe," \u2014 "),Moe=n(sVe,"A",{href:!0});var bVt=s(Moe);vUr=r(bVt,"FlaxAlbertForSequenceClassification"),bVt.forEach(t),FUr=r(sVe," (ALBERT model)"),sVe.forEach(t),TUr=i(De),kw=n(De,"LI",{});var lVe=s(kw);Fwe=n(lVe,"STRONG",{});var vVt=s(Fwe);MUr=r(vVt,"bart"),vVt.forEach(t),EUr=r(lVe," \u2014 "),Eoe=n(lVe,"A",{href:!0});var FVt=s(Eoe);CUr=r(FVt,"FlaxBartForSequenceClassification"),FVt.forEach(t),wUr=r(lVe," (BART model)"),lVe.forEach(t),AUr=i(De),Sw=n(De,"LI",{});var iVe=s(Sw);Twe=n(iVe,"STRONG",{});var TVt=s(Twe);LUr=r(TVt,"bert"),TVt.forEach(t),yUr=r(iVe," \u2014 "),Coe=n(iVe,"A",{href:!0});var MVt=s(Coe);xUr=r(MVt,"FlaxBertForSequenceClassification"),MVt.forEach(t),$Ur=r(iVe," (BERT model)"),iVe.forEach(t),kUr=i(De),Rw=n(De,"LI",{});var dVe=s(Rw);Mwe=n(dVe,"STRONG",{});var EVt=s(Mwe);SUr=r(EVt,"big_bird"),EVt.forEach(t),RUr=r(dVe," \u2014 "),woe=n(dVe,"A",{href:!0});var CVt=s(woe);PUr=r(CVt,"FlaxBigBirdForSequenceClassification"),CVt.forEach(t),BUr=r(dVe," (BigBird model)"),dVe.forEach(t),NUr=i(De),Pw=n(De,"LI",{});var cVe=s(Pw);Ewe=n(cVe,"STRONG",{});var wVt=s(Ewe);IUr=r(wVt,"distilbert"),wVt.forEach(t),qUr=r(cVe," \u2014 "),Aoe=n(cVe,"A",{href:!0});var AVt=s(Aoe);jUr=r(AVt,"FlaxDistilBertForSequenceClassification"),AVt.forEach(t),DUr=r(cVe," (DistilBERT model)"),cVe.forEach(t),GUr=i(De),Bw=n(De,"LI",{});var fVe=s(Bw);Cwe=n(fVe,"STRONG",{});var LVt=s(Cwe);OUr=r(LVt,"electra"),LVt.forEach(t),VUr=r(fVe," \u2014 "),Loe=n(fVe,"A",{href:!0});var yVt=s(Loe);XUr=r(yVt,"FlaxElectraForSequenceClassification"),yVt.forEach(t),zUr=r(fVe," (ELECTRA model)"),fVe.forEach(t),QUr=i(De),Nw=n(De,"LI",{});var mVe=s(Nw);wwe=n(mVe,"STRONG",{});var xVt=s(wwe);WUr=r(xVt,"mbart"),xVt.forEach(t),HUr=r(mVe," \u2014 "),yoe=n(mVe,"A",{href:!0});var $Vt=s(yoe);UUr=r($Vt,"FlaxMBartForSequenceClassification"),$Vt.forEach(t),JUr=r(mVe," (mBART model)"),mVe.forEach(t),YUr=i(De),Iw=n(De,"LI",{});var gVe=s(Iw);Awe=n(gVe,"STRONG",{});var kVt=s(Awe);KUr=r(kVt,"roberta"),kVt.forEach(t),ZUr=r(gVe," \u2014 "),xoe=n(gVe,"A",{href:!0});var SVt=s(xoe);eJr=r(SVt,"FlaxRobertaForSequenceClassification"),SVt.forEach(t),oJr=r(gVe," (RoBERTa model)"),gVe.forEach(t),rJr=i(De),qw=n(De,"LI",{});var hVe=s(qw);Lwe=n(hVe,"STRONG",{});var RVt=s(Lwe);tJr=r(RVt,"roformer"),RVt.forEach(t),aJr=r(hVe," \u2014 "),$oe=n(hVe,"A",{href:!0});var PVt=s($oe);nJr=r(PVt,"FlaxRoFormerForSequenceClassification"),PVt.forEach(t),sJr=r(hVe," (RoFormer model)"),hVe.forEach(t),lJr=i(De),jw=n(De,"LI",{});var pVe=s(jw);ywe=n(pVe,"STRONG",{});var BVt=s(ywe);iJr=r(BVt,"xlm-roberta"),BVt.forEach(t),dJr=r(pVe," \u2014 "),koe=n(pVe,"A",{href:!0});var NVt=s(koe);cJr=r(NVt,"FlaxXLMRobertaForSequenceClassification"),NVt.forEach(t),fJr=r(pVe," (XLM-RoBERTa model)"),pVe.forEach(t),De.forEach(t),mJr=i(gi),T(Dw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),jze=i(f),mf=n(f,"H2",{class:!0});var HWe=s(mf);Gw=n(HWe,"A",{id:!0,class:!0,href:!0});var IVt=s(Gw);xwe=n(IVt,"SPAN",{});var qVt=s(xwe);T(N$.$$.fragment,qVt),qVt.forEach(t),IVt.forEach(t),gJr=i(HWe),$we=n(HWe,"SPAN",{});var jVt=s($we);hJr=r(jVt,"FlaxAutoModelForQuestionAnswering"),jVt.forEach(t),HWe.forEach(t),Dze=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(I$.$$.fragment,hi),pJr=i(hi),gf=n(hi,"P",{});var iae=s(gf);_Jr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Soe=n(iae,"A",{href:!0});var DVt=s(Soe);uJr=r(DVt,"from_pretrained()"),DVt.forEach(t),bJr=r(iae," class method or the "),Roe=n(iae,"A",{href:!0});var GVt=s(Roe);vJr=r(GVt,"from_config()"),GVt.forEach(t),FJr=r(iae,` class
method.`),iae.forEach(t),TJr=i(hi),q$=n(hi,"P",{});var UWe=s(q$);MJr=r(UWe,"This class cannot be instantiated directly using "),kwe=n(UWe,"CODE",{});var OVt=s(kwe);EJr=r(OVt,"__init__()"),OVt.forEach(t),CJr=r(UWe," (throws an error)."),UWe.forEach(t),wJr=i(hi),Kt=n(hi,"DIV",{class:!0});var G7=s(Kt);T(j$.$$.fragment,G7),AJr=i(G7),Swe=n(G7,"P",{});var VVt=s(Swe);LJr=r(VVt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VVt.forEach(t),yJr=i(G7),hf=n(G7,"P",{});var dae=s(hf);xJr=r(dae,`Note:
Loading a model from its configuration file does `),Rwe=n(dae,"STRONG",{});var XVt=s(Rwe);$Jr=r(XVt,"not"),XVt.forEach(t),kJr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=n(dae,"A",{href:!0});var zVt=s(Poe);SJr=r(zVt,"from_pretrained()"),zVt.forEach(t),RJr=r(dae," to load the model weights."),dae.forEach(t),PJr=i(G7),T(Ow.$$.fragment,G7),G7.forEach(t),BJr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(D$.$$.fragment,pi),NJr=i(pi),Pwe=n(pi,"P",{});var QVt=s(Pwe);IJr=r(QVt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QVt.forEach(t),qJr=i(pi),Ln=n(pi,"P",{});var O7=s(Ln);jJr=r(O7,"The model class to instantiate is selected based on the "),Bwe=n(O7,"CODE",{});var WVt=s(Bwe);DJr=r(WVt,"model_type"),WVt.forEach(t),GJr=r(O7,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(O7,"CODE",{});var HVt=s(Nwe);OJr=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),VJr=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=n(O7,"CODE",{});var UVt=s(Iwe);XJr=r(UVt,"pretrained_model_name_or_path"),UVt.forEach(t),zJr=r(O7,":"),O7.forEach(t),QJr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);Vw=n(Ge,"LI",{});var _Ve=s(Vw);qwe=n(_Ve,"STRONG",{});var JVt=s(qwe);WJr=r(JVt,"albert"),JVt.forEach(t),HJr=r(_Ve," \u2014 "),Boe=n(_Ve,"A",{href:!0});var YVt=s(Boe);UJr=r(YVt,"FlaxAlbertForQuestionAnswering"),YVt.forEach(t),JJr=r(_Ve," (ALBERT model)"),_Ve.forEach(t),YJr=i(Ge),Xw=n(Ge,"LI",{});var uVe=s(Xw);jwe=n(uVe,"STRONG",{});var KVt=s(jwe);KJr=r(KVt,"bart"),KVt.forEach(t),ZJr=r(uVe," \u2014 "),Noe=n(uVe,"A",{href:!0});var ZVt=s(Noe);eYr=r(ZVt,"FlaxBartForQuestionAnswering"),ZVt.forEach(t),oYr=r(uVe," (BART model)"),uVe.forEach(t),rYr=i(Ge),zw=n(Ge,"LI",{});var bVe=s(zw);Dwe=n(bVe,"STRONG",{});var eXt=s(Dwe);tYr=r(eXt,"bert"),eXt.forEach(t),aYr=r(bVe," \u2014 "),Ioe=n(bVe,"A",{href:!0});var oXt=s(Ioe);nYr=r(oXt,"FlaxBertForQuestionAnswering"),oXt.forEach(t),sYr=r(bVe," (BERT model)"),bVe.forEach(t),lYr=i(Ge),Qw=n(Ge,"LI",{});var vVe=s(Qw);Gwe=n(vVe,"STRONG",{});var rXt=s(Gwe);iYr=r(rXt,"big_bird"),rXt.forEach(t),dYr=r(vVe," \u2014 "),qoe=n(vVe,"A",{href:!0});var tXt=s(qoe);cYr=r(tXt,"FlaxBigBirdForQuestionAnswering"),tXt.forEach(t),fYr=r(vVe," (BigBird model)"),vVe.forEach(t),mYr=i(Ge),Ww=n(Ge,"LI",{});var FVe=s(Ww);Owe=n(FVe,"STRONG",{});var aXt=s(Owe);gYr=r(aXt,"distilbert"),aXt.forEach(t),hYr=r(FVe," \u2014 "),joe=n(FVe,"A",{href:!0});var nXt=s(joe);pYr=r(nXt,"FlaxDistilBertForQuestionAnswering"),nXt.forEach(t),_Yr=r(FVe," (DistilBERT model)"),FVe.forEach(t),uYr=i(Ge),Hw=n(Ge,"LI",{});var TVe=s(Hw);Vwe=n(TVe,"STRONG",{});var sXt=s(Vwe);bYr=r(sXt,"electra"),sXt.forEach(t),vYr=r(TVe," \u2014 "),Doe=n(TVe,"A",{href:!0});var lXt=s(Doe);FYr=r(lXt,"FlaxElectraForQuestionAnswering"),lXt.forEach(t),TYr=r(TVe," (ELECTRA model)"),TVe.forEach(t),MYr=i(Ge),Uw=n(Ge,"LI",{});var MVe=s(Uw);Xwe=n(MVe,"STRONG",{});var iXt=s(Xwe);EYr=r(iXt,"mbart"),iXt.forEach(t),CYr=r(MVe," \u2014 "),Goe=n(MVe,"A",{href:!0});var dXt=s(Goe);wYr=r(dXt,"FlaxMBartForQuestionAnswering"),dXt.forEach(t),AYr=r(MVe," (mBART model)"),MVe.forEach(t),LYr=i(Ge),Jw=n(Ge,"LI",{});var EVe=s(Jw);zwe=n(EVe,"STRONG",{});var cXt=s(zwe);yYr=r(cXt,"roberta"),cXt.forEach(t),xYr=r(EVe," \u2014 "),Ooe=n(EVe,"A",{href:!0});var fXt=s(Ooe);$Yr=r(fXt,"FlaxRobertaForQuestionAnswering"),fXt.forEach(t),kYr=r(EVe," (RoBERTa model)"),EVe.forEach(t),SYr=i(Ge),Yw=n(Ge,"LI",{});var CVe=s(Yw);Qwe=n(CVe,"STRONG",{});var mXt=s(Qwe);RYr=r(mXt,"roformer"),mXt.forEach(t),PYr=r(CVe," \u2014 "),Voe=n(CVe,"A",{href:!0});var gXt=s(Voe);BYr=r(gXt,"FlaxRoFormerForQuestionAnswering"),gXt.forEach(t),NYr=r(CVe," (RoFormer model)"),CVe.forEach(t),IYr=i(Ge),Kw=n(Ge,"LI",{});var wVe=s(Kw);Wwe=n(wVe,"STRONG",{});var hXt=s(Wwe);qYr=r(hXt,"xlm-roberta"),hXt.forEach(t),jYr=r(wVe," \u2014 "),Xoe=n(wVe,"A",{href:!0});var pXt=s(Xoe);DYr=r(pXt,"FlaxXLMRobertaForQuestionAnswering"),pXt.forEach(t),GYr=r(wVe," (XLM-RoBERTa model)"),wVe.forEach(t),Ge.forEach(t),OYr=i(pi),T(Zw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Gze=i(f),pf=n(f,"H2",{class:!0});var JWe=s(pf);eA=n(JWe,"A",{id:!0,class:!0,href:!0});var _Xt=s(eA);Hwe=n(_Xt,"SPAN",{});var uXt=s(Hwe);T(G$.$$.fragment,uXt),uXt.forEach(t),_Xt.forEach(t),VYr=i(JWe),Uwe=n(JWe,"SPAN",{});var bXt=s(Uwe);XYr=r(bXt,"FlaxAutoModelForTokenClassification"),bXt.forEach(t),JWe.forEach(t),Oze=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(O$.$$.fragment,_i),zYr=i(_i),_f=n(_i,"P",{});var cae=s(_f);QYr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zoe=n(cae,"A",{href:!0});var vXt=s(zoe);WYr=r(vXt,"from_pretrained()"),vXt.forEach(t),HYr=r(cae," class method or the "),Qoe=n(cae,"A",{href:!0});var FXt=s(Qoe);UYr=r(FXt,"from_config()"),FXt.forEach(t),JYr=r(cae,` class
method.`),cae.forEach(t),YYr=i(_i),V$=n(_i,"P",{});var YWe=s(V$);KYr=r(YWe,"This class cannot be instantiated directly using "),Jwe=n(YWe,"CODE",{});var TXt=s(Jwe);ZYr=r(TXt,"__init__()"),TXt.forEach(t),eKr=r(YWe," (throws an error)."),YWe.forEach(t),oKr=i(_i),Zt=n(_i,"DIV",{class:!0});var V7=s(Zt);T(X$.$$.fragment,V7),rKr=i(V7),Ywe=n(V7,"P",{});var MXt=s(Ywe);tKr=r(MXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MXt.forEach(t),aKr=i(V7),uf=n(V7,"P",{});var fae=s(uf);nKr=r(fae,`Note:
Loading a model from its configuration file does `),Kwe=n(fae,"STRONG",{});var EXt=s(Kwe);sKr=r(EXt,"not"),EXt.forEach(t),lKr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=n(fae,"A",{href:!0});var CXt=s(Woe);iKr=r(CXt,"from_pretrained()"),CXt.forEach(t),dKr=r(fae," to load the model weights."),fae.forEach(t),cKr=i(V7),T(oA.$$.fragment,V7),V7.forEach(t),fKr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(z$.$$.fragment,ui),mKr=i(ui),Zwe=n(ui,"P",{});var wXt=s(Zwe);gKr=r(wXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wXt.forEach(t),hKr=i(ui),yn=n(ui,"P",{});var X7=s(yn);pKr=r(X7,"The model class to instantiate is selected based on the "),eAe=n(X7,"CODE",{});var AXt=s(eAe);_Kr=r(AXt,"model_type"),AXt.forEach(t),uKr=r(X7,` property of the config object (either
passed as an argument or loaded from `),oAe=n(X7,"CODE",{});var LXt=s(oAe);bKr=r(LXt,"pretrained_model_name_or_path"),LXt.forEach(t),vKr=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rAe=n(X7,"CODE",{});var yXt=s(rAe);FKr=r(yXt,"pretrained_model_name_or_path"),yXt.forEach(t),TKr=r(X7,":"),X7.forEach(t),MKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);rA=n(To,"LI",{});var AVe=s(rA);tAe=n(AVe,"STRONG",{});var xXt=s(tAe);EKr=r(xXt,"albert"),xXt.forEach(t),CKr=r(AVe," \u2014 "),Hoe=n(AVe,"A",{href:!0});var $Xt=s(Hoe);wKr=r($Xt,"FlaxAlbertForTokenClassification"),$Xt.forEach(t),AKr=r(AVe," (ALBERT model)"),AVe.forEach(t),LKr=i(To),tA=n(To,"LI",{});var LVe=s(tA);aAe=n(LVe,"STRONG",{});var kXt=s(aAe);yKr=r(kXt,"bert"),kXt.forEach(t),xKr=r(LVe," \u2014 "),Uoe=n(LVe,"A",{href:!0});var SXt=s(Uoe);$Kr=r(SXt,"FlaxBertForTokenClassification"),SXt.forEach(t),kKr=r(LVe," (BERT model)"),LVe.forEach(t),SKr=i(To),aA=n(To,"LI",{});var yVe=s(aA);nAe=n(yVe,"STRONG",{});var RXt=s(nAe);RKr=r(RXt,"big_bird"),RXt.forEach(t),PKr=r(yVe," \u2014 "),Joe=n(yVe,"A",{href:!0});var PXt=s(Joe);BKr=r(PXt,"FlaxBigBirdForTokenClassification"),PXt.forEach(t),NKr=r(yVe," (BigBird model)"),yVe.forEach(t),IKr=i(To),nA=n(To,"LI",{});var xVe=s(nA);sAe=n(xVe,"STRONG",{});var BXt=s(sAe);qKr=r(BXt,"distilbert"),BXt.forEach(t),jKr=r(xVe," \u2014 "),Yoe=n(xVe,"A",{href:!0});var NXt=s(Yoe);DKr=r(NXt,"FlaxDistilBertForTokenClassification"),NXt.forEach(t),GKr=r(xVe," (DistilBERT model)"),xVe.forEach(t),OKr=i(To),sA=n(To,"LI",{});var $Ve=s(sA);lAe=n($Ve,"STRONG",{});var IXt=s(lAe);VKr=r(IXt,"electra"),IXt.forEach(t),XKr=r($Ve," \u2014 "),Koe=n($Ve,"A",{href:!0});var qXt=s(Koe);zKr=r(qXt,"FlaxElectraForTokenClassification"),qXt.forEach(t),QKr=r($Ve," (ELECTRA model)"),$Ve.forEach(t),WKr=i(To),lA=n(To,"LI",{});var kVe=s(lA);iAe=n(kVe,"STRONG",{});var jXt=s(iAe);HKr=r(jXt,"roberta"),jXt.forEach(t),UKr=r(kVe," \u2014 "),Zoe=n(kVe,"A",{href:!0});var DXt=s(Zoe);JKr=r(DXt,"FlaxRobertaForTokenClassification"),DXt.forEach(t),YKr=r(kVe," (RoBERTa model)"),kVe.forEach(t),KKr=i(To),iA=n(To,"LI",{});var SVe=s(iA);dAe=n(SVe,"STRONG",{});var GXt=s(dAe);ZKr=r(GXt,"roformer"),GXt.forEach(t),eZr=r(SVe," \u2014 "),ere=n(SVe,"A",{href:!0});var OXt=s(ere);oZr=r(OXt,"FlaxRoFormerForTokenClassification"),OXt.forEach(t),rZr=r(SVe," (RoFormer model)"),SVe.forEach(t),tZr=i(To),dA=n(To,"LI",{});var RVe=s(dA);cAe=n(RVe,"STRONG",{});var VXt=s(cAe);aZr=r(VXt,"xlm-roberta"),VXt.forEach(t),nZr=r(RVe," \u2014 "),ore=n(RVe,"A",{href:!0});var XXt=s(ore);sZr=r(XXt,"FlaxXLMRobertaForTokenClassification"),XXt.forEach(t),lZr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),To.forEach(t),iZr=i(ui),T(cA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),Vze=i(f),bf=n(f,"H2",{class:!0});var KWe=s(bf);fA=n(KWe,"A",{id:!0,class:!0,href:!0});var zXt=s(fA);fAe=n(zXt,"SPAN",{});var QXt=s(fAe);T(Q$.$$.fragment,QXt),QXt.forEach(t),zXt.forEach(t),dZr=i(KWe),mAe=n(KWe,"SPAN",{});var WXt=s(mAe);cZr=r(WXt,"FlaxAutoModelForMultipleChoice"),WXt.forEach(t),KWe.forEach(t),Xze=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(W$.$$.fragment,bi),fZr=i(bi),vf=n(bi,"P",{});var mae=s(vf);mZr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rre=n(mae,"A",{href:!0});var HXt=s(rre);gZr=r(HXt,"from_pretrained()"),HXt.forEach(t),hZr=r(mae," class method or the "),tre=n(mae,"A",{href:!0});var UXt=s(tre);pZr=r(UXt,"from_config()"),UXt.forEach(t),_Zr=r(mae,` class
method.`),mae.forEach(t),uZr=i(bi),H$=n(bi,"P",{});var ZWe=s(H$);bZr=r(ZWe,"This class cannot be instantiated directly using "),gAe=n(ZWe,"CODE",{});var JXt=s(gAe);vZr=r(JXt,"__init__()"),JXt.forEach(t),FZr=r(ZWe," (throws an error)."),ZWe.forEach(t),TZr=i(bi),ea=n(bi,"DIV",{class:!0});var z7=s(ea);T(U$.$$.fragment,z7),MZr=i(z7),hAe=n(z7,"P",{});var YXt=s(hAe);EZr=r(YXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YXt.forEach(t),CZr=i(z7),Ff=n(z7,"P",{});var gae=s(Ff);wZr=r(gae,`Note:
Loading a model from its configuration file does `),pAe=n(gae,"STRONG",{});var KXt=s(pAe);AZr=r(KXt,"not"),KXt.forEach(t),LZr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),are=n(gae,"A",{href:!0});var ZXt=s(are);yZr=r(ZXt,"from_pretrained()"),ZXt.forEach(t),xZr=r(gae," to load the model weights."),gae.forEach(t),$Zr=i(z7),T(mA.$$.fragment,z7),z7.forEach(t),kZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(J$.$$.fragment,vi),SZr=i(vi),_Ae=n(vi,"P",{});var ezt=s(_Ae);RZr=r(ezt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ezt.forEach(t),PZr=i(vi),xn=n(vi,"P",{});var Q7=s(xn);BZr=r(Q7,"The model class to instantiate is selected based on the "),uAe=n(Q7,"CODE",{});var ozt=s(uAe);NZr=r(ozt,"model_type"),ozt.forEach(t),IZr=r(Q7,` property of the config object (either
passed as an argument or loaded from `),bAe=n(Q7,"CODE",{});var rzt=s(bAe);qZr=r(rzt,"pretrained_model_name_or_path"),rzt.forEach(t),jZr=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vAe=n(Q7,"CODE",{});var tzt=s(vAe);DZr=r(tzt,"pretrained_model_name_or_path"),tzt.forEach(t),GZr=r(Q7,":"),Q7.forEach(t),OZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);gA=n(Mo,"LI",{});var PVe=s(gA);FAe=n(PVe,"STRONG",{});var azt=s(FAe);VZr=r(azt,"albert"),azt.forEach(t),XZr=r(PVe," \u2014 "),nre=n(PVe,"A",{href:!0});var nzt=s(nre);zZr=r(nzt,"FlaxAlbertForMultipleChoice"),nzt.forEach(t),QZr=r(PVe," (ALBERT model)"),PVe.forEach(t),WZr=i(Mo),hA=n(Mo,"LI",{});var BVe=s(hA);TAe=n(BVe,"STRONG",{});var szt=s(TAe);HZr=r(szt,"bert"),szt.forEach(t),UZr=r(BVe," \u2014 "),sre=n(BVe,"A",{href:!0});var lzt=s(sre);JZr=r(lzt,"FlaxBertForMultipleChoice"),lzt.forEach(t),YZr=r(BVe," (BERT model)"),BVe.forEach(t),KZr=i(Mo),pA=n(Mo,"LI",{});var NVe=s(pA);MAe=n(NVe,"STRONG",{});var izt=s(MAe);ZZr=r(izt,"big_bird"),izt.forEach(t),eet=r(NVe," \u2014 "),lre=n(NVe,"A",{href:!0});var dzt=s(lre);oet=r(dzt,"FlaxBigBirdForMultipleChoice"),dzt.forEach(t),ret=r(NVe," (BigBird model)"),NVe.forEach(t),tet=i(Mo),_A=n(Mo,"LI",{});var IVe=s(_A);EAe=n(IVe,"STRONG",{});var czt=s(EAe);aet=r(czt,"distilbert"),czt.forEach(t),net=r(IVe," \u2014 "),ire=n(IVe,"A",{href:!0});var fzt=s(ire);set=r(fzt,"FlaxDistilBertForMultipleChoice"),fzt.forEach(t),iet=r(IVe," (DistilBERT model)"),IVe.forEach(t),det=i(Mo),uA=n(Mo,"LI",{});var qVe=s(uA);CAe=n(qVe,"STRONG",{});var mzt=s(CAe);cet=r(mzt,"electra"),mzt.forEach(t),fet=r(qVe," \u2014 "),dre=n(qVe,"A",{href:!0});var gzt=s(dre);met=r(gzt,"FlaxElectraForMultipleChoice"),gzt.forEach(t),get=r(qVe," (ELECTRA model)"),qVe.forEach(t),het=i(Mo),bA=n(Mo,"LI",{});var jVe=s(bA);wAe=n(jVe,"STRONG",{});var hzt=s(wAe);pet=r(hzt,"roberta"),hzt.forEach(t),_et=r(jVe," \u2014 "),cre=n(jVe,"A",{href:!0});var pzt=s(cre);uet=r(pzt,"FlaxRobertaForMultipleChoice"),pzt.forEach(t),bet=r(jVe," (RoBERTa model)"),jVe.forEach(t),vet=i(Mo),vA=n(Mo,"LI",{});var DVe=s(vA);AAe=n(DVe,"STRONG",{});var _zt=s(AAe);Fet=r(_zt,"roformer"),_zt.forEach(t),Tet=r(DVe," \u2014 "),fre=n(DVe,"A",{href:!0});var uzt=s(fre);Met=r(uzt,"FlaxRoFormerForMultipleChoice"),uzt.forEach(t),Eet=r(DVe," (RoFormer model)"),DVe.forEach(t),Cet=i(Mo),FA=n(Mo,"LI",{});var GVe=s(FA);LAe=n(GVe,"STRONG",{});var bzt=s(LAe);wet=r(bzt,"xlm-roberta"),bzt.forEach(t),Aet=r(GVe," \u2014 "),mre=n(GVe,"A",{href:!0});var vzt=s(mre);Let=r(vzt,"FlaxXLMRobertaForMultipleChoice"),vzt.forEach(t),yet=r(GVe," (XLM-RoBERTa model)"),GVe.forEach(t),Mo.forEach(t),xet=i(vi),T(TA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),zze=i(f),Tf=n(f,"H2",{class:!0});var eHe=s(Tf);MA=n(eHe,"A",{id:!0,class:!0,href:!0});var Fzt=s(MA);yAe=n(Fzt,"SPAN",{});var Tzt=s(yAe);T(Y$.$$.fragment,Tzt),Tzt.forEach(t),Fzt.forEach(t),$et=i(eHe),xAe=n(eHe,"SPAN",{});var Mzt=s(xAe);ket=r(Mzt,"FlaxAutoModelForNextSentencePrediction"),Mzt.forEach(t),eHe.forEach(t),Qze=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(K$.$$.fragment,Fi),Set=i(Fi),Mf=n(Fi,"P",{});var hae=s(Mf);Ret=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),gre=n(hae,"A",{href:!0});var Ezt=s(gre);Pet=r(Ezt,"from_pretrained()"),Ezt.forEach(t),Bet=r(hae," class method or the "),hre=n(hae,"A",{href:!0});var Czt=s(hre);Net=r(Czt,"from_config()"),Czt.forEach(t),Iet=r(hae,` class
method.`),hae.forEach(t),qet=i(Fi),Z$=n(Fi,"P",{});var oHe=s(Z$);jet=r(oHe,"This class cannot be instantiated directly using "),$Ae=n(oHe,"CODE",{});var wzt=s($Ae);Det=r(wzt,"__init__()"),wzt.forEach(t),Get=r(oHe," (throws an error)."),oHe.forEach(t),Oet=i(Fi),oa=n(Fi,"DIV",{class:!0});var W7=s(oa);T(ek.$$.fragment,W7),Vet=i(W7),kAe=n(W7,"P",{});var Azt=s(kAe);Xet=r(Azt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Azt.forEach(t),zet=i(W7),Ef=n(W7,"P",{});var pae=s(Ef);Qet=r(pae,`Note:
Loading a model from its configuration file does `),SAe=n(pae,"STRONG",{});var Lzt=s(SAe);Wet=r(Lzt,"not"),Lzt.forEach(t),Het=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=n(pae,"A",{href:!0});var yzt=s(pre);Uet=r(yzt,"from_pretrained()"),yzt.forEach(t),Jet=r(pae," to load the model weights."),pae.forEach(t),Yet=i(W7),T(EA.$$.fragment,W7),W7.forEach(t),Ket=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(ok.$$.fragment,Ti),Zet=i(Ti),RAe=n(Ti,"P",{});var xzt=s(RAe);eot=r(xzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xzt.forEach(t),oot=i(Ti),$n=n(Ti,"P",{});var H7=s($n);rot=r(H7,"The model class to instantiate is selected based on the "),PAe=n(H7,"CODE",{});var $zt=s(PAe);tot=r($zt,"model_type"),$zt.forEach(t),aot=r(H7,` property of the config object (either
passed as an argument or loaded from `),BAe=n(H7,"CODE",{});var kzt=s(BAe);not=r(kzt,"pretrained_model_name_or_path"),kzt.forEach(t),sot=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=n(H7,"CODE",{});var Szt=s(NAe);lot=r(Szt,"pretrained_model_name_or_path"),Szt.forEach(t),iot=r(H7,":"),H7.forEach(t),dot=i(Ti),IAe=n(Ti,"UL",{});var Rzt=s(IAe);CA=n(Rzt,"LI",{});var OVe=s(CA);qAe=n(OVe,"STRONG",{});var Pzt=s(qAe);cot=r(Pzt,"bert"),Pzt.forEach(t),fot=r(OVe," \u2014 "),_re=n(OVe,"A",{href:!0});var Bzt=s(_re);mot=r(Bzt,"FlaxBertForNextSentencePrediction"),Bzt.forEach(t),got=r(OVe," (BERT model)"),OVe.forEach(t),Rzt.forEach(t),hot=i(Ti),T(wA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Wze=i(f),Cf=n(f,"H2",{class:!0});var rHe=s(Cf);AA=n(rHe,"A",{id:!0,class:!0,href:!0});var Nzt=s(AA);jAe=n(Nzt,"SPAN",{});var Izt=s(jAe);T(rk.$$.fragment,Izt),Izt.forEach(t),Nzt.forEach(t),pot=i(rHe),DAe=n(rHe,"SPAN",{});var qzt=s(DAe);_ot=r(qzt,"FlaxAutoModelForImageClassification"),qzt.forEach(t),rHe.forEach(t),Hze=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(tk.$$.fragment,Mi),uot=i(Mi),wf=n(Mi,"P",{});var _ae=s(wf);bot=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ure=n(_ae,"A",{href:!0});var jzt=s(ure);vot=r(jzt,"from_pretrained()"),jzt.forEach(t),Fot=r(_ae," class method or the "),bre=n(_ae,"A",{href:!0});var Dzt=s(bre);Tot=r(Dzt,"from_config()"),Dzt.forEach(t),Mot=r(_ae,` class
method.`),_ae.forEach(t),Eot=i(Mi),ak=n(Mi,"P",{});var tHe=s(ak);Cot=r(tHe,"This class cannot be instantiated directly using "),GAe=n(tHe,"CODE",{});var Gzt=s(GAe);wot=r(Gzt,"__init__()"),Gzt.forEach(t),Aot=r(tHe," (throws an error)."),tHe.forEach(t),Lot=i(Mi),ra=n(Mi,"DIV",{class:!0});var U7=s(ra);T(nk.$$.fragment,U7),yot=i(U7),OAe=n(U7,"P",{});var Ozt=s(OAe);xot=r(Ozt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ozt.forEach(t),$ot=i(U7),Af=n(U7,"P",{});var uae=s(Af);kot=r(uae,`Note:
Loading a model from its configuration file does `),VAe=n(uae,"STRONG",{});var Vzt=s(VAe);Sot=r(Vzt,"not"),Vzt.forEach(t),Rot=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(uae,"A",{href:!0});var Xzt=s(vre);Pot=r(Xzt,"from_pretrained()"),Xzt.forEach(t),Bot=r(uae," to load the model weights."),uae.forEach(t),Not=i(U7),T(LA.$$.fragment,U7),U7.forEach(t),Iot=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(sk.$$.fragment,Ei),qot=i(Ei),XAe=n(Ei,"P",{});var zzt=s(XAe);jot=r(zzt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zzt.forEach(t),Dot=i(Ei),kn=n(Ei,"P",{});var J7=s(kn);Got=r(J7,"The model class to instantiate is selected based on the "),zAe=n(J7,"CODE",{});var Qzt=s(zAe);Oot=r(Qzt,"model_type"),Qzt.forEach(t),Vot=r(J7,` property of the config object (either
passed as an argument or loaded from `),QAe=n(J7,"CODE",{});var Wzt=s(QAe);Xot=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),zot=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WAe=n(J7,"CODE",{});var Hzt=s(WAe);Qot=r(Hzt,"pretrained_model_name_or_path"),Hzt.forEach(t),Wot=r(J7,":"),J7.forEach(t),Hot=i(Ei),lk=n(Ei,"UL",{});var aHe=s(lk);yA=n(aHe,"LI",{});var VVe=s(yA);HAe=n(VVe,"STRONG",{});var Uzt=s(HAe);Uot=r(Uzt,"beit"),Uzt.forEach(t),Jot=r(VVe," \u2014 "),Fre=n(VVe,"A",{href:!0});var Jzt=s(Fre);Yot=r(Jzt,"FlaxBeitForImageClassification"),Jzt.forEach(t),Kot=r(VVe," (BEiT model)"),VVe.forEach(t),Zot=i(aHe),xA=n(aHe,"LI",{});var XVe=s(xA);UAe=n(XVe,"STRONG",{});var Yzt=s(UAe);ert=r(Yzt,"vit"),Yzt.forEach(t),ort=r(XVe," \u2014 "),Tre=n(XVe,"A",{href:!0});var Kzt=s(Tre);rrt=r(Kzt,"FlaxViTForImageClassification"),Kzt.forEach(t),trt=r(XVe," (ViT model)"),XVe.forEach(t),aHe.forEach(t),art=i(Ei),T($A.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),Uze=i(f),Lf=n(f,"H2",{class:!0});var nHe=s(Lf);kA=n(nHe,"A",{id:!0,class:!0,href:!0});var Zzt=s(kA);JAe=n(Zzt,"SPAN",{});var eQt=s(JAe);T(ik.$$.fragment,eQt),eQt.forEach(t),Zzt.forEach(t),nrt=i(nHe),YAe=n(nHe,"SPAN",{});var oQt=s(YAe);srt=r(oQt,"FlaxAutoModelForVision2Seq"),oQt.forEach(t),nHe.forEach(t),Jze=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(dk.$$.fragment,Ci),lrt=i(Ci),yf=n(Ci,"P",{});var bae=s(yf);irt=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mre=n(bae,"A",{href:!0});var rQt=s(Mre);drt=r(rQt,"from_pretrained()"),rQt.forEach(t),crt=r(bae," class method or the "),Ere=n(bae,"A",{href:!0});var tQt=s(Ere);frt=r(tQt,"from_config()"),tQt.forEach(t),mrt=r(bae,` class
method.`),bae.forEach(t),grt=i(Ci),ck=n(Ci,"P",{});var sHe=s(ck);hrt=r(sHe,"This class cannot be instantiated directly using "),KAe=n(sHe,"CODE",{});var aQt=s(KAe);prt=r(aQt,"__init__()"),aQt.forEach(t),_rt=r(sHe," (throws an error)."),sHe.forEach(t),urt=i(Ci),ta=n(Ci,"DIV",{class:!0});var Y7=s(ta);T(fk.$$.fragment,Y7),brt=i(Y7),ZAe=n(Y7,"P",{});var nQt=s(ZAe);vrt=r(nQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nQt.forEach(t),Frt=i(Y7),xf=n(Y7,"P",{});var vae=s(xf);Trt=r(vae,`Note:
Loading a model from its configuration file does `),e6e=n(vae,"STRONG",{});var sQt=s(e6e);Mrt=r(sQt,"not"),sQt.forEach(t),Ert=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(vae,"A",{href:!0});var lQt=s(Cre);Crt=r(lQt,"from_pretrained()"),lQt.forEach(t),wrt=r(vae," to load the model weights."),vae.forEach(t),Art=i(Y7),T(SA.$$.fragment,Y7),Y7.forEach(t),Lrt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(mk.$$.fragment,wi),yrt=i(wi),o6e=n(wi,"P",{});var iQt=s(o6e);xrt=r(iQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iQt.forEach(t),$rt=i(wi),Sn=n(wi,"P",{});var K7=s(Sn);krt=r(K7,"The model class to instantiate is selected based on the "),r6e=n(K7,"CODE",{});var dQt=s(r6e);Srt=r(dQt,"model_type"),dQt.forEach(t),Rrt=r(K7,` property of the config object (either
passed as an argument or loaded from `),t6e=n(K7,"CODE",{});var cQt=s(t6e);Prt=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),Brt=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(K7,"CODE",{});var fQt=s(a6e);Nrt=r(fQt,"pretrained_model_name_or_path"),fQt.forEach(t),Irt=r(K7,":"),K7.forEach(t),qrt=i(wi),n6e=n(wi,"UL",{});var mQt=s(n6e);RA=n(mQt,"LI",{});var zVe=s(RA);s6e=n(zVe,"STRONG",{});var gQt=s(s6e);jrt=r(gQt,"vision-encoder-decoder"),gQt.forEach(t),Drt=r(zVe," \u2014 "),wre=n(zVe,"A",{href:!0});var hQt=s(wre);Grt=r(hQt,"FlaxVisionEncoderDecoderModel"),hQt.forEach(t),Ort=r(zVe," (Vision Encoder decoder model)"),zVe.forEach(t),mQt.forEach(t),Vrt=i(wi),T(PA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(FHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel"),c(If,"id","extending-the-auto-classes"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(jS,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(DS,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertConfig"),c(GS,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartConfig"),c(OS,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitConfig"),c(VS,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertConfig"),c(XS,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(zS,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdConfig"),c(QS,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(WS,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(HS,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(US,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomConfig"),c(JS,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertConfig"),c(YS,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineConfig"),c(KS,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPConfig"),c(ZS,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenConfig"),c(eR,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertConfig"),c(oR,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextConfig"),c(rR,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLConfig"),c(tR,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtConfig"),c(aR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(nR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(sR,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(lR,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaConfig"),c(iR,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(dR,"href","/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(cR,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTConfig"),c(fR,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrConfig"),c(mR,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertConfig"),c(gR,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRConfig"),c(hR,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTConfig"),c(pR,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraConfig"),c(_R,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(uR,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertConfig"),c(bR,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaConfig"),c(vR,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetConfig"),c(FR,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTConfig"),c(TR,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelConfig"),c(MR,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNConfig"),c(ER,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Config"),c(CR,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(wR,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(AR,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJConfig"),c(LR,"href","/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTConfig"),c(yR,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertConfig"),c(xR,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertConfig"),c($R,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(kR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(SR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(RR,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(PR,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDConfig"),c(BR,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitConfig"),c(NR,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerConfig"),c(IR,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Config"),c(qR,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeConfig"),c(jR,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertConfig"),c(DR,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Config"),c(GR,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianConfig"),c(OR,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(VR,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartConfig"),c(XR,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTConfig"),c(zR,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(QR,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(WR,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(HR,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetConfig"),c(UR,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Config"),c(JR,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpConfig"),c(YR,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaConfig"),c(KR,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(ZR,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(eP,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTConfig"),c(oP,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusConfig"),c(rP,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverConfig"),c(tP,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartConfig"),c(aP,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(nP,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(sP,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(lP,"href","/docs/transformers/pr_18123/en/model_doc/rag#transformers.RagConfig"),c(iP,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmConfig"),c(dP,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerConfig"),c(cP,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetConfig"),c(fP,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertConfig"),c(mP,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetConfig"),c(gP,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertConfig"),c(hP,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaConfig"),c(pP,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerConfig"),c(_P,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerConfig"),c(uP,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWConfig"),c(bP,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDConfig"),c(vP,"href","/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(FP,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(TP,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(MP,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterConfig"),c(EP,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(CP,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinConfig"),c(wP,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Config"),c(AP,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasConfig"),c(LP,"href","/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(yP,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(xP,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRConfig"),c($P,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(kP,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(SP,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanConfig"),c(RP,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltConfig"),c(PP,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(BP,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(NP,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(IP,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTConfig"),c(qP,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(jP,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(DP,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(GP,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMConfig"),c(OP,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMConfig"),c(VP,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMConfig"),c(XP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(zP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(QP,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(WP,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetConfig"),c(HP,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosConfig"),c(UP,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoTokenizer"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(JP,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(YP,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(KP,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartTokenizer"),c(eB,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartTokenizerFast"),c(oB,"href","/docs/transformers/pr_18123/en/model_doc/barthez#transformers.BarthezTokenizer"),c(rB,"href","/docs/transformers/pr_18123/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(tB,"href","/docs/transformers/pr_18123/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(aB,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(lB,"href","/docs/transformers/pr_18123/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(iB,"href","/docs/transformers/pr_18123/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(dB,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(cB,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(fB,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mB,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(hB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(pB,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(_B,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(uB,"href","/docs/transformers/pr_18123/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(bB,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertTokenizer"),c(vB,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(FB,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineTokenizer"),c(TB,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizer"),c(MB,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(EB,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(CB,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(wB,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AB,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(LB,"href","/docs/transformers/pr_18123/en/model_doc/cpm#transformers.CpmTokenizer"),c(yB,"href","/docs/transformers/pr_18123/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xB,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($B,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RB,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BB,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(NB,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(IB,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(qB,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jB,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DB,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraTokenizer"),c(GB,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OB,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VB,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetTokenizer"),c(XB,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zB,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(QB,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelTokenizer"),c(WB,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KB,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(ZB,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oN,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizer"),c(rN,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tN,"href","/docs/transformers/pr_18123/en/model_doc/herbert#transformers.HerbertTokenizer"),c(aN,"href","/docs/transformers/pr_18123/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(nN,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sN,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lN,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(dN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(cN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(fN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(mN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(gN,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(hN,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(pN,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(_N,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDTokenizer"),c(uN,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDTokenizerFast"),c(bN,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerTokenizer"),c(vN,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(FN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(TN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(MN,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeTokenizer"),c(EN,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(CN,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(wN,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(AN,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianTokenizer"),c(LN,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartTokenizer"),c(yN,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(xN,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBart50Tokenizer"),c($N,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18123/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PN,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(BN,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NN,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(IN,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(qN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(jN,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(DN,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpTokenizer"),c(GN,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(ON,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(VN,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(XN,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(zN,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(QN,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(WN,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(HN,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UN,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(JN,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(YN,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(KN,"href","/docs/transformers/pr_18123/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ZN,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartTokenizer"),c(eI,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(oI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(rI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(tI,"href","/docs/transformers/pr_18123/en/model_doc/rag#transformers.RagTokenizer"),c(aI,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmTokenizer"),c(nI,"href","/docs/transformers/pr_18123/en/model_doc/realm#transformers.RealmTokenizerFast"),c(sI,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerTokenizer"),c(lI,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(iI,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertTokenizer"),c(dI,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(cI,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(fI,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(mI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hI,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(pI,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(_I,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(uI,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(bI,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterTokenizer"),c(vI,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(FI,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(TI,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(MI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Tokenizer"),c(EI,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5TokenizerFast"),c(CI,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasTokenizer"),c(wI,"href","/docs/transformers/pr_18123/en/model_doc/tapex#transformers.TapexTokenizer"),c(AI,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(LI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c(yI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(xI,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizer"),c($I,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertTokenizerFast"),c(kI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(PI,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMTokenizer"),c(BI,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(NI,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMTokenizer"),c(II,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(qI,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(jI,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(DI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GI,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OI,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(VI,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(XI,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizer"),c(zI,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoFeatureExtractor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoFeatureExtractor"),c(Ii,"class","relative group"),c(QI,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(WI,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(HI,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(UI,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JI,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YI,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KI,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(eq,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(oq,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(rq,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(tq,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(aq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(nq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sq,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(lq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(iq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(dq,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(cq,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(fq,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(mq,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(hq,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(pq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_q,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uq,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(bq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(vq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Aq,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(up,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"id","transformers.AutoProcessor"),c(bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(Lq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(yq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPProcessor"),c(xq,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPProcessor"),c($q,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(kq,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Sq,"href","/docs/transformers/pr_18123/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Rq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Pq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Bq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Nq,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Iq,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRProcessor"),c(qq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Dq,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltProcessor"),c(Gq,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Oq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"id","transformers.AutoModel"),c(Dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dp,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(zq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wq,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hq,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertModel"),c(Uq,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartModel"),c(Jq,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitModel"),c(Yq,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertModel"),c(Kq,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Zq,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdModel"),c(ej,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(oj,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(rj,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(tj,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomModel"),c(aj,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertModel"),c(nj,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineModel"),c(sj,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.CLIPModel"),c(lj,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenModel"),c(ij,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertModel"),c(dj,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextModel"),c(cj,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLModel"),c(fj,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtModel"),c(mj,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(gj,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(hj,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(pj,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaModel"),c(_j,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(uj,"href","/docs/transformers/pr_18123/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(bj,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTModel"),c(vj,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrModel"),c(Fj,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertModel"),c(Tj,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Mj,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTModel"),c(Ej,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraModel"),c(Cj,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertModel"),c(wj,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaModel"),c(Aj,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetModel"),c(Lj,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTModel"),c(yj,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelModel"),c(xj,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelBaseModel"),c($j,"href","/docs/transformers/pr_18123/en/model_doc/glpn#transformers.GLPNModel"),c(kj,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2Model"),c(Sj,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Rj,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Pj,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJModel"),c(Bj,"href","/docs/transformers/pr_18123/en/model_doc/groupvit#transformers.GroupViTModel"),c(Nj,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertModel"),c(Ij,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertModel"),c(qj,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(jj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Dj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Gj,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Oj,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDModel"),c(Vj,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitModel"),c(Xj,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerModel"),c(zj,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5Model"),c(Qj,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeModel"),c(Wj,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertModel"),c(Hj,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100Model"),c(Uj,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianModel"),c(Jj,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Yj,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartModel"),c(Kj,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTModel"),c(Zj,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(eD,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertModel"),c(oD,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTModel"),c(rD,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetModel"),c(tD,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5Model"),c(aD,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpModel"),c(nD,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaModel"),c(sD,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lD,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(iD,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTModel"),c(dD,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusModel"),c(cD,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverModel"),c(fD,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartModel"),c(mD,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerModel"),c(gD,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(hD,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertModel"),c(pD,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModel"),c(_D,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetModel"),c(uD,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertModel"),c(bD,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetModel"),c(vD,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel"),c(FD,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaModel"),c(TD,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerModel"),c(MD,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerModel"),c(ED,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWModel"),c(CD,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDModel"),c(wD,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(AD,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterModel"),c(LD,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(yD,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinModel"),c(xD,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5Model"),c($D,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasModel"),c(kD,"href","/docs/transformers/pr_18123/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(SD,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(RD,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechModel"),c(PD,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(BD,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanModel"),c(ND,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltModel"),c(ID,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(qD,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jD,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTModel"),c(DD,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(GD,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(OD,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(VD,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMModel"),c(XD,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMModel"),c(zD,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMModel"),c(QD,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(WD,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(HD,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(UD,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetModel"),c(JD,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosModel"),c(YD,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qu,"id","transformers.AutoModelForPreTraining"),c(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(KD,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZD,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oG,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rG,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForPreTraining"),c(aG,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nG,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM"),c(sG,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(lG,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iG,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(dG,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(cG,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(fG,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mG,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForPreTraining"),c(gG,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(hG,"href","/docs/transformers/pr_18123/en/model_doc/flava#transformers.FlavaForPreTraining"),c(pG,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForPreTraining"),c(_G,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(bG,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vG,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(FG,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(TG,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(MG,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(EG,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(CG,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(wG,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AG,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(yG,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xG,"href","/docs/transformers/pr_18123/en/model_doc/retribert#transformers.RetriBertModel"),c($G,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kG,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(SG,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(RG,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BG,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(NG,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(IG,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(qG,"href","/docs/transformers/pr_18123/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(jG,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(DG,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(GG,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(OG,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(VG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(XG,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(zG,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForCausalLM"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(QG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForCausalLM"),c(JG,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertLMHeadModel"),c(YG,"href","/docs/transformers/pr_18123/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(KG,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(ZG,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(eO,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(oO,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(rO,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForCausalLM"),c(tO,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(aO,"href","/docs/transformers/pr_18123/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(nO,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sO,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(lO,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForCausalLM"),c(iO,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dO,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(cO,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(fO,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(mO,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianForCausalLM"),c(gO,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForCausalLM"),c(hO,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(pO,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForCausalLM"),c(_O,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uO,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForCausalLM"),c(bO,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(vO,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(FO,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(TO,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(MO,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(EO,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(CO,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(wO,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(AO,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(LO,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yO,"href","/docs/transformers/pr_18123/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(xO,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.XGLMForCausalLM"),c($O,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(kO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(SO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(RO,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(PO,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForMaskedLM"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(BO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(jO,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMaskedLM"),c(GO,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(OO,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(VO,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(XO,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zO,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(QO,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(WO,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(HO,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(UO,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(JO,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(YO,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(KO,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eV,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oV,"href","/docs/transformers/pr_18123/en/model_doc/luke#transformers.LukeForMaskedLM"),c(rV,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(sV,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(iV,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(dV,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(cV,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(fV,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(mV,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(hV,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(pV,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(uV,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(vV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(FV,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vb,"id","transformers.AutoModelForSeq2SeqLM"),c(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(TV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(xV,"href","/docs/transformers/pr_18123/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($V,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_18123/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.MarianMTModel"),c(PV,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_18123/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_18123/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForSequenceClassification"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(OV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForSequenceClassification"),c(WV,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForSequenceClassification"),c(HV,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(UV,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(JV,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(YV,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(oX,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(rX,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(tX,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(aX,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(nX,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(sX,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(lX,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(iX,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(dX,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(cX,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(fX,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(mX,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(hX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(pX,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(_X,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForSequenceClassification"),c(uX,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(bX,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vX,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(MX,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(EX,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(CX,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(wX,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(AX,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(LX,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(yX,"href","/docs/transformers/pr_18123/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xX,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($X,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kX,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RX,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(NX,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(IX,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qX,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jX,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DX,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GX,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForMultipleChoice"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(OX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(QX,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(HX,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JX,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YX,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KX,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oz,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tz,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(az,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sz,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(dz,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(cz,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(fz,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(uz,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(bz,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(vz,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.AutoModelForNextSentencePrediction"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Tz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(wz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Az,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Lz,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.AutoModelForTokenClassification"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c($z,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForTokenClassification"),c(Bz,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Nz,"href","/docs/transformers/pr_18123/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Iz,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(qz,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForTokenClassification"),c(jz,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Gz,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Oz,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Vz,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(zz,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Wz,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Hz,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Uz,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Jz,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Yz,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Zz,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForQuestionAnswering"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_18123/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_18123/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SQ,"href","/docs/transformers/pr_18123/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_18123/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18123/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18123/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18123/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18123/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18123/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18123/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18123/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_18123/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rW,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nW,"href","/docs/transformers/pr_18123/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForTableQuestionAnswering"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(sW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForImageClassification"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(cW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForImageClassification"),c(hW,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pW,"href","/docs/transformers/pr_18123/en/model_doc/cvt#transformers.CvtForImageClassification"),c(_W,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uW,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bW,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vW,"href","/docs/transformers/pr_18123/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FW,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassification"),c(TW,"href","/docs/transformers/pr_18123/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(MW,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(EW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wW,"href","/docs/transformers/pr_18123/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AW,"href","/docs/transformers/pr_18123/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LW,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(yW,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xW,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($W,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForImageClassification"),c(kW,"href","/docs/transformers/pr_18123/en/model_doc/van#transformers.VanForImageClassification"),c(SW,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForVision2Seq"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(RW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(IW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_18123/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForAudioClassification"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(GW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zW,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QW,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(WW,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(HW,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(UW,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JW,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YW,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o8,"id","transformers.AutoModelForAudioFrameClassification"),c(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o8,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(tH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(aH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(nH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c8,"id","transformers.AutoModelForCTC"),c(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c8,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(lH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(fH,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.HubertForCTC"),c(mH,"href","/docs/transformers/pr_18123/en/model_doc/mctct#transformers.MCTCTForCTC"),c(gH,"href","/docs/transformers/pr_18123/en/model_doc/sew#transformers.SEWForCTC"),c(hH,"href","/docs/transformers/pr_18123/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(_H,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(uH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(FH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_18123/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(CH,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($8,"id","transformers.AutoModelForAudioXVector"),c($8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($8,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(wH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xH,"href","/docs/transformers/pr_18123/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($H,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kH,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(SH,"href","/docs/transformers/pr_18123/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j8,"id","transformers.AutoModelForMaskedImageModeling"),c(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j8,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(RH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_18123/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(IH,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(qH,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q8,"id","transformers.AutoModelForObjectDetection"),c(Q8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q8,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(jH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForObjectDetection"),c(VH,"href","/docs/transformers/pr_18123/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K8,"id","transformers.AutoModelForImageSegmentation"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(XH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_18123/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.AutoModelForSemanticSegmentation"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(HH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(KH,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(ZH,"href","/docs/transformers/pr_18123/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eU,"href","/docs/transformers/pr_18123/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_18123/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.AutoModelForInstanceSegmentation"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(rU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_18123/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModel"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(sU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertModel"),c(cU,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartModel"),c(fU,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertModel"),c(mU,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(gU,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(hU,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertModel"),c(pU,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.TFCLIPModel"),c(_U,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertModel"),c(uU,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextModel"),c(bU,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLModel"),c(vU,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(FU,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaModel"),c(TU,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(MU,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(EU,"href","/docs/transformers/pr_18123/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(CU,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraModel"),c(wU,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(AU,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelModel"),c(LU,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yU,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2Model"),c(xU,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJModel"),c($U,"href","/docs/transformers/pr_18123/en/model_doc/hubert#transformers.TFHubertModel"),c(kU,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(SU,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDModel"),c(RU,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerModel"),c(PU,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertModel"),c(BU,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianModel"),c(NU,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartModel"),c(IU,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qU,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetModel"),c(jU,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5Model"),c(DU,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(GU,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTModel"),c(OU,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VU,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetModel"),c(XU,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertModel"),c(zU,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetModel"),c(QU,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaModel"),c(WU,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerModel"),c(HU,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(UU,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinModel"),c(JU,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5Model"),c(YU,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasModel"),c(KU,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(ZU,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTModel"),c(eJ,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(oJ,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(rJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMModel"),c(tJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(aJ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForPreTraining"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(nJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(dJ,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForPreTraining"),c(fJ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gJ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(pJ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_J,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(uJ,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bJ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vJ,"href","/docs/transformers/pr_18123/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(FJ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(TJ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MJ,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EJ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CJ,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AJ,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LJ,"href","/docs/transformers/pr_18123/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(yJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c($J,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForCausalLM"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(BJ,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(NJ,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IJ,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(qJ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(jJ,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DJ,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(GJ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(OJ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(VJ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(XJ,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(zJ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(QJ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForImageClassification"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_18123/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(YJ,"href","/docs/transformers/pr_18123/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(KJ,"href","/docs/transformers/pr_18123/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(ZJ,"href","/docs/transformers/pr_18123/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(eY,"href","/docs/transformers/pr_18123/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(oY,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForMaskedLM"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(rY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(sY,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(lY,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iY,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(dY,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(cY,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fY,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mY,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(gY,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hY,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pY,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_Y,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(uY,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vY,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(TY,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(MY,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(EY,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(CY,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(wY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(SY,"href","/docs/transformers/pr_18123/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.TFMarianMTModel"),c(PY,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.TFAutoModelForSequenceClassification"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(qY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(OY,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(XY,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_18123/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(QY,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(WY,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(HY,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(JY,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(KY,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(eK,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(oK,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(rK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(aK,"href","/docs/transformers/pr_18123/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(nK,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(sK,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(lK,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(iK,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(dK,"href","/docs/transformers/pr_18123/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(cK,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(fK,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(mK,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.TFAutoModelForMultipleChoice"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(gK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(bK,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(FK,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(MK,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(CK,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(wK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(LK,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(xK,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c($K,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(kK,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(SK,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(RK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(IK,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(qK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_18123/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForTokenClassification"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(OK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(QK,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(WK,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(HK,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(UK,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(JK,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(YK,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(KK,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(ZK,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(oZ,"href","/docs/transformers/pr_18123/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(rZ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(tZ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(nZ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(lZ,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(iZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(dZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(cZ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.TFAutoModelForQuestionAnswering"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(fZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_18123/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_18123/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_18123/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_18123/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(EZ,"href","/docs/transformers/pr_18123/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_18123/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_18123/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_18123/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_18123/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(SZ,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_18123/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.TFAutoModelForVision2Seq"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(PZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IZ,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(qZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_18123/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.FlaxAutoModel"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertModel"),c(QZ,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartModel"),c(WZ,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitModel"),c(HZ,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertModel"),c(UZ,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(JZ,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(YZ,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(KZ,"href","/docs/transformers/pr_18123/en/model_doc/clip#transformers.FlaxCLIPModel"),c(ZZ,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(eee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraModel"),c(oee,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(ree,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(tee,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(aee,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(nee,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianModel"),c(see,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lee,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iee,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTModel"),c(dee,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(cee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(fee,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(mee,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5Model"),c(gee,"href","/docs/transformers/pr_18123/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(hee,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTModel"),c(pee,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(_ee,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uee,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.FlaxAutoModelForCausalLM"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(bee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tee,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Mee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Eee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Cee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(wee,"href","/docs/transformers/pr_18123/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Aee,"href","/docs/transformers/pr_18123/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Lee,"href","/docs/transformers/pr_18123/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(yee,"href","/docs/transformers/pr_18123/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(xee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c($ee,"href","/docs/transformers/pr_18123/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForPreTraining"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(kee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(See,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ree,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pee,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Bee,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Nee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Iee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(qee,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(jee,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Dee,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Gee,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Oee,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Vee,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Xee,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zee,"href","/docs/transformers/pr_18123/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Qee,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForMaskedLM"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(Wee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Yee,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Kee,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Zee,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(eoe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(ooe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(roe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(toe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(aoe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(noe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(soe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(loe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ioe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(doe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(foe,"href","/docs/transformers/pr_18123/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_18123/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(goe,"href","/docs/transformers/pr_18123/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_18123/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(poe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_18123/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uoe,"href","/docs/transformers/pr_18123/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_18123/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(voe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Eoe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Coe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(woe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Aoe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c($oe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(koe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c(Soe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Roe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Poe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Boe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18123/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18123/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eA,"id","transformers.FlaxAutoModelForTokenClassification"),c(eA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(zoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qoe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Woe,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hoe,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Joe,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Koe,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(ere,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ore,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(fA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(rre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(are,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nre,"href","/docs/transformers/pr_18123/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(sre,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(lre,"href","/docs/transformers/pr_18123/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(ire,"href","/docs/transformers/pr_18123/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(dre,"href","/docs/transformers/pr_18123/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(cre,"href","/docs/transformers/pr_18123/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(fre,"href","/docs/transformers/pr_18123/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(mre,"href","/docs/transformers/pr_18123/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(MA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(gre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_re,"href","/docs/transformers/pr_18123/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AA,"id","transformers.FlaxAutoModelForImageClassification"),c(AA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(ure,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fre,"href","/docs/transformers/pr_18123/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Tre,"href","/docs/transformers/pr_18123/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kA,"id","transformers.FlaxAutoModelForVision2Seq"),c(kA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Mre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ere,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cre,"href","/docs/transformers/pr_18123/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wre,"href","/docs/transformers/pr_18123/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,Z7),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Pn),e(Pn,eL),e(Qe,Bn),e(Qe,Nn),e(Nn,oL),e(Qe,$i),e(Qe,In),e(In,rL),e(Qe,ki),b(f,Bf,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,RS),e(Ae,Si),e(Si,PS),e(Ae,BS),b(f,Co,u),b(f,Ra,u),e(Ra,NS),e(Ra,Nf),e(Nf,IS),e(Ra,lHe),b(f,QVe,u),b(f,Ri,u),e(Ri,If),e(If,Fae),M(tL,Fae,null),e(Ri,iHe),e(Ri,Tae),e(Tae,dHe),b(f,WVe,u),b(f,qn,u),e(qn,cHe),e(qn,Mae),e(Mae,fHe),e(qn,mHe),e(qn,Eae),e(Eae,gHe),e(qn,hHe),b(f,HVe,u),M(aL,f,u),b(f,UVe,u),b(f,qS,u),e(qS,pHe),b(f,JVe,u),M(qf,f,u),b(f,YVe,u),b(f,Pi,u),e(Pi,jf),e(jf,Cae),M(nL,Cae,null),e(Pi,_He),e(Pi,wae),e(wae,uHe),b(f,KVe,u),b(f,wo,u),M(sL,wo,null),e(wo,bHe),e(wo,lL),e(lL,vHe),e(lL,jS),e(jS,FHe),e(lL,THe),e(wo,MHe),e(wo,iL),e(iL,EHe),e(iL,Aae),e(Aae,CHe),e(iL,wHe),e(wo,AHe),e(wo,Lr),M(dL,Lr,null),e(Lr,LHe),e(Lr,Lae),e(Lae,yHe),e(Lr,xHe),e(Lr,Bi),e(Bi,$He),e(Bi,yae),e(yae,kHe),e(Bi,SHe),e(Bi,xae),e(xae,RHe),e(Bi,PHe),e(Lr,BHe),e(Lr,A),e(A,Df),e(Df,$ae),e($ae,NHe),e(Df,IHe),e(Df,DS),e(DS,qHe),e(Df,jHe),e(A,DHe),e(A,Gf),e(Gf,kae),e(kae,GHe),e(Gf,OHe),e(Gf,GS),e(GS,VHe),e(Gf,XHe),e(A,zHe),e(A,Of),e(Of,Sae),e(Sae,QHe),e(Of,WHe),e(Of,OS),e(OS,HHe),e(Of,UHe),e(A,JHe),e(A,Vf),e(Vf,Rae),e(Rae,YHe),e(Vf,KHe),e(Vf,VS),e(VS,ZHe),e(Vf,eUe),e(A,oUe),e(A,Xf),e(Xf,Pae),e(Pae,rUe),e(Xf,tUe),e(Xf,XS),e(XS,aUe),e(Xf,nUe),e(A,sUe),e(A,zf),e(zf,Bae),e(Bae,lUe),e(zf,iUe),e(zf,zS),e(zS,dUe),e(zf,cUe),e(A,fUe),e(A,Qf),e(Qf,Nae),e(Nae,mUe),e(Qf,gUe),e(Qf,QS),e(QS,hUe),e(Qf,pUe),e(A,_Ue),e(A,Wf),e(Wf,Iae),e(Iae,uUe),e(Wf,bUe),e(Wf,WS),e(WS,vUe),e(Wf,FUe),e(A,TUe),e(A,Hf),e(Hf,qae),e(qae,MUe),e(Hf,EUe),e(Hf,HS),e(HS,CUe),e(Hf,wUe),e(A,AUe),e(A,Uf),e(Uf,jae),e(jae,LUe),e(Uf,yUe),e(Uf,US),e(US,xUe),e(Uf,$Ue),e(A,kUe),e(A,Jf),e(Jf,Dae),e(Dae,SUe),e(Jf,RUe),e(Jf,JS),e(JS,PUe),e(Jf,BUe),e(A,NUe),e(A,Yf),e(Yf,Gae),e(Gae,IUe),e(Yf,qUe),e(Yf,YS),e(YS,jUe),e(Yf,DUe),e(A,GUe),e(A,Kf),e(Kf,Oae),e(Oae,OUe),e(Kf,VUe),e(Kf,KS),e(KS,XUe),e(Kf,zUe),e(A,QUe),e(A,Zf),e(Zf,Vae),e(Vae,WUe),e(Zf,HUe),e(Zf,ZS),e(ZS,UUe),e(Zf,JUe),e(A,YUe),e(A,em),e(em,Xae),e(Xae,KUe),e(em,ZUe),e(em,eR),e(eR,eJe),e(em,oJe),e(A,rJe),e(A,om),e(om,zae),e(zae,tJe),e(om,aJe),e(om,oR),e(oR,nJe),e(om,sJe),e(A,lJe),e(A,rm),e(rm,Qae),e(Qae,iJe),e(rm,dJe),e(rm,rR),e(rR,cJe),e(rm,fJe),e(A,mJe),e(A,tm),e(tm,Wae),e(Wae,gJe),e(tm,hJe),e(tm,tR),e(tR,pJe),e(tm,_Je),e(A,uJe),e(A,am),e(am,Hae),e(Hae,bJe),e(am,vJe),e(am,aR),e(aR,FJe),e(am,TJe),e(A,MJe),e(A,nm),e(nm,Uae),e(Uae,EJe),e(nm,CJe),e(nm,nR),e(nR,wJe),e(nm,AJe),e(A,LJe),e(A,sm),e(sm,Jae),e(Jae,yJe),e(sm,xJe),e(sm,sR),e(sR,$Je),e(sm,kJe),e(A,SJe),e(A,lm),e(lm,Yae),e(Yae,RJe),e(lm,PJe),e(lm,lR),e(lR,BJe),e(lm,NJe),e(A,IJe),e(A,im),e(im,Kae),e(Kae,qJe),e(im,jJe),e(im,iR),e(iR,DJe),e(im,GJe),e(A,OJe),e(A,dm),e(dm,Zae),e(Zae,VJe),e(dm,XJe),e(dm,dR),e(dR,zJe),e(dm,QJe),e(A,WJe),e(A,cm),e(cm,ene),e(ene,HJe),e(cm,UJe),e(cm,cR),e(cR,JJe),e(cm,YJe),e(A,KJe),e(A,fm),e(fm,one),e(one,ZJe),e(fm,eYe),e(fm,fR),e(fR,oYe),e(fm,rYe),e(A,tYe),e(A,mm),e(mm,rne),e(rne,aYe),e(mm,nYe),e(mm,mR),e(mR,sYe),e(mm,lYe),e(A,iYe),e(A,gm),e(gm,tne),e(tne,dYe),e(gm,cYe),e(gm,gR),e(gR,fYe),e(gm,mYe),e(A,gYe),e(A,hm),e(hm,ane),e(ane,hYe),e(hm,pYe),e(hm,hR),e(hR,_Ye),e(hm,uYe),e(A,bYe),e(A,pm),e(pm,nne),e(nne,vYe),e(pm,FYe),e(pm,pR),e(pR,TYe),e(pm,MYe),e(A,EYe),e(A,_m),e(_m,sne),e(sne,CYe),e(_m,wYe),e(_m,_R),e(_R,AYe),e(_m,LYe),e(A,yYe),e(A,um),e(um,lne),e(lne,xYe),e(um,$Ye),e(um,uR),e(uR,kYe),e(um,SYe),e(A,RYe),e(A,bm),e(bm,ine),e(ine,PYe),e(bm,BYe),e(bm,bR),e(bR,NYe),e(bm,IYe),e(A,qYe),e(A,vm),e(vm,dne),e(dne,jYe),e(vm,DYe),e(vm,vR),e(vR,GYe),e(vm,OYe),e(A,VYe),e(A,Fm),e(Fm,cne),e(cne,XYe),e(Fm,zYe),e(Fm,FR),e(FR,QYe),e(Fm,WYe),e(A,HYe),e(A,Tm),e(Tm,fne),e(fne,UYe),e(Tm,JYe),e(Tm,TR),e(TR,YYe),e(Tm,KYe),e(A,ZYe),e(A,Mm),e(Mm,mne),e(mne,eKe),e(Mm,oKe),e(Mm,MR),e(MR,rKe),e(Mm,tKe),e(A,aKe),e(A,Em),e(Em,gne),e(gne,nKe),e(Em,sKe),e(Em,ER),e(ER,lKe),e(Em,iKe),e(A,dKe),e(A,Cm),e(Cm,hne),e(hne,cKe),e(Cm,fKe),e(Cm,CR),e(CR,mKe),e(Cm,gKe),e(A,hKe),e(A,wm),e(wm,pne),e(pne,pKe),e(wm,_Ke),e(wm,wR),e(wR,uKe),e(wm,bKe),e(A,vKe),e(A,Am),e(Am,_ne),e(_ne,FKe),e(Am,TKe),e(Am,AR),e(AR,MKe),e(Am,EKe),e(A,CKe),e(A,Lm),e(Lm,une),e(une,wKe),e(Lm,AKe),e(Lm,LR),e(LR,LKe),e(Lm,yKe),e(A,xKe),e(A,ym),e(ym,bne),e(bne,$Ke),e(ym,kKe),e(ym,yR),e(yR,SKe),e(ym,RKe),e(A,PKe),e(A,xm),e(xm,vne),e(vne,BKe),e(xm,NKe),e(xm,xR),e(xR,IKe),e(xm,qKe),e(A,jKe),e(A,$m),e($m,Fne),e(Fne,DKe),e($m,GKe),e($m,$R),e($R,OKe),e($m,VKe),e(A,XKe),e(A,km),e(km,Tne),e(Tne,zKe),e(km,QKe),e(km,kR),e(kR,WKe),e(km,HKe),e(A,UKe),e(A,Sm),e(Sm,Mne),e(Mne,JKe),e(Sm,YKe),e(Sm,SR),e(SR,KKe),e(Sm,ZKe),e(A,eZe),e(A,Rm),e(Rm,Ene),e(Ene,oZe),e(Rm,rZe),e(Rm,RR),e(RR,tZe),e(Rm,aZe),e(A,nZe),e(A,Pm),e(Pm,Cne),e(Cne,sZe),e(Pm,lZe),e(Pm,PR),e(PR,iZe),e(Pm,dZe),e(A,cZe),e(A,Bm),e(Bm,wne),e(wne,fZe),e(Bm,mZe),e(Bm,BR),e(BR,gZe),e(Bm,hZe),e(A,pZe),e(A,Nm),e(Nm,Ane),e(Ane,_Ze),e(Nm,uZe),e(Nm,NR),e(NR,bZe),e(Nm,vZe),e(A,FZe),e(A,Im),e(Im,Lne),e(Lne,TZe),e(Im,MZe),e(Im,IR),e(IR,EZe),e(Im,CZe),e(A,wZe),e(A,qm),e(qm,yne),e(yne,AZe),e(qm,LZe),e(qm,qR),e(qR,yZe),e(qm,xZe),e(A,$Ze),e(A,jm),e(jm,xne),e(xne,kZe),e(jm,SZe),e(jm,jR),e(jR,RZe),e(jm,PZe),e(A,BZe),e(A,Dm),e(Dm,$ne),e($ne,NZe),e(Dm,IZe),e(Dm,DR),e(DR,qZe),e(Dm,jZe),e(A,DZe),e(A,Gm),e(Gm,kne),e(kne,GZe),e(Gm,OZe),e(Gm,GR),e(GR,VZe),e(Gm,XZe),e(A,zZe),e(A,Om),e(Om,Sne),e(Sne,QZe),e(Om,WZe),e(Om,OR),e(OR,HZe),e(Om,UZe),e(A,JZe),e(A,Vm),e(Vm,Rne),e(Rne,YZe),e(Vm,KZe),e(Vm,VR),e(VR,ZZe),e(Vm,eeo),e(A,oeo),e(A,Xm),e(Xm,Pne),e(Pne,reo),e(Xm,teo),e(Xm,XR),e(XR,aeo),e(Xm,neo),e(A,seo),e(A,zm),e(zm,Bne),e(Bne,leo),e(zm,ieo),e(zm,zR),e(zR,deo),e(zm,ceo),e(A,feo),e(A,Qm),e(Qm,Nne),e(Nne,meo),e(Qm,geo),e(Qm,QR),e(QR,heo),e(Qm,peo),e(A,_eo),e(A,Wm),e(Wm,Ine),e(Ine,ueo),e(Wm,beo),e(Wm,WR),e(WR,veo),e(Wm,Feo),e(A,Teo),e(A,Hm),e(Hm,qne),e(qne,Meo),e(Hm,Eeo),e(Hm,HR),e(HR,Ceo),e(Hm,weo),e(A,Aeo),e(A,Um),e(Um,jne),e(jne,Leo),e(Um,yeo),e(Um,UR),e(UR,xeo),e(Um,$eo),e(A,keo),e(A,Jm),e(Jm,Dne),e(Dne,Seo),e(Jm,Reo),e(Jm,JR),e(JR,Peo),e(Jm,Beo),e(A,Neo),e(A,Ym),e(Ym,Gne),e(Gne,Ieo),e(Ym,qeo),e(Ym,YR),e(YR,jeo),e(Ym,Deo),e(A,Geo),e(A,Km),e(Km,One),e(One,Oeo),e(Km,Veo),e(Km,KR),e(KR,Xeo),e(Km,zeo),e(A,Qeo),e(A,Zm),e(Zm,Vne),e(Vne,Weo),e(Zm,Heo),e(Zm,ZR),e(ZR,Ueo),e(Zm,Jeo),e(A,Yeo),e(A,eg),e(eg,Xne),e(Xne,Keo),e(eg,Zeo),e(eg,eP),e(eP,eoo),e(eg,ooo),e(A,roo),e(A,og),e(og,zne),e(zne,too),e(og,aoo),e(og,oP),e(oP,noo),e(og,soo),e(A,loo),e(A,rg),e(rg,Qne),e(Qne,ioo),e(rg,doo),e(rg,rP),e(rP,coo),e(rg,foo),e(A,moo),e(A,tg),e(tg,Wne),e(Wne,goo),e(tg,hoo),e(tg,tP),e(tP,poo),e(tg,_oo),e(A,uoo),e(A,ag),e(ag,Hne),e(Hne,boo),e(ag,voo),e(ag,aP),e(aP,Foo),e(ag,Too),e(A,Moo),e(A,ng),e(ng,Une),e(Une,Eoo),e(ng,Coo),e(ng,nP),e(nP,woo),e(ng,Aoo),e(A,Loo),e(A,sg),e(sg,Jne),e(Jne,yoo),e(sg,xoo),e(sg,sP),e(sP,$oo),e(sg,koo),e(A,Soo),e(A,lg),e(lg,Yne),e(Yne,Roo),e(lg,Poo),e(lg,lP),e(lP,Boo),e(lg,Noo),e(A,Ioo),e(A,ig),e(ig,Kne),e(Kne,qoo),e(ig,joo),e(ig,iP),e(iP,Doo),e(ig,Goo),e(A,Ooo),e(A,dg),e(dg,Zne),e(Zne,Voo),e(dg,Xoo),e(dg,dP),e(dP,zoo),e(dg,Qoo),e(A,Woo),e(A,cg),e(cg,ese),e(ese,Hoo),e(cg,Uoo),e(cg,cP),e(cP,Joo),e(cg,Yoo),e(A,Koo),e(A,fg),e(fg,ose),e(ose,Zoo),e(fg,ero),e(fg,fP),e(fP,oro),e(fg,rro),e(A,tro),e(A,mg),e(mg,rse),e(rse,aro),e(mg,nro),e(mg,mP),e(mP,sro),e(mg,lro),e(A,iro),e(A,gg),e(gg,tse),e(tse,dro),e(gg,cro),e(gg,gP),e(gP,fro),e(gg,mro),e(A,gro),e(A,hg),e(hg,ase),e(ase,hro),e(hg,pro),e(hg,hP),e(hP,_ro),e(hg,uro),e(A,bro),e(A,pg),e(pg,nse),e(nse,vro),e(pg,Fro),e(pg,pP),e(pP,Tro),e(pg,Mro),e(A,Ero),e(A,_g),e(_g,sse),e(sse,Cro),e(_g,wro),e(_g,_P),e(_P,Aro),e(_g,Lro),e(A,yro),e(A,ug),e(ug,lse),e(lse,xro),e(ug,$ro),e(ug,uP),e(uP,kro),e(ug,Sro),e(A,Rro),e(A,bg),e(bg,ise),e(ise,Pro),e(bg,Bro),e(bg,bP),e(bP,Nro),e(bg,Iro),e(A,qro),e(A,vg),e(vg,dse),e(dse,jro),e(vg,Dro),e(vg,vP),e(vP,Gro),e(vg,Oro),e(A,Vro),e(A,Fg),e(Fg,cse),e(cse,Xro),e(Fg,zro),e(Fg,FP),e(FP,Qro),e(Fg,Wro),e(A,Hro),e(A,Tg),e(Tg,fse),e(fse,Uro),e(Tg,Jro),e(Tg,TP),e(TP,Yro),e(Tg,Kro),e(A,Zro),e(A,Mg),e(Mg,mse),e(mse,eto),e(Mg,oto),e(Mg,MP),e(MP,rto),e(Mg,tto),e(A,ato),e(A,Eg),e(Eg,gse),e(gse,nto),e(Eg,sto),e(Eg,EP),e(EP,lto),e(Eg,ito),e(A,dto),e(A,Cg),e(Cg,hse),e(hse,cto),e(Cg,fto),e(Cg,CP),e(CP,mto),e(Cg,gto),e(A,hto),e(A,wg),e(wg,pse),e(pse,pto),e(wg,_to),e(wg,wP),e(wP,uto),e(wg,bto),e(A,vto),e(A,Ag),e(Ag,_se),e(_se,Fto),e(Ag,Tto),e(Ag,AP),e(AP,Mto),e(Ag,Eto),e(A,Cto),e(A,Lg),e(Lg,use),e(use,wto),e(Lg,Ato),e(Lg,LP),e(LP,Lto),e(Lg,yto),e(A,xto),e(A,yg),e(yg,bse),e(bse,$to),e(yg,kto),e(yg,yP),e(yP,Sto),e(yg,Rto),e(A,Pto),e(A,xg),e(xg,vse),e(vse,Bto),e(xg,Nto),e(xg,xP),e(xP,Ito),e(xg,qto),e(A,jto),e(A,$g),e($g,Fse),e(Fse,Dto),e($g,Gto),e($g,$P),e($P,Oto),e($g,Vto),e(A,Xto),e(A,kg),e(kg,Tse),e(Tse,zto),e(kg,Qto),e(kg,kP),e(kP,Wto),e(kg,Hto),e(A,Uto),e(A,Sg),e(Sg,Mse),e(Mse,Jto),e(Sg,Yto),e(Sg,SP),e(SP,Kto),e(Sg,Zto),e(A,eao),e(A,Rg),e(Rg,Ese),e(Ese,oao),e(Rg,rao),e(Rg,RP),e(RP,tao),e(Rg,aao),e(A,nao),e(A,Pg),e(Pg,Cse),e(Cse,sao),e(Pg,lao),e(Pg,PP),e(PP,iao),e(Pg,dao),e(A,cao),e(A,Bg),e(Bg,wse),e(wse,fao),e(Bg,mao),e(Bg,BP),e(BP,gao),e(Bg,hao),e(A,pao),e(A,Ng),e(Ng,Ase),e(Ase,_ao),e(Ng,uao),e(Ng,NP),e(NP,bao),e(Ng,vao),e(A,Fao),e(A,Ig),e(Ig,Lse),e(Lse,Tao),e(Ig,Mao),e(Ig,IP),e(IP,Eao),e(Ig,Cao),e(A,wao),e(A,qg),e(qg,yse),e(yse,Aao),e(qg,Lao),e(qg,qP),e(qP,yao),e(qg,xao),e(A,$ao),e(A,jg),e(jg,xse),e(xse,kao),e(jg,Sao),e(jg,jP),e(jP,Rao),e(jg,Pao),e(A,Bao),e(A,Dg),e(Dg,$se),e($se,Nao),e(Dg,Iao),e(Dg,DP),e(DP,qao),e(Dg,jao),e(A,Dao),e(A,Gg),e(Gg,kse),e(kse,Gao),e(Gg,Oao),e(Gg,GP),e(GP,Vao),e(Gg,Xao),e(A,zao),e(A,Og),e(Og,Sse),e(Sse,Qao),e(Og,Wao),e(Og,OP),e(OP,Hao),e(Og,Uao),e(A,Jao),e(A,Vg),e(Vg,Rse),e(Rse,Yao),e(Vg,Kao),e(Vg,VP),e(VP,Zao),e(Vg,eno),e(A,ono),e(A,Xg),e(Xg,Pse),e(Pse,rno),e(Xg,tno),e(Xg,XP),e(XP,ano),e(Xg,nno),e(A,sno),e(A,zg),e(zg,Bse),e(Bse,lno),e(zg,ino),e(zg,zP),e(zP,dno),e(zg,cno),e(A,fno),e(A,Qg),e(Qg,Nse),e(Nse,mno),e(Qg,gno),e(Qg,QP),e(QP,hno),e(Qg,pno),e(A,_no),e(A,Wg),e(Wg,Ise),e(Ise,uno),e(Wg,bno),e(Wg,WP),e(WP,vno),e(Wg,Fno),e(A,Tno),e(A,Hg),e(Hg,qse),e(qse,Mno),e(Hg,Eno),e(Hg,HP),e(HP,Cno),e(Hg,wno),e(A,Ano),e(A,Ug),e(Ug,jse),e(jse,Lno),e(Ug,yno),e(Ug,UP),e(UP,xno),e(Ug,$no),e(Lr,kno),M(Jg,Lr,null),e(wo,Sno),e(wo,Yg),M(cL,Yg,null),e(Yg,Rno),e(Yg,Dse),e(Dse,Pno),b(f,ZVe,u),b(f,Ni,u),e(Ni,Kg),e(Kg,Gse),M(fL,Gse,null),e(Ni,Bno),e(Ni,Ose),e(Ose,Nno),b(f,eXe,u),b(f,Ao,u),M(mL,Ao,null),e(Ao,Ino),e(Ao,gL),e(gL,qno),e(gL,JP),e(JP,jno),e(gL,Dno),e(Ao,Gno),e(Ao,hL),e(hL,Ono),e(hL,Vse),e(Vse,Vno),e(hL,Xno),e(Ao,zno),e(Ao,yr),M(pL,yr,null),e(yr,Qno),e(yr,Xse),e(Xse,Wno),e(yr,Hno),e(yr,Pa),e(Pa,Uno),e(Pa,zse),e(zse,Jno),e(Pa,Yno),e(Pa,Qse),e(Qse,Kno),e(Pa,Zno),e(Pa,Wse),e(Wse,eso),e(Pa,oso),e(yr,rso),e(yr,k),e(k,jn),e(jn,Hse),e(Hse,tso),e(jn,aso),e(jn,YP),e(YP,nso),e(jn,sso),e(jn,KP),e(KP,lso),e(jn,iso),e(k,dso),e(k,Dn),e(Dn,Use),e(Use,cso),e(Dn,fso),e(Dn,ZP),e(ZP,mso),e(Dn,gso),e(Dn,eB),e(eB,hso),e(Dn,pso),e(k,_so),e(k,Gn),e(Gn,Jse),e(Jse,uso),e(Gn,bso),e(Gn,oB),e(oB,vso),e(Gn,Fso),e(Gn,rB),e(rB,Tso),e(Gn,Mso),e(k,Eso),e(k,Zg),e(Zg,Yse),e(Yse,Cso),e(Zg,wso),e(Zg,tB),e(tB,Aso),e(Zg,Lso),e(k,yso),e(k,On),e(On,Kse),e(Kse,xso),e(On,$so),e(On,aB),e(aB,kso),e(On,Sso),e(On,nB),e(nB,Rso),e(On,Pso),e(k,Bso),e(k,eh),e(eh,Zse),e(Zse,Nso),e(eh,Iso),e(eh,sB),e(sB,qso),e(eh,jso),e(k,Dso),e(k,oh),e(oh,ele),e(ele,Gso),e(oh,Oso),e(oh,lB),e(lB,Vso),e(oh,Xso),e(k,zso),e(k,rh),e(rh,ole),e(ole,Qso),e(rh,Wso),e(rh,iB),e(iB,Hso),e(rh,Uso),e(k,Jso),e(k,Vn),e(Vn,rle),e(rle,Yso),e(Vn,Kso),e(Vn,dB),e(dB,Zso),e(Vn,elo),e(Vn,cB),e(cB,olo),e(Vn,rlo),e(k,tlo),e(k,Xn),e(Xn,tle),e(tle,alo),e(Xn,nlo),e(Xn,fB),e(fB,slo),e(Xn,llo),e(Xn,mB),e(mB,ilo),e(Xn,dlo),e(k,clo),e(k,zn),e(zn,ale),e(ale,flo),e(zn,mlo),e(zn,gB),e(gB,glo),e(zn,hlo),e(zn,hB),e(hB,plo),e(zn,_lo),e(k,ulo),e(k,th),e(th,nle),e(nle,blo),e(th,vlo),e(th,pB),e(pB,Flo),e(th,Tlo),e(k,Mlo),e(k,ah),e(ah,sle),e(sle,Elo),e(ah,Clo),e(ah,_B),e(_B,wlo),e(ah,Alo),e(k,Llo),e(k,nh),e(nh,lle),e(lle,ylo),e(nh,xlo),e(nh,uB),e(uB,$lo),e(nh,klo),e(k,Slo),e(k,Qn),e(Qn,ile),e(ile,Rlo),e(Qn,Plo),e(Qn,bB),e(bB,Blo),e(Qn,Nlo),e(Qn,vB),e(vB,Ilo),e(Qn,qlo),e(k,jlo),e(k,sh),e(sh,dle),e(dle,Dlo),e(sh,Glo),e(sh,FB),e(FB,Olo),e(sh,Vlo),e(k,Xlo),e(k,Wn),e(Wn,cle),e(cle,zlo),e(Wn,Qlo),e(Wn,TB),e(TB,Wlo),e(Wn,Hlo),e(Wn,MB),e(MB,Ulo),e(Wn,Jlo),e(k,Ylo),e(k,Hn),e(Hn,fle),e(fle,Klo),e(Hn,Zlo),e(Hn,EB),e(EB,eio),e(Hn,oio),e(Hn,CB),e(CB,rio),e(Hn,tio),e(k,aio),e(k,Un),e(Un,mle),e(mle,nio),e(Un,sio),e(Un,wB),e(wB,lio),e(Un,iio),e(Un,AB),e(AB,dio),e(Un,cio),e(k,fio),e(k,Jn),e(Jn,gle),e(gle,mio),e(Jn,gio),e(Jn,LB),e(LB,hio),e(Jn,pio),e(Jn,yB),e(yB,_io),e(Jn,uio),e(k,bio),e(k,lh),e(lh,hle),e(hle,vio),e(lh,Fio),e(lh,xB),e(xB,Tio),e(lh,Mio),e(k,Eio),e(k,Yn),e(Yn,ple),e(ple,Cio),e(Yn,wio),e(Yn,$B),e($B,Aio),e(Yn,Lio),e(Yn,kB),e(kB,yio),e(Yn,xio),e(k,$io),e(k,Kn),e(Kn,_le),e(_le,kio),e(Kn,Sio),e(Kn,SB),e(SB,Rio),e(Kn,Pio),e(Kn,RB),e(RB,Bio),e(Kn,Nio),e(k,Iio),e(k,Zn),e(Zn,ule),e(ule,qio),e(Zn,jio),e(Zn,PB),e(PB,Dio),e(Zn,Gio),e(Zn,BB),e(BB,Oio),e(Zn,Vio),e(k,Xio),e(k,es),e(es,ble),e(ble,zio),e(es,Qio),e(es,NB),e(NB,Wio),e(es,Hio),e(es,IB),e(IB,Uio),e(es,Jio),e(k,Yio),e(k,os),e(os,vle),e(vle,Kio),e(os,Zio),e(os,qB),e(qB,edo),e(os,odo),e(os,jB),e(jB,rdo),e(os,tdo),e(k,ado),e(k,rs),e(rs,Fle),e(Fle,ndo),e(rs,sdo),e(rs,DB),e(DB,ldo),e(rs,ido),e(rs,GB),e(GB,ddo),e(rs,cdo),e(k,fdo),e(k,ih),e(ih,Tle),e(Tle,mdo),e(ih,gdo),e(ih,OB),e(OB,hdo),e(ih,pdo),e(k,_do),e(k,ts),e(ts,Mle),e(Mle,udo),e(ts,bdo),e(ts,VB),e(VB,vdo),e(ts,Fdo),e(ts,XB),e(XB,Tdo),e(ts,Mdo),e(k,Edo),e(k,dh),e(dh,Ele),e(Ele,Cdo),e(dh,wdo),e(dh,zB),e(zB,Ado),e(dh,Ldo),e(k,ydo),e(k,as),e(as,Cle),e(Cle,xdo),e(as,$do),e(as,QB),e(QB,kdo),e(as,Sdo),e(as,WB),e(WB,Rdo),e(as,Pdo),e(k,Bdo),e(k,ns),e(ns,wle),e(wle,Ndo),e(ns,Ido),e(ns,HB),e(HB,qdo),e(ns,jdo),e(ns,UB),e(UB,Ddo),e(ns,Gdo),e(k,Odo),e(k,ss),e(ss,Ale),e(Ale,Vdo),e(ss,Xdo),e(ss,JB),e(JB,zdo),e(ss,Qdo),e(ss,YB),e(YB,Wdo),e(ss,Hdo),e(k,Udo),e(k,ch),e(ch,Lle),e(Lle,Jdo),e(ch,Ydo),e(ch,KB),e(KB,Kdo),e(ch,Zdo),e(k,eco),e(k,ls),e(ls,yle),e(yle,oco),e(ls,rco),e(ls,ZB),e(ZB,tco),e(ls,aco),e(ls,eN),e(eN,nco),e(ls,sco),e(k,lco),e(k,is),e(is,xle),e(xle,ico),e(is,dco),e(is,oN),e(oN,cco),e(is,fco),e(is,rN),e(rN,mco),e(is,gco),e(k,hco),e(k,ds),e(ds,$le),e($le,pco),e(ds,_co),e(ds,tN),e(tN,uco),e(ds,bco),e(ds,aN),e(aN,vco),e(ds,Fco),e(k,Tco),e(k,fh),e(fh,kle),e(kle,Mco),e(fh,Eco),e(fh,nN),e(nN,Cco),e(fh,wco),e(k,Aco),e(k,cs),e(cs,Sle),e(Sle,Lco),e(cs,yco),e(cs,sN),e(sN,xco),e(cs,$co),e(cs,lN),e(lN,kco),e(cs,Sco),e(k,Rco),e(k,fs),e(fs,Rle),e(Rle,Pco),e(fs,Bco),e(fs,iN),e(iN,Nco),e(fs,Ico),e(fs,dN),e(dN,qco),e(fs,jco),e(k,Dco),e(k,ms),e(ms,Ple),e(Ple,Gco),e(ms,Oco),e(ms,cN),e(cN,Vco),e(ms,Xco),e(ms,fN),e(fN,zco),e(ms,Qco),e(k,Wco),e(k,gs),e(gs,Ble),e(Ble,Hco),e(gs,Uco),e(gs,mN),e(mN,Jco),e(gs,Yco),e(gs,gN),e(gN,Kco),e(gs,Zco),e(k,efo),e(k,hs),e(hs,Nle),e(Nle,ofo),e(hs,rfo),e(hs,hN),e(hN,tfo),e(hs,afo),e(hs,pN),e(pN,nfo),e(hs,sfo),e(k,lfo),e(k,ps),e(ps,Ile),e(Ile,ifo),e(ps,dfo),e(ps,_N),e(_N,cfo),e(ps,ffo),e(ps,uN),e(uN,mfo),e(ps,gfo),e(k,hfo),e(k,_s),e(_s,qle),e(qle,pfo),e(_s,_fo),e(_s,bN),e(bN,ufo),e(_s,bfo),e(_s,vN),e(vN,vfo),e(_s,Ffo),e(k,Tfo),e(k,us),e(us,jle),e(jle,Mfo),e(us,Efo),e(us,FN),e(FN,Cfo),e(us,wfo),e(us,TN),e(TN,Afo),e(us,Lfo),e(k,yfo),e(k,mh),e(mh,Dle),e(Dle,xfo),e(mh,$fo),e(mh,MN),e(MN,kfo),e(mh,Sfo),e(k,Rfo),e(k,bs),e(bs,Gle),e(Gle,Pfo),e(bs,Bfo),e(bs,EN),e(EN,Nfo),e(bs,Ifo),e(bs,CN),e(CN,qfo),e(bs,jfo),e(k,Dfo),e(k,gh),e(gh,Ole),e(Ole,Gfo),e(gh,Ofo),e(gh,wN),e(wN,Vfo),e(gh,Xfo),e(k,zfo),e(k,hh),e(hh,Vle),e(Vle,Qfo),e(hh,Wfo),e(hh,AN),e(AN,Hfo),e(hh,Ufo),e(k,Jfo),e(k,vs),e(vs,Xle),e(Xle,Yfo),e(vs,Kfo),e(vs,LN),e(LN,Zfo),e(vs,emo),e(vs,yN),e(yN,omo),e(vs,rmo),e(k,tmo),e(k,Fs),e(Fs,zle),e(zle,amo),e(Fs,nmo),e(Fs,xN),e(xN,smo),e(Fs,lmo),e(Fs,$N),e($N,imo),e(Fs,dmo),e(k,cmo),e(k,Ts),e(Ts,Qle),e(Qle,fmo),e(Ts,mmo),e(Ts,kN),e(kN,gmo),e(Ts,hmo),e(Ts,SN),e(SN,pmo),e(Ts,_mo),e(k,umo),e(k,ph),e(ph,Wle),e(Wle,bmo),e(ph,vmo),e(ph,RN),e(RN,Fmo),e(ph,Tmo),e(k,Mmo),e(k,Ms),e(Ms,Hle),e(Hle,Emo),e(Ms,Cmo),e(Ms,PN),e(PN,wmo),e(Ms,Amo),e(Ms,BN),e(BN,Lmo),e(Ms,ymo),e(k,xmo),e(k,Es),e(Es,Ule),e(Ule,$mo),e(Es,kmo),e(Es,NN),e(NN,Smo),e(Es,Rmo),e(Es,IN),e(IN,Pmo),e(Es,Bmo),e(k,Nmo),e(k,Cs),e(Cs,Jle),e(Jle,Imo),e(Cs,qmo),e(Cs,qN),e(qN,jmo),e(Cs,Dmo),e(Cs,jN),e(jN,Gmo),e(Cs,Omo),e(k,Vmo),e(k,ws),e(ws,Yle),e(Yle,Xmo),e(ws,zmo),e(ws,DN),e(DN,Qmo),e(ws,Wmo),e(ws,GN),e(GN,Hmo),e(ws,Umo),e(k,Jmo),e(k,As),e(As,Kle),e(Kle,Ymo),e(As,Kmo),e(As,ON),e(ON,Zmo),e(As,ego),e(As,VN),e(VN,ogo),e(As,rgo),e(k,tgo),e(k,Ls),e(Ls,Zle),e(Zle,ago),e(Ls,ngo),e(Ls,XN),e(XN,sgo),e(Ls,lgo),e(Ls,zN),e(zN,igo),e(Ls,dgo),e(k,cgo),e(k,ys),e(ys,eie),e(eie,fgo),e(ys,mgo),e(ys,QN),e(QN,ggo),e(ys,hgo),e(ys,WN),e(WN,pgo),e(ys,_go),e(k,ugo),e(k,_h),e(_h,oie),e(oie,bgo),e(_h,vgo),e(_h,HN),e(HN,Fgo),e(_h,Tgo),e(k,Mgo),e(k,xs),e(xs,rie),e(rie,Ego),e(xs,Cgo),e(xs,UN),e(UN,wgo),e(xs,Ago),e(xs,JN),e(JN,Lgo),e(xs,ygo),e(k,xgo),e(k,uh),e(uh,tie),e(tie,$go),e(uh,kgo),e(uh,YN),e(YN,Sgo),e(uh,Rgo),e(k,Pgo),e(k,bh),e(bh,aie),e(aie,Bgo),e(bh,Ngo),e(bh,KN),e(KN,Igo),e(bh,qgo),e(k,jgo),e(k,vh),e(vh,nie),e(nie,Dgo),e(vh,Ggo),e(vh,ZN),e(ZN,Ogo),e(vh,Vgo),e(k,Xgo),e(k,Fh),e(Fh,sie),e(sie,zgo),e(Fh,Qgo),e(Fh,eI),e(eI,Wgo),e(Fh,Hgo),e(k,Ugo),e(k,$s),e($s,lie),e(lie,Jgo),e($s,Ygo),e($s,oI),e(oI,Kgo),e($s,Zgo),e($s,rI),e(rI,eho),e($s,oho),e(k,rho),e(k,Th),e(Th,iie),e(iie,tho),e(Th,aho),e(Th,tI),e(tI,nho),e(Th,sho),e(k,lho),e(k,ks),e(ks,die),e(die,iho),e(ks,dho),e(ks,aI),e(aI,cho),e(ks,fho),e(ks,nI),e(nI,mho),e(ks,gho),e(k,hho),e(k,Ss),e(Ss,cie),e(cie,pho),e(Ss,_ho),e(Ss,sI),e(sI,uho),e(Ss,bho),e(Ss,lI),e(lI,vho),e(Ss,Fho),e(k,Tho),e(k,Rs),e(Rs,fie),e(fie,Mho),e(Rs,Eho),e(Rs,iI),e(iI,Cho),e(Rs,who),e(Rs,dI),e(dI,Aho),e(Rs,Lho),e(k,yho),e(k,Ps),e(Ps,mie),e(mie,xho),e(Ps,$ho),e(Ps,cI),e(cI,kho),e(Ps,Sho),e(Ps,fI),e(fI,Rho),e(Ps,Pho),e(k,Bho),e(k,Bs),e(Bs,gie),e(gie,Nho),e(Bs,Iho),e(Bs,mI),e(mI,qho),e(Bs,jho),e(Bs,gI),e(gI,Dho),e(Bs,Gho),e(k,Oho),e(k,Ns),e(Ns,hie),e(hie,Vho),e(Ns,Xho),e(Ns,hI),e(hI,zho),e(Ns,Qho),e(Ns,pI),e(pI,Who),e(Ns,Hho),e(k,Uho),e(k,Mh),e(Mh,pie),e(pie,Jho),e(Mh,Yho),e(Mh,_I),e(_I,Kho),e(Mh,Zho),e(k,epo),e(k,Eh),e(Eh,_ie),e(_ie,opo),e(Eh,rpo),e(Eh,uI),e(uI,tpo),e(Eh,apo),e(k,npo),e(k,Is),e(Is,uie),e(uie,spo),e(Is,lpo),e(Is,bI),e(bI,ipo),e(Is,dpo),e(Is,vI),e(vI,cpo),e(Is,fpo),e(k,mpo),e(k,qs),e(qs,bie),e(bie,gpo),e(qs,hpo),e(qs,FI),e(FI,ppo),e(qs,_po),e(qs,TI),e(TI,upo),e(qs,bpo),e(k,vpo),e(k,js),e(js,vie),e(vie,Fpo),e(js,Tpo),e(js,MI),e(MI,Mpo),e(js,Epo),e(js,EI),e(EI,Cpo),e(js,wpo),e(k,Apo),e(k,Ch),e(Ch,Fie),e(Fie,Lpo),e(Ch,ypo),e(Ch,CI),e(CI,xpo),e(Ch,$po),e(k,kpo),e(k,wh),e(wh,Tie),e(Tie,Spo),e(wh,Rpo),e(wh,wI),e(wI,Ppo),e(wh,Bpo),e(k,Npo),e(k,Ah),e(Ah,Mie),e(Mie,Ipo),e(Ah,qpo),e(Ah,AI),e(AI,jpo),e(Ah,Dpo),e(k,Gpo),e(k,Ds),e(Ds,Eie),e(Eie,Opo),e(Ds,Vpo),e(Ds,LI),e(LI,Xpo),e(Ds,zpo),e(Ds,yI),e(yI,Qpo),e(Ds,Wpo),e(k,Hpo),e(k,Gs),e(Gs,Cie),e(Cie,Upo),e(Gs,Jpo),e(Gs,xI),e(xI,Ypo),e(Gs,Kpo),e(Gs,$I),e($I,Zpo),e(Gs,e_o),e(k,o_o),e(k,Lh),e(Lh,wie),e(wie,r_o),e(Lh,t_o),e(Lh,kI),e(kI,a_o),e(Lh,n_o),e(k,s_o),e(k,yh),e(yh,Aie),e(Aie,l_o),e(yh,i_o),e(yh,SI),e(SI,d_o),e(yh,c_o),e(k,f_o),e(k,xh),e(xh,Lie),e(Lie,m_o),e(xh,g_o),e(xh,RI),e(RI,h_o),e(xh,p_o),e(k,__o),e(k,Os),e(Os,yie),e(yie,u_o),e(Os,b_o),e(Os,PI),e(PI,v_o),e(Os,F_o),e(Os,BI),e(BI,T_o),e(Os,M_o),e(k,E_o),e(k,$h),e($h,xie),e(xie,C_o),e($h,w_o),e($h,NI),e(NI,A_o),e($h,L_o),e(k,y_o),e(k,kh),e(kh,$ie),e($ie,x_o),e(kh,$_o),e(kh,II),e(II,k_o),e(kh,S_o),e(k,R_o),e(k,Vs),e(Vs,kie),e(kie,P_o),e(Vs,B_o),e(Vs,qI),e(qI,N_o),e(Vs,I_o),e(Vs,jI),e(jI,q_o),e(Vs,j_o),e(k,D_o),e(k,Xs),e(Xs,Sie),e(Sie,G_o),e(Xs,O_o),e(Xs,DI),e(DI,V_o),e(Xs,X_o),e(Xs,GI),e(GI,z_o),e(Xs,Q_o),e(k,W_o),e(k,zs),e(zs,Rie),e(Rie,H_o),e(zs,U_o),e(zs,OI),e(OI,J_o),e(zs,Y_o),e(zs,VI),e(VI,K_o),e(zs,Z_o),e(k,euo),e(k,Qs),e(Qs,Pie),e(Pie,ouo),e(Qs,ruo),e(Qs,XI),e(XI,tuo),e(Qs,auo),e(Qs,zI),e(zI,nuo),e(Qs,suo),e(yr,luo),M(Sh,yr,null),e(Ao,iuo),e(Ao,Rh),M(_L,Rh,null),e(Rh,duo),e(Rh,Bie),e(Bie,cuo),b(f,oXe,u),b(f,Ii,u),e(Ii,Ph),e(Ph,Nie),M(uL,Nie,null),e(Ii,fuo),e(Ii,Iie),e(Iie,muo),b(f,rXe,u),b(f,Lo,u),M(bL,Lo,null),e(Lo,guo),e(Lo,vL),e(vL,huo),e(vL,QI),e(QI,puo),e(vL,_uo),e(Lo,uuo),e(Lo,FL),e(FL,buo),e(FL,qie),e(qie,vuo),e(FL,Fuo),e(Lo,Tuo),e(Lo,He),M(TL,He,null),e(He,Muo),e(He,jie),e(jie,Euo),e(He,Cuo),e(He,Ba),e(Ba,wuo),e(Ba,Die),e(Die,Auo),e(Ba,Luo),e(Ba,Gie),e(Gie,yuo),e(Ba,xuo),e(Ba,Oie),e(Oie,$uo),e(Ba,kuo),e(He,Suo),e(He,Y),e(Y,Bh),e(Bh,Vie),e(Vie,Ruo),e(Bh,Puo),e(Bh,WI),e(WI,Buo),e(Bh,Nuo),e(Y,Iuo),e(Y,Nh),e(Nh,Xie),e(Xie,quo),e(Nh,juo),e(Nh,HI),e(HI,Duo),e(Nh,Guo),e(Y,Ouo),e(Y,Ih),e(Ih,zie),e(zie,Vuo),e(Ih,Xuo),e(Ih,UI),e(UI,zuo),e(Ih,Quo),e(Y,Wuo),e(Y,qh),e(qh,Qie),e(Qie,Huo),e(qh,Uuo),e(qh,JI),e(JI,Juo),e(qh,Yuo),e(Y,Kuo),e(Y,jh),e(jh,Wie),e(Wie,Zuo),e(jh,e1o),e(jh,YI),e(YI,o1o),e(jh,r1o),e(Y,t1o),e(Y,Dh),e(Dh,Hie),e(Hie,a1o),e(Dh,n1o),e(Dh,KI),e(KI,s1o),e(Dh,l1o),e(Y,i1o),e(Y,Gh),e(Gh,Uie),e(Uie,d1o),e(Gh,c1o),e(Gh,ZI),e(ZI,f1o),e(Gh,m1o),e(Y,g1o),e(Y,Oh),e(Oh,Jie),e(Jie,h1o),e(Oh,p1o),e(Oh,eq),e(eq,_1o),e(Oh,u1o),e(Y,b1o),e(Y,Vh),e(Vh,Yie),e(Yie,v1o),e(Vh,F1o),e(Vh,oq),e(oq,T1o),e(Vh,M1o),e(Y,E1o),e(Y,Xh),e(Xh,Kie),e(Kie,C1o),e(Xh,w1o),e(Xh,rq),e(rq,A1o),e(Xh,L1o),e(Y,y1o),e(Y,zh),e(zh,Zie),e(Zie,x1o),e(zh,$1o),e(zh,tq),e(tq,k1o),e(zh,S1o),e(Y,R1o),e(Y,Qh),e(Qh,ede),e(ede,P1o),e(Qh,B1o),e(Qh,aq),e(aq,N1o),e(Qh,I1o),e(Y,q1o),e(Y,Wh),e(Wh,ode),e(ode,j1o),e(Wh,D1o),e(Wh,nq),e(nq,G1o),e(Wh,O1o),e(Y,V1o),e(Y,Hh),e(Hh,rde),e(rde,X1o),e(Hh,z1o),e(Hh,sq),e(sq,Q1o),e(Hh,W1o),e(Y,H1o),e(Y,Uh),e(Uh,tde),e(tde,U1o),e(Uh,J1o),e(Uh,lq),e(lq,Y1o),e(Uh,K1o),e(Y,Z1o),e(Y,Jh),e(Jh,ade),e(ade,e2o),e(Jh,o2o),e(Jh,iq),e(iq,r2o),e(Jh,t2o),e(Y,a2o),e(Y,Yh),e(Yh,nde),e(nde,n2o),e(Yh,s2o),e(Yh,dq),e(dq,l2o),e(Yh,i2o),e(Y,d2o),e(Y,Kh),e(Kh,sde),e(sde,c2o),e(Kh,f2o),e(Kh,cq),e(cq,m2o),e(Kh,g2o),e(Y,h2o),e(Y,Zh),e(Zh,lde),e(lde,p2o),e(Zh,_2o),e(Zh,fq),e(fq,u2o),e(Zh,b2o),e(Y,v2o),e(Y,ep),e(ep,ide),e(ide,F2o),e(ep,T2o),e(ep,mq),e(mq,M2o),e(ep,E2o),e(Y,C2o),e(Y,op),e(op,dde),e(dde,w2o),e(op,A2o),e(op,gq),e(gq,L2o),e(op,y2o),e(Y,x2o),e(Y,rp),e(rp,cde),e(cde,$2o),e(rp,k2o),e(rp,hq),e(hq,S2o),e(rp,R2o),e(Y,P2o),e(Y,tp),e(tp,fde),e(fde,B2o),e(tp,N2o),e(tp,pq),e(pq,I2o),e(tp,q2o),e(Y,j2o),e(Y,ap),e(ap,mde),e(mde,D2o),e(ap,G2o),e(ap,_q),e(_q,O2o),e(ap,V2o),e(Y,X2o),e(Y,np),e(np,gde),e(gde,z2o),e(np,Q2o),e(np,uq),e(uq,W2o),e(np,H2o),e(Y,U2o),e(Y,sp),e(sp,hde),e(hde,J2o),e(sp,Y2o),e(sp,bq),e(bq,K2o),e(sp,Z2o),e(Y,ebo),e(Y,lp),e(lp,pde),e(pde,obo),e(lp,rbo),e(lp,vq),e(vq,tbo),e(lp,abo),e(Y,nbo),e(Y,ip),e(ip,_de),e(_de,sbo),e(ip,lbo),e(ip,Fq),e(Fq,ibo),e(ip,dbo),e(Y,cbo),e(Y,dp),e(dp,ude),e(ude,fbo),e(dp,mbo),e(dp,Tq),e(Tq,gbo),e(dp,hbo),e(Y,pbo),e(Y,cp),e(cp,bde),e(bde,_bo),e(cp,ubo),e(cp,Mq),e(Mq,bbo),e(cp,vbo),e(Y,Fbo),e(Y,fp),e(fp,vde),e(vde,Tbo),e(fp,Mbo),e(fp,Eq),e(Eq,Ebo),e(fp,Cbo),e(Y,wbo),e(Y,mp),e(mp,Fde),e(Fde,Abo),e(mp,Lbo),e(mp,Cq),e(Cq,ybo),e(mp,xbo),e(Y,$bo),e(Y,gp),e(gp,Tde),e(Tde,kbo),e(gp,Sbo),e(gp,wq),e(wq,Rbo),e(gp,Pbo),e(Y,Bbo),e(Y,hp),e(hp,Mde),e(Mde,Nbo),e(hp,Ibo),e(hp,Aq),e(Aq,qbo),e(hp,jbo),e(He,Dbo),M(pp,He,null),e(He,Gbo),M(_p,He,null),e(Lo,Obo),e(Lo,up),M(ML,up,null),e(up,Vbo),e(up,Ede),e(Ede,Xbo),b(f,tXe,u),b(f,qi,u),e(qi,bp),e(bp,Cde),M(EL,Cde,null),e(qi,zbo),e(qi,wde),e(wde,Qbo),b(f,aXe,u),b(f,yo,u),M(CL,yo,null),e(yo,Wbo),e(yo,wL),e(wL,Hbo),e(wL,Lq),e(Lq,Ubo),e(wL,Jbo),e(yo,Ybo),e(yo,AL),e(AL,Kbo),e(AL,Ade),e(Ade,Zbo),e(AL,evo),e(yo,ovo),e(yo,Ue),M(LL,Ue,null),e(Ue,rvo),e(Ue,Lde),e(Lde,tvo),e(Ue,avo),e(Ue,ji),e(ji,nvo),e(ji,yde),e(yde,svo),e(ji,lvo),e(ji,xde),e(xde,ivo),e(ji,dvo),e(Ue,cvo),e(Ue,he),e(he,vp),e(vp,$de),e($de,fvo),e(vp,mvo),e(vp,yq),e(yq,gvo),e(vp,hvo),e(he,pvo),e(he,Fp),e(Fp,kde),e(kde,_vo),e(Fp,uvo),e(Fp,Sde),e(Sde,bvo),e(Fp,vvo),e(he,Fvo),e(he,Tp),e(Tp,Rde),e(Rde,Tvo),e(Tp,Mvo),e(Tp,xq),e(xq,Evo),e(Tp,Cvo),e(he,wvo),e(he,Mp),e(Mp,Pde),e(Pde,Avo),e(Mp,Lvo),e(Mp,$q),e($q,yvo),e(Mp,xvo),e(he,$vo),e(he,Ep),e(Ep,Bde),e(Bde,kvo),e(Ep,Svo),e(Ep,kq),e(kq,Rvo),e(Ep,Pvo),e(he,Bvo),e(he,Cp),e(Cp,Nde),e(Nde,Nvo),e(Cp,Ivo),e(Cp,Sq),e(Sq,qvo),e(Cp,jvo),e(he,Dvo),e(he,wp),e(wp,Ide),e(Ide,Gvo),e(wp,Ovo),e(wp,Rq),e(Rq,Vvo),e(wp,Xvo),e(he,zvo),e(he,Ap),e(Ap,qde),e(qde,Qvo),e(Ap,Wvo),e(Ap,Pq),e(Pq,Hvo),e(Ap,Uvo),e(he,Jvo),e(he,Lp),e(Lp,jde),e(jde,Yvo),e(Lp,Kvo),e(Lp,Bq),e(Bq,Zvo),e(Lp,e3o),e(he,o3o),e(he,yp),e(yp,Dde),e(Dde,r3o),e(yp,t3o),e(yp,Nq),e(Nq,a3o),e(yp,n3o),e(he,s3o),e(he,xp),e(xp,Gde),e(Gde,l3o),e(xp,i3o),e(xp,Iq),e(Iq,d3o),e(xp,c3o),e(he,f3o),e(he,$p),e($p,Ode),e(Ode,m3o),e($p,g3o),e($p,qq),e(qq,h3o),e($p,p3o),e(he,_3o),e(he,kp),e(kp,Vde),e(Vde,u3o),e(kp,b3o),e(kp,jq),e(jq,v3o),e(kp,F3o),e(he,T3o),e(he,Sp),e(Sp,Xde),e(Xde,M3o),e(Sp,E3o),e(Sp,Dq),e(Dq,C3o),e(Sp,w3o),e(he,A3o),e(he,Rp),e(Rp,zde),e(zde,L3o),e(Rp,y3o),e(Rp,Gq),e(Gq,x3o),e(Rp,$3o),e(he,k3o),e(he,Pp),e(Pp,Qde),e(Qde,S3o),e(Pp,R3o),e(Pp,Oq),e(Oq,P3o),e(Pp,B3o),e(he,N3o),e(he,Bp),e(Bp,Wde),e(Wde,I3o),e(Bp,q3o),e(Bp,Vq),e(Vq,j3o),e(Bp,D3o),e(he,G3o),e(he,Np),e(Np,Hde),e(Hde,O3o),e(Np,V3o),e(Np,Xq),e(Xq,X3o),e(Np,z3o),e(Ue,Q3o),M(Ip,Ue,null),e(Ue,W3o),M(qp,Ue,null),e(yo,H3o),e(yo,jp),M(yL,jp,null),e(jp,U3o),e(jp,Ude),e(Ude,J3o),b(f,nXe,u),b(f,Di,u),e(Di,Dp),e(Dp,Jde),M(xL,Jde,null),e(Di,Y3o),e(Di,Yde),e(Yde,K3o),b(f,sXe,u),b(f,xo,u),M($L,xo,null),e(xo,Z3o),e(xo,Gi),e(Gi,eFo),e(Gi,zq),e(zq,oFo),e(Gi,rFo),e(Gi,Qq),e(Qq,tFo),e(Gi,aFo),e(xo,nFo),e(xo,kL),e(kL,sFo),e(kL,Kde),e(Kde,lFo),e(kL,iFo),e(xo,dFo),e(xo,lt),M(SL,lt,null),e(lt,cFo),e(lt,Zde),e(Zde,fFo),e(lt,mFo),e(lt,Oi),e(Oi,gFo),e(Oi,ece),e(ece,hFo),e(Oi,pFo),e(Oi,Wq),e(Wq,_Fo),e(Oi,uFo),e(lt,bFo),M(Gp,lt,null),e(xo,vFo),e(xo,Je),M(RL,Je,null),e(Je,FFo),e(Je,oce),e(oce,TFo),e(Je,MFo),e(Je,Na),e(Na,EFo),e(Na,rce),e(rce,CFo),e(Na,wFo),e(Na,tce),e(tce,AFo),e(Na,LFo),e(Na,ace),e(ace,yFo),e(Na,xFo),e(Je,$Fo),e(Je,y),e(y,Op),e(Op,nce),e(nce,kFo),e(Op,SFo),e(Op,Hq),e(Hq,RFo),e(Op,PFo),e(y,BFo),e(y,Vp),e(Vp,sce),e(sce,NFo),e(Vp,IFo),e(Vp,Uq),e(Uq,qFo),e(Vp,jFo),e(y,DFo),e(y,Xp),e(Xp,lce),e(lce,GFo),e(Xp,OFo),e(Xp,Jq),e(Jq,VFo),e(Xp,XFo),e(y,zFo),e(y,zp),e(zp,ice),e(ice,QFo),e(zp,WFo),e(zp,Yq),e(Yq,HFo),e(zp,UFo),e(y,JFo),e(y,Qp),e(Qp,dce),e(dce,YFo),e(Qp,KFo),e(Qp,Kq),e(Kq,ZFo),e(Qp,eTo),e(y,oTo),e(y,Wp),e(Wp,cce),e(cce,rTo),e(Wp,tTo),e(Wp,Zq),e(Zq,aTo),e(Wp,nTo),e(y,sTo),e(y,Hp),e(Hp,fce),e(fce,lTo),e(Hp,iTo),e(Hp,ej),e(ej,dTo),e(Hp,cTo),e(y,fTo),e(y,Up),e(Up,mce),e(mce,mTo),e(Up,gTo),e(Up,oj),e(oj,hTo),e(Up,pTo),e(y,_To),e(y,Jp),e(Jp,gce),e(gce,uTo),e(Jp,bTo),e(Jp,rj),e(rj,vTo),e(Jp,FTo),e(y,TTo),e(y,Yp),e(Yp,hce),e(hce,MTo),e(Yp,ETo),e(Yp,tj),e(tj,CTo),e(Yp,wTo),e(y,ATo),e(y,Kp),e(Kp,pce),e(pce,LTo),e(Kp,yTo),e(Kp,aj),e(aj,xTo),e(Kp,$To),e(y,kTo),e(y,Zp),e(Zp,_ce),e(_ce,STo),e(Zp,RTo),e(Zp,nj),e(nj,PTo),e(Zp,BTo),e(y,NTo),e(y,e_),e(e_,uce),e(uce,ITo),e(e_,qTo),e(e_,sj),e(sj,jTo),e(e_,DTo),e(y,GTo),e(y,o_),e(o_,bce),e(bce,OTo),e(o_,VTo),e(o_,lj),e(lj,XTo),e(o_,zTo),e(y,QTo),e(y,r_),e(r_,vce),e(vce,WTo),e(r_,HTo),e(r_,ij),e(ij,UTo),e(r_,JTo),e(y,YTo),e(y,t_),e(t_,Fce),e(Fce,KTo),e(t_,ZTo),e(t_,dj),e(dj,e8o),e(t_,o8o),e(y,r8o),e(y,a_),e(a_,Tce),e(Tce,t8o),e(a_,a8o),e(a_,cj),e(cj,n8o),e(a_,s8o),e(y,l8o),e(y,n_),e(n_,Mce),e(Mce,i8o),e(n_,d8o),e(n_,fj),e(fj,c8o),e(n_,f8o),e(y,m8o),e(y,s_),e(s_,Ece),e(Ece,g8o),e(s_,h8o),e(s_,mj),e(mj,p8o),e(s_,_8o),e(y,u8o),e(y,l_),e(l_,Cce),e(Cce,b8o),e(l_,v8o),e(l_,gj),e(gj,F8o),e(l_,T8o),e(y,M8o),e(y,i_),e(i_,wce),e(wce,E8o),e(i_,C8o),e(i_,hj),e(hj,w8o),e(i_,A8o),e(y,L8o),e(y,d_),e(d_,Ace),e(Ace,y8o),e(d_,x8o),e(d_,pj),e(pj,$8o),e(d_,k8o),e(y,S8o),e(y,c_),e(c_,Lce),e(Lce,R8o),e(c_,P8o),e(c_,_j),e(_j,B8o),e(c_,N8o),e(y,I8o),e(y,f_),e(f_,yce),e(yce,q8o),e(f_,j8o),e(f_,uj),e(uj,D8o),e(f_,G8o),e(y,O8o),e(y,m_),e(m_,xce),e(xce,V8o),e(m_,X8o),e(m_,bj),e(bj,z8o),e(m_,Q8o),e(y,W8o),e(y,g_),e(g_,$ce),e($ce,H8o),e(g_,U8o),e(g_,vj),e(vj,J8o),e(g_,Y8o),e(y,K8o),e(y,h_),e(h_,kce),e(kce,Z8o),e(h_,eMo),e(h_,Fj),e(Fj,oMo),e(h_,rMo),e(y,tMo),e(y,p_),e(p_,Sce),e(Sce,aMo),e(p_,nMo),e(p_,Tj),e(Tj,sMo),e(p_,lMo),e(y,iMo),e(y,__),e(__,Rce),e(Rce,dMo),e(__,cMo),e(__,Mj),e(Mj,fMo),e(__,mMo),e(y,gMo),e(y,u_),e(u_,Pce),e(Pce,hMo),e(u_,pMo),e(u_,Ej),e(Ej,_Mo),e(u_,uMo),e(y,bMo),e(y,b_),e(b_,Bce),e(Bce,vMo),e(b_,FMo),e(b_,Cj),e(Cj,TMo),e(b_,MMo),e(y,EMo),e(y,v_),e(v_,Nce),e(Nce,CMo),e(v_,wMo),e(v_,wj),e(wj,AMo),e(v_,LMo),e(y,yMo),e(y,F_),e(F_,Ice),e(Ice,xMo),e(F_,$Mo),e(F_,Aj),e(Aj,kMo),e(F_,SMo),e(y,RMo),e(y,T_),e(T_,qce),e(qce,PMo),e(T_,BMo),e(T_,Lj),e(Lj,NMo),e(T_,IMo),e(y,qMo),e(y,Ws),e(Ws,jce),e(jce,jMo),e(Ws,DMo),e(Ws,yj),e(yj,GMo),e(Ws,OMo),e(Ws,xj),e(xj,VMo),e(Ws,XMo),e(y,zMo),e(y,M_),e(M_,Dce),e(Dce,QMo),e(M_,WMo),e(M_,$j),e($j,HMo),e(M_,UMo),e(y,JMo),e(y,E_),e(E_,Gce),e(Gce,YMo),e(E_,KMo),e(E_,kj),e(kj,ZMo),e(E_,e4o),e(y,o4o),e(y,C_),e(C_,Oce),e(Oce,r4o),e(C_,t4o),e(C_,Sj),e(Sj,a4o),e(C_,n4o),e(y,s4o),e(y,w_),e(w_,Vce),e(Vce,l4o),e(w_,i4o),e(w_,Rj),e(Rj,d4o),e(w_,c4o),e(y,f4o),e(y,A_),e(A_,Xce),e(Xce,m4o),e(A_,g4o),e(A_,Pj),e(Pj,h4o),e(A_,p4o),e(y,_4o),e(y,L_),e(L_,zce),e(zce,u4o),e(L_,b4o),e(L_,Bj),e(Bj,v4o),e(L_,F4o),e(y,T4o),e(y,y_),e(y_,Qce),e(Qce,M4o),e(y_,E4o),e(y_,Nj),e(Nj,C4o),e(y_,w4o),e(y,A4o),e(y,x_),e(x_,Wce),e(Wce,L4o),e(x_,y4o),e(x_,Ij),e(Ij,x4o),e(x_,$4o),e(y,k4o),e(y,$_),e($_,Hce),e(Hce,S4o),e($_,R4o),e($_,qj),e(qj,P4o),e($_,B4o),e(y,N4o),e(y,k_),e(k_,Uce),e(Uce,I4o),e(k_,q4o),e(k_,jj),e(jj,j4o),e(k_,D4o),e(y,G4o),e(y,S_),e(S_,Jce),e(Jce,O4o),e(S_,V4o),e(S_,Dj),e(Dj,X4o),e(S_,z4o),e(y,Q4o),e(y,R_),e(R_,Yce),e(Yce,W4o),e(R_,H4o),e(R_,Gj),e(Gj,U4o),e(R_,J4o),e(y,Y4o),e(y,P_),e(P_,Kce),e(Kce,K4o),e(P_,Z4o),e(P_,Oj),e(Oj,eEo),e(P_,oEo),e(y,rEo),e(y,B_),e(B_,Zce),e(Zce,tEo),e(B_,aEo),e(B_,Vj),e(Vj,nEo),e(B_,sEo),e(y,lEo),e(y,N_),e(N_,efe),e(efe,iEo),e(N_,dEo),e(N_,Xj),e(Xj,cEo),e(N_,fEo),e(y,mEo),e(y,I_),e(I_,ofe),e(ofe,gEo),e(I_,hEo),e(I_,zj),e(zj,pEo),e(I_,_Eo),e(y,uEo),e(y,q_),e(q_,rfe),e(rfe,bEo),e(q_,vEo),e(q_,Qj),e(Qj,FEo),e(q_,TEo),e(y,MEo),e(y,j_),e(j_,tfe),e(tfe,EEo),e(j_,CEo),e(j_,Wj),e(Wj,wEo),e(j_,AEo),e(y,LEo),e(y,D_),e(D_,afe),e(afe,yEo),e(D_,xEo),e(D_,Hj),e(Hj,$Eo),e(D_,kEo),e(y,SEo),e(y,G_),e(G_,nfe),e(nfe,REo),e(G_,PEo),e(G_,Uj),e(Uj,BEo),e(G_,NEo),e(y,IEo),e(y,O_),e(O_,sfe),e(sfe,qEo),e(O_,jEo),e(O_,Jj),e(Jj,DEo),e(O_,GEo),e(y,OEo),e(y,V_),e(V_,lfe),e(lfe,VEo),e(V_,XEo),e(V_,Yj),e(Yj,zEo),e(V_,QEo),e(y,WEo),e(y,X_),e(X_,ife),e(ife,HEo),e(X_,UEo),e(X_,Kj),e(Kj,JEo),e(X_,YEo),e(y,KEo),e(y,z_),e(z_,dfe),e(dfe,ZEo),e(z_,eCo),e(z_,Zj),e(Zj,oCo),e(z_,rCo),e(y,tCo),e(y,Q_),e(Q_,cfe),e(cfe,aCo),e(Q_,nCo),e(Q_,eD),e(eD,sCo),e(Q_,lCo),e(y,iCo),e(y,W_),e(W_,ffe),e(ffe,dCo),e(W_,cCo),e(W_,oD),e(oD,fCo),e(W_,mCo),e(y,gCo),e(y,H_),e(H_,mfe),e(mfe,hCo),e(H_,pCo),e(H_,rD),e(rD,_Co),e(H_,uCo),e(y,bCo),e(y,U_),e(U_,gfe),e(gfe,vCo),e(U_,FCo),e(U_,tD),e(tD,TCo),e(U_,MCo),e(y,ECo),e(y,J_),e(J_,hfe),e(hfe,CCo),e(J_,wCo),e(J_,aD),e(aD,ACo),e(J_,LCo),e(y,yCo),e(y,Y_),e(Y_,pfe),e(pfe,xCo),e(Y_,$Co),e(Y_,nD),e(nD,kCo),e(Y_,SCo),e(y,RCo),e(y,K_),e(K_,_fe),e(_fe,PCo),e(K_,BCo),e(K_,sD),e(sD,NCo),e(K_,ICo),e(y,qCo),e(y,Z_),e(Z_,ufe),e(ufe,jCo),e(Z_,DCo),e(Z_,lD),e(lD,GCo),e(Z_,OCo),e(y,VCo),e(y,eu),e(eu,bfe),e(bfe,XCo),e(eu,zCo),e(eu,iD),e(iD,QCo),e(eu,WCo),e(y,HCo),e(y,ou),e(ou,vfe),e(vfe,UCo),e(ou,JCo),e(ou,dD),e(dD,YCo),e(ou,KCo),e(y,ZCo),e(y,ru),e(ru,Ffe),e(Ffe,e5o),e(ru,o5o),e(ru,cD),e(cD,r5o),e(ru,t5o),e(y,a5o),e(y,tu),e(tu,Tfe),e(Tfe,n5o),e(tu,s5o),e(tu,fD),e(fD,l5o),e(tu,i5o),e(y,d5o),e(y,au),e(au,Mfe),e(Mfe,c5o),e(au,f5o),e(au,mD),e(mD,m5o),e(au,g5o),e(y,h5o),e(y,nu),e(nu,Efe),e(Efe,p5o),e(nu,_5o),e(nu,gD),e(gD,u5o),e(nu,b5o),e(y,v5o),e(y,su),e(su,Cfe),e(Cfe,F5o),e(su,T5o),e(su,hD),e(hD,M5o),e(su,E5o),e(y,C5o),e(y,lu),e(lu,wfe),e(wfe,w5o),e(lu,A5o),e(lu,pD),e(pD,L5o),e(lu,y5o),e(y,x5o),e(y,iu),e(iu,Afe),e(Afe,$5o),e(iu,k5o),e(iu,_D),e(_D,S5o),e(iu,R5o),e(y,P5o),e(y,du),e(du,Lfe),e(Lfe,B5o),e(du,N5o),e(du,uD),e(uD,I5o),e(du,q5o),e(y,j5o),e(y,cu),e(cu,yfe),e(yfe,D5o),e(cu,G5o),e(cu,bD),e(bD,O5o),e(cu,V5o),e(y,X5o),e(y,fu),e(fu,xfe),e(xfe,z5o),e(fu,Q5o),e(fu,vD),e(vD,W5o),e(fu,H5o),e(y,U5o),e(y,mu),e(mu,$fe),e($fe,J5o),e(mu,Y5o),e(mu,FD),e(FD,K5o),e(mu,Z5o),e(y,e0o),e(y,gu),e(gu,kfe),e(kfe,o0o),e(gu,r0o),e(gu,TD),e(TD,t0o),e(gu,a0o),e(y,n0o),e(y,hu),e(hu,Sfe),e(Sfe,s0o),e(hu,l0o),e(hu,MD),e(MD,i0o),e(hu,d0o),e(y,c0o),e(y,pu),e(pu,Rfe),e(Rfe,f0o),e(pu,m0o),e(pu,ED),e(ED,g0o),e(pu,h0o),e(y,p0o),e(y,_u),e(_u,Pfe),e(Pfe,_0o),e(_u,u0o),e(_u,CD),e(CD,b0o),e(_u,v0o),e(y,F0o),e(y,uu),e(uu,Bfe),e(Bfe,T0o),e(uu,M0o),e(uu,wD),e(wD,E0o),e(uu,C0o),e(y,w0o),e(y,bu),e(bu,Nfe),e(Nfe,A0o),e(bu,L0o),e(bu,AD),e(AD,y0o),e(bu,x0o),e(y,$0o),e(y,vu),e(vu,Ife),e(Ife,k0o),e(vu,S0o),e(vu,LD),e(LD,R0o),e(vu,P0o),e(y,B0o),e(y,Fu),e(Fu,qfe),e(qfe,N0o),e(Fu,I0o),e(Fu,yD),e(yD,q0o),e(Fu,j0o),e(y,D0o),e(y,Tu),e(Tu,jfe),e(jfe,G0o),e(Tu,O0o),e(Tu,xD),e(xD,V0o),e(Tu,X0o),e(y,z0o),e(y,Mu),e(Mu,Dfe),e(Dfe,Q0o),e(Mu,W0o),e(Mu,$D),e($D,H0o),e(Mu,U0o),e(y,J0o),e(y,Eu),e(Eu,Gfe),e(Gfe,Y0o),e(Eu,K0o),e(Eu,kD),e(kD,Z0o),e(Eu,ewo),e(y,owo),e(y,Cu),e(Cu,Ofe),e(Ofe,rwo),e(Cu,two),e(Cu,SD),e(SD,awo),e(Cu,nwo),e(y,swo),e(y,wu),e(wu,Vfe),e(Vfe,lwo),e(wu,iwo),e(wu,RD),e(RD,dwo),e(wu,cwo),e(y,fwo),e(y,Au),e(Au,Xfe),e(Xfe,mwo),e(Au,gwo),e(Au,PD),e(PD,hwo),e(Au,pwo),e(y,_wo),e(y,Lu),e(Lu,zfe),e(zfe,uwo),e(Lu,bwo),e(Lu,BD),e(BD,vwo),e(Lu,Fwo),e(y,Two),e(y,yu),e(yu,Qfe),e(Qfe,Mwo),e(yu,Ewo),e(yu,ND),e(ND,Cwo),e(yu,wwo),e(y,Awo),e(y,xu),e(xu,Wfe),e(Wfe,Lwo),e(xu,ywo),e(xu,ID),e(ID,xwo),e(xu,$wo),e(y,kwo),e(y,$u),e($u,Hfe),e(Hfe,Swo),e($u,Rwo),e($u,qD),e(qD,Pwo),e($u,Bwo),e(y,Nwo),e(y,ku),e(ku,Ufe),e(Ufe,Iwo),e(ku,qwo),e(ku,jD),e(jD,jwo),e(ku,Dwo),e(y,Gwo),e(y,Su),e(Su,Jfe),e(Jfe,Owo),e(Su,Vwo),e(Su,DD),e(DD,Xwo),e(Su,zwo),e(y,Qwo),e(y,Ru),e(Ru,Yfe),e(Yfe,Wwo),e(Ru,Hwo),e(Ru,GD),e(GD,Uwo),e(Ru,Jwo),e(y,Ywo),e(y,Pu),e(Pu,Kfe),e(Kfe,Kwo),e(Pu,Zwo),e(Pu,OD),e(OD,eAo),e(Pu,oAo),e(y,rAo),e(y,Bu),e(Bu,Zfe),e(Zfe,tAo),e(Bu,aAo),e(Bu,VD),e(VD,nAo),e(Bu,sAo),e(y,lAo),e(y,Nu),e(Nu,eme),e(eme,iAo),e(Nu,dAo),e(Nu,XD),e(XD,cAo),e(Nu,fAo),e(y,mAo),e(y,Iu),e(Iu,ome),e(ome,gAo),e(Iu,hAo),e(Iu,zD),e(zD,pAo),e(Iu,_Ao),e(y,uAo),e(y,qu),e(qu,rme),e(rme,bAo),e(qu,vAo),e(qu,QD),e(QD,FAo),e(qu,TAo),e(y,MAo),e(y,ju),e(ju,tme),e(tme,EAo),e(ju,CAo),e(ju,WD),e(WD,wAo),e(ju,AAo),e(y,LAo),e(y,Du),e(Du,ame),e(ame,yAo),e(Du,xAo),e(Du,HD),e(HD,$Ao),e(Du,kAo),e(y,SAo),e(y,Gu),e(Gu,nme),e(nme,RAo),e(Gu,PAo),e(Gu,UD),e(UD,BAo),e(Gu,NAo),e(y,IAo),e(y,Ou),e(Ou,sme),e(sme,qAo),e(Ou,jAo),e(Ou,JD),e(JD,DAo),e(Ou,GAo),e(y,OAo),e(y,Vu),e(Vu,lme),e(lme,VAo),e(Vu,XAo),e(Vu,YD),e(YD,zAo),e(Vu,QAo),e(Je,WAo),e(Je,Xu),e(Xu,HAo),e(Xu,ime),e(ime,UAo),e(Xu,JAo),e(Xu,dme),e(dme,YAo),e(Je,KAo),M(zu,Je,null),b(f,lXe,u),b(f,Vi,u),e(Vi,Qu),e(Qu,cme),M(PL,cme,null),e(Vi,ZAo),e(Vi,fme),e(fme,e6o),b(f,iXe,u),b(f,$o,u),M(BL,$o,null),e($o,o6o),e($o,Xi),e(Xi,r6o),e(Xi,KD),e(KD,t6o),e(Xi,a6o),e(Xi,ZD),e(ZD,n6o),e(Xi,s6o),e($o,l6o),e($o,NL),e(NL,i6o),e(NL,mme),e(mme,d6o),e(NL,c6o),e($o,f6o),e($o,it),M(IL,it,null),e(it,m6o),e(it,gme),e(gme,g6o),e(it,h6o),e(it,zi),e(zi,p6o),e(zi,hme),e(hme,_6o),e(zi,u6o),e(zi,eG),e(eG,b6o),e(zi,v6o),e(it,F6o),M(Wu,it,null),e($o,T6o),e($o,Ye),M(qL,Ye,null),e(Ye,M6o),e(Ye,pme),e(pme,E6o),e(Ye,C6o),e(Ye,Ia),e(Ia,w6o),e(Ia,_me),e(_me,A6o),e(Ia,L6o),e(Ia,ume),e(ume,y6o),e(Ia,x6o),e(Ia,bme),e(bme,$6o),e(Ia,k6o),e(Ye,S6o),e(Ye,G),e(G,Hu),e(Hu,vme),e(vme,R6o),e(Hu,P6o),e(Hu,oG),e(oG,B6o),e(Hu,N6o),e(G,I6o),e(G,Uu),e(Uu,Fme),e(Fme,q6o),e(Uu,j6o),e(Uu,rG),e(rG,D6o),e(Uu,G6o),e(G,O6o),e(G,Ju),e(Ju,Tme),e(Tme,V6o),e(Ju,X6o),e(Ju,tG),e(tG,z6o),e(Ju,Q6o),e(G,W6o),e(G,Yu),e(Yu,Mme),e(Mme,H6o),e(Yu,U6o),e(Yu,aG),e(aG,J6o),e(Yu,Y6o),e(G,K6o),e(G,Ku),e(Ku,Eme),e(Eme,Z6o),e(Ku,e7o),e(Ku,nG),e(nG,o7o),e(Ku,r7o),e(G,t7o),e(G,Zu),e(Zu,Cme),e(Cme,a7o),e(Zu,n7o),e(Zu,sG),e(sG,s7o),e(Zu,l7o),e(G,i7o),e(G,e1),e(e1,wme),e(wme,d7o),e(e1,c7o),e(e1,lG),e(lG,f7o),e(e1,m7o),e(G,g7o),e(G,o1),e(o1,Ame),e(Ame,h7o),e(o1,p7o),e(o1,iG),e(iG,_7o),e(o1,u7o),e(G,b7o),e(G,r1),e(r1,Lme),e(Lme,v7o),e(r1,F7o),e(r1,dG),e(dG,T7o),e(r1,M7o),e(G,E7o),e(G,t1),e(t1,yme),e(yme,C7o),e(t1,w7o),e(t1,cG),e(cG,A7o),e(t1,L7o),e(G,y7o),e(G,a1),e(a1,xme),e(xme,x7o),e(a1,$7o),e(a1,fG),e(fG,k7o),e(a1,S7o),e(G,R7o),e(G,n1),e(n1,$me),e($me,P7o),e(n1,B7o),e(n1,mG),e(mG,N7o),e(n1,I7o),e(G,q7o),e(G,s1),e(s1,kme),e(kme,j7o),e(s1,D7o),e(s1,gG),e(gG,G7o),e(s1,O7o),e(G,V7o),e(G,l1),e(l1,Sme),e(Sme,X7o),e(l1,z7o),e(l1,hG),e(hG,Q7o),e(l1,W7o),e(G,H7o),e(G,i1),e(i1,Rme),e(Rme,U7o),e(i1,J7o),e(i1,pG),e(pG,Y7o),e(i1,K7o),e(G,Z7o),e(G,d1),e(d1,Pme),e(Pme,eLo),e(d1,oLo),e(d1,_G),e(_G,rLo),e(d1,tLo),e(G,aLo),e(G,c1),e(c1,Bme),e(Bme,nLo),e(c1,sLo),e(c1,uG),e(uG,lLo),e(c1,iLo),e(G,dLo),e(G,f1),e(f1,Nme),e(Nme,cLo),e(f1,fLo),e(f1,bG),e(bG,mLo),e(f1,gLo),e(G,hLo),e(G,m1),e(m1,Ime),e(Ime,pLo),e(m1,_Lo),e(m1,vG),e(vG,uLo),e(m1,bLo),e(G,vLo),e(G,g1),e(g1,qme),e(qme,FLo),e(g1,TLo),e(g1,FG),e(FG,MLo),e(g1,ELo),e(G,CLo),e(G,h1),e(h1,jme),e(jme,wLo),e(h1,ALo),e(h1,TG),e(TG,LLo),e(h1,yLo),e(G,xLo),e(G,p1),e(p1,Dme),e(Dme,$Lo),e(p1,kLo),e(p1,MG),e(MG,SLo),e(p1,RLo),e(G,PLo),e(G,_1),e(_1,Gme),e(Gme,BLo),e(_1,NLo),e(_1,EG),e(EG,ILo),e(_1,qLo),e(G,jLo),e(G,u1),e(u1,Ome),e(Ome,DLo),e(u1,GLo),e(u1,CG),e(CG,OLo),e(u1,VLo),e(G,XLo),e(G,b1),e(b1,Vme),e(Vme,zLo),e(b1,QLo),e(b1,wG),e(wG,WLo),e(b1,HLo),e(G,ULo),e(G,v1),e(v1,Xme),e(Xme,JLo),e(v1,YLo),e(v1,AG),e(AG,KLo),e(v1,ZLo),e(G,eyo),e(G,F1),e(F1,zme),e(zme,oyo),e(F1,ryo),e(F1,LG),e(LG,tyo),e(F1,ayo),e(G,nyo),e(G,T1),e(T1,Qme),e(Qme,syo),e(T1,lyo),e(T1,yG),e(yG,iyo),e(T1,dyo),e(G,cyo),e(G,M1),e(M1,Wme),e(Wme,fyo),e(M1,myo),e(M1,xG),e(xG,gyo),e(M1,hyo),e(G,pyo),e(G,E1),e(E1,Hme),e(Hme,_yo),e(E1,uyo),e(E1,$G),e($G,byo),e(E1,vyo),e(G,Fyo),e(G,C1),e(C1,Ume),e(Ume,Tyo),e(C1,Myo),e(C1,kG),e(kG,Eyo),e(C1,Cyo),e(G,wyo),e(G,w1),e(w1,Jme),e(Jme,Ayo),e(w1,Lyo),e(w1,SG),e(SG,yyo),e(w1,xyo),e(G,$yo),e(G,A1),e(A1,Yme),e(Yme,kyo),e(A1,Syo),e(A1,RG),e(RG,Ryo),e(A1,Pyo),e(G,Byo),e(G,L1),e(L1,Kme),e(Kme,Nyo),e(L1,Iyo),e(L1,PG),e(PG,qyo),e(L1,jyo),e(G,Dyo),e(G,y1),e(y1,Zme),e(Zme,Gyo),e(y1,Oyo),e(y1,BG),e(BG,Vyo),e(y1,Xyo),e(G,zyo),e(G,x1),e(x1,ege),e(ege,Qyo),e(x1,Wyo),e(x1,NG),e(NG,Hyo),e(x1,Uyo),e(G,Jyo),e(G,$1),e($1,oge),e(oge,Yyo),e($1,Kyo),e($1,IG),e(IG,Zyo),e($1,e9o),e(G,o9o),e(G,k1),e(k1,rge),e(rge,r9o),e(k1,t9o),e(k1,qG),e(qG,a9o),e(k1,n9o),e(G,s9o),e(G,S1),e(S1,tge),e(tge,l9o),e(S1,i9o),e(S1,jG),e(jG,d9o),e(S1,c9o),e(G,f9o),e(G,R1),e(R1,age),e(age,m9o),e(R1,g9o),e(R1,DG),e(DG,h9o),e(R1,p9o),e(G,_9o),e(G,P1),e(P1,nge),e(nge,u9o),e(P1,b9o),e(P1,GG),e(GG,v9o),e(P1,F9o),e(G,T9o),e(G,B1),e(B1,sge),e(sge,M9o),e(B1,E9o),e(B1,OG),e(OG,C9o),e(B1,w9o),e(G,A9o),e(G,N1),e(N1,lge),e(lge,L9o),e(N1,y9o),e(N1,VG),e(VG,x9o),e(N1,$9o),e(G,k9o),e(G,I1),e(I1,ige),e(ige,S9o),e(I1,R9o),e(I1,XG),e(XG,P9o),e(I1,B9o),e(G,N9o),e(G,q1),e(q1,dge),e(dge,I9o),e(q1,q9o),e(q1,zG),e(zG,j9o),e(q1,D9o),e(Ye,G9o),e(Ye,j1),e(j1,O9o),e(j1,cge),e(cge,V9o),e(j1,X9o),e(j1,fge),e(fge,z9o),e(Ye,Q9o),M(D1,Ye,null),b(f,dXe,u),b(f,Qi,u),e(Qi,G1),e(G1,mge),M(jL,mge,null),e(Qi,W9o),e(Qi,gge),e(gge,H9o),b(f,cXe,u),b(f,ko,u),M(DL,ko,null),e(ko,U9o),e(ko,Wi),e(Wi,J9o),e(Wi,QG),e(QG,Y9o),e(Wi,K9o),e(Wi,WG),e(WG,Z9o),e(Wi,exo),e(ko,oxo),e(ko,GL),e(GL,rxo),e(GL,hge),e(hge,txo),e(GL,axo),e(ko,nxo),e(ko,dt),M(OL,dt,null),e(dt,sxo),e(dt,pge),e(pge,lxo),e(dt,ixo),e(dt,Hi),e(Hi,dxo),e(Hi,_ge),e(_ge,cxo),e(Hi,fxo),e(Hi,HG),e(HG,mxo),e(Hi,gxo),e(dt,hxo),M(O1,dt,null),e(ko,pxo),e(ko,Ke),M(VL,Ke,null),e(Ke,_xo),e(Ke,uge),e(uge,uxo),e(Ke,bxo),e(Ke,qa),e(qa,vxo),e(qa,bge),e(bge,Fxo),e(qa,Txo),e(qa,vge),e(vge,Mxo),e(qa,Exo),e(qa,Fge),e(Fge,Cxo),e(qa,wxo),e(Ke,Axo),e(Ke,z),e(z,V1),e(V1,Tge),e(Tge,Lxo),e(V1,yxo),e(V1,UG),e(UG,xxo),e(V1,$xo),e(z,kxo),e(z,X1),e(X1,Mge),e(Mge,Sxo),e(X1,Rxo),e(X1,JG),e(JG,Pxo),e(X1,Bxo),e(z,Nxo),e(z,z1),e(z1,Ege),e(Ege,Ixo),e(z1,qxo),e(z1,YG),e(YG,jxo),e(z1,Dxo),e(z,Gxo),e(z,Q1),e(Q1,Cge),e(Cge,Oxo),e(Q1,Vxo),e(Q1,KG),e(KG,Xxo),e(Q1,zxo),e(z,Qxo),e(z,W1),e(W1,wge),e(wge,Wxo),e(W1,Hxo),e(W1,ZG),e(ZG,Uxo),e(W1,Jxo),e(z,Yxo),e(z,H1),e(H1,Age),e(Age,Kxo),e(H1,Zxo),e(H1,eO),e(eO,e$o),e(H1,o$o),e(z,r$o),e(z,U1),e(U1,Lge),e(Lge,t$o),e(U1,a$o),e(U1,oO),e(oO,n$o),e(U1,s$o),e(z,l$o),e(z,J1),e(J1,yge),e(yge,i$o),e(J1,d$o),e(J1,rO),e(rO,c$o),e(J1,f$o),e(z,m$o),e(z,Y1),e(Y1,xge),e(xge,g$o),e(Y1,h$o),e(Y1,tO),e(tO,p$o),e(Y1,_$o),e(z,u$o),e(z,K1),e(K1,$ge),e($ge,b$o),e(K1,v$o),e(K1,aO),e(aO,F$o),e(K1,T$o),e(z,M$o),e(z,Z1),e(Z1,kge),e(kge,E$o),e(Z1,C$o),e(Z1,nO),e(nO,w$o),e(Z1,A$o),e(z,L$o),e(z,e2),e(e2,Sge),e(Sge,y$o),e(e2,x$o),e(e2,sO),e(sO,$$o),e(e2,k$o),e(z,S$o),e(z,o2),e(o2,Rge),e(Rge,R$o),e(o2,P$o),e(o2,lO),e(lO,B$o),e(o2,N$o),e(z,I$o),e(z,r2),e(r2,Pge),e(Pge,q$o),e(r2,j$o),e(r2,iO),e(iO,D$o),e(r2,G$o),e(z,O$o),e(z,t2),e(t2,Bge),e(Bge,V$o),e(t2,X$o),e(t2,dO),e(dO,z$o),e(t2,Q$o),e(z,W$o),e(z,a2),e(a2,Nge),e(Nge,H$o),e(a2,U$o),e(a2,cO),e(cO,J$o),e(a2,Y$o),e(z,K$o),e(z,n2),e(n2,Ige),e(Ige,Z$o),e(n2,eko),e(n2,fO),e(fO,oko),e(n2,rko),e(z,tko),e(z,s2),e(s2,qge),e(qge,ako),e(s2,nko),e(s2,mO),e(mO,sko),e(s2,lko),e(z,iko),e(z,l2),e(l2,jge),e(jge,dko),e(l2,cko),e(l2,gO),e(gO,fko),e(l2,mko),e(z,gko),e(z,i2),e(i2,Dge),e(Dge,hko),e(i2,pko),e(i2,hO),e(hO,_ko),e(i2,uko),e(z,bko),e(z,d2),e(d2,Gge),e(Gge,vko),e(d2,Fko),e(d2,pO),e(pO,Tko),e(d2,Mko),e(z,Eko),e(z,c2),e(c2,Oge),e(Oge,Cko),e(c2,wko),e(c2,_O),e(_O,Ako),e(c2,Lko),e(z,yko),e(z,f2),e(f2,Vge),e(Vge,xko),e(f2,$ko),e(f2,uO),e(uO,kko),e(f2,Sko),e(z,Rko),e(z,m2),e(m2,Xge),e(Xge,Pko),e(m2,Bko),e(m2,bO),e(bO,Nko),e(m2,Iko),e(z,qko),e(z,g2),e(g2,zge),e(zge,jko),e(g2,Dko),e(g2,vO),e(vO,Gko),e(g2,Oko),e(z,Vko),e(z,h2),e(h2,Qge),e(Qge,Xko),e(h2,zko),e(h2,FO),e(FO,Qko),e(h2,Wko),e(z,Hko),e(z,p2),e(p2,Wge),e(Wge,Uko),e(p2,Jko),e(p2,TO),e(TO,Yko),e(p2,Kko),e(z,Zko),e(z,_2),e(_2,Hge),e(Hge,eSo),e(_2,oSo),e(_2,MO),e(MO,rSo),e(_2,tSo),e(z,aSo),e(z,u2),e(u2,Uge),e(Uge,nSo),e(u2,sSo),e(u2,EO),e(EO,lSo),e(u2,iSo),e(z,dSo),e(z,b2),e(b2,Jge),e(Jge,cSo),e(b2,fSo),e(b2,CO),e(CO,mSo),e(b2,gSo),e(z,hSo),e(z,v2),e(v2,Yge),e(Yge,pSo),e(v2,_So),e(v2,wO),e(wO,uSo),e(v2,bSo),e(z,vSo),e(z,F2),e(F2,Kge),e(Kge,FSo),e(F2,TSo),e(F2,AO),e(AO,MSo),e(F2,ESo),e(z,CSo),e(z,T2),e(T2,Zge),e(Zge,wSo),e(T2,ASo),e(T2,LO),e(LO,LSo),e(T2,ySo),e(z,xSo),e(z,M2),e(M2,ehe),e(ehe,$So),e(M2,kSo),e(M2,yO),e(yO,SSo),e(M2,RSo),e(z,PSo),e(z,E2),e(E2,ohe),e(ohe,BSo),e(E2,NSo),e(E2,xO),e(xO,ISo),e(E2,qSo),e(z,jSo),e(z,C2),e(C2,rhe),e(rhe,DSo),e(C2,GSo),e(C2,$O),e($O,OSo),e(C2,VSo),e(z,XSo),e(z,w2),e(w2,the),e(the,zSo),e(w2,QSo),e(w2,kO),e(kO,WSo),e(w2,HSo),e(z,USo),e(z,A2),e(A2,ahe),e(ahe,JSo),e(A2,YSo),e(A2,SO),e(SO,KSo),e(A2,ZSo),e(z,eRo),e(z,L2),e(L2,nhe),e(nhe,oRo),e(L2,rRo),e(L2,RO),e(RO,tRo),e(L2,aRo),e(z,nRo),e(z,y2),e(y2,she),e(she,sRo),e(y2,lRo),e(y2,PO),e(PO,iRo),e(y2,dRo),e(Ke,cRo),e(Ke,x2),e(x2,fRo),e(x2,lhe),e(lhe,mRo),e(x2,gRo),e(x2,ihe),e(ihe,hRo),e(Ke,pRo),M($2,Ke,null),b(f,fXe,u),b(f,Ui,u),e(Ui,k2),e(k2,dhe),M(XL,dhe,null),e(Ui,_Ro),e(Ui,che),e(che,uRo),b(f,mXe,u),b(f,So,u),M(zL,So,null),e(So,bRo),e(So,Ji),e(Ji,vRo),e(Ji,BO),e(BO,FRo),e(Ji,TRo),e(Ji,NO),e(NO,MRo),e(Ji,ERo),e(So,CRo),e(So,QL),e(QL,wRo),e(QL,fhe),e(fhe,ARo),e(QL,LRo),e(So,yRo),e(So,ct),M(WL,ct,null),e(ct,xRo),e(ct,mhe),e(mhe,$Ro),e(ct,kRo),e(ct,Yi),e(Yi,SRo),e(Yi,ghe),e(ghe,RRo),e(Yi,PRo),e(Yi,IO),e(IO,BRo),e(Yi,NRo),e(ct,IRo),M(S2,ct,null),e(So,qRo),e(So,Ze),M(HL,Ze,null),e(Ze,jRo),e(Ze,hhe),e(hhe,DRo),e(Ze,GRo),e(Ze,ja),e(ja,ORo),e(ja,phe),e(phe,VRo),e(ja,XRo),e(ja,_he),e(_he,zRo),e(ja,QRo),e(ja,uhe),e(uhe,WRo),e(ja,HRo),e(Ze,URo),e(Ze,W),e(W,R2),e(R2,bhe),e(bhe,JRo),e(R2,YRo),e(R2,qO),e(qO,KRo),e(R2,ZRo),e(W,ePo),e(W,P2),e(P2,vhe),e(vhe,oPo),e(P2,rPo),e(P2,jO),e(jO,tPo),e(P2,aPo),e(W,nPo),e(W,B2),e(B2,Fhe),e(Fhe,sPo),e(B2,lPo),e(B2,DO),e(DO,iPo),e(B2,dPo),e(W,cPo),e(W,N2),e(N2,The),e(The,fPo),e(N2,mPo),e(N2,GO),e(GO,gPo),e(N2,hPo),e(W,pPo),e(W,I2),e(I2,Mhe),e(Mhe,_Po),e(I2,uPo),e(I2,OO),e(OO,bPo),e(I2,vPo),e(W,FPo),e(W,q2),e(q2,Ehe),e(Ehe,TPo),e(q2,MPo),e(q2,VO),e(VO,EPo),e(q2,CPo),e(W,wPo),e(W,j2),e(j2,Che),e(Che,APo),e(j2,LPo),e(j2,XO),e(XO,yPo),e(j2,xPo),e(W,$Po),e(W,D2),e(D2,whe),e(whe,kPo),e(D2,SPo),e(D2,zO),e(zO,RPo),e(D2,PPo),e(W,BPo),e(W,G2),e(G2,Ahe),e(Ahe,NPo),e(G2,IPo),e(G2,QO),e(QO,qPo),e(G2,jPo),e(W,DPo),e(W,O2),e(O2,Lhe),e(Lhe,GPo),e(O2,OPo),e(O2,WO),e(WO,VPo),e(O2,XPo),e(W,zPo),e(W,V2),e(V2,yhe),e(yhe,QPo),e(V2,WPo),e(V2,HO),e(HO,HPo),e(V2,UPo),e(W,JPo),e(W,X2),e(X2,xhe),e(xhe,YPo),e(X2,KPo),e(X2,UO),e(UO,ZPo),e(X2,eBo),e(W,oBo),e(W,z2),e(z2,$he),e($he,rBo),e(z2,tBo),e(z2,JO),e(JO,aBo),e(z2,nBo),e(W,sBo),e(W,Q2),e(Q2,khe),e(khe,lBo),e(Q2,iBo),e(Q2,YO),e(YO,dBo),e(Q2,cBo),e(W,fBo),e(W,W2),e(W2,She),e(She,mBo),e(W2,gBo),e(W2,KO),e(KO,hBo),e(W2,pBo),e(W,_Bo),e(W,H2),e(H2,Rhe),e(Rhe,uBo),e(H2,bBo),e(H2,ZO),e(ZO,vBo),e(H2,FBo),e(W,TBo),e(W,U2),e(U2,Phe),e(Phe,MBo),e(U2,EBo),e(U2,eV),e(eV,CBo),e(U2,wBo),e(W,ABo),e(W,J2),e(J2,Bhe),e(Bhe,LBo),e(J2,yBo),e(J2,oV),e(oV,xBo),e(J2,$Bo),e(W,kBo),e(W,Y2),e(Y2,Nhe),e(Nhe,SBo),e(Y2,RBo),e(Y2,rV),e(rV,PBo),e(Y2,BBo),e(W,NBo),e(W,K2),e(K2,Ihe),e(Ihe,IBo),e(K2,qBo),e(K2,tV),e(tV,jBo),e(K2,DBo),e(W,GBo),e(W,Z2),e(Z2,qhe),e(qhe,OBo),e(Z2,VBo),e(Z2,aV),e(aV,XBo),e(Z2,zBo),e(W,QBo),e(W,eb),e(eb,jhe),e(jhe,WBo),e(eb,HBo),e(eb,nV),e(nV,UBo),e(eb,JBo),e(W,YBo),e(W,ob),e(ob,Dhe),e(Dhe,KBo),e(ob,ZBo),e(ob,sV),e(sV,eNo),e(ob,oNo),e(W,rNo),e(W,rb),e(rb,Ghe),e(Ghe,tNo),e(rb,aNo),e(rb,lV),e(lV,nNo),e(rb,sNo),e(W,lNo),e(W,tb),e(tb,Ohe),e(Ohe,iNo),e(tb,dNo),e(tb,iV),e(iV,cNo),e(tb,fNo),e(W,mNo),e(W,ab),e(ab,Vhe),e(Vhe,gNo),e(ab,hNo),e(ab,dV),e(dV,pNo),e(ab,_No),e(W,uNo),e(W,nb),e(nb,Xhe),e(Xhe,bNo),e(nb,vNo),e(nb,cV),e(cV,FNo),e(nb,TNo),e(W,MNo),e(W,sb),e(sb,zhe),e(zhe,ENo),e(sb,CNo),e(sb,fV),e(fV,wNo),e(sb,ANo),e(W,LNo),e(W,lb),e(lb,Qhe),e(Qhe,yNo),e(lb,xNo),e(lb,mV),e(mV,$No),e(lb,kNo),e(W,SNo),e(W,ib),e(ib,Whe),e(Whe,RNo),e(ib,PNo),e(ib,gV),e(gV,BNo),e(ib,NNo),e(W,INo),e(W,db),e(db,Hhe),e(Hhe,qNo),e(db,jNo),e(db,hV),e(hV,DNo),e(db,GNo),e(W,ONo),e(W,cb),e(cb,Uhe),e(Uhe,VNo),e(cb,XNo),e(cb,pV),e(pV,zNo),e(cb,QNo),e(W,WNo),e(W,fb),e(fb,Jhe),e(Jhe,HNo),e(fb,UNo),e(fb,_V),e(_V,JNo),e(fb,YNo),e(W,KNo),e(W,mb),e(mb,Yhe),e(Yhe,ZNo),e(mb,eIo),e(mb,Khe),e(Khe,oIo),e(mb,rIo),e(W,tIo),e(W,gb),e(gb,Zhe),e(Zhe,aIo),e(gb,nIo),e(gb,uV),e(uV,sIo),e(gb,lIo),e(W,iIo),e(W,hb),e(hb,epe),e(epe,dIo),e(hb,cIo),e(hb,bV),e(bV,fIo),e(hb,mIo),e(W,gIo),e(W,pb),e(pb,ope),e(ope,hIo),e(pb,pIo),e(pb,vV),e(vV,_Io),e(pb,uIo),e(W,bIo),e(W,_b),e(_b,rpe),e(rpe,vIo),e(_b,FIo),e(_b,FV),e(FV,TIo),e(_b,MIo),e(Ze,EIo),e(Ze,ub),e(ub,CIo),e(ub,tpe),e(tpe,wIo),e(ub,AIo),e(ub,ape),e(ape,LIo),e(Ze,yIo),M(bb,Ze,null),b(f,gXe,u),b(f,Ki,u),e(Ki,vb),e(vb,npe),M(UL,npe,null),e(Ki,xIo),e(Ki,spe),e(spe,$Io),b(f,hXe,u),b(f,Ro,u),M(JL,Ro,null),e(Ro,kIo),e(Ro,Zi),e(Zi,SIo),e(Zi,TV),e(TV,RIo),e(Zi,PIo),e(Zi,MV),e(MV,BIo),e(Zi,NIo),e(Ro,IIo),e(Ro,YL),e(YL,qIo),e(YL,lpe),e(lpe,jIo),e(YL,DIo),e(Ro,GIo),e(Ro,ft),M(KL,ft,null),e(ft,OIo),e(ft,ipe),e(ipe,VIo),e(ft,XIo),e(ft,ed),e(ed,zIo),e(ed,dpe),e(dpe,QIo),e(ed,WIo),e(ed,EV),e(EV,HIo),e(ed,UIo),e(ft,JIo),M(Fb,ft,null),e(Ro,YIo),e(Ro,eo),M(ZL,eo,null),e(eo,KIo),e(eo,cpe),e(cpe,ZIo),e(eo,eqo),e(eo,Da),e(Da,oqo),e(Da,fpe),e(fpe,rqo),e(Da,tqo),e(Da,mpe),e(mpe,aqo),e(Da,nqo),e(Da,gpe),e(gpe,sqo),e(Da,lqo),e(eo,iqo),e(eo,pe),e(pe,Tb),e(Tb,hpe),e(hpe,dqo),e(Tb,cqo),e(Tb,CV),e(CV,fqo),e(Tb,mqo),e(pe,gqo),e(pe,Mb),e(Mb,ppe),e(ppe,hqo),e(Mb,pqo),e(Mb,wV),e(wV,_qo),e(Mb,uqo),e(pe,bqo),e(pe,Eb),e(Eb,_pe),e(_pe,vqo),e(Eb,Fqo),e(Eb,AV),e(AV,Tqo),e(Eb,Mqo),e(pe,Eqo),e(pe,Cb),e(Cb,upe),e(upe,Cqo),e(Cb,wqo),e(Cb,LV),e(LV,Aqo),e(Cb,Lqo),e(pe,yqo),e(pe,wb),e(wb,bpe),e(bpe,xqo),e(wb,$qo),e(wb,yV),e(yV,kqo),e(wb,Sqo),e(pe,Rqo),e(pe,Ab),e(Ab,vpe),e(vpe,Pqo),e(Ab,Bqo),e(Ab,xV),e(xV,Nqo),e(Ab,Iqo),e(pe,qqo),e(pe,Lb),e(Lb,Fpe),e(Fpe,jqo),e(Lb,Dqo),e(Lb,$V),e($V,Gqo),e(Lb,Oqo),e(pe,Vqo),e(pe,yb),e(yb,Tpe),e(Tpe,Xqo),e(yb,zqo),e(yb,kV),e(kV,Qqo),e(yb,Wqo),e(pe,Hqo),e(pe,xb),e(xb,Mpe),e(Mpe,Uqo),e(xb,Jqo),e(xb,SV),e(SV,Yqo),e(xb,Kqo),e(pe,Zqo),e(pe,$b),e($b,Epe),e(Epe,ejo),e($b,ojo),e($b,RV),e(RV,rjo),e($b,tjo),e(pe,ajo),e(pe,kb),e(kb,Cpe),e(Cpe,njo),e(kb,sjo),e(kb,PV),e(PV,ljo),e(kb,ijo),e(pe,djo),e(pe,Sb),e(Sb,wpe),e(wpe,cjo),e(Sb,fjo),e(Sb,BV),e(BV,mjo),e(Sb,gjo),e(pe,hjo),e(pe,Rb),e(Rb,Ape),e(Ape,pjo),e(Rb,_jo),e(Rb,NV),e(NV,ujo),e(Rb,bjo),e(pe,vjo),e(pe,Pb),e(Pb,Lpe),e(Lpe,Fjo),e(Pb,Tjo),e(Pb,IV),e(IV,Mjo),e(Pb,Ejo),e(pe,Cjo),e(pe,Bb),e(Bb,ype),e(ype,wjo),e(Bb,Ajo),e(Bb,qV),e(qV,Ljo),e(Bb,yjo),e(pe,xjo),e(pe,Nb),e(Nb,xpe),e(xpe,$jo),e(Nb,kjo),e(Nb,jV),e(jV,Sjo),e(Nb,Rjo),e(pe,Pjo),e(pe,Ib),e(Ib,$pe),e($pe,Bjo),e(Ib,Njo),e(Ib,DV),e(DV,Ijo),e(Ib,qjo),e(pe,jjo),e(pe,qb),e(qb,kpe),e(kpe,Djo),e(qb,Gjo),e(qb,GV),e(GV,Ojo),e(qb,Vjo),e(eo,Xjo),e(eo,jb),e(jb,zjo),e(jb,Spe),e(Spe,Qjo),e(jb,Wjo),e(jb,Rpe),e(Rpe,Hjo),e(eo,Ujo),M(Db,eo,null),b(f,pXe,u),b(f,od,u),e(od,Gb),e(Gb,Ppe),M(ey,Ppe,null),e(od,Jjo),e(od,Bpe),e(Bpe,Yjo),b(f,_Xe,u),b(f,Po,u),M(oy,Po,null),e(Po,Kjo),e(Po,rd),e(rd,Zjo),e(rd,OV),e(OV,eDo),e(rd,oDo),e(rd,VV),e(VV,rDo),e(rd,tDo),e(Po,aDo),e(Po,ry),e(ry,nDo),e(ry,Npe),e(Npe,sDo),e(ry,lDo),e(Po,iDo),e(Po,mt),M(ty,mt,null),e(mt,dDo),e(mt,Ipe),e(Ipe,cDo),e(mt,fDo),e(mt,td),e(td,mDo),e(td,qpe),e(qpe,gDo),e(td,hDo),e(td,XV),e(XV,pDo),e(td,_Do),e(mt,uDo),M(Ob,mt,null),e(Po,bDo),e(Po,oo),M(ay,oo,null),e(oo,vDo),e(oo,jpe),e(jpe,FDo),e(oo,TDo),e(oo,Ga),e(Ga,MDo),e(Ga,Dpe),e(Dpe,EDo),e(Ga,CDo),e(Ga,Gpe),e(Gpe,wDo),e(Ga,ADo),e(Ga,Ope),e(Ope,LDo),e(Ga,yDo),e(oo,xDo),e(oo,B),e(B,Vb),e(Vb,Vpe),e(Vpe,$Do),e(Vb,kDo),e(Vb,zV),e(zV,SDo),e(Vb,RDo),e(B,PDo),e(B,Xb),e(Xb,Xpe),e(Xpe,BDo),e(Xb,NDo),e(Xb,QV),e(QV,IDo),e(Xb,qDo),e(B,jDo),e(B,zb),e(zb,zpe),e(zpe,DDo),e(zb,GDo),e(zb,WV),e(WV,ODo),e(zb,VDo),e(B,XDo),e(B,Qb),e(Qb,Qpe),e(Qpe,zDo),e(Qb,QDo),e(Qb,HV),e(HV,WDo),e(Qb,HDo),e(B,UDo),e(B,Wb),e(Wb,Wpe),e(Wpe,JDo),e(Wb,YDo),e(Wb,UV),e(UV,KDo),e(Wb,ZDo),e(B,eGo),e(B,Hb),e(Hb,Hpe),e(Hpe,oGo),e(Hb,rGo),e(Hb,JV),e(JV,tGo),e(Hb,aGo),e(B,nGo),e(B,Ub),e(Ub,Upe),e(Upe,sGo),e(Ub,lGo),e(Ub,YV),e(YV,iGo),e(Ub,dGo),e(B,cGo),e(B,Jb),e(Jb,Jpe),e(Jpe,fGo),e(Jb,mGo),e(Jb,KV),e(KV,gGo),e(Jb,hGo),e(B,pGo),e(B,Yb),e(Yb,Ype),e(Ype,_Go),e(Yb,uGo),e(Yb,ZV),e(ZV,bGo),e(Yb,vGo),e(B,FGo),e(B,Kb),e(Kb,Kpe),e(Kpe,TGo),e(Kb,MGo),e(Kb,eX),e(eX,EGo),e(Kb,CGo),e(B,wGo),e(B,Zb),e(Zb,Zpe),e(Zpe,AGo),e(Zb,LGo),e(Zb,oX),e(oX,yGo),e(Zb,xGo),e(B,$Go),e(B,ev),e(ev,e_e),e(e_e,kGo),e(ev,SGo),e(ev,rX),e(rX,RGo),e(ev,PGo),e(B,BGo),e(B,ov),e(ov,o_e),e(o_e,NGo),e(ov,IGo),e(ov,tX),e(tX,qGo),e(ov,jGo),e(B,DGo),e(B,rv),e(rv,r_e),e(r_e,GGo),e(rv,OGo),e(rv,aX),e(aX,VGo),e(rv,XGo),e(B,zGo),e(B,tv),e(tv,t_e),e(t_e,QGo),e(tv,WGo),e(tv,nX),e(nX,HGo),e(tv,UGo),e(B,JGo),e(B,av),e(av,a_e),e(a_e,YGo),e(av,KGo),e(av,sX),e(sX,ZGo),e(av,eOo),e(B,oOo),e(B,nv),e(nv,n_e),e(n_e,rOo),e(nv,tOo),e(nv,lX),e(lX,aOo),e(nv,nOo),e(B,sOo),e(B,sv),e(sv,s_e),e(s_e,lOo),e(sv,iOo),e(sv,iX),e(iX,dOo),e(sv,cOo),e(B,fOo),e(B,lv),e(lv,l_e),e(l_e,mOo),e(lv,gOo),e(lv,dX),e(dX,hOo),e(lv,pOo),e(B,_Oo),e(B,iv),e(iv,i_e),e(i_e,uOo),e(iv,bOo),e(iv,cX),e(cX,vOo),e(iv,FOo),e(B,TOo),e(B,dv),e(dv,d_e),e(d_e,MOo),e(dv,EOo),e(dv,fX),e(fX,COo),e(dv,wOo),e(B,AOo),e(B,cv),e(cv,c_e),e(c_e,LOo),e(cv,yOo),e(cv,mX),e(mX,xOo),e(cv,$Oo),e(B,kOo),e(B,fv),e(fv,f_e),e(f_e,SOo),e(fv,ROo),e(fv,gX),e(gX,POo),e(fv,BOo),e(B,NOo),e(B,mv),e(mv,m_e),e(m_e,IOo),e(mv,qOo),e(mv,hX),e(hX,jOo),e(mv,DOo),e(B,GOo),e(B,gv),e(gv,g_e),e(g_e,OOo),e(gv,VOo),e(gv,pX),e(pX,XOo),e(gv,zOo),e(B,QOo),e(B,hv),e(hv,h_e),e(h_e,WOo),e(hv,HOo),e(hv,_X),e(_X,UOo),e(hv,JOo),e(B,YOo),e(B,pv),e(pv,p_e),e(p_e,KOo),e(pv,ZOo),e(pv,uX),e(uX,eVo),e(pv,oVo),e(B,rVo),e(B,_v),e(_v,__e),e(__e,tVo),e(_v,aVo),e(_v,bX),e(bX,nVo),e(_v,sVo),e(B,lVo),e(B,uv),e(uv,u_e),e(u_e,iVo),e(uv,dVo),e(uv,vX),e(vX,cVo),e(uv,fVo),e(B,mVo),e(B,bv),e(bv,b_e),e(b_e,gVo),e(bv,hVo),e(bv,FX),e(FX,pVo),e(bv,_Vo),e(B,uVo),e(B,vv),e(vv,v_e),e(v_e,bVo),e(vv,vVo),e(vv,TX),e(TX,FVo),e(vv,TVo),e(B,MVo),e(B,Fv),e(Fv,F_e),e(F_e,EVo),e(Fv,CVo),e(Fv,MX),e(MX,wVo),e(Fv,AVo),e(B,LVo),e(B,Tv),e(Tv,T_e),e(T_e,yVo),e(Tv,xVo),e(Tv,EX),e(EX,$Vo),e(Tv,kVo),e(B,SVo),e(B,Mv),e(Mv,M_e),e(M_e,RVo),e(Mv,PVo),e(Mv,CX),e(CX,BVo),e(Mv,NVo),e(B,IVo),e(B,Ev),e(Ev,E_e),e(E_e,qVo),e(Ev,jVo),e(Ev,wX),e(wX,DVo),e(Ev,GVo),e(B,OVo),e(B,Cv),e(Cv,C_e),e(C_e,VVo),e(Cv,XVo),e(Cv,AX),e(AX,zVo),e(Cv,QVo),e(B,WVo),e(B,wv),e(wv,w_e),e(w_e,HVo),e(wv,UVo),e(wv,LX),e(LX,JVo),e(wv,YVo),e(B,KVo),e(B,Av),e(Av,A_e),e(A_e,ZVo),e(Av,eXo),e(Av,yX),e(yX,oXo),e(Av,rXo),e(B,tXo),e(B,Lv),e(Lv,L_e),e(L_e,aXo),e(Lv,nXo),e(Lv,xX),e(xX,sXo),e(Lv,lXo),e(B,iXo),e(B,yv),e(yv,y_e),e(y_e,dXo),e(yv,cXo),e(yv,$X),e($X,fXo),e(yv,mXo),e(B,gXo),e(B,xv),e(xv,x_e),e(x_e,hXo),e(xv,pXo),e(xv,kX),e(kX,_Xo),e(xv,uXo),e(B,bXo),e(B,$v),e($v,$_e),e($_e,vXo),e($v,FXo),e($v,SX),e(SX,TXo),e($v,MXo),e(B,EXo),e(B,kv),e(kv,k_e),e(k_e,CXo),e(kv,wXo),e(kv,RX),e(RX,AXo),e(kv,LXo),e(B,yXo),e(B,Sv),e(Sv,S_e),e(S_e,xXo),e(Sv,$Xo),e(Sv,PX),e(PX,kXo),e(Sv,SXo),e(B,RXo),e(B,Rv),e(Rv,R_e),e(R_e,PXo),e(Rv,BXo),e(Rv,BX),e(BX,NXo),e(Rv,IXo),e(B,qXo),e(B,Pv),e(Pv,P_e),e(P_e,jXo),e(Pv,DXo),e(Pv,NX),e(NX,GXo),e(Pv,OXo),e(B,VXo),e(B,Bv),e(Bv,B_e),e(B_e,XXo),e(Bv,zXo),e(Bv,IX),e(IX,QXo),e(Bv,WXo),e(B,HXo),e(B,Nv),e(Nv,N_e),e(N_e,UXo),e(Nv,JXo),e(Nv,qX),e(qX,YXo),e(Nv,KXo),e(B,ZXo),e(B,Iv),e(Iv,I_e),e(I_e,ezo),e(Iv,ozo),e(Iv,jX),e(jX,rzo),e(Iv,tzo),e(B,azo),e(B,qv),e(qv,q_e),e(q_e,nzo),e(qv,szo),e(qv,DX),e(DX,lzo),e(qv,izo),e(B,dzo),e(B,jv),e(jv,j_e),e(j_e,czo),e(jv,fzo),e(jv,GX),e(GX,mzo),e(jv,gzo),e(oo,hzo),e(oo,Dv),e(Dv,pzo),e(Dv,D_e),e(D_e,_zo),e(Dv,uzo),e(Dv,G_e),e(G_e,bzo),e(oo,vzo),M(Gv,oo,null),b(f,uXe,u),b(f,ad,u),e(ad,Ov),e(Ov,O_e),M(ny,O_e,null),e(ad,Fzo),e(ad,V_e),e(V_e,Tzo),b(f,bXe,u),b(f,Bo,u),M(sy,Bo,null),e(Bo,Mzo),e(Bo,nd),e(nd,Ezo),e(nd,OX),e(OX,Czo),e(nd,wzo),e(nd,VX),e(VX,Azo),e(nd,Lzo),e(Bo,yzo),e(Bo,ly),e(ly,xzo),e(ly,X_e),e(X_e,$zo),e(ly,kzo),e(Bo,Szo),e(Bo,gt),M(iy,gt,null),e(gt,Rzo),e(gt,z_e),e(z_e,Pzo),e(gt,Bzo),e(gt,sd),e(sd,Nzo),e(sd,Q_e),e(Q_e,Izo),e(sd,qzo),e(sd,XX),e(XX,jzo),e(sd,Dzo),e(gt,Gzo),M(Vv,gt,null),e(Bo,Ozo),e(Bo,ro),M(dy,ro,null),e(ro,Vzo),e(ro,W_e),e(W_e,Xzo),e(ro,zzo),e(ro,Oa),e(Oa,Qzo),e(Oa,H_e),e(H_e,Wzo),e(Oa,Hzo),e(Oa,U_e),e(U_e,Uzo),e(Oa,Jzo),e(Oa,J_e),e(J_e,Yzo),e(Oa,Kzo),e(ro,Zzo),e(ro,Z),e(Z,Xv),e(Xv,Y_e),e(Y_e,eQo),e(Xv,oQo),e(Xv,zX),e(zX,rQo),e(Xv,tQo),e(Z,aQo),e(Z,zv),e(zv,K_e),e(K_e,nQo),e(zv,sQo),e(zv,QX),e(QX,lQo),e(zv,iQo),e(Z,dQo),e(Z,Qv),e(Qv,Z_e),e(Z_e,cQo),e(Qv,fQo),e(Qv,WX),e(WX,mQo),e(Qv,gQo),e(Z,hQo),e(Z,Wv),e(Wv,eue),e(eue,pQo),e(Wv,_Qo),e(Wv,HX),e(HX,uQo),e(Wv,bQo),e(Z,vQo),e(Z,Hv),e(Hv,oue),e(oue,FQo),e(Hv,TQo),e(Hv,UX),e(UX,MQo),e(Hv,EQo),e(Z,CQo),e(Z,Uv),e(Uv,rue),e(rue,wQo),e(Uv,AQo),e(Uv,JX),e(JX,LQo),e(Uv,yQo),e(Z,xQo),e(Z,Jv),e(Jv,tue),e(tue,$Qo),e(Jv,kQo),e(Jv,YX),e(YX,SQo),e(Jv,RQo),e(Z,PQo),e(Z,Yv),e(Yv,aue),e(aue,BQo),e(Yv,NQo),e(Yv,KX),e(KX,IQo),e(Yv,qQo),e(Z,jQo),e(Z,Kv),e(Kv,nue),e(nue,DQo),e(Kv,GQo),e(Kv,ZX),e(ZX,OQo),e(Kv,VQo),e(Z,XQo),e(Z,Zv),e(Zv,sue),e(sue,zQo),e(Zv,QQo),e(Zv,ez),e(ez,WQo),e(Zv,HQo),e(Z,UQo),e(Z,e3),e(e3,lue),e(lue,JQo),e(e3,YQo),e(e3,oz),e(oz,KQo),e(e3,ZQo),e(Z,eWo),e(Z,o3),e(o3,iue),e(iue,oWo),e(o3,rWo),e(o3,rz),e(rz,tWo),e(o3,aWo),e(Z,nWo),e(Z,r3),e(r3,due),e(due,sWo),e(r3,lWo),e(r3,tz),e(tz,iWo),e(r3,dWo),e(Z,cWo),e(Z,t3),e(t3,cue),e(cue,fWo),e(t3,mWo),e(t3,az),e(az,gWo),e(t3,hWo),e(Z,pWo),e(Z,a3),e(a3,fue),e(fue,_Wo),e(a3,uWo),e(a3,nz),e(nz,bWo),e(a3,vWo),e(Z,FWo),e(Z,n3),e(n3,mue),e(mue,TWo),e(n3,MWo),e(n3,sz),e(sz,EWo),e(n3,CWo),e(Z,wWo),e(Z,s3),e(s3,gue),e(gue,AWo),e(s3,LWo),e(s3,lz),e(lz,yWo),e(s3,xWo),e(Z,$Wo),e(Z,l3),e(l3,hue),e(hue,kWo),e(l3,SWo),e(l3,iz),e(iz,RWo),e(l3,PWo),e(Z,BWo),e(Z,i3),e(i3,pue),e(pue,NWo),e(i3,IWo),e(i3,dz),e(dz,qWo),e(i3,jWo),e(Z,DWo),e(Z,d3),e(d3,_ue),e(_ue,GWo),e(d3,OWo),e(d3,cz),e(cz,VWo),e(d3,XWo),e(Z,zWo),e(Z,c3),e(c3,uue),e(uue,QWo),e(c3,WWo),e(c3,fz),e(fz,HWo),e(c3,UWo),e(Z,JWo),e(Z,f3),e(f3,bue),e(bue,YWo),e(f3,KWo),e(f3,mz),e(mz,ZWo),e(f3,eHo),e(Z,oHo),e(Z,m3),e(m3,vue),e(vue,rHo),e(m3,tHo),e(m3,gz),e(gz,aHo),e(m3,nHo),e(Z,sHo),e(Z,g3),e(g3,Fue),e(Fue,lHo),e(g3,iHo),e(g3,hz),e(hz,dHo),e(g3,cHo),e(Z,fHo),e(Z,h3),e(h3,Tue),e(Tue,mHo),e(h3,gHo),e(h3,pz),e(pz,hHo),e(h3,pHo),e(Z,_Ho),e(Z,p3),e(p3,Mue),e(Mue,uHo),e(p3,bHo),e(p3,_z),e(_z,vHo),e(p3,FHo),e(Z,THo),e(Z,_3),e(_3,Eue),e(Eue,MHo),e(_3,EHo),e(_3,uz),e(uz,CHo),e(_3,wHo),e(Z,AHo),e(Z,u3),e(u3,Cue),e(Cue,LHo),e(u3,yHo),e(u3,bz),e(bz,xHo),e(u3,$Ho),e(Z,kHo),e(Z,b3),e(b3,wue),e(wue,SHo),e(b3,RHo),e(b3,vz),e(vz,PHo),e(b3,BHo),e(Z,NHo),e(Z,v3),e(v3,Aue),e(Aue,IHo),e(v3,qHo),e(v3,Fz),e(Fz,jHo),e(v3,DHo),e(ro,GHo),e(ro,F3),e(F3,OHo),e(F3,Lue),e(Lue,VHo),e(F3,XHo),e(F3,yue),e(yue,zHo),e(ro,QHo),M(T3,ro,null),b(f,vXe,u),b(f,ld,u),e(ld,M3),e(M3,xue),M(cy,xue,null),e(ld,WHo),e(ld,$ue),e($ue,HHo),b(f,FXe,u),b(f,No,u),M(fy,No,null),e(No,UHo),e(No,id),e(id,JHo),e(id,Tz),e(Tz,YHo),e(id,KHo),e(id,Mz),e(Mz,ZHo),e(id,eUo),e(No,oUo),e(No,my),e(my,rUo),e(my,kue),e(kue,tUo),e(my,aUo),e(No,nUo),e(No,ht),M(gy,ht,null),e(ht,sUo),e(ht,Sue),e(Sue,lUo),e(ht,iUo),e(ht,dd),e(dd,dUo),e(dd,Rue),e(Rue,cUo),e(dd,fUo),e(dd,Ez),e(Ez,mUo),e(dd,gUo),e(ht,hUo),M(E3,ht,null),e(No,pUo),e(No,to),M(hy,to,null),e(to,_Uo),e(to,Pue),e(Pue,uUo),e(to,bUo),e(to,Va),e(Va,vUo),e(Va,Bue),e(Bue,FUo),e(Va,TUo),e(Va,Nue),e(Nue,MUo),e(Va,EUo),e(Va,Iue),e(Iue,CUo),e(Va,wUo),e(to,AUo),e(to,Io),e(Io,C3),e(C3,que),e(que,LUo),e(C3,yUo),e(C3,Cz),e(Cz,xUo),e(C3,$Uo),e(Io,kUo),e(Io,w3),e(w3,jue),e(jue,SUo),e(w3,RUo),e(w3,wz),e(wz,PUo),e(w3,BUo),e(Io,NUo),e(Io,A3),e(A3,Due),e(Due,IUo),e(A3,qUo),e(A3,Az),e(Az,jUo),e(A3,DUo),e(Io,GUo),e(Io,L3),e(L3,Gue),e(Gue,OUo),e(L3,VUo),e(L3,Lz),e(Lz,XUo),e(L3,zUo),e(Io,QUo),e(Io,y3),e(y3,Oue),e(Oue,WUo),e(y3,HUo),e(y3,yz),e(yz,UUo),e(y3,JUo),e(Io,YUo),e(Io,x3),e(x3,Vue),e(Vue,KUo),e(x3,ZUo),e(x3,xz),e(xz,eJo),e(x3,oJo),e(to,rJo),e(to,$3),e($3,tJo),e($3,Xue),e(Xue,aJo),e($3,nJo),e($3,zue),e(zue,sJo),e(to,lJo),M(k3,to,null),b(f,TXe,u),b(f,cd,u),e(cd,S3),e(S3,Que),M(py,Que,null),e(cd,iJo),e(cd,Wue),e(Wue,dJo),b(f,MXe,u),b(f,qo,u),M(_y,qo,null),e(qo,cJo),e(qo,fd),e(fd,fJo),e(fd,$z),e($z,mJo),e(fd,gJo),e(fd,kz),e(kz,hJo),e(fd,pJo),e(qo,_Jo),e(qo,uy),e(uy,uJo),e(uy,Hue),e(Hue,bJo),e(uy,vJo),e(qo,FJo),e(qo,pt),M(by,pt,null),e(pt,TJo),e(pt,Uue),e(Uue,MJo),e(pt,EJo),e(pt,md),e(md,CJo),e(md,Jue),e(Jue,wJo),e(md,AJo),e(md,Sz),e(Sz,LJo),e(md,yJo),e(pt,xJo),M(R3,pt,null),e(qo,$Jo),e(qo,ao),M(vy,ao,null),e(ao,kJo),e(ao,Yue),e(Yue,SJo),e(ao,RJo),e(ao,Xa),e(Xa,PJo),e(Xa,Kue),e(Kue,BJo),e(Xa,NJo),e(Xa,Zue),e(Zue,IJo),e(Xa,qJo),e(Xa,e1e),e(e1e,jJo),e(Xa,DJo),e(ao,GJo),e(ao,U),e(U,P3),e(P3,o1e),e(o1e,OJo),e(P3,VJo),e(P3,Rz),e(Rz,XJo),e(P3,zJo),e(U,QJo),e(U,B3),e(B3,r1e),e(r1e,WJo),e(B3,HJo),e(B3,Pz),e(Pz,UJo),e(B3,JJo),e(U,YJo),e(U,N3),e(N3,t1e),e(t1e,KJo),e(N3,ZJo),e(N3,Bz),e(Bz,eYo),e(N3,oYo),e(U,rYo),e(U,I3),e(I3,a1e),e(a1e,tYo),e(I3,aYo),e(I3,Nz),e(Nz,nYo),e(I3,sYo),e(U,lYo),e(U,q3),e(q3,n1e),e(n1e,iYo),e(q3,dYo),e(q3,Iz),e(Iz,cYo),e(q3,fYo),e(U,mYo),e(U,j3),e(j3,s1e),e(s1e,gYo),e(j3,hYo),e(j3,qz),e(qz,pYo),e(j3,_Yo),e(U,uYo),e(U,D3),e(D3,l1e),e(l1e,bYo),e(D3,vYo),e(D3,jz),e(jz,FYo),e(D3,TYo),e(U,MYo),e(U,G3),e(G3,i1e),e(i1e,EYo),e(G3,CYo),e(G3,Dz),e(Dz,wYo),e(G3,AYo),e(U,LYo),e(U,O3),e(O3,d1e),e(d1e,yYo),e(O3,xYo),e(O3,Gz),e(Gz,$Yo),e(O3,kYo),e(U,SYo),e(U,V3),e(V3,c1e),e(c1e,RYo),e(V3,PYo),e(V3,Oz),e(Oz,BYo),e(V3,NYo),e(U,IYo),e(U,X3),e(X3,f1e),e(f1e,qYo),e(X3,jYo),e(X3,Vz),e(Vz,DYo),e(X3,GYo),e(U,OYo),e(U,z3),e(z3,m1e),e(m1e,VYo),e(z3,XYo),e(z3,Xz),e(Xz,zYo),e(z3,QYo),e(U,WYo),e(U,Q3),e(Q3,g1e),e(g1e,HYo),e(Q3,UYo),e(Q3,zz),e(zz,JYo),e(Q3,YYo),e(U,KYo),e(U,W3),e(W3,h1e),e(h1e,ZYo),e(W3,eKo),e(W3,Qz),e(Qz,oKo),e(W3,rKo),e(U,tKo),e(U,H3),e(H3,p1e),e(p1e,aKo),e(H3,nKo),e(H3,Wz),e(Wz,sKo),e(H3,lKo),e(U,iKo),e(U,U3),e(U3,_1e),e(_1e,dKo),e(U3,cKo),e(U3,Hz),e(Hz,fKo),e(U3,mKo),e(U,gKo),e(U,J3),e(J3,u1e),e(u1e,hKo),e(J3,pKo),e(J3,Uz),e(Uz,_Ko),e(J3,uKo),e(U,bKo),e(U,Y3),e(Y3,b1e),e(b1e,vKo),e(Y3,FKo),e(Y3,Jz),e(Jz,TKo),e(Y3,MKo),e(U,EKo),e(U,K3),e(K3,v1e),e(v1e,CKo),e(K3,wKo),e(K3,Yz),e(Yz,AKo),e(K3,LKo),e(U,yKo),e(U,Z3),e(Z3,F1e),e(F1e,xKo),e(Z3,$Ko),e(Z3,Kz),e(Kz,kKo),e(Z3,SKo),e(U,RKo),e(U,eF),e(eF,T1e),e(T1e,PKo),e(eF,BKo),e(eF,Zz),e(Zz,NKo),e(eF,IKo),e(U,qKo),e(U,oF),e(oF,M1e),e(M1e,jKo),e(oF,DKo),e(oF,eQ),e(eQ,GKo),e(oF,OKo),e(U,VKo),e(U,rF),e(rF,E1e),e(E1e,XKo),e(rF,zKo),e(rF,oQ),e(oQ,QKo),e(rF,WKo),e(U,HKo),e(U,tF),e(tF,C1e),e(C1e,UKo),e(tF,JKo),e(tF,rQ),e(rQ,YKo),e(tF,KKo),e(U,ZKo),e(U,aF),e(aF,w1e),e(w1e,eZo),e(aF,oZo),e(aF,tQ),e(tQ,rZo),e(aF,tZo),e(U,aZo),e(U,nF),e(nF,A1e),e(A1e,nZo),e(nF,sZo),e(nF,aQ),e(aQ,lZo),e(nF,iZo),e(U,dZo),e(U,sF),e(sF,L1e),e(L1e,cZo),e(sF,fZo),e(sF,nQ),e(nQ,mZo),e(sF,gZo),e(U,hZo),e(U,lF),e(lF,y1e),e(y1e,pZo),e(lF,_Zo),e(lF,sQ),e(sQ,uZo),e(lF,bZo),e(U,vZo),e(U,iF),e(iF,x1e),e(x1e,FZo),e(iF,TZo),e(iF,lQ),e(lQ,MZo),e(iF,EZo),e(U,CZo),e(U,dF),e(dF,$1e),e($1e,wZo),e(dF,AZo),e(dF,iQ),e(iQ,LZo),e(dF,yZo),e(U,xZo),e(U,cF),e(cF,k1e),e(k1e,$Zo),e(cF,kZo),e(cF,dQ),e(dQ,SZo),e(cF,RZo),e(U,PZo),e(U,fF),e(fF,S1e),e(S1e,BZo),e(fF,NZo),e(fF,cQ),e(cQ,IZo),e(fF,qZo),e(U,jZo),e(U,mF),e(mF,R1e),e(R1e,DZo),e(mF,GZo),e(mF,fQ),e(fQ,OZo),e(mF,VZo),e(U,XZo),e(U,gF),e(gF,P1e),e(P1e,zZo),e(gF,QZo),e(gF,mQ),e(mQ,WZo),e(gF,HZo),e(U,UZo),e(U,hF),e(hF,B1e),e(B1e,JZo),e(hF,YZo),e(hF,gQ),e(gQ,KZo),e(hF,ZZo),e(U,eer),e(U,pF),e(pF,N1e),e(N1e,oer),e(pF,rer),e(pF,hQ),e(hQ,ter),e(pF,aer),e(ao,ner),e(ao,_F),e(_F,ser),e(_F,I1e),e(I1e,ler),e(_F,ier),e(_F,q1e),e(q1e,der),e(ao,cer),M(uF,ao,null),b(f,EXe,u),b(f,gd,u),e(gd,bF),e(bF,j1e),M(Fy,j1e,null),e(gd,fer),e(gd,D1e),e(D1e,mer),b(f,CXe,u),b(f,jo,u),M(Ty,jo,null),e(jo,ger),e(jo,hd),e(hd,her),e(hd,pQ),e(pQ,per),e(hd,_er),e(hd,_Q),e(_Q,uer),e(hd,ber),e(jo,ver),e(jo,My),e(My,Fer),e(My,G1e),e(G1e,Ter),e(My,Mer),e(jo,Eer),e(jo,_t),M(Ey,_t,null),e(_t,Cer),e(_t,O1e),e(O1e,wer),e(_t,Aer),e(_t,pd),e(pd,Ler),e(pd,V1e),e(V1e,yer),e(pd,xer),e(pd,uQ),e(uQ,$er),e(pd,ker),e(_t,Ser),M(vF,_t,null),e(jo,Rer),e(jo,no),M(Cy,no,null),e(no,Per),e(no,X1e),e(X1e,Ber),e(no,Ner),e(no,za),e(za,Ier),e(za,z1e),e(z1e,qer),e(za,jer),e(za,Q1e),e(Q1e,Der),e(za,Ger),e(za,W1e),e(W1e,Oer),e(za,Ver),e(no,Xer),e(no,V),e(V,FF),e(FF,H1e),e(H1e,zer),e(FF,Qer),e(FF,bQ),e(bQ,Wer),e(FF,Her),e(V,Uer),e(V,TF),e(TF,U1e),e(U1e,Jer),e(TF,Yer),e(TF,vQ),e(vQ,Ker),e(TF,Zer),e(V,eor),e(V,MF),e(MF,J1e),e(J1e,oor),e(MF,ror),e(MF,FQ),e(FQ,tor),e(MF,aor),e(V,nor),e(V,EF),e(EF,Y1e),e(Y1e,sor),e(EF,lor),e(EF,TQ),e(TQ,ior),e(EF,dor),e(V,cor),e(V,CF),e(CF,K1e),e(K1e,mor),e(CF,gor),e(CF,MQ),e(MQ,hor),e(CF,por),e(V,_or),e(V,wF),e(wF,Z1e),e(Z1e,uor),e(wF,bor),e(wF,EQ),e(EQ,vor),e(wF,For),e(V,Tor),e(V,AF),e(AF,e2e),e(e2e,Mor),e(AF,Eor),e(AF,CQ),e(CQ,Cor),e(AF,wor),e(V,Aor),e(V,LF),e(LF,o2e),e(o2e,Lor),e(LF,yor),e(LF,wQ),e(wQ,xor),e(LF,$or),e(V,kor),e(V,yF),e(yF,r2e),e(r2e,Sor),e(yF,Ror),e(yF,AQ),e(AQ,Por),e(yF,Bor),e(V,Nor),e(V,xF),e(xF,t2e),e(t2e,Ior),e(xF,qor),e(xF,LQ),e(LQ,jor),e(xF,Dor),e(V,Gor),e(V,$F),e($F,a2e),e(a2e,Oor),e($F,Vor),e($F,yQ),e(yQ,Xor),e($F,zor),e(V,Qor),e(V,kF),e(kF,n2e),e(n2e,Wor),e(kF,Hor),e(kF,xQ),e(xQ,Uor),e(kF,Jor),e(V,Yor),e(V,SF),e(SF,s2e),e(s2e,Kor),e(SF,Zor),e(SF,$Q),e($Q,err),e(SF,orr),e(V,rrr),e(V,RF),e(RF,l2e),e(l2e,trr),e(RF,arr),e(RF,kQ),e(kQ,nrr),e(RF,srr),e(V,lrr),e(V,PF),e(PF,i2e),e(i2e,irr),e(PF,drr),e(PF,SQ),e(SQ,crr),e(PF,frr),e(V,mrr),e(V,BF),e(BF,d2e),e(d2e,grr),e(BF,hrr),e(BF,RQ),e(RQ,prr),e(BF,_rr),e(V,urr),e(V,NF),e(NF,c2e),e(c2e,brr),e(NF,vrr),e(NF,PQ),e(PQ,Frr),e(NF,Trr),e(V,Mrr),e(V,IF),e(IF,f2e),e(f2e,Err),e(IF,Crr),e(IF,BQ),e(BQ,wrr),e(IF,Arr),e(V,Lrr),e(V,qF),e(qF,m2e),e(m2e,yrr),e(qF,xrr),e(qF,NQ),e(NQ,$rr),e(qF,krr),e(V,Srr),e(V,jF),e(jF,g2e),e(g2e,Rrr),e(jF,Prr),e(jF,IQ),e(IQ,Brr),e(jF,Nrr),e(V,Irr),e(V,DF),e(DF,h2e),e(h2e,qrr),e(DF,jrr),e(DF,qQ),e(qQ,Drr),e(DF,Grr),e(V,Orr),e(V,GF),e(GF,p2e),e(p2e,Vrr),e(GF,Xrr),e(GF,jQ),e(jQ,zrr),e(GF,Qrr),e(V,Wrr),e(V,OF),e(OF,_2e),e(_2e,Hrr),e(OF,Urr),e(OF,DQ),e(DQ,Jrr),e(OF,Yrr),e(V,Krr),e(V,VF),e(VF,u2e),e(u2e,Zrr),e(VF,etr),e(VF,GQ),e(GQ,otr),e(VF,rtr),e(V,ttr),e(V,XF),e(XF,b2e),e(b2e,atr),e(XF,ntr),e(XF,OQ),e(OQ,str),e(XF,ltr),e(V,itr),e(V,zF),e(zF,v2e),e(v2e,dtr),e(zF,ctr),e(zF,VQ),e(VQ,ftr),e(zF,mtr),e(V,gtr),e(V,QF),e(QF,F2e),e(F2e,htr),e(QF,ptr),e(QF,XQ),e(XQ,_tr),e(QF,utr),e(V,btr),e(V,WF),e(WF,T2e),e(T2e,vtr),e(WF,Ftr),e(WF,zQ),e(zQ,Ttr),e(WF,Mtr),e(V,Etr),e(V,HF),e(HF,M2e),e(M2e,Ctr),e(HF,wtr),e(HF,QQ),e(QQ,Atr),e(HF,Ltr),e(V,ytr),e(V,UF),e(UF,E2e),e(E2e,xtr),e(UF,$tr),e(UF,WQ),e(WQ,ktr),e(UF,Str),e(V,Rtr),e(V,JF),e(JF,C2e),e(C2e,Ptr),e(JF,Btr),e(JF,HQ),e(HQ,Ntr),e(JF,Itr),e(V,qtr),e(V,YF),e(YF,w2e),e(w2e,jtr),e(YF,Dtr),e(YF,UQ),e(UQ,Gtr),e(YF,Otr),e(V,Vtr),e(V,KF),e(KF,A2e),e(A2e,Xtr),e(KF,ztr),e(KF,JQ),e(JQ,Qtr),e(KF,Wtr),e(V,Htr),e(V,ZF),e(ZF,L2e),e(L2e,Utr),e(ZF,Jtr),e(ZF,YQ),e(YQ,Ytr),e(ZF,Ktr),e(V,Ztr),e(V,eT),e(eT,y2e),e(y2e,ear),e(eT,oar),e(eT,KQ),e(KQ,rar),e(eT,tar),e(V,aar),e(V,oT),e(oT,x2e),e(x2e,nar),e(oT,sar),e(oT,ZQ),e(ZQ,lar),e(oT,iar),e(V,dar),e(V,rT),e(rT,$2e),e($2e,car),e(rT,far),e(rT,eW),e(eW,mar),e(rT,gar),e(V,har),e(V,tT),e(tT,k2e),e(k2e,par),e(tT,_ar),e(tT,oW),e(oW,uar),e(tT,bar),e(V,Far),e(V,aT),e(aT,S2e),e(S2e,Tar),e(aT,Mar),e(aT,rW),e(rW,Ear),e(aT,Car),e(V,war),e(V,nT),e(nT,R2e),e(R2e,Aar),e(nT,Lar),e(nT,tW),e(tW,yar),e(nT,xar),e(V,$ar),e(V,sT),e(sT,P2e),e(P2e,kar),e(sT,Sar),e(sT,aW),e(aW,Rar),e(sT,Par),e(V,Bar),e(V,lT),e(lT,B2e),e(B2e,Nar),e(lT,Iar),e(lT,nW),e(nW,qar),e(lT,jar),e(no,Dar),e(no,iT),e(iT,Gar),e(iT,N2e),e(N2e,Oar),e(iT,Var),e(iT,I2e),e(I2e,Xar),e(no,zar),M(dT,no,null),b(f,wXe,u),b(f,_d,u),e(_d,cT),e(cT,q2e),M(wy,q2e,null),e(_d,Qar),e(_d,j2e),e(j2e,War),b(f,AXe,u),b(f,Do,u),M(Ay,Do,null),e(Do,Har),e(Do,ud),e(ud,Uar),e(ud,sW),e(sW,Jar),e(ud,Yar),e(ud,lW),e(lW,Kar),e(ud,Zar),e(Do,enr),e(Do,Ly),e(Ly,onr),e(Ly,D2e),e(D2e,rnr),e(Ly,tnr),e(Do,anr),e(Do,ut),M(yy,ut,null),e(ut,nnr),e(ut,G2e),e(G2e,snr),e(ut,lnr),e(ut,bd),e(bd,inr),e(bd,O2e),e(O2e,dnr),e(bd,cnr),e(bd,iW),e(iW,fnr),e(bd,mnr),e(ut,gnr),M(fT,ut,null),e(Do,hnr),e(Do,so),M(xy,so,null),e(so,pnr),e(so,V2e),e(V2e,_nr),e(so,unr),e(so,Qa),e(Qa,bnr),e(Qa,X2e),e(X2e,vnr),e(Qa,Fnr),e(Qa,z2e),e(z2e,Tnr),e(Qa,Mnr),e(Qa,Q2e),e(Q2e,Enr),e(Qa,Cnr),e(so,wnr),e(so,W2e),e(W2e,mT),e(mT,H2e),e(H2e,Anr),e(mT,Lnr),e(mT,dW),e(dW,ynr),e(mT,xnr),e(so,$nr),e(so,gT),e(gT,knr),e(gT,U2e),e(U2e,Snr),e(gT,Rnr),e(gT,J2e),e(J2e,Pnr),e(so,Bnr),M(hT,so,null),b(f,LXe,u),b(f,vd,u),e(vd,pT),e(pT,Y2e),M($y,Y2e,null),e(vd,Nnr),e(vd,K2e),e(K2e,Inr),b(f,yXe,u),b(f,Go,u),M(ky,Go,null),e(Go,qnr),e(Go,Fd),e(Fd,jnr),e(Fd,cW),e(cW,Dnr),e(Fd,Gnr),e(Fd,fW),e(fW,Onr),e(Fd,Vnr),e(Go,Xnr),e(Go,Sy),e(Sy,znr),e(Sy,Z2e),e(Z2e,Qnr),e(Sy,Wnr),e(Go,Hnr),e(Go,bt),M(Ry,bt,null),e(bt,Unr),e(bt,ebe),e(ebe,Jnr),e(bt,Ynr),e(bt,Td),e(Td,Knr),e(Td,obe),e(obe,Znr),e(Td,esr),e(Td,mW),e(mW,osr),e(Td,rsr),e(bt,tsr),M(_T,bt,null),e(Go,asr),e(Go,lo),M(Py,lo,null),e(lo,nsr),e(lo,rbe),e(rbe,ssr),e(lo,lsr),e(lo,Wa),e(Wa,isr),e(Wa,tbe),e(tbe,dsr),e(Wa,csr),e(Wa,abe),e(abe,fsr),e(Wa,msr),e(Wa,nbe),e(nbe,gsr),e(Wa,hsr),e(lo,psr),e(lo,ve),e(ve,uT),e(uT,sbe),e(sbe,_sr),e(uT,usr),e(uT,gW),e(gW,bsr),e(uT,vsr),e(ve,Fsr),e(ve,bT),e(bT,lbe),e(lbe,Tsr),e(bT,Msr),e(bT,hW),e(hW,Esr),e(bT,Csr),e(ve,wsr),e(ve,vT),e(vT,ibe),e(ibe,Asr),e(vT,Lsr),e(vT,pW),e(pW,ysr),e(vT,xsr),e(ve,$sr),e(ve,FT),e(FT,dbe),e(dbe,ksr),e(FT,Ssr),e(FT,_W),e(_W,Rsr),e(FT,Psr),e(ve,Bsr),e(ve,Hs),e(Hs,cbe),e(cbe,Nsr),e(Hs,Isr),e(Hs,uW),e(uW,qsr),e(Hs,jsr),e(Hs,bW),e(bW,Dsr),e(Hs,Gsr),e(ve,Osr),e(ve,TT),e(TT,fbe),e(fbe,Vsr),e(TT,Xsr),e(TT,vW),e(vW,zsr),e(TT,Qsr),e(ve,Wsr),e(ve,Us),e(Us,mbe),e(mbe,Hsr),e(Us,Usr),e(Us,FW),e(FW,Jsr),e(Us,Ysr),e(Us,TW),e(TW,Ksr),e(Us,Zsr),e(ve,elr),e(ve,MT),e(MT,gbe),e(gbe,olr),e(MT,rlr),e(MT,MW),e(MW,tlr),e(MT,alr),e(ve,nlr),e(ve,vt),e(vt,hbe),e(hbe,slr),e(vt,llr),e(vt,EW),e(EW,ilr),e(vt,dlr),e(vt,CW),e(CW,clr),e(vt,flr),e(vt,wW),e(wW,mlr),e(vt,glr),e(ve,hlr),e(ve,ET),e(ET,pbe),e(pbe,plr),e(ET,_lr),e(ET,AW),e(AW,ulr),e(ET,blr),e(ve,vlr),e(ve,CT),e(CT,_be),e(_be,Flr),e(CT,Tlr),e(CT,LW),e(LW,Mlr),e(CT,Elr),e(ve,Clr),e(ve,wT),e(wT,ube),e(ube,wlr),e(wT,Alr),e(wT,yW),e(yW,Llr),e(wT,ylr),e(ve,xlr),e(ve,AT),e(AT,bbe),e(bbe,$lr),e(AT,klr),e(AT,xW),e(xW,Slr),e(AT,Rlr),e(ve,Plr),e(ve,LT),e(LT,vbe),e(vbe,Blr),e(LT,Nlr),e(LT,$W),e($W,Ilr),e(LT,qlr),e(ve,jlr),e(ve,yT),e(yT,Fbe),e(Fbe,Dlr),e(yT,Glr),e(yT,kW),e(kW,Olr),e(yT,Vlr),e(ve,Xlr),e(ve,xT),e(xT,Tbe),e(Tbe,zlr),e(xT,Qlr),e(xT,SW),e(SW,Wlr),e(xT,Hlr),e(lo,Ulr),e(lo,$T),e($T,Jlr),e($T,Mbe),e(Mbe,Ylr),e($T,Klr),e($T,Ebe),e(Ebe,Zlr),e(lo,eir),M(kT,lo,null),b(f,xXe,u),b(f,Md,u),e(Md,ST),e(ST,Cbe),M(By,Cbe,null),e(Md,oir),e(Md,wbe),e(wbe,rir),b(f,$Xe,u),b(f,Oo,u),M(Ny,Oo,null),e(Oo,tir),e(Oo,Ed),e(Ed,air),e(Ed,RW),e(RW,nir),e(Ed,sir),e(Ed,PW),e(PW,lir),e(Ed,iir),e(Oo,dir),e(Oo,Iy),e(Iy,cir),e(Iy,Abe),e(Abe,fir),e(Iy,mir),e(Oo,gir),e(Oo,Ft),M(qy,Ft,null),e(Ft,hir),e(Ft,Lbe),e(Lbe,pir),e(Ft,_ir),e(Ft,Cd),e(Cd,uir),e(Cd,ybe),e(ybe,bir),e(Cd,vir),e(Cd,BW),e(BW,Fir),e(Cd,Tir),e(Ft,Mir),M(RT,Ft,null),e(Oo,Eir),e(Oo,io),M(jy,io,null),e(io,Cir),e(io,xbe),e(xbe,wir),e(io,Air),e(io,Ha),e(Ha,Lir),e(Ha,$be),e($be,yir),e(Ha,xir),e(Ha,kbe),e(kbe,$ir),e(Ha,kir),e(Ha,Sbe),e(Sbe,Sir),e(Ha,Rir),e(io,Pir),e(io,Rbe),e(Rbe,PT),e(PT,Pbe),e(Pbe,Bir),e(PT,Nir),e(PT,NW),e(NW,Iir),e(PT,qir),e(io,jir),e(io,BT),e(BT,Dir),e(BT,Bbe),e(Bbe,Gir),e(BT,Oir),e(BT,Nbe),e(Nbe,Vir),e(io,Xir),M(NT,io,null),b(f,kXe,u),b(f,wd,u),e(wd,IT),e(IT,Ibe),M(Dy,Ibe,null),e(wd,zir),e(wd,qbe),e(qbe,Qir),b(f,SXe,u),b(f,Vo,u),M(Gy,Vo,null),e(Vo,Wir),e(Vo,Ad),e(Ad,Hir),e(Ad,IW),e(IW,Uir),e(Ad,Jir),e(Ad,qW),e(qW,Yir),e(Ad,Kir),e(Vo,Zir),e(Vo,Oy),e(Oy,edr),e(Oy,jbe),e(jbe,odr),e(Oy,rdr),e(Vo,tdr),e(Vo,Tt),M(Vy,Tt,null),e(Tt,adr),e(Tt,Dbe),e(Dbe,ndr),e(Tt,sdr),e(Tt,Ld),e(Ld,ldr),e(Ld,Gbe),e(Gbe,idr),e(Ld,ddr),e(Ld,jW),e(jW,cdr),e(Ld,fdr),e(Tt,mdr),M(qT,Tt,null),e(Vo,gdr),e(Vo,co),M(Xy,co,null),e(co,hdr),e(co,Obe),e(Obe,pdr),e(co,_dr),e(co,Ua),e(Ua,udr),e(Ua,Vbe),e(Vbe,bdr),e(Ua,vdr),e(Ua,Xbe),e(Xbe,Fdr),e(Ua,Tdr),e(Ua,zbe),e(zbe,Mdr),e(Ua,Edr),e(co,Cdr),e(co,Qbe),e(Qbe,jT),e(jT,Wbe),e(Wbe,wdr),e(jT,Adr),e(jT,DW),e(DW,Ldr),e(jT,ydr),e(co,xdr),e(co,DT),e(DT,$dr),e(DT,Hbe),e(Hbe,kdr),e(DT,Sdr),e(DT,Ube),e(Ube,Rdr),e(co,Pdr),M(GT,co,null),b(f,RXe,u),b(f,yd,u),e(yd,OT),e(OT,Jbe),M(zy,Jbe,null),e(yd,Bdr),e(yd,Ybe),e(Ybe,Ndr),b(f,PXe,u),b(f,Xo,u),M(Qy,Xo,null),e(Xo,Idr),e(Xo,xd),e(xd,qdr),e(xd,GW),e(GW,jdr),e(xd,Ddr),e(xd,OW),e(OW,Gdr),e(xd,Odr),e(Xo,Vdr),e(Xo,Wy),e(Wy,Xdr),e(Wy,Kbe),e(Kbe,zdr),e(Wy,Qdr),e(Xo,Wdr),e(Xo,Mt),M(Hy,Mt,null),e(Mt,Hdr),e(Mt,Zbe),e(Zbe,Udr),e(Mt,Jdr),e(Mt,$d),e($d,Ydr),e($d,eve),e(eve,Kdr),e($d,Zdr),e($d,VW),e(VW,ecr),e($d,ocr),e(Mt,rcr),M(VT,Mt,null),e(Xo,tcr),e(Xo,fo),M(Uy,fo,null),e(fo,acr),e(fo,ove),e(ove,ncr),e(fo,scr),e(fo,Ja),e(Ja,lcr),e(Ja,rve),e(rve,icr),e(Ja,dcr),e(Ja,tve),e(tve,ccr),e(Ja,fcr),e(Ja,ave),e(ave,mcr),e(Ja,gcr),e(fo,hcr),e(fo,Pe),e(Pe,XT),e(XT,nve),e(nve,pcr),e(XT,_cr),e(XT,XW),e(XW,ucr),e(XT,bcr),e(Pe,vcr),e(Pe,zT),e(zT,sve),e(sve,Fcr),e(zT,Tcr),e(zT,zW),e(zW,Mcr),e(zT,Ecr),e(Pe,Ccr),e(Pe,QT),e(QT,lve),e(lve,wcr),e(QT,Acr),e(QT,QW),e(QW,Lcr),e(QT,ycr),e(Pe,xcr),e(Pe,WT),e(WT,ive),e(ive,$cr),e(WT,kcr),e(WT,WW),e(WW,Scr),e(WT,Rcr),e(Pe,Pcr),e(Pe,HT),e(HT,dve),e(dve,Bcr),e(HT,Ncr),e(HT,HW),e(HW,Icr),e(HT,qcr),e(Pe,jcr),e(Pe,UT),e(UT,cve),e(cve,Dcr),e(UT,Gcr),e(UT,UW),e(UW,Ocr),e(UT,Vcr),e(Pe,Xcr),e(Pe,JT),e(JT,fve),e(fve,zcr),e(JT,Qcr),e(JT,JW),e(JW,Wcr),e(JT,Hcr),e(Pe,Ucr),e(Pe,YT),e(YT,mve),e(mve,Jcr),e(YT,Ycr),e(YT,YW),e(YW,Kcr),e(YT,Zcr),e(Pe,efr),e(Pe,KT),e(KT,gve),e(gve,ofr),e(KT,rfr),e(KT,KW),e(KW,tfr),e(KT,afr),e(fo,nfr),e(fo,ZT),e(ZT,sfr),e(ZT,hve),e(hve,lfr),e(ZT,ifr),e(ZT,pve),e(pve,dfr),e(fo,cfr),M(e8,fo,null),b(f,BXe,u),b(f,kd,u),e(kd,o8),e(o8,_ve),M(Jy,_ve,null),e(kd,ffr),e(kd,uve),e(uve,mfr),b(f,NXe,u),b(f,zo,u),M(Yy,zo,null),e(zo,gfr),e(zo,Sd),e(Sd,hfr),e(Sd,ZW),e(ZW,pfr),e(Sd,_fr),e(Sd,eH),e(eH,ufr),e(Sd,bfr),e(zo,vfr),e(zo,Ky),e(Ky,Ffr),e(Ky,bve),e(bve,Tfr),e(Ky,Mfr),e(zo,Efr),e(zo,Et),M(Zy,Et,null),e(Et,Cfr),e(Et,vve),e(vve,wfr),e(Et,Afr),e(Et,Rd),e(Rd,Lfr),e(Rd,Fve),e(Fve,yfr),e(Rd,xfr),e(Rd,oH),e(oH,$fr),e(Rd,kfr),e(Et,Sfr),M(r8,Et,null),e(zo,Rfr),e(zo,mo),M(e9,mo,null),e(mo,Pfr),e(mo,Tve),e(Tve,Bfr),e(mo,Nfr),e(mo,Ya),e(Ya,Ifr),e(Ya,Mve),e(Mve,qfr),e(Ya,jfr),e(Ya,Eve),e(Eve,Dfr),e(Ya,Gfr),e(Ya,Cve),e(Cve,Ofr),e(Ya,Vfr),e(mo,Xfr),e(mo,ot),e(ot,t8),e(t8,wve),e(wve,zfr),e(t8,Qfr),e(t8,rH),e(rH,Wfr),e(t8,Hfr),e(ot,Ufr),e(ot,a8),e(a8,Ave),e(Ave,Jfr),e(a8,Yfr),e(a8,tH),e(tH,Kfr),e(a8,Zfr),e(ot,emr),e(ot,n8),e(n8,Lve),e(Lve,omr),e(n8,rmr),e(n8,aH),e(aH,tmr),e(n8,amr),e(ot,nmr),e(ot,s8),e(s8,yve),e(yve,smr),e(s8,lmr),e(s8,nH),e(nH,imr),e(s8,dmr),e(ot,cmr),e(ot,l8),e(l8,xve),e(xve,fmr),e(l8,mmr),e(l8,sH),e(sH,gmr),e(l8,hmr),e(mo,pmr),e(mo,i8),e(i8,_mr),e(i8,$ve),e($ve,umr),e(i8,bmr),e(i8,kve),e(kve,vmr),e(mo,Fmr),M(d8,mo,null),b(f,IXe,u),b(f,Pd,u),e(Pd,c8),e(c8,Sve),M(o9,Sve,null),e(Pd,Tmr),e(Pd,Rve),e(Rve,Mmr),b(f,qXe,u),b(f,Qo,u),M(r9,Qo,null),e(Qo,Emr),e(Qo,Bd),e(Bd,Cmr),e(Bd,lH),e(lH,wmr),e(Bd,Amr),e(Bd,iH),e(iH,Lmr),e(Bd,ymr),e(Qo,xmr),e(Qo,t9),e(t9,$mr),e(t9,Pve),e(Pve,kmr),e(t9,Smr),e(Qo,Rmr),e(Qo,Ct),M(a9,Ct,null),e(Ct,Pmr),e(Ct,Bve),e(Bve,Bmr),e(Ct,Nmr),e(Ct,Nd),e(Nd,Imr),e(Nd,Nve),e(Nve,qmr),e(Nd,jmr),e(Nd,dH),e(dH,Dmr),e(Nd,Gmr),e(Ct,Omr),M(f8,Ct,null),e(Qo,Vmr),e(Qo,go),M(n9,go,null),e(go,Xmr),e(go,Ive),e(Ive,zmr),e(go,Qmr),e(go,Ka),e(Ka,Wmr),e(Ka,qve),e(qve,Hmr),e(Ka,Umr),e(Ka,jve),e(jve,Jmr),e(Ka,Ymr),e(Ka,Dve),e(Dve,Kmr),e(Ka,Zmr),e(go,egr),e(go,Le),e(Le,m8),e(m8,Gve),e(Gve,ogr),e(m8,rgr),e(m8,cH),e(cH,tgr),e(m8,agr),e(Le,ngr),e(Le,g8),e(g8,Ove),e(Ove,sgr),e(g8,lgr),e(g8,fH),e(fH,igr),e(g8,dgr),e(Le,cgr),e(Le,h8),e(h8,Vve),e(Vve,fgr),e(h8,mgr),e(h8,mH),e(mH,ggr),e(h8,hgr),e(Le,pgr),e(Le,p8),e(p8,Xve),e(Xve,_gr),e(p8,ugr),e(p8,gH),e(gH,bgr),e(p8,vgr),e(Le,Fgr),e(Le,_8),e(_8,zve),e(zve,Tgr),e(_8,Mgr),e(_8,hH),e(hH,Egr),e(_8,Cgr),e(Le,wgr),e(Le,u8),e(u8,Qve),e(Qve,Agr),e(u8,Lgr),e(u8,pH),e(pH,ygr),e(u8,xgr),e(Le,$gr),e(Le,b8),e(b8,Wve),e(Wve,kgr),e(b8,Sgr),e(b8,_H),e(_H,Rgr),e(b8,Pgr),e(Le,Bgr),e(Le,v8),e(v8,Hve),e(Hve,Ngr),e(v8,Igr),e(v8,uH),e(uH,qgr),e(v8,jgr),e(Le,Dgr),e(Le,F8),e(F8,Uve),e(Uve,Ggr),e(F8,Ogr),e(F8,bH),e(bH,Vgr),e(F8,Xgr),e(Le,zgr),e(Le,T8),e(T8,Jve),e(Jve,Qgr),e(T8,Wgr),e(T8,vH),e(vH,Hgr),e(T8,Ugr),e(go,Jgr),e(go,M8),e(M8,Ygr),e(M8,Yve),e(Yve,Kgr),e(M8,Zgr),e(M8,Kve),e(Kve,ehr),e(go,ohr),M(E8,go,null),b(f,jXe,u),b(f,Id,u),e(Id,C8),e(C8,Zve),M(s9,Zve,null),e(Id,rhr),e(Id,e3e),e(e3e,thr),b(f,DXe,u),b(f,Wo,u),M(l9,Wo,null),e(Wo,ahr),e(Wo,qd),e(qd,nhr),e(qd,FH),e(FH,shr),e(qd,lhr),e(qd,TH),e(TH,ihr),e(qd,dhr),e(Wo,chr),e(Wo,i9),e(i9,fhr),e(i9,o3e),e(o3e,mhr),e(i9,ghr),e(Wo,hhr),e(Wo,wt),M(d9,wt,null),e(wt,phr),e(wt,r3e),e(r3e,_hr),e(wt,uhr),e(wt,jd),e(jd,bhr),e(jd,t3e),e(t3e,vhr),e(jd,Fhr),e(jd,MH),e(MH,Thr),e(jd,Mhr),e(wt,Ehr),M(w8,wt,null),e(Wo,Chr),e(Wo,ho),M(c9,ho,null),e(ho,whr),e(ho,a3e),e(a3e,Ahr),e(ho,Lhr),e(ho,Za),e(Za,yhr),e(Za,n3e),e(n3e,xhr),e(Za,$hr),e(Za,s3e),e(s3e,khr),e(Za,Shr),e(Za,l3e),e(l3e,Rhr),e(Za,Phr),e(ho,Bhr),e(ho,f9),e(f9,A8),e(A8,i3e),e(i3e,Nhr),e(A8,Ihr),e(A8,EH),e(EH,qhr),e(A8,jhr),e(f9,Dhr),e(f9,L8),e(L8,d3e),e(d3e,Ghr),e(L8,Ohr),e(L8,CH),e(CH,Vhr),e(L8,Xhr),e(ho,zhr),e(ho,y8),e(y8,Qhr),e(y8,c3e),e(c3e,Whr),e(y8,Hhr),e(y8,f3e),e(f3e,Uhr),e(ho,Jhr),M(x8,ho,null),b(f,GXe,u),b(f,Dd,u),e(Dd,$8),e($8,m3e),M(m9,m3e,null),e(Dd,Yhr),e(Dd,g3e),e(g3e,Khr),b(f,OXe,u),b(f,Ho,u),M(g9,Ho,null),e(Ho,Zhr),e(Ho,Gd),e(Gd,epr),e(Gd,wH),e(wH,opr),e(Gd,rpr),e(Gd,AH),e(AH,tpr),e(Gd,apr),e(Ho,npr),e(Ho,h9),e(h9,spr),e(h9,h3e),e(h3e,lpr),e(h9,ipr),e(Ho,dpr),e(Ho,At),M(p9,At,null),e(At,cpr),e(At,p3e),e(p3e,fpr),e(At,mpr),e(At,Od),e(Od,gpr),e(Od,_3e),e(_3e,hpr),e(Od,ppr),e(Od,LH),e(LH,_pr),e(Od,upr),e(At,bpr),M(k8,At,null),e(Ho,vpr),e(Ho,po),M(_9,po,null),e(po,Fpr),e(po,u3e),e(u3e,Tpr),e(po,Mpr),e(po,en),e(en,Epr),e(en,b3e),e(b3e,Cpr),e(en,wpr),e(en,v3e),e(v3e,Apr),e(en,Lpr),e(en,F3e),e(F3e,ypr),e(en,xpr),e(po,$pr),e(po,rt),e(rt,S8),e(S8,T3e),e(T3e,kpr),e(S8,Spr),e(S8,yH),e(yH,Rpr),e(S8,Ppr),e(rt,Bpr),e(rt,R8),e(R8,M3e),e(M3e,Npr),e(R8,Ipr),e(R8,xH),e(xH,qpr),e(R8,jpr),e(rt,Dpr),e(rt,P8),e(P8,E3e),e(E3e,Gpr),e(P8,Opr),e(P8,$H),e($H,Vpr),e(P8,Xpr),e(rt,zpr),e(rt,B8),e(B8,C3e),e(C3e,Qpr),e(B8,Wpr),e(B8,kH),e(kH,Hpr),e(B8,Upr),e(rt,Jpr),e(rt,N8),e(N8,w3e),e(w3e,Ypr),e(N8,Kpr),e(N8,SH),e(SH,Zpr),e(N8,e_r),e(po,o_r),e(po,I8),e(I8,r_r),e(I8,A3e),e(A3e,t_r),e(I8,a_r),e(I8,L3e),e(L3e,n_r),e(po,s_r),M(q8,po,null),b(f,VXe,u),b(f,Vd,u),e(Vd,j8),e(j8,y3e),M(u9,y3e,null),e(Vd,l_r),e(Vd,x3e),e(x3e,i_r),b(f,XXe,u),b(f,Uo,u),M(b9,Uo,null),e(Uo,d_r),e(Uo,Xd),e(Xd,c_r),e(Xd,RH),e(RH,f_r),e(Xd,m_r),e(Xd,PH),e(PH,g_r),e(Xd,h_r),e(Uo,p_r),e(Uo,v9),e(v9,__r),e(v9,$3e),e($3e,u_r),e(v9,b_r),e(Uo,v_r),e(Uo,Lt),M(F9,Lt,null),e(Lt,F_r),e(Lt,k3e),e(k3e,T_r),e(Lt,M_r),e(Lt,zd),e(zd,E_r),e(zd,S3e),e(S3e,C_r),e(zd,w_r),e(zd,BH),e(BH,A_r),e(zd,L_r),e(Lt,y_r),M(D8,Lt,null),e(Uo,x_r),e(Uo,_o),M(T9,_o,null),e(_o,$_r),e(_o,R3e),e(R3e,k_r),e(_o,S_r),e(_o,on),e(on,R_r),e(on,P3e),e(P3e,P_r),e(on,B_r),e(on,B3e),e(B3e,N_r),e(on,I_r),e(on,N3e),e(N3e,q_r),e(on,j_r),e(_o,D_r),e(_o,Qd),e(Qd,G8),e(G8,I3e),e(I3e,G_r),e(G8,O_r),e(G8,NH),e(NH,V_r),e(G8,X_r),e(Qd,z_r),e(Qd,O8),e(O8,q3e),e(q3e,Q_r),e(O8,W_r),e(O8,IH),e(IH,H_r),e(O8,U_r),e(Qd,J_r),e(Qd,V8),e(V8,j3e),e(j3e,Y_r),e(V8,K_r),e(V8,qH),e(qH,Z_r),e(V8,eur),e(_o,our),e(_o,X8),e(X8,rur),e(X8,D3e),e(D3e,tur),e(X8,aur),e(X8,G3e),e(G3e,nur),e(_o,sur),M(z8,_o,null),b(f,zXe,u),b(f,Wd,u),e(Wd,Q8),e(Q8,O3e),M(M9,O3e,null),e(Wd,lur),e(Wd,V3e),e(V3e,iur),b(f,QXe,u),b(f,Jo,u),M(E9,Jo,null),e(Jo,dur),e(Jo,Hd),e(Hd,cur),e(Hd,jH),e(jH,fur),e(Hd,mur),e(Hd,DH),e(DH,gur),e(Hd,hur),e(Jo,pur),e(Jo,C9),e(C9,_ur),e(C9,X3e),e(X3e,uur),e(C9,bur),e(Jo,vur),e(Jo,yt),M(w9,yt,null),e(yt,Fur),e(yt,z3e),e(z3e,Tur),e(yt,Mur),e(yt,Ud),e(Ud,Eur),e(Ud,Q3e),e(Q3e,Cur),e(Ud,wur),e(Ud,GH),e(GH,Aur),e(Ud,Lur),e(yt,yur),M(W8,yt,null),e(Jo,xur),e(Jo,uo),M(A9,uo,null),e(uo,$ur),e(uo,W3e),e(W3e,kur),e(uo,Sur),e(uo,rn),e(rn,Rur),e(rn,H3e),e(H3e,Pur),e(rn,Bur),e(rn,U3e),e(U3e,Nur),e(rn,Iur),e(rn,J3e),e(J3e,qur),e(rn,jur),e(uo,Dur),e(uo,L9),e(L9,H8),e(H8,Y3e),e(Y3e,Gur),e(H8,Our),e(H8,OH),e(OH,Vur),e(H8,Xur),e(L9,zur),e(L9,U8),e(U8,K3e),e(K3e,Qur),e(U8,Wur),e(U8,VH),e(VH,Hur),e(U8,Uur),e(uo,Jur),e(uo,J8),e(J8,Yur),e(J8,Z3e),e(Z3e,Kur),e(J8,Zur),e(J8,eFe),e(eFe,e1r),e(uo,o1r),M(Y8,uo,null),b(f,WXe,u),b(f,Jd,u),e(Jd,K8),e(K8,oFe),M(y9,oFe,null),e(Jd,r1r),e(Jd,rFe),e(rFe,t1r),b(f,HXe,u),b(f,Yo,u),M(x9,Yo,null),e(Yo,a1r),e(Yo,Yd),e(Yd,n1r),e(Yd,XH),e(XH,s1r),e(Yd,l1r),e(Yd,zH),e(zH,i1r),e(Yd,d1r),e(Yo,c1r),e(Yo,$9),e($9,f1r),e($9,tFe),e(tFe,m1r),e($9,g1r),e(Yo,h1r),e(Yo,xt),M(k9,xt,null),e(xt,p1r),e(xt,aFe),e(aFe,_1r),e(xt,u1r),e(xt,Kd),e(Kd,b1r),e(Kd,nFe),e(nFe,v1r),e(Kd,F1r),e(Kd,QH),e(QH,T1r),e(Kd,M1r),e(xt,E1r),M(Z8,xt,null),e(Yo,C1r),e(Yo,bo),M(S9,bo,null),e(bo,w1r),e(bo,sFe),e(sFe,A1r),e(bo,L1r),e(bo,tn),e(tn,y1r),e(tn,lFe),e(lFe,x1r),e(tn,$1r),e(tn,iFe),e(iFe,k1r),e(tn,S1r),e(tn,dFe),e(dFe,R1r),e(tn,P1r),e(bo,B1r),e(bo,cFe),e(cFe,eM),e(eM,fFe),e(fFe,N1r),e(eM,I1r),e(eM,WH),e(WH,q1r),e(eM,j1r),e(bo,D1r),e(bo,oM),e(oM,G1r),e(oM,mFe),e(mFe,O1r),e(oM,V1r),e(oM,gFe),e(gFe,X1r),e(bo,z1r),M(rM,bo,null),b(f,UXe,u),b(f,Zd,u),e(Zd,tM),e(tM,hFe),M(R9,hFe,null),e(Zd,Q1r),e(Zd,pFe),e(pFe,W1r),b(f,JXe,u),b(f,Ko,u),M(P9,Ko,null),e(Ko,H1r),e(Ko,ec),e(ec,U1r),e(ec,HH),e(HH,J1r),e(ec,Y1r),e(ec,UH),e(UH,K1r),e(ec,Z1r),e(Ko,e2r),e(Ko,B9),e(B9,o2r),e(B9,_Fe),e(_Fe,r2r),e(B9,t2r),e(Ko,a2r),e(Ko,$t),M(N9,$t,null),e($t,n2r),e($t,uFe),e(uFe,s2r),e($t,l2r),e($t,oc),e(oc,i2r),e(oc,bFe),e(bFe,d2r),e(oc,c2r),e(oc,JH),e(JH,f2r),e(oc,m2r),e($t,g2r),M(aM,$t,null),e(Ko,h2r),e(Ko,vo),M(I9,vo,null),e(vo,p2r),e(vo,vFe),e(vFe,_2r),e(vo,u2r),e(vo,an),e(an,b2r),e(an,FFe),e(FFe,v2r),e(an,F2r),e(an,TFe),e(TFe,T2r),e(an,M2r),e(an,MFe),e(MFe,E2r),e(an,C2r),e(vo,w2r),e(vo,tt),e(tt,nM),e(nM,EFe),e(EFe,A2r),e(nM,L2r),e(nM,YH),e(YH,y2r),e(nM,x2r),e(tt,$2r),e(tt,sM),e(sM,CFe),e(CFe,k2r),e(sM,S2r),e(sM,KH),e(KH,R2r),e(sM,P2r),e(tt,B2r),e(tt,lM),e(lM,wFe),e(wFe,N2r),e(lM,I2r),e(lM,ZH),e(ZH,q2r),e(lM,j2r),e(tt,D2r),e(tt,iM),e(iM,AFe),e(AFe,G2r),e(iM,O2r),e(iM,eU),e(eU,V2r),e(iM,X2r),e(tt,z2r),e(tt,dM),e(dM,LFe),e(LFe,Q2r),e(dM,W2r),e(dM,oU),e(oU,H2r),e(dM,U2r),e(vo,J2r),e(vo,cM),e(cM,Y2r),e(cM,yFe),e(yFe,K2r),e(cM,Z2r),e(cM,xFe),e(xFe,ebr),e(vo,obr),M(fM,vo,null),b(f,YXe,u),b(f,rc,u),e(rc,mM),e(mM,$Fe),M(q9,$Fe,null),e(rc,rbr),e(rc,kFe),e(kFe,tbr),b(f,KXe,u),b(f,Zo,u),M(j9,Zo,null),e(Zo,abr),e(Zo,tc),e(tc,nbr),e(tc,rU),e(rU,sbr),e(tc,lbr),e(tc,tU),e(tU,ibr),e(tc,dbr),e(Zo,cbr),e(Zo,D9),e(D9,fbr),e(D9,SFe),e(SFe,mbr),e(D9,gbr),e(Zo,hbr),e(Zo,kt),M(G9,kt,null),e(kt,pbr),e(kt,RFe),e(RFe,_br),e(kt,ubr),e(kt,ac),e(ac,bbr),e(ac,PFe),e(PFe,vbr),e(ac,Fbr),e(ac,aU),e(aU,Tbr),e(ac,Mbr),e(kt,Ebr),M(gM,kt,null),e(Zo,Cbr),e(Zo,Fo),M(O9,Fo,null),e(Fo,wbr),e(Fo,BFe),e(BFe,Abr),e(Fo,Lbr),e(Fo,nn),e(nn,ybr),e(nn,NFe),e(NFe,xbr),e(nn,$br),e(nn,IFe),e(IFe,kbr),e(nn,Sbr),e(nn,qFe),e(qFe,Rbr),e(nn,Pbr),e(Fo,Bbr),e(Fo,jFe),e(jFe,hM),e(hM,DFe),e(DFe,Nbr),e(hM,Ibr),e(hM,nU),e(nU,qbr),e(hM,jbr),e(Fo,Dbr),e(Fo,pM),e(pM,Gbr),e(pM,GFe),e(GFe,Obr),e(pM,Vbr),e(pM,OFe),e(OFe,Xbr),e(Fo,zbr),M(_M,Fo,null),b(f,ZXe,u),b(f,nc,u),e(nc,uM),e(uM,VFe),M(V9,VFe,null),e(nc,Qbr),e(nc,XFe),e(XFe,Wbr),b(f,eze,u),b(f,er,u),M(X9,er,null),e(er,Hbr),e(er,sc),e(sc,Ubr),e(sc,sU),e(sU,Jbr),e(sc,Ybr),e(sc,lU),e(lU,Kbr),e(sc,Zbr),e(er,evr),e(er,z9),e(z9,ovr),e(z9,zFe),e(zFe,rvr),e(z9,tvr),e(er,avr),e(er,St),M(Q9,St,null),e(St,nvr),e(St,QFe),e(QFe,svr),e(St,lvr),e(St,lc),e(lc,ivr),e(lc,WFe),e(WFe,dvr),e(lc,cvr),e(lc,iU),e(iU,fvr),e(lc,mvr),e(St,gvr),M(bM,St,null),e(er,hvr),e(er,xr),M(W9,xr,null),e(xr,pvr),e(xr,HFe),e(HFe,_vr),e(xr,uvr),e(xr,sn),e(sn,bvr),e(sn,UFe),e(UFe,vvr),e(sn,Fvr),e(sn,JFe),e(JFe,Tvr),e(sn,Mvr),e(sn,YFe),e(YFe,Evr),e(sn,Cvr),e(xr,wvr),e(xr,j),e(j,vM),e(vM,KFe),e(KFe,Avr),e(vM,Lvr),e(vM,dU),e(dU,yvr),e(vM,xvr),e(j,$vr),e(j,FM),e(FM,ZFe),e(ZFe,kvr),e(FM,Svr),e(FM,cU),e(cU,Rvr),e(FM,Pvr),e(j,Bvr),e(j,TM),e(TM,eTe),e(eTe,Nvr),e(TM,Ivr),e(TM,fU),e(fU,qvr),e(TM,jvr),e(j,Dvr),e(j,MM),e(MM,oTe),e(oTe,Gvr),e(MM,Ovr),e(MM,mU),e(mU,Vvr),e(MM,Xvr),e(j,zvr),e(j,EM),e(EM,rTe),e(rTe,Qvr),e(EM,Wvr),e(EM,gU),e(gU,Hvr),e(EM,Uvr),e(j,Jvr),e(j,CM),e(CM,tTe),e(tTe,Yvr),e(CM,Kvr),e(CM,hU),e(hU,Zvr),e(CM,e3r),e(j,o3r),e(j,wM),e(wM,aTe),e(aTe,r3r),e(wM,t3r),e(wM,pU),e(pU,a3r),e(wM,n3r),e(j,s3r),e(j,AM),e(AM,nTe),e(nTe,l3r),e(AM,i3r),e(AM,_U),e(_U,d3r),e(AM,c3r),e(j,f3r),e(j,LM),e(LM,sTe),e(sTe,m3r),e(LM,g3r),e(LM,uU),e(uU,h3r),e(LM,p3r),e(j,_3r),e(j,yM),e(yM,lTe),e(lTe,u3r),e(yM,b3r),e(yM,bU),e(bU,v3r),e(yM,F3r),e(j,T3r),e(j,xM),e(xM,iTe),e(iTe,M3r),e(xM,E3r),e(xM,vU),e(vU,C3r),e(xM,w3r),e(j,A3r),e(j,$M),e($M,dTe),e(dTe,L3r),e($M,y3r),e($M,FU),e(FU,x3r),e($M,$3r),e(j,k3r),e(j,kM),e(kM,cTe),e(cTe,S3r),e(kM,R3r),e(kM,TU),e(TU,P3r),e(kM,B3r),e(j,N3r),e(j,SM),e(SM,fTe),e(fTe,I3r),e(SM,q3r),e(SM,MU),e(MU,j3r),e(SM,D3r),e(j,G3r),e(j,RM),e(RM,mTe),e(mTe,O3r),e(RM,V3r),e(RM,EU),e(EU,X3r),e(RM,z3r),e(j,Q3r),e(j,PM),e(PM,gTe),e(gTe,W3r),e(PM,H3r),e(PM,CU),e(CU,U3r),e(PM,J3r),e(j,Y3r),e(j,BM),e(BM,hTe),e(hTe,K3r),e(BM,Z3r),e(BM,wU),e(wU,eFr),e(BM,oFr),e(j,rFr),e(j,Js),e(Js,pTe),e(pTe,tFr),e(Js,aFr),e(Js,AU),e(AU,nFr),e(Js,sFr),e(Js,LU),e(LU,lFr),e(Js,iFr),e(j,dFr),e(j,NM),e(NM,_Te),e(_Te,cFr),e(NM,fFr),e(NM,yU),e(yU,mFr),e(NM,gFr),e(j,hFr),e(j,IM),e(IM,uTe),e(uTe,pFr),e(IM,_Fr),e(IM,xU),e(xU,uFr),e(IM,bFr),e(j,vFr),e(j,qM),e(qM,bTe),e(bTe,FFr),e(qM,TFr),e(qM,$U),e($U,MFr),e(qM,EFr),e(j,CFr),e(j,jM),e(jM,vTe),e(vTe,wFr),e(jM,AFr),e(jM,kU),e(kU,LFr),e(jM,yFr),e(j,xFr),e(j,DM),e(DM,FTe),e(FTe,$Fr),e(DM,kFr),e(DM,SU),e(SU,SFr),e(DM,RFr),e(j,PFr),e(j,GM),e(GM,TTe),e(TTe,BFr),e(GM,NFr),e(GM,RU),e(RU,IFr),e(GM,qFr),e(j,jFr),e(j,OM),e(OM,MTe),e(MTe,DFr),e(OM,GFr),e(OM,PU),e(PU,OFr),e(OM,VFr),e(j,XFr),e(j,VM),e(VM,ETe),e(ETe,zFr),e(VM,QFr),e(VM,BU),e(BU,WFr),e(VM,HFr),e(j,UFr),e(j,XM),e(XM,CTe),e(CTe,JFr),e(XM,YFr),e(XM,NU),e(NU,KFr),e(XM,ZFr),e(j,eTr),e(j,zM),e(zM,wTe),e(wTe,oTr),e(zM,rTr),e(zM,IU),e(IU,tTr),e(zM,aTr),e(j,nTr),e(j,QM),e(QM,ATe),e(ATe,sTr),e(QM,lTr),e(QM,qU),e(qU,iTr),e(QM,dTr),e(j,cTr),e(j,WM),e(WM,LTe),e(LTe,fTr),e(WM,mTr),e(WM,jU),e(jU,gTr),e(WM,hTr),e(j,pTr),e(j,HM),e(HM,yTe),e(yTe,_Tr),e(HM,uTr),e(HM,DU),e(DU,bTr),e(HM,vTr),e(j,FTr),e(j,UM),e(UM,xTe),e(xTe,TTr),e(UM,MTr),e(UM,GU),e(GU,ETr),e(UM,CTr),e(j,wTr),e(j,JM),e(JM,$Te),e($Te,ATr),e(JM,LTr),e(JM,OU),e(OU,yTr),e(JM,xTr),e(j,$Tr),e(j,YM),e(YM,kTe),e(kTe,kTr),e(YM,STr),e(YM,VU),e(VU,RTr),e(YM,PTr),e(j,BTr),e(j,KM),e(KM,STe),e(STe,NTr),e(KM,ITr),e(KM,XU),e(XU,qTr),e(KM,jTr),e(j,DTr),e(j,ZM),e(ZM,RTe),e(RTe,GTr),e(ZM,OTr),e(ZM,zU),e(zU,VTr),e(ZM,XTr),e(j,zTr),e(j,e4),e(e4,PTe),e(PTe,QTr),e(e4,WTr),e(e4,QU),e(QU,HTr),e(e4,UTr),e(j,JTr),e(j,o4),e(o4,BTe),e(BTe,YTr),e(o4,KTr),e(o4,WU),e(WU,ZTr),e(o4,e8r),e(j,o8r),e(j,r4),e(r4,NTe),e(NTe,r8r),e(r4,t8r),e(r4,HU),e(HU,a8r),e(r4,n8r),e(j,s8r),e(j,t4),e(t4,ITe),e(ITe,l8r),e(t4,i8r),e(t4,UU),e(UU,d8r),e(t4,c8r),e(j,f8r),e(j,a4),e(a4,qTe),e(qTe,m8r),e(a4,g8r),e(a4,JU),e(JU,h8r),e(a4,p8r),e(j,_8r),e(j,n4),e(n4,jTe),e(jTe,u8r),e(n4,b8r),e(n4,YU),e(YU,v8r),e(n4,F8r),e(j,T8r),e(j,s4),e(s4,DTe),e(DTe,M8r),e(s4,E8r),e(s4,KU),e(KU,C8r),e(s4,w8r),e(j,A8r),e(j,l4),e(l4,GTe),e(GTe,L8r),e(l4,y8r),e(l4,ZU),e(ZU,x8r),e(l4,$8r),e(j,k8r),e(j,i4),e(i4,OTe),e(OTe,S8r),e(i4,R8r),e(i4,eJ),e(eJ,P8r),e(i4,B8r),e(j,N8r),e(j,d4),e(d4,VTe),e(VTe,I8r),e(d4,q8r),e(d4,oJ),e(oJ,j8r),e(d4,D8r),e(j,G8r),e(j,c4),e(c4,XTe),e(XTe,O8r),e(c4,V8r),e(c4,rJ),e(rJ,X8r),e(c4,z8r),e(j,Q8r),e(j,f4),e(f4,zTe),e(zTe,W8r),e(f4,H8r),e(f4,tJ),e(tJ,U8r),e(f4,J8r),e(j,Y8r),e(j,m4),e(m4,QTe),e(QTe,K8r),e(m4,Z8r),e(m4,aJ),e(aJ,eMr),e(m4,oMr),e(xr,rMr),M(g4,xr,null),b(f,oze,u),b(f,ic,u),e(ic,h4),e(h4,WTe),M(H9,WTe,null),e(ic,tMr),e(ic,HTe),e(HTe,aMr),b(f,rze,u),b(f,or,u),M(U9,or,null),e(or,nMr),e(or,dc),e(dc,sMr),e(dc,nJ),e(nJ,lMr),e(dc,iMr),e(dc,sJ),e(sJ,dMr),e(dc,cMr),e(or,fMr),e(or,J9),e(J9,mMr),e(J9,UTe),e(UTe,gMr),e(J9,hMr),e(or,pMr),e(or,Rt),M(Y9,Rt,null),e(Rt,_Mr),e(Rt,JTe),e(JTe,uMr),e(Rt,bMr),e(Rt,cc),e(cc,vMr),e(cc,YTe),e(YTe,FMr),e(cc,TMr),e(cc,lJ),e(lJ,MMr),e(cc,EMr),e(Rt,CMr),M(p4,Rt,null),e(or,wMr),e(or,$r),M(K9,$r,null),e($r,AMr),e($r,KTe),e(KTe,LMr),e($r,yMr),e($r,ln),e(ln,xMr),e(ln,ZTe),e(ZTe,$Mr),e(ln,kMr),e(ln,e8e),e(e8e,SMr),e(ln,RMr),e(ln,o8e),e(o8e,PMr),e(ln,BMr),e($r,NMr),e($r,se),e(se,_4),e(_4,r8e),e(r8e,IMr),e(_4,qMr),e(_4,iJ),e(iJ,jMr),e(_4,DMr),e(se,GMr),e(se,u4),e(u4,t8e),e(t8e,OMr),e(u4,VMr),e(u4,dJ),e(dJ,XMr),e(u4,zMr),e(se,QMr),e(se,b4),e(b4,a8e),e(a8e,WMr),e(b4,HMr),e(b4,cJ),e(cJ,UMr),e(b4,JMr),e(se,YMr),e(se,v4),e(v4,n8e),e(n8e,KMr),e(v4,ZMr),e(v4,fJ),e(fJ,e4r),e(v4,o4r),e(se,r4r),e(se,F4),e(F4,s8e),e(s8e,t4r),e(F4,a4r),e(F4,mJ),e(mJ,n4r),e(F4,s4r),e(se,l4r),e(se,T4),e(T4,l8e),e(l8e,i4r),e(T4,d4r),e(T4,gJ),e(gJ,c4r),e(T4,f4r),e(se,m4r),e(se,M4),e(M4,i8e),e(i8e,g4r),e(M4,h4r),e(M4,hJ),e(hJ,p4r),e(M4,_4r),e(se,u4r),e(se,E4),e(E4,d8e),e(d8e,b4r),e(E4,v4r),e(E4,pJ),e(pJ,F4r),e(E4,T4r),e(se,M4r),e(se,C4),e(C4,c8e),e(c8e,E4r),e(C4,C4r),e(C4,_J),e(_J,w4r),e(C4,A4r),e(se,L4r),e(se,w4),e(w4,f8e),e(f8e,y4r),e(w4,x4r),e(w4,uJ),e(uJ,$4r),e(w4,k4r),e(se,S4r),e(se,A4),e(A4,m8e),e(m8e,R4r),e(A4,P4r),e(A4,bJ),e(bJ,B4r),e(A4,N4r),e(se,I4r),e(se,L4),e(L4,g8e),e(g8e,q4r),e(L4,j4r),e(L4,vJ),e(vJ,D4r),e(L4,G4r),e(se,O4r),e(se,y4),e(y4,h8e),e(h8e,V4r),e(y4,X4r),e(y4,FJ),e(FJ,z4r),e(y4,Q4r),e(se,W4r),e(se,x4),e(x4,p8e),e(p8e,H4r),e(x4,U4r),e(x4,TJ),e(TJ,J4r),e(x4,Y4r),e(se,K4r),e(se,$4),e($4,_8e),e(_8e,Z4r),e($4,eEr),e($4,MJ),e(MJ,oEr),e($4,rEr),e(se,tEr),e(se,k4),e(k4,u8e),e(u8e,aEr),e(k4,nEr),e(k4,EJ),e(EJ,sEr),e(k4,lEr),e(se,iEr),e(se,S4),e(S4,b8e),e(b8e,dEr),e(S4,cEr),e(S4,CJ),e(CJ,fEr),e(S4,mEr),e(se,gEr),e(se,R4),e(R4,v8e),e(v8e,hEr),e(R4,pEr),e(R4,wJ),e(wJ,_Er),e(R4,uEr),e(se,bEr),e(se,P4),e(P4,F8e),e(F8e,vEr),e(P4,FEr),e(P4,AJ),e(AJ,TEr),e(P4,MEr),e(se,EEr),e(se,B4),e(B4,T8e),e(T8e,CEr),e(B4,wEr),e(B4,LJ),e(LJ,AEr),e(B4,LEr),e(se,yEr),e(se,N4),e(N4,M8e),e(M8e,xEr),e(N4,$Er),e(N4,yJ),e(yJ,kEr),e(N4,SEr),e(se,REr),e(se,I4),e(I4,E8e),e(E8e,PEr),e(I4,BEr),e(I4,xJ),e(xJ,NEr),e(I4,IEr),e(se,qEr),e(se,q4),e(q4,C8e),e(C8e,jEr),e(q4,DEr),e(q4,$J),e($J,GEr),e(q4,OEr),e($r,VEr),M(j4,$r,null),b(f,tze,u),b(f,fc,u),e(fc,D4),e(D4,w8e),M(Z9,w8e,null),e(fc,XEr),e(fc,A8e),e(A8e,zEr),b(f,aze,u),b(f,rr,u),M(ex,rr,null),e(rr,QEr),e(rr,mc),e(mc,WEr),e(mc,kJ),e(kJ,HEr),e(mc,UEr),e(mc,SJ),e(SJ,JEr),e(mc,YEr),e(rr,KEr),e(rr,ox),e(ox,ZEr),e(ox,L8e),e(L8e,eCr),e(ox,oCr),e(rr,rCr),e(rr,Pt),M(rx,Pt,null),e(Pt,tCr),e(Pt,y8e),e(y8e,aCr),e(Pt,nCr),e(Pt,gc),e(gc,sCr),e(gc,x8e),e(x8e,lCr),e(gc,iCr),e(gc,RJ),e(RJ,dCr),e(gc,cCr),e(Pt,fCr),M(G4,Pt,null),e(rr,mCr),e(rr,kr),M(tx,kr,null),e(kr,gCr),e(kr,$8e),e($8e,hCr),e(kr,pCr),e(kr,dn),e(dn,_Cr),e(dn,k8e),e(k8e,uCr),e(dn,bCr),e(dn,S8e),e(S8e,vCr),e(dn,FCr),e(dn,R8e),e(R8e,TCr),e(dn,MCr),e(kr,ECr),e(kr,Me),e(Me,O4),e(O4,P8e),e(P8e,CCr),e(O4,wCr),e(O4,PJ),e(PJ,ACr),e(O4,LCr),e(Me,yCr),e(Me,V4),e(V4,B8e),e(B8e,xCr),e(V4,$Cr),e(V4,BJ),e(BJ,kCr),e(V4,SCr),e(Me,RCr),e(Me,X4),e(X4,N8e),e(N8e,PCr),e(X4,BCr),e(X4,NJ),e(NJ,NCr),e(X4,ICr),e(Me,qCr),e(Me,z4),e(z4,I8e),e(I8e,jCr),e(z4,DCr),e(z4,IJ),e(IJ,GCr),e(z4,OCr),e(Me,VCr),e(Me,Q4),e(Q4,q8e),e(q8e,XCr),e(Q4,zCr),e(Q4,qJ),e(qJ,QCr),e(Q4,WCr),e(Me,HCr),e(Me,W4),e(W4,j8e),e(j8e,UCr),e(W4,JCr),e(W4,jJ),e(jJ,YCr),e(W4,KCr),e(Me,ZCr),e(Me,H4),e(H4,D8e),e(D8e,e5r),e(H4,o5r),e(H4,DJ),e(DJ,r5r),e(H4,t5r),e(Me,a5r),e(Me,U4),e(U4,G8e),e(G8e,n5r),e(U4,s5r),e(U4,GJ),e(GJ,l5r),e(U4,i5r),e(Me,d5r),e(Me,J4),e(J4,O8e),e(O8e,c5r),e(J4,f5r),e(J4,OJ),e(OJ,m5r),e(J4,g5r),e(Me,h5r),e(Me,Y4),e(Y4,V8e),e(V8e,p5r),e(Y4,_5r),e(Y4,VJ),e(VJ,u5r),e(Y4,b5r),e(Me,v5r),e(Me,K4),e(K4,X8e),e(X8e,F5r),e(K4,T5r),e(K4,XJ),e(XJ,M5r),e(K4,E5r),e(Me,C5r),e(Me,Z4),e(Z4,z8e),e(z8e,w5r),e(Z4,A5r),e(Z4,zJ),e(zJ,L5r),e(Z4,y5r),e(Me,x5r),e(Me,eE),e(eE,Q8e),e(Q8e,$5r),e(eE,k5r),e(eE,QJ),e(QJ,S5r),e(eE,R5r),e(kr,P5r),M(oE,kr,null),b(f,nze,u),b(f,hc,u),e(hc,rE),e(rE,W8e),M(ax,W8e,null),e(hc,B5r),e(hc,H8e),e(H8e,N5r),b(f,sze,u),b(f,tr,u),M(nx,tr,null),e(tr,I5r),e(tr,pc),e(pc,q5r),e(pc,WJ),e(WJ,j5r),e(pc,D5r),e(pc,HJ),e(HJ,G5r),e(pc,O5r),e(tr,V5r),e(tr,sx),e(sx,X5r),e(sx,U8e),e(U8e,z5r),e(sx,Q5r),e(tr,W5r),e(tr,Bt),M(lx,Bt,null),e(Bt,H5r),e(Bt,J8e),e(J8e,U5r),e(Bt,J5r),e(Bt,_c),e(_c,Y5r),e(_c,Y8e),e(Y8e,K5r),e(_c,Z5r),e(_c,UJ),e(UJ,e0r),e(_c,o0r),e(Bt,r0r),M(tE,Bt,null),e(tr,t0r),e(tr,Sr),M(ix,Sr,null),e(Sr,a0r),e(Sr,K8e),e(K8e,n0r),e(Sr,s0r),e(Sr,cn),e(cn,l0r),e(cn,Z8e),e(Z8e,i0r),e(cn,d0r),e(cn,eMe),e(eMe,c0r),e(cn,f0r),e(cn,oMe),e(oMe,m0r),e(cn,g0r),e(Sr,h0r),e(Sr,ar),e(ar,aE),e(aE,rMe),e(rMe,p0r),e(aE,_0r),e(aE,JJ),e(JJ,u0r),e(aE,b0r),e(ar,v0r),e(ar,nE),e(nE,tMe),e(tMe,F0r),e(nE,T0r),e(nE,YJ),e(YJ,M0r),e(nE,E0r),e(ar,C0r),e(ar,sE),e(sE,aMe),e(aMe,w0r),e(sE,A0r),e(sE,KJ),e(KJ,L0r),e(sE,y0r),e(ar,x0r),e(ar,lE),e(lE,nMe),e(nMe,$0r),e(lE,k0r),e(lE,ZJ),e(ZJ,S0r),e(lE,R0r),e(ar,P0r),e(ar,iE),e(iE,sMe),e(sMe,B0r),e(iE,N0r),e(iE,eY),e(eY,I0r),e(iE,q0r),e(ar,j0r),e(ar,dE),e(dE,lMe),e(lMe,D0r),e(dE,G0r),e(dE,oY),e(oY,O0r),e(dE,V0r),e(Sr,X0r),M(cE,Sr,null),b(f,lze,u),b(f,uc,u),e(uc,fE),e(fE,iMe),M(dx,iMe,null),e(uc,z0r),e(uc,dMe),e(dMe,Q0r),b(f,ize,u),b(f,nr,u),M(cx,nr,null),e(nr,W0r),e(nr,bc),e(bc,H0r),e(bc,rY),e(rY,U0r),e(bc,J0r),e(bc,tY),e(tY,Y0r),e(bc,K0r),e(nr,Z0r),e(nr,fx),e(fx,ewr),e(fx,cMe),e(cMe,owr),e(fx,rwr),e(nr,twr),e(nr,Nt),M(mx,Nt,null),e(Nt,awr),e(Nt,fMe),e(fMe,nwr),e(Nt,swr),e(Nt,vc),e(vc,lwr),e(vc,mMe),e(mMe,iwr),e(vc,dwr),e(vc,aY),e(aY,cwr),e(vc,fwr),e(Nt,mwr),M(mE,Nt,null),e(nr,gwr),e(nr,Rr),M(gx,Rr,null),e(Rr,hwr),e(Rr,gMe),e(gMe,pwr),e(Rr,_wr),e(Rr,fn),e(fn,uwr),e(fn,hMe),e(hMe,bwr),e(fn,vwr),e(fn,pMe),e(pMe,Fwr),e(fn,Twr),e(fn,_Me),e(_Me,Mwr),e(fn,Ewr),e(Rr,Cwr),e(Rr,ie),e(ie,gE),e(gE,uMe),e(uMe,wwr),e(gE,Awr),e(gE,nY),e(nY,Lwr),e(gE,ywr),e(ie,xwr),e(ie,hE),e(hE,bMe),e(bMe,$wr),e(hE,kwr),e(hE,sY),e(sY,Swr),e(hE,Rwr),e(ie,Pwr),e(ie,pE),e(pE,vMe),e(vMe,Bwr),e(pE,Nwr),e(pE,lY),e(lY,Iwr),e(pE,qwr),e(ie,jwr),e(ie,_E),e(_E,FMe),e(FMe,Dwr),e(_E,Gwr),e(_E,iY),e(iY,Owr),e(_E,Vwr),e(ie,Xwr),e(ie,uE),e(uE,TMe),e(TMe,zwr),e(uE,Qwr),e(uE,dY),e(dY,Wwr),e(uE,Hwr),e(ie,Uwr),e(ie,bE),e(bE,MMe),e(MMe,Jwr),e(bE,Ywr),e(bE,cY),e(cY,Kwr),e(bE,Zwr),e(ie,eAr),e(ie,vE),e(vE,EMe),e(EMe,oAr),e(vE,rAr),e(vE,fY),e(fY,tAr),e(vE,aAr),e(ie,nAr),e(ie,FE),e(FE,CMe),e(CMe,sAr),e(FE,lAr),e(FE,mY),e(mY,iAr),e(FE,dAr),e(ie,cAr),e(ie,TE),e(TE,wMe),e(wMe,fAr),e(TE,mAr),e(TE,gY),e(gY,gAr),e(TE,hAr),e(ie,pAr),e(ie,ME),e(ME,AMe),e(AMe,_Ar),e(ME,uAr),e(ME,hY),e(hY,bAr),e(ME,vAr),e(ie,FAr),e(ie,EE),e(EE,LMe),e(LMe,TAr),e(EE,MAr),e(EE,pY),e(pY,EAr),e(EE,CAr),e(ie,wAr),e(ie,CE),e(CE,yMe),e(yMe,AAr),e(CE,LAr),e(CE,_Y),e(_Y,yAr),e(CE,xAr),e(ie,$Ar),e(ie,wE),e(wE,xMe),e(xMe,kAr),e(wE,SAr),e(wE,uY),e(uY,RAr),e(wE,PAr),e(ie,BAr),e(ie,AE),e(AE,$Me),e($Me,NAr),e(AE,IAr),e(AE,bY),e(bY,qAr),e(AE,jAr),e(ie,DAr),e(ie,LE),e(LE,kMe),e(kMe,GAr),e(LE,OAr),e(LE,vY),e(vY,VAr),e(LE,XAr),e(ie,zAr),e(ie,yE),e(yE,SMe),e(SMe,QAr),e(yE,WAr),e(yE,FY),e(FY,HAr),e(yE,UAr),e(ie,JAr),e(ie,xE),e(xE,RMe),e(RMe,YAr),e(xE,KAr),e(xE,TY),e(TY,ZAr),e(xE,e6r),e(ie,o6r),e(ie,$E),e($E,PMe),e(PMe,r6r),e($E,t6r),e($E,MY),e(MY,a6r),e($E,n6r),e(ie,s6r),e(ie,kE),e(kE,BMe),e(BMe,l6r),e(kE,i6r),e(kE,EY),e(EY,d6r),e(kE,c6r),e(ie,f6r),e(ie,SE),e(SE,NMe),e(NMe,m6r),e(SE,g6r),e(SE,CY),e(CY,h6r),e(SE,p6r),e(Rr,_6r),M(RE,Rr,null),b(f,dze,u),b(f,Fc,u),e(Fc,PE),e(PE,IMe),M(hx,IMe,null),e(Fc,u6r),e(Fc,qMe),e(qMe,b6r),b(f,cze,u),b(f,sr,u),M(px,sr,null),e(sr,v6r),e(sr,Tc),e(Tc,F6r),e(Tc,wY),e(wY,T6r),e(Tc,M6r),e(Tc,AY),e(AY,E6r),e(Tc,C6r),e(sr,w6r),e(sr,_x),e(_x,A6r),e(_x,jMe),e(jMe,L6r),e(_x,y6r),e(sr,x6r),e(sr,It),M(ux,It,null),e(It,$6r),e(It,DMe),e(DMe,k6r),e(It,S6r),e(It,Mc),e(Mc,R6r),e(Mc,GMe),e(GMe,P6r),e(Mc,B6r),e(Mc,LY),e(LY,N6r),e(Mc,I6r),e(It,q6r),M(BE,It,null),e(sr,j6r),e(sr,Pr),M(bx,Pr,null),e(Pr,D6r),e(Pr,OMe),e(OMe,G6r),e(Pr,O6r),e(Pr,mn),e(mn,V6r),e(mn,VMe),e(VMe,X6r),e(mn,z6r),e(mn,XMe),e(XMe,Q6r),e(mn,W6r),e(mn,zMe),e(zMe,H6r),e(mn,U6r),e(Pr,J6r),e(Pr,ye),e(ye,NE),e(NE,QMe),e(QMe,Y6r),e(NE,K6r),e(NE,yY),e(yY,Z6r),e(NE,e7r),e(ye,o7r),e(ye,IE),e(IE,WMe),e(WMe,r7r),e(IE,t7r),e(IE,xY),e(xY,a7r),e(IE,n7r),e(ye,s7r),e(ye,qE),e(qE,HMe),e(HMe,l7r),e(qE,i7r),e(qE,$Y),e($Y,d7r),e(qE,c7r),e(ye,f7r),e(ye,jE),e(jE,UMe),e(UMe,m7r),e(jE,g7r),e(jE,kY),e(kY,h7r),e(jE,p7r),e(ye,_7r),e(ye,DE),e(DE,JMe),e(JMe,u7r),e(DE,b7r),e(DE,SY),e(SY,v7r),e(DE,F7r),e(ye,T7r),e(ye,GE),e(GE,YMe),e(YMe,M7r),e(GE,E7r),e(GE,RY),e(RY,C7r),e(GE,w7r),e(ye,A7r),e(ye,OE),e(OE,KMe),e(KMe,L7r),e(OE,y7r),e(OE,PY),e(PY,x7r),e(OE,$7r),e(ye,k7r),e(ye,VE),e(VE,ZMe),e(ZMe,S7r),e(VE,R7r),e(VE,BY),e(BY,P7r),e(VE,B7r),e(ye,N7r),e(ye,XE),e(XE,e4e),e(e4e,I7r),e(XE,q7r),e(XE,NY),e(NY,j7r),e(XE,D7r),e(ye,G7r),e(ye,zE),e(zE,o4e),e(o4e,O7r),e(zE,V7r),e(zE,IY),e(IY,X7r),e(zE,z7r),e(Pr,Q7r),M(QE,Pr,null),b(f,fze,u),b(f,Ec,u),e(Ec,WE),e(WE,r4e),M(vx,r4e,null),e(Ec,W7r),e(Ec,t4e),e(t4e,H7r),b(f,mze,u),b(f,lr,u),M(Fx,lr,null),e(lr,U7r),e(lr,Cc),e(Cc,J7r),e(Cc,qY),e(qY,Y7r),e(Cc,K7r),e(Cc,jY),e(jY,Z7r),e(Cc,eLr),e(lr,oLr),e(lr,Tx),e(Tx,rLr),e(Tx,a4e),e(a4e,tLr),e(Tx,aLr),e(lr,nLr),e(lr,qt),M(Mx,qt,null),e(qt,sLr),e(qt,n4e),e(n4e,lLr),e(qt,iLr),e(qt,wc),e(wc,dLr),e(wc,s4e),e(s4e,cLr),e(wc,fLr),e(wc,DY),e(DY,mLr),e(wc,gLr),e(qt,hLr),M(HE,qt,null),e(lr,pLr),e(lr,Br),M(Ex,Br,null),e(Br,_Lr),e(Br,l4e),e(l4e,uLr),e(Br,bLr),e(Br,gn),e(gn,vLr),e(gn,i4e),e(i4e,FLr),e(gn,TLr),e(gn,d4e),e(d4e,MLr),e(gn,ELr),e(gn,c4e),e(c4e,CLr),e(gn,wLr),e(Br,ALr),e(Br,te),e(te,UE),e(UE,f4e),e(f4e,LLr),e(UE,yLr),e(UE,GY),e(GY,xLr),e(UE,$Lr),e(te,kLr),e(te,JE),e(JE,m4e),e(m4e,SLr),e(JE,RLr),e(JE,OY),e(OY,PLr),e(JE,BLr),e(te,NLr),e(te,YE),e(YE,g4e),e(g4e,ILr),e(YE,qLr),e(YE,VY),e(VY,jLr),e(YE,DLr),e(te,GLr),e(te,KE),e(KE,h4e),e(h4e,OLr),e(KE,VLr),e(KE,XY),e(XY,XLr),e(KE,zLr),e(te,QLr),e(te,ZE),e(ZE,p4e),e(p4e,WLr),e(ZE,HLr),e(ZE,zY),e(zY,ULr),e(ZE,JLr),e(te,YLr),e(te,eC),e(eC,_4e),e(_4e,KLr),e(eC,ZLr),e(eC,QY),e(QY,eyr),e(eC,oyr),e(te,ryr),e(te,oC),e(oC,u4e),e(u4e,tyr),e(oC,ayr),e(oC,WY),e(WY,nyr),e(oC,syr),e(te,lyr),e(te,rC),e(rC,b4e),e(b4e,iyr),e(rC,dyr),e(rC,HY),e(HY,cyr),e(rC,fyr),e(te,myr),e(te,tC),e(tC,v4e),e(v4e,gyr),e(tC,hyr),e(tC,UY),e(UY,pyr),e(tC,_yr),e(te,uyr),e(te,aC),e(aC,F4e),e(F4e,byr),e(aC,vyr),e(aC,JY),e(JY,Fyr),e(aC,Tyr),e(te,Myr),e(te,nC),e(nC,T4e),e(T4e,Eyr),e(nC,Cyr),e(nC,YY),e(YY,wyr),e(nC,Ayr),e(te,Lyr),e(te,sC),e(sC,M4e),e(M4e,yyr),e(sC,xyr),e(sC,KY),e(KY,$yr),e(sC,kyr),e(te,Syr),e(te,lC),e(lC,E4e),e(E4e,Ryr),e(lC,Pyr),e(lC,ZY),e(ZY,Byr),e(lC,Nyr),e(te,Iyr),e(te,iC),e(iC,C4e),e(C4e,qyr),e(iC,jyr),e(iC,eK),e(eK,Dyr),e(iC,Gyr),e(te,Oyr),e(te,dC),e(dC,w4e),e(w4e,Vyr),e(dC,Xyr),e(dC,oK),e(oK,zyr),e(dC,Qyr),e(te,Wyr),e(te,cC),e(cC,A4e),e(A4e,Hyr),e(cC,Uyr),e(cC,rK),e(rK,Jyr),e(cC,Yyr),e(te,Kyr),e(te,fC),e(fC,L4e),e(L4e,Zyr),e(fC,e9r),e(fC,tK),e(tK,o9r),e(fC,r9r),e(te,t9r),e(te,mC),e(mC,y4e),e(y4e,a9r),e(mC,n9r),e(mC,aK),e(aK,s9r),e(mC,l9r),e(te,i9r),e(te,gC),e(gC,x4e),e(x4e,d9r),e(gC,c9r),e(gC,nK),e(nK,f9r),e(gC,m9r),e(te,g9r),e(te,hC),e(hC,$4e),e($4e,h9r),e(hC,p9r),e(hC,sK),e(sK,_9r),e(hC,u9r),e(te,b9r),e(te,pC),e(pC,k4e),e(k4e,v9r),e(pC,F9r),e(pC,lK),e(lK,T9r),e(pC,M9r),e(te,E9r),e(te,_C),e(_C,S4e),e(S4e,C9r),e(_C,w9r),e(_C,iK),e(iK,A9r),e(_C,L9r),e(te,y9r),e(te,uC),e(uC,R4e),e(R4e,x9r),e(uC,$9r),e(uC,dK),e(dK,k9r),e(uC,S9r),e(te,R9r),e(te,bC),e(bC,P4e),e(P4e,P9r),e(bC,B9r),e(bC,cK),e(cK,N9r),e(bC,I9r),e(te,q9r),e(te,vC),e(vC,B4e),e(B4e,j9r),e(vC,D9r),e(vC,fK),e(fK,G9r),e(vC,O9r),e(te,V9r),e(te,FC),e(FC,N4e),e(N4e,X9r),e(FC,z9r),e(FC,mK),e(mK,Q9r),e(FC,W9r),e(Br,H9r),M(TC,Br,null),b(f,gze,u),b(f,Ac,u),e(Ac,MC),e(MC,I4e),M(Cx,I4e,null),e(Ac,U9r),e(Ac,q4e),e(q4e,J9r),b(f,hze,u),b(f,ir,u),M(wx,ir,null),e(ir,Y9r),e(ir,Lc),e(Lc,K9r),e(Lc,gK),e(gK,Z9r),e(Lc,exr),e(Lc,hK),e(hK,oxr),e(Lc,rxr),e(ir,txr),e(ir,Ax),e(Ax,axr),e(Ax,j4e),e(j4e,nxr),e(Ax,sxr),e(ir,lxr),e(ir,jt),M(Lx,jt,null),e(jt,ixr),e(jt,D4e),e(D4e,dxr),e(jt,cxr),e(jt,yc),e(yc,fxr),e(yc,G4e),e(G4e,mxr),e(yc,gxr),e(yc,pK),e(pK,hxr),e(yc,pxr),e(jt,_xr),M(EC,jt,null),e(ir,uxr),e(ir,Nr),M(yx,Nr,null),e(Nr,bxr),e(Nr,O4e),e(O4e,vxr),e(Nr,Fxr),e(Nr,hn),e(hn,Txr),e(hn,V4e),e(V4e,Mxr),e(hn,Exr),e(hn,X4e),e(X4e,Cxr),e(hn,wxr),e(hn,z4e),e(z4e,Axr),e(hn,Lxr),e(Nr,yxr),e(Nr,_e),e(_e,CC),e(CC,Q4e),e(Q4e,xxr),e(CC,$xr),e(CC,_K),e(_K,kxr),e(CC,Sxr),e(_e,Rxr),e(_e,wC),e(wC,W4e),e(W4e,Pxr),e(wC,Bxr),e(wC,uK),e(uK,Nxr),e(wC,Ixr),e(_e,qxr),e(_e,AC),e(AC,H4e),e(H4e,jxr),e(AC,Dxr),e(AC,bK),e(bK,Gxr),e(AC,Oxr),e(_e,Vxr),e(_e,LC),e(LC,U4e),e(U4e,Xxr),e(LC,zxr),e(LC,vK),e(vK,Qxr),e(LC,Wxr),e(_e,Hxr),e(_e,yC),e(yC,J4e),e(J4e,Uxr),e(yC,Jxr),e(yC,FK),e(FK,Yxr),e(yC,Kxr),e(_e,Zxr),e(_e,xC),e(xC,Y4e),e(Y4e,e$r),e(xC,o$r),e(xC,TK),e(TK,r$r),e(xC,t$r),e(_e,a$r),e(_e,$C),e($C,K4e),e(K4e,n$r),e($C,s$r),e($C,MK),e(MK,l$r),e($C,i$r),e(_e,d$r),e(_e,kC),e(kC,Z4e),e(Z4e,c$r),e(kC,f$r),e(kC,EK),e(EK,m$r),e(kC,g$r),e(_e,h$r),e(_e,SC),e(SC,eEe),e(eEe,p$r),e(SC,_$r),e(SC,CK),e(CK,u$r),e(SC,b$r),e(_e,v$r),e(_e,RC),e(RC,oEe),e(oEe,F$r),e(RC,T$r),e(RC,wK),e(wK,M$r),e(RC,E$r),e(_e,C$r),e(_e,PC),e(PC,rEe),e(rEe,w$r),e(PC,A$r),e(PC,AK),e(AK,L$r),e(PC,y$r),e(_e,x$r),e(_e,BC),e(BC,tEe),e(tEe,$$r),e(BC,k$r),e(BC,LK),e(LK,S$r),e(BC,R$r),e(_e,P$r),e(_e,NC),e(NC,aEe),e(aEe,B$r),e(NC,N$r),e(NC,yK),e(yK,I$r),e(NC,q$r),e(_e,j$r),e(_e,IC),e(IC,nEe),e(nEe,D$r),e(IC,G$r),e(IC,xK),e(xK,O$r),e(IC,V$r),e(_e,X$r),e(_e,qC),e(qC,sEe),e(sEe,z$r),e(qC,Q$r),e(qC,$K),e($K,W$r),e(qC,H$r),e(_e,U$r),e(_e,jC),e(jC,lEe),e(lEe,J$r),e(jC,Y$r),e(jC,kK),e(kK,K$r),e(jC,Z$r),e(_e,ekr),e(_e,DC),e(DC,iEe),e(iEe,okr),e(DC,rkr),e(DC,SK),e(SK,tkr),e(DC,akr),e(Nr,nkr),M(GC,Nr,null),b(f,pze,u),b(f,xc,u),e(xc,OC),e(OC,dEe),M(xx,dEe,null),e(xc,skr),e(xc,cEe),e(cEe,lkr),b(f,_ze,u),b(f,dr,u),M($x,dr,null),e(dr,ikr),e(dr,$c),e($c,dkr),e($c,RK),e(RK,ckr),e($c,fkr),e($c,PK),e(PK,mkr),e($c,gkr),e(dr,hkr),e(dr,kx),e(kx,pkr),e(kx,fEe),e(fEe,_kr),e(kx,ukr),e(dr,bkr),e(dr,Dt),M(Sx,Dt,null),e(Dt,vkr),e(Dt,mEe),e(mEe,Fkr),e(Dt,Tkr),e(Dt,kc),e(kc,Mkr),e(kc,gEe),e(gEe,Ekr),e(kc,Ckr),e(kc,BK),e(BK,wkr),e(kc,Akr),e(Dt,Lkr),M(VC,Dt,null),e(dr,ykr),e(dr,Ir),M(Rx,Ir,null),e(Ir,xkr),e(Ir,hEe),e(hEe,$kr),e(Ir,kkr),e(Ir,pn),e(pn,Skr),e(pn,pEe),e(pEe,Rkr),e(pn,Pkr),e(pn,_Ee),e(_Ee,Bkr),e(pn,Nkr),e(pn,uEe),e(uEe,Ikr),e(pn,qkr),e(Ir,jkr),e(Ir,Px),e(Px,XC),e(XC,bEe),e(bEe,Dkr),e(XC,Gkr),e(XC,NK),e(NK,Okr),e(XC,Vkr),e(Px,Xkr),e(Px,zC),e(zC,vEe),e(vEe,zkr),e(zC,Qkr),e(zC,IK),e(IK,Wkr),e(zC,Hkr),e(Ir,Ukr),M(QC,Ir,null),b(f,uze,u),b(f,Sc,u),e(Sc,WC),e(WC,FEe),M(Bx,FEe,null),e(Sc,Jkr),e(Sc,TEe),e(TEe,Ykr),b(f,bze,u),b(f,cr,u),M(Nx,cr,null),e(cr,Kkr),e(cr,Rc),e(Rc,Zkr),e(Rc,qK),e(qK,eSr),e(Rc,oSr),e(Rc,jK),e(jK,rSr),e(Rc,tSr),e(cr,aSr),e(cr,Ix),e(Ix,nSr),e(Ix,MEe),e(MEe,sSr),e(Ix,lSr),e(cr,iSr),e(cr,Gt),M(qx,Gt,null),e(Gt,dSr),e(Gt,EEe),e(EEe,cSr),e(Gt,fSr),e(Gt,Pc),e(Pc,mSr),e(Pc,CEe),e(CEe,gSr),e(Pc,hSr),e(Pc,DK),e(DK,pSr),e(Pc,_Sr),e(Gt,uSr),M(HC,Gt,null),e(cr,bSr),e(cr,qr),M(jx,qr,null),e(qr,vSr),e(qr,wEe),e(wEe,FSr),e(qr,TSr),e(qr,_n),e(_n,MSr),e(_n,AEe),e(AEe,ESr),e(_n,CSr),e(_n,LEe),e(LEe,wSr),e(_n,ASr),e(_n,yEe),e(yEe,LSr),e(_n,ySr),e(qr,xSr),e(qr,xEe),e(xEe,UC),e(UC,$Ee),e($Ee,$Sr),e(UC,kSr),e(UC,GK),e(GK,SSr),e(UC,RSr),e(qr,PSr),M(JC,qr,null),b(f,vze,u),b(f,Bc,u),e(Bc,YC),e(YC,kEe),M(Dx,kEe,null),e(Bc,BSr),e(Bc,SEe),e(SEe,NSr),b(f,Fze,u),b(f,fr,u),M(Gx,fr,null),e(fr,ISr),e(fr,Nc),e(Nc,qSr),e(Nc,OK),e(OK,jSr),e(Nc,DSr),e(Nc,VK),e(VK,GSr),e(Nc,OSr),e(fr,VSr),e(fr,Ox),e(Ox,XSr),e(Ox,REe),e(REe,zSr),e(Ox,QSr),e(fr,WSr),e(fr,Ot),M(Vx,Ot,null),e(Ot,HSr),e(Ot,PEe),e(PEe,USr),e(Ot,JSr),e(Ot,Ic),e(Ic,YSr),e(Ic,BEe),e(BEe,KSr),e(Ic,ZSr),e(Ic,XK),e(XK,eRr),e(Ic,oRr),e(Ot,rRr),M(KC,Ot,null),e(fr,tRr),e(fr,jr),M(Xx,jr,null),e(jr,aRr),e(jr,NEe),e(NEe,nRr),e(jr,sRr),e(jr,un),e(un,lRr),e(un,IEe),e(IEe,iRr),e(un,dRr),e(un,qEe),e(qEe,cRr),e(un,fRr),e(un,jEe),e(jEe,mRr),e(un,gRr),e(jr,hRr),e(jr,de),e(de,ZC),e(ZC,DEe),e(DEe,pRr),e(ZC,_Rr),e(ZC,zK),e(zK,uRr),e(ZC,bRr),e(de,vRr),e(de,e5),e(e5,GEe),e(GEe,FRr),e(e5,TRr),e(e5,QK),e(QK,MRr),e(e5,ERr),e(de,CRr),e(de,o5),e(o5,OEe),e(OEe,wRr),e(o5,ARr),e(o5,WK),e(WK,LRr),e(o5,yRr),e(de,xRr),e(de,r5),e(r5,VEe),e(VEe,$Rr),e(r5,kRr),e(r5,HK),e(HK,SRr),e(r5,RRr),e(de,PRr),e(de,t5),e(t5,XEe),e(XEe,BRr),e(t5,NRr),e(t5,UK),e(UK,IRr),e(t5,qRr),e(de,jRr),e(de,a5),e(a5,zEe),e(zEe,DRr),e(a5,GRr),e(a5,JK),e(JK,ORr),e(a5,VRr),e(de,XRr),e(de,n5),e(n5,QEe),e(QEe,zRr),e(n5,QRr),e(n5,YK),e(YK,WRr),e(n5,HRr),e(de,URr),e(de,s5),e(s5,WEe),e(WEe,JRr),e(s5,YRr),e(s5,KK),e(KK,KRr),e(s5,ZRr),e(de,ePr),e(de,l5),e(l5,HEe),e(HEe,oPr),e(l5,rPr),e(l5,ZK),e(ZK,tPr),e(l5,aPr),e(de,nPr),e(de,i5),e(i5,UEe),e(UEe,sPr),e(i5,lPr),e(i5,eZ),e(eZ,iPr),e(i5,dPr),e(de,cPr),e(de,d5),e(d5,JEe),e(JEe,fPr),e(d5,mPr),e(d5,oZ),e(oZ,gPr),e(d5,hPr),e(de,pPr),e(de,c5),e(c5,YEe),e(YEe,_Pr),e(c5,uPr),e(c5,rZ),e(rZ,bPr),e(c5,vPr),e(de,FPr),e(de,f5),e(f5,KEe),e(KEe,TPr),e(f5,MPr),e(f5,tZ),e(tZ,EPr),e(f5,CPr),e(de,wPr),e(de,m5),e(m5,ZEe),e(ZEe,APr),e(m5,LPr),e(m5,aZ),e(aZ,yPr),e(m5,xPr),e(de,$Pr),e(de,g5),e(g5,eCe),e(eCe,kPr),e(g5,SPr),e(g5,nZ),e(nZ,RPr),e(g5,PPr),e(de,BPr),e(de,h5),e(h5,oCe),e(oCe,NPr),e(h5,IPr),e(h5,sZ),e(sZ,qPr),e(h5,jPr),e(de,DPr),e(de,p5),e(p5,rCe),e(rCe,GPr),e(p5,OPr),e(p5,lZ),e(lZ,VPr),e(p5,XPr),e(de,zPr),e(de,_5),e(_5,tCe),e(tCe,QPr),e(_5,WPr),e(_5,iZ),e(iZ,HPr),e(_5,UPr),e(de,JPr),e(de,u5),e(u5,aCe),e(aCe,YPr),e(u5,KPr),e(u5,dZ),e(dZ,ZPr),e(u5,eBr),e(de,oBr),e(de,b5),e(b5,nCe),e(nCe,rBr),e(b5,tBr),e(b5,cZ),e(cZ,aBr),e(b5,nBr),e(jr,sBr),M(v5,jr,null),b(f,Tze,u),b(f,qc,u),e(qc,F5),e(F5,sCe),M(zx,sCe,null),e(qc,lBr),e(qc,lCe),e(lCe,iBr),b(f,Mze,u),b(f,mr,u),M(Qx,mr,null),e(mr,dBr),e(mr,jc),e(jc,cBr),e(jc,fZ),e(fZ,fBr),e(jc,mBr),e(jc,mZ),e(mZ,gBr),e(jc,hBr),e(mr,pBr),e(mr,Wx),e(Wx,_Br),e(Wx,iCe),e(iCe,uBr),e(Wx,bBr),e(mr,vBr),e(mr,Vt),M(Hx,Vt,null),e(Vt,FBr),e(Vt,dCe),e(dCe,TBr),e(Vt,MBr),e(Vt,Dc),e(Dc,EBr),e(Dc,cCe),e(cCe,CBr),e(Dc,wBr),e(Dc,gZ),e(gZ,ABr),e(Dc,LBr),e(Vt,yBr),M(T5,Vt,null),e(mr,xBr),e(mr,Dr),M(Ux,Dr,null),e(Dr,$Br),e(Dr,fCe),e(fCe,kBr),e(Dr,SBr),e(Dr,bn),e(bn,RBr),e(bn,mCe),e(mCe,PBr),e(bn,BBr),e(bn,gCe),e(gCe,NBr),e(bn,IBr),e(bn,hCe),e(hCe,qBr),e(bn,jBr),e(Dr,DBr),e(Dr,ce),e(ce,M5),e(M5,pCe),e(pCe,GBr),e(M5,OBr),e(M5,hZ),e(hZ,VBr),e(M5,XBr),e(ce,zBr),e(ce,E5),e(E5,_Ce),e(_Ce,QBr),e(E5,WBr),e(E5,pZ),e(pZ,HBr),e(E5,UBr),e(ce,JBr),e(ce,C5),e(C5,uCe),e(uCe,YBr),e(C5,KBr),e(C5,_Z),e(_Z,ZBr),e(C5,eNr),e(ce,oNr),e(ce,w5),e(w5,bCe),e(bCe,rNr),e(w5,tNr),e(w5,uZ),e(uZ,aNr),e(w5,nNr),e(ce,sNr),e(ce,A5),e(A5,vCe),e(vCe,lNr),e(A5,iNr),e(A5,bZ),e(bZ,dNr),e(A5,cNr),e(ce,fNr),e(ce,L5),e(L5,FCe),e(FCe,mNr),e(L5,gNr),e(L5,vZ),e(vZ,hNr),e(L5,pNr),e(ce,_Nr),e(ce,y5),e(y5,TCe),e(TCe,uNr),e(y5,bNr),e(y5,FZ),e(FZ,vNr),e(y5,FNr),e(ce,TNr),e(ce,x5),e(x5,MCe),e(MCe,MNr),e(x5,ENr),e(x5,TZ),e(TZ,CNr),e(x5,wNr),e(ce,ANr),e(ce,$5),e($5,ECe),e(ECe,LNr),e($5,yNr),e($5,MZ),e(MZ,xNr),e($5,$Nr),e(ce,kNr),e(ce,k5),e(k5,CCe),e(CCe,SNr),e(k5,RNr),e(k5,EZ),e(EZ,PNr),e(k5,BNr),e(ce,NNr),e(ce,S5),e(S5,wCe),e(wCe,INr),e(S5,qNr),e(S5,CZ),e(CZ,jNr),e(S5,DNr),e(ce,GNr),e(ce,R5),e(R5,ACe),e(ACe,ONr),e(R5,VNr),e(R5,wZ),e(wZ,XNr),e(R5,zNr),e(ce,QNr),e(ce,P5),e(P5,LCe),e(LCe,WNr),e(P5,HNr),e(P5,AZ),e(AZ,UNr),e(P5,JNr),e(ce,YNr),e(ce,B5),e(B5,yCe),e(yCe,KNr),e(B5,ZNr),e(B5,LZ),e(LZ,eIr),e(B5,oIr),e(ce,rIr),e(ce,N5),e(N5,xCe),e(xCe,tIr),e(N5,aIr),e(N5,yZ),e(yZ,nIr),e(N5,sIr),e(ce,lIr),e(ce,I5),e(I5,$Ce),e($Ce,iIr),e(I5,dIr),e(I5,xZ),e(xZ,cIr),e(I5,fIr),e(ce,mIr),e(ce,q5),e(q5,kCe),e(kCe,gIr),e(q5,hIr),e(q5,$Z),e($Z,pIr),e(q5,_Ir),e(ce,uIr),e(ce,j5),e(j5,SCe),e(SCe,bIr),e(j5,vIr),e(j5,kZ),e(kZ,FIr),e(j5,TIr),e(ce,MIr),e(ce,D5),e(D5,RCe),e(RCe,EIr),e(D5,CIr),e(D5,SZ),e(SZ,wIr),e(D5,AIr),e(ce,LIr),e(ce,G5),e(G5,PCe),e(PCe,yIr),e(G5,xIr),e(G5,RZ),e(RZ,$Ir),e(G5,kIr),e(Dr,SIr),M(O5,Dr,null),b(f,Eze,u),b(f,Gc,u),e(Gc,V5),e(V5,BCe),M(Jx,BCe,null),e(Gc,RIr),e(Gc,NCe),e(NCe,PIr),b(f,Cze,u),b(f,gr,u),M(Yx,gr,null),e(gr,BIr),e(gr,Oc),e(Oc,NIr),e(Oc,PZ),e(PZ,IIr),e(Oc,qIr),e(Oc,BZ),e(BZ,jIr),e(Oc,DIr),e(gr,GIr),e(gr,Kx),e(Kx,OIr),e(Kx,ICe),e(ICe,VIr),e(Kx,XIr),e(gr,zIr),e(gr,Xt),M(Zx,Xt,null),e(Xt,QIr),e(Xt,qCe),e(qCe,WIr),e(Xt,HIr),e(Xt,Vc),e(Vc,UIr),e(Vc,jCe),e(jCe,JIr),e(Vc,YIr),e(Vc,NZ),e(NZ,KIr),e(Vc,ZIr),e(Xt,eqr),M(X5,Xt,null),e(gr,oqr),e(gr,Gr),M(e$,Gr,null),e(Gr,rqr),e(Gr,DCe),e(DCe,tqr),e(Gr,aqr),e(Gr,vn),e(vn,nqr),e(vn,GCe),e(GCe,sqr),e(vn,lqr),e(vn,OCe),e(OCe,iqr),e(vn,dqr),e(vn,VCe),e(VCe,cqr),e(vn,fqr),e(Gr,mqr),e(Gr,XCe),e(XCe,z5),e(z5,zCe),e(zCe,gqr),e(z5,hqr),e(z5,IZ),e(IZ,pqr),e(z5,_qr),e(Gr,uqr),M(Q5,Gr,null),b(f,wze,u),b(f,Xc,u),e(Xc,W5),e(W5,QCe),M(o$,QCe,null),e(Xc,bqr),e(Xc,WCe),e(WCe,vqr),b(f,Aze,u),b(f,hr,u),M(r$,hr,null),e(hr,Fqr),e(hr,zc),e(zc,Tqr),e(zc,qZ),e(qZ,Mqr),e(zc,Eqr),e(zc,jZ),e(jZ,Cqr),e(zc,wqr),e(hr,Aqr),e(hr,t$),e(t$,Lqr),e(t$,HCe),e(HCe,yqr),e(t$,xqr),e(hr,$qr),e(hr,zt),M(a$,zt,null),e(zt,kqr),e(zt,UCe),e(UCe,Sqr),e(zt,Rqr),e(zt,Qc),e(Qc,Pqr),e(Qc,JCe),e(JCe,Bqr),e(Qc,Nqr),e(Qc,DZ),e(DZ,Iqr),e(Qc,qqr),e(zt,jqr),M(H5,zt,null),e(hr,Dqr),e(hr,Or),M(n$,Or,null),e(Or,Gqr),e(Or,YCe),e(YCe,Oqr),e(Or,Vqr),e(Or,Fn),e(Fn,Xqr),e(Fn,KCe),e(KCe,zqr),e(Fn,Qqr),e(Fn,ZCe),e(ZCe,Wqr),e(Fn,Hqr),e(Fn,e5e),e(e5e,Uqr),e(Fn,Jqr),e(Or,Yqr),e(Or,o5e),e(o5e,U5),e(U5,r5e),e(r5e,Kqr),e(U5,Zqr),e(U5,GZ),e(GZ,ejr),e(U5,ojr),e(Or,rjr),M(J5,Or,null),b(f,Lze,u),b(f,Wc,u),e(Wc,Y5),e(Y5,t5e),M(s$,t5e,null),e(Wc,tjr),e(Wc,a5e),e(a5e,ajr),b(f,yze,u),b(f,pr,u),M(l$,pr,null),e(pr,njr),e(pr,Hc),e(Hc,sjr),e(Hc,OZ),e(OZ,ljr),e(Hc,ijr),e(Hc,VZ),e(VZ,djr),e(Hc,cjr),e(pr,fjr),e(pr,i$),e(i$,mjr),e(i$,n5e),e(n5e,gjr),e(i$,hjr),e(pr,pjr),e(pr,Qt),M(d$,Qt,null),e(Qt,_jr),e(Qt,s5e),e(s5e,ujr),e(Qt,bjr),e(Qt,Uc),e(Uc,vjr),e(Uc,l5e),e(l5e,Fjr),e(Uc,Tjr),e(Uc,XZ),e(XZ,Mjr),e(Uc,Ejr),e(Qt,Cjr),M(K5,Qt,null),e(pr,wjr),e(pr,Vr),M(c$,Vr,null),e(Vr,Ajr),e(Vr,i5e),e(i5e,Ljr),e(Vr,yjr),e(Vr,Tn),e(Tn,xjr),e(Tn,d5e),e(d5e,$jr),e(Tn,kjr),e(Tn,c5e),e(c5e,Sjr),e(Tn,Rjr),e(Tn,f5e),e(f5e,Pjr),e(Tn,Bjr),e(Vr,Njr),e(Vr,oe),e(oe,Z5),e(Z5,m5e),e(m5e,Ijr),e(Z5,qjr),e(Z5,zZ),e(zZ,jjr),e(Z5,Djr),e(oe,Gjr),e(oe,e0),e(e0,g5e),e(g5e,Ojr),e(e0,Vjr),e(e0,QZ),e(QZ,Xjr),e(e0,zjr),e(oe,Qjr),e(oe,o0),e(o0,h5e),e(h5e,Wjr),e(o0,Hjr),e(o0,WZ),e(WZ,Ujr),e(o0,Jjr),e(oe,Yjr),e(oe,r0),e(r0,p5e),e(p5e,Kjr),e(r0,Zjr),e(r0,HZ),e(HZ,eDr),e(r0,oDr),e(oe,rDr),e(oe,t0),e(t0,_5e),e(_5e,tDr),e(t0,aDr),e(t0,UZ),e(UZ,nDr),e(t0,sDr),e(oe,lDr),e(oe,a0),e(a0,u5e),e(u5e,iDr),e(a0,dDr),e(a0,JZ),e(JZ,cDr),e(a0,fDr),e(oe,mDr),e(oe,n0),e(n0,b5e),e(b5e,gDr),e(n0,hDr),e(n0,YZ),e(YZ,pDr),e(n0,_Dr),e(oe,uDr),e(oe,s0),e(s0,v5e),e(v5e,bDr),e(s0,vDr),e(s0,KZ),e(KZ,FDr),e(s0,TDr),e(oe,MDr),e(oe,l0),e(l0,F5e),e(F5e,EDr),e(l0,CDr),e(l0,ZZ),e(ZZ,wDr),e(l0,ADr),e(oe,LDr),e(oe,i0),e(i0,T5e),e(T5e,yDr),e(i0,xDr),e(i0,eee),e(eee,$Dr),e(i0,kDr),e(oe,SDr),e(oe,d0),e(d0,M5e),e(M5e,RDr),e(d0,PDr),e(d0,oee),e(oee,BDr),e(d0,NDr),e(oe,IDr),e(oe,c0),e(c0,E5e),e(E5e,qDr),e(c0,jDr),e(c0,ree),e(ree,DDr),e(c0,GDr),e(oe,ODr),e(oe,f0),e(f0,C5e),e(C5e,VDr),e(f0,XDr),e(f0,tee),e(tee,zDr),e(f0,QDr),e(oe,WDr),e(oe,m0),e(m0,w5e),e(w5e,HDr),e(m0,UDr),e(m0,aee),e(aee,JDr),e(m0,YDr),e(oe,KDr),e(oe,g0),e(g0,A5e),e(A5e,ZDr),e(g0,eGr),e(g0,nee),e(nee,oGr),e(g0,rGr),e(oe,tGr),e(oe,h0),e(h0,L5e),e(L5e,aGr),e(h0,nGr),e(h0,see),e(see,sGr),e(h0,lGr),e(oe,iGr),e(oe,p0),e(p0,y5e),e(y5e,dGr),e(p0,cGr),e(p0,lee),e(lee,fGr),e(p0,mGr),e(oe,gGr),e(oe,_0),e(_0,x5e),e(x5e,hGr),e(_0,pGr),e(_0,iee),e(iee,_Gr),e(_0,uGr),e(oe,bGr),e(oe,u0),e(u0,$5e),e($5e,vGr),e(u0,FGr),e(u0,dee),e(dee,TGr),e(u0,MGr),e(oe,EGr),e(oe,b0),e(b0,k5e),e(k5e,CGr),e(b0,wGr),e(b0,cee),e(cee,AGr),e(b0,LGr),e(oe,yGr),e(oe,v0),e(v0,S5e),e(S5e,xGr),e(v0,$Gr),e(v0,fee),e(fee,kGr),e(v0,SGr),e(oe,RGr),e(oe,F0),e(F0,R5e),e(R5e,PGr),e(F0,BGr),e(F0,mee),e(mee,NGr),e(F0,IGr),e(oe,qGr),e(oe,T0),e(T0,P5e),e(P5e,jGr),e(T0,DGr),e(T0,gee),e(gee,GGr),e(T0,OGr),e(oe,VGr),e(oe,M0),e(M0,B5e),e(B5e,XGr),e(M0,zGr),e(M0,hee),e(hee,QGr),e(M0,WGr),e(oe,HGr),e(oe,E0),e(E0,N5e),e(N5e,UGr),e(E0,JGr),e(E0,pee),e(pee,YGr),e(E0,KGr),e(oe,ZGr),e(oe,C0),e(C0,I5e),e(I5e,eOr),e(C0,oOr),e(C0,_ee),e(_ee,rOr),e(C0,tOr),e(oe,aOr),e(oe,w0),e(w0,q5e),e(q5e,nOr),e(w0,sOr),e(w0,uee),e(uee,lOr),e(w0,iOr),e(Vr,dOr),M(A0,Vr,null),b(f,xze,u),b(f,Jc,u),e(Jc,L0),e(L0,j5e),M(f$,j5e,null),e(Jc,cOr),e(Jc,D5e),e(D5e,fOr),b(f,$ze,u),b(f,_r,u),M(m$,_r,null),e(_r,mOr),e(_r,Yc),e(Yc,gOr),e(Yc,bee),e(bee,hOr),e(Yc,pOr),e(Yc,vee),e(vee,_Or),e(Yc,uOr),e(_r,bOr),e(_r,g$),e(g$,vOr),e(g$,G5e),e(G5e,FOr),e(g$,TOr),e(_r,MOr),e(_r,Wt),M(h$,Wt,null),e(Wt,EOr),e(Wt,O5e),e(O5e,COr),e(Wt,wOr),e(Wt,Kc),e(Kc,AOr),e(Kc,V5e),e(V5e,LOr),e(Kc,yOr),e(Kc,Fee),e(Fee,xOr),e(Kc,$Or),e(Wt,kOr),M(y0,Wt,null),e(_r,SOr),e(_r,Xr),M(p$,Xr,null),e(Xr,ROr),e(Xr,X5e),e(X5e,POr),e(Xr,BOr),e(Xr,Mn),e(Mn,NOr),e(Mn,z5e),e(z5e,IOr),e(Mn,qOr),e(Mn,Q5e),e(Q5e,jOr),e(Mn,DOr),e(Mn,W5e),e(W5e,GOr),e(Mn,OOr),e(Xr,VOr),e(Xr,xe),e(xe,x0),e(x0,H5e),e(H5e,XOr),e(x0,zOr),e(x0,Tee),e(Tee,QOr),e(x0,WOr),e(xe,HOr),e(xe,$0),e($0,U5e),e(U5e,UOr),e($0,JOr),e($0,Mee),e(Mee,YOr),e($0,KOr),e(xe,ZOr),e(xe,k0),e(k0,J5e),e(J5e,eVr),e(k0,oVr),e(k0,Eee),e(Eee,rVr),e(k0,tVr),e(xe,aVr),e(xe,S0),e(S0,Y5e),e(Y5e,nVr),e(S0,sVr),e(S0,Cee),e(Cee,lVr),e(S0,iVr),e(xe,dVr),e(xe,R0),e(R0,K5e),e(K5e,cVr),e(R0,fVr),e(R0,wee),e(wee,mVr),e(R0,gVr),e(xe,hVr),e(xe,P0),e(P0,Z5e),e(Z5e,pVr),e(P0,_Vr),e(P0,Aee),e(Aee,uVr),e(P0,bVr),e(xe,vVr),e(xe,B0),e(B0,e0e),e(e0e,FVr),e(B0,TVr),e(B0,Lee),e(Lee,MVr),e(B0,EVr),e(xe,CVr),e(xe,N0),e(N0,o0e),e(o0e,wVr),e(N0,AVr),e(N0,yee),e(yee,LVr),e(N0,yVr),e(xe,xVr),e(xe,I0),e(I0,r0e),e(r0e,$Vr),e(I0,kVr),e(I0,xee),e(xee,SVr),e(I0,RVr),e(xe,PVr),e(xe,q0),e(q0,t0e),e(t0e,BVr),e(q0,NVr),e(q0,$ee),e($ee,IVr),e(q0,qVr),e(Xr,jVr),M(j0,Xr,null),b(f,kze,u),b(f,Zc,u),e(Zc,D0),e(D0,a0e),M(_$,a0e,null),e(Zc,DVr),e(Zc,n0e),e(n0e,GVr),b(f,Sze,u),b(f,ur,u),M(u$,ur,null),e(ur,OVr),e(ur,ef),e(ef,VVr),e(ef,kee),e(kee,XVr),e(ef,zVr),e(ef,See),e(See,QVr),e(ef,WVr),e(ur,HVr),e(ur,b$),e(b$,UVr),e(b$,s0e),e(s0e,JVr),e(b$,YVr),e(ur,KVr),e(ur,Ht),M(v$,Ht,null),e(Ht,ZVr),e(Ht,l0e),e(l0e,eXr),e(Ht,oXr),e(Ht,of),e(of,rXr),e(of,i0e),e(i0e,tXr),e(of,aXr),e(of,Ree),e(Ree,nXr),e(of,sXr),e(Ht,lXr),M(G0,Ht,null),e(ur,iXr),e(ur,zr),M(F$,zr,null),e(zr,dXr),e(zr,d0e),e(d0e,cXr),e(zr,fXr),e(zr,En),e(En,mXr),e(En,c0e),e(c0e,gXr),e(En,hXr),e(En,f0e),e(f0e,pXr),e(En,_Xr),e(En,m0e),e(m0e,uXr),e(En,bXr),e(zr,vXr),e(zr,Ee),e(Ee,O0),e(O0,g0e),e(g0e,FXr),e(O0,TXr),e(O0,Pee),e(Pee,MXr),e(O0,EXr),e(Ee,CXr),e(Ee,V0),e(V0,h0e),e(h0e,wXr),e(V0,AXr),e(V0,Bee),e(Bee,LXr),e(V0,yXr),e(Ee,xXr),e(Ee,X0),e(X0,p0e),e(p0e,$Xr),e(X0,kXr),e(X0,Nee),e(Nee,SXr),e(X0,RXr),e(Ee,PXr),e(Ee,z0),e(z0,_0e),e(_0e,BXr),e(z0,NXr),e(z0,Iee),e(Iee,IXr),e(z0,qXr),e(Ee,jXr),e(Ee,Q0),e(Q0,u0e),e(u0e,DXr),e(Q0,GXr),e(Q0,qee),e(qee,OXr),e(Q0,VXr),e(Ee,XXr),e(Ee,W0),e(W0,b0e),e(b0e,zXr),e(W0,QXr),e(W0,jee),e(jee,WXr),e(W0,HXr),e(Ee,UXr),e(Ee,H0),e(H0,v0e),e(v0e,JXr),e(H0,YXr),e(H0,Dee),e(Dee,KXr),e(H0,ZXr),e(Ee,ezr),e(Ee,U0),e(U0,F0e),e(F0e,ozr),e(U0,rzr),e(U0,Gee),e(Gee,tzr),e(U0,azr),e(Ee,nzr),e(Ee,J0),e(J0,T0e),e(T0e,szr),e(J0,lzr),e(J0,Oee),e(Oee,izr),e(J0,dzr),e(Ee,czr),e(Ee,Y0),e(Y0,M0e),e(M0e,fzr),e(Y0,mzr),e(Y0,Vee),e(Vee,gzr),e(Y0,hzr),e(Ee,pzr),e(Ee,K0),e(K0,E0e),e(E0e,_zr),e(K0,uzr),e(K0,Xee),e(Xee,bzr),e(K0,vzr),e(Ee,Fzr),e(Ee,Z0),e(Z0,C0e),e(C0e,Tzr),e(Z0,Mzr),e(Z0,zee),e(zee,Ezr),e(Z0,Czr),e(Ee,wzr),e(Ee,ew),e(ew,w0e),e(w0e,Azr),e(ew,Lzr),e(ew,Qee),e(Qee,yzr),e(ew,xzr),e(zr,$zr),M(ow,zr,null),b(f,Rze,u),b(f,rf,u),e(rf,rw),e(rw,A0e),M(T$,A0e,null),e(rf,kzr),e(rf,L0e),e(L0e,Szr),b(f,Pze,u),b(f,br,u),M(M$,br,null),e(br,Rzr),e(br,tf),e(tf,Pzr),e(tf,Wee),e(Wee,Bzr),e(tf,Nzr),e(tf,Hee),e(Hee,Izr),e(tf,qzr),e(br,jzr),e(br,E$),e(E$,Dzr),e(E$,y0e),e(y0e,Gzr),e(E$,Ozr),e(br,Vzr),e(br,Ut),M(C$,Ut,null),e(Ut,Xzr),e(Ut,x0e),e(x0e,zzr),e(Ut,Qzr),e(Ut,af),e(af,Wzr),e(af,$0e),e($0e,Hzr),e(af,Uzr),e(af,Uee),e(Uee,Jzr),e(af,Yzr),e(Ut,Kzr),M(tw,Ut,null),e(br,Zzr),e(br,Qr),M(w$,Qr,null),e(Qr,eQr),e(Qr,k0e),e(k0e,oQr),e(Qr,rQr),e(Qr,Cn),e(Cn,tQr),e(Cn,S0e),e(S0e,aQr),e(Cn,nQr),e(Cn,R0e),e(R0e,sQr),e(Cn,lQr),e(Cn,P0e),e(P0e,iQr),e(Cn,dQr),e(Qr,cQr),e(Qr,$e),e($e,aw),e(aw,B0e),e(B0e,fQr),e(aw,mQr),e(aw,Jee),e(Jee,gQr),e(aw,hQr),e($e,pQr),e($e,nw),e(nw,N0e),e(N0e,_Qr),e(nw,uQr),e(nw,Yee),e(Yee,bQr),e(nw,vQr),e($e,FQr),e($e,sw),e(sw,I0e),e(I0e,TQr),e(sw,MQr),e(sw,Kee),e(Kee,EQr),e(sw,CQr),e($e,wQr),e($e,lw),e(lw,q0e),e(q0e,AQr),e(lw,LQr),e(lw,Zee),e(Zee,yQr),e(lw,xQr),e($e,$Qr),e($e,iw),e(iw,j0e),e(j0e,kQr),e(iw,SQr),e(iw,eoe),e(eoe,RQr),e(iw,PQr),e($e,BQr),e($e,dw),e(dw,D0e),e(D0e,NQr),e(dw,IQr),e(dw,ooe),e(ooe,qQr),e(dw,jQr),e($e,DQr),e($e,cw),e(cw,G0e),e(G0e,GQr),e(cw,OQr),e(cw,roe),e(roe,VQr),e(cw,XQr),e($e,zQr),e($e,fw),e(fw,O0e),e(O0e,QQr),e(fw,WQr),e(fw,toe),e(toe,HQr),e(fw,UQr),e($e,JQr),e($e,mw),e(mw,V0e),e(V0e,YQr),e(mw,KQr),e(mw,aoe),e(aoe,ZQr),e(mw,eWr),e($e,oWr),e($e,gw),e(gw,X0e),e(X0e,rWr),e(gw,tWr),e(gw,noe),e(noe,aWr),e(gw,nWr),e(Qr,sWr),M(hw,Qr,null),b(f,Bze,u),b(f,nf,u),e(nf,pw),e(pw,z0e),M(A$,z0e,null),e(nf,lWr),e(nf,Q0e),e(Q0e,iWr),b(f,Nze,u),b(f,vr,u),M(L$,vr,null),e(vr,dWr),e(vr,sf),e(sf,cWr),e(sf,soe),e(soe,fWr),e(sf,mWr),e(sf,loe),e(loe,gWr),e(sf,hWr),e(vr,pWr),e(vr,y$),e(y$,_Wr),e(y$,W0e),e(W0e,uWr),e(y$,bWr),e(vr,vWr),e(vr,Jt),M(x$,Jt,null),e(Jt,FWr),e(Jt,H0e),e(H0e,TWr),e(Jt,MWr),e(Jt,lf),e(lf,EWr),e(lf,U0e),e(U0e,CWr),e(lf,wWr),e(lf,ioe),e(ioe,AWr),e(lf,LWr),e(Jt,yWr),M(_w,Jt,null),e(vr,xWr),e(vr,Wr),M($$,Wr,null),e(Wr,$Wr),e(Wr,J0e),e(J0e,kWr),e(Wr,SWr),e(Wr,wn),e(wn,RWr),e(wn,Y0e),e(Y0e,PWr),e(wn,BWr),e(wn,K0e),e(K0e,NWr),e(wn,IWr),e(wn,Z0e),e(Z0e,qWr),e(wn,jWr),e(Wr,DWr),e(Wr,ke),e(ke,uw),e(uw,ewe),e(ewe,GWr),e(uw,OWr),e(uw,doe),e(doe,VWr),e(uw,XWr),e(ke,zWr),e(ke,bw),e(bw,owe),e(owe,QWr),e(bw,WWr),e(bw,coe),e(coe,HWr),e(bw,UWr),e(ke,JWr),e(ke,vw),e(vw,rwe),e(rwe,YWr),e(vw,KWr),e(vw,foe),e(foe,ZWr),e(vw,eHr),e(ke,oHr),e(ke,Fw),e(Fw,twe),e(twe,rHr),e(Fw,tHr),e(Fw,moe),e(moe,aHr),e(Fw,nHr),e(ke,sHr),e(ke,Tw),e(Tw,awe),e(awe,lHr),e(Tw,iHr),e(Tw,goe),e(goe,dHr),e(Tw,cHr),e(ke,fHr),e(ke,Mw),e(Mw,nwe),e(nwe,mHr),e(Mw,gHr),e(Mw,hoe),e(hoe,hHr),e(Mw,pHr),e(ke,_Hr),e(ke,Ew),e(Ew,swe),e(swe,uHr),e(Ew,bHr),e(Ew,poe),e(poe,vHr),e(Ew,FHr),e(ke,THr),e(ke,Cw),e(Cw,lwe),e(lwe,MHr),e(Cw,EHr),e(Cw,_oe),e(_oe,CHr),e(Cw,wHr),e(ke,AHr),e(ke,ww),e(ww,iwe),e(iwe,LHr),e(ww,yHr),e(ww,uoe),e(uoe,xHr),e(ww,$Hr),e(ke,kHr),e(ke,Aw),e(Aw,dwe),e(dwe,SHr),e(Aw,RHr),e(Aw,boe),e(boe,PHr),e(Aw,BHr),e(Wr,NHr),M(Lw,Wr,null),b(f,Ize,u),b(f,df,u),e(df,yw),e(yw,cwe),M(k$,cwe,null),e(df,IHr),e(df,fwe),e(fwe,qHr),b(f,qze,u),b(f,Fr,u),M(S$,Fr,null),e(Fr,jHr),e(Fr,cf),e(cf,DHr),e(cf,voe),e(voe,GHr),e(cf,OHr),e(cf,Foe),e(Foe,VHr),e(cf,XHr),e(Fr,zHr),e(Fr,R$),e(R$,QHr),e(R$,mwe),e(mwe,WHr),e(R$,HHr),e(Fr,UHr),e(Fr,Yt),M(P$,Yt,null),e(Yt,JHr),e(Yt,gwe),e(gwe,YHr),e(Yt,KHr),e(Yt,ff),e(ff,ZHr),e(ff,hwe),e(hwe,eUr),e(ff,oUr),e(ff,Toe),e(Toe,rUr),e(ff,tUr),e(Yt,aUr),M(xw,Yt,null),e(Fr,nUr),e(Fr,Hr),M(B$,Hr,null),e(Hr,sUr),e(Hr,pwe),e(pwe,lUr),e(Hr,iUr),e(Hr,An),e(An,dUr),e(An,_we),e(_we,cUr),e(An,fUr),e(An,uwe),e(uwe,mUr),e(An,gUr),e(An,bwe),e(bwe,hUr),e(An,pUr),e(Hr,_Ur),e(Hr,Se),e(Se,$w),e($w,vwe),e(vwe,uUr),e($w,bUr),e($w,Moe),e(Moe,vUr),e($w,FUr),e(Se,TUr),e(Se,kw),e(kw,Fwe),e(Fwe,MUr),e(kw,EUr),e(kw,Eoe),e(Eoe,CUr),e(kw,wUr),e(Se,AUr),e(Se,Sw),e(Sw,Twe),e(Twe,LUr),e(Sw,yUr),e(Sw,Coe),e(Coe,xUr),e(Sw,$Ur),e(Se,kUr),e(Se,Rw),e(Rw,Mwe),e(Mwe,SUr),e(Rw,RUr),e(Rw,woe),e(woe,PUr),e(Rw,BUr),e(Se,NUr),e(Se,Pw),e(Pw,Ewe),e(Ewe,IUr),e(Pw,qUr),e(Pw,Aoe),e(Aoe,jUr),e(Pw,DUr),e(Se,GUr),e(Se,Bw),e(Bw,Cwe),e(Cwe,OUr),e(Bw,VUr),e(Bw,Loe),e(Loe,XUr),e(Bw,zUr),e(Se,QUr),e(Se,Nw),e(Nw,wwe),e(wwe,WUr),e(Nw,HUr),e(Nw,yoe),e(yoe,UUr),e(Nw,JUr),e(Se,YUr),e(Se,Iw),e(Iw,Awe),e(Awe,KUr),e(Iw,ZUr),e(Iw,xoe),e(xoe,eJr),e(Iw,oJr),e(Se,rJr),e(Se,qw),e(qw,Lwe),e(Lwe,tJr),e(qw,aJr),e(qw,$oe),e($oe,nJr),e(qw,sJr),e(Se,lJr),e(Se,jw),e(jw,ywe),e(ywe,iJr),e(jw,dJr),e(jw,koe),e(koe,cJr),e(jw,fJr),e(Hr,mJr),M(Dw,Hr,null),b(f,jze,u),b(f,mf,u),e(mf,Gw),e(Gw,xwe),M(N$,xwe,null),e(mf,gJr),e(mf,$we),e($we,hJr),b(f,Dze,u),b(f,Tr,u),M(I$,Tr,null),e(Tr,pJr),e(Tr,gf),e(gf,_Jr),e(gf,Soe),e(Soe,uJr),e(gf,bJr),e(gf,Roe),e(Roe,vJr),e(gf,FJr),e(Tr,TJr),e(Tr,q$),e(q$,MJr),e(q$,kwe),e(kwe,EJr),e(q$,CJr),e(Tr,wJr),e(Tr,Kt),M(j$,Kt,null),e(Kt,AJr),e(Kt,Swe),e(Swe,LJr),e(Kt,yJr),e(Kt,hf),e(hf,xJr),e(hf,Rwe),e(Rwe,$Jr),e(hf,kJr),e(hf,Poe),e(Poe,SJr),e(hf,RJr),e(Kt,PJr),M(Ow,Kt,null),e(Tr,BJr),e(Tr,Ur),M(D$,Ur,null),e(Ur,NJr),e(Ur,Pwe),e(Pwe,IJr),e(Ur,qJr),e(Ur,Ln),e(Ln,jJr),e(Ln,Bwe),e(Bwe,DJr),e(Ln,GJr),e(Ln,Nwe),e(Nwe,OJr),e(Ln,VJr),e(Ln,Iwe),e(Iwe,XJr),e(Ln,zJr),e(Ur,QJr),e(Ur,Re),e(Re,Vw),e(Vw,qwe),e(qwe,WJr),e(Vw,HJr),e(Vw,Boe),e(Boe,UJr),e(Vw,JJr),e(Re,YJr),e(Re,Xw),e(Xw,jwe),e(jwe,KJr),e(Xw,ZJr),e(Xw,Noe),e(Noe,eYr),e(Xw,oYr),e(Re,rYr),e(Re,zw),e(zw,Dwe),e(Dwe,tYr),e(zw,aYr),e(zw,Ioe),e(Ioe,nYr),e(zw,sYr),e(Re,lYr),e(Re,Qw),e(Qw,Gwe),e(Gwe,iYr),e(Qw,dYr),e(Qw,qoe),e(qoe,cYr),e(Qw,fYr),e(Re,mYr),e(Re,Ww),e(Ww,Owe),e(Owe,gYr),e(Ww,hYr),e(Ww,joe),e(joe,pYr),e(Ww,_Yr),e(Re,uYr),e(Re,Hw),e(Hw,Vwe),e(Vwe,bYr),e(Hw,vYr),e(Hw,Doe),e(Doe,FYr),e(Hw,TYr),e(Re,MYr),e(Re,Uw),e(Uw,Xwe),e(Xwe,EYr),e(Uw,CYr),e(Uw,Goe),e(Goe,wYr),e(Uw,AYr),e(Re,LYr),e(Re,Jw),e(Jw,zwe),e(zwe,yYr),e(Jw,xYr),e(Jw,Ooe),e(Ooe,$Yr),e(Jw,kYr),e(Re,SYr),e(Re,Yw),e(Yw,Qwe),e(Qwe,RYr),e(Yw,PYr),e(Yw,Voe),e(Voe,BYr),e(Yw,NYr),e(Re,IYr),e(Re,Kw),e(Kw,Wwe),e(Wwe,qYr),e(Kw,jYr),e(Kw,Xoe),e(Xoe,DYr),e(Kw,GYr),e(Ur,OYr),M(Zw,Ur,null),b(f,Gze,u),b(f,pf,u),e(pf,eA),e(eA,Hwe),M(G$,Hwe,null),e(pf,VYr),e(pf,Uwe),e(Uwe,XYr),b(f,Oze,u),b(f,Mr,u),M(O$,Mr,null),e(Mr,zYr),e(Mr,_f),e(_f,QYr),e(_f,zoe),e(zoe,WYr),e(_f,HYr),e(_f,Qoe),e(Qoe,UYr),e(_f,JYr),e(Mr,YYr),e(Mr,V$),e(V$,KYr),e(V$,Jwe),e(Jwe,ZYr),e(V$,eKr),e(Mr,oKr),e(Mr,Zt),M(X$,Zt,null),e(Zt,rKr),e(Zt,Ywe),e(Ywe,tKr),e(Zt,aKr),e(Zt,uf),e(uf,nKr),e(uf,Kwe),e(Kwe,sKr),e(uf,lKr),e(uf,Woe),e(Woe,iKr),e(uf,dKr),e(Zt,cKr),M(oA,Zt,null),e(Mr,fKr),e(Mr,Jr),M(z$,Jr,null),e(Jr,mKr),e(Jr,Zwe),e(Zwe,gKr),e(Jr,hKr),e(Jr,yn),e(yn,pKr),e(yn,eAe),e(eAe,_Kr),e(yn,uKr),e(yn,oAe),e(oAe,bKr),e(yn,vKr),e(yn,rAe),e(rAe,FKr),e(yn,TKr),e(Jr,MKr),e(Jr,Ve),e(Ve,rA),e(rA,tAe),e(tAe,EKr),e(rA,CKr),e(rA,Hoe),e(Hoe,wKr),e(rA,AKr),e(Ve,LKr),e(Ve,tA),e(tA,aAe),e(aAe,yKr),e(tA,xKr),e(tA,Uoe),e(Uoe,$Kr),e(tA,kKr),e(Ve,SKr),e(Ve,aA),e(aA,nAe),e(nAe,RKr),e(aA,PKr),e(aA,Joe),e(Joe,BKr),e(aA,NKr),e(Ve,IKr),e(Ve,nA),e(nA,sAe),e(sAe,qKr),e(nA,jKr),e(nA,Yoe),e(Yoe,DKr),e(nA,GKr),e(Ve,OKr),e(Ve,sA),e(sA,lAe),e(lAe,VKr),e(sA,XKr),e(sA,Koe),e(Koe,zKr),e(sA,QKr),e(Ve,WKr),e(Ve,lA),e(lA,iAe),e(iAe,HKr),e(lA,UKr),e(lA,Zoe),e(Zoe,JKr),e(lA,YKr),e(Ve,KKr),e(Ve,iA),e(iA,dAe),e(dAe,ZKr),e(iA,eZr),e(iA,ere),e(ere,oZr),e(iA,rZr),e(Ve,tZr),e(Ve,dA),e(dA,cAe),e(cAe,aZr),e(dA,nZr),e(dA,ore),e(ore,sZr),e(dA,lZr),e(Jr,iZr),M(cA,Jr,null),b(f,Vze,u),b(f,bf,u),e(bf,fA),e(fA,fAe),M(Q$,fAe,null),e(bf,dZr),e(bf,mAe),e(mAe,cZr),b(f,Xze,u),b(f,Er,u),M(W$,Er,null),e(Er,fZr),e(Er,vf),e(vf,mZr),e(vf,rre),e(rre,gZr),e(vf,hZr),e(vf,tre),e(tre,pZr),e(vf,_Zr),e(Er,uZr),e(Er,H$),e(H$,bZr),e(H$,gAe),e(gAe,vZr),e(H$,FZr),e(Er,TZr),e(Er,ea),M(U$,ea,null),e(ea,MZr),e(ea,hAe),e(hAe,EZr),e(ea,CZr),e(ea,Ff),e(Ff,wZr),e(Ff,pAe),e(pAe,AZr),e(Ff,LZr),e(Ff,are),e(are,yZr),e(Ff,xZr),e(ea,$Zr),M(mA,ea,null),e(Er,kZr),e(Er,Yr),M(J$,Yr,null),e(Yr,SZr),e(Yr,_Ae),e(_Ae,RZr),e(Yr,PZr),e(Yr,xn),e(xn,BZr),e(xn,uAe),e(uAe,NZr),e(xn,IZr),e(xn,bAe),e(bAe,qZr),e(xn,jZr),e(xn,vAe),e(vAe,DZr),e(xn,GZr),e(Yr,OZr),e(Yr,Xe),e(Xe,gA),e(gA,FAe),e(FAe,VZr),e(gA,XZr),e(gA,nre),e(nre,zZr),e(gA,QZr),e(Xe,WZr),e(Xe,hA),e(hA,TAe),e(TAe,HZr),e(hA,UZr),e(hA,sre),e(sre,JZr),e(hA,YZr),e(Xe,KZr),e(Xe,pA),e(pA,MAe),e(MAe,ZZr),e(pA,eet),e(pA,lre),e(lre,oet),e(pA,ret),e(Xe,tet),e(Xe,_A),e(_A,EAe),e(EAe,aet),e(_A,net),e(_A,ire),e(ire,set),e(_A,iet),e(Xe,det),e(Xe,uA),e(uA,CAe),e(CAe,cet),e(uA,fet),e(uA,dre),e(dre,met),e(uA,get),e(Xe,het),e(Xe,bA),e(bA,wAe),e(wAe,pet),e(bA,_et),e(bA,cre),e(cre,uet),e(bA,bet),e(Xe,vet),e(Xe,vA),e(vA,AAe),e(AAe,Fet),e(vA,Tet),e(vA,fre),e(fre,Met),e(vA,Eet),e(Xe,Cet),e(Xe,FA),e(FA,LAe),e(LAe,wet),e(FA,Aet),e(FA,mre),e(mre,Let),e(FA,yet),e(Yr,xet),M(TA,Yr,null),b(f,zze,u),b(f,Tf,u),e(Tf,MA),e(MA,yAe),M(Y$,yAe,null),e(Tf,$et),e(Tf,xAe),e(xAe,ket),b(f,Qze,u),b(f,Cr,u),M(K$,Cr,null),e(Cr,Set),e(Cr,Mf),e(Mf,Ret),e(Mf,gre),e(gre,Pet),e(Mf,Bet),e(Mf,hre),e(hre,Net),e(Mf,Iet),e(Cr,qet),e(Cr,Z$),e(Z$,jet),e(Z$,$Ae),e($Ae,Det),e(Z$,Get),e(Cr,Oet),e(Cr,oa),M(ek,oa,null),e(oa,Vet),e(oa,kAe),e(kAe,Xet),e(oa,zet),e(oa,Ef),e(Ef,Qet),e(Ef,SAe),e(SAe,Wet),e(Ef,Het),e(Ef,pre),e(pre,Uet),e(Ef,Jet),e(oa,Yet),M(EA,oa,null),e(Cr,Ket),e(Cr,Kr),M(ok,Kr,null),e(Kr,Zet),e(Kr,RAe),e(RAe,eot),e(Kr,oot),e(Kr,$n),e($n,rot),e($n,PAe),e(PAe,tot),e($n,aot),e($n,BAe),e(BAe,not),e($n,sot),e($n,NAe),e(NAe,lot),e($n,iot),e(Kr,dot),e(Kr,IAe),e(IAe,CA),e(CA,qAe),e(qAe,cot),e(CA,fot),e(CA,_re),e(_re,mot),e(CA,got),e(Kr,hot),M(wA,Kr,null),b(f,Wze,u),b(f,Cf,u),e(Cf,AA),e(AA,jAe),M(rk,jAe,null),e(Cf,pot),e(Cf,DAe),e(DAe,_ot),b(f,Hze,u),b(f,wr,u),M(tk,wr,null),e(wr,uot),e(wr,wf),e(wf,bot),e(wf,ure),e(ure,vot),e(wf,Fot),e(wf,bre),e(bre,Tot),e(wf,Mot),e(wr,Eot),e(wr,ak),e(ak,Cot),e(ak,GAe),e(GAe,wot),e(ak,Aot),e(wr,Lot),e(wr,ra),M(nk,ra,null),e(ra,yot),e(ra,OAe),e(OAe,xot),e(ra,$ot),e(ra,Af),e(Af,kot),e(Af,VAe),e(VAe,Sot),e(Af,Rot),e(Af,vre),e(vre,Pot),e(Af,Bot),e(ra,Not),M(LA,ra,null),e(wr,Iot),e(wr,Zr),M(sk,Zr,null),e(Zr,qot),e(Zr,XAe),e(XAe,jot),e(Zr,Dot),e(Zr,kn),e(kn,Got),e(kn,zAe),e(zAe,Oot),e(kn,Vot),e(kn,QAe),e(QAe,Xot),e(kn,zot),e(kn,WAe),e(WAe,Qot),e(kn,Wot),e(Zr,Hot),e(Zr,lk),e(lk,yA),e(yA,HAe),e(HAe,Uot),e(yA,Jot),e(yA,Fre),e(Fre,Yot),e(yA,Kot),e(lk,Zot),e(lk,xA),e(xA,UAe),e(UAe,ert),e(xA,ort),e(xA,Tre),e(Tre,rrt),e(xA,trt),e(Zr,art),M($A,Zr,null),b(f,Uze,u),b(f,Lf,u),e(Lf,kA),e(kA,JAe),M(ik,JAe,null),e(Lf,nrt),e(Lf,YAe),e(YAe,srt),b(f,Jze,u),b(f,Ar,u),M(dk,Ar,null),e(Ar,lrt),e(Ar,yf),e(yf,irt),e(yf,Mre),e(Mre,drt),e(yf,crt),e(yf,Ere),e(Ere,frt),e(yf,mrt),e(Ar,grt),e(Ar,ck),e(ck,hrt),e(ck,KAe),e(KAe,prt),e(ck,_rt),e(Ar,urt),e(Ar,ta),M(fk,ta,null),e(ta,brt),e(ta,ZAe),e(ZAe,vrt),e(ta,Frt),e(ta,xf),e(xf,Trt),e(xf,e6e),e(e6e,Mrt),e(xf,Ert),e(xf,Cre),e(Cre,Crt),e(xf,wrt),e(ta,Art),M(SA,ta,null),e(Ar,Lrt),e(Ar,et),M(mk,et,null),e(et,yrt),e(et,o6e),e(o6e,xrt),e(et,$rt),e(et,Sn),e(Sn,krt),e(Sn,r6e),e(r6e,Srt),e(Sn,Rrt),e(Sn,t6e),e(t6e,Prt),e(Sn,Brt),e(Sn,a6e),e(a6e,Nrt),e(Sn,Irt),e(et,qrt),e(et,n6e),e(n6e,RA),e(RA,s6e),e(s6e,jrt),e(RA,Drt),e(RA,wre),e(wre,Grt),e(RA,Ort),e(et,Vrt),M(PA,et,null),Yze=!0},p(f,[u]){const gk={};u&2&&(gk.$$scope={dirty:u,ctx:f}),qf.$set(gk);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),Jg.$set(l6e);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),Sh.$set(i6e);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),pp.$set(d6e);const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),_p.$set(hk);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),Ip.$set(c6e);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),qp.$set(Rn);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),Gp.$set(f6e);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),zu.$set(m6e);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),Wu.$set(g6e);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),D1.$set(pk);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),O1.$set(h6e);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),$2.$set(_k);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),S2.$set(p6e);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),bb.$set(uk);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),Fb.$set(_6e);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),Db.$set(u6e);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),Ob.$set(b6e);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Gv.$set($f);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),Vv.$set(v6e);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),T3.$set(F6e);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),E3.$set(T6e);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),k3.$set(bk);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),R3.$set(M6e);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),uF.$set(E6e);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),vF.$set(C6e);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),dT.$set(at);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),fT.$set(vk);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),hT.$set(w6e);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),_T.$set(Fk);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),kT.$set(A6e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),RT.$set(nt);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),NT.$set(L6e);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),qT.$set(kf);const y6e={};u&2&&(y6e.$$scope={dirty:u,ctx:f}),GT.$set(y6e);const x6e={};u&2&&(x6e.$$scope={dirty:u,ctx:f}),VT.$set(x6e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),e8.$set(L);const BA={};u&2&&(BA.$$scope={dirty:u,ctx:f}),r8.$set(BA);const $6e={};u&2&&($6e.$$scope={dirty:u,ctx:f}),d8.$set($6e);const k6e={};u&2&&(k6e.$$scope={dirty:u,ctx:f}),f8.$set(k6e);const NA={};u&2&&(NA.$$scope={dirty:u,ctx:f}),E8.$set(NA);const S6e={};u&2&&(S6e.$$scope={dirty:u,ctx:f}),w8.$set(S6e);const R6e={};u&2&&(R6e.$$scope={dirty:u,ctx:f}),x8.$set(R6e);const IA={};u&2&&(IA.$$scope={dirty:u,ctx:f}),k8.$set(IA);const P6e={};u&2&&(P6e.$$scope={dirty:u,ctx:f}),q8.$set(P6e);const B6e={};u&2&&(B6e.$$scope={dirty:u,ctx:f}),D8.$set(B6e);const qA={};u&2&&(qA.$$scope={dirty:u,ctx:f}),z8.$set(qA);const N6e={};u&2&&(N6e.$$scope={dirty:u,ctx:f}),W8.$set(N6e);const I6e={};u&2&&(I6e.$$scope={dirty:u,ctx:f}),Y8.$set(I6e);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),Z8.$set(jA);const q6e={};u&2&&(q6e.$$scope={dirty:u,ctx:f}),rM.$set(q6e);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:f}),aM.$set(j6e);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),fM.$set(DA);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:f}),gM.$set(D6e);const G6e={};u&2&&(G6e.$$scope={dirty:u,ctx:f}),_M.$set(G6e);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),bM.$set(GA);const O6e={};u&2&&(O6e.$$scope={dirty:u,ctx:f}),g4.$set(O6e);const V6e={};u&2&&(V6e.$$scope={dirty:u,ctx:f}),p4.$set(V6e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),j4.$set(OA);const X6e={};u&2&&(X6e.$$scope={dirty:u,ctx:f}),G4.$set(X6e);const z6e={};u&2&&(z6e.$$scope={dirty:u,ctx:f}),oE.$set(z6e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),tE.$set(VA);const Q6e={};u&2&&(Q6e.$$scope={dirty:u,ctx:f}),cE.$set(Q6e);const W6e={};u&2&&(W6e.$$scope={dirty:u,ctx:f}),mE.$set(W6e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),RE.$set(XA);const H6e={};u&2&&(H6e.$$scope={dirty:u,ctx:f}),BE.$set(H6e);const U6e={};u&2&&(U6e.$$scope={dirty:u,ctx:f}),QE.$set(U6e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),HE.$set(zA);const J6e={};u&2&&(J6e.$$scope={dirty:u,ctx:f}),TC.$set(J6e);const Y6e={};u&2&&(Y6e.$$scope={dirty:u,ctx:f}),EC.$set(Y6e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),GC.$set(QA);const K6e={};u&2&&(K6e.$$scope={dirty:u,ctx:f}),VC.$set(K6e);const Z6e={};u&2&&(Z6e.$$scope={dirty:u,ctx:f}),QC.$set(Z6e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),HC.$set(WA);const e7e={};u&2&&(e7e.$$scope={dirty:u,ctx:f}),JC.$set(e7e);const o7e={};u&2&&(o7e.$$scope={dirty:u,ctx:f}),KC.$set(o7e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),v5.$set(HA);const r7e={};u&2&&(r7e.$$scope={dirty:u,ctx:f}),T5.$set(r7e);const t7e={};u&2&&(t7e.$$scope={dirty:u,ctx:f}),O5.$set(t7e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),X5.$set(UA);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:f}),Q5.$set(a7e);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:f}),H5.$set(n7e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),J5.$set(JA);const s7e={};u&2&&(s7e.$$scope={dirty:u,ctx:f}),K5.$set(s7e);const l7e={};u&2&&(l7e.$$scope={dirty:u,ctx:f}),A0.$set(l7e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),y0.$set(YA);const i7e={};u&2&&(i7e.$$scope={dirty:u,ctx:f}),j0.$set(i7e);const d7e={};u&2&&(d7e.$$scope={dirty:u,ctx:f}),G0.$set(d7e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),ow.$set(KA);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),tw.$set(c7e);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),hw.$set(f7e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),_w.$set(ZA);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),Lw.$set(m7e);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),xw.$set(g7e);const e6={};u&2&&(e6.$$scope={dirty:u,ctx:f}),Dw.$set(e6);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),Ow.$set(h7e);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),Zw.$set(p7e);const o6={};u&2&&(o6.$$scope={dirty:u,ctx:f}),oA.$set(o6);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),cA.$set(_7e);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),mA.$set(u7e);const r6={};u&2&&(r6.$$scope={dirty:u,ctx:f}),TA.$set(r6);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),EA.$set(b7e);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),wA.$set(v7e);const t6={};u&2&&(t6.$$scope={dirty:u,ctx:f}),LA.$set(t6);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),$A.$set(F7e);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),SA.$set(T7e);const a6={};u&2&&(a6.$$scope={dirty:u,ctx:f}),PA.$set(a6)},i(f){Yze||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(qf.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(dL.$$.fragment,f),E(Jg.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(pL.$$.fragment,f),E(Sh.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(TL.$$.fragment,f),E(pp.$$.fragment,f),E(_p.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(LL.$$.fragment,f),E(Ip.$$.fragment,f),E(qp.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(Gp.$$.fragment,f),E(RL.$$.fragment,f),E(zu.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(Wu.$$.fragment,f),E(qL.$$.fragment,f),E(D1.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(O1.$$.fragment,f),E(VL.$$.fragment,f),E($2.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(S2.$$.fragment,f),E(HL.$$.fragment,f),E(bb.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(Fb.$$.fragment,f),E(ZL.$$.fragment,f),E(Db.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Ob.$$.fragment,f),E(ay.$$.fragment,f),E(Gv.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(Vv.$$.fragment,f),E(dy.$$.fragment,f),E(T3.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(E3.$$.fragment,f),E(hy.$$.fragment,f),E(k3.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(R3.$$.fragment,f),E(vy.$$.fragment,f),E(uF.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(vF.$$.fragment,f),E(Cy.$$.fragment,f),E(dT.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(fT.$$.fragment,f),E(xy.$$.fragment,f),E(hT.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(_T.$$.fragment,f),E(Py.$$.fragment,f),E(kT.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(RT.$$.fragment,f),E(jy.$$.fragment,f),E(NT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(qT.$$.fragment,f),E(Xy.$$.fragment,f),E(GT.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(VT.$$.fragment,f),E(Uy.$$.fragment,f),E(e8.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(r8.$$.fragment,f),E(e9.$$.fragment,f),E(d8.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(f8.$$.fragment,f),E(n9.$$.fragment,f),E(E8.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(w8.$$.fragment,f),E(c9.$$.fragment,f),E(x8.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(k8.$$.fragment,f),E(_9.$$.fragment,f),E(q8.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(D8.$$.fragment,f),E(T9.$$.fragment,f),E(z8.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(W8.$$.fragment,f),E(A9.$$.fragment,f),E(Y8.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(Z8.$$.fragment,f),E(S9.$$.fragment,f),E(rM.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(N9.$$.fragment,f),E(aM.$$.fragment,f),E(I9.$$.fragment,f),E(fM.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(gM.$$.fragment,f),E(O9.$$.fragment,f),E(_M.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(Q9.$$.fragment,f),E(bM.$$.fragment,f),E(W9.$$.fragment,f),E(g4.$$.fragment,f),E(H9.$$.fragment,f),E(U9.$$.fragment,f),E(Y9.$$.fragment,f),E(p4.$$.fragment,f),E(K9.$$.fragment,f),E(j4.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(G4.$$.fragment,f),E(tx.$$.fragment,f),E(oE.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(tE.$$.fragment,f),E(ix.$$.fragment,f),E(cE.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(mE.$$.fragment,f),E(gx.$$.fragment,f),E(RE.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(BE.$$.fragment,f),E(bx.$$.fragment,f),E(QE.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(HE.$$.fragment,f),E(Ex.$$.fragment,f),E(TC.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(EC.$$.fragment,f),E(yx.$$.fragment,f),E(GC.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(VC.$$.fragment,f),E(Rx.$$.fragment,f),E(QC.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(HC.$$.fragment,f),E(jx.$$.fragment,f),E(JC.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(KC.$$.fragment,f),E(Xx.$$.fragment,f),E(v5.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(T5.$$.fragment,f),E(Ux.$$.fragment,f),E(O5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(X5.$$.fragment,f),E(e$.$$.fragment,f),E(Q5.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(H5.$$.fragment,f),E(n$.$$.fragment,f),E(J5.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(K5.$$.fragment,f),E(c$.$$.fragment,f),E(A0.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(y0.$$.fragment,f),E(p$.$$.fragment,f),E(j0.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(G0.$$.fragment,f),E(F$.$$.fragment,f),E(ow.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(tw.$$.fragment,f),E(w$.$$.fragment,f),E(hw.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(_w.$$.fragment,f),E($$.$$.fragment,f),E(Lw.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(xw.$$.fragment,f),E(B$.$$.fragment,f),E(Dw.$$.fragment,f),E(N$.$$.fragment,f),E(I$.$$.fragment,f),E(j$.$$.fragment,f),E(Ow.$$.fragment,f),E(D$.$$.fragment,f),E(Zw.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(oA.$$.fragment,f),E(z$.$$.fragment,f),E(cA.$$.fragment,f),E(Q$.$$.fragment,f),E(W$.$$.fragment,f),E(U$.$$.fragment,f),E(mA.$$.fragment,f),E(J$.$$.fragment,f),E(TA.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(ek.$$.fragment,f),E(EA.$$.fragment,f),E(ok.$$.fragment,f),E(wA.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(LA.$$.fragment,f),E(sk.$$.fragment,f),E($A.$$.fragment,f),E(ik.$$.fragment,f),E(dk.$$.fragment,f),E(fk.$$.fragment,f),E(SA.$$.fragment,f),E(mk.$$.fragment,f),E(PA.$$.fragment,f),Yze=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(qf.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(dL.$$.fragment,f),C(Jg.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(pL.$$.fragment,f),C(Sh.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(TL.$$.fragment,f),C(pp.$$.fragment,f),C(_p.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(LL.$$.fragment,f),C(Ip.$$.fragment,f),C(qp.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(Gp.$$.fragment,f),C(RL.$$.fragment,f),C(zu.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(Wu.$$.fragment,f),C(qL.$$.fragment,f),C(D1.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(O1.$$.fragment,f),C(VL.$$.fragment,f),C($2.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(S2.$$.fragment,f),C(HL.$$.fragment,f),C(bb.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(Fb.$$.fragment,f),C(ZL.$$.fragment,f),C(Db.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Ob.$$.fragment,f),C(ay.$$.fragment,f),C(Gv.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(Vv.$$.fragment,f),C(dy.$$.fragment,f),C(T3.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(E3.$$.fragment,f),C(hy.$$.fragment,f),C(k3.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(R3.$$.fragment,f),C(vy.$$.fragment,f),C(uF.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(vF.$$.fragment,f),C(Cy.$$.fragment,f),C(dT.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(fT.$$.fragment,f),C(xy.$$.fragment,f),C(hT.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(_T.$$.fragment,f),C(Py.$$.fragment,f),C(kT.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(RT.$$.fragment,f),C(jy.$$.fragment,f),C(NT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(qT.$$.fragment,f),C(Xy.$$.fragment,f),C(GT.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(VT.$$.fragment,f),C(Uy.$$.fragment,f),C(e8.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(r8.$$.fragment,f),C(e9.$$.fragment,f),C(d8.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(f8.$$.fragment,f),C(n9.$$.fragment,f),C(E8.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(w8.$$.fragment,f),C(c9.$$.fragment,f),C(x8.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(k8.$$.fragment,f),C(_9.$$.fragment,f),C(q8.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(D8.$$.fragment,f),C(T9.$$.fragment,f),C(z8.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(W8.$$.fragment,f),C(A9.$$.fragment,f),C(Y8.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(Z8.$$.fragment,f),C(S9.$$.fragment,f),C(rM.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(N9.$$.fragment,f),C(aM.$$.fragment,f),C(I9.$$.fragment,f),C(fM.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(gM.$$.fragment,f),C(O9.$$.fragment,f),C(_M.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(Q9.$$.fragment,f),C(bM.$$.fragment,f),C(W9.$$.fragment,f),C(g4.$$.fragment,f),C(H9.$$.fragment,f),C(U9.$$.fragment,f),C(Y9.$$.fragment,f),C(p4.$$.fragment,f),C(K9.$$.fragment,f),C(j4.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(G4.$$.fragment,f),C(tx.$$.fragment,f),C(oE.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(tE.$$.fragment,f),C(ix.$$.fragment,f),C(cE.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(mE.$$.fragment,f),C(gx.$$.fragment,f),C(RE.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(BE.$$.fragment,f),C(bx.$$.fragment,f),C(QE.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(HE.$$.fragment,f),C(Ex.$$.fragment,f),C(TC.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(EC.$$.fragment,f),C(yx.$$.fragment,f),C(GC.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(VC.$$.fragment,f),C(Rx.$$.fragment,f),C(QC.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(HC.$$.fragment,f),C(jx.$$.fragment,f),C(JC.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(KC.$$.fragment,f),C(Xx.$$.fragment,f),C(v5.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(T5.$$.fragment,f),C(Ux.$$.fragment,f),C(O5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(X5.$$.fragment,f),C(e$.$$.fragment,f),C(Q5.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(H5.$$.fragment,f),C(n$.$$.fragment,f),C(J5.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(K5.$$.fragment,f),C(c$.$$.fragment,f),C(A0.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(y0.$$.fragment,f),C(p$.$$.fragment,f),C(j0.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(G0.$$.fragment,f),C(F$.$$.fragment,f),C(ow.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(tw.$$.fragment,f),C(w$.$$.fragment,f),C(hw.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(_w.$$.fragment,f),C($$.$$.fragment,f),C(Lw.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(xw.$$.fragment,f),C(B$.$$.fragment,f),C(Dw.$$.fragment,f),C(N$.$$.fragment,f),C(I$.$$.fragment,f),C(j$.$$.fragment,f),C(Ow.$$.fragment,f),C(D$.$$.fragment,f),C(Zw.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(oA.$$.fragment,f),C(z$.$$.fragment,f),C(cA.$$.fragment,f),C(Q$.$$.fragment,f),C(W$.$$.fragment,f),C(U$.$$.fragment,f),C(mA.$$.fragment,f),C(J$.$$.fragment,f),C(TA.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(ek.$$.fragment,f),C(EA.$$.fragment,f),C(ok.$$.fragment,f),C(wA.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(LA.$$.fragment,f),C(sk.$$.fragment,f),C($A.$$.fragment,f),C(ik.$$.fragment,f),C(dk.$$.fragment,f),C(fk.$$.fragment,f),C(SA.$$.fragment,f),C(mk.$$.fragment,f),C(PA.$$.fragment,f),Yze=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(QVe),f&&t(Ri),w(tL),f&&t(WVe),f&&t(qn),f&&t(HVe),w(aL,f),f&&t(UVe),f&&t(qS),f&&t(JVe),w(qf,f),f&&t(YVe),f&&t(Pi),w(nL),f&&t(KVe),f&&t(wo),w(sL),w(dL),w(Jg),w(cL),f&&t(ZVe),f&&t(Ni),w(fL),f&&t(eXe),f&&t(Ao),w(mL),w(pL),w(Sh),w(_L),f&&t(oXe),f&&t(Ii),w(uL),f&&t(rXe),f&&t(Lo),w(bL),w(TL),w(pp),w(_p),w(ML),f&&t(tXe),f&&t(qi),w(EL),f&&t(aXe),f&&t(yo),w(CL),w(LL),w(Ip),w(qp),w(yL),f&&t(nXe),f&&t(Di),w(xL),f&&t(sXe),f&&t(xo),w($L),w(SL),w(Gp),w(RL),w(zu),f&&t(lXe),f&&t(Vi),w(PL),f&&t(iXe),f&&t($o),w(BL),w(IL),w(Wu),w(qL),w(D1),f&&t(dXe),f&&t(Qi),w(jL),f&&t(cXe),f&&t(ko),w(DL),w(OL),w(O1),w(VL),w($2),f&&t(fXe),f&&t(Ui),w(XL),f&&t(mXe),f&&t(So),w(zL),w(WL),w(S2),w(HL),w(bb),f&&t(gXe),f&&t(Ki),w(UL),f&&t(hXe),f&&t(Ro),w(JL),w(KL),w(Fb),w(ZL),w(Db),f&&t(pXe),f&&t(od),w(ey),f&&t(_Xe),f&&t(Po),w(oy),w(ty),w(Ob),w(ay),w(Gv),f&&t(uXe),f&&t(ad),w(ny),f&&t(bXe),f&&t(Bo),w(sy),w(iy),w(Vv),w(dy),w(T3),f&&t(vXe),f&&t(ld),w(cy),f&&t(FXe),f&&t(No),w(fy),w(gy),w(E3),w(hy),w(k3),f&&t(TXe),f&&t(cd),w(py),f&&t(MXe),f&&t(qo),w(_y),w(by),w(R3),w(vy),w(uF),f&&t(EXe),f&&t(gd),w(Fy),f&&t(CXe),f&&t(jo),w(Ty),w(Ey),w(vF),w(Cy),w(dT),f&&t(wXe),f&&t(_d),w(wy),f&&t(AXe),f&&t(Do),w(Ay),w(yy),w(fT),w(xy),w(hT),f&&t(LXe),f&&t(vd),w($y),f&&t(yXe),f&&t(Go),w(ky),w(Ry),w(_T),w(Py),w(kT),f&&t(xXe),f&&t(Md),w(By),f&&t($Xe),f&&t(Oo),w(Ny),w(qy),w(RT),w(jy),w(NT),f&&t(kXe),f&&t(wd),w(Dy),f&&t(SXe),f&&t(Vo),w(Gy),w(Vy),w(qT),w(Xy),w(GT),f&&t(RXe),f&&t(yd),w(zy),f&&t(PXe),f&&t(Xo),w(Qy),w(Hy),w(VT),w(Uy),w(e8),f&&t(BXe),f&&t(kd),w(Jy),f&&t(NXe),f&&t(zo),w(Yy),w(Zy),w(r8),w(e9),w(d8),f&&t(IXe),f&&t(Pd),w(o9),f&&t(qXe),f&&t(Qo),w(r9),w(a9),w(f8),w(n9),w(E8),f&&t(jXe),f&&t(Id),w(s9),f&&t(DXe),f&&t(Wo),w(l9),w(d9),w(w8),w(c9),w(x8),f&&t(GXe),f&&t(Dd),w(m9),f&&t(OXe),f&&t(Ho),w(g9),w(p9),w(k8),w(_9),w(q8),f&&t(VXe),f&&t(Vd),w(u9),f&&t(XXe),f&&t(Uo),w(b9),w(F9),w(D8),w(T9),w(z8),f&&t(zXe),f&&t(Wd),w(M9),f&&t(QXe),f&&t(Jo),w(E9),w(w9),w(W8),w(A9),w(Y8),f&&t(WXe),f&&t(Jd),w(y9),f&&t(HXe),f&&t(Yo),w(x9),w(k9),w(Z8),w(S9),w(rM),f&&t(UXe),f&&t(Zd),w(R9),f&&t(JXe),f&&t(Ko),w(P9),w(N9),w(aM),w(I9),w(fM),f&&t(YXe),f&&t(rc),w(q9),f&&t(KXe),f&&t(Zo),w(j9),w(G9),w(gM),w(O9),w(_M),f&&t(ZXe),f&&t(nc),w(V9),f&&t(eze),f&&t(er),w(X9),w(Q9),w(bM),w(W9),w(g4),f&&t(oze),f&&t(ic),w(H9),f&&t(rze),f&&t(or),w(U9),w(Y9),w(p4),w(K9),w(j4),f&&t(tze),f&&t(fc),w(Z9),f&&t(aze),f&&t(rr),w(ex),w(rx),w(G4),w(tx),w(oE),f&&t(nze),f&&t(hc),w(ax),f&&t(sze),f&&t(tr),w(nx),w(lx),w(tE),w(ix),w(cE),f&&t(lze),f&&t(uc),w(dx),f&&t(ize),f&&t(nr),w(cx),w(mx),w(mE),w(gx),w(RE),f&&t(dze),f&&t(Fc),w(hx),f&&t(cze),f&&t(sr),w(px),w(ux),w(BE),w(bx),w(QE),f&&t(fze),f&&t(Ec),w(vx),f&&t(mze),f&&t(lr),w(Fx),w(Mx),w(HE),w(Ex),w(TC),f&&t(gze),f&&t(Ac),w(Cx),f&&t(hze),f&&t(ir),w(wx),w(Lx),w(EC),w(yx),w(GC),f&&t(pze),f&&t(xc),w(xx),f&&t(_ze),f&&t(dr),w($x),w(Sx),w(VC),w(Rx),w(QC),f&&t(uze),f&&t(Sc),w(Bx),f&&t(bze),f&&t(cr),w(Nx),w(qx),w(HC),w(jx),w(JC),f&&t(vze),f&&t(Bc),w(Dx),f&&t(Fze),f&&t(fr),w(Gx),w(Vx),w(KC),w(Xx),w(v5),f&&t(Tze),f&&t(qc),w(zx),f&&t(Mze),f&&t(mr),w(Qx),w(Hx),w(T5),w(Ux),w(O5),f&&t(Eze),f&&t(Gc),w(Jx),f&&t(Cze),f&&t(gr),w(Yx),w(Zx),w(X5),w(e$),w(Q5),f&&t(wze),f&&t(Xc),w(o$),f&&t(Aze),f&&t(hr),w(r$),w(a$),w(H5),w(n$),w(J5),f&&t(Lze),f&&t(Wc),w(s$),f&&t(yze),f&&t(pr),w(l$),w(d$),w(K5),w(c$),w(A0),f&&t(xze),f&&t(Jc),w(f$),f&&t($ze),f&&t(_r),w(m$),w(h$),w(y0),w(p$),w(j0),f&&t(kze),f&&t(Zc),w(_$),f&&t(Sze),f&&t(ur),w(u$),w(v$),w(G0),w(F$),w(ow),f&&t(Rze),f&&t(rf),w(T$),f&&t(Pze),f&&t(br),w(M$),w(C$),w(tw),w(w$),w(hw),f&&t(Bze),f&&t(nf),w(A$),f&&t(Nze),f&&t(vr),w(L$),w(x$),w(_w),w($$),w(Lw),f&&t(Ize),f&&t(df),w(k$),f&&t(qze),f&&t(Fr),w(S$),w(P$),w(xw),w(B$),w(Dw),f&&t(jze),f&&t(mf),w(N$),f&&t(Dze),f&&t(Tr),w(I$),w(j$),w(Ow),w(D$),w(Zw),f&&t(Gze),f&&t(pf),w(G$),f&&t(Oze),f&&t(Mr),w(O$),w(X$),w(oA),w(z$),w(cA),f&&t(Vze),f&&t(bf),w(Q$),f&&t(Xze),f&&t(Er),w(W$),w(U$),w(mA),w(J$),w(TA),f&&t(zze),f&&t(Tf),w(Y$),f&&t(Qze),f&&t(Cr),w(K$),w(ek),w(EA),w(ok),w(wA),f&&t(Wze),f&&t(Cf),w(rk),f&&t(Hze),f&&t(wr),w(tk),w(nk),w(LA),w(sk),w($A),f&&t(Uze),f&&t(Lf),w(ik),f&&t(Jze),f&&t(Ar),w(dk),w(fk),w(SA),w(mk),w(PA)}}}const FHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function THt($){return vQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class yHt extends pQt{constructor(g){super();_Qt(this,g,THt,vHt,uQt,{})}}export{yHt as default,FHt as metadata};
